
/home/nick/software/visual_alert/visual_alerts_inferencing/target/5.0.0/p2/visual_alerts_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f7000  085f7000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085f7018  085f7018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f7c50  085f7088  00007c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000083a0  023f7c60  085f7090  00007c60  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data_alt     00000000  02400000  02400000  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  02400000  02400000  00020000  2**0
                  CONTENTS
  6 .data         000002a0  10079e48  085ff430  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bdsram.data  00000800  1007a100  085ff6d0  0001a100  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000700  1007a900  1007a900  0002a900  2**5
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ffed0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 000000e4  085ffed4  085ffed4  0001fed4  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001fed4  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00152072  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00015393  00000000  00000000  00172072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003368  00000000  00000000  00187405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000298f6  00000000  00000000  0018a76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c926  00000000  00000000  001b4063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00111b61  00000000  00000000  00200989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0004dff8  00000000  00000000  003124ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 0000d608  00000000  00000000  003604e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009c44  00000000  00000000  0036daec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f7018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f7018:	480e      	ldr	r0, [pc, #56]	; (85f7054 <module_user_pre_init+0x3c>)
 85f701a:	490f      	ldr	r1, [pc, #60]	; (85f7058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f701c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f701e:	4288      	cmp	r0, r1
 85f7020:	d005      	beq.n	85f702e <module_user_pre_init+0x16>
 85f7022:	4a0e      	ldr	r2, [pc, #56]	; (85f705c <module_user_pre_init+0x44>)
 85f7024:	4282      	cmp	r2, r0
 85f7026:	d002      	beq.n	85f702e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f7028:	4b0d      	ldr	r3, [pc, #52]	; (85f7060 <module_user_pre_init+0x48>)
 85f702a:	1a12      	subs	r2, r2, r0
 85f702c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f702e:	480d      	ldr	r0, [pc, #52]	; (85f7064 <module_user_pre_init+0x4c>)
 85f7030:	4a0d      	ldr	r2, [pc, #52]	; (85f7068 <module_user_pre_init+0x50>)
 85f7032:	2100      	movs	r1, #0
 85f7034:	4b0d      	ldr	r3, [pc, #52]	; (85f706c <module_user_pre_init+0x54>)
 85f7036:	1a12      	subs	r2, r2, r0
 85f7038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f703a:	480d      	ldr	r0, [pc, #52]	; (85f7070 <module_user_pre_init+0x58>)
 85f703c:	490d      	ldr	r1, [pc, #52]	; (85f7074 <module_user_pre_init+0x5c>)
 85f703e:	4288      	cmp	r0, r1
 85f7040:	d005      	beq.n	85f704e <module_user_pre_init+0x36>
 85f7042:	4a0d      	ldr	r2, [pc, #52]	; (85f7078 <module_user_pre_init+0x60>)
 85f7044:	4282      	cmp	r2, r0
 85f7046:	d002      	beq.n	85f704e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f7048:	4b05      	ldr	r3, [pc, #20]	; (85f7060 <module_user_pre_init+0x48>)
 85f704a:	1a12      	subs	r2, r2, r0
 85f704c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f704e:	4801      	ldr	r0, [pc, #4]	; (85f7054 <module_user_pre_init+0x3c>)
 85f7050:	bd08      	pop	{r3, pc}
 85f7052:	bf00      	nop
 85f7054:	10079e48 	.word	0x10079e48
 85f7058:	085ff430 	.word	0x085ff430
 85f705c:	1007a0e8 	.word	0x1007a0e8
 85f7060:	10110d2d 	.word	0x10110d2d
 85f7064:	1007a900 	.word	0x1007a900
 85f7068:	1007b000 	.word	0x1007b000
 85f706c:	10110ea1 	.word	0x10110ea1
 85f7070:	023f7c50 	.word	0x023f7c50
 85f7074:	085f7088 	.word	0x085f7088
 85f7078:	02400000 	.word	0x02400000

085f707c <dynalib_preinit>:
 85f707c:	085f7019 00000000                       .p_.....

Disassembly of section .psram_text:

023f7c60 <strcmp>:
 23f7c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f7c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f7c68:	2a01      	cmp	r2, #1
 23f7c6a:	bf28      	it	cs
 23f7c6c:	429a      	cmpcs	r2, r3
 23f7c6e:	d0f7      	beq.n	23f7c60 <strcmp>
 23f7c70:	1ad0      	subs	r0, r2, r3
 23f7c72:	4770      	bx	lr

023f7c74 <strlen>:
 23f7c74:	4603      	mov	r3, r0
 23f7c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f7c7a:	2a00      	cmp	r2, #0
 23f7c7c:	d1fb      	bne.n	23f7c76 <strlen+0x2>
 23f7c7e:	1a18      	subs	r0, r3, r0
 23f7c80:	3801      	subs	r0, #1
 23f7c82:	4770      	bx	lr

023f7c84 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f7c84:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f7c86:	f001 ffd7 	bl	23f9c38 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f7c8a:	2500      	movs	r5, #0
 23f7c8c:	4e05      	ldr	r6, [pc, #20]	; (23f7ca4 <module_user_init+0x20>)
 23f7c8e:	4c06      	ldr	r4, [pc, #24]	; (23f7ca8 <module_user_init+0x24>)
 23f7c90:	1ba4      	subs	r4, r4, r6
 23f7c92:	08a4      	lsrs	r4, r4, #2
 23f7c94:	42ac      	cmp	r4, r5
 23f7c96:	d100      	bne.n	23f7c9a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f7c98:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f7c9a:	f856 3b04 	ldr.w	r3, [r6], #4
 23f7c9e:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f7ca0:	3501      	adds	r5, #1
 23f7ca2:	e7f7      	b.n	23f7c94 <module_user_init+0x10>
 23f7ca4:	023fffd4 	.word	0x023fffd4
 23f7ca8:	02400000 	.word	0x02400000

023f7cac <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f7cac:	f000 bbf6 	b.w	23f849c <setup>

023f7cb0 <module_user_loop>:
}

void module_user_loop() {
 23f7cb0:	b508      	push	{r3, lr}
    loop();
 23f7cb2:	f000 fc7b 	bl	23f85ac <loop>
    _post_loop();
}
 23f7cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f7cba:	f001 bf75 	b.w	23f9ba8 <_post_loop>

023f7cbe <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f7cbe:	f001 ba91 	b.w	23f91e4 <malloc>

023f7cc2 <_Znaj>:
 23f7cc2:	f001 ba8f 	b.w	23f91e4 <malloc>

023f7cc6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f7cc6:	f001 ba9b 	b.w	23f9200 <free>

023f7cca <__wrap_printf>:
// and we'll leak memory. Stub it out
int __wrap_puts(const char* s) {
    return -1;
}

int __wrap_printf(const char* fmt, ...) {
 23f7cca:	b40f      	push	{r0, r1, r2, r3}
    return -1;
}
 23f7ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f7cd0:	b004      	add	sp, #16
 23f7cd2:	4770      	bx	lr

023f7cd4 <__cxa_pure_virtual>:

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f7cd4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f7cd6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f7cd8:	4a02      	ldr	r2, [pc, #8]	; (23f7ce4 <__cxa_pure_virtual+0x10>)
 23f7cda:	4903      	ldr	r1, [pc, #12]	; (23f7ce8 <__cxa_pure_virtual+0x14>)
 23f7cdc:	f001 f940 	bl	23f8f60 <panic_>
  while (1);
 23f7ce0:	e7fe      	b.n	23f7ce0 <__cxa_pure_virtual+0xc>
 23f7ce2:	bf00      	nop
 23f7ce4:	023f8ed5 	.word	0x023f8ed5
 23f7ce8:	023fdcd0 	.word	0x023fdcd0

023f7cec <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f7cec:	7800      	ldrb	r0, [r0, #0]
 23f7cee:	fab0 f080 	clz	r0, r0
 23f7cf2:	0940      	lsrs	r0, r0, #5
 23f7cf4:	4770      	bx	lr

023f7cf6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f7cf6:	2301      	movs	r3, #1
 23f7cf8:	7003      	strb	r3, [r0, #0]
 23f7cfa:	4770      	bx	lr

023f7cfc <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f7cfc:	0409      	lsls	r1, r1, #16
 23f7cfe:	4a06      	ldr	r2, [pc, #24]	; (23f7d18 <AUDIO_SI_WriteReg+0x1c>)
 23f7d00:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23f7d04:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f7d08:	4b04      	ldr	r3, [pc, #16]	; (23f7d1c <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f7d0a:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f7d0c:	6811      	ldr	r1, [r2, #0]
 23f7d0e:	07c9      	lsls	r1, r1, #31
 23f7d10:	d501      	bpl.n	23f7d16 <AUDIO_SI_WriteReg+0x1a>
 23f7d12:	3b01      	subs	r3, #1
 23f7d14:	d1fa      	bne.n	23f7d0c <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23f7d16:	4770      	bx	lr
 23f7d18:	40010000 	.word	0x40010000
 23f7d1c:	000186a0 	.word	0x000186a0

023f7d20 <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23f7d20:	4a06      	ldr	r2, [pc, #24]	; (23f7d3c <AUDIO_SI_ReadReg+0x1c>)
 23f7d22:	0200      	lsls	r0, r0, #8
 23f7d24:	f040 0010 	orr.w	r0, r0, #16
 23f7d28:	6010      	str	r0, [r2, #0]
 23f7d2a:	4805      	ldr	r0, [pc, #20]	; (23f7d40 <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23f7d2c:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23f7d2e:	06d9      	lsls	r1, r3, #27
 23f7d30:	d502      	bpl.n	23f7d38 <AUDIO_SI_ReadReg+0x18>
 23f7d32:	3801      	subs	r0, #1
 23f7d34:	d1fa      	bne.n	23f7d2c <AUDIO_SI_ReadReg+0xc>
 23f7d36:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23f7d38:	0c18      	lsrs	r0, r3, #16
}
 23f7d3a:	4770      	bx	lr
 23f7d3c:	40010000 	.word	0x40010000
 23f7d40:	000186a0 	.word	0x000186a0

023f7d44 <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23f7d44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f7d48:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f7d4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23f7d4e:	461d      	mov	r5, r3
 23f7d50:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f7d52:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23f7d56:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23f7d58:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23f7d5c:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f7d5e:	bf4c      	ite	mi
 23f7d60:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f7d64:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f7d68:	f015 0410 	ands.w	r4, r5, #16
{
 23f7d6c:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23f7d6e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f7d72:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f7d76:	d059      	beq.n	23f7e2c <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23f7d78:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f7d7c:	2012      	movs	r0, #18
 23f7d7e:	f7ff ffbd 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23f7d82:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f7d86:	2015      	movs	r0, #21
 23f7d88:	f7ff ffb8 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f7d8c:	201b      	movs	r0, #27
 23f7d8e:	f7ff ffc7 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23f7d92:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f7d96:	b281      	uxth	r1, r0
 23f7d98:	201b      	movs	r0, #27
 23f7d9a:	f7ff ffaf 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f7d9e:	201b      	movs	r0, #27
 23f7da0:	f7ff ffbe 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23f7da4:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f7da8:	b281      	uxth	r1, r0
 23f7daa:	201b      	movs	r0, #27
 23f7dac:	f7ff ffa6 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f7db0:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f7db4:	2018      	movs	r0, #24
 23f7db6:	f7ff ffa1 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f7dba:	20fb      	movs	r0, #251	; 0xfb
 23f7dbc:	f7ff ffb0 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23f7dc0:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23f7dc4:	b281      	uxth	r1, r0
 23f7dc6:	20fb      	movs	r0, #251	; 0xfb
 23f7dc8:	f7ff ff98 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f7dcc:	2011      	movs	r0, #17
 23f7dce:	f7ff ffa7 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23f7dd2:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f7dd6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f7dda:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f7ddc:	2011      	movs	r0, #17
 23f7dde:	f7ff ff8d 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f7de2:	2014      	movs	r0, #20
 23f7de4:	f7ff ff9c 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23f7de8:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f7dec:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f7df0:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23f7df2:	2014      	movs	r0, #20
 23f7df4:	f7ff ff82 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f7df8:	2018      	movs	r0, #24
 23f7dfa:	f7ff ff91 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f7dfe:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f7e02:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f7e06:	b281      	uxth	r1, r0
 23f7e08:	2018      	movs	r0, #24
 23f7e0a:	f7ff ff77 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f7e0e:	2117      	movs	r1, #23
 23f7e10:	201b      	movs	r0, #27
 23f7e12:	f7ff ff73 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f7e16:	4649      	mov	r1, r9
 23f7e18:	2017      	movs	r0, #23
 23f7e1a:	f7ff ff6f 	bl	23f7cfc <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23f7e1e:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f7e20:	2010      	movs	r0, #16
}
 23f7e22:	b002      	add	sp, #8
 23f7e24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f7e28:	f7ff bf68 	b.w	23f7cfc <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23f7e2c:	2003      	movs	r0, #3
 23f7e2e:	f7ff ff77 	bl	23f7d20 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f7e32:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23f7e36:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f7e3a:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f7e3c:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f7e3e:	f7ff ff5d 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f7e42:	f015 0a08 	ands.w	sl, r5, #8
 23f7e46:	d04a      	beq.n	23f7ede <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23f7e48:	2018      	movs	r0, #24
 23f7e4a:	f7ff ff69 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23f7e4e:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f7e52:	b281      	uxth	r1, r0
 23f7e54:	2018      	movs	r0, #24
 23f7e56:	f7ff ff51 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f7e5a:	4620      	mov	r0, r4
 23f7e5c:	f7ff ff60 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23f7e60:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f7e64:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23f7e68:	f041 0103 	orr.w	r1, r1, #3
 23f7e6c:	4620      	mov	r0, r4
 23f7e6e:	f7ff ff45 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f7e72:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23f7e76:	2001      	movs	r0, #1
 23f7e78:	f7ff ff40 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f7e7c:	2002      	movs	r0, #2
 23f7e7e:	f7ff ff4f 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f7e82:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f7e86:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f7e8a:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f7e8e:	2002      	movs	r0, #2
 23f7e90:	f7ff ff34 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f7e94:	2110      	movs	r1, #16
 23f7e96:	200c      	movs	r0, #12
 23f7e98:	f7ff ff30 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f7e9c:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23f7ea0:	2001      	movs	r0, #1
 23f7ea2:	f7ff ff2b 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f7ea6:	2002      	movs	r0, #2
 23f7ea8:	f7ff ff3a 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23f7eac:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f7eb0:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f7eb4:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23f7eb8:	2002      	movs	r0, #2
 23f7eba:	f7ff ff1f 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f7ebe:	4620      	mov	r0, r4
 23f7ec0:	f7ff ff2e 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23f7ec4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f7ec8:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23f7ecc:	f041 0103 	orr.w	r1, r1, #3
 23f7ed0:	4620      	mov	r0, r4
 23f7ed2:	f7ff ff13 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f7ed6:	2118      	movs	r1, #24
 23f7ed8:	200c      	movs	r0, #12
 23f7eda:	f7ff ff0f 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f7ede:	f015 0405 	ands.w	r4, r5, #5
 23f7ee2:	d02f      	beq.n	23f7f44 <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23f7ee4:	2002      	movs	r0, #2
 23f7ee6:	f7ff ff1b 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f7eea:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23f7eee:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f7ef2:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f7ef4:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f7ef6:	f7ff ff01 	bl	23f7cfc <AUDIO_SI_WriteReg>
		DelayUs(5);
 23f7efa:	2005      	movs	r0, #5
 23f7efc:	f005 febc 	bl	23fdc78 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23f7f00:	07ea      	lsls	r2, r5, #31
 23f7f02:	d57f      	bpl.n	23f8004 <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23f7f04:	200c      	movs	r0, #12
 23f7f06:	f7ff ff0b 	bl	23f7d20 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23f7f0a:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23f7f0e:	b281      	uxth	r1, r0
 23f7f10:	200c      	movs	r0, #12
 23f7f12:	f7ff fef3 	bl	23f7cfc <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23f7f16:	2002      	movs	r0, #2
 23f7f18:	f7ff ff02 	bl	23f7d20 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23f7f1c:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f7f20:	b281      	uxth	r1, r0
 23f7f22:	2002      	movs	r0, #2
 23f7f24:	f7ff feea 	bl	23f7cfc <AUDIO_SI_WriteReg>
			DelayUs(100);
 23f7f28:	2064      	movs	r0, #100	; 0x64
 23f7f2a:	f005 fea5 	bl	23fdc78 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23f7f2e:	2003      	movs	r0, #3
 23f7f30:	f7ff fef6 	bl	23f7d20 <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f7f34:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23f7f38:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23f7f3c:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f7f3e:	2003      	movs	r0, #3
 23f7f40:	f7ff fedc 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23f7f44:	f015 0f0d 	tst.w	r5, #13
 23f7f48:	d002      	beq.n	23f7f50 <CODEC_Init+0x20c>
		DelayMs(200);
 23f7f4a:	20c8      	movs	r0, #200	; 0xc8
 23f7f4c:	f005 fea4 	bl	23fdc98 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f7f50:	f1ba 0f00 	cmp.w	sl, #0
 23f7f54:	d020      	beq.n	23f7f98 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f7f56:	2000      	movs	r0, #0
 23f7f58:	f7ff fee2 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23f7f5c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f7f60:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23f7f64:	f041 0103 	orr.w	r1, r1, #3
 23f7f68:	2000      	movs	r0, #0
 23f7f6a:	f7ff fec7 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f7f6e:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23f7f72:	2001      	movs	r0, #1
 23f7f74:	f7ff fec2 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f7f78:	2002      	movs	r0, #2
 23f7f7a:	f7ff fed1 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f7f7e:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f7f82:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f7f86:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f7f8a:	2002      	movs	r0, #2
 23f7f8c:	f7ff feb6 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f7f90:	2110      	movs	r1, #16
 23f7f92:	200c      	movs	r0, #12
 23f7f94:	f7ff feb2 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f7f98:	b16c      	cbz	r4, 23f7fb6 <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23f7f9a:	2000      	movs	r0, #0
 23f7f9c:	f7ff fec0 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23f7fa0:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23f7fa4:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f7fa8:	b281      	uxth	r1, r0
 23f7faa:	2000      	movs	r0, #0
 23f7fac:	f7ff fea6 	bl	23f7cfc <AUDIO_SI_WriteReg>
		DelayUs(50);
 23f7fb0:	2032      	movs	r0, #50	; 0x32
 23f7fb2:	f005 fe61 	bl	23fdc78 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f7fb6:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f7fba:	2018      	movs	r0, #24
 23f7fbc:	f7ff fe9e 	bl	23f7cfc <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23f7fc0:	f246 3120 	movw	r1, #25376	; 0x6320
 23f7fc4:	2011      	movs	r0, #17
 23f7fc6:	f7ff fe99 	bl	23f7cfc <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23f7fca:	f246 3120 	movw	r1, #25376	; 0x6320
 23f7fce:	2014      	movs	r0, #20
 23f7fd0:	f7ff fe94 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f7fd4:	b364      	cbz	r4, 23f8030 <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f7fd6:	2012      	movs	r0, #18
 23f7fd8:	f7ff fea2 	bl	23f7d20 <AUDIO_SI_ReadReg>
 23f7fdc:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f7fde:	2015      	movs	r0, #21
 23f7fe0:	f7ff fe9e 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23f7fe4:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23f7fe8:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23f7fec:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23f7fee:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23f7ff2:	2e09      	cmp	r6, #9
 23f7ff4:	d80e      	bhi.n	23f8014 <CODEC_Init+0x2d0>
 23f7ff6:	e8df f006 	tbb	[pc, r6]
 23f7ffa:	c0bb      	.short	0xc0bb
 23f7ffc:	0d0db60d 	.word	0x0d0db60d
 23f8000:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23f8004:	2003      	movs	r0, #3
 23f8006:	f7ff fe8b 	bl	23f7d20 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f800a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f800e:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23f8012:	e794      	b.n	23f7f3e <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f8014:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f8018:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f801c:	2012      	movs	r0, #18
 23f801e:	f7ff fe6d 	bl	23f7cfc <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23f8022:	2015      	movs	r0, #21
 23f8024:	4651      	mov	r1, sl
 23f8026:	f7ff fe69 	bl	23f7cfc <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23f802a:	2032      	movs	r0, #50	; 0x32
 23f802c:	f005 fe34 	bl	23fdc98 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f8030:	2117      	movs	r1, #23
 23f8032:	201b      	movs	r0, #27
 23f8034:	f7ff fe62 	bl	23f7cfc <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f8038:	4649      	mov	r1, r9
 23f803a:	2017      	movs	r0, #23
 23f803c:	f7ff fe5e 	bl	23f7cfc <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f8040:	20fb      	movs	r0, #251	; 0xfb
 23f8042:	f7ff fe6d 	bl	23f7d20 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23f8046:	f020 0106 	bic.w	r1, r0, #6
 23f804a:	f041 0108 	orr.w	r1, r1, #8
 23f804e:	b289      	uxth	r1, r1
 23f8050:	20fb      	movs	r0, #251	; 0xfb
 23f8052:	f7ff fe53 	bl	23f7cfc <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23f8056:	20fd      	movs	r0, #253	; 0xfd
 23f8058:	f7ff fe62 	bl	23f7d20 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23f805c:	f020 0106 	bic.w	r1, r0, #6
 23f8060:	f041 0108 	orr.w	r1, r1, #8
 23f8064:	b289      	uxth	r1, r1
 23f8066:	20fd      	movs	r0, #253	; 0xfd
 23f8068:	f7ff fe48 	bl	23f7cfc <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23f806c:	2027      	movs	r0, #39	; 0x27
 23f806e:	f7ff fe57 	bl	23f7d20 <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23f8072:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23f8076:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23f8078:	b90f      	cbnz	r7, 23f807e <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23f807a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23f807e:	2027      	movs	r0, #39	; 0x27
 23f8080:	f7ff fe3c 	bl	23f7cfc <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23f8084:	20fa      	movs	r0, #250	; 0xfa
 23f8086:	f7ff fe4b 	bl	23f7d20 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23f808a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23f808e:	0540      	lsls	r0, r0, #21
 23f8090:	0d40      	lsrs	r0, r0, #21
 23f8092:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23f8096:	20fa      	movs	r0, #250	; 0xfa
 23f8098:	9101      	str	r1, [sp, #4]
 23f809a:	f7ff fe2f 	bl	23f7cfc <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23f809e:	20fc      	movs	r0, #252	; 0xfc
 23f80a0:	9901      	ldr	r1, [sp, #4]
 23f80a2:	f7ff fe2b 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23f80a6:	07ab      	lsls	r3, r5, #30
 23f80a8:	d540      	bpl.n	23f812c <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f80aa:	2011      	movs	r0, #17
 23f80ac:	f7ff fe38 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23f80b0:	4c34      	ldr	r4, [pc, #208]	; (23f8184 <CODEC_Init+0x440>)
 23f80b2:	4020      	ands	r0, r4
 23f80b4:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f80b8:	f041 0119 	orr.w	r1, r1, #25
 23f80bc:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f80be:	2011      	movs	r0, #17
 23f80c0:	f7ff fe1c 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f80c4:	2012      	movs	r0, #18
 23f80c6:	f7ff fe2b 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f80ca:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f80ce:	b281      	uxth	r1, r0
 23f80d0:	2012      	movs	r0, #18
 23f80d2:	f7ff fe13 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f80d6:	2014      	movs	r0, #20
 23f80d8:	f7ff fe22 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23f80dc:	4020      	ands	r0, r4
 23f80de:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f80e2:	f041 0118 	orr.w	r1, r1, #24
 23f80e6:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23f80e8:	2014      	movs	r0, #20
 23f80ea:	f7ff fe07 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f80ee:	2015      	movs	r0, #21
 23f80f0:	f7ff fe16 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f80f4:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23f80f8:	b281      	uxth	r1, r0
 23f80fa:	2015      	movs	r0, #21
 23f80fc:	f7ff fdfe 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f8100:	2017      	movs	r0, #23
 23f8102:	f7ff fe0d 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23f8106:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23f810a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23f810e:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f8110:	2017      	movs	r0, #23
 23f8112:	f7ff fdf3 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f8116:	2018      	movs	r0, #24
 23f8118:	f7ff fe02 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f811c:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f8120:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f8124:	b281      	uxth	r1, r0
 23f8126:	2018      	movs	r0, #24
 23f8128:	f7ff fde8 	bl	23f7cfc <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23f812c:	f026 0608 	bic.w	r6, r6, #8
 23f8130:	2e01      	cmp	r6, #1
 23f8132:	d113      	bne.n	23f815c <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f8134:	2017      	movs	r0, #23
 23f8136:	f7ff fdf3 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23f813a:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23f813e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23f8142:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f8144:	2017      	movs	r0, #23
 23f8146:	f7ff fdd9 	bl	23f7cfc <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f814a:	201b      	movs	r0, #27
 23f814c:	f7ff fde8 	bl	23f7d20 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23f8150:	f020 000c 	bic.w	r0, r0, #12
 23f8154:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f8156:	201b      	movs	r0, #27
 23f8158:	f7ff fdd0 	bl	23f7cfc <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23f815c:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f8160:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23f8164:	e65c      	b.n	23f7e20 <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f8166:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f816a:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23f816e:	e755      	b.n	23f801c <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f8170:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f8174:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23f8178:	e750      	b.n	23f801c <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f817a:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f817e:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23f8182:	e74b      	b.n	23f801c <CODEC_Init+0x2d8>
 23f8184:	ffffdffe 	.word	0xffffdffe

023f8188 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23f8188:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f818a:	4a05      	ldr	r2, [pc, #20]	; (23f81a0 <sp_get_ready_rx_page+0x18>)
 23f818c:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23f8190:	434b      	muls	r3, r1
 23f8192:	18d1      	adds	r1, r2, r3
 23f8194:	5cd3      	ldrb	r3, [r2, r3]
 23f8196:	b90b      	cbnz	r3, 23f819c <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23f8198:	6848      	ldr	r0, [r1, #4]
 23f819a:	4770      	bx	lr
		return NULL;
 23f819c:	2000      	movs	r0, #0
	}
}
 23f819e:	4770      	bx	lr
 23f81a0:	1007aa00 	.word	0x1007aa00

023f81a4 <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23f81a4:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f81a6:	4d0c      	ldr	r5, [pc, #48]	; (23f81d8 <sp_read_rx_page+0x34>)
{
 23f81a8:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f81aa:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23f81ae:	b128      	cbz	r0, 23f81bc <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23f81b0:	230c      	movs	r3, #12
 23f81b2:	fb03 5304 	mla	r3, r3, r4, r5
 23f81b6:	6859      	ldr	r1, [r3, #4]
 23f81b8:	f005 fbbb 	bl	23fd932 <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23f81bc:	230c      	movs	r3, #12
 23f81be:	2201      	movs	r2, #1
 23f81c0:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23f81c2:	4414      	add	r4, r2
 23f81c4:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23f81c6:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23f81c8:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23f81ca:	bf0a      	itet	eq
 23f81cc:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23f81ce:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23f81d2:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23f81d6:	bd38      	pop	{r3, r4, r5, pc}
 23f81d8:	1007aa00 	.word	0x1007aa00

023f81dc <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23f81dc:	4a09      	ldr	r2, [pc, #36]	; (23f8204 <sp_release_rx_page+0x28>)
 23f81de:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23f81e2:	b969      	cbnz	r1, 23f8200 <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23f81e4:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f81e6:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23f81ea:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23f81ec:	3301      	adds	r3, #1
 23f81ee:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f81f0:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23f81f2:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f81f4:	d002      	beq.n	23f81fc <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23f81f6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23f81fa:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23f81fc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23f8200:	4770      	bx	lr
 23f8202:	bf00      	nop
 23f8204:	1007aa00 	.word	0x1007aa00

023f8208 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23f8208:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f820a:	4b08      	ldr	r3, [pc, #32]	; (23f822c <sp_get_free_rx_page+0x24>)
 23f820c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23f8210:	434a      	muls	r2, r1
 23f8212:	1899      	adds	r1, r3, r2
 23f8214:	5c9a      	ldrb	r2, [r3, r2]
 23f8216:	b122      	cbz	r2, 23f8222 <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23f8218:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23f821a:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23f821c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23f8220:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23f8222:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23f8224:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23f8226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23f822a:	4770      	bx	lr
 23f822c:	1007aa00 	.word	0x1007aa00

023f8230 <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23f8230:	4b06      	ldr	r3, [pc, #24]	; (23f824c <sp_get_free_rx_length+0x1c>)
 23f8232:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23f8236:	b10a      	cbz	r2, 23f823c <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23f8238:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23f823a:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23f823c:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f823e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23f8242:	fb01 3302 	mla	r3, r1, r2, r3
 23f8246:	6898      	ldr	r0, [r3, #8]
	}
}
 23f8248:	4770      	bx	lr
 23f824a:	bf00      	nop
 23f824c:	1007aa00 	.word	0x1007aa00

023f8250 <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23f8250:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f8252:	4b21      	ldr	r3, [pc, #132]	; (23f82d8 <sp_rx_complete+0x88>)
 23f8254:	4604      	mov	r4, r0
 23f8256:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f8258:	03d8      	lsls	r0, r3, #15
 23f825a:	d51a      	bpl.n	23f8292 <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23f825c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23f825e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f8260:	06d9      	lsls	r1, r3, #27
 23f8262:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23f8266:	d008      	beq.n	23f827a <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f8268:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f826c:	3b01      	subs	r3, #1
 23f826e:	4413      	add	r3, r2
 23f8270:	f023 031f 	bic.w	r3, r3, #31
 23f8274:	3320      	adds	r3, #32
 23f8276:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f8278:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f827a:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23f827e:	4816      	ldr	r0, [pc, #88]	; (23f82d8 <sp_rx_complete+0x88>)
 23f8280:	4413      	add	r3, r2
    while (op_size > 0) {
 23f8282:	2a00      	cmp	r2, #0
 23f8284:	eba3 0102 	sub.w	r1, r3, r2
 23f8288:	dc21      	bgt.n	23f82ce <sp_rx_complete+0x7e>
 23f828a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f828e:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23f8292:	7861      	ldrb	r1, [r4, #1]
 23f8294:	4b11      	ldr	r3, [pc, #68]	; (23f82dc <sp_rx_complete+0x8c>)
 23f8296:	7820      	ldrb	r0, [r4, #0]
 23f8298:	4798      	blx	r3

	sp_release_rx_page();
 23f829a:	f7ff ff9f 	bl	23f81dc <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23f829e:	f7ff ffb3 	bl	23f8208 <sp_get_free_rx_page>
 23f82a2:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23f82a4:	f7ff ffc4 	bl	23f8230 <sp_get_free_rx_length>
 23f82a8:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23f82aa:	9a01      	ldr	r2, [sp, #4]
 23f82ac:	7861      	ldrb	r1, [r4, #1]
 23f82ae:	7820      	ldrb	r0, [r4, #0]
 23f82b0:	4b0b      	ldr	r3, [pc, #44]	; (23f82e0 <sp_rx_complete+0x90>)
 23f82b2:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23f82b4:	7861      	ldrb	r1, [r4, #1]
 23f82b6:	7820      	ldrb	r0, [r4, #0]
 23f82b8:	08aa      	lsrs	r2, r5, #2
 23f82ba:	4b0a      	ldr	r3, [pc, #40]	; (23f82e4 <sp_rx_complete+0x94>)
 23f82bc:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f82be:	2201      	movs	r2, #1
 23f82c0:	7861      	ldrb	r1, [r4, #1]
 23f82c2:	7820      	ldrb	r0, [r4, #0]
 23f82c4:	4b08      	ldr	r3, [pc, #32]	; (23f82e8 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23f82c6:	b003      	add	sp, #12
 23f82c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f82cc:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23f82ce:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f82d2:	3a20      	subs	r2, #32
 23f82d4:	e7d5      	b.n	23f8282 <sp_rx_complete+0x32>
 23f82d6:	bf00      	nop
 23f82d8:	e000ed00 	.word	0xe000ed00
 23f82dc:	1010bda5 	.word	0x1010bda5
 23f82e0:	1010c2b9 	.word	0x1010c2b9
 23f82e4:	1010c309 	.word	0x1010c309
 23f82e8:	1010bf91 	.word	0x1010bf91

023f82ec <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23f82ec:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23f82f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23f82f2:	d01c      	beq.n	23f832e <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23f82f4:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23f82f8:	bf14      	ite	ne
 23f82fa:	2505      	movne	r5, #5
 23f82fc:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f82fe:	4b37      	ldr	r3, [pc, #220]	; (23f83dc <dmic_setup+0xf0>)
 23f8300:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f8302:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f8306:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23f8308:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23f830c:	2201      	movs	r2, #1
 23f830e:	4608      	mov	r0, r1
 23f8310:	4f33      	ldr	r7, [pc, #204]	; (23f83e0 <dmic_setup+0xf4>)
 23f8312:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23f8314:	4933      	ldr	r1, [pc, #204]	; (23f83e4 <dmic_setup+0xf8>)
 23f8316:	2201      	movs	r2, #1
 23f8318:	4608      	mov	r0, r1
 23f831a:	47b8      	blx	r7
 23f831c:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f831e:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23f8320:	2b04      	cmp	r3, #4
 23f8322:	d807      	bhi.n	23f8334 <dmic_setup+0x48>
 23f8324:	e8df f003 	tbb	[pc, r3]
 23f8328:	06560605 	.word	0x06560605
 23f832c:	58          	.byte	0x58
 23f832d:	00          	.byte	0x00
	switch(sampleRate) {
 23f832e:	2507      	movs	r5, #7
 23f8330:	e7e5      	b.n	23f82fe <dmic_setup+0x12>
			div = 12;
 23f8332:	260c      	movs	r6, #12
	PLL_Div(div);
 23f8334:	4630      	mov	r0, r6
 23f8336:	f005 f823 	bl	23fd380 <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23f833a:	2302      	movs	r3, #2
 23f833c:	4622      	mov	r2, r4
 23f833e:	4628      	mov	r0, r5
 23f8340:	2100      	movs	r1, #0
 23f8342:	f7ff fcff 	bl	23f7d44 <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23f8346:	4d28      	ldr	r5, [pc, #160]	; (23f83e8 <dmic_setup+0xfc>)
 23f8348:	2100      	movs	r1, #0
 23f834a:	2021      	movs	r0, #33	; 0x21
 23f834c:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23f834e:	2100      	movs	r1, #0
 23f8350:	2022      	movs	r0, #34	; 0x22
 23f8352:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23f8354:	4d25      	ldr	r5, [pc, #148]	; (23f83ec <dmic_setup+0x100>)
 23f8356:	210c      	movs	r1, #12
 23f8358:	2021      	movs	r0, #33	; 0x21
 23f835a:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23f835c:	210c      	movs	r1, #12
 23f835e:	2022      	movs	r0, #34	; 0x22
 23f8360:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f8362:	4b23      	ldr	r3, [pc, #140]	; (23f83f0 <dmic_setup+0x104>)
 23f8364:	4a23      	ldr	r2, [pc, #140]	; (23f83f4 <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f8366:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f8368:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23f836a:	2280      	movs	r2, #128	; 0x80
 23f836c:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23f836e:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f8370:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f8374:	4920      	ldr	r1, [pc, #128]	; (23f83f8 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23f8376:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23f8378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f837c:	3201      	adds	r2, #1
 23f837e:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f8380:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f8384:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f8386:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23f838a:	f103 030c 	add.w	r3, r3, #12
 23f838e:	d1f5      	bne.n	23f837c <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f8390:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23f8392:	4d1a      	ldr	r5, [pc, #104]	; (23f83fc <dmic_setup+0x110>)
 23f8394:	4b1a      	ldr	r3, [pc, #104]	; (23f8400 <dmic_setup+0x114>)
 23f8396:	4628      	mov	r0, r5
 23f8398:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f839a:	4629      	mov	r1, r5
 23f839c:	4819      	ldr	r0, [pc, #100]	; (23f8404 <dmic_setup+0x118>)
 23f839e:	4b1a      	ldr	r3, [pc, #104]	; (23f8408 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23f83a0:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f83a2:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f83a4:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23f83a6:	2101      	movs	r1, #1
 23f83a8:	4816      	ldr	r0, [pc, #88]	; (23f8404 <dmic_setup+0x118>)
 23f83aa:	4b18      	ldr	r3, [pc, #96]	; (23f840c <dmic_setup+0x120>)
 23f83ac:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23f83ae:	2101      	movs	r1, #1
 23f83b0:	4b17      	ldr	r3, [pc, #92]	; (23f8410 <dmic_setup+0x124>)
 23f83b2:	4814      	ldr	r0, [pc, #80]	; (23f8404 <dmic_setup+0x118>)
 23f83b4:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23f83b6:	f7ff ff27 	bl	23f8208 <sp_get_free_rx_page>
 23f83ba:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23f83bc:	f7ff ff38 	bl	23f8230 <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23f83c0:	4a14      	ldr	r2, [pc, #80]	; (23f8414 <dmic_setup+0x128>)
 23f83c2:	e9cd 4000 	strd	r4, r0, [sp]
 23f83c6:	4611      	mov	r1, r2
 23f83c8:	4630      	mov	r0, r6
 23f83ca:	4b13      	ldr	r3, [pc, #76]	; (23f8418 <dmic_setup+0x12c>)
 23f83cc:	4c13      	ldr	r4, [pc, #76]	; (23f841c <dmic_setup+0x130>)
 23f83ce:	47a0      	blx	r4

    // Particle.connect();
}
 23f83d0:	b003      	add	sp, #12
 23f83d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23f83d4:	2618      	movs	r6, #24
			break;
 23f83d6:	e7ad      	b.n	23f8334 <dmic_setup+0x48>
			div = 48;
 23f83d8:	2630      	movs	r6, #48	; 0x30
			break;
 23f83da:	e7ab      	b.n	23f8334 <dmic_setup+0x48>
 23f83dc:	023fd399 	.word	0x023fd399
 23f83e0:	10110039 	.word	0x10110039
 23f83e4:	40080000 	.word	0x40080000
 23f83e8:	1010cf99 	.word	0x1010cf99
 23f83ec:	1010cfb9 	.word	0x1010cfb9
 23f83f0:	1007aa00 	.word	0x1007aa00
 23f83f4:	1007a980 	.word	0x1007a980
 23f83f8:	1007a100 	.word	0x1007a100
 23f83fc:	1007a954 	.word	0x1007a954
 23f8400:	023fd44d 	.word	0x023fd44d
 23f8404:	40010800 	.word	0x40010800
 23f8408:	023fd4a1 	.word	0x023fd4a1
 23f840c:	023fd541 	.word	0x023fd541
 23f8410:	023fd47d 	.word	0x023fd47d
 23f8414:	1007a900 	.word	0x1007a900
 23f8418:	023f8251 	.word	0x023f8251
 23f841c:	023fd565 	.word	0x023fd565

023f8420 <dmic_flush>:


void dmic_flush() {
 23f8420:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23f8422:	f7ff feb1 	bl	23f8188 <sp_get_ready_rx_page>
 23f8426:	b900      	cbnz	r0, 23f842a <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23f8428:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23f842a:	2100      	movs	r1, #0
 23f842c:	4608      	mov	r0, r1
 23f842e:	f7ff feb9 	bl	23f81a4 <sp_read_rx_page>
 23f8432:	e7f6      	b.n	23f8422 <dmic_flush+0x2>

023f8434 <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23f8434:	f7ff bea8 	b.w	23f8188 <sp_get_ready_rx_page>

023f8438 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23f8438:	f7ff beb4 	b.w	23f81a4 <sp_read_rx_page>

023f843c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f843c:	4770      	bx	lr
	...

023f8440 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f8440:	b510      	push	{r4, lr}
 23f8442:	4604      	mov	r4, r0
 23f8444:	4b09      	ldr	r3, [pc, #36]	; (23f846c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f8446:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f8448:	f001 fdc4 	bl	23f9fd4 <_ZN5spark10LogManager8instanceEv>
 23f844c:	4621      	mov	r1, r4
 23f844e:	f002 f80d 	bl	23fa46c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f8452:	f001 fadf 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f8456:	f001 facf 	bl	23f99f8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f845a:	4620      	mov	r0, r4
 23f845c:	4b04      	ldr	r3, [pc, #16]	; (23f8470 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f845e:	f840 3b04 	str.w	r3, [r0], #4
 23f8462:	f001 fe9f 	bl	23fa1a4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f8466:	4620      	mov	r0, r4
 23f8468:	bd10      	pop	{r4, pc}
 23f846a:	bf00      	nop
 23f846c:	023fde94 	.word	0x023fde94
 23f8470:	023fde7c 	.word	0x023fde7c

023f8474 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f8474:	b510      	push	{r4, lr}
 23f8476:	4604      	mov	r4, r0
    }
 23f8478:	f7ff ffe2 	bl	23f8440 <_ZN5spark16SerialLogHandlerD1Ev>
 23f847c:	4620      	mov	r0, r4
 23f847e:	2124      	movs	r1, #36	; 0x24
 23f8480:	f7ff fc21 	bl	23f7cc6 <_ZdlPvj>
 23f8484:	4620      	mov	r0, r4
 23f8486:	bd10      	pop	{r4, pc}

023f8488 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23f8488:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23f848a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f848c:	4604      	mov	r4, r0
      if (_M_manager)
 23f848e:	b113      	cbz	r3, 23f8496 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f8490:	2203      	movs	r2, #3
 23f8492:	4601      	mov	r1, r0
 23f8494:	4798      	blx	r3
    }
 23f8496:	4620      	mov	r0, r4
 23f8498:	bd10      	pop	{r4, pc}
	...

023f849c <setup>:

/**
 * @brief      Particle setup function
 */
void setup()
{
 23f849c:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f849e:	2000      	movs	r0, #0
 23f84a0:	f000 fd34 	bl	23f8f0c <hal_timer_millis>
        while (_while() && !_condition()) {
 23f84a4:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23f84a8:	4604      	mov	r4, r0
 23f84aa:	2000      	movs	r0, #0
 23f84ac:	f000 fd2e 	bl	23f8f0c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f84b0:	1b00      	subs	r0, r0, r4
 23f84b2:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f84b6:	42a8      	cmp	r0, r5
 23f84b8:	f171 0300 	sbcs.w	r3, r1, #0
 23f84bc:	d207      	bcs.n	23f84ce <setup+0x32>
    // put your setup code here, to run once:

    // Wait for serial to make it easier to see the serial logs at startup.
    waitFor(Serial.isConnected, 15000);
 23f84be:	f001 faa9 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f84c2:	f001 fa9c 	bl	23f99fe <_ZN9USBSerial11isConnectedEv>
 23f84c6:	b910      	cbnz	r0, 23f84ce <setup+0x32>
            spark_process();
 23f84c8:	f000 fd82 	bl	23f8fd0 <spark_process>
        while (_while() && !_condition()) {
 23f84cc:	e7ed      	b.n	23f84aa <setup+0xe>
 23f84ce:	f001 faa1 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f84d2:	f001 fa94 	bl	23f99fe <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23f84d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f84da:	f001 fbe5 	bl	23f9ca8 <delay>

    ei_printf("Edge Impulse inference runner for Particle devices\r\n");
 23f84de:	4828      	ldr	r0, [pc, #160]	; (23f8580 <setup+0xe4>)
 23f84e0:	f000 f996 	bl	23f8810 <_Z9ei_printfPKcz>

    int err = Microphone_PDM::instance()
 23f84e4:	f000 fa14 	bl	23f8910 <_ZN14Microphone_PDM8instanceEv>
	 * RANGE_32768 From -32768 to 32767 (16 bits) (same as raw mode)
	 *
	 * The range should be set based on the PDM microphone you are using. For the Adafruit microphone,
	 * the default value of RANGE_2048 (12-bit) is correct. 
	 */
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23f84e8:	2101      	movs	r1, #1
 23f84ea:	2208      	movs	r2, #8
 23f84ec:	e9c0 1204 	strd	r1, r2, [r0, #16]
	 * @param sampleRate 8000, 16000, or 32000. The default is 16000.
	 * 
	 * This call can only be used on RTL827x (P2, Photon 2). It is ignored on nRF52.
	 * Setting an invalid value will use 16000.
	 */
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23f84f0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .withOutputSize(Microphone_PDM::OutputSize::SIGNED_16)
        .withRange(Microphone_PDM::Range::RANGE_32768)
        .withSampleRate(EI_CLASSIFIER_FREQUENCY)
        .init();
 23f84f4:	6803      	ldr	r3, [r0, #0]
 23f84f6:	60c2      	str	r2, [r0, #12]
 23f84f8:	68db      	ldr	r3, [r3, #12]
 23f84fa:	4798      	blx	r3

    if (err) {
 23f84fc:	4601      	mov	r1, r0
 23f84fe:	b110      	cbz	r0, 23f8506 <setup+0x6a>
        ei_printf("PDM decoder init err=%d", err);
 23f8500:	4820      	ldr	r0, [pc, #128]	; (23f8584 <setup+0xe8>)
 23f8502:	f000 f985 	bl	23f8810 <_Z9ei_printfPKcz>
    }

    // summary of inferencing settings (from model_metadata.h)
    ei_printf("Inferencing settings:\n");
 23f8506:	4820      	ldr	r0, [pc, #128]	; (23f8588 <setup+0xec>)
 23f8508:	f000 f982 	bl	23f8810 <_Z9ei_printfPKcz>
    ei_printf("\tInterval: %.2f ms.\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 23f850c:	2200      	movs	r2, #0
 23f850e:	4b1f      	ldr	r3, [pc, #124]	; (23f858c <setup+0xf0>)
 23f8510:	481f      	ldr	r0, [pc, #124]	; (23f8590 <setup+0xf4>)
 23f8512:	f000 f97d 	bl	23f8810 <_Z9ei_printfPKcz>
    ei_printf("\tFrame size: %d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 23f8516:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f851a:	481e      	ldr	r0, [pc, #120]	; (23f8594 <setup+0xf8>)
 23f851c:	f000 f978 	bl	23f8810 <_Z9ei_printfPKcz>
    ei_printf("\tSample length: %d ms.\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 23f8520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23f8524:	481c      	ldr	r0, [pc, #112]	; (23f8598 <setup+0xfc>)
 23f8526:	f000 f973 	bl	23f8810 <_Z9ei_printfPKcz>
    ei_printf("\tNo. of classes: %d\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 23f852a:	2109      	movs	r1, #9
 23f852c:	481b      	ldr	r0, [pc, #108]	; (23f859c <setup+0x100>)
 23f852e:	f000 f96f 	bl	23f8810 <_Z9ei_printfPKcz>
 *
 * @return     { description_of_the_return_value }
 */
static bool microphone_inference_start(uint32_t n_samples)
{
    inference.buffer = (int16_t *)malloc(n_samples * sizeof(int16_t));
 23f8532:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 23f8536:	f000 fe55 	bl	23f91e4 <malloc>
 23f853a:	4c19      	ldr	r4, [pc, #100]	; (23f85a0 <setup+0x104>)
 23f853c:	6020      	str	r0, [r4, #0]

    if(inference.buffer == NULL) {
 23f853e:	b1b0      	cbz	r0, 23f856e <setup+0xd2>
        return false;
    }

    inference.buf_count  = 0;
    inference.n_samples  = n_samples;
 23f8540:	2300      	movs	r3, #0
 23f8542:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
    inference.buf_ready  = 0;
 23f8546:	7123      	strb	r3, [r4, #4]
    inference.n_samples  = n_samples;
 23f8548:	e9c4 3202 	strd	r3, r2, [r4, #8]

    if (Microphone_PDM::instance().start()) {
 23f854c:	f000 f9e0 	bl	23f8910 <_ZN14Microphone_PDM8instanceEv>
 23f8550:	6803      	ldr	r3, [r0, #0]
 23f8552:	695b      	ldr	r3, [r3, #20]
 23f8554:	4798      	blx	r3
 23f8556:	b188      	cbz	r0, 23f857c <setup+0xe0>
        ei_printf("Failed to start PDM!");
 23f8558:	4812      	ldr	r0, [pc, #72]	; (23f85a4 <setup+0x108>)
 23f855a:	f000 f959 	bl	23f8810 <_Z9ei_printfPKcz>
/**
 * @brief      Stop PDM and release buffers
 */
static void microphone_inference_end(void)
{
    Microphone_PDM::instance().stop();
 23f855e:	f000 f9d7 	bl	23f8910 <_ZN14Microphone_PDM8instanceEv>
 23f8562:	6803      	ldr	r3, [r0, #0]
 23f8564:	699b      	ldr	r3, [r3, #24]
 23f8566:	4798      	blx	r3
    free(inference.buffer);
 23f8568:	6820      	ldr	r0, [r4, #0]
 23f856a:	f000 fe49 	bl	23f9200 <free>
}
 23f856e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ei_printf("ERR: Could not allocate audio buffer (size %d), this could be due to the window length of your model\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT);
 23f8572:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f8576:	480c      	ldr	r0, [pc, #48]	; (23f85a8 <setup+0x10c>)
 23f8578:	f000 b94a 	b.w	23f8810 <_Z9ei_printfPKcz>
}
 23f857c:	bd38      	pop	{r3, r4, r5, pc}
 23f857e:	bf00      	nop
 23f8580:	023fdce5 	.word	0x023fdce5
 23f8584:	023fdd1a 	.word	0x023fdd1a
 23f8588:	023fdd32 	.word	0x023fdd32
 23f858c:	3fb00000 	.word	0x3fb00000
 23f8590:	023fdd49 	.word	0x023fdd49
 23f8594:	023fdd5e 	.word	0x023fdd5e
 23f8598:	023fdd6f 	.word	0x023fdd6f
 23f859c:	023fdd87 	.word	0x023fdd87
 23f85a0:	1007aa40 	.word	0x1007aa40
 23f85a4:	023fdd9c 	.word	0x023fdd9c
 23f85a8:	023fddb1 	.word	0x023fddb1

023f85ac <loop>:
{
 23f85ac:	b530      	push	{r4, r5, lr}
    printf("Scanning...\n");
 23f85ae:	4821      	ldr	r0, [pc, #132]	; (23f8634 <loop+0x88>)
{
 23f85b0:	b089      	sub	sp, #36	; 0x24
    printf("Scanning...\n");
 23f85b2:	f7ff fb8a 	bl	23f7cca <__wrap_printf>
    Vector<BleScanResult> scanResults = BLE.scan();
 23f85b6:	f002 ffcd 	bl	23fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f85ba:	4601      	mov	r1, r0
 23f85bc:	a805      	add	r0, sp, #20
 23f85be:	f004 fbb1 	bl	23fcd24 <_ZNK8particle14BleLocalDevice4scanEv>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
 23f85c2:	9906      	ldr	r1, [sp, #24]
    if (scanResults.size()) {
 23f85c4:	b1f1      	cbz	r1, 23f8604 <loop+0x58>
        ei_printf("%d devices found\n", scanResults.size());
 23f85c6:	481c      	ldr	r0, [pc, #112]	; (23f8638 <loop+0x8c>)
 23f85c8:	f000 f922 	bl	23f8810 <_Z9ei_printfPKcz>
        BlePeerDevice peer = BLE.connect("EF:08:DA:63:04:F3");
 23f85cc:	f002 ffc2 	bl	23fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f85d0:	4604      	mov	r4, r0
 23f85d2:	2200      	movs	r2, #0
 23f85d4:	4919      	ldr	r1, [pc, #100]	; (23f863c <loop+0x90>)
 23f85d6:	a803      	add	r0, sp, #12
 23f85d8:	f002 fcdc 	bl	23faf94 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>
 23f85dc:	a801      	add	r0, sp, #4
 23f85de:	2301      	movs	r3, #1
 23f85e0:	4621      	mov	r1, r4
 23f85e2:	aa03      	add	r2, sp, #12
 23f85e4:	f004 fa1e 	bl	23fca24 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
        if (peer.connected()) {
 23f85e8:	a801      	add	r0, sp, #4
 23f85ea:	f002 ff25 	bl	23fb438 <_ZNK8particle13BlePeerDevice9connectedEv>
 23f85ee:	b118      	cbz	r0, 23f85f8 <loop+0x4c>
            ei_printf("successfully connected!");
 23f85f0:	4813      	ldr	r0, [pc, #76]	; (23f8640 <loop+0x94>)
 23f85f2:	f000 f90d 	bl	23f8810 <_Z9ei_printfPKcz>
            while(1) {}
 23f85f6:	e7fe      	b.n	23f85f6 <loop+0x4a>
            ei_printf("connection failed");
 23f85f8:	4812      	ldr	r0, [pc, #72]	; (23f8644 <loop+0x98>)
 23f85fa:	f000 f909 	bl	23f8810 <_Z9ei_printfPKcz>
        BlePeerDevice peer = BLE.connect("EF:08:DA:63:04:F3");
 23f85fe:	a801      	add	r0, sp, #4
 23f8600:	f003 f886 	bl	23fb710 <_ZN8particle13BlePeerDeviceD1Ev>
    destruct(data_, data_ + size_);
 23f8604:	2524      	movs	r5, #36	; 0x24
    delay(3000);
 23f8606:	f640 30b8 	movw	r0, #3000	; 0xbb8
 23f860a:	f001 fb4d 	bl	23f9ca8 <delay>
 23f860e:	e9dd 4305 	ldrd	r4, r3, [sp, #20]
 23f8612:	fb05 4503 	mla	r5, r5, r3, r4
        for (; p != end; ++p) {
 23f8616:	42a5      	cmp	r5, r4
 23f8618:	d007      	beq.n	23f862a <loop+0x7e>
    ::free(ptr);
 23f861a:	6960      	ldr	r0, [r4, #20]
 23f861c:	f000 fdf0 	bl	23f9200 <free>
 23f8620:	68a0      	ldr	r0, [r4, #8]
 23f8622:	f000 fded 	bl	23f9200 <free>
        for (; p != end; ++p) {
 23f8626:	3424      	adds	r4, #36	; 0x24
 23f8628:	e7f5      	b.n	23f8616 <loop+0x6a>
    ::free(ptr);
 23f862a:	9805      	ldr	r0, [sp, #20]
 23f862c:	f000 fde8 	bl	23f9200 <free>
}
 23f8630:	b009      	add	sp, #36	; 0x24
 23f8632:	bd30      	pop	{r4, r5, pc}
 23f8634:	023fde18 	.word	0x023fde18
 23f8638:	023fde25 	.word	0x023fde25
 23f863c:	023fde37 	.word	0x023fde37
 23f8640:	023fde49 	.word	0x023fde49
 23f8644:	023fde61 	.word	0x023fde61

023f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8648:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f864a:	2614      	movs	r6, #20
 23f864c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8650:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8652:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f8656:	42ae      	cmp	r6, r5
 23f8658:	d004      	beq.n	23f8664 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f865a:	4628      	mov	r0, r5
 23f865c:	f004 fc86 	bl	23fcf6c <_ZN6StringD1Ev>
 23f8660:	3514      	adds	r5, #20
 23f8662:	e7f8      	b.n	23f8656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f8664:	6820      	ldr	r0, [r4, #0]
 23f8666:	f000 fdcb 	bl	23f9200 <free>
}
 23f866a:	4620      	mov	r0, r4
 23f866c:	bd70      	pop	{r4, r5, r6, pc}

023f866e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f866e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f8670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8672:	4604      	mov	r4, r0
 23f8674:	460d      	mov	r5, r1
 23f8676:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f8678:	d916      	bls.n	23f86a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f867a:	4290      	cmp	r0, r2
 23f867c:	d215      	bcs.n	23f86aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f867e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f8682:	1a75      	subs	r5, r6, r1
 23f8684:	f1a1 0714 	sub.w	r7, r1, #20
 23f8688:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f868a:	42b7      	cmp	r7, r6
 23f868c:	d01c      	beq.n	23f86c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f868e:	b12c      	cbz	r4, 23f869c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f8690:	4631      	mov	r1, r6
 23f8692:	4620      	mov	r0, r4
 23f8694:	f004 fce6 	bl	23fd064 <_ZN6StringC1EOS_>
 23f8698:	7c33      	ldrb	r3, [r6, #16]
 23f869a:	7423      	strb	r3, [r4, #16]
 23f869c:	4630      	mov	r0, r6
 23f869e:	f004 fc65 	bl	23fcf6c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f86a2:	3e14      	subs	r6, #20
 23f86a4:	3c14      	subs	r4, #20
 23f86a6:	e7f0      	b.n	23f868a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f86a8:	d00e      	beq.n	23f86c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f86aa:	42b5      	cmp	r5, r6
 23f86ac:	d00c      	beq.n	23f86c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f86ae:	b12c      	cbz	r4, 23f86bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f86b0:	4629      	mov	r1, r5
 23f86b2:	4620      	mov	r0, r4
 23f86b4:	f004 fcd6 	bl	23fd064 <_ZN6StringC1EOS_>
 23f86b8:	7c2b      	ldrb	r3, [r5, #16]
 23f86ba:	7423      	strb	r3, [r4, #16]
 23f86bc:	4628      	mov	r0, r5
 23f86be:	f004 fc55 	bl	23fcf6c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f86c2:	3514      	adds	r5, #20
 23f86c4:	3414      	adds	r4, #20
 23f86c6:	e7f0      	b.n	23f86aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f86c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f86ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f86ca:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f86cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f86d0:	e9c0 3300 	strd	r3, r3, [r0]
 23f86d4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f86d6:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f86d8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f86da:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f86dc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f86de:	dd24      	ble.n	23f872a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f86e0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f86e4:	fb08 f007 	mul.w	r0, r8, r7
 23f86e8:	f000 fd7c 	bl	23f91e4 <malloc>
            if (!d) {
 23f86ec:	4605      	mov	r5, r0
 23f86ee:	b1e0      	cbz	r0, 23f872a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f86f0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f86f4:	fb08 1202 	mla	r2, r8, r2, r1
 23f86f8:	f7ff ffb9 	bl	23f866e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f86fc:	6820      	ldr	r0, [r4, #0]
 23f86fe:	f000 fd7f 	bl	23f9200 <free>
        data_ = d;
 23f8702:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f8704:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f8706:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f870a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f870e:	45b8      	cmp	r8, r7
 23f8710:	d009      	beq.n	23f8726 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f8712:	4639      	mov	r1, r7
 23f8714:	4628      	mov	r0, r5
 23f8716:	f004 fcbf 	bl	23fd098 <_ZN6StringC1ERKS_>
 23f871a:	7c3b      	ldrb	r3, [r7, #16]
 23f871c:	3514      	adds	r5, #20
 23f871e:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f8722:	3714      	adds	r7, #20
 23f8724:	e7f3      	b.n	23f870e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f8726:	6873      	ldr	r3, [r6, #4]
 23f8728:	6063      	str	r3, [r4, #4]
}
 23f872a:	4620      	mov	r0, r4
 23f872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8730 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
}
 23f8730:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23f8732:	2100      	movs	r1, #0
}
 23f8734:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23f8736:	2001      	movs	r0, #1
 23f8738:	f000 fd2a 	bl	23f9190 <system_thread_set_state>
        capacity_(0) {
 23f873c:	2300      	movs	r3, #0
 23f873e:	e9cd 3300 	strd	r3, r3, [sp]
 23f8742:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f8744:	f001 f966 	bl	23f9a14 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f8748:	4c1a      	ldr	r4, [pc, #104]	; (23f87b4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x84>)
 23f874a:	4605      	mov	r5, r0
 23f874c:	4626      	mov	r6, r4
 23f874e:	4669      	mov	r1, sp
 23f8750:	a803      	add	r0, sp, #12
 23f8752:	f7ff ffba 	bl	23f86ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f8756:	a903      	add	r1, sp, #12
 23f8758:	a806      	add	r0, sp, #24
 23f875a:	f7ff ffb6 	bl	23f86ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f875e:	4b16      	ldr	r3, [pc, #88]	; (23f87b8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x88>)
 23f8760:	a906      	add	r1, sp, #24
 23f8762:	f846 3b04 	str.w	r3, [r6], #4
 23f8766:	a809      	add	r0, sp, #36	; 0x24
 23f8768:	f7ff ffaf 	bl	23f86ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f876c:	aa09      	add	r2, sp, #36	; 0x24
 23f876e:	2132      	movs	r1, #50	; 0x32
 23f8770:	4630      	mov	r0, r6
 23f8772:	f001 ff5d 	bl	23fa630 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8776:	a809      	add	r0, sp, #36	; 0x24
 23f8778:	f7ff ff66 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f877c:	a806      	add	r0, sp, #24
 23f877e:	f7ff ff63 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f8782:	4b0e      	ldr	r3, [pc, #56]	; (23f87bc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8c>)
 23f8784:	a803      	add	r0, sp, #12
 23f8786:	6023      	str	r3, [r4, #0]
 23f8788:	6225      	str	r5, [r4, #32]
 23f878a:	f7ff ff5d 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f878e:	4b0c      	ldr	r3, [pc, #48]	; (23f87c0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x90>)
 23f8790:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f8792:	f001 f93f 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f8796:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f879a:	f001 f929 	bl	23f99f0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f879e:	f001 fc19 	bl	23f9fd4 <_ZN5spark10LogManager8instanceEv>
 23f87a2:	4621      	mov	r1, r4
 23f87a4:	f001 fe1c 	bl	23fa3e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23f87a8:	4668      	mov	r0, sp
 23f87aa:	f7ff ff4d 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f87ae:	b00c      	add	sp, #48	; 0x30
 23f87b0:	bd70      	pop	{r4, r5, r6, pc}
 23f87b2:	bf00      	nop
 23f87b4:	1007aa50 	.word	0x1007aa50
 23f87b8:	023fde7c 	.word	0x023fde7c
 23f87bc:	023ff9b8 	.word	0x023ff9b8
 23f87c0:	023fde94 	.word	0x023fde94

023f87c4 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE>:
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f87c4:	4b10      	ldr	r3, [pc, #64]	; (23f8808 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x44>)
 23f87c6:	681a      	ldr	r2, [r3, #0]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
 23f87c8:	4b10      	ldr	r3, [pc, #64]	; (23f880c <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x48>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f87ca:	f502 6178 	add.w	r1, r2, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 23f87ce:	6059      	str	r1, [r3, #4]
 23f87d0:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 23f87d4:	f502 7148 	add.w	r1, r2, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 23f87d8:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 23f87dc:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 23f87e0:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 23f87e4:	f502 71c8 	add.w	r1, r2, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 23f87e8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 23f87ec:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 23f87f0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 23f87f4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 23f87f8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 23f87fc:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 23f8800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
 23f8804:	4770      	bx	lr
 23f8806:	bf00      	nop
 23f8808:	1007aa74 	.word	0x1007aa74
 23f880c:	10079e4c 	.word	0x10079e4c

023f8810 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f8810:	b40f      	push	{r0, r1, r2, r3}
 23f8812:	b513      	push	{r0, r1, r4, lr}
 23f8814:	ab04      	add	r3, sp, #16
 23f8816:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f881a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f881e:	480b      	ldr	r0, [pc, #44]	; (23f884c <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f8820:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f8822:	f000 fd09 	bl	23f9238 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f8826:	2800      	cmp	r0, #0
 23f8828:	dd0b      	ble.n	23f8842 <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f882a:	f001 f8f3 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f882e:	4604      	mov	r4, r0
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 23f8830:	4806      	ldr	r0, [pc, #24]	; (23f884c <_Z9ei_printfPKcz+0x3c>)
 23f8832:	f7ff fa1f 	bl	23f7c74 <strlen>
 23f8836:	6823      	ldr	r3, [r4, #0]
 23f8838:	4602      	mov	r2, r0
 23f883a:	68db      	ldr	r3, [r3, #12]
 23f883c:	4620      	mov	r0, r4
 23f883e:	4903      	ldr	r1, [pc, #12]	; (23f884c <_Z9ei_printfPKcz+0x3c>)
 23f8840:	4798      	blx	r3
    }
}
 23f8842:	b002      	add	sp, #8
 23f8844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8848:	b004      	add	sp, #16
 23f884a:	4770      	bx	lr
 23f884c:	1007aa78 	.word	0x1007aa78

023f8850 <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23f8850:	2001      	movs	r0, #1
 23f8852:	4770      	bx	lr

023f8854 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23f8854:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f8858:	4770      	bx	lr

023f885a <_ZN14Microphone_PDM6uninitEv>:
	 * Releases the resources used by the PDM module, though the 2K RAM buffer is statically 
	 * allocated on the heap and is not freed.
	 */
	int uninit() {
		return Microphone_PDM_MCU::uninit();
	}
 23f885a:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f885e:	4770      	bx	lr

023f8860 <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23f8860:	f000 b8c2 	b.w	23f89e8 <_ZN22Microphone_PDM_RTL872x4initEv>

023f8864 <_ZN14Microphone_PDM5startEv>:

	/**
	 * @brief Start sampling
	 */
	int start() {
		return Microphone_PDM_MCU::start();
 23f8864:	f000 b8d4 	b.w	23f8a10 <_ZN22Microphone_PDM_RTL872x5startEv>

023f8868 <_ZN14Microphone_PDM4stopEv>:
	 * On the RTL872x (P2, Photon 2), it's not actually possible to stop sampling once you
	 * start it. Calling stop() will discard the data and samplesAvailable(), copySamples(),
	 * etc. will behave as if the DMA had been stopped.
	 */
	int stop() {
		return Microphone_PDM_MCU::stop();
 23f8868:	f000 b8b3 	b.w	23f89d2 <_ZN22Microphone_PDM_RTL872x4stopEv>

023f886c <_ZNK14Microphone_PDM16samplesAvailableEv>:
	 * 
	 * @return true 
	 * @return false 
	 */
	bool samplesAvailable() const {
		return Microphone_PDM_MCU::samplesAvailable();
 23f886c:	f000 b8d8 	b.w	23f8a20 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023f8870 <_ZN14Microphone_PDM11copySamplesEPv>:
	 * 
	 * You can skip calling samplesAvailable() and just call copySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool copySamples(void*pSamples) {
		return Microphone_PDM_MCU::copySamples(pSamples);
 23f8870:	f000 b8df 	b.w	23f8a32 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>

023f8874 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23f8874:	b510      	push	{r4, lr}
 23f8876:	4604      	mov	r4, r0
 23f8878:	4b02      	ldr	r3, [pc, #8]	; (23f8884 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23f887a:	6003      	str	r3, [r0, #0]
 23f887c:	f000 f8a8 	bl	23f89d0 <_ZN22Microphone_PDM_RTL872xD1Ev>
 23f8880:	4620      	mov	r0, r4
 23f8882:	bd10      	pop	{r4, pc}
 23f8884:	023ff784 	.word	0x023ff784

023f8888 <_ZN18Microphone_PDM_MCUD0Ev>:
 23f8888:	b510      	push	{r4, lr}
 23f888a:	4604      	mov	r4, r0
 23f888c:	f7ff fff2 	bl	23f8874 <_ZN18Microphone_PDM_MCUD1Ev>
 23f8890:	4620      	mov	r0, r4
 23f8892:	2120      	movs	r1, #32
 23f8894:	f7ff fa17 	bl	23f7cc6 <_ZdlPvj>
 23f8898:	4620      	mov	r0, r4
 23f889a:	bd10      	pop	{r4, pc}

023f889c <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM *Microphone_PDM::_instance = NULL;

Microphone_PDM::Microphone_PDM() {
}

Microphone_PDM::~Microphone_PDM() {
 23f889c:	b510      	push	{r4, lr}
 23f889e:	4604      	mov	r4, r0
 23f88a0:	4b02      	ldr	r3, [pc, #8]	; (23f88ac <_ZN14Microphone_PDMD1Ev+0x10>)
 23f88a2:	6003      	str	r3, [r0, #0]
 23f88a4:	f7ff ffe6 	bl	23f8874 <_ZN18Microphone_PDM_MCUD1Ev>

}
 23f88a8:	4620      	mov	r0, r4
 23f88aa:	bd10      	pop	{r4, pc}
 23f88ac:	023ff7b4 	.word	0x023ff7b4

023f88b0 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23f88b0:	b510      	push	{r4, lr}
 23f88b2:	4604      	mov	r4, r0
}
 23f88b4:	f7ff fff2 	bl	23f889c <_ZN14Microphone_PDMD1Ev>
 23f88b8:	4620      	mov	r0, r4
 23f88ba:	2124      	movs	r1, #36	; 0x24
 23f88bc:	f7ff fa03 	bl	23f7cc6 <_ZdlPvj>
 23f88c0:	4620      	mov	r0, r4
 23f88c2:	bd10      	pop	{r4, pc}

023f88c4 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23f88c4:	2300      	movs	r3, #0
	 * of data. The number of bytes will vary depending on the outputSize. 
	 * 
	 * You can skip calling samplesAvailable() and just call noCopySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f88c6:	b530      	push	{r4, r5, lr}
 23f88c8:	b085      	sub	sp, #20
 23f88ca:	9302      	str	r3, [sp, #8]

    bool _M_empty() const { return !_M_manager; }
 23f88cc:	688b      	ldr	r3, [r1, #8]
 23f88ce:	4605      	mov	r5, r0
 23f88d0:	460c      	mov	r4, r1
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 23f88d2:	b133      	cbz	r3, 23f88e2 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f88d4:	2202      	movs	r2, #2
 23f88d6:	4668      	mov	r0, sp
 23f88d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f88da:	68e3      	ldr	r3, [r4, #12]
 23f88dc:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f88de:	68a3      	ldr	r3, [r4, #8]
 23f88e0:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23f88e2:	4669      	mov	r1, sp
 23f88e4:	4628      	mov	r0, r5
 23f88e6:	f000 f8bb 	bl	23f8a60 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23f88ea:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f88ec:	4668      	mov	r0, sp
 23f88ee:	f7ff fdcb 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
	}
 23f88f2:	4620      	mov	r0, r4
 23f88f4:	b005      	add	sp, #20
 23f88f6:	bd30      	pop	{r4, r5, pc}

023f88f8 <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23f88f8:	b510      	push	{r4, lr}
 23f88fa:	4604      	mov	r4, r0
 23f88fc:	f000 f8d6 	bl	23f8aac <_ZN22Microphone_PDM_RTL872xC1Ev>
 23f8900:	4b02      	ldr	r3, [pc, #8]	; (23f890c <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23f8902:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23f8904:	6023      	str	r3, [r4, #0]
 23f8906:	2300      	movs	r3, #0
 23f8908:	6223      	str	r3, [r4, #32]
}
 23f890a:	bd10      	pop	{r4, pc}
 23f890c:	023ff7b4 	.word	0x023ff7b4

023f8910 <_ZN14Microphone_PDM8instanceEv>:

// [static] 
Microphone_PDM &Microphone_PDM::instance() {
 23f8910:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23f8912:	4d06      	ldr	r5, [pc, #24]	; (23f892c <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23f8914:	682b      	ldr	r3, [r5, #0]
 23f8916:	b93b      	cbnz	r3, 23f8928 <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23f8918:	2024      	movs	r0, #36	; 0x24
 23f891a:	f7ff f9d0 	bl	23f7cbe <_Znwj>
 23f891e:	4604      	mov	r4, r0
 23f8920:	b108      	cbz	r0, 23f8926 <_ZN14Microphone_PDM8instanceEv+0x16>
 23f8922:	f7ff ffe9 	bl	23f88f8 <_ZN14Microphone_PDMC1Ev>
 23f8926:	602c      	str	r4, [r5, #0]
	}
	return *_instance;
}
 23f8928:	6828      	ldr	r0, [r5, #0]
 23f892a:	bd38      	pop	{r3, r4, r5, pc}
 23f892c:	1007ae78 	.word	0x1007ae78

023f8930 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:
			return 2;
	}
}


void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f8930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8932:	4607      	mov	r7, r0
	const int16_t *srcEnd = &src[numSamples];

	size_t increment = copySrcIncrement();
 23f8934:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23f8936:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23f8938:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f893a:	460c      	mov	r4, r1
 23f893c:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23f893e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23f8942:	4798      	blx	r3

	if (outputSize == OutputSize::UNSIGNED_8) {
 23f8944:	693b      	ldr	r3, [r7, #16]
 23f8946:	b9c3      	cbnz	r3, 23f897a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>

		// Scale the 16-bit signed values to an appropriate range for unsigned 8-bit values
		int16_t div = (int16_t)(1 << (size_t) range);
 23f8948:	2201      	movs	r2, #1
			if (val > 127) {
				val = 127;
			}

			// Add 128 to make unsigned 8-bit (offset)
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f894a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23f894e:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23f8950:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23f8952:	409a      	lsls	r2, r3
 23f8954:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23f8956:	42b4      	cmp	r4, r6
 23f8958:	d236      	bcs.n	23f89c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23f895a:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f895e:	4404      	add	r4, r0
			int16_t val = *src / div;
 23f8960:	fb93 f3f2 	sdiv	r3, r3, r2
 23f8964:	b21b      	sxth	r3, r3
			if (val < -128) {
 23f8966:	2b7f      	cmp	r3, #127	; 0x7f
 23f8968:	bfa8      	it	ge
 23f896a:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f896c:	428b      	cmp	r3, r1
 23f896e:	bfb8      	it	lt
 23f8970:	460b      	movlt	r3, r1
 23f8972:	3b80      	subs	r3, #128	; 0x80
 23f8974:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23f8978:	e7ed      	b.n	23f8956 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
			dst += sizeof(uint8_t);
		}

	}
	else if (outputSize == OutputSize::SIGNED_16) {		
 23f897a:	2b01      	cmp	r3, #1
 23f897c:	d117      	bne.n	23f89ae <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f897e:	697a      	ldr	r2, [r7, #20]
			// Clip to signed 16-bit
			if (val < -32767) {
				val = -32767;
			}
			if (val > 32768) {
				val = 32868;
 23f8980:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23f8984:	4911      	ldr	r1, [pc, #68]	; (23f89cc <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f8986:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23f898a:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23f898c:	42b4      	cmp	r4, r6
 23f898e:	d21b      	bcs.n	23f89c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23f8990:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f8994:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23f8996:	4093      	lsls	r3, r2
			if (val < -32767) {
 23f8998:	428b      	cmp	r3, r1
 23f899a:	db06      	blt.n	23f89aa <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23f899c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23f89a0:	bfc8      	it	gt
 23f89a2:	463b      	movgt	r3, r7
			}

			*((int16_t *)dst) = (int16_t) val;
 23f89a4:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23f89a8:	e7f0      	b.n	23f898c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23f89aa:	4b08      	ldr	r3, [pc, #32]	; (23f89cc <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23f89ac:	e7fa      	b.n	23f89a4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
			dst += sizeof(uint16_t);
		}
	}
	else {
		// OutputSize::RAW_SIGNED_16
		if (src != (int16_t *)dst || increment != 1) {
 23f89ae:	42ac      	cmp	r4, r5
 23f89b0:	d101      	bne.n	23f89b6 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23f89b2:	2801      	cmp	r0, #1
 23f89b4:	d008      	beq.n	23f89c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			while(src < srcEnd) {
				*((int16_t *)dst) = *src;
				dst += sizeof(int16_t);
				src += increment;
 23f89b6:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23f89b8:	42b4      	cmp	r4, r6
 23f89ba:	d205      	bcs.n	23f89c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23f89bc:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23f89c0:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23f89c2:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23f89c6:	e7f7      	b.n	23f89b8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
			}
		}
	}
}
 23f89c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f89ca:	bf00      	nop
 23f89cc:	ffff8001 	.word	0xffff8001

023f89d0 <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23f89d0:	4770      	bx	lr

023f89d2 <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23f89d2:	2300      	movs	r3, #0
 23f89d4:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23f89d6:	4618      	mov	r0, r3
 23f89d8:	4770      	bx	lr

023f89da <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23f89da:	b510      	push	{r4, lr}
 23f89dc:	4604      	mov	r4, r0
}
 23f89de:	2120      	movs	r1, #32
 23f89e0:	f7ff f971 	bl	23f7cc6 <_ZdlPvj>
 23f89e4:	4620      	mov	r0, r4
 23f89e6:	bd10      	pop	{r4, pc}

023f89e8 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23f89e8:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23f89ea:	68c3      	ldr	r3, [r0, #12]
 23f89ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23f89f0:	d008      	beq.n	23f8a04 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f89f2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23f89f6:	d005      	beq.n	23f8a04 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f89f8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23f89fc:	bf1c      	itt	ne
 23f89fe:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23f8a02:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23f8a04:	7a01      	ldrb	r1, [r0, #8]
 23f8a06:	68c0      	ldr	r0, [r0, #12]
 23f8a08:	f7ff fc70 	bl	23f82ec <dmic_setup>
}
 23f8a0c:	2000      	movs	r0, #0
 23f8a0e:	bd08      	pop	{r3, pc}

023f8a10 <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23f8a10:	b510      	push	{r4, lr}
 23f8a12:	4604      	mov	r4, r0
    dmic_flush();
 23f8a14:	f7ff fd04 	bl	23f8420 <dmic_flush>
    running = true;
 23f8a18:	2301      	movs	r3, #1
}
 23f8a1a:	2000      	movs	r0, #0
    running = true;
 23f8a1c:	7723      	strb	r3, [r4, #28]
}
 23f8a1e:	bd10      	pop	{r4, pc}

023f8a20 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23f8a20:	b508      	push	{r3, lr}
    if (!running) {
 23f8a22:	7f00      	ldrb	r0, [r0, #28]
 23f8a24:	b120      	cbz	r0, 23f8a30 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23f8a26:	f7ff fd05 	bl	23f8434 <dmic_ready>
 23f8a2a:	3800      	subs	r0, #0
 23f8a2c:	bf18      	it	ne
 23f8a2e:	2001      	movne	r0, #1
}
 23f8a30:	bd08      	pop	{r3, pc}

023f8a32 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f8a32:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23f8a34:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f8a36:	4604      	mov	r4, r0
    if (!running) {
 23f8a38:	b91d      	cbnz	r5, 23f8a42 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23f8a3a:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23f8a3c:	4628      	mov	r0, r5
 23f8a3e:	b003      	add	sp, #12
 23f8a40:	bd30      	pop	{r4, r5, pc}
 23f8a42:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23f8a44:	f7ff fcf6 	bl	23f8434 <dmic_ready>
	if (src) {
 23f8a48:	4601      	mov	r1, r0
 23f8a4a:	2800      	cmp	r0, #0
 23f8a4c:	d0f5      	beq.n	23f8a3a <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23f8a4e:	4620      	mov	r0, r4
 23f8a50:	9a01      	ldr	r2, [sp, #4]
 23f8a52:	f7ff ff6d 	bl	23f8930 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23f8a56:	2100      	movs	r1, #0
 23f8a58:	4608      	mov	r0, r1
 23f8a5a:	f7ff fced 	bl	23f8438 <dmic_read>
		return true;
 23f8a5e:	e7ed      	b.n	23f8a3c <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023f8a60 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f8a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23f8a62:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f8a64:	4606      	mov	r6, r0
 23f8a66:	460d      	mov	r5, r1
    if (!running) {
 23f8a68:	b91f      	cbnz	r7, 23f8a72 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23f8a6a:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23f8a6c:	4638      	mov	r0, r7
 23f8a6e:	b003      	add	sp, #12
 23f8a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23f8a72:	f7ff fcdf 	bl	23f8434 <dmic_ready>
	if (src) {
 23f8a76:	4604      	mov	r4, r0
 23f8a78:	2800      	cmp	r0, #0
 23f8a7a:	d0f6      	beq.n	23f8a6a <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23f8a7c:	4602      	mov	r2, r0
 23f8a7e:	4601      	mov	r1, r0
 23f8a80:	4630      	mov	r0, r6
 23f8a82:	f7ff ff55 	bl	23f8930 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23f8a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 23f8a8a:	9301      	str	r3, [sp, #4]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f8a8c:	68ab      	ldr	r3, [r5, #8]
 23f8a8e:	9400      	str	r4, [sp, #0]
 23f8a90:	b90b      	cbnz	r3, 23f8a96 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23f8a92:	f004 fe17 	bl	23fd6c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8a96:	4669      	mov	r1, sp
 23f8a98:	4628      	mov	r0, r5
 23f8a9a:	68eb      	ldr	r3, [r5, #12]
 23f8a9c:	aa01      	add	r2, sp, #4
 23f8a9e:	4798      	blx	r3
        dmic_read(NULL, 0);
 23f8aa0:	2100      	movs	r1, #0
 23f8aa2:	4608      	mov	r0, r1
 23f8aa4:	f7ff fcc8 	bl	23f8438 <dmic_read>
		return true;
 23f8aa8:	e7e0      	b.n	23f8a6c <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>
	...

023f8aac <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23f8aac:	f04f 0c01 	mov.w	ip, #1
 23f8ab0:	2104      	movs	r1, #4
 23f8ab2:	4a06      	ldr	r2, [pc, #24]	; (23f8acc <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23f8ab4:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23f8ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 23f8abc:	6042      	str	r2, [r0, #4]
 23f8abe:	2200      	movs	r2, #0
 23f8ac0:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23f8ac2:	4903      	ldr	r1, [pc, #12]	; (23f8ad0 <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23f8ac4:	7202      	strb	r2, [r0, #8]
 23f8ac6:	6001      	str	r1, [r0, #0]
 23f8ac8:	7702      	strb	r2, [r0, #28]
}
 23f8aca:	4770      	bx	lr
 23f8acc:	000c000b 	.word	0x000c000b
 23f8ad0:	023ff7e4 	.word	0x023ff7e4

023f8ad4 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23f8ad4:	2300      	movs	r3, #0
 23f8ad6:	4802      	ldr	r0, [pc, #8]	; (23f8ae0 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23f8ad8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23f8ada:	f000 b91b 	b.w	23f8d14 <os_mutex_create>
 23f8ade:	bf00      	nop
 23f8ae0:	1007ae7c 	.word	0x1007ae7c

023f8ae4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f8ae4:	b509      	push	{r0, r3, lr}
 23f8ae6:	4804      	ldr	r0, [pc, #16]	; (23f8af8 <HAL_USB_USART_Init+0x14>)
 23f8ae8:	6800      	ldr	r0, [r0, #0]
 23f8aea:	4b04      	ldr	r3, [pc, #16]	; (23f8afc <HAL_USB_USART_Init+0x18>)
 23f8aec:	4403      	add	r3, r0
 23f8aee:	681b      	ldr	r3, [r3, #0]
 23f8af0:	681b      	ldr	r3, [r3, #0]
 23f8af2:	9302      	str	r3, [sp, #8]
 23f8af4:	bd09      	pop	{r0, r3, pc}
 23f8af6:	0000      	.short	0x0000
 23f8af8:	10079e48 	.word	0x10079e48
 23f8afc:	00000034 	.word	0x00000034

023f8b00 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f8b00:	b509      	push	{r0, r3, lr}
 23f8b02:	4804      	ldr	r0, [pc, #16]	; (23f8b14 <HAL_USB_USART_Begin+0x14>)
 23f8b04:	6800      	ldr	r0, [r0, #0]
 23f8b06:	4b04      	ldr	r3, [pc, #16]	; (23f8b18 <HAL_USB_USART_Begin+0x18>)
 23f8b08:	4403      	add	r3, r0
 23f8b0a:	681b      	ldr	r3, [r3, #0]
 23f8b0c:	685b      	ldr	r3, [r3, #4]
 23f8b0e:	9302      	str	r3, [sp, #8]
 23f8b10:	bd09      	pop	{r0, r3, pc}
 23f8b12:	0000      	.short	0x0000
 23f8b14:	10079e48 	.word	0x10079e48
 23f8b18:	00000034 	.word	0x00000034

023f8b1c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f8b1c:	b509      	push	{r0, r3, lr}
 23f8b1e:	4804      	ldr	r0, [pc, #16]	; (23f8b30 <HAL_USB_USART_End+0x14>)
 23f8b20:	6800      	ldr	r0, [r0, #0]
 23f8b22:	4b04      	ldr	r3, [pc, #16]	; (23f8b34 <HAL_USB_USART_End+0x18>)
 23f8b24:	4403      	add	r3, r0
 23f8b26:	681b      	ldr	r3, [r3, #0]
 23f8b28:	689b      	ldr	r3, [r3, #8]
 23f8b2a:	9302      	str	r3, [sp, #8]
 23f8b2c:	bd09      	pop	{r0, r3, pc}
 23f8b2e:	0000      	.short	0x0000
 23f8b30:	10079e48 	.word	0x10079e48
 23f8b34:	00000034 	.word	0x00000034

023f8b38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f8b38:	b509      	push	{r0, r3, lr}
 23f8b3a:	4804      	ldr	r0, [pc, #16]	; (23f8b4c <HAL_USB_USART_Available_Data+0x14>)
 23f8b3c:	6800      	ldr	r0, [r0, #0]
 23f8b3e:	4b04      	ldr	r3, [pc, #16]	; (23f8b50 <HAL_USB_USART_Available_Data+0x18>)
 23f8b40:	4403      	add	r3, r0
 23f8b42:	681b      	ldr	r3, [r3, #0]
 23f8b44:	691b      	ldr	r3, [r3, #16]
 23f8b46:	9302      	str	r3, [sp, #8]
 23f8b48:	bd09      	pop	{r0, r3, pc}
 23f8b4a:	0000      	.short	0x0000
 23f8b4c:	10079e48 	.word	0x10079e48
 23f8b50:	00000034 	.word	0x00000034

023f8b54 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f8b54:	b509      	push	{r0, r3, lr}
 23f8b56:	4804      	ldr	r0, [pc, #16]	; (23f8b68 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f8b58:	6800      	ldr	r0, [r0, #0]
 23f8b5a:	4b04      	ldr	r3, [pc, #16]	; (23f8b6c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f8b5c:	4403      	add	r3, r0
 23f8b5e:	681b      	ldr	r3, [r3, #0]
 23f8b60:	695b      	ldr	r3, [r3, #20]
 23f8b62:	9302      	str	r3, [sp, #8]
 23f8b64:	bd09      	pop	{r0, r3, pc}
 23f8b66:	0000      	.short	0x0000
 23f8b68:	10079e48 	.word	0x10079e48
 23f8b6c:	00000034 	.word	0x00000034

023f8b70 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f8b70:	b509      	push	{r0, r3, lr}
 23f8b72:	4804      	ldr	r0, [pc, #16]	; (23f8b84 <HAL_USB_USART_Receive_Data+0x14>)
 23f8b74:	6800      	ldr	r0, [r0, #0]
 23f8b76:	4b04      	ldr	r3, [pc, #16]	; (23f8b88 <HAL_USB_USART_Receive_Data+0x18>)
 23f8b78:	4403      	add	r3, r0
 23f8b7a:	681b      	ldr	r3, [r3, #0]
 23f8b7c:	699b      	ldr	r3, [r3, #24]
 23f8b7e:	9302      	str	r3, [sp, #8]
 23f8b80:	bd09      	pop	{r0, r3, pc}
 23f8b82:	0000      	.short	0x0000
 23f8b84:	10079e48 	.word	0x10079e48
 23f8b88:	00000034 	.word	0x00000034

023f8b8c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f8b8c:	b509      	push	{r0, r3, lr}
 23f8b8e:	4804      	ldr	r0, [pc, #16]	; (23f8ba0 <HAL_USB_USART_Send_Data+0x14>)
 23f8b90:	6800      	ldr	r0, [r0, #0]
 23f8b92:	4b04      	ldr	r3, [pc, #16]	; (23f8ba4 <HAL_USB_USART_Send_Data+0x18>)
 23f8b94:	4403      	add	r3, r0
 23f8b96:	681b      	ldr	r3, [r3, #0]
 23f8b98:	69db      	ldr	r3, [r3, #28]
 23f8b9a:	9302      	str	r3, [sp, #8]
 23f8b9c:	bd09      	pop	{r0, r3, pc}
 23f8b9e:	0000      	.short	0x0000
 23f8ba0:	10079e48 	.word	0x10079e48
 23f8ba4:	00000034 	.word	0x00000034

023f8ba8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f8ba8:	b509      	push	{r0, r3, lr}
 23f8baa:	4804      	ldr	r0, [pc, #16]	; (23f8bbc <HAL_USB_USART_Flush_Data+0x14>)
 23f8bac:	6800      	ldr	r0, [r0, #0]
 23f8bae:	4b04      	ldr	r3, [pc, #16]	; (23f8bc0 <HAL_USB_USART_Flush_Data+0x18>)
 23f8bb0:	4403      	add	r3, r0
 23f8bb2:	681b      	ldr	r3, [r3, #0]
 23f8bb4:	6a1b      	ldr	r3, [r3, #32]
 23f8bb6:	9302      	str	r3, [sp, #8]
 23f8bb8:	bd09      	pop	{r0, r3, pc}
 23f8bba:	0000      	.short	0x0000
 23f8bbc:	10079e48 	.word	0x10079e48
 23f8bc0:	00000034 	.word	0x00000034

023f8bc4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f8bc4:	b509      	push	{r0, r3, lr}
 23f8bc6:	4804      	ldr	r0, [pc, #16]	; (23f8bd8 <HAL_USB_USART_Is_Connected+0x14>)
 23f8bc8:	6800      	ldr	r0, [r0, #0]
 23f8bca:	4b04      	ldr	r3, [pc, #16]	; (23f8bdc <HAL_USB_USART_Is_Connected+0x18>)
 23f8bcc:	4403      	add	r3, r0
 23f8bce:	681b      	ldr	r3, [r3, #0]
 23f8bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f8bd2:	9302      	str	r3, [sp, #8]
 23f8bd4:	bd09      	pop	{r0, r3, pc}
 23f8bd6:	0000      	.short	0x0000
 23f8bd8:	10079e48 	.word	0x10079e48
 23f8bdc:	00000034 	.word	0x00000034

023f8be0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f8be0:	b509      	push	{r0, r3, lr}
 23f8be2:	4804      	ldr	r0, [pc, #16]	; (23f8bf4 <hal_usart_end+0x14>)
 23f8be4:	6800      	ldr	r0, [r0, #0]
 23f8be6:	4b04      	ldr	r3, [pc, #16]	; (23f8bf8 <hal_usart_end+0x18>)
 23f8be8:	4403      	add	r3, r0
 23f8bea:	681b      	ldr	r3, [r3, #0]
 23f8bec:	689b      	ldr	r3, [r3, #8]
 23f8bee:	9302      	str	r3, [sp, #8]
 23f8bf0:	bd09      	pop	{r0, r3, pc}
 23f8bf2:	0000      	.short	0x0000
 23f8bf4:	10079e48 	.word	0x10079e48
 23f8bf8:	00000024 	.word	0x00000024

023f8bfc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f8bfc:	b509      	push	{r0, r3, lr}
 23f8bfe:	4804      	ldr	r0, [pc, #16]	; (23f8c10 <hal_usart_write+0x14>)
 23f8c00:	6800      	ldr	r0, [r0, #0]
 23f8c02:	4b04      	ldr	r3, [pc, #16]	; (23f8c14 <hal_usart_write+0x18>)
 23f8c04:	4403      	add	r3, r0
 23f8c06:	681b      	ldr	r3, [r3, #0]
 23f8c08:	68db      	ldr	r3, [r3, #12]
 23f8c0a:	9302      	str	r3, [sp, #8]
 23f8c0c:	bd09      	pop	{r0, r3, pc}
 23f8c0e:	0000      	.short	0x0000
 23f8c10:	10079e48 	.word	0x10079e48
 23f8c14:	00000024 	.word	0x00000024

023f8c18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f8c18:	b509      	push	{r0, r3, lr}
 23f8c1a:	4804      	ldr	r0, [pc, #16]	; (23f8c2c <hal_usart_available+0x14>)
 23f8c1c:	6800      	ldr	r0, [r0, #0]
 23f8c1e:	4b04      	ldr	r3, [pc, #16]	; (23f8c30 <hal_usart_available+0x18>)
 23f8c20:	4403      	add	r3, r0
 23f8c22:	681b      	ldr	r3, [r3, #0]
 23f8c24:	691b      	ldr	r3, [r3, #16]
 23f8c26:	9302      	str	r3, [sp, #8]
 23f8c28:	bd09      	pop	{r0, r3, pc}
 23f8c2a:	0000      	.short	0x0000
 23f8c2c:	10079e48 	.word	0x10079e48
 23f8c30:	00000024 	.word	0x00000024

023f8c34 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f8c34:	b509      	push	{r0, r3, lr}
 23f8c36:	4804      	ldr	r0, [pc, #16]	; (23f8c48 <hal_usart_read+0x14>)
 23f8c38:	6800      	ldr	r0, [r0, #0]
 23f8c3a:	4b04      	ldr	r3, [pc, #16]	; (23f8c4c <hal_usart_read+0x18>)
 23f8c3c:	4403      	add	r3, r0
 23f8c3e:	681b      	ldr	r3, [r3, #0]
 23f8c40:	695b      	ldr	r3, [r3, #20]
 23f8c42:	9302      	str	r3, [sp, #8]
 23f8c44:	bd09      	pop	{r0, r3, pc}
 23f8c46:	0000      	.short	0x0000
 23f8c48:	10079e48 	.word	0x10079e48
 23f8c4c:	00000024 	.word	0x00000024

023f8c50 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f8c50:	b509      	push	{r0, r3, lr}
 23f8c52:	4804      	ldr	r0, [pc, #16]	; (23f8c64 <hal_usart_peek+0x14>)
 23f8c54:	6800      	ldr	r0, [r0, #0]
 23f8c56:	4b04      	ldr	r3, [pc, #16]	; (23f8c68 <hal_usart_peek+0x18>)
 23f8c58:	4403      	add	r3, r0
 23f8c5a:	681b      	ldr	r3, [r3, #0]
 23f8c5c:	699b      	ldr	r3, [r3, #24]
 23f8c5e:	9302      	str	r3, [sp, #8]
 23f8c60:	bd09      	pop	{r0, r3, pc}
 23f8c62:	0000      	.short	0x0000
 23f8c64:	10079e48 	.word	0x10079e48
 23f8c68:	00000024 	.word	0x00000024

023f8c6c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f8c6c:	b509      	push	{r0, r3, lr}
 23f8c6e:	4804      	ldr	r0, [pc, #16]	; (23f8c80 <hal_usart_flush+0x14>)
 23f8c70:	6800      	ldr	r0, [r0, #0]
 23f8c72:	4b04      	ldr	r3, [pc, #16]	; (23f8c84 <hal_usart_flush+0x18>)
 23f8c74:	4403      	add	r3, r0
 23f8c76:	681b      	ldr	r3, [r3, #0]
 23f8c78:	69db      	ldr	r3, [r3, #28]
 23f8c7a:	9302      	str	r3, [sp, #8]
 23f8c7c:	bd09      	pop	{r0, r3, pc}
 23f8c7e:	0000      	.short	0x0000
 23f8c80:	10079e48 	.word	0x10079e48
 23f8c84:	00000024 	.word	0x00000024

023f8c88 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f8c88:	b509      	push	{r0, r3, lr}
 23f8c8a:	4804      	ldr	r0, [pc, #16]	; (23f8c9c <hal_usart_is_enabled+0x14>)
 23f8c8c:	6800      	ldr	r0, [r0, #0]
 23f8c8e:	4b04      	ldr	r3, [pc, #16]	; (23f8ca0 <hal_usart_is_enabled+0x18>)
 23f8c90:	4403      	add	r3, r0
 23f8c92:	681b      	ldr	r3, [r3, #0]
 23f8c94:	6a1b      	ldr	r3, [r3, #32]
 23f8c96:	9302      	str	r3, [sp, #8]
 23f8c98:	bd09      	pop	{r0, r3, pc}
 23f8c9a:	0000      	.short	0x0000
 23f8c9c:	10079e48 	.word	0x10079e48
 23f8ca0:	00000024 	.word	0x00000024

023f8ca4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f8ca4:	b509      	push	{r0, r3, lr}
 23f8ca6:	4804      	ldr	r0, [pc, #16]	; (23f8cb8 <hal_usart_available_data_for_write+0x14>)
 23f8ca8:	6800      	ldr	r0, [r0, #0]
 23f8caa:	4b04      	ldr	r3, [pc, #16]	; (23f8cbc <hal_usart_available_data_for_write+0x18>)
 23f8cac:	4403      	add	r3, r0
 23f8cae:	681b      	ldr	r3, [r3, #0]
 23f8cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f8cb2:	9302      	str	r3, [sp, #8]
 23f8cb4:	bd09      	pop	{r0, r3, pc}
 23f8cb6:	0000      	.short	0x0000
 23f8cb8:	10079e48 	.word	0x10079e48
 23f8cbc:	00000024 	.word	0x00000024

023f8cc0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f8cc0:	b509      	push	{r0, r3, lr}
 23f8cc2:	4804      	ldr	r0, [pc, #16]	; (23f8cd4 <hal_usart_begin_config+0x14>)
 23f8cc4:	6800      	ldr	r0, [r0, #0]
 23f8cc6:	4b04      	ldr	r3, [pc, #16]	; (23f8cd8 <hal_usart_begin_config+0x18>)
 23f8cc8:	4403      	add	r3, r0
 23f8cca:	681b      	ldr	r3, [r3, #0]
 23f8ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f8cce:	9302      	str	r3, [sp, #8]
 23f8cd0:	bd09      	pop	{r0, r3, pc}
 23f8cd2:	0000      	.short	0x0000
 23f8cd4:	10079e48 	.word	0x10079e48
 23f8cd8:	00000024 	.word	0x00000024

023f8cdc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f8cdc:	b509      	push	{r0, r3, lr}
 23f8cde:	4804      	ldr	r0, [pc, #16]	; (23f8cf0 <hal_usart_init_ex+0x14>)
 23f8ce0:	6800      	ldr	r0, [r0, #0]
 23f8ce2:	4b04      	ldr	r3, [pc, #16]	; (23f8cf4 <hal_usart_init_ex+0x18>)
 23f8ce4:	4403      	add	r3, r0
 23f8ce6:	681b      	ldr	r3, [r3, #0]
 23f8ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f8cea:	9302      	str	r3, [sp, #8]
 23f8cec:	bd09      	pop	{r0, r3, pc}
 23f8cee:	0000      	.short	0x0000
 23f8cf0:	10079e48 	.word	0x10079e48
 23f8cf4:	00000024 	.word	0x00000024

023f8cf8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f8cf8:	b509      	push	{r0, r3, lr}
 23f8cfa:	4804      	ldr	r0, [pc, #16]	; (23f8d0c <inet_inet_ntop+0x14>)
 23f8cfc:	6800      	ldr	r0, [r0, #0]
 23f8cfe:	4b04      	ldr	r3, [pc, #16]	; (23f8d10 <inet_inet_ntop+0x18>)
 23f8d00:	4403      	add	r3, r0
 23f8d02:	681b      	ldr	r3, [r3, #0]
 23f8d04:	695b      	ldr	r3, [r3, #20]
 23f8d06:	9302      	str	r3, [sp, #8]
 23f8d08:	bd09      	pop	{r0, r3, pc}
 23f8d0a:	0000      	.short	0x0000
 23f8d0c:	10079e48 	.word	0x10079e48
 23f8d10:	0000004c 	.word	0x0000004c

023f8d14 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f8d14:	b509      	push	{r0, r3, lr}
 23f8d16:	4804      	ldr	r0, [pc, #16]	; (23f8d28 <os_mutex_create+0x14>)
 23f8d18:	6800      	ldr	r0, [r0, #0]
 23f8d1a:	4b04      	ldr	r3, [pc, #16]	; (23f8d2c <os_mutex_create+0x18>)
 23f8d1c:	4403      	add	r3, r0
 23f8d1e:	681b      	ldr	r3, [r3, #0]
 23f8d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8d22:	9302      	str	r3, [sp, #8]
 23f8d24:	bd09      	pop	{r0, r3, pc}
 23f8d26:	0000      	.short	0x0000
 23f8d28:	10079e48 	.word	0x10079e48
 23f8d2c:	00000030 	.word	0x00000030

023f8d30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f8d30:	b509      	push	{r0, r3, lr}
 23f8d32:	4804      	ldr	r0, [pc, #16]	; (23f8d44 <os_mutex_recursive_create+0x14>)
 23f8d34:	6800      	ldr	r0, [r0, #0]
 23f8d36:	4b04      	ldr	r3, [pc, #16]	; (23f8d48 <os_mutex_recursive_create+0x18>)
 23f8d38:	4403      	add	r3, r0
 23f8d3a:	681b      	ldr	r3, [r3, #0]
 23f8d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f8d3e:	9302      	str	r3, [sp, #8]
 23f8d40:	bd09      	pop	{r0, r3, pc}
 23f8d42:	0000      	.short	0x0000
 23f8d44:	10079e48 	.word	0x10079e48
 23f8d48:	00000030 	.word	0x00000030

023f8d4c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f8d4c:	b509      	push	{r0, r3, lr}
 23f8d4e:	4804      	ldr	r0, [pc, #16]	; (23f8d60 <os_mutex_recursive_destroy+0x14>)
 23f8d50:	6800      	ldr	r0, [r0, #0]
 23f8d52:	4b04      	ldr	r3, [pc, #16]	; (23f8d64 <os_mutex_recursive_destroy+0x18>)
 23f8d54:	4403      	add	r3, r0
 23f8d56:	681b      	ldr	r3, [r3, #0]
 23f8d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f8d5a:	9302      	str	r3, [sp, #8]
 23f8d5c:	bd09      	pop	{r0, r3, pc}
 23f8d5e:	0000      	.short	0x0000
 23f8d60:	10079e48 	.word	0x10079e48
 23f8d64:	00000030 	.word	0x00000030

023f8d68 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f8d68:	b509      	push	{r0, r3, lr}
 23f8d6a:	4804      	ldr	r0, [pc, #16]	; (23f8d7c <os_mutex_recursive_lock+0x14>)
 23f8d6c:	6800      	ldr	r0, [r0, #0]
 23f8d6e:	4b04      	ldr	r3, [pc, #16]	; (23f8d80 <os_mutex_recursive_lock+0x18>)
 23f8d70:	4403      	add	r3, r0
 23f8d72:	681b      	ldr	r3, [r3, #0]
 23f8d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f8d76:	9302      	str	r3, [sp, #8]
 23f8d78:	bd09      	pop	{r0, r3, pc}
 23f8d7a:	0000      	.short	0x0000
 23f8d7c:	10079e48 	.word	0x10079e48
 23f8d80:	00000030 	.word	0x00000030

023f8d84 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f8d84:	b509      	push	{r0, r3, lr}
 23f8d86:	4804      	ldr	r0, [pc, #16]	; (23f8d98 <os_mutex_recursive_unlock+0x14>)
 23f8d88:	6800      	ldr	r0, [r0, #0]
 23f8d8a:	4b04      	ldr	r3, [pc, #16]	; (23f8d9c <os_mutex_recursive_unlock+0x18>)
 23f8d8c:	4403      	add	r3, r0
 23f8d8e:	681b      	ldr	r3, [r3, #0]
 23f8d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f8d92:	9302      	str	r3, [sp, #8]
 23f8d94:	bd09      	pop	{r0, r3, pc}
 23f8d96:	0000      	.short	0x0000
 23f8d98:	10079e48 	.word	0x10079e48
 23f8d9c:	00000030 	.word	0x00000030

023f8da0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23f8da0:	b509      	push	{r0, r3, lr}
 23f8da2:	4804      	ldr	r0, [pc, #16]	; (23f8db4 <hal_ble_stack_init+0x14>)
 23f8da4:	6800      	ldr	r0, [r0, #0]
 23f8da6:	4b04      	ldr	r3, [pc, #16]	; (23f8db8 <hal_ble_stack_init+0x18>)
 23f8da8:	4403      	add	r3, r0
 23f8daa:	681b      	ldr	r3, [r3, #0]
 23f8dac:	689b      	ldr	r3, [r3, #8]
 23f8dae:	9302      	str	r3, [sp, #8]
 23f8db0:	bd09      	pop	{r0, r3, pc}
 23f8db2:	0000      	.short	0x0000
 23f8db4:	10079e48 	.word	0x10079e48
 23f8db8:	00000060 	.word	0x00000060

023f8dbc <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23f8dbc:	b509      	push	{r0, r3, lr}
 23f8dbe:	4804      	ldr	r0, [pc, #16]	; (23f8dd0 <hal_ble_gap_start_scan+0x14>)
 23f8dc0:	6800      	ldr	r0, [r0, #0]
 23f8dc2:	4b04      	ldr	r3, [pc, #16]	; (23f8dd4 <hal_ble_gap_start_scan+0x18>)
 23f8dc4:	4403      	add	r3, r0
 23f8dc6:	681b      	ldr	r3, [r3, #0]
 23f8dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23f8dca:	9302      	str	r3, [sp, #8]
 23f8dcc:	bd09      	pop	{r0, r3, pc}
 23f8dce:	0000      	.short	0x0000
 23f8dd0:	10079e48 	.word	0x10079e48
 23f8dd4:	00000060 	.word	0x00000060

023f8dd8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23f8dd8:	b509      	push	{r0, r3, lr}
 23f8dda:	4804      	ldr	r0, [pc, #16]	; (23f8dec <hal_ble_gap_stop_scan+0x14>)
 23f8ddc:	6800      	ldr	r0, [r0, #0]
 23f8dde:	4b04      	ldr	r3, [pc, #16]	; (23f8df0 <hal_ble_gap_stop_scan+0x18>)
 23f8de0:	4403      	add	r3, r0
 23f8de2:	681b      	ldr	r3, [r3, #0]
 23f8de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23f8de8:	9302      	str	r3, [sp, #8]
 23f8dea:	bd09      	pop	{r0, r3, pc}
 23f8dec:	10079e48 	.word	0x10079e48
 23f8df0:	00000060 	.word	0x00000060

023f8df4 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23f8df4:	b509      	push	{r0, r3, lr}
 23f8df6:	4804      	ldr	r0, [pc, #16]	; (23f8e08 <hal_ble_gap_disconnect+0x14>)
 23f8df8:	6800      	ldr	r0, [r0, #0]
 23f8dfa:	4b04      	ldr	r3, [pc, #16]	; (23f8e0c <hal_ble_gap_disconnect+0x18>)
 23f8dfc:	4403      	add	r3, r0
 23f8dfe:	681b      	ldr	r3, [r3, #0]
 23f8e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f8e04:	9302      	str	r3, [sp, #8]
 23f8e06:	bd09      	pop	{r0, r3, pc}
 23f8e08:	10079e48 	.word	0x10079e48
 23f8e0c:	00000060 	.word	0x00000060

023f8e10 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
 23f8e10:	b509      	push	{r0, r3, lr}
 23f8e12:	4804      	ldr	r0, [pc, #16]	; (23f8e24 <hal_ble_gatt_client_discover_all_services+0x14>)
 23f8e14:	6800      	ldr	r0, [r0, #0]
 23f8e16:	4b04      	ldr	r3, [pc, #16]	; (23f8e28 <hal_ble_gatt_client_discover_all_services+0x18>)
 23f8e18:	4403      	add	r3, r0
 23f8e1a:	681b      	ldr	r3, [r3, #0]
 23f8e1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 23f8e20:	9302      	str	r3, [sp, #8]
 23f8e22:	bd09      	pop	{r0, r3, pc}
 23f8e24:	10079e48 	.word	0x10079e48
 23f8e28:	00000060 	.word	0x00000060

023f8e2c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
 23f8e2c:	b509      	push	{r0, r3, lr}
 23f8e2e:	4804      	ldr	r0, [pc, #16]	; (23f8e40 <hal_ble_gatt_client_discover_characteristics+0x14>)
 23f8e30:	6800      	ldr	r0, [r0, #0]
 23f8e32:	4b04      	ldr	r3, [pc, #16]	; (23f8e44 <hal_ble_gatt_client_discover_characteristics+0x18>)
 23f8e34:	4403      	add	r3, r0
 23f8e36:	681b      	ldr	r3, [r3, #0]
 23f8e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 23f8e3c:	9302      	str	r3, [sp, #8]
 23f8e3e:	bd09      	pop	{r0, r3, pc}
 23f8e40:	10079e48 	.word	0x10079e48
 23f8e44:	00000060 	.word	0x00000060

023f8e48 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
 23f8e48:	b509      	push	{r0, r3, lr}
 23f8e4a:	4804      	ldr	r0, [pc, #16]	; (23f8e5c <hal_ble_gatt_client_read+0x14>)
 23f8e4c:	6800      	ldr	r0, [r0, #0]
 23f8e4e:	4b04      	ldr	r3, [pc, #16]	; (23f8e60 <hal_ble_gatt_client_read+0x18>)
 23f8e50:	4403      	add	r3, r0
 23f8e52:	681b      	ldr	r3, [r3, #0]
 23f8e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 23f8e58:	9302      	str	r3, [sp, #8]
 23f8e5a:	bd09      	pop	{r0, r3, pc}
 23f8e5c:	10079e48 	.word	0x10079e48
 23f8e60:	00000060 	.word	0x00000060

023f8e64 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
 23f8e64:	b509      	push	{r0, r3, lr}
 23f8e66:	4804      	ldr	r0, [pc, #16]	; (23f8e78 <hal_ble_gap_connect+0x14>)
 23f8e68:	6800      	ldr	r0, [r0, #0]
 23f8e6a:	4b04      	ldr	r3, [pc, #16]	; (23f8e7c <hal_ble_gap_connect+0x18>)
 23f8e6c:	4403      	add	r3, r0
 23f8e6e:	681b      	ldr	r3, [r3, #0]
 23f8e70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 23f8e74:	9302      	str	r3, [sp, #8]
 23f8e76:	bd09      	pop	{r0, r3, pc}
 23f8e78:	10079e48 	.word	0x10079e48
 23f8e7c:	00000060 	.word	0x00000060

023f8e80 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23f8e80:	b509      	push	{r0, r3, lr}
 23f8e82:	4804      	ldr	r0, [pc, #16]	; (23f8e94 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23f8e84:	6800      	ldr	r0, [r0, #0]
 23f8e86:	4b04      	ldr	r3, [pc, #16]	; (23f8e98 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23f8e88:	4403      	add	r3, r0
 23f8e8a:	681b      	ldr	r3, [r3, #0]
 23f8e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23f8e90:	9302      	str	r3, [sp, #8]
 23f8e92:	bd09      	pop	{r0, r3, pc}
 23f8e94:	10079e48 	.word	0x10079e48
 23f8e98:	00000060 	.word	0x00000060

023f8e9c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
 23f8e9c:	b509      	push	{r0, r3, lr}
 23f8e9e:	4804      	ldr	r0, [pc, #16]	; (23f8eb0 <hal_ble_gatt_client_configure_cccd+0x14>)
 23f8ea0:	6800      	ldr	r0, [r0, #0]
 23f8ea2:	4b04      	ldr	r3, [pc, #16]	; (23f8eb4 <hal_ble_gatt_client_configure_cccd+0x18>)
 23f8ea4:	4403      	add	r3, r0
 23f8ea6:	681b      	ldr	r3, [r3, #0]
 23f8ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 23f8eac:	9302      	str	r3, [sp, #8]
 23f8eae:	bd09      	pop	{r0, r3, pc}
 23f8eb0:	10079e48 	.word	0x10079e48
 23f8eb4:	00000060 	.word	0x00000060

023f8eb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f8eb8:	b509      	push	{r0, r3, lr}
 23f8eba:	4804      	ldr	r0, [pc, #16]	; (23f8ecc <HAL_RNG_GetRandomNumber+0x14>)
 23f8ebc:	6800      	ldr	r0, [r0, #0]
 23f8ebe:	4b04      	ldr	r3, [pc, #16]	; (23f8ed0 <HAL_RNG_GetRandomNumber+0x18>)
 23f8ec0:	4403      	add	r3, r0
 23f8ec2:	681b      	ldr	r3, [r3, #0]
 23f8ec4:	685b      	ldr	r3, [r3, #4]
 23f8ec6:	9302      	str	r3, [sp, #8]
 23f8ec8:	bd09      	pop	{r0, r3, pc}
 23f8eca:	0000      	.short	0x0000
 23f8ecc:	10079e48 	.word	0x10079e48
 23f8ed0:	00000000 	.word	0x00000000

023f8ed4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f8ed4:	b509      	push	{r0, r3, lr}
 23f8ed6:	4804      	ldr	r0, [pc, #16]	; (23f8ee8 <HAL_Delay_Microseconds+0x14>)
 23f8ed8:	6800      	ldr	r0, [r0, #0]
 23f8eda:	4b04      	ldr	r3, [pc, #16]	; (23f8eec <HAL_Delay_Microseconds+0x18>)
 23f8edc:	4403      	add	r3, r0
 23f8ede:	681b      	ldr	r3, [r3, #0]
 23f8ee0:	68db      	ldr	r3, [r3, #12]
 23f8ee2:	9302      	str	r3, [sp, #8]
 23f8ee4:	bd09      	pop	{r0, r3, pc}
 23f8ee6:	0000      	.short	0x0000
 23f8ee8:	10079e48 	.word	0x10079e48
 23f8eec:	00000000 	.word	0x00000000

023f8ef0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f8ef0:	b509      	push	{r0, r3, lr}
 23f8ef2:	4804      	ldr	r0, [pc, #16]	; (23f8f04 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f8ef4:	6800      	ldr	r0, [r0, #0]
 23f8ef6:	4b04      	ldr	r3, [pc, #16]	; (23f8f08 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f8ef8:	4403      	add	r3, r0
 23f8efa:	681b      	ldr	r3, [r3, #0]
 23f8efc:	695b      	ldr	r3, [r3, #20]
 23f8efe:	9302      	str	r3, [sp, #8]
 23f8f00:	bd09      	pop	{r0, r3, pc}
 23f8f02:	0000      	.short	0x0000
 23f8f04:	10079e48 	.word	0x10079e48
 23f8f08:	00000000 	.word	0x00000000

023f8f0c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f8f0c:	b509      	push	{r0, r3, lr}
 23f8f0e:	4804      	ldr	r0, [pc, #16]	; (23f8f20 <hal_timer_millis+0x14>)
 23f8f10:	6800      	ldr	r0, [r0, #0]
 23f8f12:	4b04      	ldr	r3, [pc, #16]	; (23f8f24 <hal_timer_millis+0x18>)
 23f8f14:	4403      	add	r3, r0
 23f8f16:	681b      	ldr	r3, [r3, #0]
 23f8f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f8f1a:	9302      	str	r3, [sp, #8]
 23f8f1c:	bd09      	pop	{r0, r3, pc}
 23f8f1e:	0000      	.short	0x0000
 23f8f20:	10079e48 	.word	0x10079e48
 23f8f24:	00000000 	.word	0x00000000

023f8f28 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f8f28:	b509      	push	{r0, r3, lr}
 23f8f2a:	4804      	ldr	r0, [pc, #16]	; (23f8f3c <netdb_freeaddrinfo+0x14>)
 23f8f2c:	6800      	ldr	r0, [r0, #0]
 23f8f2e:	4b04      	ldr	r3, [pc, #16]	; (23f8f40 <netdb_freeaddrinfo+0x18>)
 23f8f30:	4403      	add	r3, r0
 23f8f32:	681b      	ldr	r3, [r3, #0]
 23f8f34:	689b      	ldr	r3, [r3, #8]
 23f8f36:	9302      	str	r3, [sp, #8]
 23f8f38:	bd09      	pop	{r0, r3, pc}
 23f8f3a:	0000      	.short	0x0000
 23f8f3c:	10079e48 	.word	0x10079e48
 23f8f40:	00000050 	.word	0x00000050

023f8f44 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f8f44:	b509      	push	{r0, r3, lr}
 23f8f46:	4804      	ldr	r0, [pc, #16]	; (23f8f58 <netdb_getaddrinfo+0x14>)
 23f8f48:	6800      	ldr	r0, [r0, #0]
 23f8f4a:	4b04      	ldr	r3, [pc, #16]	; (23f8f5c <netdb_getaddrinfo+0x18>)
 23f8f4c:	4403      	add	r3, r0
 23f8f4e:	681b      	ldr	r3, [r3, #0]
 23f8f50:	68db      	ldr	r3, [r3, #12]
 23f8f52:	9302      	str	r3, [sp, #8]
 23f8f54:	bd09      	pop	{r0, r3, pc}
 23f8f56:	0000      	.short	0x0000
 23f8f58:	10079e48 	.word	0x10079e48
 23f8f5c:	00000050 	.word	0x00000050

023f8f60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f8f60:	b509      	push	{r0, r3, lr}
 23f8f62:	4804      	ldr	r0, [pc, #16]	; (23f8f74 <panic_+0x14>)
 23f8f64:	6800      	ldr	r0, [r0, #0]
 23f8f66:	4b04      	ldr	r3, [pc, #16]	; (23f8f78 <panic_+0x18>)
 23f8f68:	4403      	add	r3, r0
 23f8f6a:	681b      	ldr	r3, [r3, #0]
 23f8f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f8f6e:	9302      	str	r3, [sp, #8]
 23f8f70:	bd09      	pop	{r0, r3, pc}
 23f8f72:	0000      	.short	0x0000
 23f8f74:	10079e48 	.word	0x10079e48
 23f8f78:	00000048 	.word	0x00000048

023f8f7c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f8f7c:	b509      	push	{r0, r3, lr}
 23f8f7e:	4804      	ldr	r0, [pc, #16]	; (23f8f90 <log_message+0x14>)
 23f8f80:	6800      	ldr	r0, [r0, #0]
 23f8f82:	4b04      	ldr	r3, [pc, #16]	; (23f8f94 <log_message+0x18>)
 23f8f84:	4403      	add	r3, r0
 23f8f86:	681b      	ldr	r3, [r3, #0]
 23f8f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f8f8a:	9302      	str	r3, [sp, #8]
 23f8f8c:	bd09      	pop	{r0, r3, pc}
 23f8f8e:	0000      	.short	0x0000
 23f8f90:	10079e48 	.word	0x10079e48
 23f8f94:	00000048 	.word	0x00000048

023f8f98 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f8f98:	b509      	push	{r0, r3, lr}
 23f8f9a:	4804      	ldr	r0, [pc, #16]	; (23f8fac <log_level_name+0x14>)
 23f8f9c:	6800      	ldr	r0, [r0, #0]
 23f8f9e:	4b04      	ldr	r3, [pc, #16]	; (23f8fb0 <log_level_name+0x18>)
 23f8fa0:	4403      	add	r3, r0
 23f8fa2:	681b      	ldr	r3, [r3, #0]
 23f8fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f8fa6:	9302      	str	r3, [sp, #8]
 23f8fa8:	bd09      	pop	{r0, r3, pc}
 23f8faa:	0000      	.short	0x0000
 23f8fac:	10079e48 	.word	0x10079e48
 23f8fb0:	00000048 	.word	0x00000048

023f8fb4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f8fb4:	b509      	push	{r0, r3, lr}
 23f8fb6:	4804      	ldr	r0, [pc, #16]	; (23f8fc8 <log_set_callbacks+0x14>)
 23f8fb8:	6800      	ldr	r0, [r0, #0]
 23f8fba:	4b04      	ldr	r3, [pc, #16]	; (23f8fcc <log_set_callbacks+0x18>)
 23f8fbc:	4403      	add	r3, r0
 23f8fbe:	681b      	ldr	r3, [r3, #0]
 23f8fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f8fc2:	9302      	str	r3, [sp, #8]
 23f8fc4:	bd09      	pop	{r0, r3, pc}
 23f8fc6:	0000      	.short	0x0000
 23f8fc8:	10079e48 	.word	0x10079e48
 23f8fcc:	00000048 	.word	0x00000048

023f8fd0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 23f8fd0:	b509      	push	{r0, r3, lr}
 23f8fd2:	4804      	ldr	r0, [pc, #16]	; (23f8fe4 <spark_process+0x14>)
 23f8fd4:	6800      	ldr	r0, [r0, #0]
 23f8fd6:	4b04      	ldr	r3, [pc, #16]	; (23f8fe8 <spark_process+0x18>)
 23f8fd8:	4403      	add	r3, r0
 23f8fda:	681b      	ldr	r3, [r3, #0]
 23f8fdc:	689b      	ldr	r3, [r3, #8]
 23f8fde:	9302      	str	r3, [sp, #8]
 23f8fe0:	bd09      	pop	{r0, r3, pc}
 23f8fe2:	0000      	.short	0x0000
 23f8fe4:	10079e48 	.word	0x10079e48
 23f8fe8:	0000002c 	.word	0x0000002c

023f8fec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f8fec:	b509      	push	{r0, r3, lr}
 23f8fee:	4804      	ldr	r0, [pc, #16]	; (23f9000 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f8ff0:	6800      	ldr	r0, [r0, #0]
 23f8ff2:	4b04      	ldr	r3, [pc, #16]	; (23f9004 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f8ff4:	4403      	add	r3, r0
 23f8ff6:	681b      	ldr	r3, [r3, #0]
 23f8ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f8ffa:	9302      	str	r3, [sp, #8]
 23f8ffc:	bd09      	pop	{r0, r3, pc}
 23f8ffe:	0000      	.short	0x0000
 23f9000:	10079e48 	.word	0x10079e48
 23f9004:	0000002c 	.word	0x0000002c

023f9008 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9008:	b509      	push	{r0, r3, lr}
 23f900a:	4804      	ldr	r0, [pc, #16]	; (23f901c <network_connect+0x14>)
 23f900c:	6800      	ldr	r0, [r0, #0]
 23f900e:	4b04      	ldr	r3, [pc, #16]	; (23f9020 <network_connect+0x18>)
 23f9010:	4403      	add	r3, r0
 23f9012:	681b      	ldr	r3, [r3, #0]
 23f9014:	685b      	ldr	r3, [r3, #4]
 23f9016:	9302      	str	r3, [sp, #8]
 23f9018:	bd09      	pop	{r0, r3, pc}
 23f901a:	0000      	.short	0x0000
 23f901c:	10079e48 	.word	0x10079e48
 23f9020:	00000028 	.word	0x00000028

023f9024 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f9024:	b509      	push	{r0, r3, lr}
 23f9026:	4804      	ldr	r0, [pc, #16]	; (23f9038 <network_connecting+0x14>)
 23f9028:	6800      	ldr	r0, [r0, #0]
 23f902a:	4b04      	ldr	r3, [pc, #16]	; (23f903c <network_connecting+0x18>)
 23f902c:	4403      	add	r3, r0
 23f902e:	681b      	ldr	r3, [r3, #0]
 23f9030:	689b      	ldr	r3, [r3, #8]
 23f9032:	9302      	str	r3, [sp, #8]
 23f9034:	bd09      	pop	{r0, r3, pc}
 23f9036:	0000      	.short	0x0000
 23f9038:	10079e48 	.word	0x10079e48
 23f903c:	00000028 	.word	0x00000028

023f9040 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f9040:	b509      	push	{r0, r3, lr}
 23f9042:	4804      	ldr	r0, [pc, #16]	; (23f9054 <network_disconnect+0x14>)
 23f9044:	6800      	ldr	r0, [r0, #0]
 23f9046:	4b04      	ldr	r3, [pc, #16]	; (23f9058 <network_disconnect+0x18>)
 23f9048:	4403      	add	r3, r0
 23f904a:	681b      	ldr	r3, [r3, #0]
 23f904c:	68db      	ldr	r3, [r3, #12]
 23f904e:	9302      	str	r3, [sp, #8]
 23f9050:	bd09      	pop	{r0, r3, pc}
 23f9052:	0000      	.short	0x0000
 23f9054:	10079e48 	.word	0x10079e48
 23f9058:	00000028 	.word	0x00000028

023f905c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f905c:	b509      	push	{r0, r3, lr}
 23f905e:	4804      	ldr	r0, [pc, #16]	; (23f9070 <network_ready+0x14>)
 23f9060:	6800      	ldr	r0, [r0, #0]
 23f9062:	4b04      	ldr	r3, [pc, #16]	; (23f9074 <network_ready+0x18>)
 23f9064:	4403      	add	r3, r0
 23f9066:	681b      	ldr	r3, [r3, #0]
 23f9068:	691b      	ldr	r3, [r3, #16]
 23f906a:	9302      	str	r3, [sp, #8]
 23f906c:	bd09      	pop	{r0, r3, pc}
 23f906e:	0000      	.short	0x0000
 23f9070:	10079e48 	.word	0x10079e48
 23f9074:	00000028 	.word	0x00000028

023f9078 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9078:	b509      	push	{r0, r3, lr}
 23f907a:	4804      	ldr	r0, [pc, #16]	; (23f908c <network_on+0x14>)
 23f907c:	6800      	ldr	r0, [r0, #0]
 23f907e:	4b04      	ldr	r3, [pc, #16]	; (23f9090 <network_on+0x18>)
 23f9080:	4403      	add	r3, r0
 23f9082:	681b      	ldr	r3, [r3, #0]
 23f9084:	695b      	ldr	r3, [r3, #20]
 23f9086:	9302      	str	r3, [sp, #8]
 23f9088:	bd09      	pop	{r0, r3, pc}
 23f908a:	0000      	.short	0x0000
 23f908c:	10079e48 	.word	0x10079e48
 23f9090:	00000028 	.word	0x00000028

023f9094 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9094:	b509      	push	{r0, r3, lr}
 23f9096:	4804      	ldr	r0, [pc, #16]	; (23f90a8 <network_off+0x14>)
 23f9098:	6800      	ldr	r0, [r0, #0]
 23f909a:	4b04      	ldr	r3, [pc, #16]	; (23f90ac <network_off+0x18>)
 23f909c:	4403      	add	r3, r0
 23f909e:	681b      	ldr	r3, [r3, #0]
 23f90a0:	699b      	ldr	r3, [r3, #24]
 23f90a2:	9302      	str	r3, [sp, #8]
 23f90a4:	bd09      	pop	{r0, r3, pc}
 23f90a6:	0000      	.short	0x0000
 23f90a8:	10079e48 	.word	0x10079e48
 23f90ac:	00000028 	.word	0x00000028

023f90b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f90b0:	b509      	push	{r0, r3, lr}
 23f90b2:	4804      	ldr	r0, [pc, #16]	; (23f90c4 <network_listen+0x14>)
 23f90b4:	6800      	ldr	r0, [r0, #0]
 23f90b6:	4b04      	ldr	r3, [pc, #16]	; (23f90c8 <network_listen+0x18>)
 23f90b8:	4403      	add	r3, r0
 23f90ba:	681b      	ldr	r3, [r3, #0]
 23f90bc:	69db      	ldr	r3, [r3, #28]
 23f90be:	9302      	str	r3, [sp, #8]
 23f90c0:	bd09      	pop	{r0, r3, pc}
 23f90c2:	0000      	.short	0x0000
 23f90c4:	10079e48 	.word	0x10079e48
 23f90c8:	00000028 	.word	0x00000028

023f90cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f90cc:	b509      	push	{r0, r3, lr}
 23f90ce:	4804      	ldr	r0, [pc, #16]	; (23f90e0 <network_listening+0x14>)
 23f90d0:	6800      	ldr	r0, [r0, #0]
 23f90d2:	4b04      	ldr	r3, [pc, #16]	; (23f90e4 <network_listening+0x18>)
 23f90d4:	4403      	add	r3, r0
 23f90d6:	681b      	ldr	r3, [r3, #0]
 23f90d8:	6a1b      	ldr	r3, [r3, #32]
 23f90da:	9302      	str	r3, [sp, #8]
 23f90dc:	bd09      	pop	{r0, r3, pc}
 23f90de:	0000      	.short	0x0000
 23f90e0:	10079e48 	.word	0x10079e48
 23f90e4:	00000028 	.word	0x00000028

023f90e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f90e8:	b509      	push	{r0, r3, lr}
 23f90ea:	4804      	ldr	r0, [pc, #16]	; (23f90fc <network_set_listen_timeout+0x14>)
 23f90ec:	6800      	ldr	r0, [r0, #0]
 23f90ee:	4b04      	ldr	r3, [pc, #16]	; (23f9100 <network_set_listen_timeout+0x18>)
 23f90f0:	4403      	add	r3, r0
 23f90f2:	681b      	ldr	r3, [r3, #0]
 23f90f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f90f6:	9302      	str	r3, [sp, #8]
 23f90f8:	bd09      	pop	{r0, r3, pc}
 23f90fa:	0000      	.short	0x0000
 23f90fc:	10079e48 	.word	0x10079e48
 23f9100:	00000028 	.word	0x00000028

023f9104 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f9104:	b509      	push	{r0, r3, lr}
 23f9106:	4804      	ldr	r0, [pc, #16]	; (23f9118 <network_get_listen_timeout+0x14>)
 23f9108:	6800      	ldr	r0, [r0, #0]
 23f910a:	4b04      	ldr	r3, [pc, #16]	; (23f911c <network_get_listen_timeout+0x18>)
 23f910c:	4403      	add	r3, r0
 23f910e:	681b      	ldr	r3, [r3, #0]
 23f9110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9112:	9302      	str	r3, [sp, #8]
 23f9114:	bd09      	pop	{r0, r3, pc}
 23f9116:	0000      	.short	0x0000
 23f9118:	10079e48 	.word	0x10079e48
 23f911c:	00000028 	.word	0x00000028

023f9120 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f9120:	b509      	push	{r0, r3, lr}
 23f9122:	4804      	ldr	r0, [pc, #16]	; (23f9134 <network_is_on+0x14>)
 23f9124:	6800      	ldr	r0, [r0, #0]
 23f9126:	4b04      	ldr	r3, [pc, #16]	; (23f9138 <network_is_on+0x18>)
 23f9128:	4403      	add	r3, r0
 23f912a:	681b      	ldr	r3, [r3, #0]
 23f912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f912e:	9302      	str	r3, [sp, #8]
 23f9130:	bd09      	pop	{r0, r3, pc}
 23f9132:	0000      	.short	0x0000
 23f9134:	10079e48 	.word	0x10079e48
 23f9138:	00000028 	.word	0x00000028

023f913c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f913c:	b509      	push	{r0, r3, lr}
 23f913e:	4804      	ldr	r0, [pc, #16]	; (23f9150 <network_is_off+0x14>)
 23f9140:	6800      	ldr	r0, [r0, #0]
 23f9142:	4b04      	ldr	r3, [pc, #16]	; (23f9154 <network_is_off+0x18>)
 23f9144:	4403      	add	r3, r0
 23f9146:	681b      	ldr	r3, [r3, #0]
 23f9148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f914a:	9302      	str	r3, [sp, #8]
 23f914c:	bd09      	pop	{r0, r3, pc}
 23f914e:	0000      	.short	0x0000
 23f9150:	10079e48 	.word	0x10079e48
 23f9154:	00000028 	.word	0x00000028

023f9158 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f9158:	b509      	push	{r0, r3, lr}
 23f915a:	4804      	ldr	r0, [pc, #16]	; (23f916c <set_system_mode+0x14>)
 23f915c:	6800      	ldr	r0, [r0, #0]
 23f915e:	4b04      	ldr	r3, [pc, #16]	; (23f9170 <set_system_mode+0x18>)
 23f9160:	4403      	add	r3, r0
 23f9162:	681b      	ldr	r3, [r3, #0]
 23f9164:	685b      	ldr	r3, [r3, #4]
 23f9166:	9302      	str	r3, [sp, #8]
 23f9168:	bd09      	pop	{r0, r3, pc}
 23f916a:	0000      	.short	0x0000
 23f916c:	10079e48 	.word	0x10079e48
 23f9170:	00000008 	.word	0x00000008

023f9174 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f9174:	b509      	push	{r0, r3, lr}
 23f9176:	4804      	ldr	r0, [pc, #16]	; (23f9188 <system_delay_ms+0x14>)
 23f9178:	6800      	ldr	r0, [r0, #0]
 23f917a:	4b04      	ldr	r3, [pc, #16]	; (23f918c <system_delay_ms+0x18>)
 23f917c:	4403      	add	r3, r0
 23f917e:	681b      	ldr	r3, [r3, #0]
 23f9180:	695b      	ldr	r3, [r3, #20]
 23f9182:	9302      	str	r3, [sp, #8]
 23f9184:	bd09      	pop	{r0, r3, pc}
 23f9186:	0000      	.short	0x0000
 23f9188:	10079e48 	.word	0x10079e48
 23f918c:	00000008 	.word	0x00000008

023f9190 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f9190:	b509      	push	{r0, r3, lr}
 23f9192:	4804      	ldr	r0, [pc, #16]	; (23f91a4 <system_thread_set_state+0x14>)
 23f9194:	6800      	ldr	r0, [r0, #0]
 23f9196:	4b04      	ldr	r3, [pc, #16]	; (23f91a8 <system_thread_set_state+0x18>)
 23f9198:	4403      	add	r3, r0
 23f919a:	681b      	ldr	r3, [r3, #0]
 23f919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f919e:	9302      	str	r3, [sp, #8]
 23f91a0:	bd09      	pop	{r0, r3, pc}
 23f91a2:	0000      	.short	0x0000
 23f91a4:	10079e48 	.word	0x10079e48
 23f91a8:	00000008 	.word	0x00000008

023f91ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f91ac:	b509      	push	{r0, r3, lr}
 23f91ae:	4804      	ldr	r0, [pc, #16]	; (23f91c0 <system_ctrl_set_app_request_handler+0x14>)
 23f91b0:	6800      	ldr	r0, [r0, #0]
 23f91b2:	4b04      	ldr	r3, [pc, #16]	; (23f91c4 <system_ctrl_set_app_request_handler+0x18>)
 23f91b4:	4403      	add	r3, r0
 23f91b6:	681b      	ldr	r3, [r3, #0]
 23f91b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f91bc:	9302      	str	r3, [sp, #8]
 23f91be:	bd09      	pop	{r0, r3, pc}
 23f91c0:	10079e48 	.word	0x10079e48
 23f91c4:	00000008 	.word	0x00000008

023f91c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f91c8:	b509      	push	{r0, r3, lr}
 23f91ca:	4804      	ldr	r0, [pc, #16]	; (23f91dc <system_ctrl_set_result+0x14>)
 23f91cc:	6800      	ldr	r0, [r0, #0]
 23f91ce:	4b04      	ldr	r3, [pc, #16]	; (23f91e0 <system_ctrl_set_result+0x18>)
 23f91d0:	4403      	add	r3, r0
 23f91d2:	681b      	ldr	r3, [r3, #0]
 23f91d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f91d8:	9302      	str	r3, [sp, #8]
 23f91da:	bd09      	pop	{r0, r3, pc}
 23f91dc:	10079e48 	.word	0x10079e48
 23f91e0:	00000008 	.word	0x00000008

023f91e4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f91e4:	b509      	push	{r0, r3, lr}
 23f91e6:	4804      	ldr	r0, [pc, #16]	; (23f91f8 <malloc+0x14>)
 23f91e8:	6800      	ldr	r0, [r0, #0]
 23f91ea:	4b04      	ldr	r3, [pc, #16]	; (23f91fc <malloc+0x18>)
 23f91ec:	4403      	add	r3, r0
 23f91ee:	681b      	ldr	r3, [r3, #0]
 23f91f0:	681b      	ldr	r3, [r3, #0]
 23f91f2:	9302      	str	r3, [sp, #8]
 23f91f4:	bd09      	pop	{r0, r3, pc}
 23f91f6:	0000      	.short	0x0000
 23f91f8:	10079e48 	.word	0x10079e48
 23f91fc:	00000004 	.word	0x00000004

023f9200 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f9200:	b509      	push	{r0, r3, lr}
 23f9202:	4804      	ldr	r0, [pc, #16]	; (23f9214 <free+0x14>)
 23f9204:	6800      	ldr	r0, [r0, #0]
 23f9206:	4b04      	ldr	r3, [pc, #16]	; (23f9218 <free+0x18>)
 23f9208:	4403      	add	r3, r0
 23f920a:	681b      	ldr	r3, [r3, #0]
 23f920c:	685b      	ldr	r3, [r3, #4]
 23f920e:	9302      	str	r3, [sp, #8]
 23f9210:	bd09      	pop	{r0, r3, pc}
 23f9212:	0000      	.short	0x0000
 23f9214:	10079e48 	.word	0x10079e48
 23f9218:	00000004 	.word	0x00000004

023f921c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f921c:	b509      	push	{r0, r3, lr}
 23f921e:	4804      	ldr	r0, [pc, #16]	; (23f9230 <realloc+0x14>)
 23f9220:	6800      	ldr	r0, [r0, #0]
 23f9222:	4b04      	ldr	r3, [pc, #16]	; (23f9234 <realloc+0x18>)
 23f9224:	4403      	add	r3, r0
 23f9226:	681b      	ldr	r3, [r3, #0]
 23f9228:	689b      	ldr	r3, [r3, #8]
 23f922a:	9302      	str	r3, [sp, #8]
 23f922c:	bd09      	pop	{r0, r3, pc}
 23f922e:	0000      	.short	0x0000
 23f9230:	10079e48 	.word	0x10079e48
 23f9234:	00000004 	.word	0x00000004

023f9238 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f9238:	b509      	push	{r0, r3, lr}
 23f923a:	4804      	ldr	r0, [pc, #16]	; (23f924c <vsnprintf+0x14>)
 23f923c:	6800      	ldr	r0, [r0, #0]
 23f923e:	4b04      	ldr	r3, [pc, #16]	; (23f9250 <vsnprintf+0x18>)
 23f9240:	4403      	add	r3, r0
 23f9242:	681b      	ldr	r3, [r3, #0]
 23f9244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9246:	9302      	str	r3, [sp, #8]
 23f9248:	bd09      	pop	{r0, r3, pc}
 23f924a:	0000      	.short	0x0000
 23f924c:	10079e48 	.word	0x10079e48
 23f9250:	00000004 	.word	0x00000004

023f9254 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f9254:	b509      	push	{r0, r3, lr}
 23f9256:	4804      	ldr	r0, [pc, #16]	; (23f9268 <abort+0x14>)
 23f9258:	6800      	ldr	r0, [r0, #0]
 23f925a:	4b04      	ldr	r3, [pc, #16]	; (23f926c <abort+0x18>)
 23f925c:	4403      	add	r3, r0
 23f925e:	681b      	ldr	r3, [r3, #0]
 23f9260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9262:	9302      	str	r3, [sp, #8]
 23f9264:	bd09      	pop	{r0, r3, pc}
 23f9266:	0000      	.short	0x0000
 23f9268:	10079e48 	.word	0x10079e48
 23f926c:	00000004 	.word	0x00000004

023f9270 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f9270:	b509      	push	{r0, r3, lr}
 23f9272:	4804      	ldr	r0, [pc, #16]	; (23f9284 <__errno+0x14>)
 23f9274:	6800      	ldr	r0, [r0, #0]
 23f9276:	4b04      	ldr	r3, [pc, #16]	; (23f9288 <__errno+0x18>)
 23f9278:	4403      	add	r3, r0
 23f927a:	681b      	ldr	r3, [r3, #0]
 23f927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f927e:	9302      	str	r3, [sp, #8]
 23f9280:	bd09      	pop	{r0, r3, pc}
 23f9282:	0000      	.short	0x0000
 23f9284:	10079e48 	.word	0x10079e48
 23f9288:	00000004 	.word	0x00000004

023f928c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f928c:	b509      	push	{r0, r3, lr}
 23f928e:	4804      	ldr	r0, [pc, #16]	; (23f92a0 <__assert_func+0x14>)
 23f9290:	6800      	ldr	r0, [r0, #0]
 23f9292:	4b04      	ldr	r3, [pc, #16]	; (23f92a4 <__assert_func+0x18>)
 23f9294:	4403      	add	r3, r0
 23f9296:	681b      	ldr	r3, [r3, #0]
 23f9298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f929a:	9302      	str	r3, [sp, #8]
 23f929c:	bd09      	pop	{r0, r3, pc}
 23f929e:	0000      	.short	0x0000
 23f92a0:	10079e48 	.word	0x10079e48
 23f92a4:	00000004 	.word	0x00000004

023f92a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f92a8:	b509      	push	{r0, r3, lr}
 23f92aa:	4804      	ldr	r0, [pc, #16]	; (23f92bc <newlib_impure_ptr_callback+0x14>)
 23f92ac:	6800      	ldr	r0, [r0, #0]
 23f92ae:	4b04      	ldr	r3, [pc, #16]	; (23f92c0 <newlib_impure_ptr_callback+0x18>)
 23f92b0:	4403      	add	r3, r0
 23f92b2:	681b      	ldr	r3, [r3, #0]
 23f92b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f92b6:	9302      	str	r3, [sp, #8]
 23f92b8:	bd09      	pop	{r0, r3, pc}
 23f92ba:	0000      	.short	0x0000
 23f92bc:	10079e48 	.word	0x10079e48
 23f92c0:	00000004 	.word	0x00000004

023f92c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f92c4:	2300      	movs	r3, #0
 23f92c6:	6840      	ldr	r0, [r0, #4]
 23f92c8:	461a      	mov	r2, r3
 23f92ca:	f7ff be9d 	b.w	23f9008 <network_connect>

023f92ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f92ce:	2200      	movs	r2, #0
 23f92d0:	2102      	movs	r1, #2
 23f92d2:	6840      	ldr	r0, [r0, #4]
 23f92d4:	f7ff beb4 	b.w	23f9040 <network_disconnect>

023f92d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f92d8:	2200      	movs	r2, #0
 23f92da:	6840      	ldr	r0, [r0, #4]
 23f92dc:	4611      	mov	r1, r2
 23f92de:	f7ff bea1 	b.w	23f9024 <network_connecting>

023f92e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f92e2:	2200      	movs	r2, #0
 23f92e4:	6840      	ldr	r0, [r0, #4]
 23f92e6:	4611      	mov	r1, r2
 23f92e8:	f7ff beb8 	b.w	23f905c <network_ready>

023f92ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f92ec:	2300      	movs	r3, #0
 23f92ee:	6840      	ldr	r0, [r0, #4]
 23f92f0:	461a      	mov	r2, r3
 23f92f2:	4619      	mov	r1, r3
 23f92f4:	f7ff bec0 	b.w	23f9078 <network_on>

023f92f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f92f8:	2300      	movs	r3, #0
 23f92fa:	6840      	ldr	r0, [r0, #4]
 23f92fc:	461a      	mov	r2, r3
 23f92fe:	4619      	mov	r1, r3
 23f9300:	f7ff bec8 	b.w	23f9094 <network_off>

023f9304 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f9304:	2100      	movs	r1, #0
 23f9306:	6840      	ldr	r0, [r0, #4]
 23f9308:	f7ff bf0a 	b.w	23f9120 <network_is_on>

023f930c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f930c:	2100      	movs	r1, #0
 23f930e:	6840      	ldr	r0, [r0, #4]
 23f9310:	f7ff bf14 	b.w	23f913c <network_is_off>

023f9314 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f9314:	2200      	movs	r2, #0
 23f9316:	6840      	ldr	r0, [r0, #4]
 23f9318:	f081 0101 	eor.w	r1, r1, #1
 23f931c:	f7ff bec8 	b.w	23f90b0 <network_listen>

023f9320 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f9320:	2200      	movs	r2, #0
 23f9322:	6840      	ldr	r0, [r0, #4]
 23f9324:	f7ff bee0 	b.w	23f90e8 <network_set_listen_timeout>

023f9328 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f9328:	2200      	movs	r2, #0
 23f932a:	6840      	ldr	r0, [r0, #4]
 23f932c:	4611      	mov	r1, r2
 23f932e:	f7ff bee9 	b.w	23f9104 <network_get_listen_timeout>

023f9332 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f9332:	2200      	movs	r2, #0
 23f9334:	6840      	ldr	r0, [r0, #4]
 23f9336:	4611      	mov	r1, r2
 23f9338:	f7ff bec8 	b.w	23f90cc <network_listening>

023f933c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23f933c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9340:	b095      	sub	sp, #84	; 0x54
 23f9342:	4614      	mov	r4, r2
 23f9344:	460d      	mov	r5, r1
 23f9346:	4607      	mov	r7, r0
    IPAddress addr;
 23f9348:	f000 fbc2 	bl	23f9ad0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f934c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23f934e:	221c      	movs	r2, #28
 23f9350:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23f9352:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23f9354:	f004 fb14 	bl	23fd980 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23f9358:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f935a:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23f935c:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f935e:	2100      	movs	r1, #0
 23f9360:	466b      	mov	r3, sp
 23f9362:	aa0c      	add	r2, sp, #48	; 0x30
 23f9364:	f7ff fdee 	bl	23f8f44 <netdb_getaddrinfo>
    if (!r) {
 23f9368:	4604      	mov	r4, r0
 23f936a:	2800      	cmp	r0, #0
 23f936c:	d14b      	bne.n	23f9406 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f936e:	4602      	mov	r2, r0
 23f9370:	2101      	movs	r1, #1
 23f9372:	6868      	ldr	r0, [r5, #4]
 23f9374:	f7ff fe72 	bl	23f905c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9378:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f937a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f937c:	4622      	mov	r2, r4
 23f937e:	6868      	ldr	r0, [r5, #4]
 23f9380:	f7ff fe6c 	bl	23f905c <network_ready>
        bool ok = false;
 23f9384:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9386:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f9388:	9e00      	ldr	r6, [sp, #0]
 23f938a:	2e00      	cmp	r6, #0
 23f938c:	d03b      	beq.n	23f9406 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23f938e:	2900      	cmp	r1, #0
 23f9390:	d139      	bne.n	23f9406 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f9392:	6873      	ldr	r3, [r6, #4]
 23f9394:	2b02      	cmp	r3, #2
 23f9396:	d003      	beq.n	23f93a0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23f9398:	2b0a      	cmp	r3, #10
 23f939a:	d011      	beq.n	23f93c0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f939c:	69f6      	ldr	r6, [r6, #28]
 23f939e:	e7f4      	b.n	23f938a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23f93a0:	f1b8 0f00 	cmp.w	r8, #0
 23f93a4:	d0fa      	beq.n	23f939c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f93a6:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23f93a8:	a806      	add	r0, sp, #24
 23f93aa:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f93ac:	1d3c      	adds	r4, r7, #4
 23f93ae:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23f93b0:	f000 fbbc 	bl	23f9b2c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f93b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f93b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f93b8:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f93ba:	4641      	mov	r1, r8
 23f93bc:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f93be:	e7ed      	b.n	23f939c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f93c0:	f1b9 0f00 	cmp.w	r9, #0
 23f93c4:	d0ea      	beq.n	23f939c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f93c6:	2210      	movs	r2, #16
 23f93c8:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f93ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f93cc:	f004 fad8 	bl	23fd980 <memset>
                    a.v = 6;
 23f93d0:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f93d2:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23f93d4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f93d8:	f104 0308 	add.w	r3, r4, #8
 23f93dc:	3418      	adds	r4, #24
 23f93de:	462a      	mov	r2, r5
 23f93e0:	6818      	ldr	r0, [r3, #0]
 23f93e2:	6859      	ldr	r1, [r3, #4]
 23f93e4:	3308      	adds	r3, #8
 23f93e6:	c203      	stmia	r2!, {r0, r1}
 23f93e8:	42a3      	cmp	r3, r4
 23f93ea:	4615      	mov	r5, r2
 23f93ec:	d1f7      	bne.n	23f93de <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23f93ee:	a901      	add	r1, sp, #4
 23f93f0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23f93f2:	1d3c      	adds	r4, r7, #4
 23f93f4:	ad07      	add	r5, sp, #28
 23f93f6:	f000 fb79 	bl	23f9aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f93fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f93fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f93fe:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f9400:	4649      	mov	r1, r9
 23f9402:	7023      	strb	r3, [r4, #0]
                    break;
 23f9404:	e7ca      	b.n	23f939c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f9406:	9800      	ldr	r0, [sp, #0]
 23f9408:	f7ff fd8e 	bl	23f8f28 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f940c:	4638      	mov	r0, r7
 23f940e:	b015      	add	sp, #84	; 0x54
 23f9410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023f9414 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f9414:	4b02      	ldr	r3, [pc, #8]	; (23f9420 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f9416:	4a03      	ldr	r2, [pc, #12]	; (23f9424 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f9418:	601a      	str	r2, [r3, #0]
 23f941a:	2200      	movs	r2, #0
 23f941c:	605a      	str	r2, [r3, #4]

} // spark
 23f941e:	4770      	bx	lr
 23f9420:	1007ae80 	.word	0x1007ae80
 23f9424:	023ff814 	.word	0x023ff814

023f9428 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f9428:	2200      	movs	r2, #0
 23f942a:	6840      	ldr	r0, [r0, #4]
 23f942c:	4611      	mov	r1, r2
 23f942e:	f7ff be15 	b.w	23f905c <network_ready>

023f9432 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f9432:	2200      	movs	r2, #0
 23f9434:	6840      	ldr	r0, [r0, #4]
 23f9436:	4611      	mov	r1, r2
 23f9438:	f7ff be48 	b.w	23f90cc <network_listening>

023f943c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f943c:	2200      	movs	r2, #0
 23f943e:	6840      	ldr	r0, [r0, #4]
 23f9440:	4611      	mov	r1, r2
 23f9442:	f7ff be5f 	b.w	23f9104 <network_get_listen_timeout>

023f9446 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9446:	2200      	movs	r2, #0
 23f9448:	6840      	ldr	r0, [r0, #4]
 23f944a:	f7ff be4d 	b.w	23f90e8 <network_set_listen_timeout>

023f944e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f944e:	2200      	movs	r2, #0
 23f9450:	6840      	ldr	r0, [r0, #4]
 23f9452:	f081 0101 	eor.w	r1, r1, #1
 23f9456:	f7ff be2b 	b.w	23f90b0 <network_listen>

023f945a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f945a:	2300      	movs	r3, #0
 23f945c:	6840      	ldr	r0, [r0, #4]
 23f945e:	461a      	mov	r2, r3
 23f9460:	4619      	mov	r1, r3
 23f9462:	f7ff be17 	b.w	23f9094 <network_off>

023f9466 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9466:	2300      	movs	r3, #0
 23f9468:	6840      	ldr	r0, [r0, #4]
 23f946a:	461a      	mov	r2, r3
 23f946c:	4619      	mov	r1, r3
 23f946e:	f7ff be03 	b.w	23f9078 <network_on>

023f9472 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f9472:	2200      	movs	r2, #0
 23f9474:	6840      	ldr	r0, [r0, #4]
 23f9476:	4611      	mov	r1, r2
 23f9478:	f7ff bdd4 	b.w	23f9024 <network_connecting>

023f947c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f947c:	2200      	movs	r2, #0
 23f947e:	2102      	movs	r1, #2
 23f9480:	6840      	ldr	r0, [r0, #4]
 23f9482:	f7ff bddd 	b.w	23f9040 <network_disconnect>

023f9486 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9486:	2300      	movs	r3, #0
 23f9488:	6840      	ldr	r0, [r0, #4]
 23f948a:	461a      	mov	r2, r3
 23f948c:	f7ff bdbc 	b.w	23f9008 <network_connect>

023f9490 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f9490:	2204      	movs	r2, #4
 23f9492:	4b02      	ldr	r3, [pc, #8]	; (23f949c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f9494:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f9496:	4a02      	ldr	r2, [pc, #8]	; (23f94a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f9498:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f949a:	4770      	bx	lr
 23f949c:	1007ae88 	.word	0x1007ae88
 23f94a0:	023ff850 	.word	0x023ff850

023f94a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f94a4:	4770      	bx	lr

023f94a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f94a6:	7441      	strb	r1, [r0, #17]
}
 23f94a8:	4770      	bx	lr

023f94aa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f94aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f94ac:	7c00      	ldrb	r0, [r0, #16]
 23f94ae:	f7ff fbf9 	bl	23f8ca4 <hal_usart_available_data_for_write>
}
 23f94b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f94b6:	bd08      	pop	{r3, pc}

023f94b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f94b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f94ba:	7c00      	ldrb	r0, [r0, #16]
 23f94bc:	f7ff fbac 	bl	23f8c18 <hal_usart_available>
}
 23f94c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f94c4:	bd08      	pop	{r3, pc}

023f94c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f94c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f94c8:	7c00      	ldrb	r0, [r0, #16]
 23f94ca:	f7ff fbc1 	bl	23f8c50 <hal_usart_peek>
}
 23f94ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f94d2:	bd08      	pop	{r3, pc}

023f94d4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f94d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f94d6:	7c00      	ldrb	r0, [r0, #16]
 23f94d8:	f7ff fbac 	bl	23f8c34 <hal_usart_read>
}
 23f94dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f94e0:	bd08      	pop	{r3, pc}

023f94e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f94e2:	7c00      	ldrb	r0, [r0, #16]
 23f94e4:	f7ff bbc2 	b.w	23f8c6c <hal_usart_flush>

023f94e8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f94e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f94ea:	7c45      	ldrb	r5, [r0, #17]
{
 23f94ec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f94ee:	b12d      	cbz	r5, 23f94fc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f94f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f94f2:	b003      	add	sp, #12
 23f94f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f94f8:	f7ff bb80 	b.w	23f8bfc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f94fc:	7c00      	ldrb	r0, [r0, #16]
 23f94fe:	9101      	str	r1, [sp, #4]
 23f9500:	f7ff fbd0 	bl	23f8ca4 <hal_usart_available_data_for_write>
 23f9504:	2800      	cmp	r0, #0
 23f9506:	9901      	ldr	r1, [sp, #4]
 23f9508:	dcf2      	bgt.n	23f94f0 <_ZN11USARTSerial5writeEh+0x8>
}
 23f950a:	4628      	mov	r0, r5
 23f950c:	b003      	add	sp, #12
 23f950e:	bd30      	pop	{r4, r5, pc}

023f9510 <_ZN11USARTSerialD0Ev>:
 23f9510:	b510      	push	{r4, lr}
 23f9512:	4604      	mov	r4, r0
 23f9514:	2114      	movs	r1, #20
 23f9516:	f7fe fbd6 	bl	23f7cc6 <_ZdlPvj>
 23f951a:	4620      	mov	r0, r4
 23f951c:	bd10      	pop	{r4, pc}
	...

023f9520 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9520:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f9522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9526:	4604      	mov	r4, r0
 23f9528:	4608      	mov	r0, r1
 23f952a:	4611      	mov	r1, r2
 23f952c:	2200      	movs	r2, #0
 23f952e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f9532:	4b04      	ldr	r3, [pc, #16]	; (23f9544 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f9534:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9536:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9538:	2301      	movs	r3, #1
 23f953a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f953c:	f7ff fbce 	bl	23f8cdc <hal_usart_init_ex>
}
 23f9540:	4620      	mov	r0, r4
 23f9542:	bd10      	pop	{r4, pc}
 23f9544:	023ff894 	.word	0x023ff894

023f9548 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23f9548:	2300      	movs	r3, #0
 23f954a:	7c00      	ldrb	r0, [r0, #16]
 23f954c:	f7ff bbb8 	b.w	23f8cc0 <hal_usart_begin_config>

023f9550 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23f9550:	2200      	movs	r2, #0
 23f9552:	f7ff bff9 	b.w	23f9548 <_ZN11USARTSerial5beginEmm>

023f9556 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23f9556:	7c00      	ldrb	r0, [r0, #16]
 23f9558:	f7ff bb42 	b.w	23f8be0 <hal_usart_end>

023f955c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f955c:	7c00      	ldrb	r0, [r0, #16]
 23f955e:	f7ff bb93 	b.w	23f8c88 <hal_usart_is_enabled>

023f9562 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f9562:	2201      	movs	r2, #1
 23f9564:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f9568:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f956c:	4618      	mov	r0, r3
 23f956e:	2901      	cmp	r1, #1
 23f9570:	d108      	bne.n	23f9584 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f9572:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f9576:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f957a:	3a01      	subs	r2, #1
 23f957c:	f103 0310 	add.w	r3, r3, #16
 23f9580:	d1f2      	bne.n	23f9568 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f9582:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f9584:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f9586:	bf04      	itt	eq
 23f9588:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f958c:	1852      	addeq	r2, r2, r1
 23f958e:	e7f4      	b.n	23f957a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f9590 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f9590:	b40e      	push	{r1, r2, r3}
 23f9592:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9594:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9596:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f9598:	af00      	add	r7, sp, #0
 23f959a:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f959e:	f855 2b04 	ldr.w	r2, [r5], #4
 23f95a2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f95a4:	462b      	mov	r3, r5
 23f95a6:	1878      	adds	r0, r7, r1
 23f95a8:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f95aa:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f95ac:	f7ff fe44 	bl	23f9238 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f95b0:	280f      	cmp	r0, #15
 23f95b2:	687a      	ldr	r2, [r7, #4]
 23f95b4:	d91a      	bls.n	23f95ec <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f95b6:	f100 0308 	add.w	r3, r0, #8
 23f95ba:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f95be:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f95c0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f95c4:	1c41      	adds	r1, r0, #1
 23f95c6:	462b      	mov	r3, r5
 23f95c8:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f95ca:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f95cc:	f7ff fe34 	bl	23f9238 <vsnprintf>
        if (n > 0) {
 23f95d0:	1e02      	subs	r2, r0, #0
 23f95d2:	dd04      	ble.n	23f95de <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f95d4:	6823      	ldr	r3, [r4, #0]
 23f95d6:	4669      	mov	r1, sp
 23f95d8:	4620      	mov	r0, r4
 23f95da:	689b      	ldr	r3, [r3, #8]
 23f95dc:	4798      	blx	r3
 23f95de:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f95e0:	3720      	adds	r7, #32
 23f95e2:	46bd      	mov	sp, r7
 23f95e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f95e8:	b003      	add	sp, #12
 23f95ea:	4770      	bx	lr
    } else if (n > 0) {
 23f95ec:	2800      	cmp	r0, #0
 23f95ee:	d0f7      	beq.n	23f95e0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f95f0:	6823      	ldr	r3, [r4, #0]
 23f95f2:	4602      	mov	r2, r0
 23f95f4:	689b      	ldr	r3, [r3, #8]
 23f95f6:	4620      	mov	r0, r4
 23f95f8:	f107 0110 	add.w	r1, r7, #16
 23f95fc:	4798      	blx	r3
}
 23f95fe:	e7ef      	b.n	23f95e0 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f9600 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23f9600:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f9602:	6843      	ldr	r3, [r0, #4]
    {
 23f9604:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f9606:	3b01      	subs	r3, #1
 23f9608:	6043      	str	r3, [r0, #4]
 23f960a:	b963      	cbnz	r3, 23f9626 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23f960c:	6803      	ldr	r3, [r0, #0]
 23f960e:	689b      	ldr	r3, [r3, #8]
 23f9610:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f9612:	68a3      	ldr	r3, [r4, #8]
 23f9614:	3b01      	subs	r3, #1
 23f9616:	60a3      	str	r3, [r4, #8]
 23f9618:	b92b      	cbnz	r3, 23f9626 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f961a:	6823      	ldr	r3, [r4, #0]
 23f961c:	4620      	mov	r0, r4
        }
    }
 23f961e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f9622:	68db      	ldr	r3, [r3, #12]
 23f9624:	4718      	bx	r3
    }
 23f9626:	bd10      	pop	{r4, pc}

023f9628 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f9628:	b538      	push	{r3, r4, r5, lr}
 23f962a:	680b      	ldr	r3, [r1, #0]
 23f962c:	4604      	mov	r4, r0
 23f962e:	6003      	str	r3, [r0, #0]
 23f9630:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f9632:	6843      	ldr	r3, [r0, #4]
 23f9634:	429d      	cmp	r5, r3
 23f9636:	d008      	beq.n	23f964a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f9638:	b115      	cbz	r5, 23f9640 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f963a:	686b      	ldr	r3, [r5, #4]
 23f963c:	3301      	adds	r3, #1
 23f963e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f9640:	6860      	ldr	r0, [r4, #4]
 23f9642:	b108      	cbz	r0, 23f9648 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f9644:	f7ff ffdc 	bl	23f9600 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f9648:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f964a:	bd38      	pop	{r3, r4, r5, pc}

023f964c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f964c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f964e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f9650:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f9654:	2201      	movs	r2, #1
 23f9656:	689b      	ldr	r3, [r3, #8]
 23f9658:	f10d 0107 	add.w	r1, sp, #7
 23f965c:	4798      	blx	r3
}
 23f965e:	b003      	add	sp, #12
 23f9660:	f85d fb04 	ldr.w	pc, [sp], #4

023f9664 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f9664:	460b      	mov	r3, r1
 23f9666:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f9668:	2200      	movs	r2, #0
 23f966a:	b510      	push	{r4, lr}
 23f966c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f966e:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f9672:	6083      	str	r3, [r0, #8]
    if (t) {
 23f9674:	b90b      	cbnz	r3, 23f967a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f9676:	4620      	mov	r0, r4
 23f9678:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f967a:	f7ff ffd5 	bl	23f9628 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f967e:	e7fa      	b.n	23f9676 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f9680 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f9680:	6883      	ldr	r3, [r0, #8]
 23f9682:	b1eb      	cbz	r3, 23f96c0 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f9684:	781a      	ldrb	r2, [r3, #0]
 23f9686:	2a03      	cmp	r2, #3
 23f9688:	d81a      	bhi.n	23f96c0 <_ZNK5spark9JSONValue4typeEv+0x40>
 23f968a:	e8df f002 	tbb	[pc, r2]
 23f968e:	1704      	.short	0x1704
 23f9690:	1b02      	.short	0x1b02
 23f9692:	2005      	movs	r0, #5
 23f9694:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f9696:	6802      	ldr	r2, [r0, #0]
 23f9698:	685b      	ldr	r3, [r3, #4]
 23f969a:	6852      	ldr	r2, [r2, #4]
 23f969c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f969e:	282d      	cmp	r0, #45	; 0x2d
 23f96a0:	d012      	beq.n	23f96c8 <_ZNK5spark9JSONValue4typeEv+0x48>
 23f96a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f96a6:	2b09      	cmp	r3, #9
 23f96a8:	d90e      	bls.n	23f96c8 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f96aa:	2874      	cmp	r0, #116	; 0x74
 23f96ac:	d00e      	beq.n	23f96cc <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f96ae:	2866      	cmp	r0, #102	; 0x66
 23f96b0:	d00c      	beq.n	23f96cc <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f96b2:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f96b6:	4258      	negs	r0, r3
 23f96b8:	4158      	adcs	r0, r3
 23f96ba:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f96bc:	2006      	movs	r0, #6
 23f96be:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f96c0:	2000      	movs	r0, #0
 23f96c2:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f96c4:	2004      	movs	r0, #4
 23f96c6:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f96c8:	2003      	movs	r0, #3
 23f96ca:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f96cc:	2002      	movs	r0, #2
}
 23f96ce:	4770      	bx	lr

023f96d0 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f96d0:	b510      	push	{r4, lr}
 23f96d2:	4604      	mov	r4, r0
    switch (type()) {
 23f96d4:	f7ff ffd4 	bl	23f9680 <_ZNK5spark9JSONValue4typeEv>
 23f96d8:	2802      	cmp	r0, #2
 23f96da:	d00e      	beq.n	23f96fa <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f96dc:	1ec3      	subs	r3, r0, #3
 23f96de:	b2db      	uxtb	r3, r3
 23f96e0:	2b01      	cmp	r3, #1
 23f96e2:	d814      	bhi.n	23f970e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f96e4:	6822      	ldr	r2, [r4, #0]
 23f96e6:	68a3      	ldr	r3, [r4, #8]
 23f96e8:	6850      	ldr	r0, [r2, #4]
 23f96ea:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f96ec:	220a      	movs	r2, #10
}
 23f96ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f96f2:	2100      	movs	r1, #0
 23f96f4:	4418      	add	r0, r3
 23f96f6:	f004 ba4f 	b.w	23fdb98 <strtol>
        const char* const s = d_->json + t_->start;
 23f96fa:	6822      	ldr	r2, [r4, #0]
 23f96fc:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f96fe:	6852      	ldr	r2, [r2, #4]
 23f9700:	685b      	ldr	r3, [r3, #4]
 23f9702:	5cd0      	ldrb	r0, [r2, r3]
 23f9704:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f9708:	4258      	negs	r0, r3
 23f970a:	4158      	adcs	r0, r3
}
 23f970c:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f970e:	2000      	movs	r0, #0
 23f9710:	e7fc      	b.n	23f970c <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023f9714 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f9714:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f9716:	2300      	movs	r3, #0
 23f9718:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f971a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f971e:	480e      	ldr	r0, [pc, #56]	; (23f9758 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f9720:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f9724:	b1a9      	cbz	r1, 23f9752 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f9726:	780b      	ldrb	r3, [r1, #0]
 23f9728:	2b03      	cmp	r3, #3
 23f972a:	d006      	beq.n	23f973a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f972c:	b98b      	cbnz	r3, 23f9752 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f972e:	6813      	ldr	r3, [r2, #0]
 23f9730:	6858      	ldr	r0, [r3, #4]
 23f9732:	684b      	ldr	r3, [r1, #4]
 23f9734:	5cc3      	ldrb	r3, [r0, r3]
 23f9736:	2b6e      	cmp	r3, #110	; 0x6e
 23f9738:	d007      	beq.n	23f974a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f973a:	6813      	ldr	r3, [r2, #0]
 23f973c:	684d      	ldr	r5, [r1, #4]
 23f973e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f9740:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f9742:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f9744:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f9746:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f9748:	60e3      	str	r3, [r4, #12]
 23f974a:	4611      	mov	r1, r2
 23f974c:	4620      	mov	r0, r4
 23f974e:	f7ff ff6b 	bl	23f9628 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f9752:	4620      	mov	r0, r4
 23f9754:	bd38      	pop	{r3, r4, r5, pc}
 23f9756:	bf00      	nop
 23f9758:	023fde17 	.word	0x023fde17

023f975c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f975c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f975e:	2500      	movs	r5, #0
 23f9760:	460b      	mov	r3, r1
 23f9762:	4604      	mov	r4, r0
 23f9764:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f9766:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f976a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f976e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f9772:	b14b      	cbz	r3, 23f9788 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f9774:	781a      	ldrb	r2, [r3, #0]
 23f9776:	2a01      	cmp	r2, #1
 23f9778:	d106      	bne.n	23f9788 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f977a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f977e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f9780:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f9782:	6143      	str	r3, [r0, #20]
 23f9784:	f7ff ff50 	bl	23f9628 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f9788:	4620      	mov	r0, r4
 23f978a:	bd38      	pop	{r3, r4, r5, pc}

023f978c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f978c:	b510      	push	{r4, lr}
    if (!n_) {
 23f978e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f9790:	4604      	mov	r4, r0
    if (!n_) {
 23f9792:	b163      	cbz	r3, 23f97ae <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f9794:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f9796:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f9798:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f979a:	3010      	adds	r0, #16
 23f979c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f979e:	6120      	str	r0, [r4, #16]
    --n_;
 23f97a0:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f97a2:	b113      	cbz	r3, 23f97aa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f97a4:	f7ff fedd 	bl	23f9562 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f97a8:	60a0      	str	r0, [r4, #8]
    return true;
 23f97aa:	2001      	movs	r0, #1
 23f97ac:	e000      	b.n	23f97b0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f97ae:	4618      	mov	r0, r3
}
 23f97b0:	bd10      	pop	{r4, pc}

023f97b2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f97b2:	b510      	push	{r4, lr}
    write('}');
 23f97b4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f97b6:	4604      	mov	r4, r0
    write('}');
 23f97b8:	f7ff ff48 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f97bc:	2301      	movs	r3, #1
}
 23f97be:	4620      	mov	r0, r4
    state_ = NEXT;
 23f97c0:	7123      	strb	r3, [r4, #4]
}
 23f97c2:	bd10      	pop	{r4, pc}

023f97c4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f97c4:	b508      	push	{r3, lr}
    switch (state_) {
 23f97c6:	7903      	ldrb	r3, [r0, #4]
 23f97c8:	2b01      	cmp	r3, #1
 23f97ca:	d002      	beq.n	23f97d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f97cc:	2b02      	cmp	r3, #2
 23f97ce:	d004      	beq.n	23f97da <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f97d0:	bd08      	pop	{r3, pc}
        write(',');
 23f97d2:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f97d4:	f7ff ff3a 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
}
 23f97d8:	e7fa      	b.n	23f97d0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f97da:	213a      	movs	r1, #58	; 0x3a
 23f97dc:	e7fa      	b.n	23f97d4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f97de <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f97de:	b510      	push	{r4, lr}
 23f97e0:	4604      	mov	r4, r0
    writeSeparator();
 23f97e2:	f7ff ffef 	bl	23f97c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f97e6:	4620      	mov	r0, r4
 23f97e8:	217b      	movs	r1, #123	; 0x7b
 23f97ea:	f7ff ff2f 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f97ee:	2300      	movs	r3, #0
}
 23f97f0:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f97f2:	7123      	strb	r3, [r4, #4]
}
 23f97f4:	bd10      	pop	{r4, pc}
	...

023f97f8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f97f8:	b513      	push	{r0, r1, r4, lr}
 23f97fa:	4604      	mov	r4, r0
 23f97fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f97fe:	f7ff ffe1 	bl	23f97c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f9802:	6823      	ldr	r3, [r4, #0]
 23f9804:	4620      	mov	r0, r4
 23f9806:	68db      	ldr	r3, [r3, #12]
 23f9808:	9a01      	ldr	r2, [sp, #4]
 23f980a:	4903      	ldr	r1, [pc, #12]	; (23f9818 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f980c:	4798      	blx	r3
    state_ = NEXT;
 23f980e:	2301      	movs	r3, #1
}
 23f9810:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9812:	7123      	strb	r3, [r4, #4]
}
 23f9814:	b002      	add	sp, #8
 23f9816:	bd10      	pop	{r4, pc}
 23f9818:	023fdd2f 	.word	0x023fdd2f

023f981c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f981c:	b513      	push	{r0, r1, r4, lr}
 23f981e:	4604      	mov	r4, r0
 23f9820:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f9822:	f7ff ffcf 	bl	23f97c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f9826:	6823      	ldr	r3, [r4, #0]
 23f9828:	4620      	mov	r0, r4
 23f982a:	68db      	ldr	r3, [r3, #12]
 23f982c:	9a01      	ldr	r2, [sp, #4]
 23f982e:	4903      	ldr	r1, [pc, #12]	; (23f983c <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f9830:	4798      	blx	r3
    state_ = NEXT;
 23f9832:	2301      	movs	r3, #1
}
 23f9834:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9836:	7123      	strb	r3, [r4, #4]
}
 23f9838:	b002      	add	sp, #8
 23f983a:	bd10      	pop	{r4, pc}
 23f983c:	023ff8bc 	.word	0x023ff8bc

023f9840 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f9840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9844:	460d      	mov	r5, r1
 23f9846:	4690      	mov	r8, r2
    write('"');
 23f9848:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f984a:	4604      	mov	r4, r0
 23f984c:	462f      	mov	r7, r5
    write('"');
 23f984e:	f7ff fefd 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f9852:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f98f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f9856:	44a8      	add	r8, r5
    while (s != end) {
 23f9858:	4547      	cmp	r7, r8
 23f985a:	46ba      	mov	sl, r7
 23f985c:	d03d      	beq.n	23f98da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f985e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f9862:	2e22      	cmp	r6, #34	; 0x22
 23f9864:	d006      	beq.n	23f9874 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f9866:	2e5c      	cmp	r6, #92	; 0x5c
 23f9868:	d004      	beq.n	23f9874 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f986a:	4630      	mov	r0, r6
 23f986c:	f004 f846 	bl	23fd8fc <isprint>
 23f9870:	2800      	cmp	r0, #0
 23f9872:	d1f1      	bne.n	23f9858 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f9874:	6823      	ldr	r3, [r4, #0]
 23f9876:	4629      	mov	r1, r5
 23f9878:	4620      	mov	r0, r4
 23f987a:	689b      	ldr	r3, [r3, #8]
 23f987c:	ebaa 0205 	sub.w	r2, sl, r5
 23f9880:	4798      	blx	r3
            write('\\');
 23f9882:	215c      	movs	r1, #92	; 0x5c
 23f9884:	4620      	mov	r0, r4
 23f9886:	f7ff fee1 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f988a:	2e0d      	cmp	r6, #13
 23f988c:	d80a      	bhi.n	23f98a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f988e:	2e07      	cmp	r6, #7
 23f9890:	d91c      	bls.n	23f98cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f9892:	f1a6 0308 	sub.w	r3, r6, #8
 23f9896:	2b05      	cmp	r3, #5
 23f9898:	d818      	bhi.n	23f98cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f989a:	e8df f003 	tbb	[pc, r3]
 23f989e:	0f0d      	.short	0x0f0d
 23f98a0:	15131711 	.word	0x15131711
 23f98a4:	2e22      	cmp	r6, #34	; 0x22
 23f98a6:	d001      	beq.n	23f98ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f98a8:	2e5c      	cmp	r6, #92	; 0x5c
 23f98aa:	d10f      	bne.n	23f98cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f98ac:	4631      	mov	r1, r6
                write('b');
 23f98ae:	4620      	mov	r0, r4
 23f98b0:	f7ff fecc 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f98b4:	463d      	mov	r5, r7
    while (s != end) {
 23f98b6:	e7cf      	b.n	23f9858 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f98b8:	2162      	movs	r1, #98	; 0x62
 23f98ba:	e7f8      	b.n	23f98ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f98bc:	2174      	movs	r1, #116	; 0x74
 23f98be:	e7f6      	b.n	23f98ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f98c0:	216e      	movs	r1, #110	; 0x6e
 23f98c2:	e7f4      	b.n	23f98ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f98c4:	2166      	movs	r1, #102	; 0x66
 23f98c6:	e7f2      	b.n	23f98ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f98c8:	2172      	movs	r1, #114	; 0x72
 23f98ca:	e7f0      	b.n	23f98ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f98cc:	6823      	ldr	r3, [r4, #0]
 23f98ce:	4632      	mov	r2, r6
 23f98d0:	4649      	mov	r1, r9
 23f98d2:	4620      	mov	r0, r4
 23f98d4:	68db      	ldr	r3, [r3, #12]
 23f98d6:	4798      	blx	r3
                break;
 23f98d8:	e7ec      	b.n	23f98b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f98da:	42bd      	cmp	r5, r7
 23f98dc:	d005      	beq.n	23f98ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f98de:	6823      	ldr	r3, [r4, #0]
 23f98e0:	4629      	mov	r1, r5
 23f98e2:	4620      	mov	r0, r4
 23f98e4:	689b      	ldr	r3, [r3, #8]
 23f98e6:	1b7a      	subs	r2, r7, r5
 23f98e8:	4798      	blx	r3
    }
    write('"');
 23f98ea:	2122      	movs	r1, #34	; 0x22
 23f98ec:	4620      	mov	r0, r4
 23f98ee:	f7ff fead 	bl	23f964c <_ZN5spark10JSONWriter5writeEc>
}
 23f98f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f98f6:	bf00      	nop
 23f98f8:	023ff8bf 	.word	0x023ff8bf

023f98fc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f98fc:	b513      	push	{r0, r1, r4, lr}
 23f98fe:	4604      	mov	r4, r0
 23f9900:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f9904:	f7ff ff5e 	bl	23f97c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f9908:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f990c:	4620      	mov	r0, r4
 23f990e:	f7ff ff97 	bl	23f9840 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f9912:	2302      	movs	r3, #2
}
 23f9914:	4620      	mov	r0, r4
    state_ = VALUE;
 23f9916:	7123      	strb	r3, [r4, #4]
}
 23f9918:	b002      	add	sp, #8
 23f991a:	bd10      	pop	{r4, pc}

023f991c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f991c:	b513      	push	{r0, r1, r4, lr}
 23f991e:	4604      	mov	r4, r0
 23f9920:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f9924:	f7ff ff4e 	bl	23f97c4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f9928:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f992c:	4620      	mov	r0, r4
 23f992e:	f7ff ff87 	bl	23f9840 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f9932:	2301      	movs	r3, #1
}
 23f9934:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9936:	7123      	strb	r3, [r4, #4]
}
 23f9938:	b002      	add	sp, #8
 23f993a:	bd10      	pop	{r4, pc}

023f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f993c:	b510      	push	{r4, lr}
 23f993e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23f9940:	6800      	ldr	r0, [r0, #0]
 23f9942:	b108      	cbz	r0, 23f9948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23f9944:	f7ff fe5c 	bl	23f9600 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23f9948:	4620      	mov	r0, r4
 23f994a:	bd10      	pop	{r4, pc}

023f994c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f994c:	7441      	strb	r1, [r0, #17]
}
 23f994e:	4770      	bx	lr

023f9950 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9950:	4770      	bx	lr

023f9952 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f9952:	4770      	bx	lr

023f9954 <_ZN9USBSerial4readEv>:
{
 23f9954:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f9956:	2100      	movs	r1, #0
 23f9958:	7c00      	ldrb	r0, [r0, #16]
 23f995a:	f7ff f909 	bl	23f8b70 <HAL_USB_USART_Receive_Data>
}
 23f995e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9962:	bd08      	pop	{r3, pc}

023f9964 <_ZN9USBSerial4peekEv>:
{
 23f9964:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f9966:	2101      	movs	r1, #1
 23f9968:	7c00      	ldrb	r0, [r0, #16]
 23f996a:	f7ff f901 	bl	23f8b70 <HAL_USB_USART_Receive_Data>
}
 23f996e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9972:	bd08      	pop	{r3, pc}

023f9974 <_ZN9USBSerial17availableForWriteEv>:
{
 23f9974:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f9976:	7c00      	ldrb	r0, [r0, #16]
 23f9978:	f7ff f8ec 	bl	23f8b54 <HAL_USB_USART_Available_Data_For_Write>
}
 23f997c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9980:	bd08      	pop	{r3, pc}

023f9982 <_ZN9USBSerial9availableEv>:
{
 23f9982:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f9984:	7c00      	ldrb	r0, [r0, #16]
 23f9986:	f7ff f8d7 	bl	23f8b38 <HAL_USB_USART_Available_Data>
}
 23f998a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f998e:	bd08      	pop	{r3, pc}

023f9990 <_ZN9USBSerial5writeEh>:
{
 23f9990:	b513      	push	{r0, r1, r4, lr}
 23f9992:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9994:	7c00      	ldrb	r0, [r0, #16]
{
 23f9996:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9998:	f7ff f8dc 	bl	23f8b54 <HAL_USB_USART_Available_Data_For_Write>
 23f999c:	2800      	cmp	r0, #0
 23f999e:	9901      	ldr	r1, [sp, #4]
 23f99a0:	dc01      	bgt.n	23f99a6 <_ZN9USBSerial5writeEh+0x16>
 23f99a2:	7c60      	ldrb	r0, [r4, #17]
 23f99a4:	b120      	cbz	r0, 23f99b0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f99a6:	7c20      	ldrb	r0, [r4, #16]
 23f99a8:	f7ff f8f0 	bl	23f8b8c <HAL_USB_USART_Send_Data>
 23f99ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f99b0:	b002      	add	sp, #8
 23f99b2:	bd10      	pop	{r4, pc}

023f99b4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f99b4:	7c00      	ldrb	r0, [r0, #16]
 23f99b6:	f7ff b8f7 	b.w	23f8ba8 <HAL_USB_USART_Flush_Data>

023f99ba <_ZN9USBSerialD0Ev>:
 23f99ba:	b510      	push	{r4, lr}
 23f99bc:	4604      	mov	r4, r0
 23f99be:	2114      	movs	r1, #20
 23f99c0:	f7fe f981 	bl	23f7cc6 <_ZdlPvj>
 23f99c4:	4620      	mov	r0, r4
 23f99c6:	bd10      	pop	{r4, pc}

023f99c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f99c8:	b510      	push	{r4, lr}
 23f99ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f99ce:	4604      	mov	r4, r0
 23f99d0:	4608      	mov	r0, r1
 23f99d2:	2100      	movs	r1, #0
 23f99d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f99d8:	4b04      	ldr	r3, [pc, #16]	; (23f99ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f99da:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f99dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f99de:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f99e0:	4611      	mov	r1, r2
  _blocking = true;
 23f99e2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f99e4:	f7ff f87e 	bl	23f8ae4 <HAL_USB_USART_Init>
}
 23f99e8:	4620      	mov	r0, r4
 23f99ea:	bd10      	pop	{r4, pc}
 23f99ec:	023ff8d0 	.word	0x023ff8d0

023f99f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f99f0:	2200      	movs	r2, #0
 23f99f2:	7c00      	ldrb	r0, [r0, #16]
 23f99f4:	f7ff b884 	b.w	23f8b00 <HAL_USB_USART_Begin>

023f99f8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23f99f8:	7c00      	ldrb	r0, [r0, #16]
 23f99fa:	f7ff b88f 	b.w	23f8b1c <HAL_USB_USART_End>

023f99fe <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f99fe:	7c00      	ldrb	r0, [r0, #16]
 23f9a00:	f7ff b8e0 	b.w	23f8bc4 <HAL_USB_USART_Is_Connected>

023f9a04 <_Z19acquireSerialBufferv>:
{
 23f9a04:	b510      	push	{r4, lr}
 23f9a06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f9a08:	2214      	movs	r2, #20
 23f9a0a:	2100      	movs	r1, #0
 23f9a0c:	f003 ffb8 	bl	23fd980 <memset>
}
 23f9a10:	4620      	mov	r0, r4
 23f9a12:	bd10      	pop	{r4, pc}

023f9a14 <_Z16_fetch_usbserialv>:
{
 23f9a14:	b510      	push	{r4, lr}
 23f9a16:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f9a18:	a803      	add	r0, sp, #12
 23f9a1a:	f7ff fff3 	bl	23f9a04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9a1e:	4c0c      	ldr	r4, [pc, #48]	; (23f9a50 <_Z16_fetch_usbserialv+0x3c>)
 23f9a20:	e8d4 1f8f 	ldab	r1, [r4]
 23f9a24:	f011 0101 	ands.w	r1, r1, #1
 23f9a28:	d10f      	bne.n	23f9a4a <_Z16_fetch_usbserialv+0x36>
 23f9a2a:	4620      	mov	r0, r4
 23f9a2c:	9101      	str	r1, [sp, #4]
 23f9a2e:	f7fe f95d 	bl	23f7cec <__cxa_guard_acquire>
 23f9a32:	9901      	ldr	r1, [sp, #4]
 23f9a34:	b148      	cbz	r0, 23f9a4a <_Z16_fetch_usbserialv+0x36>
 23f9a36:	aa03      	add	r2, sp, #12
 23f9a38:	4806      	ldr	r0, [pc, #24]	; (23f9a54 <_Z16_fetch_usbserialv+0x40>)
 23f9a3a:	f7ff ffc5 	bl	23f99c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f9a3e:	4620      	mov	r0, r4
 23f9a40:	f7fe f959 	bl	23f7cf6 <__cxa_guard_release>
 23f9a44:	4804      	ldr	r0, [pc, #16]	; (23f9a58 <_Z16_fetch_usbserialv+0x44>)
 23f9a46:	f003 ff53 	bl	23fd8f0 <atexit>
	return _usbserial;
}
 23f9a4a:	4802      	ldr	r0, [pc, #8]	; (23f9a54 <_Z16_fetch_usbserialv+0x40>)
 23f9a4c:	b008      	add	sp, #32
 23f9a4e:	bd10      	pop	{r4, pc}
 23f9a50:	1007ae90 	.word	0x1007ae90
 23f9a54:	1007ae94 	.word	0x1007ae94
 23f9a58:	023f9951 	.word	0x023f9951

023f9a5c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23f9a5c:	4770      	bx	lr

023f9a5e <_ZN9IPAddressD0Ev>:
 23f9a5e:	b510      	push	{r4, lr}
 23f9a60:	4604      	mov	r4, r0
 23f9a62:	2118      	movs	r1, #24
 23f9a64:	f7fe f92f 	bl	23f7cc6 <_ZdlPvj>
 23f9a68:	4620      	mov	r0, r4
 23f9a6a:	bd10      	pop	{r4, pc}

023f9a6c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f9a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f9a6e:	7d03      	ldrb	r3, [r0, #20]
{
 23f9a70:	460e      	mov	r6, r1
	if (address.v==6) {
 23f9a72:	2b06      	cmp	r3, #6
 23f9a74:	f04f 0400 	mov.w	r4, #0
{
 23f9a78:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9a7a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f9a7e:	d012      	beq.n	23f9aa6 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f9a80:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f9a84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f9a88:	220a      	movs	r2, #10
 23f9a8a:	4630      	mov	r0, r6
 23f9a8c:	f001 f913 	bl	23facb6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f9a90:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f9a92:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f9a94:	d019      	beq.n	23f9aca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f9a96:	2c00      	cmp	r4, #0
 23f9a98:	d0f4      	beq.n	23f9a84 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f9a9a:	212e      	movs	r1, #46	; 0x2e
 23f9a9c:	4630      	mov	r0, r6
 23f9a9e:	f001 f907 	bl	23facb0 <_ZN5Print5printEc>
 23f9aa2:	4404      	add	r4, r0
 23f9aa4:	e7ee      	b.n	23f9a84 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9aa6:	232f      	movs	r3, #47	; 0x2f
 23f9aa8:	466a      	mov	r2, sp
 23f9aaa:	4639      	mov	r1, r7
 23f9aac:	200a      	movs	r0, #10
		buf[0] = 0;
 23f9aae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9ab2:	f7ff f921 	bl	23f8cf8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f9ab6:	4668      	mov	r0, sp
 23f9ab8:	f7fe f8dc 	bl	23f7c74 <strlen>
 23f9abc:	6833      	ldr	r3, [r6, #0]
 23f9abe:	4602      	mov	r2, r0
 23f9ac0:	4669      	mov	r1, sp
 23f9ac2:	4630      	mov	r0, r6
 23f9ac4:	68db      	ldr	r3, [r3, #12]
 23f9ac6:	4798      	blx	r3
 23f9ac8:	4604      	mov	r4, r0
    }
    return n;
}
 23f9aca:	4620      	mov	r0, r4
 23f9acc:	b00d      	add	sp, #52	; 0x34
 23f9ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f9ad0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f9ad0:	b510      	push	{r4, lr}
 23f9ad2:	4604      	mov	r4, r0
 23f9ad4:	4b04      	ldr	r3, [pc, #16]	; (23f9ae8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f9ad6:	2211      	movs	r2, #17
 23f9ad8:	2100      	movs	r1, #0
 23f9ada:	f840 3b04 	str.w	r3, [r0], #4
 23f9ade:	f003 ff4f 	bl	23fd980 <memset>
}
 23f9ae2:	4620      	mov	r0, r4
 23f9ae4:	bd10      	pop	{r4, pc}
 23f9ae6:	bf00      	nop
 23f9ae8:	023ff900 	.word	0x023ff900

023f9aec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f9aec:	4603      	mov	r3, r0
 23f9aee:	4a07      	ldr	r2, [pc, #28]	; (23f9b0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f9af0:	b510      	push	{r4, lr}
 23f9af2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f9af6:	f101 0210 	add.w	r2, r1, #16
 23f9afa:	f851 4b04 	ldr.w	r4, [r1], #4
 23f9afe:	4291      	cmp	r1, r2
 23f9b00:	f843 4b04 	str.w	r4, [r3], #4
 23f9b04:	d1f9      	bne.n	23f9afa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f9b06:	780a      	ldrb	r2, [r1, #0]
 23f9b08:	701a      	strb	r2, [r3, #0]
}
 23f9b0a:	bd10      	pop	{r4, pc}
 23f9b0c:	023ff900 	.word	0x023ff900

023f9b10 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f9b10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f9b12:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f9b16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f9b1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f9b1e:	2304      	movs	r3, #4
 23f9b20:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f9b24:	6041      	str	r1, [r0, #4]
 23f9b26:	7503      	strb	r3, [r0, #20]
}
 23f9b28:	bd10      	pop	{r4, pc}
	...

023f9b2c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f9b2c:	b507      	push	{r0, r1, r2, lr}
 23f9b2e:	4b06      	ldr	r3, [pc, #24]	; (23f9b48 <_ZN9IPAddressC1EPKh+0x1c>)
 23f9b30:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f9b32:	78cb      	ldrb	r3, [r1, #3]
 23f9b34:	9300      	str	r3, [sp, #0]
 23f9b36:	788b      	ldrb	r3, [r1, #2]
 23f9b38:	784a      	ldrb	r2, [r1, #1]
 23f9b3a:	7809      	ldrb	r1, [r1, #0]
 23f9b3c:	f7ff ffe8 	bl	23f9b10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f9b40:	b003      	add	sp, #12
 23f9b42:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9b46:	bf00      	nop
 23f9b48:	023ff900 	.word	0x023ff900

023f9b4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f9b4c:	4b01      	ldr	r3, [pc, #4]	; (23f9b54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f9b4e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f9b50:	4770      	bx	lr
 23f9b52:	bf00      	nop
 23f9b54:	1007a080 	.word	0x1007a080

023f9b58 <serialEventRun>:
{
 23f9b58:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f9b5a:	4b0f      	ldr	r3, [pc, #60]	; (23f9b98 <serialEventRun+0x40>)
 23f9b5c:	b143      	cbz	r3, 23f9b70 <serialEventRun+0x18>
 23f9b5e:	f7ff ff59 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f9b62:	6803      	ldr	r3, [r0, #0]
 23f9b64:	691b      	ldr	r3, [r3, #16]
 23f9b66:	4798      	blx	r3
 23f9b68:	2800      	cmp	r0, #0
 23f9b6a:	dd01      	ble.n	23f9b70 <serialEventRun+0x18>
        serialEvent();
 23f9b6c:	e000      	b.n	23f9b70 <serialEventRun+0x18>
 23f9b6e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f9b70:	4b0a      	ldr	r3, [pc, #40]	; (23f9b9c <serialEventRun+0x44>)
 23f9b72:	b143      	cbz	r3, 23f9b86 <serialEventRun+0x2e>
 23f9b74:	f003 fb74 	bl	23fd260 <_Z22__fetch_global_Serial1v>
 23f9b78:	6803      	ldr	r3, [r0, #0]
 23f9b7a:	691b      	ldr	r3, [r3, #16]
 23f9b7c:	4798      	blx	r3
 23f9b7e:	2800      	cmp	r0, #0
 23f9b80:	dd01      	ble.n	23f9b86 <serialEventRun+0x2e>
        serialEvent1();
 23f9b82:	e000      	b.n	23f9b86 <serialEventRun+0x2e>
 23f9b84:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f9b86:	4b06      	ldr	r3, [pc, #24]	; (23f9ba0 <serialEventRun+0x48>)
 23f9b88:	b10b      	cbz	r3, 23f9b8e <serialEventRun+0x36>
 23f9b8a:	f003 fbaf 	bl	23fd2ec <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23f9b8e:	4b05      	ldr	r3, [pc, #20]	; (23f9ba4 <serialEventRun+0x4c>)
 23f9b90:	b10b      	cbz	r3, 23f9b96 <serialEventRun+0x3e>
 23f9b92:	f003 fbe1 	bl	23fd358 <_Z15serialEventRun3v>
}
 23f9b96:	bd08      	pop	{r3, pc}
	...

023f9ba8 <_post_loop>:
{
 23f9ba8:	b508      	push	{r3, lr}
	serialEventRun();
 23f9baa:	f7ff ffd5 	bl	23f9b58 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f9bae:	f7ff f99f 	bl	23f8ef0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f9bb2:	4b01      	ldr	r3, [pc, #4]	; (23f9bb8 <_post_loop+0x10>)
 23f9bb4:	6018      	str	r0, [r3, #0]
}
 23f9bb6:	bd08      	pop	{r3, pc}
 23f9bb8:	1007af20 	.word	0x1007af20

023f9bbc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f9bbc:	4805      	ldr	r0, [pc, #20]	; (23f9bd4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23f9bbe:	4a06      	ldr	r2, [pc, #24]	; (23f9bd8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f9bc0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f9bc2:	1a12      	subs	r2, r2, r0
 23f9bc4:	4905      	ldr	r1, [pc, #20]	; (23f9bdc <_Z33system_initialize_user_backup_ramv+0x20>)
 23f9bc6:	f003 feb4 	bl	23fd932 <memcpy>
    __backup_sram_signature = signature;
 23f9bca:	4b05      	ldr	r3, [pc, #20]	; (23f9be0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f9bcc:	4a05      	ldr	r2, [pc, #20]	; (23f9be4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23f9bce:	601a      	str	r2, [r3, #0]
}
 23f9bd0:	bd08      	pop	{r3, pc}
 23f9bd2:	bf00      	nop
 23f9bd4:	1007b400 	.word	0x1007b400
 23f9bd8:	1007b404 	.word	0x1007b404
 23f9bdc:	085ffed0 	.word	0x085ffed0
 23f9be0:	1007b400 	.word	0x1007b400
 23f9be4:	9a271c1e 	.word	0x9a271c1e

023f9be8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9be8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f9bea:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9bec:	461a      	mov	r2, r3
 23f9bee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f9bf2:	9300      	str	r3, [sp, #0]
 23f9bf4:	f7ff fae8 	bl	23f91c8 <system_ctrl_set_result>
}
 23f9bf8:	b003      	add	sp, #12
 23f9bfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f9c00 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f9c00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f9c02:	8843      	ldrh	r3, [r0, #2]
 23f9c04:	2b0a      	cmp	r3, #10
 23f9c06:	d008      	beq.n	23f9c1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f9c08:	2b50      	cmp	r3, #80	; 0x50
 23f9c0a:	d10b      	bne.n	23f9c24 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f9c0c:	4b09      	ldr	r3, [pc, #36]	; (23f9c34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f9c0e:	681b      	ldr	r3, [r3, #0]
 23f9c10:	b14b      	cbz	r3, 23f9c26 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f9c12:	b003      	add	sp, #12
 23f9c14:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f9c18:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f9c1a:	f7ff ffe5 	bl	23f9be8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f9c1e:	b003      	add	sp, #12
 23f9c20:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9c24:	2300      	movs	r3, #0
 23f9c26:	461a      	mov	r2, r3
 23f9c28:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f9c2c:	9300      	str	r3, [sp, #0]
 23f9c2e:	f7ff facb 	bl	23f91c8 <system_ctrl_set_result>
}
 23f9c32:	e7f4      	b.n	23f9c1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f9c34:	1007aeac 	.word	0x1007aeac

023f9c38 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f9c38:	2100      	movs	r1, #0
{
 23f9c3a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f9c3c:	4811      	ldr	r0, [pc, #68]	; (23f9c84 <module_user_init_hook+0x4c>)
 23f9c3e:	f7ff fb33 	bl	23f92a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f9c42:	4b11      	ldr	r3, [pc, #68]	; (23f9c88 <module_user_init_hook+0x50>)
 23f9c44:	681a      	ldr	r2, [r3, #0]
 23f9c46:	4b11      	ldr	r3, [pc, #68]	; (23f9c8c <module_user_init_hook+0x54>)
 23f9c48:	429a      	cmp	r2, r3
 23f9c4a:	bf0c      	ite	eq
 23f9c4c:	2201      	moveq	r2, #1
 23f9c4e:	2200      	movne	r2, #0
 23f9c50:	4b0f      	ldr	r3, [pc, #60]	; (23f9c90 <module_user_init_hook+0x58>)
 23f9c52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f9c54:	d001      	beq.n	23f9c5a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f9c56:	f7ff ffb1 	bl	23f9bbc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f9c5a:	f7ff f92d 	bl	23f8eb8 <HAL_RNG_GetRandomNumber>
 23f9c5e:	4604      	mov	r4, r0
    srand(seed);
 23f9c60:	f003 fe96 	bl	23fd990 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f9c64:	4b0b      	ldr	r3, [pc, #44]	; (23f9c94 <module_user_init_hook+0x5c>)
 23f9c66:	b113      	cbz	r3, 23f9c6e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f9c68:	4620      	mov	r0, r4
 23f9c6a:	e000      	b.n	23f9c6e <module_user_init_hook+0x36>
 23f9c6c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f9c6e:	2100      	movs	r1, #0
 23f9c70:	4808      	ldr	r0, [pc, #32]	; (23f9c94 <module_user_init_hook+0x5c>)
 23f9c72:	f7ff f9bb 	bl	23f8fec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f9c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f9c7a:	2100      	movs	r1, #0
 23f9c7c:	4806      	ldr	r0, [pc, #24]	; (23f9c98 <module_user_init_hook+0x60>)
 23f9c7e:	f7ff ba95 	b.w	23f91ac <system_ctrl_set_app_request_handler>
 23f9c82:	bf00      	nop
 23f9c84:	023f9b4d 	.word	0x023f9b4d
 23f9c88:	1007b400 	.word	0x1007b400
 23f9c8c:	9a271c1e 	.word	0x9a271c1e
 23f9c90:	1007aea8 	.word	0x1007aea8
 23f9c94:	00000000 	.word	0x00000000
 23f9c98:	023f9c01 	.word	0x023f9c01

023f9c9c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f9c9c:	2200      	movs	r2, #0
 23f9c9e:	4b01      	ldr	r3, [pc, #4]	; (23f9ca4 <_GLOBAL__sub_I_RGB+0x8>)
 23f9ca0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f9ca2:	4770      	bx	lr
 23f9ca4:	1007aeb0 	.word	0x1007aeb0

023f9ca8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f9ca8:	2100      	movs	r1, #0
 23f9caa:	f7ff ba63 	b.w	23f9174 <system_delay_ms>
	...

023f9cb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f9cb0:	4b02      	ldr	r3, [pc, #8]	; (23f9cbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f9cb2:	681a      	ldr	r2, [r3, #0]
 23f9cb4:	4b02      	ldr	r3, [pc, #8]	; (23f9cc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f9cb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f9cb8:	4770      	bx	lr
 23f9cba:	bf00      	nop
 23f9cbc:	1007a074 	.word	0x1007a074
 23f9cc0:	1007aec0 	.word	0x1007aec0

023f9cc4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23f9cc4:	6880      	ldr	r0, [r0, #8]
 23f9cc6:	6803      	ldr	r3, [r0, #0]
 23f9cc8:	68db      	ldr	r3, [r3, #12]
 23f9cca:	4718      	bx	r3

023f9ccc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f9ccc:	4770      	bx	lr

023f9cce <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f9cce:	4608      	mov	r0, r1
 23f9cd0:	b111      	cbz	r1, 23f9cd8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f9cd2:	680b      	ldr	r3, [r1, #0]
 23f9cd4:	685b      	ldr	r3, [r3, #4]
 23f9cd6:	4718      	bx	r3
}
 23f9cd8:	4770      	bx	lr

023f9cda <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f9cda:	4770      	bx	lr

023f9cdc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f9cdc:	4770      	bx	lr

023f9cde <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f9cde:	4770      	bx	lr

023f9ce0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f9ce0:	4770      	bx	lr

023f9ce2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f9ce2:	b538      	push	{r3, r4, r5, lr}
 23f9ce4:	4604      	mov	r4, r0
 23f9ce6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f9ce8:	6800      	ldr	r0, [r0, #0]
 23f9cea:	212e      	movs	r1, #46	; 0x2e
 23f9cec:	f003 fe8b 	bl	23fda06 <strchrnul>
    size = s - category;
 23f9cf0:	6823      	ldr	r3, [r4, #0]
 23f9cf2:	1ac3      	subs	r3, r0, r3
 23f9cf4:	602b      	str	r3, [r5, #0]
    if (size) {
 23f9cf6:	b123      	cbz	r3, 23f9d02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f9cf8:	7803      	ldrb	r3, [r0, #0]
 23f9cfa:	b103      	cbz	r3, 23f9cfe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f9cfc:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23f9cfe:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9d00:	6020      	str	r0, [r4, #0]
}
 23f9d02:	4618      	mov	r0, r3
 23f9d04:	bd38      	pop	{r3, r4, r5, pc}

023f9d06 <_ZN5spark16JSONStreamWriterD0Ev>:
 23f9d06:	b510      	push	{r4, lr}
 23f9d08:	4604      	mov	r4, r0
 23f9d0a:	210c      	movs	r1, #12
 23f9d0c:	f7fd ffdb 	bl	23f7cc6 <_ZdlPvj>
 23f9d10:	4620      	mov	r0, r4
 23f9d12:	bd10      	pop	{r4, pc}

023f9d14 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f9d14:	b510      	push	{r4, lr}
 23f9d16:	4604      	mov	r4, r0
 23f9d18:	2104      	movs	r1, #4
 23f9d1a:	f7fd ffd4 	bl	23f7cc6 <_ZdlPvj>
 23f9d1e:	4620      	mov	r0, r4
 23f9d20:	bd10      	pop	{r4, pc}

023f9d22 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f9d22:	b510      	push	{r4, lr}
 23f9d24:	4604      	mov	r4, r0
 23f9d26:	2104      	movs	r1, #4
 23f9d28:	f7fd ffcd 	bl	23f7cc6 <_ZdlPvj>
 23f9d2c:	4620      	mov	r0, r4
 23f9d2e:	bd10      	pop	{r4, pc}

023f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f9d30:	f7ff b81a 	b.w	23f8d68 <os_mutex_recursive_lock>

023f9d34 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f9d34:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f9d36:	f7fd ff93 	bl	23f7c60 <strcmp>
}
 23f9d3a:	fab0 f080 	clz	r0, r0
 23f9d3e:	0940      	lsrs	r0, r0, #5
 23f9d40:	bd08      	pop	{r3, pc}

023f9d42 <__tcf_1>:
 23f9d42:	4770      	bx	lr

023f9d44 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f9d44:	b510      	push	{r4, lr}
 23f9d46:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f9d48:	f7ff fe64 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23f9d4c:	4284      	cmp	r4, r0
 23f9d4e:	d105      	bne.n	23f9d5c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f9d50:	f7ff fe60 	bl	23f9a14 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f9d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f9d58:	f7ff be4e 	b.w	23f99f8 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f9d5c:	f003 fa80 	bl	23fd260 <_Z22__fetch_global_Serial1v>
 23f9d60:	4284      	cmp	r4, r0
 23f9d62:	d105      	bne.n	23f9d70 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f9d64:	f003 fa7c 	bl	23fd260 <_Z22__fetch_global_Serial1v>
}
 23f9d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f9d6c:	f7ff bbf3 	b.w	23f9556 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f9d70:	b12c      	cbz	r4, 23f9d7e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f9d72:	6823      	ldr	r3, [r4, #0]
 23f9d74:	4620      	mov	r0, r4
}
 23f9d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9d7a:	685b      	ldr	r3, [r3, #4]
 23f9d7c:	4718      	bx	r3
 23f9d7e:	bd10      	pop	{r4, pc}

023f9d80 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f9d80:	680b      	ldr	r3, [r1, #0]
 23f9d82:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f9d84:	684b      	ldr	r3, [r1, #4]
 23f9d86:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f9d88:	b113      	cbz	r3, 23f9d90 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f9d8a:	685a      	ldr	r2, [r3, #4]
 23f9d8c:	3201      	adds	r2, #1
 23f9d8e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f9d90:	4770      	bx	lr

023f9d92 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f9d92:	b513      	push	{r0, r1, r4, lr}
 23f9d94:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f9d96:	4608      	mov	r0, r1
 23f9d98:	9101      	str	r1, [sp, #4]
 23f9d9a:	f7fd ff6b 	bl	23f7c74 <strlen>
 23f9d9e:	4602      	mov	r2, r0
 23f9da0:	4620      	mov	r0, r4
 23f9da2:	9901      	ldr	r1, [sp, #4]
}
 23f9da4:	b002      	add	sp, #8
 23f9da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f9daa:	f7ff bdb7 	b.w	23f991c <_ZN5spark10JSONWriter5valueEPKcj>

023f9dae <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f9dae:	b513      	push	{r0, r1, r4, lr}
 23f9db0:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f9db2:	4608      	mov	r0, r1
 23f9db4:	9101      	str	r1, [sp, #4]
 23f9db6:	f7fd ff5d 	bl	23f7c74 <strlen>
 23f9dba:	4602      	mov	r2, r0
 23f9dbc:	4620      	mov	r0, r4
 23f9dbe:	6823      	ldr	r3, [r4, #0]
 23f9dc0:	9901      	ldr	r1, [sp, #4]
 23f9dc2:	68db      	ldr	r3, [r3, #12]
}
 23f9dc4:	b002      	add	sp, #8
 23f9dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f9dca:	4718      	bx	r3

023f9dcc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f9dcc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f9dce:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f9dd0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f9dd4:	2201      	movs	r2, #1
 23f9dd6:	68db      	ldr	r3, [r3, #12]
 23f9dd8:	f10d 0107 	add.w	r1, sp, #7
 23f9ddc:	4798      	blx	r3
}
 23f9dde:	b003      	add	sp, #12
 23f9de0:	f85d fb04 	ldr.w	pc, [sp], #4

023f9de4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23f9de4:	680a      	ldr	r2, [r1, #0]
 23f9de6:	b510      	push	{r4, lr}
 23f9de8:	6002      	str	r2, [r0, #0]
 23f9dea:	684a      	ldr	r2, [r1, #4]
 23f9dec:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f9dee:	2200      	movs	r2, #0
 23f9df0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f9df4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f9df6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9df8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f9dfa:	6084      	str	r4, [r0, #8]
 23f9dfc:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9dfe:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f9e00:	60c4      	str	r4, [r0, #12]
 23f9e02:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9e04:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f9e06:	6104      	str	r4, [r0, #16]
 23f9e08:	bd10      	pop	{r4, pc}
	...

023f9e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f9e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f9e10:	f04f 0a14 	mov.w	sl, #20
 23f9e14:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f9e18:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23f9e1a:	4645      	mov	r5, r8
 23f9e1c:	fb0a f404 	mul.w	r4, sl, r4
 23f9e20:	9300      	str	r3, [sp, #0]
 23f9e22:	4b17      	ldr	r3, [pc, #92]	; (23f9e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f9e24:	10a4      	asrs	r4, r4, #2
 23f9e26:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23f9e28:	2c00      	cmp	r4, #0
 23f9e2a:	dd21      	ble.n	23f9e70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23f9e2c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f9e2e:	fb0a f006 	mul.w	r0, sl, r6
 23f9e32:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f9e36:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f9e3a:	463a      	mov	r2, r7
 23f9e3c:	455f      	cmp	r7, fp
 23f9e3e:	bf28      	it	cs
 23f9e40:	465a      	movcs	r2, fp
 23f9e42:	5828      	ldr	r0, [r5, r0]
 23f9e44:	9101      	str	r1, [sp, #4]
 23f9e46:	f003 fdf0 	bl	23fda2a <strncmp>
                if (cmp == 0) {
 23f9e4a:	2800      	cmp	r0, #0
 23f9e4c:	f04f 0301 	mov.w	r3, #1
 23f9e50:	9901      	ldr	r1, [sp, #4]
 23f9e52:	d10b      	bne.n	23f9e6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f9e54:	455f      	cmp	r7, fp
 23f9e56:	d103      	bne.n	23f9e60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f9e58:	9a00      	ldr	r2, [sp, #0]
 23f9e5a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f9e5c:	4634      	mov	r4, r6
 23f9e5e:	e7e3      	b.n	23f9e28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23f9e60:	d9fc      	bls.n	23f9e5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23f9e62:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f9e64:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f9e68:	3e01      	subs	r6, #1
 23f9e6a:	e7f7      	b.n	23f9e5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f9e6c:	dbf9      	blt.n	23f9e62 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f9e6e:	e7f5      	b.n	23f9e5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f9e70:	eba5 0508 	sub.w	r5, r5, r8
}
 23f9e74:	4802      	ldr	r0, [pc, #8]	; (23f9e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f9e76:	10ad      	asrs	r5, r5, #2
 23f9e78:	4368      	muls	r0, r5
 23f9e7a:	b003      	add	sp, #12
 23f9e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9e80:	cccccccd 	.word	0xcccccccd

023f9e84 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f9e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f9e86:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f9e88:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f9e8a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f9e8c:	b303      	cbz	r3, 23f9ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f9e8e:	b1f9      	cbz	r1, 23f9ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f9e90:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f9e92:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f9e96:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f9e98:	a903      	add	r1, sp, #12
 23f9e9a:	a801      	add	r0, sp, #4
 23f9e9c:	f7ff ff21 	bl	23f9ce2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f9ea0:	4601      	mov	r1, r0
 23f9ea2:	b1a8      	cbz	r0, 23f9ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f9ea4:	f10d 030b 	add.w	r3, sp, #11
 23f9ea8:	4620      	mov	r0, r4
 23f9eaa:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f9eac:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f9eb0:	f7ff ffac 	bl	23f9e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23f9eb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f9eb8:	b153      	cbz	r3, 23f9ed0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23f9eba:	6823      	ldr	r3, [r4, #0]
 23f9ebc:	2414      	movs	r4, #20
 23f9ebe:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23f9ec2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23f9ec6:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23f9ec8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23f9eca:	bfa8      	it	ge
 23f9ecc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23f9ece:	e7e3      	b.n	23f9e98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23f9ed0:	4628      	mov	r0, r5
 23f9ed2:	b004      	add	sp, #16
 23f9ed4:	bd70      	pop	{r4, r5, r6, pc}

023f9ed6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23f9ed6:	b40e      	push	{r1, r2, r3}
 23f9ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9eda:	b08c      	sub	sp, #48	; 0x30
 23f9edc:	af00      	add	r7, sp, #0
 23f9ede:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23f9ee2:	f855 2b04 	ldr.w	r2, [r5], #4
 23f9ee6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9ee8:	462b      	mov	r3, r5
 23f9eea:	2120      	movs	r1, #32
 23f9eec:	f107 0010 	add.w	r0, r7, #16
 23f9ef0:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f9ef2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9ef4:	f7ff f9a0 	bl	23f9238 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23f9ef8:	281f      	cmp	r0, #31
 23f9efa:	687a      	ldr	r2, [r7, #4]
 23f9efc:	d91a      	bls.n	23f9f34 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23f9efe:	f100 0308 	add.w	r3, r0, #8
 23f9f02:	f023 0307 	bic.w	r3, r3, #7
        }
 23f9f06:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23f9f08:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9f0c:	1c41      	adds	r1, r0, #1
 23f9f0e:	462b      	mov	r3, r5
 23f9f10:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f9f12:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f9f14:	f7ff f990 	bl	23f9238 <vsnprintf>
        if (n > 0) {
 23f9f18:	1e02      	subs	r2, r0, #0
 23f9f1a:	dd04      	ble.n	23f9f26 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23f9f1c:	6823      	ldr	r3, [r4, #0]
 23f9f1e:	4669      	mov	r1, sp
 23f9f20:	4620      	mov	r0, r4
 23f9f22:	68db      	ldr	r3, [r3, #12]
 23f9f24:	4798      	blx	r3
 23f9f26:	46b5      	mov	sp, r6
}
 23f9f28:	3730      	adds	r7, #48	; 0x30
 23f9f2a:	46bd      	mov	sp, r7
 23f9f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f9f30:	b003      	add	sp, #12
 23f9f32:	4770      	bx	lr
    } else if (n > 0) {
 23f9f34:	2800      	cmp	r0, #0
 23f9f36:	d0f7      	beq.n	23f9f28 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23f9f38:	6823      	ldr	r3, [r4, #0]
 23f9f3a:	4602      	mov	r2, r0
 23f9f3c:	68db      	ldr	r3, [r3, #12]
 23f9f3e:	4620      	mov	r0, r4
 23f9f40:	f107 0110 	add.w	r1, r7, #16
 23f9f44:	4798      	blx	r3
}
 23f9f46:	e7ef      	b.n	23f9f28 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023f9f48 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23f9f48:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23f9f4a:	4c08      	ldr	r4, [pc, #32]	; (23f9f6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23f9f4c:	e8d4 3f8f 	ldab	r3, [r4]
 23f9f50:	07db      	lsls	r3, r3, #31
 23f9f52:	d409      	bmi.n	23f9f68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f9f54:	4620      	mov	r0, r4
 23f9f56:	f7fd fec9 	bl	23f7cec <__cxa_guard_acquire>
 23f9f5a:	b128      	cbz	r0, 23f9f68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f9f5c:	4620      	mov	r0, r4
 23f9f5e:	f7fd feca 	bl	23f7cf6 <__cxa_guard_release>
 23f9f62:	4803      	ldr	r0, [pc, #12]	; (23f9f70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23f9f64:	f003 fcc4 	bl	23fd8f0 <atexit>
}
 23f9f68:	4802      	ldr	r0, [pc, #8]	; (23f9f74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23f9f6a:	bd10      	pop	{r4, pc}
 23f9f6c:	1007aec8 	.word	0x1007aec8
 23f9f70:	023f9cdb 	.word	0x023f9cdb
 23f9f74:	1007a078 	.word	0x1007a078

023f9f78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23f9f78:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23f9f7a:	4c08      	ldr	r4, [pc, #32]	; (23f9f9c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23f9f7c:	e8d4 3f8f 	ldab	r3, [r4]
 23f9f80:	07db      	lsls	r3, r3, #31
 23f9f82:	d409      	bmi.n	23f9f98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f9f84:	4620      	mov	r0, r4
 23f9f86:	f7fd feb1 	bl	23f7cec <__cxa_guard_acquire>
 23f9f8a:	b128      	cbz	r0, 23f9f98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f9f8c:	4620      	mov	r0, r4
 23f9f8e:	f7fd feb2 	bl	23f7cf6 <__cxa_guard_release>
 23f9f92:	4803      	ldr	r0, [pc, #12]	; (23f9fa0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23f9f94:	f003 fcac 	bl	23fd8f0 <atexit>
    return &factory;
}
 23f9f98:	4802      	ldr	r0, [pc, #8]	; (23f9fa4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23f9f9a:	bd10      	pop	{r4, pc}
 23f9f9c:	1007aecc 	.word	0x1007aecc
 23f9fa0:	023f9d43 	.word	0x023f9d43
 23f9fa4:	1007a07c 	.word	0x1007a07c

023f9fa8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23f9fa8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f9faa:	2500      	movs	r5, #0
 23f9fac:	4604      	mov	r4, r0
 23f9fae:	e9c0 5500 	strd	r5, r5, [r0]
 23f9fb2:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f9fb6:	6085      	str	r5, [r0, #8]
 23f9fb8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23f9fba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23f9fbe:	f7fe feb7 	bl	23f8d30 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23f9fc2:	f7ff ffc1 	bl	23f9f48 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23f9fc6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f9fc8:	f7ff ffd6 	bl	23f9f78 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23f9fcc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f9fce:	6220      	str	r0, [r4, #32]
}
 23f9fd0:	4620      	mov	r0, r4
 23f9fd2:	bd38      	pop	{r3, r4, r5, pc}

023f9fd4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23f9fd4:	b510      	push	{r4, lr}
    static LogManager mgr;
 23f9fd6:	4c0a      	ldr	r4, [pc, #40]	; (23fa000 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23f9fd8:	e8d4 3f8f 	ldab	r3, [r4]
 23f9fdc:	07db      	lsls	r3, r3, #31
 23f9fde:	d40c      	bmi.n	23f9ffa <_ZN5spark10LogManager8instanceEv+0x26>
 23f9fe0:	4620      	mov	r0, r4
 23f9fe2:	f7fd fe83 	bl	23f7cec <__cxa_guard_acquire>
 23f9fe6:	b140      	cbz	r0, 23f9ffa <_ZN5spark10LogManager8instanceEv+0x26>
 23f9fe8:	4806      	ldr	r0, [pc, #24]	; (23fa004 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f9fea:	f7ff ffdd 	bl	23f9fa8 <_ZN5spark10LogManagerC1Ev>
 23f9fee:	4620      	mov	r0, r4
 23f9ff0:	f7fd fe81 	bl	23f7cf6 <__cxa_guard_release>
 23f9ff4:	4804      	ldr	r0, [pc, #16]	; (23fa008 <_ZN5spark10LogManager8instanceEv+0x34>)
 23f9ff6:	f003 fc7b 	bl	23fd8f0 <atexit>
    return &mgr;
}
 23f9ffa:	4802      	ldr	r0, [pc, #8]	; (23fa004 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f9ffc:	bd10      	pop	{r4, pc}
 23f9ffe:	bf00      	nop
 23fa000:	1007aec4 	.word	0x1007aec4
 23fa004:	1007aed4 	.word	0x1007aed4
 23fa008:	023fa549 	.word	0x023fa549

023fa00c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fa00c:	2300      	movs	r3, #0
 23fa00e:	4a02      	ldr	r2, [pc, #8]	; (23fa018 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fa010:	4902      	ldr	r1, [pc, #8]	; (23fa01c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fa012:	4803      	ldr	r0, [pc, #12]	; (23fa020 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fa014:	f7fe bfce 	b.w	23f8fb4 <log_set_callbacks>
 23fa018:	023fa331 	.word	0x023fa331
 23fa01c:	023fa2bd 	.word	0x023fa2bd
 23fa020:	023fa23d 	.word	0x023fa23d

023fa024 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fa024:	2300      	movs	r3, #0
 23fa026:	461a      	mov	r2, r3
 23fa028:	4619      	mov	r1, r3
 23fa02a:	4618      	mov	r0, r3
 23fa02c:	f7fe bfc2 	b.w	23f8fb4 <log_set_callbacks>

023fa030 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fa030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa032:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fa034:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fa036:	4668      	mov	r0, sp
 23fa038:	f7ff fea2 	bl	23f9d80 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa03c:	466a      	mov	r2, sp
 23fa03e:	4629      	mov	r1, r5
 23fa040:	4620      	mov	r0, r4
 23fa042:	f7ff fb8b 	bl	23f975c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fa046:	a801      	add	r0, sp, #4
 23fa048:	f7ff fc78 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa04c:	4620      	mov	r0, r4
 23fa04e:	b003      	add	sp, #12
 23fa050:	bd30      	pop	{r4, r5, pc}

023fa052 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fa052:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa054:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fa056:	68cd      	ldr	r5, [r1, #12]
 23fa058:	4668      	mov	r0, sp
 23fa05a:	f7ff fe91 	bl	23f9d80 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa05e:	466a      	mov	r2, sp
 23fa060:	4629      	mov	r1, r5
 23fa062:	4620      	mov	r0, r4
 23fa064:	f7ff fb56 	bl	23f9714 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fa068:	a801      	add	r0, sp, #4
 23fa06a:	f7ff fc67 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa06e:	4620      	mov	r0, r4
 23fa070:	b003      	add	sp, #12
 23fa072:	bd30      	pop	{r4, r5, pc}

023fa074 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fa074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa076:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fa078:	690d      	ldr	r5, [r1, #16]
 23fa07a:	4668      	mov	r0, sp
 23fa07c:	f7ff fe80 	bl	23f9d80 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fa080:	466a      	mov	r2, sp
 23fa082:	4629      	mov	r1, r5
 23fa084:	4620      	mov	r0, r4
 23fa086:	f7ff faed 	bl	23f9664 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fa08a:	a801      	add	r0, sp, #4
 23fa08c:	f7ff fc56 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa090:	4620      	mov	r0, r4
 23fa092:	b003      	add	sp, #12
 23fa094:	bd30      	pop	{r4, r5, pc}
	...

023fa098 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fa098:	b570      	push	{r4, r5, r6, lr}
 23fa09a:	b08a      	sub	sp, #40	; 0x28
 23fa09c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fa09e:	4601      	mov	r1, r0
 23fa0a0:	a804      	add	r0, sp, #16
 23fa0a2:	f7ff ffc5 	bl	23fa030 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fa0a6:	4e14      	ldr	r6, [pc, #80]	; (23fa0f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fa0a8:	a804      	add	r0, sp, #16
 23fa0aa:	f7ff fb6f 	bl	23f978c <_ZN5spark18JSONObjectIterator4nextEv>
 23fa0ae:	b1e8      	cbz	r0, 23fa0ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fa0b0:	4668      	mov	r0, sp
 23fa0b2:	a904      	add	r1, sp, #16
 23fa0b4:	f7ff ffcd 	bl	23fa052 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fa0b8:	4631      	mov	r1, r6
 23fa0ba:	9802      	ldr	r0, [sp, #8]
 23fa0bc:	f7ff fe3a 	bl	23f9d34 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fa0c0:	4604      	mov	r4, r0
 23fa0c2:	b110      	cbz	r0, 23fa0ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fa0c4:	1e2c      	subs	r4, r5, #0
 23fa0c6:	bf18      	it	ne
 23fa0c8:	2401      	movne	r4, #1
 23fa0ca:	a801      	add	r0, sp, #4
 23fa0cc:	f7ff fc36 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fa0d0:	2c00      	cmp	r4, #0
 23fa0d2:	d0e9      	beq.n	23fa0a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fa0d4:	4668      	mov	r0, sp
 23fa0d6:	a904      	add	r1, sp, #16
 23fa0d8:	f7ff ffcc 	bl	23fa074 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fa0dc:	4668      	mov	r0, sp
 23fa0de:	f7ff faf7 	bl	23f96d0 <_ZNK5spark9JSONValue5toIntEv>
 23fa0e2:	6028      	str	r0, [r5, #0]
 23fa0e4:	a801      	add	r0, sp, #4
 23fa0e6:	f7ff fc29 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fa0ea:	e7dd      	b.n	23fa0a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fa0ec:	a805      	add	r0, sp, #20
 23fa0ee:	f7ff fc25 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fa0f2:	b00a      	add	sp, #40	; 0x28
 23fa0f4:	bd70      	pop	{r4, r5, r6, pc}
 23fa0f6:	bf00      	nop
 23fa0f8:	023ff928 	.word	0x023ff928

023fa0fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fa0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa0fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fa100:	4913      	ldr	r1, [pc, #76]	; (23fa150 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fa102:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fa104:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fa106:	f7fd fdab 	bl	23f7c60 <strcmp>
 23fa10a:	b950      	cbnz	r0, 23fa122 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fa10c:	f7ff fc82 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23fa110:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa114:	f7ff fc6c 	bl	23f99f0 <_ZN9USBSerial5beginEl>
}
 23fa118:	b003      	add	sp, #12
 23fa11a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fa11e:	f7ff bc79 	b.w	23f9a14 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fa122:	4620      	mov	r0, r4
 23fa124:	490b      	ldr	r1, [pc, #44]	; (23fa154 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fa126:	f7fd fd9b 	bl	23f7c60 <strcmp>
 23fa12a:	b978      	cbnz	r0, 23fa14c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fa12c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fa130:	a901      	add	r1, sp, #4
 23fa132:	4628      	mov	r0, r5
        int baud = 9600;
 23fa134:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fa136:	f7ff ffaf 	bl	23fa098 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fa13a:	f003 f891 	bl	23fd260 <_Z22__fetch_global_Serial1v>
 23fa13e:	9901      	ldr	r1, [sp, #4]
 23fa140:	f7ff fa06 	bl	23f9550 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fa144:	f003 f88c 	bl	23fd260 <_Z22__fetch_global_Serial1v>
}
 23fa148:	b003      	add	sp, #12
 23fa14a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fa14c:	2000      	movs	r0, #0
 23fa14e:	e7fb      	b.n	23fa148 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fa150:	023ff92d 	.word	0x023ff92d
 23fa154:	023ff934 	.word	0x023ff934

023fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa158:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa15a:	2614      	movs	r6, #20
 23fa15c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa160:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa162:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa166:	42ae      	cmp	r6, r5
 23fa168:	d005      	beq.n	23fa176 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fa16a:	f105 0008 	add.w	r0, r5, #8
 23fa16e:	f7ff fff3 	bl	23fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fa172:	3514      	adds	r5, #20
 23fa174:	e7f7      	b.n	23fa166 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa176:	6820      	ldr	r0, [r4, #0]
 23fa178:	f7ff f842 	bl	23f9200 <free>
}
 23fa17c:	4620      	mov	r0, r4
 23fa17e:	bd70      	pop	{r4, r5, r6, pc}

023fa180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa180:	b570      	push	{r4, r5, r6, lr}
 23fa182:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa184:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fa188:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fa18c:	42ae      	cmp	r6, r5
 23fa18e:	d004      	beq.n	23fa19a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fa190:	4628      	mov	r0, r5
 23fa192:	f002 feeb 	bl	23fcf6c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fa196:	3510      	adds	r5, #16
 23fa198:	e7f8      	b.n	23fa18c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fa19a:	6820      	ldr	r0, [r4, #0]
 23fa19c:	f7ff f830 	bl	23f9200 <free>
}
 23fa1a0:	4620      	mov	r0, r4
 23fa1a2:	bd70      	pop	{r4, r5, r6, pc}

023fa1a4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fa1a4:	b510      	push	{r4, lr}
 23fa1a6:	4604      	mov	r4, r0
 23fa1a8:	300c      	adds	r0, #12
 23fa1aa:	f7ff ffd5 	bl	23fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fa1ae:	4620      	mov	r0, r4
 23fa1b0:	f7ff ffe6 	bl	23fa180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fa1b4:	4620      	mov	r0, r4
 23fa1b6:	bd10      	pop	{r4, pc}

023fa1b8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fa1b8:	b510      	push	{r4, lr}
 23fa1ba:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fa1bc:	4b03      	ldr	r3, [pc, #12]	; (23fa1cc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fa1be:	f840 3b04 	str.w	r3, [r0], #4
 23fa1c2:	f7ff ffef 	bl	23fa1a4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fa1c6:	4620      	mov	r0, r4
 23fa1c8:	bd10      	pop	{r4, pc}
 23fa1ca:	bf00      	nop
 23fa1cc:	023fde7c 	.word	0x023fde7c

023fa1d0 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fa1d0:	b510      	push	{r4, lr}
 23fa1d2:	4604      	mov	r4, r0
 23fa1d4:	f7ff fff0 	bl	23fa1b8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fa1d8:	4620      	mov	r0, r4
 23fa1da:	2124      	movs	r1, #36	; 0x24
 23fa1dc:	f7fd fd73 	bl	23f7cc6 <_ZdlPvj>
 23fa1e0:	4620      	mov	r0, r4
 23fa1e2:	bd10      	pop	{r4, pc}

023fa1e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fa1e4:	b510      	push	{r4, lr}
 23fa1e6:	4604      	mov	r4, r0
 23fa1e8:	4b02      	ldr	r3, [pc, #8]	; (23fa1f4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fa1ea:	6003      	str	r3, [r0, #0]
 23fa1ec:	f7ff ffe4 	bl	23fa1b8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fa1f0:	4620      	mov	r0, r4
 23fa1f2:	bd10      	pop	{r4, pc}
 23fa1f4:	023ff9d0 	.word	0x023ff9d0

023fa1f8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fa1f8:	b510      	push	{r4, lr}
 23fa1fa:	4604      	mov	r4, r0
 23fa1fc:	f7ff fff2 	bl	23fa1e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fa200:	4620      	mov	r0, r4
 23fa202:	2124      	movs	r1, #36	; 0x24
 23fa204:	f7fd fd5f 	bl	23f7cc6 <_ZdlPvj>
 23fa208:	4620      	mov	r0, r4
 23fa20a:	bd10      	pop	{r4, pc}

023fa20c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fa20c:	2200      	movs	r2, #0
 23fa20e:	e9c0 2200 	strd	r2, r2, [r0]
 23fa212:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fa214:	b510      	push	{r4, lr}
 23fa216:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa218:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fa21a:	6004      	str	r4, [r0, #0]
 23fa21c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa21e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fa220:	6044      	str	r4, [r0, #4]
 23fa222:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa224:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fa226:	6084      	str	r4, [r0, #8]
}
 23fa228:	bd10      	pop	{r4, pc}

023fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fa22a:	b510      	push	{r4, lr}
 23fa22c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fa22e:	6803      	ldr	r3, [r0, #0]
 23fa230:	6818      	ldr	r0, [r3, #0]
 23fa232:	f7fe fda7 	bl	23f8d84 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fa236:	4620      	mov	r0, r4
 23fa238:	bd10      	pop	{r4, pc}
	...

023fa23c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fa23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa240:	b087      	sub	sp, #28
 23fa242:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fa244:	4b1c      	ldr	r3, [pc, #112]	; (23fa2b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fa246:	4680      	mov	r8, r0
 23fa248:	685b      	ldr	r3, [r3, #4]
 23fa24a:	4689      	mov	r9, r1
 23fa24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fa250:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fa252:	b96b      	cbnz	r3, 23fa270 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fa254:	f7ff febe 	bl	23f9fd4 <_ZN5spark10LogManager8instanceEv>
 23fa258:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fa25a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fa25e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa260:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fa262:	f7ff fd65 	bl	23f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fa266:	7b23      	ldrb	r3, [r4, #12]
 23fa268:	b12b      	cbz	r3, 23fa276 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fa26a:	a805      	add	r0, sp, #20
 23fa26c:	f7ff ffdd 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fa270:	b007      	add	sp, #28
 23fa272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fa276:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fa278:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fa27c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fa27e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fa282:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fa286:	45aa      	cmp	sl, r5
 23fa288:	d012      	beq.n	23fa2b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fa28a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fa28e:	4631      	mov	r1, r6
 23fa290:	1d38      	adds	r0, r7, #4
 23fa292:	f7ff fdf7 	bl	23f9e84 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fa296:	4581      	cmp	r9, r0
 23fa298:	d3f5      	bcc.n	23fa286 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fa29a:	9a03      	ldr	r2, [sp, #12]
 23fa29c:	683b      	ldr	r3, [r7, #0]
 23fa29e:	9200      	str	r2, [sp, #0]
 23fa2a0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fa2a4:	464a      	mov	r2, r9
 23fa2a6:	4633      	mov	r3, r6
 23fa2a8:	4641      	mov	r1, r8
 23fa2aa:	4638      	mov	r0, r7
 23fa2ac:	47d8      	blx	fp
 23fa2ae:	e7ea      	b.n	23fa286 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fa2b0:	2300      	movs	r3, #0
 23fa2b2:	7323      	strb	r3, [r4, #12]
 23fa2b4:	e7d9      	b.n	23fa26a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fa2b6:	bf00      	nop
 23fa2b8:	e000ed00 	.word	0xe000ed00

023fa2bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fa2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa2c0:	469b      	mov	fp, r3
 23fa2c2:	4b1a      	ldr	r3, [pc, #104]	; (23fa32c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fa2c4:	4680      	mov	r8, r0
 23fa2c6:	685b      	ldr	r3, [r3, #4]
 23fa2c8:	4689      	mov	r9, r1
 23fa2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fa2ce:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fa2d0:	b96b      	cbnz	r3, 23fa2ee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fa2d2:	f7ff fe7f 	bl	23f9fd4 <_ZN5spark10LogManager8instanceEv>
 23fa2d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fa2d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa2dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa2de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fa2e0:	f7ff fd26 	bl	23f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fa2e4:	7b23      	ldrb	r3, [r4, #12]
 23fa2e6:	b12b      	cbz	r3, 23fa2f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fa2e8:	a801      	add	r0, sp, #4
 23fa2ea:	f7ff ff9e 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fa2ee:	b003      	add	sp, #12
 23fa2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fa2f4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fa2f6:	b2f6      	uxtb	r6, r6
 23fa2f8:	7323      	strb	r3, [r4, #12]
 23fa2fa:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fa2fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fa302:	4555      	cmp	r5, sl
 23fa304:	d00e      	beq.n	23fa324 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fa306:	f855 7b04 	ldr.w	r7, [r5], #4
 23fa30a:	4659      	mov	r1, fp
 23fa30c:	1d38      	adds	r0, r7, #4
 23fa30e:	f7ff fdb9 	bl	23f9e84 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fa312:	4286      	cmp	r6, r0
 23fa314:	d3f5      	bcc.n	23fa302 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fa316:	683b      	ldr	r3, [r7, #0]
 23fa318:	464a      	mov	r2, r9
 23fa31a:	4641      	mov	r1, r8
 23fa31c:	4638      	mov	r0, r7
 23fa31e:	68db      	ldr	r3, [r3, #12]
 23fa320:	4798      	blx	r3
 23fa322:	e7ee      	b.n	23fa302 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fa324:	2300      	movs	r3, #0
 23fa326:	7323      	strb	r3, [r4, #12]
 23fa328:	e7de      	b.n	23fa2e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fa32a:	bf00      	nop
 23fa32c:	e000ed00 	.word	0xe000ed00

023fa330 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fa330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fa334:	4b16      	ldr	r3, [pc, #88]	; (23fa390 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fa336:	4605      	mov	r5, r0
 23fa338:	685b      	ldr	r3, [r3, #4]
 23fa33a:	460f      	mov	r7, r1
 23fa33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fa340:	bb1b      	cbnz	r3, 23fa38a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fa342:	f7ff fe47 	bl	23f9fd4 <_ZN5spark10LogManager8instanceEv>
 23fa346:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fa348:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa34c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa34e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fa350:	f7ff fcee 	bl	23f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fa354:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fa358:	2446      	movs	r4, #70	; 0x46
 23fa35a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fa35e:	45b0      	cmp	r8, r6
 23fa360:	d109      	bne.n	23fa376 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fa362:	a801      	add	r0, sp, #4
 23fa364:	f7ff ff61 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fa368:	42a5      	cmp	r5, r4
 23fa36a:	bfb4      	ite	lt
 23fa36c:	2000      	movlt	r0, #0
 23fa36e:	2001      	movge	r0, #1
}
 23fa370:	b002      	add	sp, #8
 23fa372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fa376:	f856 0b04 	ldr.w	r0, [r6], #4
 23fa37a:	4639      	mov	r1, r7
 23fa37c:	3004      	adds	r0, #4
 23fa37e:	f7ff fd81 	bl	23f9e84 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fa382:	4284      	cmp	r4, r0
 23fa384:	bfa8      	it	ge
 23fa386:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fa388:	e7e9      	b.n	23fa35e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fa38a:	2000      	movs	r0, #0
 23fa38c:	e7f0      	b.n	23fa370 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fa38e:	bf00      	nop
 23fa390:	e000ed00 	.word	0xe000ed00

023fa394 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fa394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa396:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fa39a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fa39c:	4604      	mov	r4, r0
 23fa39e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa3a0:	db0d      	blt.n	23fa3be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fa3a2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fa3a4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fa3a6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fa3a8:	dd04      	ble.n	23fa3b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fa3aa:	00b9      	lsls	r1, r7, #2
 23fa3ac:	f7fe ff36 	bl	23f921c <realloc>
            if (!d) {
 23fa3b0:	b918      	cbnz	r0, 23fa3ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fa3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fa3b4:	f7fe ff24 	bl	23f9200 <free>
        T* d = nullptr;
 23fa3b8:	2000      	movs	r0, #0
        data_ = d;
 23fa3ba:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fa3bc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fa3be:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fa3c0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fa3c2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fa3c6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fa3c8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fa3cc:	1d08      	adds	r0, r1, #4
 23fa3ce:	f003 fabd 	bl	23fd94c <memmove>
    new(p) T(std::move(value));
 23fa3d2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fa3d6:	6863      	ldr	r3, [r4, #4]
    return true;
 23fa3d8:	2001      	movs	r0, #1
    ++size_;
 23fa3da:	3301      	adds	r3, #1
 23fa3dc:	6063      	str	r3, [r4, #4]
    return true;
 23fa3de:	e7e8      	b.n	23fa3b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fa3e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fa3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa3e2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fa3e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa3e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa3ea:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fa3ec:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fa3ee:	f7ff fc9f 	bl	23f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fa3f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fa3f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fa3fa:	4293      	cmp	r3, r2
 23fa3fc:	4619      	mov	r1, r3
 23fa3fe:	d00a      	beq.n	23fa416 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fa400:	6809      	ldr	r1, [r1, #0]
 23fa402:	3304      	adds	r3, #4
 23fa404:	42a9      	cmp	r1, r5
 23fa406:	d1f8      	bne.n	23fa3fa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fa408:	a801      	add	r0, sp, #4
 23fa40a:	f7ff ff0e 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fa40e:	2500      	movs	r5, #0
}
 23fa410:	4628      	mov	r0, r5
 23fa412:	b003      	add	sp, #12
 23fa414:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fa416:	4629      	mov	r1, r5
 23fa418:	4620      	mov	r0, r4
 23fa41a:	f7ff ffbb 	bl	23fa394 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fa41e:	4605      	mov	r5, r0
 23fa420:	2800      	cmp	r0, #0
 23fa422:	d0f1      	beq.n	23fa408 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fa424:	6863      	ldr	r3, [r4, #4]
 23fa426:	2b01      	cmp	r3, #1
 23fa428:	d101      	bne.n	23fa42e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fa42a:	f7ff fdef 	bl	23fa00c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fa42e:	a801      	add	r0, sp, #4
 23fa430:	f7ff fefb 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fa434:	e7ec      	b.n	23fa410 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fa436 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fa436:	460b      	mov	r3, r1
 23fa438:	b570      	push	{r4, r5, r6, lr}
 23fa43a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fa43c:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fa440:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fa444:	4282      	cmp	r2, r0
 23fa446:	d00f      	beq.n	23fa468 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fa448:	4601      	mov	r1, r0
            if (*p == value) {
 23fa44a:	681d      	ldr	r5, [r3, #0]
 23fa44c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fa450:	42ae      	cmp	r6, r5
 23fa452:	d107      	bne.n	23fa464 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fa454:	1a52      	subs	r2, r2, r1
 23fa456:	f003 fa79 	bl	23fd94c <memmove>
    return true;
 23fa45a:	2001      	movs	r0, #1
    --size_;
 23fa45c:	6863      	ldr	r3, [r4, #4]
 23fa45e:	3b01      	subs	r3, #1
 23fa460:	6063      	str	r3, [r4, #4]
}
 23fa462:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fa464:	4608      	mov	r0, r1
 23fa466:	e7ed      	b.n	23fa444 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fa468:	2000      	movs	r0, #0
 23fa46a:	e7fa      	b.n	23fa462 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fa46c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fa46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fa46e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fa470:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fa474:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fa476:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa478:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fa47a:	f7ff fc59 	bl	23f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fa47e:	4620      	mov	r0, r4
 23fa480:	a901      	add	r1, sp, #4
 23fa482:	f7ff ffd8 	bl	23fa436 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fa486:	b118      	cbz	r0, 23fa490 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fa488:	6863      	ldr	r3, [r4, #4]
 23fa48a:	b90b      	cbnz	r3, 23fa490 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fa48c:	f7ff fdca 	bl	23fa024 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fa490:	a803      	add	r0, sp, #12
 23fa492:	f7ff feca 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fa496:	b004      	add	sp, #16
 23fa498:	bd10      	pop	{r4, pc}

023fa49a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fa49a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fa49c:	b570      	push	{r4, r5, r6, lr}
 23fa49e:	4604      	mov	r4, r0
 23fa4a0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fa4a4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fa4a8:	42ae      	cmp	r6, r5
 23fa4aa:	d015      	beq.n	23fa4d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fa4ac:	4620      	mov	r0, r4
 23fa4ae:	f105 0110 	add.w	r1, r5, #16
 23fa4b2:	f7ff ffc0 	bl	23fa436 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fa4b6:	6863      	ldr	r3, [r4, #4]
 23fa4b8:	b90b      	cbnz	r3, 23fa4be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fa4ba:	f7ff fdb3 	bl	23fa024 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fa4be:	69e0      	ldr	r0, [r4, #28]
 23fa4c0:	6929      	ldr	r1, [r5, #16]
 23fa4c2:	6803      	ldr	r3, [r0, #0]
 23fa4c4:	68db      	ldr	r3, [r3, #12]
 23fa4c6:	4798      	blx	r3
        if (h.stream) {
 23fa4c8:	6969      	ldr	r1, [r5, #20]
 23fa4ca:	b119      	cbz	r1, 23fa4d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fa4cc:	6a20      	ldr	r0, [r4, #32]
 23fa4ce:	6803      	ldr	r3, [r0, #0]
 23fa4d0:	68db      	ldr	r3, [r3, #12]
 23fa4d2:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fa4d4:	3518      	adds	r5, #24
 23fa4d6:	e7e7      	b.n	23fa4a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fa4d8:	2618      	movs	r6, #24
 23fa4da:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fa4de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa4e2:	42ae      	cmp	r6, r5
 23fa4e4:	d004      	beq.n	23fa4f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fa4e6:	4628      	mov	r0, r5
 23fa4e8:	f002 fd40 	bl	23fcf6c <_ZN6StringD1Ev>
 23fa4ec:	3518      	adds	r5, #24
 23fa4ee:	e7f8      	b.n	23fa4e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fa4f0:	2300      	movs	r3, #0
 23fa4f2:	6163      	str	r3, [r4, #20]
}
 23fa4f4:	bd70      	pop	{r4, r5, r6, pc}

023fa4f6 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fa4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa4f8:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fa4fa:	f7ff fd93 	bl	23fa024 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fa4fe:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fa502:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fa504:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fa506:	f7ff fc13 	bl	23f9d30 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fa50a:	4620      	mov	r0, r4
 23fa50c:	f7ff ffc5 	bl	23fa49a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fa510:	a801      	add	r0, sp, #4
 23fa512:	f7ff fe8a 	bl	23fa22a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fa516:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fa518:	b108      	cbz	r0, 23fa51e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fa51a:	f7fe fc17 	bl	23f8d4c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fa51e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fa522:	2618      	movs	r6, #24
 23fa524:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa528:	42ae      	cmp	r6, r5
 23fa52a:	d004      	beq.n	23fa536 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fa52c:	4628      	mov	r0, r5
 23fa52e:	f002 fd1d 	bl	23fcf6c <_ZN6StringD1Ev>
 23fa532:	3518      	adds	r5, #24
 23fa534:	e7f8      	b.n	23fa528 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fa536:	6920      	ldr	r0, [r4, #16]
 23fa538:	f7fe fe62 	bl	23f9200 <free>
 23fa53c:	6820      	ldr	r0, [r4, #0]
 23fa53e:	f7fe fe5f 	bl	23f9200 <free>
}
 23fa542:	4620      	mov	r0, r4
 23fa544:	b002      	add	sp, #8
 23fa546:	bd70      	pop	{r4, r5, r6, pc}

023fa548 <__tcf_2>:
    static LogManager mgr;
 23fa548:	4801      	ldr	r0, [pc, #4]	; (23fa550 <__tcf_2+0x8>)
 23fa54a:	f7ff bfd4 	b.w	23fa4f6 <_ZN5spark10LogManagerD1Ev>
 23fa54e:	bf00      	nop
 23fa550:	1007aed4 	.word	0x1007aed4

023fa554 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fa554:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa558:	4604      	mov	r4, r0
 23fa55a:	460d      	mov	r5, r1
 23fa55c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa55e:	d915      	bls.n	23fa58c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fa560:	4290      	cmp	r0, r2
 23fa562:	d214      	bcs.n	23fa58e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fa564:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fa568:	1a75      	subs	r5, r6, r1
 23fa56a:	f1a1 0714 	sub.w	r7, r1, #20
 23fa56e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa570:	42b7      	cmp	r7, r6
 23fa572:	d01a      	beq.n	23fa5aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fa574:	b11c      	cbz	r4, 23fa57e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fa576:	4631      	mov	r1, r6
 23fa578:	4620      	mov	r0, r4
 23fa57a:	f7ff fc33 	bl	23f9de4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fa57e:	f106 0008 	add.w	r0, r6, #8
 23fa582:	f7ff fde9 	bl	23fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fa586:	3e14      	subs	r6, #20
 23fa588:	3c14      	subs	r4, #20
 23fa58a:	e7f1      	b.n	23fa570 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fa58c:	d00d      	beq.n	23fa5aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fa58e:	42b5      	cmp	r5, r6
 23fa590:	d00b      	beq.n	23fa5aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fa592:	b11c      	cbz	r4, 23fa59c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fa594:	4629      	mov	r1, r5
 23fa596:	4620      	mov	r0, r4
 23fa598:	f7ff fc24 	bl	23f9de4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fa59c:	f105 0008 	add.w	r0, r5, #8
 23fa5a0:	f7ff fdda 	bl	23fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fa5a4:	3514      	adds	r5, #20
 23fa5a6:	3414      	adds	r4, #20
 23fa5a8:	e7f1      	b.n	23fa58e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fa5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa5ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fa5ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa5ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa5b0:	4604      	mov	r4, r0
 23fa5b2:	460d      	mov	r5, r1
 23fa5b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa5b6:	d914      	bls.n	23fa5e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fa5b8:	4290      	cmp	r0, r2
 23fa5ba:	d213      	bcs.n	23fa5e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fa5bc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fa5c0:	1a75      	subs	r5, r6, r1
 23fa5c2:	f1a1 0710 	sub.w	r7, r1, #16
 23fa5c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa5c8:	42b7      	cmp	r7, r6
 23fa5ca:	d018      	beq.n	23fa5fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fa5cc:	b11c      	cbz	r4, 23fa5d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fa5ce:	4631      	mov	r1, r6
 23fa5d0:	4620      	mov	r0, r4
 23fa5d2:	f002 fd47 	bl	23fd064 <_ZN6StringC1EOS_>
                end->~T();
 23fa5d6:	4630      	mov	r0, r6
 23fa5d8:	f002 fcc8 	bl	23fcf6c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fa5dc:	3e10      	subs	r6, #16
 23fa5de:	3c10      	subs	r4, #16
 23fa5e0:	e7f2      	b.n	23fa5c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fa5e2:	d00c      	beq.n	23fa5fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fa5e4:	42b5      	cmp	r5, r6
 23fa5e6:	d00a      	beq.n	23fa5fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fa5e8:	b11c      	cbz	r4, 23fa5f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fa5ea:	4629      	mov	r1, r5
 23fa5ec:	4620      	mov	r0, r4
 23fa5ee:	f002 fd39 	bl	23fd064 <_ZN6StringC1EOS_>
                p->~T();
 23fa5f2:	4628      	mov	r0, r5
 23fa5f4:	f002 fcba 	bl	23fcf6c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fa5f8:	3510      	adds	r5, #16
 23fa5fa:	3410      	adds	r4, #16
 23fa5fc:	e7f2      	b.n	23fa5e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fa5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fa600:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fa602:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fa604:	4605      	mov	r5, r0
        if (n > 0) {
 23fa606:	dd11      	ble.n	23fa62c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fa608:	0130      	lsls	r0, r6, #4
 23fa60a:	f7fe fdeb 	bl	23f91e4 <malloc>
            if (!d) {
 23fa60e:	4604      	mov	r4, r0
 23fa610:	b158      	cbz	r0, 23fa62a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fa612:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fa616:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fa61a:	f7ff ffc7 	bl	23fa5ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fa61e:	6828      	ldr	r0, [r5, #0]
 23fa620:	f7fe fdee 	bl	23f9200 <free>
        return true;
 23fa624:	2001      	movs	r0, #1
        data_ = d;
 23fa626:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fa628:	60ae      	str	r6, [r5, #8]
    }
 23fa62a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fa62c:	2400      	movs	r4, #0
 23fa62e:	e7f6      	b.n	23fa61e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fa630 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fa630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa634:	4690      	mov	r8, r2
        capacity_(0) {
 23fa636:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fa638:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fa63a:	b095      	sub	sp, #84	; 0x54
 23fa63c:	9103      	str	r1, [sp, #12]
    return size_;
 23fa63e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fa642:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fa644:	4299      	cmp	r1, r3
        capacity_(0) {
 23fa646:	e9c0 3300 	strd	r3, r3, [r0]
 23fa64a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fa64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fa652:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fa656:	7602      	strb	r2, [r0, #24]
 23fa658:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fa65a:	dc23      	bgt.n	23fa6a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fa65c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fa660:	2314      	movs	r3, #20
 23fa662:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fa666:	42af      	cmp	r7, r5
 23fa668:	d03b      	beq.n	23fa6e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fa66a:	4629      	mov	r1, r5
 23fa66c:	a80b      	add	r0, sp, #44	; 0x2c
 23fa66e:	f002 fcf9 	bl	23fd064 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fa672:	a90b      	add	r1, sp, #44	; 0x2c
 23fa674:	a80f      	add	r0, sp, #60	; 0x3c
 23fa676:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fa678:	f002 fcf4 	bl	23fd064 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa67c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fa680:	4299      	cmp	r1, r3
 23fa682:	da1b      	bge.n	23fa6bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fa684:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fa686:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fa688:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fa68c:	4631      	mov	r1, r6
 23fa68e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fa692:	f106 0010 	add.w	r0, r6, #16
 23fa696:	f7ff ff89 	bl	23fa5ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fa69a:	b9ee      	cbnz	r6, 23fa6d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fa69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa69e:	3301      	adds	r3, #1
 23fa6a0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fa6a2:	e011      	b.n	23fa6c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fa6a4:	a808      	add	r0, sp, #32
 23fa6a6:	f7ff ffab 	bl	23fa600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fa6aa:	2800      	cmp	r0, #0
 23fa6ac:	d1d6      	bne.n	23fa65c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fa6ae:	a808      	add	r0, sp, #32
 23fa6b0:	f7ff fd66 	bl	23fa180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fa6b4:	4620      	mov	r0, r4
 23fa6b6:	b015      	add	sp, #84	; 0x54
 23fa6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa6bc:	3101      	adds	r1, #1
 23fa6be:	a808      	add	r0, sp, #32
 23fa6c0:	f7ff ff9e 	bl	23fa600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fa6c4:	2800      	cmp	r0, #0
 23fa6c6:	d1dd      	bne.n	23fa684 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fa6c8:	a80f      	add	r0, sp, #60	; 0x3c
 23fa6ca:	f002 fc4f 	bl	23fcf6c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fa6ce:	a80b      	add	r0, sp, #44	; 0x2c
 23fa6d0:	f002 fc4c 	bl	23fcf6c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fa6d4:	3514      	adds	r5, #20
 23fa6d6:	e7c6      	b.n	23fa666 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fa6d8:	4630      	mov	r0, r6
 23fa6da:	a90f      	add	r1, sp, #60	; 0x3c
 23fa6dc:	f002 fcc2 	bl	23fd064 <_ZN6StringC1EOS_>
 23fa6e0:	e7dc      	b.n	23fa69c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fa6e2:	2600      	movs	r6, #0
 23fa6e4:	f04f 0914 	mov.w	r9, #20
 23fa6e8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fa6ec:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fa6ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fa6f2:	429e      	cmp	r6, r3
 23fa6f4:	da7c      	bge.n	23fa7f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fa6f6:	0133      	lsls	r3, r6, #4
 23fa6f8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fa6fa:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fa6fc:	b90b      	cbnz	r3, 23fa702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fa6fe:	3601      	adds	r6, #1
 23fa700:	e7f5      	b.n	23fa6ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fa702:	2300      	movs	r3, #0
 23fa704:	9307      	str	r3, [sp, #28]
 23fa706:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fa70a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fa70c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fa70e:	a907      	add	r1, sp, #28
 23fa710:	a806      	add	r0, sp, #24
 23fa712:	f7ff fae6 	bl	23f9ce2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fa716:	4682      	mov	sl, r0
 23fa718:	2800      	cmp	r0, #0
 23fa71a:	d0f0      	beq.n	23fa6fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fa71c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa720:	4601      	mov	r1, r0
            bool found = false;
 23fa722:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa726:	4628      	mov	r0, r5
 23fa728:	9a07      	ldr	r2, [sp, #28]
 23fa72a:	f10d 0317 	add.w	r3, sp, #23
 23fa72e:	f7ff fb6d 	bl	23f9e0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa732:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fa736:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa738:	2f00      	cmp	r7, #0
 23fa73a:	d14a      	bne.n	23fa7d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fa73c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fa740:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fa744:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fa748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fa74c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fa750:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fa754:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fa756:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fa75a:	4293      	cmp	r3, r2
 23fa75c:	db17      	blt.n	23fa78e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fa75e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fa762:	f1ba 0f00 	cmp.w	sl, #0
 23fa766:	dd30      	ble.n	23fa7ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fa768:	fb09 f00a 	mul.w	r0, r9, sl
 23fa76c:	f7fe fd3a 	bl	23f91e4 <malloc>
            if (!d) {
 23fa770:	4683      	mov	fp, r0
 23fa772:	b360      	cbz	r0, 23fa7ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fa774:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fa778:	fb09 1202 	mla	r2, r9, r2, r1
 23fa77c:	f7ff feea 	bl	23fa554 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fa780:	6828      	ldr	r0, [r5, #0]
 23fa782:	f7fe fd3d 	bl	23f9200 <free>
        data_ = d;
 23fa786:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fa78a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fa78e:	682b      	ldr	r3, [r5, #0]
 23fa790:	9a01      	ldr	r2, [sp, #4]
 23fa792:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fa796:	686a      	ldr	r2, [r5, #4]
 23fa798:	4651      	mov	r1, sl
 23fa79a:	fb09 3202 	mla	r2, r9, r2, r3
 23fa79e:	f10a 0014 	add.w	r0, sl, #20
 23fa7a2:	f7ff fed7 	bl	23fa554 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fa7a6:	f1ba 0f00 	cmp.w	sl, #0
 23fa7aa:	d003      	beq.n	23fa7b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fa7ac:	4650      	mov	r0, sl
 23fa7ae:	a90f      	add	r1, sp, #60	; 0x3c
 23fa7b0:	f7ff fb18 	bl	23f9de4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fa7b4:	686b      	ldr	r3, [r5, #4]
 23fa7b6:	3301      	adds	r3, #1
 23fa7b8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fa7ba:	a811      	add	r0, sp, #68	; 0x44
 23fa7bc:	f7ff fccc 	bl	23fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa7c0:	b13f      	cbz	r7, 23fa7d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fa7c2:	a80b      	add	r0, sp, #44	; 0x2c
 23fa7c4:	f7ff fcc8 	bl	23fa158 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fa7c8:	e771      	b.n	23fa6ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fa7ca:	46bb      	mov	fp, r7
 23fa7cc:	e7d8      	b.n	23fa780 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fa7ce:	2701      	movs	r7, #1
 23fa7d0:	e7f3      	b.n	23fa7ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fa7d2:	9b01      	ldr	r3, [sp, #4]
 23fa7d4:	682d      	ldr	r5, [r5, #0]
 23fa7d6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fa7da:	9b06      	ldr	r3, [sp, #24]
 23fa7dc:	781b      	ldrb	r3, [r3, #0]
 23fa7de:	b92b      	cbnz	r3, 23fa7ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fa7e0:	f8d8 3000 	ldr.w	r3, [r8]
 23fa7e4:	9a02      	ldr	r2, [sp, #8]
 23fa7e6:	4413      	add	r3, r2
 23fa7e8:	7c1b      	ldrb	r3, [r3, #16]
 23fa7ea:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fa7ec:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fa7ee:	e78e      	b.n	23fa70e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa7f0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fa7f2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa7f4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fa7f6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa7f8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fa7fa:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fa7fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fa7fe:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa800:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fa802:	60a2      	str	r2, [r4, #8]
 23fa804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fa806:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa808:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fa80a:	60e2      	str	r2, [r4, #12]
 23fa80c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fa80e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fa810:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fa812:	6122      	str	r2, [r4, #16]
 23fa814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fa816:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fa818:	9b03      	ldr	r3, [sp, #12]
 23fa81a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fa81c:	6162      	str	r2, [r4, #20]
 23fa81e:	7623      	strb	r3, [r4, #24]
 23fa820:	e7cf      	b.n	23fa7c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fa824 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fa824:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa826:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fa828:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fa82a:	4617      	mov	r7, r2
 23fa82c:	b087      	sub	sp, #28
 23fa82e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fa830:	4668      	mov	r0, sp
 23fa832:	4619      	mov	r1, r3
 23fa834:	f7fd ff49 	bl	23f86ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fa838:	4b0b      	ldr	r3, [pc, #44]	; (23fa868 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fa83a:	4669      	mov	r1, sp
 23fa83c:	f846 3b04 	str.w	r3, [r6], #4
 23fa840:	a803      	add	r0, sp, #12
 23fa842:	f7fd ff42 	bl	23f86ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fa846:	4639      	mov	r1, r7
 23fa848:	aa03      	add	r2, sp, #12
 23fa84a:	4630      	mov	r0, r6
 23fa84c:	f7ff fef0 	bl	23fa630 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa850:	a803      	add	r0, sp, #12
 23fa852:	f7fd fef9 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fa856:	4668      	mov	r0, sp
 23fa858:	f7fd fef6 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fa85c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fa85e:	4b03      	ldr	r3, [pc, #12]	; (23fa86c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fa860:	6225      	str	r5, [r4, #32]
 23fa862:	6023      	str	r3, [r4, #0]
}
 23fa864:	b007      	add	sp, #28
 23fa866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fa868:	023fde7c 	.word	0x023fde7c
 23fa86c:	023ff9b8 	.word	0x023ff9b8

023fa870 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fa870:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa872:	460f      	mov	r7, r1
 23fa874:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fa876:	4638      	mov	r0, r7
 23fa878:	491c      	ldr	r1, [pc, #112]	; (23fa8ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fa87a:	4616      	mov	r6, r2
 23fa87c:	461d      	mov	r5, r3
 23fa87e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fa880:	f7fd f9ee 	bl	23f7c60 <strcmp>
 23fa884:	b9c0      	cbnz	r0, 23fa8b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fa886:	b1a4      	cbz	r4, 23fa8b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fa888:	4629      	mov	r1, r5
 23fa88a:	a801      	add	r0, sp, #4
 23fa88c:	f7ff fcbe 	bl	23fa20c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fa890:	2024      	movs	r0, #36	; 0x24
 23fa892:	4917      	ldr	r1, [pc, #92]	; (23fa8f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fa894:	f002 ff12 	bl	23fd6bc <_ZnwjRKSt9nothrow_t>
 23fa898:	4605      	mov	r5, r0
 23fa89a:	b130      	cbz	r0, 23fa8aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fa89c:	ab01      	add	r3, sp, #4
 23fa89e:	4632      	mov	r2, r6
 23fa8a0:	4621      	mov	r1, r4
 23fa8a2:	f7ff ffbf 	bl	23fa824 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa8a6:	4b13      	ldr	r3, [pc, #76]	; (23fa8f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fa8a8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fa8aa:	a801      	add	r0, sp, #4
 23fa8ac:	f7fd fecc 	bl	23f8648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa8b0:	462c      	mov	r4, r5
}
 23fa8b2:	4620      	mov	r0, r4
 23fa8b4:	b005      	add	sp, #20
 23fa8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fa8b8:	4638      	mov	r0, r7
 23fa8ba:	490f      	ldr	r1, [pc, #60]	; (23fa8f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fa8bc:	f7fd f9d0 	bl	23f7c60 <strcmp>
 23fa8c0:	b990      	cbnz	r0, 23fa8e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fa8c2:	2c00      	cmp	r4, #0
 23fa8c4:	d0f5      	beq.n	23fa8b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fa8c6:	4629      	mov	r1, r5
 23fa8c8:	a801      	add	r0, sp, #4
 23fa8ca:	f7ff fc9f 	bl	23fa20c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fa8ce:	2024      	movs	r0, #36	; 0x24
 23fa8d0:	4907      	ldr	r1, [pc, #28]	; (23fa8f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fa8d2:	f002 fef3 	bl	23fd6bc <_ZnwjRKSt9nothrow_t>
 23fa8d6:	4605      	mov	r5, r0
 23fa8d8:	2800      	cmp	r0, #0
 23fa8da:	d0e6      	beq.n	23fa8aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fa8dc:	4632      	mov	r2, r6
 23fa8de:	4621      	mov	r1, r4
 23fa8e0:	ab01      	add	r3, sp, #4
 23fa8e2:	f7ff ff9f 	bl	23fa824 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa8e6:	e7e0      	b.n	23fa8aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fa8e8:	2400      	movs	r4, #0
 23fa8ea:	e7e2      	b.n	23fa8b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fa8ec:	023ff93c 	.word	0x023ff93c
 23fa8f0:	023ffceb 	.word	0x023ffceb
 23fa8f4:	023ff9d0 	.word	0x023ff9d0
 23fa8f8:	023ff940 	.word	0x023ff940

023fa8fc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fa8fc:	4b01      	ldr	r3, [pc, #4]	; (23fa904 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fa8fe:	4a02      	ldr	r2, [pc, #8]	; (23fa908 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fa900:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fa902:	4770      	bx	lr
 23fa904:	1007aed0 	.word	0x1007aed0
 23fa908:	023ff951 	.word	0x023ff951

023fa90c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fa90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa910:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fa912:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fa916:	4604      	mov	r4, r0
 23fa918:	460e      	mov	r6, r1
 23fa91a:	4617      	mov	r7, r2
 23fa91c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fa91e:	f7ff f879 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23fa922:	4581      	cmp	r9, r0
 23fa924:	d04d      	beq.n	23fa9c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fa926:	792b      	ldrb	r3, [r5, #4]
 23fa928:	0719      	lsls	r1, r3, #28
 23fa92a:	d504      	bpl.n	23fa936 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fa92c:	4620      	mov	r0, r4
 23fa92e:	696a      	ldr	r2, [r5, #20]
 23fa930:	4954      	ldr	r1, [pc, #336]	; (23faa84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fa932:	f7ff fad0 	bl	23f9ed6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fa936:	f1b8 0f00 	cmp.w	r8, #0
 23fa93a:	d00d      	beq.n	23fa958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fa93c:	215b      	movs	r1, #91	; 0x5b
 23fa93e:	4620      	mov	r0, r4
 23fa940:	f7ff fa44 	bl	23f9dcc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fa944:	4641      	mov	r1, r8
 23fa946:	4620      	mov	r0, r4
 23fa948:	f7ff fa31 	bl	23f9dae <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fa94c:	6823      	ldr	r3, [r4, #0]
 23fa94e:	2202      	movs	r2, #2
 23fa950:	4620      	mov	r0, r4
 23fa952:	68db      	ldr	r3, [r3, #12]
 23fa954:	494c      	ldr	r1, [pc, #304]	; (23faa88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fa956:	4798      	blx	r3
    if (attr.has_file) {
 23fa958:	792b      	ldrb	r3, [r5, #4]
 23fa95a:	07da      	lsls	r2, r3, #31
 23fa95c:	d524      	bpl.n	23fa9a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fa95e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fa962:	212f      	movs	r1, #47	; 0x2f
 23fa964:	4640      	mov	r0, r8
 23fa966:	f003 f880 	bl	23fda6a <strrchr>
    if (s1) {
 23fa96a:	b108      	cbz	r0, 23fa970 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fa96c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fa970:	4641      	mov	r1, r8
 23fa972:	4620      	mov	r0, r4
 23fa974:	f7ff fa1b 	bl	23f9dae <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fa978:	792b      	ldrb	r3, [r5, #4]
 23fa97a:	079b      	lsls	r3, r3, #30
 23fa97c:	d508      	bpl.n	23fa990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fa97e:	213a      	movs	r1, #58	; 0x3a
 23fa980:	4620      	mov	r0, r4
 23fa982:	f7ff fa23 	bl	23f9dcc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fa986:	4620      	mov	r0, r4
 23fa988:	68ea      	ldr	r2, [r5, #12]
 23fa98a:	4940      	ldr	r1, [pc, #256]	; (23faa8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fa98c:	f7ff faa3 	bl	23f9ed6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fa990:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fa992:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fa994:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fa998:	4620      	mov	r0, r4
            write(", ", 2);
 23fa99a:	f04f 0202 	mov.w	r2, #2
 23fa99e:	68db      	ldr	r3, [r3, #12]
 23fa9a0:	bf14      	ite	ne
 23fa9a2:	493b      	ldrne	r1, [pc, #236]	; (23faa90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fa9a4:	493b      	ldreq	r1, [pc, #236]	; (23faa94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fa9a6:	4798      	blx	r3
    if (attr.has_function) {
 23fa9a8:	792b      	ldrb	r3, [r5, #4]
 23fa9aa:	0758      	lsls	r0, r3, #29
 23fa9ac:	d51d      	bpl.n	23fa9ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fa9ae:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fa9b0:	460b      	mov	r3, r1
 23fa9b2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fa9b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fa9b8:	b160      	cbz	r0, 23fa9d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fa9ba:	2820      	cmp	r0, #32
 23fa9bc:	d108      	bne.n	23fa9d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fa9be:	4619      	mov	r1, r3
 23fa9c0:	e7f7      	b.n	23fa9b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fa9c2:	4835      	ldr	r0, [pc, #212]	; (23faa98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fa9c4:	f7fe fcb5 	bl	23f9332 <_ZN5spark12NetworkClass9listeningEv>
 23fa9c8:	2800      	cmp	r0, #0
 23fa9ca:	d0ac      	beq.n	23fa926 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fa9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fa9d0:	2828      	cmp	r0, #40	; 0x28
 23fa9d2:	d1ee      	bne.n	23fa9b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fa9d4:	6823      	ldr	r3, [r4, #0]
 23fa9d6:	1a52      	subs	r2, r2, r1
 23fa9d8:	4620      	mov	r0, r4
 23fa9da:	68db      	ldr	r3, [r3, #12]
 23fa9dc:	4798      	blx	r3
        write("(): ", 4);
 23fa9de:	6823      	ldr	r3, [r4, #0]
 23fa9e0:	2204      	movs	r2, #4
 23fa9e2:	4620      	mov	r0, r4
 23fa9e4:	68db      	ldr	r3, [r3, #12]
 23fa9e6:	492d      	ldr	r1, [pc, #180]	; (23faa9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fa9e8:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fa9ea:	2100      	movs	r1, #0
 23fa9ec:	4638      	mov	r0, r7
 23fa9ee:	f7fe fad3 	bl	23f8f98 <log_level_name>
 23fa9f2:	4601      	mov	r1, r0
    write(s);
 23fa9f4:	4620      	mov	r0, r4
 23fa9f6:	f7ff f9da 	bl	23f9dae <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fa9fa:	6823      	ldr	r3, [r4, #0]
 23fa9fc:	2202      	movs	r2, #2
 23fa9fe:	4620      	mov	r0, r4
 23faa00:	68db      	ldr	r3, [r3, #12]
 23faa02:	4924      	ldr	r1, [pc, #144]	; (23faa94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23faa04:	4798      	blx	r3
    if (msg) {
 23faa06:	b11e      	cbz	r6, 23faa10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23faa08:	4631      	mov	r1, r6
 23faa0a:	4620      	mov	r0, r4
 23faa0c:	f7ff f9cf 	bl	23f9dae <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23faa10:	792b      	ldrb	r3, [r5, #4]
 23faa12:	f013 0f30 	tst.w	r3, #48	; 0x30
 23faa16:	d02c      	beq.n	23faa72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23faa18:	6823      	ldr	r3, [r4, #0]
 23faa1a:	4921      	ldr	r1, [pc, #132]	; (23faaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23faa1c:	68db      	ldr	r3, [r3, #12]
 23faa1e:	2202      	movs	r2, #2
 23faa20:	4620      	mov	r0, r4
 23faa22:	4798      	blx	r3
        if (attr.has_code) {
 23faa24:	792b      	ldrb	r3, [r5, #4]
 23faa26:	06d9      	lsls	r1, r3, #27
 23faa28:	d50a      	bpl.n	23faa40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23faa2a:	6823      	ldr	r3, [r4, #0]
 23faa2c:	2207      	movs	r2, #7
 23faa2e:	4620      	mov	r0, r4
 23faa30:	491c      	ldr	r1, [pc, #112]	; (23faaa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23faa32:	68db      	ldr	r3, [r3, #12]
 23faa34:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23faa36:	4620      	mov	r0, r4
 23faa38:	69aa      	ldr	r2, [r5, #24]
 23faa3a:	491b      	ldr	r1, [pc, #108]	; (23faaa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23faa3c:	f7ff fa4b 	bl	23f9ed6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23faa40:	792b      	ldrb	r3, [r5, #4]
 23faa42:	069a      	lsls	r2, r3, #26
 23faa44:	d511      	bpl.n	23faa6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23faa46:	06db      	lsls	r3, r3, #27
 23faa48:	d505      	bpl.n	23faa56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23faa4a:	6823      	ldr	r3, [r4, #0]
 23faa4c:	2202      	movs	r2, #2
 23faa4e:	4620      	mov	r0, r4
 23faa50:	68db      	ldr	r3, [r3, #12]
 23faa52:	490f      	ldr	r1, [pc, #60]	; (23faa90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23faa54:	4798      	blx	r3
            write("details = ", 10);
 23faa56:	6823      	ldr	r3, [r4, #0]
 23faa58:	4620      	mov	r0, r4
 23faa5a:	4914      	ldr	r1, [pc, #80]	; (23faaac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23faa5c:	220a      	movs	r2, #10
 23faa5e:	68db      	ldr	r3, [r3, #12]
 23faa60:	4798      	blx	r3
            write(attr.details);
 23faa62:	4620      	mov	r0, r4
 23faa64:	69e9      	ldr	r1, [r5, #28]
 23faa66:	f7ff f9a2 	bl	23f9dae <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23faa6a:	215d      	movs	r1, #93	; 0x5d
 23faa6c:	4620      	mov	r0, r4
 23faa6e:	f7ff f9ad 	bl	23f9dcc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23faa72:	6823      	ldr	r3, [r4, #0]
 23faa74:	4620      	mov	r0, r4
}
 23faa76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23faa7a:	2202      	movs	r2, #2
 23faa7c:	68db      	ldr	r3, [r3, #12]
 23faa7e:	490c      	ldr	r1, [pc, #48]	; (23faab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23faa80:	4718      	bx	r3
 23faa82:	bf00      	nop
 23faa84:	023ff955 	.word	0x023ff955
 23faa88:	023ff95c 	.word	0x023ff95c
 23faa8c:	023fdd2f 	.word	0x023fdd2f
 23faa90:	023ff95f 	.word	0x023ff95f
 23faa94:	023ff964 	.word	0x023ff964
 23faa98:	1007ae80 	.word	0x1007ae80
 23faa9c:	023ff962 	.word	0x023ff962
 23faaa0:	023ff967 	.word	0x023ff967
 23faaa4:	023ff96a 	.word	0x023ff96a
 23faaa8:	023ff972 	.word	0x023ff972
 23faaac:	023ff975 	.word	0x023ff975
 23faab0:	023fde15 	.word	0x023fde15

023faab4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23faab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23faab8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23faaba:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23faabc:	460d      	mov	r5, r1
 23faabe:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23faac0:	f7fe ffa8 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23faac4:	4287      	cmp	r7, r0
 23faac6:	d007      	beq.n	23faad8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23faac8:	6a20      	ldr	r0, [r4, #32]
 23faaca:	4632      	mov	r2, r6
 23faacc:	6803      	ldr	r3, [r0, #0]
 23faace:	4629      	mov	r1, r5
}
 23faad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23faad4:	68db      	ldr	r3, [r3, #12]
 23faad6:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23faad8:	4803      	ldr	r0, [pc, #12]	; (23faae8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23faada:	f7fe fc2a 	bl	23f9332 <_ZN5spark12NetworkClass9listeningEv>
 23faade:	2800      	cmp	r0, #0
 23faae0:	d0f2      	beq.n	23faac8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23faae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23faae6:	bf00      	nop
 23faae8:	1007ae80 	.word	0x1007ae80

023faaec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23faaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23faaf0:	b085      	sub	sp, #20
    return stream_;
 23faaf2:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23faaf6:	4605      	mov	r5, r0
 23faaf8:	460f      	mov	r7, r1
 23faafa:	4690      	mov	r8, r2
 23faafc:	461e      	mov	r6, r3
 23faafe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fab00:	f7fe ff88 	bl	23f9a14 <_Z16_fetch_usbserialv>
 23fab04:	4581      	cmp	r9, r0
 23fab06:	d105      	bne.n	23fab14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fab08:	4849      	ldr	r0, [pc, #292]	; (23fac30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fab0a:	f7fe fc12 	bl	23f9332 <_ZN5spark12NetworkClass9listeningEv>
 23fab0e:	2800      	cmp	r0, #0
 23fab10:	f040 808a 	bne.w	23fac28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fab14:	f04f 0900 	mov.w	r9, #0
 23fab18:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fab1a:	4a46      	ldr	r2, [pc, #280]	; (23fac34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fab1c:	a801      	add	r0, sp, #4
 23fab1e:	9201      	str	r2, [sp, #4]
 23fab20:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fab22:	f88d 9008 	strb.w	r9, [sp, #8]
 23fab26:	f7fe fe5a 	bl	23f97de <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fab2a:	4649      	mov	r1, r9
 23fab2c:	4640      	mov	r0, r8
 23fab2e:	f7fe fa33 	bl	23f8f98 <log_level_name>
 23fab32:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fab34:	4940      	ldr	r1, [pc, #256]	; (23fac38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fab36:	2201      	movs	r2, #1
 23fab38:	a801      	add	r0, sp, #4
 23fab3a:	f7fe fedf 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fab3e:	4641      	mov	r1, r8
 23fab40:	f7ff f927 	bl	23f9d92 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fab44:	b13f      	cbz	r7, 23fab56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fab46:	493d      	ldr	r1, [pc, #244]	; (23fac3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fab48:	2201      	movs	r2, #1
 23fab4a:	a801      	add	r0, sp, #4
 23fab4c:	f7fe fed6 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fab50:	4639      	mov	r1, r7
 23fab52:	f7ff f91e 	bl	23f9d92 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fab56:	b13e      	cbz	r6, 23fab68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fab58:	4939      	ldr	r1, [pc, #228]	; (23fac40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fab5a:	2201      	movs	r2, #1
 23fab5c:	a801      	add	r0, sp, #4
 23fab5e:	f7fe fecd 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fab62:	4631      	mov	r1, r6
 23fab64:	f7ff f915 	bl	23f9d92 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fab68:	7923      	ldrb	r3, [r4, #4]
 23fab6a:	07df      	lsls	r7, r3, #31
 23fab6c:	d50e      	bpl.n	23fab8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fab6e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fab70:	212f      	movs	r1, #47	; 0x2f
 23fab72:	4630      	mov	r0, r6
 23fab74:	f002 ff79 	bl	23fda6a <strrchr>
    if (s1) {
 23fab78:	b100      	cbz	r0, 23fab7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fab7a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fab7c:	4931      	ldr	r1, [pc, #196]	; (23fac44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fab7e:	2201      	movs	r2, #1
 23fab80:	a801      	add	r0, sp, #4
 23fab82:	f7fe febb 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fab86:	4631      	mov	r1, r6
 23fab88:	f7ff f903 	bl	23f9d92 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fab8c:	7923      	ldrb	r3, [r4, #4]
 23fab8e:	079e      	lsls	r6, r3, #30
 23fab90:	d507      	bpl.n	23faba2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fab92:	492d      	ldr	r1, [pc, #180]	; (23fac48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fab94:	2202      	movs	r2, #2
 23fab96:	a801      	add	r0, sp, #4
 23fab98:	f7fe feb0 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fab9c:	68e1      	ldr	r1, [r4, #12]
 23fab9e:	f7fe fe2b 	bl	23f97f8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23faba2:	7923      	ldrb	r3, [r4, #4]
 23faba4:	0758      	lsls	r0, r3, #29
 23faba6:	d514      	bpl.n	23fabd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23faba8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fabaa:	4633      	mov	r3, r6
 23fabac:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fabae:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fabb2:	b12a      	cbz	r2, 23fabc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fabb4:	2a20      	cmp	r2, #32
 23fabb6:	d101      	bne.n	23fabbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fabb8:	461e      	mov	r6, r3
 23fabba:	e7f7      	b.n	23fabac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fabbc:	2a28      	cmp	r2, #40	; 0x28
 23fabbe:	d1f5      	bne.n	23fabac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fabc0:	2202      	movs	r2, #2
 23fabc2:	4922      	ldr	r1, [pc, #136]	; (23fac4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fabc4:	a801      	add	r0, sp, #4
 23fabc6:	f7fe fe99 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fabca:	4631      	mov	r1, r6
 23fabcc:	1bba      	subs	r2, r7, r6
 23fabce:	f7fe fea5 	bl	23f991c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fabd2:	7923      	ldrb	r3, [r4, #4]
 23fabd4:	0719      	lsls	r1, r3, #28
 23fabd6:	d507      	bpl.n	23fabe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fabd8:	491d      	ldr	r1, [pc, #116]	; (23fac50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fabda:	2201      	movs	r2, #1
 23fabdc:	a801      	add	r0, sp, #4
 23fabde:	f7fe fe8d 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fabe2:	6961      	ldr	r1, [r4, #20]
 23fabe4:	f7fe fe1a 	bl	23f981c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fabe8:	7923      	ldrb	r3, [r4, #4]
 23fabea:	06da      	lsls	r2, r3, #27
 23fabec:	d508      	bpl.n	23fac00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fabee:	2204      	movs	r2, #4
 23fabf0:	4918      	ldr	r1, [pc, #96]	; (23fac54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fabf2:	eb0d 0002 	add.w	r0, sp, r2
 23fabf6:	f7fe fe81 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fabfa:	69a1      	ldr	r1, [r4, #24]
 23fabfc:	f7fe fdfc 	bl	23f97f8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fac00:	7923      	ldrb	r3, [r4, #4]
 23fac02:	069b      	lsls	r3, r3, #26
 23fac04:	d507      	bpl.n	23fac16 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fac06:	4914      	ldr	r1, [pc, #80]	; (23fac58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fac08:	2206      	movs	r2, #6
 23fac0a:	a801      	add	r0, sp, #4
 23fac0c:	f7fe fe76 	bl	23f98fc <_ZN5spark10JSONWriter4nameEPKcj>
 23fac10:	69e1      	ldr	r1, [r4, #28]
 23fac12:	f7ff f8be 	bl	23f9d92 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fac16:	a801      	add	r0, sp, #4
 23fac18:	f7fe fdcb 	bl	23f97b2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fac1c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fac1e:	2202      	movs	r2, #2
 23fac20:	6803      	ldr	r3, [r0, #0]
 23fac22:	490e      	ldr	r1, [pc, #56]	; (23fac5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fac24:	68db      	ldr	r3, [r3, #12]
 23fac26:	4798      	blx	r3
}
 23fac28:	b005      	add	sp, #20
 23fac2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fac2e:	bf00      	nop
 23fac30:	1007ae80 	.word	0x1007ae80
 23fac34:	023ff9a0 	.word	0x023ff9a0
 23fac38:	023ff932 	.word	0x023ff932
 23fac3c:	023ff980 	.word	0x023ff980
 23fac40:	023ffe6f 	.word	0x023ffe6f
 23fac44:	023ff982 	.word	0x023ff982
 23fac48:	023ff984 	.word	0x023ff984
 23fac4c:	023ff987 	.word	0x023ff987
 23fac50:	023ff98a 	.word	0x023ff98a
 23fac54:	023ff98c 	.word	0x023ff98c
 23fac58:	023ff991 	.word	0x023ff991
 23fac5c:	023fde15 	.word	0x023fde15

023fac60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fac62:	4606      	mov	r6, r0
 23fac64:	460d      	mov	r5, r1
  size_t n = 0;
 23fac66:	2400      	movs	r4, #0
 23fac68:	188f      	adds	r7, r1, r2
  while (size--) {
 23fac6a:	42bd      	cmp	r5, r7
 23fac6c:	d00c      	beq.n	23fac88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fac6e:	6833      	ldr	r3, [r6, #0]
 23fac70:	4630      	mov	r0, r6
 23fac72:	689b      	ldr	r3, [r3, #8]
 23fac74:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fac78:	4798      	blx	r3
     if (chunk>=0)
 23fac7a:	1e03      	subs	r3, r0, #0
 23fac7c:	db01      	blt.n	23fac82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fac7e:	441c      	add	r4, r3
  while (size--) {
 23fac80:	e7f3      	b.n	23fac6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fac82:	2c00      	cmp	r4, #0
 23fac84:	bf08      	it	eq
 23fac86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fac88:	4620      	mov	r0, r4
 23fac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fac8c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fac8c:	b513      	push	{r0, r1, r4, lr}
 23fac8e:	4604      	mov	r4, r0
    }
 23fac90:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fac92:	b159      	cbz	r1, 23facac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fac94:	9101      	str	r1, [sp, #4]
 23fac96:	f7fc ffed 	bl	23f7c74 <strlen>
 23fac9a:	4602      	mov	r2, r0
 23fac9c:	4620      	mov	r0, r4
 23fac9e:	6823      	ldr	r3, [r4, #0]
 23faca0:	9901      	ldr	r1, [sp, #4]
 23faca2:	68db      	ldr	r3, [r3, #12]
    }
 23faca4:	b002      	add	sp, #8
 23faca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23facaa:	4718      	bx	r3
    }
 23facac:	b002      	add	sp, #8
 23facae:	bd10      	pop	{r4, pc}

023facb0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23facb0:	6803      	ldr	r3, [r0, #0]
 23facb2:	689b      	ldr	r3, [r3, #8]
 23facb4:	4718      	bx	r3

023facb6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23facb6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23facb8:	2a01      	cmp	r2, #1
 23facba:	bf98      	it	ls
 23facbc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23facbe:	b530      	push	{r4, r5, lr}
 23facc0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23facc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23facc6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23facc8:	460d      	mov	r5, r1
 23facca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23facce:	fb01 5312 	mls	r3, r1, r2, r5
 23facd2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23facd6:	2b09      	cmp	r3, #9
 23facd8:	bf94      	ite	ls
 23facda:	3330      	addls	r3, #48	; 0x30
 23facdc:	3337      	addhi	r3, #55	; 0x37
 23facde:	b2db      	uxtb	r3, r3
  } while(n);
 23face0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23face2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23face6:	d9ef      	bls.n	23facc8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23face8:	4621      	mov	r1, r4
 23facea:	f7ff ffcf 	bl	23fac8c <_ZN5Print5writeEPKc>
}
 23facee:	b00b      	add	sp, #44	; 0x2c
 23facf0:	bd30      	pop	{r4, r5, pc}

023facf2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23facf2:	4770      	bx	lr

023facf4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23facf4:	4770      	bx	lr

023facf6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23facf6:	4770      	bx	lr

023facf8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23facf8:	4770      	bx	lr
	...

023facfc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23facfc:	4b06      	ldr	r3, [pc, #24]	; (23fad18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23facfe:	b510      	push	{r4, lr}
	    ||
 23fad00:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fad02:	f100 040c 	add.w	r4, r0, #12
 23fad06:	d005      	beq.n	23fad14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fad08:	4608      	mov	r0, r1
 23fad0a:	f002 fcdf 	bl	23fd6cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fad0e:	2800      	cmp	r0, #0
 23fad10:	bf08      	it	eq
 23fad12:	2400      	moveq	r4, #0
      }
 23fad14:	4620      	mov	r0, r4
 23fad16:	bd10      	pop	{r4, pc}
 23fad18:	023ff884 	.word	0x023ff884

023fad1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fad1c:	4b06      	ldr	r3, [pc, #24]	; (23fad38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fad1e:	b510      	push	{r4, lr}
	    ||
 23fad20:	4299      	cmp	r1, r3
 23fad22:	f100 040c 	add.w	r4, r0, #12
 23fad26:	d005      	beq.n	23fad34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fad28:	4608      	mov	r0, r1
 23fad2a:	f002 fccf 	bl	23fd6cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fad2e:	2800      	cmp	r0, #0
 23fad30:	bf08      	it	eq
 23fad32:	2400      	moveq	r4, #0
      }
 23fad34:	4620      	mov	r0, r4
 23fad36:	bd10      	pop	{r4, pc}
 23fad38:	023ff884 	.word	0x023ff884

023fad3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fad3c:	4b06      	ldr	r3, [pc, #24]	; (23fad58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fad3e:	b510      	push	{r4, lr}
	    ||
 23fad40:	4299      	cmp	r1, r3
 23fad42:	f100 040c 	add.w	r4, r0, #12
 23fad46:	d005      	beq.n	23fad54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fad48:	4608      	mov	r0, r1
 23fad4a:	f002 fcbf 	bl	23fd6cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fad4e:	2800      	cmp	r0, #0
 23fad50:	bf08      	it	eq
 23fad52:	2400      	moveq	r4, #0
      }
 23fad54:	4620      	mov	r0, r4
 23fad56:	bd10      	pop	{r4, pc}
 23fad58:	023ff884 	.word	0x023ff884

023fad5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fad5c:	b510      	push	{r4, lr}
 23fad5e:	4604      	mov	r4, r0
 23fad60:	2168      	movs	r1, #104	; 0x68
 23fad62:	f7fc ffb0 	bl	23f7cc6 <_ZdlPvj>
 23fad66:	4620      	mov	r0, r4
 23fad68:	bd10      	pop	{r4, pc}

023fad6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fad6a:	b510      	push	{r4, lr}
 23fad6c:	4604      	mov	r4, r0
 23fad6e:	2128      	movs	r1, #40	; 0x28
 23fad70:	f7fc ffa9 	bl	23f7cc6 <_ZdlPvj>
 23fad74:	4620      	mov	r0, r4
 23fad76:	bd10      	pop	{r4, pc}

023fad78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fad78:	b510      	push	{r4, lr}
 23fad7a:	4604      	mov	r4, r0
 23fad7c:	2130      	movs	r1, #48	; 0x30
 23fad7e:	f7fc ffa2 	bl	23f7cc6 <_ZdlPvj>
 23fad82:	4620      	mov	r0, r4
 23fad84:	bd10      	pop	{r4, pc}

023fad86 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fad86:	2168      	movs	r1, #104	; 0x68
 23fad88:	f7fc bf9d 	b.w	23f7cc6 <_ZdlPvj>

023fad8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fad8c:	2128      	movs	r1, #40	; 0x28
 23fad8e:	f7fc bf9a 	b.w	23f7cc6 <_ZdlPvj>

023fad92 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fad92:	2130      	movs	r1, #48	; 0x30
 23fad94:	f7fc bf97 	b.w	23f7cc6 <_ZdlPvj>

023fad98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fad98:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fad9a:	2500      	movs	r5, #0
 23fad9c:	1cec      	adds	r4, r5, #3
 23fad9e:	428c      	cmp	r4, r1
 23fada0:	d80d      	bhi.n	23fadbe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fada2:	1c6e      	adds	r6, r5, #1
 23fada4:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fada6:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fada8:	4297      	cmp	r7, r2
 23fadaa:	d105      	bne.n	23fadb8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fadac:	4426      	add	r6, r4
 23fadae:	42b1      	cmp	r1, r6
 23fadb0:	d305      	bcc.n	23fadbe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fadb2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fadb4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fadb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fadb8:	3401      	adds	r4, #1
 23fadba:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fadbc:	e7ee      	b.n	23fad9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fadbe:	2000      	movs	r0, #0
 23fadc0:	e7f9      	b.n	23fadb6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023fadc4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23fadc4:	200a      	movs	r0, #10
 23fadc6:	4a02      	ldr	r2, [pc, #8]	; (23fadd0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23fadc8:	4902      	ldr	r1, [pc, #8]	; (23fadd4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23fadca:	f7fe b8c9 	b.w	23f8f60 <panic_>
 23fadce:	bf00      	nop
 23fadd0:	023f8ed5 	.word	0x023f8ed5
 23fadd4:	023ffa10 	.word	0x023ffa10

023fadd8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fadd8:	b510      	push	{r4, lr}
	if (_M_manager)
 23fadda:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23faddc:	4604      	mov	r4, r0
	if (_M_manager)
 23fadde:	b12b      	cbz	r3, 23fadec <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fade0:	2203      	movs	r2, #3
 23fade2:	4601      	mov	r1, r0
 23fade4:	4798      	blx	r3
	    _M_manager = nullptr;
 23fade6:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fade8:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fadec:	bd10      	pop	{r4, pc}

023fadee <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fadee:	b510      	push	{r4, lr}
	if (_M_manager)
 23fadf0:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fadf2:	4604      	mov	r4, r0
	if (_M_manager)
 23fadf4:	b12b      	cbz	r3, 23fae02 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fadf6:	2203      	movs	r2, #3
 23fadf8:	4601      	mov	r1, r0
 23fadfa:	4798      	blx	r3
	    _M_manager = nullptr;
 23fadfc:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fadfe:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fae02:	bd10      	pop	{r4, pc}

023fae04 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
 23fae04:	2300      	movs	r3, #0
 23fae06:	2220      	movs	r2, #32
    int discoverAllServices(BlePeerDevice& peer) {
 23fae08:	b510      	push	{r4, lr}
 23fae0a:	4604      	mov	r4, r0
 23fae0c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
 23fae0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23fae12:	4a08      	ldr	r2, [pc, #32]	; (23fae34 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
 23fae14:	2001      	movs	r0, #1
 23fae16:	9200      	str	r2, [sp, #0]
 23fae18:	4907      	ldr	r1, [pc, #28]	; (23fae38 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
 23fae1a:	aa02      	add	r2, sp, #8
 23fae1c:	f7fe f8ae 	bl	23f8f7c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fae20:	2300      	movs	r3, #0
 23fae22:	4622      	mov	r2, r4
 23fae24:	6820      	ldr	r0, [r4, #0]
 23fae26:	4905      	ldr	r1, [pc, #20]	; (23fae3c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
 23fae28:	8800      	ldrh	r0, [r0, #0]
    }
 23fae2a:	b00a      	add	sp, #40	; 0x28
 23fae2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fae30:	f7fd bfee 	b.w	23f8e10 <hal_ble_gatt_client_discover_all_services>
 23fae34:	023ffa32 	.word	0x023ffa32
 23fae38:	023ffa27 	.word	0x023ffa27
 23fae3c:	023fc549 	.word	0x023fc549

023fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
 23fae40:	b510      	push	{r4, lr}
 23fae42:	3801      	subs	r0, #1
 23fae44:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
 23fae48:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 23fae4c:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
 23fae4e:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fae52:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fae54:	bf88      	it	hi
 23fae56:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
 23fae5a:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
 23fae5e:	7803      	ldrb	r3, [r0, #0]
 23fae60:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
 23fae64:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fae68:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fae6a:	bf88      	it	hi
 23fae6c:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
 23fae70:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
 23fae72:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
 23fae76:	d1e7      	bne.n	23fae48 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
 23fae78:	bd10      	pop	{r4, pc}

023fae7a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fae7a:	b510      	push	{r4, lr}
 23fae7c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fae7e:	3058      	adds	r0, #88	; 0x58
 23fae80:	f7fd fb02 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23fae84:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23fae88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fae8c:	f002 b86e 	b.w	23fcf6c <_ZN6StringD1Ev>

023fae90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fae90:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fae92:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fae94:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fae96:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fae98:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fae9a:	d008      	beq.n	23faeae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fae9c:	b111      	cbz	r1, 23faea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fae9e:	684b      	ldr	r3, [r1, #4]
 23faea0:	3301      	adds	r3, #1
 23faea2:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23faea4:	6828      	ldr	r0, [r5, #0]
 23faea6:	b108      	cbz	r0, 23faeac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23faea8:	f7fe fbaa 	bl	23f9600 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23faeac:	602c      	str	r4, [r5, #0]
      }
 23faeae:	bd38      	pop	{r3, r4, r5, pc}

023faeb0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23faeb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23faeb4:	b2da      	uxtb	r2, r3
 23faeb6:	2a09      	cmp	r2, #9
 23faeb8:	d801      	bhi.n	23faebe <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23faeba:	4618      	mov	r0, r3
 23faebc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23faebe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23faec2:	2b05      	cmp	r3, #5
 23faec4:	d801      	bhi.n	23faeca <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23faec6:	3857      	subs	r0, #87	; 0x57
 23faec8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23faeca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23faece:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23faed0:	bf94      	ite	ls
 23faed2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23faed4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23faed8:	4770      	bx	lr
	...

023faedc <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23faedc:	2300      	movs	r3, #0
    WiringBleLock() :
 23faede:	b510      	push	{r4, lr}
            locked_(false) {
 23faee0:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23faee2:	4b04      	ldr	r3, [pc, #16]	; (23faef4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23faee4:	4604      	mov	r4, r0
 23faee6:	6818      	ldr	r0, [r3, #0]
 23faee8:	f7fd ff3e 	bl	23f8d68 <os_mutex_recursive_lock>
        locked_ = true;
 23faeec:	2301      	movs	r3, #1
    }
 23faeee:	4620      	mov	r0, r4
        locked_ = true;
 23faef0:	7023      	strb	r3, [r4, #0]
    }
 23faef2:	bd10      	pop	{r4, pc}
 23faef4:	1007af00 	.word	0x1007af00

023faef8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23faef8:	b510      	push	{r4, lr}
        if (locked_) {
 23faefa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23faefc:	4604      	mov	r4, r0
        if (locked_) {
 23faefe:	b11b      	cbz	r3, 23faf08 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23faf00:	4b02      	ldr	r3, [pc, #8]	; (23faf0c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23faf02:	6818      	ldr	r0, [r3, #0]
 23faf04:	f7fd ff3e 	bl	23f8d84 <os_mutex_recursive_unlock>
    }
 23faf08:	4620      	mov	r0, r4
 23faf0a:	bd10      	pop	{r4, pc}
 23faf0c:	1007af00 	.word	0x1007af00

023faf10 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>:
int BleAddress::set(const char* address, BleAddressType type) {
 23faf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23faf14:	4606      	mov	r6, r0
 23faf16:	4617      	mov	r7, r2
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
 23faf18:	460d      	mov	r5, r1
 23faf1a:	b3b1      	cbz	r1, 23faf8a <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x7a>
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
 23faf1c:	f04f 0900 	mov.w	r9, #0
    size_t len = BLE_SIG_ADDR_LEN;
 23faf20:	f04f 0806 	mov.w	r8, #6
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
 23faf24:	2111      	movs	r1, #17
 23faf26:	4628      	mov	r0, r5
 23faf28:	f002 fd93 	bl	23fda52 <strnlen>
 23faf2c:	4548      	cmp	r0, r9
 23faf2e:	d808      	bhi.n	23faf42 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x32>
        address_.addr[len - 1] = 0x00;
 23faf30:	4642      	mov	r2, r8
 23faf32:	2100      	movs	r1, #0
 23faf34:	4630      	mov	r0, r6
 23faf36:	f002 fd23 	bl	23fd980 <memset>
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
 23faf3a:	2000      	movs	r0, #0
 23faf3c:	71b7      	strb	r7, [r6, #6]
}
 23faf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
 23faf42:	f1b8 0f00 	cmp.w	r8, #0
 23faf46:	d0f8      	beq.n	23faf3a <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2a>
        int8_t hi = hexToNibble(address[i]);
 23faf48:	f815 0009 	ldrb.w	r0, [r5, r9]
 23faf4c:	f7ff ffb0 	bl	23faeb0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23faf50:	0603      	lsls	r3, r0, #24
 23faf52:	d417      	bmi.n	23faf84 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
            address_.addr[len - 1] = hi << 4;
 23faf54:	0100      	lsls	r0, r0, #4
 23faf56:	b2c4      	uxtb	r4, r0
 23faf58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            if (++i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5)) {
 23faf5c:	2111      	movs	r1, #17
 23faf5e:	4628      	mov	r0, r5
            address_.addr[len - 1] = hi << 4;
 23faf60:	f806 4008 	strb.w	r4, [r6, r8]
            if (++i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5)) {
 23faf64:	f002 fd75 	bl	23fda52 <strnlen>
 23faf68:	f109 0901 	add.w	r9, r9, #1
 23faf6c:	4581      	cmp	r9, r0
 23faf6e:	d209      	bcs.n	23faf84 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
                int8_t lo = hexToNibble(address[i]);
 23faf70:	f815 0009 	ldrb.w	r0, [r5, r9]
 23faf74:	f7ff ff9c 	bl	23faeb0 <_ZN8particle11hexToNibbleEc>
 23faf78:	b243      	sxtb	r3, r0
                if (lo >= 0) {
 23faf7a:	2b00      	cmp	r3, #0
                    address_.addr[len - 1] |= lo;
 23faf7c:	bfa4      	itt	ge
 23faf7e:	4323      	orrge	r3, r4
 23faf80:	f806 3008 	strbge.w	r3, [r6, r8]
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
 23faf84:	f109 0901 	add.w	r9, r9, #1
 23faf88:	e7cc      	b.n	23faf24 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x14>
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
 23faf8a:	4801      	ldr	r0, [pc, #4]	; (23faf90 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x80>)
 23faf8c:	e7d7      	b.n	23faf3e <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2e>
 23faf8e:	bf00      	nop
 23faf90:	fffffef2 	.word	0xfffffef2

023faf94 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>:
BleAddress::BleAddress(const char* address, BleAddressType type) {
 23faf94:	b510      	push	{r4, lr}
 23faf96:	4604      	mov	r4, r0
    set(address, type);
 23faf98:	f7ff ffba 	bl	23faf10 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>
}
 23faf9c:	4620      	mov	r0, r4
 23faf9e:	bd10      	pop	{r4, pc}

023fafa0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fafa0:	b082      	sub	sp, #8
    address_ = addr;
 23fafa2:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fafa4:	4603      	mov	r3, r0
    address_ = addr;
 23fafa6:	6808      	ldr	r0, [r1, #0]
 23fafa8:	6849      	ldr	r1, [r1, #4]
 23fafaa:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fafac:	466a      	mov	r2, sp
 23fafae:	ca03      	ldmia	r2!, {r0, r1}
 23fafb0:	6018      	str	r0, [r3, #0]
}
 23fafb2:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fafb4:	6059      	str	r1, [r3, #4]
}
 23fafb6:	b002      	add	sp, #8
 23fafb8:	4770      	bx	lr

023fafba <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fafba:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fafbc:	7982      	ldrb	r2, [r0, #6]
 23fafbe:	798b      	ldrb	r3, [r1, #6]
 23fafc0:	429a      	cmp	r2, r3
 23fafc2:	d106      	bne.n	23fafd2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fafc4:	2206      	movs	r2, #6
 23fafc6:	f002 fca4 	bl	23fd912 <memcmp>
 23fafca:	fab0 f080 	clz	r0, r0
 23fafce:	0940      	lsrs	r0, r0, #5
}
 23fafd0:	bd08      	pop	{r3, pc}
    return false;
 23fafd2:	2000      	movs	r0, #0
 23fafd4:	e7fc      	b.n	23fafd0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

023fafd6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fafd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fafda:	6003      	str	r3, [r0, #0]
 23fafdc:	8083      	strh	r3, [r0, #4]
}
 23fafde:	2000      	movs	r0, #0
 23fafe0:	4770      	bx	lr

023fafe2 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fafe2:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fafe4:	4602      	mov	r2, r0
 23fafe6:	b508      	push	{r3, lr}
        : address_{} {
 23fafe8:	6001      	str	r1, [r0, #0]
 23fafea:	6041      	str	r1, [r0, #4]
    clear();
 23fafec:	f7ff fff3 	bl	23fafd6 <_ZN8particle10BleAddress5clearEv>
}
 23faff0:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23faff2:	7191      	strb	r1, [r2, #6]
}
 23faff4:	bd08      	pop	{r3, pc}
	...

023faff8 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23faff8:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23faffa:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23faffc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23faffe:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fb000:	4b04      	ldr	r3, [pc, #16]	; (23fb014 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fb002:	f103 0110 	add.w	r1, r3, #16
 23fb006:	f853 4b04 	ldr.w	r4, [r3], #4
 23fb00a:	428b      	cmp	r3, r1
 23fb00c:	f842 4b04 	str.w	r4, [r2], #4
 23fb010:	d1f9      	bne.n	23fb006 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fb012:	bd10      	pop	{r4, pc}
 23fb014:	023fdcae 	.word	0x023fdcae

023fb018 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fb018:	7c0b      	ldrb	r3, [r1, #16]
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
 23fb01a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fb01c:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 23fb020:	d10d      	bne.n	23fb03e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fb022:	4602      	mov	r2, r0
        type_ = BleUuidType::SHORT;
 23fb024:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fb026:	4b0c      	ldr	r3, [pc, #48]	; (23fb058 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
 23fb028:	f103 0410 	add.w	r4, r3, #16
 23fb02c:	f853 5b04 	ldr.w	r5, [r3], #4
 23fb030:	42a3      	cmp	r3, r4
 23fb032:	f842 5b04 	str.w	r5, [r2], #4
 23fb036:	d1f9      	bne.n	23fb02c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
 23fb038:	880b      	ldrh	r3, [r1, #0]
 23fb03a:	8183      	strh	r3, [r0, #12]
}
 23fb03c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
 23fb03e:	2301      	movs	r3, #1
 23fb040:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fb042:	4603      	mov	r3, r0
 23fb044:	f101 0210 	add.w	r2, r1, #16
 23fb048:	f851 4b04 	ldr.w	r4, [r1], #4
 23fb04c:	4291      	cmp	r1, r2
 23fb04e:	f843 4b04 	str.w	r4, [r3], #4
 23fb052:	d1f9      	bne.n	23fb048 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
 23fb054:	e7f2      	b.n	23fb03c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
 23fb056:	bf00      	nop
 23fb058:	023fdcae 	.word	0x023fdcae

023fb05c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fb05c:	b510      	push	{r4, lr}
    if (uuid128) {
 23fb05e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fb060:	4604      	mov	r4, r0
    if (uuid128) {
 23fb062:	b1b1      	cbz	r1, 23fb092 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fb064:	2a01      	cmp	r2, #1
 23fb066:	f101 0210 	add.w	r2, r1, #16
 23fb06a:	d10a      	bne.n	23fb082 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fb06c:	4601      	mov	r1, r0
 23fb06e:	f853 0b04 	ldr.w	r0, [r3], #4
 23fb072:	4293      	cmp	r3, r2
 23fb074:	f841 0b04 	str.w	r0, [r1], #4
 23fb078:	d1f9      	bne.n	23fb06e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fb07a:	2301      	movs	r3, #1
 23fb07c:	6123      	str	r3, [r4, #16]
}
 23fb07e:	4620      	mov	r0, r4
 23fb080:	bd10      	pop	{r4, pc}
 23fb082:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fb084:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fb088:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fb08a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fb08e:	d1f9      	bne.n	23fb084 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fb090:	e7f3      	b.n	23fb07a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fb092:	2210      	movs	r2, #16
 23fb094:	f002 fc74 	bl	23fd980 <memset>
 23fb098:	e7f1      	b.n	23fb07e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fb09a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23fb09a:	b538      	push	{r3, r4, r5, lr}
 23fb09c:	4604      	mov	r4, r0
 23fb09e:	460d      	mov	r5, r1
        : BleUuid() {
 23fb0a0:	f7ff ffaa 	bl	23faff8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23fb0a4:	2300      	movs	r3, #0
}
 23fb0a6:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23fb0a8:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fb0aa:	81a5      	strh	r5, [r4, #12]
}
 23fb0ac:	bd38      	pop	{r3, r4, r5, pc}

023fb0ae <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fb0ae:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fb0b0:	6902      	ldr	r2, [r0, #16]
 23fb0b2:	690b      	ldr	r3, [r1, #16]
 23fb0b4:	429a      	cmp	r2, r3
 23fb0b6:	d106      	bne.n	23fb0c6 <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fb0b8:	2210      	movs	r2, #16
 23fb0ba:	f002 fc2a 	bl	23fd912 <memcmp>
 23fb0be:	fab0 f080 	clz	r0, r0
 23fb0c2:	0940      	lsrs	r0, r0, #5
}
 23fb0c4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fb0c6:	2000      	movs	r0, #0
 23fb0c8:	e7fc      	b.n	23fb0c4 <_ZNK8particle7BleUuideqERKS0_+0x16>

023fb0ca <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
 23fb0ca:	b510      	push	{r4, lr}
 23fb0cc:	f100 030f 	add.w	r3, r0, #15
 23fb0d0:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
 23fb0d2:	781c      	ldrb	r4, [r3, #0]
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fb0d4:	4283      	cmp	r3, r0
        buf[i] = uuid128_[j];
 23fb0d6:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fb0da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 23fb0de:	d1f8      	bne.n	23fb0d2 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
 23fb0e0:	bd10      	pop	{r4, pc}

023fb0e2 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fb0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb0e6:	461f      	mov	r7, r3
    if (!buf || len == 0) {
 23fb0e8:	460d      	mov	r5, r1
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fb0ea:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
 23fb0ec:	2900      	cmp	r1, #0
 23fb0ee:	d05b      	beq.n	23fb1a8 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
 23fb0f0:	b1da      	cbz	r2, 23fb12a <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
 23fb0f2:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
 23fb0f6:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
 23fb0f8:	f1b8 0f00 	cmp.w	r8, #0
 23fb0fc:	d119      	bne.n	23fb132 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fb0fe:	8983      	ldrh	r3, [r0, #12]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fb100:	2102      	movs	r1, #2
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fb102:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fb104:	aa05      	add	r2, sp, #20
 23fb106:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fb108:	f8ad 3004 	strh.w	r3, [sp, #4]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
 23fb10c:	f8cd 8014 	str.w	r8, [sp, #20]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fb110:	f7ff fe96 	bl	23fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
 23fb114:	2c04      	cmp	r4, #4
 23fb116:	bf28      	it	cs
 23fb118:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
 23fb11a:	4628      	mov	r0, r5
 23fb11c:	4622      	mov	r2, r4
 23fb11e:	a905      	add	r1, sp, #20
 23fb120:	f002 fc07 	bl	23fd932 <memcpy>
        buf[len++] = '\0';
 23fb124:	1c62      	adds	r2, r4, #1
 23fb126:	f805 8004 	strb.w	r8, [r5, r4]
}
 23fb12a:	4610      	mov	r0, r2
 23fb12c:	b00e      	add	sp, #56	; 0x38
 23fb12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
 23fb132:	a901      	add	r1, sp, #4
 23fb134:	f7ff ffc9 	bl	23fb0ca <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fb138:	aa05      	add	r2, sp, #20
    if (stripped) {
 23fb13a:	b17f      	cbz	r7, 23fb15c <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fb13c:	2110      	movs	r1, #16
 23fb13e:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fb140:	f7ff fe7e 	bl	23fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
 23fb144:	2c24      	cmp	r4, #36	; 0x24
 23fb146:	bf28      	it	cs
 23fb148:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
 23fb14a:	4628      	mov	r0, r5
 23fb14c:	4622      	mov	r2, r4
 23fb14e:	a905      	add	r1, sp, #20
 23fb150:	f002 fbef 	bl	23fd932 <memcpy>
    buf[len++] = '\0';
 23fb154:	2300      	movs	r3, #0
 23fb156:	1c62      	adds	r2, r4, #1
 23fb158:	552b      	strb	r3, [r5, r4]
    return len;
 23fb15a:	e7e6      	b.n	23fb12a <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fb15c:	2104      	movs	r1, #4
        cStr[idx * 2] = '-';
 23fb15e:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fb160:	eb0d 0001 	add.w	r0, sp, r1
 23fb164:	f7ff fe6c 	bl	23fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fb168:	2102      	movs	r1, #2
 23fb16a:	f10d 021d 	add.w	r2, sp, #29
 23fb16e:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
 23fb170:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fb174:	f7ff fe64 	bl	23fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fb178:	2102      	movs	r1, #2
 23fb17a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 23fb17e:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
 23fb182:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fb186:	f7ff fe5b 	bl	23fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fb18a:	2102      	movs	r1, #2
 23fb18c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 23fb190:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
 23fb192:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fb196:	f7ff fe53 	bl	23fae40 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fb19a:	2106      	movs	r1, #6
        cStr[idx * 2 + 3] = '-';
 23fb19c:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fb1a0:	aa0b      	add	r2, sp, #44	; 0x2c
 23fb1a2:	f10d 000e 	add.w	r0, sp, #14
 23fb1a6:	e7cb      	b.n	23fb140 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
 23fb1a8:	460a      	mov	r2, r1
 23fb1aa:	e7be      	b.n	23fb12a <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

023fb1ac <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
 23fb1ac:	b510      	push	{r4, lr}
 23fb1ae:	4604      	mov	r4, r0
 23fb1b0:	b08a      	sub	sp, #40	; 0x28
    toString(cStr, sizeof(cStr));
 23fb1b2:	2300      	movs	r3, #0
 23fb1b4:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
 23fb1b6:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
 23fb1b8:	4669      	mov	r1, sp
 23fb1ba:	f7ff ff92 	bl	23fb0e2 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
 23fb1be:	4669      	mov	r1, sp
 23fb1c0:	4620      	mov	r0, r4
 23fb1c2:	f001 ff1e 	bl	23fd002 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fb1c6:	4620      	mov	r0, r4
 23fb1c8:	b00a      	add	sp, #40	; 0x28
 23fb1ca:	bd10      	pop	{r4, pc}

023fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23fb1cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fb1ce:	4605      	mov	r5, r0
 23fb1d0:	4616      	mov	r6, r2
 23fb1d2:	461f      	mov	r7, r3
 23fb1d4:	460a      	mov	r2, r1
 23fb1d6:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fb1da:	ab01      	add	r3, sp, #4
 23fb1dc:	f7ff fddc 	bl	23fad98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23fb1e0:	f030 0402 	bics.w	r4, r0, #2
 23fb1e4:	d00c      	beq.n	23fb200 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23fb1e6:	1e84      	subs	r4, r0, #2
 23fb1e8:	42bc      	cmp	r4, r7
 23fb1ea:	bf28      	it	cs
 23fb1ec:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23fb1ee:	b13e      	cbz	r6, 23fb200 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23fb1f0:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23fb1f2:	682b      	ldr	r3, [r5, #0]
 23fb1f4:	3102      	adds	r1, #2
 23fb1f6:	4622      	mov	r2, r4
 23fb1f8:	4630      	mov	r0, r6
 23fb1fa:	4419      	add	r1, r3
 23fb1fc:	f002 fb99 	bl	23fd932 <memcpy>
}
 23fb200:	4620      	mov	r0, r4
 23fb202:	b003      	add	sp, #12
 23fb204:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fb206 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fb206:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb208:	4613      	mov	r3, r2
 23fb20a:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fb20c:	9201      	str	r2, [sp, #4]
 23fb20e:	460a      	mov	r2, r1
 23fb210:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fb212:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fb214:	f7ff ffda 	bl	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23fb218:	b940      	cbnz	r0, 23fb22c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fb21a:	4622      	mov	r2, r4
 23fb21c:	2109      	movs	r1, #9
 23fb21e:	4628      	mov	r0, r5
 23fb220:	9b01      	ldr	r3, [sp, #4]
}
 23fb222:	b003      	add	sp, #12
 23fb224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fb228:	f7ff bfd0 	b.w	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23fb22c:	b003      	add	sp, #12
 23fb22e:	bd30      	pop	{r4, r5, pc}

023fb230 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23fb230:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb232:	460c      	mov	r4, r1
 23fb234:	b089      	sub	sp, #36	; 0x24
    String name;
 23fb236:	490c      	ldr	r1, [pc, #48]	; (23fb268 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23fb238:	4605      	mov	r5, r0
    String name;
 23fb23a:	f001 fee2 	bl	23fd002 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23fb23e:	221f      	movs	r2, #31
 23fb240:	4669      	mov	r1, sp
 23fb242:	4620      	mov	r0, r4
 23fb244:	f7ff ffdf 	bl	23fb206 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23fb248:	4606      	mov	r6, r0
 23fb24a:	b150      	cbz	r0, 23fb262 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23fb24c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23fb24e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23fb250:	4628      	mov	r0, r5
 23fb252:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fb256:	f001 ff53 	bl	23fd100 <_ZN6String6concatEc>
 23fb25a:	b110      	cbz	r0, 23fb262 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23fb25c:	3701      	adds	r7, #1
 23fb25e:	42be      	cmp	r6, r7
 23fb260:	d1f6      	bne.n	23fb250 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23fb262:	4628      	mov	r0, r5
 23fb264:	b009      	add	sp, #36	; 0x24
 23fb266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb268:	023fde17 	.word	0x023fde17

023fb26c <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23fb26c:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23fb26e:	2302      	movs	r3, #2
 23fb270:	2119      	movs	r1, #25
 23fb272:	aa01      	add	r2, sp, #4
 23fb274:	f7ff ffaa 	bl	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23fb278:	b108      	cbz	r0, 23fb27e <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23fb27a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23fb27e:	b003      	add	sp, #12
 23fb280:	f85d fb04 	ldr.w	pc, [sp], #4

023fb284 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23fb284:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23fb286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb28a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23fb28c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23fb28e:	8043      	strh	r3, [r0, #2]
 23fb290:	220e      	movs	r2, #14
 23fb292:	4629      	mov	r1, r5
 23fb294:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23fb296:	7105      	strb	r5, [r0, #4]
 23fb298:	3006      	adds	r0, #6
 23fb29a:	f002 fb71 	bl	23fd980 <memset>
 23fb29e:	f104 0014 	add.w	r0, r4, #20
 23fb2a2:	f7ff fea9 	bl	23faff8 <_ZN8particle7BleUuidC1Ev>
 23fb2a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fb2aa:	f7ff fea5 	bl	23faff8 <_ZN8particle7BleUuidC1Ev>
 23fb2ae:	4904      	ldr	r1, [pc, #16]	; (23fb2c0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23fb2b0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fb2b4:	f001 fea5 	bl	23fd002 <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23fb2b8:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23fb2ba:	6565      	str	r5, [r4, #84]	; 0x54
 23fb2bc:	bd38      	pop	{r3, r4, r5, pc}
 23fb2be:	bf00      	nop
 23fb2c0:	023fde17 	.word	0x023fde17

023fb2c4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
 23fb2c4:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fb2c6:	680d      	ldr	r5, [r1, #0]
 23fb2c8:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23fb2ca:	4601      	mov	r1, r0
 23fb2cc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23fb2d0:	f7ff feed 	bl	23fb0ae <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23fb2d4:	b140      	cbz	r0, 23fb2e8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
 23fb2d6:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23fb2d8:	8aa2      	ldrh	r2, [r4, #20]
 23fb2da:	429a      	cmp	r2, r3
 23fb2dc:	d805      	bhi.n	23fb2ea <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23fb2de:	8ae0      	ldrh	r0, [r4, #22]
 23fb2e0:	4298      	cmp	r0, r3
 23fb2e2:	bf34      	ite	cc
 23fb2e4:	2000      	movcc	r0, #0
 23fb2e6:	2001      	movcs	r0, #1
    }
 23fb2e8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 23fb2ea:	2000      	movs	r0, #0
 23fb2ec:	e7fc      	b.n	23fb2e8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

023fb2ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fb2ee:	b510      	push	{r4, lr}
    return data_ + size_;
 23fb2f0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fb2f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fb2f8:	4293      	cmp	r3, r2
 23fb2fa:	4618      	mov	r0, r3
 23fb2fc:	d005      	beq.n	23fb30a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fb2fe:	6804      	ldr	r4, [r0, #0]
 23fb300:	3308      	adds	r3, #8
 23fb302:	8824      	ldrh	r4, [r4, #0]
 23fb304:	428c      	cmp	r4, r1
 23fb306:	d1f7      	bne.n	23fb2f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23fb308:	bd10      	pop	{r4, pc}
        return nullptr;
 23fb30a:	2000      	movs	r0, #0
 23fb30c:	e7fc      	b.n	23fb308 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>
	...

023fb310 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fb310:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
 23fb312:	b570      	push	{r4, r5, r6, lr}
 23fb314:	6003      	str	r3, [r0, #0]
 23fb316:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fb318:	2068      	movs	r0, #104	; 0x68
 23fb31a:	f7fc fcd0 	bl	23f7cbe <_Znwj>
	  auto __pi = ::new (__mem)
 23fb31e:	1e04      	subs	r4, r0, #0
 23fb320:	f104 060c 	add.w	r6, r4, #12
 23fb324:	d007      	beq.n	23fb336 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
 23fb326:	2301      	movs	r3, #1
 23fb328:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fb32c:	4b04      	ldr	r3, [pc, #16]	; (23fb340 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fb32e:	4630      	mov	r0, r6
 23fb330:	6023      	str	r3, [r4, #0]
 23fb332:	f7ff ffa7 	bl	23fb284 <_ZN8particle21BleCharacteristicImplC1Ev>
}
 23fb336:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fb338:	e9c5 6400 	strd	r6, r4, [r5]
 23fb33c:	bd70      	pop	{r4, r5, r6, pc}
 23fb33e:	bf00      	nop
 23fb340:	023ffc34 	.word	0x023ffc34

023fb344 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
 23fb344:	b510      	push	{r4, lr}
      { return _M_ptr; }
 23fb346:	6803      	ldr	r3, [r0, #0]
 23fb348:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fb34a:	781a      	ldrb	r2, [r3, #0]
 23fb34c:	bb52      	cbnz	r2, 23fb3a4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
 23fb34e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fb352:	885c      	ldrh	r4, [r3, #2]
 23fb354:	4284      	cmp	r4, r0
 23fb356:	d025      	beq.n	23fb3a4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fb358:	8a18      	ldrh	r0, [r3, #16]
 23fb35a:	b330      	cbz	r0, 23fb3aa <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
 23fb35c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 23fb360:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
 23fb362:	4a13      	ldr	r2, [pc, #76]	; (23fb3b0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
 23fb364:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
 23fb366:	4a13      	ldr	r2, [pc, #76]	; (23fb3b4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
 23fb368:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
 23fb36c:	885a      	ldrh	r2, [r3, #2]
 23fb36e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
 23fb372:	8a1a      	ldrh	r2, [r3, #16]
 23fb374:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
 23fb378:	899a      	ldrh	r2, [r3, #12]
 23fb37a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
 23fb37e:	b159      	cbz	r1, 23fb398 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23fb380:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
 23fb382:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
 23fb384:	bf44      	itt	mi
 23fb386:	2202      	movmi	r2, #2
 23fb388:	9205      	strmi	r2, [sp, #20]
 23fb38a:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
 23fb38c:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
 23fb38e:	bf42      	ittt	mi
 23fb390:	9b05      	ldrmi	r3, [sp, #20]
 23fb392:	f043 0301 	orrmi.w	r3, r3, #1
 23fb396:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
 23fb398:	2100      	movs	r1, #0
 23fb39a:	4668      	mov	r0, sp
 23fb39c:	f7fd fd7e 	bl	23f8e9c <hal_ble_gatt_client_configure_cccd>
}
 23fb3a0:	b006      	add	sp, #24
 23fb3a2:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fb3a4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fb3a8:	e7fa      	b.n	23fb3a0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fb3aa:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fb3ae:	e7f7      	b.n	23fb3a0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
 23fb3b0:	00180003 	.word	0x00180003
 23fb3b4:	023fb58d 	.word	0x023fb58d

023fb3b8 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
 23fb3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fb3ba:	2600      	movs	r6, #0
 23fb3bc:	4605      	mov	r5, r0
 23fb3be:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fb3c0:	2028      	movs	r0, #40	; 0x28
 23fb3c2:	f7fc fc7c 	bl	23f7cbe <_Znwj>
	  auto __pi = ::new (__mem)
 23fb3c6:	1e04      	subs	r4, r0, #0
 23fb3c8:	f104 070c 	add.w	r7, r4, #12
 23fb3cc:	d00a      	beq.n	23fb3e4 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
 23fb3ce:	2301      	movs	r3, #1
 23fb3d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fb3d4:	4b05      	ldr	r3, [pc, #20]	; (23fb3ec <_ZN8particle10BleServiceC1Ev+0x34>)
              characteristicsDiscovered_(false) {
 23fb3d6:	4638      	mov	r0, r7
 23fb3d8:	6023      	str	r3, [r4, #0]
 23fb3da:	f7ff fe0d 	bl	23faff8 <_ZN8particle7BleUuidC1Ev>
 23fb3de:	6226      	str	r6, [r4, #32]
 23fb3e0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
}
 23fb3e4:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fb3e6:	e9c5 7400 	strd	r7, r4, [r5]
 23fb3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fb3ec:	023ffc50 	.word	0x023ffc50

023fb3f0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fb3f0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fb3f2:	2500      	movs	r5, #0
 23fb3f4:	4606      	mov	r6, r0
 23fb3f6:	6005      	str	r5, [r0, #0]
 23fb3f8:	2030      	movs	r0, #48	; 0x30
 23fb3fa:	f7fc fc60 	bl	23f7cbe <_Znwj>
	  auto __pi = ::new (__mem)
 23fb3fe:	4604      	mov	r4, r0
 23fb400:	b198      	cbz	r0, 23fb42a <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fb402:	2301      	movs	r3, #1
 23fb404:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fb408:	4b0a      	ldr	r3, [pc, #40]	; (23fb434 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fb40a:	300e      	adds	r0, #14
 23fb40c:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fb410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb414:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fb418:	f7ff fde3 	bl	23fafe2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fb41c:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fb420:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fb424:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fb428:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fb42a:	6074      	str	r4, [r6, #4]
 23fb42c:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fb42e:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fb430:	6034      	str	r4, [r6, #0]
 23fb432:	bd70      	pop	{r4, r5, r6, pc}
 23fb434:	023ffc6c 	.word	0x023ffc6c

023fb438 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
 23fb438:	b513      	push	{r0, r1, r4, lr}
 23fb43a:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fb43c:	a801      	add	r0, sp, #4
 23fb43e:	f7ff fd4d 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fb442:	6823      	ldr	r3, [r4, #0]
    WiringBleLock lk;
 23fb444:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fb446:	881c      	ldrh	r4, [r3, #0]
 23fb448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb44c:	1ae4      	subs	r4, r4, r3
 23fb44e:	bf18      	it	ne
 23fb450:	2401      	movne	r4, #1
    WiringBleLock lk;
 23fb452:	f7ff fd51 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fb456:	4620      	mov	r0, r4
 23fb458:	b002      	add	sp, #8
 23fb45a:	bd10      	pop	{r4, pc}

023fb45c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
 23fb45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb45e:	460c      	mov	r4, r1
 23fb460:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fb462:	a801      	add	r0, sp, #4
 23fb464:	f7ff fd3a 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
 23fb468:	6823      	ldr	r3, [r4, #0]
      { return _M_ptr; }
 23fb46a:	682a      	ldr	r2, [r5, #0]
    WiringBleLock lk;
 23fb46c:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fb46e:	f8c2 3002 	str.w	r3, [r2, #2]
 23fb472:	6863      	ldr	r3, [r4, #4]
 23fb474:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
 23fb478:	f7ff fd3e 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
 23fb47c:	b003      	add	sp, #12
 23fb47e:	bd30      	pop	{r4, r5, pc}

023fb480 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
 23fb480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb482:	460d      	mov	r5, r1
 23fb484:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fb486:	a801      	add	r0, sp, #4
 23fb488:	f7ff fd28 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
 23fb48c:	682a      	ldr	r2, [r5, #0]
 23fb48e:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fb490:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fb494:	6023      	str	r3, [r4, #0]
 23fb496:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fb49a:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fb49c:	f7ff fd2c 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fb4a0:	4620      	mov	r0, r4
 23fb4a2:	b003      	add	sp, #12
 23fb4a4:	bd30      	pop	{r4, r5, pc}

023fb4a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fb4a6:	b530      	push	{r4, r5, lr}
 23fb4a8:	4605      	mov	r5, r0
 23fb4aa:	460c      	mov	r4, r1
 23fb4ac:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fb4ae:	a801      	add	r0, sp, #4
 23fb4b0:	f7ff fd14 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fb4b4:	682a      	ldr	r2, [r5, #0]
 23fb4b6:	6823      	ldr	r3, [r4, #0]
 23fb4b8:	8812      	ldrh	r2, [r2, #0]
 23fb4ba:	881b      	ldrh	r3, [r3, #0]
 23fb4bc:	429a      	cmp	r2, r3
 23fb4be:	d10d      	bne.n	23fb4dc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fb4c0:	4629      	mov	r1, r5
 23fb4c2:	a802      	add	r0, sp, #8
 23fb4c4:	f7ff ffdc 	bl	23fb480 <_ZNK8particle13BlePeerDevice7addressEv>
 23fb4c8:	4621      	mov	r1, r4
 23fb4ca:	a804      	add	r0, sp, #16
 23fb4cc:	f7ff ffd8 	bl	23fb480 <_ZNK8particle13BlePeerDevice7addressEv>
 23fb4d0:	a904      	add	r1, sp, #16
 23fb4d2:	a802      	add	r0, sp, #8
 23fb4d4:	f7ff fd71 	bl	23fafba <_ZNK8particle10BleAddresseqERKS0_>
 23fb4d8:	4604      	mov	r4, r0
 23fb4da:	b900      	cbnz	r0, 23fb4de <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fb4dc:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fb4de:	a801      	add	r0, sp, #4
 23fb4e0:	f7ff fd0a 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fb4e4:	4620      	mov	r0, r4
 23fb4e6:	b007      	add	sp, #28
 23fb4e8:	bd30      	pop	{r4, r5, pc}
	...

023fb4ec <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fb4ec:	b510      	push	{r4, lr}
 23fb4ee:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fb4f0:	2064      	movs	r0, #100	; 0x64
 23fb4f2:	f7fc fbe4 	bl	23f7cbe <_Znwj>
 23fb4f6:	b168      	cbz	r0, 23fb514 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
 23fb4f8:	2300      	movs	r3, #0
 23fb4fa:	e9c0 3300 	strd	r3, r3, [r0]
 23fb4fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fb502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fb506:	e9c0 3306 	strd	r3, r3, [r0, #24]
 23fb50a:	6203      	str	r3, [r0, #32]
 23fb50c:	62c3      	str	r3, [r0, #44]	; 0x2c
 23fb50e:	63c3      	str	r3, [r0, #60]	; 0x3c
 23fb510:	64c3      	str	r3, [r0, #76]	; 0x4c
 23fb512:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fb514:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fb516:	b920      	cbnz	r0, 23fb522 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
 23fb518:	200a      	movs	r0, #10
 23fb51a:	4a0a      	ldr	r2, [pc, #40]	; (23fb544 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
 23fb51c:	490a      	ldr	r1, [pc, #40]	; (23fb548 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
 23fb51e:	f7fd fd1f 	bl	23f8f60 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fb522:	2000      	movs	r0, #0
 23fb524:	f7fd fc3c 	bl	23f8da0 <hal_ble_stack_init>
 23fb528:	b120      	cbz	r0, 23fb534 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
 23fb52a:	200a      	movs	r0, #10
 23fb52c:	4a05      	ldr	r2, [pc, #20]	; (23fb544 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
 23fb52e:	4907      	ldr	r1, [pc, #28]	; (23fb54c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
 23fb530:	f7fd fd16 	bl	23f8f60 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fb534:	2200      	movs	r2, #0
 23fb536:	6821      	ldr	r1, [r4, #0]
 23fb538:	4805      	ldr	r0, [pc, #20]	; (23fb550 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
 23fb53a:	f7fd fca1 	bl	23f8e80 <hal_ble_set_callback_on_periph_link_events>
}
 23fb53e:	4620      	mov	r0, r4
 23fb540:	bd10      	pop	{r4, pc}
 23fb542:	bf00      	nop
 23fb544:	023f8ed5 	.word	0x023f8ed5
 23fb548:	023ffa10 	.word	0x023ffa10
 23fb54c:	023ffa4e 	.word	0x023ffa4e
 23fb550:	023fbe81 	.word	0x023fbe81

023fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fb554:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fb556:	4c0a      	ldr	r4, [pc, #40]	; (23fb580 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fb558:	e8d4 3f8f 	ldab	r3, [r4]
 23fb55c:	07db      	lsls	r3, r3, #31
 23fb55e:	d40c      	bmi.n	23fb57a <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fb560:	4620      	mov	r0, r4
 23fb562:	f7fc fbc3 	bl	23f7cec <__cxa_guard_acquire>
 23fb566:	b140      	cbz	r0, 23fb57a <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fb568:	4806      	ldr	r0, [pc, #24]	; (23fb584 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fb56a:	f7ff ffbf 	bl	23fb4ec <_ZN8particle14BleLocalDeviceC1Ev>
 23fb56e:	4620      	mov	r0, r4
 23fb570:	f7fc fbc1 	bl	23f7cf6 <__cxa_guard_release>
 23fb574:	4804      	ldr	r0, [pc, #16]	; (23fb588 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fb576:	f002 f9bb 	bl	23fd8f0 <atexit>
    return instance;
}
 23fb57a:	4802      	ldr	r0, [pc, #8]	; (23fb584 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fb57c:	bd10      	pop	{r4, pc}
 23fb57e:	bf00      	nop
 23fb580:	1007aefc 	.word	0x1007aefc
 23fb584:	1007af04 	.word	0x1007af04
 23fb588:	023fb77d 	.word	0x023fb77d

023fb58c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fb58c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23fb58e:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fb590:	4604      	mov	r4, r0
    switch (event->type) {
 23fb592:	3b09      	subs	r3, #9
 23fb594:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fb596:	460d      	mov	r5, r1
 23fb598:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23fb59a:	d811      	bhi.n	23fb5c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23fb59c:	f7ff ffda 	bl	23fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb5a0:	88a1      	ldrh	r1, [r4, #4]
 23fb5a2:	6800      	ldr	r0, [r0, #0]
 23fb5a4:	f7ff fea3 	bl	23fb2ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23fb5a8:	4603      	mov	r3, r0
 23fb5aa:	b958      	cbnz	r0, 23fb5c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23fb5ac:	2220      	movs	r2, #32
 23fb5ae:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23fb5b2:	4a0b      	ldr	r2, [pc, #44]	; (23fb5e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23fb5b4:	2032      	movs	r0, #50	; 0x32
 23fb5b6:	9200      	str	r2, [sp, #0]
 23fb5b8:	490a      	ldr	r1, [pc, #40]	; (23fb5e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23fb5ba:	aa04      	add	r2, sp, #16
 23fb5bc:	f7fd fcde 	bl	23f8f7c <log_message>
}
 23fb5c0:	b00d      	add	sp, #52	; 0x34
 23fb5c2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23fb5c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23fb5c6:	2a00      	cmp	r2, #0
 23fb5c8:	d0fa      	beq.n	23fb5c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23fb5ca:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb5ce:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23fb5d2:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23fb5d6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23fb5d8:	aa04      	add	r2, sp, #16
 23fb5da:	a903      	add	r1, sp, #12
 23fb5dc:	47a0      	blx	r4
}
 23fb5de:	e7ef      	b.n	23fb5c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23fb5e0:	023ffa90 	.word	0x023ffa90
 23fb5e4:	023ffa27 	.word	0x023ffa27

023fb5e8 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23fb5e8:	b510      	push	{r4, lr}
 23fb5ea:	4604      	mov	r4, r0
    ::free(ptr);
 23fb5ec:	6940      	ldr	r0, [r0, #20]
 23fb5ee:	f7fd fe07 	bl	23f9200 <free>
 23fb5f2:	68a0      	ldr	r0, [r4, #8]
 23fb5f4:	f7fd fe04 	bl	23f9200 <free>
 23fb5f8:	4620      	mov	r0, r4
 23fb5fa:	bd10      	pop	{r4, pc}

023fb5fc <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23fb5fc:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
 23fb5fe:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23fb602:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
 23fb606:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fb60a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23fb60e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23fb612:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23fb616:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23fb61a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23fb61e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23fb622:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23fb626:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
 23fb62a:	6202      	str	r2, [r0, #32]
 23fb62c:	6302      	str	r2, [r0, #48]	; 0x30
 23fb62e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
 23fb632:	4770      	bx	lr

023fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb634:	b510      	push	{r4, lr}
 23fb636:	4604      	mov	r4, r0
    ::free(ptr);
 23fb638:	6800      	ldr	r0, [r0, #0]
 23fb63a:	f7fd fde1 	bl	23f9200 <free>
}
 23fb63e:	4620      	mov	r0, r4
 23fb640:	bd10      	pop	{r4, pc}

023fb642 <_ZN8particle16BleScanDelegatorD1Ev>:

    ~BleScanDelegator() = default;
 23fb642:	b570      	push	{r4, r5, r6, lr}
 23fb644:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb646:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23fb648:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 23fb64a:	f7fd fdd9 	bl	23f9200 <free>
 23fb64e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23fb650:	f7fd fdd6 	bl	23f9200 <free>
    }
    ~BleScanFilter() = default;
 23fb654:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23fb658:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fb65c:	f7ff ffea 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23fb660:	4628      	mov	r0, r5
 23fb662:	f7fe fd8d 	bl	23fa180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23fb666:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fb66a:	f7fc ff0d 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
 23fb66e:	f104 0018 	add.w	r0, r4, #24
 23fb672:	f7fc ff09 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23fb676:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fb67a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb67e:	42ae      	cmp	r6, r5
 23fb680:	d004      	beq.n	23fb68c <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
 23fb682:	4628      	mov	r0, r5
 23fb684:	f7ff ffb0 	bl	23fb5e8 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23fb688:	3524      	adds	r5, #36	; 0x24
 23fb68a:	e7f8      	b.n	23fb67e <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
 23fb68c:	6820      	ldr	r0, [r4, #0]
 23fb68e:	f7fd fdb7 	bl	23f9200 <free>
 23fb692:	4620      	mov	r0, r4
 23fb694:	bd70      	pop	{r4, r5, r6, pc}

023fb696 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fb696:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fb698:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fb69a:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fb69c:	6843      	ldr	r3, [r0, #4]
 23fb69e:	db02      	blt.n	23fb6a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fb6a0:	1862      	adds	r2, r4, r1
 23fb6a2:	429a      	cmp	r2, r3
 23fb6a4:	dd00      	ble.n	23fb6a8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fb6a6:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fb6a8:	682a      	ldr	r2, [r5, #0]
 23fb6aa:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fb6ac:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fb6ae:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb6b0:	1a52      	subs	r2, r2, r1
 23fb6b2:	f002 f94b 	bl	23fd94c <memmove>
    size_ -= n;
 23fb6b6:	686a      	ldr	r2, [r5, #4]
 23fb6b8:	1b12      	subs	r2, r2, r4
 23fb6ba:	606a      	str	r2, [r5, #4]
}
 23fb6bc:	bd38      	pop	{r3, r4, r5, pc}

023fb6be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fb6be:	680b      	ldr	r3, [r1, #0]
 23fb6c0:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fb6c2:	b113      	cbz	r3, 23fb6ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fb6c4:	685a      	ldr	r2, [r3, #4]
 23fb6c6:	3201      	adds	r2, #1
 23fb6c8:	605a      	str	r2, [r3, #4]
      }
 23fb6ca:	4770      	bx	lr

023fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23fb6cc:	b510      	push	{r4, lr}
 23fb6ce:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fb6d0:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb6d4:	f840 3b04 	str.w	r3, [r0], #4
 23fb6d8:	f7ff fff1 	bl	23fb6be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23fb6dc:	6823      	ldr	r3, [r4, #0]
 23fb6de:	b90b      	cbnz	r3, 23fb6e4 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23fb6e0:	f7ff fb70 	bl	23fadc4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23fb6e4:	4620      	mov	r0, r4
 23fb6e6:	bd10      	pop	{r4, pc}

023fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fb6e8:	b510      	push	{r4, lr}
 23fb6ea:	4604      	mov	r4, r0
 23fb6ec:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb6f0:	f840 3b04 	str.w	r3, [r0], #4
 23fb6f4:	f7ff ffe3 	bl	23fb6be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fb6f8:	4620      	mov	r0, r4
 23fb6fa:	bd10      	pop	{r4, pc}

023fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fb6fc:	b510      	push	{r4, lr}
 23fb6fe:	4604      	mov	r4, r0
 23fb700:	f851 3b04 	ldr.w	r3, [r1], #4
 23fb704:	f840 3b04 	str.w	r3, [r0], #4
 23fb708:	f7ff ffd9 	bl	23fb6be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fb70c:	4620      	mov	r0, r4
 23fb70e:	bd10      	pop	{r4, pc}

023fb710 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
 23fb710:	b510      	push	{r4, lr}
 23fb712:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fb714:	3004      	adds	r0, #4
 23fb716:	f7fe f911 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb71a:	4620      	mov	r0, r4
 23fb71c:	bd10      	pop	{r4, pc}

023fb71e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb71e:	b570      	push	{r4, r5, r6, lr}
 23fb720:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb722:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb726:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb72a:	42ae      	cmp	r6, r5
 23fb72c:	d004      	beq.n	23fb738 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23fb72e:	1d28      	adds	r0, r5, #4
 23fb730:	f7fe f904 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb734:	3508      	adds	r5, #8
 23fb736:	e7f8      	b.n	23fb72a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb738:	6820      	ldr	r0, [r4, #0]
 23fb73a:	f7fd fd61 	bl	23f9200 <free>
}
 23fb73e:	4620      	mov	r0, r4
 23fb740:	bd70      	pop	{r4, r5, r6, pc}

023fb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb742:	b570      	push	{r4, r5, r6, lr}
 23fb744:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb746:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb74a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb74e:	42ae      	cmp	r6, r5
 23fb750:	d004      	beq.n	23fb75c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fb752:	1d28      	adds	r0, r5, #4
 23fb754:	f7fe f8f2 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb758:	3508      	adds	r5, #8
 23fb75a:	e7f8      	b.n	23fb74e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb75c:	6820      	ldr	r0, [r4, #0]
 23fb75e:	f7fd fd4f 	bl	23f9200 <free>
}
 23fb762:	4620      	mov	r0, r4
 23fb764:	bd70      	pop	{r4, r5, r6, pc}

023fb766 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fb766:	b510      	push	{r4, lr}
 23fb768:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fb76a:	3024      	adds	r0, #36	; 0x24
 23fb76c:	f7ff ffe9 	bl	23fb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fb770:	f104 0018 	add.w	r0, r4, #24
 23fb774:	f7ff ffd3 	bl	23fb71e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fb778:	bd10      	pop	{r4, pc}
	...

023fb77c <__tcf_0>:
    static BleLocalDevice instance;
 23fb77c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
 23fb77e:	4b17      	ldr	r3, [pc, #92]	; (23fb7dc <__tcf_0+0x60>)
 23fb780:	681c      	ldr	r4, [r3, #0]
 23fb782:	b354      	cbz	r4, 23fb7da <__tcf_0+0x5e>
 23fb784:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fb788:	f7fc fe7e 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
 23fb78c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fb790:	f7fc fe7a 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
 23fb794:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fb798:	f7fc fe76 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
 23fb79c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fb7a0:	f7fc fe72 	bl	23f8488 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23fb7a4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fb7a8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fb7ac:	42ae      	cmp	r6, r5
 23fb7ae:	d004      	beq.n	23fb7ba <__tcf_0+0x3e>
      ~__shared_ptr() = default;
 23fb7b0:	1d28      	adds	r0, r5, #4
 23fb7b2:	f7fe f8c3 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fb7b6:	3508      	adds	r5, #8
 23fb7b8:	e7f8      	b.n	23fb7ac <__tcf_0+0x30>
    ::free(ptr);
 23fb7ba:	69a0      	ldr	r0, [r4, #24]
 23fb7bc:	f7fd fd20 	bl	23f9200 <free>
    ~BleLocalDeviceImpl() = default;
 23fb7c0:	f104 000c 	add.w	r0, r4, #12
 23fb7c4:	f7ff ffbd 	bl	23fb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fb7c8:	4620      	mov	r0, r4
 23fb7ca:	f7ff ffa8 	bl	23fb71e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
 23fb7ce:	4620      	mov	r0, r4
    static BleLocalDevice instance;
 23fb7d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fb7d4:	2164      	movs	r1, #100	; 0x64
 23fb7d6:	f7fc ba76 	b.w	23f7cc6 <_ZdlPvj>
 23fb7da:	bd70      	pop	{r4, r5, r6, pc}
 23fb7dc:	1007af04 	.word	0x1007af04

023fb7e0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fb7e0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fb7e2:	b510      	push	{r4, lr}
      if (_M_empty())
 23fb7e4:	b90a      	cbnz	r2, 23fb7ea <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fb7e6:	f001 ff6d 	bl	23fd6c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb7ea:	68c3      	ldr	r3, [r0, #12]
    }
 23fb7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fb7f0:	4718      	bx	r3

023fb7f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb7f2:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fb7f8:	e9c0 3300 	strd	r3, r3, [r0]
 23fb7fc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb7fe:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb802:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb804:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb806:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb808:	dd4a      	ble.n	23fb8a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23fb80a:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23fb80e:	f7fd fce9 	bl	23f91e4 <malloc>
            if (!d) {
 23fb812:	4606      	mov	r6, r0
 23fb814:	2800      	cmp	r0, #0
 23fb816:	d043      	beq.n	23fb8a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23fb818:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fb81c:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fb81e:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23fb822:	d916      	bls.n	23fb852 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23fb824:	4550      	cmp	r0, sl
 23fb826:	d215      	bcs.n	23fb854 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23fb828:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23fb82c:	f1a4 0910 	sub.w	r9, r4, #16
 23fb830:	ebaa 0404 	sub.w	r4, sl, r4
 23fb834:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fb836:	45d1      	cmp	r9, sl
 23fb838:	d01d      	beq.n	23fb876 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23fb83a:	b11c      	cbz	r4, 23fb844 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23fb83c:	4651      	mov	r1, sl
 23fb83e:	4620      	mov	r0, r4
 23fb840:	f001 fc10 	bl	23fd064 <_ZN6StringC1EOS_>
                end->~T();
 23fb844:	4650      	mov	r0, sl
 23fb846:	f001 fb91 	bl	23fcf6c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb84a:	f1aa 0a10 	sub.w	sl, sl, #16
 23fb84e:	3c10      	subs	r4, #16
 23fb850:	e7f1      	b.n	23fb836 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23fb852:	d010      	beq.n	23fb876 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23fb854:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fb856:	45a2      	cmp	sl, r4
 23fb858:	d00d      	beq.n	23fb876 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23fb85a:	f1b9 0f00 	cmp.w	r9, #0
 23fb85e:	d003      	beq.n	23fb868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23fb860:	4621      	mov	r1, r4
 23fb862:	4648      	mov	r0, r9
 23fb864:	f001 fbfe 	bl	23fd064 <_ZN6StringC1EOS_>
                p->~T();
 23fb868:	4620      	mov	r0, r4
 23fb86a:	f001 fb7f 	bl	23fcf6c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb86e:	3410      	adds	r4, #16
 23fb870:	f109 0910 	add.w	r9, r9, #16
 23fb874:	e7ef      	b.n	23fb856 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23fb876:	6828      	ldr	r0, [r5, #0]
 23fb878:	f7fd fcc2 	bl	23f9200 <free>
        capacity_ = n;
 23fb87c:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23fb880:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb882:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fb886:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23fb88a:	45a0      	cmp	r8, r4
 23fb88c:	d006      	beq.n	23fb89c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23fb88e:	4621      	mov	r1, r4
 23fb890:	4630      	mov	r0, r6
 23fb892:	f001 fc01 	bl	23fd098 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23fb896:	3410      	adds	r4, #16
 23fb898:	3610      	adds	r6, #16
 23fb89a:	e7f6      	b.n	23fb88a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23fb89c:	687b      	ldr	r3, [r7, #4]
 23fb89e:	606b      	str	r3, [r5, #4]
}
 23fb8a0:	4628      	mov	r0, r5
 23fb8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fb8a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
            return false;
        }
        return true;
    }

    bool filterByDeviceName(const BleScanResult& result) {
 23fb8a6:	b530      	push	{r4, r5, lr}
 23fb8a8:	b08d      	sub	sp, #52	; 0x34
 23fb8aa:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23fb8ac:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23fb8b0:	a801      	add	r0, sp, #4
 23fb8b2:	f7ff ff9e 	bl	23fb7f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23fb8b6:	9b02      	ldr	r3, [sp, #8]
 23fb8b8:	2b00      	cmp	r3, #0
 23fb8ba:	dd2f      	ble.n	23fb91c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23fb8bc:	f104 0114 	add.w	r1, r4, #20
 23fb8c0:	a804      	add	r0, sp, #16
 23fb8c2:	f7ff fcb5 	bl	23fb230 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23fb8c6:	f104 0108 	add.w	r1, r4, #8
 23fb8ca:	a808      	add	r0, sp, #32
 23fb8cc:	f7ff fcb0 	bl	23fb230 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23fb8d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fb8d2:	9b06      	ldr	r3, [sp, #24]
 23fb8d4:	4313      	orrs	r3, r2
 23fb8d6:	d01f      	beq.n	23fb918 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23fb8d8:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fb8dc:	eb04 1505 	add.w	r5, r4, r5, lsl #4
                LOG_DEBUG(TRACE, "Device name mismatched.");
                return false;
            }
            for (const auto& name : filterDeviceNames) {
 23fb8e0:	42ac      	cmp	r4, r5
 23fb8e2:	d019      	beq.n	23fb918 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23fb8e4:	4620      	mov	r0, r4
 23fb8e6:	a904      	add	r1, sp, #16
 23fb8e8:	f001 fc2c 	bl	23fd144 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fb8ec:	b160      	cbz	r0, 23fb908 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23fb8ee:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23fb8f0:	a808      	add	r0, sp, #32
 23fb8f2:	f001 fb3b 	bl	23fcf6c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23fb8f6:	a804      	add	r0, sp, #16
 23fb8f8:	f001 fb38 	bl	23fcf6c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23fb8fc:	a801      	add	r0, sp, #4
 23fb8fe:	f7fe fc3f 	bl	23fa180 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
            }
            LOG_DEBUG(TRACE, "Device name mismatched.");
            return false;
        }
        return true;
    }
 23fb902:	4620      	mov	r0, r4
 23fb904:	b00d      	add	sp, #52	; 0x34
 23fb906:	bd30      	pop	{r4, r5, pc}
 23fb908:	4620      	mov	r0, r4
 23fb90a:	a908      	add	r1, sp, #32
 23fb90c:	f001 fc1a 	bl	23fd144 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fb910:	3410      	adds	r4, #16
 23fb912:	2800      	cmp	r0, #0
 23fb914:	d0e4      	beq.n	23fb8e0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23fb916:	e7ea      	b.n	23fb8ee <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23fb918:	2400      	movs	r4, #0
 23fb91a:	e7e9      	b.n	23fb8f0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23fb91c:	2401      	movs	r4, #1
 23fb91e:	e7ed      	b.n	23fb8fc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023fb920 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
 23fb922:	2300      	movs	r3, #0
 23fb924:	e9c0 3300 	strd	r3, r3, [r0]
 23fb928:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb92a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb92c:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb92e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb930:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb932:	dd40      	ble.n	23fb9b6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
    return ::malloc(size);
 23fb934:	00f8      	lsls	r0, r7, #3
 23fb936:	f7fd fc55 	bl	23f91e4 <malloc>
            if (!d) {
 23fb93a:	4604      	mov	r4, r0
 23fb93c:	b3d8      	cbz	r0, 23fb9b6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
            move(d, data_, data_ + size_);
 23fb93e:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
 23fb942:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fb944:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
 23fb948:	d910      	bls.n	23fb96c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
 23fb94a:	429c      	cmp	r4, r3
 23fb94c:	d20f      	bcs.n	23fb96e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
 23fb94e:	3b08      	subs	r3, #8
            dest += end - p - 1;
 23fb950:	1a1a      	subs	r2, r3, r0
 23fb952:	f1a0 0c08 	sub.w	ip, r0, #8
 23fb956:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
 23fb958:	459c      	cmp	ip, r3
 23fb95a:	d018      	beq.n	23fb98e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
 23fb95c:	b11a      	cbz	r2, 23fb966 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
 23fb95e:	6819      	ldr	r1, [r3, #0]
 23fb960:	6011      	str	r1, [r2, #0]
 23fb962:	6859      	ldr	r1, [r3, #4]
 23fb964:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
 23fb966:	3b08      	subs	r3, #8
 23fb968:	3a08      	subs	r2, #8
 23fb96a:	e7f5      	b.n	23fb958 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
 23fb96c:	d00f      	beq.n	23fb98e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
 23fb96e:	4601      	mov	r1, r0
 23fb970:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
 23fb972:	428b      	cmp	r3, r1
 23fb974:	d00b      	beq.n	23fb98e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
 23fb976:	b13a      	cbz	r2, 23fb988 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
 23fb978:	f8d1 c000 	ldr.w	ip, [r1]
 23fb97c:	f8c2 c000 	str.w	ip, [r2]
 23fb980:	f8d1 c004 	ldr.w	ip, [r1, #4]
 23fb984:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
 23fb988:	3108      	adds	r1, #8
 23fb98a:	3208      	adds	r2, #8
 23fb98c:	e7f1      	b.n	23fb972 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
 23fb98e:	f7fd fc37 	bl	23f9200 <free>
        data_ = d;
 23fb992:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fb994:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb996:	e9d6 3100 	ldrd	r3, r1, [r6]
 23fb99a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23fb99e:	4298      	cmp	r0, r3
 23fb9a0:	d008      	beq.n	23fb9b4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x94>
 23fb9a2:	681a      	ldr	r2, [r3, #0]
 23fb9a4:	3408      	adds	r4, #8
 23fb9a6:	f844 2c08 	str.w	r2, [r4, #-8]
 23fb9aa:	685a      	ldr	r2, [r3, #4]
 23fb9ac:	3308      	adds	r3, #8
 23fb9ae:	f844 2c04 	str.w	r2, [r4, #-4]
 23fb9b2:	e7f4      	b.n	23fb99e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
 23fb9b4:	6069      	str	r1, [r5, #4]
}
 23fb9b6:	4628      	mov	r0, r5
 23fb9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb9ba <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb9ba:	b570      	push	{r4, r5, r6, lr}
 23fb9bc:	4604      	mov	r4, r0
        capacity_(0) {
 23fb9be:	2000      	movs	r0, #0
 23fb9c0:	e9c4 0000 	strd	r0, r0, [r4]
 23fb9c4:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb9c6:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb9c8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb9ca:	4286      	cmp	r6, r0
 23fb9cc:	dd12      	ble.n	23fb9f4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23fb9ce:	0071      	lsls	r1, r6, #1
 23fb9d0:	f7fd fc24 	bl	23f921c <realloc>
            if (!d) {
 23fb9d4:	b170      	cbz	r0, 23fb9f4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23fb9d6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb9d8:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb9da:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fb9de:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23fb9e2:	429a      	cmp	r2, r3
 23fb9e4:	d004      	beq.n	23fb9f0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23fb9e6:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fb9ea:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23fb9ee:	e7f8      	b.n	23fb9e2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23fb9f0:	686b      	ldr	r3, [r5, #4]
 23fb9f2:	6063      	str	r3, [r4, #4]
}
 23fb9f4:	4620      	mov	r0, r4
 23fb9f6:	bd70      	pop	{r4, r5, r6, pc}

023fb9f8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23fb9f8:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fb9fa:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fb9fc:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fb9fe:	b923      	cbnz	r3, 23fba0a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                LOG_DEBUG(TRACE, "Custom data mismatched.");
                return false;
            }
            if (srLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(srLen);
                SCOPE_GUARD({
 23fba00:	6803      	ldr	r3, [r0, #0]
 23fba02:	6818      	ldr	r0, [r3, #0]
 23fba04:	b108      	cbz	r0, 23fba0a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23fba06:	f7fd fbfb 	bl	23f9200 <free>
            func_();
        }
    }
 23fba0a:	4620      	mov	r0, r4
 23fba0c:	bd10      	pop	{r4, pc}

023fba0e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23fba0e:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fba10:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fba12:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fba14:	b923      	cbnz	r3, 23fba20 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                    return true;
                }
            }
            if (advLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(advLen);
                SCOPE_GUARD({
 23fba16:	6803      	ldr	r3, [r0, #0]
 23fba18:	6818      	ldr	r0, [r3, #0]
 23fba1a:	b108      	cbz	r0, 23fba20 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23fba1c:	f7fd fbf0 	bl	23f9200 <free>
    }
 23fba20:	4620      	mov	r0, r4
 23fba22:	bd10      	pop	{r4, pc}

023fba24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23fba24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23fba28:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23fba2c:	460f      	mov	r7, r1
 23fba2e:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23fba30:	f1b8 0f00 	cmp.w	r8, #0
 23fba34:	d072      	beq.n	23fbb1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23fba36:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23fba38:	2d00      	cmp	r5, #0
 23fba3a:	d06f      	beq.n	23fbb1c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23fba3c:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fba40:	231f      	movs	r3, #31
 23fba42:	2200      	movs	r2, #0
 23fba44:	21ff      	movs	r1, #255	; 0xff
 23fba46:	4648      	mov	r0, r9
 23fba48:	f7ff fbc0 	bl	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fba4c:	23ff      	movs	r3, #255	; 0xff
        return advertisingData_;
 23fba4e:	3708      	adds	r7, #8
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fba50:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fba52:	2200      	movs	r2, #0
 23fba54:	4619      	mov	r1, r3
 23fba56:	4638      	mov	r0, r7
 23fba58:	f7ff fbb8 	bl	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fba5c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fba5e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fba60:	d006      	beq.n	23fba70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23fba62:	42ae      	cmp	r6, r5
 23fba64:	d030      	beq.n	23fbac8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23fba66:	2400      	movs	r4, #0
            }
            LOG_DEBUG(TRACE, "Custom data mismatched.");
            return false;
        }
        return true;
    }
 23fba68:	4620      	mov	r0, r4
 23fba6a:	b00f      	add	sp, #60	; 0x3c
 23fba6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23fba70:	4620      	mov	r0, r4
 23fba72:	f7fd fbb7 	bl	23f91e4 <malloc>
            dismissed_(false) {
 23fba76:	ab03      	add	r3, sp, #12
 23fba78:	9304      	str	r3, [sp, #16]
 23fba7a:	2300      	movs	r3, #0
 23fba7c:	4604      	mov	r4, r0
 23fba7e:	9003      	str	r0, [sp, #12]
 23fba80:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23fba84:	b970      	cbnz	r0, 23fbaa4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23fba86:	2320      	movs	r3, #32
 23fba88:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fba8c:	4b24      	ldr	r3, [pc, #144]	; (23fbb20 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fba8e:	4925      	ldr	r1, [pc, #148]	; (23fbb24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fba90:	9300      	str	r3, [sp, #0]
 23fba92:	aa06      	add	r2, sp, #24
 23fba94:	4603      	mov	r3, r0
 23fba96:	2032      	movs	r0, #50	; 0x32
 23fba98:	f7fd fa70 	bl	23f8f7c <log_message>
                    return false;
 23fba9c:	a804      	add	r0, sp, #16
 23fba9e:	f7ff ffab 	bl	23fb9f8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23fbaa2:	e7e1      	b.n	23fba68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23fbaa4:	4602      	mov	r2, r0
 23fbaa6:	21ff      	movs	r1, #255	; 0xff
 23fbaa8:	462b      	mov	r3, r5
 23fbaaa:	4648      	mov	r0, r9
 23fbaac:	f7ff fb8e 	bl	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23fbab0:	462a      	mov	r2, r5
 23fbab2:	4641      	mov	r1, r8
 23fbab4:	9803      	ldr	r0, [sp, #12]
 23fbab6:	f001 ff2c 	bl	23fd912 <memcmp>
 23fbaba:	b118      	cbz	r0, 23fbac4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23fbabc:	a804      	add	r0, sp, #16
 23fbabe:	f7ff ff9b 	bl	23fb9f8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23fbac2:	e7ce      	b.n	23fba62 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23fbac4:	2401      	movs	r4, #1
 23fbac6:	e7e9      	b.n	23fba9c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23fbac8:	4628      	mov	r0, r5
 23fbaca:	f7fd fb8b 	bl	23f91e4 <malloc>
 23fbace:	2400      	movs	r4, #0
 23fbad0:	ab03      	add	r3, sp, #12
 23fbad2:	4606      	mov	r6, r0
 23fbad4:	9003      	str	r0, [sp, #12]
 23fbad6:	9304      	str	r3, [sp, #16]
 23fbad8:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23fbadc:	b978      	cbnz	r0, 23fbafe <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23fbade:	2320      	movs	r3, #32
 23fbae0:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fbae4:	4b0e      	ldr	r3, [pc, #56]	; (23fbb20 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fbae6:	490f      	ldr	r1, [pc, #60]	; (23fbb24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fbae8:	9300      	str	r3, [sp, #0]
 23fbaea:	aa06      	add	r2, sp, #24
 23fbaec:	4603      	mov	r3, r0
 23fbaee:	2032      	movs	r0, #50	; 0x32
 23fbaf0:	f7fd fa44 	bl	23f8f7c <log_message>
                    return false;
 23fbaf4:	4634      	mov	r4, r6
 23fbaf6:	a804      	add	r0, sp, #16
 23fbaf8:	f7ff ff89 	bl	23fba0e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23fbafc:	e7b4      	b.n	23fba68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23fbafe:	4602      	mov	r2, r0
 23fbb00:	21ff      	movs	r1, #255	; 0xff
 23fbb02:	462b      	mov	r3, r5
 23fbb04:	4638      	mov	r0, r7
 23fbb06:	f7ff fb61 	bl	23fb1cc <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23fbb0a:	462a      	mov	r2, r5
 23fbb0c:	4641      	mov	r1, r8
 23fbb0e:	9803      	ldr	r0, [sp, #12]
 23fbb10:	f001 feff 	bl	23fd912 <memcmp>
 23fbb14:	2800      	cmp	r0, #0
 23fbb16:	d1ee      	bne.n	23fbaf6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23fbb18:	2401      	movs	r4, #1
 23fbb1a:	e7ec      	b.n	23fbaf6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23fbb1c:	2401      	movs	r4, #1
 23fbb1e:	e7a3      	b.n	23fba68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23fbb20:	023ffaa8 	.word	0x023ffaa8
 23fbb24:	023ffa27 	.word	0x023ffa27

023fbb28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fbb28:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fbb2a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fbb2c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fbb2e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fbb30:	dd03      	ble.n	23fbb3a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fbb32:	f7fd fb73 	bl	23f921c <realloc>
            if (!d) {
 23fbb36:	b918      	cbnz	r0, 23fbb40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fbb38:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fbb3a:	f7fd fb61 	bl	23f9200 <free>
        T* d = nullptr;
 23fbb3e:	2000      	movs	r0, #0
        data_ = d;
 23fbb40:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fbb42:	60a5      	str	r5, [r4, #8]
        return true;
 23fbb44:	2001      	movs	r0, #1
 23fbb46:	e7f7      	b.n	23fbb38 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fbb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fbb48:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fbb4a:	6883      	ldr	r3, [r0, #8]
 23fbb4c:	428b      	cmp	r3, r1
 23fbb4e:	da02      	bge.n	23fbb56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fbb50:	f7ff ffea 	bl	23fbb28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fbb54:	bd08      	pop	{r3, pc}
    return true;
 23fbb56:	2001      	movs	r0, #1
 23fbb58:	e7fc      	b.n	23fbb54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbb5a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fbb5c:	2300      	movs	r3, #0
 23fbb5e:	e9c0 3300 	strd	r3, r3, [r0]
 23fbb62:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbb64:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbb66:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbb68:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbb6a:	4299      	cmp	r1, r3
 23fbb6c:	dd10      	ble.n	23fbb90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fbb6e:	f7ff ffdb 	bl	23fbb28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fbb72:	b168      	cbz	r0, 23fbb90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fbb74:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fbb78:	6822      	ldr	r2, [r4, #0]
 23fbb7a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fbb7c:	4299      	cmp	r1, r3
 23fbb7e:	d005      	beq.n	23fbb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fbb80:	b10a      	cbz	r2, 23fbb86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fbb82:	7818      	ldrb	r0, [r3, #0]
 23fbb84:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fbb86:	3301      	adds	r3, #1
 23fbb88:	3201      	adds	r2, #1
 23fbb8a:	e7f7      	b.n	23fbb7c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fbb8c:	686b      	ldr	r3, [r5, #4]
 23fbb8e:	6063      	str	r3, [r4, #4]
}
 23fbb90:	4620      	mov	r0, r4
 23fbb92:	bd38      	pop	{r3, r4, r5, pc}

023fbb94 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23fbb94:	b538      	push	{r3, r4, r5, lr}
 23fbb96:	4604      	mov	r4, r0
 23fbb98:	460d      	mov	r5, r1
    address_ = addr.address_;
 23fbb9a:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23fbb9c:	3008      	adds	r0, #8
 23fbb9e:	f840 3c08 	str.w	r3, [r0, #-8]
 23fbba2:	684b      	ldr	r3, [r1, #4]
 23fbba4:	3108      	adds	r1, #8
 23fbba6:	f840 3c04 	str.w	r3, [r0, #-4]
 23fbbaa:	f7ff ffd6 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fbbae:	f105 0114 	add.w	r1, r5, #20
 23fbbb2:	f104 0014 	add.w	r0, r4, #20
 23fbbb6:	f7ff ffd0 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fbbba:	f895 3020 	ldrb.w	r3, [r5, #32]
 23fbbbe:	4620      	mov	r0, r4
 23fbbc0:	f884 3020 	strb.w	r3, [r4, #32]
 23fbbc4:	bd38      	pop	{r3, r4, r5, pc}

023fbbc6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23fbbc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fbbc8:	4604      	mov	r4, r0
 23fbbca:	a801      	add	r0, sp, #4
 23fbbcc:	f7ff ffc5 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fbbd0:	9b01      	ldr	r3, [sp, #4]
 23fbbd2:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbbd4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fbbd6:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbbd8:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fbbda:	6062      	str	r2, [r4, #4]
 23fbbdc:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbbde:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbbe0:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fbbe2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbbe4:	9001      	str	r0, [sp, #4]
 23fbbe6:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fbbe8:	f7fd fb0a 	bl	23f9200 <free>
 23fbbec:	b004      	add	sp, #16
 23fbbee:	bd10      	pop	{r4, pc}

023fbbf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fbbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbbf4:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fbbf6:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fbbf8:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fbbfa:	4419      	add	r1, r3
 23fbbfc:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fbbfe:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fbc00:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fbc02:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fbc04:	dc12      	bgt.n	23fbc2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fbc06:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fbc08:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fbc0a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fbc0c:	4631      	mov	r1, r6
 23fbc0e:	1bd2      	subs	r2, r2, r7
 23fbc10:	1970      	adds	r0, r6, r5
 23fbc12:	f001 fe9b 	bl	23fd94c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fbc16:	462a      	mov	r2, r5
 23fbc18:	4641      	mov	r1, r8
 23fbc1a:	4630      	mov	r0, r6
 23fbc1c:	f001 fe89 	bl	23fd932 <memcpy>
    return true;
 23fbc20:	2001      	movs	r0, #1
    size_ += n;
 23fbc22:	6863      	ldr	r3, [r4, #4]
 23fbc24:	442b      	add	r3, r5
 23fbc26:	6063      	str	r3, [r4, #4]
}
 23fbc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fbc2c:	f7ff ff7c 	bl	23fbb28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fbc30:	2800      	cmp	r0, #0
 23fbc32:	d1e8      	bne.n	23fbc06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fbc34:	e7f8      	b.n	23fbc28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fbc36 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fbc36:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23fbc38:	460a      	mov	r2, r1
 23fbc3a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fbc3c:	b510      	push	{r4, lr}
 23fbc3e:	4604      	mov	r4, r0
    size_ = 0;
 23fbc40:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23fbc42:	b102      	cbz	r2, 23fbc46 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23fbc44:	b90b      	cbnz	r3, 23fbc4a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23fbc46:	2000      	movs	r0, #0
}
 23fbc48:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23fbc4a:	2bff      	cmp	r3, #255	; 0xff
 23fbc4c:	bf28      	it	cs
 23fbc4e:	23ff      	movcs	r3, #255	; 0xff
 23fbc50:	f7ff ffce 	bl	23fbbf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23fbc54:	2800      	cmp	r0, #0
 23fbc56:	d0f7      	beq.n	23fbc48 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23fbc58:	6860      	ldr	r0, [r4, #4]
 23fbc5a:	e7f5      	b.n	23fbc48 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023fbc5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fbc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbc5e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbc60:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fbc64:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fbc66:	4604      	mov	r4, r0
 23fbc68:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbc6a:	da0b      	bge.n	23fbc84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fbc6c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fbc6e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fbc70:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fbc72:	1b52      	subs	r2, r2, r5
 23fbc74:	1c48      	adds	r0, r1, #1
 23fbc76:	f001 fe69 	bl	23fd94c <memmove>
    new(p) T(std::move(value));
 23fbc7a:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fbc7c:	6863      	ldr	r3, [r4, #4]
 23fbc7e:	3301      	adds	r3, #1
 23fbc80:	6063      	str	r3, [r4, #4]
}
 23fbc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbc84:	3101      	adds	r1, #1
 23fbc86:	f7ff ff4f 	bl	23fbb28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fbc8a:	2800      	cmp	r0, #0
 23fbc8c:	d1ee      	bne.n	23fbc6c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fbc8e:	e7f8      	b.n	23fbc82 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fbc90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fbc90:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fbc92:	6841      	ldr	r1, [r0, #4]
 23fbc94:	f7ff bfe2 	b.w	23fbc5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fbc98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fbc98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fbc9c:	4604      	mov	r4, r0
 23fbc9e:	461d      	mov	r5, r3
 23fbca0:	460f      	mov	r7, r1
 23fbca2:	ab01      	add	r3, sp, #4
 23fbca4:	4690      	mov	r8, r2
 23fbca6:	460a      	mov	r2, r1
 23fbca8:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbcac:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fbcb0:	f7ff f872 	bl	23fad98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fbcb4:	1cae      	adds	r6, r5, #2
 23fbcb6:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fbcb8:	6863      	ldr	r3, [r4, #4]
 23fbcba:	f1b9 0f00 	cmp.w	r9, #0
 23fbcbe:	d126      	bne.n	23fbd0e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fbcc0:	b328      	cbz	r0, 23fbd0e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fbcc2:	4433      	add	r3, r6
 23fbcc4:	1a1b      	subs	r3, r3, r0
 23fbcc6:	2bff      	cmp	r3, #255	; 0xff
 23fbcc8:	d809      	bhi.n	23fbcde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fbcca:	4620      	mov	r0, r4
 23fbccc:	9901      	ldr	r1, [sp, #4]
 23fbcce:	f7ff fce2 	bl	23fb696 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fbcd2:	6861      	ldr	r1, [r4, #4]
 23fbcd4:	4620      	mov	r0, r4
 23fbcd6:	4431      	add	r1, r6
 23fbcd8:	f7ff ff36 	bl	23fbb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fbcdc:	b918      	cbnz	r0, 23fbce6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fbcde:	6860      	ldr	r0, [r4, #4]
}
 23fbce0:	b003      	add	sp, #12
 23fbce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fbce6:	1c6a      	adds	r2, r5, #1
 23fbce8:	4620      	mov	r0, r4
 23fbcea:	9901      	ldr	r1, [sp, #4]
 23fbcec:	b2d2      	uxtb	r2, r2
 23fbcee:	f7ff ffb5 	bl	23fbc5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fbcf2:	9901      	ldr	r1, [sp, #4]
 23fbcf4:	463a      	mov	r2, r7
 23fbcf6:	3101      	adds	r1, #1
 23fbcf8:	4620      	mov	r0, r4
 23fbcfa:	f7ff ffaf 	bl	23fbc5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fbcfe:	462b      	mov	r3, r5
 23fbd00:	4642      	mov	r2, r8
 23fbd02:	9901      	ldr	r1, [sp, #4]
 23fbd04:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fbd06:	4620      	mov	r0, r4
 23fbd08:	f7ff ff72 	bl	23fbbf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fbd0c:	e7e7      	b.n	23fbcde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fbd0e:	18f1      	adds	r1, r6, r3
 23fbd10:	29ff      	cmp	r1, #255	; 0xff
 23fbd12:	d8e4      	bhi.n	23fbcde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fbd14:	4620      	mov	r0, r4
 23fbd16:	f7ff ff17 	bl	23fbb48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fbd1a:	2800      	cmp	r0, #0
 23fbd1c:	d0df      	beq.n	23fbcde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fbd1e:	1c69      	adds	r1, r5, #1
 23fbd20:	4620      	mov	r0, r4
 23fbd22:	b2c9      	uxtb	r1, r1
 23fbd24:	f7ff ffb4 	bl	23fbc90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fbd28:	4639      	mov	r1, r7
 23fbd2a:	4620      	mov	r0, r4
 23fbd2c:	f7ff ffb0 	bl	23fbc90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fbd30:	462b      	mov	r3, r5
 23fbd32:	4642      	mov	r2, r8
 23fbd34:	6861      	ldr	r1, [r4, #4]
 23fbd36:	e7e6      	b.n	23fbd06 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fbd38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fbd38:	b430      	push	{r4, r5}
 23fbd3a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fbd3e:	b11a      	cbz	r2, 23fbd48 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fbd40:	9502      	str	r5, [sp, #8]
}
 23fbd42:	bc30      	pop	{r4, r5}
 23fbd44:	f7ff bfa8 	b.w	23fbc98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fbd48:	6840      	ldr	r0, [r0, #4]
}
 23fbd4a:	bc30      	pop	{r4, r5}
 23fbd4c:	4770      	bx	lr

023fbd4e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fbd4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fbd50:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fbd52:	2206      	movs	r2, #6
 23fbd54:	e9c0 3300 	strd	r3, r3, [r0]
 23fbd58:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fbd5a:	9300      	str	r3, [sp, #0]
 23fbd5c:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fbd5e:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fbd60:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fbd64:	4619      	mov	r1, r3
 23fbd66:	f10d 020f 	add.w	r2, sp, #15
 23fbd6a:	f7ff ffe5 	bl	23fbd38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fbd6e:	4620      	mov	r0, r4
 23fbd70:	b004      	add	sp, #16
 23fbd72:	bd10      	pop	{r4, pc}

023fbd74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fbd74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd78:	4604      	mov	r4, r0
 23fbd7a:	460d      	mov	r5, r1
 23fbd7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbd7e:	d914      	bls.n	23fbdaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fbd80:	4290      	cmp	r0, r2
 23fbd82:	d213      	bcs.n	23fbdac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fbd84:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fbd88:	1a75      	subs	r5, r6, r1
 23fbd8a:	f1a1 0708 	sub.w	r7, r1, #8
 23fbd8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbd90:	42b7      	cmp	r7, r6
 23fbd92:	d018      	beq.n	23fbdc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fbd94:	b11c      	cbz	r4, 23fbd9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fbd96:	4631      	mov	r1, r6
 23fbd98:	4620      	mov	r0, r4
 23fbd9a:	f7ff fcaf 	bl	23fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fbd9e:	1d30      	adds	r0, r6, #4
 23fbda0:	f7fd fdcc 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fbda4:	3e08      	subs	r6, #8
 23fbda6:	3c08      	subs	r4, #8
 23fbda8:	e7f2      	b.n	23fbd90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fbdaa:	d00c      	beq.n	23fbdc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fbdac:	42b5      	cmp	r5, r6
 23fbdae:	d00a      	beq.n	23fbdc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fbdb0:	b11c      	cbz	r4, 23fbdba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fbdb2:	4629      	mov	r1, r5
 23fbdb4:	4620      	mov	r0, r4
 23fbdb6:	f7ff fca1 	bl	23fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fbdba:	1d28      	adds	r0, r5, #4
 23fbdbc:	f7fd fdbe 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fbdc0:	3508      	adds	r5, #8
 23fbdc2:	3408      	adds	r4, #8
 23fbdc4:	e7f2      	b.n	23fbdac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fbdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbdc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fbdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fbdca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fbdcc:	6846      	ldr	r6, [r0, #4]
 23fbdce:	4668      	mov	r0, sp
 23fbdd0:	f7ff fc94 	bl	23fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbdd4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fbdd8:	429f      	cmp	r7, r3
 23fbdda:	db12      	blt.n	23fbe02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fbddc:	3701      	adds	r7, #1
        if (n > 0) {
 23fbdde:	2f00      	cmp	r7, #0
 23fbde0:	dd29      	ble.n	23fbe36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fbde2:	00f8      	lsls	r0, r7, #3
 23fbde4:	f7fd f9fe 	bl	23f91e4 <malloc>
            if (!d) {
 23fbde8:	4605      	mov	r5, r0
 23fbdea:	b1f0      	cbz	r0, 23fbe2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fbdec:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fbdf0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fbdf4:	f7ff ffbe 	bl	23fbd74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fbdf8:	6820      	ldr	r0, [r4, #0]
 23fbdfa:	f7fd fa01 	bl	23f9200 <free>
        data_ = d;
 23fbdfe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fbe00:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fbe02:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fbe04:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fbe06:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fbe0a:	4631      	mov	r1, r6
 23fbe0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fbe10:	f106 0008 	add.w	r0, r6, #8
 23fbe14:	f7ff ffae 	bl	23fbd74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fbe18:	b11e      	cbz	r6, 23fbe22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fbe1a:	4669      	mov	r1, sp
 23fbe1c:	4630      	mov	r0, r6
 23fbe1e:	f7ff fc6d 	bl	23fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fbe22:	2501      	movs	r5, #1
    ++size_;
 23fbe24:	6863      	ldr	r3, [r4, #4]
 23fbe26:	3301      	adds	r3, #1
 23fbe28:	6063      	str	r3, [r4, #4]
 23fbe2a:	a801      	add	r0, sp, #4
 23fbe2c:	f7fd fd86 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fbe30:	4628      	mov	r0, r5
 23fbe32:	b003      	add	sp, #12
 23fbe34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fbe36:	2500      	movs	r5, #0
 23fbe38:	e7de      	b.n	23fbdf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fbe3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fbe3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbe3c:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fbe3e:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fbe42:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fbe44:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fbe48:	42a6      	cmp	r6, r4
 23fbe4a:	d005      	beq.n	23fbe58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fbe4c:	4639      	mov	r1, r7
 23fbe4e:	4620      	mov	r0, r4
 23fbe50:	f7ff fb29 	bl	23fb4a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fbe54:	b108      	cbz	r0, 23fbe5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fbe56:	b914      	cbnz	r4, 23fbe5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fbe58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fbe5a:	3408      	adds	r4, #8
 23fbe5c:	e7f4      	b.n	23fbe48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fbe5e:	1d20      	adds	r0, r4, #4
 23fbe60:	f7fd fd6c 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fbe64:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fbe68:	4620      	mov	r0, r4
 23fbe6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fbe6e:	f104 0108 	add.w	r1, r4, #8
 23fbe72:	f7ff ff7f 	bl	23fbd74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fbe76:	686b      	ldr	r3, [r5, #4]
 23fbe78:	3b01      	subs	r3, #1
 23fbe7a:	606b      	str	r3, [r5, #4]
    return true;
 23fbe7c:	e7ec      	b.n	23fbe58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fbe80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fbe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbe84:	4605      	mov	r5, r0
 23fbe86:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
 23fbe88:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fbe8a:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fbe8c:	f7ff f826 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fbe90:	682e      	ldr	r6, [r5, #0]
 23fbe92:	1ef3      	subs	r3, r6, #3
 23fbe94:	2b0d      	cmp	r3, #13
 23fbe96:	d83c      	bhi.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
 23fbe98:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fbe9c:	0053000e 	.word	0x0053000e
 23fbea0:	00d1003b 	.word	0x00d1003b
 23fbea4:	003b003b 	.word	0x003b003b
 23fbea8:	003b003b 	.word	0x003b003b
 23fbeac:	009b003b 	.word	0x009b003b
 23fbeb0:	009b009b 	.word	0x009b009b
 23fbeb4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
 23fbeb8:	a804      	add	r0, sp, #16
 23fbeba:	f7ff fa99 	bl	23fb3f0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
 23fbebe:	89aa      	ldrh	r2, [r5, #12]
 23fbec0:	9b04      	ldr	r3, [sp, #16]
 23fbec2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
 23fbec4:	6869      	ldr	r1, [r5, #4]
 23fbec6:	9804      	ldr	r0, [sp, #16]
 23fbec8:	3108      	adds	r1, #8
 23fbeca:	3002      	adds	r0, #2
 23fbecc:	f7ff f868 	bl	23fafa0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fbed0:	a904      	add	r1, sp, #16
 23fbed2:	a806      	add	r0, sp, #24
 23fbed4:	f7ff fc12 	bl	23fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
 23fbed8:	a906      	add	r1, sp, #24
 23fbeda:	f104 0018 	add.w	r0, r4, #24
 23fbede:	f7ff ff73 	bl	23fbdc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fbee2:	4605      	mov	r5, r0
 23fbee4:	a807      	add	r0, sp, #28
 23fbee6:	f7fd fd29 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbeea:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
 23fbeec:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
 23fbeee:	b9b5      	cbnz	r5, 23fbf1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
 23fbef0:	4b5d      	ldr	r3, [pc, #372]	; (23fc068 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
 23fbef2:	2032      	movs	r0, #50	; 0x32
 23fbef4:	495d      	ldr	r1, [pc, #372]	; (23fc06c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
 23fbef6:	9300      	str	r3, [sp, #0]
 23fbef8:	aa06      	add	r2, sp, #24
 23fbefa:	462b      	mov	r3, r5
 23fbefc:	9507      	str	r5, [sp, #28]
 23fbefe:	f7fd f83d 	bl	23f8f7c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fbf02:	9b04      	ldr	r3, [sp, #16]
 23fbf04:	4629      	mov	r1, r5
 23fbf06:	8818      	ldrh	r0, [r3, #0]
 23fbf08:	f7fc ff74 	bl	23f8df4 <hal_ble_gap_disconnect>
 23fbf0c:	a805      	add	r0, sp, #20
 23fbf0e:	f7fd fd15 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fbf12:	a803      	add	r0, sp, #12
 23fbf14:	f7fe fff0 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fbf18:	b00e      	add	sp, #56	; 0x38
 23fbf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
 23fbf1e:	2300      	movs	r3, #0
 23fbf20:	4a53      	ldr	r2, [pc, #332]	; (23fc070 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
 23fbf22:	2001      	movs	r0, #1
 23fbf24:	9200      	str	r2, [sp, #0]
 23fbf26:	4951      	ldr	r1, [pc, #324]	; (23fc06c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
 23fbf28:	aa06      	add	r2, sp, #24
 23fbf2a:	9307      	str	r3, [sp, #28]
 23fbf2c:	f7fd f826 	bl	23f8f7c <log_message>
                if (impl->connectedCallback_) {
 23fbf30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fbf32:	2b00      	cmp	r3, #0
 23fbf34:	d0ea      	beq.n	23fbf0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
 23fbf36:	a904      	add	r1, sp, #16
 23fbf38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fbf3c:	f7ff fc50 	bl	23fb7e0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fbf40:	e7e4      	b.n	23fbf0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fbf42:	4620      	mov	r0, r4
 23fbf44:	89a9      	ldrh	r1, [r5, #12]
 23fbf46:	f7ff f9d2 	bl	23fb2ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fbf4a:	4606      	mov	r6, r0
 23fbf4c:	2800      	cmp	r0, #0
 23fbf4e:	d0e0      	beq.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fbf50:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fbf54:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
 23fbf56:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fbf5a:	8029      	strh	r1, [r5, #0]
 23fbf5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fbf60:	429a      	cmp	r2, r3
 23fbf62:	d003      	beq.n	23fbf6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
 23fbf64:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fbf68:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fbf6a:	e7f9      	b.n	23fbf60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
 23fbf6c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fbf70:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fbf74:	45b8      	cmp	r8, r7
 23fbf76:	d004      	beq.n	23fbf82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
 23fbf78:	1d38      	adds	r0, r7, #4
 23fbf7a:	f7fd fcdf 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbf7e:	3708      	adds	r7, #8
 23fbf80:	e7f8      	b.n	23fbf74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
 23fbf82:	2300      	movs	r3, #0
 23fbf84:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fbf86:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fbf8a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fbf8e:	45b8      	cmp	r8, r7
 23fbf90:	d004      	beq.n	23fbf9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
 23fbf92:	1d38      	adds	r0, r7, #4
 23fbf94:	f7fd fcd2 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fbf98:	3708      	adds	r7, #8
 23fbf9a:	e7f8      	b.n	23fbf8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
 23fbf9c:	2300      	movs	r3, #0
 23fbf9e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fbfa0:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
 23fbfa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fbfa4:	b123      	cbz	r3, 23fbfb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
 23fbfa6:	4631      	mov	r1, r6
 23fbfa8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fbfac:	f7ff fc18 	bl	23fb7e0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
 23fbfb0:	2300      	movs	r3, #0
 23fbfb2:	2220      	movs	r2, #32
 23fbfb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fbfb8:	4a2e      	ldr	r2, [pc, #184]	; (23fc074 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
 23fbfba:	2001      	movs	r0, #1
 23fbfbc:	9200      	str	r2, [sp, #0]
 23fbfbe:	492b      	ldr	r1, [pc, #172]	; (23fc06c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
 23fbfc0:	aa06      	add	r2, sp, #24
 23fbfc2:	f7fc ffdb 	bl	23f8f7c <log_message>
                    impl->peers_.removeOne(*peer);
 23fbfc6:	4631      	mov	r1, r6
 23fbfc8:	f104 0018 	add.w	r0, r4, #24
 23fbfcc:	f7ff ff35 	bl	23fbe3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
 23fbfd0:	e79f      	b.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fbfd2:	4620      	mov	r0, r4
 23fbfd4:	89a9      	ldrh	r1, [r5, #12]
 23fbfd6:	f7ff f98a 	bl	23fb2ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fbfda:	2800      	cmp	r0, #0
 23fbfdc:	d099      	beq.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
 23fbfde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fbfe0:	2b00      	cmp	r3, #0
 23fbfe2:	d096      	beq.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
 23fbfe4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fbfe6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fbfe8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fbfec:	d001      	beq.n	23fbff2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
 23fbfee:	2e10      	cmp	r6, #16
 23fbff0:	d117      	bne.n	23fc022 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
 23fbff2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fbff4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fbff6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fbff8:	2506      	movs	r5, #6
                        };
 23fbffa:	f88d 3015 	strb.w	r3, [sp, #21]
 23fbffe:	9104      	str	r1, [sp, #16]
 23fc000:	ab09      	add	r3, sp, #36	; 0x24
 23fc002:	f88d 2014 	strb.w	r2, [sp, #20]
 23fc006:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fc008:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fc00c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fc010:	9508      	str	r5, [sp, #32]
 23fc012:	e883 0003 	stmia.w	r3, {r0, r1}
 23fc016:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23fc018:	a906      	add	r1, sp, #24
 23fc01a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fc01e:	4798      	blx	r3
 23fc020:	e777      	b.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fc022:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fc024:	bf01      	itttt	eq
 23fc026:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fc028:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fc02a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fc02e:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fc030:	bf1d      	ittte	ne
 23fc032:	461a      	movne	r2, r3
 23fc034:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fc036:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fc038:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fc03c:	e7dd      	b.n	23fbffa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fc03e:	89a9      	ldrh	r1, [r5, #12]
 23fc040:	4620      	mov	r0, r4
 23fc042:	f7ff f954 	bl	23fb2ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fc046:	4601      	mov	r1, r0
 23fc048:	2800      	cmp	r0, #0
 23fc04a:	f43f af62 	beq.w	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
 23fc04e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fc050:	2b00      	cmp	r3, #0
 23fc052:	f43f af5e 	beq.w	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fc056:	686b      	ldr	r3, [r5, #4]
 23fc058:	aa06      	add	r2, sp, #24
 23fc05a:	9306      	str	r3, [sp, #24]
 23fc05c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fc060:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fc062:	4798      	blx	r3
 23fc064:	e755      	b.n	23fbf12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
 23fc066:	bf00      	nop
 23fc068:	023ffac3 	.word	0x023ffac3
 23fc06c:	023ffa27 	.word	0x023ffa27
 23fc070:	023ffae9 	.word	0x023ffae9
 23fc074:	023ffb06 	.word	0x023ffb06

023fc078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc078:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fc07a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fc07c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fc07e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fc080:	dd05      	ble.n	23fc08e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23fc082:	2114      	movs	r1, #20
 23fc084:	4369      	muls	r1, r5
 23fc086:	f7fd f8c9 	bl	23f921c <realloc>
            if (!d) {
 23fc08a:	b918      	cbnz	r0, 23fc094 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23fc08c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fc08e:	f7fd f8b7 	bl	23f9200 <free>
        T* d = nullptr;
 23fc092:	2000      	movs	r0, #0
        data_ = d;
 23fc094:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fc096:	60a5      	str	r5, [r4, #8]
        return true;
 23fc098:	2001      	movs	r0, #1
 23fc09a:	e7f7      	b.n	23fc08c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023fc09c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fc0a0:	2400      	movs	r4, #0
 23fc0a2:	e9c0 4400 	strd	r4, r4, [r0]
 23fc0a6:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc0a8:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc0aa:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc0ac:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc0ae:	42a1      	cmp	r1, r4
 23fc0b0:	dd1c      	ble.n	23fc0ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23fc0b2:	f7ff ffe1 	bl	23fc078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc0b6:	b1c8      	cbz	r0, 23fc0ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc0b8:	e9d8 9300 	ldrd	r9, r3, [r8]
 23fc0bc:	f04f 0c14 	mov.w	ip, #20
 23fc0c0:	fb0c 9c03 	mla	ip, ip, r3, r9
 23fc0c4:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23fc0c8:	eb09 0504 	add.w	r5, r9, r4
 23fc0cc:	45ac      	cmp	ip, r5
 23fc0ce:	d00a      	beq.n	23fc0e6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23fc0d0:	eb1e 0604 	adds.w	r6, lr, r4
 23fc0d4:	bf1e      	ittt	ne
 23fc0d6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23fc0d8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23fc0da:	682b      	ldrne	r3, [r5, #0]
 23fc0dc:	f104 0414 	add.w	r4, r4, #20
 23fc0e0:	bf18      	it	ne
 23fc0e2:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23fc0e4:	e7f0      	b.n	23fc0c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fc0e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fc0ea:	607b      	str	r3, [r7, #4]
}
 23fc0ec:	4638      	mov	r0, r7
 23fc0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fc0f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fc0f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23fc0f6:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc0f8:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23fc0fa:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc0fe:	19e9      	adds	r1, r5, r7
 23fc100:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fc102:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc104:	dc17      	bgt.n	23fc136 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23fc106:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23fc108:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc10a:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23fc10c:	fb03 f907 	mul.w	r9, r3, r7
 23fc110:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fc112:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc114:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23fc116:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc118:	4631      	mov	r1, r6
 23fc11a:	eb06 0009 	add.w	r0, r6, r9
 23fc11e:	f001 fc15 	bl	23fd94c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fc122:	464a      	mov	r2, r9
 23fc124:	4641      	mov	r1, r8
 23fc126:	4630      	mov	r0, r6
 23fc128:	f001 fc03 	bl	23fd932 <memcpy>
    size_ += n;
 23fc12c:	6863      	ldr	r3, [r4, #4]
 23fc12e:	443b      	add	r3, r7
 23fc130:	6063      	str	r3, [r4, #4]
}
 23fc132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc136:	f7ff ff9f 	bl	23fc078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc13a:	2800      	cmp	r0, #0
 23fc13c:	d1e3      	bne.n	23fc106 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23fc13e:	e7f8      	b.n	23fc132 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023fc140 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fc140:	b082      	sub	sp, #8
 23fc142:	b570      	push	{r4, r5, r6, lr}
 23fc144:	460c      	mov	r4, r1
 23fc146:	a904      	add	r1, sp, #16
 23fc148:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc14c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fc150:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fc152:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc154:	da17      	bge.n	23fc186 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23fc156:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23fc158:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23fc15a:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23fc15e:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fc160:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc162:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23fc164:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc166:	4621      	mov	r1, r4
 23fc168:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23fc16a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc16c:	f001 fbee 	bl	23fd94c <memmove>
    new(p) T(std::move(value));
 23fc170:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fc172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc174:	6833      	ldr	r3, [r6, #0]
 23fc176:	6023      	str	r3, [r4, #0]
    ++size_;
 23fc178:	686b      	ldr	r3, [r5, #4]
 23fc17a:	3301      	adds	r3, #1
 23fc17c:	606b      	str	r3, [r5, #4]
}
 23fc17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fc182:	b002      	add	sp, #8
 23fc184:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc186:	3101      	adds	r1, #1
 23fc188:	f7ff ff76 	bl	23fc078 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc18c:	2800      	cmp	r0, #0
 23fc18e:	d1e2      	bne.n	23fc156 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23fc190:	e7f5      	b.n	23fc17e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023fc192 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fc192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fc196:	2400      	movs	r4, #0
 23fc198:	4605      	mov	r5, r0
 23fc19a:	460f      	mov	r7, r1
 23fc19c:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fc19e:	1e93      	subs	r3, r2, #2
 23fc1a0:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fc1a4:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fc1a6:	b2db      	uxtb	r3, r3
 23fc1a8:	6084      	str	r4, [r0, #8]
 23fc1aa:	9305      	str	r3, [sp, #20]
    return size_;
 23fc1ac:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fc1ae:	428c      	cmp	r4, r1
 23fc1b0:	da72      	bge.n	23fc298 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23fc1b2:	6838      	ldr	r0, [r7, #0]
 23fc1b4:	4642      	mov	r2, r8
 23fc1b6:	ab07      	add	r3, sp, #28
 23fc1b8:	1b09      	subs	r1, r1, r4
 23fc1ba:	4420      	add	r0, r4
 23fc1bc:	f7fe fdec 	bl	23fad98 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23fc1c0:	4606      	mov	r6, r0
 23fc1c2:	2800      	cmp	r0, #0
 23fc1c4:	d068      	beq.n	23fc298 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fc1c6:	9b05      	ldr	r3, [sp, #20]
 23fc1c8:	2b01      	cmp	r3, #1
 23fc1ca:	d82f      	bhi.n	23fc22c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fc1cc:	f04f 0900 	mov.w	r9, #0
 23fc1d0:	f1a0 0b02 	sub.w	fp, r0, #2
 23fc1d4:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23fc1d8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fc1dc:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fc1de:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fc1e0:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fc1e2:	d055      	beq.n	23fc290 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23fc1e4:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fc1e6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23fc1ea:	4413      	add	r3, r2
 23fc1ec:	78d9      	ldrb	r1, [r3, #3]
 23fc1ee:	789b      	ldrb	r3, [r3, #2]
 23fc1f0:	a808      	add	r0, sp, #32
 23fc1f2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23fc1f6:	f7fe ff50 	bl	23fb09a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23fc1fa:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fc1fe:	f10d 0e20 	add.w	lr, sp, #32
 23fc202:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fc206:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fc20a:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fc20e:	f109 0901 	add.w	r9, r9, #1
 23fc212:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fc216:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fc21a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fc21e:	ab0d      	add	r3, sp, #52	; 0x34
 23fc220:	4628      	mov	r0, r5
 23fc222:	cb0c      	ldmia	r3, {r2, r3}
 23fc224:	6869      	ldr	r1, [r5, #4]
 23fc226:	f7ff ff8b 	bl	23fc140 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fc22a:	e7d7      	b.n	23fc1dc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23fc22c:	f1a8 0306 	sub.w	r3, r8, #6
 23fc230:	2b01      	cmp	r3, #1
 23fc232:	d82d      	bhi.n	23fc290 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fc234:	f04f 0900 	mov.w	r9, #0
 23fc238:	f1a0 0b02 	sub.w	fp, r0, #2
 23fc23c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23fc240:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23fc244:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fc246:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fc248:	d022      	beq.n	23fc290 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fc24a:	3302      	adds	r3, #2
    return data_[i];
 23fc24c:	6839      	ldr	r1, [r7, #0]
 23fc24e:	4423      	add	r3, r4
 23fc250:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23fc254:	2201      	movs	r2, #1
 23fc256:	4419      	add	r1, r3
 23fc258:	a808      	add	r0, sp, #32
 23fc25a:	f7fe feff 	bl	23fb05c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23fc25e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fc262:	f10d 0e20 	add.w	lr, sp, #32
 23fc266:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fc26a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fc26e:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fc272:	f109 0901 	add.w	r9, r9, #1
 23fc276:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fc27a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fc27e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fc282:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23fc286:	4628      	mov	r0, r5
 23fc288:	6869      	ldr	r1, [r5, #4]
 23fc28a:	f7ff ff59 	bl	23fc140 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fc28e:	e7d9      	b.n	23fc244 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fc290:	9b07      	ldr	r3, [sp, #28]
 23fc292:	441c      	add	r4, r3
 23fc294:	4434      	add	r4, r6
 23fc296:	e789      	b.n	23fc1ac <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23fc298:	4628      	mov	r0, r5
 23fc29a:	b013      	add	sp, #76	; 0x4c
 23fc29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fc2a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23fc2a0:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23fc2a2:	b530      	push	{r4, r5, lr}
 23fc2a4:	4604      	mov	r4, r0
 23fc2a6:	460d      	mov	r5, r1
 23fc2a8:	b085      	sub	sp, #20
 23fc2aa:	e9c0 3300 	strd	r3, r3, [r0]
 23fc2ae:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fc2b0:	2202      	movs	r2, #2
 23fc2b2:	a801      	add	r0, sp, #4
 23fc2b4:	f7ff ff6d 	bl	23fc192 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fc2b8:	a901      	add	r1, sp, #4
 23fc2ba:	4620      	mov	r0, r4
 23fc2bc:	f7ff ff19 	bl	23fc0f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fc2c0:	a801      	add	r0, sp, #4
 23fc2c2:	f7ff f9b7 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fc2c6:	2202      	movs	r2, #2
 23fc2c8:	4629      	mov	r1, r5
 23fc2ca:	a801      	add	r0, sp, #4
 23fc2cc:	f7ff ff61 	bl	23fc192 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fc2d0:	a901      	add	r1, sp, #4
 23fc2d2:	4620      	mov	r0, r4
 23fc2d4:	f7ff ff0d 	bl	23fc0f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fc2d8:	a801      	add	r0, sp, #4
 23fc2da:	f7ff f9ab 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23fc2de:	2203      	movs	r2, #3
 23fc2e0:	4629      	mov	r1, r5
 23fc2e2:	a801      	add	r0, sp, #4
 23fc2e4:	f7ff ff55 	bl	23fc192 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fc2e8:	a901      	add	r1, sp, #4
 23fc2ea:	4620      	mov	r0, r4
 23fc2ec:	f7ff ff01 	bl	23fc0f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fc2f0:	a801      	add	r0, sp, #4
 23fc2f2:	f7ff f99f 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23fc2f6:	2206      	movs	r2, #6
 23fc2f8:	4629      	mov	r1, r5
 23fc2fa:	a801      	add	r0, sp, #4
 23fc2fc:	f7ff ff49 	bl	23fc192 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fc300:	a901      	add	r1, sp, #4
 23fc302:	4620      	mov	r0, r4
 23fc304:	f7ff fef5 	bl	23fc0f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fc308:	a801      	add	r0, sp, #4
 23fc30a:	f7ff f993 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23fc30e:	2207      	movs	r2, #7
 23fc310:	4629      	mov	r1, r5
 23fc312:	a801      	add	r0, sp, #4
 23fc314:	f7ff ff3d 	bl	23fc192 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fc318:	4620      	mov	r0, r4
 23fc31a:	a901      	add	r1, sp, #4
 23fc31c:	f7ff fee9 	bl	23fc0f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fc320:	a801      	add	r0, sp, #4
 23fc322:	f7ff f987 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fc326:	4620      	mov	r0, r4
 23fc328:	b005      	add	sp, #20
 23fc32a:	bd30      	pop	{r4, r5, pc}

023fc32c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23fc32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc330:	b08b      	sub	sp, #44	; 0x2c
 23fc332:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fc334:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23fc338:	a801      	add	r0, sp, #4
 23fc33a:	f7ff feaf 	bl	23fc09c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23fc33e:	9b02      	ldr	r3, [sp, #8]
 23fc340:	2b00      	cmp	r3, #0
 23fc342:	dd4a      	ble.n	23fc3da <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fc344:	f104 0114 	add.w	r1, r4, #20
 23fc348:	a804      	add	r0, sp, #16
 23fc34a:	f7ff ffa9 	bl	23fc2a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fc34e:	f104 0108 	add.w	r1, r4, #8
 23fc352:	a807      	add	r0, sp, #28
 23fc354:	f7ff ffa4 	bl	23fc2a0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23fc358:	9d05      	ldr	r5, [sp, #20]
 23fc35a:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23fc35c:	2d00      	cmp	r5, #0
 23fc35e:	dc01      	bgt.n	23fc364 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23fc360:	2e00      	cmp	r6, #0
 23fc362:	dd38      	ble.n	23fc3d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23fc364:	2314      	movs	r3, #20
    return data_;
 23fc366:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23fc368:	9f02      	ldr	r7, [sp, #8]
 23fc36a:	4692      	mov	sl, r2
    return data_;
 23fc36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23fc370:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23fc374:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23fc378:	fb03 8505 	mla	r5, r3, r5, r8
 23fc37c:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23fc380:	45ba      	cmp	sl, r7
 23fc382:	d028      	beq.n	23fc3d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
 23fc384:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23fc386:	45ab      	cmp	fp, r5
 23fc388:	d015      	beq.n	23fc3b6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23fc38a:	4659      	mov	r1, fp
 23fc38c:	4650      	mov	r0, sl
 23fc38e:	f7fe fe8e 	bl	23fb0ae <_ZNK8particle7BleUuideqERKS0_>
 23fc392:	f10b 0b14 	add.w	fp, fp, #20
 23fc396:	4604      	mov	r4, r0
 23fc398:	2800      	cmp	r0, #0
 23fc39a:	d0f4      	beq.n	23fc386 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fc39c:	a807      	add	r0, sp, #28
 23fc39e:	f7ff f949 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fc3a2:	a804      	add	r0, sp, #16
 23fc3a4:	f7ff f946 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fc3a8:	a801      	add	r0, sp, #4
 23fc3aa:	f7ff f943 	bl	23fb634 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23fc3ae:	4620      	mov	r0, r4
 23fc3b0:	b00b      	add	sp, #44	; 0x2c
 23fc3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc3b6:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23fc3b8:	45b3      	cmp	fp, r6
 23fc3ba:	d009      	beq.n	23fc3d0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23fc3bc:	4659      	mov	r1, fp
 23fc3be:	4650      	mov	r0, sl
 23fc3c0:	f7fe fe75 	bl	23fb0ae <_ZNK8particle7BleUuideqERKS0_>
 23fc3c4:	f10b 0b14 	add.w	fp, fp, #20
 23fc3c8:	4604      	mov	r4, r0
 23fc3ca:	2800      	cmp	r0, #0
 23fc3cc:	d0f4      	beq.n	23fc3b8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23fc3ce:	e7e5      	b.n	23fc39c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23fc3d0:	f10a 0a14 	add.w	sl, sl, #20
 23fc3d4:	e7d4      	b.n	23fc380 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23fc3d6:	2400      	movs	r4, #0
 23fc3d8:	e7e0      	b.n	23fc39c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23fc3da:	2401      	movs	r4, #1
 23fc3dc:	e7e4      	b.n	23fc3a8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023fc3de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fc3de:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc3e2:	4604      	mov	r4, r0
 23fc3e4:	460d      	mov	r5, r1
 23fc3e6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc3e8:	d914      	bls.n	23fc414 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fc3ea:	4290      	cmp	r0, r2
 23fc3ec:	d213      	bcs.n	23fc416 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fc3ee:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fc3f2:	1a75      	subs	r5, r6, r1
 23fc3f4:	f1a1 0708 	sub.w	r7, r1, #8
 23fc3f8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc3fa:	42b7      	cmp	r7, r6
 23fc3fc:	d018      	beq.n	23fc430 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fc3fe:	b11c      	cbz	r4, 23fc408 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fc400:	4631      	mov	r1, r6
 23fc402:	4620      	mov	r0, r4
 23fc404:	f7ff f970 	bl	23fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fc408:	1d30      	adds	r0, r6, #4
 23fc40a:	f7fd fa97 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fc40e:	3e08      	subs	r6, #8
 23fc410:	3c08      	subs	r4, #8
 23fc412:	e7f2      	b.n	23fc3fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fc414:	d00c      	beq.n	23fc430 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fc416:	42b5      	cmp	r5, r6
 23fc418:	d00a      	beq.n	23fc430 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fc41a:	b11c      	cbz	r4, 23fc424 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fc41c:	4629      	mov	r1, r5
 23fc41e:	4620      	mov	r0, r4
 23fc420:	f7ff f962 	bl	23fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fc424:	1d28      	adds	r0, r5, #4
 23fc426:	f7fd fa89 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fc42a:	3508      	adds	r5, #8
 23fc42c:	3408      	adds	r4, #8
 23fc42e:	e7f2      	b.n	23fc416 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fc430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc432 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc432:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fc434:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fc436:	4605      	mov	r5, r0
        if (n > 0) {
 23fc438:	dd11      	ble.n	23fc45e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fc43a:	00f0      	lsls	r0, r6, #3
 23fc43c:	f7fc fed2 	bl	23f91e4 <malloc>
            if (!d) {
 23fc440:	4604      	mov	r4, r0
 23fc442:	b158      	cbz	r0, 23fc45c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fc444:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc448:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fc44c:	f7ff ffc7 	bl	23fc3de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fc450:	6828      	ldr	r0, [r5, #0]
 23fc452:	f7fc fed5 	bl	23f9200 <free>
        return true;
 23fc456:	2001      	movs	r0, #1
        data_ = d;
 23fc458:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc45a:	60ae      	str	r6, [r5, #8]
    }
 23fc45c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fc45e:	2400      	movs	r4, #0
 23fc460:	e7f6      	b.n	23fc450 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fc462 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fc462:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc468:	e9c0 3300 	strd	r3, r3, [r0]
 23fc46c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc46e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc470:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc472:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc474:	4299      	cmp	r1, r3
 23fc476:	dd13      	ble.n	23fc4a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fc478:	f7ff ffdb 	bl	23fc432 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc47c:	b180      	cbz	r0, 23fc4a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc47e:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fc482:	6827      	ldr	r7, [r4, #0]
 23fc484:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fc488:	45b0      	cmp	r8, r6
 23fc48a:	d007      	beq.n	23fc49c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fc48c:	b11f      	cbz	r7, 23fc496 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fc48e:	4631      	mov	r1, r6
 23fc490:	4638      	mov	r0, r7
 23fc492:	f7ff f929 	bl	23fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
 23fc496:	3608      	adds	r6, #8
 23fc498:	3708      	adds	r7, #8
 23fc49a:	e7f5      	b.n	23fc488 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fc49c:	686b      	ldr	r3, [r5, #4]
 23fc49e:	6063      	str	r3, [r4, #4]
}
 23fc4a0:	4620      	mov	r0, r4
 23fc4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc4a6 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
 23fc4a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc4a8:	460d      	mov	r5, r1
 23fc4aa:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fc4ac:	a801      	add	r0, sp, #4
 23fc4ae:	f7fe fd15 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
 23fc4b2:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
 23fc4b4:	4620      	mov	r0, r4
 23fc4b6:	310c      	adds	r1, #12
 23fc4b8:	f7ff ffd3 	bl	23fc462 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fc4bc:	a801      	add	r0, sp, #4
 23fc4be:	f7fe fd1b 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fc4c2:	4620      	mov	r0, r4
 23fc4c4:	b003      	add	sp, #12
 23fc4c6:	bd30      	pop	{r4, r5, pc}

023fc4c8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fc4c8:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
 23fc4ca:	680b      	ldr	r3, [r1, #0]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fc4cc:	4605      	mov	r5, r0
    if (!impl()->servicesDiscovered()) {
 23fc4ce:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fc4d0:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
 23fc4d2:	b933      	cbnz	r3, 23fc4e2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
 23fc4d4:	4608      	mov	r0, r1
 23fc4d6:	f7fe fc95 	bl	23fae04 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
 23fc4da:	b910      	cbnz	r0, 23fc4e2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        servicesDiscovered_ = discovered;
 23fc4dc:	2201      	movs	r2, #1
      { return _M_ptr; }
 23fc4de:	6823      	ldr	r3, [r4, #0]
 23fc4e0:	729a      	strb	r2, [r3, #10]
    return services();
 23fc4e2:	4628      	mov	r0, r5
 23fc4e4:	4621      	mov	r1, r4
 23fc4e6:	f7ff ffde 	bl	23fc4a6 <_ZNK8particle13BlePeerDevice8servicesEv>
}
 23fc4ea:	4628      	mov	r0, r5
 23fc4ec:	bd38      	pop	{r3, r4, r5, pc}

023fc4ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc4ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc4f0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fc4f2:	6845      	ldr	r5, [r0, #4]
 23fc4f4:	4668      	mov	r0, sp
 23fc4f6:	f7ff f8f7 	bl	23fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc4fa:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fc4fe:	4299      	cmp	r1, r3
 23fc500:	da10      	bge.n	23fc524 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fc502:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc504:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc506:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fc50a:	4629      	mov	r1, r5
 23fc50c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fc510:	f105 0008 	add.w	r0, r5, #8
 23fc514:	f7ff ff63 	bl	23fc3de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc518:	b98d      	cbnz	r5, 23fc53e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fc51a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc51c:	2601      	movs	r6, #1
    ++size_;
 23fc51e:	3301      	adds	r3, #1
 23fc520:	6063      	str	r3, [r4, #4]
    return true;
 23fc522:	e006      	b.n	23fc532 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc524:	4620      	mov	r0, r4
 23fc526:	3101      	adds	r1, #1
 23fc528:	f7ff ff83 	bl	23fc432 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc52c:	4606      	mov	r6, r0
 23fc52e:	2800      	cmp	r0, #0
 23fc530:	d1e7      	bne.n	23fc502 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
 23fc532:	a801      	add	r0, sp, #4
 23fc534:	f7fd fa02 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc538:	4630      	mov	r0, r6
 23fc53a:	b002      	add	sp, #8
 23fc53c:	bd70      	pop	{r4, r5, r6, pc}
 23fc53e:	4669      	mov	r1, sp
 23fc540:	4628      	mov	r0, r5
 23fc542:	f7ff f8d1 	bl	23fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fc546:	e7e8      	b.n	23fc51a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fc548 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fc548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc54c:	4605      	mov	r5, r0
 23fc54e:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
 23fc550:	2700      	movs	r7, #0
                LOG(ERROR, "Failed to append discovered service.");
 23fc552:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23fc608 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
 23fc556:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 23fc60c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fc55a:	b093      	sub	sp, #76	; 0x4c
        for (size_t i = 0; i < event->count; i++) {
 23fc55c:	682b      	ldr	r3, [r5, #0]
 23fc55e:	42bb      	cmp	r3, r7
 23fc560:	d94e      	bls.n	23fc600 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
 23fc562:	261c      	movs	r6, #28
 23fc564:	a803      	add	r0, sp, #12
 23fc566:	f7fe ff27 	bl	23fb3b8 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
 23fc56a:	f10d 0c14 	add.w	ip, sp, #20
 23fc56e:	46e3      	mov	fp, ip
 23fc570:	437e      	muls	r6, r7
 23fc572:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
 23fc574:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
 23fc576:	4432      	add	r2, r6
 23fc578:	1d13      	adds	r3, r2, #4
 23fc57a:	3214      	adds	r2, #20
 23fc57c:	46e6      	mov	lr, ip
 23fc57e:	6818      	ldr	r0, [r3, #0]
 23fc580:	6859      	ldr	r1, [r3, #4]
 23fc582:	3308      	adds	r3, #8
 23fc584:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 23fc588:	4293      	cmp	r3, r2
 23fc58a:	46f4      	mov	ip, lr
 23fc58c:	d1f6      	bne.n	23fc57c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
 23fc58e:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fc590:	4659      	mov	r1, fp
 23fc592:	f8ce 0000 	str.w	r0, [lr]
 23fc596:	a80a      	add	r0, sp, #40	; 0x28
 23fc598:	f7fe fd3e 	bl	23fb018 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fc59c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 23fc5a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fc5a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc5a6:	f8dc 3000 	ldr.w	r3, [ip]
 23fc5aa:	9a03      	ldr	r2, [sp, #12]
 23fc5ac:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
 23fc5ae:	686b      	ldr	r3, [r5, #4]
 23fc5b0:	a903      	add	r1, sp, #12
 23fc5b2:	4433      	add	r3, r6
 23fc5b4:	8b1b      	ldrh	r3, [r3, #24]
 23fc5b6:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
 23fc5b8:	686b      	ldr	r3, [r5, #4]
 23fc5ba:	4433      	add	r3, r6
 23fc5bc:	8b5b      	ldrh	r3, [r3, #26]
 23fc5be:	82d3      	strh	r3, [r2, #22]
        return services_;
 23fc5c0:	f8d8 0000 	ldr.w	r0, [r8]
 23fc5c4:	f100 040c 	add.w	r4, r0, #12
 23fc5c8:	a80a      	add	r0, sp, #40	; 0x28
 23fc5ca:	f7ff f88d 	bl	23fb6e8 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
 23fc5ce:	4620      	mov	r0, r4
 23fc5d0:	a90a      	add	r1, sp, #40	; 0x28
 23fc5d2:	f7ff ff8c 	bl	23fc4ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23fc5d6:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fc5d8:	a80b      	add	r0, sp, #44	; 0x2c
 23fc5da:	f7fd f9af 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc5de:	b954      	cbnz	r4, 23fc5f6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
 23fc5e0:	2320      	movs	r3, #32
 23fc5e2:	4651      	mov	r1, sl
 23fc5e4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 23fc5e8:	2032      	movs	r0, #50	; 0x32
 23fc5ea:	4623      	mov	r3, r4
 23fc5ec:	f8cd 9000 	str.w	r9, [sp]
 23fc5f0:	aa0a      	add	r2, sp, #40	; 0x28
 23fc5f2:	f7fc fcc3 	bl	23f8f7c <log_message>
 23fc5f6:	a804      	add	r0, sp, #16
 23fc5f8:	f7fd f9a0 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fc5fc:	3701      	adds	r7, #1
 23fc5fe:	e7ad      	b.n	23fc55c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
 23fc600:	b013      	add	sp, #76	; 0x4c
 23fc602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc606:	bf00      	nop
 23fc608:	023ffb25 	.word	0x023ffb25
 23fc60c:	023ffa27 	.word	0x023ffa27

023fc610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fc610:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc614:	4604      	mov	r4, r0
 23fc616:	460d      	mov	r5, r1
 23fc618:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc61a:	d914      	bls.n	23fc646 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fc61c:	4290      	cmp	r0, r2
 23fc61e:	d213      	bcs.n	23fc648 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fc620:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fc624:	1a75      	subs	r5, r6, r1
 23fc626:	f1a1 0708 	sub.w	r7, r1, #8
 23fc62a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc62c:	42b7      	cmp	r7, r6
 23fc62e:	d018      	beq.n	23fc662 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fc630:	b11c      	cbz	r4, 23fc63a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fc632:	4631      	mov	r1, r6
 23fc634:	4620      	mov	r0, r4
 23fc636:	f7ff f849 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc63a:	1d30      	adds	r0, r6, #4
 23fc63c:	f7fd f97e 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fc640:	3e08      	subs	r6, #8
 23fc642:	3c08      	subs	r4, #8
 23fc644:	e7f2      	b.n	23fc62c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fc646:	d00c      	beq.n	23fc662 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fc648:	42b5      	cmp	r5, r6
 23fc64a:	d00a      	beq.n	23fc662 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fc64c:	b11c      	cbz	r4, 23fc656 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fc64e:	4629      	mov	r1, r5
 23fc650:	4620      	mov	r0, r4
 23fc652:	f7ff f83b 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc656:	1d28      	adds	r0, r5, #4
 23fc658:	f7fd f970 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fc65c:	3508      	adds	r5, #8
 23fc65e:	3408      	adds	r4, #8
 23fc660:	e7f2      	b.n	23fc648 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fc662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc664:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fc666:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fc668:	4605      	mov	r5, r0
        if (n > 0) {
 23fc66a:	dd11      	ble.n	23fc690 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fc66c:	00f0      	lsls	r0, r6, #3
 23fc66e:	f7fc fdb9 	bl	23f91e4 <malloc>
            if (!d) {
 23fc672:	4604      	mov	r4, r0
 23fc674:	b158      	cbz	r0, 23fc68e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fc676:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc67a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fc67e:	f7ff ffc7 	bl	23fc610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fc682:	6828      	ldr	r0, [r5, #0]
 23fc684:	f7fc fdbc 	bl	23f9200 <free>
        return true;
 23fc688:	2001      	movs	r0, #1
        data_ = d;
 23fc68a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc68c:	60ae      	str	r6, [r5, #8]
    }
 23fc68e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fc690:	2400      	movs	r4, #0
 23fc692:	e7f6      	b.n	23fc682 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fc694 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fc694:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc69a:	e9c0 3300 	strd	r3, r3, [r0]
 23fc69e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc6a0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc6a2:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc6a4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc6a6:	4299      	cmp	r1, r3
 23fc6a8:	dd13      	ble.n	23fc6d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fc6aa:	f7ff ffdb 	bl	23fc664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc6ae:	b180      	cbz	r0, 23fc6d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc6b0:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fc6b4:	6827      	ldr	r7, [r4, #0]
 23fc6b6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fc6ba:	45b0      	cmp	r8, r6
 23fc6bc:	d007      	beq.n	23fc6ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fc6be:	b11f      	cbz	r7, 23fc6c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fc6c0:	4631      	mov	r1, r6
 23fc6c2:	4638      	mov	r0, r7
 23fc6c4:	f7ff f802 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
 23fc6c8:	3608      	adds	r6, #8
 23fc6ca:	3708      	adds	r7, #8
 23fc6cc:	e7f5      	b.n	23fc6ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fc6ce:	686b      	ldr	r3, [r5, #4]
 23fc6d0:	6063      	str	r3, [r4, #4]
}
 23fc6d2:	4620      	mov	r0, r4
 23fc6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc6d8 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
 23fc6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc6da:	460d      	mov	r5, r1
 23fc6dc:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fc6de:	a801      	add	r0, sp, #4
 23fc6e0:	f7fe fbfc 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
 23fc6e4:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
 23fc6e6:	4620      	mov	r0, r4
 23fc6e8:	3118      	adds	r1, #24
 23fc6ea:	f7ff ffd3 	bl	23fc694 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fc6ee:	a801      	add	r0, sp, #4
 23fc6f0:	f7fe fc02 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fc6f4:	4620      	mov	r0, r4
 23fc6f6:	b003      	add	sp, #12
 23fc6f8:	bd30      	pop	{r4, r5, pc}

023fc6fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc6fc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fc6fe:	6845      	ldr	r5, [r0, #4]
 23fc700:	4668      	mov	r0, sp
 23fc702:	f7fe ffe3 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc706:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fc70a:	4299      	cmp	r1, r3
 23fc70c:	da10      	bge.n	23fc730 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fc70e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc710:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc712:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fc716:	4629      	mov	r1, r5
 23fc718:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fc71c:	f105 0008 	add.w	r0, r5, #8
 23fc720:	f7ff ff76 	bl	23fc610 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc724:	b98d      	cbnz	r5, 23fc74a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fc726:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc728:	2601      	movs	r6, #1
    ++size_;
 23fc72a:	3301      	adds	r3, #1
 23fc72c:	6063      	str	r3, [r4, #4]
    return true;
 23fc72e:	e006      	b.n	23fc73e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc730:	4620      	mov	r0, r4
 23fc732:	3101      	adds	r1, #1
 23fc734:	f7ff ff96 	bl	23fc664 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc738:	4606      	mov	r6, r0
 23fc73a:	2800      	cmp	r0, #0
 23fc73c:	d1e7      	bne.n	23fc70e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fc73e:	a801      	add	r0, sp, #4
 23fc740:	f7fd f8fc 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc744:	4630      	mov	r0, r6
 23fc746:	b002      	add	sp, #8
 23fc748:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fc74a:	4669      	mov	r1, sp
 23fc74c:	4628      	mov	r0, r5
 23fc74e:	f7fe ffbd 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc752:	e7e8      	b.n	23fc726 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fc754 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fc754:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc756:	b085      	sub	sp, #20
 23fc758:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fc75a:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fc75c:	460c      	mov	r4, r1
 23fc75e:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fc760:	f7fe fbbc 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
 23fc764:	2300      	movs	r3, #0
 23fc766:	e9c5 3300 	strd	r3, r3, [r5]
 23fc76a:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
 23fc76c:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fc76e:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
 23fc772:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
 23fc776:	42b4      	cmp	r4, r6
 23fc778:	d011      	beq.n	23fc79e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
 23fc77a:	4621      	mov	r1, r4
 23fc77c:	6838      	ldr	r0, [r7, #0]
 23fc77e:	f7fe fda1 	bl	23fb2c4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
 23fc782:	b150      	cbz	r0, 23fc79a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
 23fc784:	4621      	mov	r1, r4
 23fc786:	a802      	add	r0, sp, #8
 23fc788:	f7fe ffa0 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fc78c:	4628      	mov	r0, r5
 23fc78e:	a902      	add	r1, sp, #8
 23fc790:	f7ff ffb3 	bl	23fc6fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fc794:	a803      	add	r0, sp, #12
 23fc796:	f7fd f8d1 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
 23fc79a:	3408      	adds	r4, #8
 23fc79c:	e7eb      	b.n	23fc776 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
 23fc79e:	a801      	add	r0, sp, #4
 23fc7a0:	f7fe fbaa 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fc7a4:	4628      	mov	r0, r5
 23fc7a6:	b005      	add	sp, #20
 23fc7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fc7ac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fc7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
 23fc7b0:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fc7b2:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fc7b4:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fc7b6:	460f      	mov	r7, r1
 23fc7b8:	4690      	mov	r8, r2
 23fc7ba:	b091      	sub	sp, #68	; 0x44
    if (!impl()->servicesDiscovered()) {
 23fc7bc:	b933      	cbnz	r3, 23fc7cc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
 23fc7be:	e9c0 3300 	strd	r3, r3, [r0]
 23fc7c2:	6083      	str	r3, [r0, #8]
}
 23fc7c4:	4630      	mov	r0, r6
 23fc7c6:	b011      	add	sp, #68	; 0x44
 23fc7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
 23fc7cc:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
 23fc7ce:	7e0d      	ldrb	r5, [r1, #24]
 23fc7d0:	2d00      	cmp	r5, #0
 23fc7d2:	d158      	bne.n	23fc886 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
 23fc7d4:	2320      	movs	r3, #32
 23fc7d6:	462a      	mov	r2, r5
 23fc7d8:	a803      	add	r0, sp, #12
 23fc7da:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23fc7de:	f7fe fce5 	bl	23fb1ac <_ZNK8particle7BleUuid8toStringEb>
 23fc7e2:	9b03      	ldr	r3, [sp, #12]
 23fc7e4:	492b      	ldr	r1, [pc, #172]	; (23fc894 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
 23fc7e6:	9301      	str	r3, [sp, #4]
 23fc7e8:	4b2b      	ldr	r3, [pc, #172]	; (23fc898 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
 23fc7ea:	aa08      	add	r2, sp, #32
 23fc7ec:	2001      	movs	r0, #1
 23fc7ee:	9300      	str	r3, [sp, #0]
 23fc7f0:	462b      	mov	r3, r5
 23fc7f2:	f7fc fbc3 	bl	23f8f7c <log_message>
 23fc7f6:	a803      	add	r0, sp, #12
 23fc7f8:	f000 fbb8 	bl	23fcf6c <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
 23fc7fc:	231c      	movs	r3, #28
 23fc7fe:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 23fc802:	f8d8 3000 	ldr.w	r3, [r8]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fc806:	a908      	add	r1, sp, #32
        halService.start_handle = service.impl()->startHandle();
 23fc808:	8a9a      	ldrh	r2, [r3, #20]
 23fc80a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
 23fc80e:	8adb      	ldrh	r3, [r3, #22]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fc810:	4a22      	ldr	r2, [pc, #136]	; (23fc89c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
        halService.end_handle = service.impl()->endHandle();
 23fc812:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 23fc816:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fc818:	8818      	ldrh	r0, [r3, #0]
 23fc81a:	9500      	str	r5, [sp, #0]
 23fc81c:	f7fc fb06 	bl	23f8e2c <hal_ble_gatt_client_discover_characteristics>
 23fc820:	2800      	cmp	r0, #0
 23fc822:	db30      	blt.n	23fc886 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
 23fc824:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
 23fc826:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fc82a:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 23fc82e:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
 23fc830:	f1a4 0308 	sub.w	r3, r4, #8
 23fc834:	4599      	cmp	r9, r3
 23fc836:	d022      	beq.n	23fc87e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
 23fc838:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fc83c:	89db      	ldrh	r3, [r3, #14]
 23fc83e:	2b00      	cmp	r3, #0
 23fc840:	d0f5      	beq.n	23fc82e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
 23fc842:	2210      	movs	r2, #16
 23fc844:	2100      	movs	r1, #0
 23fc846:	eb0d 0002 	add.w	r0, sp, r2
 23fc84a:	9503      	str	r5, [sp, #12]
 23fc84c:	f001 f898 	bl	23fd980 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
 23fc850:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fc854:	aa03      	add	r2, sp, #12
 23fc856:	89d9      	ldrh	r1, [r3, #14]
 23fc858:	683b      	ldr	r3, [r7, #0]
 23fc85a:	8818      	ldrh	r0, [r3, #0]
 23fc85c:	2313      	movs	r3, #19
 23fc85e:	9500      	str	r5, [sp, #0]
 23fc860:	f7fc faf2 	bl	23f8e48 <hal_ble_gatt_client_read>
                if (len > 0) {
 23fc864:	2800      	cmp	r0, #0
 23fc866:	d0e2      	beq.n	23fc82e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
 23fc868:	ab10      	add	r3, sp, #64	; 0x40
 23fc86a:	4418      	add	r0, r3
 23fc86c:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
 23fc870:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
 23fc874:	a903      	add	r1, sp, #12
 23fc876:	303c      	adds	r0, #60	; 0x3c
 23fc878:	f000 fc19 	bl	23fd0ae <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
 23fc87c:	e7d7      	b.n	23fc82e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
        characteristicsDiscovered_ = discovered;
 23fc87e:	2201      	movs	r2, #1
 23fc880:	f8d8 3000 	ldr.w	r3, [r8]
 23fc884:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
 23fc886:	4642      	mov	r2, r8
 23fc888:	4639      	mov	r1, r7
 23fc88a:	4630      	mov	r0, r6
 23fc88c:	f7ff ff62 	bl	23fc754 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
 23fc890:	e798      	b.n	23fc7c4 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
 23fc892:	bf00      	nop
 23fc894:	023ffa27 	.word	0x023ffa27
 23fc898:	023ffb4a 	.word	0x023ffb4a
 23fc89c:	023fca45 	.word	0x023fca45

023fc8a0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fc8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
 23fc8a2:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fc8a4:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fc8a6:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fc8a8:	460d      	mov	r5, r1
 23fc8aa:	b085      	sub	sp, #20
    if (!impl()->servicesDiscovered()) {
 23fc8ac:	b92b      	cbnz	r3, 23fc8ba <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
 23fc8ae:	a801      	add	r0, sp, #4
 23fc8b0:	f7ff fe0a 	bl	23fc4c8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
 23fc8b4:	a801      	add	r0, sp, #4
 23fc8b6:	f7fe ff32 	bl	23fb71e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fc8ba:	682b      	ldr	r3, [r5, #0]
 23fc8bc:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
 23fc8c0:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
 23fc8c4:	42bc      	cmp	r4, r7
 23fc8c6:	d009      	beq.n	23fc8dc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
 23fc8c8:	4622      	mov	r2, r4
 23fc8ca:	4629      	mov	r1, r5
 23fc8cc:	a801      	add	r0, sp, #4
 23fc8ce:	f7ff ff6d 	bl	23fc7ac <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
 23fc8d2:	a801      	add	r0, sp, #4
 23fc8d4:	f7fe ff35 	bl	23fb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
 23fc8d8:	3408      	adds	r4, #8
 23fc8da:	e7f3      	b.n	23fc8c4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
 23fc8dc:	4630      	mov	r0, r6
 23fc8de:	4629      	mov	r1, r5
 23fc8e0:	f7ff fefa 	bl	23fc6d8 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
 23fc8e4:	4630      	mov	r0, r6
 23fc8e6:	b005      	add	sp, #20
 23fc8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fc8ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fc8ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    hal_ble_conn_cfg_t connCfg = {};
 23fc8f0:	f04f 0900 	mov.w	r9, #0
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fc8f4:	b093      	sub	sp, #76	; 0x4c
 23fc8f6:	4605      	mov	r5, r0
 23fc8f8:	460f      	mov	r7, r1
    return address_;
 23fc8fa:	6808      	ldr	r0, [r1, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fc8fc:	4698      	mov	r8, r3
    return address_;
 23fc8fe:	6849      	ldr	r1, [r1, #4]
    connCfg.version = BLE_API_VERSION;
 23fc900:	4b41      	ldr	r3, [pc, #260]	; (23fca08 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    return address_;
 23fc902:	ac0a      	add	r4, sp, #40	; 0x28
 23fc904:	c403      	stmia	r4!, {r0, r1}
    connCfg.version = BLE_API_VERSION;
 23fc906:	9304      	str	r3, [sp, #16]
    connCfg.address = addr.halAddress();
 23fc908:	ab05      	add	r3, sp, #20
 23fc90a:	e883 0003 	stmia.w	r3, {r0, r1}
    connCfg.conn_params = params;
 23fc90e:	9207      	str	r2, [sp, #28]
    hal_ble_conn_cfg_t connCfg = {};
 23fc910:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23fc914:	f7fe fe1e 	bl	23fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fc918:	4b3c      	ldr	r3, [pc, #240]	; (23fca0c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
    connCfg.address = addr.halAddress();
 23fc91a:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23fc91c:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
 23fc91e:	f7fe fe19 	bl	23fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fc922:	6803      	ldr	r3, [r0, #0]
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
 23fc924:	464a      	mov	r2, r9
 23fc926:	6829      	ldr	r1, [r5, #0]
 23fc928:	a804      	add	r0, sp, #16
    connCfg.context = BleLocalDevice::getInstance().impl();
 23fc92a:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
 23fc92c:	f7fc fa9a 	bl	23f8e64 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
 23fc930:	4604      	mov	r4, r0
 23fc932:	b138      	cbz	r0, 23fc944 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 23fc938:	682b      	ldr	r3, [r5, #0]
 23fc93a:	801a      	strh	r2, [r3, #0]
}
 23fc93c:	4620      	mov	r0, r4
 23fc93e:	b013      	add	sp, #76	; 0x4c
 23fc940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
 23fc944:	4639      	mov	r1, r7
 23fc946:	4628      	mov	r0, r5
 23fc948:	f7fe fd88 	bl	23fb45c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
 23fc94c:	a803      	add	r0, sp, #12
 23fc94e:	f7fe fac5 	bl	23faedc <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
 23fc952:	f7fe fdff 	bl	23fb554 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
 23fc956:	6807      	ldr	r7, [r0, #0]
 23fc958:	4629      	mov	r1, r5
 23fc95a:	3718      	adds	r7, #24
 23fc95c:	4630      	mov	r0, r6
 23fc95e:	f7fe fecd 	bl	23fb6fc <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
 23fc962:	4631      	mov	r1, r6
 23fc964:	4638      	mov	r0, r7
 23fc966:	f7ff fa2f 	bl	23fbdc8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fc96a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
 23fc96c:	a80b      	add	r0, sp, #44	; 0x2c
 23fc96e:	f7fc ffe5 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc972:	f04f 0920 	mov.w	r9, #32
 23fc976:	bb1f      	cbnz	r7, 23fc9c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
 23fc978:	4b25      	ldr	r3, [pc, #148]	; (23fca10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
 23fc97a:	4632      	mov	r2, r6
 23fc97c:	4e25      	ldr	r6, [pc, #148]	; (23fca14 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
 23fc97e:	4926      	ldr	r1, [pc, #152]	; (23fca18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
 23fc980:	2032      	movs	r0, #50	; 0x32
 23fc982:	9300      	str	r3, [sp, #0]
 23fc984:	4623      	mov	r3, r4
 23fc986:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
 23fc98a:	f7fc faf7 	bl	23f8f7c <log_message>
 23fc98e:	6830      	ldr	r0, [r6, #0]
 23fc990:	f7fc f9f8 	bl	23f8d84 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fc994:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
 23fc996:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fc99a:	4621      	mov	r1, r4
 23fc99c:	8818      	ldrh	r0, [r3, #0]
 23fc99e:	f7fc fa29 	bl	23f8df4 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
 23fc9a2:	6830      	ldr	r0, [r6, #0]
 23fc9a4:	f7fc f9e0 	bl	23f8d68 <os_mutex_recursive_lock>
        locked_ = true;
 23fc9a8:	2301      	movs	r3, #1
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc9aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
        locked_ = true;
 23fc9ae:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
 23fc9b2:	682b      	ldr	r3, [r5, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fc9b4:	a803      	add	r0, sp, #12
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc9b6:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fc9b8:	f7fe fa9e 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
 23fc9bc:	4c17      	ldr	r4, [pc, #92]	; (23fca1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
 23fc9be:	e7bd      	b.n	23fc93c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
 23fc9c0:	a803      	add	r0, sp, #12
 23fc9c2:	f7fe fa99 	bl	23faef8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
 23fc9c6:	4b16      	ldr	r3, [pc, #88]	; (23fca20 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
 23fc9c8:	4632      	mov	r2, r6
 23fc9ca:	9300      	str	r3, [sp, #0]
 23fc9cc:	2001      	movs	r0, #1
 23fc9ce:	4623      	mov	r3, r4
 23fc9d0:	4911      	ldr	r1, [pc, #68]	; (23fca18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
 23fc9d2:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
 23fc9d6:	f7fc fad1 	bl	23f8f7c <log_message>
    if (automatic) {
 23fc9da:	f1b8 0f00 	cmp.w	r8, #0
 23fc9de:	d0ad      	beq.n	23fc93c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fc9e0:	4629      	mov	r1, r5
 23fc9e2:	4630      	mov	r0, r6
 23fc9e4:	f7ff ff5c 	bl	23fc8a0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
 23fc9e8:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
 23fc9ec:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
 23fc9f0:	42bd      	cmp	r5, r7
 23fc9f2:	d005      	beq.n	23fca00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
 23fc9f4:	4628      	mov	r0, r5
 23fc9f6:	2101      	movs	r1, #1
 23fc9f8:	f7fe fca4 	bl	23fb344 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
 23fc9fc:	3508      	adds	r5, #8
 23fc9fe:	e7f7      	b.n	23fc9f0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fca00:	4630      	mov	r0, r6
 23fca02:	f7fe fe9e 	bl	23fb742 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fca06:	e799      	b.n	23fc93c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
 23fca08:	00180003 	.word	0x00180003
 23fca0c:	023fbe81 	.word	0x023fbe81
 23fca10:	023ffb7c 	.word	0x023ffb7c
 23fca14:	1007af00 	.word	0x1007af00
 23fca18:	023ffa27 	.word	0x023ffa27
 23fca1c:	fffffefc 	.word	0xfffffefc
 23fca20:	023ffb98 	.word	0x023ffb98

023fca24 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
 23fca24:	b513      	push	{r0, r1, r4, lr}
 23fca26:	4604      	mov	r4, r0
 23fca28:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
 23fca2c:	f7fe fce0 	bl	23fb3f0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
 23fca30:	2200      	movs	r2, #0
 23fca32:	4620      	mov	r0, r4
 23fca34:	9b00      	ldr	r3, [sp, #0]
 23fca36:	9901      	ldr	r1, [sp, #4]
 23fca38:	f7ff ff58 	bl	23fc8ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
 23fca3c:	4620      	mov	r0, r4
 23fca3e:	b002      	add	sp, #8
 23fca40:	bd10      	pop	{r4, pc}
	...

023fca44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
 23fca48:	2320      	movs	r3, #32
 23fca4a:	2600      	movs	r6, #0
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fca4c:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
 23fca4e:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
 23fca52:	4b66      	ldr	r3, [pc, #408]	; (23fcbec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fca54:	4605      	mov	r5, r0
        LOG(TRACE, "Characteristic discovered.");
 23fca56:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fca58:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
 23fca5a:	4633      	mov	r3, r6
 23fca5c:	2001      	movs	r0, #1
 23fca5e:	4964      	ldr	r1, [pc, #400]	; (23fcbf0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
 23fca60:	aa0c      	add	r2, sp, #48	; 0x30
 23fca62:	f7fc fa8b 	bl	23f8f7c <log_message>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fca66:	f8df 918c 	ldr.w	r9, [pc, #396]	; 23fcbf4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
 23fca6a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 23fcbf0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fca6e:	f8df a188 	ldr.w	sl, [pc, #392]	; 23fcbf8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        for (size_t i = 0; i < event->count; i++) {
 23fca72:	682b      	ldr	r3, [r5, #0]
 23fca74:	42b3      	cmp	r3, r6
 23fca76:	f240 80b5 	bls.w	23fcbe4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
 23fca7a:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 23fca7e:	a803      	add	r0, sp, #12
 23fca80:	fb0b fb06 	mul.w	fp, fp, r6
 23fca84:	f7fe fc44 	bl	23fb310 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
 23fca88:	a805      	add	r0, sp, #20
 23fca8a:	f7fe fc95 	bl	23fb3b8 <_ZN8particle10BleServiceC1Ev>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
 23fca8e:	686b      	ldr	r3, [r5, #4]
 23fca90:	9a03      	ldr	r2, [sp, #12]
 23fca92:	445b      	add	r3, fp
        this->size = halHandles.size;
 23fca94:	8bd9      	ldrh	r1, [r3, #30]
 23fca96:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
 23fca98:	8c19      	ldrh	r1, [r3, #32]
 23fca9a:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
 23fca9c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 23fca9e:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
 23fcaa0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 23fcaa2:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
 23fcaa4:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 23fcaa6:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
 23fcaa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 23fcaaa:	8253      	strh	r3, [r2, #18]
 23fcaac:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
 23fcab0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
 23fcab4:	429a      	cmp	r2, r3
 23fcab6:	d07d      	beq.n	23fcbb4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
 23fcab8:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
 23fcaba:	8ac4      	ldrh	r4, [r0, #22]
 23fcabc:	428c      	cmp	r4, r1
 23fcabe:	d377      	bcc.n	23fcbb0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
 23fcac0:	8a84      	ldrh	r4, [r0, #20]
 23fcac2:	428c      	cmp	r4, r1
 23fcac4:	d874      	bhi.n	23fcbb0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcac6:	6859      	ldr	r1, [r3, #4]
 23fcac8:	9005      	str	r0, [sp, #20]
 23fcaca:	a806      	add	r0, sp, #24
 23fcacc:	f7fe f9e0 	bl	23fae90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      { return _M_ptr; }
 23fcad0:	f8dd e00c 	ldr.w	lr, [sp, #12]
                characteristic.impl()->svcUUID() = service.impl()->UUID();
 23fcad4:	f8dd c014 	ldr.w	ip, [sp, #20]
 23fcad8:	f10e 0428 	add.w	r4, lr, #40	; 0x28
 23fcadc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fcae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fcae2:	f8dc 3000 	ldr.w	r3, [ip]
 23fcae6:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
 23fcae8:	892b      	ldrh	r3, [r5, #8]
 23fcaea:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
 23fcaee:	686b      	ldr	r3, [r5, #4]
 23fcaf0:	9c03      	ldr	r4, [sp, #12]
 23fcaf2:	445b      	add	r3, fp
 23fcaf4:	7e5b      	ldrb	r3, [r3, #25]
 23fcaf6:	f013 0f02 	tst.w	r3, #2
 23fcafa:	d16e      	bne.n	23fcbda <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
 23fcafc:	686b      	ldr	r3, [r5, #4]
 23fcafe:	445b      	add	r3, fp
 23fcb00:	7e5b      	ldrb	r3, [r3, #25]
 23fcb02:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
 23fcb04:	bf42      	ittt	mi
 23fcb06:	7923      	ldrbmi	r3, [r4, #4]
 23fcb08:	f043 0304 	orrmi.w	r3, r3, #4
 23fcb0c:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
 23fcb0e:	686b      	ldr	r3, [r5, #4]
 23fcb10:	445b      	add	r3, fp
 23fcb12:	7e5b      	ldrb	r3, [r3, #25]
 23fcb14:	0719      	lsls	r1, r3, #28
 23fcb16:	bf42      	ittt	mi
 23fcb18:	7923      	ldrbmi	r3, [r4, #4]
 23fcb1a:	f043 0308 	orrmi.w	r3, r3, #8
 23fcb1e:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
 23fcb20:	686b      	ldr	r3, [r5, #4]
 23fcb22:	445b      	add	r3, fp
 23fcb24:	7e5b      	ldrb	r3, [r3, #25]
 23fcb26:	06da      	lsls	r2, r3, #27
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
 23fcb28:	aa07      	add	r2, sp, #28
 23fcb2a:	4696      	mov	lr, r2
    value_ |= flags.value_;
 23fcb2c:	bf42      	ittt	mi
 23fcb2e:	7923      	ldrbmi	r3, [r4, #4]
 23fcb30:	f043 0310 	orrmi.w	r3, r3, #16
 23fcb34:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
 23fcb36:	686b      	ldr	r3, [r5, #4]
 23fcb38:	445b      	add	r3, fp
 23fcb3a:	7e5b      	ldrb	r3, [r3, #25]
 23fcb3c:	069b      	lsls	r3, r3, #26
 23fcb3e:	bf42      	ittt	mi
 23fcb40:	7923      	ldrbmi	r3, [r4, #4]
 23fcb42:	f043 0320 	orrmi.w	r3, r3, #32
 23fcb46:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
 23fcb48:	686b      	ldr	r3, [r5, #4]
 23fcb4a:	449b      	add	fp, r3
 23fcb4c:	f10b 0304 	add.w	r3, fp, #4
 23fcb50:	f10b 0b14 	add.w	fp, fp, #20
 23fcb54:	4694      	mov	ip, r2
 23fcb56:	6818      	ldr	r0, [r3, #0]
 23fcb58:	6859      	ldr	r1, [r3, #4]
 23fcb5a:	3308      	adds	r3, #8
 23fcb5c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23fcb60:	455b      	cmp	r3, fp
 23fcb62:	4662      	mov	r2, ip
 23fcb64:	d1f6      	bne.n	23fcb54 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
 23fcb66:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fcb68:	4671      	mov	r1, lr
 23fcb6a:	f8cc 0000 	str.w	r0, [ip]
 23fcb6e:	a80c      	add	r0, sp, #48	; 0x30
 23fcb70:	f7fe fa52 	bl	23fb018 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fcb74:	3414      	adds	r4, #20
 23fcb76:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 23fcb7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fcb7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fcb80:	f8dc 3000 	ldr.w	r3, [ip]
                if (!peerImpl->characteristics().append(characteristic)) {
 23fcb84:	a903      	add	r1, sp, #12
 23fcb86:	6023      	str	r3, [r4, #0]
 23fcb88:	a80c      	add	r0, sp, #48	; 0x30
 23fcb8a:	f7fe fd9f 	bl	23fb6cc <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fcb8e:	a90c      	add	r1, sp, #48	; 0x30
 23fcb90:	f107 0018 	add.w	r0, r7, #24
 23fcb94:	f7ff fdb1 	bl	23fc6fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23fcb98:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fcb9a:	a80d      	add	r0, sp, #52	; 0x34
 23fcb9c:	f7fc fece 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcba0:	b99c      	cbnz	r4, 23fcbca <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fcba2:	2320      	movs	r3, #32
 23fcba4:	f8cd a000 	str.w	sl, [sp]
 23fcba8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 23fcbac:	4623      	mov	r3, r4
 23fcbae:	e007      	b.n	23fcbc0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
 23fcbb0:	3308      	adds	r3, #8
 23fcbb2:	e77f      	b.n	23fcab4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fcbb4:	2420      	movs	r4, #32
 23fcbb6:	2300      	movs	r3, #0
 23fcbb8:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
 23fcbbc:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fcbc0:	4641      	mov	r1, r8
 23fcbc2:	2032      	movs	r0, #50	; 0x32
 23fcbc4:	aa0c      	add	r2, sp, #48	; 0x30
 23fcbc6:	f7fc f9d9 	bl	23f8f7c <log_message>
 23fcbca:	a806      	add	r0, sp, #24
 23fcbcc:	f7fc feb6 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcbd0:	a804      	add	r0, sp, #16
 23fcbd2:	f7fc feb3 	bl	23f993c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fcbd6:	3601      	adds	r6, #1
 23fcbd8:	e74b      	b.n	23fca72 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
 23fcbda:	7923      	ldrb	r3, [r4, #4]
 23fcbdc:	f043 0302 	orr.w	r3, r3, #2
 23fcbe0:	7123      	strb	r3, [r4, #4]
 23fcbe2:	e78b      	b.n	23fcafc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
 23fcbe4:	b015      	add	sp, #84	; 0x54
 23fcbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcbea:	bf00      	nop
 23fcbec:	023ffbb5 	.word	0x023ffbb5
 23fcbf0:	023ffa27 	.word	0x023ffa27
 23fcbf4:	023ffbd0 	.word	0x023ffbd0
 23fcbf8:	023ffbff 	.word	0x023ffbff

023fcbfc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fcbfc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcc00:	4604      	mov	r4, r0
 23fcc02:	460d      	mov	r5, r1
 23fcc04:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcc06:	d914      	bls.n	23fcc32 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fcc08:	4290      	cmp	r0, r2
 23fcc0a:	d213      	bcs.n	23fcc34 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fcc0c:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23fcc10:	1a75      	subs	r5, r6, r1
 23fcc12:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23fcc16:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcc18:	42b7      	cmp	r7, r6
 23fcc1a:	d018      	beq.n	23fcc4e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fcc1c:	b11c      	cbz	r4, 23fcc26 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fcc1e:	4631      	mov	r1, r6
 23fcc20:	4620      	mov	r0, r4
 23fcc22:	f7fe ffb7 	bl	23fbb94 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23fcc26:	4630      	mov	r0, r6
 23fcc28:	f7fe fcde 	bl	23fb5e8 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23fcc2c:	3e24      	subs	r6, #36	; 0x24
 23fcc2e:	3c24      	subs	r4, #36	; 0x24
 23fcc30:	e7f2      	b.n	23fcc18 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fcc32:	d00c      	beq.n	23fcc4e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fcc34:	42b5      	cmp	r5, r6
 23fcc36:	d00a      	beq.n	23fcc4e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fcc38:	b11c      	cbz	r4, 23fcc42 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fcc3a:	4629      	mov	r1, r5
 23fcc3c:	4620      	mov	r0, r4
 23fcc3e:	f7fe ffa9 	bl	23fbb94 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23fcc42:	4628      	mov	r0, r5
 23fcc44:	f7fe fcd0 	bl	23fb5e8 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcc48:	3524      	adds	r5, #36	; 0x24
 23fcc4a:	3424      	adds	r4, #36	; 0x24
 23fcc4c:	e7f2      	b.n	23fcc34 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fcc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcc50 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fcc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23fcc52:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fcc54:	4605      	mov	r5, r0
        if (n > 0) {
 23fcc56:	dd13      	ble.n	23fcc80 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fcc58:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23fcc5a:	fb07 f006 	mul.w	r0, r7, r6
 23fcc5e:	f7fc fac1 	bl	23f91e4 <malloc>
            if (!d) {
 23fcc62:	4604      	mov	r4, r0
 23fcc64:	b158      	cbz	r0, 23fcc7e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23fcc66:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcc6a:	fb07 1202 	mla	r2, r7, r2, r1
 23fcc6e:	f7ff ffc5 	bl	23fcbfc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fcc72:	6828      	ldr	r0, [r5, #0]
 23fcc74:	f7fc fac4 	bl	23f9200 <free>
        return true;
 23fcc78:	2001      	movs	r0, #1
        data_ = d;
 23fcc7a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fcc7c:	60ae      	str	r6, [r5, #8]
    }
 23fcc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fcc80:	2400      	movs	r4, #0
 23fcc82:	e7f6      	b.n	23fcc72 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023fcc84 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fcc84:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fcc8a:	e9c0 3300 	strd	r3, r3, [r0]
 23fcc8e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc90:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc92:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc94:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc96:	4299      	cmp	r1, r3
 23fcc98:	dd29      	ble.n	23fccee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
 23fcc9a:	f7ff ffd9 	bl	23fcc50 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fcc9e:	b330      	cbz	r0, 23fccee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fcca0:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fcca4:	f04f 0824 	mov.w	r8, #36	; 0x24
 23fcca8:	682e      	ldr	r6, [r5, #0]
 23fccaa:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
 23fccae:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
 23fccb0:	f1a4 0208 	sub.w	r2, r4, #8
 23fccb4:	4590      	cmp	r8, r2
 23fccb6:	d018      	beq.n	23fccea <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
 23fccb8:	b1a6      	cbz	r6, 23fcce4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
 23fccba:	f854 3c08 	ldr.w	r3, [r4, #-8]
class BleAdvertisingData {
 23fccbe:	4621      	mov	r1, r4
 23fccc0:	6033      	str	r3, [r6, #0]
 23fccc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 23fccc6:	f106 0008 	add.w	r0, r6, #8
 23fccca:	6073      	str	r3, [r6, #4]
 23fcccc:	f7fe ff45 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fccd0:	f104 010c 	add.w	r1, r4, #12
 23fccd4:	f106 0014 	add.w	r0, r6, #20
 23fccd8:	f7fe ff3f 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fccdc:	f994 3018 	ldrsb.w	r3, [r4, #24]
 23fcce0:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
 23fcce4:	3624      	adds	r6, #36	; 0x24
 23fcce6:	3424      	adds	r4, #36	; 0x24
 23fcce8:	e7e2      	b.n	23fccb0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fccea:	687b      	ldr	r3, [r7, #4]
 23fccec:	606b      	str	r3, [r5, #4]
}
 23fccee:	4628      	mov	r0, r5
 23fccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fccf4 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
 23fccf4:	b538      	push	{r3, r4, r5, lr}
 23fccf6:	460c      	mov	r4, r1
 23fccf8:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
 23fccfa:	f101 0018 	add.w	r0, r1, #24
 23fccfe:	f7fe f86b 	bl	23fadd8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23fcd02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fcd06:	f7fe f872 	bl	23fadee <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
 23fcd0a:	2200      	movs	r2, #0
 23fcd0c:	4621      	mov	r1, r4
 23fcd0e:	4804      	ldr	r0, [pc, #16]	; (23fcd20 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
 23fcd10:	f7fc f854 	bl	23f8dbc <hal_ble_gap_start_scan>
        return resultsVector_;
 23fcd14:	4621      	mov	r1, r4
 23fcd16:	4628      	mov	r0, r5
 23fcd18:	f7ff ffb4 	bl	23fcc84 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
 23fcd1c:	4628      	mov	r0, r5
 23fcd1e:	bd38      	pop	{r3, r4, r5, pc}
 23fcd20:	023fcd45 	.word	0x023fcd45

023fcd24 <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
 23fcd24:	b510      	push	{r4, lr}
 23fcd26:	4604      	mov	r4, r0
 23fcd28:	b09e      	sub	sp, #120	; 0x78
    BleScanDelegator scanner;
 23fcd2a:	a801      	add	r0, sp, #4
 23fcd2c:	f7fe fc66 	bl	23fb5fc <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
 23fcd30:	4620      	mov	r0, r4
 23fcd32:	a901      	add	r1, sp, #4
 23fcd34:	f7ff ffde 	bl	23fccf4 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
 23fcd38:	a801      	add	r0, sp, #4
 23fcd3a:	f7fe fc82 	bl	23fb642 <_ZN8particle16BleScanDelegatorD1Ev>
}
 23fcd3e:	4620      	mov	r0, r4
 23fcd40:	b01e      	add	sp, #120	; 0x78
 23fcd42:	bd10      	pop	{r4, pc}

023fcd44 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23fcd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fcd48:	4606      	mov	r6, r0
 23fcd4a:	460c      	mov	r4, r1
 23fcd4c:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
 23fcd4e:	ad01      	add	r5, sp, #4
 23fcd50:	4628      	mov	r0, r5
 23fcd52:	f7fe f946 	bl	23fafe2 <_ZN8particle10BleAddressC1Ev>
 23fcd56:	a803      	add	r0, sp, #12
 23fcd58:	f7fe fff9 	bl	23fbd4e <_ZN8particle18BleAdvertisingDataC1Ev>
 23fcd5c:	a806      	add	r0, sp, #24
 23fcd5e:	f7fe fff6 	bl	23fbd4e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23fcd62:	6930      	ldr	r0, [r6, #16]
 23fcd64:	6971      	ldr	r1, [r6, #20]
 23fcd66:	ab13      	add	r3, sp, #76	; 0x4c
 23fcd68:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23fcd6a:	7833      	ldrb	r3, [r6, #0]
    address_ = addr.address_;
 23fcd6c:	e885 0003 	stmia.w	r5, {r0, r1}
        scanResponse_.set(buf, len);
 23fcd70:	89f2      	ldrh	r2, [r6, #14]
 23fcd72:	68b1      	ldr	r1, [r6, #8]
 23fcd74:	a806      	add	r0, sp, #24
        rssi_ = value;
 23fcd76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23fcd7a:	f7fe ff5c 	bl	23fbc36 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23fcd7e:	89b2      	ldrh	r2, [r6, #12]
 23fcd80:	6871      	ldr	r1, [r6, #4]
 23fcd82:	a803      	add	r0, sp, #12
 23fcd84:	f7fe ff57 	bl	23fbc36 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23fcd88:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
 23fcd8c:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23fcd8e:	2b7f      	cmp	r3, #127	; 0x7f
 23fcd90:	d003      	beq.n	23fcd9a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
 23fcd92:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fcd96:	429a      	cmp	r2, r3
 23fcd98:	db5c      	blt.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
 23fcd9a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23fcd9e:	2b7f      	cmp	r3, #127	; 0x7f
 23fcda0:	d003      	beq.n	23fcdaa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
 23fcda2:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fcda6:	429a      	cmp	r2, r3
 23fcda8:	dc54      	bgt.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
 23fcdaa:	4638      	mov	r0, r7
 23fcdac:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23fcdb0:	f7fe fdb6 	bl	23fb920 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23fcdb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23fcdb6:	2b00      	cmp	r3, #0
 23fcdb8:	dd52      	ble.n	23fce60 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
 23fcdba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
 23fcdbc:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23fcdc0:	45b1      	cmp	r9, r6
 23fcdc2:	d050      	beq.n	23fce66 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
 23fcdc4:	4630      	mov	r0, r6
 23fcdc6:	4629      	mov	r1, r5
 23fcdc8:	f7fe f8f7 	bl	23fafba <_ZNK8particle10BleAddresseqERKS0_>
 23fcdcc:	3608      	adds	r6, #8
 23fcdce:	4680      	mov	r8, r0
 23fcdd0:	2800      	cmp	r0, #0
 23fcdd2:	d0f5      	beq.n	23fcdc0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
 23fcdd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fcdd6:	f7fc fa13 	bl	23f9200 <free>
        if (!delegator->filterByRssi(result) ||
 23fcdda:	f1b8 0f00 	cmp.w	r8, #0
 23fcdde:	d039      	beq.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
 23fcde0:	4629      	mov	r1, r5
 23fcde2:	4620      	mov	r0, r4
 23fcde4:	f7fe fd5f 	bl	23fb8a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23fcde8:	b3a0      	cbz	r0, 23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
 23fcdea:	4629      	mov	r1, r5
 23fcdec:	4620      	mov	r0, r4
 23fcdee:	f7ff fa9d 	bl	23fc32c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23fcdf2:	4606      	mov	r6, r0
 23fcdf4:	b370      	cbz	r0, 23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
 23fcdf6:	4638      	mov	r0, r7
 23fcdf8:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23fcdfc:	f7fe fddd 	bl	23fb9ba <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23fce00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fce02:	2b00      	cmp	r3, #0
 23fce04:	dd12      	ble.n	23fce2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23fce06:	a806      	add	r0, sp, #24
 23fce08:	f7fe fa30 	bl	23fb26c <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23fce0c:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23fce0e:	a803      	add	r0, sp, #12
 23fce10:	f7fe fa2c 	bl	23fb26c <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23fce14:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23fce18:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23fce1c:	429a      	cmp	r2, r3
 23fce1e:	d025      	beq.n	23fce6c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
 23fce20:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fce24:	4588      	cmp	r8, r1
 23fce26:	d001      	beq.n	23fce2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
 23fce28:	4288      	cmp	r0, r1
 23fce2a:	d1f7      	bne.n	23fce1c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
 23fce2c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fce2e:	f7fc f9e7 	bl	23f9200 <free>
              !delegator->filterByServiceUUID(result) ||
 23fce32:	b17e      	cbz	r6, 23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
 23fce34:	4629      	mov	r1, r5
 23fce36:	4620      	mov	r0, r4
 23fce38:	f7fe fdf4 	bl	23fba24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23fce3c:	b150      	cbz	r0, 23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
 23fce3e:	6a23      	ldr	r3, [r4, #32]
 23fce40:	b1b3      	cbz	r3, 23fce70 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
 23fce42:	4639      	mov	r1, r7
            delegator->foundCount_++;
 23fce44:	6963      	ldr	r3, [r4, #20]
 23fce46:	9513      	str	r5, [sp, #76]	; 0x4c
 23fce48:	3301      	adds	r3, #1
 23fce4a:	6163      	str	r3, [r4, #20]
 23fce4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fce4e:	f104 0018 	add.w	r0, r4, #24
 23fce52:	4798      	blx	r3
            return;
 23fce54:	4628      	mov	r0, r5
 23fce56:	f7fe fbc7 	bl	23fb5e8 <_ZN8particle13BleScanResultD1Ev>
    }
 23fce5a:	b01d      	add	sp, #116	; 0x74
 23fce5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 23fce60:	f04f 0801 	mov.w	r8, #1
 23fce64:	e7b6      	b.n	23fcdd4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fce66:	f04f 0800 	mov.w	r8, #0
 23fce6a:	e7b3      	b.n	23fcdd4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fce6c:	2600      	movs	r6, #0
 23fce6e:	e7dd      	b.n	23fce2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
 23fce70:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 23fce74:	f1b8 0f00 	cmp.w	r8, #0
 23fce78:	d007      	beq.n	23fce8a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
 23fce7a:	6963      	ldr	r3, [r4, #20]
 23fce7c:	4629      	mov	r1, r5
 23fce7e:	3301      	adds	r3, #1
 23fce80:	6163      	str	r3, [r4, #20]
 23fce82:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fce86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23fce88:	e7e3      	b.n	23fce52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
 23fce8a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23fce8e:	f1bc 0f00 	cmp.w	ip, #0
 23fce92:	d025      	beq.n	23fcee0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
 23fce94:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fce96:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
 23fce98:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fce9a:	4293      	cmp	r3, r2
            delegator->foundCount_++;
 23fce9c:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fce9e:	d8d9      	bhi.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fcea0:	2224      	movs	r2, #36	; 0x24
 23fcea2:	4353      	muls	r3, r2
    address_ = addr.address_;
 23fcea4:	462a      	mov	r2, r5
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fcea6:	3b24      	subs	r3, #36	; 0x24
 23fcea8:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
 23fceac:	ca03      	ldmia	r2!, {r0, r1}
 23fceae:	f84c 0003 	str.w	r0, [ip, r3]
 23fceb2:	6071      	str	r1, [r6, #4]
class BleScanResult {
 23fceb4:	f106 0008 	add.w	r0, r6, #8
 23fceb8:	a903      	add	r1, sp, #12
 23fceba:	f7fe fe84 	bl	23fbbc6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fcebe:	a906      	add	r1, sp, #24
 23fcec0:	f106 0014 	add.w	r0, r6, #20
 23fcec4:	f7fe fe7f 	bl	23fbbc6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fcec8:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23fcecc:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23fced0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23fced4:	429a      	cmp	r2, r3
 23fced6:	d3bd      	bcc.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
 23fced8:	4640      	mov	r0, r8
 23fceda:	f7fb ff7d 	bl	23f8dd8 <hal_ble_gap_stop_scan>
 23fcede:	e7b9      	b.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
 23fcee0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23fcee4:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fcee8:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23fceec:	a903      	add	r1, sp, #12
 23fceee:	a80c      	add	r0, sp, #48	; 0x30
 23fcef0:	f7fe fe33 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fcef4:	a906      	add	r1, sp, #24
 23fcef6:	a80f      	add	r0, sp, #60	; 0x3c
 23fcef8:	f7fe fe2f 	bl	23fbb5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fcefc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23fcf00:	4641      	mov	r1, r8
 23fcf02:	4638      	mov	r0, r7
 23fcf04:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23fcf08:	6866      	ldr	r6, [r4, #4]
 23fcf0a:	f7fe fe43 	bl	23fbb94 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcf0e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fcf12:	4299      	cmp	r1, r3
 23fcf14:	da10      	bge.n	23fcf38 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
 23fcf16:	2224      	movs	r2, #36	; 0x24
 23fcf18:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fcf1a:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23fcf1c:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23fcf20:	fb02 3201 	mla	r2, r2, r1, r3
 23fcf24:	f106 0024 	add.w	r0, r6, #36	; 0x24
 23fcf28:	4631      	mov	r1, r6
 23fcf2a:	f7ff fe67 	bl	23fcbfc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fcf2e:	b986      	cbnz	r6, 23fcf52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
 23fcf30:	6863      	ldr	r3, [r4, #4]
 23fcf32:	3301      	adds	r3, #1
 23fcf34:	6063      	str	r3, [r4, #4]
    return true;
 23fcf36:	e005      	b.n	23fcf44 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcf38:	4620      	mov	r0, r4
 23fcf3a:	3101      	adds	r1, #1
 23fcf3c:	f7ff fe88 	bl	23fcc50 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fcf40:	2800      	cmp	r0, #0
 23fcf42:	d1e8      	bne.n	23fcf16 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
 23fcf44:	4638      	mov	r0, r7
 23fcf46:	f7fe fb4f 	bl	23fb5e8 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23fcf4a:	4640      	mov	r0, r8
 23fcf4c:	f7fe fb4c 	bl	23fb5e8 <_ZN8particle13BleScanResultD1Ev>
 23fcf50:	e780      	b.n	23fce54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
 23fcf52:	4639      	mov	r1, r7
 23fcf54:	4630      	mov	r0, r6
 23fcf56:	f7fe fe1d 	bl	23fbb94 <_ZN8particle13BleScanResultC1EOS0_>
 23fcf5a:	e7e9      	b.n	23fcf30 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

023fcf5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fcf5c:	2300      	movs	r3, #0
 23fcf5e:	4802      	ldr	r0, [pc, #8]	; (23fcf68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fcf60:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fcf62:	f7fb bee5 	b.w	23f8d30 <os_mutex_recursive_create>
 23fcf66:	bf00      	nop
 23fcf68:	1007af00 	.word	0x1007af00

023fcf6c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fcf6c:	b510      	push	{r4, lr}
 23fcf6e:	4604      	mov	r4, r0
{
	free(buffer);
 23fcf70:	6800      	ldr	r0, [r0, #0]
 23fcf72:	f7fc f945 	bl	23f9200 <free>
}
 23fcf76:	4620      	mov	r0, r4
 23fcf78:	bd10      	pop	{r4, pc}

023fcf7a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fcf7a:	b510      	push	{r4, lr}
 23fcf7c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fcf7e:	6800      	ldr	r0, [r0, #0]
 23fcf80:	b108      	cbz	r0, 23fcf86 <_ZN6String10invalidateEv+0xc>
 23fcf82:	f7fc f93d 	bl	23f9200 <free>
	buffer = NULL;
 23fcf86:	2300      	movs	r3, #0
	capacity = len = 0;
 23fcf88:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fcf8c:	6023      	str	r3, [r4, #0]
}
 23fcf8e:	bd10      	pop	{r4, pc}

023fcf90 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fcf90:	b538      	push	{r3, r4, r5, lr}
 23fcf92:	4604      	mov	r4, r0
 23fcf94:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fcf96:	6800      	ldr	r0, [r0, #0]
 23fcf98:	3101      	adds	r1, #1
 23fcf9a:	f7fc f93f 	bl	23f921c <realloc>
	if (newbuffer) {
 23fcf9e:	b110      	cbz	r0, 23fcfa6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fcfa0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fcfa4:	2001      	movs	r0, #1
	}
	return 0;
}
 23fcfa6:	bd38      	pop	{r3, r4, r5, pc}

023fcfa8 <_ZN6String7reserveEj>:
{
 23fcfa8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fcfaa:	6803      	ldr	r3, [r0, #0]
{
 23fcfac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fcfae:	b123      	cbz	r3, 23fcfba <_ZN6String7reserveEj+0x12>
 23fcfb0:	6843      	ldr	r3, [r0, #4]
 23fcfb2:	428b      	cmp	r3, r1
 23fcfb4:	d301      	bcc.n	23fcfba <_ZN6String7reserveEj+0x12>
 23fcfb6:	2001      	movs	r0, #1
}
 23fcfb8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fcfba:	4620      	mov	r0, r4
 23fcfbc:	f7ff ffe8 	bl	23fcf90 <_ZN6String12changeBufferEj>
 23fcfc0:	2800      	cmp	r0, #0
 23fcfc2:	d0f9      	beq.n	23fcfb8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fcfc4:	68a3      	ldr	r3, [r4, #8]
 23fcfc6:	2b00      	cmp	r3, #0
 23fcfc8:	d1f5      	bne.n	23fcfb6 <_ZN6String7reserveEj+0xe>
 23fcfca:	6822      	ldr	r2, [r4, #0]
 23fcfcc:	7013      	strb	r3, [r2, #0]
 23fcfce:	e7f2      	b.n	23fcfb6 <_ZN6String7reserveEj+0xe>

023fcfd0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fcfd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcfd2:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fcfd4:	4611      	mov	r1, r2
 23fcfd6:	9201      	str	r2, [sp, #4]
{
 23fcfd8:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fcfda:	f7ff ffe5 	bl	23fcfa8 <_ZN6String7reserveEj>
 23fcfde:	9a01      	ldr	r2, [sp, #4]
 23fcfe0:	b928      	cbnz	r0, 23fcfee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fcfe2:	4620      	mov	r0, r4
 23fcfe4:	f7ff ffc9 	bl	23fcf7a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fcfe8:	4620      	mov	r0, r4
 23fcfea:	b003      	add	sp, #12
 23fcfec:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fcfee:	4629      	mov	r1, r5
	len = length;
 23fcff0:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fcff2:	6820      	ldr	r0, [r4, #0]
 23fcff4:	f000 fc9d 	bl	23fd932 <memcpy>
	buffer[len] = 0;
 23fcff8:	2100      	movs	r1, #0
 23fcffa:	6822      	ldr	r2, [r4, #0]
 23fcffc:	68a3      	ldr	r3, [r4, #8]
 23fcffe:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fd000:	e7f2      	b.n	23fcfe8 <_ZN6String4copyEPKcj+0x18>

023fd002 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fd002:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fd004:	b513      	push	{r0, r1, r4, lr}
 23fd006:	4604      	mov	r4, r0
	capacity = 0;
 23fd008:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd00c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd00e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fd010:	b141      	cbz	r1, 23fd024 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fd012:	4608      	mov	r0, r1
 23fd014:	9101      	str	r1, [sp, #4]
 23fd016:	f7fa fe2d 	bl	23f7c74 <strlen>
 23fd01a:	9901      	ldr	r1, [sp, #4]
 23fd01c:	4602      	mov	r2, r0
 23fd01e:	4620      	mov	r0, r4
 23fd020:	f7ff ffd6 	bl	23fcfd0 <_ZN6String4copyEPKcj>
}
 23fd024:	4620      	mov	r0, r4
 23fd026:	b002      	add	sp, #8
 23fd028:	bd10      	pop	{r4, pc}

023fd02a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd02a:	b538      	push	{r3, r4, r5, lr}
 23fd02c:	4605      	mov	r5, r0
	if (buffer) {
 23fd02e:	6800      	ldr	r0, [r0, #0]
{
 23fd030:	460c      	mov	r4, r1
	if (buffer) {
 23fd032:	b168      	cbz	r0, 23fd050 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23fd034:	686a      	ldr	r2, [r5, #4]
 23fd036:	688b      	ldr	r3, [r1, #8]
 23fd038:	429a      	cmp	r2, r3
 23fd03a:	d307      	bcc.n	23fd04c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23fd03c:	6809      	ldr	r1, [r1, #0]
 23fd03e:	f000 fcec 	bl	23fda1a <strcpy>
			len = rhs.len;
 23fd042:	68a3      	ldr	r3, [r4, #8]
 23fd044:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fd046:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fd048:	60a3      	str	r3, [r4, #8]
}
 23fd04a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fd04c:	f7fc f8d8 	bl	23f9200 <free>
	buffer = rhs.buffer;
 23fd050:	6823      	ldr	r3, [r4, #0]
 23fd052:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fd054:	6863      	ldr	r3, [r4, #4]
 23fd056:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fd058:	68a3      	ldr	r3, [r4, #8]
 23fd05a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fd05c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fd05e:	e9c4 3300 	strd	r3, r3, [r4]
 23fd062:	e7f1      	b.n	23fd048 <_ZN6String4moveERS_+0x1e>

023fd064 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fd064:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd066:	b510      	push	{r4, lr}
 23fd068:	4604      	mov	r4, r0
	capacity = 0;
 23fd06a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd06e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd070:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fd072:	f7ff ffda 	bl	23fd02a <_ZN6String4moveERS_>
}
 23fd076:	4620      	mov	r0, r4
 23fd078:	bd10      	pop	{r4, pc}

023fd07a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fd07a:	4288      	cmp	r0, r1
{
 23fd07c:	b510      	push	{r4, lr}
 23fd07e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fd080:	d005      	beq.n	23fd08e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fd082:	680b      	ldr	r3, [r1, #0]
 23fd084:	b12b      	cbz	r3, 23fd092 <_ZN6StringaSERKS_+0x18>
 23fd086:	688a      	ldr	r2, [r1, #8]
 23fd088:	4619      	mov	r1, r3
 23fd08a:	f7ff ffa1 	bl	23fcfd0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd08e:	4620      	mov	r0, r4
 23fd090:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd092:	f7ff ff72 	bl	23fcf7a <_ZN6String10invalidateEv>
 23fd096:	e7fa      	b.n	23fd08e <_ZN6StringaSERKS_+0x14>

023fd098 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fd098:	2300      	movs	r3, #0
String::String(const String &value)
 23fd09a:	b510      	push	{r4, lr}
 23fd09c:	4604      	mov	r4, r0
	capacity = 0;
 23fd09e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd0a2:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd0a4:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fd0a6:	f7ff ffe8 	bl	23fd07a <_ZN6StringaSERKS_>
}
 23fd0aa:	4620      	mov	r0, r4
 23fd0ac:	bd10      	pop	{r4, pc}

023fd0ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fd0ae:	b513      	push	{r0, r1, r4, lr}
 23fd0b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23fd0b2:	b159      	cbz	r1, 23fd0cc <_ZN6StringaSEPKc+0x1e>
 23fd0b4:	4608      	mov	r0, r1
 23fd0b6:	9101      	str	r1, [sp, #4]
 23fd0b8:	f7fa fddc 	bl	23f7c74 <strlen>
 23fd0bc:	9901      	ldr	r1, [sp, #4]
 23fd0be:	4602      	mov	r2, r0
 23fd0c0:	4620      	mov	r0, r4
 23fd0c2:	f7ff ff85 	bl	23fcfd0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd0c6:	4620      	mov	r0, r4
 23fd0c8:	b002      	add	sp, #8
 23fd0ca:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd0cc:	f7ff ff55 	bl	23fcf7a <_ZN6String10invalidateEv>
 23fd0d0:	e7f9      	b.n	23fd0c6 <_ZN6StringaSEPKc+0x18>

023fd0d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fd0d2:	b570      	push	{r4, r5, r6, lr}
 23fd0d4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23fd0d6:	460e      	mov	r6, r1
 23fd0d8:	b909      	cbnz	r1, 23fd0de <_ZN6String6concatEPKcj+0xc>
 23fd0da:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23fd0dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23fd0de:	b16a      	cbz	r2, 23fd0fc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23fd0e0:	6884      	ldr	r4, [r0, #8]
 23fd0e2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23fd0e4:	4621      	mov	r1, r4
 23fd0e6:	f7ff ff5f 	bl	23fcfa8 <_ZN6String7reserveEj>
 23fd0ea:	2800      	cmp	r0, #0
 23fd0ec:	d0f5      	beq.n	23fd0da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23fd0ee:	6828      	ldr	r0, [r5, #0]
 23fd0f0:	68ab      	ldr	r3, [r5, #8]
 23fd0f2:	4631      	mov	r1, r6
 23fd0f4:	4418      	add	r0, r3
 23fd0f6:	f000 fc90 	bl	23fda1a <strcpy>
	len = newlen;
 23fd0fa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23fd0fc:	2001      	movs	r0, #1
 23fd0fe:	e7ed      	b.n	23fd0dc <_ZN6String6concatEPKcj+0xa>

023fd100 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 23fd100:	2300      	movs	r3, #0
{
 23fd102:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 23fd104:	2201      	movs	r2, #1
	buf[0] = c;
 23fd106:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 23fd10a:	a901      	add	r1, sp, #4
	buf[1] = 0;
 23fd10c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 23fd110:	f7ff ffdf 	bl	23fd0d2 <_ZN6String6concatEPKcj>
}
 23fd114:	b003      	add	sp, #12
 23fd116:	f85d fb04 	ldr.w	pc, [sp], #4

023fd11a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
 23fd11a:	6802      	ldr	r2, [r0, #0]
{
 23fd11c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 23fd11e:	6809      	ldr	r1, [r1, #0]
 23fd120:	b162      	cbz	r2, 23fd13c <_ZNK6String9compareToERKS_+0x22>
 23fd122:	b941      	cbnz	r1, 23fd136 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 23fd124:	6880      	ldr	r0, [r0, #8]
 23fd126:	b160      	cbz	r0, 23fd142 <_ZNK6String9compareToERKS_+0x28>
 23fd128:	7810      	ldrb	r0, [r2, #0]
 23fd12a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23fd12c:	6898      	ldr	r0, [r3, #8]
 23fd12e:	b140      	cbz	r0, 23fd142 <_ZNK6String9compareToERKS_+0x28>
 23fd130:	7809      	ldrb	r1, [r1, #0]
 23fd132:	4248      	negs	r0, r1
 23fd134:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 23fd136:	4610      	mov	r0, r2
 23fd138:	f7fa bd92 	b.w	23f7c60 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23fd13c:	2900      	cmp	r1, #0
 23fd13e:	d1f5      	bne.n	23fd12c <_ZNK6String9compareToERKS_+0x12>
		return 0;
 23fd140:	4608      	mov	r0, r1
}
 23fd142:	4770      	bx	lr

023fd144 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23fd144:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 23fd146:	6882      	ldr	r2, [r0, #8]
 23fd148:	688b      	ldr	r3, [r1, #8]
 23fd14a:	429a      	cmp	r2, r3
 23fd14c:	d105      	bne.n	23fd15a <_ZNK6String6equalsERKS_+0x16>
 23fd14e:	f7ff ffe4 	bl	23fd11a <_ZNK6String9compareToERKS_>
 23fd152:	fab0 f080 	clz	r0, r0
 23fd156:	0940      	lsrs	r0, r0, #5
}
 23fd158:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 23fd15a:	2000      	movs	r0, #0
 23fd15c:	e7fc      	b.n	23fd158 <_ZNK6String6equalsERKS_+0x14>
	...

023fd160 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd160:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd162:	2000      	movs	r0, #0
 23fd164:	4b04      	ldr	r3, [pc, #16]	; (23fd178 <_GLOBAL__sub_I_System+0x18>)
 23fd166:	601a      	str	r2, [r3, #0]
 23fd168:	4b04      	ldr	r3, [pc, #16]	; (23fd17c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd16a:	4a05      	ldr	r2, [pc, #20]	; (23fd180 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd16c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd170:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd172:	f7fb bff1 	b.w	23f9158 <set_system_mode>
 23fd176:	bf00      	nop
 23fd178:	1007af14 	.word	0x1007af14
 23fd17c:	1007af08 	.word	0x1007af08
 23fd180:	ffff0000 	.word	0xffff0000

023fd184 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd184:	2200      	movs	r2, #0
 23fd186:	6840      	ldr	r0, [r0, #4]
 23fd188:	4611      	mov	r1, r2
 23fd18a:	f7fb bf9f 	b.w	23f90cc <network_listening>

023fd18e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd18e:	2200      	movs	r2, #0
 23fd190:	6840      	ldr	r0, [r0, #4]
 23fd192:	4611      	mov	r1, r2
 23fd194:	f7fb bfb6 	b.w	23f9104 <network_get_listen_timeout>

023fd198 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd198:	2200      	movs	r2, #0
 23fd19a:	6840      	ldr	r0, [r0, #4]
 23fd19c:	f7fb bfa4 	b.w	23f90e8 <network_set_listen_timeout>

023fd1a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd1a0:	2200      	movs	r2, #0
 23fd1a2:	6840      	ldr	r0, [r0, #4]
 23fd1a4:	f081 0101 	eor.w	r1, r1, #1
 23fd1a8:	f7fb bf82 	b.w	23f90b0 <network_listen>

023fd1ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd1ac:	2300      	movs	r3, #0
 23fd1ae:	6840      	ldr	r0, [r0, #4]
 23fd1b0:	461a      	mov	r2, r3
 23fd1b2:	4619      	mov	r1, r3
 23fd1b4:	f7fb bf6e 	b.w	23f9094 <network_off>

023fd1b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd1b8:	2300      	movs	r3, #0
 23fd1ba:	6840      	ldr	r0, [r0, #4]
 23fd1bc:	461a      	mov	r2, r3
 23fd1be:	4619      	mov	r1, r3
 23fd1c0:	f7fb bf5a 	b.w	23f9078 <network_on>

023fd1c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd1c4:	2200      	movs	r2, #0
 23fd1c6:	6840      	ldr	r0, [r0, #4]
 23fd1c8:	4611      	mov	r1, r2
 23fd1ca:	f7fb bf47 	b.w	23f905c <network_ready>

023fd1ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd1ce:	2200      	movs	r2, #0
 23fd1d0:	6840      	ldr	r0, [r0, #4]
 23fd1d2:	4611      	mov	r1, r2
 23fd1d4:	f7fb bf26 	b.w	23f9024 <network_connecting>

023fd1d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd1d8:	2200      	movs	r2, #0
 23fd1da:	2102      	movs	r1, #2
 23fd1dc:	6840      	ldr	r0, [r0, #4]
 23fd1de:	f7fb bf2f 	b.w	23f9040 <network_disconnect>

023fd1e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd1e2:	2300      	movs	r3, #0
 23fd1e4:	6840      	ldr	r0, [r0, #4]
 23fd1e6:	461a      	mov	r2, r3
 23fd1e8:	f7fb bf0e 	b.w	23f9008 <network_connect>

023fd1ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fd1ec:	2203      	movs	r2, #3
 23fd1ee:	4b02      	ldr	r3, [pc, #8]	; (23fd1f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd1f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd1f2:	4a02      	ldr	r2, [pc, #8]	; (23fd1fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd1f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd1f6:	4770      	bx	lr
 23fd1f8:	1007af18 	.word	0x1007af18
 23fd1fc:	023ffc88 	.word	0x023ffc88

023fd200 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd200:	4770      	bx	lr
	...

023fd204 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fd204:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fd206:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fd208:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fd20a:	462a      	mov	r2, r5
 23fd20c:	2100      	movs	r1, #0
 23fd20e:	f000 fbb7 	bl	23fd980 <memset>
 23fd212:	8025      	strh	r5, [r4, #0]
 23fd214:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd216:	4907      	ldr	r1, [pc, #28]	; (23fd234 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fd218:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fd21a:	8125      	strh	r5, [r4, #8]
 23fd21c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd21e:	f000 fa4f 	bl	23fd6c0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd222:	4904      	ldr	r1, [pc, #16]	; (23fd234 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fd224:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd226:	4628      	mov	r0, r5
 23fd228:	f000 fa4a 	bl	23fd6c0 <_ZnajRKSt9nothrow_t>
    };
 23fd22c:	60e0      	str	r0, [r4, #12]
}
 23fd22e:	4620      	mov	r0, r4
 23fd230:	bd38      	pop	{r3, r4, r5, pc}
 23fd232:	bf00      	nop
 23fd234:	023ffceb 	.word	0x023ffceb

023fd238 <__tcf_2>:
 23fd238:	4770      	bx	lr

023fd23a <__tcf_1>:
 23fd23a:	4770      	bx	lr

023fd23c <_Z20acquireSerial1Bufferv>:
{
 23fd23c:	b510      	push	{r4, lr}
 23fd23e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fd240:	f7ff ffe0 	bl	23fd204 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fd244:	4620      	mov	r0, r4
 23fd246:	bd10      	pop	{r4, pc}

023fd248 <_Z20acquireSerial2Bufferv>:
 23fd248:	b510      	push	{r4, lr}
 23fd24a:	4604      	mov	r4, r0
 23fd24c:	f7ff ffda 	bl	23fd204 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fd250:	4620      	mov	r0, r4
 23fd252:	bd10      	pop	{r4, pc}

023fd254 <_Z20acquireSerial3Bufferv>:
 23fd254:	b510      	push	{r4, lr}
 23fd256:	4604      	mov	r4, r0
 23fd258:	f7ff ffd4 	bl	23fd204 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fd25c:	4620      	mov	r0, r4
 23fd25e:	bd10      	pop	{r4, pc}

023fd260 <_Z22__fetch_global_Serial1v>:
{
 23fd260:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd262:	4d0e      	ldr	r5, [pc, #56]	; (23fd29c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fd264:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd266:	e8d5 1f8f 	ldab	r1, [r5]
 23fd26a:	f011 0401 	ands.w	r4, r1, #1
 23fd26e:	d111      	bne.n	23fd294 <_Z22__fetch_global_Serial1v+0x34>
 23fd270:	4628      	mov	r0, r5
 23fd272:	f7fa fd3b 	bl	23f7cec <__cxa_guard_acquire>
 23fd276:	b168      	cbz	r0, 23fd294 <_Z22__fetch_global_Serial1v+0x34>
 23fd278:	a801      	add	r0, sp, #4
 23fd27a:	f7ff ffdf 	bl	23fd23c <_Z20acquireSerial1Bufferv>
 23fd27e:	4621      	mov	r1, r4
 23fd280:	aa01      	add	r2, sp, #4
 23fd282:	4807      	ldr	r0, [pc, #28]	; (23fd2a0 <_Z22__fetch_global_Serial1v+0x40>)
 23fd284:	f7fc f94c 	bl	23f9520 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd288:	4628      	mov	r0, r5
 23fd28a:	f7fa fd34 	bl	23f7cf6 <__cxa_guard_release>
 23fd28e:	4805      	ldr	r0, [pc, #20]	; (23fd2a4 <_Z22__fetch_global_Serial1v+0x44>)
 23fd290:	f000 fb2e 	bl	23fd8f0 <atexit>
    return serial1;
}
 23fd294:	4802      	ldr	r0, [pc, #8]	; (23fd2a0 <_Z22__fetch_global_Serial1v+0x40>)
 23fd296:	b007      	add	sp, #28
 23fd298:	bd30      	pop	{r4, r5, pc}
 23fd29a:	bf00      	nop
 23fd29c:	1007af24 	.word	0x1007af24
 23fd2a0:	1007af30 	.word	0x1007af30
 23fd2a4:	023fd201 	.word	0x023fd201

023fd2a8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fd2a8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fd2aa:	4c0d      	ldr	r4, [pc, #52]	; (23fd2e0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fd2ac:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fd2ae:	e8d4 3f8f 	ldab	r3, [r4]
 23fd2b2:	07db      	lsls	r3, r3, #31
 23fd2b4:	d411      	bmi.n	23fd2da <_Z22__fetch_global_Serial2v+0x32>
 23fd2b6:	4620      	mov	r0, r4
 23fd2b8:	f7fa fd18 	bl	23f7cec <__cxa_guard_acquire>
 23fd2bc:	b168      	cbz	r0, 23fd2da <_Z22__fetch_global_Serial2v+0x32>
 23fd2be:	a801      	add	r0, sp, #4
 23fd2c0:	f7ff ffc2 	bl	23fd248 <_Z20acquireSerial2Bufferv>
 23fd2c4:	2101      	movs	r1, #1
 23fd2c6:	aa01      	add	r2, sp, #4
 23fd2c8:	4806      	ldr	r0, [pc, #24]	; (23fd2e4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fd2ca:	f7fc f929 	bl	23f9520 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd2ce:	4620      	mov	r0, r4
 23fd2d0:	f7fa fd11 	bl	23f7cf6 <__cxa_guard_release>
 23fd2d4:	4804      	ldr	r0, [pc, #16]	; (23fd2e8 <_Z22__fetch_global_Serial2v+0x40>)
 23fd2d6:	f000 fb0b 	bl	23fd8f0 <atexit>
	return serial2;
}
 23fd2da:	4802      	ldr	r0, [pc, #8]	; (23fd2e4 <_Z22__fetch_global_Serial2v+0x3c>)
 23fd2dc:	b006      	add	sp, #24
 23fd2de:	bd10      	pop	{r4, pc}
 23fd2e0:	1007af28 	.word	0x1007af28
 23fd2e4:	1007af44 	.word	0x1007af44
 23fd2e8:	023fd23b 	.word	0x023fd23b

023fd2ec <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fd2ec:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fd2ee:	f7ff ffdb 	bl	23fd2a8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fd2f2:	4b07      	ldr	r3, [pc, #28]	; (23fd310 <_Z15serialEventRun2v+0x24>)
 23fd2f4:	4604      	mov	r4, r0
 23fd2f6:	b153      	cbz	r3, 23fd30e <_Z15serialEventRun2v+0x22>
 23fd2f8:	f7fc f930 	bl	23f955c <_ZN11USARTSerial9isEnabledEv>
 23fd2fc:	b138      	cbz	r0, 23fd30e <_Z15serialEventRun2v+0x22>
 23fd2fe:	6823      	ldr	r3, [r4, #0]
 23fd300:	4620      	mov	r0, r4
 23fd302:	691b      	ldr	r3, [r3, #16]
 23fd304:	4798      	blx	r3
 23fd306:	2800      	cmp	r0, #0
 23fd308:	dd01      	ble.n	23fd30e <_Z15serialEventRun2v+0x22>
        handler();
 23fd30a:	e000      	b.n	23fd30e <_Z15serialEventRun2v+0x22>
 23fd30c:	bf00      	nop
}
 23fd30e:	bd10      	pop	{r4, pc}
 23fd310:	00000000 	.word	0x00000000

023fd314 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fd314:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fd316:	4c0d      	ldr	r4, [pc, #52]	; (23fd34c <_Z22__fetch_global_Serial3v+0x38>)
{
 23fd318:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fd31a:	e8d4 3f8f 	ldab	r3, [r4]
 23fd31e:	07db      	lsls	r3, r3, #31
 23fd320:	d411      	bmi.n	23fd346 <_Z22__fetch_global_Serial3v+0x32>
 23fd322:	4620      	mov	r0, r4
 23fd324:	f7fa fce2 	bl	23f7cec <__cxa_guard_acquire>
 23fd328:	b168      	cbz	r0, 23fd346 <_Z22__fetch_global_Serial3v+0x32>
 23fd32a:	a801      	add	r0, sp, #4
 23fd32c:	f7ff ff92 	bl	23fd254 <_Z20acquireSerial3Bufferv>
 23fd330:	2102      	movs	r1, #2
 23fd332:	aa01      	add	r2, sp, #4
 23fd334:	4806      	ldr	r0, [pc, #24]	; (23fd350 <_Z22__fetch_global_Serial3v+0x3c>)
 23fd336:	f7fc f8f3 	bl	23f9520 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd33a:	4620      	mov	r0, r4
 23fd33c:	f7fa fcdb 	bl	23f7cf6 <__cxa_guard_release>
 23fd340:	4804      	ldr	r0, [pc, #16]	; (23fd354 <_Z22__fetch_global_Serial3v+0x40>)
 23fd342:	f000 fad5 	bl	23fd8f0 <atexit>
	return serial3;
}
 23fd346:	4802      	ldr	r0, [pc, #8]	; (23fd350 <_Z22__fetch_global_Serial3v+0x3c>)
 23fd348:	b006      	add	sp, #24
 23fd34a:	bd10      	pop	{r4, pc}
 23fd34c:	1007af2c 	.word	0x1007af2c
 23fd350:	1007af58 	.word	0x1007af58
 23fd354:	023fd239 	.word	0x023fd239

023fd358 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fd358:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fd35a:	f7ff ffdb 	bl	23fd314 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fd35e:	4b07      	ldr	r3, [pc, #28]	; (23fd37c <_Z15serialEventRun3v+0x24>)
 23fd360:	4604      	mov	r4, r0
 23fd362:	b153      	cbz	r3, 23fd37a <_Z15serialEventRun3v+0x22>
 23fd364:	f7fc f8fa 	bl	23f955c <_ZN11USARTSerial9isEnabledEv>
 23fd368:	b138      	cbz	r0, 23fd37a <_Z15serialEventRun3v+0x22>
 23fd36a:	6823      	ldr	r3, [r4, #0]
 23fd36c:	4620      	mov	r0, r4
 23fd36e:	691b      	ldr	r3, [r3, #16]
 23fd370:	4798      	blx	r3
 23fd372:	2800      	cmp	r0, #0
 23fd374:	dd01      	ble.n	23fd37a <_Z15serialEventRun3v+0x22>
        handler();
 23fd376:	e000      	b.n	23fd37a <_Z15serialEventRun3v+0x22>
 23fd378:	bf00      	nop
}
 23fd37a:	bd10      	pop	{r4, pc}
 23fd37c:	00000000 	.word	0x00000000

023fd380 <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23fd380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23fd384:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23fd388:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23fd38c:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23fd390:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23fd394:	4770      	bx	lr
	...

023fd398 <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23fd398:	2801      	cmp	r0, #1
{
 23fd39a:	b570      	push	{r4, r5, r6, lr}
 23fd39c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23fd3a0:	d14a      	bne.n	23fd438 <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23fd3a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23fd3a6:	009a      	lsls	r2, r3, #2
 23fd3a8:	d445      	bmi.n	23fd436 <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23fd3aa:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23fd3ae:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23fd3b2:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23fd3b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23fd3b8:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23fd3bc:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23fd3c0:	4e21      	ldr	r6, [pc, #132]	; (23fd448 <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23fd3c2:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23fd3c6:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23fd3ca:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23fd3cc:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23fd3d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23fd3d4:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23fd3d8:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd3dc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23fd3e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd3e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23fd3e8:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23fd3ea:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23fd3ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23fd3f2:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd3f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23fd3fa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd3fe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23fd402:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23fd404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23fd408:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23fd40a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23fd40e:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23fd412:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23fd416:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23fd41a:	009b      	lsls	r3, r3, #2
 23fd41c:	d5fb      	bpl.n	23fd416 <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd41e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23fd422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd426:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd42a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23fd42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd432:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23fd436:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd438:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23fd43c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23fd440:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23fd444:	e7f5      	b.n	23fd432 <PLL_I2S_Set+0x9a>
 23fd446:	bf00      	nop
 23fd448:	1010a949 	.word	0x1010a949

023fd44c <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23fd44c:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23fd44e:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23fd452:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23fd456:	4770      	bx	lr

023fd458 <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23fd458:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23fd45a:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23fd45c:	bf0b      	itete	eq
 23fd45e:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23fd462:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23fd466:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23fd468:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23fd46a:	bf0b      	itete	eq
 23fd46c:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23fd46e:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23fd470:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23fd474:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23fd478:	6043      	str	r3, [r0, #4]
	}
}
 23fd47a:	4770      	bx	lr

023fd47c <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23fd47c:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23fd47e:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23fd480:	bf0b      	itete	eq
 23fd482:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23fd486:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23fd48a:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23fd48c:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23fd48e:	bf0b      	itete	eq
 23fd490:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23fd492:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23fd494:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23fd498:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23fd49c:	6043      	str	r3, [r0, #4]
	}
}
 23fd49e:	4770      	bx	lr

023fd4a0 <AUDIO_SP_Init>:
{
 23fd4a0:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23fd4a2:	680b      	ldr	r3, [r1, #0]
{
 23fd4a4:	4605      	mov	r5, r0
 23fd4a6:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23fd4a8:	b133      	cbz	r3, 23fd4b8 <AUDIO_SP_Init+0x18>
 23fd4aa:	3b02      	subs	r3, #2
 23fd4ac:	2b01      	cmp	r3, #1
 23fd4ae:	d903      	bls.n	23fd4b8 <AUDIO_SP_Init+0x18>
 23fd4b0:	213a      	movs	r1, #58	; 0x3a
 23fd4b2:	481f      	ldr	r0, [pc, #124]	; (23fd530 <AUDIO_SP_Init+0x90>)
 23fd4b4:	f000 fbe8 	bl	23fdc88 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23fd4b8:	6863      	ldr	r3, [r4, #4]
 23fd4ba:	2b03      	cmp	r3, #3
 23fd4bc:	d906      	bls.n	23fd4cc <AUDIO_SP_Init+0x2c>
 23fd4be:	3b06      	subs	r3, #6
 23fd4c0:	2b01      	cmp	r3, #1
 23fd4c2:	d903      	bls.n	23fd4cc <AUDIO_SP_Init+0x2c>
 23fd4c4:	213b      	movs	r1, #59	; 0x3b
 23fd4c6:	481a      	ldr	r0, [pc, #104]	; (23fd530 <AUDIO_SP_Init+0x90>)
 23fd4c8:	f000 fbde 	bl	23fdc88 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23fd4cc:	68a3      	ldr	r3, [r4, #8]
 23fd4ce:	2b01      	cmp	r3, #1
 23fd4d0:	d903      	bls.n	23fd4da <AUDIO_SP_Init+0x3a>
 23fd4d2:	213c      	movs	r1, #60	; 0x3c
 23fd4d4:	4816      	ldr	r0, [pc, #88]	; (23fd530 <AUDIO_SP_Init+0x90>)
 23fd4d6:	f000 fbd7 	bl	23fdc88 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23fd4da:	68e3      	ldr	r3, [r4, #12]
 23fd4dc:	2b03      	cmp	r3, #3
 23fd4de:	d903      	bls.n	23fd4e8 <AUDIO_SP_Init+0x48>
 23fd4e0:	213d      	movs	r1, #61	; 0x3d
 23fd4e2:	4813      	ldr	r0, [pc, #76]	; (23fd530 <AUDIO_SP_Init+0x90>)
 23fd4e4:	f000 fbd0 	bl	23fdc88 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23fd4e8:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23fd4ea:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23fd4ec:	f043 0301 	orr.w	r3, r3, #1
 23fd4f0:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23fd4f2:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23fd4f4:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23fd4f6:	f023 0301 	bic.w	r3, r3, #1
 23fd4fa:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23fd4fc:	4b0d      	ldr	r3, [pc, #52]	; (23fd534 <AUDIO_SP_Init+0x94>)
 23fd4fe:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23fd500:	4b0d      	ldr	r3, [pc, #52]	; (23fd538 <AUDIO_SP_Init+0x98>)
 23fd502:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23fd504:	4b0d      	ldr	r3, [pc, #52]	; (23fd53c <AUDIO_SP_Init+0x9c>)
 23fd506:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23fd508:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23fd50c:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23fd50e:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23fd510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23fd514:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23fd518:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23fd51c:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23fd51e:	68a2      	ldr	r2, [r4, #8]
 23fd520:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23fd524:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23fd526:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23fd52a:	606b      	str	r3, [r5, #4]
}
 23fd52c:	bd38      	pop	{r3, r4, r5, pc}
 23fd52e:	bf00      	nop
 23fd530:	023ffcdd 	.word	0x023ffcdd
 23fd534:	80100271 	.word	0x80100271
 23fd538:	023fd459 	.word	0x023fd459
 23fd53c:	023fd47d 	.word	0x023fd47d

023fd540 <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23fd540:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23fd542:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23fd544:	bf0b      	itete	eq
 23fd546:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23fd54a:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23fd54e:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23fd550:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23fd552:	bf0b      	itete	eq
 23fd554:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23fd556:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23fd558:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23fd55c:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23fd560:	60c3      	str	r3, [r0, #12]
	}
}
 23fd562:	4770      	bx	lr

023fd564 <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23fd564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fd568:	461f      	mov	r7, r3
 23fd56a:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23fd56e:	230c      	movs	r3, #12
 23fd570:	4358      	muls	r0, r3
 23fd572:	4b4b      	ldr	r3, [pc, #300]	; (23fd6a0 <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23fd574:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23fd576:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23fd57a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23fd57e:	b931      	cbnz	r1, 23fd58e <AUDIO_SP_RXGDMA_Init+0x2a>
 23fd580:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23fd584:	4847      	ldr	r0, [pc, #284]	; (23fd6a4 <AUDIO_SP_RXGDMA_Init+0x140>)
 23fd586:	9201      	str	r2, [sp, #4]
 23fd588:	f000 fb7e 	bl	23fdc88 <__io_assert_failed_veneer>
 23fd58c:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23fd58e:	4639      	mov	r1, r7
 23fd590:	230c      	movs	r3, #12
 23fd592:	4f45      	ldr	r7, [pc, #276]	; (23fd6a8 <AUDIO_SP_RXGDMA_Init+0x144>)
 23fd594:	2000      	movs	r0, #0
 23fd596:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23fd598:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23fd59a:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23fd59c:	d07e      	beq.n	23fd69c <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23fd59e:	2254      	movs	r2, #84	; 0x54
 23fd5a0:	2100      	movs	r1, #0
 23fd5a2:	4b42      	ldr	r3, [pc, #264]	; (23fd6ac <AUDIO_SP_RXGDMA_Init+0x148>)
 23fd5a4:	4620      	mov	r0, r4
 23fd5a6:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23fd5a8:	210b      	movs	r1, #11
 23fd5aa:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23fd5ac:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23fd5b0:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23fd5b2:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23fd5b4:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23fd5b6:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23fd5b8:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23fd5ba:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23fd5be:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23fd5c2:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23fd5c6:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23fd5c8:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23fd5ca:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23fd5cc:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23fd5ce:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23fd5d0:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23fd5d2:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23fd5d4:	d144      	bne.n	23fd660 <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23fd5d6:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23fd5da:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23fd5dc:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23fd5de:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23fd5e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23fd5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23fd5e6:	d904      	bls.n	23fd5f2 <AUDIO_SP_RXGDMA_Init+0x8e>
 23fd5e8:	f240 1177 	movw	r1, #375	; 0x177
 23fd5ec:	482d      	ldr	r0, [pc, #180]	; (23fd6a4 <AUDIO_SP_RXGDMA_Init+0x140>)
 23fd5ee:	f000 fb4b 	bl	23fdc88 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23fd5f2:	4622      	mov	r2, r4
 23fd5f4:	4b2e      	ldr	r3, [pc, #184]	; (23fd6b0 <AUDIO_SP_RXGDMA_Init+0x14c>)
 23fd5f6:	7861      	ldrb	r1, [r4, #1]
 23fd5f8:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23fd5fa:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23fd5fc:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23fd5fe:	4a2d      	ldr	r2, [pc, #180]	; (23fd6b4 <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23fd600:	462f      	mov	r7, r5
 23fd602:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23fd604:	03db      	lsls	r3, r3, #15
 23fd606:	d522      	bpl.n	23fd64e <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23fd608:	1c68      	adds	r0, r5, #1
 23fd60a:	d130      	bne.n	23fd66e <AUDIO_SP_RXGDMA_Init+0x10a>
 23fd60c:	1c71      	adds	r1, r6, #1
 23fd60e:	d130      	bne.n	23fd672 <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23fd610:	2300      	movs	r3, #0
 23fd612:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23fd616:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23fd61a:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23fd61e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23fd622:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23fd626:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23fd62a:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23fd62c:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23fd62e:	ea03 0705 	and.w	r7, r3, r5
 23fd632:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23fd636:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23fd638:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23fd63c:	d2f9      	bcs.n	23fd632 <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23fd63e:	3b20      	subs	r3, #32
 23fd640:	f113 0f20 	cmn.w	r3, #32
 23fd644:	d1f2      	bne.n	23fd62c <AUDIO_SP_RXGDMA_Init+0xc8>
 23fd646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23fd64a:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23fd64e:	7820      	ldrb	r0, [r4, #0]
 23fd650:	2201      	movs	r2, #1
 23fd652:	7861      	ldrb	r1, [r4, #1]
 23fd654:	4b18      	ldr	r3, [pc, #96]	; (23fd6b8 <AUDIO_SP_RXGDMA_Init+0x154>)
 23fd656:	4798      	blx	r3

	return _TRUE;
 23fd658:	2001      	movs	r0, #1
}
 23fd65a:	b003      	add	sp, #12
 23fd65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23fd660:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23fd664:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23fd666:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23fd668:	08b3      	lsrs	r3, r6, #2
 23fd66a:	8523      	strh	r3, [r4, #40]	; 0x28
 23fd66c:	e7b8      	b.n	23fd5e0 <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23fd66e:	06eb      	lsls	r3, r5, #27
 23fd670:	d007      	beq.n	23fd682 <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23fd672:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23fd676:	4435      	add	r5, r6
 23fd678:	3d01      	subs	r5, #1
 23fd67a:	f025 051f 	bic.w	r5, r5, #31
 23fd67e:	3520      	adds	r5, #32
 23fd680:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23fd682:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23fd684:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23fd688:	4a0a      	ldr	r2, [pc, #40]	; (23fd6b4 <AUDIO_SP_RXGDMA_Init+0x150>)
 23fd68a:	4437      	add	r7, r6
    while (op_size > 0) {
 23fd68c:	2d00      	cmp	r5, #0
 23fd68e:	eba7 0305 	sub.w	r3, r7, r5
 23fd692:	ddd8      	ble.n	23fd646 <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23fd694:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23fd698:	3d20      	subs	r5, #32
 23fd69a:	e7f7      	b.n	23fd68c <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23fd69c:	2000      	movs	r0, #0
 23fd69e:	e7dc      	b.n	23fd65a <AUDIO_SP_RXGDMA_Init+0xf6>
 23fd6a0:	023ffcbc 	.word	0x023ffcbc
 23fd6a4:	023ffcc8 	.word	0x023ffcc8
 23fd6a8:	1010c43d 	.word	0x1010c43d
 23fd6ac:	10110ea1 	.word	0x10110ea1
 23fd6b0:	1010bff9 	.word	0x1010bff9
 23fd6b4:	e000ed00 	.word	0xe000ed00
 23fd6b8:	1010bf91 	.word	0x1010bf91

023fd6bc <_ZnwjRKSt9nothrow_t>:
 23fd6bc:	f7fa baff 	b.w	23f7cbe <_Znwj>

023fd6c0 <_ZnajRKSt9nothrow_t>:
 23fd6c0:	f7fa baff 	b.w	23f7cc2 <_Znaj>

023fd6c4 <_ZSt25__throw_bad_function_callv>:
 23fd6c4:	b508      	push	{r3, lr}
 23fd6c6:	f7fb fdc5 	bl	23f9254 <abort>
	...

023fd6cc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fd6cc:	4901      	ldr	r1, [pc, #4]	; (23fd6d4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fd6ce:	f000 b8f9 	b.w	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd6d2:	bf00      	nop
 23fd6d4:	023ffd04 	.word	0x023ffd04

023fd6d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fd6d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fd6da:	2400      	movs	r4, #0
 23fd6dc:	2310      	movs	r3, #16
 23fd6de:	4615      	mov	r5, r2
 23fd6e0:	6812      	ldr	r2, [r2, #0]
 23fd6e2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fd6e6:	6803      	ldr	r3, [r0, #0]
 23fd6e8:	e9cd 4400 	strd	r4, r4, [sp]
 23fd6ec:	699e      	ldr	r6, [r3, #24]
 23fd6ee:	466b      	mov	r3, sp
 23fd6f0:	47b0      	blx	r6
 23fd6f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fd6f6:	f003 0306 	and.w	r3, r3, #6
 23fd6fa:	2b06      	cmp	r3, #6
 23fd6fc:	bf05      	ittet	eq
 23fd6fe:	9b00      	ldreq	r3, [sp, #0]
 23fd700:	2001      	moveq	r0, #1
 23fd702:	4620      	movne	r0, r4
 23fd704:	602b      	streq	r3, [r5, #0]
 23fd706:	b004      	add	sp, #16
 23fd708:	bd70      	pop	{r4, r5, r6, pc}

023fd70a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fd70a:	9800      	ldr	r0, [sp, #0]
 23fd70c:	4290      	cmp	r0, r2
 23fd70e:	bf14      	ite	ne
 23fd710:	2001      	movne	r0, #1
 23fd712:	2006      	moveq	r0, #6
 23fd714:	4770      	bx	lr
	...

023fd718 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fd718:	4b03      	ldr	r3, [pc, #12]	; (23fd728 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fd71a:	b510      	push	{r4, lr}
 23fd71c:	4604      	mov	r4, r0
 23fd71e:	6003      	str	r3, [r0, #0]
 23fd720:	f000 f8cd 	bl	23fd8be <_ZNSt9type_infoD1Ev>
 23fd724:	4620      	mov	r0, r4
 23fd726:	bd10      	pop	{r4, pc}
 23fd728:	023ffd44 	.word	0x023ffd44

023fd72c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fd72c:	b510      	push	{r4, lr}
 23fd72e:	4604      	mov	r4, r0
 23fd730:	f7ff fff2 	bl	23fd718 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fd734:	2108      	movs	r1, #8
 23fd736:	4620      	mov	r0, r4
 23fd738:	f7fa fac5 	bl	23f7cc6 <_ZdlPvj>
 23fd73c:	4620      	mov	r0, r4
 23fd73e:	bd10      	pop	{r4, pc}

023fd740 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fd740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd744:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fd748:	461f      	mov	r7, r3
 23fd74a:	4606      	mov	r6, r0
 23fd74c:	4615      	mov	r5, r2
 23fd74e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fd752:	4598      	cmp	r8, r3
 23fd754:	d107      	bne.n	23fd766 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fd756:	9907      	ldr	r1, [sp, #28]
 23fd758:	f000 f8b4 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd75c:	b118      	cbz	r0, 23fd766 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fd75e:	7165      	strb	r5, [r4, #5]
 23fd760:	2000      	movs	r0, #0
 23fd762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd766:	4639      	mov	r1, r7
 23fd768:	4630      	mov	r0, r6
 23fd76a:	f000 f8ab 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd76e:	2800      	cmp	r0, #0
 23fd770:	d0f6      	beq.n	23fd760 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fd772:	2301      	movs	r3, #1
 23fd774:	f8c4 8000 	str.w	r8, [r4]
 23fd778:	7125      	strb	r5, [r4, #4]
 23fd77a:	71a3      	strb	r3, [r4, #6]
 23fd77c:	e7f0      	b.n	23fd760 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fd77e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fd77e:	b538      	push	{r3, r4, r5, lr}
 23fd780:	4615      	mov	r5, r2
 23fd782:	461c      	mov	r4, r3
 23fd784:	f000 f89e 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd788:	b120      	cbz	r0, 23fd794 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fd78a:	2308      	movs	r3, #8
 23fd78c:	6025      	str	r5, [r4, #0]
 23fd78e:	60e3      	str	r3, [r4, #12]
 23fd790:	2306      	movs	r3, #6
 23fd792:	7123      	strb	r3, [r4, #4]
 23fd794:	bd38      	pop	{r3, r4, r5, pc}

023fd796 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fd796:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd798:	4605      	mov	r5, r0
 23fd79a:	460c      	mov	r4, r1
 23fd79c:	461e      	mov	r6, r3
 23fd79e:	9201      	str	r2, [sp, #4]
 23fd7a0:	f000 f890 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd7a4:	b950      	cbnz	r0, 23fd7bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fd7a6:	2e03      	cmp	r6, #3
 23fd7a8:	d808      	bhi.n	23fd7bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fd7aa:	6823      	ldr	r3, [r4, #0]
 23fd7ac:	4629      	mov	r1, r5
 23fd7ae:	9a01      	ldr	r2, [sp, #4]
 23fd7b0:	4620      	mov	r0, r4
 23fd7b2:	695b      	ldr	r3, [r3, #20]
 23fd7b4:	b002      	add	sp, #8
 23fd7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fd7ba:	4718      	bx	r3
 23fd7bc:	b002      	add	sp, #8
 23fd7be:	bd70      	pop	{r4, r5, r6, pc}

023fd7c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fd7c0:	4b03      	ldr	r3, [pc, #12]	; (23fd7d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fd7c2:	b510      	push	{r4, lr}
 23fd7c4:	4604      	mov	r4, r0
 23fd7c6:	6003      	str	r3, [r0, #0]
 23fd7c8:	f7ff ffa6 	bl	23fd718 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fd7cc:	4620      	mov	r0, r4
 23fd7ce:	bd10      	pop	{r4, pc}
 23fd7d0:	023ffda4 	.word	0x023ffda4

023fd7d4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fd7d4:	b510      	push	{r4, lr}
 23fd7d6:	4604      	mov	r4, r0
 23fd7d8:	f7ff fff2 	bl	23fd7c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fd7dc:	210c      	movs	r1, #12
 23fd7de:	4620      	mov	r0, r4
 23fd7e0:	f7fa fa71 	bl	23f7cc6 <_ZdlPvj>
 23fd7e4:	4620      	mov	r0, r4
 23fd7e6:	bd10      	pop	{r4, pc}

023fd7e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fd7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fd7ea:	9f08      	ldr	r7, [sp, #32]
 23fd7ec:	4605      	mov	r5, r0
 23fd7ee:	460e      	mov	r6, r1
 23fd7f0:	4614      	mov	r4, r2
 23fd7f2:	4297      	cmp	r7, r2
 23fd7f4:	d00a      	beq.n	23fd80c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fd7f6:	68a8      	ldr	r0, [r5, #8]
 23fd7f8:	4631      	mov	r1, r6
 23fd7fa:	6802      	ldr	r2, [r0, #0]
 23fd7fc:	9708      	str	r7, [sp, #32]
 23fd7fe:	6a15      	ldr	r5, [r2, #32]
 23fd800:	4622      	mov	r2, r4
 23fd802:	46ac      	mov	ip, r5
 23fd804:	b003      	add	sp, #12
 23fd806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd80a:	4760      	bx	ip
 23fd80c:	4619      	mov	r1, r3
 23fd80e:	9301      	str	r3, [sp, #4]
 23fd810:	f000 f858 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd814:	9b01      	ldr	r3, [sp, #4]
 23fd816:	2800      	cmp	r0, #0
 23fd818:	d0ed      	beq.n	23fd7f6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fd81a:	2006      	movs	r0, #6
 23fd81c:	b003      	add	sp, #12
 23fd81e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd820 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fd820:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd824:	460d      	mov	r5, r1
 23fd826:	4619      	mov	r1, r3
 23fd828:	4681      	mov	r9, r0
 23fd82a:	4617      	mov	r7, r2
 23fd82c:	4698      	mov	r8, r3
 23fd82e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fd832:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fd836:	f000 f845 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd83a:	b190      	cbz	r0, 23fd862 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fd83c:	2d00      	cmp	r5, #0
 23fd83e:	6034      	str	r4, [r6, #0]
 23fd840:	7137      	strb	r7, [r6, #4]
 23fd842:	db09      	blt.n	23fd858 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fd844:	1961      	adds	r1, r4, r5
 23fd846:	458a      	cmp	sl, r1
 23fd848:	bf0c      	ite	eq
 23fd84a:	2106      	moveq	r1, #6
 23fd84c:	2101      	movne	r1, #1
 23fd84e:	71b1      	strb	r1, [r6, #6]
 23fd850:	2000      	movs	r0, #0
 23fd852:	b001      	add	sp, #4
 23fd854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd858:	3502      	adds	r5, #2
 23fd85a:	d1f9      	bne.n	23fd850 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd85c:	2301      	movs	r3, #1
 23fd85e:	71b3      	strb	r3, [r6, #6]
 23fd860:	e7f6      	b.n	23fd850 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd862:	4554      	cmp	r4, sl
 23fd864:	d106      	bne.n	23fd874 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd866:	4659      	mov	r1, fp
 23fd868:	4648      	mov	r0, r9
 23fd86a:	f000 f82b 	bl	23fd8c4 <_ZNKSt9type_infoeqERKS_>
 23fd86e:	b108      	cbz	r0, 23fd874 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd870:	7177      	strb	r7, [r6, #5]
 23fd872:	e7ed      	b.n	23fd850 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd874:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fd878:	463a      	mov	r2, r7
 23fd87a:	4629      	mov	r1, r5
 23fd87c:	6803      	ldr	r3, [r0, #0]
 23fd87e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fd882:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fd886:	69dc      	ldr	r4, [r3, #28]
 23fd888:	4643      	mov	r3, r8
 23fd88a:	46a4      	mov	ip, r4
 23fd88c:	b001      	add	sp, #4
 23fd88e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd892:	4760      	bx	ip

023fd894 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fd894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd898:	4607      	mov	r7, r0
 23fd89a:	460c      	mov	r4, r1
 23fd89c:	4615      	mov	r5, r2
 23fd89e:	461e      	mov	r6, r3
 23fd8a0:	f7ff ff6d 	bl	23fd77e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fd8a4:	b948      	cbnz	r0, 23fd8ba <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fd8a6:	68b8      	ldr	r0, [r7, #8]
 23fd8a8:	462a      	mov	r2, r5
 23fd8aa:	4621      	mov	r1, r4
 23fd8ac:	6803      	ldr	r3, [r0, #0]
 23fd8ae:	699f      	ldr	r7, [r3, #24]
 23fd8b0:	4633      	mov	r3, r6
 23fd8b2:	46bc      	mov	ip, r7
 23fd8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fd8b8:	4760      	bx	ip
 23fd8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd8be <_ZNSt9type_infoD1Ev>:
 23fd8be:	4770      	bx	lr

023fd8c0 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fd8c0:	2000      	movs	r0, #0
 23fd8c2:	4770      	bx	lr

023fd8c4 <_ZNKSt9type_infoeqERKS_>:
 23fd8c4:	4281      	cmp	r1, r0
 23fd8c6:	b508      	push	{r3, lr}
 23fd8c8:	d00e      	beq.n	23fd8e8 <_ZNKSt9type_infoeqERKS_+0x24>
 23fd8ca:	6840      	ldr	r0, [r0, #4]
 23fd8cc:	7803      	ldrb	r3, [r0, #0]
 23fd8ce:	2b2a      	cmp	r3, #42	; 0x2a
 23fd8d0:	d00c      	beq.n	23fd8ec <_ZNKSt9type_infoeqERKS_+0x28>
 23fd8d2:	6849      	ldr	r1, [r1, #4]
 23fd8d4:	780b      	ldrb	r3, [r1, #0]
 23fd8d6:	2b2a      	cmp	r3, #42	; 0x2a
 23fd8d8:	bf08      	it	eq
 23fd8da:	3101      	addeq	r1, #1
 23fd8dc:	f7fa f9c0 	bl	23f7c60 <strcmp>
 23fd8e0:	fab0 f080 	clz	r0, r0
 23fd8e4:	0940      	lsrs	r0, r0, #5
 23fd8e6:	bd08      	pop	{r3, pc}
 23fd8e8:	2001      	movs	r0, #1
 23fd8ea:	e7fc      	b.n	23fd8e6 <_ZNKSt9type_infoeqERKS_+0x22>
 23fd8ec:	2000      	movs	r0, #0
 23fd8ee:	e7fa      	b.n	23fd8e6 <_ZNKSt9type_infoeqERKS_+0x22>

023fd8f0 <atexit>:
 23fd8f0:	2300      	movs	r3, #0
 23fd8f2:	4601      	mov	r1, r0
 23fd8f4:	461a      	mov	r2, r3
 23fd8f6:	4618      	mov	r0, r3
 23fd8f8:	f000 b958 	b.w	23fdbac <__register_exitproc>

023fd8fc <isprint>:
 23fd8fc:	4b02      	ldr	r3, [pc, #8]	; (23fd908 <isprint+0xc>)
 23fd8fe:	4418      	add	r0, r3
 23fd900:	7840      	ldrb	r0, [r0, #1]
 23fd902:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fd906:	4770      	bx	lr
 23fd908:	023ffe71 	.word	0x023ffe71

023fd90c <__retarget_lock_acquire_recursive>:
 23fd90c:	4770      	bx	lr

023fd90e <__retarget_lock_release>:
 23fd90e:	4770      	bx	lr

023fd910 <__retarget_lock_release_recursive>:
 23fd910:	4770      	bx	lr

023fd912 <memcmp>:
 23fd912:	3901      	subs	r1, #1
 23fd914:	4402      	add	r2, r0
 23fd916:	b510      	push	{r4, lr}
 23fd918:	4290      	cmp	r0, r2
 23fd91a:	d101      	bne.n	23fd920 <memcmp+0xe>
 23fd91c:	2000      	movs	r0, #0
 23fd91e:	e005      	b.n	23fd92c <memcmp+0x1a>
 23fd920:	7803      	ldrb	r3, [r0, #0]
 23fd922:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fd926:	42a3      	cmp	r3, r4
 23fd928:	d001      	beq.n	23fd92e <memcmp+0x1c>
 23fd92a:	1b18      	subs	r0, r3, r4
 23fd92c:	bd10      	pop	{r4, pc}
 23fd92e:	3001      	adds	r0, #1
 23fd930:	e7f2      	b.n	23fd918 <memcmp+0x6>

023fd932 <memcpy>:
 23fd932:	440a      	add	r2, r1
 23fd934:	1e43      	subs	r3, r0, #1
 23fd936:	4291      	cmp	r1, r2
 23fd938:	d100      	bne.n	23fd93c <memcpy+0xa>
 23fd93a:	4770      	bx	lr
 23fd93c:	b510      	push	{r4, lr}
 23fd93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fd942:	4291      	cmp	r1, r2
 23fd944:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fd948:	d1f9      	bne.n	23fd93e <memcpy+0xc>
 23fd94a:	bd10      	pop	{r4, pc}

023fd94c <memmove>:
 23fd94c:	4288      	cmp	r0, r1
 23fd94e:	b510      	push	{r4, lr}
 23fd950:	eb01 0402 	add.w	r4, r1, r2
 23fd954:	d902      	bls.n	23fd95c <memmove+0x10>
 23fd956:	4284      	cmp	r4, r0
 23fd958:	4623      	mov	r3, r4
 23fd95a:	d807      	bhi.n	23fd96c <memmove+0x20>
 23fd95c:	1e43      	subs	r3, r0, #1
 23fd95e:	42a1      	cmp	r1, r4
 23fd960:	d008      	beq.n	23fd974 <memmove+0x28>
 23fd962:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd966:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fd96a:	e7f8      	b.n	23fd95e <memmove+0x12>
 23fd96c:	4402      	add	r2, r0
 23fd96e:	4601      	mov	r1, r0
 23fd970:	428a      	cmp	r2, r1
 23fd972:	d100      	bne.n	23fd976 <memmove+0x2a>
 23fd974:	bd10      	pop	{r4, pc}
 23fd976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fd97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fd97e:	e7f7      	b.n	23fd970 <memmove+0x24>

023fd980 <memset>:
 23fd980:	4402      	add	r2, r0
 23fd982:	4603      	mov	r3, r0
 23fd984:	4293      	cmp	r3, r2
 23fd986:	d100      	bne.n	23fd98a <memset+0xa>
 23fd988:	4770      	bx	lr
 23fd98a:	f803 1b01 	strb.w	r1, [r3], #1
 23fd98e:	e7f9      	b.n	23fd984 <memset+0x4>

023fd990 <srand>:
 23fd990:	b538      	push	{r3, r4, r5, lr}
 23fd992:	4b10      	ldr	r3, [pc, #64]	; (23fd9d4 <srand+0x44>)
 23fd994:	4604      	mov	r4, r0
 23fd996:	681d      	ldr	r5, [r3, #0]
 23fd998:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd99a:	b9b3      	cbnz	r3, 23fd9ca <srand+0x3a>
 23fd99c:	2018      	movs	r0, #24
 23fd99e:	f7fb fc21 	bl	23f91e4 <malloc>
 23fd9a2:	4602      	mov	r2, r0
 23fd9a4:	63a8      	str	r0, [r5, #56]	; 0x38
 23fd9a6:	b920      	cbnz	r0, 23fd9b2 <srand+0x22>
 23fd9a8:	4b0b      	ldr	r3, [pc, #44]	; (23fd9d8 <srand+0x48>)
 23fd9aa:	2142      	movs	r1, #66	; 0x42
 23fd9ac:	480b      	ldr	r0, [pc, #44]	; (23fd9dc <srand+0x4c>)
 23fd9ae:	f7fb fc6d 	bl	23f928c <__assert_func>
 23fd9b2:	490b      	ldr	r1, [pc, #44]	; (23fd9e0 <srand+0x50>)
 23fd9b4:	4b0b      	ldr	r3, [pc, #44]	; (23fd9e4 <srand+0x54>)
 23fd9b6:	e9c0 1300 	strd	r1, r3, [r0]
 23fd9ba:	4b0b      	ldr	r3, [pc, #44]	; (23fd9e8 <srand+0x58>)
 23fd9bc:	2100      	movs	r1, #0
 23fd9be:	6083      	str	r3, [r0, #8]
 23fd9c0:	230b      	movs	r3, #11
 23fd9c2:	8183      	strh	r3, [r0, #12]
 23fd9c4:	2001      	movs	r0, #1
 23fd9c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fd9ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd9cc:	2200      	movs	r2, #0
 23fd9ce:	611c      	str	r4, [r3, #16]
 23fd9d0:	615a      	str	r2, [r3, #20]
 23fd9d2:	bd38      	pop	{r3, r4, r5, pc}
 23fd9d4:	1007a080 	.word	0x1007a080
 23fd9d8:	023ffddd 	.word	0x023ffddd
 23fd9dc:	023ffdf4 	.word	0x023ffdf4
 23fd9e0:	abcd330e 	.word	0xabcd330e
 23fd9e4:	e66d1234 	.word	0xe66d1234
 23fd9e8:	0005deec 	.word	0x0005deec

023fd9ec <strchr>:
 23fd9ec:	b2c9      	uxtb	r1, r1
 23fd9ee:	4603      	mov	r3, r0
 23fd9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fd9f4:	b11a      	cbz	r2, 23fd9fe <strchr+0x12>
 23fd9f6:	428a      	cmp	r2, r1
 23fd9f8:	d1f9      	bne.n	23fd9ee <strchr+0x2>
 23fd9fa:	4618      	mov	r0, r3
 23fd9fc:	4770      	bx	lr
 23fd9fe:	2900      	cmp	r1, #0
 23fda00:	bf18      	it	ne
 23fda02:	2300      	movne	r3, #0
 23fda04:	e7f9      	b.n	23fd9fa <strchr+0xe>

023fda06 <strchrnul>:
 23fda06:	b510      	push	{r4, lr}
 23fda08:	4604      	mov	r4, r0
 23fda0a:	f7ff ffef 	bl	23fd9ec <strchr>
 23fda0e:	b918      	cbnz	r0, 23fda18 <strchrnul+0x12>
 23fda10:	4620      	mov	r0, r4
 23fda12:	f7fa f92f 	bl	23f7c74 <strlen>
 23fda16:	4420      	add	r0, r4
 23fda18:	bd10      	pop	{r4, pc}

023fda1a <strcpy>:
 23fda1a:	4603      	mov	r3, r0
 23fda1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fda20:	f803 2b01 	strb.w	r2, [r3], #1
 23fda24:	2a00      	cmp	r2, #0
 23fda26:	d1f9      	bne.n	23fda1c <strcpy+0x2>
 23fda28:	4770      	bx	lr

023fda2a <strncmp>:
 23fda2a:	b510      	push	{r4, lr}
 23fda2c:	b17a      	cbz	r2, 23fda4e <strncmp+0x24>
 23fda2e:	4603      	mov	r3, r0
 23fda30:	3901      	subs	r1, #1
 23fda32:	1884      	adds	r4, r0, r2
 23fda34:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fda38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fda3c:	4290      	cmp	r0, r2
 23fda3e:	d101      	bne.n	23fda44 <strncmp+0x1a>
 23fda40:	42a3      	cmp	r3, r4
 23fda42:	d101      	bne.n	23fda48 <strncmp+0x1e>
 23fda44:	1a80      	subs	r0, r0, r2
 23fda46:	bd10      	pop	{r4, pc}
 23fda48:	2800      	cmp	r0, #0
 23fda4a:	d1f3      	bne.n	23fda34 <strncmp+0xa>
 23fda4c:	e7fa      	b.n	23fda44 <strncmp+0x1a>
 23fda4e:	4610      	mov	r0, r2
 23fda50:	e7f9      	b.n	23fda46 <strncmp+0x1c>

023fda52 <strnlen>:
 23fda52:	4602      	mov	r2, r0
 23fda54:	4401      	add	r1, r0
 23fda56:	b510      	push	{r4, lr}
 23fda58:	428a      	cmp	r2, r1
 23fda5a:	4613      	mov	r3, r2
 23fda5c:	d003      	beq.n	23fda66 <strnlen+0x14>
 23fda5e:	781c      	ldrb	r4, [r3, #0]
 23fda60:	3201      	adds	r2, #1
 23fda62:	2c00      	cmp	r4, #0
 23fda64:	d1f8      	bne.n	23fda58 <strnlen+0x6>
 23fda66:	1a18      	subs	r0, r3, r0
 23fda68:	bd10      	pop	{r4, pc}

023fda6a <strrchr>:
 23fda6a:	b538      	push	{r3, r4, r5, lr}
 23fda6c:	4603      	mov	r3, r0
 23fda6e:	460c      	mov	r4, r1
 23fda70:	b969      	cbnz	r1, 23fda8e <strrchr+0x24>
 23fda72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fda76:	f7ff bfb9 	b.w	23fd9ec <strchr>
 23fda7a:	1c43      	adds	r3, r0, #1
 23fda7c:	4605      	mov	r5, r0
 23fda7e:	4621      	mov	r1, r4
 23fda80:	4618      	mov	r0, r3
 23fda82:	f7ff ffb3 	bl	23fd9ec <strchr>
 23fda86:	2800      	cmp	r0, #0
 23fda88:	d1f7      	bne.n	23fda7a <strrchr+0x10>
 23fda8a:	4628      	mov	r0, r5
 23fda8c:	bd38      	pop	{r3, r4, r5, pc}
 23fda8e:	2500      	movs	r5, #0
 23fda90:	e7f5      	b.n	23fda7e <strrchr+0x14>
	...

023fda94 <_strtol_l.constprop.0>:
 23fda94:	2b01      	cmp	r3, #1
 23fda96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fda9a:	d001      	beq.n	23fdaa0 <_strtol_l.constprop.0+0xc>
 23fda9c:	2b24      	cmp	r3, #36	; 0x24
 23fda9e:	d906      	bls.n	23fdaae <_strtol_l.constprop.0+0x1a>
 23fdaa0:	f7fb fbe6 	bl	23f9270 <__errno>
 23fdaa4:	2316      	movs	r3, #22
 23fdaa6:	6003      	str	r3, [r0, #0]
 23fdaa8:	2000      	movs	r0, #0
 23fdaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fdaae:	460d      	mov	r5, r1
 23fdab0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fdb94 <_strtol_l.constprop.0+0x100>
 23fdab4:	462e      	mov	r6, r5
 23fdab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdaba:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fdabe:	f017 0708 	ands.w	r7, r7, #8
 23fdac2:	d1f7      	bne.n	23fdab4 <_strtol_l.constprop.0+0x20>
 23fdac4:	2c2d      	cmp	r4, #45	; 0x2d
 23fdac6:	d132      	bne.n	23fdb2e <_strtol_l.constprop.0+0x9a>
 23fdac8:	782c      	ldrb	r4, [r5, #0]
 23fdaca:	2701      	movs	r7, #1
 23fdacc:	1cb5      	adds	r5, r6, #2
 23fdace:	2b00      	cmp	r3, #0
 23fdad0:	d05b      	beq.n	23fdb8a <_strtol_l.constprop.0+0xf6>
 23fdad2:	2b10      	cmp	r3, #16
 23fdad4:	d109      	bne.n	23fdaea <_strtol_l.constprop.0+0x56>
 23fdad6:	2c30      	cmp	r4, #48	; 0x30
 23fdad8:	d107      	bne.n	23fdaea <_strtol_l.constprop.0+0x56>
 23fdada:	782c      	ldrb	r4, [r5, #0]
 23fdadc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fdae0:	2c58      	cmp	r4, #88	; 0x58
 23fdae2:	d14d      	bne.n	23fdb80 <_strtol_l.constprop.0+0xec>
 23fdae4:	786c      	ldrb	r4, [r5, #1]
 23fdae6:	2310      	movs	r3, #16
 23fdae8:	3502      	adds	r5, #2
 23fdaea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fdaee:	f04f 0c00 	mov.w	ip, #0
 23fdaf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fdaf6:	4666      	mov	r6, ip
 23fdaf8:	fbb8 f9f3 	udiv	r9, r8, r3
 23fdafc:	fb03 8a19 	mls	sl, r3, r9, r8
 23fdb00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fdb04:	f1be 0f09 	cmp.w	lr, #9
 23fdb08:	d816      	bhi.n	23fdb38 <_strtol_l.constprop.0+0xa4>
 23fdb0a:	4674      	mov	r4, lr
 23fdb0c:	42a3      	cmp	r3, r4
 23fdb0e:	dd24      	ble.n	23fdb5a <_strtol_l.constprop.0+0xc6>
 23fdb10:	f1bc 0f00 	cmp.w	ip, #0
 23fdb14:	db1e      	blt.n	23fdb54 <_strtol_l.constprop.0+0xc0>
 23fdb16:	45b1      	cmp	r9, r6
 23fdb18:	d31c      	bcc.n	23fdb54 <_strtol_l.constprop.0+0xc0>
 23fdb1a:	d101      	bne.n	23fdb20 <_strtol_l.constprop.0+0x8c>
 23fdb1c:	45a2      	cmp	sl, r4
 23fdb1e:	db19      	blt.n	23fdb54 <_strtol_l.constprop.0+0xc0>
 23fdb20:	fb06 4603 	mla	r6, r6, r3, r4
 23fdb24:	f04f 0c01 	mov.w	ip, #1
 23fdb28:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdb2c:	e7e8      	b.n	23fdb00 <_strtol_l.constprop.0+0x6c>
 23fdb2e:	2c2b      	cmp	r4, #43	; 0x2b
 23fdb30:	bf04      	itt	eq
 23fdb32:	782c      	ldrbeq	r4, [r5, #0]
 23fdb34:	1cb5      	addeq	r5, r6, #2
 23fdb36:	e7ca      	b.n	23fdace <_strtol_l.constprop.0+0x3a>
 23fdb38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fdb3c:	f1be 0f19 	cmp.w	lr, #25
 23fdb40:	d801      	bhi.n	23fdb46 <_strtol_l.constprop.0+0xb2>
 23fdb42:	3c37      	subs	r4, #55	; 0x37
 23fdb44:	e7e2      	b.n	23fdb0c <_strtol_l.constprop.0+0x78>
 23fdb46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fdb4a:	f1be 0f19 	cmp.w	lr, #25
 23fdb4e:	d804      	bhi.n	23fdb5a <_strtol_l.constprop.0+0xc6>
 23fdb50:	3c57      	subs	r4, #87	; 0x57
 23fdb52:	e7db      	b.n	23fdb0c <_strtol_l.constprop.0+0x78>
 23fdb54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fdb58:	e7e6      	b.n	23fdb28 <_strtol_l.constprop.0+0x94>
 23fdb5a:	f1bc 0f00 	cmp.w	ip, #0
 23fdb5e:	da05      	bge.n	23fdb6c <_strtol_l.constprop.0+0xd8>
 23fdb60:	2322      	movs	r3, #34	; 0x22
 23fdb62:	4646      	mov	r6, r8
 23fdb64:	6003      	str	r3, [r0, #0]
 23fdb66:	b942      	cbnz	r2, 23fdb7a <_strtol_l.constprop.0+0xe6>
 23fdb68:	4630      	mov	r0, r6
 23fdb6a:	e79e      	b.n	23fdaaa <_strtol_l.constprop.0+0x16>
 23fdb6c:	b107      	cbz	r7, 23fdb70 <_strtol_l.constprop.0+0xdc>
 23fdb6e:	4276      	negs	r6, r6
 23fdb70:	2a00      	cmp	r2, #0
 23fdb72:	d0f9      	beq.n	23fdb68 <_strtol_l.constprop.0+0xd4>
 23fdb74:	f1bc 0f00 	cmp.w	ip, #0
 23fdb78:	d000      	beq.n	23fdb7c <_strtol_l.constprop.0+0xe8>
 23fdb7a:	1e69      	subs	r1, r5, #1
 23fdb7c:	6011      	str	r1, [r2, #0]
 23fdb7e:	e7f3      	b.n	23fdb68 <_strtol_l.constprop.0+0xd4>
 23fdb80:	2430      	movs	r4, #48	; 0x30
 23fdb82:	2b00      	cmp	r3, #0
 23fdb84:	d1b1      	bne.n	23fdaea <_strtol_l.constprop.0+0x56>
 23fdb86:	2308      	movs	r3, #8
 23fdb88:	e7af      	b.n	23fdaea <_strtol_l.constprop.0+0x56>
 23fdb8a:	2c30      	cmp	r4, #48	; 0x30
 23fdb8c:	d0a5      	beq.n	23fdada <_strtol_l.constprop.0+0x46>
 23fdb8e:	230a      	movs	r3, #10
 23fdb90:	e7ab      	b.n	23fdaea <_strtol_l.constprop.0+0x56>
 23fdb92:	bf00      	nop
 23fdb94:	023ffe72 	.word	0x023ffe72

023fdb98 <strtol>:
 23fdb98:	4613      	mov	r3, r2
 23fdb9a:	460a      	mov	r2, r1
 23fdb9c:	4601      	mov	r1, r0
 23fdb9e:	4802      	ldr	r0, [pc, #8]	; (23fdba8 <strtol+0x10>)
 23fdba0:	6800      	ldr	r0, [r0, #0]
 23fdba2:	f7ff bf77 	b.w	23fda94 <_strtol_l.constprop.0>
 23fdba6:	bf00      	nop
 23fdba8:	1007a080 	.word	0x1007a080

023fdbac <__register_exitproc>:
 23fdbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fdbb0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fdc70 <__register_exitproc+0xc4>
 23fdbb4:	4606      	mov	r6, r0
 23fdbb6:	461f      	mov	r7, r3
 23fdbb8:	460d      	mov	r5, r1
 23fdbba:	f8d8 0000 	ldr.w	r0, [r8]
 23fdbbe:	4691      	mov	r9, r2
 23fdbc0:	f7ff fea4 	bl	23fd90c <__retarget_lock_acquire_recursive>
 23fdbc4:	4b26      	ldr	r3, [pc, #152]	; (23fdc60 <__register_exitproc+0xb4>)
 23fdbc6:	681c      	ldr	r4, [r3, #0]
 23fdbc8:	b934      	cbnz	r4, 23fdbd8 <__register_exitproc+0x2c>
 23fdbca:	4c26      	ldr	r4, [pc, #152]	; (23fdc64 <__register_exitproc+0xb8>)
 23fdbcc:	601c      	str	r4, [r3, #0]
 23fdbce:	4b26      	ldr	r3, [pc, #152]	; (23fdc68 <__register_exitproc+0xbc>)
 23fdbd0:	b113      	cbz	r3, 23fdbd8 <__register_exitproc+0x2c>
 23fdbd2:	681b      	ldr	r3, [r3, #0]
 23fdbd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fdbd8:	6863      	ldr	r3, [r4, #4]
 23fdbda:	2b1f      	cmp	r3, #31
 23fdbdc:	dd07      	ble.n	23fdbee <__register_exitproc+0x42>
 23fdbde:	f8d8 0000 	ldr.w	r0, [r8]
 23fdbe2:	f7ff fe95 	bl	23fd910 <__retarget_lock_release_recursive>
 23fdbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fdbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fdbee:	b35e      	cbz	r6, 23fdc48 <__register_exitproc+0x9c>
 23fdbf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fdbf4:	b988      	cbnz	r0, 23fdc1a <__register_exitproc+0x6e>
 23fdbf6:	4b1d      	ldr	r3, [pc, #116]	; (23fdc6c <__register_exitproc+0xc0>)
 23fdbf8:	b923      	cbnz	r3, 23fdc04 <__register_exitproc+0x58>
 23fdbfa:	f8d8 0000 	ldr.w	r0, [r8]
 23fdbfe:	f7ff fe86 	bl	23fd90e <__retarget_lock_release>
 23fdc02:	e7f0      	b.n	23fdbe6 <__register_exitproc+0x3a>
 23fdc04:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fdc08:	f7fb faec 	bl	23f91e4 <malloc>
 23fdc0c:	2800      	cmp	r0, #0
 23fdc0e:	d0f4      	beq.n	23fdbfa <__register_exitproc+0x4e>
 23fdc10:	2300      	movs	r3, #0
 23fdc12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fdc16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fdc1a:	6863      	ldr	r3, [r4, #4]
 23fdc1c:	2201      	movs	r2, #1
 23fdc1e:	2e02      	cmp	r6, #2
 23fdc20:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fdc24:	fa02 f203 	lsl.w	r2, r2, r3
 23fdc28:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fdc2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fdc30:	ea43 0302 	orr.w	r3, r3, r2
 23fdc34:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fdc38:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fdc3c:	bf02      	ittt	eq
 23fdc3e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fdc42:	4313      	orreq	r3, r2
 23fdc44:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fdc48:	6863      	ldr	r3, [r4, #4]
 23fdc4a:	f8d8 0000 	ldr.w	r0, [r8]
 23fdc4e:	1c5a      	adds	r2, r3, #1
 23fdc50:	3302      	adds	r3, #2
 23fdc52:	6062      	str	r2, [r4, #4]
 23fdc54:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fdc58:	f7ff fe5a 	bl	23fd910 <__retarget_lock_release_recursive>
 23fdc5c:	2000      	movs	r0, #0
 23fdc5e:	e7c4      	b.n	23fdbea <__register_exitproc+0x3e>
 23fdc60:	1007affc 	.word	0x1007affc
 23fdc64:	1007af70 	.word	0x1007af70
 23fdc68:	00000000 	.word	0x00000000
 23fdc6c:	023f91e5 	.word	0x023f91e5
 23fdc70:	1007a0e4 	.word	0x1007a0e4
 23fdc74:	00000000 	.word	0x00000000

023fdc78 <__DelayUs_veneer>:
 23fdc78:	b401      	push	{r0}
 23fdc7a:	4802      	ldr	r0, [pc, #8]	; (23fdc84 <__DelayUs_veneer+0xc>)
 23fdc7c:	4684      	mov	ip, r0
 23fdc7e:	bc01      	pop	{r0}
 23fdc80:	4760      	bx	ip
 23fdc82:	bf00      	nop
 23fdc84:	1010a949 	.word	0x1010a949

023fdc88 <__io_assert_failed_veneer>:
 23fdc88:	b401      	push	{r0}
 23fdc8a:	4802      	ldr	r0, [pc, #8]	; (23fdc94 <__io_assert_failed_veneer+0xc>)
 23fdc8c:	4684      	mov	ip, r0
 23fdc8e:	bc01      	pop	{r0}
 23fdc90:	4760      	bx	ip
 23fdc92:	bf00      	nop
 23fdc94:	1010a871 	.word	0x1010a871

023fdc98 <__DelayMs_veneer>:
 23fdc98:	b401      	push	{r0}
 23fdc9a:	4802      	ldr	r0, [pc, #8]	; (23fdca4 <__DelayMs_veneer+0xc>)
 23fdc9c:	4684      	mov	ip, r0
 23fdc9e:	bc01      	pop	{r0}
 23fdca0:	4760      	bx	ip
 23fdca2:	bf00      	nop
 23fdca4:	1010a995 	.word	0x1010a995

023fdca8 <link_const_data_start>:
 23fdca8:	00000000 	.word	0x00000000
 23fdcac:	34fb0000 	.word	0x34fb0000
 23fdcb0:	00805f9b 	.word	0x00805f9b
 23fdcb4:	10008000 	.word	0x10008000
	...

023fdcc0 <dynalib_user>:
 23fdcc0:	023f7c85 023f7cad 023f7cb1 00000000     .|?..|?..|?.....
 23fdcd0:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fdce0:	6c617574 67644500 6d492065 736c7570     tual.Edge Impuls
 23fdcf0:	6e692065 65726566 2065636e 6e6e7572     e inference runn
 23fdd00:	66207265 5020726f 69747261 20656c63     er for Particle 
 23fdd10:	69766564 0d736563 4450000a 6564204d     devices...PDM de
 23fdd20:	65646f63 6e692072 65207469 253d7272     coder init err=%
 23fdd30:	6e490064 65726566 6e69636e 65732067     d.Inferencing se
 23fdd40:	6e697474 0a3a7367 6e490900 76726574     ttings:...Interv
 23fdd50:	203a6c61 66322e25 2e736d20 4609000a     al: %.2f ms....F
 23fdd60:	656d6172 7a697320 25203a65 09000a64     rame size: %d...
 23fdd70:	706d6153 6c20656c 74676e65 25203a68     Sample length: %
 23fdd80:	736d2064 09000a2e 202e6f4e 6320666f     d ms....No. of c
 23fdd90:	7373616c 203a7365 000a6425 6c696146     lasses: %d..Fail
 23fdda0:	74206465 7473206f 20747261 214d4450     ed to start PDM!
 23fddb0:	52524500 6f43203a 20646c75 20746f6e     .ERR: Could not 
 23fddc0:	6f6c6c61 65746163 64756120 62206f69     allocate audio b
 23fddd0:	65666675 73282072 20657a69 2c296425     uffer (size %d),
 23fdde0:	69687420 6f632073 20646c75 64206562      this could be d
 23fddf0:	74206575 6874206f 69772065 776f646e     ue to the window
 23fde00:	6e656c20 20687467 7920666f 2072756f      length of your 
 23fde10:	65646f6d 000a0d6c 6e616353 676e696e     model...Scanning
 23fde20:	0a2e2e2e 20642500 69766564 20736563     .....%d devices 
 23fde30:	6e756f66 45000a64 38303a46 3a41443a     found..EF:08:DA:
 23fde40:	303a3336 33463a34 63757300 73736563     63:04:F3.success
 23fde50:	6c6c7566 6f632079 63656e6e 21646574     fully connected!
 23fde60:	6e6f6300 7463656e 206e6f69 6c696166     .connection fail
 23fde70:	00006465                                ed..

023fde74 <_ZTVN5spark10LogHandlerE>:
	...
 23fde84:	023f7cd5 023f843d                       .|?.=.?.

023fde8c <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fde94:	023f8441 023f8475 023fa90d 023faab5     A.?.u.?...?...?.

023fdea4 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23fdea4:	00000001 ffffff80                       ........

023fdeac <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23fdeac:	00000001 00000000                       ........

023fdeb4 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23fdeb4:	00000001 00000000                       ........

023fdebc <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23fdebc:	00000010 00000000 00000000 00000000     ................
	...

023fdf00 <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23fdf00:	00000010 00000000 00000000 00000000     ................
	...

023fdf44 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23fdf44:	00000001 3b800000                       .......;

023fdf4c <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23fdf4c:	00000008 00000000 00000000 00000000     ................
	...

023fdf70 <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
 23fdf70:	00000008 00000000 00000000 00000000     ................
	...

023fdf94 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
 23fdf94:	00000001 ffffff80                       ........

023fdf9c <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
 23fdf9c:	00000001 ffffff80                       ........

023fdfa4 <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
 23fdfa4:	00000001 ffffff80                       ........

023fdfac <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
 23fdfac:	00000001 ffffff80                       ........

023fdfb4 <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
 23fdfb4:	00000001 ffffff80                       ........

023fdfbc <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
 23fdfbc:	00000001 ffffff80                       ........

023fdfc4 <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
 23fdfc4:	00000001 ffffff80                       ........

023fdfcc <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
 23fdfcc:	00000001 ffffff80                       ........

023fdfd4 <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
 23fdfd4:	00000001 ffffff80                       ........

023fdfdc <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
 23fdfdc:	00000001 0000003a                       ....:...

023fdfe4 <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
 23fdfe4:	00000001 ffffff80                       ........

023fdfec <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23fdfec:	00000001 39cc2375                       ....u#.9

023fdff4 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23fdff4:	00000001 3c348482                       ......4<

023fdffc <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23fdffc:	00000010 38efa6de 39193acf 39101135     .......8.:.95..9
 23fe00c:	38ea3ca0 394285e0 38d7b35e 3924564b     .<.8..B9^..8KV$9
 23fe01c:	38d9919c 38abaaaa 38b3eb00 391a7a88     ...8...8...8.z.9
 23fe02c:	3934ae76 3932aab8 38a6eef6 38c999a0     v.49..29...8...8
 23fe03c:	390bd79d                                ...9

023fe040 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23fe040:	00000010 3bbb2485 3bef4ff5 3be100a0     .....$.;.O.;...;
 23fe050:	3bb6ea03 3c17e6dc 3ba87078 3c005470     ...;...<xp.;pT.<
 23fe060:	3ba9e5ed 3b860daf 3b8c7f32 3bf1434b     ...;...;2..;KC.;
 23fe070:	3c0d17d4 3c0b8517 3b825b79 3b9d6da5     ...<...<y[.;.m.;
 23fe080:	3bda6767 00000000 00000000 00000000     gg.;............

023fe090 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23fe090:	00000001 00000001 00000063 00000028     ........c...(...

023fe0a0 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23fe0a0:	00000001 00000063 00000001 00000008     ....c...........

023fe0b0 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23fe0b0:	00000001 00000001 00000032 00000008     ........2.......

023fe0c0 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23fe0c0:	00000001 00000032 00000001 00000010     ....2...........

023fe0d0 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23fe0d0:	ffffffff 00000190 00000000 00000000     ................

023fe0e0 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23fe0e0:	ffffff09 000002c1 fffffb9f ffffff3b     ............;...
 23fe0f0:	ffffffca 00000253 fffffec4 fffffc2d     ....S.......-...
 23fe100:	000002eb 00000000 00000000 00000000     ................

023fe110 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
 23fe110:	fcbfe1ec 06f10d0b 0010fff8 d0efb9f4     ................
 23fe120:	0df1e80d 10ee070f 1f230505 e4ecec1e     ..........#.....
 23fe130:	03e10e10 050c0e07 fe1f0108 f3fdf60a     ................
 23fe140:	fbfe19f8 0ced120c 03201509 e8fbdb02     .......... .....
 23fe150:	0af9070d fef10b0e 1517ff0d e205f60e     ................
 23fe160:	19fa05ef 0af2021a 21160804 cef0edf0     ...........!....
 23fe170:	0af008dc 03e8030a 1814ff15 c7eef4ee     ................
 23fe180:	eceef4f1 fee90206 fb14120a caeee0f8     ................
 23fe190:	eae805f8 06b20c04 02210602 b406df00     ..........!.....
 23fe1a0:	f7eae70f f8de0804 0f2208f7 c207f211     ..........".....
 23fe1b0:	ec01fe1a 11e41009 0f1a06ff c0040513     ................
 23fe1c0:	f401050d 0eed16fd 0d110903 c50303fb     ................
 23fe1d0:	e7f409f4 06ee0e09 fd120d0b be06eaff     ................
 23fe1e0:	14f9fe08 11da0d0b 30fe1111 bbfcf30d     ...........0....
 23fe1f0:	0bfb0f14 0df3090d 1ff305fa dc00ed08     ................
 23fe200:	05e608fd 0afd0cf3 150e0806 f4fceef7     ................
 23fe210:	1cec1d0e 07eb0df5 2f120806 d3fad605     .........../....
 23fe220:	10e215f5 fae70b03 1f1bf90f f000f5fd     ................
 23fe230:	18ea13ee 04f9071a 170bfb06 eef90bff     ................
 23fe240:	03e9fbec 00070212 f81c0ffb e3f4f1e6     ................
 23fe250:	f3e2f2f1 02ee0f0f fe221afe c3f8dfee     ..........".....
 23fe260:	fedff6f0 00ed110c 03290d0d b1deccf8     ..........).....
 23fe270:	eae9f208 10f3170d fd280401 b1f1fb12     ..........(.....
 23fe280:	f001031b 14e318fa 09230507 bc11e510     ..........#.....
 23fe290:	e2f6fdfc 0de7fc02 0d29fafa d5f8ebf3     ..........).....
 23fe2a0:	15b0fdd1 fbaceee8 161cfbd1 01bca5f0     ................
 23fe2b0:	188118d1 f5b0e7f3 150ff5bb 18bc96f8     ................
 23fe2c0:	16a72ad5 f2b8efd0 1305e2bc 0ec082df     .*..............
 23fe2d0:	159d1de6 e0c6f3c2 0407f2d1 18d0b6ef     ................
 23fe2e0:	13ea1fd9 dadfd4c9 0ddfeedf 19e4b6ec     ................
 23fe2f0:	0ced21f4 e1e0c1db 0af2f6eb 24e5be07     .!.............$
 23fe300:	0cdb17f2 dad4f4c8 0bfef8e2 06d4caed     ................
 23fe310:	1ae116f5 e2e8d9b4 09e8eee9 10d0b0ea     ................
 23fe320:	0ecc1103 dcd0f1c9 11f6f5f0 13d1b9f8     ................
 23fe330:	0d091f07 e1c3f4b8 14e0e5cf 1c050615     ................
 23fe340:	10fa1f0e edd8e3b2 14f3e8de 1afcfddb     ................
 23fe350:	13b72bd1 d0c7e0e5 11fce7e1 1699a5e6     .+..............
 23fe360:	0bb622dd d7ccd9bb 09e3f8cf 08c3b8d4     ."..............
 23fe370:	15ae22c5 d1bfdbdf 16f4e7e6 13b49cf6     ."..............
 23fe380:	12bd1fed dad5cae7 1400f0e0 11ce9ef7     ................
 23fe390:	0d1b2707 dbe1dfb6 08f6f5dc 1909dbe3     .'..............
 23fe3a0:	0c060df5 cfd2d4af 0afe03e1 0f10e1e3     ................
 23fe3b0:	15ff09e6 cbbfdba9 1104fecd 1be6c3f1     ................
 23fe3c0:	13da20f2 d3d9c9c8 0d02f3e4 12eeadf9     . ..............
 23fe3d0:	1b061ee1 ddddeccd 1016f6ef 14dab7f7     ................
 23fe3e0:	17e21df0 d4f3d3c7 0afcf8e6 11e5b401     ................
 23fe3f0:	0e021700 d3e5ce8c 07fbf5dc 10eedbd6     ................
 23fe400:	13ef17ef cfbdd5ba 14feffe4 15d3cbe6     ................
 23fe410:	07c635fb cebad1b0 1c17eddd 13da9fc1     .5..............
 23fe420:	0ce727d1 cdd3eedd 0a03f2e4 12c9c806     .'..............
 23fe430:	040ef5fc 1620de07 0c151806 05070cff     ...... .........
 23fe440:	f805f504 0e02dee1 f0ca1704 f8e409e6     ................
 23fe450:	dad8e60c 14fbe9e5 febf0318 d2fc13f7     ................
 23fe460:	f0f4e813 07f4ebe3 fed30108 eef80d00     ................
 23fe470:	02e5d612 0405e4d3 2313020b e00202f5     ...........#....
 23fe480:	fef6f70e 00fef7e6 1b0bfb04 db130f04     ................
 23fe490:	00e5e413 0a0100ee 150002fd f7081905     ................
 23fe4a0:	f0e2f51a 090e0b04 0b1211f9 e7111210     ................
 23fe4b0:	f8fde6fd 0311030b 100b0423 f8132202     ........#...."..
 23fe4c0:	f1f6fb14 0a18efe5 eed80b1b f30019fd     ................
 23fe4d0:	02effc06 0105efe0 14e5040b f3fa07fa     ................
 23fe4e0:	0cebf702 fdfde80d 14fbfd0f e7f6090a     ................
 23fe4f0:	fee4c410 0b090104 02fdf414 ea061bf5     ................
 23fe500:	f6fce405 15fcfbed 10070110 d00d16fb     ................
 23fe510:	ddf4df00 010df6e1 15080110 cdff13ff     ................
 23fe520:	08f1d407 0502ee10 3314020a e2fe152a     ...........3*...
 23fe530:	05e8e011 18140a0f 25021015 e1160b0c     ...........%....
 23fe540:	f4f5e802 090a0fe9 1719181f b80801ff     ................
 23fe550:	e8e7ed0a 06e800f1 1cff1509 b118f903     ................
 23fe560:	00e9f210 05f6efea 12eefc18 d0040806     ................
 23fe570:	efe5eb0e 05f9f4e2 14010601 d7060911     ................
 23fe580:	f201e510 01e6fdec 0ff5f90d d211031f     ................
 23fe590:	03e0dee6 06fae4f5 1dff09fe e6fc0c08     ................
 23fe5a0:	f4d2c2f0 0507e5f0 0af50d05 edf0f800     ................
 23fe5b0:	07070ad7 150de409 00111d0a e40a0df4     ................
 23fe5c0:	110d09f9 ea08f2e9 faf2dbfb 23f5f9cb     ...............#
 23fe5d0:	0f1f03d8 de0defe2 d6f0e4f6 20e1ffc6     ............... 
 23fe5e0:	0c1a10c3 eb05e90f ebe7e2e4 12e80bed     ................
 23fe5f0:	111009f6 f311e6f0 e3ea0ff5 10ef0fd5     ................
 23fe600:	0a0d0d10 020d0fe5 f40405f5 08f810da     ................
 23fe610:	fd10fe1a 0dfe10f0 cee1f3f3 f703f5ea     ................
 23fe620:	f106f9f9 fd01dbf4 d5d2fef8 0bf3f5f2     ................
 23fe630:	0123f5dd e4ffc5d7 bfea00ff 12e106bd     ..#.............
 23fe640:	ff0d12c5 ef05e51c d4f1f7fd 14e7eef0     ................
 23fe650:	061c03cf 0213ea10 f300fa04 2dd9f9cf     ...............-
 23fe660:	0f0e06d7 0d05f216 dceefbf4 11d103f7     ................
 23fe670:	ec150707 fb0cf611 c8f0fcfe 08ed03de     ................
 23fe680:	f6240aef f1fcf0e0 a7f6e9ec 09df10d9     ..$.............
 23fe690:	f81311d8 ea0fe8df ade6fbf1 0fdc05ba     ................
 23fe6a0:	1a1c19d9 df18d5ee d4daeaf9 0fee18bf     ................
 23fe6b0:	fb221222 f50e06bc c2e2e309 16e526fe     "."..........&..
 23fe6c0:	f111ff15 ff000abf d2e8f3f3 100517eb     ................
 23fe6d0:	002e09e8 f20ef8cd cce7f8f4 06f50dbf     ................
 23fe6e0:	ed05f1c1 f20fe6d8 b3effb02 08e401c1     ................
 23fe6f0:	fffe00d2 f508eee8 c7ee00f9 0cf1ebb3     ................
 23fe700:	f804ec0c f20beeee d0cdf4ee 0bf609ba     ................
 23fe710:	f517f6ef e90cfaf0 c8fc07f7 15fc18f1     ................
 23fe720:	132b16e7 fc19edec c2faebf7 150d16d4     ..+.............
 23fe730:	0b120bda eb1ce4e9 ceefe2f3 1bf1f6e5     ................
 23fe740:	0208fbfa f40debfa d4fb08ef 10ff09e0     ................
 23fe750:	fa0610ff 0a09090d e40e111b e5f7eded     ................
 23fe760:	d2f306e1 0d110a10 bc021315 d8f6f4ed     ................
 23fe770:	ebf0f4db 0e0bfb00 e5070e16 ecffddf9     ................
 23fe780:	f0eee5f8 0c04fd08 e6fb0717 e6e9fc0b     ................
 23fe790:	dbff12d5 fc05fe0a d00e0d1e eefa05eb     ................
 23fe7a0:	ddf1fbe0 fd030707 c20e0c17 ece4eae2     ................
 23fe7b0:	e3f8e1f4 11fb0103 c111060e e6d8e001     ................
 23fe7c0:	ee0603f7 0cfa040c 0c05090f f4fadd05     ................
 23fe7d0:	fceadff5 0a040002 f301080f ece4ece0     ................
 23fe7e0:	f3f40ed7 fefeff08 0ffb0e0e e6edcbe9     ................
 23fe7f0:	e500fadb fef8f200 f315090b e7e6dbf8     ................
 23fe800:	def1e80c 0706f70d f00e0d12 d720ed22     ............". .
 23fe810:	cc00030d 060b050a fc07fd16 e119de17     ................
 23fe820:	ecf000f6 070f0402 bb030714 03f5f010     ................
 23fe830:	e7fb11e7 06fa1209 f11e050e f1e1dbff     ................
 23fe840:	cdf102e3 fae70e09 f3050115 dce8ded5     ................
 23fe850:	d7edf1d7 ffe408ff dc00fe0b e8e2ede3     ................
 23fe860:	e8e8f31b 03fdf806 d6110809 e7fbf4fb     ................
 23fe870:	f905ec12 09041413 f60a0a0e ff01f6f8     ................
 23fe880:	fdf6f1ef 08f0fd00 ff060007 f2f6f30f     ................
 23fe890:	0bfc03ed 1301f816 1f070c14 ebedeef9     ................
 23fe8a0:	04d8f5d4 0f06050d fd09071a e4e1e8eb     ................
 23fe8b0:	f3e6ffe6 05e1f510 f6ff0c0c d9f1e6fb     ................
 23fe8c0:	f1edf5dd 0ee2ef0e e511161d cef8e3f5     ................
 23fe8d0:	20fc081e 09162920 f40a1921 da0a1724     ...  )..!...$...
 23fe8e0:	0bca1805 f3f6eafe 06d9e804 04fdd0fc     ................
 23fe8f0:	0ee01108 f713ec1c 0ecbf70b 14f6e004     ................
 23fe900:	03f800ff ff09eb0c 0be3e80e 10fbf809     ................
 23fe910:	16d10bfd fd0cf414 1709ddea 1b04e700     ................
 23fe920:	0af816f1 f40fef19 0605f8fb 08f5f506     ................
 23fe930:	11df23fb ed080210 0bf1ed0f 0df5f0f9     .#..............
 23fe940:	0dfcfe04 070ced02 0af3f50f 15e8ebf0     ................
 23fe950:	0ae8fdf2 f7030a13 0a08f104 0ccaefff     ................
 23fe960:	14dd05ef ec10d90b 0400e7f5 0ff7d9fc     ................
 23fe970:	09dd0c1a f40df512 061bdef7 13fff215     ................
 23fe980:	10d2fa09 ecf8e4f8 0cfadcea 0ffee805     ................
 23fe990:	0eda03f3 fff6eef9 15fcc9f5 0beff403     ................
 23fe9a0:	13db1804 edffe002 0fe6e30f 0c04da04     ................
 23fe9b0:	15f212fc e209c811 0bdfeaf6 11fcecff     ................
 23fe9c0:	0fe60207 ebf9e700 0ad8dbfa 11f9f510     ................
 23fe9d0:	0ad10905 fd05e104 13f3d4f9 0d1ce517     ................
 23fe9e0:	0fea0b07 f005eaef 07efe108 0ee1ebfc     ................
 23fe9f0:	12d90607 f202ed14 05d9eaf0 11eef1ff     ................
 23fea00:	0efa0b17 f404e0ed 0edccbfa 1304ef0a     ................
 23fea10:	0fe10606 f40bddf8 01d1dc02 16db0200     ................
 23fea20:	11ef0ff2 ee07e2ff fddbe305 1fe8e00b     ................
 23fea30:	18da02fe f406d5fb 01dee5fb 02f9d419     ................
 23fea40:	1ce10617 f20de9e6 14d6dc04 10fbfc07     ................
 23fea50:	0dfbfd07 e6fcddef 15e2e0f6 0f13ea05     ................
 23fea60:	09f3eff1 d4f1e7b5 04e4e5fe 1be3dfed     ................
 23fea70:	0811d4bc dc0addf4 101407eb f9fa1a12     ................
 23fea80:	0d0de0dd d00feff6 1e2c0aeb f5140a08     ..........,.....
 23fea90:	fe1be4d4 f11bf5fe 181211f3 f61403e5     ................
 23feaa0:	010cf1ca e10ef7f7 151a1503 f90b0aed     ................
 23feab0:	011ee0d1 f314ebf4 18eb09f8 f724130e     ..............$.
 23feac0:	0d0ce1c9 e00ef1e6 0cf908ff fffafc00     ................
 23fead0:	ff15d2da da0701f1 1712feea fd0ff7f4     ................
 23feae0:	100bfce1 ef12ed07 2407f8eb 000a160a     ...........$....
 23feaf0:	fcfaeaed e00cf6e3 fbfd0afe 010305f4     ................
 23feb00:	f30ff2c5 d810e2d2 ecf80f04 f81709d1     ................
 23feb10:	0713ddcf e61fe3d1 09f2170d fe1f0adc     ................
 23feb20:	f517dad1 df19d7e6 09f81ff2 00210cf0     ..............!.
 23feb30:	081fdfc0 cf0eecf3 262206fd 001a01da     .........."&....
 23feb40:	0208d9cf cb16e3f9 1423edf4 0a0a06f8     ..........#.....
 23feb50:	fd08e3d4 d502e2e3 07f8ef00 fd030ae7     ................
 23feb60:	0515e2d4 dd0bea03 fef805fc 01040b03     ................
 23feb70:	ff0aecde ed0ef0f0 01f2fcf7 05030501     ................
 23feb80:	010cebd0 dc0dede9 fe03f5f8 fe0d18e7     ................
 23feb90:	f71cd7d7 cf0bd9f6 05e30bfd 061b1400     ................
 23feba0:	fa0becdf ec08eddc 04fe04f2 090303ef     ................
 23febb0:	040de1eb ce07f8ee 180af9ee 06231d23     ............#.#.
 23febc0:	fb17efee f30ef2fe 0ce5ebe5 fc0203f3     ................
 23febd0:	f8fefcd7 c808f0df eaea10f4 f81b0ce4     ................
 23febe0:	fa09fcd4 d312e0d1 01ed1004 090914df     ................
 23febf0:	fa16fbd5 c602ecd8 fbe10700 0d0219e8     ................
 23fec00:	061bf506 f80407ea e8fae4eb ff0d2704     .............'..
 23fec10:	fd25f904 f20c15e8 fff8eee4 f52020f9     ..%..........  .
 23fec20:	e726fd02 f60108f4 e501e9fa fc0cf901     ..&.............
 23fec30:	f22f020a f01c07ef f004e2e6 fc021505     ../.............
 23fec40:	0419f30b f2fb08fb f4f9f4ee f4090508     ................
 23fec50:	ff1bd502 ff0800f9 ed09f0db fe0d0a07     ................
 23fec60:	f31c0d0b ef08fdf2 f607e5e6 fe131912     ................
 23fec70:	0222080d f216eff2 04dbebea 0f0f1800     ..".............
 23fec80:	f922f905 fb15f3e7 eef3f6fe f60d1607     ..".............
 23fec90:	fe26e704 f603f802 f70ae6fc 04091000     ..&.............
 23feca0:	f818f40b f3110212 06ecefef 07170d02     ................
 23fecb0:	fe1b00ff fb0dedfc ef08f4ff 0b040c00     ................
 23fecc0:	fe0c0b01 f4f1011b 051cf301 fdf40b0b     ................
 23fecd0:	0214f115 f90c01fa eb07fcf5 03100403     ................
 23fece0:	eb0cd806 fdfa01f8 cffbfbe2 ec0d0f00     ................
 23fecf0:	f628fcfe fa04fa12 d8edf5f3 fd020bf4     ..(.............
 23fed00:	fc1df9fc fb10f312 dcf5f5f0 01030707     ................
 23fed10:	f624fb13 f803f7ff e103f60d f41a15f0     ..$.............
 23fed20:	fd22f602 040509f7 f7fcf5f3 010afe0e     ..".............
 23fed30:	f526fd15 f8140eff ed07f7fd 071a1010     ..&.............
 23fed40:	0a25120c f41107f0 e5ee05f6 011b100a     ..%.............
 23fed50:	ff1d1706 f70af909 fddaf203 ff1d100f     ................
 23fed60:	fc1ef70d f614f303 eee3e2fa 0012180d     ................
 23fed70:	f514100b 0104e216 f000f2f7 fd111a1f     ................
 23fed80:	f506000b f3050209 ec01f0fa 05fcf4f4     ................
 23fed90:	cce8e432 05dd17f3 f2caf3e3 ea13081b     2...............
 23feda0:	c5d9ee0f 03be12e6 dbcafcd0 d90f0909     ................
 23fedb0:	cbf3040f 06b40405 f0d0f1fa cf16f71f     ................
 23fedc0:	dbf20311 04d30a00 eefef7f4 ef18f412     ................
 23fedd0:	d0fc0416 02cf150a d9d203ef d705e404     ................
 23fede0:	e1fefd19 0bef17ed ecc3eecb e8fbfd0f     ................
 23fedf0:	c9f2eb0d 07d619f7 f1e2f1db e50a110f     ................
 23fee00:	e1effe09 04e11603 f5eafbdd ee040807     ................
 23fee10:	d6e1f511 feee1005 e0d5f7da db01f80d     ................
 23fee20:	ddedfc15 03dd0cf5 f0e001da e7fe010f     ................
 23fee30:	d4d6fc12 06d40f19 d5dffffc e4faf9fc     ................
 23fee40:	bfebf3fe 03d30b05 d9e1fdfa df01f802     ................
 23fee50:	c0ebfe12 01befc0a e4d909ee d9fd0609     ................
 23fee60:	bef6ff0a 08df0b07 e5f5feea d10a0705     ................
 23fee70:	dbdff516 fdef090a e7ed03ed e70b0a0e     ................
 23fee80:	d8e4ff00 06cd0507 f1dcfeef e505fd0e     ................
 23fee90:	caef010a 0ace0e18 dde2010f dafbf8f3     ................
 23feea0:	cbf1f502 fbd0160b d3cc10f1 d8f7e308     ................
 23feeb0:	c5e3f60c 0ced0eeb d1dbfaea ebf4fc02     ................
 23feec0:	b6dcf80f 04d70e10 cfe209eb d204f305     ................
 23feed0:	c7e3ed12 0ed51606 cdd301db c903f000     ................
 23feee0:	bec6000a 0cd816fb c7bd03ca d0ffff0f     ................
 23feef0:	bddaf80f 12dd0efe dee4f8e1 d405f306     ................
 23fef00:	d1e8ee05 16cf0f16 dfdf0de2 c1f6f308     ................
 23fef10:	f6d4f315 09c80be7 ffb401d4 f10cff0a     ................

023fef20 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
 23fef20:	000000c9 00000477 fffff725 000006fc     ....w...%.......
 23fef30:	fffffd79 0000012d fffff782 fffff497     y...-...........
 23fef40:	ffffec2f fffff0ad fffffd76 00000146     /.......v...F...
 23fef50:	fffffed7 ffffedfa fffff6e3 00000dde     ................

023fef60 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
 23fef60:	f71c5e03 ee9f00b4 e4b946f6 c1c102c3     .^.......F......
 23fef70:	e2ec7ffa e394fbb5 bad9aaf6 eccde414     ................
 23fef80:	8ff981fd 14f4e319 88f89444 05cfdbfa     ........D.......
 23fef90:	350a1808 dff896d3 49191853 f01a81d9     ...5....S..I....
 23fefa0:	00092af3 c8008ae3 a050c717 01c9e761     .*........P.a...
 23fefb0:	4735cd09 f6d7f342 c57ffde4 e60be04f     ..5GB.......O...
 23fefc0:	ea0ab2f2 102cef0b f12bbdf7 f8280e12     ......,...+...(.
 23fefd0:	0d7ffc03 0e132703 3be61693 14c9f3e7     .....'.....;....
 23fefe0:	fcbd4381 e59c3b29 3fbc5983 03a117f1     .C..);...Y.?....
 23feff0:	2d73113a 000905e8 e24c030d fcfbfdf0     :.s-......L.....
 23ff000:	477ffbf7 d8c401f0 a3fb52f5 0c7e32fb     ...G.....R...2~.
 23ff010:	1a364303 20711e36 d5e220fd fb7f113f     .C6.6.q . ..?...
 23ff020:	00fece48 5130ff15 0e81c21e 74a8fb1c     H.....0Q.......t
 23ff030:	eef6e118 1cd33a0f 6aefc31b e9293885     .....:.....j.8).
 23ff040:	ee93d314 f1e4fdc9 7fb3ec07 14cc3efb     .............>..
 23ff050:	7faee4ac ff4ffd4d 4ebee29c 1027f928     ....M.O....N(.'.
 23ff060:	5c9ee4ae 1f270a0e 39d9eaf6 ee24ed79     ...\..'....9y.$.
 23ff070:	0b3bd1f2 f529e77f 2ce1ddf1 f115e720     ..;...)...., ...
 23ff080:	17d81df4 ec3ef6fb fcc617f7 e80e06ef     ......>.........
 23ff090:	f97f48fa fe00ed0f 1caf1c2a bcddfe90     .H......*.......
 23ff0a0:	46c1547f b6c7cd99 517e66f0 d4ecbec2     .T.F.....f~Q....
 23ff0b0:	1f3050fd bbf506d4 424a7ff6 adfbecc0     .P0.......JB....
 23ff0c0:	58deee28 afb8d0e4 fc43094c dcbdc4f4     (..X....L.C.....
 23ff0d0:	db56ee12 d9cbc703 cc7fe5fe e3c6d8e9     ..V.............

023ff0e0 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23ff0e0:	00000008 3780c5af 37a12c38 37a4c0f8     .......78,.7...7
 23ff0f0:	378fc9ae 37ca219f 375cff74 37954a88     ...7.!.7t.\7.J.7
 23ff100:	3786a713                                ...7

023ff104 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
 23ff104:	00000008 3b80c5af 3ba12c38 3ba4c0f8     .......;8,.;...;
 23ff114:	3b8fc9ae 3bca219f 3b5cff74 3b954a88     ...;.!.;t.\;.J.;
 23ff124:	3b86a713                                ...;

023ff128 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
 23ff128:	00000001 3b800000                       .......;

023ff130 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
 23ff130:	00000001 3ca3ea2a                       ....*..<

023ff138 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
 23ff138:	00000001 3ca3ea2a                       ....*..<

023ff140 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
 23ff140:	00000001 3ca3ea2a                       ....*..<

023ff148 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
 23ff148:	00000001 3ca3ea2a                       ....*..<

023ff150 <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
 23ff150:	00000001 3d10bfb9                       .......=

023ff158 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
 23ff158:	00000001 3d10bfb9                       .......=

023ff160 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
 23ff160:	00000001 3d10bfb9                       .......=

023ff168 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
 23ff168:	00000001 3d10bfb9                       .......=

023ff170 <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
 23ff170:	00000001 3f071097                       .......?

023ff178 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
 23ff178:	00000001 3b800000                       .......;

023ff180 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
 23ff180:	0000154a 0000234c 00000c17 ffffe1e9     J...L#..........
 23ff190:	000033f4 ffff8ad8 fffff882 ffffa89f     .3..............

023ff1a0 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
 23ff1a0:	5116e3fe 23722912 b7efd6db ccbaa4dd     ...Q.)r#........
 23ff1b0:	10d7afcb 200ffe4b e5151816 490b1825     ....K.. ....%..I
 23ff1c0:	11524056 fd17fe1c 61d7b8ec 427b1027     V@R........a'.{B
 23ff1d0:	1e0fcdf8 e701f581 5ddad401 0413220d     ...........]."..
 23ff1e0:	073707f1 591a3040 2c2d312a e4e02e35     ..7.@0.Y*1-,5...
 23ff1f0:	3437b811 ff10e945 b6aff6d3 b0be91c3     ..74E...........
 23ff200:	16fa9ea3 02f1e147 0dd2e4f6 effb1cf5     ....G...........
 23ff210:	fe182a35 f4152bf3 4b562dad 5c0a7f31     5*...+...-VK1..\
 23ff220:	d8eff822 e72ce921 2c37ffc4 1d37e70d     "...!.,...7,..7.
 23ff230:	e3e0f605 c1f505e7 0ce7d4a9 ba11d7bd     ................
 23ff240:	27133803 5454673f e4e8e52e 05dde20c     .8.'?gTT........
 23ff250:	f7f5eff7 0a101f0c de0505d4 e3e519ed     ................
 23ff260:	e7dae6b1 a909eebe 064a0f13 3b57661d     ..........J..fW;
 23ff270:	0cd8fdec e702ee27 f62729e1 260202e2     ....'....)'....&
 23ff280:	19e83215 d108d8eb 10c99dc1 f2f8fbf6     .2..............
 23ff290:	e0bb3167 e9d5c2c2 cd04e28d e5a8e90e     g1..............
 23ff2a0:	1cfbdb49 ecdcee50 9ea0bdd0 02c0c6cf     I...P...........
 23ff2b0:	cd0b0bba 0b30cffe dae1f173 ca04ede9     ......0.s.......
 23ff2c0:	bd1fb4d5 d9ec08bc 2c01c6e4 d9c2072c     ...........,,...
 23ff2d0:	b696e998 02c2bfb2 aebef0b1 f2e7d2ae     ................
 23ff2e0:	01b7ce41 3d5d3a48 2e1a0f26 3135582b     A...H:]=&...+X51
 23ff2f0:	29601b3e 450a407f f8f8df27 4b594820     >.`).@.E'... HYK
 23ff300:	094c2a54 6c545043 09472b3b f720f943     T*L.CPTl;+G.C. .
 23ff310:	c3f7ec64 1c5408c7 e3486063 10f6fce0     d.....T.c`H.....
 23ff320:	0d3b1e13 414c257b 02dac7f3 0dcf2f00     ..;.{%LA...../..
 23ff330:	e8ffc6cf aef0e609 b4bff044 eb55c488     ........D.....U.
 23ff340:	dd22654f 04c1d3d1 0e27d2f6 4f54f54b     Oe".......'.K.TO
 23ff350:	e1b0abe7 e62c0c0d 01570c35 d4f91f2f     ......,.5.W./...
 23ff360:	ad131507 1b08ef81 e8194e37 e2a0d88e     ........7N......
 23ff370:	281fe1d6 f043ce56 d99395bc e5d3f809     ...(V.C.........
 23ff380:	c39add6c f1aee3bc 362cfddd 2d16381e     l.........,6.8.-
 23ff390:	e4d7d9ea 0dd3050d 24e5e818 16fbf029     ...........$)...
 23ff3a0:	ea0812f3 1af3f803 86d3f544 b7dad1c5     ........D.......
 23ff3b0:	2e39f8f5 feff3500 eff8fae4 23fd270c     ..9..5.......'.#
 23ff3c0:	fce90923 24e80c04 0a0df8e2 0ce0dff9     #......$........
 23ff3d0:	bb83d27f d5c1cea5 392feec6 0ff4421e     ........../9.B..
 23ff3e0:	fbedd7de f9e1121c 00cace22 e0170af9     ........".......
 23ff3f0:	13dc1d1b eef5ed26 0cca33eb f3c6caeb     ....&....3......
 23ff400:	75053112 2a266b63 0f140ee4 d84709c6     .1.uck&*......G.
 23ff410:	070499f4 51af11d4 fc22d62d f2110ffc     .......Q-.".....
 23ff420:	29f6f1ab f2d0bbeb 1ef8ee02 332e7f5f     ...)........_..3
 23ff430:	2152fc22 3b30f70c 18cfe7cc 11d2eb0f     ".R!..0;........
 23ff440:	e9dc01f8 d3d05417 e613f425 e2eadbeb     .....T..%.......
 23ff450:	5d433f28 3b1a7652 a919dc3f 2df24600     (?C]Rv.;?....F.-
 23ff460:	1526abec 4df7c60d c7d3a90f 3cfa0804     ..&....M.......<
 23ff470:	e7e72410 cce0e6cf f1d9c2dc 123ffbd5     .$............?.
 23ff480:	05507f2b 09ef05df 0c3e0cfc e003df05     +.P.......>.....
 23ff490:	f2a8ae10 e6e602bb ed20eb05 0f0c25ca     .......... ..%..
 23ff4a0:	15e30905 125c20c6 2e663523 f2e9c2e1     ..... \.#5f.....
 23ff4b0:	160e3be2 2825e1e3 faadf2d8 f4e0020f     .;....%(........
 23ff4c0:	b9bbd7f6 d7d0b5a0 c2c30220 ef16dcd5     ........ .......
 23ff4d0:	ee45274d ed0abbe3 f8e10212 05f814e6     M'E.............
 23ff4e0:	03cceff4 09d3bdc9 29f1cc24 0eced705     ........$..)....
 23ff4f0:	0d4bffe3 32f0dd4f f0ed2622 e0bf12e3     ..K.O..2"&......
 23ff500:	12dec809 0c041918 dafd3e58 f6ecf71a     ........X>......
 23ff510:	03b0ace7 2901a7b0 134d3902 1bdf0c48     .......).9M.H...
 23ff520:	db08f10c 030516f0 08d4cbe8 1ee7de07     ................
 23ff530:	0229225a 16cd1810 019a81ce fef0aab7     Z").............
 23ff540:	3f1e32e9 4c1b2516 f91e1f36 120925ef     .2.?.%.L6....%..
 23ff550:	12f30ac8 4e250eea 0be50617 21f3ede1     ......%N.......!

023ff560 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23ff560:	00000002 00000001 00000f78              ........x...

023ff56c <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23ff56c:	00000001 00000004                       ........

023ff574 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23ff574:	00000001 00000004                       ........

023ff57c <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23ff57c:	00000001 00000004                       ........

023ff584 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23ff584:	00000001 00000004                       ........

023ff58c <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23ff58c:	00000001 00000002                       ........

023ff594 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23ff594:	00000001 00000009                       ........

023ff59c <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23ff59c:	00000002 00000009 00000190              ............

023ff5a8 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23ff5a8:	00000001 00000010                       ........

023ff5b0 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23ff5b0:	00000004 00000010 00000001 00000003     ................
 23ff5c0:	00000008                                ....

023ff5c4 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23ff5c4:	00000001 00000008                       ........

023ff5cc <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
 23ff5cc:	00000004 00000008 00000001 00000003     ................
 23ff5dc:	00000028                                (...

023ff5e0 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
 23ff5e0:	00000004 00000001 00000001 00000063     ............c...
 23ff5f0:	00000028                                (...

023ff5f4 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
 23ff5f4:	00000004 00000001 00000001 00000063     ............c...
 23ff604:	00000008                                ....

023ff608 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
 23ff608:	00000004 00000001 00000063 00000001     ........c.......
 23ff618:	00000008                                ....

023ff61c <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
 23ff61c:	00000004 00000001 00000032 00000001     ........2.......
 23ff62c:	00000008                                ....

023ff630 <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
 23ff630:	00000004 00000001 00000001 00000032     ............2...
 23ff640:	00000008                                ....

023ff644 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
 23ff644:	00000004 00000001 00000001 00000032     ............2...
 23ff654:	00000010                                ....

023ff658 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
 23ff658:	00000004 00000001 00000032 00000001     ........2.......
 23ff668:	00000010                                ....

023ff66c <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
 23ff66c:	00000004 00000001 00000019 00000001     ................
 23ff67c:	00000010                                ....

023ff680 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
 23ff680:	00000002 00000001 00000190              ............

023ff68c <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
 23ff68c:	00000002 00000001 00000009              ............

023ff698 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
 23ff698:	00000002 00000001 00000009              ............

023ff6a4 <_ZN12_GLOBAL__N_1L6quant0E>:
 23ff6a4:	023fdf44 023fdea4 00000000              D.?...?.....

023ff6b0 <_ZN12_GLOBAL__N_1L6quant6E>:
 23ff6b0:	023fdfec 023fdeac 00000000              ..?...?.....

023ff6bc <_ZN12_GLOBAL__N_1L6quant7E>:
 23ff6bc:	023fdff4 023fdeb4 00000000              ..?...?.....

023ff6c8 <_ZN12_GLOBAL__N_1L6quant8E>:
 23ff6c8:	023fdffc 023fdebc 00000000              ..?...?.....

023ff6d4 <_ZN12_GLOBAL__N_1L6quant9E>:
 23ff6d4:	023fe040 023fdf00 00000000              @.?...?.....

023ff6e0 <_ZN12_GLOBAL__N_1L7quant10E>:
 23ff6e0:	023ff0e0 023fdf4c 00000000              ..?.L.?.....

023ff6ec <_ZN12_GLOBAL__N_1L7quant11E>:
 23ff6ec:	023ff104 023fdf70 00000000              ..?.p.?.....

023ff6f8 <_ZN12_GLOBAL__N_1L7quant12E>:
 23ff6f8:	023ff128 023fdf94 00000000              (.?...?.....

023ff704 <_ZN12_GLOBAL__N_1L7quant13E>:
 23ff704:	023ff130 023fdf9c 00000000              0.?...?.....

023ff710 <_ZN12_GLOBAL__N_1L7quant14E>:
 23ff710:	023ff138 023fdfa4 00000000              8.?...?.....

023ff71c <_ZN12_GLOBAL__N_1L7quant15E>:
 23ff71c:	023ff140 023fdfac 00000000              @.?...?.....

023ff728 <_ZN12_GLOBAL__N_1L7quant16E>:
 23ff728:	023ff148 023fdfb4 00000000              H.?...?.....

023ff734 <_ZN12_GLOBAL__N_1L7quant17E>:
 23ff734:	023ff150 023fdfbc 00000000              P.?...?.....

023ff740 <_ZN12_GLOBAL__N_1L7quant18E>:
 23ff740:	023ff158 023fdfc4 00000000              X.?...?.....

023ff74c <_ZN12_GLOBAL__N_1L7quant19E>:
 23ff74c:	023ff160 023fdfcc 00000000              `.?...?.....

023ff758 <_ZN12_GLOBAL__N_1L7quant20E>:
 23ff758:	023ff168 023fdfd4 00000000              h.?...?.....

023ff764 <_ZN12_GLOBAL__N_1L7quant21E>:
 23ff764:	023ff170 023fdfdc 00000000              p.?...?.....

023ff770 <_ZN12_GLOBAL__N_1L7quant22E>:
 23ff770:	023ff178 023fdfe4 00000000              x.?...?.....

023ff77c <_ZTV18Microphone_PDM_MCU>:
	...
 23ff784:	023f8875 023f8889 023f8851 023f89e9     u.?...?.Q.?...?.
 23ff794:	023f8855 023f8a11 023f89d3 023f8a21     U.?...?...?.!.?.
 23ff7a4:	023f8a33 023f8a61                       3.?.a.?.

023ff7ac <_ZTV14Microphone_PDM>:
	...
 23ff7b4:	023f889d 023f88b1 023f8851 023f8861     ..?...?.Q.?.a.?.
 23ff7c4:	023f885b 023f8865 023f8869 023f886d     [.?.e.?.i.?.m.?.
 23ff7d4:	023f8871 023f88c5                       q.?...?.

023ff7dc <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ff7e4:	023f89d1 023f89db 023f8851 023f89e9     ..?...?.Q.?...?.
 23ff7f4:	023f8855 023f8a11 023f89d3 023f8a21     U.?...?...?.!.?.
 23ff804:	023f8a33 023f8a61                       3.?.a.?.

023ff80c <_ZTVN5spark12NetworkClassE>:
	...
 23ff814:	023f92c5 023f92cf 023f92d9 023f92e3     ..?...?...?...?.
 23ff824:	023f92ed 023f92f9 023f9305 023f930d     ..?...?...?...?.
 23ff834:	023f9315 023f9321 023f9329 023f9333     ..?.!.?.).?.3.?.
 23ff844:	023f933d                                =.?.

023ff848 <_ZTVN5spark9WiFiClassE>:
	...
 23ff850:	023f9487 023f947d 023f9473 023f9429     ..?.}.?.s.?.).?.
 23ff860:	023f9467 023f945b 023f9305 023f930d     g.?.[.?...?...?.
 23ff870:	023f944f 023f9447 023f943d 023f9433     O.?.G.?.=.?.3.?.
 23ff880:	023f933d                                =.?.

023ff884 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ff88c <_ZTV11USARTSerial>:
	...
 23ff894:	023f94a5 023f9511 023f94e9 023fac61     ..?...?...?.a.?.
 23ff8a4:	023f94b9 023f94d5 023f94c7 023f94e3     ..?...?...?...?.
 23ff8b4:	023f94a7 023f94ab 75007525 78343025     ..?...?.%u.u%04x
 23ff8c4:	00000000                                ....

023ff8c8 <_ZTV9USBSerial>:
	...
 23ff8d0:	023f9953 023f99bb 023f9991 023fac61     S.?...?...?.a.?.
 23ff8e0:	023f9983 023f9955 023f9965 023f99b5     ..?.U.?.e.?...?.
 23ff8f0:	023f9975 023f994d                       u.?.M.?.

023ff8f8 <_ZTV9IPAddress>:
	...
 23ff900:	023f9a6d 023f9a5d 023f9a5f 252d5925     m.?.].?._.?.%Y-%
 23ff910:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ff920:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ff930:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ff940:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ff950:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ff960:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ff970:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ff980:	0066006d 66006e6c 0074006e 65646f63     m.f.ln.fn.t.code
 23ff990:	74656400 006c6961                       .detail.

023ff998 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ff9a0:	023f9ce1 023f9d07 023f9cc5 023f9591     ..?...?...?...?.

023ff9b0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ff9b8:	023fa1b9 023fa1d1 023fa90d 023faab5     ..?...?...?...?.

023ff9c8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ff9d0:	023fa1e5 023fa1f9 023faaed 023f9ccd     ..?...?...?...?.

023ff9e0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ff9e8:	023f9cdf 023f9d15 023fa871 023f9ccf     ..?...?.q.?...?.

023ff9f8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffa00:	023f9cdd 023f9d23 023fa0fd 023f9d45     ..?.#.?...?.E.?.
 23ffa10:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ffa20:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ffa30:	74530065 20747261 63736964 7265766f     e.Start discover
 23ffa40:	20676e69 76726573 73656369 7341002e     ing services..As
 23ffa50:	74726573 466e6f69 756c6961 68206572     sertionFailure h
 23ffa60:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
 23ffa70:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
 23ffa80:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
 23ffa90:	72656550 76656420 20656369 6d207369     Peer device is m
 23ffaa0:	69737369 0021676e 6c696146 74206465     issing!.Failed t
 23ffab0:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
 23ffac0:	46002179 656c6961 6f742064 70706120     y!.Failed to app
 23ffad0:	20646e65 72656570 6e654320 6c617274     end peer Central
 23ffae0:	76656420 2e656369 6e6f4300 7463656e      device..Connect
 23ffaf0:	62206465 65432079 6172746e 6564206c     ed by Central de
 23ffb00:	65636976 6944002e 6e6f6373 7463656e     vice..Disconnect
 23ffb10:	62206465 65722079 65746f6d 76656420     ed by remote dev
 23ffb20:	2e656369 69614600 2064656c 61206f74     ice..Failed to a
 23ffb30:	6e657070 69642064 766f6373 64657265     ppend discovered
 23ffb40:	72657320 65636976 7453002e 20747261      service..Start 
 23ffb50:	63736964 7265766f 20676e69 72616863     discovering char
 23ffb60:	65746361 74736972 20736369 7320666f     acteristics of s
 23ffb70:	69767265 203a6563 002e7325 6e6e6143     ervice: %s..Cann
 23ffb80:	6120746f 6e206464 70207765 20726565     ot add new peer 
 23ffb90:	69766564 002e6563 2077654e 69726570     device..New peri
 23ffba0:	72656870 69206c61 6f632073 63656e6e     pheral is connec
 23ffbb0:	2e646574 61684300 74636172 73697265     ted..Characteris
 23ffbc0:	20636974 63736964 7265766f 002e6465     tic discovered..
 23ffbd0:	63736944 7265766f 63206465 61726168     Discovered chara
 23ffbe0:	72657463 69747369 20732763 646e6168     cteristic's hand
 23ffbf0:	6920656c 6e692073 696c6176 46002e64     le is invalid..F
 23ffc00:	656c6961 6f742064 70706120 20646e65     ailed to append 
 23ffc10:	63736964 7265766f 63206465 61726168     discovered chara
 23ffc20:	72657463 69747369 00002e63              cteristic...

023ffc2c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc34:	023facf9 023fad5d 023fae7b 023fad87     ..?.].?.{.?...?.
 23ffc44:	023facfd                                ..?.

023ffc48 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc50:	023facf5 023fad6b 023facf7 023fad8d     ..?.k.?...?...?.
 23ffc60:	023fad1d                                ..?.

023ffc64 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc6c:	023facf3 023fad79 023fb767 023fad93     ..?.y.?.g.?...?.
 23ffc7c:	023fad3d                                =.?.

023ffc80 <_ZTVN5spark13EthernetClassE>:
	...
 23ffc88:	023fd1e3 023fd1d9 023fd1cf 023fd1c5     ..?...?...?...?.
 23ffc98:	023fd1b9 023fd1ad 023f9305 023f930d     ..?...?...?...?.
 23ffca8:	023fd1a1 023fd199 023fd18f 023fd185     ..?...?...?...?.
 23ffcb8:	023f933d                                =.?.

023ffcbc <AUDIO_DEV_TABLE>:
 23ffcbc:	40010800 0000000a 0000000b              ...@........

023ffcc8 <__FUNCTION__.0>:
 23ffcc8:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffcd8:	74696e49                                 Init.

023ffcdd <__FUNCTION__.4>:
 23ffcdd:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffceb <_ZSt7nothrow>:
	...

023ffcec <_ZTSSt19_Sp_make_shared_tag>:
 23ffcec:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffcfc:	5f646572 00676174                       red_tag.

023ffd04 <_ZTISt19_Sp_make_shared_tag>:
 23ffd04:	023ffd44 023ffcec                       D.?...?.

023ffd0c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd0c:	023ffda4 023ffd18 023ffdc8              ..?...?...?.

023ffd18 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd18:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd28:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd38:	00000045                                E...

023ffd3c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd3c:	00000000 023ffd0c 023fd719 023fd72d     ......?...?.-.?.
 23ffd4c:	023fd8c1 023fd8c1 023fd797 023fd6d9     ..?...?...?...?.
 23ffd5c:	023fd77f 023fd741 023fd70b              ..?.A.?...?.

023ffd68 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffd68:	023ffda4 023ffd74 023ffd0c              ..?.t.?...?.

023ffd74 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffd74:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffd84:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffd94:	456f666e 00000000                       nfoE....

023ffd9c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffd9c:	00000000 023ffd68 023fd7c1 023fd7d5     ....h.?...?...?.
 23ffdac:	023fd8c1 023fd8c1 023fd797 023fd6d9     ..?...?...?...?.
 23ffdbc:	023fd895 023fd821 023fd7e9              ..?.!.?...?.

023ffdc8 <_ZTISt9type_info>:
 23ffdc8:	023ffd44 023ffdd0                       D.?...?.

023ffdd0 <_ZTSSt9type_info>:
 23ffdd0:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffde0:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffdf0:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe00:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe10:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe20:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe30:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe40:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffe50:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffe60:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffe71 <_ctype_>:
 23ffe71:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffe81:	20202020 20202020 20202020 20202020                     
 23ffe91:	10108820 10101010 10101010 10101010      ...............
 23ffea1:	04040410 04040404 10040404 10101010     ................
 23ffeb1:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffec1:	01010101 01010101 01010101 10101010     ................
 23ffed1:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffee1:	02020202 02020202 02020202 10101010     ................
 23ffef1:	00000020 00000000 00000000 00000000      ...............
	...

023fff74 <__sf_fake_stderr>:
	...

023fff94 <__sf_fake_stdin>:
	...

023fffb4 <__sf_fake_stdout>:
	...

023fffd4 <link_const_data_end>:
 23fffd4:	023f8731 	.word	0x023f8731
 23fffd8:	023f87c5 	.word	0x023f87c5
 23fffdc:	023f8ad5 	.word	0x023f8ad5
 23fffe0:	023f9415 	.word	0x023f9415
 23fffe4:	023f9491 	.word	0x023f9491
 23fffe8:	023f9c9d 	.word	0x023f9c9d
 23fffec:	023f9cb1 	.word	0x023f9cb1
 23ffff0:	023fa8fd 	.word	0x023fa8fd
 23ffff4:	023fcf5d 	.word	0x023fcf5d
 23ffff8:	023fd161 	.word	0x023fd161
 23ffffc:	023fd1ed 	.word	0x023fd1ed
