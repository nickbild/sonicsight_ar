
/home/nick/software/visual_alert/visual_alerts_inferencing/target/5.4.1/p2/visual_alerts_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085eb000  085eb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085eb018  085eb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085eb0a4  085eb0a4  0000b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023ec5a8  085eb0b0  0000c5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   00013a44  023ec5b0  085eb0b8  0000c5b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  7 .data         00000308  1007996c  085feafc  0002996c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bdsram.data  00000800  10079c80  085fee04  00029c80  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  1007a480  1007a480  0003a480  2**5
                  ALLOC
 10 .secure_ram_text 00000000  1007e000  1007e000  00030000  2**0
                  CONTENTS
 11 .backup       00000004  1007b400  085ff604  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .module_info_suffix_align 000009b0  085ff608  085ff608  0002f608  2**0
                  ALLOC
 13 .module_info_product 00000006  085fffb8  085fffb8  0002f608  2**0
                  ALLOC
 14 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   001f2a92  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000240f0  00000000  00000000  00222a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000041d8  00000000  00000000  00246b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ad8f  00000000  00000000  0024ad5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00084579  00000000  00000000  00285ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0015762d  00000000  00000000  0030a062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00079daf  00000000  00000000  0046168f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00012618  00000000  00000000  004db43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000cdac  00000000  00000000  004eda58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085eb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85eb018:	4813      	ldr	r0, [pc, #76]	; (85eb068 <module_user_pre_init+0x50>)
 85eb01a:	4914      	ldr	r1, [pc, #80]	; (85eb06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85eb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85eb01e:	4288      	cmp	r0, r1
 85eb020:	d005      	beq.n	85eb02e <module_user_pre_init+0x16>
 85eb022:	4a13      	ldr	r2, [pc, #76]	; (85eb070 <module_user_pre_init+0x58>)
 85eb024:	4282      	cmp	r2, r0
 85eb026:	d002      	beq.n	85eb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85eb028:	4b12      	ldr	r3, [pc, #72]	; (85eb074 <module_user_pre_init+0x5c>)
 85eb02a:	1a12      	subs	r2, r2, r0
 85eb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85eb02e:	4812      	ldr	r0, [pc, #72]	; (85eb078 <module_user_pre_init+0x60>)
 85eb030:	4a12      	ldr	r2, [pc, #72]	; (85eb07c <module_user_pre_init+0x64>)
 85eb032:	2100      	movs	r1, #0
 85eb034:	4b12      	ldr	r3, [pc, #72]	; (85eb080 <module_user_pre_init+0x68>)
 85eb036:	1a12      	subs	r2, r2, r0
 85eb038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85eb03a:	4812      	ldr	r0, [pc, #72]	; (85eb084 <module_user_pre_init+0x6c>)
 85eb03c:	4912      	ldr	r1, [pc, #72]	; (85eb088 <module_user_pre_init+0x70>)
 85eb03e:	4288      	cmp	r0, r1
 85eb040:	d005      	beq.n	85eb04e <module_user_pre_init+0x36>
 85eb042:	4a12      	ldr	r2, [pc, #72]	; (85eb08c <module_user_pre_init+0x74>)
 85eb044:	4282      	cmp	r2, r0
 85eb046:	d002      	beq.n	85eb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85eb048:	4b0a      	ldr	r3, [pc, #40]	; (85eb074 <module_user_pre_init+0x5c>)
 85eb04a:	1a12      	subs	r2, r2, r0
 85eb04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85eb04e:	4810      	ldr	r0, [pc, #64]	; (85eb090 <module_user_pre_init+0x78>)
 85eb050:	4910      	ldr	r1, [pc, #64]	; (85eb094 <module_user_pre_init+0x7c>)
 85eb052:	4288      	cmp	r0, r1
 85eb054:	d005      	beq.n	85eb062 <module_user_pre_init+0x4a>
 85eb056:	4a10      	ldr	r2, [pc, #64]	; (85eb098 <module_user_pre_init+0x80>)
 85eb058:	4282      	cmp	r2, r0
 85eb05a:	d002      	beq.n	85eb062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85eb05c:	4b05      	ldr	r3, [pc, #20]	; (85eb074 <module_user_pre_init+0x5c>)
 85eb05e:	1a12      	subs	r2, r2, r0
 85eb060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85eb062:	4801      	ldr	r0, [pc, #4]	; (85eb068 <module_user_pre_init+0x50>)
 85eb064:	bd08      	pop	{r3, pc}
 85eb066:	bf00      	nop
 85eb068:	1007996c 	.word	0x1007996c
 85eb06c:	085feafc 	.word	0x085feafc
 85eb070:	10079c74 	.word	0x10079c74
 85eb074:	10110d2d 	.word	0x10110d2d
 85eb078:	1007a480 	.word	0x1007a480
 85eb07c:	1007aff4 	.word	0x1007aff4
 85eb080:	10110ea1 	.word	0x10110ea1
 85eb084:	023ec5a8 	.word	0x023ec5a8
 85eb088:	085eb0b0 	.word	0x085eb0b0
 85eb08c:	023ec5b0 	.word	0x023ec5b0
 85eb090:	023ec5b0 	.word	0x023ec5b0
 85eb094:	085eb0b8 	.word	0x085eb0b8
 85eb098:	023ffff4 	.word	0x023ffff4

085eb09c <dynalib_preinit>:
 85eb09c:	085eb019 00000000                       ..^.....

Disassembly of section .psram_text:

023ec5b0 <__aeabi_drsub>:
 23ec5b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23ec5b4:	e002      	b.n	23ec5bc <__adddf3>
 23ec5b6:	bf00      	nop

023ec5b8 <__aeabi_dsub>:
 23ec5b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023ec5bc <__adddf3>:
 23ec5bc:	b530      	push	{r4, r5, lr}
 23ec5be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23ec5c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23ec5c6:	ea94 0f05 	teq	r4, r5
 23ec5ca:	bf08      	it	eq
 23ec5cc:	ea90 0f02 	teqeq	r0, r2
 23ec5d0:	bf1f      	itttt	ne
 23ec5d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 23ec5d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 23ec5da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23ec5de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23ec5e2:	f000 80e2 	beq.w	23ec7aa <__adddf3+0x1ee>
 23ec5e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23ec5ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23ec5ee:	bfb8      	it	lt
 23ec5f0:	426d      	neglt	r5, r5
 23ec5f2:	dd0c      	ble.n	23ec60e <__adddf3+0x52>
 23ec5f4:	442c      	add	r4, r5
 23ec5f6:	ea80 0202 	eor.w	r2, r0, r2
 23ec5fa:	ea81 0303 	eor.w	r3, r1, r3
 23ec5fe:	ea82 0000 	eor.w	r0, r2, r0
 23ec602:	ea83 0101 	eor.w	r1, r3, r1
 23ec606:	ea80 0202 	eor.w	r2, r0, r2
 23ec60a:	ea81 0303 	eor.w	r3, r1, r3
 23ec60e:	2d36      	cmp	r5, #54	; 0x36
 23ec610:	bf88      	it	hi
 23ec612:	bd30      	pophi	{r4, r5, pc}
 23ec614:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23ec618:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23ec61c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23ec620:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23ec624:	d002      	beq.n	23ec62c <__adddf3+0x70>
 23ec626:	4240      	negs	r0, r0
 23ec628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ec62c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23ec630:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23ec634:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23ec638:	d002      	beq.n	23ec640 <__adddf3+0x84>
 23ec63a:	4252      	negs	r2, r2
 23ec63c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ec640:	ea94 0f05 	teq	r4, r5
 23ec644:	f000 80a7 	beq.w	23ec796 <__adddf3+0x1da>
 23ec648:	f1a4 0401 	sub.w	r4, r4, #1
 23ec64c:	f1d5 0e20 	rsbs	lr, r5, #32
 23ec650:	db0d      	blt.n	23ec66e <__adddf3+0xb2>
 23ec652:	fa02 fc0e 	lsl.w	ip, r2, lr
 23ec656:	fa22 f205 	lsr.w	r2, r2, r5
 23ec65a:	1880      	adds	r0, r0, r2
 23ec65c:	f141 0100 	adc.w	r1, r1, #0
 23ec660:	fa03 f20e 	lsl.w	r2, r3, lr
 23ec664:	1880      	adds	r0, r0, r2
 23ec666:	fa43 f305 	asr.w	r3, r3, r5
 23ec66a:	4159      	adcs	r1, r3
 23ec66c:	e00e      	b.n	23ec68c <__adddf3+0xd0>
 23ec66e:	f1a5 0520 	sub.w	r5, r5, #32
 23ec672:	f10e 0e20 	add.w	lr, lr, #32
 23ec676:	2a01      	cmp	r2, #1
 23ec678:	fa03 fc0e 	lsl.w	ip, r3, lr
 23ec67c:	bf28      	it	cs
 23ec67e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23ec682:	fa43 f305 	asr.w	r3, r3, r5
 23ec686:	18c0      	adds	r0, r0, r3
 23ec688:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23ec68c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23ec690:	d507      	bpl.n	23ec6a2 <__adddf3+0xe6>
 23ec692:	f04f 0e00 	mov.w	lr, #0
 23ec696:	f1dc 0c00 	rsbs	ip, ip, #0
 23ec69a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23ec69e:	eb6e 0101 	sbc.w	r1, lr, r1
 23ec6a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23ec6a6:	d31b      	bcc.n	23ec6e0 <__adddf3+0x124>
 23ec6a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23ec6ac:	d30c      	bcc.n	23ec6c8 <__adddf3+0x10c>
 23ec6ae:	0849      	lsrs	r1, r1, #1
 23ec6b0:	ea5f 0030 	movs.w	r0, r0, rrx
 23ec6b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23ec6b8:	f104 0401 	add.w	r4, r4, #1
 23ec6bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23ec6c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23ec6c4:	f080 809a 	bcs.w	23ec7fc <__adddf3+0x240>
 23ec6c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23ec6cc:	bf08      	it	eq
 23ec6ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23ec6d2:	f150 0000 	adcs.w	r0, r0, #0
 23ec6d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23ec6da:	ea41 0105 	orr.w	r1, r1, r5
 23ec6de:	bd30      	pop	{r4, r5, pc}
 23ec6e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23ec6e4:	4140      	adcs	r0, r0
 23ec6e6:	eb41 0101 	adc.w	r1, r1, r1
 23ec6ea:	3c01      	subs	r4, #1
 23ec6ec:	bf28      	it	cs
 23ec6ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23ec6f2:	d2e9      	bcs.n	23ec6c8 <__adddf3+0x10c>
 23ec6f4:	f091 0f00 	teq	r1, #0
 23ec6f8:	bf04      	itt	eq
 23ec6fa:	4601      	moveq	r1, r0
 23ec6fc:	2000      	moveq	r0, #0
 23ec6fe:	fab1 f381 	clz	r3, r1
 23ec702:	bf08      	it	eq
 23ec704:	3320      	addeq	r3, #32
 23ec706:	f1a3 030b 	sub.w	r3, r3, #11
 23ec70a:	f1b3 0220 	subs.w	r2, r3, #32
 23ec70e:	da0c      	bge.n	23ec72a <__adddf3+0x16e>
 23ec710:	320c      	adds	r2, #12
 23ec712:	dd08      	ble.n	23ec726 <__adddf3+0x16a>
 23ec714:	f102 0c14 	add.w	ip, r2, #20
 23ec718:	f1c2 020c 	rsb	r2, r2, #12
 23ec71c:	fa01 f00c 	lsl.w	r0, r1, ip
 23ec720:	fa21 f102 	lsr.w	r1, r1, r2
 23ec724:	e00c      	b.n	23ec740 <__adddf3+0x184>
 23ec726:	f102 0214 	add.w	r2, r2, #20
 23ec72a:	bfd8      	it	le
 23ec72c:	f1c2 0c20 	rsble	ip, r2, #32
 23ec730:	fa01 f102 	lsl.w	r1, r1, r2
 23ec734:	fa20 fc0c 	lsr.w	ip, r0, ip
 23ec738:	bfdc      	itt	le
 23ec73a:	ea41 010c 	orrle.w	r1, r1, ip
 23ec73e:	4090      	lslle	r0, r2
 23ec740:	1ae4      	subs	r4, r4, r3
 23ec742:	bfa2      	ittt	ge
 23ec744:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23ec748:	4329      	orrge	r1, r5
 23ec74a:	bd30      	popge	{r4, r5, pc}
 23ec74c:	ea6f 0404 	mvn.w	r4, r4
 23ec750:	3c1f      	subs	r4, #31
 23ec752:	da1c      	bge.n	23ec78e <__adddf3+0x1d2>
 23ec754:	340c      	adds	r4, #12
 23ec756:	dc0e      	bgt.n	23ec776 <__adddf3+0x1ba>
 23ec758:	f104 0414 	add.w	r4, r4, #20
 23ec75c:	f1c4 0220 	rsb	r2, r4, #32
 23ec760:	fa20 f004 	lsr.w	r0, r0, r4
 23ec764:	fa01 f302 	lsl.w	r3, r1, r2
 23ec768:	ea40 0003 	orr.w	r0, r0, r3
 23ec76c:	fa21 f304 	lsr.w	r3, r1, r4
 23ec770:	ea45 0103 	orr.w	r1, r5, r3
 23ec774:	bd30      	pop	{r4, r5, pc}
 23ec776:	f1c4 040c 	rsb	r4, r4, #12
 23ec77a:	f1c4 0220 	rsb	r2, r4, #32
 23ec77e:	fa20 f002 	lsr.w	r0, r0, r2
 23ec782:	fa01 f304 	lsl.w	r3, r1, r4
 23ec786:	ea40 0003 	orr.w	r0, r0, r3
 23ec78a:	4629      	mov	r1, r5
 23ec78c:	bd30      	pop	{r4, r5, pc}
 23ec78e:	fa21 f004 	lsr.w	r0, r1, r4
 23ec792:	4629      	mov	r1, r5
 23ec794:	bd30      	pop	{r4, r5, pc}
 23ec796:	f094 0f00 	teq	r4, #0
 23ec79a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23ec79e:	bf06      	itte	eq
 23ec7a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23ec7a4:	3401      	addeq	r4, #1
 23ec7a6:	3d01      	subne	r5, #1
 23ec7a8:	e74e      	b.n	23ec648 <__adddf3+0x8c>
 23ec7aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23ec7ae:	bf18      	it	ne
 23ec7b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23ec7b4:	d029      	beq.n	23ec80a <__adddf3+0x24e>
 23ec7b6:	ea94 0f05 	teq	r4, r5
 23ec7ba:	bf08      	it	eq
 23ec7bc:	ea90 0f02 	teqeq	r0, r2
 23ec7c0:	d005      	beq.n	23ec7ce <__adddf3+0x212>
 23ec7c2:	ea54 0c00 	orrs.w	ip, r4, r0
 23ec7c6:	bf04      	itt	eq
 23ec7c8:	4619      	moveq	r1, r3
 23ec7ca:	4610      	moveq	r0, r2
 23ec7cc:	bd30      	pop	{r4, r5, pc}
 23ec7ce:	ea91 0f03 	teq	r1, r3
 23ec7d2:	bf1e      	ittt	ne
 23ec7d4:	2100      	movne	r1, #0
 23ec7d6:	2000      	movne	r0, #0
 23ec7d8:	bd30      	popne	{r4, r5, pc}
 23ec7da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23ec7de:	d105      	bne.n	23ec7ec <__adddf3+0x230>
 23ec7e0:	0040      	lsls	r0, r0, #1
 23ec7e2:	4149      	adcs	r1, r1
 23ec7e4:	bf28      	it	cs
 23ec7e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23ec7ea:	bd30      	pop	{r4, r5, pc}
 23ec7ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23ec7f0:	bf3c      	itt	cc
 23ec7f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23ec7f6:	bd30      	popcc	{r4, r5, pc}
 23ec7f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23ec7fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23ec800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23ec804:	f04f 0000 	mov.w	r0, #0
 23ec808:	bd30      	pop	{r4, r5, pc}
 23ec80a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23ec80e:	bf1a      	itte	ne
 23ec810:	4619      	movne	r1, r3
 23ec812:	4610      	movne	r0, r2
 23ec814:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23ec818:	bf1c      	itt	ne
 23ec81a:	460b      	movne	r3, r1
 23ec81c:	4602      	movne	r2, r0
 23ec81e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23ec822:	bf06      	itte	eq
 23ec824:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23ec828:	ea91 0f03 	teqeq	r1, r3
 23ec82c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23ec830:	bd30      	pop	{r4, r5, pc}
 23ec832:	bf00      	nop

023ec834 <__aeabi_ui2d>:
 23ec834:	f090 0f00 	teq	r0, #0
 23ec838:	bf04      	itt	eq
 23ec83a:	2100      	moveq	r1, #0
 23ec83c:	4770      	bxeq	lr
 23ec83e:	b530      	push	{r4, r5, lr}
 23ec840:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23ec844:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23ec848:	f04f 0500 	mov.w	r5, #0
 23ec84c:	f04f 0100 	mov.w	r1, #0
 23ec850:	e750      	b.n	23ec6f4 <__adddf3+0x138>
 23ec852:	bf00      	nop

023ec854 <__aeabi_i2d>:
 23ec854:	f090 0f00 	teq	r0, #0
 23ec858:	bf04      	itt	eq
 23ec85a:	2100      	moveq	r1, #0
 23ec85c:	4770      	bxeq	lr
 23ec85e:	b530      	push	{r4, r5, lr}
 23ec860:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23ec864:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23ec868:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23ec86c:	bf48      	it	mi
 23ec86e:	4240      	negmi	r0, r0
 23ec870:	f04f 0100 	mov.w	r1, #0
 23ec874:	e73e      	b.n	23ec6f4 <__adddf3+0x138>
 23ec876:	bf00      	nop

023ec878 <__aeabi_f2d>:
 23ec878:	0042      	lsls	r2, r0, #1
 23ec87a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23ec87e:	ea4f 0131 	mov.w	r1, r1, rrx
 23ec882:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23ec886:	bf1f      	itttt	ne
 23ec888:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23ec88c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23ec890:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23ec894:	4770      	bxne	lr
 23ec896:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23ec89a:	bf08      	it	eq
 23ec89c:	4770      	bxeq	lr
 23ec89e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23ec8a2:	bf04      	itt	eq
 23ec8a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23ec8a8:	4770      	bxeq	lr
 23ec8aa:	b530      	push	{r4, r5, lr}
 23ec8ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 23ec8b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23ec8b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ec8b8:	e71c      	b.n	23ec6f4 <__adddf3+0x138>
 23ec8ba:	bf00      	nop

023ec8bc <__aeabi_ul2d>:
 23ec8bc:	ea50 0201 	orrs.w	r2, r0, r1
 23ec8c0:	bf08      	it	eq
 23ec8c2:	4770      	bxeq	lr
 23ec8c4:	b530      	push	{r4, r5, lr}
 23ec8c6:	f04f 0500 	mov.w	r5, #0
 23ec8ca:	e00a      	b.n	23ec8e2 <__aeabi_l2d+0x16>

023ec8cc <__aeabi_l2d>:
 23ec8cc:	ea50 0201 	orrs.w	r2, r0, r1
 23ec8d0:	bf08      	it	eq
 23ec8d2:	4770      	bxeq	lr
 23ec8d4:	b530      	push	{r4, r5, lr}
 23ec8d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23ec8da:	d502      	bpl.n	23ec8e2 <__aeabi_l2d+0x16>
 23ec8dc:	4240      	negs	r0, r0
 23ec8de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ec8e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23ec8e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23ec8ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23ec8ee:	f43f aed8 	beq.w	23ec6a2 <__adddf3+0xe6>
 23ec8f2:	f04f 0203 	mov.w	r2, #3
 23ec8f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23ec8fa:	bf18      	it	ne
 23ec8fc:	3203      	addne	r2, #3
 23ec8fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23ec902:	bf18      	it	ne
 23ec904:	3203      	addne	r2, #3
 23ec906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23ec90a:	f1c2 0320 	rsb	r3, r2, #32
 23ec90e:	fa00 fc03 	lsl.w	ip, r0, r3
 23ec912:	fa20 f002 	lsr.w	r0, r0, r2
 23ec916:	fa01 fe03 	lsl.w	lr, r1, r3
 23ec91a:	ea40 000e 	orr.w	r0, r0, lr
 23ec91e:	fa21 f102 	lsr.w	r1, r1, r2
 23ec922:	4414      	add	r4, r2
 23ec924:	e6bd      	b.n	23ec6a2 <__adddf3+0xe6>
 23ec926:	bf00      	nop

023ec928 <__aeabi_dmul>:
 23ec928:	b570      	push	{r4, r5, r6, lr}
 23ec92a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23ec92e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23ec932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23ec936:	bf1d      	ittte	ne
 23ec938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23ec93c:	ea94 0f0c 	teqne	r4, ip
 23ec940:	ea95 0f0c 	teqne	r5, ip
 23ec944:	f000 f8de 	bleq	23ecb04 <__aeabi_dmul+0x1dc>
 23ec948:	442c      	add	r4, r5
 23ec94a:	ea81 0603 	eor.w	r6, r1, r3
 23ec94e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23ec952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23ec956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23ec95a:	bf18      	it	ne
 23ec95c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23ec960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ec964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ec968:	d038      	beq.n	23ec9dc <__aeabi_dmul+0xb4>
 23ec96a:	fba0 ce02 	umull	ip, lr, r0, r2
 23ec96e:	f04f 0500 	mov.w	r5, #0
 23ec972:	fbe1 e502 	umlal	lr, r5, r1, r2
 23ec976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23ec97a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23ec97e:	f04f 0600 	mov.w	r6, #0
 23ec982:	fbe1 5603 	umlal	r5, r6, r1, r3
 23ec986:	f09c 0f00 	teq	ip, #0
 23ec98a:	bf18      	it	ne
 23ec98c:	f04e 0e01 	orrne.w	lr, lr, #1
 23ec990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23ec994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23ec998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23ec99c:	d204      	bcs.n	23ec9a8 <__aeabi_dmul+0x80>
 23ec99e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23ec9a2:	416d      	adcs	r5, r5
 23ec9a4:	eb46 0606 	adc.w	r6, r6, r6
 23ec9a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23ec9ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23ec9b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23ec9b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23ec9b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23ec9bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23ec9c0:	bf88      	it	hi
 23ec9c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23ec9c6:	d81e      	bhi.n	23eca06 <__aeabi_dmul+0xde>
 23ec9c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23ec9cc:	bf08      	it	eq
 23ec9ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23ec9d2:	f150 0000 	adcs.w	r0, r0, #0
 23ec9d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23ec9da:	bd70      	pop	{r4, r5, r6, pc}
 23ec9dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23ec9e0:	ea46 0101 	orr.w	r1, r6, r1
 23ec9e4:	ea40 0002 	orr.w	r0, r0, r2
 23ec9e8:	ea81 0103 	eor.w	r1, r1, r3
 23ec9ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23ec9f0:	bfc2      	ittt	gt
 23ec9f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 23ec9f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23ec9fa:	bd70      	popgt	{r4, r5, r6, pc}
 23ec9fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23eca00:	f04f 0e00 	mov.w	lr, #0
 23eca04:	3c01      	subs	r4, #1
 23eca06:	f300 80ab 	bgt.w	23ecb60 <__aeabi_dmul+0x238>
 23eca0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23eca0e:	bfde      	ittt	le
 23eca10:	2000      	movle	r0, #0
 23eca12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23eca16:	bd70      	pople	{r4, r5, r6, pc}
 23eca18:	f1c4 0400 	rsb	r4, r4, #0
 23eca1c:	3c20      	subs	r4, #32
 23eca1e:	da35      	bge.n	23eca8c <__aeabi_dmul+0x164>
 23eca20:	340c      	adds	r4, #12
 23eca22:	dc1b      	bgt.n	23eca5c <__aeabi_dmul+0x134>
 23eca24:	f104 0414 	add.w	r4, r4, #20
 23eca28:	f1c4 0520 	rsb	r5, r4, #32
 23eca2c:	fa00 f305 	lsl.w	r3, r0, r5
 23eca30:	fa20 f004 	lsr.w	r0, r0, r4
 23eca34:	fa01 f205 	lsl.w	r2, r1, r5
 23eca38:	ea40 0002 	orr.w	r0, r0, r2
 23eca3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23eca40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23eca44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23eca48:	fa21 f604 	lsr.w	r6, r1, r4
 23eca4c:	eb42 0106 	adc.w	r1, r2, r6
 23eca50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23eca54:	bf08      	it	eq
 23eca56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23eca5a:	bd70      	pop	{r4, r5, r6, pc}
 23eca5c:	f1c4 040c 	rsb	r4, r4, #12
 23eca60:	f1c4 0520 	rsb	r5, r4, #32
 23eca64:	fa00 f304 	lsl.w	r3, r0, r4
 23eca68:	fa20 f005 	lsr.w	r0, r0, r5
 23eca6c:	fa01 f204 	lsl.w	r2, r1, r4
 23eca70:	ea40 0002 	orr.w	r0, r0, r2
 23eca74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23eca78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23eca7c:	f141 0100 	adc.w	r1, r1, #0
 23eca80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23eca84:	bf08      	it	eq
 23eca86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23eca8a:	bd70      	pop	{r4, r5, r6, pc}
 23eca8c:	f1c4 0520 	rsb	r5, r4, #32
 23eca90:	fa00 f205 	lsl.w	r2, r0, r5
 23eca94:	ea4e 0e02 	orr.w	lr, lr, r2
 23eca98:	fa20 f304 	lsr.w	r3, r0, r4
 23eca9c:	fa01 f205 	lsl.w	r2, r1, r5
 23ecaa0:	ea43 0302 	orr.w	r3, r3, r2
 23ecaa4:	fa21 f004 	lsr.w	r0, r1, r4
 23ecaa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ecaac:	fa21 f204 	lsr.w	r2, r1, r4
 23ecab0:	ea20 0002 	bic.w	r0, r0, r2
 23ecab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23ecab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23ecabc:	bf08      	it	eq
 23ecabe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23ecac2:	bd70      	pop	{r4, r5, r6, pc}
 23ecac4:	f094 0f00 	teq	r4, #0
 23ecac8:	d10f      	bne.n	23ecaea <__aeabi_dmul+0x1c2>
 23ecaca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23ecace:	0040      	lsls	r0, r0, #1
 23ecad0:	eb41 0101 	adc.w	r1, r1, r1
 23ecad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23ecad8:	bf08      	it	eq
 23ecada:	3c01      	subeq	r4, #1
 23ecadc:	d0f7      	beq.n	23ecace <__aeabi_dmul+0x1a6>
 23ecade:	ea41 0106 	orr.w	r1, r1, r6
 23ecae2:	f095 0f00 	teq	r5, #0
 23ecae6:	bf18      	it	ne
 23ecae8:	4770      	bxne	lr
 23ecaea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23ecaee:	0052      	lsls	r2, r2, #1
 23ecaf0:	eb43 0303 	adc.w	r3, r3, r3
 23ecaf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23ecaf8:	bf08      	it	eq
 23ecafa:	3d01      	subeq	r5, #1
 23ecafc:	d0f7      	beq.n	23ecaee <__aeabi_dmul+0x1c6>
 23ecafe:	ea43 0306 	orr.w	r3, r3, r6
 23ecb02:	4770      	bx	lr
 23ecb04:	ea94 0f0c 	teq	r4, ip
 23ecb08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23ecb0c:	bf18      	it	ne
 23ecb0e:	ea95 0f0c 	teqne	r5, ip
 23ecb12:	d00c      	beq.n	23ecb2e <__aeabi_dmul+0x206>
 23ecb14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23ecb18:	bf18      	it	ne
 23ecb1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23ecb1e:	d1d1      	bne.n	23ecac4 <__aeabi_dmul+0x19c>
 23ecb20:	ea81 0103 	eor.w	r1, r1, r3
 23ecb24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ecb28:	f04f 0000 	mov.w	r0, #0
 23ecb2c:	bd70      	pop	{r4, r5, r6, pc}
 23ecb2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23ecb32:	bf06      	itte	eq
 23ecb34:	4610      	moveq	r0, r2
 23ecb36:	4619      	moveq	r1, r3
 23ecb38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23ecb3c:	d019      	beq.n	23ecb72 <__aeabi_dmul+0x24a>
 23ecb3e:	ea94 0f0c 	teq	r4, ip
 23ecb42:	d102      	bne.n	23ecb4a <__aeabi_dmul+0x222>
 23ecb44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23ecb48:	d113      	bne.n	23ecb72 <__aeabi_dmul+0x24a>
 23ecb4a:	ea95 0f0c 	teq	r5, ip
 23ecb4e:	d105      	bne.n	23ecb5c <__aeabi_dmul+0x234>
 23ecb50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23ecb54:	bf1c      	itt	ne
 23ecb56:	4610      	movne	r0, r2
 23ecb58:	4619      	movne	r1, r3
 23ecb5a:	d10a      	bne.n	23ecb72 <__aeabi_dmul+0x24a>
 23ecb5c:	ea81 0103 	eor.w	r1, r1, r3
 23ecb60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ecb64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23ecb68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23ecb6c:	f04f 0000 	mov.w	r0, #0
 23ecb70:	bd70      	pop	{r4, r5, r6, pc}
 23ecb72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23ecb76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23ecb7a:	bd70      	pop	{r4, r5, r6, pc}

023ecb7c <__aeabi_ddiv>:
 23ecb7c:	b570      	push	{r4, r5, r6, lr}
 23ecb7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23ecb82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23ecb86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23ecb8a:	bf1d      	ittte	ne
 23ecb8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23ecb90:	ea94 0f0c 	teqne	r4, ip
 23ecb94:	ea95 0f0c 	teqne	r5, ip
 23ecb98:	f000 f8a7 	bleq	23eccea <__aeabi_ddiv+0x16e>
 23ecb9c:	eba4 0405 	sub.w	r4, r4, r5
 23ecba0:	ea81 0e03 	eor.w	lr, r1, r3
 23ecba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23ecba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23ecbac:	f000 8088 	beq.w	23eccc0 <__aeabi_ddiv+0x144>
 23ecbb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23ecbb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23ecbb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23ecbbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23ecbc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23ecbc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23ecbc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23ecbcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23ecbd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23ecbd4:	429d      	cmp	r5, r3
 23ecbd6:	bf08      	it	eq
 23ecbd8:	4296      	cmpeq	r6, r2
 23ecbda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23ecbde:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23ecbe2:	d202      	bcs.n	23ecbea <__aeabi_ddiv+0x6e>
 23ecbe4:	085b      	lsrs	r3, r3, #1
 23ecbe6:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecbea:	1ab6      	subs	r6, r6, r2
 23ecbec:	eb65 0503 	sbc.w	r5, r5, r3
 23ecbf0:	085b      	lsrs	r3, r3, #1
 23ecbf2:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecbf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23ecbfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23ecbfe:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecc02:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecc06:	bf22      	ittt	cs
 23ecc08:	1ab6      	subcs	r6, r6, r2
 23ecc0a:	4675      	movcs	r5, lr
 23ecc0c:	ea40 000c 	orrcs.w	r0, r0, ip
 23ecc10:	085b      	lsrs	r3, r3, #1
 23ecc12:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecc16:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecc1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecc1e:	bf22      	ittt	cs
 23ecc20:	1ab6      	subcs	r6, r6, r2
 23ecc22:	4675      	movcs	r5, lr
 23ecc24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23ecc28:	085b      	lsrs	r3, r3, #1
 23ecc2a:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecc2e:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecc32:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecc36:	bf22      	ittt	cs
 23ecc38:	1ab6      	subcs	r6, r6, r2
 23ecc3a:	4675      	movcs	r5, lr
 23ecc3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23ecc40:	085b      	lsrs	r3, r3, #1
 23ecc42:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecc46:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecc4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecc4e:	bf22      	ittt	cs
 23ecc50:	1ab6      	subcs	r6, r6, r2
 23ecc52:	4675      	movcs	r5, lr
 23ecc54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23ecc58:	ea55 0e06 	orrs.w	lr, r5, r6
 23ecc5c:	d018      	beq.n	23ecc90 <__aeabi_ddiv+0x114>
 23ecc5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23ecc62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23ecc66:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23ecc6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23ecc6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23ecc72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23ecc76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23ecc7a:	d1c0      	bne.n	23ecbfe <__aeabi_ddiv+0x82>
 23ecc7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23ecc80:	d10b      	bne.n	23ecc9a <__aeabi_ddiv+0x11e>
 23ecc82:	ea41 0100 	orr.w	r1, r1, r0
 23ecc86:	f04f 0000 	mov.w	r0, #0
 23ecc8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23ecc8e:	e7b6      	b.n	23ecbfe <__aeabi_ddiv+0x82>
 23ecc90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23ecc94:	bf04      	itt	eq
 23ecc96:	4301      	orreq	r1, r0
 23ecc98:	2000      	moveq	r0, #0
 23ecc9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23ecc9e:	bf88      	it	hi
 23ecca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23ecca4:	f63f aeaf 	bhi.w	23eca06 <__aeabi_dmul+0xde>
 23ecca8:	ebb5 0c03 	subs.w	ip, r5, r3
 23eccac:	bf04      	itt	eq
 23eccae:	ebb6 0c02 	subseq.w	ip, r6, r2
 23eccb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23eccb6:	f150 0000 	adcs.w	r0, r0, #0
 23eccba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23eccbe:	bd70      	pop	{r4, r5, r6, pc}
 23eccc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23eccc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23eccc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23ecccc:	bfc2      	ittt	gt
 23eccce:	ebd4 050c 	rsbsgt	r5, r4, ip
 23eccd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23eccd6:	bd70      	popgt	{r4, r5, r6, pc}
 23eccd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23eccdc:	f04f 0e00 	mov.w	lr, #0
 23ecce0:	3c01      	subs	r4, #1
 23ecce2:	e690      	b.n	23eca06 <__aeabi_dmul+0xde>
 23ecce4:	ea45 0e06 	orr.w	lr, r5, r6
 23ecce8:	e68d      	b.n	23eca06 <__aeabi_dmul+0xde>
 23eccea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23eccee:	ea94 0f0c 	teq	r4, ip
 23eccf2:	bf08      	it	eq
 23eccf4:	ea95 0f0c 	teqeq	r5, ip
 23eccf8:	f43f af3b 	beq.w	23ecb72 <__aeabi_dmul+0x24a>
 23eccfc:	ea94 0f0c 	teq	r4, ip
 23ecd00:	d10a      	bne.n	23ecd18 <__aeabi_ddiv+0x19c>
 23ecd02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23ecd06:	f47f af34 	bne.w	23ecb72 <__aeabi_dmul+0x24a>
 23ecd0a:	ea95 0f0c 	teq	r5, ip
 23ecd0e:	f47f af25 	bne.w	23ecb5c <__aeabi_dmul+0x234>
 23ecd12:	4610      	mov	r0, r2
 23ecd14:	4619      	mov	r1, r3
 23ecd16:	e72c      	b.n	23ecb72 <__aeabi_dmul+0x24a>
 23ecd18:	ea95 0f0c 	teq	r5, ip
 23ecd1c:	d106      	bne.n	23ecd2c <__aeabi_ddiv+0x1b0>
 23ecd1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23ecd22:	f43f aefd 	beq.w	23ecb20 <__aeabi_dmul+0x1f8>
 23ecd26:	4610      	mov	r0, r2
 23ecd28:	4619      	mov	r1, r3
 23ecd2a:	e722      	b.n	23ecb72 <__aeabi_dmul+0x24a>
 23ecd2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23ecd30:	bf18      	it	ne
 23ecd32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23ecd36:	f47f aec5 	bne.w	23ecac4 <__aeabi_dmul+0x19c>
 23ecd3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23ecd3e:	f47f af0d 	bne.w	23ecb5c <__aeabi_dmul+0x234>
 23ecd42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23ecd46:	f47f aeeb 	bne.w	23ecb20 <__aeabi_dmul+0x1f8>
 23ecd4a:	e712      	b.n	23ecb72 <__aeabi_dmul+0x24a>

023ecd4c <__gedf2>:
 23ecd4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ecd50:	e006      	b.n	23ecd60 <__cmpdf2+0x4>
 23ecd52:	bf00      	nop

023ecd54 <__ledf2>:
 23ecd54:	f04f 0c01 	mov.w	ip, #1
 23ecd58:	e002      	b.n	23ecd60 <__cmpdf2+0x4>
 23ecd5a:	bf00      	nop

023ecd5c <__cmpdf2>:
 23ecd5c:	f04f 0c01 	mov.w	ip, #1
 23ecd60:	f84d cd04 	str.w	ip, [sp, #-4]!
 23ecd64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23ecd68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ecd6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23ecd70:	bf18      	it	ne
 23ecd72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23ecd76:	d01b      	beq.n	23ecdb0 <__cmpdf2+0x54>
 23ecd78:	b001      	add	sp, #4
 23ecd7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23ecd7e:	bf0c      	ite	eq
 23ecd80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23ecd84:	ea91 0f03 	teqne	r1, r3
 23ecd88:	bf02      	ittt	eq
 23ecd8a:	ea90 0f02 	teqeq	r0, r2
 23ecd8e:	2000      	moveq	r0, #0
 23ecd90:	4770      	bxeq	lr
 23ecd92:	f110 0f00 	cmn.w	r0, #0
 23ecd96:	ea91 0f03 	teq	r1, r3
 23ecd9a:	bf58      	it	pl
 23ecd9c:	4299      	cmppl	r1, r3
 23ecd9e:	bf08      	it	eq
 23ecda0:	4290      	cmpeq	r0, r2
 23ecda2:	bf2c      	ite	cs
 23ecda4:	17d8      	asrcs	r0, r3, #31
 23ecda6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23ecdaa:	f040 0001 	orr.w	r0, r0, #1
 23ecdae:	4770      	bx	lr
 23ecdb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23ecdb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ecdb8:	d102      	bne.n	23ecdc0 <__cmpdf2+0x64>
 23ecdba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23ecdbe:	d107      	bne.n	23ecdd0 <__cmpdf2+0x74>
 23ecdc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23ecdc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ecdc8:	d1d6      	bne.n	23ecd78 <__cmpdf2+0x1c>
 23ecdca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23ecdce:	d0d3      	beq.n	23ecd78 <__cmpdf2+0x1c>
 23ecdd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 23ecdd4:	4770      	bx	lr
 23ecdd6:	bf00      	nop

023ecdd8 <__aeabi_cdrcmple>:
 23ecdd8:	4684      	mov	ip, r0
 23ecdda:	4610      	mov	r0, r2
 23ecddc:	4662      	mov	r2, ip
 23ecdde:	468c      	mov	ip, r1
 23ecde0:	4619      	mov	r1, r3
 23ecde2:	4663      	mov	r3, ip
 23ecde4:	e000      	b.n	23ecde8 <__aeabi_cdcmpeq>
 23ecde6:	bf00      	nop

023ecde8 <__aeabi_cdcmpeq>:
 23ecde8:	b501      	push	{r0, lr}
 23ecdea:	f7ff ffb7 	bl	23ecd5c <__cmpdf2>
 23ecdee:	2800      	cmp	r0, #0
 23ecdf0:	bf48      	it	mi
 23ecdf2:	f110 0f00 	cmnmi.w	r0, #0
 23ecdf6:	bd01      	pop	{r0, pc}

023ecdf8 <__aeabi_dcmpeq>:
 23ecdf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ecdfc:	f7ff fff4 	bl	23ecde8 <__aeabi_cdcmpeq>
 23ece00:	bf0c      	ite	eq
 23ece02:	2001      	moveq	r0, #1
 23ece04:	2000      	movne	r0, #0
 23ece06:	f85d fb08 	ldr.w	pc, [sp], #8
 23ece0a:	bf00      	nop

023ece0c <__aeabi_dcmplt>:
 23ece0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ece10:	f7ff ffea 	bl	23ecde8 <__aeabi_cdcmpeq>
 23ece14:	bf34      	ite	cc
 23ece16:	2001      	movcc	r0, #1
 23ece18:	2000      	movcs	r0, #0
 23ece1a:	f85d fb08 	ldr.w	pc, [sp], #8
 23ece1e:	bf00      	nop

023ece20 <__aeabi_dcmple>:
 23ece20:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ece24:	f7ff ffe0 	bl	23ecde8 <__aeabi_cdcmpeq>
 23ece28:	bf94      	ite	ls
 23ece2a:	2001      	movls	r0, #1
 23ece2c:	2000      	movhi	r0, #0
 23ece2e:	f85d fb08 	ldr.w	pc, [sp], #8
 23ece32:	bf00      	nop

023ece34 <__aeabi_dcmpge>:
 23ece34:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ece38:	f7ff ffce 	bl	23ecdd8 <__aeabi_cdrcmple>
 23ece3c:	bf94      	ite	ls
 23ece3e:	2001      	movls	r0, #1
 23ece40:	2000      	movhi	r0, #0
 23ece42:	f85d fb08 	ldr.w	pc, [sp], #8
 23ece46:	bf00      	nop

023ece48 <__aeabi_dcmpgt>:
 23ece48:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ece4c:	f7ff ffc4 	bl	23ecdd8 <__aeabi_cdrcmple>
 23ece50:	bf34      	ite	cc
 23ece52:	2001      	movcc	r0, #1
 23ece54:	2000      	movcs	r0, #0
 23ece56:	f85d fb08 	ldr.w	pc, [sp], #8
 23ece5a:	bf00      	nop

023ece5c <__aeabi_dcmpun>:
 23ece5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23ece60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ece64:	d102      	bne.n	23ece6c <__aeabi_dcmpun+0x10>
 23ece66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23ece6a:	d10a      	bne.n	23ece82 <__aeabi_dcmpun+0x26>
 23ece6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23ece70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ece74:	d102      	bne.n	23ece7c <__aeabi_dcmpun+0x20>
 23ece76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23ece7a:	d102      	bne.n	23ece82 <__aeabi_dcmpun+0x26>
 23ece7c:	f04f 0000 	mov.w	r0, #0
 23ece80:	4770      	bx	lr
 23ece82:	f04f 0001 	mov.w	r0, #1
 23ece86:	4770      	bx	lr

023ece88 <__aeabi_d2iz>:
 23ece88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23ece8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23ece90:	d215      	bcs.n	23ecebe <__aeabi_d2iz+0x36>
 23ece92:	d511      	bpl.n	23eceb8 <__aeabi_d2iz+0x30>
 23ece94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23ece98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23ece9c:	d912      	bls.n	23ecec4 <__aeabi_d2iz+0x3c>
 23ece9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ecea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23ecea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23eceaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23eceae:	fa23 f002 	lsr.w	r0, r3, r2
 23eceb2:	bf18      	it	ne
 23eceb4:	4240      	negne	r0, r0
 23eceb6:	4770      	bx	lr
 23eceb8:	f04f 0000 	mov.w	r0, #0
 23ecebc:	4770      	bx	lr
 23ecebe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23ecec2:	d105      	bne.n	23eced0 <__aeabi_d2iz+0x48>
 23ecec4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23ecec8:	bf08      	it	eq
 23ececa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23ecece:	4770      	bx	lr
 23eced0:	f04f 0000 	mov.w	r0, #0
 23eced4:	4770      	bx	lr
 23eced6:	bf00      	nop

023eced8 <__aeabi_d2uiz>:
 23eced8:	004a      	lsls	r2, r1, #1
 23eceda:	d211      	bcs.n	23ecf00 <__aeabi_d2uiz+0x28>
 23ecedc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23ecee0:	d211      	bcs.n	23ecf06 <__aeabi_d2uiz+0x2e>
 23ecee2:	d50d      	bpl.n	23ecf00 <__aeabi_d2uiz+0x28>
 23ecee4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23ecee8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23eceec:	d40e      	bmi.n	23ecf0c <__aeabi_d2uiz+0x34>
 23eceee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ecef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23ecef6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23ecefa:	fa23 f002 	lsr.w	r0, r3, r2
 23ecefe:	4770      	bx	lr
 23ecf00:	f04f 0000 	mov.w	r0, #0
 23ecf04:	4770      	bx	lr
 23ecf06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23ecf0a:	d102      	bne.n	23ecf12 <__aeabi_d2uiz+0x3a>
 23ecf0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ecf10:	4770      	bx	lr
 23ecf12:	f04f 0000 	mov.w	r0, #0
 23ecf16:	4770      	bx	lr

023ecf18 <__aeabi_d2f>:
 23ecf18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23ecf1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23ecf20:	bf24      	itt	cs
 23ecf22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23ecf26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23ecf2a:	d90d      	bls.n	23ecf48 <__aeabi_d2f+0x30>
 23ecf2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23ecf30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23ecf34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23ecf38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23ecf3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23ecf40:	bf08      	it	eq
 23ecf42:	f020 0001 	biceq.w	r0, r0, #1
 23ecf46:	4770      	bx	lr
 23ecf48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23ecf4c:	d121      	bne.n	23ecf92 <__aeabi_d2f+0x7a>
 23ecf4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23ecf52:	bfbc      	itt	lt
 23ecf54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23ecf58:	4770      	bxlt	lr
 23ecf5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ecf5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23ecf62:	f1c2 0218 	rsb	r2, r2, #24
 23ecf66:	f1c2 0c20 	rsb	ip, r2, #32
 23ecf6a:	fa10 f30c 	lsls.w	r3, r0, ip
 23ecf6e:	fa20 f002 	lsr.w	r0, r0, r2
 23ecf72:	bf18      	it	ne
 23ecf74:	f040 0001 	orrne.w	r0, r0, #1
 23ecf78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ecf7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23ecf80:	fa03 fc0c 	lsl.w	ip, r3, ip
 23ecf84:	ea40 000c 	orr.w	r0, r0, ip
 23ecf88:	fa23 f302 	lsr.w	r3, r3, r2
 23ecf8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ecf90:	e7cc      	b.n	23ecf2c <__aeabi_d2f+0x14>
 23ecf92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23ecf96:	d107      	bne.n	23ecfa8 <__aeabi_d2f+0x90>
 23ecf98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23ecf9c:	bf1e      	ittt	ne
 23ecf9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23ecfa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23ecfa6:	4770      	bxne	lr
 23ecfa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23ecfac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23ecfb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23ecfb4:	4770      	bx	lr
 23ecfb6:	bf00      	nop

023ecfb8 <__aeabi_ldivmod>:
 23ecfb8:	b97b      	cbnz	r3, 23ecfda <__aeabi_ldivmod+0x22>
 23ecfba:	b972      	cbnz	r2, 23ecfda <__aeabi_ldivmod+0x22>
 23ecfbc:	2900      	cmp	r1, #0
 23ecfbe:	bfbe      	ittt	lt
 23ecfc0:	2000      	movlt	r0, #0
 23ecfc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23ecfc6:	e006      	blt.n	23ecfd6 <__aeabi_ldivmod+0x1e>
 23ecfc8:	bf08      	it	eq
 23ecfca:	2800      	cmpeq	r0, #0
 23ecfcc:	bf1c      	itt	ne
 23ecfce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23ecfd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23ecfd6:	f000 b9eb 	b.w	23ed3b0 <__aeabi_idiv0>
 23ecfda:	f1ad 0c08 	sub.w	ip, sp, #8
 23ecfde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23ecfe2:	2900      	cmp	r1, #0
 23ecfe4:	db09      	blt.n	23ecffa <__aeabi_ldivmod+0x42>
 23ecfe6:	2b00      	cmp	r3, #0
 23ecfe8:	db1a      	blt.n	23ed020 <__aeabi_ldivmod+0x68>
 23ecfea:	f000 f86b 	bl	23ed0c4 <__udivmoddi4>
 23ecfee:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ecff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ecff6:	b004      	add	sp, #16
 23ecff8:	4770      	bx	lr
 23ecffa:	4240      	negs	r0, r0
 23ecffc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed000:	2b00      	cmp	r3, #0
 23ed002:	db1b      	blt.n	23ed03c <__aeabi_ldivmod+0x84>
 23ed004:	f000 f85e 	bl	23ed0c4 <__udivmoddi4>
 23ed008:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed010:	b004      	add	sp, #16
 23ed012:	4240      	negs	r0, r0
 23ed014:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed018:	4252      	negs	r2, r2
 23ed01a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed01e:	4770      	bx	lr
 23ed020:	4252      	negs	r2, r2
 23ed022:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed026:	f000 f84d 	bl	23ed0c4 <__udivmoddi4>
 23ed02a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed032:	b004      	add	sp, #16
 23ed034:	4240      	negs	r0, r0
 23ed036:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed03a:	4770      	bx	lr
 23ed03c:	4252      	negs	r2, r2
 23ed03e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed042:	f000 f83f 	bl	23ed0c4 <__udivmoddi4>
 23ed046:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed04e:	b004      	add	sp, #16
 23ed050:	4252      	negs	r2, r2
 23ed052:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed056:	4770      	bx	lr

023ed058 <__aeabi_d2lz>:
 23ed058:	b538      	push	{r3, r4, r5, lr}
 23ed05a:	2200      	movs	r2, #0
 23ed05c:	2300      	movs	r3, #0
 23ed05e:	4604      	mov	r4, r0
 23ed060:	460d      	mov	r5, r1
 23ed062:	f7ff fed3 	bl	23ece0c <__aeabi_dcmplt>
 23ed066:	b928      	cbnz	r0, 23ed074 <__aeabi_d2lz+0x1c>
 23ed068:	4620      	mov	r0, r4
 23ed06a:	4629      	mov	r1, r5
 23ed06c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ed070:	f000 b80a 	b.w	23ed088 <__aeabi_d2ulz>
 23ed074:	4620      	mov	r0, r4
 23ed076:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23ed07a:	f000 f805 	bl	23ed088 <__aeabi_d2ulz>
 23ed07e:	4240      	negs	r0, r0
 23ed080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed084:	bd38      	pop	{r3, r4, r5, pc}
 23ed086:	bf00      	nop

023ed088 <__aeabi_d2ulz>:
 23ed088:	b5d0      	push	{r4, r6, r7, lr}
 23ed08a:	2200      	movs	r2, #0
 23ed08c:	4b0b      	ldr	r3, [pc, #44]	; (23ed0bc <__aeabi_d2ulz+0x34>)
 23ed08e:	4606      	mov	r6, r0
 23ed090:	460f      	mov	r7, r1
 23ed092:	f7ff fc49 	bl	23ec928 <__aeabi_dmul>
 23ed096:	f7ff ff1f 	bl	23eced8 <__aeabi_d2uiz>
 23ed09a:	4604      	mov	r4, r0
 23ed09c:	f7ff fbca 	bl	23ec834 <__aeabi_ui2d>
 23ed0a0:	2200      	movs	r2, #0
 23ed0a2:	4b07      	ldr	r3, [pc, #28]	; (23ed0c0 <__aeabi_d2ulz+0x38>)
 23ed0a4:	f7ff fc40 	bl	23ec928 <__aeabi_dmul>
 23ed0a8:	4602      	mov	r2, r0
 23ed0aa:	460b      	mov	r3, r1
 23ed0ac:	4630      	mov	r0, r6
 23ed0ae:	4639      	mov	r1, r7
 23ed0b0:	f7ff fa82 	bl	23ec5b8 <__aeabi_dsub>
 23ed0b4:	f7ff ff10 	bl	23eced8 <__aeabi_d2uiz>
 23ed0b8:	4621      	mov	r1, r4
 23ed0ba:	bdd0      	pop	{r4, r6, r7, pc}
 23ed0bc:	3df00000 	.word	0x3df00000
 23ed0c0:	41f00000 	.word	0x41f00000

023ed0c4 <__udivmoddi4>:
 23ed0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ed0c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23ed0ca:	4604      	mov	r4, r0
 23ed0cc:	460f      	mov	r7, r1
 23ed0ce:	2b00      	cmp	r3, #0
 23ed0d0:	d148      	bne.n	23ed164 <__udivmoddi4+0xa0>
 23ed0d2:	428a      	cmp	r2, r1
 23ed0d4:	4694      	mov	ip, r2
 23ed0d6:	d961      	bls.n	23ed19c <__udivmoddi4+0xd8>
 23ed0d8:	fab2 f382 	clz	r3, r2
 23ed0dc:	b143      	cbz	r3, 23ed0f0 <__udivmoddi4+0x2c>
 23ed0de:	f1c3 0120 	rsb	r1, r3, #32
 23ed0e2:	409f      	lsls	r7, r3
 23ed0e4:	fa02 fc03 	lsl.w	ip, r2, r3
 23ed0e8:	409c      	lsls	r4, r3
 23ed0ea:	fa20 f101 	lsr.w	r1, r0, r1
 23ed0ee:	430f      	orrs	r7, r1
 23ed0f0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23ed0f4:	fa1f fe8c 	uxth.w	lr, ip
 23ed0f8:	0c22      	lsrs	r2, r4, #16
 23ed0fa:	fbb7 f6f1 	udiv	r6, r7, r1
 23ed0fe:	fb01 7716 	mls	r7, r1, r6, r7
 23ed102:	fb06 f00e 	mul.w	r0, r6, lr
 23ed106:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23ed10a:	4290      	cmp	r0, r2
 23ed10c:	d908      	bls.n	23ed120 <__udivmoddi4+0x5c>
 23ed10e:	eb1c 0202 	adds.w	r2, ip, r2
 23ed112:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23ed116:	d202      	bcs.n	23ed11e <__udivmoddi4+0x5a>
 23ed118:	4290      	cmp	r0, r2
 23ed11a:	f200 8137 	bhi.w	23ed38c <__udivmoddi4+0x2c8>
 23ed11e:	463e      	mov	r6, r7
 23ed120:	1a12      	subs	r2, r2, r0
 23ed122:	b2a4      	uxth	r4, r4
 23ed124:	fbb2 f0f1 	udiv	r0, r2, r1
 23ed128:	fb01 2210 	mls	r2, r1, r0, r2
 23ed12c:	fb00 fe0e 	mul.w	lr, r0, lr
 23ed130:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23ed134:	45a6      	cmp	lr, r4
 23ed136:	d908      	bls.n	23ed14a <__udivmoddi4+0x86>
 23ed138:	eb1c 0404 	adds.w	r4, ip, r4
 23ed13c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23ed140:	d202      	bcs.n	23ed148 <__udivmoddi4+0x84>
 23ed142:	45a6      	cmp	lr, r4
 23ed144:	f200 811c 	bhi.w	23ed380 <__udivmoddi4+0x2bc>
 23ed148:	4610      	mov	r0, r2
 23ed14a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23ed14e:	eba4 040e 	sub.w	r4, r4, lr
 23ed152:	2600      	movs	r6, #0
 23ed154:	b11d      	cbz	r5, 23ed15e <__udivmoddi4+0x9a>
 23ed156:	40dc      	lsrs	r4, r3
 23ed158:	2300      	movs	r3, #0
 23ed15a:	e9c5 4300 	strd	r4, r3, [r5]
 23ed15e:	4631      	mov	r1, r6
 23ed160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ed164:	428b      	cmp	r3, r1
 23ed166:	d909      	bls.n	23ed17c <__udivmoddi4+0xb8>
 23ed168:	2d00      	cmp	r5, #0
 23ed16a:	f000 80fd 	beq.w	23ed368 <__udivmoddi4+0x2a4>
 23ed16e:	2600      	movs	r6, #0
 23ed170:	e9c5 0100 	strd	r0, r1, [r5]
 23ed174:	4630      	mov	r0, r6
 23ed176:	4631      	mov	r1, r6
 23ed178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ed17c:	fab3 f683 	clz	r6, r3
 23ed180:	2e00      	cmp	r6, #0
 23ed182:	d14b      	bne.n	23ed21c <__udivmoddi4+0x158>
 23ed184:	428b      	cmp	r3, r1
 23ed186:	f0c0 80f2 	bcc.w	23ed36e <__udivmoddi4+0x2aa>
 23ed18a:	4282      	cmp	r2, r0
 23ed18c:	f240 80ef 	bls.w	23ed36e <__udivmoddi4+0x2aa>
 23ed190:	4630      	mov	r0, r6
 23ed192:	2d00      	cmp	r5, #0
 23ed194:	d0e3      	beq.n	23ed15e <__udivmoddi4+0x9a>
 23ed196:	e9c5 4700 	strd	r4, r7, [r5]
 23ed19a:	e7e0      	b.n	23ed15e <__udivmoddi4+0x9a>
 23ed19c:	b902      	cbnz	r2, 23ed1a0 <__udivmoddi4+0xdc>
 23ed19e:	deff      	udf	#255	; 0xff
 23ed1a0:	fab2 f382 	clz	r3, r2
 23ed1a4:	2b00      	cmp	r3, #0
 23ed1a6:	f040 809d 	bne.w	23ed2e4 <__udivmoddi4+0x220>
 23ed1aa:	1a89      	subs	r1, r1, r2
 23ed1ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23ed1b0:	b297      	uxth	r7, r2
 23ed1b2:	2601      	movs	r6, #1
 23ed1b4:	0c20      	lsrs	r0, r4, #16
 23ed1b6:	fbb1 f2fe 	udiv	r2, r1, lr
 23ed1ba:	fb0e 1112 	mls	r1, lr, r2, r1
 23ed1be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23ed1c2:	fb07 f002 	mul.w	r0, r7, r2
 23ed1c6:	4288      	cmp	r0, r1
 23ed1c8:	d90f      	bls.n	23ed1ea <__udivmoddi4+0x126>
 23ed1ca:	eb1c 0101 	adds.w	r1, ip, r1
 23ed1ce:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23ed1d2:	bf2c      	ite	cs
 23ed1d4:	f04f 0901 	movcs.w	r9, #1
 23ed1d8:	f04f 0900 	movcc.w	r9, #0
 23ed1dc:	4288      	cmp	r0, r1
 23ed1de:	d903      	bls.n	23ed1e8 <__udivmoddi4+0x124>
 23ed1e0:	f1b9 0f00 	cmp.w	r9, #0
 23ed1e4:	f000 80cf 	beq.w	23ed386 <__udivmoddi4+0x2c2>
 23ed1e8:	4642      	mov	r2, r8
 23ed1ea:	1a09      	subs	r1, r1, r0
 23ed1ec:	b2a4      	uxth	r4, r4
 23ed1ee:	fbb1 f0fe 	udiv	r0, r1, lr
 23ed1f2:	fb0e 1110 	mls	r1, lr, r0, r1
 23ed1f6:	fb00 f707 	mul.w	r7, r0, r7
 23ed1fa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23ed1fe:	42a7      	cmp	r7, r4
 23ed200:	d908      	bls.n	23ed214 <__udivmoddi4+0x150>
 23ed202:	eb1c 0404 	adds.w	r4, ip, r4
 23ed206:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23ed20a:	d202      	bcs.n	23ed212 <__udivmoddi4+0x14e>
 23ed20c:	42a7      	cmp	r7, r4
 23ed20e:	f200 80b4 	bhi.w	23ed37a <__udivmoddi4+0x2b6>
 23ed212:	4608      	mov	r0, r1
 23ed214:	1be4      	subs	r4, r4, r7
 23ed216:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23ed21a:	e79b      	b.n	23ed154 <__udivmoddi4+0x90>
 23ed21c:	f1c6 0720 	rsb	r7, r6, #32
 23ed220:	40b3      	lsls	r3, r6
 23ed222:	fa01 f406 	lsl.w	r4, r1, r6
 23ed226:	fa22 fc07 	lsr.w	ip, r2, r7
 23ed22a:	40f9      	lsrs	r1, r7
 23ed22c:	40b2      	lsls	r2, r6
 23ed22e:	ea4c 0c03 	orr.w	ip, ip, r3
 23ed232:	fa20 f307 	lsr.w	r3, r0, r7
 23ed236:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23ed23a:	431c      	orrs	r4, r3
 23ed23c:	fa1f fe8c 	uxth.w	lr, ip
 23ed240:	fa00 f306 	lsl.w	r3, r0, r6
 23ed244:	0c20      	lsrs	r0, r4, #16
 23ed246:	fbb1 f8f9 	udiv	r8, r1, r9
 23ed24a:	fb09 1118 	mls	r1, r9, r8, r1
 23ed24e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23ed252:	fb08 f00e 	mul.w	r0, r8, lr
 23ed256:	4288      	cmp	r0, r1
 23ed258:	d90f      	bls.n	23ed27a <__udivmoddi4+0x1b6>
 23ed25a:	eb1c 0101 	adds.w	r1, ip, r1
 23ed25e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23ed262:	bf2c      	ite	cs
 23ed264:	f04f 0b01 	movcs.w	fp, #1
 23ed268:	f04f 0b00 	movcc.w	fp, #0
 23ed26c:	4288      	cmp	r0, r1
 23ed26e:	d903      	bls.n	23ed278 <__udivmoddi4+0x1b4>
 23ed270:	f1bb 0f00 	cmp.w	fp, #0
 23ed274:	f000 808d 	beq.w	23ed392 <__udivmoddi4+0x2ce>
 23ed278:	46d0      	mov	r8, sl
 23ed27a:	1a09      	subs	r1, r1, r0
 23ed27c:	b2a4      	uxth	r4, r4
 23ed27e:	fbb1 f0f9 	udiv	r0, r1, r9
 23ed282:	fb09 1110 	mls	r1, r9, r0, r1
 23ed286:	fb00 fe0e 	mul.w	lr, r0, lr
 23ed28a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23ed28e:	458e      	cmp	lr, r1
 23ed290:	d907      	bls.n	23ed2a2 <__udivmoddi4+0x1de>
 23ed292:	eb1c 0101 	adds.w	r1, ip, r1
 23ed296:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23ed29a:	d201      	bcs.n	23ed2a0 <__udivmoddi4+0x1dc>
 23ed29c:	458e      	cmp	lr, r1
 23ed29e:	d87f      	bhi.n	23ed3a0 <__udivmoddi4+0x2dc>
 23ed2a0:	4620      	mov	r0, r4
 23ed2a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23ed2a6:	eba1 010e 	sub.w	r1, r1, lr
 23ed2aa:	fba0 9802 	umull	r9, r8, r0, r2
 23ed2ae:	4541      	cmp	r1, r8
 23ed2b0:	464c      	mov	r4, r9
 23ed2b2:	46c6      	mov	lr, r8
 23ed2b4:	d302      	bcc.n	23ed2bc <__udivmoddi4+0x1f8>
 23ed2b6:	d106      	bne.n	23ed2c6 <__udivmoddi4+0x202>
 23ed2b8:	454b      	cmp	r3, r9
 23ed2ba:	d204      	bcs.n	23ed2c6 <__udivmoddi4+0x202>
 23ed2bc:	3801      	subs	r0, #1
 23ed2be:	ebb9 0402 	subs.w	r4, r9, r2
 23ed2c2:	eb68 0e0c 	sbc.w	lr, r8, ip
 23ed2c6:	2d00      	cmp	r5, #0
 23ed2c8:	d070      	beq.n	23ed3ac <__udivmoddi4+0x2e8>
 23ed2ca:	1b1a      	subs	r2, r3, r4
 23ed2cc:	eb61 010e 	sbc.w	r1, r1, lr
 23ed2d0:	fa22 f306 	lsr.w	r3, r2, r6
 23ed2d4:	fa01 f707 	lsl.w	r7, r1, r7
 23ed2d8:	40f1      	lsrs	r1, r6
 23ed2da:	2600      	movs	r6, #0
 23ed2dc:	431f      	orrs	r7, r3
 23ed2de:	e9c5 7100 	strd	r7, r1, [r5]
 23ed2e2:	e73c      	b.n	23ed15e <__udivmoddi4+0x9a>
 23ed2e4:	fa02 fc03 	lsl.w	ip, r2, r3
 23ed2e8:	f1c3 0020 	rsb	r0, r3, #32
 23ed2ec:	fa01 f203 	lsl.w	r2, r1, r3
 23ed2f0:	fa21 f600 	lsr.w	r6, r1, r0
 23ed2f4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23ed2f8:	fa24 f100 	lsr.w	r1, r4, r0
 23ed2fc:	fa1f f78c 	uxth.w	r7, ip
 23ed300:	409c      	lsls	r4, r3
 23ed302:	4311      	orrs	r1, r2
 23ed304:	fbb6 f0fe 	udiv	r0, r6, lr
 23ed308:	0c0a      	lsrs	r2, r1, #16
 23ed30a:	fb0e 6610 	mls	r6, lr, r0, r6
 23ed30e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23ed312:	fb00 f607 	mul.w	r6, r0, r7
 23ed316:	4296      	cmp	r6, r2
 23ed318:	d90e      	bls.n	23ed338 <__udivmoddi4+0x274>
 23ed31a:	eb1c 0202 	adds.w	r2, ip, r2
 23ed31e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23ed322:	bf2c      	ite	cs
 23ed324:	f04f 0901 	movcs.w	r9, #1
 23ed328:	f04f 0900 	movcc.w	r9, #0
 23ed32c:	4296      	cmp	r6, r2
 23ed32e:	d902      	bls.n	23ed336 <__udivmoddi4+0x272>
 23ed330:	f1b9 0f00 	cmp.w	r9, #0
 23ed334:	d031      	beq.n	23ed39a <__udivmoddi4+0x2d6>
 23ed336:	4640      	mov	r0, r8
 23ed338:	1b92      	subs	r2, r2, r6
 23ed33a:	b289      	uxth	r1, r1
 23ed33c:	fbb2 f6fe 	udiv	r6, r2, lr
 23ed340:	fb0e 2216 	mls	r2, lr, r6, r2
 23ed344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23ed348:	fb06 f207 	mul.w	r2, r6, r7
 23ed34c:	428a      	cmp	r2, r1
 23ed34e:	d907      	bls.n	23ed360 <__udivmoddi4+0x29c>
 23ed350:	eb1c 0101 	adds.w	r1, ip, r1
 23ed354:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23ed358:	d201      	bcs.n	23ed35e <__udivmoddi4+0x29a>
 23ed35a:	428a      	cmp	r2, r1
 23ed35c:	d823      	bhi.n	23ed3a6 <__udivmoddi4+0x2e2>
 23ed35e:	4646      	mov	r6, r8
 23ed360:	1a89      	subs	r1, r1, r2
 23ed362:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23ed366:	e725      	b.n	23ed1b4 <__udivmoddi4+0xf0>
 23ed368:	462e      	mov	r6, r5
 23ed36a:	4628      	mov	r0, r5
 23ed36c:	e6f7      	b.n	23ed15e <__udivmoddi4+0x9a>
 23ed36e:	1a84      	subs	r4, r0, r2
 23ed370:	eb61 0303 	sbc.w	r3, r1, r3
 23ed374:	2001      	movs	r0, #1
 23ed376:	461f      	mov	r7, r3
 23ed378:	e70b      	b.n	23ed192 <__udivmoddi4+0xce>
 23ed37a:	4464      	add	r4, ip
 23ed37c:	3802      	subs	r0, #2
 23ed37e:	e749      	b.n	23ed214 <__udivmoddi4+0x150>
 23ed380:	4464      	add	r4, ip
 23ed382:	3802      	subs	r0, #2
 23ed384:	e6e1      	b.n	23ed14a <__udivmoddi4+0x86>
 23ed386:	3a02      	subs	r2, #2
 23ed388:	4461      	add	r1, ip
 23ed38a:	e72e      	b.n	23ed1ea <__udivmoddi4+0x126>
 23ed38c:	3e02      	subs	r6, #2
 23ed38e:	4462      	add	r2, ip
 23ed390:	e6c6      	b.n	23ed120 <__udivmoddi4+0x5c>
 23ed392:	f1a8 0802 	sub.w	r8, r8, #2
 23ed396:	4461      	add	r1, ip
 23ed398:	e76f      	b.n	23ed27a <__udivmoddi4+0x1b6>
 23ed39a:	3802      	subs	r0, #2
 23ed39c:	4462      	add	r2, ip
 23ed39e:	e7cb      	b.n	23ed338 <__udivmoddi4+0x274>
 23ed3a0:	3802      	subs	r0, #2
 23ed3a2:	4461      	add	r1, ip
 23ed3a4:	e77d      	b.n	23ed2a2 <__udivmoddi4+0x1de>
 23ed3a6:	3e02      	subs	r6, #2
 23ed3a8:	4461      	add	r1, ip
 23ed3aa:	e7d9      	b.n	23ed360 <__udivmoddi4+0x29c>
 23ed3ac:	462e      	mov	r6, r5
 23ed3ae:	e6d6      	b.n	23ed15e <__udivmoddi4+0x9a>

023ed3b0 <__aeabi_idiv0>:
 23ed3b0:	4770      	bx	lr
 23ed3b2:	bf00      	nop

023ed3b4 <strcmp>:
 23ed3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ed3b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23ed3bc:	2a01      	cmp	r2, #1
 23ed3be:	bf28      	it	cs
 23ed3c0:	429a      	cmpcs	r2, r3
 23ed3c2:	d0f7      	beq.n	23ed3b4 <strcmp>
 23ed3c4:	1ad0      	subs	r0, r2, r3
 23ed3c6:	4770      	bx	lr

023ed3c8 <strlen>:
 23ed3c8:	4603      	mov	r3, r0
 23ed3ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 23ed3ce:	2a00      	cmp	r2, #0
 23ed3d0:	d1fb      	bne.n	23ed3ca <strlen+0x2>
 23ed3d2:	1a18      	subs	r0, r3, r0
 23ed3d4:	3801      	subs	r0, #1
 23ed3d6:	4770      	bx	lr

023ed3d8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23ed3d8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23ed3da:	f00a fd63 	bl	23f7ea4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23ed3de:	2500      	movs	r5, #0
 23ed3e0:	4e05      	ldr	r6, [pc, #20]	; (23ed3f8 <module_user_init+0x20>)
 23ed3e2:	4c06      	ldr	r4, [pc, #24]	; (23ed3fc <module_user_init+0x24>)
 23ed3e4:	1ba4      	subs	r4, r4, r6
 23ed3e6:	08a4      	lsrs	r4, r4, #2
 23ed3e8:	42ac      	cmp	r4, r5
 23ed3ea:	d100      	bne.n	23ed3ee <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23ed3ec:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23ed3ee:	f856 3b04 	ldr.w	r3, [r6], #4
 23ed3f2:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23ed3f4:	3501      	adds	r5, #1
 23ed3f6:	e7f7      	b.n	23ed3e8 <module_user_init+0x10>
 23ed3f8:	023fffc8 	.word	0x023fffc8
 23ed3fc:	023ffff4 	.word	0x023ffff4

023ed400 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23ed400:	f004 bd70 	b.w	23f1ee4 <setup>

023ed404 <module_user_loop>:
}

void module_user_loop() {
 23ed404:	b508      	push	{r3, lr}
    loop();
 23ed406:	f005 fbfd 	bl	23f2c04 <loop>
    _post_loop();
}
 23ed40a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23ed40e:	f00a bd01 	b.w	23f7e14 <_post_loop>

023ed412 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23ed412:	f009 bfbb 	b.w	23f738c <malloc>

023ed416 <_Znaj>:
 23ed416:	f009 bfb9 	b.w	23f738c <malloc>

023ed41a <_ZdaPv>:
 23ed41a:	f009 bfc5 	b.w	23f73a8 <free>

023ed41e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23ed41e:	f009 bfc3 	b.w	23f73a8 <free>
	...

023ed424 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23ed424:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23ed426:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23ed428:	4a02      	ldr	r2, [pc, #8]	; (23ed434 <__cxa_pure_virtual+0x10>)
 23ed42a:	4903      	ldr	r1, [pc, #12]	; (23ed438 <__cxa_pure_virtual+0x14>)
 23ed42c:	f009 fe7a 	bl	23f7124 <panic_>
  while (1);
 23ed430:	e7fe      	b.n	23ed430 <__cxa_pure_virtual+0xc>
 23ed432:	bf00      	nop
 23ed434:	023f6ff1 	.word	0x023f6ff1
 23ed438:	023fb9d0 	.word	0x023fb9d0

023ed43c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23ed43c:	7800      	ldrb	r0, [r0, #0]
 23ed43e:	fab0 f080 	clz	r0, r0
 23ed442:	0940      	lsrs	r0, r0, #5
 23ed444:	4770      	bx	lr

023ed446 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23ed446:	2301      	movs	r3, #1
 23ed448:	7003      	strb	r3, [r0, #0]
 23ed44a:	4770      	bx	lr

023ed44c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 23ed44c:	2810      	cmp	r0, #16
 23ed44e:	bf9a      	itte	ls
 23ed450:	4b02      	ldrls	r3, [pc, #8]	; (23ed45c <TfLiteTypeGetName+0x10>)
 23ed452:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 23ed456:	4802      	ldrhi	r0, [pc, #8]	; (23ed460 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
 23ed458:	4770      	bx	lr
 23ed45a:	bf00      	nop
 23ed45c:	023fba60 	.word	0x023fba60
 23ed460:	023fb9e5 	.word	0x023fb9e5

023ed464 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 23ed464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ed468:	b09b      	sub	sp, #108	; 0x6c
 23ed46a:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ed46c:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23ed46e:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ed470:	105b      	asrs	r3, r3, #1
 23ed472:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
 23ed474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ed476:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23ed478:	005b      	lsls	r3, r3, #1
 23ed47a:	9310      	str	r3, [sp, #64]	; 0x40
 23ed47c:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
 23ed47e:	9112      	str	r1, [sp, #72]	; 0x48
 23ed480:	4353      	muls	r3, r2
 23ed482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ed484:	900c      	str	r0, [sp, #48]	; 0x30
 23ed486:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 23ed48a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed48c:	930a      	str	r3, [sp, #40]	; 0x28
 23ed48e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ed490:	2a00      	cmp	r2, #0
 23ed492:	f023 030f 	bic.w	r3, r3, #15
 23ed496:	bfb8      	it	lt
 23ed498:	2300      	movlt	r3, #0
 23ed49a:	9308      	str	r3, [sp, #32]
 23ed49c:	4613      	mov	r3, r2
 23ed49e:	9a08      	ldr	r2, [sp, #32]
 23ed4a0:	9908      	ldr	r1, [sp, #32]
 23ed4a2:	1a9b      	subs	r3, r3, r2
 23ed4a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed4a6:	428a      	cmp	r2, r1
 23ed4a8:	bfb8      	it	lt
 23ed4aa:	2300      	movlt	r3, #0
 23ed4ac:	4413      	add	r3, r2
 23ed4ae:	9316      	str	r3, [sp, #88]	; 0x58
 23ed4b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ed4b2:	005b      	lsls	r3, r3, #1
 23ed4b4:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ed4b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ed4b8:	9300      	str	r3, [sp, #0]
 23ed4ba:	2304      	movs	r3, #4
 23ed4bc:	9305      	str	r3, [sp, #20]
 23ed4be:	2300      	movs	r3, #0
 23ed4c0:	9301      	str	r3, [sp, #4]
 23ed4c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ed4c4:	3b01      	subs	r3, #1
 23ed4c6:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ed4c8:	f1a2 030f 	sub.w	r3, r2, #15
 23ed4cc:	9313      	str	r3, [sp, #76]	; 0x4c
 23ed4ce:	9a01      	ldr	r2, [sp, #4]
 23ed4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ed4d2:	4413      	add	r3, r2
 23ed4d4:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ed4d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ed4d8:	4293      	cmp	r3, r2
 23ed4da:	f340 82cc 	ble.w	23eda76 <arm_nn_mat_mult_nt_t_s8+0x612>
 23ed4de:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ed4e0:	9800      	ldr	r0, [sp, #0]
 23ed4e2:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
 23ed4e4:	2300      	movs	r3, #0
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ed4e6:	f1c0 0001 	rsb	r0, r0, #1
        q31_t lhs_offset_contribution0 = 0;
 23ed4ea:	4619      	mov	r1, r3
 23ed4ec:	e005      	b.n	23ed4fa <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
 23ed4ee:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 23ed4f2:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 23ed4f4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 23ed4f6:	5714      	ldrsb	r4, [r2, r4]
 23ed4f8:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ed4fa:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ed4fc:	1884      	adds	r4, r0, r2
 23ed4fe:	42ac      	cmp	r4, r5
 23ed500:	dbf5      	blt.n	23ed4ee <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
 23ed502:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ed504:	434a      	muls	r2, r1
 23ed506:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
 23ed508:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ed50a:	4353      	muls	r3, r2
 23ed50c:	9303      	str	r3, [sp, #12]
        if (bias)
 23ed50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ed510:	b15b      	cbz	r3, 23ed52a <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 23ed512:	9a01      	ldr	r2, [sp, #4]
 23ed514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ed518:	9a02      	ldr	r2, [sp, #8]
 23ed51a:	441a      	add	r2, r3
 23ed51c:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 23ed51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ed520:	9a05      	ldr	r2, [sp, #20]
 23ed522:	589b      	ldr	r3, [r3, r2]
 23ed524:	9a03      	ldr	r2, [sp, #12]
 23ed526:	441a      	add	r2, r3
 23ed528:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
 23ed52a:	9b08      	ldr	r3, [sp, #32]
 23ed52c:	9a00      	ldr	r2, [sp, #0]
 23ed52e:	3b01      	subs	r3, #1
 23ed530:	18d3      	adds	r3, r2, r3
 23ed532:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
 23ed534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ed536:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ed538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ed53a:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
 23ed53c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ed53e:	3301      	adds	r3, #1
 23ed540:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
 23ed542:	9b06      	ldr	r3, [sp, #24]
 23ed544:	2b00      	cmp	r3, #0
 23ed546:	f000 818e 	beq.w	23ed866 <arm_nn_mat_mult_nt_t_s8+0x402>
            q31_t res10 = lhs_offset_contribution0;
 23ed54a:	e9dd b902 	ldrd	fp, r9, [sp, #8]
 23ed54e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed550:	9b00      	ldr	r3, [sp, #0]
            q31_t res01 = lhs_offset_contribution1;
 23ed552:	464f      	mov	r7, r9
 23ed554:	189e      	adds	r6, r3, r2
 23ed556:	9b04      	ldr	r3, [sp, #16]
 23ed558:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
 23ed55a:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
 23ed55c:	2200      	movs	r2, #0
 23ed55e:	e0a3      	b.n	23ed6a8 <arm_nn_mat_mult_nt_t_s8+0x244>
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 23ed560:	9900      	ldr	r1, [sp, #0]
 23ed562:	5888      	ldr	r0, [r1, r2]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed564:	9904      	ldr	r1, [sp, #16]
 23ed566:	fa2f fe80 	sxtb16	lr, r0
 23ed56a:	588c      	ldr	r4, [r1, r2]
 23ed56c:	6831      	ldr	r1, [r6, #0]
 23ed56e:	fa2f f884 	sxtb16	r8, r4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed572:	fa2f f090 	sxtb16	r0, r0, ror #8
 23ed576:	fa2f f494 	sxtb16	r4, r4, ror #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed57a:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed57e:	fa2f f381 	sxtb16	r3, r1
 23ed582:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed584:	fb24 c300 	smlad	r3, r4, r0, ip
 23ed588:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed58a:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed58e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ed590:	fb28 7701 	smlad	r7, r8, r1, r7
 23ed594:	fb24 740c 	smlad	r4, r4, ip, r7
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 23ed598:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed59a:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed59e:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed5a2:	fb28 be0e 	smlad	lr, r8, lr, fp
 23ed5a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ed5a8:	fb28 9101 	smlad	r1, r8, r1, r9
 23ed5ac:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
 23ed5b0:	f8da 8004 	ldr.w	r8, [sl, #4]
 23ed5b4:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
 23ed5b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ed5ba:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed5be:	f8d3 9004 	ldr.w	r9, [r3, #4]
 23ed5c2:	fa2f f788 	sxtb16	r7, r8
 23ed5c6:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed5ca:	fa2f f898 	sxtb16	r8, r8, ror #8
 23ed5ce:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed5d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ed5d4:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed5d8:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed5dc:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed5e0:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed5e4:	fb2c 440b 	smlad	r4, ip, fp, r4
 23ed5e8:	fb29 490e 	smlad	r9, r9, lr, r4
 23ed5ec:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed5ee:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed5f2:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed5f6:	fb2c 0007 	smlad	r0, ip, r7, r0
 23ed5fa:	fb2c 110b 	smlad	r1, ip, fp, r1
 23ed5fe:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
 23ed602:	f8da b008 	ldr.w	fp, [sl, #8]
 23ed606:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
 23ed60a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ed60c:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed610:	6880      	ldr	r0, [r0, #8]
 23ed612:	fa2f f18b 	sxtb16	r1, fp
 23ed616:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed61a:	fa2f fb9b 	sxtb16	fp, fp, ror #8
 23ed61e:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed622:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed626:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed62a:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed62e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed632:	fb24 9907 	smlad	r9, r4, r7, r9
 23ed636:	fb20 900c 	smlad	r0, r0, ip, r9
 23ed63a:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed63e:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed642:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed646:	fb24 8801 	smlad	r8, r4, r1, r8
 23ed64a:	fb24 e407 	smlad	r4, r4, r7, lr
 23ed64e:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
 23ed652:	f8da e00c 	ldr.w	lr, [sl, #12]
 23ed656:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
 23ed65a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23ed65c:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed65e:	68e7      	ldr	r7, [r4, #12]
 23ed660:	fa2f f88e 	sxtb16	r8, lr
 23ed664:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed668:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 23ed66c:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed670:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed674:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed678:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed67c:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed680:	fb2a 0009 	smlad	r0, sl, r9, r0
 23ed684:	fb24 0701 	smlad	r7, r4, r1, r0
 23ed688:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed68a:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed68e:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed692:	fb24 bb08 	smlad	fp, r4, r8, fp
 23ed696:	fb24 cc09 	smlad	ip, r4, r9, ip
 23ed69a:	fb25 bb0e 	smlad	fp, r5, lr, fp
 23ed69e:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ed6a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 23ed6a4:	3210      	adds	r2, #16
 23ed6a6:	3610      	adds	r6, #16
 23ed6a8:	9904      	ldr	r1, [sp, #16]
 23ed6aa:	4411      	add	r1, r2
 23ed6ac:	910d      	str	r1, [sp, #52]	; 0x34
 23ed6ae:	9900      	ldr	r1, [sp, #0]
 23ed6b0:	eb01 0a02 	add.w	sl, r1, r2
 23ed6b4:	f105 0110 	add.w	r1, r5, #16
 23ed6b8:	9115      	str	r1, [sp, #84]	; 0x54
 23ed6ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23ed6bc:	4291      	cmp	r1, r2
 23ed6be:	f73f af4f 	bgt.w	23ed560 <arm_nn_mat_mult_nt_t_s8+0xfc>
 23ed6c2:	9908      	ldr	r1, [sp, #32]
 23ed6c4:	9a04      	ldr	r2, [sp, #16]
 23ed6c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23ed6c8:	440a      	add	r2, r1
 23ed6ca:	4614      	mov	r4, r2
 23ed6cc:	1e51      	subs	r1, r2, #1
 23ed6ce:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ed6d0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ed6d2:	42aa      	cmp	r2, r5
 23ed6d4:	f2c0 80b5 	blt.w	23ed842 <arm_nn_mat_mult_nt_t_s8+0x3de>
                lhs_value = lhs_ptr[rhs_cols];
 23ed6d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23ed6da:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
 23ed6dc:	18a2      	adds	r2, r4, r2
 23ed6de:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23ed6e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 23ed6e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 23ed6e6:	920d      	str	r2, [sp, #52]	; 0x34
 23ed6e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed6ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ed6ec:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 23ed6f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23ed6f4:	2100      	movs	r1, #0
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed6f6:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
 23ed6fa:	2d00      	cmp	r5, #0
 23ed6fc:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed700:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed704:	bfc8      	it	gt
 23ed706:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed708:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed70c:	bfd8      	it	le
 23ed70e:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed710:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 23ed714:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed716:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
 23ed71a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23ed71e:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
 23ed722:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
 23ed726:	412a      	asrs	r2, r5
    q31_t threshold = remainder_mask >> 1;
 23ed728:	bf54      	ite	pl
 23ed72a:	4663      	movpl	r3, ip
        threshold++;
 23ed72c:	4463      	addmi	r3, ip
    if (remainder > threshold)
 23ed72e:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23ed730:	9905      	ldr	r1, [sp, #20]
 23ed732:	9b24      	ldr	r3, [sp, #144]	; 0x90
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed734:	f04f 0000 	mov.w	r0, #0
 23ed738:	585b      	ldr	r3, [r3, r1]
        result++;
 23ed73a:	bfc8      	it	gt
 23ed73c:	3201      	addgt	r2, #1
 23ed73e:	930f      	str	r3, [sp, #60]	; 0x3c
 23ed740:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed742:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23ed744:	585c      	ldr	r4, [r3, r1]
 23ed746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed74a:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 23ed74e:	408f      	lsls	r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed750:	fbc7 3006 	smlal	r3, r0, r7, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed754:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23ed756:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed75a:	bfc8      	it	gt
 23ed75c:	2400      	movgt	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23ed75e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed762:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed766:	bfd8      	it	le
 23ed768:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed76a:	fa00 f604 	lsl.w	r6, r0, r4
 23ed76e:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
 23ed770:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
 23ed774:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
 23ed778:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 23ed77a:	bf54      	ite	pl
 23ed77c:	4638      	movpl	r0, r7
        threshold++;
 23ed77e:	1838      	addmi	r0, r7, r0
    if (remainder > threshold)
 23ed780:	4580      	cmp	r8, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed782:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed786:	f04f 0800 	mov.w	r8, #0
 23ed78a:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 23ed78e:	980d      	ldr	r0, [sp, #52]	; 0x34
        result++;
 23ed790:	bfc8      	it	gt
 23ed792:	3301      	addgt	r3, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed794:	fbce b800 	smlal	fp, r8, lr, r0
 23ed798:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
 23ed79a:	0fc0      	lsrs	r0, r0, #31
 23ed79c:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ed7a0:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
 23ed7a4:	4128      	asrs	r0, r5
        threshold++;
 23ed7a6:	bf48      	it	mi
 23ed7a8:	f10c 0c01 	addmi.w	ip, ip, #1
    if (remainder > threshold)
 23ed7ac:	45e2      	cmp	sl, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed7ae:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 23ed7b2:	f04f 0c00 	mov.w	ip, #0
 23ed7b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed7b8:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed7bc:	fbc1 ec05 	smlal	lr, ip, r1, r5
 23ed7c0:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
 23ed7c2:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 23ed7c6:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
 23ed7ca:	bfc8      	it	gt
 23ed7cc:	3001      	addgt	r0, #1
    if (result < 0)
 23ed7ce:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
 23ed7d2:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
 23ed7d6:	bf48      	it	mi
 23ed7d8:	3701      	addmi	r7, #1
            res00 += dst_offset;
 23ed7da:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23ed7dc:	42be      	cmp	r6, r7
        result++;
 23ed7de:	bfc8      	it	gt
 23ed7e0:	3401      	addgt	r4, #1
 23ed7e2:	440a      	add	r2, r1
            res01 += dst_offset;
 23ed7e4:	440b      	add	r3, r1
            res10 += dst_offset;
 23ed7e6:	4408      	add	r0, r1
            res11 += dst_offset;
 23ed7e8:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
 23ed7ea:	992b      	ldr	r1, [sp, #172]	; 0xac
 23ed7ec:	428a      	cmp	r2, r1
 23ed7ee:	bfb8      	it	lt
 23ed7f0:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 23ed7f2:	428b      	cmp	r3, r1
 23ed7f4:	bfb8      	it	lt
 23ed7f6:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
 23ed7f8:	4288      	cmp	r0, r1
 23ed7fa:	bfb8      	it	lt
 23ed7fc:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
 23ed7fe:	428c      	cmp	r4, r1
 23ed800:	bfb8      	it	lt
 23ed802:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
 23ed804:	992c      	ldr	r1, [sp, #176]	; 0xb0
 23ed806:	428a      	cmp	r2, r1
 23ed808:	bfa8      	it	ge
 23ed80a:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 23ed80c:	9907      	ldr	r1, [sp, #28]
 23ed80e:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 23ed810:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23ed812:	4293      	cmp	r3, r2
 23ed814:	bfa8      	it	ge
 23ed816:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 23ed818:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
 23ed81a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23ed81c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
 23ed81e:	4298      	cmp	r0, r3
 23ed820:	bfa8      	it	ge
 23ed822:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
 23ed824:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23ed826:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
 23ed828:	429c      	cmp	r4, r3
 23ed82a:	bfa8      	it	ge
 23ed82c:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
 23ed82e:	460b      	mov	r3, r1
 23ed830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ed832:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
 23ed834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23ed836:	4413      	add	r3, r2
 23ed838:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
 23ed83a:	9b06      	ldr	r3, [sp, #24]
 23ed83c:	3b01      	subs	r3, #1
 23ed83e:	9306      	str	r3, [sp, #24]
 23ed840:	e67f      	b.n	23ed542 <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
 23ed842:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23ed846:	9d28      	ldr	r5, [sp, #160]	; 0xa0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ed848:	3201      	adds	r2, #1
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23ed84a:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
 23ed84c:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
 23ed850:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
 23ed854:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
 23ed858:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ed85a:	574d      	ldrsb	r5, [r1, r5]
                res10 += lhs_value * rhs_value0;
 23ed85c:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
 23ed860:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ed864:	e734      	b.n	23ed6d0 <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
 23ed866:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ed868:	07d8      	lsls	r0, r3, #31
 23ed86a:	d57a      	bpl.n	23ed962 <arm_nn_mat_mult_nt_t_s8+0x4fe>
 23ed86c:	9b00      	ldr	r3, [sp, #0]
 23ed86e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed870:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
 23ed872:	9b06      	ldr	r3, [sp, #24]
 23ed874:	9a04      	ldr	r2, [sp, #16]
 23ed876:	18d6      	adds	r6, r2, r3
 23ed878:	9a00      	ldr	r2, [sp, #0]
 23ed87a:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ed87c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ed87e:	429a      	cmp	r2, r3
 23ed880:	dc7d      	bgt.n	23ed97e <arm_nn_mat_mult_nt_t_s8+0x51a>
 23ed882:	9a08      	ldr	r2, [sp, #32]
 23ed884:	9b04      	ldr	r3, [sp, #16]
 23ed886:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ed888:	9a04      	ldr	r2, [sp, #16]
 23ed88a:	4251      	negs	r1, r2
 23ed88c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 23ed88e:	185a      	adds	r2, r3, r1
 23ed890:	4290      	cmp	r0, r2
 23ed892:	f300 80de 	bgt.w	23eda52 <arm_nn_mat_mult_nt_t_s8+0x5ee>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23ed896:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23ed898:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed89a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ed89e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed8a2:	9b02      	ldr	r3, [sp, #8]
 23ed8a4:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 23ed8a8:	40a3      	lsls	r3, r4
 23ed8aa:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed8ac:	2500      	movs	r5, #0
 23ed8ae:	9901      	ldr	r1, [sp, #4]
 23ed8b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed8b2:	2a00      	cmp	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed8b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23ed8b8:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 23ed8bc:	ea4f 71d0 	mov.w	r1, r0, lsr #31
 23ed8c0:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed8c4:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed8c8:	bfcc      	ite	gt
 23ed8ca:	2100      	movgt	r1, #0
 23ed8cc:	4251      	negle	r1, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed8ce:	408b      	lsls	r3, r1
 23ed8d0:	3b01      	subs	r3, #1
    if (result < 0)
 23ed8d2:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
 23ed8d6:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23ed8da:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ed8de:	bf48      	it	mi
 23ed8e0:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ed8e2:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23ed8e4:	9a05      	ldr	r2, [sp, #20]
 23ed8e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed8e8:	f04f 0500 	mov.w	r5, #0
 23ed8ec:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed8ee:	9b03      	ldr	r3, [sp, #12]
 23ed8f0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23ed8f4:	fa03 f300 	lsl.w	r3, r3, r0
 23ed8f8:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed8fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
        result++;
 23ed8fc:	bfc8      	it	gt
 23ed8fe:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ed900:	589b      	ldr	r3, [r3, r2]
 23ed902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23ed906:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 23ed90a:	0fd2      	lsrs	r2, r2, #31
 23ed90c:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed910:	2201      	movs	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ed912:	2c00      	cmp	r4, #0
 23ed914:	bfdc      	itt	le
 23ed916:	4263      	negle	r3, r4
 23ed918:	9306      	strle	r3, [sp, #24]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ed91a:	9b06      	ldr	r3, [sp, #24]
 23ed91c:	fa02 f303 	lsl.w	r3, r2, r3
 23ed920:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23ed922:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23ed926:	4113      	asrs	r3, r2
    if (result < 0)
 23ed928:	9a06      	ldr	r2, [sp, #24]
 23ed92a:	4115      	asrs	r5, r2
        threshold++;
 23ed92c:	bf48      	it	mi
 23ed92e:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ed930:	4298      	cmp	r0, r3
            res00 += dst_offset;
 23ed932:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
 23ed934:	bfc8      	it	gt
 23ed936:	3501      	addgt	r5, #1
 23ed938:	4419      	add	r1, r3
            res01 += dst_offset;
 23ed93a:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
 23ed93c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23ed93e:	4299      	cmp	r1, r3
 23ed940:	bfb8      	it	lt
 23ed942:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
 23ed944:	429d      	cmp	r5, r3
 23ed946:	bfb8      	it	lt
 23ed948:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
 23ed94a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23ed94c:	4299      	cmp	r1, r3
 23ed94e:	bfa8      	it	ge
 23ed950:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
 23ed952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ed954:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
 23ed956:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23ed958:	429d      	cmp	r5, r3
 23ed95a:	bfa8      	it	ge
 23ed95c:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
 23ed95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ed960:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
 23ed962:	9b00      	ldr	r3, [sp, #0]
 23ed964:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23ed966:	4413      	add	r3, r2
 23ed968:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ed96a:	9b01      	ldr	r3, [sp, #4]
 23ed96c:	3302      	adds	r3, #2
 23ed96e:	9301      	str	r3, [sp, #4]
 23ed970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ed972:	3302      	adds	r3, #2
 23ed974:	930a      	str	r3, [sp, #40]	; 0x28
 23ed976:	9b05      	ldr	r3, [sp, #20]
 23ed978:	3308      	adds	r3, #8
 23ed97a:	9305      	str	r3, [sp, #20]
 23ed97c:	e5a7      	b.n	23ed4ce <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
 23ed97e:	9a00      	ldr	r2, [sp, #0]
 23ed980:	6801      	ldr	r1, [r0, #0]
 23ed982:	58d7      	ldr	r7, [r2, r3]
 23ed984:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed986:	fa2f f887 	sxtb16	r8, r7
 23ed98a:	58d2      	ldr	r2, [r2, r3]
 23ed98c:	fa2f fe81 	sxtb16	lr, r1
 23ed990:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed994:	fa2f f797 	sxtb16	r7, r7, ror #8
 23ed998:	fa2f f292 	sxtb16	r2, r2, ror #8
 23ed99c:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9a0:	9c02      	ldr	r4, [sp, #8]
 23ed9a2:	fb2c 4808 	smlad	r8, ip, r8, r4
 23ed9a6:	fb22 8707 	smlad	r7, r2, r7, r8
 23ed9aa:	9c03      	ldr	r4, [sp, #12]
 23ed9ac:	fb2c 4c0e 	smlad	ip, ip, lr, r4
 23ed9b0:	fb22 c101 	smlad	r1, r2, r1, ip
 23ed9b4:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
 23ed9b6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
 23ed9ba:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed9bc:	fa2f f984 	sxtb16	r9, r4
 23ed9c0:	fa2f fe82 	sxtb16	lr, r2
 23ed9c4:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed9c8:	fa2f f494 	sxtb16	r4, r4, ror #8
 23ed9cc:	fa2f f292 	sxtb16	r2, r2, ror #8
 23ed9d0:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9d4:	fb2e 7709 	smlad	r7, lr, r9, r7
 23ed9d8:	fb22 7404 	smlad	r4, r2, r4, r7
 23ed9dc:	fb2e 1108 	smlad	r1, lr, r8, r1
 23ed9e0:	fb22 120c 	smlad	r2, r2, ip, r1
 23ed9e4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
 23ed9e8:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
 23ed9ec:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed9f0:	fa2f f788 	sxtb16	r7, r8
 23ed9f4:	fa2f f18c 	sxtb16	r1, ip
 23ed9f8:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed9fc:	fa2f f898 	sxtb16	r8, r8, ror #8
 23eda00:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 23eda04:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eda08:	fb21 4407 	smlad	r4, r1, r7, r4
 23eda0c:	fb2c 4808 	smlad	r8, ip, r8, r4
 23eda10:	fb21 2209 	smlad	r2, r1, r9, r2
 23eda14:	fb2c 2e0e 	smlad	lr, ip, lr, r2
 23eda18:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
 23eda1a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
 23eda1e:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eda20:	fa2f f482 	sxtb16	r4, r2
 23eda24:	fa2f fc85 	sxtb16	ip, r5
 23eda28:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eda2c:	fa2f f292 	sxtb16	r2, r2, ror #8
 23eda30:	fa2f f595 	sxtb16	r5, r5, ror #8
 23eda34:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eda38:	fb2c 8804 	smlad	r8, ip, r4, r8
 23eda3c:	fb25 8202 	smlad	r2, r5, r2, r8
 23eda40:	9202      	str	r2, [sp, #8]
 23eda42:	fb2c ee01 	smlad	lr, ip, r1, lr
 23eda46:	fb25 e20a 	smlad	r2, r5, sl, lr
 23eda4a:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eda4c:	3310      	adds	r3, #16
 23eda4e:	3010      	adds	r0, #16
 23eda50:	e710      	b.n	23ed874 <arm_nn_mat_mult_nt_t_s8+0x410>
                res00 += lhs_value * rhs_value0;
 23eda52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
 23eda54:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
 23eda58:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
 23eda5c:	940b      	str	r4, [sp, #44]	; 0x2c
 23eda5e:	9c02      	ldr	r4, [sp, #8]
 23eda60:	fb12 4000 	smlabb	r0, r2, r0, r4
                res01 += lhs_value * rhs_value1;
 23eda64:	9c28      	ldr	r4, [sp, #160]	; 0xa0
                res00 += lhs_value * rhs_value0;
 23eda66:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
 23eda68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23eda6a:	5700      	ldrsb	r0, [r0, r4]
 23eda6c:	9c03      	ldr	r4, [sp, #12]
 23eda6e:	fb12 4200 	smlabb	r2, r2, r0, r4
 23eda72:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eda74:	e70a      	b.n	23ed88c <arm_nn_mat_mult_nt_t_s8+0x428>
 23eda76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23eda78:	9810      	ldr	r0, [sp, #64]	; 0x40
 23eda7a:	2b00      	cmp	r3, #0
 23eda7c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 23eda80:	bfac      	ite	ge
 23eda82:	4611      	movge	r1, r2
 23eda84:	2100      	movlt	r1, #0
 23eda86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23eda8a:	bfb8      	it	lt
 23eda8c:	2200      	movlt	r2, #0
 23eda8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23eda90:	fb00 3301 	mla	r3, r0, r1, r3
 23eda94:	9300      	str	r3, [sp, #0]
 23eda96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23eda98:	4413      	add	r3, r2
 23eda9a:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
 23eda9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23eda9e:	07d9      	lsls	r1, r3, #31
 23edaa0:	d517      	bpl.n	23edad2 <arm_nn_mat_mult_nt_t_s8+0x66e>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23edaa2:	2700      	movs	r7, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edaa4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 23edaa8:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edaaa:	f04f 0901 	mov.w	r9, #1
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 23edaae:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 23edab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23edab4:	3c01      	subs	r4, #1
 23edab6:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23edaba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23edabc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23edac0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23edac2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23edac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23edac8:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23edacc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23edace:	429f      	cmp	r7, r3
 23edad0:	db03      	blt.n	23edada <arm_nn_mat_mult_nt_t_s8+0x676>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
 23edad2:	2000      	movs	r0, #0
 23edad4:	b01b      	add	sp, #108	; 0x6c
 23edad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
 23edada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23edadc:	2b00      	cmp	r3, #0
 23edade:	d038      	beq.n	23edb52 <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
 23edae0:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
 23edae4:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edae6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 23edae8:	428b      	cmp	r3, r1
 23edaea:	db34      	blt.n	23edb56 <arm_nn_mat_mult_nt_t_s8+0x6f2>
 23edaec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23edaee:	6821      	ldr	r1, [r4, #0]
 23edaf0:	4473      	add	r3, lr
 23edaf2:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edaf4:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23edaf8:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edafa:	46c2      	mov	sl, r8
 23edafc:	4663      	mov	r3, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edafe:	2900      	cmp	r1, #0
 23edb00:	bfc8      	it	gt
 23edb02:	2100      	movgt	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edb04:	6806      	ldr	r6, [r0, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edb06:	bfd8      	it	le
 23edb08:	4249      	negle	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edb0a:	fbc5 3a06 	smlal	r3, sl, r5, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edb0e:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
 23edb12:	0fdb      	lsrs	r3, r3, #31
 23edb14:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edb18:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
 23edb1a:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
 23edb1e:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
 23edb22:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
 23edb26:	bf48      	it	mi
 23edb28:	3501      	addmi	r5, #1
            res00 += dst_offset;
 23edb2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23edb2c:	42ae      	cmp	r6, r5
        result++;
 23edb2e:	bfc8      	it	gt
 23edb30:	f10a 0a01 	addgt.w	sl, sl, #1
 23edb34:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
 23edb36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23edb38:	3701      	adds	r7, #1
            res00 = MAX(res00, activation_min);
 23edb3a:	459a      	cmp	sl, r3
 23edb3c:	bfb8      	it	lt
 23edb3e:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
 23edb40:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23edb42:	459a      	cmp	sl, r3
 23edb44:	bfa8      	it	ge
 23edb46:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
 23edb48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
 23edb4a:	f882 a000 	strb.w	sl, [r2]
            dst_ptr += rhs_rows;
 23edb4e:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23edb50:	e7bc      	b.n	23edacc <arm_nn_mat_mult_nt_t_s8+0x668>
            q31_t res00 = 0;
 23edb52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23edb54:	e7c6      	b.n	23edae4 <arm_nn_mat_mult_nt_t_s8+0x680>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23edb56:	990c      	ldr	r1, [sp, #48]	; 0x30
 23edb58:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 23edb5a:	56c9      	ldrsb	r1, [r1, r3]
 23edb5c:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
 23edb5e:	9e00      	ldr	r6, [sp, #0]
 23edb60:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edb62:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
 23edb64:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edb68:	e7bd      	b.n	23edae6 <arm_nn_mat_mult_nt_t_s8+0x682>

023edb6a <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 23edb6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23edb6e:	b095      	sub	sp, #84	; 0x54
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23edb70:	9c22      	ldr	r4, [sp, #136]	; 0x88
{
 23edb72:	9001      	str	r0, [sp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edb74:	9822      	ldr	r0, [sp, #136]	; 0x88
 23edb76:	2c00      	cmp	r4, #0
 23edb78:	f1c0 0000 	rsb	r0, r0, #0
 23edb7c:	bfc8      	it	gt
 23edb7e:	2000      	movgt	r0, #0
 23edb80:	9004      	str	r0, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edb82:	2001      	movs	r0, #1
 23edb84:	9c04      	ldr	r4, [sp, #16]
 23edb86:	9308      	str	r3, [sp, #32]
 23edb88:	40a0      	lsls	r0, r4
 23edb8a:	3801      	subs	r0, #1
 23edb8c:	9005      	str	r0, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23edb8e:	1040      	asrs	r0, r0, #1
 23edb90:	9006      	str	r0, [sp, #24]
        threshold++;
 23edb92:	3001      	adds	r0, #1
 23edb94:	9009      	str	r0, [sp, #36]	; 0x24
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 23edb96:	9823      	ldr	r0, [sp, #140]	; 0x8c
 23edb98:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 23edb9a:	0040      	lsls	r0, r0, #1
 23edb9c:	900a      	str	r0, [sp, #40]	; 0x28
 23edb9e:	9808      	ldr	r0, [sp, #32]
 23edba0:	2c00      	cmp	r4, #0
 23edba2:	f100 0002 	add.w	r0, r0, #2
 23edba6:	9002      	str	r0, [sp, #8]
 23edba8:	9823      	ldr	r0, [sp, #140]	; 0x8c
{
 23edbaa:	910c      	str	r1, [sp, #48]	; 0x30
 23edbac:	ea4f 1010 	mov.w	r0, r0, lsr #4
 23edbb0:	900e      	str	r0, [sp, #56]	; 0x38
 23edbb2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23edbb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23edbb6:	f020 000f 	bic.w	r0, r0, #15
 23edbba:	bfb8      	it	lt
 23edbbc:	2000      	movlt	r0, #0
 23edbbe:	9007      	str	r0, [sp, #28]
 23edbc0:	9c07      	ldr	r4, [sp, #28]
 23edbc2:	9801      	ldr	r0, [sp, #4]
 23edbc4:	b219      	sxth	r1, r3
 23edbc6:	4420      	add	r0, r4
 23edbc8:	900b      	str	r0, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edbca:	980c      	ldr	r0, [sp, #48]	; 0x30
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23edbcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edbce:	9003      	str	r0, [sp, #12]
 23edbd0:	9824      	ldr	r0, [sp, #144]	; 0x90
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23edbd2:	b21b      	sxth	r3, r3
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edbd4:	3801      	subs	r0, #1
 23edbd6:	900f      	str	r0, [sp, #60]	; 0x3c
 23edbd8:	9808      	ldr	r0, [sp, #32]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23edbda:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edbde:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 23edbe2:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 23edbe6:	30fe      	adds	r0, #254	; 0xfe
 23edbe8:	9010      	str	r0, [sp, #64]	; 0x40
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edbea:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23edbec:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edbf0:	380f      	subs	r0, #15
 23edbf2:	9011      	str	r0, [sp, #68]	; 0x44
 23edbf4:	1e60      	subs	r0, r4, #1
 23edbf6:	9012      	str	r0, [sp, #72]	; 0x48
 23edbf8:	9801      	ldr	r0, [sp, #4]
 23edbfa:	4240      	negs	r0, r0
 23edbfc:	9013      	str	r0, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edbfe:	9822      	ldr	r0, [sp, #136]	; 0x88
 23edc00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23edc04:	900d      	str	r0, [sp, #52]	; 0x34
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edc06:	9c02      	ldr	r4, [sp, #8]
 23edc08:	9810      	ldr	r0, [sp, #64]	; 0x40
 23edc0a:	4420      	add	r0, r4
 23edc0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 23edc0e:	4284      	cmp	r4, r0
 23edc10:	dc67      	bgt.n	23edce2 <arm_nn_vec_mat_mult_t_s8+0x178>
 23edc12:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23edc14:	9824      	ldr	r0, [sp, #144]	; 0x90
 23edc16:	2c00      	cmp	r4, #0
 23edc18:	ea4f 0050 	mov.w	r0, r0, lsr #1
 23edc1c:	bfac      	ite	ge
 23edc1e:	4684      	movge	ip, r0
 23edc20:	f04f 0c00 	movlt.w	ip, #0
 23edc24:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23edc28:	bfb8      	it	lt
 23edc2a:	2000      	movlt	r0, #0
 23edc2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23edc2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23edc30:	fb05 4c0c 	mla	ip, r5, ip, r4
 23edc34:	9c08      	ldr	r4, [sp, #32]
 23edc36:	4404      	add	r4, r0
 23edc38:	4620      	mov	r0, r4
    }

    if (rhs_rows % 2)
 23edc3a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23edc3c:	07e4      	lsls	r4, r4, #31
 23edc3e:	d54c      	bpl.n	23edcda <arm_nn_vec_mat_mult_t_s8+0x170>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
 23edc40:	b102      	cbz	r2, 23edc44 <arm_nn_vec_mat_mult_t_s8+0xda>
        {
            res00 = *bias++;
 23edc42:	6812      	ldr	r2, [r2, #0]
        q31_t res00 = 0;
 23edc44:	2500      	movs	r5, #0
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edc46:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 23edc48:	f1a4 090f 	sub.w	r9, r4, #15
 23edc4c:	9c01      	ldr	r4, [sp, #4]
 23edc4e:	45a9      	cmp	r9, r5
 23edc50:	eb04 0805 	add.w	r8, r4, r5
 23edc54:	eb0c 0e05 	add.w	lr, ip, r5
 23edc58:	f300 814c 	bgt.w	23edef4 <arm_nn_vec_mat_mult_t_s8+0x38a>
 23edc5c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 23edc5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23edc60:	2900      	cmp	r1, #0
 23edc62:	ea4f 1303 	mov.w	r3, r3, lsl #4
 23edc66:	bfb8      	it	lt
 23edc68:	2300      	movlt	r3, #0
 23edc6a:	9907      	ldr	r1, [sp, #28]
 23edc6c:	3901      	subs	r1, #1
 23edc6e:	448c      	add	ip, r1
 23edc70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23edc72:	1a5b      	subs	r3, r3, r1
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edc74:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 23edc76:	18cc      	adds	r4, r1, r3
 23edc78:	42a5      	cmp	r5, r4
 23edc7a:	f300 818d 	bgt.w	23edf98 <arm_nn_vec_mat_mult_t_s8+0x42e>
 23edc7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23edc88:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc8a:	2300      	movs	r3, #0
 23edc8c:	461c      	mov	r4, r3
 23edc8e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 23edc90:	fbc2 1405 	smlal	r1, r4, r2, r5
    result = (int32_t)(mult.long_long >> 31);
 23edc94:	0fca      	lsrs	r2, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc96:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (int32_t)(mult.long_long >> 31);
 23edc98:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc9c:	4299      	cmp	r1, r3
 23edc9e:	bfd8      	it	le
 23edca0:	460b      	movle	r3, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edca2:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edca6:	bfd8      	it	le
 23edca8:	425b      	negle	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edcaa:	4099      	lsls	r1, r3
 23edcac:	3901      	subs	r1, #1
    if (result < 0)
 23edcae:	fa52 f303 	asrs.w	r3, r2, r3
    int32_t remainder = remainder_mask & dividend;
 23edcb2:	ea02 0401 	and.w	r4, r2, r1
    q31_t threshold = remainder_mask >> 1;
 23edcb6:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23edcba:	bf48      	it	mi
 23edcbc:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 23edcbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
    if (remainder > threshold)
 23edcc0:	428c      	cmp	r4, r1
        result++;
 23edcc2:	bfc8      	it	gt
 23edcc4:	3301      	addgt	r3, #1
 23edcc6:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 23edcc8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 23edcca:	4293      	cmp	r3, r2
 23edccc:	bfb8      	it	lt
 23edcce:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 23edcd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23edcd2:	4293      	cmp	r3, r2
 23edcd4:	bfa8      	it	ge
 23edcd6:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 23edcd8:	7003      	strb	r3, [r0, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 23edcda:	2000      	movs	r0, #0
 23edcdc:	b015      	add	sp, #84	; 0x54
 23edcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
 23edce2:	2a00      	cmp	r2, #0
 23edce4:	d06c      	beq.n	23eddc0 <arm_nn_vec_mat_mult_t_s8+0x256>
            res00 = *bias++;
 23edce6:	4615      	mov	r5, r2
 23edce8:	f855 4b08 	ldr.w	r4, [r5], #8
            res01 = *bias++;
 23edcec:	6850      	ldr	r0, [r2, #4]
 23edcee:	462a      	mov	r2, r5
        int32_t rhs_cols_idx = 0;
 23edcf0:	f04f 0c00 	mov.w	ip, #0
 23edcf4:	9d03      	ldr	r5, [sp, #12]
 23edcf6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 23edcf8:	19af      	adds	r7, r5, r6
 23edcfa:	9d01      	ldr	r5, [sp, #4]
 23edcfc:	eb05 080c 	add.w	r8, r5, ip
 23edd00:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 23edd02:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edd06:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23edd08:	4565      	cmp	r5, ip
 23edd0a:	dc5c      	bgt.n	23eddc6 <arm_nn_vec_mat_mult_t_s8+0x25c>
 23edd0c:	9d03      	ldr	r5, [sp, #12]
 23edd0e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 23edd10:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 23edd14:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edd16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 23edd18:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 23edd1a:	4475      	add	r5, lr
 23edd1c:	42ae      	cmp	r6, r5
 23edd1e:	f300 80d7 	bgt.w	23eded0 <arm_nn_vec_mat_mult_t_s8+0x366>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edd22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edd24:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edd28:	40ac      	lsls	r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edd2a:	2500      	movs	r5, #0
 23edd2c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 23edd2e:	fbc4 6507 	smlal	r6, r5, r4, r7
    result = (int32_t)(mult.long_long >> 31);
 23edd32:	0ff4      	lsrs	r4, r6, #31
 23edd34:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23edd38:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 23edd3a:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23edd3c:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23edd3e:	4025      	ands	r5, r4
    q31_t threshold = remainder_mask >> 1;
 23edd40:	4134      	asrs	r4, r6
 23edd42:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23edd44:	bf58      	it	pl
 23edd46:	463e      	movpl	r6, r7
    if (remainder > threshold)
 23edd48:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edd4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edd4c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edd4e:	fa00 f605 	lsl.w	r6, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edd52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23edd56:	f04f 0500 	mov.w	r5, #0
 23edd5a:	fbc6 0507 	smlal	r0, r5, r6, r7
    result = (int32_t)(mult.long_long >> 31);
 23edd5e:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 23edd62:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23edd66:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 23edd68:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23edd6a:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23edd6c:	ea00 0505 	and.w	r5, r0, r5
        result++;
 23edd70:	bfc8      	it	gt
 23edd72:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
 23edd74:	4130      	asrs	r0, r6
 23edd76:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23edd78:	bf58      	it	pl
 23edd7a:	463e      	movpl	r6, r7
    if (remainder > threshold)
 23edd7c:	42b5      	cmp	r5, r6
        res00 += dst_offset;
 23edd7e:	9d20      	ldr	r5, [sp, #128]	; 0x80
        result++;
 23edd80:	bfc8      	it	gt
 23edd82:	3001      	addgt	r0, #1
 23edd84:	442c      	add	r4, r5
        res01 += dst_offset;
 23edd86:	4428      	add	r0, r5
        res00 = MAX(res00, activation_min);
 23edd88:	9d25      	ldr	r5, [sp, #148]	; 0x94
 23edd8a:	42ac      	cmp	r4, r5
 23edd8c:	bfb8      	it	lt
 23edd8e:	462c      	movlt	r4, r5
        res01 = MAX(res01, activation_min);
 23edd90:	42a8      	cmp	r0, r5
 23edd92:	bfb8      	it	lt
 23edd94:	4628      	movlt	r0, r5
        res00 = MIN(res00, activation_max);
 23edd96:	9d26      	ldr	r5, [sp, #152]	; 0x98
 23edd98:	42ac      	cmp	r4, r5
 23edd9a:	bfa8      	it	ge
 23edd9c:	462c      	movge	r4, r5
        *dst++ = (q7_t)res00;
 23edd9e:	9d02      	ldr	r5, [sp, #8]
 23edda0:	f805 4c02 	strb.w	r4, [r5, #-2]
        res01 = MIN(res01, activation_max);
 23edda4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 23edda6:	42a0      	cmp	r0, r4
 23edda8:	bfa8      	it	ge
 23eddaa:	4620      	movge	r0, r4
        rhs += 2 * rhs_cols;
 23eddac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        *dst++ = (q7_t)res01;
 23eddae:	f805 0c01 	strb.w	r0, [r5, #-1]
        rhs += 2 * rhs_cols;
 23eddb2:	9803      	ldr	r0, [sp, #12]
 23eddb4:	4420      	add	r0, r4
 23eddb6:	9003      	str	r0, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eddb8:	4628      	mov	r0, r5
 23eddba:	3002      	adds	r0, #2
 23eddbc:	9002      	str	r0, [sp, #8]
 23eddbe:	e722      	b.n	23edc06 <arm_nn_vec_mat_mult_t_s8+0x9c>
        q31_t res01 = 0;
 23eddc0:	4610      	mov	r0, r2
        q31_t res00 = 0;
 23eddc2:	4614      	mov	r4, r2
 23eddc4:	e794      	b.n	23edcf0 <arm_nn_vec_mat_mult_t_s8+0x186>
    memcpy(&val, *in_q7, 4);
 23eddc6:	9d01      	ldr	r5, [sp, #4]
 23eddc8:	f8de b000 	ldr.w	fp, [lr]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eddcc:	f855 500c 	ldr.w	r5, [r5, ip]
 23eddd0:	fa23 f68b 	sxtab16	r6, r3, fp
 23eddd4:	fa21 fa85 	sxtab16	sl, r1, r5
 23eddd8:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 23edddc:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23edde0:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edde4:	fa23 fb8b 	sxtab16	fp, r3, fp
 23edde8:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eddec:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eddf0:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eddf4:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eddf8:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eddfc:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede00:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede04:	fb2a 0006 	smlad	r0, sl, r6, r0
 23ede08:	fb25 0009 	smlad	r0, r5, r9, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23ede10:	fa23 f68b 	sxtab16	r6, r3, fp
 23ede14:	fa21 fa85 	sxtab16	sl, r1, r5
 23ede18:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ede1c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ede20:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede24:	fa23 fb8b 	sxtab16	fp, r3, fp
 23ede28:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede2c:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede30:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede34:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede38:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ede3c:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede40:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede44:	fb2a 0606 	smlad	r6, sl, r6, r0
 23ede48:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede4c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 23ede50:	fa23 f08b 	sxtab16	r0, r3, fp
 23ede54:	fa21 f985 	sxtab16	r9, r1, r5
 23ede58:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ede5c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ede60:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede64:	fa23 fb8b 	sxtab16	fp, r3, fp
 23ede68:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede6c:	fb29 4400 	smlad	r4, r9, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede70:	fa23 f08a 	sxtab16	r0, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede74:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede78:	f8de b00c 	ldr.w	fp, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ede7c:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede80:	fa23 fa8a 	sxtab16	sl, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ede84:	fb29 6000 	smlad	r0, r9, r0, r6
 23ede88:	fb25 050a 	smlad	r5, r5, sl, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ede8c:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 23ede90:	fa23 f68b 	sxtab16	r6, r3, fp
 23ede94:	fa21 fa8e 	sxtab16	sl, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 23ede98:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ede9c:	f8d7 800c 	ldr.w	r8, [r7, #12]
 23edea0:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edea4:	fa23 f98b 	sxtab16	r9, r3, fp
 23edea8:	fa21 fe8e 	sxtab16	lr, r1, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edeac:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edeb0:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edeb4:	fb2e 4409 	smlad	r4, lr, r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 23edeb8:	ea4f 2038 	mov.w	r0, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edebc:	fa23 f080 	sxtab16	r0, r3, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edec0:	fb2a 550b 	smlad	r5, sl, fp, r5
 23edec4:	fb2e 5000 	smlad	r0, lr, r0, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edec8:	f10c 0c10 	add.w	ip, ip, #16
 23edecc:	3710      	adds	r7, #16
 23edece:	e714      	b.n	23edcfa <arm_nn_vec_mat_mult_t_s8+0x190>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eded0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 23eded2:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23eded6:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23ededa:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23ededc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 23edede:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 23edee0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            res00 += lhs_value * rhs_value0;
 23edee2:	fb05 440c 	mla	r4, r5, ip, r4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 23edee6:	f917 c006 	ldrsb.w	ip, [r7, r6]
 23edeea:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 23edeec:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
 23edeee:	fb05 000c 	mla	r0, r5, ip, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edef2:	e710      	b.n	23edd16 <arm_nn_vec_mat_mult_t_s8+0x1ac>
 23edef4:	9c01      	ldr	r4, [sp, #4]
 23edef6:	f85c 7005 	ldr.w	r7, [ip, r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edefa:	5966      	ldr	r6, [r4, r5]
 23edefc:	fa23 fb87 	sxtab16	fp, r3, r7
 23edf00:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23edf04:	ea4f 2737 	mov.w	r7, r7, ror #8
 23edf08:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf0c:	fa23 f787 	sxtab16	r7, r3, r7
 23edf10:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edf14:	fb2a 220b 	smlad	r2, sl, fp, r2
 23edf18:	fb26 2207 	smlad	r2, r6, r7, r2
 23edf1c:	f8de 4004 	ldr.w	r4, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf20:	f8d8 6004 	ldr.w	r6, [r8, #4]
 23edf24:	fa23 fb84 	sxtab16	fp, r3, r4
 23edf28:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23edf2c:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf30:	fa23 f784 	sxtab16	r7, r3, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 23edf34:	ea4f 2436 	mov.w	r4, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf38:	fa21 f484 	sxtab16	r4, r1, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edf3c:	fb2a 220b 	smlad	r2, sl, fp, r2
 23edf40:	fb24 2407 	smlad	r4, r4, r7, r2
 23edf44:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf48:	f8d8 6008 	ldr.w	r6, [r8, #8]
 23edf4c:	fa23 fb87 	sxtab16	fp, r3, r7
 23edf50:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23edf54:	ea4f 2737 	mov.w	r7, r7, ror #8
 23edf58:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf5c:	fa23 f787 	sxtab16	r7, r3, r7
 23edf60:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edf64:	fb2a 440b 	smlad	r4, sl, fp, r4
 23edf68:	fb26 4607 	smlad	r6, r6, r7, r4
 23edf6c:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf70:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 23edf74:	fa23 f482 	sxtab16	r4, r3, r2
 23edf78:	fa21 f78e 	sxtab16	r7, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 23edf7c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf80:	fa23 f882 	sxtab16	r8, r3, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 23edf84:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edf88:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edf8c:	fb27 6604 	smlad	r6, r7, r4, r6
 23edf90:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edf94:	3510      	adds	r5, #16
 23edf96:	e659      	b.n	23edc4c <arm_nn_vec_mat_mult_t_s8+0xe2>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23edf98:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 23edf9a:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23edf9e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23edfa0:	442c      	add	r4, r5
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23edfa2:	f911 5b01 	ldrsb.w	r5, [r1], #1
 23edfa6:	4435      	add	r5, r6
            res00 += lhs_value * rhs_value0;
 23edfa8:	fb05 2204 	mla	r2, r5, r4, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edfac:	e662      	b.n	23edc74 <arm_nn_vec_mat_mult_t_s8+0x10a>

023edfae <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 23edfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 23edfb2:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
    while (block_cnt > 0)
 23edfb6:	460e      	mov	r6, r1
 23edfb8:	f022 0403 	bic.w	r4, r2, #3
    block_cnt = block_size >> 2;
 23edfbc:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
 23edfc0:	4404      	add	r4, r0
 23edfc2:	42a0      	cmp	r0, r4
 23edfc4:	d108      	bne.n	23edfd8 <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 23edfc6:	f002 0203 	and.w	r2, r2, #3
 23edfca:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 23edfce:	4422      	add	r2, r4
 23edfd0:	4294      	cmp	r4, r2
 23edfd2:	d113      	bne.n	23edffc <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
 23edfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23edfd8:	f850 5b04 	ldr.w	r5, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edfdc:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 23edfde:	ea4f 2735 	mov.w	r7, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23edfe2:	fa2c f585 	sxtab16	r5, ip, r5
 23edfe6:	fa2c f787 	sxtab16	r7, ip, r7
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 23edfea:	eac7 4825 	pkhtb	r8, r7, r5, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 23edfee:	eac5 4507 	pkhbt	r5, r5, r7, lsl #16
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
 23edff2:	f846 8c04 	str.w	r8, [r6, #-4]
 23edff6:	f846 5c08 	str.w	r5, [r6, #-8]
        block_cnt--;
 23edffa:	e7e2      	b.n	23edfc2 <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
 23edffc:	f914 0b01 	ldrsb.w	r0, [r4], #1
 23ee000:	4418      	add	r0, r3
 23ee002:	f821 0b02 	strh.w	r0, [r1], #2
        block_cnt--;
 23ee006:	e7e3      	b.n	23edfd0 <arm_q7_to_q15_with_offset+0x22>

023ee008 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 23ee008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee00c:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ee00e:	2300      	movs	r3, #0
{
 23ee010:	b08f      	sub	sp, #60	; 0x3c
 23ee012:	9008      	str	r0, [sp, #32]
 23ee014:	910b      	str	r1, [sp, #44]	; 0x2c
 23ee016:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ee018:	9300      	str	r3, [sp, #0]
 23ee01a:	9303      	str	r3, [sp, #12]
 23ee01c:	9a00      	ldr	r2, [sp, #0]
 23ee01e:	9b08      	ldr	r3, [sp, #32]
 23ee020:	4413      	add	r3, r2
 23ee022:	9304      	str	r3, [sp, #16]
 23ee024:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ee026:	4413      	add	r3, r2
 23ee028:	9307      	str	r3, [sp, #28]
 23ee02a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ee02c:	9b03      	ldr	r3, [sp, #12]
 23ee02e:	4293      	cmp	r3, r2
 23ee030:	db02      	blt.n	23ee038 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
 23ee032:	b00f      	add	sp, #60	; 0x3c
 23ee034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
 23ee038:	9b08      	ldr	r3, [sp, #32]
 23ee03a:	9a00      	ldr	r2, [sp, #0]
 23ee03c:	569b      	ldrsb	r3, [r3, r2]
 23ee03e:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
 23ee040:	2301      	movs	r3, #1
 23ee042:	9a02      	ldr	r2, [sp, #8]
 23ee044:	4293      	cmp	r3, r2
 23ee046:	f2c0 8134 	blt.w	23ee2b2 <arm_softmax_s8+0x2aa>
        int32_t sum = 0;
 23ee04a:	2300      	movs	r3, #0
        for (col = 0; col < row_size; ++col)
 23ee04c:	469e      	mov	lr, r3
        mult = 1 - mult;
 23ee04e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 23ee2c8 <arm_softmax_s8+0x2c0>
 23ee052:	9a02      	ldr	r2, [sp, #8]
 23ee054:	4596      	cmp	lr, r2
 23ee056:	f2c0 8139 	blt.w	23ee2cc <arm_softmax_s8+0x2c4>
  return __builtin_clz(value);
 23ee05a:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 23ee05e:	4093      	lsls	r3, r2
 23ee060:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 23ee064:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23ee066:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 23ee06a:	f141 0100 	adc.w	r1, r1, #0
 23ee06e:	085b      	lsrs	r3, r3, #1
 23ee070:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 23ee074:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
 23ee078:	4a92      	ldr	r2, [pc, #584]	; (23ee2c4 <arm_softmax_s8+0x2bc>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23ee07a:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 23ee07c:	425c      	negs	r4, r3
 23ee07e:	fb02 4401 	mla	r4, r2, r1, r4
 23ee082:	fba3 2002 	umull	r2, r0, r3, r2
 23ee086:	4404      	add	r4, r0
 23ee088:	488f      	ldr	r0, [pc, #572]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee08a:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
 23ee08c:	f164 0400 	sbc.w	r4, r4, #0
 23ee090:	2c00      	cmp	r4, #0
 23ee092:	da04      	bge.n	23ee09e <arm_softmax_s8+0x96>
 23ee094:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee098:	1812      	adds	r2, r2, r0
 23ee09a:	f144 0400 	adc.w	r4, r4, #0
 23ee09e:	0fd2      	lsrs	r2, r2, #31
 23ee0a0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 23ee0a4:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 23ee0a8:	fb00 f501 	mul.w	r5, r0, r1
 23ee0ac:	17c2      	asrs	r2, r0, #31
 23ee0ae:	fb03 5502 	mla	r5, r3, r2, r5
 23ee0b2:	fba0 4203 	umull	r4, r2, r0, r3
 23ee0b6:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
 23ee0ba:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
 23ee0be:	0fe4      	lsrs	r4, r4, #31
 23ee0c0:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee0c4:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
 23ee0c8:	2c00      	cmp	r4, #0
 23ee0ca:	bfac      	ite	ge
 23ee0cc:	2500      	movge	r5, #0
 23ee0ce:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 23ee0d2:	4a7d      	ldr	r2, [pc, #500]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee0d4:	bfa8      	it	ge
 23ee0d6:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee0da:	fbc0 2504 	smlal	r2, r5, r0, r4
 23ee0de:	2d00      	cmp	r5, #0
 23ee0e0:	da04      	bge.n	23ee0ec <arm_softmax_s8+0xe4>
 23ee0e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23ee0e6:	1912      	adds	r2, r2, r4
 23ee0e8:	f145 0500 	adc.w	r5, r5, #0
 23ee0ec:	0fd2      	lsrs	r2, r2, #31
 23ee0ee:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee0f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
 23ee0f6:	2a00      	cmp	r2, #0
 23ee0f8:	4d73      	ldr	r5, [pc, #460]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee0fa:	bfa6      	itte	ge
 23ee0fc:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23ee100:	f04f 0c00 	movge.w	ip, #0
 23ee104:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee108:	fb02 f401 	mul.w	r4, r2, r1
 23ee10c:	17d0      	asrs	r0, r2, #31
 23ee10e:	fb03 4400 	mla	r4, r3, r0, r4
 23ee112:	fba2 0e03 	umull	r0, lr, r2, r3
 23ee116:	1940      	adds	r0, r0, r5
 23ee118:	4474      	add	r4, lr
    result = (int32_t)(mult / (1ll << 31));
 23ee11a:	eb44 040c 	adc.w	r4, r4, ip
 23ee11e:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
 23ee120:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee124:	da04      	bge.n	23ee130 <arm_softmax_s8+0x128>
 23ee126:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 23ee12a:	1940      	adds	r0, r0, r5
 23ee12c:	f144 0400 	adc.w	r4, r4, #0
 23ee130:	0fc0      	lsrs	r0, r0, #31
 23ee132:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee136:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
 23ee13a:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
 23ee13e:	bf0c      	ite	eq
 23ee140:	2400      	moveq	r4, #0
 23ee142:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 23ee146:	4e60      	ldr	r6, [pc, #384]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee148:	bf08      	it	eq
 23ee14a:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee14e:	fbc2 6400 	smlal	r6, r4, r2, r0
 23ee152:	4625      	mov	r5, r4
 23ee154:	2d00      	cmp	r5, #0
 23ee156:	4634      	mov	r4, r6
 23ee158:	da04      	bge.n	23ee164 <arm_softmax_s8+0x15c>
 23ee15a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee15e:	1834      	adds	r4, r6, r0
 23ee160:	f145 0500 	adc.w	r5, r5, #0
 23ee164:	0fe4      	lsrs	r4, r4, #31
 23ee166:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee16a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 23ee16e:	bfab      	itete	ge
 23ee170:	2000      	movge	r0, #0
 23ee172:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 23ee176:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 23ee17a:	2500      	movlt	r5, #0
 23ee17c:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee180:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee184:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee188:	bfcb      	itete	gt
 23ee18a:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
 23ee18e:	2500      	movle	r5, #0
 23ee190:	2400      	movgt	r4, #0
 23ee192:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
 23ee196:	4028      	ands	r0, r5
 23ee198:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee19a:	4402      	add	r2, r0
        mult = 1 - mult;
 23ee19c:	2a00      	cmp	r2, #0
 23ee19e:	484a      	ldr	r0, [pc, #296]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee1a0:	bfa6      	itte	ge
 23ee1a2:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 23ee1a6:	2500      	movge	r5, #0
 23ee1a8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee1ac:	4351      	muls	r1, r2
 23ee1ae:	17d6      	asrs	r6, r2, #31
 23ee1b0:	fb03 1106 	mla	r1, r3, r6, r1
 23ee1b4:	fba2 3603 	umull	r3, r6, r2, r3
 23ee1b8:	181b      	adds	r3, r3, r0
 23ee1ba:	4431      	add	r1, r6
    result = (int32_t)(mult / (1ll << 31));
 23ee1bc:	eb41 0105 	adc.w	r1, r1, r5
 23ee1c0:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
 23ee1c2:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee1c6:	da04      	bge.n	23ee1d2 <arm_softmax_s8+0x1ca>
 23ee1c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee1cc:	181b      	adds	r3, r3, r0
 23ee1ce:	f141 0100 	adc.w	r1, r1, #0
 23ee1d2:	0fdb      	lsrs	r3, r3, #31
 23ee1d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee1d8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
 23ee1dc:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
 23ee1e0:	bf0c      	ite	eq
 23ee1e2:	2000      	moveq	r0, #0
 23ee1e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23ee1e8:	4937      	ldr	r1, [pc, #220]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee1ea:	bf08      	it	eq
 23ee1ec:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee1f0:	fbc2 1003 	smlal	r1, r0, r2, r3
 23ee1f4:	2800      	cmp	r0, #0
 23ee1f6:	da04      	bge.n	23ee202 <arm_softmax_s8+0x1fa>
 23ee1f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 23ee1fc:	18c9      	adds	r1, r1, r3
 23ee1fe:	f140 0000 	adc.w	r0, r0, #0
 23ee202:	0fc9      	lsrs	r1, r1, #31
 23ee204:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee208:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 23ee20c:	bfab      	itete	ge
 23ee20e:	2300      	movge	r3, #0
 23ee210:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 23ee214:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23ee218:	2100      	movlt	r1, #0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee21a:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee21e:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee222:	bfd4      	ite	le
 23ee224:	2000      	movle	r0, #0
 23ee226:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee22a:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee22e:	bfd4      	ite	le
 23ee230:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 23ee234:	2100      	movgt	r1, #0
 23ee236:	4018      	ands	r0, r3
 23ee238:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee23a:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee23c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 23ee240:	bfab      	itete	ge
 23ee242:	2300      	movge	r3, #0
 23ee244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 23ee248:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23ee24c:	2100      	movlt	r1, #0
 23ee24e:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee252:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee256:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee25a:	bfcb      	itete	gt
 23ee25c:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 23ee260:	2100      	movle	r1, #0
 23ee262:	2200      	movgt	r2, #0
 23ee264:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 23ee268:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
 23ee26a:	4053      	eors	r3, r2
 23ee26c:	9309      	str	r3, [sp, #36]	; 0x24
 23ee26e:	bf55      	itete	pl
 23ee270:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 23ee274:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
 23ee278:	2300      	movpl	r3, #0
 23ee27a:	4a13      	ldrmi	r2, [pc, #76]	; (23ee2c8 <arm_softmax_s8+0x2c0>)
 23ee27c:	f04f 0c00 	mov.w	ip, #0
 23ee280:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ee284:	2301      	movs	r3, #1
 23ee286:	fa03 f30a 	lsl.w	r3, r3, sl
 23ee28a:	3b01      	subs	r3, #1
 23ee28c:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23ee28e:	105b      	asrs	r3, r3, #1
 23ee290:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
 23ee292:	f8df e034 	ldr.w	lr, [pc, #52]	; 23ee2c8 <arm_softmax_s8+0x2c0>
        threshold++;
 23ee296:	3301      	adds	r3, #1
 23ee298:	930a      	str	r3, [sp, #40]	; 0x28
 23ee29a:	9b02      	ldr	r3, [sp, #8]
 23ee29c:	459c      	cmp	ip, r3
 23ee29e:	f2c0 8183 	blt.w	23ee5a8 <arm_softmax_s8+0x5a0>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ee2a2:	9b03      	ldr	r3, [sp, #12]
 23ee2a4:	9a00      	ldr	r2, [sp, #0]
 23ee2a6:	3301      	adds	r3, #1
 23ee2a8:	9303      	str	r3, [sp, #12]
 23ee2aa:	9b02      	ldr	r3, [sp, #8]
 23ee2ac:	441a      	add	r2, r3
 23ee2ae:	9200      	str	r2, [sp, #0]
 23ee2b0:	e6b4      	b.n	23ee01c <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
 23ee2b2:	9a04      	ldr	r2, [sp, #16]
 23ee2b4:	9901      	ldr	r1, [sp, #4]
 23ee2b6:	56d2      	ldrsb	r2, [r2, r3]
        for (col = 1; col < row_size; ++col)
 23ee2b8:	3301      	adds	r3, #1
            max = MAX(max, input[col]);
 23ee2ba:	4291      	cmp	r1, r2
 23ee2bc:	bfb8      	it	lt
 23ee2be:	4611      	movlt	r1, r2
 23ee2c0:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
 23ee2c2:	e6be      	b.n	23ee042 <arm_softmax_s8+0x3a>
 23ee2c4:	c3c3c3c4 	.word	0xc3c3c3c4
 23ee2c8:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
 23ee2cc:	9a04      	ldr	r2, [sp, #16]
 23ee2ce:	f912 000e 	ldrsb.w	r0, [r2, lr]
 23ee2d2:	9a01      	ldr	r2, [sp, #4]
 23ee2d4:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
 23ee2d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ee2d8:	4282      	cmp	r2, r0
 23ee2da:	f300 8151 	bgt.w	23ee580 <arm_softmax_s8+0x578>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 23ee2de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23ee2e0:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
 23ee2e2:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
 23ee2e4:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
 23ee2e8:	bf0b      	itete	eq
 23ee2ea:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 23ee2ee:	4641      	movne	r1, r8
 23ee2f0:	2200      	moveq	r2, #0
 23ee2f2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee2f6:	fbc0 120b 	smlal	r1, r2, r0, fp
 23ee2fa:	2a00      	cmp	r2, #0
 23ee2fc:	4614      	mov	r4, r2
 23ee2fe:	da04      	bge.n	23ee30a <arm_softmax_s8+0x302>
 23ee300:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23ee304:	1889      	adds	r1, r1, r2
 23ee306:	f144 0400 	adc.w	r4, r4, #0
 23ee30a:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee30c:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
 23ee30e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee312:	d104      	bne.n	23ee31e <arm_softmax_s8+0x316>
        result = Q31_MAX;
 23ee314:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 23ee318:	bf08      	it	eq
 23ee31a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23ee31e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee322:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23ee324:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23ee328:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23ee32c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 23ee330:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23ee334:	fbcc 140c 	smlal	r1, r4, ip, ip
 23ee338:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23ee33a:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee33e:	da04      	bge.n	23ee34a <arm_softmax_s8+0x342>
 23ee340:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee344:	1809      	adds	r1, r1, r0
 23ee346:	f144 0400 	adc.w	r4, r4, #0
 23ee34a:	0fc9      	lsrs	r1, r1, #31
 23ee34c:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee350:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23ee354:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee356:	fb01 fa04 	mul.w	sl, r1, r4
 23ee35a:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee35e:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 23ee362:	f1b9 0f00 	cmp.w	r9, #0
 23ee366:	da05      	bge.n	23ee374 <arm_softmax_s8+0x36c>
 23ee368:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 23ee36c:	eb10 000a 	adds.w	r0, r0, sl
 23ee370:	f149 0900 	adc.w	r9, r9, #0
 23ee374:	0fc0      	lsrs	r0, r0, #31
 23ee376:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ee37a:	f000 0903 	and.w	r9, r0, #3
        threshold++;
 23ee37e:	1080      	asrs	r0, r0, #2
 23ee380:	bf54      	ite	pl
 23ee382:	f04f 0a01 	movpl.w	sl, #1
 23ee386:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 23ee38a:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 23ee38c:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
 23ee390:	bfc8      	it	gt
 23ee392:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23ee394:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
 23ee398:	bf0b      	itete	eq
 23ee39a:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 23ee39e:	46c1      	movne	r9, r8
 23ee3a0:	f04f 0a00 	moveq.w	sl, #0
 23ee3a4:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee3a8:	fb0c f404 	mul.w	r4, ip, r4
 23ee3ac:	fb01 4406 	mla	r4, r1, r6, r4
 23ee3b0:	fbac 6701 	umull	r6, r7, ip, r1
 23ee3b4:	eb16 0609 	adds.w	r6, r6, r9
 23ee3b8:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
 23ee3ba:	eb44 040a 	adc.w	r4, r4, sl
 23ee3be:	2c00      	cmp	r4, #0
 23ee3c0:	da05      	bge.n	23ee3ce <arm_softmax_s8+0x3c6>
 23ee3c2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23ee3c6:	eb16 0609 	adds.w	r6, r6, r9
 23ee3ca:	f144 0400 	adc.w	r4, r4, #0
 23ee3ce:	0ff6      	lsrs	r6, r6, #31
 23ee3d0:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee3d4:	4430      	add	r0, r6
        mult = 1 - mult;
 23ee3d6:	2800      	cmp	r0, #0
 23ee3d8:	bfab      	itete	ge
 23ee3da:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23ee3de:	4644      	movlt	r4, r8
 23ee3e0:	2600      	movge	r6, #0
 23ee3e2:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee3e6:	4f68      	ldr	r7, [pc, #416]	; (23ee588 <arm_softmax_s8+0x580>)
 23ee3e8:	fbc0 4607 	smlal	r4, r6, r0, r7
 23ee3ec:	2e00      	cmp	r6, #0
 23ee3ee:	da04      	bge.n	23ee3fa <arm_softmax_s8+0x3f2>
 23ee3f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee3f4:	1824      	adds	r4, r4, r0
 23ee3f6:	f146 0600 	adc.w	r6, r6, #0
 23ee3fa:	0fe4      	lsrs	r4, r4, #31
 23ee3fc:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee400:	440c      	add	r4, r1
    if (result < 0)
 23ee402:	1061      	asrs	r1, r4, #1
 23ee404:	d402      	bmi.n	23ee40c <arm_softmax_s8+0x404>
    if (remainder > threshold)
 23ee406:	07e6      	lsls	r6, r4, #31
        result++;
 23ee408:	bf48      	it	mi
 23ee40a:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee40c:	448c      	add	ip, r1
        mult = 1 - mult;
 23ee40e:	f1bc 0f00 	cmp.w	ip, #0
 23ee412:	bfab      	itete	ge
 23ee414:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23ee418:	4644      	movlt	r4, r8
 23ee41a:	2100      	movge	r1, #0
 23ee41c:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee420:	485a      	ldr	r0, [pc, #360]	; (23ee58c <arm_softmax_s8+0x584>)
 23ee422:	fbcc 4100 	smlal	r4, r1, ip, r0
 23ee426:	2900      	cmp	r1, #0
 23ee428:	da04      	bge.n	23ee434 <arm_softmax_s8+0x42c>
 23ee42a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee42e:	1824      	adds	r4, r4, r0
 23ee430:	f141 0100 	adc.w	r1, r1, #0
 23ee434:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee436:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23ee438:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee43c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23ee440:	4682      	mov	sl, r0
 23ee442:	468c      	mov	ip, r1
    int32_t result = 1895147668 +
 23ee444:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23ee448:	4f51      	ldr	r7, [pc, #324]	; (23ee590 <arm_softmax_s8+0x588>)
    int32_t result = 1895147668 +
 23ee44a:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23ee44e:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23ee452:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 23ee456:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee45a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23ee45e:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23ee462:	f345 6900 	sbfx	r9, r5, #24, #1
 23ee466:	3e01      	subs	r6, #1
 23ee468:	ea09 090c 	and.w	r9, r9, ip
 23ee46c:	4034      	ands	r4, r6
    mult = mult + (q63_t)m1 * m2;
 23ee46e:	468c      	mov	ip, r1
 23ee470:	4606      	mov	r6, r0
 23ee472:	4f48      	ldr	r7, [pc, #288]	; (23ee594 <arm_softmax_s8+0x58c>)
    SELECT_IF_NON_ZERO(1672461947)
 23ee474:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23ee478:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 23ee47c:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee480:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
 23ee484:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee488:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23ee48c:	ea0a 0a04 	and.w	sl, sl, r4
    mult = mult + (q63_t)m1 * m2;
 23ee490:	460e      	mov	r6, r1
 23ee492:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23ee494:	f345 6940 	sbfx	r9, r5, #25, #1
 23ee498:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
 23ee49c:	4f3e      	ldr	r7, [pc, #248]	; (23ee598 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1302514674)
 23ee49e:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
 23ee4a2:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
 23ee4a6:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee4aa:	0ff6      	lsrs	r6, r6, #31
 23ee4ac:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23ee4b0:	f345 6c80 	sbfx	ip, r5, #26, #1
 23ee4b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23ee4b8:	ea0a 0a09 	and.w	sl, sl, r9
 23ee4bc:	ea0c 0c06 	and.w	ip, ip, r6
 23ee4c0:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
 23ee4c4:	460c      	mov	r4, r1
 23ee4c6:	4682      	mov	sl, r0
 23ee4c8:	4e34      	ldr	r6, [pc, #208]	; (23ee59c <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(290630308)
 23ee4ca:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23ee4ce:	fbcc 4a06 	smlal	r4, sl, ip, r6
    result = (int32_t)(mult / (1ll << 31));
 23ee4d2:	0fe4      	lsrs	r4, r4, #31
 23ee4d4:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23ee4d8:	f345 66c0 	sbfx	r6, r5, #27, #1
 23ee4dc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23ee4e0:	ea09 090c 	and.w	r9, r9, ip
 23ee4e4:	4026      	ands	r6, r4
 23ee4e6:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23ee4ea:	4682      	mov	sl, r0
 23ee4ec:	4689      	mov	r9, r1
 23ee4ee:	4c2c      	ldr	r4, [pc, #176]	; (23ee5a0 <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(39332535)
 23ee4f0:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23ee4f4:	fbc6 9a04 	smlal	r9, sl, r6, r4
    result = (int32_t)(mult / (1ll << 31));
 23ee4f8:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 23ee4fc:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23ee500:	f345 7400 	sbfx	r4, r5, #28, #1
 23ee504:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 23ee508:	ea0c 0c06 	and.w	ip, ip, r6
 23ee50c:	ea04 0409 	and.w	r4, r4, r9
 23ee510:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 23ee514:	4682      	mov	sl, r0
 23ee516:	468c      	mov	ip, r1
 23ee518:	f8df 9088 	ldr.w	r9, [pc, #136]	; 23ee5a4 <arm_softmax_s8+0x59c>
    SELECT_IF_NON_ZERO(720401)
 23ee51c:	f3c5 7640 	ubfx	r6, r5, #29, #1
 23ee520:	3e01      	subs	r6, #1
    mult = mult + (q63_t)m1 * m2;
 23ee522:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
 23ee526:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
 23ee528:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23ee52a:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23ee52e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23ee532:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23ee536:	f345 7940 	sbfx	r9, r5, #29, #1
 23ee53a:	ea09 0c0c 	and.w	ip, r9, ip
 23ee53e:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
 23ee542:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
 23ee546:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee54a:	0fc9      	lsrs	r1, r1, #31
 23ee54c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23ee550:	f345 7580 	sbfx	r5, r5, #30, #1
 23ee554:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23ee558:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
 23ee55c:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23ee55e:	4029      	ands	r1, r5
 23ee560:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23ee564:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
 23ee566:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23ee568:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
 23ee56c:	4001      	ands	r1, r0
 23ee56e:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
 23ee572:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
 23ee576:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
 23ee57a:	bf18      	it	ne
 23ee57c:	3201      	addne	r2, #1
 23ee57e:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
 23ee580:	f10e 0e01 	add.w	lr, lr, #1
 23ee584:	e565      	b.n	23ee052 <arm_softmax_s8+0x4a>
 23ee586:	bf00      	nop
 23ee588:	2aaaaaab 	.word	0x2aaaaaab
 23ee58c:	70f5a894 	.word	0x70f5a894
 23ee590:	63afbe7b 	.word	0x63afbe7b
 23ee594:	4da2cbf2 	.word	0x4da2cbf2
 23ee598:	2f16ac6c 	.word	0x2f16ac6c
 23ee59c:	1152aaa4 	.word	0x1152aaa4
 23ee5a0:	02582ab7 	.word	0x02582ab7
 23ee5a4:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
 23ee5a8:	9b04      	ldr	r3, [sp, #16]
 23ee5aa:	f913 100c 	ldrsb.w	r1, [r3, ip]
 23ee5ae:	9b01      	ldr	r3, [sp, #4]
 23ee5b0:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
 23ee5b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23ee5b4:	4299      	cmp	r1, r3
 23ee5b6:	f2c0 816a 	blt.w	23ee88e <arm_softmax_s8+0x886>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 23ee5ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ee5bc:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
 23ee5be:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
 23ee5c0:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
 23ee5c4:	bf0b      	itete	eq
 23ee5c6:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 23ee5ca:	4673      	movne	r3, lr
 23ee5cc:	2200      	moveq	r2, #0
 23ee5ce:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee5d2:	fbc1 320b 	smlal	r3, r2, r1, fp
 23ee5d6:	2a00      	cmp	r2, #0
 23ee5d8:	4610      	mov	r0, r2
 23ee5da:	da04      	bge.n	23ee5e6 <arm_softmax_s8+0x5de>
 23ee5dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23ee5e0:	189b      	adds	r3, r3, r2
 23ee5e2:	f140 0000 	adc.w	r0, r0, #0
 23ee5e6:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee5e8:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
 23ee5ea:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee5ee:	d104      	bne.n	23ee5fa <arm_softmax_s8+0x5f2>
        result = Q31_MAX;
 23ee5f0:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 23ee5f4:	bf08      	it	eq
 23ee5f6:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23ee5fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee5fe:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23ee600:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23ee604:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23ee606:	0176      	lsls	r6, r6, #5
 23ee608:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23ee60c:	fbc6 1406 	smlal	r1, r4, r6, r6
 23ee610:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23ee612:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee616:	da04      	bge.n	23ee622 <arm_softmax_s8+0x61a>
 23ee618:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee61c:	1809      	adds	r1, r1, r0
 23ee61e:	f144 0400 	adc.w	r4, r4, #0
 23ee622:	0fc9      	lsrs	r1, r1, #31
 23ee624:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee628:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23ee62c:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee62e:	fb01 f904 	mul.w	r9, r1, r4
 23ee632:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee636:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
 23ee63a:	f1b8 0f00 	cmp.w	r8, #0
 23ee63e:	da05      	bge.n	23ee64c <arm_softmax_s8+0x644>
 23ee640:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23ee644:	eb10 0009 	adds.w	r0, r0, r9
 23ee648:	f148 0800 	adc.w	r8, r8, #0
 23ee64c:	0fc0      	lsrs	r0, r0, #31
 23ee64e:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ee652:	f000 0803 	and.w	r8, r0, #3
        threshold++;
 23ee656:	1080      	asrs	r0, r0, #2
 23ee658:	bf54      	ite	pl
 23ee65a:	f04f 0901 	movpl.w	r9, #1
 23ee65e:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
 23ee662:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
 23ee664:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
 23ee668:	bfc8      	it	gt
 23ee66a:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23ee66c:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
 23ee670:	bf0b      	itete	eq
 23ee672:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
 23ee676:	46f0      	movne	r8, lr
 23ee678:	f04f 0900 	moveq.w	r9, #0
 23ee67c:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee680:	4374      	muls	r4, r6
 23ee682:	fb01 4405 	mla	r4, r1, r5, r4
 23ee686:	fba6 5701 	umull	r5, r7, r6, r1
 23ee68a:	eb15 0508 	adds.w	r5, r5, r8
 23ee68e:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
 23ee690:	eb44 0409 	adc.w	r4, r4, r9
 23ee694:	2c00      	cmp	r4, #0
 23ee696:	da05      	bge.n	23ee6a4 <arm_softmax_s8+0x69c>
 23ee698:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 23ee69c:	eb15 0508 	adds.w	r5, r5, r8
 23ee6a0:	f144 0400 	adc.w	r4, r4, #0
 23ee6a4:	0fed      	lsrs	r5, r5, #31
 23ee6a6:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee6aa:	4428      	add	r0, r5
        mult = 1 - mult;
 23ee6ac:	2800      	cmp	r0, #0
 23ee6ae:	bfab      	itete	ge
 23ee6b0:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23ee6b4:	4674      	movlt	r4, lr
 23ee6b6:	2500      	movge	r5, #0
 23ee6b8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee6bc:	4f75      	ldr	r7, [pc, #468]	; (23ee894 <arm_softmax_s8+0x88c>)
 23ee6be:	fbc0 4507 	smlal	r4, r5, r0, r7
 23ee6c2:	2d00      	cmp	r5, #0
 23ee6c4:	da04      	bge.n	23ee6d0 <arm_softmax_s8+0x6c8>
 23ee6c6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee6ca:	1824      	adds	r4, r4, r0
 23ee6cc:	f145 0500 	adc.w	r5, r5, #0
 23ee6d0:	0fe4      	lsrs	r4, r4, #31
 23ee6d2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee6d6:	440c      	add	r4, r1
    if (result < 0)
 23ee6d8:	1061      	asrs	r1, r4, #1
 23ee6da:	d402      	bmi.n	23ee6e2 <arm_softmax_s8+0x6da>
    if (remainder > threshold)
 23ee6dc:	07e0      	lsls	r0, r4, #31
        result++;
 23ee6de:	bf48      	it	mi
 23ee6e0:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee6e2:	440e      	add	r6, r1
        mult = 1 - mult;
 23ee6e4:	2e00      	cmp	r6, #0
 23ee6e6:	bfab      	itete	ge
 23ee6e8:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23ee6ec:	4674      	movlt	r4, lr
 23ee6ee:	2100      	movge	r1, #0
 23ee6f0:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee6f4:	4868      	ldr	r0, [pc, #416]	; (23ee898 <arm_softmax_s8+0x890>)
 23ee6f6:	fbc6 4100 	smlal	r4, r1, r6, r0
 23ee6fa:	2900      	cmp	r1, #0
 23ee6fc:	da04      	bge.n	23ee708 <arm_softmax_s8+0x700>
 23ee6fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee702:	1824      	adds	r4, r4, r0
 23ee704:	f141 0100 	adc.w	r1, r1, #0
 23ee708:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee70a:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23ee70c:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee710:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23ee714:	4681      	mov	r9, r0
 23ee716:	460e      	mov	r6, r1
    int32_t result = 1895147668 +
 23ee718:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23ee71c:	4f5f      	ldr	r7, [pc, #380]	; (23ee89c <arm_softmax_s8+0x894>)
    int32_t result = 1895147668 +
 23ee71e:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23ee722:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23ee726:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 23ee72a:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee72e:	0ff6      	lsrs	r6, r6, #31
 23ee730:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23ee734:	f343 6800 	sbfx	r8, r3, #24, #1
 23ee738:	3d01      	subs	r5, #1
 23ee73a:	ea08 0806 	and.w	r8, r8, r6
 23ee73e:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
 23ee740:	460e      	mov	r6, r1
 23ee742:	4605      	mov	r5, r0
 23ee744:	4f56      	ldr	r7, [pc, #344]	; (23ee8a0 <arm_softmax_s8+0x898>)
    SELECT_IF_NON_ZERO(1672461947)
 23ee746:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
 23ee74a:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 23ee74e:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee752:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(1302514674)
 23ee754:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee758:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23ee75c:	ea09 0904 	and.w	r9, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23ee760:	460d      	mov	r5, r1
 23ee762:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23ee764:	f343 6840 	sbfx	r8, r3, #25, #1
 23ee768:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
 23ee76c:	4e4d      	ldr	r6, [pc, #308]	; (23ee8a4 <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1302514674)
 23ee76e:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
 23ee772:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
 23ee776:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee77a:	0fed      	lsrs	r5, r5, #31
 23ee77c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23ee780:	f343 6680 	sbfx	r6, r3, #26, #1
 23ee784:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23ee788:	ea09 0908 	and.w	r9, r9, r8
 23ee78c:	402e      	ands	r6, r5
 23ee78e:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23ee792:	460c      	mov	r4, r1
 23ee794:	4681      	mov	r9, r0
 23ee796:	4d44      	ldr	r5, [pc, #272]	; (23ee8a8 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(290630308)
 23ee798:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23ee79c:	fbc6 4905 	smlal	r4, r9, r6, r5
    result = (int32_t)(mult / (1ll << 31));
 23ee7a0:	0fe4      	lsrs	r4, r4, #31
 23ee7a2:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23ee7a6:	f343 65c0 	sbfx	r5, r3, #27, #1
 23ee7aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ee7ae:	ea08 0806 	and.w	r8, r8, r6
 23ee7b2:	4025      	ands	r5, r4
 23ee7b4:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
 23ee7b8:	4681      	mov	r9, r0
 23ee7ba:	4688      	mov	r8, r1
 23ee7bc:	4c3b      	ldr	r4, [pc, #236]	; (23ee8ac <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(39332535)
 23ee7be:	f3c3 7600 	ubfx	r6, r3, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23ee7c2:	fbc5 8904 	smlal	r8, r9, r5, r4
    result = (int32_t)(mult / (1ll << 31));
 23ee7c6:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 23ee7ca:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23ee7ce:	f343 7400 	sbfx	r4, r3, #28, #1
 23ee7d2:	3e01      	subs	r6, #1
 23ee7d4:	402e      	ands	r6, r5
 23ee7d6:	ea04 0408 	and.w	r4, r4, r8
 23ee7da:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 23ee7dc:	4681      	mov	r9, r0
 23ee7de:	460e      	mov	r6, r1
 23ee7e0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23ee8b0 <arm_softmax_s8+0x8a8>
    SELECT_IF_NON_ZERO(720401)
 23ee7e4:	f3c3 7540 	ubfx	r5, r3, #29, #1
 23ee7e8:	3d01      	subs	r5, #1
    mult = mult + (q63_t)m1 * m2;
 23ee7ea:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
 23ee7ee:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
 23ee7f0:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23ee7f2:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23ee7f6:	0ff6      	lsrs	r6, r6, #31
 23ee7f8:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23ee7fc:	f343 7840 	sbfx	r8, r3, #29, #1
 23ee800:	ea08 0606 	and.w	r6, r8, r6
 23ee804:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
 23ee806:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
 23ee80a:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee80e:	0fc9      	lsrs	r1, r1, #31
 23ee810:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23ee814:	f343 7380 	sbfx	r3, r3, #30, #1
 23ee818:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23ee81c:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
 23ee81e:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23ee820:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23ee824:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
 23ee826:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
 23ee82a:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23ee82c:	4001      	ands	r1, r0
 23ee82e:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
 23ee832:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
 23ee834:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ee836:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 23ee83a:	fbc1 3200 	smlal	r3, r2, r1, r0
 23ee83e:	2a00      	cmp	r2, #0
 23ee840:	4614      	mov	r4, r2
 23ee842:	da04      	bge.n	23ee84e <arm_softmax_s8+0x846>
 23ee844:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23ee848:	189b      	adds	r3, r3, r2
 23ee84a:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
 23ee84e:	9a05      	ldr	r2, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
 23ee850:	0fdb      	lsrs	r3, r3, #31
 23ee852:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23ee856:	9806      	ldr	r0, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23ee858:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
 23ee85a:	fa53 f30a 	asrs.w	r3, r3, sl
 23ee85e:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ee860:	bf58      	it	pl
 23ee862:	4601      	movpl	r1, r0
    if (remainder > threshold)
 23ee864:	428a      	cmp	r2, r1
        result++;
 23ee866:	bfc8      	it	gt
 23ee868:	3301      	addgt	r3, #1
                const int32_t res =
 23ee86a:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 23ee86c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 23ee870:	db08      	blt.n	23ee884 <arm_softmax_s8+0x87c>
 23ee872:	2b7e      	cmp	r3, #126	; 0x7e
 23ee874:	dc09      	bgt.n	23ee88a <arm_softmax_s8+0x882>
 23ee876:	b25b      	sxtb	r3, r3
                output[col] = -128;
 23ee878:	9a07      	ldr	r2, [sp, #28]
 23ee87a:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
 23ee87e:	f10c 0c01 	add.w	ip, ip, #1
 23ee882:	e50a      	b.n	23ee29a <arm_softmax_s8+0x292>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 23ee884:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 23ee888:	e7f6      	b.n	23ee878 <arm_softmax_s8+0x870>
 23ee88a:	237f      	movs	r3, #127	; 0x7f
 23ee88c:	e7f4      	b.n	23ee878 <arm_softmax_s8+0x870>
                output[col] = -128;
 23ee88e:	2380      	movs	r3, #128	; 0x80
 23ee890:	e7f2      	b.n	23ee878 <arm_softmax_s8+0x870>
 23ee892:	bf00      	nop
 23ee894:	2aaaaaab 	.word	0x2aaaaaab
 23ee898:	70f5a894 	.word	0x70f5a894
 23ee89c:	63afbe7b 	.word	0x63afbe7b
 23ee8a0:	4da2cbf2 	.word	0x4da2cbf2
 23ee8a4:	2f16ac6c 	.word	0x2f16ac6c
 23ee8a8:	1152aaa4 	.word	0x1152aaa4
 23ee8ac:	02582ab7 	.word	0x02582ab7
 23ee8b0:	000afe11 	.word	0x000afe11

023ee8b4 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 23ee8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ee8b8:	460c      	mov	r4, r1
 23ee8ba:	4616      	mov	r6, r2
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 23ee8bc:	681d      	ldr	r5, [r3, #0]
{
 23ee8be:	b08a      	sub	sp, #40	; 0x28
 23ee8c0:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 23ee8c4:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c

    while (batch_cnt)
 23ee8c8:	b91d      	cbnz	r5, 23ee8d2 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 23ee8ca:	4628      	mov	r0, r5
 23ee8cc:	b00a      	add	sp, #40	; 0x28
 23ee8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 23ee8d2:	6923      	ldr	r3, [r4, #16]
 23ee8d4:	4638      	mov	r0, r7
 23ee8d6:	9308      	str	r3, [sp, #32]
 23ee8d8:	68e3      	ldr	r3, [r4, #12]
 23ee8da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23ee8dc:	9307      	str	r3, [sp, #28]
 23ee8de:	f8da 300c 	ldr.w	r3, [sl, #12]
 23ee8e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 23ee8e4:	9306      	str	r3, [sp, #24]
 23ee8e6:	f8d9 3000 	ldr.w	r3, [r9]
        batch_cnt--;
 23ee8ea:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s8(input,
 23ee8ec:	9305      	str	r3, [sp, #20]
 23ee8ee:	6873      	ldr	r3, [r6, #4]
 23ee8f0:	9304      	str	r3, [sp, #16]
 23ee8f2:	6833      	ldr	r3, [r6, #0]
 23ee8f4:	9303      	str	r3, [sp, #12]
 23ee8f6:	68a3      	ldr	r3, [r4, #8]
 23ee8f8:	9302      	str	r3, [sp, #8]
 23ee8fa:	6863      	ldr	r3, [r4, #4]
 23ee8fc:	9301      	str	r3, [sp, #4]
 23ee8fe:	6823      	ldr	r3, [r4, #0]
 23ee900:	9300      	str	r3, [sp, #0]
 23ee902:	4643      	mov	r3, r8
 23ee904:	f7ff f931 	bl	23edb6a <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 23ee908:	f8d9 3000 	ldr.w	r3, [r9]
 23ee90c:	441f      	add	r7, r3
        output += output_dims->c;
 23ee90e:	f8da 300c 	ldr.w	r3, [sl, #12]
 23ee912:	4498      	add	r8, r3
        batch_cnt--;
 23ee914:	e7d8      	b.n	23ee8c8 <arm_fully_connected_s8+0x14>

023ee916 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 23ee916:	2000      	movs	r0, #0
 23ee918:	4770      	bx	lr

023ee91a <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 23ee91a:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 23ee91c:	68d8      	ldr	r0, [r3, #12]
{
 23ee91e:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 23ee920:	0784      	lsls	r4, r0, #30
 23ee922:	d128      	bne.n	23ee976 <arm_convolve_1x1_s8_fast+0x5c>
 23ee924:	690c      	ldr	r4, [r1, #16]
 23ee926:	bb34      	cbnz	r4, 23ee976 <arm_convolve_1x1_s8_fast+0x5c>
 23ee928:	694c      	ldr	r4, [r1, #20]
 23ee92a:	bb24      	cbnz	r4, 23ee976 <arm_convolve_1x1_s8_fast+0x5c>
 23ee92c:	688d      	ldr	r5, [r1, #8]
 23ee92e:	2d01      	cmp	r5, #1
 23ee930:	d121      	bne.n	23ee976 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 23ee932:	68cd      	ldr	r5, [r1, #12]
 23ee934:	2d01      	cmp	r5, #1
 23ee936:	d11e      	bne.n	23ee976 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 23ee938:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 23ee93a:	9508      	str	r5, [sp, #32]
 23ee93c:	6a0d      	ldr	r5, [r1, #32]
 23ee93e:	9507      	str	r5, [sp, #28]
 23ee940:	684d      	ldr	r5, [r1, #4]
 23ee942:	9506      	str	r5, [sp, #24]
 23ee944:	6809      	ldr	r1, [r1, #0]
 23ee946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 23ee94a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23ee94c:	68c9      	ldr	r1, [r1, #12]
 23ee94e:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23ee950:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 23ee954:	4341      	muls	r1, r0
 23ee956:	681b      	ldr	r3, [r3, #0]
    arm_nn_mat_mult_nt_t_s8(input_data,
 23ee958:	980e      	ldr	r0, [sp, #56]	; 0x38
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23ee95a:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
 23ee95c:	9102      	str	r1, [sp, #8]
 23ee95e:	6853      	ldr	r3, [r2, #4]
 23ee960:	9910      	ldr	r1, [sp, #64]	; 0x40
 23ee962:	9301      	str	r3, [sp, #4]
 23ee964:	6813      	ldr	r3, [r2, #0]
 23ee966:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ee968:	9300      	str	r3, [sp, #0]
 23ee96a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ee96c:	f7fe fd7a 	bl	23ed464 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 23ee970:	4620      	mov	r0, r4
}
 23ee972:	b00b      	add	sp, #44	; 0x2c
 23ee974:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
 23ee976:	f06f 0002 	mvn.w	r0, #2
 23ee97a:	e7fa      	b.n	23ee972 <arm_convolve_1x1_s8_fast+0x58>

023ee97c <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 23ee97c:	2000      	movs	r0, #0
 23ee97e:	4770      	bx	lr

023ee980 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 23ee980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee984:	468b      	mov	fp, r1
 23ee986:	b097      	sub	sp, #92	; 0x5c
 23ee988:	9303      	str	r3, [sp, #12]
 23ee98a:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 23ee98e:	9207      	str	r2, [sp, #28]
 23ee990:	9304      	str	r3, [sp, #16]
 23ee992:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
 23ee996:	4606      	mov	r6, r0
{
 23ee998:	9305      	str	r3, [sp, #20]
 23ee99a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 23ee99e:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 23ee9a2:	9301      	str	r3, [sp, #4]
    q7_t *out_1 = out_0 + output_ch;
 23ee9a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23ee9a6:	900b      	str	r0, [sp, #44]	; 0x2c
    q7_t *out_1 = out_0 + output_ch;
 23ee9a8:	4413      	add	r3, r2
 23ee9aa:	9309      	str	r3, [sp, #36]	; 0x24
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 23ee9ac:	9b01      	ldr	r3, [sp, #4]
 23ee9ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23ee9b2:	9302      	str	r3, [sp, #8]
 23ee9b4:	9b01      	ldr	r3, [sp, #4]
 23ee9b6:	f003 0303 	and.w	r3, r3, #3
 23ee9ba:	930f      	str	r3, [sp, #60]	; 0x3c
 23ee9bc:	9b01      	ldr	r3, [sp, #4]
 23ee9be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ee9c0:	089b      	lsrs	r3, r3, #2
 23ee9c2:	009a      	lsls	r2, r3, #2
 23ee9c4:	9213      	str	r2, [sp, #76]	; 0x4c
 23ee9c6:	9a01      	ldr	r2, [sp, #4]
 23ee9c8:	1851      	adds	r1, r2, r1
 23ee9ca:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23ee9ce:	920a      	str	r2, [sp, #40]	; 0x28
 23ee9d0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 23ee9d4:	9206      	str	r2, [sp, #24]
 23ee9d6:	9a07      	ldr	r2, [sp, #28]
 23ee9d8:	0852      	lsrs	r2, r2, #1
 23ee9da:	9214      	str	r2, [sp, #80]	; 0x50
 23ee9dc:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 23ee9e0:	920c      	str	r2, [sp, #48]	; 0x30
 23ee9e2:	9a02      	ldr	r2, [sp, #8]
 23ee9e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23ee9e8:	9308      	str	r3, [sp, #32]
    while (row_count)
 23ee9ea:	2201      	movs	r2, #1
 23ee9ec:	2300      	movs	r3, #0
 23ee9ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 23ee9f0:	428b      	cmp	r3, r1
 23ee9f2:	f040 8086 	bne.w	23eeb02 <arm_nn_mat_mult_kernel_s8_s16+0x182>
 23ee9f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23ee9f8:	00dc      	lsls	r4, r3, #3
 23ee9fa:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 23ee9fe:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 23eea02:	fb03 2101 	mla	r1, r3, r1, r2
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 23eea06:	9a07      	ldr	r2, [sp, #28]
 23eea08:	ea4f 0843 	mov.w	r8, r3, lsl #1
 23eea0c:	07d2      	lsls	r2, r2, #31
 23eea0e:	d573      	bpl.n	23eeaf8 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 23eea10:	9a25      	ldr	r2, [sp, #148]	; 0x94
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 23eea12:	460e      	mov	r6, r1
        q31_t ch_0_out_0 = *bias;
 23eea14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;
 23eea18:	4694      	mov	ip, r2
        while (col_count)
 23eea1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23eea1c:	455b      	cmp	r3, fp
 23eea1e:	f040 81b3 	bne.w	23eed88 <arm_nn_mat_mult_kernel_s8_s16+0x408>
 23eea22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23eea24:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 23eea26:	9b01      	ldr	r3, [sp, #4]
 23eea28:	f003 0303 	and.w	r3, r3, #3
 23eea2c:	440b      	add	r3, r1
 23eea2e:	428b      	cmp	r3, r1
 23eea30:	f040 81cc 	bne.w	23eedcc <arm_nn_mat_mult_kernel_s8_s16+0x44c>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eea34:	2600      	movs	r6, #0
 23eea36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23eea3a:	46b6      	mov	lr, r6

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23eea3c:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_0 += out_offset;
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
 23eea3e:	3001      	adds	r0, #1
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23eea40:	591f      	ldr	r7, [r3, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eea42:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 23eea46:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eea48:	f85a 3004 	ldr.w	r3, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eea4c:	42b7      	cmp	r7, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eea4e:	fbc2 1e03 	smlal	r1, lr, r2, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eea52:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eea56:	bfd8      	it	le
 23eea58:	427e      	negle	r6, r7
    result = (int32_t)(mult.long_long >> 31);
 23eea5a:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eea5c:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
 23eea5e:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eea62:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23eea64:	ea0e 0203 	and.w	r2, lr, r3
    if (result < 0)
 23eea68:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
 23eea6c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23eea70:	bf48      	it	mi
 23eea72:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23eea74:	429a      	cmp	r2, r3
        ch_0_out_0 += out_offset;
 23eea76:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
 23eea78:	bfc8      	it	gt
 23eea7a:	f10e 0e01 	addgt.w	lr, lr, #1
 23eea7e:	449e      	add	lr, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 23eea80:	9b04      	ldr	r3, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eea82:	2200      	movs	r2, #0
 23eea84:	459e      	cmp	lr, r3
 23eea86:	bfb8      	it	lt
 23eea88:	469e      	movlt	lr, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 23eea8a:	9b05      	ldr	r3, [sp, #20]
 23eea8c:	4617      	mov	r7, r2
 23eea8e:	459e      	cmp	lr, r3
 23eea90:	bfa8      	it	ge
 23eea92:	469e      	movge	lr, r3
 23eea94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        *out_0++ = (q7_t)ch_0_out_0;
 23eea98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23eea9a:	f803 e008 	strb.w	lr, [r3, r8]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 23eea9e:	9b03      	ldr	r3, [sp, #12]
 23eeaa0:	591e      	ldr	r6, [r3, r4]
 23eeaa2:	f85a 4004 	ldr.w	r4, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeaa6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 23eeaaa:	fa0c f303 	lsl.w	r3, ip, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeaae:	fbc3 1704 	smlal	r1, r7, r3, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeab2:	2301      	movs	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeab4:	4296      	cmp	r6, r2
 23eeab6:	bfd8      	it	le
 23eeab8:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeaba:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
 23eeabc:	0fc9      	lsrs	r1, r1, #31
 23eeabe:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeac2:	3b01      	subs	r3, #1
    if (result < 0)
 23eeac4:	fa51 f202 	asrs.w	r2, r1, r2
    int32_t remainder = remainder_mask & dividend;
 23eeac8:	ea01 0403 	and.w	r4, r1, r3
    q31_t threshold = remainder_mask >> 1;
 23eeacc:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23eead0:	bf48      	it	mi
 23eead2:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23eead4:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
 23eead6:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
 23eead8:	bfc8      	it	gt
 23eeada:	3201      	addgt	r2, #1
 23eeadc:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 23eeade:	9a04      	ldr	r2, [sp, #16]
 23eeae0:	429a      	cmp	r2, r3
 23eeae2:	bfb8      	it	lt
 23eeae4:	461a      	movlt	r2, r3
 23eeae6:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 23eeae8:	9a05      	ldr	r2, [sp, #20]
 23eeaea:	429a      	cmp	r2, r3
 23eeaec:	bfa8      	it	ge
 23eeaee:	461a      	movge	r2, r3
 23eeaf0:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 23eeaf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23eeaf4:	f802 3008 	strb.w	r3, [r2, r8]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 23eeaf8:	9b07      	ldr	r3, [sp, #28]
 23eeafa:	4418      	add	r0, r3
 23eeafc:	b017      	add	sp, #92	; 0x5c
 23eeafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 23eeb02:	9901      	ldr	r1, [sp, #4]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 23eeb04:	9f02      	ldr	r7, [sp, #8]
 23eeb06:	1871      	adds	r1, r6, r1
 23eeb08:	910d      	str	r1, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
 23eeb0a:	9925      	ldr	r1, [sp, #148]	; 0x94
 23eeb0c:	9615      	str	r6, [sp, #84]	; 0x54
 23eeb0e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
        q31_t ch_1_out_0 = *bias;
 23eeb12:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
        q31_t ch_0_out_1 = *bias++;
 23eeb16:	4604      	mov	r4, r0
        q31_t ch_1_out_1 = *bias++;
 23eeb18:	46f0      	mov	r8, lr
        const q15_t *ip_b0 = input_b;
 23eeb1a:	f8cd b000 	str.w	fp, [sp]
        while (col_count)
 23eeb1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 23eeb20:	9d00      	ldr	r5, [sp, #0]
 23eeb22:	42a9      	cmp	r1, r5
 23eeb24:	f040 80d8 	bne.w	23eecd8 <arm_nn_mat_mult_kernel_s8_s16+0x358>
 23eeb28:	9906      	ldr	r1, [sp, #24]
 23eeb2a:	9d01      	ldr	r5, [sp, #4]
        while (col_count)
 23eeb2c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23eeb2e:	440d      	add	r5, r1
 23eeb30:	950d      	str	r5, [sp, #52]	; 0x34
 23eeb32:	9d08      	ldr	r5, [sp, #32]
 23eeb34:	462f      	mov	r7, r5
 23eeb36:	460d      	mov	r5, r1
 23eeb38:	4435      	add	r5, r6
 23eeb3a:	9510      	str	r5, [sp, #64]	; 0x40
 23eeb3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23eeb3e:	42a9      	cmp	r1, r5
 23eeb40:	f040 8109 	bne.w	23eed56 <arm_nn_mat_mult_kernel_s8_s16+0x3d6>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeb44:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 23eeb48:	2700      	movs	r7, #0
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23eeb4a:	9903      	ldr	r1, [sp, #12]
 23eeb4c:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeb50:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
 23eeb54:	4088      	lsls	r0, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeb56:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeb5a:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeb5c:	fbc0 5701 	smlal	r5, r7, r0, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeb60:	bfc8      	it	gt
 23eeb62:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeb64:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeb68:	bfd8      	it	le
 23eeb6a:	4276      	negle	r6, r6
    result = (int32_t)(mult.long_long >> 31);
 23eeb6c:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeb6e:	40b1      	lsls	r1, r6
    result = (int32_t)(mult.long_long >> 31);
 23eeb70:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeb74:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eeb76:	ea07 0001 	and.w	r0, r7, r1
    if (result < 0)
 23eeb7a:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
 23eeb7c:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eeb80:	bf48      	it	mi
 23eeb82:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eeb84:	4288      	cmp	r0, r1
        ch_0_out_0 += out_offset;
 23eeb86:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eeb88:	bfc8      	it	gt
 23eeb8a:	3701      	addgt	r7, #1
 23eeb8c:	440f      	add	r7, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 23eeb8e:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeb90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23eeb94:	428f      	cmp	r7, r1
 23eeb96:	bfb8      	it	lt
 23eeb98:	460f      	movlt	r7, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 23eeb9a:	9905      	ldr	r1, [sp, #20]
 23eeb9c:	2600      	movs	r6, #0
 23eeb9e:	428f      	cmp	r7, r1
 23eeba0:	bfa8      	it	ge
 23eeba2:	460f      	movge	r7, r1
        *out_0++ = (q7_t)ch_0_out_0;
 23eeba4:	9926      	ldr	r1, [sp, #152]	; 0x98
 23eeba6:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 23eebaa:	9903      	ldr	r1, [sp, #12]
 23eebac:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eebb0:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 23eebb4:	408c      	lsls	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eebb6:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eebba:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eebbc:	fbc4 0601 	smlal	r0, r6, r4, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eebc0:	bfc8      	it	gt
 23eebc2:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eebc4:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eebc8:	bfd8      	it	le
 23eebca:	426d      	negle	r5, r5
    result = (int32_t)(mult.long_long >> 31);
 23eebcc:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eebce:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
 23eebd0:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eebd4:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eebd6:	ea06 0401 	and.w	r4, r6, r1
    if (result < 0)
 23eebda:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
 23eebdc:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eebe0:	bf48      	it	mi
 23eebe2:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eebe4:	428c      	cmp	r4, r1
        ch_0_out_1 += out_offset;
 23eebe6:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eebe8:	bfc8      	it	gt
 23eebea:	3601      	addgt	r6, #1
 23eebec:	440e      	add	r6, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 23eebee:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eebf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23eebf4:	428e      	cmp	r6, r1
 23eebf6:	bfb8      	it	lt
 23eebf8:	460e      	movlt	r6, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 23eebfa:	9905      	ldr	r1, [sp, #20]
 23eebfc:	2500      	movs	r5, #0
 23eebfe:	428e      	cmp	r6, r1
 23eec00:	bfa8      	it	ge
 23eec02:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_0_out_1;
 23eec04:	9909      	ldr	r1, [sp, #36]	; 0x24
 23eec06:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 23eec0a:	9903      	ldr	r1, [sp, #12]
 23eec0c:	3301      	adds	r3, #1
 23eec0e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 23eec12:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eec16:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 23eec1a:	2c00      	cmp	r4, #0
 23eec1c:	fa0e fc0c 	lsl.w	ip, lr, ip
 23eec20:	bfc8      	it	gt
 23eec22:	2400      	movgt	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eec24:	fbcc 0501 	smlal	r0, r5, ip, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eec28:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eec2c:	bfd8      	it	le
 23eec2e:	4264      	negle	r4, r4
    result = (int32_t)(mult.long_long >> 31);
 23eec30:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eec32:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
 23eec34:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eec38:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eec3a:	ea05 0601 	and.w	r6, r5, r1
    if (result < 0)
 23eec3e:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
 23eec40:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eec44:	bf48      	it	mi
 23eec46:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eec48:	428e      	cmp	r6, r1
        ch_1_out_0 += out_offset;
 23eec4a:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eec4c:	bfc8      	it	gt
 23eec4e:	3501      	addgt	r5, #1
 23eec50:	440d      	add	r5, r1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 23eec52:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eec54:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 23eec58:	428d      	cmp	r5, r1
 23eec5a:	bfb8      	it	lt
 23eec5c:	460d      	movlt	r5, r1
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 23eec5e:	9905      	ldr	r1, [sp, #20]
 23eec60:	2600      	movs	r6, #0
 23eec62:	428d      	cmp	r5, r1
 23eec64:	bfa8      	it	ge
 23eec66:	460d      	movge	r5, r1
        *out_0++ = (q7_t)ch_1_out_0;
 23eec68:	9926      	ldr	r1, [sp, #152]	; 0x98
 23eec6a:	548d      	strb	r5, [r1, r2]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 23eec6c:	9903      	ldr	r1, [sp, #12]
 23eec6e:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 23eec72:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eec76:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 23eec7a:	2d00      	cmp	r5, #0
 23eec7c:	fa08 f101 	lsl.w	r1, r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eec80:	fbc1 4600 	smlal	r4, r6, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eec84:	bfc8      	it	gt
 23eec86:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eec88:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eec8c:	bfd8      	it	le
 23eec8e:	426d      	negle	r5, r5
    result = (int32_t)(mult.long_long >> 31);
 23eec90:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eec92:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
 23eec94:	ea44 0646 	orr.w	r6, r4, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eec98:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eec9a:	ea06 0001 	and.w	r0, r6, r1
    if (result < 0)
 23eec9e:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
 23eeca0:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eeca4:	bf48      	it	mi
 23eeca6:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eeca8:	4288      	cmp	r0, r1
        ch_1_out_1 += out_offset;
 23eecaa:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eecac:	bfc8      	it	gt
 23eecae:	3601      	addgt	r6, #1
 23eecb0:	440e      	add	r6, r1
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 23eecb2:	9904      	ldr	r1, [sp, #16]
 23eecb4:	428e      	cmp	r6, r1
 23eecb6:	bfb8      	it	lt
 23eecb8:	460e      	movlt	r6, r1
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 23eecba:	9905      	ldr	r1, [sp, #20]
 23eecbc:	428e      	cmp	r6, r1
 23eecbe:	bfa8      	it	ge
 23eecc0:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_1_out_1;
 23eecc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 23eecc4:	548e      	strb	r6, [r1, r2]
        ip_a0 += num_col_a;
 23eecc6:	9915      	ldr	r1, [sp, #84]	; 0x54
 23eecc8:	980a      	ldr	r0, [sp, #40]	; 0x28
 23eecca:	3202      	adds	r2, #2
 23eeccc:	4401      	add	r1, r0
 23eecce:	460e      	mov	r6, r1
        row_count--;
 23eecd0:	9906      	ldr	r1, [sp, #24]
 23eecd2:	4401      	add	r1, r0
 23eecd4:	9106      	str	r1, [sp, #24]
 23eecd6:	e68a      	b.n	23ee9ee <arm_nn_mat_mult_kernel_s8_s16+0x6e>
    memcpy(&val, *in_q15, 4);
 23eecd8:	9900      	ldr	r1, [sp, #0]
 23eecda:	f856 9b04 	ldr.w	r9, [r6], #4
 23eecde:	f8d1 c000 	ldr.w	ip, [r1]
 23eece2:	6839      	ldr	r1, [r7, #0]
 23eece4:	910e      	str	r1, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 23eece6:	ea4f 2139 	mov.w	r1, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eecea:	fa2f f989 	sxtb16	r9, r9
 23eecee:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23eecf2:	eac1 4529 	pkhtb	r5, r1, r9, asr #16
 23eecf6:	9510      	str	r5, [sp, #64]	; 0x40
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23eecf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 23eecfa:	eac9 4901 	pkhbt	r9, r9, r1, lsl #16
    memcpy(&val, *in_q7, 4);
 23eecfe:	f855 1b04 	ldr.w	r1, [r5], #4
 23eed02:	950d      	str	r5, [sp, #52]	; 0x34
  return (op1 >> op2) | (op1 << (32U - op2));
 23eed04:	ea4f 2531 	mov.w	r5, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eed08:	fa2f f585 	sxtb16	r5, r5
 23eed0c:	9511      	str	r5, [sp, #68]	; 0x44
 23eed0e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23eed12:	eac5 4521 	pkhtb	r5, r5, r1, asr #16
 23eed16:	9512      	str	r5, [sp, #72]	; 0x48
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23eed18:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23eed1a:	eac1 4105 	pkhbt	r1, r1, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eed1e:	fb29 000c 	smlad	r0, r9, ip, r0
 23eed22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23eed24:	fb29 4405 	smlad	r4, r9, r5, r4
 23eed28:	fb21 ec0c 	smlad	ip, r1, ip, lr
 23eed2c:	fb21 8105 	smlad	r1, r1, r5, r8
    memcpy(&val, *in_q15, 4);
 23eed30:	9d00      	ldr	r5, [sp, #0]
 23eed32:	f8d7 8004 	ldr.w	r8, [r7, #4]
 23eed36:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
 23eed3a:	3508      	adds	r5, #8
 23eed3c:	9500      	str	r5, [sp, #0]
 23eed3e:	3708      	adds	r7, #8
 23eed40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23eed42:	fb25 0009 	smlad	r0, r5, r9, r0
 23eed46:	fb25 4408 	smlad	r4, r5, r8, r4
 23eed4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23eed4c:	fb25 ce09 	smlad	lr, r5, r9, ip
 23eed50:	fb25 1808 	smlad	r8, r5, r8, r1
            col_count--;
 23eed54:	e6e3      	b.n	23eeb1e <arm_nn_mat_mult_kernel_s8_s16+0x19e>
            q15_t b0 = *ip_b0++;
 23eed56:	9e00      	ldr	r6, [sp, #0]
            q7_t a0 = *ip_a0++;
 23eed58:	f911 9b01 	ldrsb.w	r9, [r1], #1
            q15_t b0 = *ip_b0++;
 23eed5c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 23eed60:	9600      	str	r6, [sp, #0]
 23eed62:	462e      	mov	r6, r5
            q7_t a1 = *ip_a1++;
 23eed64:	9d0d      	ldr	r5, [sp, #52]	; 0x34
            ch_0_out_0 += a0 * b0;
 23eed66:	fb16 0009 	smlabb	r0, r6, r9, r0
            q7_t a1 = *ip_a1++;
 23eed6a:	f915 cb01 	ldrsb.w	ip, [r5], #1
 23eed6e:	950d      	str	r5, [sp, #52]	; 0x34
            q15_t b1 = *ip_b1++;
 23eed70:	f937 5b02 	ldrsh.w	r5, [r7], #2
            ch_1_out_0 += a1 * b0;
 23eed74:	fb16 ee0c 	smlabb	lr, r6, ip, lr
            q15_t b1 = *ip_b1++;
 23eed78:	950e      	str	r5, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
 23eed7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23eed7c:	fb15 4409 	smlabb	r4, r5, r9, r4
            ch_1_out_1 += a1 * b1;
 23eed80:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23eed82:	fb15 880c 	smlabb	r8, r5, ip, r8
            col_count--;
 23eed86:	e6d9      	b.n	23eeb3c <arm_nn_mat_mult_kernel_s8_s16+0x1bc>
    memcpy(&val, *in_q7, 4);
 23eed88:	f856 3b04 	ldr.w	r3, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 23eed8c:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eed90:	fa2f f383 	sxtb16	r3, r3
 23eed94:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23eed98:	eace 4723 	pkhtb	r7, lr, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23eed9c:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eeda0:	f8db e000 	ldr.w	lr, [fp]
 23eeda4:	fb23 220e 	smlad	r2, r3, lr, r2
 23eeda8:	9d02      	ldr	r5, [sp, #8]
 23eedaa:	f8d5 e000 	ldr.w	lr, [r5]
 23eedae:	fb23 c30e 	smlad	r3, r3, lr, ip
    memcpy(&val, *in_q15, 4);
 23eedb2:	f8d5 c004 	ldr.w	ip, [r5, #4]
 23eedb6:	3508      	adds	r5, #8
 23eedb8:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
 23eedbc:	9502      	str	r5, [sp, #8]
 23eedbe:	f10b 0b08 	add.w	fp, fp, #8
 23eedc2:	fb27 220e 	smlad	r2, r7, lr, r2
 23eedc6:	fb27 3c0c 	smlad	ip, r7, ip, r3
            col_count--;
 23eedca:	e626      	b.n	23eea1a <arm_nn_mat_mult_kernel_s8_s16+0x9a>
            q7_t a0 = *ip_a0++;
 23eedcc:	f911 6b01 	ldrsb.w	r6, [r1], #1
            ch_0_out_0 += a0 * b0;
 23eedd0:	f83b 7b02 	ldrh.w	r7, [fp], #2
            ch_0_out_1 += a0 * b1;
 23eedd4:	9d08      	ldr	r5, [sp, #32]
            ch_0_out_0 += a0 * b0;
 23eedd6:	fb17 2206 	smlabb	r2, r7, r6, r2
            ch_0_out_1 += a0 * b1;
 23eedda:	f835 7b02 	ldrh.w	r7, [r5], #2
 23eedde:	fb17 cc06 	smlabb	ip, r7, r6, ip
 23eede2:	9508      	str	r5, [sp, #32]
 23eede4:	e623      	b.n	23eea2e <arm_nn_mat_mult_kernel_s8_s16+0xae>

023eede6 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 23eede6:	b410      	push	{r4}
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
 23eede8:	9c06      	ldr	r4, [sp, #24]
 23eedea:	68a4      	ldr	r4, [r4, #8]
 23eedec:	07a4      	lsls	r4, r4, #30
 23eedee:	d103      	bne.n	23eedf8 <arm_convolve_1_x_n_s8+0x12>
#endif

out:
    /* Return to application */
    return status;
}
 23eedf0:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = arm_convolve_s8(ctx,
 23eedf4:	f000 b89a 	b.w	23eef2c <arm_convolve_s8>
}
 23eedf8:	f06f 0002 	mvn.w	r0, #2
 23eedfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 23eee00:	4770      	bx	lr

023eee02 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 23eee02:	688b      	ldr	r3, [r1, #8]
 23eee04:	68c0      	ldr	r0, [r0, #12]
 23eee06:	4358      	muls	r0, r3
 23eee08:	684b      	ldr	r3, [r1, #4]
 23eee0a:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 23eee0c:	0080      	lsls	r0, r0, #2
 23eee0e:	4770      	bx	lr

023eee10 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 23eee10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eee14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 23eee16:	4684      	mov	ip, r0
 23eee18:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
 23eee1c:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	; 0x44
 23eee20:	9600      	str	r6, [sp, #0]
 23eee22:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 23eee26:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23eee28:	690f      	ldr	r7, [r1, #16]
{
 23eee2a:	460c      	mov	r4, r1
 23eee2c:	4696      	mov	lr, r2
 23eee2e:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23eee30:	b9af      	cbnz	r7, 23eee5e <arm_convolve_wrapper_s8+0x4e>
 23eee32:	694f      	ldr	r7, [r1, #20]
 23eee34:	b99f      	cbnz	r7, 23eee5e <arm_convolve_wrapper_s8+0x4e>
 23eee36:	68df      	ldr	r7, [r3, #12]
 23eee38:	07bf      	lsls	r7, r7, #30
 23eee3a:	d110      	bne.n	23eee5e <arm_convolve_wrapper_s8+0x4e>
 23eee3c:	688f      	ldr	r7, [r1, #8]
 23eee3e:	2f01      	cmp	r7, #1
 23eee40:	d10d      	bne.n	23eee5e <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 23eee42:	68cf      	ldr	r7, [r1, #12]
 23eee44:	2f01      	cmp	r7, #1
 23eee46:	d10a      	bne.n	23eee5e <arm_convolve_wrapper_s8+0x4e>
 23eee48:	68b7      	ldr	r7, [r6, #8]
 23eee4a:	2f01      	cmp	r7, #1
 23eee4c:	d107      	bne.n	23eee5e <arm_convolve_wrapper_s8+0x4e>
 23eee4e:	6877      	ldr	r7, [r6, #4]
 23eee50:	2f01      	cmp	r7, #1
 23eee52:	d104      	bne.n	23eee5e <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 23eee54:	b003      	add	sp, #12
 23eee56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
 23eee5a:	f7ff bd5e 	b.w	23ee91a <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 23eee5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23eee62:	2b01      	cmp	r3, #1
 23eee64:	d11e      	bne.n	23eeea4 <arm_convolve_wrapper_s8+0x94>
 23eee66:	686b      	ldr	r3, [r5, #4]
 23eee68:	2b01      	cmp	r3, #1
 23eee6a:	d11b      	bne.n	23eeea4 <arm_convolve_wrapper_s8+0x94>
 23eee6c:	6873      	ldr	r3, [r6, #4]
 23eee6e:	2b01      	cmp	r3, #1
 23eee70:	d118      	bne.n	23eeea4 <arm_convolve_wrapper_s8+0x94>
 23eee72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23eee76:	079b      	lsls	r3, r3, #30
 23eee78:	d114      	bne.n	23eeea4 <arm_convolve_wrapper_s8+0x94>
 23eee7a:	682b      	ldr	r3, [r5, #0]
 23eee7c:	2b01      	cmp	r3, #1
 23eee7e:	d111      	bne.n	23eeea4 <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
 23eee80:	9b01      	ldr	r3, [sp, #4]
 23eee82:	4672      	mov	r2, lr
 23eee84:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 23eee88:	9b00      	ldr	r3, [sp, #0]
 23eee8a:	4621      	mov	r1, r4
 23eee8c:	930c      	str	r3, [sp, #48]	; 0x30
 23eee8e:	4660      	mov	r0, ip
 23eee90:	462b      	mov	r3, r5
 23eee92:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
 23eee96:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 23eee9a:	b003      	add	sp, #12
 23eee9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
 23eeea0:	f7ff bfa1 	b.w	23eede6 <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
 23eeea4:	9b01      	ldr	r3, [sp, #4]
 23eeea6:	4672      	mov	r2, lr
 23eeea8:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 23eeeac:	9b00      	ldr	r3, [sp, #0]
 23eeeae:	4621      	mov	r1, r4
 23eeeb0:	930c      	str	r3, [sp, #48]	; 0x30
 23eeeb2:	4660      	mov	r0, ip
 23eeeb4:	462b      	mov	r3, r5
 23eeeb6:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
 23eeeba:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 23eeebe:	b003      	add	sp, #12
 23eeec0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
 23eeec4:	f000 b832 	b.w	23eef2c <arm_convolve_s8>

023eeec8 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 23eeec8:	b410      	push	{r4}
 23eeeca:	4604      	mov	r4, r0
 23eeecc:	4608      	mov	r0, r1
 23eeece:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23eeed0:	6922      	ldr	r2, [r4, #16]
 23eeed2:	b9a2      	cbnz	r2, 23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23eeed4:	6962      	ldr	r2, [r4, #20]
 23eeed6:	b992      	cbnz	r2, 23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23eeed8:	68c2      	ldr	r2, [r0, #12]
 23eeeda:	0792      	lsls	r2, r2, #30
 23eeedc:	d10f      	bne.n	23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23eeede:	68a2      	ldr	r2, [r4, #8]
 23eeee0:	2a01      	cmp	r2, #1
 23eeee2:	d10c      	bne.n	23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 23eeee4:	68e2      	ldr	r2, [r4, #12]
 23eeee6:	2a01      	cmp	r2, #1
 23eeee8:	d109      	bne.n	23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23eeeea:	688a      	ldr	r2, [r1, #8]
 23eeeec:	2a01      	cmp	r2, #1
 23eeeee:	d106      	bne.n	23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23eeef0:	684a      	ldr	r2, [r1, #4]
 23eeef2:	2a01      	cmp	r2, #1
 23eeef4:	d103      	bne.n	23eeefe <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
 23eeef6:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 23eeefa:	f7ff bd3f 	b.w	23ee97c <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 23eeefe:	685a      	ldr	r2, [r3, #4]
 23eef00:	2a01      	cmp	r2, #1
 23eef02:	d10f      	bne.n	23eef24 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23eef04:	6842      	ldr	r2, [r0, #4]
 23eef06:	2a01      	cmp	r2, #1
 23eef08:	d10c      	bne.n	23eef24 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23eef0a:	684a      	ldr	r2, [r1, #4]
 23eef0c:	2a01      	cmp	r2, #1
 23eef0e:	d109      	bne.n	23eef24 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23eef10:	689b      	ldr	r3, [r3, #8]
 23eef12:	079b      	lsls	r3, r3, #30
 23eef14:	d106      	bne.n	23eef24 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23eef16:	6803      	ldr	r3, [r0, #0]
 23eef18:	2b01      	cmp	r3, #1
 23eef1a:	d103      	bne.n	23eef24 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
 23eef1c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 23eef20:	f7ff bf6f 	b.w	23eee02 <arm_convolve_1_x_n_s8_get_buffer_size>
}
 23eef24:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 23eef28:	f000 b985 	b.w	23ef236 <arm_convolve_s8_get_buffer_size>

023eef2c <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 23eef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eef30:	ed2d 8b02 	vpush	{d8}
 23eef34:	4694      	mov	ip, r2
 23eef36:	b0b1      	sub	sp, #196	; 0xc4
 23eef38:	9c41      	ldr	r4, [sp, #260]	; 0x104
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23eef3a:	f8d0 b000 	ldr.w	fp, [r0]
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
 23eef3e:	68e7      	ldr	r7, [r4, #12]
    const uint16_t input_batches = input_dims->n;
 23eef40:	6818      	ldr	r0, [r3, #0]
    const uint16_t output_ch = output_dims->c;
 23eef42:	b2ba      	uxth	r2, r7
 23eef44:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
 23eef48:	690a      	ldr	r2, [r1, #16]
{
 23eef4a:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t pad_x = conv_params->padding.w;
 23eef4c:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t pad_y = conv_params->padding.h;
 23eef4e:	694a      	ldr	r2, [r1, #20]
    const uint16_t input_ch = input_dims->c;
 23eef50:	68dd      	ldr	r5, [r3, #12]
    const uint16_t pad_y = conv_params->padding.h;
 23eef52:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_x = conv_params->stride.w;
 23eef54:	688a      	ldr	r2, [r1, #8]
    const uint16_t input_batches = input_dims->n;
 23eef56:	901f      	str	r0, [sp, #124]	; 0x7c
    const uint16_t stride_x = conv_params->stride.w;
 23eef58:	9222      	str	r2, [sp, #136]	; 0x88
    const uint16_t stride_y = conv_params->stride.h;
 23eef5a:	68ca      	ldr	r2, [r1, #12]
    const uint16_t kernel_y = filter_dims->h;
 23eef5c:	e9d6 6001 	ldrd	r6, r0, [r6, #4]
    const uint16_t stride_y = conv_params->stride.h;
 23eef60:	9223      	str	r2, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
 23eef62:	684a      	ldr	r2, [r1, #4]
 23eef64:	fa1f fa85 	uxth.w	sl, r5
 23eef68:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_min = conv_params->activation.min;
 23eef6a:	6a0a      	ldr	r2, [r1, #32]
 23eef6c:	9215      	str	r2, [sp, #84]	; 0x54
    const int32_t out_activation_max = conv_params->activation.max;
 23eef6e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 23eef70:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_mult = quant_params->multiplier;
 23eef72:	f8dc 2000 	ldr.w	r2, [ip]
 23eef76:	9217      	str	r2, [sp, #92]	; 0x5c
    int32_t *output_shift = quant_params->shift;
 23eef78:	f8dc 2004 	ldr.w	r2, [ip, #4]
 23eef7c:	9218      	str	r2, [sp, #96]	; 0x60

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23eef7e:	88a2      	ldrh	r2, [r4, #4]
 23eef80:	9219      	str	r2, [sp, #100]	; 0x64
 23eef82:	891a      	ldrh	r2, [r3, #8]
 23eef84:	920b      	str	r2, [sp, #44]	; 0x2c
 23eef86:	889b      	ldrh	r3, [r3, #4]
 23eef88:	9313      	str	r3, [sp, #76]	; 0x4c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 23eef8a:	4613      	mov	r3, r2
 23eef8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23eef8e:	4353      	muls	r3, r2
 23eef90:	fb0a f303 	mul.w	r3, sl, r3
 23eef94:	9329      	str	r3, [sp, #164]	; 0xa4
 23eef96:	8923      	ldrh	r3, [r4, #8]
 23eef98:	931a      	str	r3, [sp, #104]	; 0x68
 23eef9a:	b2bb      	uxth	r3, r7
 23eef9c:	931b      	str	r3, [sp, #108]	; 0x6c
        output_data += (output_x * output_y * output_ch);
 23eef9e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 23eefa2:	4353      	muls	r3, r2
 23eefa4:	ee18 2a10 	vmov	r2, s16
 23eefa8:	4353      	muls	r3, r2
 23eefaa:	9328      	str	r3, [sp, #160]	; 0xa0
 23eefac:	b2b3      	uxth	r3, r6
 23eefae:	931c      	str	r3, [sp, #112]	; 0x70
 23eefb0:	b283      	uxth	r3, r0
 23eefb2:	9312      	str	r3, [sp, #72]	; 0x48
 23eefb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23eefb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 23eefb8:	fb10 f006 	smulbb	r0, r0, r6
 23eefbc:	435a      	muls	r2, r3
 23eefbe:	fb10 f505 	smulbb	r5, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 23eefc2:	fb02 f30a 	mul.w	r3, r2, sl
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 23eefc6:	b2a8      	uxth	r0, r5
 23eefc8:	9026      	str	r0, [sp, #152]	; 0x98
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 23eefca:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 23eefce:	9024      	str	r0, [sp, #144]	; 0x90
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 23eefd0:	ea4f 004a 	mov.w	r0, sl, lsl #1
 23eefd4:	9009      	str	r0, [sp, #36]	; 0x24
 23eefd6:	f3c3 038f 	ubfx	r3, r3, #2, #16
 23eefda:	f005 0003 	and.w	r0, r5, #3
 23eefde:	901e      	str	r0, [sp, #120]	; 0x78
 23eefe0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23eefe4:	901d      	str	r0, [sp, #116]	; 0x74
 23eefe6:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23eefe8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23eefec:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 23eeff0:	932d      	str	r3, [sp, #180]	; 0xb4
 23eeff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23eeff4:	902a      	str	r0, [sp, #168]	; 0xa8
 23eeff6:	fb0a f303 	mul.w	r3, sl, r3
 23eeffa:	9327      	str	r3, [sp, #156]	; 0x9c
 23eeffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23eeffe:	4353      	muls	r3, r2
 23ef000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ef002:	932b      	str	r3, [sp, #172]	; 0xac
 23ef004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ef006:	4353      	muls	r3, r2
 23ef008:	932c      	str	r3, [sp, #176]	; 0xb0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef00a:	2300      	movs	r3, #0
 23ef00c:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 23ef00e:	f9b1 3000 	ldrsh.w	r3, [r1]
 23ef012:	ee08 3a90 	vmov	s17, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef016:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 23ef01a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23ef01c:	429a      	cmp	r2, r3
 23ef01e:	f2c0 8086 	blt.w	23ef12e <arm_convolve_s8+0x202>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
 23ef022:	2000      	movs	r0, #0
 23ef024:	b031      	add	sp, #196	; 0xc4
 23ef026:	ecbd 8b02 	vpop	{d8}
 23ef02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ef02e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 23ef032:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 23ef036:	fb09 f303 	mul.w	r3, r9, r3
 23ef03a:	1a9b      	subs	r3, r3, r2
 23ef03c:	9311      	str	r3, [sp, #68]	; 0x44
 23ef03e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23ef040:	9b25      	ldr	r3, [sp, #148]	; 0x94
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef042:	9e10      	ldr	r6, [sp, #64]	; 0x40
 23ef044:	189c      	adds	r4, r3, r2
 23ef046:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 23ef048:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23ef04a:	fb0a 3304 	mla	r3, sl, r4, r3
 23ef04e:	930c      	str	r3, [sp, #48]	; 0x30
 23ef050:	4633      	mov	r3, r6
 23ef052:	4413      	add	r3, r2
 23ef054:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 23ef058:	932f      	str	r3, [sp, #188]	; 0xbc
 23ef05a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 23ef05c:	42b3      	cmp	r3, r6
 23ef05e:	dc5e      	bgt.n	23ef11e <arm_convolve_s8+0x1f2>
 23ef060:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23ef062:	4498      	add	r8, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 23ef064:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23ef066:	4543      	cmp	r3, r8
 23ef068:	d118      	bne.n	23ef09c <arm_convolve_s8+0x170>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 23ef06a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef06c:	ee18 2a10 	vmov	r2, s16
 23ef070:	9306      	str	r3, [sp, #24]
 23ef072:	9b40      	ldr	r3, [sp, #256]	; 0x100
 23ef074:	4659      	mov	r1, fp
 23ef076:	9305      	str	r3, [sp, #20]
 23ef078:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ef07a:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23ef07c:	9304      	str	r3, [sp, #16]
 23ef07e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ef082:	46d8      	mov	r8, fp
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 23ef084:	9303      	str	r3, [sp, #12]
 23ef086:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 23ef08a:	9302      	str	r3, [sp, #8]
 23ef08c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ef08e:	9301      	str	r3, [sp, #4]
 23ef090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ef092:	9300      	str	r3, [sp, #0]
 23ef094:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ef096:	f7ff fc73 	bl	23ee980 <arm_nn_mat_mult_kernel_s8_s16>
 23ef09a:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 23ef09c:	f109 0901 	add.w	r9, r9, #1
 23ef0a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ef0a2:	4599      	cmp	r9, r3
 23ef0a4:	dbc3      	blt.n	23ef02e <arm_convolve_s8+0x102>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 23ef0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ef0a8:	3301      	adds	r3, #1
 23ef0aa:	930a      	str	r3, [sp, #40]	; 0x28
 23ef0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ef0ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ef0b0:	4293      	cmp	r3, r2
 23ef0b2:	da41      	bge.n	23ef138 <arm_convolve_s8+0x20c>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ef0b6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 23ef0ba:	f04f 0900 	mov.w	r9, #0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef0be:	4353      	muls	r3, r2
 23ef0c0:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 23ef0c4:	1a9b      	subs	r3, r3, r2
 23ef0c6:	9310      	str	r3, [sp, #64]	; 0x40
 23ef0c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23ef0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ef0cc:	4353      	muls	r3, r2
 23ef0ce:	9325      	str	r3, [sp, #148]	; 0x94
 23ef0d0:	e7e6      	b.n	23ef0a0 <arm_convolve_s8+0x174>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 23ef0d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23ef0d4:	42b3      	cmp	r3, r6
 23ef0d6:	d904      	bls.n	23ef0e2 <arm_convolve_s8+0x1b6>
 23ef0d8:	2d00      	cmp	r5, #0
 23ef0da:	db02      	blt.n	23ef0e2 <arm_convolve_s8+0x1b6>
 23ef0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ef0de:	429d      	cmp	r5, r3
 23ef0e0:	db15      	blt.n	23ef10e <arm_convolve_s8+0x1e2>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 23ef0e2:	2100      	movs	r1, #0
 23ef0e4:	4638      	mov	r0, r7
 23ef0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ef0e8:	f00c fa40 	bl	23fb56c <memset>
                        two_column_buf += input_ch;
 23ef0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
                         i_ker_x++)
 23ef0ee:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
 23ef0f0:	441f      	add	r7, r3
                         i_ker_x++)
 23ef0f2:	4454      	add	r4, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ef0f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23ef0f6:	42ab      	cmp	r3, r5
 23ef0f8:	dceb      	bgt.n	23ef0d2 <arm_convolve_s8+0x1a6>
 23ef0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ef0fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef0fe:	3601      	adds	r6, #1
 23ef100:	4413      	add	r3, r2
 23ef102:	930e      	str	r3, [sp, #56]	; 0x38
 23ef104:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23ef106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ef108:	4413      	add	r3, r2
 23ef10a:	930c      	str	r3, [sp, #48]	; 0x30
 23ef10c:	e7a5      	b.n	23ef05a <arm_convolve_s8+0x12e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 23ef10e:	ee18 3a90 	vmov	r3, s17
 23ef112:	4652      	mov	r2, sl
 23ef114:	4639      	mov	r1, r7
 23ef116:	4620      	mov	r0, r4
 23ef118:	f7fe ff49 	bl	23edfae <arm_q7_to_q15_with_offset>
 23ef11c:	e7e6      	b.n	23ef0ec <arm_convolve_s8+0x1c0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ef11e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23ef120:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ef122:	462b      	mov	r3, r5
 23ef124:	4413      	add	r3, r2
 23ef126:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23ef128:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 23ef12a:	932e      	str	r3, [sp, #184]	; 0xb8
 23ef12c:	e7e2      	b.n	23ef0f4 <arm_convolve_s8+0x1c8>
        q7_t *out = output_data;
 23ef12e:	9b42      	ldr	r3, [sp, #264]	; 0x108
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ef130:	46d8      	mov	r8, fp
        q7_t *out = output_data;
 23ef132:	930f      	str	r3, [sp, #60]	; 0x3c
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 23ef134:	2300      	movs	r3, #0
 23ef136:	e7b8      	b.n	23ef0aa <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
 23ef138:	45d8      	cmp	r8, fp
 23ef13a:	d173      	bne.n	23ef224 <arm_convolve_s8+0x2f8>
        input_data += (input_x * input_y * input_ch);
 23ef13c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 23ef13e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ef140:	4413      	add	r3, r2
 23ef142:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
 23ef144:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ef146:	9b42      	ldr	r3, [sp, #264]	; 0x108
 23ef148:	4413      	add	r3, r2
 23ef14a:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef14e:	3301      	adds	r3, #1
 23ef150:	930d      	str	r3, [sp, #52]	; 0x34
 23ef152:	e760      	b.n	23ef016 <arm_convolve_s8+0xea>
                if (bias_data)
 23ef154:	9b40      	ldr	r3, [sp, #256]	; 0x100
 23ef156:	2b00      	cmp	r3, #0
 23ef158:	d046      	beq.n	23ef1e8 <arm_convolve_s8+0x2bc>
                    sum = bias_data[i];
 23ef15a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                while (col_count)
 23ef15e:	465c      	mov	r4, fp
 23ef160:	462e      	mov	r6, r5
 23ef162:	42b0      	cmp	r0, r6
 23ef164:	4603      	mov	r3, r0
 23ef166:	d141      	bne.n	23ef1ec <arm_convolve_s8+0x2c0>
                while (col_count)
 23ef168:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 23ef16a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 23ef16c:	4406      	add	r6, r0
 23ef16e:	42b3      	cmp	r3, r6
 23ef170:	d151      	bne.n	23ef216 <arm_convolve_s8+0x2ea>
 23ef172:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef174:	464c      	mov	r4, r9
 23ef176:	441d      	add	r5, r3
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 23ef178:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ef17a:	46be      	mov	lr, r7
 23ef17c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ef180:	2e00      	cmp	r6, #0
 23ef182:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 23ef186:	bfc8      	it	gt
 23ef188:	2600      	movgt	r6, #0
 23ef18a:	fa01 f103 	lsl.w	r1, r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef18e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ef190:	bfd8      	it	le
 23ef192:	4276      	negle	r6, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ef198:	fbc1 4e03 	smlal	r4, lr, r1, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef19c:	fa0c f306 	lsl.w	r3, ip, r6
    result = (int32_t)(mult.long_long >> 31);
 23ef1a0:	0fe4      	lsrs	r4, r4, #31
 23ef1a2:	ea44 0e4e 	orr.w	lr, r4, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef1a6:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23ef1a8:	ea0e 0103 	and.w	r1, lr, r3
    if (result < 0)
 23ef1ac:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
 23ef1b0:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ef1b4:	bf48      	it	mi
 23ef1b6:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ef1b8:	4299      	cmp	r1, r3
                sum += out_offset;
 23ef1ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
        result++;
 23ef1bc:	bfc8      	it	gt
 23ef1be:	f10e 0e01 	addgt.w	lr, lr, #1
 23ef1c2:	449e      	add	lr, r3
                sum = MAX(sum, out_activation_min);
 23ef1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ef1c6:	459e      	cmp	lr, r3
 23ef1c8:	bfb8      	it	lt
 23ef1ca:	469e      	movlt	lr, r3
                sum = MIN(sum, out_activation_max);
 23ef1cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ef1ce:	459e      	cmp	lr, r3
 23ef1d0:	bfa8      	it	ge
 23ef1d2:	469e      	movge	lr, r3
                *out++ = (q7_t)sum;
 23ef1d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef1d6:	f803 e002 	strb.w	lr, [r3, r2]
            for (i = 0; i < output_ch; i++)
 23ef1da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 23ef1dc:	3201      	adds	r2, #1
 23ef1de:	4418      	add	r0, r3
 23ef1e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23ef1e2:	429a      	cmp	r2, r3
 23ef1e4:	d1b6      	bne.n	23ef154 <arm_convolve_s8+0x228>
 23ef1e6:	e7a9      	b.n	23ef13c <arm_convolve_s8+0x210>
                q31_t sum = 0;
 23ef1e8:	9940      	ldr	r1, [sp, #256]	; 0x100
 23ef1ea:	e7b8      	b.n	23ef15e <arm_convolve_s8+0x232>
    memcpy(&val, *in_q7, 4);
 23ef1ec:	f856 eb04 	ldr.w	lr, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ef1f0:	ea4f 233e 	mov.w	r3, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ef1f4:	fa2f f883 	sxtb16	r8, r3
 23ef1f8:	fa2f f38e 	sxtb16	r3, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ef1fc:	eac8 4e23 	pkhtb	lr, r8, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ef200:	eac3 4308 	pkhbt	r3, r3, r8, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ef204:	f8d4 8000 	ldr.w	r8, [r4]
 23ef208:	fb23 1308 	smlad	r3, r3, r8, r1
    memcpy(&val, *in_q15, 4);
 23ef20c:	6861      	ldr	r1, [r4, #4]
    *in_q15 += 2;
 23ef20e:	3408      	adds	r4, #8
 23ef210:	fb2e 3101 	smlad	r1, lr, r1, r3
                    col_count--;
 23ef214:	e7a5      	b.n	23ef162 <arm_convolve_s8+0x236>
                    sum += ker_a1 * ip_b1;
 23ef216:	f913 eb01 	ldrsb.w	lr, [r3], #1
 23ef21a:	f834 8b02 	ldrh.w	r8, [r4], #2
 23ef21e:	fb18 110e 	smlabb	r1, r8, lr, r1
                    col_count--;
 23ef222:	e7a4      	b.n	23ef16e <arm_convolve_s8+0x242>
            for (i = 0; i < output_ch; i++)
 23ef224:	2200      	movs	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef226:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 23ef22a:	4617      	mov	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef22c:	f04f 0c01 	mov.w	ip, #1
 23ef230:	982a      	ldr	r0, [sp, #168]	; 0xa8
            const q7_t *ker_a = filter_data;
 23ef232:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 23ef234:	e7d4      	b.n	23ef1e0 <arm_convolve_s8+0x2b4>

023ef236 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 23ef236:	688b      	ldr	r3, [r1, #8]
 23ef238:	68c0      	ldr	r0, [r0, #12]
 23ef23a:	4358      	muls	r0, r3
 23ef23c:	684b      	ldr	r3, [r1, #4]
 23ef23e:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 23ef240:	0080      	lsls	r0, r0, #2
 23ef242:	4770      	bx	lr

023ef244 <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
 23ef244:	0088      	lsls	r0, r1, #2
 23ef246:	4770      	bx	lr

023ef248 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 23ef248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
 23ef24c:	6894      	ldr	r4, [r2, #8]
{
 23ef24e:	b0a3      	sub	sp, #140	; 0x8c
 23ef250:	931f      	str	r3, [sp, #124]	; 0x7c
    const int32_t input_x = input_dims->w;
 23ef252:	9409      	str	r4, [sp, #36]	; 0x24
{
 23ef254:	e9dd 302c 	ldrd	r3, r0, [sp, #176]	; 0xb0
    const int32_t output_y = output_dims->h;
 23ef258:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
 23ef25a:	6880      	ldr	r0, [r0, #8]
    const int32_t output_y = output_dims->h;
 23ef25c:	9413      	str	r4, [sp, #76]	; 0x4c
    const int32_t output_x = output_dims->w;
 23ef25e:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_y = pool_params->stride.h;
 23ef260:	6848      	ldr	r0, [r1, #4]
    const int32_t kernel_x = filter_dims->w;
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
    const int32_t channel_in = input_dims->c;
 23ef262:	68d4      	ldr	r4, [r2, #12]
    const int32_t stride_y = pool_params->stride.h;
 23ef264:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t stride_x = pool_params->stride.w;
 23ef266:	6808      	ldr	r0, [r1, #0]
    const int32_t act_max = pool_params->activation.max;
 23ef268:	e9d1 9a04 	ldrd	r9, sl, [r1, #16]
    const int32_t stride_x = pool_params->stride.w;
 23ef26c:	900c      	str	r0, [sp, #48]	; 0x30
    const int32_t kernel_y = filter_dims->h;
 23ef26e:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
 23ef270:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
 23ef272:	9017      	str	r0, [sp, #92]	; 0x5c
    const int32_t kernel_x = filter_dims->w;
 23ef274:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t pad_x = pool_params->padding.w;
 23ef276:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 23ef27a:	9303      	str	r3, [sp, #12]
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ef27c:	4259      	negs	r1, r3
 23ef27e:	6853      	ldr	r3, [r2, #4]
 23ef280:	9a03      	ldr	r2, [sp, #12]
 23ef282:	9101      	str	r1, [sp, #4]
 23ef284:	18d3      	adds	r3, r2, r3
 23ef286:	9311      	str	r3, [sp, #68]	; 0x44
 23ef288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    int32_t cnt = length >> 2;
 23ef28a:	10a1      	asrs	r1, r4, #2
 23ef28c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23ef290:	4363      	muls	r3, r4
 23ef292:	931d      	str	r3, [sp, #116]	; 0x74
 23ef294:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ef298:	009b      	lsls	r3, r3, #2
    const int32_t pad_x = pool_params->padding.w;
 23ef29a:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t cnt = length >> 2;
 23ef29c:	911b      	str	r1, [sp, #108]	; 0x6c
 23ef29e:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ef2a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23ef2a2:	9304      	str	r3, [sp, #16]
 23ef2a4:	2300      	movs	r3, #0
 23ef2a6:	9305      	str	r3, [sp, #20]
 23ef2a8:	9b05      	ldr	r3, [sp, #20]
 23ef2aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ef2ac:	4293      	cmp	r3, r2
 23ef2ae:	db17      	blt.n	23ef2e0 <arm_max_pool_s8+0x98>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 23ef2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    while (cnt > 0l)
 23ef2b2:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 23ef2b4:	435a      	muls	r2, r3
 23ef2b6:	4354      	muls	r4, r2
    int32_t cnt = length >> 2;
 23ef2b8:	10a1      	asrs	r1, r4, #2
 23ef2ba:	4608      	mov	r0, r1
    while (cnt > 0l)
 23ef2bc:	2800      	cmp	r0, #0
 23ef2be:	f300 80d7 	bgt.w	23ef470 <arm_max_pool_s8+0x228>
 23ef2c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 23ef2c4:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ef2c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cnt = length & 0x3;
 23ef2cc:	f004 0403 	and.w	r4, r4, #3
 23ef2d0:	441c      	add	r4, r3
    while (cnt > 0l)
 23ef2d2:	42a3      	cmp	r3, r4
 23ef2d4:	f040 80fb 	bne.w	23ef4ce <arm_max_pool_s8+0x286>

    return ARM_MATH_SUCCESS;
}
 23ef2d8:	2000      	movs	r0, #0
 23ef2da:	b023      	add	sp, #140	; 0x8c
 23ef2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ef2e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23ef2e4:	425b      	negs	r3, r3
 23ef2e6:	9302      	str	r3, [sp, #8]
 23ef2e8:	9b01      	ldr	r3, [sp, #4]
 23ef2ea:	9e04      	ldr	r6, [sp, #16]
 23ef2ec:	2b00      	cmp	r3, #0
 23ef2ee:	9b03      	ldr	r3, [sp, #12]
 23ef2f0:	bfc8      	it	gt
 23ef2f2:	2300      	movgt	r3, #0
 23ef2f4:	9312      	str	r3, [sp, #72]	; 0x48
 23ef2f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 23ef2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ef2fc:	4413      	add	r3, r2
 23ef2fe:	9310      	str	r3, [sp, #64]	; 0x40
 23ef300:	9a01      	ldr	r2, [sp, #4]
 23ef302:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ef304:	4413      	add	r3, r2
 23ef306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ef308:	4353      	muls	r3, r2
 23ef30a:	931e      	str	r3, [sp, #120]	; 0x78
 23ef30c:	2300      	movs	r3, #0
 23ef30e:	9306      	str	r3, [sp, #24]
 23ef310:	9b06      	ldr	r3, [sp, #24]
 23ef312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ef314:	4293      	cmp	r3, r2
 23ef316:	db11      	blt.n	23ef33c <arm_max_pool_s8+0xf4>
 23ef318:	9b04      	ldr	r3, [sp, #16]
 23ef31a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 23ef31c:	4413      	add	r3, r2
 23ef31e:	9304      	str	r3, [sp, #16]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ef320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ef322:	9b01      	ldr	r3, [sp, #4]
 23ef324:	4413      	add	r3, r2
 23ef326:	9301      	str	r3, [sp, #4]
 23ef328:	9b05      	ldr	r3, [sp, #20]
 23ef32a:	3301      	adds	r3, #1
 23ef32c:	9305      	str	r3, [sp, #20]
 23ef32e:	9b03      	ldr	r3, [sp, #12]
 23ef330:	1a9b      	subs	r3, r3, r2
 23ef332:	9303      	str	r3, [sp, #12]
 23ef334:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ef336:	1a9b      	subs	r3, r3, r2
 23ef338:	9311      	str	r3, [sp, #68]	; 0x44
 23ef33a:	e7b5      	b.n	23ef2a8 <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 23ef33c:	9b02      	ldr	r3, [sp, #8]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ef33e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 23ef340:	2b00      	cmp	r3, #0
 23ef342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef344:	bfc8      	it	gt
 23ef346:	2300      	movgt	r3, #0
 23ef348:	9316      	str	r3, [sp, #88]	; 0x58
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ef34a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ef34c:	9916      	ldr	r1, [sp, #88]	; 0x58
 23ef34e:	4293      	cmp	r3, r2
 23ef350:	bfa8      	it	ge
 23ef352:	4613      	movge	r3, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 23ef354:	9a18      	ldr	r2, [sp, #96]	; 0x60
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ef356:	9319      	str	r3, [sp, #100]	; 0x64
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 23ef358:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ef35a:	4293      	cmp	r3, r2
 23ef35c:	bfa8      	it	ge
 23ef35e:	4613      	movge	r3, r2
 23ef360:	931a      	str	r3, [sp, #104]	; 0x68
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ef364:	18f3      	adds	r3, r6, r3
 23ef366:	9314      	str	r3, [sp, #80]	; 0x50
 23ef368:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cnt = length & 0x3;
 23ef36a:	f004 0303 	and.w	r3, r4, #3
 23ef36e:	18d3      	adds	r3, r2, r3
 23ef370:	931c      	str	r3, [sp, #112]	; 0x70
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef372:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23ef374:	9a02      	ldr	r2, [sp, #8]
 23ef376:	930e      	str	r3, [sp, #56]	; 0x38
 23ef378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ef37a:	440a      	add	r2, r1
 23ef37c:	9307      	str	r3, [sp, #28]
            int count = 0;
 23ef37e:	2300      	movs	r3, #0
 23ef380:	9221      	str	r2, [sp, #132]	; 0x84
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef382:	9a07      	ldr	r2, [sp, #28]
 23ef384:	9919      	ldr	r1, [sp, #100]	; 0x64
 23ef386:	428a      	cmp	r2, r1
 23ef388:	da63      	bge.n	23ef452 <arm_max_pool_s8+0x20a>
 23ef38a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 23ef38c:	990e      	ldr	r1, [sp, #56]	; 0x38
 23ef38e:	1855      	adds	r5, r2, r1
 23ef390:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23ef392:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 23ef396:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23ef398:	9208      	str	r2, [sp, #32]
 23ef39a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23ef39c:	3a01      	subs	r2, #1
 23ef39e:	9220      	str	r2, [sp, #128]	; 0x80
 23ef3a0:	e00b      	b.n	23ef3ba <arm_max_pool_s8+0x172>
                    if (count == 0)
 23ef3a2:	2b00      	cmp	r3, #0
 23ef3a4:	d151      	bne.n	23ef44a <arm_max_pool_s8+0x202>
                        memcpy(dst, start, channel_in);
 23ef3a6:	4622      	mov	r2, r4
 23ef3a8:	4629      	mov	r1, r5
 23ef3aa:	4630      	mov	r0, r6
 23ef3ac:	f00c f8b7 	bl	23fb51e <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 23ef3b0:	9b08      	ldr	r3, [sp, #32]
 23ef3b2:	4425      	add	r5, r4
 23ef3b4:	3301      	adds	r3, #1
 23ef3b6:	9308      	str	r3, [sp, #32]
 23ef3b8:	2301      	movs	r3, #1
 23ef3ba:	9a08      	ldr	r2, [sp, #32]
 23ef3bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 23ef3be:	428a      	cmp	r2, r1
 23ef3c0:	dbef      	blt.n	23ef3a2 <arm_max_pool_s8+0x15a>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef3c2:	9a07      	ldr	r2, [sp, #28]
 23ef3c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ef3c6:	3201      	adds	r2, #1
 23ef3c8:	9207      	str	r2, [sp, #28]
 23ef3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ef3cc:	440a      	add	r2, r1
 23ef3ce:	920e      	str	r2, [sp, #56]	; 0x38
 23ef3d0:	e7d7      	b.n	23ef382 <arm_max_pool_s8+0x13a>
    memcpy(&val, in_q7, 4);
 23ef3d2:	6803      	ldr	r3, [r0, #0]
    memcpy(&val, *in_q7, 4);
 23ef3d4:	f85e 2b04 	ldr.w	r2, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
 23ef3d8:	fa4f fc83 	sxtb.w	ip, r3
 23ef3dc:	fa4f fb82 	sxtb.w	fp, r2
 23ef3e0:	45dc      	cmp	ip, fp
 23ef3e2:	bfb8      	it	lt
 23ef3e4:	46dc      	movlt	ip, fp
 23ef3e6:	f342 2b07 	sbfx	fp, r2, #8, #8
 23ef3ea:	f36c 0807 	bfi	r8, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
 23ef3ee:	f343 2c07 	sbfx	ip, r3, #8, #8
 23ef3f2:	45dc      	cmp	ip, fp
 23ef3f4:	bfb8      	it	lt
 23ef3f6:	46dc      	movlt	ip, fp
 23ef3f8:	f342 4b07 	sbfx	fp, r2, #16, #8
 23ef3fc:	f36c 280f 	bfi	r8, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
 23ef400:	f343 4c07 	sbfx	ip, r3, #16, #8
 23ef404:	45dc      	cmp	ip, fp
 23ef406:	ea4f 6323 	mov.w	r3, r3, asr #24
 23ef40a:	ea4f 6222 	mov.w	r2, r2, asr #24
 23ef40e:	bfb8      	it	lt
 23ef410:	46dc      	movlt	ip, fp
 23ef412:	4293      	cmp	r3, r2
 23ef414:	bfb8      	it	lt
 23ef416:	4613      	movlt	r3, r2
 23ef418:	f36c 4817 	bfi	r8, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
 23ef41c:	f363 681f 	bfi	r8, r3, #24, #8
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 23ef420:	f840 8b04 	str.w	r8, [r0], #4
        cnt--;
 23ef424:	3901      	subs	r1, #1
    while (cnt > 0l)
 23ef426:	2900      	cmp	r1, #0
 23ef428:	dcd3      	bgt.n	23ef3d2 <arm_max_pool_s8+0x18a>
    while (cnt > 0l)
 23ef42a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23ef42c:	18ea      	adds	r2, r5, r3
 23ef42e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ef430:	991c      	ldr	r1, [sp, #112]	; 0x70
 23ef432:	428b      	cmp	r3, r1
 23ef434:	d0bc      	beq.n	23ef3b0 <arm_max_pool_s8+0x168>
        if (*src > *dst)
 23ef436:	f993 0000 	ldrsb.w	r0, [r3]
 23ef43a:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
        dst++;
 23ef43e:	3301      	adds	r3, #1
        if (*src > *dst)
 23ef440:	4288      	cmp	r0, r1
            *dst = *src;
 23ef442:	bfb8      	it	lt
 23ef444:	f803 1c01 	strblt.w	r1, [r3, #-1]
        cnt--;
 23ef448:	e7f2      	b.n	23ef430 <arm_max_pool_s8+0x1e8>
    const q7_t *src = target;
 23ef44a:	46ae      	mov	lr, r5
 23ef44c:	4630      	mov	r0, r6
    int32_t cnt = length >> 2;
 23ef44e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 23ef450:	e7e9      	b.n	23ef426 <arm_max_pool_s8+0x1de>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ef452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23ef454:	9b02      	ldr	r3, [sp, #8]
            dst += channel_in;
 23ef456:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ef458:	4413      	add	r3, r2
 23ef45a:	9302      	str	r3, [sp, #8]
 23ef45c:	9b06      	ldr	r3, [sp, #24]
 23ef45e:	3301      	adds	r3, #1
 23ef460:	9306      	str	r3, [sp, #24]
 23ef462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef464:	1a9b      	subs	r3, r3, r2
 23ef466:	930f      	str	r3, [sp, #60]	; 0x3c
 23ef468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ef46a:	1a9b      	subs	r3, r3, r2
 23ef46c:	9310      	str	r3, [sp, #64]	; 0x40
 23ef46e:	e74f      	b.n	23ef310 <arm_max_pool_s8+0xc8>
    memcpy(&val, in_q7, 4);
 23ef470:	682b      	ldr	r3, [r5, #0]
        cnt--;
 23ef472:	3801      	subs	r0, #1
        in.bytes[0] = MAX(in.bytes[0], act_min);
 23ef474:	b25a      	sxtb	r2, r3
 23ef476:	454a      	cmp	r2, r9
 23ef478:	bfb8      	it	lt
 23ef47a:	464a      	movlt	r2, r9
        in.bytes[0] = MIN(in.bytes[0], act_max);
 23ef47c:	b252      	sxtb	r2, r2
 23ef47e:	4552      	cmp	r2, sl
 23ef480:	bfa8      	it	ge
 23ef482:	4652      	movge	r2, sl
 23ef484:	f362 0707 	bfi	r7, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
 23ef488:	f343 2207 	sbfx	r2, r3, #8, #8
 23ef48c:	454a      	cmp	r2, r9
 23ef48e:	bfb8      	it	lt
 23ef490:	464a      	movlt	r2, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
 23ef492:	b252      	sxtb	r2, r2
 23ef494:	4552      	cmp	r2, sl
 23ef496:	bfa8      	it	ge
 23ef498:	4652      	movge	r2, sl
 23ef49a:	f362 270f 	bfi	r7, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
 23ef49e:	f343 4207 	sbfx	r2, r3, #16, #8
 23ef4a2:	454a      	cmp	r2, r9
 23ef4a4:	bfb8      	it	lt
 23ef4a6:	464a      	movlt	r2, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ef4a8:	b252      	sxtb	r2, r2
        in.bytes[3] = MAX(in.bytes[3], act_min);
 23ef4aa:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ef4ac:	4552      	cmp	r2, sl
 23ef4ae:	bfa8      	it	ge
 23ef4b0:	4652      	movge	r2, sl
        in.bytes[3] = MAX(in.bytes[3], act_min);
 23ef4b2:	454b      	cmp	r3, r9
 23ef4b4:	bfb8      	it	lt
 23ef4b6:	464b      	movlt	r3, r9
        in.bytes[3] = MIN(in.bytes[3], act_max);
 23ef4b8:	b25b      	sxtb	r3, r3
 23ef4ba:	4553      	cmp	r3, sl
 23ef4bc:	bfa8      	it	ge
 23ef4be:	4653      	movge	r3, sl
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ef4c0:	f362 4717 	bfi	r7, r2, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
 23ef4c4:	f363 671f 	bfi	r7, r3, #24, #8
 23ef4c8:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
 23ef4cc:	e6f6      	b.n	23ef2bc <arm_max_pool_s8+0x74>
        int32_t comp = *source;
 23ef4ce:	f993 2000 	ldrsb.w	r2, [r3]
        comp = MAX(comp, act_min);
 23ef4d2:	454a      	cmp	r2, r9
 23ef4d4:	bfb8      	it	lt
 23ef4d6:	464a      	movlt	r2, r9
        comp = MIN(comp, act_max);
 23ef4d8:	4552      	cmp	r2, sl
 23ef4da:	bfa8      	it	ge
 23ef4dc:	4652      	movge	r2, sl
        *source++ = (int8_t)comp;
 23ef4de:	f803 2b01 	strb.w	r2, [r3], #1
        cnt--;
 23ef4e2:	e6f6      	b.n	23ef2d2 <arm_max_pool_s8+0x8a>

023ef4e4 <arm_q15_to_float>:
  while (blkCnt > 0U)
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ef4e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23ef504 <arm_q15_to_float+0x20>
  while (blkCnt > 0U)
 23ef4e8:	b902      	cbnz	r2, 23ef4ec <arm_q15_to_float+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 23ef4ea:	4770      	bx	lr
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ef4ec:	f930 3b02 	ldrsh.w	r3, [r0], #2
    blkCnt--;
 23ef4f0:	3a01      	subs	r2, #1
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ef4f2:	ee07 3a90 	vmov	s15, r3
 23ef4f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ef4fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ef4fe:	ece1 7a01 	vstmia	r1!, {s15}
    blkCnt--;
 23ef502:	e7f1      	b.n	23ef4e8 <arm_q15_to_float+0x4>
 23ef504:	38000000 	.word	0x38000000

023ef508 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ef508:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 23ef50a:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ef50c:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 23ef50e:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ef510:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 23ef512:	b900      	cbnz	r0, 23ef516 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23ef514:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
 23ef516:	ecf2 7a01 	vldmia	r2!, {s15}
 23ef51a:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
 23ef51e:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
 23ef520:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
 23ef524:	e7f5      	b.n	23ef512 <arm_mat_scale_f32+0xa>

023ef526 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 23ef526:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 23ef528:	8802      	ldrh	r2, [r0, #0]
 23ef52a:	684b      	ldr	r3, [r1, #4]
 23ef52c:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 23ef52e:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 23ef530:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 23ef534:	00af      	lsls	r7, r5, #2
 23ef536:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
 23ef53a:	4619      	mov	r1, r3
      col = nCols;
 23ef53c:	4628      	mov	r0, r5
      while (col > 0U)
 23ef53e:	4626      	mov	r6, r4
 23ef540:	b920      	cbnz	r0, 23ef54c <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 23ef542:	3304      	adds	r3, #4
 23ef544:	4293      	cmp	r3, r2
 23ef546:	443c      	add	r4, r7
 23ef548:	d1f7      	bne.n	23ef53a <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23ef54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
 23ef54c:	f856 eb04 	ldr.w	lr, [r6], #4
        col--;
 23ef550:	3801      	subs	r0, #1
        *px = *pIn++;
 23ef552:	f8c1 e000 	str.w	lr, [r1]
        px += nRows;
 23ef556:	4461      	add	r1, ip
        col--;
 23ef558:	e7f2      	b.n	23ef540 <arm_mat_trans_f32+0x1a>

023ef55a <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 23ef55a:	b510      	push	{r4, lr}

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 23ef55c:	edd1 7a01 	vldr	s15, [r1, #4]
 23ef560:	ee77 7aa7 	vadd.f32	s15, s15, s15
   xBR = pB[0];
 23ef564:	edd1 5a00 	vldr	s11, [r1]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 23ef568:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 23ef56c:	eeb0 7a67 	vmov.f32	s14, s15
 23ef570:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 23ef574:	eea5 7a86 	vfma.f32	s14, s11, s12
   *pOut++ = 0.5f * ( t1a - t1b );
 23ef578:	eed5 7a86 	vfnms.f32	s15, s11, s12
   *pOut++ = 0.5f * ( t1a + t1b );
 23ef57c:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( t1a - t1b );
 23ef580:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 23ef584:	8803      	ldrh	r3, [r0, #0]
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 23ef586:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
 23ef588:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
 23ef58a:	f104 0010 	add.w	r0, r4, #16
 23ef58e:	f101 0410 	add.w	r4, r1, #16
 23ef592:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23ef596:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
 23ef59a:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
 23ef59e:	3908      	subs	r1, #8
 23ef5a0:	3210      	adds	r2, #16
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 23ef5a2:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR = pB[0];
 23ef5a6:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
 23ef5aa:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI = pA[1];
 23ef5ae:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
 23ef5b2:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 23ef5b6:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
 23ef5ba:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
 23ef5be:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef5c2:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef5c6:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef5ca:	eea5 7a85 	vfma.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef5ce:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef5d2:	eea4 7a86 	vfma.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef5d6:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef5da:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef5de:	ee67 7aa6 	vmul.f32	s15, s15, s13


      pA += 2;
      pB -= 2;
      k--;
 23ef5e2:	3b01      	subs	r3, #1
   } while (k > 0);
 23ef5e4:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef5e6:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef5ea:	ed42 7a01 	vstr	s15, [r2, #-4]
   } while (k > 0);
 23ef5ee:	f100 0008 	add.w	r0, r0, #8
 23ef5f2:	f102 0208 	add.w	r2, r2, #8
 23ef5f6:	f104 0408 	add.w	r4, r4, #8
 23ef5fa:	f1a1 0108 	sub.w	r1, r1, #8
 23ef5fe:	dcd0      	bgt.n	23ef5a2 <stage_rfft_f32+0x48>
}
 23ef600:	bd10      	pop	{r4, pc}

023ef602 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 23ef602:	b510      	push	{r4, lr}
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
 23ef604:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
 23ef608:	ed91 6a01 	vldr	s12, [r1, #4]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
 23ef60c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 23ef610:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
 23ef614:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
 23ef618:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( xAR - xAI );
 23ef61c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 23ef620:	8803      	ldrh	r3, [r0, #0]
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 23ef622:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
 23ef624:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR + xAI );
 23ef626:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
 23ef62a:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
 23ef62e:	f104 0008 	add.w	r0, r4, #8
 23ef632:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
 23ef634:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
 23ef638:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
 23ef63c:	2b00      	cmp	r3, #0
 23ef63e:	f102 0208 	add.w	r2, r2, #8
 23ef642:	f100 0008 	add.w	r0, r0, #8
 23ef646:	f104 0408 	add.w	r4, r4, #8
 23ef64a:	f1a1 0108 	sub.w	r1, r1, #8
 23ef64e:	dc00      	bgt.n	23ef652 <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 23ef650:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
 23ef652:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR =   pB[0]    ;
 23ef656:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
 23ef65a:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
 23ef65e:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
 23ef662:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 23ef666:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
 23ef66a:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
 23ef66e:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef672:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef676:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef67a:	eea5 7ac5 	vfms.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef67e:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef682:	eea4 7ac6 	vfms.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef686:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef68a:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef68e:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef692:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef696:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
 23ef69a:	3b01      	subs	r3, #1
 23ef69c:	e7ce      	b.n	23ef63c <merge_rfft_f32+0x3a>

023ef69e <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 23ef69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ef6a2:	4605      	mov	r5, r0
 23ef6a4:	460f      	mov	r7, r1
 23ef6a6:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
 23ef6a8:	461c      	mov	r4, r3
 23ef6aa:	b14b      	cbz	r3, 23ef6c0 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 23ef6ac:	f7ff ffa9 	bl	23ef602 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 23ef6b0:	4622      	mov	r2, r4
 23ef6b2:	4631      	mov	r1, r6
 23ef6b4:	4628      	mov	r0, r5
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 23ef6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 23ef6ba:	2301      	movs	r3, #1
 23ef6bc:	f000 bd53 	b.w	23f0166 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 23ef6c0:	4622      	mov	r2, r4
 23ef6c2:	2301      	movs	r3, #1
 23ef6c4:	f000 fd4f 	bl	23f0166 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 23ef6c8:	4632      	mov	r2, r6
 23ef6ca:	4639      	mov	r1, r7
 23ef6cc:	4628      	mov	r0, r5
}
 23ef6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
 23ef6d2:	f7ff bf42 	b.w	23ef55a <stage_rfft_f32>

023ef6d6 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 23ef6d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ef6d8:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 23ef6da:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
 23ef6dc:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
 23ef6de:	45ac      	cmp	ip, r5
 23ef6e0:	d800      	bhi.n	23ef6e4 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
 23ef6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
 23ef6e4:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
 23ef6e8:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
 23ef6ec:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
 23ef6ee:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
 23ef6f0:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
 23ef6f4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    i += 2;
 23ef6f8:	3502      	adds	r5, #2
     pSrc[a] = pSrc[b];
 23ef6fa:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
 23ef6fe:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
 23ef702:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
 23ef704:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
 23ef706:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
 23ef70a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 23ef70e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b+1] = tmp;
 23ef712:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
 23ef716:	e7e2      	b.n	23ef6de <arm_bitreversal_32+0x8>

023ef718 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 23ef718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef71c:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 23ef720:	eddf 7ab2 	vldr	s15, [pc, #712]	; 23ef9ec <arm_radix8_butterfly_f32+0x2d4>
{
 23ef724:	b08f      	sub	sp, #60	; 0x3c
 23ef726:	9001      	str	r0, [sp, #4]
 23ef728:	9103      	str	r1, [sp, #12]
 23ef72a:	920d      	str	r2, [sp, #52]	; 0x34
 23ef72c:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
 23ef72e:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
 23ef730:	2018      	movs	r0, #24
 23ef732:	9b02      	ldr	r3, [sp, #8]
      i1 = 0;
 23ef734:	f04f 0900 	mov.w	r9, #0
      n2 = n2 >> 3;
 23ef738:	08da      	lsrs	r2, r3, #3
      i1 = 0;
 23ef73a:	fb00 f402 	mul.w	r4, r0, r2
 23ef73e:	2028      	movs	r0, #40	; 0x28
 23ef740:	940c      	str	r4, [sp, #48]	; 0x30
 23ef742:	fb00 f402 	mul.w	r4, r0, r2
 23ef746:	2030      	movs	r0, #48	; 0x30
 23ef748:	0151      	lsls	r1, r2, #5
 23ef74a:	9108      	str	r1, [sp, #32]
 23ef74c:	9901      	ldr	r1, [sp, #4]
 23ef74e:	fb00 fb02 	mul.w	fp, r0, r2
 23ef752:	eb01 1c42 	add.w	ip, r1, r2, lsl #5
 23ef756:	00d1      	lsls	r1, r2, #3
 23ef758:	9107      	str	r1, [sp, #28]
 23ef75a:	f06f 0117 	mvn.w	r1, #23
 23ef75e:	2038      	movs	r0, #56	; 0x38
 23ef760:	4351      	muls	r1, r2
 23ef762:	eb0c 0701 	add.w	r7, ip, r1
 23ef766:	eb07 1642 	add.w	r6, r7, r2, lsl #5
 23ef76a:	1875      	adds	r5, r6, r1
 23ef76c:	9406      	str	r4, [sp, #24]
 23ef76e:	0114      	lsls	r4, r2, #4
 23ef770:	fb00 fa02 	mul.w	sl, r0, r2
 23ef774:	9405      	str	r4, [sp, #20]
 23ef776:	9801      	ldr	r0, [sp, #4]
 23ef778:	eb05 1442 	add.w	r4, r5, r2, lsl #5
 23ef77c:	4421      	add	r1, r4
 23ef77e:	00db      	lsls	r3, r3, #3
 23ef780:	eb01 1842 	add.w	r8, r1, r2, lsl #5
 23ef784:	f100 0e04 	add.w	lr, r0, #4
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ef788:	eddc 6a00 	vldr	s13, [ip]
 23ef78c:	ed1e 6a01 	vldr	s12, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ef790:	edd7 5a00 	vldr	s11, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ef794:	ee36 7a26 	vadd.f32	s14, s12, s13
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 23ef798:	ee36 6a66 	vsub.f32	s12, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ef79c:	edd6 6a00 	vldr	s13, [r6]
 23ef7a0:	ee35 5aa6 	vadd.f32	s10, s11, s13
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 23ef7a4:	ee35 4ae6 	vsub.f32	s8, s11, s13
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23ef7a8:	edd5 5a00 	vldr	s11, [r5]
 23ef7ac:	edd4 6a00 	vldr	s13, [r4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ef7b0:	ed91 3a00 	vldr	s6, [r1]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23ef7b4:	ee75 3aa6 	vadd.f32	s7, s11, s13
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 23ef7b8:	ee75 6ae6 	vsub.f32	s13, s11, s13
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ef7bc:	edd8 5a00 	vldr	s11, [r8]
 23ef7c0:	ee73 4a25 	vadd.f32	s9, s6, s11
         t1 = r1 - r3;
 23ef7c4:	ee77 1a63 	vsub.f32	s3, s14, s7
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 23ef7c8:	ee33 3a65 	vsub.f32	s6, s6, s11
         r1 = r1 + r3;
 23ef7cc:	ee37 7a23 	vadd.f32	s14, s14, s7
         r2 = r2 + r4;
 23ef7d0:	ee75 5a24 	vadd.f32	s11, s10, s9
         r3 = r2 - r4;
 23ef7d4:	ee35 2a64 	vsub.f32	s4, s10, s9
         pSrc[2 * i1] = r1 + r2;
 23ef7d8:	ee37 5a25 	vadd.f32	s10, s14, s11
         pSrc[2 * i5] = r1 - r2;
 23ef7dc:	ee37 7a65 	vsub.f32	s14, s14, s11
         pSrc[2 * i1] = r1 + r2;
 23ef7e0:	ed0e 5a01 	vstr	s10, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
 23ef7e4:	ed8c 7a00 	vstr	s14, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ef7e8:	ed9c 7a01 	vldr	s14, [ip, #4]
 23ef7ec:	ed9e 5a00 	vldr	s10, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ef7f0:	edd6 4a01 	vldr	s9, [r6, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ef7f4:	ee75 5a07 	vadd.f32	s11, s10, s14
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 23ef7f8:	ee35 5a47 	vsub.f32	s10, s10, s14
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ef7fc:	ed97 7a01 	vldr	s14, [r7, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ef800:	edd5 3a01 	vldr	s7, [r5, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ef804:	ee77 2a24 	vadd.f32	s5, s14, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 23ef808:	ee37 7a64 	vsub.f32	s14, s14, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ef80c:	edd4 4a01 	vldr	s9, [r4, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23ef810:	ed98 1a01 	vldr	s2, [r8, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ef814:	ee73 0aa4 	vadd.f32	s1, s7, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 23ef818:	ee73 4ae4 	vsub.f32	s9, s7, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23ef81c:	edd1 3a01 	vldr	s7, [r1, #4]
 23ef820:	ee33 0a81 	vadd.f32	s0, s7, s2
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 23ef824:	ee73 3ac1 	vsub.f32	s7, s7, s2
         t2 = r1 - s3;
 23ef828:	ee35 1ae0 	vsub.f32	s2, s11, s1
         r1 = r1 + s3;
 23ef82c:	ee75 5aa0 	vadd.f32	s11, s11, s1
         s3 = r2 - r4;
 23ef830:	ee72 0ac0 	vsub.f32	s1, s5, s0
         r2 = r2 + r4;
 23ef834:	ee72 2a80 	vadd.f32	s5, s5, s0
         pSrc[2 * i1 + 1] = r1 + r2;
 23ef838:	ee35 0aa2 	vadd.f32	s0, s11, s5
         pSrc[2 * i5 + 1] = r1 - r2;
 23ef83c:	ee75 5ae2 	vsub.f32	s11, s11, s5
         pSrc[2 * i1 + 1] = r1 + r2;
 23ef840:	ed8e 0a00 	vstr	s0, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
 23ef844:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
 23ef848:	ee71 5aa0 	vadd.f32	s11, s3, s1
         pSrc[2 * i7]     = t1 - s3;
 23ef84c:	ee71 1ae0 	vsub.f32	s3, s3, s1
         pSrc[2 * i3]     = t1 + s3;
 23ef850:	edc5 5a00 	vstr	s11, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 23ef854:	ee71 5a42 	vsub.f32	s11, s2, s4
         pSrc[2 * i7 + 1] = t2 + r3;
 23ef858:	ee32 2a01 	vadd.f32	s4, s4, s2
         pSrc[2 * i7]     = t1 - s3;
 23ef85c:	edc4 1a00 	vstr	s3, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
 23ef860:	edc5 5a01 	vstr	s11, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 23ef864:	ed84 2a01 	vstr	s4, [r4, #4]
         r6 = (r6 + r8) * C81;
 23ef868:	ee74 5a03 	vadd.f32	s11, s8, s6
         r1 = (r6 - r8) * C81;
 23ef86c:	ee34 2a43 	vsub.f32	s4, s8, s6
         r5 = r5 + r1;
         r8 = r7 - r6;
 23ef870:	eeb0 4a66 	vmov.f32	s8, s13
         r2 = (s6 - s8) * C81;
 23ef874:	ee77 2a63 	vsub.f32	s5, s14, s7
         r8 = r7 - r6;
 23ef878:	eea5 4ae7 	vfms.f32	s8, s11, s15
         s6 = (s6 + s8) * C81;
 23ef87c:	ee37 7a23 	vadd.f32	s14, s14, s7
         r7 = r7 + r6;
 23ef880:	eee5 6aa7 	vfma.f32	s13, s11, s15
         t2 = s5 - r2;
 23ef884:	eeb0 3a45 	vmov.f32	s6, s10
         s5 = s5 + r2;
 23ef888:	eef0 5a45 	vmov.f32	s11, s10
         s8 = s7 - s6;
         s7 = s7 + s6;
 23ef88c:	eeb0 5a64 	vmov.f32	s10, s9
         t2 = s5 - r2;
 23ef890:	eea2 3ae7 	vfms.f32	s6, s5, s15
         s5 = s5 + r2;
 23ef894:	eee2 5aa7 	vfma.f32	s11, s5, s15
         t1 = r5 - r1;
 23ef898:	eef0 3a46 	vmov.f32	s7, s12
         s7 = s7 + s6;
 23ef89c:	eea7 5a27 	vfma.f32	s10, s14, s15
         r5 = r5 + r1;
 23ef8a0:	eea2 6a27 	vfma.f32	s12, s4, s15
         s8 = s7 - s6;
 23ef8a4:	eef0 2a64 	vmov.f32	s5, s9
         t1 = r5 - r1;
 23ef8a8:	eee2 3a67 	vfms.f32	s7, s4, s15
         s8 = s7 - s6;
 23ef8ac:	eee7 2a67 	vfms.f32	s5, s14, s15
         pSrc[2 * i2]     = r5 + s7;
 23ef8b0:	ee36 7a05 	vadd.f32	s14, s12, s10
         pSrc[2 * i8]     = r5 - s7;
 23ef8b4:	ee36 6a45 	vsub.f32	s12, s12, s10
         pSrc[2 * i2]     = r5 + s7;
 23ef8b8:	ed87 7a00 	vstr	s14, [r7]
         pSrc[2 * i6]     = t1 + s8;
 23ef8bc:	ee33 7aa2 	vadd.f32	s14, s7, s5
         pSrc[2 * i8]     = r5 - s7;
 23ef8c0:	ed88 6a00 	vstr	s12, [r8]
         pSrc[2 * i4]     = t1 - s8;
 23ef8c4:	ee73 3ae2 	vsub.f32	s7, s7, s5
         pSrc[2 * i6]     = t1 + s8;
 23ef8c8:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 23ef8cc:	ee35 7ae6 	vsub.f32	s14, s11, s13
         pSrc[2 * i4]     = t1 - s8;
 23ef8d0:	edc1 3a00 	vstr	s7, [r1]
         pSrc[2 * i8 + 1] = s5 + r7;
 23ef8d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
         pSrc[2 * i2 + 1] = s5 - r7;
 23ef8d8:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 23ef8dc:	ee33 7a44 	vsub.f32	s14, s6, s8
         pSrc[2 * i4 + 1] = t2 + r8;
 23ef8e0:	ee34 4a03 	vadd.f32	s8, s8, s6
         pSrc[2 * i8 + 1] = s5 + r7;
 23ef8e4:	edc8 6a01 	vstr	s13, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 23ef8e8:	ed86 7a01 	vstr	s14, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 23ef8ec:	ed81 4a01 	vstr	s8, [r1, #4]

         i1 += n1;
 23ef8f0:	9802      	ldr	r0, [sp, #8]
      } while (i1 < fftLen);
 23ef8f2:	449c      	add	ip, r3
         i1 += n1;
 23ef8f4:	4481      	add	r9, r0
      } while (i1 < fftLen);
 23ef8f6:	9803      	ldr	r0, [sp, #12]
 23ef8f8:	441f      	add	r7, r3
 23ef8fa:	4548      	cmp	r0, r9
 23ef8fc:	441e      	add	r6, r3
 23ef8fe:	441d      	add	r5, r3
 23ef900:	441c      	add	r4, r3
 23ef902:	4419      	add	r1, r3
 23ef904:	4498      	add	r8, r3
 23ef906:	449e      	add	lr, r3
 23ef908:	f63f af3e 	bhi.w	23ef788 <arm_radix8_butterfly_f32+0x70>

      if (n2 < 8)
 23ef90c:	2a07      	cmp	r2, #7
 23ef90e:	f240 8171 	bls.w	23efbf4 <arm_radix8_butterfly_f32+0x4dc>
 23ef912:	9801      	ldr	r0, [sp, #4]
 23ef914:	9908      	ldr	r1, [sp, #32]
         break;

      ia1 = 0;
      j = 1;
 23ef916:	2401      	movs	r4, #1
 23ef918:	4401      	add	r1, r0
 23ef91a:	910b      	str	r1, [sp, #44]	; 0x2c
 23ef91c:	9907      	ldr	r1, [sp, #28]
 23ef91e:	4401      	add	r1, r0
 23ef920:	910a      	str	r1, [sp, #40]	; 0x28
 23ef922:	9906      	ldr	r1, [sp, #24]
 23ef924:	4401      	add	r1, r0
 23ef926:	9109      	str	r1, [sp, #36]	; 0x24
 23ef928:	9905      	ldr	r1, [sp, #20]
 23ef92a:	4401      	add	r1, r0
 23ef92c:	9108      	str	r1, [sp, #32]
 23ef92e:	eb0b 0100 	add.w	r1, fp, r0
 23ef932:	9107      	str	r1, [sp, #28]
 23ef934:	990c      	ldr	r1, [sp, #48]	; 0x30
 23ef936:	4401      	add	r1, r0
 23ef938:	9106      	str	r1, [sp, #24]
 23ef93a:	eb0a 0100 	add.w	r1, sl, r0
 23ef93e:	9105      	str	r1, [sp, #20]
      ia1 = 0;
 23ef940:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 23ef942:	9804      	ldr	r0, [sp, #16]
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 23ef944:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
 23ef946:	4401      	add	r1, r0
         co2 = pCoef[2 * ia1];
 23ef948:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ef94a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 23ef94e:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 23ef952:	ed95 2a00 	vldr	s4, [r5]
         co3 = pCoef[2 * ia2];
 23ef956:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ef95a:	ed95 0a00 	vldr	s0, [r5]
         co4 = pCoef[2 * ia3];
 23ef95e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ef962:	ed95 5a00 	vldr	s10, [r5]
         co5 = pCoef[2 * ia4];
 23ef966:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ef96a:	edd5 8a00 	vldr	s17, [r5]
         co6 = pCoef[2 * ia5];
 23ef96e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ef972:	ed95 4a00 	vldr	s8, [r5]
         co7 = pCoef[2 * ia6];
 23ef976:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ef97a:	ed95 1a00 	vldr	s2, [r5]
         co8 = pCoef[2 * ia7];
 23ef97e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ef982:	fb00 5601 	mla	r6, r0, r1, r5
 23ef986:	9801      	ldr	r0, [sp, #4]
         si2 = pCoef[2 * ia1 + 1];
 23ef988:	edd6 1a01 	vldr	s3, [r6, #4]
 23ef98c:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
 23ef990:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23ef992:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ef996:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 23ef99a:	980a      	ldr	r0, [sp, #40]	; 0x28
         si3 = pCoef[2 * ia2 + 1];
 23ef99c:	ed96 8a01 	vldr	s16, [r6, #4]
 23ef9a0:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
 23ef9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 23ef9a6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ef9aa:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 23ef9ae:	9808      	ldr	r0, [sp, #32]
         si4 = pCoef[2 * ia3 + 1];
 23ef9b0:	edd6 4a01 	vldr	s9, [r6, #4]
 23ef9b4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 23ef9b8:	9807      	ldr	r0, [sp, #28]
 23ef9ba:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
         si5 = pCoef[2 * ia4 + 1];
 23ef9be:	ed96 9a01 	vldr	s18, [r6, #4]
 23ef9c2:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 23ef9c6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ef9ca:	9806      	ldr	r0, [sp, #24]
         si6 = pCoef[2 * ia5 + 1];
 23ef9cc:	edd6 3a01 	vldr	s7, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
 23ef9d0:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ef9d4:	edd6 0a01 	vldr	s1, [r6, #4]
 23ef9d8:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 23ef9dc:	9805      	ldr	r0, [sp, #20]
         co8 = pCoef[2 * ia7];
 23ef9de:	ed95 3a00 	vldr	s6, [r5]
         si8 = pCoef[2 * ia7 + 1];
 23ef9e2:	edd5 2a01 	vldr	s5, [r5, #4]
         i1 = j;
 23ef9e6:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 23ef9ea:	e001      	b.n	23ef9f0 <arm_radix8_butterfly_f32+0x2d8>
 23ef9ec:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ef9f0:	ed99 7a00 	vldr	s14, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ef9f4:	ed9e 6a00 	vldr	s12, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ef9f8:	edda 9a00 	vldr	s19, [sl]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ef9fc:	ed98 aa00 	vldr	s20, [r8]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efa00:	ed95 ba00 	vldr	s22, [r5]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23efa04:	eddc aa00 	vldr	s21, [ip]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efa08:	edd6 ba00 	vldr	s23, [r6]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23efa0c:	ee79 6a87 	vadd.f32	s13, s19, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 23efa10:	ee79 9ac7 	vsub.f32	s19, s19, s14
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23efa14:	ee3a 7a06 	vadd.f32	s14, s20, s12
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 23efa18:	ee3a aa46 	vsub.f32	s20, s20, s12
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23efa1c:	ed97 6a00 	vldr	s12, [r7]
 23efa20:	ee7a 5a86 	vadd.f32	s11, s21, s12
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 23efa24:	ee7a aac6 	vsub.f32	s21, s21, s12
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efa28:	ee3b 6a8b 	vadd.f32	s12, s23, s22
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 23efa2c:	ee7b bacb 	vsub.f32	s23, s23, s22
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
 23efa30:	ee77 da46 	vsub.f32	s27, s14, s12
            t1 = r1 - r3;
 23efa34:	ee36 bae5 	vsub.f32	s22, s13, s11
            r2 = r2 + r4;
 23efa38:	ee37 7a06 	vadd.f32	s14, s14, s12
            r1 = r1 + r3;
 23efa3c:	ee76 6aa5 	vadd.f32	s13, s13, s11
            pSrc[2 * i1] = r1 + r2;
 23efa40:	ee36 6a87 	vadd.f32	s12, s13, s14
 23efa44:	ed8a 6a00 	vstr	s12, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efa48:	edda 5a01 	vldr	s11, [sl, #4]
            r2 = r1 - r2;
 23efa4c:	ee76 6ac7 	vsub.f32	s13, s13, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efa50:	ed99 7a01 	vldr	s14, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efa54:	ed98 6a01 	vldr	s12, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efa58:	ee75 ea87 	vadd.f32	s29, s11, s14
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 23efa5c:	ee35 cac7 	vsub.f32	s24, s11, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efa60:	ed9e 7a01 	vldr	s14, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 23efa64:	ee76 ca47 	vsub.f32	s25, s12, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efa68:	ee76 fa07 	vadd.f32	s31, s12, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efa6c:	ed9c 6a01 	vldr	s12, [ip, #4]
 23efa70:	ed97 7a01 	vldr	s14, [r7, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23efa74:	ed96 da01 	vldr	s26, [r6, #4]
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efa78:	ee36 ea07 	vadd.f32	s28, s12, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 23efa7c:	ee36 7a47 	vsub.f32	s14, s12, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23efa80:	ed95 6a01 	vldr	s12, [r5, #4]
 23efa84:	ee7d 5a06 	vadd.f32	s11, s26, s12
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
            t2 = s1 - s3;
 23efa88:	ee3e face 	vsub.f32	s30, s29, s28
            s1 = s1 + s3;
 23efa8c:	ee3e ea8e 	vadd.f32	s28, s29, s28
            s3 = s2 - s4;
 23efa90:	ee7f eae5 	vsub.f32	s29, s31, s11
            s2 = s2 + s4;
 23efa94:	ee7f 5aa5 	vadd.f32	s11, s31, s11
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 23efa98:	ee3d da46 	vsub.f32	s26, s26, s12
            r1 = t1 + s3;
 23efa9c:	ee3b 6a2e 	vadd.f32	s12, s22, s29
            t1 = t1 - s3;
 23efaa0:	ee3b ba6e 	vsub.f32	s22, s22, s29
            pSrc[2 * i1 + 1] = s1 + s2;
 23efaa4:	ee7e ea25 	vadd.f32	s29, s28, s11
            s2 = s1 - s2;
 23efaa8:	ee3e ea65 	vsub.f32	s28, s28, s11
            s1 = t2 - r3;
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 23efaac:	ee69 5a0e 	vmul.f32	s11, s18, s28
            pSrc[2 * i1 + 1] = s1 + s2;
 23efab0:	edca ea01 	vstr	s29, [sl, #4]
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 23efab4:	eee8 5aa6 	vfma.f32	s11, s17, s13
            s1 = t2 - r3;
 23efab8:	ee7f ea6d 	vsub.f32	s29, s30, s27
            pSrc[2 * i5]     = p1 + p2;
 23efabc:	edc9 5a00 	vstr	s11, [r9]
            pSrc[2 * i5 + 1] = p3 - p4;
 23efac0:	ee66 5ac9 	vnmul.f32	s11, s13, s18
            p1 = co3 * r1;
            p2 = si3 * s1;
 23efac4:	ee68 6a2e 	vmul.f32	s13, s16, s29
            t2 = t2 + r3;
 23efac8:	ee7d da8f 	vadd.f32	s27, s27, s30
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 23efacc:	eee0 6a06 	vfma.f32	s13, s0, s12
            pSrc[2 * i5 + 1] = p3 - p4;
 23efad0:	eee8 5a8e 	vfma.f32	s11, s17, s28
            pSrc[2 * i3 + 1] = p3 - p4;
 23efad4:	ee26 6a48 	vnmul.f32	s12, s12, s16
            pSrc[2 * i5 + 1] = p3 - p4;
 23efad8:	edc9 5a01 	vstr	s11, [r9, #4]
            pSrc[2 * i3]     = p1 + p2;
 23efadc:	edcc 6a00 	vstr	s13, [ip]
            p1 = co7 * t1;
            p2 = si7 * t2;
 23efae0:	ee60 6aad 	vmul.f32	s13, s1, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 23efae4:	eea0 6a2e 	vfma.f32	s12, s0, s29
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 23efae8:	eee1 6a0b 	vfma.f32	s13, s2, s22
            pSrc[2 * i3 + 1] = p3 - p4;
 23efaec:	ed8c 6a01 	vstr	s12, [ip, #4]
            pSrc[2 * i7]     = p1 + p2;
 23efaf0:	edc7 6a00 	vstr	s13, [r7]
            pSrc[2 * i7 + 1] = p3 - p4;
 23efaf4:	ee6b 6a60 	vnmul.f32	s13, s22, s1
 23efaf8:	eee1 6a2d 	vfma.f32	s13, s2, s27
            r1 = (r6 - r8) * C81;
 23efafc:	ee7a 5a6b 	vsub.f32	s11, s20, s23
            pSrc[2 * i7 + 1] = p3 - p4;
 23efb00:	edc7 6a01 	vstr	s13, [r7, #4]
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
 23efb04:	ee3c 6a8d 	vadd.f32	s12, s25, s26
            s1 = (s6 - s8) * C81;
 23efb08:	ee7c 6acd 	vsub.f32	s13, s25, s26
            t1 = r5 - r1;
 23efb0c:	eef0 ca69 	vmov.f32	s25, s19
            r6 = (r6 + r8) * C81;
 23efb10:	ee3a aa2b 	vadd.f32	s20, s20, s23
            r5 = r5 + r1;
 23efb14:	eee5 9aa7 	vfma.f32	s19, s11, s15
            t1 = r5 - r1;
 23efb18:	eee5 cae7 	vfms.f32	s25, s11, s15
            r8 = r7 - r6;
 23efb1c:	eeb0 ba6a 	vmov.f32	s22, s21
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
            s8 = s7 - s6;
 23efb20:	eef0 ba47 	vmov.f32	s23, s14
            s5 = s5 + s1;
 23efb24:	eef0 5a4c 	vmov.f32	s11, s24
            r8 = r7 - r6;
 23efb28:	eeaa ba67 	vfms.f32	s22, s20, s15
            r7 = r7 + r6;
 23efb2c:	eeea aa27 	vfma.f32	s21, s20, s15
            s8 = s7 - s6;
 23efb30:	eee6 ba67 	vfms.f32	s23, s12, s15
            s5 = s5 + s1;
 23efb34:	eee6 5aa7 	vfma.f32	s11, s13, s15
            s7 = s7 + s6;
 23efb38:	eea6 7a27 	vfma.f32	s14, s12, s15
            t2 = s5 - s1;
 23efb3c:	eeb0 aa4c 	vmov.f32	s20, s24
            r1 = r5 + s7;
 23efb40:	ee39 6a87 	vadd.f32	s12, s19, s14
            t2 = s5 - s1;
 23efb44:	eea6 aae7 	vfms.f32	s20, s13, s15
            r5 = r5 - s7;
 23efb48:	ee39 7ac7 	vsub.f32	s14, s19, s14
            r6 = t1 + s8;
 23efb4c:	ee7c 6aab 	vadd.f32	s13, s25, s23
            t1 = t1 - s8;
 23efb50:	ee7c 9aeb 	vsub.f32	s19, s25, s23
            s1 = s5 - r7;
 23efb54:	ee75 baea 	vsub.f32	s23, s11, s21
            s5 = s5 + r7;
 23efb58:	ee7a 5aa5 	vadd.f32	s11, s21, s11
            s6 = t2 - r8;
 23efb5c:	ee7a aa4b 	vsub.f32	s21, s20, s22
            t2 = t2 + r8;
 23efb60:	ee3b aa0a 	vadd.f32	s20, s22, s20
            p1 = co2 * r1;
            p2 = si2 * s1;
 23efb64:	ee21 baab 	vmul.f32	s22, s3, s23
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 23efb68:	eea2 ba06 	vfma.f32	s22, s4, s12
            pSrc[2 * i2 + 1] = p3 - p4;
 23efb6c:	ee26 6a61 	vnmul.f32	s12, s12, s3
 23efb70:	eea2 6a2b 	vfma.f32	s12, s4, s23
 23efb74:	ed88 6a01 	vstr	s12, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
 23efb78:	ee22 6aa5 	vmul.f32	s12, s5, s11
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 23efb7c:	eea3 6a07 	vfma.f32	s12, s6, s14
            pSrc[2 * i2]     = p1 + p2;
 23efb80:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i8]     = p1 + p2;
 23efb84:	ed85 6a00 	vstr	s12, [r5]
            pSrc[2 * i8 + 1] = p3 - p4;
 23efb88:	ee27 6a62 	vnmul.f32	s12, s14, s5
            p1 = co6 * r6;
            p2 = si6 * s6;
 23efb8c:	ee23 7aaa 	vmul.f32	s14, s7, s21
            pSrc[2 * i8 + 1] = p3 - p4;
 23efb90:	eea3 6a25 	vfma.f32	s12, s6, s11
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 23efb94:	eea4 7a26 	vfma.f32	s14, s8, s13
            pSrc[2 * i8 + 1] = p3 - p4;
 23efb98:	ed85 6a01 	vstr	s12, [r5, #4]
            pSrc[2 * i6 + 1] = p3 - p4;
 23efb9c:	ee66 6ae3 	vnmul.f32	s13, s13, s7
            pSrc[2 * i6]     = p1 + p2;
 23efba0:	ed8e 7a00 	vstr	s14, [lr]
            p1 = co4 * t1;
            p2 = si4 * t2;
 23efba4:	ee24 7a8a 	vmul.f32	s14, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 23efba8:	eee4 6a2a 	vfma.f32	s13, s8, s21
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 23efbac:	eea5 7a29 	vfma.f32	s14, s10, s19
            pSrc[2 * i6 + 1] = p3 - p4;
 23efbb0:	edce 6a01 	vstr	s13, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
 23efbb4:	ed86 7a00 	vstr	s14, [r6]
            pSrc[2 * i4 + 1] = p3 - p4;
 23efbb8:	ee29 7ae4 	vnmul.f32	s14, s19, s9
 23efbbc:	eea5 7a0a 	vfma.f32	s14, s10, s20
 23efbc0:	ed86 7a01 	vstr	s14, [r6, #4]

            i1 += n1;
 23efbc4:	9802      	ldr	r0, [sp, #8]
         } while (i1 < fftLen);
 23efbc6:	449a      	add	sl, r3
            i1 += n1;
 23efbc8:	4483      	add	fp, r0
         } while (i1 < fftLen);
 23efbca:	9803      	ldr	r0, [sp, #12]
 23efbcc:	4499      	add	r9, r3
 23efbce:	4558      	cmp	r0, fp
 23efbd0:	4498      	add	r8, r3
 23efbd2:	449e      	add	lr, r3
 23efbd4:	449c      	add	ip, r3
 23efbd6:	441f      	add	r7, r3
 23efbd8:	441e      	add	r6, r3
 23efbda:	441d      	add	r5, r3
 23efbdc:	f63f af08 	bhi.w	23ef9f0 <arm_radix8_butterfly_f32+0x2d8>

         j++;
 23efbe0:	3401      	adds	r4, #1
      } while (j < n2);
 23efbe2:	42a2      	cmp	r2, r4
 23efbe4:	f47f aead 	bne.w	23ef942 <arm_radix8_butterfly_f32+0x22a>

      twidCoefModifier <<= 3;
 23efbe8:	9b04      	ldr	r3, [sp, #16]
 23efbea:	9202      	str	r2, [sp, #8]
 23efbec:	00db      	lsls	r3, r3, #3
 23efbee:	b29b      	uxth	r3, r3
 23efbf0:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
 23efbf2:	e59d      	b.n	23ef730 <arm_radix8_butterfly_f32+0x18>
}
 23efbf4:	b00f      	add	sp, #60	; 0x3c
 23efbf6:	ecbd 8b10 	vpop	{d8-d15}
 23efbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23efbfe:	bf00      	nop

023efc00 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 23efc00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23efc04:	4680      	mov	r8, r0
 23efc06:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 23efc08:	f8b8 7000 	ldrh.w	r7, [r8]
{
 23efc0c:	ed2d 8b02 	vpush	{d8}
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 23efc10:	eb01 0987 	add.w	r9, r1, r7, lsl #2
  const float32_t * tw = (float32_t *) S->pTwiddle;
 23efc14:	4605      	mov	r5, r0
 23efc16:	464b      	mov	r3, r9
 23efc18:	f8d8 6004 	ldr.w	r6, [r8, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 23efc1c:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 23efc1e:	08ff      	lsrs	r7, r7, #3
{
 23efc20:	b083      	sub	sp, #12
  pMid1 = p1 + L;
 23efc22:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  pMid2 = p2 + L;
 23efc26:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 23efc2a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
  for (l = L >> 2; l > 0; l-- )
 23efc2e:	42be      	cmp	r6, r7
 23efc30:	f105 0510 	add.w	r5, r5, #16
 23efc34:	f104 0410 	add.w	r4, r4, #16
 23efc38:	f102 0210 	add.w	r2, r2, #16
 23efc3c:	f103 0310 	add.w	r3, r3, #16
 23efc40:	d112      	bne.n	23efc68 <arm_cfft_radix8by2_f32+0x68>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 23efc42:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23efc46:	b289      	uxth	r1, r1
 23efc48:	2302      	movs	r3, #2
 23efc4a:	9101      	str	r1, [sp, #4]
 23efc4c:	f7ff fd64 	bl	23ef718 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 23efc50:	2302      	movs	r3, #2
 23efc52:	4648      	mov	r0, r9
 23efc54:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23efc58:	9901      	ldr	r1, [sp, #4]
}
 23efc5a:	b003      	add	sp, #12
 23efc5c:	ecbd 8b02 	vpop	{d8}
 23efc60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 23efc64:	f7ff bd58 	b.w	23ef718 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
 23efc68:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
 23efc6c:	ed15 7a04 	vldr	s14, [r5, #-16]
    t2[1] = p2[1];
 23efc70:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
 23efc74:	ed55 3a03 	vldr	s7, [r5, #-12]
    *p1++ = t1[0] + t2[0];
 23efc78:	ee37 8a00 	vadd.f32	s16, s14, s0
    t4[0] = pMid2[0];
 23efc7c:	ed12 4a04 	vldr	s8, [r2, #-16]
    t4[1] = pMid2[1];
 23efc80:	ed52 4a03 	vldr	s9, [r2, #-12]
    t2[2] = p2[2];
 23efc84:	ed53 7a02 	vldr	s15, [r3, #-8]
    t2[3] = p2[3];
 23efc88:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
 23efc8c:	ed54 2a03 	vldr	s5, [r4, #-12]
    t3[2] = pMid1[2];
 23efc90:	ed14 3a02 	vldr	s6, [r4, #-8]
    t3[3] = pMid1[3];
 23efc94:	ed54 6a01 	vldr	s13, [r4, #-4]
    t4[2] = pMid2[2];
 23efc98:	ed52 5a02 	vldr	s11, [r2, #-8]
    t4[3] = pMid2[3];
 23efc9c:	ed12 6a01 	vldr	s12, [r2, #-4]
    t1[2] = p1[2];
 23efca0:	ed15 1a02 	vldr	s2, [r5, #-8]
    t3[0] = pMid1[0];
 23efca4:	ed14 2a04 	vldr	s4, [r4, #-16]
    *p1++ = t1[0] + t2[0];
 23efca8:	ed05 8a04 	vstr	s16, [r5, #-16]
    *p1++ = t1[1] + t2[1];
 23efcac:	ee33 8aa0 	vadd.f32	s16, s7, s1
    t1[3] = p1[3];
 23efcb0:	ed55 1a01 	vldr	s3, [r5, #-4]
    *p1++ = t1[1] + t2[1];
 23efcb4:	ed05 8a03 	vstr	s16, [r5, #-12]
    *p1++ = t1[2] + t2[2];
 23efcb8:	ee31 8a27 	vadd.f32	s16, s2, s15
 23efcbc:	ed05 8a02 	vstr	s16, [r5, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 23efcc0:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 23efcc4:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
 23efcc8:	ee72 1a04 	vadd.f32	s3, s4, s8
    *p1++ = t1[3] + t2[3];    /* col 1 */
 23efccc:	ed05 8a01 	vstr	s16, [r5, #-4]
    *pMid1++ = t3[0] + t4[0];
 23efcd0:	ed44 1a04 	vstr	s3, [r4, #-16]
    *pMid1++ = t3[1] + t4[1];
 23efcd4:	ee72 1aa4 	vadd.f32	s3, s5, s9
 23efcd8:	ed44 1a03 	vstr	s3, [r4, #-12]
    *pMid1++ = t3[2] + t4[2];
 23efcdc:	ee73 1a25 	vadd.f32	s3, s6, s11
 23efce0:	ed44 1a02 	vstr	s3, [r4, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 23efce4:	ee76 1a86 	vadd.f32	s3, s13, s12
 23efce8:	ed44 1a01 	vstr	s3, [r4, #-4]
    t4[2] = t4[2] - t3[2];
 23efcec:	ee75 5ac3 	vsub.f32	s11, s11, s6
    t2[1] = t1[1] - t2[1];
 23efcf0:	ee73 3ae0 	vsub.f32	s7, s7, s1
    twI = *tw++;
 23efcf4:	ed96 3a01 	vldr	s6, [r6, #4]
    t4[1] = t4[1] - t3[1];
 23efcf8:	ee74 4ae2 	vsub.f32	s9, s9, s5
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 23efcfc:	ee36 6a66 	vsub.f32	s12, s12, s13
    t2[0] = t1[0] - t2[0];
 23efd00:	ee37 7a40 	vsub.f32	s14, s14, s0
    twR = *tw++;
 23efd04:	edd6 6a00 	vldr	s13, [r6]
    m1 = t2[1] * twI;
 23efd08:	ee63 2a83 	vmul.f32	s5, s7, s6
    *p2++ = m0 + m1;
 23efd0c:	eee7 2a26 	vfma.f32	s5, s14, s13
    *p2++ = m2 - m3;
 23efd10:	ee23 7a47 	vnmul.f32	s14, s6, s14
    t4[0] = t4[0] - t3[0];
 23efd14:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p2++ = m2 - m3;
 23efd18:	eea3 7aa6 	vfma.f32	s14, s7, s13
 23efd1c:	ed03 7a03 	vstr	s14, [r3, #-12]
    m3 = t4[0] * twR;
 23efd20:	ee24 7a26 	vmul.f32	s14, s8, s13
    *pMid2++ = m0 - m1;
 23efd24:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *pMid2++ = m2 + m3;
 23efd28:	eea4 7a83 	vfma.f32	s14, s9, s6
    *pMid2++ = m0 - m1;
 23efd2c:	eee4 6a03 	vfma.f32	s13, s8, s6
    *p2++ = m0 + m1;
 23efd30:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
 23efd34:	ed42 6a04 	vstr	s13, [r2, #-16]
    *pMid2++ = m2 + m3;
 23efd38:	ed02 7a03 	vstr	s14, [r2, #-12]
 23efd3c:	3610      	adds	r6, #16
    twR = *tw++;
 23efd3e:	ed16 7a02 	vldr	s14, [r6, #-8]
    twI = *tw++;
 23efd42:	ed56 6a01 	vldr	s13, [r6, #-4]
    t2[2] = t1[2] - t2[2];
 23efd46:	ee71 7a67 	vsub.f32	s15, s2, s15
    m1 = t2[3] * twI;
 23efd4a:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
 23efd4e:	eee7 4a87 	vfma.f32	s9, s15, s14
    *p2++ = m2 - m3;
 23efd52:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 23efd56:	eee5 7a07 	vfma.f32	s15, s10, s14
    *p2++ = m0 + m1;
 23efd5a:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
 23efd5e:	ed43 7a01 	vstr	s15, [r3, #-4]
    m3 = t4[2] * twR;
 23efd62:	ee65 7a87 	vmul.f32	s15, s11, s14
    *pMid2++ = m0 - m1;
 23efd66:	ee27 7a46 	vnmul.f32	s14, s14, s12
    *pMid2++ = m2 + m3;
 23efd6a:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pMid2++ = m0 - m1;
 23efd6e:	eea5 7aa6 	vfma.f32	s14, s11, s13
    *pMid2++ = m2 + m3;
 23efd72:	ed42 7a01 	vstr	s15, [r2, #-4]
    *pMid2++ = m0 - m1;
 23efd76:	ed02 7a02 	vstr	s14, [r2, #-8]
  for (l = L >> 2; l > 0; l-- )
 23efd7a:	e758      	b.n	23efc2e <arm_cfft_radix8by2_f32+0x2e>

023efd7c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 23efd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23efd80:	ed2d 8b04 	vpush	{d8-d9}
    uint32_t    L  = S->fftLen >> 1;
 23efd84:	8803      	ldrh	r3, [r0, #0]
{
 23efd86:	b08f      	sub	sp, #60	; 0x3c
    uint32_t    L  = S->fftLen >> 1;
 23efd88:	085b      	lsrs	r3, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 23efd8a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    float32_t * p3 = p2 + L;
 23efd8e:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
{
 23efd92:	9101      	str	r1, [sp, #4]
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 23efd94:	0859      	lsrs	r1, r3, #1
 23efd96:	910a      	str	r1, [sp, #40]	; 0x28
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 23efd98:	9901      	ldr	r1, [sp, #4]
 23efd9a:	ed95 7a00 	vldr	s14, [r5]
 23efd9e:	edd1 7a00 	vldr	s15, [r1]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 23efda2:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
 23efda6:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
 23efdaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 23efdae:	ed91 7a01 	vldr	s14, [r1, #4]
 23efdb2:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
 23efdb6:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efdba:	ed96 7a00 	vldr	s14, [r6]
    float32_t * p4 = p3 + L;
 23efdbe:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efdc2:	edd4 4a00 	vldr	s9, [r4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23efdc6:	ee37 5a06 	vadd.f32	s10, s14, s12
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 23efdca:	6842      	ldr	r2, [r0, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23efdcc:	ee35 5a24 	vadd.f32	s10, s10, s9
{
 23efdd0:	4683      	mov	fp, r0
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23efdd2:	4608      	mov	r0, r1
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efdd4:	edd6 3a01 	vldr	s7, [r6, #4]
 23efdd8:	ed94 4a01 	vldr	s8, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23efddc:	ed80 5a00 	vstr	s10, [r0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 23efde0:	ed96 5a01 	vldr	s10, [r6, #4]
 23efde4:	ed94 3a01 	vldr	s6, [r4, #4]
 23efde8:	ee36 5a85 	vadd.f32	s10, s13, s10
 23efdec:	ee35 5a03 	vadd.f32	s10, s10, s6
 23efdf0:	ed80 5a01 	vstr	s10, [r0, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efdf4:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23efdf8:	3108      	adds	r1, #8
 23efdfa:	9106      	str	r1, [sp, #24]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 23efdfc:	4631      	mov	r1, r6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efdfe:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p2++ = t2[0];
 23efe02:	3108      	adds	r1, #8
 23efe04:	910b      	str	r1, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 23efe06:	4629      	mov	r1, r5
    *p2++ = t2[0];
 23efe08:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 23efe0c:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efe10:	ee35 5ac7 	vsub.f32	s10, s11, s14
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 23efe14:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 23efe18:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 23efe1c:	ee37 7a25 	vadd.f32	s14, s14, s11
    *p3++ = t3[0];
 23efe20:	3108      	adds	r1, #8
 23efe22:	910c      	str	r1, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
 23efe24:	4621      	mov	r1, r4
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efe26:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 23efe2a:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 23efe2e:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 23efe32:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 23efe36:	ee37 7a64 	vsub.f32	s14, s14, s9
    *p4++ = t4[0];
 23efe3a:	3108      	adds	r1, #8
 23efe3c:	910d      	str	r1, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 23efe3e:	f102 0108 	add.w	r1, r2, #8
 23efe42:	9107      	str	r1, [sp, #28]
    tw3 += twMod3;
 23efe44:	f102 0110 	add.w	r1, r2, #16
    tw4 += twMod4;
 23efe48:	3218      	adds	r2, #24
 23efe4a:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
 23efe4c:	085a      	lsrs	r2, r3, #1
 23efe4e:	3a02      	subs	r2, #2
    *p2++ = t2[1];
 23efe50:	ed86 5a01 	vstr	s10, [r6, #4]
    tw3 += twMod3;
 23efe54:	9108      	str	r1, [sp, #32]
    *p3++ = t3[0];
 23efe56:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
 23efe5a:	edc5 6a01 	vstr	s13, [r5, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efe5e:	ea4f 0852 	mov.w	r8, r2, lsr #1
    *p4++ = t4[0];
 23efe62:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 23efe66:	ed84 7a01 	vstr	s14, [r4, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efe6a:	9a07      	ldr	r2, [sp, #28]
 23efe6c:	f1a4 0904 	sub.w	r9, r4, #4
 23efe70:	9204      	str	r2, [sp, #16]
 23efe72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23efe74:	9103      	str	r1, [sp, #12]
 23efe76:	9202      	str	r2, [sp, #8]
 23efe78:	9a01      	ldr	r2, [sp, #4]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 23efe7a:	f1a6 0a04 	sub.w	sl, r6, #4
 23efe7e:	f102 0e10 	add.w	lr, r2, #16
    pEnd2 = p3 - 1;
 23efe82:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
 23efe84:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 23efe88:	f106 0110 	add.w	r1, r6, #16
 23efe8c:	f105 0c10 	add.w	ip, r5, #16
 23efe90:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efe94:	f8cd 8014 	str.w	r8, [sp, #20]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 23efe98:	ed1c 7a02 	vldr	s14, [ip, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
 23efe9c:	ed5c 3a01 	vldr	s7, [ip, #-4]
      p1ap3_0 = p1[0] + p3[0];
 23efea0:	ed5e 4a02 	vldr	s9, [lr, #-8]
      p1ap3_1 = p1[1] + p3[1];
 23efea4:	ed1e 6a01 	vldr	s12, [lr, #-4]
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efea8:	ed51 5a02 	vldr	s11, [r1, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efeac:	ed51 7a01 	vldr	s15, [r1, #-4]
      p1sp3_0 = p1[0] - p3[0];
 23efeb0:	ee74 2ac7 	vsub.f32	s5, s9, s14
      p1sp3_1 = p1[1] - p3[1];
 23efeb4:	ee36 5a63 	vsub.f32	s10, s12, s7
      p1ap3_0 = p1[0] + p3[0];
 23efeb8:	ee74 4a87 	vadd.f32	s9, s9, s14
      p1ap3_1 = p1[1] + p3[1];
 23efebc:	ee36 6a23 	vadd.f32	s12, s12, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efec0:	ed12 4a02 	vldr	s8, [r2, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efec4:	ed12 2a01 	vldr	s4, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efec8:	ee35 3a65 	vsub.f32	s6, s10, s11
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efecc:	ee77 6aa2 	vadd.f32	s13, s15, s5
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 23efed0:	ee34 7ae5 	vsub.f32	s14, s9, s11
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 23efed4:	ee76 3a67 	vsub.f32	s7, s12, s15
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 23efed8:	ee35 5a85 	vadd.f32	s10, s11, s10
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 23efedc:	ee72 7ae7 	vsub.f32	s15, s5, s15
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23efee0:	ee75 5aa4 	vadd.f32	s11, s11, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efee4:	9804      	ldr	r0, [sp, #16]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23efee6:	ee76 6ac2 	vsub.f32	s13, s13, s4
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efeea:	3008      	adds	r0, #8
 23efeec:	9004      	str	r0, [sp, #16]
 23efeee:	9803      	ldr	r0, [sp, #12]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23efef0:	ee33 3a04 	vadd.f32	s6, s6, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efef4:	3010      	adds	r0, #16
 23efef6:	9003      	str	r0, [sp, #12]
 23efef8:	9802      	ldr	r0, [sp, #8]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 23efefa:	ee37 7a44 	vsub.f32	s14, s14, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23efefe:	3018      	adds	r0, #24
 23eff00:	9002      	str	r0, [sp, #8]
 23eff02:	9805      	ldr	r0, [sp, #20]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 23eff04:	ee73 3ac2 	vsub.f32	s7, s7, s4
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 23eff08:	ee77 7a82 	vadd.f32	s15, s15, s4
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 23eff0c:	ee35 5a44 	vsub.f32	s10, s10, s8
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23eff10:	ee75 5a84 	vadd.f32	s11, s11, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23eff14:	f1aa 0a08 	sub.w	sl, sl, #8
 23eff18:	3f08      	subs	r7, #8
 23eff1a:	f1a9 0908 	sub.w	r9, r9, #8
 23eff1e:	3b08      	subs	r3, #8
 23eff20:	f10e 0e08 	add.w	lr, lr, #8
 23eff24:	3108      	adds	r1, #8
 23eff26:	f10c 0c08 	add.w	ip, ip, #8
 23eff2a:	3208      	adds	r2, #8
 23eff2c:	2800      	cmp	r0, #0
 23eff2e:	d175      	bne.n	23f001c <arm_cfft_radix8by4_f32+0x2a0>
 23eff30:	9b06      	ldr	r3, [sp, #24]
 23eff32:	2718      	movs	r7, #24
 23eff34:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23eff38:	edc2 5a00 	vstr	s11, [r2]
 23eff3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 23eff3e:	9b07      	ldr	r3, [sp, #28]
 23eff40:	fb07 0708 	mla	r7, r7, r8, r0
 23eff44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23eff46:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 23eff4a:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 23eff4e:	eddc 5a01 	vldr	s11, [ip, #4]
 23eff52:	980c      	ldr	r0, [sp, #48]	; 0x30
 23eff54:	9b08      	ldr	r3, [sp, #32]
 23eff56:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
 23eff5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23eff5c:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 23eff60:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 23eff64:	ee36 6a25 	vadd.f32	s12, s12, s11
 23eff68:	edd8 5a01 	vldr	s11, [r8, #4]
 23eff6c:	ee36 6a25 	vadd.f32	s12, s12, s11
 23eff70:	ed82 6a01 	vstr	s12, [r2, #4]

    /* COL 2 */
    twR = tw2[0];
    twI = tw2[1];
 23eff74:	edd1 4a01 	vldr	s9, [r1, #4]
    twR = tw2[0];
 23eff78:	edd1 5a00 	vldr	s11, [r1]

    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
 23eff7c:	ee24 6a83 	vmul.f32	s12, s9, s6
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 23eff80:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 23eff84:	ee66 6ae4 	vnmul.f32	s13, s13, s9
 23eff88:	eee5 6a83 	vfma.f32	s13, s11, s6
    *p2++ = m0 + m1;
 23eff8c:	ed8c 6a00 	vstr	s12, [ip]
    *p2++ = m2 - m3;
 23eff90:	edcc 6a01 	vstr	s13, [ip, #4]
    /* COL 3 */
    twR = tw3[0];
    twI = tw3[1];
 23eff94:	edd3 5a01 	vldr	s11, [r3, #4]
    twR = tw3[0];
 23eff98:	ed93 6a00 	vldr	s12, [r3]

    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
 23eff9c:	ee65 6aa3 	vmul.f32	s13, s11, s7
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 23effa0:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 23effa4:	ee27 7a65 	vnmul.f32	s14, s14, s11
 23effa8:	eea6 7a23 	vfma.f32	s14, s12, s7
    *p3++ = m0 + m1;
 23effac:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
 23effb0:	ed8e 7a01 	vstr	s14, [lr, #4]
    /* COL 4 */
    twR = tw4[0];
    twI = tw4[1];
 23effb4:	ed97 6a01 	vldr	s12, [r7, #4]
    twR = tw4[0];
 23effb8:	edd7 6a00 	vldr	s13, [r7]

    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
 23effbc:	ee26 7a05 	vmul.f32	s14, s12, s10
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 23effc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 23effc4:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 23effc8:	eee6 7a85 	vfma.f32	s15, s13, s10
    *p4++ = m0 + m1;
 23effcc:	ed88 7a00 	vstr	s14, [r8]
    *p4++ = m2 - m3;
 23effd0:	edc8 7a01 	vstr	s15, [r8, #4]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 23effd4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 23effd8:	f8db 2004 	ldr.w	r2, [fp, #4]
 23effdc:	9801      	ldr	r0, [sp, #4]
 23effde:	2304      	movs	r3, #4
 23effe0:	9102      	str	r1, [sp, #8]
 23effe2:	f7ff fb99 	bl	23ef718 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 23effe6:	9902      	ldr	r1, [sp, #8]
 23effe8:	4630      	mov	r0, r6
 23effea:	f8db 2004 	ldr.w	r2, [fp, #4]
 23effee:	2304      	movs	r3, #4
 23efff0:	9101      	str	r1, [sp, #4]
 23efff2:	f7ff fb91 	bl	23ef718 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 23efff6:	4628      	mov	r0, r5
 23efff8:	f8db 2004 	ldr.w	r2, [fp, #4]
 23efffc:	9901      	ldr	r1, [sp, #4]
 23efffe:	2304      	movs	r3, #4
 23f0000:	f7ff fb8a 	bl	23ef718 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 23f0004:	2304      	movs	r3, #4
 23f0006:	4620      	mov	r0, r4
 23f0008:	f8db 2004 	ldr.w	r2, [fp, #4]
 23f000c:	9901      	ldr	r1, [sp, #4]
}
 23f000e:	b00f      	add	sp, #60	; 0x3c
 23f0010:	ecbd 8b04 	vpop	{d8-d9}
 23f0014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 23f0018:	f7ff bb7e 	b.w	23ef718 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f001c:	ed4e 5a04 	vstr	s11, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 23f0020:	ed51 5a03 	vldr	s11, [r1, #-12]
 23f0024:	ee36 6a25 	vadd.f32	s12, s12, s11
 23f0028:	ed52 5a03 	vldr	s11, [r2, #-12]
 23f002c:	ee36 6a25 	vadd.f32	s12, s12, s11
 23f0030:	ed0e 6a03 	vstr	s12, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 23f0034:	ed99 6a01 	vldr	s12, [r9, #4]
 23f0038:	edda 2a01 	vldr	s5, [sl, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23f003c:	edda 4a02 	vldr	s9, [sl, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 23f0040:	ee72 5a86 	vadd.f32	s11, s5, s12
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 23f0044:	ee72 2ac6 	vsub.f32	s5, s5, s12
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23f0048:	ed99 6a02 	vldr	s12, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23f004c:	ed93 0a02 	vldr	s0, [r3, #8]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23f0050:	ee74 8a86 	vadd.f32	s17, s9, s12
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 23f0054:	ee74 4ac6 	vsub.f32	s9, s9, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23f0058:	ed97 6a02 	vldr	s12, [r7, #8]
 23f005c:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 23f0060:	ee78 1ac6 	vsub.f32	s3, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 23f0064:	ee36 6a28 	vadd.f32	s12, s12, s17
 23f0068:	ee36 6a00 	vadd.f32	s12, s12, s0
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23f006c:	ed93 4a01 	vldr	s8, [r3, #4]
 23f0070:	ed97 8a01 	vldr	s16, [r7, #4]
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 23f0074:	ed8a 6a02 	vstr	s12, [sl, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23f0078:	ed97 6a01 	vldr	s12, [r7, #4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 23f007c:	ee35 2ac8 	vsub.f32	s4, s11, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23f0080:	ee75 5a86 	vadd.f32	s11, s11, s12
 23f0084:	ed93 6a01 	vldr	s12, [r3, #4]
 23f0088:	ee75 5a86 	vadd.f32	s11, s11, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23f008c:	ee34 1ac8 	vsub.f32	s2, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23f0090:	edca 5a01 	vstr	s11, [sl, #4]
      twR = *tw2++;
 23f0094:	9804      	ldr	r0, [sp, #16]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23f0096:	ee31 1a04 	vadd.f32	s2, s2, s8
      twI = *tw2++;
 23f009a:	ed50 5a01 	vldr	s11, [r0, #-4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 23f009e:	ee32 2a44 	vsub.f32	s4, s4, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 23f00a2:	ee34 4a48 	vsub.f32	s8, s8, s16
      twR = *tw2++;
 23f00a6:	ed10 6a02 	vldr	s12, [r0, #-8]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 23f00aa:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
 23f00ae:	ee25 4a83 	vmul.f32	s8, s11, s6
      *p2++ = m0 + m1;
 23f00b2:	eea6 4a26 	vfma.f32	s8, s12, s13
      *p2++ = m2 - m3;
 23f00b6:	ee66 6ae5 	vnmul.f32	s13, s13, s11
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23f00ba:	ee79 0a22 	vadd.f32	s1, s18, s5
      *p2++ = m2 - m3;
 23f00be:	eee6 6a03 	vfma.f32	s13, s12, s6
 23f00c2:	ed41 6a03 	vstr	s13, [r1, #-12]
      m3 = t2[3] * twR;
 23f00c6:	ee61 6a06 	vmul.f32	s13, s2, s12
      *pEnd2-- = m0 - m1;
 23f00ca:	ee26 6a60 	vnmul.f32	s12, s12, s1
      *pEnd2-- = m2 + m3;
 23f00ce:	eee0 6aa5 	vfma.f32	s13, s1, s11
      *pEnd2-- = m0 - m1;
 23f00d2:	eea1 6a25 	vfma.f32	s12, s2, s11
      *p2++ = m0 + m1;
 23f00d6:	ed01 4a04 	vstr	s8, [r1, #-16]
      *pEnd2-- = m0 - m1;
 23f00da:	ed87 6a02 	vstr	s12, [r7, #8]
      *pEnd2-- = m2 + m3;
 23f00de:	edc7 6a01 	vstr	s13, [r7, #4]
      twR = tw3[0];
 23f00e2:	9803      	ldr	r0, [sp, #12]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 23f00e4:	ee71 1ac0 	vsub.f32	s3, s3, s0
      twI = tw3[1];
 23f00e8:	ed50 6a03 	vldr	s13, [r0, #-12]
      twR = tw3[0];
 23f00ec:	ed10 6a04 	vldr	s12, [r0, #-16]
      m1 = t3[1] * twI;
 23f00f0:	ee66 5aa3 	vmul.f32	s11, s13, s7
      *p3++ = m0 + m1;
 23f00f4:	eee6 5a07 	vfma.f32	s11, s12, s14
      *p3++ = m2 - m3;
 23f00f8:	ee27 7a66 	vnmul.f32	s14, s14, s13
 23f00fc:	eea6 7a23 	vfma.f32	s14, s12, s7
 23f0100:	ed0c 7a03 	vstr	s14, [ip, #-12]
      m3 =  t3[3] * twI;
 23f0104:	ee21 7aa6 	vmul.f32	s14, s3, s13
      *pEnd3-- = m0 - m1;
 23f0108:	ee66 6ac2 	vnmul.f32	s13, s13, s4
      *pEnd3-- = m3 - m2;
 23f010c:	eea2 7a46 	vfms.f32	s14, s4, s12
      *pEnd3-- = m0 - m1;
 23f0110:	eee1 6ac6 	vfms.f32	s13, s3, s12
      *p3++ = m0 + m1;
 23f0114:	ed4c 5a04 	vstr	s11, [ip, #-16]
      *pEnd3-- = m0 - m1;
 23f0118:	edc9 6a02 	vstr	s13, [r9, #8]
      *pEnd3-- = m3 - m2;
 23f011c:	ed89 7a01 	vstr	s14, [r9, #4]
      twR = tw4[0];
 23f0120:	9802      	ldr	r0, [sp, #8]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 23f0122:	ee79 2a62 	vsub.f32	s5, s18, s5
      twR = tw4[0];
 23f0126:	ed10 7a06 	vldr	s14, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
 23f012a:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
      m1 = t4[1] * twI;
 23f012e:	ee26 6a85 	vmul.f32	s12, s13, s10
      *p4++ = m0 + m1;
 23f0132:	eea7 6a27 	vfma.f32	s12, s14, s15
      *p4++ = m2 - m3;
 23f0136:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 23f013a:	eee7 7a05 	vfma.f32	s15, s14, s10
 23f013e:	ed42 7a03 	vstr	s15, [r2, #-12]
      m3 = t4[3] * twR;
 23f0142:	ee64 7a87 	vmul.f32	s15, s9, s14
      *pEnd4-- = m0 - m1;
 23f0146:	ee27 7a62 	vnmul.f32	s14, s14, s5
      *pEnd4-- = m2 + m3;
 23f014a:	eee2 7aa6 	vfma.f32	s15, s5, s13
      *pEnd4-- = m0 - m1;
 23f014e:	eea4 7aa6 	vfma.f32	s14, s9, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0152:	9805      	ldr	r0, [sp, #20]
      *p4++ = m0 + m1;
 23f0154:	ed02 6a04 	vstr	s12, [r2, #-16]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0158:	3801      	subs	r0, #1
      *pEnd4-- = m0 - m1;
 23f015a:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
 23f015e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0162:	9005      	str	r0, [sp, #20]
 23f0164:	e698      	b.n	23efe98 <arm_cfft_radix8by4_f32+0x11c>

023f0166 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 23f0166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 23f016a:	2a01      	cmp	r2, #1
{
 23f016c:	4606      	mov	r6, r0
 23f016e:	460c      	mov	r4, r1
 23f0170:	4617      	mov	r7, r2
 23f0172:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 23f0174:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 23f0176:	d03e      	beq.n	23f01f6 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 23f0178:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 23f017c:	d049      	beq.n	23f0212 <arm_cfft_f32+0xac>
 23f017e:	d826      	bhi.n	23f01ce <arm_cfft_f32+0x68>
 23f0180:	2d40      	cmp	r5, #64	; 0x40
 23f0182:	d031      	beq.n	23f01e8 <arm_cfft_f32+0x82>
 23f0184:	d81c      	bhi.n	23f01c0 <arm_cfft_f32+0x5a>
 23f0186:	2d10      	cmp	r5, #16
 23f0188:	d01c      	beq.n	23f01c4 <arm_cfft_f32+0x5e>
 23f018a:	2d20      	cmp	r5, #32
 23f018c:	d041      	beq.n	23f0212 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 23f018e:	f1b8 0f00 	cmp.w	r8, #0
 23f0192:	d004      	beq.n	23f019e <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 23f0194:	4620      	mov	r0, r4
 23f0196:	68b2      	ldr	r2, [r6, #8]
 23f0198:	89b1      	ldrh	r1, [r6, #12]
 23f019a:	f7ff fa9c 	bl	23ef6d6 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 23f019e:	2f01      	cmp	r7, #1
 23f01a0:	d10c      	bne.n	23f01bc <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
 23f01a2:	ee07 5a90 	vmov	s15, r5
 23f01a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 23f01aa:	eef8 7a67 	vcvt.f32.u32	s15, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
 23f01ae:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
 23f01b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
 23f01b4:	42ab      	cmp	r3, r5
 23f01b6:	f104 0408 	add.w	r4, r4, #8
 23f01ba:	d32f      	bcc.n	23f021c <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 23f01bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 23f01c0:	2d80      	cmp	r5, #128	; 0x80
 23f01c2:	d1e4      	bne.n	23f018e <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 23f01c4:	4621      	mov	r1, r4
 23f01c6:	4630      	mov	r0, r6
 23f01c8:	f7ff fd1a 	bl	23efc00 <arm_cfft_radix8by2_f32>
    break;
 23f01cc:	e7df      	b.n	23f018e <arm_cfft_f32+0x28>
  switch (L)
 23f01ce:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 23f01d2:	d01e      	beq.n	23f0212 <arm_cfft_f32+0xac>
 23f01d4:	d805      	bhi.n	23f01e2 <arm_cfft_f32+0x7c>
 23f01d6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f01da:	d005      	beq.n	23f01e8 <arm_cfft_f32+0x82>
 23f01dc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23f01e0:	e7ef      	b.n	23f01c2 <arm_cfft_f32+0x5c>
 23f01e2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 23f01e6:	d1d2      	bne.n	23f018e <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 23f01e8:	2301      	movs	r3, #1
 23f01ea:	4629      	mov	r1, r5
 23f01ec:	4620      	mov	r0, r4
 23f01ee:	6872      	ldr	r2, [r6, #4]
 23f01f0:	f7ff fa92 	bl	23ef718 <arm_radix8_butterfly_f32>
    break;
 23f01f4:	e7cb      	b.n	23f018e <arm_cfft_f32+0x28>
    for (l = 0; l < L; l++)
 23f01f6:	2300      	movs	r3, #0
    pSrc = p1 + 1;
 23f01f8:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
 23f01fa:	42ab      	cmp	r3, r5
 23f01fc:	f102 0208 	add.w	r2, r2, #8
 23f0200:	d2ba      	bcs.n	23f0178 <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
 23f0202:	ed52 7a02 	vldr	s15, [r2, #-8]
 23f0206:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 23f020a:	3301      	adds	r3, #1
      *pSrc = -*pSrc;
 23f020c:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 23f0210:	e7f3      	b.n	23f01fa <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 23f0212:	4621      	mov	r1, r4
 23f0214:	4630      	mov	r0, r6
 23f0216:	f7ff fdb1 	bl	23efd7c <arm_cfft_radix8by4_f32>
    break;
 23f021a:	e7b8      	b.n	23f018e <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
 23f021c:	ed54 7a02 	vldr	s15, [r4, #-8]
 23f0220:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f0224:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
 23f0228:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f022c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
 23f0230:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 23f0232:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
 23f0236:	e7bd      	b.n	23f01b4 <arm_cfft_f32+0x4e>

023f0238 <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 23f0238:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23f0280 <arm_rms_f32+0x48>
{
 23f023c:	b513      	push	{r0, r1, r4, lr}
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 23f023e:	460b      	mov	r3, r1
{
 23f0240:	4614      	mov	r4, r2
 23f0242:	eef0 6a47 	vmov.f32	s13, s14
 23f0246:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23f0248:	b983      	cbnz	r3, 23f026c <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 23f024a:	eddd 7a01 	vldr	s15, [sp, #4]
 23f024e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f0252:	ee87 0a27 	vdiv.f32	s0, s14, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 23f0256:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23f025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f025e:	db0b      	blt.n	23f0278 <arm_rms_f32+0x40>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 23f0260:	f009 fe6c 	bl	23f9f3c <sqrtf>
 23f0264:	ed84 0a00 	vstr	s0, [r4]
}
 23f0268:	b002      	add	sp, #8
 23f026a:	bd10      	pop	{r4, pc}
    in = *pSrc++;
 23f026c:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 23f0270:	3b01      	subs	r3, #1
    sum += ( in * in);
 23f0272:	eea7 7aa7 	vfma.f32	s14, s15, s15
    blkCnt--;
 23f0276:	e7e7      	b.n	23f0248 <arm_rms_f32+0x10>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 23f0278:	edc4 6a00 	vstr	s13, [r4]
}
 23f027c:	e7f4      	b.n	23f0268 <arm_rms_f32+0x30>
 23f027e:	bf00      	nop
 23f0280:	00000000 	.word	0x00000000

023f0284 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 23f0284:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 23f0286:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23f028a:	2401      	movs	r4, #1
  outIndex = 0U;
 23f028c:	2500      	movs	r5, #0
  while (blkCnt > 0U)
 23f028e:	42a1      	cmp	r1, r4
 23f0290:	d103      	bne.n	23f029a <arm_max_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 23f0292:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 23f0296:	601d      	str	r5, [r3, #0]
}
 23f0298:	bd30      	pop	{r4, r5, pc}
    maxVal = *pSrc++;
 23f029a:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out < maxVal)
 23f029e:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f02a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f02a6:	bf54      	ite	pl
 23f02a8:	eeb0 7a67 	vmovpl.f32	s14, s15
 23f02ac:	4625      	movmi	r5, r4
  outIndex = 0U;
 23f02ae:	eef0 7a47 	vmov.f32	s15, s14
 23f02b2:	3401      	adds	r4, #1
 23f02b4:	e7eb      	b.n	23f028e <arm_max_f32+0xa>

023f02b6 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 23f02b6:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 23f02b8:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23f02bc:	2401      	movs	r4, #1
  outIndex = 0U;
 23f02be:	2500      	movs	r5, #0
  while (blkCnt > 0U)
 23f02c0:	42a1      	cmp	r1, r4
 23f02c2:	d103      	bne.n	23f02cc <arm_min_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 23f02c4:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 23f02c8:	601d      	str	r5, [r3, #0]
}
 23f02ca:	bd30      	pop	{r4, r5, pc}
    minVal = *pSrc++;
 23f02cc:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out > minVal)
 23f02d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f02d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f02d8:	bfd4      	ite	le
 23f02da:	eeb0 7a67 	vmovle.f32	s14, s15
 23f02de:	4625      	movgt	r5, r4
  outIndex = 0U;
 23f02e0:	eef0 7a47 	vmov.f32	s15, s14
 23f02e4:	3401      	adds	r4, #1
 23f02e6:	e7eb      	b.n	23f02c0 <arm_min_f32+0xa>

023f02e8 <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f02e8:	0409      	lsls	r1, r1, #16
 23f02ea:	4a06      	ldr	r2, [pc, #24]	; (23f0304 <AUDIO_SI_WriteReg+0x1c>)
 23f02ec:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23f02f0:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f02f4:	4b04      	ldr	r3, [pc, #16]	; (23f0308 <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f02f6:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f02f8:	6811      	ldr	r1, [r2, #0]
 23f02fa:	07c9      	lsls	r1, r1, #31
 23f02fc:	d501      	bpl.n	23f0302 <AUDIO_SI_WriteReg+0x1a>
 23f02fe:	3b01      	subs	r3, #1
 23f0300:	d1fa      	bne.n	23f02f8 <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23f0302:	4770      	bx	lr
 23f0304:	40010000 	.word	0x40010000
 23f0308:	000186a0 	.word	0x000186a0

023f030c <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23f030c:	4a06      	ldr	r2, [pc, #24]	; (23f0328 <AUDIO_SI_ReadReg+0x1c>)
 23f030e:	0200      	lsls	r0, r0, #8
 23f0310:	f040 0010 	orr.w	r0, r0, #16
 23f0314:	6010      	str	r0, [r2, #0]
 23f0316:	4805      	ldr	r0, [pc, #20]	; (23f032c <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23f0318:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23f031a:	06d9      	lsls	r1, r3, #27
 23f031c:	d502      	bpl.n	23f0324 <AUDIO_SI_ReadReg+0x18>
 23f031e:	3801      	subs	r0, #1
 23f0320:	d1fa      	bne.n	23f0318 <AUDIO_SI_ReadReg+0xc>
 23f0322:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23f0324:	0c18      	lsrs	r0, r3, #16
}
 23f0326:	4770      	bx	lr
 23f0328:	40010000 	.word	0x40010000
 23f032c:	000186a0 	.word	0x000186a0

023f0330 <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23f0330:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f0334:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f0336:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23f033a:	461d      	mov	r5, r3
 23f033c:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f033e:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23f0342:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23f0344:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23f0348:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f034a:	bf4c      	ite	mi
 23f034c:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f0350:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f0354:	f015 0410 	ands.w	r4, r5, #16
{
 23f0358:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23f035a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f035e:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f0362:	d059      	beq.n	23f0418 <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23f0364:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f0368:	2012      	movs	r0, #18
 23f036a:	f7ff ffbd 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23f036e:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f0372:	2015      	movs	r0, #21
 23f0374:	f7ff ffb8 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f0378:	201b      	movs	r0, #27
 23f037a:	f7ff ffc7 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23f037e:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f0382:	b281      	uxth	r1, r0
 23f0384:	201b      	movs	r0, #27
 23f0386:	f7ff ffaf 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f038a:	201b      	movs	r0, #27
 23f038c:	f7ff ffbe 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23f0390:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f0394:	b281      	uxth	r1, r0
 23f0396:	201b      	movs	r0, #27
 23f0398:	f7ff ffa6 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f039c:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f03a0:	2018      	movs	r0, #24
 23f03a2:	f7ff ffa1 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f03a6:	20fb      	movs	r0, #251	; 0xfb
 23f03a8:	f7ff ffb0 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23f03ac:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23f03b0:	b281      	uxth	r1, r0
 23f03b2:	20fb      	movs	r0, #251	; 0xfb
 23f03b4:	f7ff ff98 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f03b8:	2011      	movs	r0, #17
 23f03ba:	f7ff ffa7 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23f03be:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f03c2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f03c6:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f03c8:	2011      	movs	r0, #17
 23f03ca:	f7ff ff8d 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f03ce:	2014      	movs	r0, #20
 23f03d0:	f7ff ff9c 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23f03d4:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f03d8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f03dc:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23f03de:	2014      	movs	r0, #20
 23f03e0:	f7ff ff82 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f03e4:	2018      	movs	r0, #24
 23f03e6:	f7ff ff91 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f03ea:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f03ee:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f03f2:	b281      	uxth	r1, r0
 23f03f4:	2018      	movs	r0, #24
 23f03f6:	f7ff ff77 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f03fa:	2117      	movs	r1, #23
 23f03fc:	201b      	movs	r0, #27
 23f03fe:	f7ff ff73 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f0402:	4649      	mov	r1, r9
 23f0404:	2017      	movs	r0, #23
 23f0406:	f7ff ff6f 	bl	23f02e8 <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23f040a:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f040c:	2010      	movs	r0, #16
}
 23f040e:	b002      	add	sp, #8
 23f0410:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f0414:	f7ff bf68 	b.w	23f02e8 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23f0418:	2003      	movs	r0, #3
 23f041a:	f7ff ff77 	bl	23f030c <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f041e:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23f0422:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f0426:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f0428:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f042a:	f7ff ff5d 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f042e:	f015 0a08 	ands.w	sl, r5, #8
 23f0432:	d04a      	beq.n	23f04ca <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23f0434:	2018      	movs	r0, #24
 23f0436:	f7ff ff69 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23f043a:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f043e:	b281      	uxth	r1, r0
 23f0440:	2018      	movs	r0, #24
 23f0442:	f7ff ff51 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f0446:	4620      	mov	r0, r4
 23f0448:	f7ff ff60 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23f044c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f0450:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23f0454:	f041 0103 	orr.w	r1, r1, #3
 23f0458:	4620      	mov	r0, r4
 23f045a:	f7ff ff45 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f045e:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23f0462:	2001      	movs	r0, #1
 23f0464:	f7ff ff40 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f0468:	2002      	movs	r0, #2
 23f046a:	f7ff ff4f 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f046e:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f0472:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f0476:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f047a:	2002      	movs	r0, #2
 23f047c:	f7ff ff34 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f0480:	2110      	movs	r1, #16
 23f0482:	200c      	movs	r0, #12
 23f0484:	f7ff ff30 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f0488:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23f048c:	2001      	movs	r0, #1
 23f048e:	f7ff ff2b 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f0492:	2002      	movs	r0, #2
 23f0494:	f7ff ff3a 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23f0498:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f049c:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f04a0:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23f04a4:	2002      	movs	r0, #2
 23f04a6:	f7ff ff1f 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f04aa:	4620      	mov	r0, r4
 23f04ac:	f7ff ff2e 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23f04b0:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f04b4:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23f04b8:	f041 0103 	orr.w	r1, r1, #3
 23f04bc:	4620      	mov	r0, r4
 23f04be:	f7ff ff13 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f04c2:	2118      	movs	r1, #24
 23f04c4:	200c      	movs	r0, #12
 23f04c6:	f7ff ff0f 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f04ca:	f015 0405 	ands.w	r4, r5, #5
 23f04ce:	d02f      	beq.n	23f0530 <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23f04d0:	2002      	movs	r0, #2
 23f04d2:	f7ff ff1b 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f04d6:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23f04da:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f04de:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f04e0:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f04e2:	f7ff ff01 	bl	23f02e8 <AUDIO_SI_WriteReg>
		DelayUs(5);
 23f04e6:	2005      	movs	r0, #5
 23f04e8:	f00b f9c6 	bl	23fb878 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23f04ec:	07ea      	lsls	r2, r5, #31
 23f04ee:	d57f      	bpl.n	23f05f0 <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23f04f0:	200c      	movs	r0, #12
 23f04f2:	f7ff ff0b 	bl	23f030c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23f04f6:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23f04fa:	b281      	uxth	r1, r0
 23f04fc:	200c      	movs	r0, #12
 23f04fe:	f7ff fef3 	bl	23f02e8 <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23f0502:	2002      	movs	r0, #2
 23f0504:	f7ff ff02 	bl	23f030c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23f0508:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f050c:	b281      	uxth	r1, r0
 23f050e:	2002      	movs	r0, #2
 23f0510:	f7ff feea 	bl	23f02e8 <AUDIO_SI_WriteReg>
			DelayUs(100);
 23f0514:	2064      	movs	r0, #100	; 0x64
 23f0516:	f00b f9af 	bl	23fb878 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23f051a:	2003      	movs	r0, #3
 23f051c:	f7ff fef6 	bl	23f030c <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f0520:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23f0524:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23f0528:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f052a:	2003      	movs	r0, #3
 23f052c:	f7ff fedc 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23f0530:	f015 0f0d 	tst.w	r5, #13
 23f0534:	d002      	beq.n	23f053c <CODEC_Init+0x20c>
		DelayMs(200);
 23f0536:	20c8      	movs	r0, #200	; 0xc8
 23f0538:	f00b f996 	bl	23fb868 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f053c:	f1ba 0f00 	cmp.w	sl, #0
 23f0540:	d020      	beq.n	23f0584 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f0542:	2000      	movs	r0, #0
 23f0544:	f7ff fee2 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23f0548:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f054c:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23f0550:	f041 0103 	orr.w	r1, r1, #3
 23f0554:	2000      	movs	r0, #0
 23f0556:	f7ff fec7 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f055a:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23f055e:	2001      	movs	r0, #1
 23f0560:	f7ff fec2 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f0564:	2002      	movs	r0, #2
 23f0566:	f7ff fed1 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f056a:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f056e:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f0572:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f0576:	2002      	movs	r0, #2
 23f0578:	f7ff feb6 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f057c:	2110      	movs	r1, #16
 23f057e:	200c      	movs	r0, #12
 23f0580:	f7ff feb2 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f0584:	b16c      	cbz	r4, 23f05a2 <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23f0586:	2000      	movs	r0, #0
 23f0588:	f7ff fec0 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23f058c:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23f0590:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f0594:	b281      	uxth	r1, r0
 23f0596:	2000      	movs	r0, #0
 23f0598:	f7ff fea6 	bl	23f02e8 <AUDIO_SI_WriteReg>
		DelayUs(50);
 23f059c:	2032      	movs	r0, #50	; 0x32
 23f059e:	f00b f96b 	bl	23fb878 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f05a2:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f05a6:	2018      	movs	r0, #24
 23f05a8:	f7ff fe9e 	bl	23f02e8 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23f05ac:	f246 3120 	movw	r1, #25376	; 0x6320
 23f05b0:	2011      	movs	r0, #17
 23f05b2:	f7ff fe99 	bl	23f02e8 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23f05b6:	f246 3120 	movw	r1, #25376	; 0x6320
 23f05ba:	2014      	movs	r0, #20
 23f05bc:	f7ff fe94 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f05c0:	b364      	cbz	r4, 23f061c <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f05c2:	2012      	movs	r0, #18
 23f05c4:	f7ff fea2 	bl	23f030c <AUDIO_SI_ReadReg>
 23f05c8:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f05ca:	2015      	movs	r0, #21
 23f05cc:	f7ff fe9e 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23f05d0:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23f05d4:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23f05d8:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23f05da:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23f05de:	2e09      	cmp	r6, #9
 23f05e0:	d80e      	bhi.n	23f0600 <CODEC_Init+0x2d0>
 23f05e2:	e8df f006 	tbb	[pc, r6]
 23f05e6:	c0bb      	.short	0xc0bb
 23f05e8:	0d0db60d 	.word	0x0d0db60d
 23f05ec:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23f05f0:	2003      	movs	r0, #3
 23f05f2:	f7ff fe8b 	bl	23f030c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f05f6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f05fa:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23f05fe:	e794      	b.n	23f052a <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f0600:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f0604:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f0608:	2012      	movs	r0, #18
 23f060a:	f7ff fe6d 	bl	23f02e8 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23f060e:	2015      	movs	r0, #21
 23f0610:	4651      	mov	r1, sl
 23f0612:	f7ff fe69 	bl	23f02e8 <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23f0616:	2032      	movs	r0, #50	; 0x32
 23f0618:	f00b f926 	bl	23fb868 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f061c:	2117      	movs	r1, #23
 23f061e:	201b      	movs	r0, #27
 23f0620:	f7ff fe62 	bl	23f02e8 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f0624:	4649      	mov	r1, r9
 23f0626:	2017      	movs	r0, #23
 23f0628:	f7ff fe5e 	bl	23f02e8 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f062c:	20fb      	movs	r0, #251	; 0xfb
 23f062e:	f7ff fe6d 	bl	23f030c <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23f0632:	f020 0106 	bic.w	r1, r0, #6
 23f0636:	f041 0108 	orr.w	r1, r1, #8
 23f063a:	b289      	uxth	r1, r1
 23f063c:	20fb      	movs	r0, #251	; 0xfb
 23f063e:	f7ff fe53 	bl	23f02e8 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23f0642:	20fd      	movs	r0, #253	; 0xfd
 23f0644:	f7ff fe62 	bl	23f030c <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23f0648:	f020 0106 	bic.w	r1, r0, #6
 23f064c:	f041 0108 	orr.w	r1, r1, #8
 23f0650:	b289      	uxth	r1, r1
 23f0652:	20fd      	movs	r0, #253	; 0xfd
 23f0654:	f7ff fe48 	bl	23f02e8 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23f0658:	2027      	movs	r0, #39	; 0x27
 23f065a:	f7ff fe57 	bl	23f030c <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23f065e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23f0662:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23f0664:	b90f      	cbnz	r7, 23f066a <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23f0666:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23f066a:	2027      	movs	r0, #39	; 0x27
 23f066c:	f7ff fe3c 	bl	23f02e8 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23f0670:	20fa      	movs	r0, #250	; 0xfa
 23f0672:	f7ff fe4b 	bl	23f030c <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23f0676:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23f067a:	0540      	lsls	r0, r0, #21
 23f067c:	0d40      	lsrs	r0, r0, #21
 23f067e:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23f0682:	20fa      	movs	r0, #250	; 0xfa
 23f0684:	9101      	str	r1, [sp, #4]
 23f0686:	f7ff fe2f 	bl	23f02e8 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23f068a:	20fc      	movs	r0, #252	; 0xfc
 23f068c:	9901      	ldr	r1, [sp, #4]
 23f068e:	f7ff fe2b 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23f0692:	07ab      	lsls	r3, r5, #30
 23f0694:	d540      	bpl.n	23f0718 <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f0696:	2011      	movs	r0, #17
 23f0698:	f7ff fe38 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23f069c:	4c34      	ldr	r4, [pc, #208]	; (23f0770 <CODEC_Init+0x440>)
 23f069e:	4020      	ands	r0, r4
 23f06a0:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f06a4:	f041 0119 	orr.w	r1, r1, #25
 23f06a8:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f06aa:	2011      	movs	r0, #17
 23f06ac:	f7ff fe1c 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f06b0:	2012      	movs	r0, #18
 23f06b2:	f7ff fe2b 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f06b6:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f06ba:	b281      	uxth	r1, r0
 23f06bc:	2012      	movs	r0, #18
 23f06be:	f7ff fe13 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f06c2:	2014      	movs	r0, #20
 23f06c4:	f7ff fe22 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23f06c8:	4020      	ands	r0, r4
 23f06ca:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f06ce:	f041 0118 	orr.w	r1, r1, #24
 23f06d2:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23f06d4:	2014      	movs	r0, #20
 23f06d6:	f7ff fe07 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f06da:	2015      	movs	r0, #21
 23f06dc:	f7ff fe16 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f06e0:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23f06e4:	b281      	uxth	r1, r0
 23f06e6:	2015      	movs	r0, #21
 23f06e8:	f7ff fdfe 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f06ec:	2017      	movs	r0, #23
 23f06ee:	f7ff fe0d 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23f06f2:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23f06f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23f06fa:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f06fc:	2017      	movs	r0, #23
 23f06fe:	f7ff fdf3 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f0702:	2018      	movs	r0, #24
 23f0704:	f7ff fe02 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f0708:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f070c:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f0710:	b281      	uxth	r1, r0
 23f0712:	2018      	movs	r0, #24
 23f0714:	f7ff fde8 	bl	23f02e8 <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23f0718:	f026 0608 	bic.w	r6, r6, #8
 23f071c:	2e01      	cmp	r6, #1
 23f071e:	d113      	bne.n	23f0748 <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f0720:	2017      	movs	r0, #23
 23f0722:	f7ff fdf3 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23f0726:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23f072a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23f072e:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f0730:	2017      	movs	r0, #23
 23f0732:	f7ff fdd9 	bl	23f02e8 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f0736:	201b      	movs	r0, #27
 23f0738:	f7ff fde8 	bl	23f030c <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23f073c:	f020 000c 	bic.w	r0, r0, #12
 23f0740:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f0742:	201b      	movs	r0, #27
 23f0744:	f7ff fdd0 	bl	23f02e8 <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23f0748:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f074c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23f0750:	e65c      	b.n	23f040c <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f0752:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f0756:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23f075a:	e755      	b.n	23f0608 <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f075c:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f0760:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23f0764:	e750      	b.n	23f0608 <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f0766:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f076a:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23f076e:	e74b      	b.n	23f0608 <CODEC_Init+0x2d8>
 23f0770:	ffffdffe 	.word	0xffffdffe

023f0774 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23f0774:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f0776:	4a05      	ldr	r2, [pc, #20]	; (23f078c <sp_get_ready_rx_page+0x18>)
 23f0778:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23f077c:	434b      	muls	r3, r1
 23f077e:	18d1      	adds	r1, r2, r3
 23f0780:	5cd3      	ldrb	r3, [r2, r3]
 23f0782:	b90b      	cbnz	r3, 23f0788 <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23f0784:	6848      	ldr	r0, [r1, #4]
 23f0786:	4770      	bx	lr
		return NULL;
 23f0788:	2000      	movs	r0, #0
	}
}
 23f078a:	4770      	bx	lr
 23f078c:	1007a580 	.word	0x1007a580

023f0790 <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23f0790:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f0792:	4d0c      	ldr	r5, [pc, #48]	; (23f07c4 <sp_read_rx_page+0x34>)
{
 23f0794:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f0796:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23f079a:	b128      	cbz	r0, 23f07a8 <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23f079c:	230c      	movs	r3, #12
 23f079e:	fb03 5304 	mla	r3, r3, r4, r5
 23f07a2:	6859      	ldr	r1, [r3, #4]
 23f07a4:	f00a febb 	bl	23fb51e <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23f07a8:	230c      	movs	r3, #12
 23f07aa:	2201      	movs	r2, #1
 23f07ac:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23f07ae:	4414      	add	r4, r2
 23f07b0:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23f07b2:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23f07b4:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23f07b6:	bf0a      	itet	eq
 23f07b8:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23f07ba:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23f07be:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23f07c2:	bd38      	pop	{r3, r4, r5, pc}
 23f07c4:	1007a580 	.word	0x1007a580

023f07c8 <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23f07c8:	4a09      	ldr	r2, [pc, #36]	; (23f07f0 <sp_release_rx_page+0x28>)
 23f07ca:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23f07ce:	b969      	cbnz	r1, 23f07ec <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23f07d0:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f07d2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23f07d6:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23f07d8:	3301      	adds	r3, #1
 23f07da:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f07dc:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23f07de:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f07e0:	d002      	beq.n	23f07e8 <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23f07e2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23f07e6:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23f07e8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23f07ec:	4770      	bx	lr
 23f07ee:	bf00      	nop
 23f07f0:	1007a580 	.word	0x1007a580

023f07f4 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23f07f4:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f07f6:	4b08      	ldr	r3, [pc, #32]	; (23f0818 <sp_get_free_rx_page+0x24>)
 23f07f8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23f07fc:	434a      	muls	r2, r1
 23f07fe:	1899      	adds	r1, r3, r2
 23f0800:	5c9a      	ldrb	r2, [r3, r2]
 23f0802:	b122      	cbz	r2, 23f080e <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23f0804:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23f0806:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23f0808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23f080c:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23f080e:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23f0810:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23f0812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23f0816:	4770      	bx	lr
 23f0818:	1007a580 	.word	0x1007a580

023f081c <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23f081c:	4b06      	ldr	r3, [pc, #24]	; (23f0838 <sp_get_free_rx_length+0x1c>)
 23f081e:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23f0822:	b10a      	cbz	r2, 23f0828 <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23f0824:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23f0826:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23f0828:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f082a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23f082e:	fb01 3302 	mla	r3, r1, r2, r3
 23f0832:	6898      	ldr	r0, [r3, #8]
	}
}
 23f0834:	4770      	bx	lr
 23f0836:	bf00      	nop
 23f0838:	1007a580 	.word	0x1007a580

023f083c <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23f083c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f083e:	4b21      	ldr	r3, [pc, #132]	; (23f08c4 <sp_rx_complete+0x88>)
 23f0840:	4604      	mov	r4, r0
 23f0842:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f0844:	03d8      	lsls	r0, r3, #15
 23f0846:	d51a      	bpl.n	23f087e <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23f0848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23f084a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f084c:	06d9      	lsls	r1, r3, #27
 23f084e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23f0852:	d008      	beq.n	23f0866 <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f0854:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f0858:	3b01      	subs	r3, #1
 23f085a:	4413      	add	r3, r2
 23f085c:	f023 031f 	bic.w	r3, r3, #31
 23f0860:	3320      	adds	r3, #32
 23f0862:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f0864:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f0866:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23f086a:	4816      	ldr	r0, [pc, #88]	; (23f08c4 <sp_rx_complete+0x88>)
 23f086c:	4413      	add	r3, r2
    while (op_size > 0) {
 23f086e:	2a00      	cmp	r2, #0
 23f0870:	eba3 0102 	sub.w	r1, r3, r2
 23f0874:	dc21      	bgt.n	23f08ba <sp_rx_complete+0x7e>
 23f0876:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f087a:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23f087e:	7861      	ldrb	r1, [r4, #1]
 23f0880:	4b11      	ldr	r3, [pc, #68]	; (23f08c8 <sp_rx_complete+0x8c>)
 23f0882:	7820      	ldrb	r0, [r4, #0]
 23f0884:	4798      	blx	r3

	sp_release_rx_page();
 23f0886:	f7ff ff9f 	bl	23f07c8 <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23f088a:	f7ff ffb3 	bl	23f07f4 <sp_get_free_rx_page>
 23f088e:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23f0890:	f7ff ffc4 	bl	23f081c <sp_get_free_rx_length>
 23f0894:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23f0896:	9a01      	ldr	r2, [sp, #4]
 23f0898:	7861      	ldrb	r1, [r4, #1]
 23f089a:	7820      	ldrb	r0, [r4, #0]
 23f089c:	4b0b      	ldr	r3, [pc, #44]	; (23f08cc <sp_rx_complete+0x90>)
 23f089e:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23f08a0:	7861      	ldrb	r1, [r4, #1]
 23f08a2:	7820      	ldrb	r0, [r4, #0]
 23f08a4:	08aa      	lsrs	r2, r5, #2
 23f08a6:	4b0a      	ldr	r3, [pc, #40]	; (23f08d0 <sp_rx_complete+0x94>)
 23f08a8:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f08aa:	2201      	movs	r2, #1
 23f08ac:	7861      	ldrb	r1, [r4, #1]
 23f08ae:	7820      	ldrb	r0, [r4, #0]
 23f08b0:	4b08      	ldr	r3, [pc, #32]	; (23f08d4 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23f08b2:	b003      	add	sp, #12
 23f08b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f08b8:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23f08ba:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f08be:	3a20      	subs	r2, #32
 23f08c0:	e7d5      	b.n	23f086e <sp_rx_complete+0x32>
 23f08c2:	bf00      	nop
 23f08c4:	e000ed00 	.word	0xe000ed00
 23f08c8:	1010bda5 	.word	0x1010bda5
 23f08cc:	1010c2b9 	.word	0x1010c2b9
 23f08d0:	1010c309 	.word	0x1010c309
 23f08d4:	1010bf91 	.word	0x1010bf91

023f08d8 <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23f08d8:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23f08dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23f08de:	d01c      	beq.n	23f091a <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23f08e0:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23f08e4:	bf14      	ite	ne
 23f08e6:	2505      	movne	r5, #5
 23f08e8:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f08ea:	4b37      	ldr	r3, [pc, #220]	; (23f09c8 <dmic_setup+0xf0>)
 23f08ec:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f08ee:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f08f2:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23f08f4:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23f08f8:	2201      	movs	r2, #1
 23f08fa:	4608      	mov	r0, r1
 23f08fc:	4f33      	ldr	r7, [pc, #204]	; (23f09cc <dmic_setup+0xf4>)
 23f08fe:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23f0900:	4933      	ldr	r1, [pc, #204]	; (23f09d0 <dmic_setup+0xf8>)
 23f0902:	2201      	movs	r2, #1
 23f0904:	4608      	mov	r0, r1
 23f0906:	47b8      	blx	r7
 23f0908:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f090a:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23f090c:	2b04      	cmp	r3, #4
 23f090e:	d807      	bhi.n	23f0920 <dmic_setup+0x48>
 23f0910:	e8df f003 	tbb	[pc, r3]
 23f0914:	06560605 	.word	0x06560605
 23f0918:	58          	.byte	0x58
 23f0919:	00          	.byte	0x00
	switch(sampleRate) {
 23f091a:	2507      	movs	r5, #7
 23f091c:	e7e5      	b.n	23f08ea <dmic_setup+0x12>
			div = 12;
 23f091e:	260c      	movs	r6, #12
	PLL_Div(div);
 23f0920:	4630      	mov	r0, r6
 23f0922:	f008 fe43 	bl	23f95ac <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23f0926:	2302      	movs	r3, #2
 23f0928:	4622      	mov	r2, r4
 23f092a:	4628      	mov	r0, r5
 23f092c:	2100      	movs	r1, #0
 23f092e:	f7ff fcff 	bl	23f0330 <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23f0932:	4d28      	ldr	r5, [pc, #160]	; (23f09d4 <dmic_setup+0xfc>)
 23f0934:	2100      	movs	r1, #0
 23f0936:	2021      	movs	r0, #33	; 0x21
 23f0938:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23f093a:	2100      	movs	r1, #0
 23f093c:	2022      	movs	r0, #34	; 0x22
 23f093e:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23f0940:	4d25      	ldr	r5, [pc, #148]	; (23f09d8 <dmic_setup+0x100>)
 23f0942:	210c      	movs	r1, #12
 23f0944:	2021      	movs	r0, #33	; 0x21
 23f0946:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23f0948:	210c      	movs	r1, #12
 23f094a:	2022      	movs	r0, #34	; 0x22
 23f094c:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f094e:	4b23      	ldr	r3, [pc, #140]	; (23f09dc <dmic_setup+0x104>)
 23f0950:	4a23      	ldr	r2, [pc, #140]	; (23f09e0 <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f0952:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f0954:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23f0956:	2280      	movs	r2, #128	; 0x80
 23f0958:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23f095a:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f095c:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f0960:	4920      	ldr	r1, [pc, #128]	; (23f09e4 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23f0962:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23f0964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f0968:	3201      	adds	r2, #1
 23f096a:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f096c:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f0970:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f0972:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23f0976:	f103 030c 	add.w	r3, r3, #12
 23f097a:	d1f5      	bne.n	23f0968 <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f097c:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23f097e:	4d1a      	ldr	r5, [pc, #104]	; (23f09e8 <dmic_setup+0x110>)
 23f0980:	4b1a      	ldr	r3, [pc, #104]	; (23f09ec <dmic_setup+0x114>)
 23f0982:	4628      	mov	r0, r5
 23f0984:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f0986:	4629      	mov	r1, r5
 23f0988:	4819      	ldr	r0, [pc, #100]	; (23f09f0 <dmic_setup+0x118>)
 23f098a:	4b1a      	ldr	r3, [pc, #104]	; (23f09f4 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23f098c:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f098e:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f0990:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23f0992:	2101      	movs	r1, #1
 23f0994:	4816      	ldr	r0, [pc, #88]	; (23f09f0 <dmic_setup+0x118>)
 23f0996:	4b18      	ldr	r3, [pc, #96]	; (23f09f8 <dmic_setup+0x120>)
 23f0998:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23f099a:	2101      	movs	r1, #1
 23f099c:	4b17      	ldr	r3, [pc, #92]	; (23f09fc <dmic_setup+0x124>)
 23f099e:	4814      	ldr	r0, [pc, #80]	; (23f09f0 <dmic_setup+0x118>)
 23f09a0:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23f09a2:	f7ff ff27 	bl	23f07f4 <sp_get_free_rx_page>
 23f09a6:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23f09a8:	f7ff ff38 	bl	23f081c <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23f09ac:	4a14      	ldr	r2, [pc, #80]	; (23f0a00 <dmic_setup+0x128>)
 23f09ae:	e9cd 4000 	strd	r4, r0, [sp]
 23f09b2:	4611      	mov	r1, r2
 23f09b4:	4630      	mov	r0, r6
 23f09b6:	4b13      	ldr	r3, [pc, #76]	; (23f0a04 <dmic_setup+0x12c>)
 23f09b8:	4c13      	ldr	r4, [pc, #76]	; (23f0a08 <dmic_setup+0x130>)
 23f09ba:	47a0      	blx	r4

    // Particle.connect();
}
 23f09bc:	b003      	add	sp, #12
 23f09be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23f09c0:	2618      	movs	r6, #24
			break;
 23f09c2:	e7ad      	b.n	23f0920 <dmic_setup+0x48>
			div = 48;
 23f09c4:	2630      	movs	r6, #48	; 0x30
			break;
 23f09c6:	e7ab      	b.n	23f0920 <dmic_setup+0x48>
 23f09c8:	023f95c5 	.word	0x023f95c5
 23f09cc:	10110039 	.word	0x10110039
 23f09d0:	40080000 	.word	0x40080000
 23f09d4:	1010cf99 	.word	0x1010cf99
 23f09d8:	1010cfb9 	.word	0x1010cfb9
 23f09dc:	1007a580 	.word	0x1007a580
 23f09e0:	1007a500 	.word	0x1007a500
 23f09e4:	10079c80 	.word	0x10079c80
 23f09e8:	1007a4d4 	.word	0x1007a4d4
 23f09ec:	023f9679 	.word	0x023f9679
 23f09f0:	40010800 	.word	0x40010800
 23f09f4:	023f96cd 	.word	0x023f96cd
 23f09f8:	023f976d 	.word	0x023f976d
 23f09fc:	023f96a9 	.word	0x023f96a9
 23f0a00:	1007a480 	.word	0x1007a480
 23f0a04:	023f083d 	.word	0x023f083d
 23f0a08:	023f9791 	.word	0x023f9791

023f0a0c <dmic_flush>:


void dmic_flush() {
 23f0a0c:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23f0a0e:	f7ff feb1 	bl	23f0774 <sp_get_ready_rx_page>
 23f0a12:	b900      	cbnz	r0, 23f0a16 <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23f0a14:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23f0a16:	2100      	movs	r1, #0
 23f0a18:	4608      	mov	r0, r1
 23f0a1a:	f7ff feb9 	bl	23f0790 <sp_read_rx_page>
 23f0a1e:	e7f6      	b.n	23f0a0e <dmic_flush+0x2>

023f0a20 <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23f0a20:	f7ff bea8 	b.w	23f0774 <sp_get_ready_rx_page>

023f0a24 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23f0a24:	f7ff beb4 	b.w	23f0790 <sp_read_rx_page>

023f0a28 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f0a28:	4770      	bx	lr
	...

023f0a2c <_ZN2ei5numpy19dequantize_zero_oneEh>:
    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
        return quantized_values_one_zero[value];
 23f0a2c:	4b02      	ldr	r3, [pc, #8]	; (23f0a38 <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
 23f0a2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
 23f0a32:	ed90 0a00 	vldr	s0, [r0]
 23f0a36:	4770      	bx	lr
 23f0a38:	023fcc88 	.word	0x023fcc88

023f0a3c <_ZNSt17_Function_handlerIFvPvjEZL27microphone_inference_recordvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23f0a3c:	4770      	bx	lr
	...

023f0a40 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 23f0a40:	fefb 7a40 	vrintm.f32	s15, s0
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
        if (v > floor(v) && v - floor(v) < 0.001f) {
 23f0a44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23f0a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0a4c:	dd08      	ble.n	23f0a60 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x20>
 23f0a4e:	ee30 7a67 	vsub.f32	s14, s0, s15
 23f0a52:	eddf 6a06 	vldr	s13, [pc, #24]	; 23f0a6c <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x2c>
 23f0a56:	eeb4 7ae6 	vcmpe.f32	s14, s13
 23f0a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0a5e:	d401      	bmi.n	23f0a64 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x24>
  { return __builtin_ceilf(__x); }
 23f0a60:	fefa 7a40 	vrintp.f32	s15, s0
        }
        else {
            v = (ceil(v));
        }
        return v;
    }
 23f0a64:	eeb0 0a67 	vmov.f32	s0, s15
 23f0a68:	4770      	bx	lr
 23f0a6a:	bf00      	nop
 23f0a6c:	3a83126f 	.word	0x3a83126f

023f0a70 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
        const float noise = static_cast<float>(noise_floor_db * -1);
 23f0a70:	4249      	negs	r1, r1
 23f0a72:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0a76:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
 23f0a7a:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23f0a7e:	e9d9 8900 	ldrd	r8, r9, [r9]
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0a82:	ed2d 8b06 	vpush	{d8-d10}
        const float noise = static_cast<float>(noise_floor_db * -1);
 23f0a86:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 23f0a8a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 23f0a8e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 23f0a92:	ee78 7a27 	vadd.f32	s15, s16, s15
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0a96:	4604      	mov	r4, r0
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 23f0a98:	ee89 aaa7 	vdiv.f32	s20, s19, s15
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23f0a9c:	2500      	movs	r5, #0
                f = 1e-30;
 23f0a9e:	ed9f 9a32 	vldr	s18, [pc, #200]	; 23f0b68 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
    {
        int e;
        float f = frexpf(fabsf(a), &e);
        float y = 1.23149591368684f;
        y *= f;
        y += -4.11852516267426f;
 23f0aa2:	eddf aa32 	vldr	s21, [pc, #200]	; 23f0b6c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0aa6:	b082      	sub	sp, #8
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23f0aa8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23f0aac:	4353      	muls	r3, r2
 23f0aae:	42ab      	cmp	r3, r5
 23f0ab0:	d952      	bls.n	23f0b58 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe8>
            float f = features_matrix->buffer[ix];
 23f0ab2:	6826      	ldr	r6, [r4, #0]
 23f0ab4:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 23f0ab8:	edd6 8a00 	vldr	s17, [r6]
            if (f < 1e-30) {
 23f0abc:	ee18 0a90 	vmov	r0, s17
 23f0ac0:	f7fb feda 	bl	23ec878 <__aeabi_f2d>
 23f0ac4:	4642      	mov	r2, r8
 23f0ac6:	464b      	mov	r3, r9
 23f0ac8:	f7fc f9a0 	bl	23ece0c <__aeabi_dcmplt>
                f = 1e-30;
 23f0acc:	2800      	cmp	r0, #0
 23f0ace:	fe48 8a89 	vseleq.f32	s17, s17, s18
        float f = frexpf(fabsf(a), &e);
 23f0ad2:	eeb0 0ae8 	vabs.f32	s0, s17
 23f0ad6:	a801      	add	r0, sp, #4
 23f0ad8:	f009 f98a 	bl	23f9df0 <frexpf>
        y += -4.11852516267426f;
 23f0adc:	eddf 7a24 	vldr	s15, [pc, #144]	; 23f0b70 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
        y *= f;
        y += 6.02197014179219f;
        y *= f;
        y += -3.13396450166353f;
 23f0ae0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 23f0b74 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
        y += -4.11852516267426f;
 23f0ae4:	eee0 7a2a 	vfma.f32	s15, s0, s21
        y += 6.02197014179219f;
 23f0ae8:	eddf 6a23 	vldr	s13, [pc, #140]	; 23f0b78 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
 23f0aec:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
 23f0af0:	eef0 7a47 	vmov.f32	s15, s14
        y += e;
 23f0af4:	ed9d 7a01 	vldr	s14, [sp, #4]
        y += -3.13396450166353f;
 23f0af8:	eee0 7a26 	vfma.f32	s15, s0, s13
        y += e;
 23f0afc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 23f0b00:	ee37 7a27 	vadd.f32	s14, s14, s15
     * @param a Input number
     * @returns Log10 value of a
     */
    __attribute__((always_inline)) static inline float log10(float a)
    {
        return numpy::log2(a) * 0.3010299956639812f;
 23f0b04:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23f0b7c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
 23f0b08:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 23f0b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 23f0b10:	eef0 7a48 	vmov.f32	s15, s16
 23f0b14:	eee7 7a26 	vfma.f32	s15, s14, s13
            # clip to 2**8
            mfe = np.clip(mfe, 0, 255)
            mfe = np.float32(mfe / 2**8)
            */

            f = roundf(f*256)/256;
 23f0b18:	ed9f 7a19 	vldr	s14, [pc, #100]	; 23f0b80 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x110>
            f *= noise_scale;
 23f0b1c:	ee6a 7a27 	vmul.f32	s15, s20, s15
            f = roundf(f*256)/256;
 23f0b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f0b24:	ed9f 7a17 	vldr	s14, [pc, #92]	; 23f0b84 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x114>
 23f0b28:	fef8 7a67 	vrinta.f32	s15, s15
 23f0b2c:	ee67 7a87 	vmul.f32	s15, s15, s14

            if (f < 0.0f) f = 0.0f;
 23f0b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f0b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0b38:	d40b      	bmi.n	23f0b52 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe2>
            else if (f > 1.0f) f = 1.0f;
 23f0b3a:	eef4 7a69 	vcmp.f32	s15, s19
 23f0b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23f0b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0b46:	fe77 7a27 	vselgt.f32	s15, s14, s15
            features_matrix->buffer[ix] = f;
 23f0b4a:	edc6 7a00 	vstr	s15, [r6]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23f0b4e:	3501      	adds	r5, #1
 23f0b50:	e7aa      	b.n	23f0aa8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x38>
            if (f < 0.0f) f = 0.0f;
 23f0b52:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23f0b88 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x118>
 23f0b56:	e7f8      	b.n	23f0b4a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xda>
        }

        return EIDSP_OK;
    }
 23f0b58:	2000      	movs	r0, #0
 23f0b5a:	b002      	add	sp, #8
 23f0b5c:	ecbd 8b06 	vpop	{d8-d10}
 23f0b60:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 23f0b64:	f3af 8000 	nop.w
 23f0b68:	0da24260 	.word	0x0da24260
 23f0b6c:	3f9da1a8 	.word	0x3f9da1a8
 23f0b70:	c083caf5 	.word	0xc083caf5
 23f0b74:	c04892e0 	.word	0xc04892e0
 23f0b78:	40c0b3fb 	.word	0x40c0b3fb
 23f0b7c:	3e9a209b 	.word	0x3e9a209b
 23f0b80:	43800000 	.word	0x43800000
 23f0b84:	3b800000 	.word	0x3b800000
 23f0b88:	00000000 	.word	0x00000000
 23f0b8c:	feebc2a0 	.word	0xfeebc2a0
 23f0b90:	39b4484b 	.word	0x39b4484b

023f0b94 <_ZL32microphone_audio_signal_get_datajjPf>:

/**
 * Get raw audio signal data
 */
static int microphone_audio_signal_get_data(size_t offset, size_t length, float *out_ptr)
{
 23f0b94:	b510      	push	{r4, lr}
 23f0b96:	460c      	mov	r4, r1
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
 23f0b98:	4b04      	ldr	r3, [pc, #16]	; (23f0bac <_ZL32microphone_audio_signal_get_datajjPf+0x18>)
{
 23f0b9a:	4611      	mov	r1, r2
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
 23f0b9c:	681b      	ldr	r3, [r3, #0]
        arm_q15_to_float((q15_t *)input, output, length);
 23f0b9e:	4622      	mov	r2, r4
 23f0ba0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 23f0ba4:	f7fe fc9e 	bl	23ef4e4 <arm_q15_to_float>

    return 0;
}
 23f0ba8:	2000      	movs	r0, #0
 23f0baa:	bd10      	pop	{r4, pc}
 23f0bac:	1007a5c8 	.word	0x1007a5c8

023f0bb0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 23f0bb0:	b508      	push	{r3, lr}
	assert(ptr);
 23f0bb2:	b928      	cbnz	r0, 23f0bc0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
 23f0bb4:	215a      	movs	r1, #90	; 0x5a
 23f0bb6:	4b06      	ldr	r3, [pc, #24]	; (23f0bd0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
 23f0bb8:	4a06      	ldr	r2, [pc, #24]	; (23f0bd4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
 23f0bba:	4807      	ldr	r0, [pc, #28]	; (23f0bd8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
 23f0bbc:	f006 fc48 	bl	23f7450 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 23f0bc0:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
 23f0bc4:	1ac0      	subs	r0, r0, r3
}
 23f0bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
 23f0bca:	f003 b8ea 	b.w	23f3da2 <_Z7ei_freePv>
 23f0bce:	bf00      	nop
 23f0bd0:	023ff57c 	.word	0x023ff57c
 23f0bd4:	023fc4ce 	.word	0x023fc4ce
 23f0bd8:	023fc4f7 	.word	0x023fc4f7

023f0bdc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
 23f0bdc:	1e43      	subs	r3, r0, #1
 23f0bde:	4203      	tst	r3, r0
{
 23f0be0:	b510      	push	{r4, lr}
 23f0be2:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
 23f0be4:	d005      	beq.n	23f0bf2 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
 23f0be6:	2137      	movs	r1, #55	; 0x37
 23f0be8:	4b0c      	ldr	r3, [pc, #48]	; (23f0c1c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
 23f0bea:	4a0d      	ldr	r2, [pc, #52]	; (23f0c20 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
 23f0bec:	480d      	ldr	r0, [pc, #52]	; (23f0c24 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
 23f0bee:	f006 fc2f 	bl	23f7450 <__assert_func>
	if(align && size)
 23f0bf2:	b910      	cbnz	r0, 23f0bfa <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
 23f0bf4:	2400      	movs	r4, #0
}
 23f0bf6:	4620      	mov	r0, r4
 23f0bf8:	bd10      	pop	{r4, pc}
	if(align && size)
 23f0bfa:	2900      	cmp	r1, #0
 23f0bfc:	d0fa      	beq.n	23f0bf4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
 23f0bfe:	1c48      	adds	r0, r1, #1
 23f0c00:	4420      	add	r0, r4
 23f0c02:	2101      	movs	r1, #1
 23f0c04:	f003 f8cb 	bl	23f3d9e <_Z9ei_callocjj>
		if(p)
 23f0c08:	2800      	cmp	r0, #0
 23f0c0a:	d0f3      	beq.n	23f0bf4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 23f0c0c:	1c63      	adds	r3, r4, #1
 23f0c0e:	4403      	add	r3, r0
 23f0c10:	4264      	negs	r4, r4
 23f0c12:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 23f0c14:	1a20      	subs	r0, r4, r0
 23f0c16:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
 23f0c1a:	e7ec      	b.n	23f0bf6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
 23f0c1c:	023fc567 	.word	0x023fc567
 23f0c20:	023fc582 	.word	0x023fc582
 23f0c24:	023fc4f7 	.word	0x023fc4f7

023f0c28 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
 23f0c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 23f0c2a:	6842      	ldr	r2, [r0, #4]
 23f0c2c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23f0c30:	d217      	bcs.n	23f0c62 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
 23f0c32:	6883      	ldr	r3, [r0, #8]
 23f0c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 23f0c38:	d213      	bcs.n	23f0c62 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0c3a:	6801      	ldr	r1, [r0, #0]
 23f0c3c:	b292      	uxth	r2, r2
 23f0c3e:	b29b      	uxth	r3, r3
 23f0c40:	9101      	str	r1, [sp, #4]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0c42:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23f0c44:	4668      	mov	r0, sp
 23f0c46:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0c48:	f8ad 2000 	strh.w	r2, [sp]
 23f0c4c:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0c50:	f8ad 2008 	strh.w	r2, [sp, #8]
 23f0c54:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23f0c58:	f7fe fc56 	bl	23ef508 <arm_mat_scale_f32>
    }
 23f0c5c:	b005      	add	sp, #20
 23f0c5e:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
 23f0c62:	4801      	ldr	r0, [pc, #4]	; (23f0c68 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
 23f0c64:	e7fa      	b.n	23f0c5c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
 23f0c66:	bf00      	nop
 23f0c68:	fffffc0c 	.word	0xfffffc0c

023f0c6c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
 23f0c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0c70:	4688      	mov	r8, r1
 23f0c72:	4617      	mov	r7, r2
 23f0c74:	461e      	mov	r6, r3
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f0c76:	6905      	ldr	r5, [r0, #16]
static EI_IMPULSE_ERROR inference_tflite_setup(
 23f0c78:	4604      	mov	r4, r0

    *ctx_start_us = ei_read_timer_us();
 23f0c7a:	f003 f85b 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f0c7e:	e9c8 0100 	strd	r0, r1, [r8]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 23f0c82:	4814      	ldr	r0, [pc, #80]	; (23f0cd4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x68>)
 23f0c84:	686b      	ldr	r3, [r5, #4]
 23f0c86:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
 23f0c88:	4601      	mov	r1, r0
 23f0c8a:	b130      	cbz	r0, 23f0c9a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 23f0c8c:	4812      	ldr	r0, [pc, #72]	; (23f0cd8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x6c>)
 23f0c8e:	f003 f857 	bl	23f3d40 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 23f0c92:	f06f 0005 	mvn.w	r0, #5
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
}
 23f0c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = graph_config->model_input(0, input);
 23f0c9a:	4639      	mov	r1, r7
 23f0c9c:	692b      	ldr	r3, [r5, #16]
 23f0c9e:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23f0ca0:	b9a8      	cbnz	r0, 23f0cce <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    status = graph_config->model_output(block_config->output_data_tensor, output);
 23f0ca2:	4631      	mov	r1, r6
 23f0ca4:	696b      	ldr	r3, [r5, #20]
 23f0ca6:	7aa0      	ldrb	r0, [r4, #10]
 23f0ca8:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23f0caa:	b980      	cbnz	r0, 23f0cce <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 23f0cac:	f994 3009 	ldrsb.w	r3, [r4, #9]
 23f0cb0:	2b01      	cmp	r3, #1
 23f0cb2:	d001      	beq.n	23f0cb8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4c>
    return EI_IMPULSE_OK;
 23f0cb4:	2000      	movs	r0, #0
 23f0cb6:	e7ee      	b.n	23f0c96 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2a>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 23f0cb8:	696b      	ldr	r3, [r5, #20]
 23f0cba:	9907      	ldr	r1, [sp, #28]
 23f0cbc:	7b20      	ldrb	r0, [r4, #12]
 23f0cbe:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23f0cc0:	b928      	cbnz	r0, 23f0cce <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 23f0cc2:	696b      	ldr	r3, [r5, #20]
 23f0cc4:	9906      	ldr	r1, [sp, #24]
 23f0cc6:	7ae0      	ldrb	r0, [r4, #11]
 23f0cc8:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23f0cca:	2800      	cmp	r0, #0
 23f0ccc:	d0f2      	beq.n	23f0cb4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x48>
            return EI_IMPULSE_TFLITE_ERROR;
 23f0cce:	f06f 0002 	mvn.w	r0, #2
 23f0cd2:	e7e0      	b.n	23f0c96 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2a>
 23f0cd4:	023f0bdd 	.word	0x023f0bdd
 23f0cd8:	023fc5b7 	.word	0x023fc5b7

023f0cdc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>:
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f0cdc:	ee07 1a90 	vmov	s15, r1
 23f0ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
        if (version == 1) {
 23f0ce4:	2a01      	cmp	r2, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f0ce6:	ee20 0a27 	vmul.f32	s0, s0, s15
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 23f0cea:	ee60 0aa7 	vmul.f32	s1, s1, s15
    static int32_t calculate_no_of_stack_frames(
 23f0cee:	b507      	push	{r0, r1, r2, lr}
        if (version == 1) {
 23f0cf0:	d118      	bne.n	23f0d24 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x48>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 23f0cf2:	feb8 0a40 	vrinta.f32	s0, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f0cf6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f0cfa:	feb8 0a60 	vrinta.f32	s0, s1
 23f0cfe:	ee17 3a90 	vmov	r3, s15
                floor(static_cast<float>(signal_size - length) / frame_stride));
 23f0d02:	1ac0      	subs	r0, r0, r3
 23f0d04:	ee07 0a90 	vmov	s15, r0
 23f0d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f0d0c:	ee87 7a80 	vdiv.f32	s14, s15, s0
  { return __builtin_floorf(__x); }
 23f0d10:	fefb 7a47 	vrintm.f32	s15, s14
            numframes = static_cast<int>(
 23f0d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f0d18:	edcd 7a01 	vstr	s15, [sp, #4]
        return numframes;
 23f0d1c:	9801      	ldr	r0, [sp, #4]
    }
 23f0d1e:	b003      	add	sp, #12
 23f0d20:	f85d fb04 	ldr.w	pc, [sp], #4
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f0d24:	f7ff fe8c 	bl	23f0a40 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 23f0d28:	eeb0 6a40 	vmov.f32	s12, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f0d2c:	eeb0 0a60 	vmov.f32	s0, s1
 23f0d30:	f7ff fe86 	bl	23f0a40 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f0d34:	eebd 6ac6 	vcvt.s32.f32	s12, s12
            length = (frame_sample_length - (int)frame_stride);
 23f0d38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f0d3c:	ee16 2a10 	vmov	r2, s12
 23f0d40:	ee17 3a90 	vmov	r3, s15
 23f0d44:	1ad3      	subs	r3, r2, r3
 23f0d46:	e7dc      	b.n	23f0d02 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x26>

023f0d48 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 23f0d48:	2a01      	cmp	r2, #1
 23f0d4a:	d102      	bne.n	23f0d52 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f0d4c:	6001      	str	r1, [r0, #0]
      }
 23f0d4e:	2000      	movs	r0, #0
 23f0d50:	4770      	bx	lr
	  switch (__op)
 23f0d52:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f0d54:	bf04      	itt	eq
 23f0d56:	680b      	ldreq	r3, [r1, #0]
 23f0d58:	6003      	streq	r3, [r0, #0]
	      break;
 23f0d5a:	e7f8      	b.n	23f0d4e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023f0d5c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f0d5c:	2a01      	cmp	r2, #1
 23f0d5e:	d102      	bne.n	23f0d66 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f0d60:	6001      	str	r1, [r0, #0]
      }
 23f0d62:	2000      	movs	r0, #0
 23f0d64:	4770      	bx	lr
	  switch (__op)
 23f0d66:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f0d68:	bf04      	itt	eq
 23f0d6a:	680b      	ldreq	r3, [r1, #0]
 23f0d6c:	6003      	streq	r3, [r0, #0]
	      break;
 23f0d6e:	e7f8      	b.n	23f0d62 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023f0d70 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f0d70:	b430      	push	{r4, r5}
 23f0d72:	460d      	mov	r5, r1
 23f0d74:	4611      	mov	r1, r2
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f0d76:	6804      	ldr	r4, [r0, #0]
 23f0d78:	681a      	ldr	r2, [r3, #0]
 23f0d7a:	6828      	ldr	r0, [r5, #0]
 23f0d7c:	4623      	mov	r3, r4
      }
 23f0d7e:	bc30      	pop	{r4, r5}
 23f0d80:	6809      	ldr	r1, [r1, #0]
 23f0d82:	4718      	bx	r3

023f0d84 <_ZNSt17_Function_handlerIFvPvjEZL27microphone_inference_recordvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f0d84:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f0d86:	bf08      	it	eq
 23f0d88:	6001      	streq	r1, [r0, #0]
      }
 23f0d8a:	2000      	movs	r0, #0
 23f0d8c:	4770      	bx	lr

023f0d8e <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f0d8e:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f0d90:	bf08      	it	eq
 23f0d92:	6001      	streq	r1, [r0, #0]
      }
 23f0d94:	2000      	movs	r0, #0
 23f0d96:	4770      	bx	lr

023f0d98 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f0d98:	b510      	push	{r4, lr}
 23f0d9a:	680c      	ldr	r4, [r1, #0]
        sample_length = Microphone_PDM::instance().getBufferSizeInBytes() / 2;
 23f0d9c:	f005 fe6a 	bl	23f6a74 <_ZN14Microphone_PDM8instanceEv>
	 * 
	 * You can use this with copySamples() to know how big of a buffer you need if you are allocating a
	 * buffer in bytes instead of samples.
	 */
	size_t getBufferSizeInBytes() const {
		return getSampleSizeInBytes() * getNumberOfSamples();
 23f0da0:	f005 fe78 	bl	23f6a94 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>
 23f0da4:	4b03      	ldr	r3, [pc, #12]	; (23f0db4 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x1c>)
 23f0da6:	0200      	lsls	r0, r0, #8
 23f0da8:	0840      	lsrs	r0, r0, #1
 23f0daa:	6018      	str	r0, [r3, #0]
        sptr = (int16_t *)pSamples;
 23f0dac:	4b02      	ldr	r3, [pc, #8]	; (23f0db8 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x20>)
 23f0dae:	601c      	str	r4, [r3, #0]
      }
 23f0db0:	bd10      	pop	{r4, pc}
 23f0db2:	bf00      	nop
 23f0db4:	1007a5c0 	.word	0x1007a5c0
 23f0db8:	1007a5c4 	.word	0x1007a5c4

023f0dbc <_ZN2ei5numpy8linspaceEffmPf.isra.0>:
    static int linspace(float start, float stop, uint32_t number, float *out)
 23f0dbc:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
 23f0dbe:	b120      	cbz	r0, 23f0dca <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
 23f0dc0:	b119      	cbz	r1, 23f0dca <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
        if (number == 1) {
 23f0dc2:	2801      	cmp	r0, #1
 23f0dc4:	d102      	bne.n	23f0dcc <_ZN2ei5numpy8linspaceEffmPf.isra.0+0x10>
            out[0] = start;
 23f0dc6:	ed81 0a00 	vstr	s0, [r1]
    }
 23f0dca:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
 23f0dcc:	1e42      	subs	r2, r0, #1
 23f0dce:	ee07 2a10 	vmov	s14, r2
 23f0dd2:	ee70 7ac0 	vsub.f32	s15, s1, s0
 23f0dd6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23f0dda:	460c      	mov	r4, r1
 23f0ddc:	eec7 6a87 	vdiv.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23f0de0:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
 23f0de2:	ee07 3a90 	vmov	s15, r3
 23f0de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23f0dea:	eef0 7a40 	vmov.f32	s15, s0
 23f0dee:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23f0df2:	3301      	adds	r3, #1
 23f0df4:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
 23f0df6:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23f0dfa:	d8f2      	bhi.n	23f0de2 <_ZN2ei5numpy8linspaceEffmPf.isra.0+0x26>
        out[number - 1] = stop;
 23f0dfc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23f0e00:	ed41 0a01 	vstr	s1, [r1, #-4]
        return EIDSP_OK;
 23f0e04:	e7e1      	b.n	23f0dca <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
	...

023f0e08 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f0e08:	b510      	push	{r4, lr}
 23f0e0a:	4604      	mov	r4, r0
 23f0e0c:	4b09      	ldr	r3, [pc, #36]	; (23f0e34 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f0e0e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f0e10:	f007 fa16 	bl	23f8240 <_ZN5spark10LogManager8instanceEv>
 23f0e14:	4621      	mov	r1, r4
 23f0e16:	f007 fc5f 	bl	23f86d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f0e1a:	f006 ff31 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f0e1e:	f006 ff21 	bl	23f7c64 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f0e22:	4620      	mov	r0, r4
 23f0e24:	4b04      	ldr	r3, [pc, #16]	; (23f0e38 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f0e26:	f840 3b04 	str.w	r3, [r0], #4
 23f0e2a:	f007 faf1 	bl	23f8410 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f0e2e:	4620      	mov	r0, r4
 23f0e30:	bd10      	pop	{r4, pc}
 23f0e32:	bf00      	nop
 23f0e34:	023fcc40 	.word	0x023fcc40
 23f0e38:	023fcc28 	.word	0x023fcc28

023f0e3c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f0e3c:	b510      	push	{r4, lr}
 23f0e3e:	4604      	mov	r4, r0
    }
 23f0e40:	f7ff ffe2 	bl	23f0e08 <_ZN5spark16SerialLogHandlerD1Ev>
 23f0e44:	4620      	mov	r0, r4
 23f0e46:	2124      	movs	r1, #36	; 0x24
 23f0e48:	f7fc fae9 	bl	23ed41e <_ZdlPvj>
 23f0e4c:	4620      	mov	r0, r4
 23f0e4e:	bd10      	pop	{r4, pc}

023f0e50 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f0e50:	b510      	push	{r4, lr}
      if (_M_manager)
 23f0e52:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f0e54:	4604      	mov	r4, r0
      if (_M_manager)
 23f0e56:	b113      	cbz	r3, 23f0e5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f0e58:	2203      	movs	r2, #3
 23f0e5a:	4601      	mov	r1, r0
 23f0e5c:	4798      	blx	r3
    }
 23f0e5e:	4620      	mov	r0, r4
 23f0e60:	bd10      	pop	{r4, pc}

023f0e62 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 23f0e62:	b570      	push	{r4, r5, r6, lr}
 23f0e64:	4604      	mov	r4, r0
 23f0e66:	460e      	mov	r6, r1
 23f0e68:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23f0e6a:	b133      	cbz	r3, 23f0e7a <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
 23f0e6c:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
 23f0e6e:	2300      	movs	r3, #0
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 23f0e70:	4620      	mov	r0, r4
        cols = n_cols;
 23f0e72:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
 23f0e76:	7323      	strb	r3, [r4, #12]
    }
 23f0e78:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23f0e7a:	fb02 f001 	mul.w	r0, r2, r1
 23f0e7e:	2101      	movs	r1, #1
 23f0e80:	0080      	lsls	r0, r0, #2
 23f0e82:	f002 ff8c 	bl	23f3d9e <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f0e86:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23f0e88:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
 23f0e8a:	e7f1      	b.n	23f0e70 <_ZN2ei9ei_matrixC1EmmPf+0xe>

023f0e8c <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 23f0e8c:	b510      	push	{r4, lr}
 23f0e8e:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
 23f0e90:	6800      	ldr	r0, [r0, #0]
 23f0e92:	b118      	cbz	r0, 23f0e9c <_ZN2ei9ei_matrixD1Ev+0x10>
 23f0e94:	7b23      	ldrb	r3, [r4, #12]
 23f0e96:	b10b      	cbz	r3, 23f0e9c <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
 23f0e98:	f002 ff83 	bl	23f3da2 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 23f0e9c:	4620      	mov	r0, r4
 23f0e9e:	bd10      	pop	{r4, pc}

023f0ea0 <_ZN2ei5numpy4rollEPfji>:
    static int roll(float *input_array, size_t input_array_size, int shift) {
 23f0ea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if (shift < 0) {
 23f0ea2:	1e14      	subs	r4, r2, #0
            shift = input_array_size + shift;
 23f0ea4:	bfb8      	it	lt
 23f0ea6:	1864      	addlt	r4, r4, r1
    static int roll(float *input_array, size_t input_array_size, int shift) {
 23f0ea8:	4606      	mov	r6, r0
 23f0eaa:	460d      	mov	r5, r1
        if (shift == 0) {
 23f0eac:	b1ec      	cbz	r4, 23f0eea <_ZN2ei5numpy4rollEPfji+0x4a>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23f0eae:	2300      	movs	r3, #0
 23f0eb0:	4622      	mov	r2, r4
 23f0eb2:	2101      	movs	r1, #1
 23f0eb4:	4668      	mov	r0, sp
 23f0eb6:	f7ff ffd4 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f0eba:	9800      	ldr	r0, [sp, #0]
 23f0ebc:	b1c0      	cbz	r0, 23f0ef0 <_ZN2ei5numpy4rollEPfji+0x50>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 23f0ebe:	1b29      	subs	r1, r5, r4
 23f0ec0:	00a4      	lsls	r4, r4, #2
 23f0ec2:	4622      	mov	r2, r4
 23f0ec4:	008d      	lsls	r5, r1, #2
 23f0ec6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 23f0eca:	f00a fb28 	bl	23fb51e <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 23f0ece:	462a      	mov	r2, r5
 23f0ed0:	4631      	mov	r1, r6
 23f0ed2:	1930      	adds	r0, r6, r4
 23f0ed4:	f00a fb30 	bl	23fb538 <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 23f0ed8:	4622      	mov	r2, r4
 23f0eda:	4630      	mov	r0, r6
 23f0edc:	9900      	ldr	r1, [sp, #0]
 23f0ede:	f00a fb1e 	bl	23fb51e <memcpy>
        return EIDSP_OK;
 23f0ee2:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23f0ee4:	4668      	mov	r0, sp
 23f0ee6:	f7ff ffd1 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
    }
 23f0eea:	4620      	mov	r0, r4
 23f0eec:	b004      	add	sp, #16
 23f0eee:	bd70      	pop	{r4, r5, r6, pc}
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23f0ef0:	4c00      	ldr	r4, [pc, #0]	; (23f0ef4 <_ZN2ei5numpy4rollEPfji+0x54>)
 23f0ef2:	e7f7      	b.n	23f0ee4 <_ZN2ei5numpy4rollEPfji+0x44>
 23f0ef4:	fffffc16 	.word	0xfffffc16

023f0ef8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23f0ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0efc:	4617      	mov	r7, r2
 23f0efe:	4698      	mov	r8, r3
        if (output->cols != input->cols) {
 23f0f00:	688a      	ldr	r2, [r1, #8]
 23f0f02:	6883      	ldr	r3, [r0, #8]
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23f0f04:	4604      	mov	r4, r0
        if (output->cols != input->cols) {
 23f0f06:	429a      	cmp	r2, r3
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23f0f08:	460e      	mov	r6, r1
        if (output->cols != input->cols) {
 23f0f0a:	d16a      	bne.n	23f0fe2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xea>
        if (output->rows != input->rows + pad_before + pad_after) {
 23f0f0c:	6842      	ldr	r2, [r0, #4]
 23f0f0e:	6849      	ldr	r1, [r1, #4]
 23f0f10:	eb08 0307 	add.w	r3, r8, r7
 23f0f14:	4413      	add	r3, r2
 23f0f16:	4299      	cmp	r1, r3
 23f0f18:	d163      	bne.n	23f0fe2 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xea>
        if (input->rows == 0) {
 23f0f1a:	2a00      	cmp	r2, #0
 23f0f1c:	d064      	beq.n	23f0fe8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf0>
        bool pad_before_direction_up = true;
 23f0f1e:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
 23f0f22:	2500      	movs	r5, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23f0f24:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 23f0f28:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
            memcpy(output->buffer + (input->cols * ix),
 23f0f2c:	6830      	ldr	r0, [r6, #0]
 23f0f2e:	68a2      	ldr	r2, [r4, #8]
                input->buffer + (pad_before_index * input->cols),
 23f0f30:	6821      	ldr	r1, [r4, #0]
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23f0f32:	d01f      	beq.n	23f0f74 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7c>
            memcpy(output->buffer + (input->cols * ix),
 23f0f34:	0092      	lsls	r2, r2, #2
 23f0f36:	fb02 1105 	mla	r1, r2, r5, r1
 23f0f3a:	fb02 000b 	mla	r0, r2, fp, r0
 23f0f3e:	f00a faee 	bl	23fb51e <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
 23f0f42:	b915      	cbnz	r5, 23f0f4a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x52>
 23f0f44:	f1ba 0f00 	cmp.w	sl, #0
 23f0f48:	d011      	beq.n	23f0f6e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x76>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 23f0f4a:	6863      	ldr	r3, [r4, #4]
 23f0f4c:	3b01      	subs	r3, #1
 23f0f4e:	42ab      	cmp	r3, r5
 23f0f50:	d106      	bne.n	23f0f60 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x68>
 23f0f52:	f1ba 0f00 	cmp.w	sl, #0
 23f0f56:	d100      	bne.n	23f0f5a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x62>
                pad_before_index--;
 23f0f58:	3d01      	subs	r5, #1
                pad_before_direction_up = false;
 23f0f5a:	f04f 0a00 	mov.w	sl, #0
 23f0f5e:	e003      	b.n	23f0f68 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
            else if (pad_before_direction_up) {
 23f0f60:	f1ba 0f00 	cmp.w	sl, #0
 23f0f64:	d0f8      	beq.n	23f0f58 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x60>
                pad_before_index++;
 23f0f66:	3501      	adds	r5, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23f0f68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 23f0f6c:	e7dc      	b.n	23f0f28 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x30>
                pad_before_direction_up = true;
 23f0f6e:	f04f 0a01 	mov.w	sl, #1
 23f0f72:	e7f9      	b.n	23f0f68 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23f0f74:	f04f 0a00 	mov.w	sl, #0
        bool pad_after_direction_up = false;
 23f0f78:	46d1      	mov	r9, sl
            input->rows * input->cols * sizeof(float));
 23f0f7a:	6865      	ldr	r5, [r4, #4]
        memcpy(output->buffer + (input->cols * pad_before),
 23f0f7c:	fb02 f307 	mul.w	r3, r2, r7
            input->rows * input->cols * sizeof(float));
 23f0f80:	436a      	muls	r2, r5
        memcpy(output->buffer + (input->cols * pad_before),
 23f0f82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23f0f86:	0092      	lsls	r2, r2, #2
 23f0f88:	f00a fac9 	bl	23fb51e <memcpy>
        int32_t pad_after_index = input->rows - 1;
 23f0f8c:	6865      	ldr	r5, [r4, #4]
 23f0f8e:	3d01      	subs	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23f0f90:	45d0      	cmp	r8, sl
 23f0f92:	dd2b      	ble.n	23f0fec <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 23f0f94:	6863      	ldr	r3, [r4, #4]
 23f0f96:	68a2      	ldr	r2, [r4, #8]
 23f0f98:	eb0a 0007 	add.w	r0, sl, r7
 23f0f9c:	4418      	add	r0, r3
                input->buffer + (pad_after_index * input->cols),
 23f0f9e:	6821      	ldr	r1, [r4, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 23f0fa0:	6833      	ldr	r3, [r6, #0]
 23f0fa2:	0092      	lsls	r2, r2, #2
 23f0fa4:	fb02 1105 	mla	r1, r2, r5, r1
 23f0fa8:	fb02 3000 	mla	r0, r2, r0, r3
 23f0fac:	f00a fab7 	bl	23fb51e <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
 23f0fb0:	b915      	cbnz	r5, 23f0fb8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc0>
 23f0fb2:	f1b9 0f00 	cmp.w	r9, #0
 23f0fb6:	d011      	beq.n	23f0fdc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe4>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 23f0fb8:	6863      	ldr	r3, [r4, #4]
 23f0fba:	3b01      	subs	r3, #1
 23f0fbc:	42ab      	cmp	r3, r5
 23f0fbe:	d106      	bne.n	23f0fce <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd6>
 23f0fc0:	f1b9 0f00 	cmp.w	r9, #0
 23f0fc4:	d100      	bne.n	23f0fc8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd0>
                pad_after_index--;
 23f0fc6:	3d01      	subs	r5, #1
                pad_after_direction_up = false;
 23f0fc8:	f04f 0900 	mov.w	r9, #0
 23f0fcc:	e003      	b.n	23f0fd6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            else if (pad_after_direction_up) {
 23f0fce:	f1b9 0f00 	cmp.w	r9, #0
 23f0fd2:	d0f8      	beq.n	23f0fc6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xce>
                pad_after_index++;
 23f0fd4:	3501      	adds	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23f0fd6:	f10a 0a01 	add.w	sl, sl, #1
 23f0fda:	e7d9      	b.n	23f0f90 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x98>
                pad_after_direction_up = true;
 23f0fdc:	f04f 0901 	mov.w	r9, #1
 23f0fe0:	e7f9      	b.n	23f0fd6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f0fe2:	4803      	ldr	r0, [pc, #12]	; (23f0ff0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf8>)
    }
 23f0fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 23f0fe8:	4802      	ldr	r0, [pc, #8]	; (23f0ff4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xfc>)
 23f0fea:	e7fb      	b.n	23f0fe4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
        return EIDSP_OK;
 23f0fec:	2000      	movs	r0, #0
 23f0fee:	e7f9      	b.n	23f0fe4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
 23f0ff0:	fffffc14 	.word	0xfffffc14
 23f0ff4:	fffffc12 	.word	0xfffffc12

023f0ff8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f0ff8:	2300      	movs	r3, #0
 23f0ffa:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23f0ffe:	434a      	muls	r2, r1
 23f1000:	429a      	cmp	r2, r3
 23f1002:	d90a      	bls.n	23f101a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
 23f1004:	6802      	ldr	r2, [r0, #0]
 23f1006:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23f100a:	edd2 7a00 	vldr	s15, [r2]
 23f100e:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f1012:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
 23f1014:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f1018:	e7ef      	b.n	23f0ffa <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x2>
    }
 23f101a:	2000      	movs	r0, #0
 23f101c:	4770      	bx	lr
	...

023f1020 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 23f1020:	b530      	push	{r4, r5, lr}
 23f1022:	ed2d 8b04 	vpush	{d8-d9}
 23f1026:	b08f      	sub	sp, #60	; 0x3c
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 23f1028:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23f102c:	6803      	ldr	r3, [r0, #0]
 23f102e:	434a      	muls	r2, r1
 23f1030:	a802      	add	r0, sp, #8
 23f1032:	2101      	movs	r1, #1
 23f1034:	f7ff ff15 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 23f1038:	2201      	movs	r2, #1
 23f103a:	2300      	movs	r3, #0
 23f103c:	4611      	mov	r1, r2
 23f103e:	a806      	add	r0, sp, #24
 23f1040:	f7ff ff0f 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 23f1044:	9b06      	ldr	r3, [sp, #24]
 23f1046:	2b00      	cmp	r3, #0
 23f1048:	d07d      	beq.n	23f1146 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x126>
        if (input_matrix->rows != output_matrix->rows) {
 23f104a:	9a03      	ldr	r2, [sp, #12]
 23f104c:	9b07      	ldr	r3, [sp, #28]
 23f104e:	429a      	cmp	r2, r3
 23f1050:	d17b      	bne.n	23f114a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        if (output_matrix->cols != 1) {
 23f1052:	9b08      	ldr	r3, [sp, #32]
 23f1054:	2b01      	cmp	r3, #1
 23f1056:	d178      	bne.n	23f114a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f1058:	2400      	movs	r4, #0
 23f105a:	9b03      	ldr	r3, [sp, #12]
 23f105c:	42a3      	cmp	r3, r4
 23f105e:	d910      	bls.n	23f1082 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x62>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 23f1060:	9904      	ldr	r1, [sp, #16]
 23f1062:	9802      	ldr	r0, [sp, #8]
 23f1064:	fb01 f504 	mul.w	r5, r1, r4
 23f1068:	ab0a      	add	r3, sp, #40	; 0x28
 23f106a:	aa01      	add	r2, sp, #4
 23f106c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 23f1070:	f7ff f921 	bl	23f02b6 <arm_min_f32>
            output_matrix->buffer[row] = min;
 23f1074:	9b06      	ldr	r3, [sp, #24]
 23f1076:	9a01      	ldr	r2, [sp, #4]
 23f1078:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f107c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f107e:	3401      	adds	r4, #1
 23f1080:	e7eb      	b.n	23f105a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
        r = min(&temp_matrix, &min_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        matrix_t max_matrix(1, 1);
 23f1082:	2201      	movs	r2, #1
 23f1084:	2300      	movs	r3, #0
 23f1086:	4611      	mov	r1, r2
 23f1088:	a80a      	add	r0, sp, #40	; 0x28
 23f108a:	f7ff feea 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 23f108e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1090:	2b00      	cmp	r3, #0
 23f1092:	d054      	beq.n	23f113e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x11e>
        if (input_matrix->rows != output_matrix->rows) {
 23f1094:	9a03      	ldr	r2, [sp, #12]
 23f1096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f1098:	429a      	cmp	r2, r3
 23f109a:	d152      	bne.n	23f1142 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        if (output_matrix->cols != 1) {
 23f109c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f109e:	2b01      	cmp	r3, #1
 23f10a0:	d14f      	bne.n	23f1142 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f10a2:	2400      	movs	r4, #0
 23f10a4:	9b03      	ldr	r3, [sp, #12]
 23f10a6:	42a3      	cmp	r3, r4
 23f10a8:	d910      	bls.n	23f10cc <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xac>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 23f10aa:	9904      	ldr	r1, [sp, #16]
 23f10ac:	9802      	ldr	r0, [sp, #8]
 23f10ae:	fb01 f504 	mul.w	r5, r1, r4
 23f10b2:	466a      	mov	r2, sp
 23f10b4:	ab01      	add	r3, sp, #4
 23f10b6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 23f10ba:	f7ff f8e3 	bl	23f0284 <arm_max_f32>
            output_matrix->buffer[row] = max;
 23f10be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f10c0:	9a00      	ldr	r2, [sp, #0]
 23f10c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f10c6:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f10c8:	3401      	adds	r4, #1
 23f10ca:	e7eb      	b.n	23f10a4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x84>
        r = max(&temp_matrix, &max_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 23f10cc:	9b06      	ldr	r3, [sp, #24]
 23f10ce:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 23f10d2:	edd3 9a00 	vldr	s19, [r3]
 23f10d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f10d8:	ed93 8a00 	vldr	s16, [r3]
 23f10dc:	ee38 8a69 	vsub.f32	s16, s16, s19
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 23f10e0:	ee18 0a10 	vmov	r0, s16
 23f10e4:	f7fb fbc8 	bl	23ec878 <__aeabi_f2d>
 23f10e8:	a31b      	add	r3, pc, #108	; (adr r3, 23f1158 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 23f10ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f10ee:	f7fb fe8d 	bl	23ece0c <__aeabi_dcmplt>
 23f10f2:	bb08      	cbnz	r0, 23f1138 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x118>
 23f10f4:	eec9 8a08 	vdiv.f32	s17, s18, s16

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 23f10f8:	eeb0 0a69 	vmov.f32	s0, s19
 23f10fc:	a802      	add	r0, sp, #8
 23f10fe:	f7ff ff7b 	bl	23f0ff8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
        if (r != EIDSP_OK) {
 23f1102:	4604      	mov	r4, r0
 23f1104:	b950      	cbnz	r0, 23f111c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
        if (scale == 1.0f) return EIDSP_OK;
 23f1106:	eef4 8a49 	vcmp.f32	s17, s18
 23f110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f110e:	d005      	beq.n	23f111c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
 23f1110:	eeb0 0a68 	vmov.f32	s0, s17
 23f1114:	a802      	add	r0, sp, #8
 23f1116:	f7ff fd87 	bl	23f0c28 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
 23f111a:	4604      	mov	r4, r0
        matrix_t max_matrix(1, 1);
 23f111c:	a80a      	add	r0, sp, #40	; 0x28
 23f111e:	f7ff feb5 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 23f1122:	a806      	add	r0, sp, #24
 23f1124:	f7ff feb2 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 23f1128:	a802      	add	r0, sp, #8
 23f112a:	f7ff feaf 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        return EIDSP_OK;
    }
 23f112e:	4620      	mov	r0, r4
 23f1130:	b00f      	add	sp, #60	; 0x3c
 23f1132:	ecbd 8b04 	vpop	{d8-d9}
 23f1136:	bd30      	pop	{r4, r5, pc}
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 23f1138:	eef0 8a49 	vmov.f32	s17, s18
 23f113c:	e7dc      	b.n	23f10f8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xd8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f113e:	4c04      	ldr	r4, [pc, #16]	; (23f1150 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 23f1140:	e7ec      	b.n	23f111c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1142:	4c04      	ldr	r4, [pc, #16]	; (23f1154 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
 23f1144:	e7ea      	b.n	23f111c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f1146:	4c02      	ldr	r4, [pc, #8]	; (23f1150 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 23f1148:	e7eb      	b.n	23f1122 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f114a:	4c02      	ldr	r4, [pc, #8]	; (23f1154 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
 23f114c:	e7e9      	b.n	23f1122 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
 23f114e:	bf00      	nop
 23f1150:	fffffc16 	.word	0xfffffc16
 23f1154:	fffffc14 	.word	0xfffffc14
 23f1158:	d2f1a9fc 	.word	0xd2f1a9fc
 23f115c:	3f50624d 	.word	0x3f50624d

023f1160 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23f1160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1164:	ed2d 8b02 	vpush	{d8}
 23f1168:	4607      	mov	r7, r0
 23f116a:	b089      	sub	sp, #36	; 0x24
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23f116c:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23f116e:	460c      	mov	r4, r1
 23f1170:	4690      	mov	r8, r2
 23f1172:	461e      	mov	r6, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23f1174:	f002 fe11 	bl	23f3d9a <_Z9ei_mallocj>
        if (!fft_output) {
 23f1178:	4605      	mov	r5, r0
 23f117a:	b160      	cbz	r0, 23f1196 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 23f117c:	ab07      	add	r3, sp, #28
 23f117e:	9300      	str	r3, [sp, #0]
 23f1180:	2300      	movs	r3, #0
 23f1182:	4640      	mov	r0, r8
 23f1184:	461a      	mov	r2, r3
 23f1186:	4619      	mov	r1, r3
 23f1188:	f005 fac6 	bl	23f6718 <kiss_fftr_alloc>
        if (!cfg) {
 23f118c:	4682      	mov	sl, r0
 23f118e:	b920      	cbnz	r0, 23f119a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23f1190:	4628      	mov	r0, r5
 23f1192:	f002 fe06 	bl	23f3da2 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f1196:	4828      	ldr	r0, [pc, #160]	; (23f1238 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>)
 23f1198:	e048      	b.n	23f122c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xcc>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 23f119a:	46ab      	mov	fp, r5
 23f119c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 23f123c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xdc>
 23f11a0:	462a      	mov	r2, r5
 23f11a2:	4639      	mov	r1, r7
 23f11a4:	f005 fb90 	bl	23f68c8 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23f11a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 23f11ac:	9303      	str	r3, [sp, #12]
 23f11ae:	9b03      	ldr	r3, [sp, #12]
 23f11b0:	429c      	cmp	r4, r3
 23f11b2:	d034      	beq.n	23f121e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xbe>
      return pow(__type(__x), __type(__y));
 23f11b4:	f8db 0000 	ldr.w	r0, [fp]
 23f11b8:	f7fb fb5e 	bl	23ec878 <__aeabi_f2d>
 23f11bc:	4602      	mov	r2, r0
 23f11be:	460b      	mov	r3, r1
 23f11c0:	f8db 0004 	ldr.w	r0, [fp, #4]
 23f11c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f11c8:	f7fb fb56 	bl	23ec878 <__aeabi_f2d>
 23f11cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23f11d0:	4680      	mov	r8, r0
 23f11d2:	4689      	mov	r9, r1
 23f11d4:	4610      	mov	r0, r2
 23f11d6:	4619      	mov	r1, r3
 23f11d8:	f7fb fba6 	bl	23ec928 <__aeabi_dmul>
 23f11dc:	4642      	mov	r2, r8
 23f11de:	4606      	mov	r6, r0
 23f11e0:	460f      	mov	r7, r1
 23f11e2:	464b      	mov	r3, r9
 23f11e4:	4640      	mov	r0, r8
 23f11e6:	4649      	mov	r1, r9
 23f11e8:	f7fb fb9e 	bl	23ec928 <__aeabi_dmul>
 23f11ec:	4602      	mov	r2, r0
 23f11ee:	460b      	mov	r3, r1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 23f11f0:	4630      	mov	r0, r6
 23f11f2:	4639      	mov	r1, r7
 23f11f4:	f7fb f9e2 	bl	23ec5bc <__adddf3>
 23f11f8:	f7fb fe8e 	bl	23ecf18 <__aeabi_d2f>
 23f11fc:	ee00 0a10 	vmov	s0, r0
    if (in >= 0.0f)
 23f1200:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23f1204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1208:	db06      	blt.n	23f1218 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xb8>
      *pOut = sqrtf(in);
 23f120a:	f008 fe97 	bl	23f9f3c <sqrtf>
 23f120e:	eca4 0a01 	vstmia	r4!, {s0}
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23f1212:	f10b 0b08 	add.w	fp, fp, #8
 23f1216:	e7ca      	b.n	23f11ae <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4e>
      *pOut = 0.0f;
 23f1218:	eeb0 0a48 	vmov.f32	s0, s16
 23f121c:	e7f7      	b.n	23f120e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xae>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 23f121e:	4650      	mov	r0, sl
 23f1220:	f002 fdbf 	bl	23f3da2 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23f1224:	4628      	mov	r0, r5
 23f1226:	f002 fdbc 	bl	23f3da2 <_Z7ei_freePv>

        return EIDSP_OK;
 23f122a:	2000      	movs	r0, #0
    }
 23f122c:	b009      	add	sp, #36	; 0x24
 23f122e:	ecbd 8b02 	vpop	{d8}
 23f1232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f1236:	bf00      	nop
 23f1238:	fffffc16 	.word	0xfffffc16
 23f123c:	00000000 	.word	0x00000000

023f1240 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23f1240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f1244:	ed2d 8b02 	vpush	{d8}
 23f1248:	b091      	sub	sp, #68	; 0x44
 23f124a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 23f124c:	4680      	mov	r8, r0
        size_t n_fft_out_features = (n_fft / 2) + 1;
 23f124e:	0867      	lsrs	r7, r4, #1
 23f1250:	3701      	adds	r7, #1
        if (output_size != n_fft_out_features) {
 23f1252:	429f      	cmp	r7, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23f1254:	460e      	mov	r6, r1
 23f1256:	4615      	mov	r5, r2
        if (output_size != n_fft_out_features) {
 23f1258:	f040 8081 	bne.w	23f135e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23f125c:	2300      	movs	r3, #0
 23f125e:	4622      	mov	r2, r4
 23f1260:	2101      	movs	r1, #1
 23f1262:	a802      	add	r0, sp, #8
 23f1264:	f7ff fdfd 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1268:	9802      	ldr	r0, [sp, #8]
 23f126a:	2800      	cmp	r0, #0
 23f126c:	d04e      	beq.n	23f130c <_ZN2ei5numpy4rfftEPKfjPfjj+0xcc>
 23f126e:	42a6      	cmp	r6, r4
 23f1270:	bf28      	it	cs
 23f1272:	4626      	movcs	r6, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 23f1274:	ea4f 0986 	mov.w	r9, r6, lsl #2
 23f1278:	464a      	mov	r2, r9
 23f127a:	4641      	mov	r1, r8
 23f127c:	f00a f94f 	bl	23fb51e <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 23f1280:	9802      	ldr	r0, [sp, #8]
 23f1282:	1ba2      	subs	r2, r4, r6
 23f1284:	2100      	movs	r1, #0
 23f1286:	0092      	lsls	r2, r2, #2
 23f1288:	4448      	add	r0, r9
 23f128a:	f00a f96f 	bl	23fb56c <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 23f128e:	2c20      	cmp	r4, #32
 23f1290:	d063      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f1292:	2c40      	cmp	r4, #64	; 0x40
 23f1294:	d061      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f1296:	2c80      	cmp	r4, #128	; 0x80
 23f1298:	d05f      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f129a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 23f129e:	d01b      	beq.n	23f12d8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x98>
 23f12a0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 23f12a4:	d059      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 23f12a6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 23f12aa:	d056      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f12ac:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 23f12b0:	d053      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f12b2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 23f12b6:	d050      	beq.n	23f135a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 23f12b8:	4622      	mov	r2, r4
 23f12ba:	463b      	mov	r3, r7
 23f12bc:	4629      	mov	r1, r5
 23f12be:	9802      	ldr	r0, [sp, #8]
 23f12c0:	f7ff ff4e 	bl	23f1160 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 23f12c4:	4604      	mov	r4, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23f12c6:	a802      	add	r0, sp, #8
 23f12c8:	f7ff fde0 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
    }
 23f12cc:	4620      	mov	r0, r4
 23f12ce:	b011      	add	sp, #68	; 0x44
 23f12d0:	ecbd 8b02 	vpop	{d8}
 23f12d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
                S->fftLen = 128U;
 23f12d8:	2380      	movs	r3, #128	; 0x80
 23f12da:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->pTwiddle = NULL;
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23f12de:	4b21      	ldr	r3, [pc, #132]	; (23f1364 <_ZN2ei5numpy4rfftEPKfjPfjj+0x124>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f12e0:	2101      	movs	r1, #1
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23f12e2:	899a      	ldrh	r2, [r3, #12]
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f12e4:	a806      	add	r0, sp, #24
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23f12e6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 23f12ea:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 23f12ec:	685b      	ldr	r3, [r3, #4]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 23f12ee:	920c      	str	r2, [sp, #48]	; 0x30
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 23f12f0:	930b      	str	r3, [sp, #44]	; 0x2c
                rfft_instance->fftLenRFFT = 256U;
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 23f12f2:	4b1d      	ldr	r3, [pc, #116]	; (23f1368 <_ZN2ei5numpy4rfftEPKfjPfjj+0x128>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f12f4:	4622      	mov	r2, r4
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 23f12f6:	930f      	str	r3, [sp, #60]	; 0x3c
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f12f8:	2300      	movs	r3, #0
                rfft_instance->fftLenRFFT = 256U;
 23f12fa:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f12fe:	f7ff fdb0 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1302:	9a06      	ldr	r2, [sp, #24]
 23f1304:	b922      	cbnz	r2, 23f1310 <_ZN2ei5numpy4rfftEPKfjPfjj+0xd0>
 23f1306:	a806      	add	r0, sp, #24
 23f1308:	f7ff fdc0 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23f130c:	4c17      	ldr	r4, [pc, #92]	; (23f136c <_ZN2ei5numpy4rfftEPKfjPfjj+0x12c>)
 23f130e:	e7da      	b.n	23f12c6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 23f1310:	2408      	movs	r4, #8
                output[ix] = rms_result * sqrt(2);
 23f1312:	ed9f 8a17 	vldr	s16, [pc, #92]	; 23f1370 <_ZN2ei5numpy4rfftEPKfjPfjj+0x130>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 23f1316:	2300      	movs	r3, #0
 23f1318:	9902      	ldr	r1, [sp, #8]
 23f131a:	a80a      	add	r0, sp, #40	; 0x28
 23f131c:	f7fe f9bf 	bl	23ef69e <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
 23f1320:	9b06      	ldr	r3, [sp, #24]
 23f1322:	3504      	adds	r5, #4
 23f1324:	681a      	ldr	r2, [r3, #0]
 23f1326:	f845 2c04 	str.w	r2, [r5, #-4]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 23f132a:	685b      	ldr	r3, [r3, #4]
 23f132c:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 23f1330:	9806      	ldr	r0, [sp, #24]
 23f1332:	2102      	movs	r1, #2
 23f1334:	4420      	add	r0, r4
 23f1336:	aa01      	add	r2, sp, #4
 23f1338:	f7fe ff7e 	bl	23f0238 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 23f133c:	eddd 7a01 	vldr	s15, [sp, #4]
 23f1340:	ee67 7a88 	vmul.f32	s15, s15, s16
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 23f1344:	3408      	adds	r4, #8
 23f1346:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
                output[ix] = rms_result * sqrt(2);
 23f134a:	ece5 7a01 	vstmia	r5!, {s15}
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 23f134e:	d1ef      	bne.n	23f1330 <_ZN2ei5numpy4rfftEPKfjPfjj+0xf0>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f1350:	a806      	add	r0, sp, #24
 23f1352:	f7ff fd9b 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 23f1356:	2400      	movs	r4, #0
 23f1358:	e7b5      	b.n	23f12c6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 23f135a:	4c06      	ldr	r4, [pc, #24]	; (23f1374 <_ZN2ei5numpy4rfftEPKfjPfjj+0x134>)
 23f135c:	e7b3      	b.n	23f12c6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 23f135e:	4c06      	ldr	r4, [pc, #24]	; (23f1378 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>)
 23f1360:	e7b4      	b.n	23f12cc <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
 23f1362:	bf00      	nop
 23f1364:	023fbaa4 	.word	0x023fbaa4
 23f1368:	023fc054 	.word	0x023fc054
 23f136c:	fffffc16 	.word	0xfffffc16
 23f1370:	3fb504f3 	.word	0x3fb504f3
 23f1374:	fffffc08 	.word	0xfffffc08
 23f1378:	fffffc11 	.word	0xfffffc11

023f137c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
        if (blockSize <= 1U) {
 23f137c:	2901      	cmp	r1, #1
 23f137e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23f143c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 23f1382:	b570      	push	{r4, r5, r6, lr}
        if (blockSize <= 1U) {
 23f1384:	d802      	bhi.n	23f138c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x10>
            *pResult = 0;
 23f1386:	edc2 7a00 	vstr	s15, [r2]
    }
 23f138a:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
 23f138c:	088d      	lsrs	r5, r1, #2
 23f138e:	4603      	mov	r3, r0
 23f1390:	4604      	mov	r4, r0
 23f1392:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
 23f1394:	3410      	adds	r4, #16
 23f1396:	b18e      	cbz	r6, 23f13bc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x40>
            sum += *pInput++;
 23f1398:	ed14 7a04 	vldr	s14, [r4, #-16]
 23f139c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23f13a0:	ed14 7a03 	vldr	s14, [r4, #-12]
 23f13a4:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23f13a8:	ed14 7a02 	vldr	s14, [r4, #-8]
 23f13ac:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23f13b0:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
 23f13b4:	3e01      	subs	r6, #1
            sum += *pInput++;
 23f13b6:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23f13ba:	e7eb      	b.n	23f1394 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x18>
 23f13bc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
 23f13c0:	4606      	mov	r6, r0
 23f13c2:	f001 0403 	and.w	r4, r1, #3
 23f13c6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        while (blkCnt > 0U) {
 23f13ca:	42a6      	cmp	r6, r4
 23f13cc:	d004      	beq.n	23f13d8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x5c>
            sum += *pInput++;
 23f13ce:	ecb6 7a01 	vldmia	r6!, {s14}
 23f13d2:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23f13d6:	e7f8      	b.n	23f13ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x4e>
        fMean = sum / (float32_t)blockSize;
 23f13d8:	ee07 1a10 	vmov	s14, r1
 23f13dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23f13e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
 23f13e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 23f143c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
        while (blkCnt > 0U) {
 23f13e8:	3310      	adds	r3, #16
 23f13ea:	b1cd      	cbz	r5, 23f1420 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
            fValue = *pInput++ - fMean;
 23f13ec:	ed13 6a04 	vldr	s12, [r3, #-16]
 23f13f0:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f13f4:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23f13f8:	ed13 6a03 	vldr	s12, [r3, #-12]
 23f13fc:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f1400:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23f1404:	ed13 6a02 	vldr	s12, [r3, #-8]
 23f1408:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f140c:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23f1410:	ed13 6a01 	vldr	s12, [r3, #-4]
 23f1414:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
 23f1418:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
 23f141a:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23f141e:	e7e3      	b.n	23f13e8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x6c>
        while (blkCnt > 0U) {
 23f1420:	42a0      	cmp	r0, r4
 23f1422:	d006      	beq.n	23f1432 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xb6>
            fValue = *pInput++ - fMean;
 23f1424:	ecb0 6a01 	vldmia	r0!, {s12}
 23f1428:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f142c:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23f1430:	e7f6      	b.n	23f1420 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
 23f1432:	eec7 6a87 	vdiv.f32	s13, s15, s14
 23f1436:	edc2 6a00 	vstr	s13, [r2]
 23f143a:	e7a6      	b.n	23f138a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe>
 23f143c:	00000000 	.word	0x00000000

023f1440 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23f1440:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (input_matrix->cols != output_matrix->rows) {
 23f1442:	6883      	ldr	r3, [r0, #8]
 23f1444:	684a      	ldr	r2, [r1, #4]
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23f1446:	460e      	mov	r6, r1
        if (input_matrix->cols != output_matrix->rows) {
 23f1448:	4293      	cmp	r3, r2
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23f144a:	b087      	sub	sp, #28
        if (input_matrix->cols != output_matrix->rows) {
 23f144c:	d144      	bne.n	23f14d8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        if (output_matrix->cols != 1) {
 23f144e:	6889      	ldr	r1, [r1, #8]
 23f1450:	2901      	cmp	r1, #1
 23f1452:	d141      	bne.n	23f14d8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        arm_in_matrix.numRows = input_matrix->rows;
 23f1454:	6842      	ldr	r2, [r0, #4]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 23f1456:	6800      	ldr	r0, [r0, #0]
        arm_in_matrix.numRows = input_matrix->rows;
 23f1458:	b294      	uxth	r4, r2
        arm_in_matrix.pData = &input_matrix->buffer[0];
 23f145a:	9003      	str	r0, [sp, #12]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23f145c:	fb02 f003 	mul.w	r0, r2, r3
        arm_in_matrix.numCols = input_matrix->cols;
 23f1460:	b29d      	uxth	r5, r3
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23f1462:	0080      	lsls	r0, r0, #2
        arm_in_matrix.numRows = input_matrix->rows;
 23f1464:	f8ad 4008 	strh.w	r4, [sp, #8]
        arm_in_matrix.numCols = input_matrix->cols;
 23f1468:	f8ad 500a 	strh.w	r5, [sp, #10]
        arm_transposed_matrix.numRows = input_matrix->cols;
 23f146c:	f8ad 5010 	strh.w	r5, [sp, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 23f1470:	f8ad 4012 	strh.w	r4, [sp, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23f1474:	f002 fc93 	bl	23f3d9e <_Z9ei_callocjj>
 23f1478:	9005      	str	r0, [sp, #20]
        if (arm_transposed_matrix.pData == NULL) {
 23f147a:	b378      	cbz	r0, 23f14dc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x9c>
        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 23f147c:	a904      	add	r1, sp, #16
 23f147e:	a802      	add	r0, sp, #8
 23f1480:	f7fe f851 	bl	23ef526 <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
 23f1484:	4604      	mov	r4, r0
 23f1486:	bb20      	cbnz	r0, 23f14d2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23f1488:	4605      	mov	r5, r0
 23f148a:	2700      	movs	r7, #0
 23f148c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 23f1490:	9805      	ldr	r0, [sp, #20]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23f1492:	42ab      	cmp	r3, r5
 23f1494:	d91b      	bls.n	23f14ce <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 23f1496:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 23f149a:	aa01      	add	r2, sp, #4
 23f149c:	fb05 f301 	mul.w	r3, r5, r1
 23f14a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23f14a4:	f7ff ff6a 	bl	23f137c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 23f14a8:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
 23f14ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23f14b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f14b4:	db08      	blt.n	23f14c8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x88>
      *pOut = sqrtf(in);
 23f14b6:	f008 fd41 	bl	23f9f3c <sqrtf>
            output_matrix->buffer[row] = std;
 23f14ba:	6833      	ldr	r3, [r6, #0]
 23f14bc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23f14c0:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23f14c4:	3501      	adds	r5, #1
 23f14c6:	e7e1      	b.n	23f148c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4c>
      *pOut = 0.0f;
 23f14c8:	ee00 7a10 	vmov	s0, r7
 23f14cc:	e7f5      	b.n	23f14ba <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x7a>
        ei_free(arm_transposed_matrix.pData);
 23f14ce:	f002 fc68 	bl	23f3da2 <_Z7ei_freePv>
    }
 23f14d2:	4620      	mov	r0, r4
 23f14d4:	b007      	add	sp, #28
 23f14d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f14d8:	4c01      	ldr	r4, [pc, #4]	; (23f14e0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa0>)
 23f14da:	e7fa      	b.n	23f14d2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f14dc:	4c01      	ldr	r4, [pc, #4]	; (23f14e4 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa4>)
 23f14de:	e7f8      	b.n	23f14d2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
 23f14e0:	fffffc14 	.word	0xfffffc14
 23f14e4:	fffffc16 	.word	0xfffffc16

023f14e8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
    {
 23f14e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f14ec:	ed2d 8b02 	vpush	{d8}
 23f14f0:	4605      	mov	r5, r0
 23f14f2:	4693      	mov	fp, r2
 23f14f4:	469a      	mov	sl, r3
        if (win_size == 0) {
 23f14f6:	460f      	mov	r7, r1
    {
 23f14f8:	b091      	sub	sp, #68	; 0x44
        if (win_size == 0) {
 23f14fa:	2900      	cmp	r1, #0
 23f14fc:	f000 80fb 	beq.w	23f16f6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x20e>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f1500:	6840      	ldr	r0, [r0, #4]
        uint16_t pad_size = (win_size - 1) / 2;
 23f1502:	3901      	subs	r1, #1
 23f1504:	104e      	asrs	r6, r1, #1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f1506:	f021 0101 	bic.w	r1, r1, #1
 23f150a:	2300      	movs	r3, #0
 23f150c:	4401      	add	r1, r0
 23f150e:	68aa      	ldr	r2, [r5, #8]
 23f1510:	4668      	mov	r0, sp
 23f1512:	f7ff fca6 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1516:	9b00      	ldr	r3, [sp, #0]
 23f1518:	2b00      	cmp	r3, #0
 23f151a:	f000 80ea 	beq.w	23f16f2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x20a>
        uint16_t pad_size = (win_size - 1) / 2;
 23f151e:	b2b6      	uxth	r6, r6
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 23f1520:	4633      	mov	r3, r6
 23f1522:	4632      	mov	r2, r6
 23f1524:	4669      	mov	r1, sp
 23f1526:	4628      	mov	r0, r5
 23f1528:	f7ff fce6 	bl	23f0ef8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
 23f152c:	4604      	mov	r4, r0
 23f152e:	2800      	cmp	r0, #0
 23f1530:	d174      	bne.n	23f161c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23f1532:	4603      	mov	r3, r0
 23f1534:	2201      	movs	r2, #1
 23f1536:	9902      	ldr	r1, [sp, #8]
 23f1538:	a804      	add	r0, sp, #16
 23f153a:	f7ff fc92 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f153e:	9b04      	ldr	r3, [sp, #16]
 23f1540:	2b00      	cmp	r3, #0
 23f1542:	f000 80d4 	beq.w	23f16ee <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x206>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23f1546:	4623      	mov	r3, r4
 23f1548:	2201      	movs	r2, #1
 23f154a:	9902      	ldr	r1, [sp, #8]
 23f154c:	a808      	add	r0, sp, #32
 23f154e:	f7ff fc88 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1552:	9b08      	ldr	r3, [sp, #32]
 23f1554:	2b00      	cmp	r3, #0
 23f1556:	f000 80c8 	beq.w	23f16ea <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x202>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f155a:	686b      	ldr	r3, [r5, #4]
 23f155c:	42a3      	cmp	r3, r4
 23f155e:	d968      	bls.n	23f1632 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x14a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f1560:	9a02      	ldr	r2, [sp, #8]
 23f1562:	9b00      	ldr	r3, [sp, #0]
 23f1564:	fb02 f104 	mul.w	r1, r2, r4
 23f1568:	a80c      	add	r0, sp, #48	; 0x30
 23f156a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f156e:	4639      	mov	r1, r7
 23f1570:	f7ff fc77 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f1576:	2b00      	cmp	r3, #0
 23f1578:	d046      	beq.n	23f1608 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x120>
        if (input_matrix->cols != output_matrix->rows) {
 23f157a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f157c:	9b05      	ldr	r3, [sp, #20]
 23f157e:	429a      	cmp	r2, r3
 23f1580:	d155      	bne.n	23f162e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x146>
        if (output_matrix->cols != 1) {
 23f1582:	9b06      	ldr	r3, [sp, #24]
 23f1584:	2b01      	cmp	r3, #1
 23f1586:	d152      	bne.n	23f162e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x146>
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23f1588:	2300      	movs	r3, #0
 23f158a:	980e      	ldr	r0, [sp, #56]	; 0x38
 23f158c:	4298      	cmp	r0, r3
 23f158e:	d920      	bls.n	23f15d2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xea>
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f1590:	f04f 0c00 	mov.w	ip, #0
            float sum = 0.0f;
 23f1594:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 23f1708 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>
 23f1598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f159a:	990d      	ldr	r1, [sp, #52]	; 0x34
 23f159c:	0080      	lsls	r0, r0, #2
 23f159e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 23f15a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23f15a6:	4561      	cmp	r1, ip
 23f15a8:	d007      	beq.n	23f15ba <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xd2>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 23f15aa:	edd2 7a00 	vldr	s15, [r2]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f15ae:	f10c 0c01 	add.w	ip, ip, #1
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 23f15b2:	ee37 7a27 	vadd.f32	s14, s14, s15
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f15b6:	4402      	add	r2, r0
 23f15b8:	e7f5      	b.n	23f15a6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xbe>
            output_matrix->buffer[col] = sum / input_matrix->rows;
 23f15ba:	ee07 1a90 	vmov	s15, r1
 23f15be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f15c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 23f15c6:	9a04      	ldr	r2, [sp, #16]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23f15c8:	3301      	adds	r3, #1
            output_matrix->buffer[col] = sum / input_matrix->rows;
 23f15ca:	4472      	add	r2, lr
 23f15cc:	edc2 6a00 	vstr	s13, [r2]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23f15d0:	e7db      	b.n	23f158a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23f15d2:	2300      	movs	r3, #0
 23f15d4:	68a9      	ldr	r1, [r5, #8]
 23f15d6:	4299      	cmp	r1, r3
 23f15d8:	d911      	bls.n	23f15fe <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x116>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 23f15da:	fb01 3104 	mla	r1, r1, r4, r3
 23f15de:	682a      	ldr	r2, [r5, #0]
 23f15e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f15e4:	9904      	ldr	r1, [sp, #16]
 23f15e6:	edd2 7a00 	vldr	s15, [r2]
 23f15ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 23f15ee:	ed91 7a00 	vldr	s14, [r1]
 23f15f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23f15f6:	3301      	adds	r3, #1
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 23f15f8:	edc2 7a00 	vstr	s15, [r2]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23f15fc:	e7ea      	b.n	23f15d4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xec>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f15fe:	a80c      	add	r0, sp, #48	; 0x30
 23f1600:	f7ff fc44 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f1604:	3401      	adds	r4, #1
 23f1606:	e7a8      	b.n	23f155a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x72>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f1608:	4c40      	ldr	r4, [pc, #256]	; (23f170c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f160a:	a80c      	add	r0, sp, #48	; 0x30
 23f160c:	f7ff fc3e 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23f1610:	a808      	add	r0, sp, #32
 23f1612:	f7ff fc3b 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23f1616:	a804      	add	r0, sp, #16
 23f1618:	f7ff fc38 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f161c:	4668      	mov	r0, sp
 23f161e:	f7ff fc35 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
    }
 23f1622:	4620      	mov	r0, r4
 23f1624:	b011      	add	sp, #68	; 0x44
 23f1626:	ecbd 8b02 	vpop	{d8}
 23f162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f162e:	4c38      	ldr	r4, [pc, #224]	; (23f1710 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x228>)
 23f1630:	e7eb      	b.n	23f160a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x122>
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 23f1632:	4633      	mov	r3, r6
 23f1634:	4632      	mov	r2, r6
 23f1636:	4669      	mov	r1, sp
 23f1638:	4628      	mov	r0, r5
 23f163a:	f7ff fc5d 	bl	23f0ef8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
 23f163e:	4604      	mov	r4, r0
 23f1640:	2800      	cmp	r0, #0
 23f1642:	d1e5      	bne.n	23f1610 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f1644:	4680      	mov	r8, r0
 23f1646:	686b      	ldr	r3, [r5, #4]
 23f1648:	4543      	cmp	r3, r8
 23f164a:	d946      	bls.n	23f16da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f2>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f164c:	9a02      	ldr	r2, [sp, #8]
 23f164e:	9b00      	ldr	r3, [sp, #0]
 23f1650:	fb02 f108 	mul.w	r1, r2, r8
 23f1654:	a80c      	add	r0, sp, #48	; 0x30
 23f1656:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f165a:	4639      	mov	r1, r7
 23f165c:	f7ff fc01 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f1662:	b3a3      	cbz	r3, 23f16ce <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e6>
            if (variance_normalization == true) {
 23f1664:	f1bb 0f00 	cmp.w	fp, #0
 23f1668:	d02b      	beq.n	23f16c2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1da>
        return std_axis0_CMSIS(input_matrix, output_matrix);
 23f166a:	a908      	add	r1, sp, #32
 23f166c:	a80c      	add	r0, sp, #48	; 0x30
 23f166e:	f7ff fee7 	bl	23f1440 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
                if (ret != EIDSP_OK) {
 23f1672:	4606      	mov	r6, r0
 23f1674:	bb60      	cbnz	r0, 23f16d0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e8>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 23f1676:	9b02      	ldr	r3, [sp, #8]
 23f1678:	682a      	ldr	r2, [r5, #0]
 23f167a:	fb03 f308 	mul.w	r3, r3, r8
 23f167e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23f1682:	9b02      	ldr	r3, [sp, #8]
 23f1684:	42b3      	cmp	r3, r6
 23f1686:	d91c      	bls.n	23f16c2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1da>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f1688:	f8d9 0000 	ldr.w	r0, [r9]
 23f168c:	f7fb f8f4 	bl	23ec878 <__aeabi_f2d>
                                             (window_variance.buffer[col] + 1e-10);
 23f1690:	9b08      	ldr	r3, [sp, #32]
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f1692:	ec41 0b18 	vmov	d8, r0, r1
                                             (window_variance.buffer[col] + 1e-10);
 23f1696:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f169a:	6818      	ldr	r0, [r3, #0]
 23f169c:	f7fb f8ec 	bl	23ec878 <__aeabi_f2d>
 23f16a0:	a317      	add	r3, pc, #92	; (adr r3, 23f1700 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x218>)
 23f16a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f16a6:	f7fa ff89 	bl	23ec5bc <__adddf3>
 23f16aa:	4602      	mov	r2, r0
 23f16ac:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f16ae:	ec51 0b18 	vmov	r0, r1, d8
 23f16b2:	f7fb fa63 	bl	23ecb7c <__aeabi_ddiv>
 23f16b6:	f7fb fc2f 	bl	23ecf18 <__aeabi_d2f>
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23f16ba:	3601      	adds	r6, #1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f16bc:	f849 0b04 	str.w	r0, [r9], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23f16c0:	e7df      	b.n	23f1682 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f16c2:	a80c      	add	r0, sp, #48	; 0x30
 23f16c4:	f7ff fbe2 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f16c8:	f108 0801 	add.w	r8, r8, #1
 23f16cc:	e7bb      	b.n	23f1646 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x15e>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f16ce:	4e0f      	ldr	r6, [pc, #60]	; (23f170c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f16d0:	a80c      	add	r0, sp, #48	; 0x30
 23f16d2:	f7ff fbdb 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f16d6:	4634      	mov	r4, r6
 23f16d8:	e79a      	b.n	23f1610 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        if (scale) {
 23f16da:	f1ba 0f00 	cmp.w	sl, #0
 23f16de:	d097      	beq.n	23f1610 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
            ret = numpy::normalize(features_matrix);
 23f16e0:	4628      	mov	r0, r5
 23f16e2:	f7ff fc9d 	bl	23f1020 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 23f16e6:	4604      	mov	r4, r0
            if (ret != EIDSP_OK) {
 23f16e8:	e792      	b.n	23f1610 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23f16ea:	4c08      	ldr	r4, [pc, #32]	; (23f170c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f16ec:	e790      	b.n	23f1610 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23f16ee:	4c07      	ldr	r4, [pc, #28]	; (23f170c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f16f0:	e791      	b.n	23f1616 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12e>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f16f2:	4c06      	ldr	r4, [pc, #24]	; (23f170c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f16f4:	e792      	b.n	23f161c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
            return EIDSP_OK;
 23f16f6:	460c      	mov	r4, r1
 23f16f8:	e793      	b.n	23f1622 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x13a>
 23f16fa:	bf00      	nop
 23f16fc:	f3af 8000 	nop.w
 23f1700:	d9d7bdbb 	.word	0xd9d7bdbb
 23f1704:	3ddb7cdf 	.word	0x3ddb7cdf
 23f1708:	00000000 	.word	0x00000000
 23f170c:	fffffc16 	.word	0xfffffc16
 23f1710:	fffffc14 	.word	0xfffffc14

023f1714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 23f1714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f1718:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 23f171c:	4614      	mov	r4, r2
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 23f171e:	0875      	lsrs	r5, r6, #1
 23f1720:	3501      	adds	r5, #1
 23f1722:	429d      	cmp	r5, r3
 23f1724:	d12c      	bne.n	23f1780 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x6c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 23f1726:	9600      	str	r6, [sp, #0]
 23f1728:	f7ff fd8a 	bl	23f1240 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
 23f172c:	4680      	mov	r8, r0
 23f172e:	bb18      	cbnz	r0, 23f1778 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
            return r;
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23f1730:	ee07 6a90 	vmov	s15, r6
 23f1734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f1738:	ee17 0a90 	vmov	r0, s15
 23f173c:	f7fb f89c 	bl	23ec878 <__aeabi_f2d>
 23f1740:	4602      	mov	r2, r0
 23f1742:	460b      	mov	r3, r1
 23f1744:	2000      	movs	r0, #0
 23f1746:	4910      	ldr	r1, [pc, #64]	; (23f1788 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x74>)
 23f1748:	f7fb fa18 	bl	23ecb7c <__aeabi_ddiv>
 23f174c:	4606      	mov	r6, r0
 23f174e:	460f      	mov	r7, r1
 23f1750:	eb04 0585 	add.w	r5, r4, r5, lsl #2
                (out_buffer[ix] * out_buffer[ix]);
 23f1754:	edd4 7a00 	vldr	s15, [r4]
 23f1758:	ee67 7aa7 	vmul.f32	s15, s15, s15
 23f175c:	ee17 0a90 	vmov	r0, s15
 23f1760:	f7fb f88a 	bl	23ec878 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23f1764:	4632      	mov	r2, r6
 23f1766:	463b      	mov	r3, r7
 23f1768:	f7fb f8de 	bl	23ec928 <__aeabi_dmul>
 23f176c:	f7fb fbd4 	bl	23ecf18 <__aeabi_d2f>
 23f1770:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 23f1774:	42a5      	cmp	r5, r4
 23f1776:	d1ed      	bne.n	23f1754 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x40>
        }

        return EIDSP_OK;
    }
 23f1778:	4640      	mov	r0, r8
 23f177a:	b002      	add	sp, #8
 23f177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1780:	f8df 8008 	ldr.w	r8, [pc, #8]	; 23f178c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x78>
 23f1784:	e7f8      	b.n	23f1778 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
 23f1786:	bf00      	nop
 23f1788:	3ff00000 	.word	0x3ff00000
 23f178c:	fffffc14 	.word	0xfffffc14

023f1790 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>:
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
    {
        zero_handling(input->buffer, input->rows * input->cols);
 23f1790:	6881      	ldr	r1, [r0, #8]
 23f1792:	e9d0 3200 	ldrd	r3, r2, [r0]
 23f1796:	434a      	muls	r2, r1
                input[ix] = 1e-10;
 23f1798:	4908      	ldr	r1, [pc, #32]	; (23f17bc <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0x2c>)
 23f179a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
 23f179e:	4293      	cmp	r3, r2
 23f17a0:	d00b      	beq.n	23f17ba <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0x2a>
            if (input[ix] == 0) {
 23f17a2:	edd3 7a00 	vldr	s15, [r3]
 23f17a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f17aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
 23f17ae:	f103 0304 	add.w	r3, r3, #4
 23f17b2:	bf08      	it	eq
 23f17b4:	f843 1c04 	streq.w	r1, [r3, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
 23f17b8:	e7f1      	b.n	23f179e <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0xe>
    }
 23f17ba:	4770      	bx	lr
 23f17bc:	2edbe6ff 	.word	0x2edbe6ff

023f17c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     */
    static float frequency_to_mel(float f) {
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 23f17c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23f1824 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x64>
 23f17c4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 23f17c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        int32_t g = (int32_t) * ((int32_t *)&a);
 23f17cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 23f17d0:	ee17 3a90 	vmov	r3, s15
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 23f17d4:	4a14      	ldr	r2, [pc, #80]	; (23f1828 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x68>)
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23f17d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 23f182c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x6c>
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 23f17da:	441a      	add	r2, r3
 23f17dc:	0dd2      	lsrs	r2, r2, #23
 23f17de:	05d2      	lsls	r2, r2, #23
        g = g - e;
 23f17e0:	1a9b      	subs	r3, r3, r2
 23f17e2:	ee00 3a10 	vmov	s0, r3
        float f = m - 1.0f;
 23f17e6:	ee30 0a47 	vsub.f32	s0, s0, s14
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23f17ea:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23f1830 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x70>
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23f17ee:	ed9f 6a11 	vldr	s12, [pc, #68]	; 23f1834 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x74>
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23f17f2:	eea7 7a80 	vfma.f32	s14, s15, s0
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23f17f6:	eddf 7a10 	vldr	s15, [pc, #64]	; 23f1838 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x78>
        float s = f * f;
 23f17fa:	ee60 6a00 	vmul.f32	s13, s0, s0
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23f17fe:	eee6 7a00 	vfma.f32	s15, s12, s0
        r = fmaf(r, s, t);
 23f1802:	eee7 7a26 	vfma.f32	s15, s14, s13
        r = fmaf(r, s, f);
 23f1806:	eea7 0aa6 	vfma.f32	s0, s15, s13
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 23f180a:	ee07 2a90 	vmov	s15, r2
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 23f180e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23f183c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x7c>
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 23f1812:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 23f1816:	eea7 0a87 	vfma.f32	s0, s15, s14
#endif
    }
 23f181a:	eddf 7a09 	vldr	s15, [pc, #36]	; 23f1840 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x80>
 23f181e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f1822:	4770      	bx	lr
 23f1824:	442f0000 	.word	0x442f0000
 23f1828:	c0d55555 	.word	0xc0d55555
 23f182c:	3e6c6078 	.word	0x3e6c6078
 23f1830:	be8ef46d 	.word	0xbe8ef46d
 23f1834:	3ea9e51a 	.word	0x3ea9e51a
 23f1838:	beff712d 	.word	0xbeff712d
 23f183c:	3f317218 	.word	0x3f317218
 23f1840:	448ce000 	.word	0x448ce000

023f1844 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
  { return __builtin_expf(__x); }
 23f1844:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f1864 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x20>
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 23f1848:	b508      	push	{r3, lr}
 23f184a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 23f184e:	f008 fb37 	bl	23f9ec0 <expf>
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 23f1852:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23f1856:	ee30 0a67 	vsub.f32	s0, s0, s15
    }
 23f185a:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f1868 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x24>
 23f185e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f1862:	bd08      	pop	{r3, pc}
 23f1864:	448ce000 	.word	0x448ce000
 23f1868:	442f0000 	.word	0x442f0000

023f186c <_ZN2ei8speechpy10processing11preemphasisD1Ev>:
        ~preemphasis() {
 23f186c:	b510      	push	{r4, lr}
 23f186e:	4604      	mov	r4, r0
            if (_prev_buffer) {
 23f1870:	68c0      	ldr	r0, [r0, #12]
 23f1872:	b108      	cbz	r0, 23f1878 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0xc>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 23f1874:	f002 fa95 	bl	23f3da2 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
 23f1878:	6920      	ldr	r0, [r4, #16]
 23f187a:	b108      	cbz	r0, 23f1880 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x14>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 23f187c:	f002 fa91 	bl	23f3da2 <_Z7ei_freePv>
        }
 23f1880:	4620      	mov	r0, r4
 23f1882:	bd10      	pop	{r4, pc}
 23f1884:	0000      	movs	r0, r0
	...

023f1888 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 23f1888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f188c:	ed2d 8b04 	vpush	{d8-d9}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 23f1890:	1c8e      	adds	r6, r1, #2
    static int filterbanks(
 23f1892:	b08f      	sub	sp, #60	; 0x3c
 23f1894:	ee08 3a10 	vmov	s16, r3
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 23f1898:	ea4f 0986 	mov.w	r9, r6, lsl #2
    static int filterbanks(
 23f189c:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 23f18a0:	4604      	mov	r4, r0
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 23f18a2:	4648      	mov	r0, r9
    static int filterbanks(
 23f18a4:	4615      	mov	r5, r2
 23f18a6:	9101      	str	r1, [sp, #4]
 23f18a8:	9303      	str	r3, [sp, #12]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 23f18aa:	f002 fa76 	bl	23f3d9a <_Z9ei_mallocj>
        if (!mels) {
 23f18ae:	4607      	mov	r7, r0
 23f18b0:	b378      	cbz	r0, 23f1912 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 23f18b2:	6863      	ldr	r3, [r4, #4]
 23f18b4:	9a01      	ldr	r2, [sp, #4]
 23f18b6:	4293      	cmp	r3, r2
 23f18b8:	f040 818a 	bne.w	23f1bd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>
 23f18bc:	68a2      	ldr	r2, [r4, #8]
 23f18be:	42aa      	cmp	r2, r5
 23f18c0:	f040 8186 	bne.w	23f1bd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 23f18c4:	435a      	muls	r2, r3
 23f18c6:	2100      	movs	r1, #0
 23f18c8:	6820      	ldr	r0, [r4, #0]
 23f18ca:	f009 fe4f 	bl	23fb56c <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 23f18ce:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 23f18d2:	eef8 8a67 	vcvt.f32.u32	s17, s15
 23f18d6:	eeb0 0a68 	vmov.f32	s0, s17
 23f18da:	f7ff ff71 	bl	23f17c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f18de:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 23f18e2:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 23f18e6:	eef0 9a40 	vmov.f32	s19, s0
 23f18ea:	eeb0 0a49 	vmov.f32	s0, s18
 23f18ee:	f7ff ff67 	bl	23f17c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f18f2:	4630      	mov	r0, r6
 23f18f4:	eef0 0a40 	vmov.f32	s1, s0
 23f18f8:	4639      	mov	r1, r7
 23f18fa:	eeb0 0a69 	vmov.f32	s0, s19
 23f18fe:	f7ff fa5d 	bl	23f0dbc <_ZN2ei5numpy8linspaceEffmPf.isra.0>
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 23f1902:	4648      	mov	r0, r9
 23f1904:	f002 fa49 	bl	23f3d9a <_Z9ei_mallocj>
        if (!hertz) {
 23f1908:	4606      	mov	r6, r0
 23f190a:	b920      	cbnz	r0, 23f1916 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8e>
            ei_dsp_free(mels, mels_mem_size);
 23f190c:	4638      	mov	r0, r7
        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
        if (!freq_index) {
            ei_dsp_free(hertz, hertz_mem_size);
 23f190e:	f002 fa48 	bl	23f3da2 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f1912:	48b3      	ldr	r0, [pc, #716]	; (23f1be0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x358>)
 23f1914:	e157      	b.n	23f1bc6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33e>
 23f1916:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f191a:	9b01      	ldr	r3, [sp, #4]
 23f191c:	f103 0801 	add.w	r8, r3, #1
 23f1920:	fa1f f38a 	uxth.w	r3, sl
 23f1924:	4598      	cmp	r8, r3
 23f1926:	db2b      	blt.n	23f1980 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xf8>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 23f1928:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 23f192c:	ed92 0a00 	vldr	s0, [r2]
 23f1930:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 23f1934:	9302      	str	r3, [sp, #8]
 23f1936:	f7ff ff85 	bl	23f1844 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
                hertz[ix] = low_freq;
 23f193a:	eef4 8a40 	vcmp.f32	s17, s0
 23f193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1942:	fe38 0a80 	vselgt.f32	s0, s17, s0
                hertz[ix] = high_freq;
 23f1946:	eeb4 9a40 	vcmp.f32	s18, s0
 23f194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (ix == num_filter + 2 - 1) {
 23f194e:	9b02      	ldr	r3, [sp, #8]
                hertz[ix] = high_freq;
 23f1950:	bf48      	it	mi
 23f1952:	eeb0 0a49 	vmovmi.f32	s0, s18
            if (ix == num_filter + 2 - 1) {
 23f1956:	4598      	cmp	r8, r3
 23f1958:	d004      	beq.n	23f1964 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xdc>
 23f195a:	ed8b 0a00 	vstr	s0, [fp]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f195e:	f10a 0a01 	add.w	sl, sl, #1
 23f1962:	e7dd      	b.n	23f1920 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x98>
                hertz[ix] -= 0.001;
 23f1964:	ee10 0a10 	vmov	r0, s0
 23f1968:	f7fa ff86 	bl	23ec878 <__aeabi_f2d>
 23f196c:	a39a      	add	r3, pc, #616	; (adr r3, 23f1bd8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x350>)
 23f196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1972:	f7fa fe21 	bl	23ec5b8 <__aeabi_dsub>
 23f1976:	f7fb facf 	bl	23ecf18 <__aeabi_d2f>
 23f197a:	f8cb 0000 	str.w	r0, [fp]
 23f197e:	e7ee      	b.n	23f195e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xd6>
        ei_dsp_free(mels, mels_mem_size);
 23f1980:	4638      	mov	r0, r7
 23f1982:	f002 fa0e 	bl	23f3da2 <_Z7ei_freePv>
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 23f1986:	4648      	mov	r0, r9
 23f1988:	f002 fa07 	bl	23f3d9a <_Z9ei_mallocj>
        if (!freq_index) {
 23f198c:	4607      	mov	r7, r0
 23f198e:	b908      	cbnz	r0, 23f1994 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x10c>
            ei_dsp_free(hertz, hertz_mem_size);
 23f1990:	4630      	mov	r0, r6
 23f1992:	e7bc      	b.n	23f190e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x86>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 23f1994:	3501      	adds	r5, #1
 23f1996:	ee07 5a90 	vmov	s15, r5
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f199a:	2300      	movs	r3, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 23f199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f19a0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 23f19a4:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 23f19a8:	edd2 6a00 	vldr	s13, [r2]
 23f19ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 23f19b0:	ee86 7a88 	vdiv.f32	s14, s13, s16
  { return __builtin_floorf(__x); }
 23f19b4:	febb 7a47 	vrintm.f32	s14, s14
 23f19b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23f19bc:	ee17 2a10 	vmov	r2, s14
 23f19c0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f19c4:	3301      	adds	r3, #1
 23f19c6:	b29b      	uxth	r3, r3
 23f19c8:	4598      	cmp	r8, r3
 23f19ca:	daeb      	bge.n	23f19a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x11c>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 23f19cc:	4630      	mov	r0, r6
 23f19ce:	f002 f9e8 	bl	23f3da2 <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 23f19d2:	46b8      	mov	r8, r7
 23f19d4:	2500      	movs	r5, #0
            if (value < quantized_values_one_zero[mid]) {
 23f19d6:	f8df 920c 	ldr.w	r9, [pc, #524]	; 23f1be4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35c>
 23f19da:	9b01      	ldr	r3, [sp, #4]
 23f19dc:	42ab      	cmp	r3, r5
 23f19de:	f240 80e7 	bls.w	23f1bb0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x328>
            int left = freq_index[i];
 23f19e2:	f8d8 b000 	ldr.w	fp, [r8]
            int middle = freq_index[i + 1];
 23f19e6:	1c6b      	adds	r3, r5, #1
            int right = freq_index[i + 2];
 23f19e8:	f8d8 6008 	ldr.w	r6, [r8, #8]
            int middle = freq_index[i + 1];
 23f19ec:	9304      	str	r3, [sp, #16]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f19ee:	eba6 030b 	sub.w	r3, r6, fp
 23f19f2:	1c5a      	adds	r2, r3, #1
 23f19f4:	2101      	movs	r1, #1
 23f19f6:	9302      	str	r3, [sp, #8]
 23f19f8:	a806      	add	r0, sp, #24
 23f19fa:	2300      	movs	r3, #0
            int middle = freq_index[i + 1];
 23f19fc:	f108 0804 	add.w	r8, r8, #4
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1a00:	9205      	str	r2, [sp, #20]
            int middle = freq_index[i + 1];
 23f1a02:	ed98 8a00 	vldr	s16, [r8]
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1a06:	f7ff fa2c 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1a0a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 23f1a0e:	b919      	cbnz	r1, 23f1a18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x190>
 23f1a10:	a806      	add	r0, sp, #24
 23f1a12:	f7ff fa3b 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f1a16:	e77c      	b.n	23f1912 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8a>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 23f1a18:	ee07 ba90 	vmov	s15, fp
 23f1a1c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 23f1a20:	ee07 6a90 	vmov	s15, r6
 23f1a24:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23f1a28:	4610      	mov	r0, r2
 23f1a2a:	eef0 0a49 	vmov.f32	s1, s18
 23f1a2e:	eeb0 0a68 	vmov.f32	s0, s17
 23f1a32:	9205      	str	r2, [sp, #20]
 23f1a34:	f7ff f9c2 	bl	23f0dbc <_ZN2ei5numpy8linspaceEffmPf.isra.0>
     * @param left Starting index (assigned 0)
     * @param middle Index where 1.0 will be placed
     * @param right Ending index (assigned 0)
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
        EI_DSP_MATRIX(out, 1, x_size);
 23f1a38:	2300      	movs	r3, #0
 23f1a3a:	2101      	movs	r1, #1
 23f1a3c:	9a05      	ldr	r2, [sp, #20]
 23f1a3e:	a80a      	add	r0, sp, #40	; 0x28
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 23f1a40:	f8dd a018 	ldr.w	sl, [sp, #24]
 23f1a44:	f7ff fa0d 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f1a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1a4a:	2b00      	cmp	r3, #0
 23f1a4c:	d045      	beq.n	23f1ada <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x252>

        for (size_t ix = 0; ix < x_size; ix++) {
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1a4e:	ee18 2a10 	vmov	r2, s16
 23f1a52:	46d4      	mov	ip, sl
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1a54:	2300      	movs	r3, #0
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1a56:	eba2 0e0b 	sub.w	lr, r2, fp
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 23f1a5a:	1ab6      	subs	r6, r6, r2
 23f1a5c:	9a05      	ldr	r2, [sp, #20]
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1a5e:	429a      	cmp	r2, r3
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1a60:	990a      	ldr	r1, [sp, #40]	; 0x28
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1a62:	d936      	bls.n	23f1ad2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x24a>
            if (x[ix] > left && x[ix] <= middle) {
 23f1a64:	eddc 7a00 	vldr	s15, [ip]
 23f1a68:	eef4 8ae7 	vcmpe.f32	s17, s15
 23f1a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1a70:	ea4f 0083 	mov.w	r0, r3, lsl #2
 23f1a74:	d511      	bpl.n	23f1a9a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x212>
 23f1a76:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 23f1a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f1a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1a82:	d80a      	bhi.n	23f1a9a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x212>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1a84:	ee07 ea10 	vmov	s14, lr
 23f1a88:	ee77 7ae8 	vsub.f32	s15, s15, s17
 23f1a8c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 23f1a90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23f1a94:	4401      	add	r1, r0
 23f1a96:	ed81 7a00 	vstr	s14, [r1]
            if (x[ix] < right && middle <= x[ix]) {
 23f1a9a:	ecfc 7a01 	vldmia	ip!, {s15}
 23f1a9e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23f1aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1aa6:	dd12      	ble.n	23f1ace <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x246>
 23f1aa8:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 23f1aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f1ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1ab4:	db0b      	blt.n	23f1ace <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x246>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 23f1ab6:	ee07 6a10 	vmov	s14, r6
 23f1aba:	ee79 7a67 	vsub.f32	s15, s18, s15
 23f1abe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 23f1ac2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23f1ac6:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f1ac8:	4401      	add	r1, r0
 23f1aca:	ed81 7a00 	vstr	s14, [r1]
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1ace:	3301      	adds	r3, #1
 23f1ad0:	e7c5      	b.n	23f1a5e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1d6>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 23f1ad2:	4650      	mov	r0, sl
 23f1ad4:	0092      	lsls	r2, r2, #2
 23f1ad6:	f009 fd22 	bl	23fb51e <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
 23f1ada:	a80a      	add	r0, sp, #40	; 0x28
 23f1adc:	f7ff f9d6 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 23f1ae0:	2200      	movs	r2, #0
        if (value > quantized_values_one_zero[length - 1]) {
 23f1ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 23f1ae6:	9b02      	ldr	r3, [sp, #8]
 23f1ae8:	4293      	cmp	r3, r2
 23f1aea:	db5c      	blt.n	23f1ba6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31e>
                size_t index = (i * filterbanks->cols) + (left + zx);

                if (output_transposed) {
 23f1aec:	9903      	ldr	r1, [sp, #12]
                size_t index = (i * filterbanks->cols) + (left + zx);
 23f1aee:	68a3      	ldr	r3, [r4, #8]
 23f1af0:	eb0b 0002 	add.w	r0, fp, r2
                if (output_transposed) {
 23f1af4:	b999      	cbnz	r1, 23f1b1e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x296>
                size_t index = (i * filterbanks->cols) + (left + zx);
 23f1af6:	fb05 0003 	mla	r0, r5, r3, r0
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 23f1afa:	9b06      	ldr	r3, [sp, #24]
 23f1afc:	4939      	ldr	r1, [pc, #228]	; (23f1be4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35c>)
 23f1afe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f1b02:	edd3 7a00 	vldr	s15, [r3]
 23f1b06:	6823      	ldr	r3, [r4, #0]
 23f1b08:	4418      	add	r0, r3
        for (size_t ix = 0; ix < length; ix++) {
 23f1b0a:	2300      	movs	r3, #0
            if (quantized_values_one_zero[ix] == value) return ix;
 23f1b0c:	ecb1 7a01 	vldmia	r1!, {s14}
 23f1b10:	eef4 7a47 	vcmp.f32	s15, s14
 23f1b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1b18:	d105      	bne.n	23f1b26 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x29e>
            hi;
 23f1b1a:	b2db      	uxtb	r3, r3
 23f1b1c:	e03c      	b.n	23f1b98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
                    index = ((left + zx) * filterbanks->rows) + i;
 23f1b1e:	6863      	ldr	r3, [r4, #4]
 23f1b20:	fb03 5000 	mla	r0, r3, r0, r5
 23f1b24:	e7e9      	b.n	23f1afa <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x272>
        for (size_t ix = 0; ix < length; ix++) {
 23f1b26:	3301      	adds	r3, #1
 23f1b28:	2bef      	cmp	r3, #239	; 0xef
 23f1b2a:	d1ef      	bne.n	23f1b0c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x284>
        if (value < quantized_values_one_zero[0]) {
 23f1b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f1b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1b34:	d433      	bmi.n	23f1b9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x316>
        if (value > quantized_values_one_zero[length - 1]) {
 23f1b36:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f1b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1b3e:	dc30      	bgt.n	23f1ba2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31a>
        int hi = length - 1;
 23f1b40:	23ee      	movs	r3, #238	; 0xee
        int lo = 0;
 23f1b42:	2100      	movs	r1, #0
            int mid = (hi + lo) / 2;
 23f1b44:	18ce      	adds	r6, r1, r3
 23f1b46:	1076      	asrs	r6, r6, #1
            if (value < quantized_values_one_zero[mid]) {
 23f1b48:	eb09 0c86 	add.w	ip, r9, r6, lsl #2
 23f1b4c:	ed9c 7a00 	vldr	s14, [ip]
 23f1b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f1b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1b58:	d515      	bpl.n	23f1b86 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2fe>
                hi = mid - 1;
 23f1b5a:	1e73      	subs	r3, r6, #1
        while (lo <= hi) {
 23f1b5c:	428b      	cmp	r3, r1
 23f1b5e:	daf1      	bge.n	23f1b44 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2bc>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 23f1b60:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 23f1b64:	ed96 7a00 	vldr	s14, [r6]
 23f1b68:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 23f1b6c:	ed96 6a00 	vldr	s12, [r6]
 23f1b70:	ee37 7a67 	vsub.f32	s14, s14, s15
 23f1b74:	ee77 7ac6 	vsub.f32	s15, s15, s12
            hi;
 23f1b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f1b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1b80:	d5cb      	bpl.n	23f1b1a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x292>
 23f1b82:	b2cb      	uxtb	r3, r1
 23f1b84:	e008      	b.n	23f1b98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            } else if (value > quantized_values_one_zero[mid]) {
 23f1b86:	dd01      	ble.n	23f1b8c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x304>
                lo = mid + 1;
 23f1b88:	1c71      	adds	r1, r6, #1
 23f1b8a:	e7e7      	b.n	23f1b5c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d4>
                return quantized_values_one_zero[mid];
 23f1b8c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 23f1b90:	edcd 7a05 	vstr	s15, [sp, #20]
 23f1b94:	f89d 3014 	ldrb.w	r3, [sp, #20]
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 23f1b98:	7003      	strb	r3, [r0, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 23f1b9a:	3201      	adds	r2, #1
 23f1b9c:	e7a3      	b.n	23f1ae6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x25e>
            return quantized_values_one_zero[0];
 23f1b9e:	2300      	movs	r3, #0
 23f1ba0:	e7fa      	b.n	23f1b98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            return quantized_values_one_zero[length - 1];
 23f1ba2:	2301      	movs	r3, #1
 23f1ba4:	e7f8      	b.n	23f1b98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1ba6:	a806      	add	r0, sp, #24
 23f1ba8:	f7ff f970 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
 23f1bac:	9d04      	ldr	r5, [sp, #16]
 23f1bae:	e714      	b.n	23f19da <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x152>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 23f1bb0:	9b03      	ldr	r3, [sp, #12]
 23f1bb2:	b123      	cbz	r3, 23f1bbe <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x336>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
 23f1bb4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
 23f1bb8:	b29b      	uxth	r3, r3
            filterbanks->rows = filterbanks->cols;
 23f1bba:	6062      	str	r2, [r4, #4]
            filterbanks->cols = r;
 23f1bbc:	60a3      	str	r3, [r4, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 23f1bbe:	4638      	mov	r0, r7
 23f1bc0:	f002 f8ef 	bl	23f3da2 <_Z7ei_freePv>

        return EIDSP_OK;
 23f1bc4:	2000      	movs	r0, #0
    }
 23f1bc6:	b00f      	add	sp, #60	; 0x3c
 23f1bc8:	ecbd 8b04 	vpop	{d8-d9}
 23f1bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1bd0:	4805      	ldr	r0, [pc, #20]	; (23f1be8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x360>)
 23f1bd2:	e7f8      	b.n	23f1bc6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33e>
 23f1bd4:	f3af 8000 	nop.w
 23f1bd8:	d2f1a9fc 	.word	0xd2f1a9fc
 23f1bdc:	3f50624d 	.word	0x3f50624d
 23f1be0:	fffffc16 	.word	0xfffffc16
 23f1be4:	023fcc88 	.word	0x023fcc88
 23f1be8:	fffffc14 	.word	0xfffffc14

023f1bec <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>:
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE

EI_IMPULSE_ERROR fill_input_tensor_from_matrix(
    matrix_t *fmatrix,
    TfLiteTensor *input
) {
 23f1bec:	b538      	push	{r3, r4, r5, lr}
 23f1bee:	460b      	mov	r3, r1
    const size_t matrix_els = fmatrix->rows * fmatrix->cols;
 23f1bf0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23f1bf4:	434a      	muls	r2, r1

    switch (input->type) {
 23f1bf6:	7819      	ldrb	r1, [r3, #0]
 23f1bf8:	2903      	cmp	r1, #3
 23f1bfa:	d04a      	beq.n	23f1c92 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xa6>
 23f1bfc:	2909      	cmp	r1, #9
 23f1bfe:	d021      	beq.n	23f1c44 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x58>
 23f1c00:	2901      	cmp	r1, #1
 23f1c02:	d166      	bne.n	23f1cd2 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xe6>
        case kTfLiteFloat32: {
            if (input->bytes / 4 != matrix_els) {
 23f1c04:	6999      	ldr	r1, [r3, #24]
 23f1c06:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 23f1c0a:	d009      	beq.n	23f1c20 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x34>
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23f1c0c:	2900      	cmp	r1, #0
 23f1c0e:	bfb8      	it	lt
 23f1c10:	3103      	addlt	r1, #3
 23f1c12:	1089      	asrs	r1, r1, #2
            }
            break;
        }
        case kTfLiteUInt8: {
            if (input->bytes != matrix_els) {
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23f1c14:	4832      	ldr	r0, [pc, #200]	; (23f1ce0 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf4>)
 23f1c16:	f002 f893 	bl	23f3d40 <_Z9ei_printfPKcz>
                    (int)input->bytes, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
 23f1c1a:	f06f 0017 	mvn.w	r0, #23
 23f1c1e:	e006      	b.n	23f1c2e <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1c20:	2200      	movs	r2, #0
 23f1c22:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 23f1c26:	4361      	muls	r1, r4
 23f1c28:	4291      	cmp	r1, r2
 23f1c2a:	d801      	bhi.n	23f1c30 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x44>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
 23f1c2c:	2000      	movs	r0, #0
}
 23f1c2e:	bd38      	pop	{r3, r4, r5, pc}
                input->data.f[ix] = fmatrix->buffer[ix];
 23f1c30:	6801      	ldr	r1, [r0, #0]
 23f1c32:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23f1c36:	680c      	ldr	r4, [r1, #0]
 23f1c38:	6859      	ldr	r1, [r3, #4]
 23f1c3a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23f1c3e:	600c      	str	r4, [r1, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1c40:	3201      	adds	r2, #1
 23f1c42:	e7ee      	b.n	23f1c22 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x36>
            if (input->bytes != matrix_els) {
 23f1c44:	6999      	ldr	r1, [r3, #24]
 23f1c46:	4291      	cmp	r1, r2
 23f1c48:	d1e4      	bne.n	23f1c14 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1c4a:	2100      	movs	r1, #0
                input->data.int8[ix] = static_cast<int8_t>(
 23f1c4c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1c50:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23f1c54:	4362      	muls	r2, r4
 23f1c56:	428a      	cmp	r2, r1
 23f1c58:	d9e8      	bls.n	23f1c2c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23f1c5a:	6802      	ldr	r2, [r0, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 23f1c5c:	ed93 7a03 	vldr	s14, [r3, #12]
 23f1c60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f1c64:	edd2 6a00 	vldr	s13, [r2]
 23f1c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
  { return __builtin_roundf(__x); }
 23f1c6c:	fef8 7a67 	vrinta.f32	s15, s15
 23f1c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f1c74:	ee17 ca90 	vmov	ip, s15
 23f1c78:	691a      	ldr	r2, [r3, #16]
                input->data.int8[ix] = static_cast<int8_t>(
 23f1c7a:	685c      	ldr	r4, [r3, #4]
 23f1c7c:	4494      	add	ip, r2
 23f1c7e:	4662      	mov	r2, ip
 23f1c80:	2a7f      	cmp	r2, #127	; 0x7f
 23f1c82:	bfa8      	it	ge
 23f1c84:	227f      	movge	r2, #127	; 0x7f
 23f1c86:	42aa      	cmp	r2, r5
 23f1c88:	bfb8      	it	lt
 23f1c8a:	462a      	movlt	r2, r5
 23f1c8c:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1c8e:	3101      	adds	r1, #1
 23f1c90:	e7de      	b.n	23f1c50 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x64>
            if (input->bytes != matrix_els) {
 23f1c92:	6999      	ldr	r1, [r3, #24]
 23f1c94:	4291      	cmp	r1, r2
 23f1c96:	d1bd      	bne.n	23f1c14 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1c98:	2100      	movs	r1, #0
 23f1c9a:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23f1c9e:	4362      	muls	r2, r4
 23f1ca0:	428a      	cmp	r2, r1
 23f1ca2:	d9c3      	bls.n	23f1c2c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23f1ca4:	6802      	ldr	r2, [r0, #0]
 23f1ca6:	ed93 7a03 	vldr	s14, [r3, #12]
 23f1caa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f1cae:	edd2 6a00 	vldr	s13, [r2]
 23f1cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23f1cb6:	fef8 7a67 	vrinta.f32	s15, s15
 23f1cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f1cbe:	ee17 5a90 	vmov	r5, s15
 23f1cc2:	691a      	ldr	r2, [r3, #16]
                input->data.uint8[ix] = static_cast<uint8_t>(
 23f1cc4:	685c      	ldr	r4, [r3, #4]
 23f1cc6:	4415      	add	r5, r2
 23f1cc8:	f385 0208 	usat	r2, #8, r5
 23f1ccc:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1cce:	3101      	adds	r1, #1
 23f1cd0:	e7e3      	b.n	23f1c9a <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xae>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 23f1cd2:	4804      	ldr	r0, [pc, #16]	; (23f1ce4 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf8>)
 23f1cd4:	f002 f834 	bl	23f3d40 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 23f1cd8:	f06f 000c 	mvn.w	r0, #12
 23f1cdc:	e7a7      	b.n	23f1c2e <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
 23f1cde:	bf00      	nop
 23f1ce0:	023fc5e8 	.word	0x023fc5e8
 23f1ce4:	023fc629 	.word	0x023fc629

023f1ce8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 23f1ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1cec:	ed2d 8b04 	vpush	{d8-d9}

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (impulse->object_detection) {
 23f1cf0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
) {
 23f1cf4:	4607      	mov	r7, r0
 23f1cf6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    if (impulse->object_detection) {
 23f1cfa:	b304      	cbz	r4, 23f1d3e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x56>
        switch (impulse->object_detection_last_layer) {
 23f1cfc:	f990 3044 	ldrsb.w	r3, [r0, #68]	; 0x44
 23f1d00:	1e5a      	subs	r2, r3, #1
 23f1d02:	2a05      	cmp	r2, #5
 23f1d04:	d818      	bhi.n	23f1d38 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x50>
 23f1d06:	e8df f002 	tbb	[pc, r2]
 23f1d0a:	7b03      	.short	0x7b03
 23f1d0c:	7b0c7b0c 	.word	0x7b0c7b0c
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 23f1d10:	483d      	ldr	r0, [pc, #244]	; (23f1e08 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x120>)
 23f1d12:	f002 f815 	bl	23f3d40 <_Z9ei_printfPKcz>
                        output->data.f,
                        impulse->tflite_output_features_count);
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 23f1d16:	f06f 0009 	mvn.w	r0, #9
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
        }
    }

    return fill_res;
}
 23f1d1a:	ecbd 8b04 	vpop	{d8-d9}
 23f1d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
 23f1d22:	7809      	ldrb	r1, [r1, #0]
 23f1d24:	2909      	cmp	r1, #9
 23f1d26:	d06b      	beq.n	23f1e00 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                else if (output->type == kTfLiteFloat32) {
 23f1d28:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23f1d2c:	2b01      	cmp	r3, #1
 23f1d2e:	d067      	beq.n	23f1e00 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 23f1d30:	4836      	ldr	r0, [pc, #216]	; (23f1e0c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x124>)
 23f1d32:	f002 f805 	bl	23f3d40 <_Z9ei_printfPKcz>
 23f1d36:	e7ee      	b.n	23f1d16 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x2e>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 23f1d38:	4619      	mov	r1, r3
 23f1d3a:	4835      	ldr	r0, [pc, #212]	; (23f1e10 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x128>)
 23f1d3c:	e7f9      	b.n	23f1d32 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x4a>
        if (int8_output) {
 23f1d3e:	780b      	ldrb	r3, [r1, #0]
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23f1d40:	f8d1 8004 	ldr.w	r8, [r1, #4]
        if (int8_output) {
 23f1d44:	2b09      	cmp	r3, #9
 23f1d46:	d025      	beq.n	23f1d94 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xac>
 23f1d48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                                                                       bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
 23f1d4a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 23f1e14 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf_float(value);
            ei_printf("\n");
 23f1d4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23f1e18 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1d52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23f1d56:	42a3      	cmp	r3, r4
 23f1d58:	d92b      	bls.n	23f1db2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xca>
        float value = data[ix];
 23f1d5a:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
 23f1d5e:	ea4f 0984 	mov.w	r9, r4, lsl #2
 23f1d62:	b16e      	cbz	r6, 23f1d80 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x98>
            ei_printf("%s:\t", impulse->categories[ix]);
 23f1d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23f1d68:	4658      	mov	r0, fp
 23f1d6a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23f1d6e:	f001 ffe7 	bl	23f3d40 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23f1d72:	eeb0 0a48 	vmov.f32	s0, s16
 23f1d76:	f002 f803 	bl	23f3d80 <_Z15ei_printf_floatf>
            ei_printf("\n");
 23f1d7a:	4650      	mov	r0, sl
 23f1d7c:	f001 ffe0 	bl	23f3d40 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 23f1d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1d84:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23f1d86:	f853 3009 	ldr.w	r3, [r3, r9]
 23f1d8a:	3508      	adds	r5, #8
 23f1d8c:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23f1d8e:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1d92:	e7de      	b.n	23f1d52 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x6a>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23f1d94:	edd1 7a04 	vldr	s15, [r1, #16]
 23f1d98:	ed91 9a03 	vldr	s18, [r1, #12]
 23f1d9c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1da0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ei_printf("%s:\t", impulse->categories[ix]);
 23f1da2:	f8df b070 	ldr.w	fp, [pc, #112]	; 23f1e14 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf("\n");
 23f1da6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 23f1e18 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1daa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23f1dae:	42a3      	cmp	r3, r4
 23f1db0:	d801      	bhi.n	23f1db6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xce>
 23f1db2:	2000      	movs	r0, #0
 23f1db4:	e7b1      	b.n	23f1d1a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 23f1db6:	f918 3004 	ldrsb.w	r3, [r8, r4]
 23f1dba:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 23f1dbe:	ee08 3a10 	vmov	s16, r3
 23f1dc2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f1dc6:	ee38 8a68 	vsub.f32	s16, s16, s17
 23f1dca:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
 23f1dce:	b16e      	cbz	r6, 23f1dec <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x104>
            ei_printf("%s:\t", impulse->categories[ix]);
 23f1dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23f1dd4:	4658      	mov	r0, fp
 23f1dd6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23f1dda:	f001 ffb1 	bl	23f3d40 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23f1dde:	eeb0 0a48 	vmov.f32	s0, s16
 23f1de2:	f001 ffcd 	bl	23f3d80 <_Z15ei_printf_floatf>
            ei_printf("\n");
 23f1de6:	4648      	mov	r0, r9
 23f1de8:	f001 ffaa 	bl	23f3d40 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
 23f1dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1df0:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23f1df2:	f853 300a 	ldr.w	r3, [r3, sl]
 23f1df6:	3508      	adds	r5, #8
 23f1df8:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23f1dfa:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f1dfe:	e7d4      	b.n	23f1daa <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xc2>
                    fill_res = fill_result_struct_quantized_yolov5(
 23f1e00:	f06f 0014 	mvn.w	r0, #20
 23f1e04:	e789      	b.n	23f1d1a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
 23f1e06:	bf00      	nop
 23f1e08:	023fc64d 	.word	0x023fc64d
 23f1e0c:	023fc692 	.word	0x023fc692
 23f1e10:	023fc6c7 	.word	0x023fc6c7
 23f1e14:	023fc6fa 	.word	0x023fc6fa
 23f1e18:	023fc890 	.word	0x023fc890

023f1e1c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
 23f1e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f1e20:	4699      	mov	r9, r3
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {

    if(config->model_invoke() != kTfLiteOk) {
 23f1e22:	688b      	ldr	r3, [r1, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
 23f1e24:	4607      	mov	r7, r0
 23f1e26:	460d      	mov	r5, r1
 23f1e28:	4614      	mov	r4, r2
 23f1e2a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 23f1e2c:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    if(config->model_invoke() != kTfLiteOk) {
 23f1e30:	4798      	blx	r3
 23f1e32:	bb58      	cbnz	r0, 23f1e8c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x70>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 23f1e34:	f001 ff7e 	bl	23f3d34 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23f1e38:	1b00      	subs	r0, r0, r4
 23f1e3a:	eb61 0109 	sbc.w	r1, r1, r9
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23f1e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f1e42:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23f1e44:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23f1e48:	f7fb f8b6 	bl	23ecfb8 <__aeabi_ldivmod>
 23f1e4c:	4601      	mov	r1, r0
 23f1e4e:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 23f1e52:	f1b8 0f00 	cmp.w	r8, #0
 23f1e56:	d002      	beq.n	23f1e5e <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x42>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 23f1e58:	480e      	ldr	r0, [pc, #56]	; (23f1e94 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
 23f1e5a:	f001 ff71 	bl	23f3d40 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 23f1e5e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 23f1e62:	4638      	mov	r0, r7
 23f1e64:	e9cd 6800 	strd	r6, r8, [sp]
 23f1e68:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f1e6a:	f7ff ff3d 	bl	23f1ce8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>
 23f1e6e:	4604      	mov	r4, r0
        impulse, output, labels_tensor, scores_tensor, result, debug);

    config->model_reset(ei_aligned_free);
 23f1e70:	68eb      	ldr	r3, [r5, #12]
 23f1e72:	4809      	ldr	r0, [pc, #36]	; (23f1e98 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x7c>)
 23f1e74:	4798      	blx	r3

    if (fill_res != EI_IMPULSE_OK) {
 23f1e76:	b92c      	cbnz	r4, 23f1e84 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f1e78:	f001 ff5a 	bl	23f3d30 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
 23f1e7c:	3002      	adds	r0, #2
 23f1e7e:	bf08      	it	eq
 23f1e80:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
 23f1e84:	4620      	mov	r0, r4
 23f1e86:	b003      	add	sp, #12
 23f1e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_TFLITE_ERROR;
 23f1e8c:	f06f 0402 	mvn.w	r4, #2
 23f1e90:	e7f8      	b.n	23f1e84 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
 23f1e92:	bf00      	nop
 23f1e94:	023fc6ff 	.word	0x023fc6ff
 23f1e98:	023f0bb1 	.word	0x023f0bb1

023f1e9c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f1e9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f1ea0:	4604      	mov	r4, r0
 23f1ea2:	4689      	mov	r9, r1
 23f1ea4:	4692      	mov	sl, r2
 23f1ea6:	461e      	mov	r6, r3
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f1ea8:	2500      	movs	r5, #0
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f1eaa:	270c      	movs	r7, #12
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f1eac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f1eae:	42ab      	cmp	r3, r5
 23f1eb0:	d910      	bls.n	23f1ed4 <run_inference+0x38>
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f1eb2:	fb07 f005 	mul.w	r0, r7, r5
 23f1eb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23f1eb8:	9600      	str	r6, [sp, #0]
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f1eba:	eb03 0c00 	add.w	ip, r3, r0
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23f1ebe:	f853 8000 	ldr.w	r8, [r3, r0]
 23f1ec2:	4652      	mov	r2, sl
 23f1ec4:	4649      	mov	r1, r9
 23f1ec6:	4620      	mov	r0, r4
 23f1ec8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 23f1ecc:	47c0      	blx	r8
        if (res != EI_IMPULSE_OK) {
 23f1ece:	b930      	cbnz	r0, 23f1ede <run_inference+0x42>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f1ed0:	3501      	adds	r5, #1
 23f1ed2:	e7eb      	b.n	23f1eac <run_inference+0x10>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f1ed4:	f001 ff2c 	bl	23f3d30 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
 23f1ed8:	1c83      	adds	r3, r0, #2
 23f1eda:	bf18      	it	ne
 23f1edc:	2000      	movne	r0, #0
}
 23f1ede:	b002      	add	sp, #8
 23f1ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f1ee4 <setup>:
{
 23f1ee4:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f1ee6:	2000      	movs	r0, #0
 23f1ee8:	f005 f8ac 	bl	23f7044 <hal_timer_millis>
        while (_while() && !_condition()) {
 23f1eec:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23f1ef0:	4604      	mov	r4, r0
 23f1ef2:	2000      	movs	r0, #0
 23f1ef4:	f005 f8a6 	bl	23f7044 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f1ef8:	1b00      	subs	r0, r0, r4
 23f1efa:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f1efe:	42a8      	cmp	r0, r5
 23f1f00:	f171 0300 	sbcs.w	r3, r1, #0
 23f1f04:	d207      	bcs.n	23f1f16 <setup+0x32>
    waitFor(Serial.isConnected, 15000);
 23f1f06:	f005 febb 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f1f0a:	f005 feae 	bl	23f7c6a <_ZN9USBSerial11isConnectedEv>
 23f1f0e:	b910      	cbnz	r0, 23f1f16 <setup+0x32>
            spark_process();
 23f1f10:	f005 f932 	bl	23f7178 <spark_process>
        while (_while() && !_condition()) {
 23f1f14:	e7ed      	b.n	23f1ef2 <setup+0xe>
 23f1f16:	f005 feb3 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f1f1a:	f005 fea6 	bl	23f7c6a <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23f1f1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f1f22:	f005 fff7 	bl	23f7f14 <delay>
    ei_printf("Edge Impulse inference runner for Particle devices\r\n");
 23f1f26:	482a      	ldr	r0, [pc, #168]	; (23f1fd0 <setup+0xec>)
 23f1f28:	f001 ff0a 	bl	23f3d40 <_Z9ei_printfPKcz>
    int err = Microphone_PDM::instance()
 23f1f2c:	f004 fda2 	bl	23f6a74 <_ZN14Microphone_PDM8instanceEv>
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23f1f30:	2101      	movs	r1, #1
 23f1f32:	2208      	movs	r2, #8
 23f1f34:	e9c0 1204 	strd	r1, r2, [r0, #16]
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23f1f38:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .init();
 23f1f3c:	6803      	ldr	r3, [r0, #0]
 23f1f3e:	60c2      	str	r2, [r0, #12]
 23f1f40:	68db      	ldr	r3, [r3, #12]
 23f1f42:	4798      	blx	r3
    if (err) {
 23f1f44:	4601      	mov	r1, r0
 23f1f46:	b110      	cbz	r0, 23f1f4e <setup+0x6a>
        ei_printf("PDM decoder init err=%d", err);
 23f1f48:	4822      	ldr	r0, [pc, #136]	; (23f1fd4 <setup+0xf0>)
 23f1f4a:	f001 fef9 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("Inferencing settings:\n");
 23f1f4e:	4822      	ldr	r0, [pc, #136]	; (23f1fd8 <setup+0xf4>)
 23f1f50:	f001 fef6 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("\tInterval: %.2f ms.\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 23f1f54:	2200      	movs	r2, #0
 23f1f56:	4b21      	ldr	r3, [pc, #132]	; (23f1fdc <setup+0xf8>)
 23f1f58:	4821      	ldr	r0, [pc, #132]	; (23f1fe0 <setup+0xfc>)
 23f1f5a:	f001 fef1 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("\tFrame size: %d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 23f1f5e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f1f62:	4820      	ldr	r0, [pc, #128]	; (23f1fe4 <setup+0x100>)
 23f1f64:	f001 feec 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("\tSample length: %d ms.\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 23f1f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23f1f6c:	481e      	ldr	r0, [pc, #120]	; (23f1fe8 <setup+0x104>)
 23f1f6e:	f001 fee7 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("\tNo. of classes: %d\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 23f1f72:	2109      	movs	r1, #9
 23f1f74:	481d      	ldr	r0, [pc, #116]	; (23f1fec <setup+0x108>)
 23f1f76:	f001 fee3 	bl	23f3d40 <_Z9ei_printfPKcz>
    inference.buffer = (int16_t *)malloc(n_samples * sizeof(int16_t));
 23f1f7a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 23f1f7e:	f005 fa05 	bl	23f738c <malloc>
 23f1f82:	4c1b      	ldr	r4, [pc, #108]	; (23f1ff0 <setup+0x10c>)
 23f1f84:	6020      	str	r0, [r4, #0]
    if(inference.buffer == NULL) {
 23f1f86:	b1b0      	cbz	r0, 23f1fb6 <setup+0xd2>
    inference.n_samples  = n_samples;
 23f1f88:	2300      	movs	r3, #0
 23f1f8a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
    inference.buf_ready  = 0;
 23f1f8e:	7123      	strb	r3, [r4, #4]
    inference.n_samples  = n_samples;
 23f1f90:	e9c4 3202 	strd	r3, r2, [r4, #8]
    if (Microphone_PDM::instance().start()) {
 23f1f94:	f004 fd6e 	bl	23f6a74 <_ZN14Microphone_PDM8instanceEv>
 23f1f98:	6803      	ldr	r3, [r0, #0]
 23f1f9a:	695b      	ldr	r3, [r3, #20]
 23f1f9c:	4798      	blx	r3
 23f1f9e:	b188      	cbz	r0, 23f1fc4 <setup+0xe0>
        ei_printf("Failed to start PDM!");
 23f1fa0:	4814      	ldr	r0, [pc, #80]	; (23f1ff4 <setup+0x110>)
 23f1fa2:	f001 fecd 	bl	23f3d40 <_Z9ei_printfPKcz>
/**
 * @brief      Stop PDM and release buffers
 */
static void microphone_inference_end(void)
{
    Microphone_PDM::instance().stop();
 23f1fa6:	f004 fd65 	bl	23f6a74 <_ZN14Microphone_PDM8instanceEv>
 23f1faa:	6803      	ldr	r3, [r0, #0]
 23f1fac:	699b      	ldr	r3, [r3, #24]
 23f1fae:	4798      	blx	r3
    free(inference.buffer);
 23f1fb0:	6820      	ldr	r0, [r4, #0]
 23f1fb2:	f005 f9f9 	bl	23f73a8 <free>
}
 23f1fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ei_printf("ERR: Could not allocate audio buffer (size %d), this could be due to the window length of your model\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT);
 23f1fba:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f1fbe:	480e      	ldr	r0, [pc, #56]	; (23f1ff8 <setup+0x114>)
 23f1fc0:	f001 bebe 	b.w	23f3d40 <_Z9ei_printfPKcz>
    pinMode(D7, OUTPUT);
 23f1fc4:	2101      	movs	r1, #1
}
 23f1fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pinMode(D7, OUTPUT);
 23f1fca:	2007      	movs	r0, #7
 23f1fcc:	f007 bac4 	b.w	23f9558 <pinMode>
 23f1fd0:	023fc71c 	.word	0x023fc71c
 23f1fd4:	023fc751 	.word	0x023fc751
 23f1fd8:	023fc769 	.word	0x023fc769
 23f1fdc:	3fb00000 	.word	0x3fb00000
 23f1fe0:	023fc780 	.word	0x023fc780
 23f1fe4:	023fc795 	.word	0x023fc795
 23f1fe8:	023fc7a6 	.word	0x023fc7a6
 23f1fec:	023fc7be 	.word	0x023fc7be
 23f1ff0:	1007a5c8 	.word	0x1007a5c8
 23f1ff4:	023fc7d3 	.word	0x023fc7d3
 23f1ff8:	023fc7e8 	.word	0x023fc7e8

023f1ffc <_Z22print_inference_result19ei_impulse_result_t>:
void print_inference_result(ei_impulse_result_t result) {
 23f1ffc:	b084      	sub	sp, #16
 23f1ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f2002:	ac06      	add	r4, sp, #24
 23f2004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
 23f2008:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 23f200c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 23f200e:	4811      	ldr	r0, [pc, #68]	; (23f2054 <_Z22print_inference_result19ei_impulse_result_t+0x58>)
 23f2010:	f001 fe96 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("Predictions:\r\n");
 23f2014:	4810      	ldr	r0, [pc, #64]	; (23f2058 <_Z22print_inference_result19ei_impulse_result_t+0x5c>)
 23f2016:	4625      	mov	r5, r4
 23f2018:	f001 fe92 	bl	23f3d40 <_Z9ei_printfPKcz>
 23f201c:	2400      	movs	r4, #0
 23f201e:	4e0f      	ldr	r6, [pc, #60]	; (23f205c <_Z22print_inference_result19ei_impulse_result_t+0x60>)
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23f2020:	f8df 8040 	ldr.w	r8, [pc, #64]	; 23f2064 <_Z22print_inference_result19ei_impulse_result_t+0x68>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23f2024:	4f0e      	ldr	r7, [pc, #56]	; (23f2060 <_Z22print_inference_result19ei_impulse_result_t+0x64>)
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23f2026:	4640      	mov	r0, r8
 23f2028:	f856 1b04 	ldr.w	r1, [r6], #4
 23f202c:	f001 fe88 	bl	23f3d40 <_Z9ei_printfPKcz>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23f2030:	68e8      	ldr	r0, [r5, #12]
 23f2032:	f7fa fc21 	bl	23ec878 <__aeabi_f2d>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23f2036:	3401      	adds	r4, #1
        ei_printf("%.5f\r\n", result.classification[i].value);
 23f2038:	4602      	mov	r2, r0
 23f203a:	460b      	mov	r3, r1
 23f203c:	4638      	mov	r0, r7
 23f203e:	f001 fe7f 	bl	23f3d40 <_Z9ei_printfPKcz>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23f2042:	2c09      	cmp	r4, #9
 23f2044:	f105 0508 	add.w	r5, r5, #8
 23f2048:	d1ed      	bne.n	23f2026 <_Z22print_inference_result19ei_impulse_result_t+0x2a>
}
 23f204a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23f204e:	b004      	add	sp, #16
 23f2050:	4770      	bx	lr
 23f2052:	bf00      	nop
 23f2054:	023fc84f 	.word	0x023fc84f
 23f2058:	023fc883 	.word	0x023fc883
 23f205c:	10079970 	.word	0x10079970
 23f2060:	023fc899 	.word	0x023fc899
 23f2064:	023fc892 	.word	0x023fc892

023f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f2068:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f206a:	2614      	movs	r6, #20
 23f206c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f2070:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f2072:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f2076:	42ae      	cmp	r6, r5
 23f2078:	d004      	beq.n	23f2084 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f207a:	4628      	mov	r0, r5
 23f207c:	f007 f850 	bl	23f9120 <_ZN6StringD1Ev>
 23f2080:	3514      	adds	r5, #20
 23f2082:	e7f8      	b.n	23f2076 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f2084:	6820      	ldr	r0, [r4, #0]
 23f2086:	f005 f98f 	bl	23f73a8 <free>
    AllocatorT::free(data_);
}
 23f208a:	4620      	mov	r0, r4
 23f208c:	bd70      	pop	{r4, r5, r6, pc}

023f208e <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 23f208e:	b510      	push	{r4, lr}
 23f2090:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23f2092:	6840      	ldr	r0, [r0, #4]
 23f2094:	b108      	cbz	r0, 23f209a <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
 23f2096:	6823      	ldr	r3, [r4, #0]
 23f2098:	4798      	blx	r3
	__ptr = pointer();
      }
 23f209a:	4620      	mov	r0, r4
 23f209c:	bd10      	pop	{r4, pc}
	...

023f20a0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb>:
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 23f20a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f20a4:	b0cb      	sub	sp, #300	; 0x12c
 23f20a6:	461c      	mov	r4, r3
 23f20a8:	4615      	mov	r5, r2
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f20aa:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
 23f20ae:	4680      	mov	r8, r0
 23f20b0:	4689      	mov	r9, r1
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 23f20b2:	f001 fe3f 	bl	23f3d34 <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f20b6:	4b1c      	ldr	r3, [pc, #112]	; (23f2128 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x88>)
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f20b8:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 23f20bc:	9308      	str	r3, [sp, #32]
 23f20be:	2300      	movs	r3, #0
 23f20c0:	af2a      	add	r7, sp, #168	; 0xa8
 23f20c2:	ae3a      	add	r6, sp, #232	; 0xe8
    uint64_t ctx_start_us = ei_read_timer_us();
 23f20c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 23f20c8:	9309      	str	r3, [sp, #36]	; 0x24
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f20ca:	4620      	mov	r0, r4
 23f20cc:	465b      	mov	r3, fp
 23f20ce:	9701      	str	r7, [sp, #4]
 23f20d0:	9600      	str	r6, [sp, #0]
 23f20d2:	aa0a      	add	r2, sp, #40	; 0x28
 23f20d4:	a906      	add	r1, sp, #24
 23f20d6:	f7fe fdc9 	bl	23f0c6c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23f20da:	4604      	mov	r4, r0
 23f20dc:	b9e8      	cbnz	r0, 23f211a <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x7a>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input);
 23f20de:	4648      	mov	r0, r9
 23f20e0:	a90a      	add	r1, sp, #40	; 0x28
 23f20e2:	f7ff fd83 	bl	23f1bec <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>
    if (input_res != EI_IMPULSE_OK) {
 23f20e6:	4604      	mov	r4, r0
 23f20e8:	b9b8      	cbnz	r0, 23f211a <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x7a>
        return input_res;
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f20ea:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 23f20ee:	4651      	mov	r1, sl
 23f20f0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 23f20f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f20f8:	4640      	mov	r0, r8
 23f20fa:	e9cd 6701 	strd	r6, r7, [sp, #4]
 23f20fe:	f8cd b000 	str.w	fp, [sp]
 23f2102:	f7ff fe8b 	bl	23f1e1c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
 23f2106:	4604      	mov	r4, r0
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23f2108:	f001 fe14 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f210c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23f2110:	1ac0      	subs	r0, r0, r3
 23f2112:	eb61 0102 	sbc.w	r1, r1, r2
 23f2116:	e9c5 013c 	strd	r0, r1, [r5, #240]	; 0xf0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23f211a:	a808      	add	r0, sp, #32
 23f211c:	f7ff ffb7 	bl	23f208e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
 23f2120:	4620      	mov	r0, r4
 23f2122:	b04b      	add	sp, #300	; 0x12c
 23f2124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f2128:	023f0bb1 	.word	0x023f0bb1

023f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 23f212c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f212e:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f2130:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f2132:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
 23f2136:	b90b      	cbnz	r3, 23f213c <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
 23f2138:	f007 fbfc 	bl	23f9934 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f213c:	68c4      	ldr	r4, [r0, #12]
 23f213e:	ab01      	add	r3, sp, #4
 23f2140:	aa02      	add	r2, sp, #8
 23f2142:	a903      	add	r1, sp, #12
 23f2144:	47a0      	blx	r4
    }
 23f2146:	b004      	add	sp, #16
 23f2148:	bd10      	pop	{r4, pc}
	...

023f214c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
        int get_data(size_t offset, size_t length, float *out_buffer) {
 23f214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2150:	ed2d 8b04 	vpush	{d8-d9}
 23f2154:	4698      	mov	r8, r3
            if (!_prev_buffer || !_end_of_signal_buffer) {
 23f2156:	68c3      	ldr	r3, [r0, #12]
        int get_data(size_t offset, size_t length, float *out_buffer) {
 23f2158:	4604      	mov	r4, r0
 23f215a:	460e      	mov	r6, r1
 23f215c:	4617      	mov	r7, r2
 23f215e:	b085      	sub	sp, #20
            if (!_prev_buffer || !_end_of_signal_buffer) {
 23f2160:	2b00      	cmp	r3, #0
 23f2162:	d07a      	beq.n	23f225a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
 23f2164:	6902      	ldr	r2, [r0, #16]
 23f2166:	2a00      	cmp	r2, #0
 23f2168:	d077      	beq.n	23f225a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
            if (offset + length > _signal->total_length) {
 23f216a:	6800      	ldr	r0, [r0, #0]
 23f216c:	eb01 0a07 	add.w	sl, r1, r7
 23f2170:	6902      	ldr	r2, [r0, #16]
 23f2172:	4592      	cmp	sl, r2
 23f2174:	d873      	bhi.n	23f225e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x112>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 23f2176:	6862      	ldr	r2, [r4, #4]
 23f2178:	1a89      	subs	r1, r1, r2
 23f217a:	d547      	bpl.n	23f220c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xc0>
            ret = _signal->get_data(offset, length, out_buffer);
 23f217c:	4643      	mov	r3, r8
 23f217e:	463a      	mov	r2, r7
 23f2180:	4631      	mov	r1, r6
 23f2182:	6820      	ldr	r0, [r4, #0]
 23f2184:	f7ff ffd2 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
 23f2188:	4605      	mov	r5, r0
 23f218a:	2800      	cmp	r0, #0
 23f218c:	d143      	bne.n	23f2216 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23f218e:	46c3      	mov	fp, r8
            bool all_between_min_1_and_1 = true;
 23f2190:	f04f 0901 	mov.w	r9, #1
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 23f2194:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 23f2198:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
            for (size_t ix = 0; ix < length; ix++) {
 23f219c:	45b2      	cmp	sl, r6
 23f219e:	d043      	beq.n	23f2228 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xdc>
                float now = out_buffer[ix];
 23f21a0:	ed9b 8a00 	vldr	s16, [fp]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 23f21a4:	6863      	ldr	r3, [r4, #4]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23f21a6:	ed94 7a02 	vldr	s14, [r4, #8]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 23f21aa:	42b3      	cmp	r3, r6
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23f21ac:	bf8a      	itet	hi
 23f21ae:	6923      	ldrhi	r3, [r4, #16]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 23f21b0:	68e3      	ldrls	r3, [r4, #12]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23f21b2:	eb03 0386 	addhi.w	r3, r3, r6, lsl #2
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 23f21b6:	edd3 6a00 	vldr	s13, [r3]
 23f21ba:	eef0 7a48 	vmov.f32	s15, s16
 23f21be:	eee6 7ac7 	vfms.f32	s15, s13, s14
 23f21c2:	eceb 7a01 	vstmia	fp!, {s15}
                if (_rescale && all_between_min_1_and_1) {
 23f21c6:	7e23      	ldrb	r3, [r4, #24]
 23f21c8:	b183      	cbz	r3, 23f21ec <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
 23f21ca:	f1b9 0f00 	cmp.w	r9, #0
 23f21ce:	d00d      	beq.n	23f21ec <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 23f21d0:	eef4 7ae8 	vcmpe.f32	s15, s17
 23f21d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f21d8:	d423      	bmi.n	23f2222 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd6>
 23f21da:	eef4 7ac9 	vcmpe.f32	s15, s18
 23f21de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f21e2:	bfd4      	ite	le
 23f21e4:	f04f 0901 	movle.w	r9, #1
 23f21e8:	f04f 0900 	movgt.w	r9, #0
                if (_shift != 1) {
 23f21ec:	6861      	ldr	r1, [r4, #4]
 23f21ee:	2901      	cmp	r1, #1
 23f21f0:	d004      	beq.n	23f21fc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xb0>
                    numpy::roll(_prev_buffer, _shift, -1);
 23f21f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f21f6:	68e0      	ldr	r0, [r4, #12]
 23f21f8:	f7fe fe52 	bl	23f0ea0 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
 23f21fc:	6862      	ldr	r2, [r4, #4]
 23f21fe:	68e3      	ldr	r3, [r4, #12]
 23f2200:	3601      	adds	r6, #1
 23f2202:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f2206:	ed03 8a01 	vstr	s16, [r3, #-4]
            for (size_t ix = 0; ix < length; ix++) {
 23f220a:	e7c7      	b.n	23f219c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x50>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 23f220c:	f7ff ff8e 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (ret != 0) {
 23f2210:	4605      	mov	r5, r0
 23f2212:	2800      	cmp	r0, #0
 23f2214:	d0b2      	beq.n	23f217c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x30>
        }
 23f2216:	4628      	mov	r0, r5
 23f2218:	b005      	add	sp, #20
 23f221a:	ecbd 8b04 	vpop	{d8-d9}
 23f221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f2222:	f04f 0900 	mov.w	r9, #0
 23f2226:	e7e1      	b.n	23f21ec <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
            _next_offset_should_be += length;
 23f2228:	6963      	ldr	r3, [r4, #20]
 23f222a:	443b      	add	r3, r7
 23f222c:	6163      	str	r3, [r4, #20]
            if (_rescale && !all_between_min_1_and_1) {
 23f222e:	7e23      	ldrb	r3, [r4, #24]
 23f2230:	2b00      	cmp	r3, #0
 23f2232:	d0f0      	beq.n	23f2216 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23f2234:	f1b9 0f00 	cmp.w	r9, #0
 23f2238:	d1ed      	bne.n	23f2216 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                matrix_t scale_matrix(length, 1, out_buffer);
 23f223a:	4643      	mov	r3, r8
 23f223c:	2201      	movs	r2, #1
 23f223e:	4639      	mov	r1, r7
 23f2240:	4668      	mov	r0, sp
 23f2242:	f7fe fe0e 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
        if (scale == 1.0f) return EIDSP_OK;
 23f2246:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23f2264 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x118>
 23f224a:	4668      	mov	r0, sp
 23f224c:	f7fe fcec 	bl	23f0c28 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
                if (ret != 0) {
 23f2250:	4605      	mov	r5, r0
                    EIDSP_ERR(ret);
 23f2252:	4668      	mov	r0, sp
                matrix_t scale_matrix(length, 1, out_buffer);
 23f2254:	f7fe fe1a 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f2258:	e7dd      	b.n	23f2216 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f225a:	4d03      	ldr	r5, [pc, #12]	; (23f2268 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11c>)
 23f225c:	e7db      	b.n	23f2216 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 23f225e:	4d03      	ldr	r5, [pc, #12]	; (23f226c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x120>)
 23f2260:	e7d9      	b.n	23f2216 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23f2262:	bf00      	nop
 23f2264:	38000000 	.word	0x38000000
 23f2268:	fffffc16 	.word	0xfffffc16
 23f226c:	fffffc0e 	.word	0xfffffc0e

023f2270 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 23f2270:	b508      	push	{r3, lr}
 23f2272:	4613      	mov	r3, r2
    return preemphasis->get_data(offset, length, out_ptr);
 23f2274:	460a      	mov	r2, r1
 23f2276:	4601      	mov	r1, r0
 23f2278:	4802      	ldr	r0, [pc, #8]	; (23f2284 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x14>)
 23f227a:	6800      	ldr	r0, [r0, #0]
 23f227c:	f7ff ff66 	bl	23f214c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
}
 23f2280:	bd08      	pop	{r3, pc}
 23f2282:	bf00      	nop
 23f2284:	1007a5d8 	.word	0x1007a5d8

023f2288 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f2288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f228a:	0097      	lsls	r7, r2, #2
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f228c:	4604      	mov	r4, r0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 23f228e:	e9c0 1200 	strd	r1, r2, [r0]
 23f2292:	7603      	strb	r3, [r0, #24]
 23f2294:	ed80 0a02 	vstr	s0, [r0, #8]
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f2298:	460e      	mov	r6, r1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f229a:	4638      	mov	r0, r7
 23f229c:	2101      	movs	r1, #1
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f229e:	4615      	mov	r5, r2
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f22a0:	f001 fd7d 	bl	23f3d9e <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f22a4:	2101      	movs	r1, #1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f22a6:	60e0      	str	r0, [r4, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f22a8:	4638      	mov	r0, r7
 23f22aa:	f001 fd78 	bl	23f3d9e <_Z9ei_callocjj>
            _next_offset_should_be = 0;
 23f22ae:	2300      	movs	r3, #0
            if (shift < 0) {
 23f22b0:	429d      	cmp	r5, r3
            _next_offset_should_be = 0;
 23f22b2:	6163      	str	r3, [r4, #20]
                _shift = signal->total_length + shift;
 23f22b4:	bfb8      	it	lt
 23f22b6:	6933      	ldrlt	r3, [r6, #16]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f22b8:	6120      	str	r0, [r4, #16]
                _shift = signal->total_length + shift;
 23f22ba:	bfbc      	itt	lt
 23f22bc:	195b      	addlt	r3, r3, r5
 23f22be:	6063      	strlt	r3, [r4, #4]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 23f22c0:	68e3      	ldr	r3, [r4, #12]
 23f22c2:	b13b      	cbz	r3, 23f22d4 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
 23f22c4:	b130      	cbz	r0, 23f22d4 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 23f22c6:	6931      	ldr	r1, [r6, #16]
 23f22c8:	4603      	mov	r3, r0
 23f22ca:	462a      	mov	r2, r5
 23f22cc:	4630      	mov	r0, r6
 23f22ce:	1b49      	subs	r1, r1, r5
 23f22d0:	f7ff ff2c 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
        }
 23f22d4:	4620      	mov	r0, r4
 23f22d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f22d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f22d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f22dc:	ed2d 8b02 	vpush	{d8}
 23f22e0:	4606      	mov	r6, r0
 23f22e2:	460f      	mov	r7, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f22e4:	68d0      	ldr	r0, [r2, #12]
 23f22e6:	4942      	ldr	r1, [pc, #264]	; (23f23f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>)
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f22e8:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f22ea:	f8d2 b008 	ldr.w	fp, [r2, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f22ee:	f7fb f861 	bl	23ed3b4 <strcmp>
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f22f2:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f22f4:	2800      	cmp	r0, #0
 23f22f6:	bf0c      	ite	eq
 23f22f8:	f04f 0a01 	moveq.w	sl, #1
 23f22fc:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
 23f2300:	4625      	mov	r5, r4

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f2302:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 23f23f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f2306:	eddf 8a3c 	vldr	s17, [pc, #240]	; 23f23f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>
    size_t bytes_left = signal->total_length;
 23f230a:	f8d6 8010 	ldr.w	r8, [r6, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f230e:	6933      	ldr	r3, [r6, #16]
 23f2310:	42a3      	cmp	r3, r4
 23f2312:	d96b      	bls.n	23f23ec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23f2314:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f2318:	46c1      	mov	r9, r8
 23f231a:	bf28      	it	cs
 23f231c:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2320:	2300      	movs	r3, #0
 23f2322:	465a      	mov	r2, fp
 23f2324:	4649      	mov	r1, r9
 23f2326:	4668      	mov	r0, sp
 23f2328:	f7fe fd9b 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23f232c:	9b00      	ldr	r3, [sp, #0]
 23f232e:	b943      	cbnz	r3, 23f2342 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f2330:	4668      	mov	r0, sp
 23f2332:	f7fe fdab 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f2336:	4831      	ldr	r0, [pc, #196]	; (23f23fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
 23f2338:	b005      	add	sp, #20
 23f233a:	ecbd 8b02 	vpop	{d8}
 23f233e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23f2342:	464a      	mov	r2, r9
 23f2344:	4621      	mov	r1, r4
 23f2346:	4630      	mov	r0, r6
 23f2348:	f7ff fef0 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f234c:	2200      	movs	r2, #0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f234e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 23f2400 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
 23f2352:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 23f2404 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f2356:	454a      	cmp	r2, r9
 23f2358:	d040      	beq.n	23f23dc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f235a:	9b00      	ldr	r3, [sp, #0]
            if (channel_count == 3) {
 23f235c:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f2360:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f2364:	edd3 7a00 	vldr	s15, [r3]
 23f2368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23f236c:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f2370:	f3c3 4107 	ubfx	r1, r3, #16, #8
 23f2374:	ee07 1a90 	vmov	s15, r1
 23f2378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f237c:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f2380:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f2384:	ee07 1a90 	vmov	s15, r1
 23f2388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f238c:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f238e:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f2392:	ee07 3a90 	vmov	s15, r3
 23f2396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
 23f239a:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f239c:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
 23f23a0:	ea4f 0085 	mov.w	r0, r5, lsl #2
 23f23a4:	f105 0101 	add.w	r1, r5, #1
 23f23a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            if (channel_count == 3) {
 23f23ac:	d10d      	bne.n	23f23ca <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = r;
 23f23ae:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
 23f23b2:	683b      	ldr	r3, [r7, #0]
                output_matrix->buffer[output_ix++] = b;
 23f23b4:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = g;
 23f23b6:	4403      	add	r3, r0
 23f23b8:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
 23f23bc:	683b      	ldr	r3, [r7, #0]
 23f23be:	4403      	add	r3, r0
 23f23c0:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f23c4:	460d      	mov	r5, r1
 23f23c6:	3201      	adds	r2, #1
 23f23c8:	e7c5      	b.n	23f2356 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f23ca:	ee27 7a28 	vmul.f32	s14, s14, s17
 23f23ce:	eea6 7a25 	vfma.f32	s14, s12, s11
 23f23d2:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
 23f23d6:	ed83 7a00 	vstr	s14, [r3]
 23f23da:	e7f3      	b.n	23f23c4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
 23f23dc:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
 23f23de:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f23e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f23e6:	f7fe fd51 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f23ea:	e790      	b.n	23f230e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
 23f23ec:	2000      	movs	r0, #0
 23f23ee:	e7a3      	b.n	23f2338 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
 23f23f0:	023fc8a0 	.word	0x023fc8a0
 23f23f4:	437f0000 	.word	0x437f0000
 23f23f8:	3f1645a2 	.word	0x3f1645a2
 23f23fc:	fffffc16 	.word	0xfffffc16
 23f2400:	3e991687 	.word	0x3e991687
 23f2404:	3de978d5 	.word	0x3de978d5

023f2408 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f2408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f240c:	6805      	ldr	r5, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23f240e:	680c      	ldr	r4, [r1, #0]
 23f2410:	f8d3 9000 	ldr.w	r9, [r3]
 23f2414:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 23f2418:	fbb4 f4f0 	udiv	r4, r4, r0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23f241c:	6816      	ldr	r6, [r2, #0]

        size_t out_ptr_ix = 0;
 23f241e:	f04f 0800 	mov.w	r8, #0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23f2422:	fbb6 f6f0 	udiv	r6, r6, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23f2426:	699b      	ldr	r3, [r3, #24]

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23f2428:	435c      	muls	r4, r3
 23f242a:	fb03 4606 	mla	r6, r3, r6, r4
 23f242e:	42a6      	cmp	r6, r4
 23f2430:	d919      	bls.n	23f2466 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23f2432:	2700      	movs	r7, #0
 23f2434:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 23f2438:	68aa      	ldr	r2, [r5, #8]
 23f243a:	eb07 0308 	add.w	r3, r7, r8
 23f243e:	42ba      	cmp	r2, r7
 23f2440:	d90c      	bls.n	23f245c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 23f2442:	686b      	ldr	r3, [r5, #4]
 23f2444:	2201      	movs	r2, #1
 23f2446:	5dd9      	ldrb	r1, [r3, r7]
 23f2448:	6828      	ldr	r0, [r5, #0]
 23f244a:	4653      	mov	r3, sl
 23f244c:	4421      	add	r1, r4
 23f244e:	f7ff fe6d 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
 23f2452:	f10a 0a04 	add.w	sl, sl, #4
 23f2456:	b938      	cbnz	r0, 23f2468 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23f2458:	3701      	adds	r7, #1
 23f245a:	e7ed      	b.n	23f2438 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23f245c:	68ea      	ldr	r2, [r5, #12]
 23f245e:	4698      	mov	r8, r3
 23f2460:	6992      	ldr	r2, [r2, #24]
 23f2462:	4414      	add	r4, r2
 23f2464:	e7e3      	b.n	23f242e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x26>
                    return r;
                }
            }
        }

        return 0;
 23f2466:	2000      	movs	r0, #0
      }
 23f2468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f246c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
 23f246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2470:	ed2d 8b06 	vpush	{d8-d10}
 23f2474:	461c      	mov	r4, r3
 23f2476:	4616      	mov	r6, r2
 23f2478:	b0d7      	sub	sp, #348	; 0x15c
 23f247a:	f89d 3198 	ldrb.w	r3, [sp, #408]	; 0x198

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    memset(result, 0, sizeof(ei_impulse_result_t));
 23f247e:	f44f 7280 	mov.w	r2, #256	; 0x100
    bool debug = false) {
 23f2482:	9309      	str	r3, [sp, #36]	; 0x24
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f2484:	6923      	ldr	r3, [r4, #16]
    bool debug = false) {
 23f2486:	4607      	mov	r7, r0
 23f2488:	468a      	mov	sl, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f248a:	4630      	mov	r0, r6
 23f248c:	2100      	movs	r1, #0
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f248e:	ee0a 3a10 	vmov	s20, r3
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f2492:	f009 f86b 	bl	23fb56c <memset>
 23f2496:	4bcf      	ldr	r3, [pc, #828]	; (23f27d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>)
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f2498:	4620      	mov	r0, r4
 23f249a:	9310      	str	r3, [sp, #64]	; 0x40
 23f249c:	2300      	movs	r3, #0
 23f249e:	9311      	str	r3, [sp, #68]	; 0x44
 23f24a0:	ab36      	add	r3, sp, #216	; 0xd8
 23f24a2:	9301      	str	r3, [sp, #4]
 23f24a4:	ab46      	add	r3, sp, #280	; 0x118
 23f24a6:	9300      	str	r3, [sp, #0]
 23f24a8:	aa16      	add	r2, sp, #88	; 0x58
 23f24aa:	ab26      	add	r3, sp, #152	; 0x98
 23f24ac:	a90e      	add	r1, sp, #56	; 0x38
 23f24ae:	f7fe fbdd 	bl	23f0c6c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23f24b2:	4605      	mov	r5, r0
 23f24b4:	2800      	cmp	r0, #0
 23f24b6:	d15b      	bne.n	23f2570 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
 23f24b8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f24bc:	2b09      	cmp	r3, #9
 23f24be:	d002      	beq.n	23f24c6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5a>
 23f24c0:	2b03      	cmp	r3, #3
 23f24c2:	f040 820e 	bne.w	23f28e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x476>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 23f24c6:	f001 fc35 	bl	23f3d34 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23f24ca:	693b      	ldr	r3, [r7, #16]
 23f24cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    uint64_t dsp_start_us = ei_read_timer_us();
 23f24ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23f24d2:	9307      	str	r3, [sp, #28]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23f24d4:	2c00      	cmp	r4, #0
 23f24d6:	d154      	bne.n	23f2582 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23f24d8:	4618      	mov	r0, r3
 23f24da:	2101      	movs	r1, #1
 23f24dc:	f001 fc5f 	bl	23f3d9e <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f24e0:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23f24e2:	4604      	mov	r4, r0
            buffer_managed_by_me = false;
 23f24e4:	9308      	str	r3, [sp, #32]

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f24e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23f24e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f24ea:	689b      	ldr	r3, [r3, #8]
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23f24ec:	f8d2 8008 	ldr.w	r8, [r2, #8]

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f24f0:	689a      	ldr	r2, [r3, #8]

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f24f2:	68d8      	ldr	r0, [r3, #12]
 23f24f4:	49b8      	ldr	r1, [pc, #736]	; (23f27d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f24f6:	ee0a 2a90 	vmov	s21, r2
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f24fa:	f7fa ff5b 	bl	23ed3b4 <strcmp>
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f24fe:	ed9d 8a1a 	vldr	s16, [sp, #104]	; 0x68
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2502:	f04f 0900 	mov.w	r9, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f2506:	2800      	cmp	r0, #0
 23f2508:	bf0c      	ite	eq
 23f250a:	2301      	moveq	r3, #1
 23f250c:	2303      	movne	r3, #3
 23f250e:	eddd 8a19 	vldr	s17, [sp, #100]	; 0x64
 23f2512:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    size_t output_ix = 0;
 23f2516:	464d      	mov	r5, r9
 23f2518:	ed9f 9ab0 	vldr	s18, [pc, #704]	; 23f27dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
                        b = (b - torch_mean[2]) / torch_std[2];
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f251c:	eddf 9ab0 	vldr	s19, [pc, #704]	; 23f27e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f2520:	930a      	str	r3, [sp, #40]	; 0x28
    size_t bytes_left = signal->total_length;
 23f2522:	f8da 3010 	ldr.w	r3, [sl, #16]
 23f2526:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2528:	f8da 3010 	ldr.w	r3, [sl, #16]
 23f252c:	454b      	cmp	r3, r9
 23f252e:	f240 817d 	bls.w	23f282c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23f2532:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2534:	ee1a 2a90 	vmov	r2, s21
 23f2538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f253c:	bf28      	it	cs
 23f253e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 23f2542:	469b      	mov	fp, r3
 23f2544:	a812      	add	r0, sp, #72	; 0x48
 23f2546:	2300      	movs	r3, #0
 23f2548:	4659      	mov	r1, fp
 23f254a:	f7fe fc8a 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23f254e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23f2550:	b9cb      	cbnz	r3, 23f2586 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x11a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f2552:	a812      	add	r0, sp, #72	; 0x48
 23f2554:	f7fe fc9a 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>

    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23f2558:	49a2      	ldr	r1, [pc, #648]	; (23f27e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>)
 23f255a:	48a3      	ldr	r0, [pc, #652]	; (23f27e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>)
 23f255c:	f001 fbf0 	bl	23f3d40 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 23f2560:	f06f 0504 	mvn.w	r5, #4
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
 23f2564:	b124      	cbz	r4, 23f2570 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
 23f2566:	9b08      	ldr	r3, [sp, #32]
 23f2568:	b113      	cbz	r3, 23f2570 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
            ei_free(buffer);
 23f256a:	4620      	mov	r0, r4
 23f256c:	f001 fc19 	bl	23f3da2 <_Z7ei_freePv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23f2570:	a810      	add	r0, sp, #64	; 0x40
 23f2572:	f7ff fd8c 	bl	23f208e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
 23f2576:	4628      	mov	r0, r5
 23f2578:	b057      	add	sp, #348	; 0x15c
 23f257a:	ecbd 8b06 	vpop	{d8-d10}
 23f257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer_managed_by_me = false;
 23f2582:	2300      	movs	r3, #0
 23f2584:	e7ae      	b.n	23f24e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x78>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23f2586:	4649      	mov	r1, r9
 23f2588:	465a      	mov	r2, fp
 23f258a:	4650      	mov	r0, sl
 23f258c:	f7ff fdce 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f2590:	2100      	movs	r1, #0
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f2592:	eddf 3a96 	vldr	s7, [pc, #600]	; 23f27ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x380>
 23f2596:	ed9f 3a96 	vldr	s6, [pc, #600]	; 23f27f0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x384>
                        r /= 255.0f;
 23f259a:	ed9f 6a96 	vldr	s12, [pc, #600]	; 23f27f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x388>
                        r = (r - torch_mean[0]) / torch_std[0];
 23f259e:	eddf 5a96 	vldr	s11, [pc, #600]	; 23f27f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x38c>
 23f25a2:	ed9f 5a96 	vldr	s10, [pc, #600]	; 23f27fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
                        g = (g - torch_mean[1]) / torch_std[1];
 23f25a6:	eddf 4a96 	vldr	s9, [pc, #600]	; 23f2800 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
 23f25aa:	ed9f 4a96 	vldr	s8, [pc, #600]	; 23f2804 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f25ae:	458b      	cmp	fp, r1
 23f25b0:	f000 8132 	beq.w	23f2818 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ac>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f25b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f25b6:	f105 0e01 	add.w	lr, r5, #1
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f25ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f25be:	edd3 7a00 	vldr	s15, [r3]
 23f25c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23f25c6:	ee17 3a90 	vmov	r3, s15
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 23f25ca:	0a1a      	lsrs	r2, r3, #8
 23f25cc:	920b      	str	r2, [sp, #44]	; 0x2c
            if (channel_count == 3) {
 23f25ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f25d0:	1960      	adds	r0, r4, r5
            if (channel_count == 3) {
 23f25d2:	2a03      	cmp	r2, #3
 23f25d4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 23f25d8:	ee07 2a10 	vmov	s14, r2
 23f25dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 23f25e0:	ee07 2a90 	vmov	s15, r2
 23f25e4:	b2da      	uxtb	r2, r3
 23f25e6:	ee06 2a90 	vmov	s13, r2
 23f25ea:	f040 8087 	bne.w	23f26fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x290>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f25ee:	eef4 8a49 	vcmp.f32	s17, s18
 23f25f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f25f6:	eb04 0c0e 	add.w	ip, r4, lr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f25fa:	f105 0e03 	add.w	lr, r5, #3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f25fe:	f105 0502 	add.w	r5, r5, #2
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f2602:	4425      	add	r5, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f2604:	d12a      	bne.n	23f265c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
 23f2606:	eddf 2a80 	vldr	s5, [pc, #512]	; 23f2808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
 23f260a:	eeb4 8a62 	vcmp.f32	s16, s5
 23f260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2612:	d123      	bne.n	23f265c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
 23f2614:	f1b8 0f00 	cmp.w	r8, #0
 23f2618:	d120      	bne.n	23f265c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f261a:	eddf 2a7c 	vldr	s5, [pc, #496]	; 23f280c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
 23f261e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f2622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f2626:	ee37 7a62 	vsub.f32	s14, s14, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f262a:	ee77 7ae2 	vsub.f32	s15, s15, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f262e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f2632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f2636:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f263a:	ee76 6ae2 	vsub.f32	s13, s13, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f263e:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f2642:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f2646:	eefd 7ae6 	vcvt.s32.f32	s15, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f264a:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f264c:	f88c 2000 	strb.w	r2, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f2650:	ee17 3a90 	vmov	r3, s15
 23f2654:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f2656:	4675      	mov	r5, lr
 23f2658:	3101      	adds	r1, #1
 23f265a:	e7a8      	b.n	23f25ae <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x142>
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f265c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                    float b = static_cast<float>(pixel & 0xff);
 23f2660:	b2db      	uxtb	r3, r3
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f2662:	ee07 2a90 	vmov	s15, r2
 23f2666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float b = static_cast<float>(pixel & 0xff);
 23f266a:	ee07 3a90 	vmov	s15, r3
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23f266e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float b = static_cast<float>(pixel & 0xff);
 23f2672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f2676:	f1b8 0f00 	cmp.w	r8, #0
 23f267a:	d125      	bne.n	23f26c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x25c>
                        r /= 255.0f;
 23f267c:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23f2680:	eec6 6a86 	vdiv.f32	s13, s13, s12
                        b /= 255.0f;
 23f2684:	eec7 7a86 	vdiv.f32	s15, s15, s12
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23f2688:	eec7 2a28 	vdiv.f32	s5, s14, s17
 23f268c:	feb8 7a62 	vrinta.f32	s14, s5
 23f2690:	ee38 7a07 	vadd.f32	s14, s16, s14
 23f2694:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23f2698:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f269c:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 23f26a0:	feb8 7a47 	vrinta.f32	s14, s14
 23f26a4:	ee38 7a07 	vadd.f32	s14, s16, s14
 23f26a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23f26ac:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f26ae:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f26b2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23f26b6:	fef8 7a47 	vrinta.f32	s15, s14
 23f26ba:	ee78 7a27 	vadd.f32	s15, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f26be:	f88c 3000 	strb.w	r3, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f26c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f26c6:	e7c3      	b.n	23f2650 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1e4>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23f26c8:	f1b8 0f02 	cmp.w	r8, #2
 23f26cc:	d1dc      	bne.n	23f2688 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x21c>
                        r /= 255.0f;
 23f26ce:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23f26d2:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23f26d6:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23f26da:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23f26de:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23f26e2:	eec2 6a84 	vdiv.f32	s13, s5, s8
                        b /= 255.0f;
 23f26e6:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23f26ea:	eddf 7a49 	vldr	s15, [pc, #292]	; 23f2810 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
 23f26ee:	ed9f 2a49 	vldr	s4, [pc, #292]	; 23f2814 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
 23f26f2:	ee72 2ae7 	vsub.f32	s5, s5, s15
 23f26f6:	eec2 7a82 	vdiv.f32	s15, s5, s4
 23f26fa:	e7c5      	b.n	23f2688 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x21c>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f26fc:	eef4 8a49 	vcmp.f32	s17, s18
 23f2700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2704:	d12c      	bne.n	23f2760 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
 23f2706:	eddf 2a40 	vldr	s5, [pc, #256]	; 23f2808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
 23f270a:	eeb4 8a62 	vcmp.f32	s16, s5
 23f270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2712:	d125      	bne.n	23f2760 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
 23f2714:	f1b8 0f00 	cmp.w	r8, #0
 23f2718:	d122      	bne.n	23f2760 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 23f271a:	f249 6245 	movw	r2, #38469	; 0x9645
 23f271e:	ee17 3a90 	vmov	r3, s15
 23f2722:	4353      	muls	r3, r2
 23f2724:	ee17 5a10 	vmov	r5, s14
 23f2728:	461a      	mov	r2, r3
 23f272a:	f644 438b 	movw	r3, #19595	; 0x4c8b
 23f272e:	fb03 2205 	mla	r2, r3, r5, r2
 23f2732:	f641 532f 	movw	r3, #7471	; 0x1d2f
 23f2736:	ee16 5a90 	vmov	r5, s13
 23f273a:	fb03 2305 	mla	r3, r3, r5, r2
                    gray >>= 16; // scale down to int8_t
 23f273e:	141b      	asrs	r3, r3, #16
 23f2740:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
 23f2744:	ed9f 7a31 	vldr	s14, [pc, #196]	; 23f280c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
 23f2748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f274c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f2750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f2754:	ee17 3a90 	vmov	r3, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 23f2758:	f303 0307 	ssat	r3, #8, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23f275c:	7003      	strb	r3, [r0, #0]
 23f275e:	e77a      	b.n	23f2656 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1ea>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23f2760:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f2764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float b = static_cast<float>(pixel & 0xff);
 23f2768:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f276c:	f1b8 0f00 	cmp.w	r8, #0
 23f2770:	d116      	bne.n	23f27a0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x334>
                        r /= 255.0f;
 23f2772:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23f2776:	eec7 7a86 	vdiv.f32	s15, s15, s12
                        b /= 255.0f;
 23f277a:	eec6 6a86 	vdiv.f32	s13, s13, s12
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f277e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23f2782:	eee7 7a23 	vfma.f32	s15, s14, s7
 23f2786:	eee6 7a83 	vfma.f32	s15, s13, s6
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23f278a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23f278e:	fef8 7a47 	vrinta.f32	s15, s14
 23f2792:	ee78 7a27 	vadd.f32	s15, s16, s15
 23f2796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f279a:	ee17 3a90 	vmov	r3, s15
 23f279e:	e7dd      	b.n	23f275c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f0>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23f27a0:	f1b8 0f02 	cmp.w	r8, #2
 23f27a4:	d1eb      	bne.n	23f277e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
                        r /= 255.0f;
 23f27a6:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23f27aa:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23f27ae:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23f27b2:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23f27b6:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23f27ba:	eec2 7a84 	vdiv.f32	s15, s5, s8
                        b /= 255.0f;
 23f27be:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23f27c2:	eddf 6a13 	vldr	s13, [pc, #76]	; 23f2810 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
 23f27c6:	ed9f 2a13 	vldr	s4, [pc, #76]	; 23f2814 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
 23f27ca:	ee72 2ae6 	vsub.f32	s5, s5, s13
 23f27ce:	eec2 6a82 	vdiv.f32	s13, s5, s4
 23f27d2:	e7d4      	b.n	23f277e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
 23f27d4:	023f0bb1 	.word	0x023f0bb1
 23f27d8:	023fc8a0 	.word	0x023fc8a0
 23f27dc:	3b808081 	.word	0x3b808081
 23f27e0:	3f1645a2 	.word	0x3f1645a2
 23f27e4:	fffffc16 	.word	0xfffffc16
 23f27e8:	023fc8aa 	.word	0x023fc8aa
 23f27ec:	3e991687 	.word	0x3e991687
 23f27f0:	3de978d5 	.word	0x3de978d5
 23f27f4:	437f0000 	.word	0x437f0000
 23f27f8:	3ef851ec 	.word	0x3ef851ec
 23f27fc:	3e6a7efa 	.word	0x3e6a7efa
 23f2800:	3ee978d5 	.word	0x3ee978d5
 23f2804:	3e656042 	.word	0x3e656042
 23f2808:	c3000000 	.word	0xc3000000
 23f280c:	43000000 	.word	0x43000000
 23f2810:	3ecfdf3b 	.word	0x3ecfdf3b
 23f2814:	3e666666 	.word	0x3e666666
                }
            }
        }

        bytes_left -= elements_to_read;
 23f2818:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23f281a:	a812      	add	r0, sp, #72	; 0x48
        bytes_left -= elements_to_read;
 23f281c:	eba3 030b 	sub.w	r3, r3, fp
 23f2820:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2822:	f509 6980 	add.w	r9, r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2826:	f7fe fb31 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f282a:	e67d      	b.n	23f2528 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xbc>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f282c:	f001 fa80 	bl	23f3d30 <_Z29ei_run_impulse_check_canceledv>
 23f2830:	1c83      	adds	r3, r0, #2
 23f2832:	4605      	mov	r5, r0
 23f2834:	f43f ae96 	beq.w	23f2564 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2838:	f001 fa7c 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f283c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f283e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2842:	1ac0      	subs	r0, r0, r3
 23f2844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f2846:	eb61 0103 	sbc.w	r1, r1, r3
 23f284a:	e9c6 013a 	strd	r0, r1, [r6, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f284e:	2300      	movs	r3, #0
 23f2850:	f7fa fbb2 	bl	23ecfb8 <__aeabi_ldivmod>
    if (debug) {
 23f2854:	9b09      	ldr	r3, [sp, #36]	; 0x24
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2856:	4601      	mov	r1, r0
 23f2858:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
    if (debug) {
 23f285c:	b1fb      	cbz	r3, 23f289e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x432>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23f285e:	4822      	ldr	r0, [pc, #136]	; (23f28e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x47c>)
 23f2860:	f001 fa6e 	bl	23f3d40 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2864:	9b07      	ldr	r3, [sp, #28]
 23f2866:	4625      	mov	r5, r4
 23f2868:	4423      	add	r3, r4
 23f286a:	4699      	mov	r9, r3
            ei_printf(" ");
 23f286c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 23f28f0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x484>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2870:	45a9      	cmp	r9, r5
 23f2872:	d011      	beq.n	23f2898 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x42c>
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
 23f2874:	f915 3b01 	ldrsb.w	r3, [r5], #1
 23f2878:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f287a:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 23f287e:	1a9b      	subs	r3, r3, r2
 23f2880:	ee07 3a90 	vmov	s15, r3
 23f2884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f2888:	ee27 0a80 	vmul.f32	s0, s15, s0
 23f288c:	f001 fa78 	bl	23f3d80 <_Z15ei_printf_floatf>
            ei_printf(" ");
 23f2890:	4640      	mov	r0, r8
 23f2892:	f001 fa55 	bl	23f3d40 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2896:	e7eb      	b.n	23f2870 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
        ei_printf("\n");
 23f2898:	4814      	ldr	r0, [pc, #80]	; (23f28ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x480>)
 23f289a:	f001 fa51 	bl	23f3d40 <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
 23f289e:	f001 fa49 	bl	23f3d34 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f28a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ctx_start_us = ei_read_timer_us();
 23f28a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f28a8:	e9cd 6303 	strd	r6, r3, [sp, #12]
 23f28ac:	ab36      	add	r3, sp, #216	; 0xd8
 23f28ae:	9302      	str	r3, [sp, #8]
 23f28b0:	ab46      	add	r3, sp, #280	; 0x118
 23f28b2:	9301      	str	r3, [sp, #4]
 23f28b4:	ab26      	add	r3, sp, #152	; 0x98
    ctx_start_us = ei_read_timer_us();
 23f28b6:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f28b8:	9300      	str	r3, [sp, #0]
 23f28ba:	4638      	mov	r0, r7
 23f28bc:	460b      	mov	r3, r1
 23f28be:	ee1a 1a10 	vmov	r1, s20
 23f28c2:	f7ff faab 	bl	23f1e1c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    if (run_res != EI_IMPULSE_OK) {
 23f28c6:	4605      	mov	r5, r0
 23f28c8:	2800      	cmp	r0, #0
 23f28ca:	f47f ae4b 	bne.w	23f2564 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23f28ce:	f001 fa31 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f28d2:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 23f28d6:	1ac0      	subs	r0, r0, r3
 23f28d8:	eb61 0102 	sbc.w	r1, r1, r2
 23f28dc:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    return EI_IMPULSE_OK;
 23f28e0:	e640      	b.n	23f2564 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 23f28e2:	f06f 0508 	mvn.w	r5, #8
 23f28e6:	e643      	b.n	23f2570 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
 23f28e8:	023fc9a1 	.word	0x023fc9a1
 23f28ec:	023fc890 	.word	0x023fc890
 23f28f0:	023ffbd3 	.word	0x023ffbd3

023f28f4 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f28f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f28f6:	4615      	mov	r5, r2
 23f28f8:	4604      	mov	r4, r0
 23f28fa:	461f      	mov	r7, r3
 23f28fc:	460e      	mov	r6, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f28fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f2902:	2100      	movs	r1, #0
 23f2904:	4628      	mov	r0, r5
 23f2906:	f008 fe31 	bl	23fb56c <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
 23f290a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 23f290c:	9700      	str	r7, [sp, #0]
 23f290e:	462a      	mov	r2, r5
 23f2910:	4631      	mov	r1, r6
 23f2912:	4620      	mov	r0, r4
 23f2914:	685b      	ldr	r3, [r3, #4]
 23f2916:	f7ff fda9 	bl	23f246c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
}
 23f291a:	b003      	add	sp, #12
 23f291c:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f291e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 23f291e:	b510      	push	{r4, lr}
 23f2920:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 23f2922:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 23f2924:	b108      	cbz	r0, 23f292a <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev+0xc>
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 23f2926:	f001 fa3c 	bl	23f3da2 <_Z7ei_freePv>
      }
 23f292a:	4620      	mov	r0, r4
 23f292c:	bd10      	pop	{r4, pc}
	...

023f2930 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 23f2930:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f2932:	e9d0 5400 	ldrd	r5, r4, [r0]
 23f2936:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 23f2938:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f293c:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
 23f2940:	d302      	bcc.n	23f2948 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 23f2942:	4803      	ldr	r0, [pc, #12]	; (23f2950 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj+0x20>)
 23f2944:	f006 ffda 	bl	23f98fc <_ZSt24__throw_out_of_range_fmtPKcz>
      {
	_M_range_check(__n);
	return (*this)[__n];
      }
 23f2948:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 23f294c:	bd38      	pop	{r3, r4, r5, pc}
 23f294e:	bf00      	nop
 23f2950:	023fc8cf 	.word	0x023fc8cf

023f2954 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 23f2954:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f2956:	466c      	mov	r4, sp
 23f2958:	460b      	mov	r3, r1
 23f295a:	4602      	mov	r2, r0
 23f295c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f2960:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f2964:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f2968:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f296c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f2970:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f2974:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f2976:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f2978:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f297a:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f297c:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f297e:	68d8      	ldr	r0, [r3, #12]
 23f2980:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f2982:	60d9      	str	r1, [r3, #12]
      }
 23f2984:	b002      	add	sp, #8
 23f2986:	bd10      	pop	{r4, pc}

023f2988 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 23f2988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23f298a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23f298e:	6999      	ldr	r1, [r3, #24]
            return this->_original_signal;
 23f2990:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23f2992:	428a      	cmp	r2, r1
 23f2994:	d012      	beq.n	23f29bc <_ZN14SignalWithAxes10get_signalEv+0x34>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23f2996:	6923      	ldr	r3, [r4, #16]
        };
 23f2998:	f100 0410 	add.w	r4, r0, #16
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23f299c:	fbb3 f3f1 	udiv	r3, r3, r1
 23f29a0:	4353      	muls	r3, r2
 23f29a2:	6203      	str	r3, [r0, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 23f29a4:	4b07      	ldr	r3, [pc, #28]	; (23f29c4 <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f29a6:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f29a8:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f29aa:	4b07      	ldr	r3, [pc, #28]	; (23f29c8 <_ZN14SignalWithAxes10get_signalEv+0x40>)
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f29ac:	4668      	mov	r0, sp
 23f29ae:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
 23f29b0:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f29b2:	f7ff ffcf 	bl	23f2954 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f29b6:	4668      	mov	r0, sp
 23f29b8:	f7fe fa4a 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
    }
 23f29bc:	4620      	mov	r0, r4
 23f29be:	b004      	add	sp, #16
 23f29c0:	bd10      	pop	{r4, pc}
 23f29c2:	bf00      	nop
 23f29c4:	023f2409 	.word	0x023f2409
 23f29c8:	023f0d49 	.word	0x023f0d49

023f29cc <process_impulse>:
{
 23f29cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ei_learning_block_t block = impulse->learning_blocks[0];
 23f29d0:	6d46      	ldr	r6, [r0, #84]	; 0x54
{
 23f29d2:	b097      	sub	sp, #92	; 0x5c
    ei_learning_block_t block = impulse->learning_blocks[0];
 23f29d4:	e9d6 e800 	ldrd	lr, r8, [r6]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f29d8:	6d86      	ldr	r6, [r0, #88]	; 0x58
{
 23f29da:	4604      	mov	r4, r0
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f29dc:	3e02      	subs	r6, #2
 23f29de:	2e09      	cmp	r6, #9
{
 23f29e0:	4615      	mov	r5, r2
 23f29e2:	461f      	mov	r7, r3
 23f29e4:	9103      	str	r1, [sp, #12]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f29e6:	d81c      	bhi.n	23f2a22 <process_impulse+0x56>
 23f29e8:	f240 2c29 	movw	ip, #553	; 0x229
 23f29ec:	fa2c f606 	lsr.w	r6, ip, r6
 23f29f0:	07f6      	lsls	r6, r6, #31
 23f29f2:	d516      	bpl.n	23f2a22 <process_impulse+0x56>
    if (impulse->has_anomaly == 1){
 23f29f4:	f890 606c 	ldrb.w	r6, [r0, #108]	; 0x6c
 23f29f8:	b99e      	cbnz	r6, 23f2a22 <process_impulse+0x56>
    if (block_ptr.infer_fn != run_nn_inference) {
 23f29fa:	4e58      	ldr	r6, [pc, #352]	; (23f2b5c <process_impulse+0x190>)
 23f29fc:	45b6      	cmp	lr, r6
 23f29fe:	d110      	bne.n	23f2a22 <process_impulse+0x56>
    if (block_config->quantized != 1) {
 23f2a00:	f898 600d 	ldrb.w	r6, [r8, #13]
 23f2a04:	b16e      	cbz	r6, 23f2a22 <process_impulse+0x56>
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 23f2a06:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23f2a08:	2e01      	cmp	r6, #1
 23f2a0a:	d10a      	bne.n	23f2a22 <process_impulse+0x56>
 23f2a0c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 23f2a0e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 23f2a12:	4e53      	ldr	r6, [pc, #332]	; (23f2b60 <process_impulse+0x194>)
 23f2a14:	45b4      	cmp	ip, r6
 23f2a16:	d104      	bne.n	23f2a22 <process_impulse+0x56>
}
 23f2a18:	b017      	add	sp, #92	; 0x5c
 23f2a1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return run_classifier_image_quantized(impulse, signal, result, debug);
 23f2a1e:	f7ff bf69 	b.w	23f28f4 <run_classifier_image_quantized>
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f2a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f2a26:	2100      	movs	r1, #0
 23f2a28:	4628      	mov	r0, r5
 23f2a2a:	f008 fd9f 	bl	23fb56c <memset>
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23f2a2e:	2300      	movs	r3, #0
 23f2a30:	2101      	movs	r1, #1
 23f2a32:	6922      	ldr	r2, [r4, #16]
 23f2a34:	a805      	add	r0, sp, #20
 23f2a36:	f7fe fa14 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23f2a3a:	2600      	movs	r6, #0
    uint64_t dsp_start_us = ei_read_timer_us();
 23f2a3c:	f001 f97a 	bl	23f3d34 <_Z16ei_read_timer_usv>
    size_t out_features_index = 0;
 23f2a40:	4633      	mov	r3, r6
    uint64_t dsp_start_us = ei_read_timer_us();
 23f2a42:	4683      	mov	fp, r0
 23f2a44:	468a      	mov	sl, r1
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23f2a46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23f2a48:	42b2      	cmp	r2, r6
 23f2a4a:	d952      	bls.n	23f2af2 <process_impulse+0x126>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23f2a4c:	2214      	movs	r2, #20
 23f2a4e:	4372      	muls	r2, r6
 23f2a50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 23f2a52:	1881      	adds	r1, r0, r2
 23f2a54:	5882      	ldr	r2, [r0, r2]
 23f2a56:	6848      	ldr	r0, [r1, #4]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23f2a58:	eb03 0802 	add.w	r8, r3, r2
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23f2a5c:	9001      	str	r0, [sp, #4]
 23f2a5e:	e9d1 9002 	ldrd	r9, r0, [r1, #8]
 23f2a62:	6909      	ldr	r1, [r1, #16]
 23f2a64:	9002      	str	r0, [sp, #8]
 23f2a66:	9100      	str	r1, [sp, #0]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23f2a68:	6921      	ldr	r1, [r4, #16]
 23f2a6a:	4588      	cmp	r8, r1
 23f2a6c:	d90b      	bls.n	23f2a86 <process_impulse+0xba>
            ei_printf("ERR: Would write outside feature buffer\n");
 23f2a6e:	483d      	ldr	r0, [pc, #244]	; (23f2b64 <process_impulse+0x198>)
 23f2a70:	f001 f966 	bl	23f3d40 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23f2a74:	f06f 0904 	mvn.w	r9, #4
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23f2a78:	a805      	add	r0, sp, #20
 23f2a7a:	f7fe fa07 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
}
 23f2a7e:	4648      	mov	r0, r9
 23f2a80:	b017      	add	sp, #92	; 0x5c
 23f2a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23f2a86:	9905      	ldr	r1, [sp, #20]
 23f2a88:	a809      	add	r0, sp, #36	; 0x24
 23f2a8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23f2a8e:	2101      	movs	r1, #1
 23f2a90:	f7fe f9e7 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 23f2a94:	9b03      	ldr	r3, [sp, #12]
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 23f2a96:	a80d      	add	r0, sp, #52	; 0x34
 23f2a98:	930d      	str	r3, [sp, #52]	; 0x34
 23f2a9a:	9b02      	ldr	r3, [sp, #8]
 23f2a9c:	930e      	str	r3, [sp, #56]	; 0x38
 23f2a9e:	9b00      	ldr	r3, [sp, #0]
 23f2aa0:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
    _Function_base() : _M_manager(nullptr) { }
 23f2aa4:	2300      	movs	r3, #0
 23f2aa6:	9313      	str	r3, [sp, #76]	; 0x4c
 23f2aa8:	f7ff ff6e 	bl	23f2988 <_ZN14SignalWithAxes10get_signalEv>
 23f2aac:	a909      	add	r1, sp, #36	; 0x24
 23f2aae:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 23f2ab2:	464a      	mov	r2, r9
 23f2ab4:	9b01      	ldr	r3, [sp, #4]
 23f2ab6:	4798      	blx	r3
        if (ret != EIDSP_OK) {
 23f2ab8:	4601      	mov	r1, r0
 23f2aba:	b158      	cbz	r0, 23f2ad4 <process_impulse+0x108>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23f2abc:	482a      	ldr	r0, [pc, #168]	; (23f2b68 <process_impulse+0x19c>)
 23f2abe:	f001 f93f 	bl	23f3d40 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23f2ac2:	f06f 0904 	mvn.w	r9, #4
    class function<_Res(_ArgTypes...)>
 23f2ac6:	a811      	add	r0, sp, #68	; 0x44
 23f2ac8:	f7fe f9c2 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
 23f2acc:	a809      	add	r0, sp, #36	; 0x24
 23f2ace:	f7fe f9dd 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f2ad2:	e7d1      	b.n	23f2a78 <process_impulse+0xac>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f2ad4:	f001 f92c 	bl	23f3d30 <_Z29ei_run_impulse_check_canceledv>
 23f2ad8:	f110 0f02 	cmn.w	r0, #2
 23f2adc:	4681      	mov	r9, r0
 23f2ade:	d0f2      	beq.n	23f2ac6 <process_impulse+0xfa>
 23f2ae0:	a811      	add	r0, sp, #68	; 0x44
 23f2ae2:	f7fe f9b5 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23f2ae6:	a809      	add	r0, sp, #36	; 0x24
 23f2ae8:	f7fe f9d0 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23f2aec:	3601      	adds	r6, #1
 23f2aee:	4643      	mov	r3, r8
 23f2af0:	e7a9      	b.n	23f2a46 <process_impulse+0x7a>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2af2:	f001 f91f 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f2af6:	ebb0 000b 	subs.w	r0, r0, fp
 23f2afa:	eb61 010a 	sbc.w	r1, r1, sl
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f2b02:	2300      	movs	r3, #0
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2b04:	e9c5 013a 	strd	r0, r1, [r5, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2b08:	f7fa fa56 	bl	23ecfb8 <__aeabi_ldivmod>
 23f2b0c:	4601      	mov	r1, r0
 23f2b0e:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
    if (debug) {
 23f2b12:	b1d7      	cbz	r7, 23f2b4a <process_impulse+0x17e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23f2b14:	4815      	ldr	r0, [pc, #84]	; (23f2b6c <process_impulse+0x1a0>)
 23f2b16:	f001 f913 	bl	23f3d40 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2b1a:	2600      	movs	r6, #0
            ei_printf(" ");
 23f2b1c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 23f2b78 <process_impulse+0x1ac>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2b20:	9b07      	ldr	r3, [sp, #28]
 23f2b22:	42b3      	cmp	r3, r6
 23f2b24:	d90b      	bls.n	23f2b3e <process_impulse+0x172>
            ei_printf_float(features_matrix.buffer[ix]);
 23f2b26:	9b05      	ldr	r3, [sp, #20]
 23f2b28:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f2b2c:	ed93 0a00 	vldr	s0, [r3]
 23f2b30:	f001 f926 	bl	23f3d80 <_Z15ei_printf_floatf>
            ei_printf(" ");
 23f2b34:	4640      	mov	r0, r8
 23f2b36:	f001 f903 	bl	23f3d40 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2b3a:	3601      	adds	r6, #1
 23f2b3c:	e7f0      	b.n	23f2b20 <process_impulse+0x154>
        ei_printf("\n");
 23f2b3e:	480c      	ldr	r0, [pc, #48]	; (23f2b70 <process_impulse+0x1a4>)
 23f2b40:	f001 f8fe 	bl	23f3d40 <_Z9ei_printfPKcz>
        ei_printf("Running impulse...\n");
 23f2b44:	480b      	ldr	r0, [pc, #44]	; (23f2b74 <process_impulse+0x1a8>)
 23f2b46:	f001 f8fb 	bl	23f3d40 <_Z9ei_printfPKcz>
    return run_inference(impulse, &features_matrix, result, debug);
 23f2b4a:	463b      	mov	r3, r7
 23f2b4c:	462a      	mov	r2, r5
 23f2b4e:	4620      	mov	r0, r4
 23f2b50:	a905      	add	r1, sp, #20
 23f2b52:	f7ff f9a3 	bl	23f1e9c <run_inference>
 23f2b56:	4681      	mov	r9, r0
 23f2b58:	e78e      	b.n	23f2a78 <process_impulse+0xac>
 23f2b5a:	bf00      	nop
 23f2b5c:	023f20a1 	.word	0x023f20a1
 23f2b60:	023f22d9 	.word	0x023f22d9
 23f2b64:	023fc919 	.word	0x023fc919
 23f2b68:	023fc8aa 	.word	0x023fc8aa
 23f2b6c:	023fc9a1 	.word	0x023fc9a1
 23f2b70:	023fc890 	.word	0x023fc890
 23f2b74:	023fc942 	.word	0x023fc942
 23f2b78:	023ffbd3 	.word	0x023ffbd3

023f2b7c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f2b7c:	b530      	push	{r4, r5, lr}
 23f2b7e:	4604      	mov	r4, r0
 23f2b80:	460d      	mov	r5, r1
 23f2b82:	b0a5      	sub	sp, #148	; 0x94
 23f2b84:	9201      	str	r2, [sp, #4]
    const ei_impulse_t impulse = ei_default_impulse;
 23f2b86:	4906      	ldr	r1, [pc, #24]	; (23f2ba0 <run_classifier+0x24>)
 23f2b88:	2288      	movs	r2, #136	; 0x88
 23f2b8a:	a802      	add	r0, sp, #8
 23f2b8c:	f008 fcc7 	bl	23fb51e <memcpy>
    return process_impulse(&impulse, signal, result, debug);
 23f2b90:	462a      	mov	r2, r5
 23f2b92:	4621      	mov	r1, r4
 23f2b94:	9b01      	ldr	r3, [sp, #4]
 23f2b96:	a802      	add	r0, sp, #8
 23f2b98:	f7ff ff18 	bl	23f29cc <process_impulse>
}
 23f2b9c:	b025      	add	sp, #148	; 0x94
 23f2b9e:	bd30      	pop	{r4, r5, pc}
 23f2ba0:	023fb898 	.word	0x023fb898

023f2ba4 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23f2ba4:	2300      	movs	r3, #0
      operator=(const function& __x)
 23f2ba6:	b530      	push	{r4, r5, lr}
 23f2ba8:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23f2baa:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23f2bac:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23f2bae:	4605      	mov	r5, r0
 23f2bb0:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23f2bb2:	b133      	cbz	r3, 23f2bc2 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f2bb4:	2202      	movs	r2, #2
 23f2bb6:	4668      	mov	r0, sp
 23f2bb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f2bba:	68e3      	ldr	r3, [r4, #12]
 23f2bbc:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f2bbe:	68a3      	ldr	r3, [r4, #8]
 23f2bc0:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23f2bc2:	4629      	mov	r1, r5
 23f2bc4:	4668      	mov	r0, sp
 23f2bc6:	f7ff fec5 	bl	23f2954 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f2bca:	4668      	mov	r0, sp
 23f2bcc:	f7fe f940 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
      }
 23f2bd0:	b005      	add	sp, #20
 23f2bd2:	bd30      	pop	{r4, r5, pc}

023f2bd4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
 23f2bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f2bd6:	2300      	movs	r3, #0
 23f2bd8:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
 23f2bda:	b121      	cbz	r1, 23f2be6 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
 23f2bdc:	4b07      	ldr	r3, [pc, #28]	; (23f2bfc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f2bde:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f2be0:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f2be2:	4b07      	ldr	r3, [pc, #28]	; (23f2c00 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
 23f2be4:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f2be6:	4601      	mov	r1, r0
 23f2be8:	4668      	mov	r0, sp
 23f2bea:	f7ff feb3 	bl	23f2954 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f2bee:	4668      	mov	r0, sp
 23f2bf0:	f7fe f92e 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
	}
 23f2bf4:	b005      	add	sp, #20
 23f2bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 23f2bfa:	bf00      	nop
 23f2bfc:	023f0d71 	.word	0x023f0d71
 23f2c00:	023f0d5d 	.word	0x023f0d5d

023f2c04 <loop>:
{
 23f2c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    digitalWrite(D7, LOW);
 23f2c08:	2100      	movs	r1, #0
{
 23f2c0a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    digitalWrite(D7, LOW);
 23f2c0e:	2007      	movs	r0, #7
 23f2c10:	f006 fcb3 	bl	23f957a <digitalWrite>
    ei_printf("Starting inferencing in 2 seconds...\n");
 23f2c14:	484e      	ldr	r0, [pc, #312]	; (23f2d50 <loop+0x14c>)
 23f2c16:	f001 f893 	bl	23f3d40 <_Z9ei_printfPKcz>
    delay(2000);
 23f2c1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f2c1e:	f005 f979 	bl	23f7f14 <delay>
    ei_printf("Recording...\n");
 23f2c22:	484c      	ldr	r0, [pc, #304]	; (23f2d54 <loop+0x150>)
 23f2c24:	f001 f88c 	bl	23f3d40 <_Z9ei_printfPKcz>
    inference.buf_ready = 0;
 23f2c28:	2300      	movs	r3, #0
 23f2c2a:	4d4b      	ldr	r5, [pc, #300]	; (23f2d58 <loop+0x154>)
	    _M_invoker = &_My_handler::_M_invoke;
 23f2c2c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 23f2d78 <loop+0x174>
 23f2c30:	712b      	strb	r3, [r5, #4]
    inference.buf_count = 0;
 23f2c32:	60ab      	str	r3, [r5, #8]
    uint64_t sample_start_us = ei_read_timer_us();
 23f2c34:	f001 f87e 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f2c38:	4606      	mov	r6, r0
	    _M_manager = &_My_handler::_M_manager;
 23f2c3a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 23f2d7c <loop+0x178>
	    _M_invoker = &_My_handler::_M_invoke;
 23f2c3e:	ac42      	add	r4, sp, #264	; 0x108
    while(Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples){})){};
 23f2c40:	f003 ff18 	bl	23f6a74 <_ZN14Microphone_PDM8instanceEv>
 23f2c44:	6803      	ldr	r3, [r0, #0]
 23f2c46:	4621      	mov	r1, r4
 23f2c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23f2c4a:	e9c4 8902 	strd	r8, r9, [r4, #8]
 23f2c4e:	4798      	blx	r3
 23f2c50:	4607      	mov	r7, r0
    class function<_Res(_ArgTypes...)>
 23f2c52:	4620      	mov	r0, r4
 23f2c54:	f7fe f8fc 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
 23f2c58:	2f00      	cmp	r7, #0
 23f2c5a:	d1f1      	bne.n	23f2c40 <loop+0x3c>
	    _M_invoker = &_My_handler::_M_invoke;
 23f2c5c:	4f3f      	ldr	r7, [pc, #252]	; (23f2d5c <loop+0x158>)
	    _M_manager = &_My_handler::_M_manager;
 23f2c5e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 23f2d80 <loop+0x17c>
    if(sample_length && dma_ready) {
 23f2c62:	f8df 9120 	ldr.w	r9, [pc, #288]	; 23f2d84 <loop+0x180>
    while(inference.buf_ready == 0) {
 23f2c66:	792b      	ldrb	r3, [r5, #4]
 23f2c68:	2b00      	cmp	r3, #0
 23f2c6a:	d133      	bne.n	23f2cd4 <loop+0xd0>
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23f2c6c:	f003 ff02 	bl	23f6a74 <_ZN14Microphone_PDM8instanceEv>
    });
 23f2c70:	6803      	ldr	r3, [r0, #0]
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23f2c72:	4621      	mov	r1, r4
    });
 23f2c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2c76:	e9c4 8702 	strd	r8, r7, [r4, #8]
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23f2c7a:	4798      	blx	r3
 23f2c7c:	4682      	mov	sl, r0
    class function<_Res(_ArgTypes...)>
 23f2c7e:	4620      	mov	r0, r4
 23f2c80:	f7fe f8e6 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
    if(sample_length && dma_ready) {
 23f2c84:	f8d9 c000 	ldr.w	ip, [r9]
 23f2c88:	f1bc 0f00 	cmp.w	ip, #0
 23f2c8c:	d0eb      	beq.n	23f2c66 <loop+0x62>
 23f2c8e:	f1ba 0f00 	cmp.w	sl, #0
 23f2c92:	d0e8      	beq.n	23f2c66 <loop+0x62>
        if (inference.buf_ready == 0) {
 23f2c94:	792a      	ldrb	r2, [r5, #4]
 23f2c96:	2a00      	cmp	r2, #0
 23f2c98:	d1e5      	bne.n	23f2c66 <loop+0x62>
                if(inference.buf_count >= inference.n_samples) {
 23f2c9a:	e9d5 3e02 	ldrd	r3, lr, [r5, #8]
                inference.buffer[inference.buf_count++] = sptr[i];
 23f2c9e:	4930      	ldr	r1, [pc, #192]	; (23f2d60 <loop+0x15c>)
 23f2ca0:	449c      	add	ip, r3
 23f2ca2:	6808      	ldr	r0, [r1, #0]
 23f2ca4:	6829      	ldr	r1, [r5, #0]
 23f2ca6:	3802      	subs	r0, #2
 23f2ca8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
            for(int i = 0; i < sample_length; i++) {
 23f2cac:	4563      	cmp	r3, ip
 23f2cae:	d00b      	beq.n	23f2cc8 <loop+0xc4>
                inference.buffer[inference.buf_count++] = sptr[i];
 23f2cb0:	f930 2f02 	ldrsh.w	r2, [r0, #2]!
 23f2cb4:	3301      	adds	r3, #1
                if(inference.buf_count >= inference.n_samples) {
 23f2cb6:	4573      	cmp	r3, lr
                inference.buffer[inference.buf_count++] = sptr[i];
 23f2cb8:	f821 2b02 	strh.w	r2, [r1], #2
                if(inference.buf_count >= inference.n_samples) {
 23f2cbc:	d308      	bcc.n	23f2cd0 <loop+0xcc>
                    inference.buf_count = 0;
 23f2cbe:	2300      	movs	r3, #0
 23f2cc0:	60ab      	str	r3, [r5, #8]
                    inference.buf_ready = 1;
 23f2cc2:	2301      	movs	r3, #1
 23f2cc4:	712b      	strb	r3, [r5, #4]
                    break;
 23f2cc6:	e7ce      	b.n	23f2c66 <loop+0x62>
 23f2cc8:	2a00      	cmp	r2, #0
 23f2cca:	d0cc      	beq.n	23f2c66 <loop+0x62>
 23f2ccc:	60ab      	str	r3, [r5, #8]
 23f2cce:	e7ca      	b.n	23f2c66 <loop+0x62>
 23f2cd0:	4652      	mov	r2, sl
 23f2cd2:	e7eb      	b.n	23f2cac <loop+0xa8>
    ei_printf("Sample time: %d\r\n", (int) (ei_read_timer_us() - sample_start_us) / 1000);
 23f2cd4:	f001 f82e 	bl	23f3d34 <_Z16ei_read_timer_usv>
 23f2cd8:	1b80      	subs	r0, r0, r6
 23f2cda:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 23f2cde:	fb90 f1f6 	sdiv	r1, r0, r6
 23f2ce2:	4820      	ldr	r0, [pc, #128]	; (23f2d64 <loop+0x160>)
 23f2ce4:	f001 f82c 	bl	23f3d40 <_Z9ei_printfPKcz>
    ei_printf("Recording done\n");
 23f2ce8:	481f      	ldr	r0, [pc, #124]	; (23f2d68 <loop+0x164>)
 23f2cea:	f001 f829 	bl	23f3d40 <_Z9ei_printfPKcz>
    _Function_base() : _M_manager(nullptr) { }
 23f2cee:	2500      	movs	r5, #0
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
 23f2cf0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    signal.get_data = &microphone_audio_signal_get_data;
 23f2cf4:	491d      	ldr	r1, [pc, #116]	; (23f2d6c <loop+0x168>)
 23f2cf6:	a83d      	add	r0, sp, #244	; 0xf4
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
 23f2cf8:	9341      	str	r3, [sp, #260]	; 0x104
 23f2cfa:	953f      	str	r5, [sp, #252]	; 0xfc
    signal.get_data = &microphone_audio_signal_get_data;
 23f2cfc:	f7ff ff6a 	bl	23f2bd4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    ei_impulse_result_t result = { 0 };
 23f2d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f2d04:	4629      	mov	r1, r5
 23f2d06:	4620      	mov	r0, r4
 23f2d08:	f008 fc30 	bl	23fb56c <memset>
    EI_IMPULSE_ERROR res = run_classifier(&signal, &result, false /* debug */);
 23f2d0c:	4621      	mov	r1, r4
 23f2d0e:	462a      	mov	r2, r5
 23f2d10:	a83d      	add	r0, sp, #244	; 0xf4
 23f2d12:	f7ff ff33 	bl	23f2b7c <run_classifier>
    if (res != EI_IMPULSE_OK) {
 23f2d16:	4601      	mov	r1, r0
 23f2d18:	b148      	cbz	r0, 23f2d2e <loop+0x12a>
        ei_printf("ERR: Failed to run classifier (%d)\n", res);
 23f2d1a:	4815      	ldr	r0, [pc, #84]	; (23f2d70 <loop+0x16c>)
 23f2d1c:	f001 f810 	bl	23f3d40 <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f2d20:	a83d      	add	r0, sp, #244	; 0xf4
 23f2d22:	f7fe f895 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
}
 23f2d26:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 23f2d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ei_printf("run_classifier returned: %d\r\n", res);
 23f2d2e:	4811      	ldr	r0, [pc, #68]	; (23f2d74 <loop+0x170>)
 23f2d30:	f001 f806 	bl	23f3d40 <_Z9ei_printfPKcz>
    print_inference_result(result);
 23f2d34:	a946      	add	r1, sp, #280	; 0x118
 23f2d36:	22f0      	movs	r2, #240	; 0xf0
 23f2d38:	4668      	mov	r0, sp
 23f2d3a:	f008 fbf0 	bl	23fb51e <memcpy>
 23f2d3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f2d42:	f7ff f95b 	bl	23f1ffc <_Z22print_inference_result19ei_impulse_result_t>
    delay(1000);
 23f2d46:	4630      	mov	r0, r6
 23f2d48:	f005 f8e4 	bl	23f7f14 <delay>
 23f2d4c:	e7e8      	b.n	23f2d20 <loop+0x11c>
 23f2d4e:	bf00      	nop
 23f2d50:	023fc9ed 	.word	0x023fc9ed
 23f2d54:	023fca13 	.word	0x023fca13
 23f2d58:	1007a5c8 	.word	0x1007a5c8
 23f2d5c:	023f0d99 	.word	0x023f0d99
 23f2d60:	1007a5c4 	.word	0x1007a5c4
 23f2d64:	023fca21 	.word	0x023fca21
 23f2d68:	023fca33 	.word	0x023fca33
 23f2d6c:	023f0b95 	.word	0x023f0b95
 23f2d70:	023fca43 	.word	0x023fca43
 23f2d74:	023fca67 	.word	0x023fca67
 23f2d78:	023f0a3d 	.word	0x023f0a3d
 23f2d7c:	023f0d85 	.word	0x023f0d85
 23f2d80:	023f0d8f 	.word	0x023f0d8f
 23f2d84:	1007a5c0 	.word	0x1007a5c0

023f2d88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f2d88:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f2d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2d8c:	4604      	mov	r4, r0
 23f2d8e:	460d      	mov	r5, r1
 23f2d90:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f2d92:	d916      	bls.n	23f2dc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f2d94:	4290      	cmp	r0, r2
 23f2d96:	d215      	bcs.n	23f2dc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f2d98:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f2d9c:	1a75      	subs	r5, r6, r1
 23f2d9e:	f1a1 0714 	sub.w	r7, r1, #20
 23f2da2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f2da4:	42b7      	cmp	r7, r6
 23f2da6:	d01c      	beq.n	23f2de2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f2da8:	b12c      	cbz	r4, 23f2db6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f2daa:	4631      	mov	r1, r6
 23f2dac:	4620      	mov	r0, r4
 23f2dae:	f006 fa20 	bl	23f91f2 <_ZN6StringC1EOS_>
 23f2db2:	7c33      	ldrb	r3, [r6, #16]
 23f2db4:	7423      	strb	r3, [r4, #16]
 23f2db6:	4630      	mov	r0, r6
 23f2db8:	f006 f9b2 	bl	23f9120 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f2dbc:	3e14      	subs	r6, #20
 23f2dbe:	3c14      	subs	r4, #20
 23f2dc0:	e7f0      	b.n	23f2da4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f2dc2:	d00e      	beq.n	23f2de2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f2dc4:	42b5      	cmp	r5, r6
 23f2dc6:	d00c      	beq.n	23f2de2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f2dc8:	b12c      	cbz	r4, 23f2dd6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f2dca:	4629      	mov	r1, r5
 23f2dcc:	4620      	mov	r0, r4
 23f2dce:	f006 fa10 	bl	23f91f2 <_ZN6StringC1EOS_>
 23f2dd2:	7c2b      	ldrb	r3, [r5, #16]
 23f2dd4:	7423      	strb	r3, [r4, #16]
 23f2dd6:	4628      	mov	r0, r5
 23f2dd8:	f006 f9a2 	bl	23f9120 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f2ddc:	3514      	adds	r5, #20
 23f2dde:	3414      	adds	r4, #20
 23f2de0:	e7f0      	b.n	23f2dc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f2de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f2de4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f2de4:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f2de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f2dea:	e9c0 3300 	strd	r3, r3, [r0]
 23f2dee:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f2df0:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f2df2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f2df4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f2df6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f2df8:	dd24      	ble.n	23f2e44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f2dfa:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f2dfe:	fb08 f007 	mul.w	r0, r8, r7
 23f2e02:	f004 fac3 	bl	23f738c <malloc>
            if (!d) {
 23f2e06:	4605      	mov	r5, r0
 23f2e08:	b1e0      	cbz	r0, 23f2e44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f2e0a:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f2e0e:	fb08 1202 	mla	r2, r8, r2, r1
 23f2e12:	f7ff ffb9 	bl	23f2d88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f2e16:	6820      	ldr	r0, [r4, #0]
 23f2e18:	f004 fac6 	bl	23f73a8 <free>
        data_ = d;
 23f2e1c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f2e1e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f2e20:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f2e24:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f2e28:	45b8      	cmp	r8, r7
 23f2e2a:	d009      	beq.n	23f2e40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f2e2c:	4639      	mov	r1, r7
 23f2e2e:	4628      	mov	r0, r5
 23f2e30:	f006 f9f9 	bl	23f9226 <_ZN6StringC1ERKS_>
 23f2e34:	7c3b      	ldrb	r3, [r7, #16]
 23f2e36:	3514      	adds	r5, #20
 23f2e38:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f2e3c:	3714      	adds	r7, #20
 23f2e3e:	e7f3      	b.n	23f2e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f2e40:	6873      	ldr	r3, [r6, #4]
 23f2e42:	6063      	str	r3, [r4, #4]
}
 23f2e44:	4620      	mov	r0, r4
 23f2e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f2e4c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23f2e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 23f2e50:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f2e54:	e9d0 9a00 	ldrd	r9, sl, [r0]
 23f2e58:	4693      	mov	fp, r2
 23f2e5a:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
 23f2e5e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 23f2e62:	4607      	mov	r7, r0
 23f2e64:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f2e66:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 23f2e6a:	d102      	bne.n	23f2e72 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23f2e6c:	4820      	ldr	r0, [pc, #128]	; (23f2ef0 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0xa4>)
 23f2e6e:	f006 fd42 	bl	23f98f6 <_ZSt20__throw_length_errorPKc>
 23f2e72:	2c01      	cmp	r4, #1
 23f2e74:	4622      	mov	r2, r4
 23f2e76:	bf38      	it	cc
 23f2e78:	2201      	movcc	r2, #1
 23f2e7a:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23f2e7c:	eba1 0609 	sub.w	r6, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f2e80:	d216      	bcs.n	23f2eb0 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x64>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f2e82:	b1bc      	cbz	r4, 23f2eb4 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x68>
 23f2e84:	429c      	cmp	r4, r3
 23f2e86:	bf28      	it	cs
 23f2e88:	461c      	movcs	r4, r3
        auto ptr = ei_dsp_malloc(bytes);
 23f2e8a:	00a0      	lsls	r0, r4, #2
 23f2e8c:	f000 ff85 	bl	23f3d9a <_Z9ei_mallocj>
 23f2e90:	4605      	mov	r5, r0
 23f2e92:	462a      	mov	r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f2e94:	4649      	mov	r1, r9
			       is_constructible<_Tp, _Args...>>>
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 23f2e96:	42f5      	cmn	r5, r6
 23f2e98:	bf1c      	itt	ne
 23f2e9a:	f8db 3000 	ldrne.w	r3, [fp]
 23f2e9e:	51ab      	strne	r3, [r5, r6]
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 23f2ea0:	4588      	cmp	r8, r1
 23f2ea2:	d009      	beq.n	23f2eb8 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x6c>
 23f2ea4:	b10a      	cbz	r2, 23f2eaa <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x5e>
 23f2ea6:	680b      	ldr	r3, [r1, #0]
 23f2ea8:	6013      	str	r3, [r2, #0]
 23f2eaa:	3104      	adds	r1, #4
 23f2eac:	3204      	adds	r2, #4
 23f2eae:	e7f7      	b.n	23f2ea0 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f2eb0:	461c      	mov	r4, r3
 23f2eb2:	e7ea      	b.n	23f2e8a <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f2eb4:	4625      	mov	r5, r4
 23f2eb6:	e7ec      	b.n	23f2e92 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x46>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 23f2eb8:	3604      	adds	r6, #4
 23f2eba:	442e      	add	r6, r5
 23f2ebc:	4643      	mov	r3, r8
      _ForwardIterator __cur = __result;
 23f2ebe:	4632      	mov	r2, r6
      for (; __first != __last; ++__first, (void)++__cur)
 23f2ec0:	459a      	cmp	sl, r3
 23f2ec2:	d004      	beq.n	23f2ece <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x82>
 23f2ec4:	f853 1b04 	ldr.w	r1, [r3], #4
 23f2ec8:	f842 1b04 	str.w	r1, [r2], #4
 23f2ecc:	e7f8      	b.n	23f2ec0 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x74>
 23f2ece:	ebaa 0808 	sub.w	r8, sl, r8
 23f2ed2:	4446      	add	r6, r8
	if (__p)
 23f2ed4:	f1b9 0f00 	cmp.w	r9, #0
 23f2ed8:	d002      	beq.n	23f2ee0 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x94>
        ei_dsp_free(p,0);
 23f2eda:	4648      	mov	r0, r9
 23f2edc:	f000 ff61 	bl	23f3da2 <_Z7ei_freePv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f2ee0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 23f2ee4:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f2ee8:	60bc      	str	r4, [r7, #8]
    }
 23f2eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f2eee:	bf00      	nop
 23f2ef0:	023fca85 	.word	0x023fca85

023f2ef4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
 23f2ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f2ef6:	ed2d 8b02 	vpush	{d8}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 23f2efa:	6802      	ldr	r2, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
 23f2efc:	4604      	mov	r4, r0
 23f2efe:	eef0 7a40 	vmov.f32	s15, s0
 23f2f02:	b085      	sub	sp, #20
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 23f2f04:	2a00      	cmp	r2, #0
 23f2f06:	d06d      	beq.n	23f2fe4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
 23f2f08:	6893      	ldr	r3, [r2, #8]
 23f2f0a:	2b00      	cmp	r3, #0
 23f2f0c:	d06a      	beq.n	23f2fe4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
 23f2f0e:	6913      	ldr	r3, [r2, #16]
 23f2f10:	2b00      	cmp	r3, #0
 23f2f12:	d067      	beq.n	23f2fe4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
        if (version == 1) {
 23f2f14:	2901      	cmp	r1, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f2f16:	ee20 0a20 	vmul.f32	s0, s0, s1
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 23f2f1a:	ee67 8a81 	vmul.f32	s17, s15, s2
        if (version == 1) {
 23f2f1e:	d143      	bne.n	23f2fa8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb4>
 23f2f20:	feb8 0a40 	vrinta.f32	s0, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f2f24:	eebd 8ac0 	vcvt.s32.f32	s16, s0
 23f2f28:	fef8 8a68 	vrinta.f32	s17, s17
            length = frame_sample_length;
 23f2f2c:	ee18 1a10 	vmov	r1, s16
                floor(static_cast<float>(length_signal - length) / frame_stride));
 23f2f30:	1a5b      	subs	r3, r3, r1
 23f2f32:	ee07 3a90 	vmov	s15, r3
 23f2f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f2f3a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  { return __builtin_floorf(__x); }
 23f2f3e:	fefb 7a47 	vrintm.f32	s15, s14
            numframes = static_cast<int>(
 23f2f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f2f46:	edcd 7a01 	vstr	s15, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 23f2f4a:	9b01      	ldr	r3, [sp, #4]
            length = frame_sample_length;
 23f2f4c:	2500      	movs	r5, #0
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 23f2f4e:	3b01      	subs	r3, #1
 23f2f50:	ee07 3a90 	vmov	s15, r3
 23f2f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23f2f58:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 23f2f5c:	eee8 7a87 	vfma.f32	s15, s17, s14
            len_sig = static_cast<int>(
 23f2f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            length = frame_sample_length;
 23f2f64:	462e      	mov	r6, r5
            len_sig = static_cast<int>(
 23f2f66:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
 23f2f6a:	9b02      	ldr	r3, [sp, #8]
        info->frame_ixs.clear();
 23f2f6c:	1d27      	adds	r7, r4, #4
            info->signal->total_length = static_cast<size_t>(len_sig);
 23f2f6e:	6113      	str	r3, [r2, #16]
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 23f2f70:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23f2f74:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 23f2f76:	bf18      	it	ne
 23f2f78:	60a3      	strne	r3, [r4, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 23f2f7a:	9b02      	ldr	r3, [sp, #8]
 23f2f7c:	42ab      	cmp	r3, r5
 23f2f7e:	d92a      	bls.n	23f2fd6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe2>
            if (++frame_count > numframes) break;
 23f2f80:	9b01      	ldr	r3, [sp, #4]
 23f2f82:	3601      	adds	r6, #1
 23f2f84:	429e      	cmp	r6, r3
 23f2f86:	dc26      	bgt.n	23f2fd6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe2>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23f2f88:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f2f8c:	4299      	cmp	r1, r3
            info->frame_ixs.push_back(ix);
 23f2f8e:	9503      	str	r5, [sp, #12]
 23f2f90:	d01c      	beq.n	23f2fcc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xd8>
 23f2f92:	b101      	cbz	r1, 23f2f96 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xa2>
 23f2f94:	600d      	str	r5, [r1, #0]
	    ++this->_M_impl._M_finish;
 23f2f96:	68a3      	ldr	r3, [r4, #8]
 23f2f98:	3304      	adds	r3, #4
 23f2f9a:	60a3      	str	r3, [r4, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 23f2f9c:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 23f2fa0:	ee17 3a90 	vmov	r3, s15
 23f2fa4:	441d      	add	r5, r3
 23f2fa6:	e7e8      	b.n	23f2f7a <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x86>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f2fa8:	f7fd fd4a 	bl	23f0a40 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 23f2fac:	eebd 8ac0 	vcvt.s32.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f2fb0:	eeb0 0a68 	vmov.f32	s0, s17
 23f2fb4:	f7fd fd44 	bl	23f0a40 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            length = (frame_sample_length - (int)frame_stride);
 23f2fb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f2fbc:	ee18 0a10 	vmov	r0, s16
 23f2fc0:	ee17 1a90 	vmov	r1, s15
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f2fc4:	eef0 8a40 	vmov.f32	s17, s0
            length = (frame_sample_length - (int)frame_stride);
 23f2fc8:	1a41      	subs	r1, r0, r1
 23f2fca:	e7b1      	b.n	23f2f30 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x3c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 23f2fcc:	4638      	mov	r0, r7
 23f2fce:	aa03      	add	r2, sp, #12
 23f2fd0:	f7ff ff3c 	bl	23f2e4c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>
 23f2fd4:	e7e2      	b.n	23f2f9c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xa8>
        info->frame_length = frame_sample_length;
 23f2fd6:	ed84 8a04 	vstr	s16, [r4, #16]
        return EIDSP_OK;
 23f2fda:	2000      	movs	r0, #0
    }
 23f2fdc:	b005      	add	sp, #20
 23f2fde:	ecbd 8b02 	vpop	{d8}
 23f2fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 23f2fe4:	4800      	ldr	r0, [pc, #0]	; (23f2fe8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf4>)
 23f2fe6:	e7f9      	b.n	23f2fdc <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe8>
 23f2fe8:	fffffc15 	.word	0xfffffc15

023f2fec <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe_v3(matrix_t *out_features, matrix_t *out_energies,
 23f2fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2ff0:	b099      	sub	sp, #100	; 0x64
 23f2ff2:	4699      	mov	r9, r3
 23f2ff4:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
 23f2ff8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 23f2ffc:	4605      	mov	r5, r0
 23f2ffe:	460e      	mov	r6, r1
 23f3000:	eeb0 1a60 	vmov.f32	s2, s1
 23f3004:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 23f3008:	9305      	str	r3, [sp, #20]
        uint16_t version
        )
    {
        int ret = 0;

        if (high_frequency == 0) {
 23f300a:	f1bb 0f00 	cmp.w	fp, #0
 23f300e:	d101      	bne.n	23f3014 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x28>
            high_frequency = sampling_frequency / 2;
 23f3010:	ea4f 0b59 	mov.w	fp, r9, lsr #1
        }

        stack_frames_info_t stack_frame_info = { 0 };
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
 23f3014:	ee07 9a90 	vmov	s15, r9
        stack_frames_info_t stack_frame_info = { 0 };
 23f3018:	2300      	movs	r3, #0
        ret = processing::stack_frames(
 23f301a:	eef0 0a40 	vmov.f32	s1, s0
            low_frequency = 300;
 23f301e:	f1ba 0f00 	cmp.w	sl, #0
        ret = processing::stack_frames(
 23f3022:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 23f3026:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 23f302a:	a80e      	add	r0, sp, #56	; 0x38
            low_frequency = 300;
 23f302c:	bf08      	it	eq
 23f302e:	f44f 7a96 	moveq.w	sl, #300	; 0x12c
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f3032:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
        stack_frames_info_t stack_frame_info = { 0 };
 23f3036:	9312      	str	r3, [sp, #72]	; 0x48
 23f3038:	9311      	str	r3, [sp, #68]	; 0x44
        stack_frame_info.signal = signal;
 23f303a:	920e      	str	r2, [sp, #56]	; 0x38
        ret = processing::stack_frames(
 23f303c:	f7ff ff5a 	bl	23f2ef4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 23f3040:	4604      	mov	r4, r0
 23f3042:	2800      	cmp	r0, #0
 23f3044:	f040 80e1 	bne.w	23f320a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f3048:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 23f304c:	1a9b      	subs	r3, r3, r2
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 23f304e:	686a      	ldr	r2, [r5, #4]
 23f3050:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23f3054:	f040 80eb 	bne.w	23f322e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (num_filters != out_features->cols) {
 23f3058:	68ab      	ldr	r3, [r5, #8]
 23f305a:	4598      	cmp	r8, r3
 23f305c:	f040 80e7 	bne.w	23f322e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (out_energies) {
 23f3060:	b19e      	cbz	r6, 23f308a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x9e>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 23f3062:	6873      	ldr	r3, [r6, #4]
 23f3064:	4293      	cmp	r3, r2
 23f3066:	f040 80e2 	bne.w	23f322e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
 23f306a:	68b3      	ldr	r3, [r6, #8]
 23f306c:	2b01      	cmp	r3, #1
 23f306e:	f040 80de 	bne.w	23f322e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
            }
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
            *(out_features->buffer + i) = 0;
 23f3072:	2200      	movs	r2, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f3074:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f3078:	434b      	muls	r3, r1
 23f307a:	42a3      	cmp	r3, r4
 23f307c:	d907      	bls.n	23f308e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xa2>
            *(out_features->buffer + i) = 0;
 23f307e:	682b      	ldr	r3, [r5, #0]
 23f3080:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f3084:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f3086:	3401      	adds	r4, #1
 23f3088:	e7f4      	b.n	23f3074 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x88>
 23f308a:	4634      	mov	r4, r6
 23f308c:	e7f1      	b.n	23f3072 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x86>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 23f308e:	9b05      	ldr	r3, [sp, #20]
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 23f3090:	2101      	movs	r1, #1
 23f3092:	0858      	lsrs	r0, r3, #1
 23f3094:	1c47      	adds	r7, r0, #1
 23f3096:	fb00 8008 	mla	r0, r0, r8, r8
 23f309a:	f000 fe80 	bl	23f3d9e <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f309e:	2301      	movs	r3, #1
        }
        rows = n_rows;
        cols = n_cols;
        dequantization_fn = a_dequantization_fn;
 23f30a0:	4a64      	ldr	r2, [pc, #400]	; (23f3234 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x248>)
        cols = n_cols;
 23f30a2:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 23f30a6:	9013      	str	r0, [sp, #76]	; 0x4c
            buffer_managed_by_me = true;
 23f30a8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        dequantization_fn = a_dequantization_fn;
 23f30ac:	9217      	str	r2, [sp, #92]	; 0x5c

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 23f30ae:	2800      	cmp	r0, #0
 23f30b0:	f000 80bb 	beq.w	23f322a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x23e>
#endif
        if (!filterbanks.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = feature::filterbanks(
 23f30b4:	e9cd b301 	strd	fp, r3, [sp, #4]
 23f30b8:	463a      	mov	r2, r7
 23f30ba:	464b      	mov	r3, r9
 23f30bc:	4641      	mov	r1, r8
 23f30be:	f8cd a000 	str.w	sl, [sp]
 23f30c2:	a813      	add	r0, sp, #76	; 0x4c
 23f30c4:	f7fe fbe0 	bl	23f1888 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 23f30c8:	4604      	mov	r4, r0
 23f30ca:	2800      	cmp	r0, #0
 23f30cc:	f040 8096 	bne.w	23f31fc <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
            EIDSP_ERR(ret);
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f30d0:	4680      	mov	r8, r0
                    tmp += row[k] * quantized_values_one_zero[u8];
 23f30d2:	f8df b174 	ldr.w	fp, [pc, #372]	; 23f3248 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25c>
 23f30d6:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 23f30da:	1a9b      	subs	r3, r3, r2
 23f30dc:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
 23f30e0:	f080 809f 	bcs.w	23f3222 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x236>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f30e4:	2300      	movs	r3, #0
 23f30e6:	463a      	mov	r2, r7
 23f30e8:	2101      	movs	r1, #1
 23f30ea:	a806      	add	r0, sp, #24
 23f30ec:	f7fd feb9 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f30f0:	9b06      	ldr	r3, [sp, #24]
 23f30f2:	2b00      	cmp	r3, #0
 23f30f4:	f000 8093 	beq.w	23f321e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x232>
            if (!power_spectrum_frame.buffer) {
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f30f8:	2300      	movs	r3, #0
 23f30fa:	2101      	movs	r1, #1
 23f30fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f30fe:	a80a      	add	r0, sp, #40	; 0x28
 23f3100:	f7fd feaf 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f3104:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 23f3108:	f1b9 0f00 	cmp.w	r9, #0
 23f310c:	d06d      	beq.n	23f31ea <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fe>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 23f310e:	4641      	mov	r1, r8
 23f3110:	a80f      	add	r0, sp, #60	; 0x3c
 23f3112:	f7ff fc0d 	bl	23f2930 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 23f3116:	6801      	ldr	r1, [r0, #0]
            size_t signal_length = stack_frame_info.frame_length;
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f3118:	980e      	ldr	r0, [sp, #56]	; 0x38
            size_t signal_length = stack_frame_info.frame_length;
 23f311a:	9a12      	ldr	r2, [sp, #72]	; 0x48
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f311c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 23f3120:	188b      	adds	r3, r1, r2
 23f3122:	4563      	cmp	r3, ip
                signal_length = signal_length -
 23f3124:	bf84      	itt	hi
 23f3126:	eba2 020c 	subhi.w	r2, r2, ip
 23f312a:	18d2      	addhi	r2, r2, r3
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
 23f312c:	464b      	mov	r3, r9
 23f312e:	f7fe fffd 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 23f3132:	4681      	mov	r9, r0
 23f3134:	2800      	cmp	r0, #0
 23f3136:	d15a      	bne.n	23f31ee <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
                EIDSP_ERR(ret);
            }

            ret = numpy::power_spectrum(
 23f3138:	9b05      	ldr	r3, [sp, #20]
 23f313a:	9a06      	ldr	r2, [sp, #24]
 23f313c:	9300      	str	r3, [sp, #0]
 23f313e:	9912      	ldr	r1, [sp, #72]	; 0x48
 23f3140:	463b      	mov	r3, r7
 23f3142:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f3144:	f7fe fae6 	bl	23f1714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 23f3148:	4681      	mov	r9, r0
 23f314a:	2800      	cmp	r0, #0
 23f314c:	d14f      	bne.n	23f31ee <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
        float res = 0.0f;
 23f314e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23f3238 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>
 23f3152:	9b06      	ldr	r3, [sp, #24]
            res += input_array[ix];
 23f3154:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f3158:	f109 0901 	add.w	r9, r9, #1
 23f315c:	454f      	cmp	r7, r9
            res += input_array[ix];
 23f315e:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f3162:	d8f7      	bhi.n	23f3154 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x168>
                EIDSP_ERR(ret);
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
            if (energy == 0) {
 23f3164:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f3168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
 23f316c:	bf08      	it	eq
 23f316e:	eddf 7a33 	vldreq	s15, [pc, #204]	; 23f323c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x250>
            }

            if (out_energies) {
 23f3172:	b126      	cbz	r6, 23f317e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x192>
                out_energies->buffer[ix] = energy;
 23f3174:	6833      	ldr	r3, [r6, #0]
 23f3176:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 23f317a:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
 23f317e:	9b14      	ldr	r3, [sp, #80]	; 0x50
            }

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 23f3180:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23f3184:	429f      	cmp	r7, r3
 23f3186:	d147      	bne.n	23f3218 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x22c>
 23f3188:	2000      	movs	r0, #0
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 23f318a:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 23f318e:	b283      	uxth	r3, r0
 23f3190:	4563      	cmp	r3, ip
 23f3192:	d221      	bcs.n	23f31d8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ec>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f3194:	2200      	movs	r2, #0
            float tmp = 0.0;
 23f3196:	eddf 7a28 	vldr	s15, [pc, #160]	; 23f3238 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f319a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f319c:	eb01 0a03 	add.w	sl, r1, r3
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 23f31a0:	4297      	cmp	r7, r2
 23f31a2:	d910      	bls.n	23f31c6 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1da>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f31a4:	fb0c f102 	mul.w	r1, ip, r2
 23f31a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
                if (u8) { // this matrix appears to be very sparsely populated
 23f31ac:	b149      	cbz	r1, 23f31c2 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1d6>
                    tmp += row[k] * quantized_values_one_zero[u8];
 23f31ae:	eb09 0e82 	add.w	lr, r9, r2, lsl #2
 23f31b2:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 23f31b6:	edde 6a00 	vldr	s13, [lr]
 23f31ba:	ed91 7a00 	vldr	s14, [r1]
 23f31be:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 23f31c2:	3201      	adds	r2, #1
 23f31c4:	e7ec      	b.n	23f31a0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1b4>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
 23f31c6:	fb0c 3c08 	mla	ip, ip, r8, r3
 23f31ca:	682b      	ldr	r3, [r5, #0]
 23f31cc:	3001      	adds	r0, #1
 23f31ce:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 23f31d2:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 23f31d6:	e7d8      	b.n	23f318a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x19e>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f31d8:	a80a      	add	r0, sp, #40	; 0x28
 23f31da:	f7fd fe57 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f31de:	a806      	add	r0, sp, #24
 23f31e0:	f7fd fe54 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f31e4:	f108 0801 	add.w	r8, r8, #1
 23f31e8:	e775      	b.n	23f30d6 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xea>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f31ea:	f8df 9054 	ldr.w	r9, [pc, #84]	; 23f3240 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>
 23f31ee:	a80a      	add	r0, sp, #40	; 0x28
 23f31f0:	f7fd fe4c 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f31f4:	464c      	mov	r4, r9
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f31f6:	a806      	add	r0, sp, #24
 23f31f8:	f7fd fe48 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
#endif
        }
    }

    ~ei_quantized_matrix() {
        if (buffer && buffer_managed_by_me) {
 23f31fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23f31fe:	b120      	cbz	r0, 23f320a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
 23f3200:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f3204:	b10b      	cbz	r3, 23f320a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
            ei_free(buffer);
 23f3206:	f000 fdcc 	bl	23f3da2 <_Z7ei_freePv>
      }
 23f320a:	a80f      	add	r0, sp, #60	; 0x3c
 23f320c:	f7ff fb87 	bl	23f291e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
        }

        numpy::zero_handling(out_features);

        return EIDSP_OK;
    }
 23f3210:	4620      	mov	r0, r4
 23f3212:	b019      	add	sp, #100	; 0x64
 23f3214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f3218:	f8df 9028 	ldr.w	r9, [pc, #40]	; 23f3244 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>
 23f321c:	e7e7      	b.n	23f31ee <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f321e:	4c08      	ldr	r4, [pc, #32]	; (23f3240 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>)
 23f3220:	e7e9      	b.n	23f31f6 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20a>
        numpy::zero_handling(out_features);
 23f3222:	4628      	mov	r0, r5
 23f3224:	f7fe fab4 	bl	23f1790 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
 23f3228:	e7e8      	b.n	23f31fc <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 23f322a:	4c05      	ldr	r4, [pc, #20]	; (23f3240 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>)
 23f322c:	e7e6      	b.n	23f31fc <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f322e:	4c05      	ldr	r4, [pc, #20]	; (23f3244 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>)
 23f3230:	e7eb      	b.n	23f320a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
 23f3232:	bf00      	nop
 23f3234:	023f0a2d 	.word	0x023f0a2d
 23f3238:	00000000 	.word	0x00000000
 23f323c:	2edbe6ff 	.word	0x2edbe6ff
 23f3240:	fffffc16 	.word	0xfffffc16
 23f3244:	fffffc14 	.word	0xfffffc14
 23f3248:	023fcc88 	.word	0x023fcc88
 23f324c:	00000000 	.word	0x00000000

023f3250 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 23f3250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3254:	ed2d 8b06 	vpush	{d8-d10}
 23f3258:	b095      	sub	sp, #84	; 0x54
 23f325a:	460f      	mov	r7, r1
 23f325c:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 23f3260:	4604      	mov	r4, r0
 23f3262:	9103      	str	r1, [sp, #12]
        if (high_frequency == 0) {
 23f3264:	9927      	ldr	r1, [sp, #156]	; 0x9c
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 23f3266:	eeb0 1a60 	vmov.f32	s2, s1
 23f326a:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 23f326e:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 23f3272:	f8bd b0a0 	ldrh.w	fp, [sp, #160]	; 0xa0
        if (high_frequency == 0) {
 23f3276:	b909      	cbnz	r1, 23f327c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c>
            high_frequency = sampling_frequency / 2;
 23f3278:	0859      	lsrs	r1, r3, #1
 23f327a:	9127      	str	r1, [sp, #156]	; 0x9c
        if (version<4) {
 23f327c:	f1bb 0f03 	cmp.w	fp, #3
 23f3280:	d804      	bhi.n	23f328c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3c>
                low_frequency = 300;
 23f3282:	f1b8 0f00 	cmp.w	r8, #0
 23f3286:	bf08      	it	eq
 23f3288:	f44f 7896 	moveq.w	r8, #300	; 0x12c
        ret = processing::stack_frames(
 23f328c:	ee07 3a90 	vmov	s15, r3
        stack_frames_info_t stack_frame_info = { 0 };
 23f3290:	2100      	movs	r1, #0
        ret = processing::stack_frames(
 23f3292:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 23f3296:	eef0 0a40 	vmov.f32	s1, s0
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f329a:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
        stack_frames_info_t stack_frame_info = { 0 };
 23f329e:	9113      	str	r1, [sp, #76]	; 0x4c
 23f32a0:	9112      	str	r1, [sp, #72]	; 0x48
        ret = processing::stack_frames(
 23f32a2:	eeb0 0a49 	vmov.f32	s0, s18
 23f32a6:	4659      	mov	r1, fp
 23f32a8:	a80f      	add	r0, sp, #60	; 0x3c
        stack_frame_info.signal = signal;
 23f32aa:	920f      	str	r2, [sp, #60]	; 0x3c
        ret = processing::stack_frames(
 23f32ac:	f7ff fe22 	bl	23f2ef4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
        if (ret != 0) {
 23f32b0:	4605      	mov	r5, r0
 23f32b2:	bba0      	cbnz	r0, 23f331e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f32b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f32b8:	1a9b      	subs	r3, r3, r2
        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 23f32ba:	6862      	ldr	r2, [r4, #4]
 23f32bc:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23f32c0:	f040 8187 	bne.w	23f35d2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
        if (num_filters != out_features->cols) {
 23f32c4:	68a3      	ldr	r3, [r4, #8]
 23f32c6:	459a      	cmp	sl, r3
 23f32c8:	f040 8183 	bne.w	23f35d2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
        if (out_energies) {
 23f32cc:	b19f      	cbz	r7, 23f32f6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xa6>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 23f32ce:	687b      	ldr	r3, [r7, #4]
 23f32d0:	4293      	cmp	r3, r2
 23f32d2:	f040 817e 	bne.w	23f35d2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
 23f32d6:	68bb      	ldr	r3, [r7, #8]
 23f32d8:	2b01      	cmp	r3, #1
 23f32da:	f040 817a 	bne.w	23f35d2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
            *(out_features->buffer + i) = 0;
 23f32de:	2200      	movs	r2, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f32e0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 23f32e4:	434b      	muls	r3, r1
 23f32e6:	42ab      	cmp	r3, r5
 23f32e8:	d907      	bls.n	23f32fa <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xaa>
            *(out_features->buffer + i) = 0;
 23f32ea:	6823      	ldr	r3, [r4, #0]
 23f32ec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23f32f0:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f32f2:	3501      	adds	r5, #1
 23f32f4:	e7f4      	b.n	23f32e0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x90>
 23f32f6:	463d      	mov	r5, r7
 23f32f8:	e7f1      	b.n	23f32de <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x8e>
        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 23f32fa:	9b03      	ldr	r3, [sp, #12]
        const int MELS_SIZE = num_filters + 2;
 23f32fc:	f10a 0602 	add.w	r6, sl, #2
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 23f3300:	2104      	movs	r1, #4
 23f3302:	4630      	mov	r0, r6
        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 23f3304:	ea4f 0953 	mov.w	r9, r3, lsr #1
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 23f3308:	f000 fd49 	bl	23f3d9e <_Z9ei_callocjj>
 23f330c:	f109 0901 	add.w	r9, r9, #1
        EI_ERR_AND_RETURN_ON_NULL(mels, EIDSP_OUT_OF_MEM);
 23f3310:	4605      	mov	r5, r0
 23f3312:	b968      	cbnz	r0, 23f3330 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xe0>
 23f3314:	48b2      	ldr	r0, [pc, #712]	; (23f35e0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x390>)
 23f3316:	f000 fd13 	bl	23f3d40 <_Z9ei_printfPKcz>
 23f331a:	f2a5 35ea 	subw	r5, r5, #1002	; 0x3ea
      }
 23f331e:	a810      	add	r0, sp, #64	; 0x40
 23f3320:	f7ff fafd 	bl	23f291e <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
    }
 23f3324:	4628      	mov	r0, r5
 23f3326:	b015      	add	sp, #84	; 0x54
 23f3328:	ecbd 8b06 	vpop	{d8-d10}
 23f332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        numpy::linspace(
 23f3330:	ee07 8a90 	vmov	s15, r8
 23f3334:	eef8 8a67 	vcvt.f32.u32	s17, s15
 23f3338:	4aaa      	ldr	r2, [pc, #680]	; (23f35e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x394>)
 23f333a:	eeb0 0a68 	vmov.f32	s0, s17
 23f333e:	e9cd 2005 	strd	r2, r0, [sp, #20]
 23f3342:	f7fe fa3d 	bl	23f17c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f3346:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
 23f334a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 23f334e:	eef0 9a40 	vmov.f32	s19, s0
 23f3352:	eeb0 0a48 	vmov.f32	s0, s16
 23f3356:	f7fe fa33 	bl	23f17c0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f335a:	4630      	mov	r0, r6
 23f335c:	eef0 0a40 	vmov.f32	s1, s0
 23f3360:	4629      	mov	r1, r5
 23f3362:	eeb0 0a69 	vmov.f32	s0, s19
 23f3366:	f7fd fd29 	bl	23f0dbc <_ZN2ei5numpy8linspaceEffmPf.isra.0>
        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 23f336a:	9b03      	ldr	r3, [sp, #12]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f336c:	2600      	movs	r6, #0
        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 23f336e:	f1bb 0f03 	cmp.w	fp, #3
 23f3372:	bf98      	it	ls
 23f3374:	464b      	movls	r3, r9
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f3376:	3301      	adds	r3, #1
 23f3378:	ee0a 3a10 	vmov	s20, r3
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f337c:	f06f 0b01 	mvn.w	fp, #1
            mels[ix] = functions::mel_to_frequency(mels[ix]);
 23f3380:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23f3384:	ed98 0a00 	vldr	s0, [r8]
 23f3388:	f7fe fa5c 	bl	23f1844 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
                mels[ix] = low_frequency;
 23f338c:	eef4 8a40 	vcmp.f32	s17, s0
 23f3390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f3394:	fe38 0a80 	vselgt.f32	s0, s17, s0
                mels[ix] = high_frequency;
 23f3398:	eeb4 8a40 	vcmp.f32	s16, s0
 23f339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f33a0:	eef8 9aca 	vcvt.f32.s32	s19, s20
                mels[ix] = high_frequency;
 23f33a4:	bf48      	it	mi
 23f33a6:	eeb0 0a48 	vmovmi.f32	s0, s16
 23f33aa:	ed88 0a00 	vstr	s0, [r8]
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f33ae:	ee29 0a80 	vmul.f32	s0, s19, s0
 23f33b2:	ee80 7a09 	vdiv.f32	s14, s0, s18
 23f33b6:	febb 7a47 	vrintm.f32	s14, s14
 23f33ba:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f33be:	ee17 3a10 	vmov	r3, s14
 23f33c2:	fb0b f206 	mul.w	r2, fp, r6
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f33c6:	3601      	adds	r6, #1
 23f33c8:	b2b6      	uxth	r6, r6
 23f33ca:	45b2      	cmp	sl, r6
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f33cc:	f828 3002 	strh.w	r3, [r8, r2]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f33d0:	dad6      	bge.n	23f3380 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x130>
        mels[MELS_SIZE-1] = functions::mel_to_frequency(mels[MELS_SIZE-1]);
 23f33d2:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 23f33d6:	3301      	adds	r3, #1
 23f33d8:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 23f33dc:	ed96 0a00 	vldr	s0, [r6]
 23f33e0:	f7fe fa30 	bl	23f1844 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
            mels[MELS_SIZE-1] = high_frequency;
 23f33e4:	eeb4 8ac0 	vcmpe.f32	s16, s0
 23f33e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        mels[MELS_SIZE-1] -= 0.001;
 23f33ec:	bf54      	ite	pl
 23f33ee:	ee10 0a10 	vmovpl	r0, s0
 23f33f2:	ee18 0a10 	vmovmi	r0, s16
 23f33f6:	f7f9 fa3f 	bl	23ec878 <__aeabi_f2d>
 23f33fa:	a377      	add	r3, pc, #476	; (adr r3, 23f35d8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x388>)
 23f33fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3400:	f7f9 f8da 	bl	23ec5b8 <__aeabi_dsub>
 23f3404:	f7f9 fd88 	bl	23ecf18 <__aeabi_d2f>
 23f3408:	ee07 0a90 	vmov	s15, r0
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f340c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23f3410:	ee87 7a89 	vdiv.f32	s14, s15, s18
 23f3414:	fefb 7a47 	vrintm.f32	s15, s14
 23f3418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 23f341c:	ee17 2a90 	vmov	r2, s15
 23f3420:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 23f3424:	3301      	adds	r3, #1
        mels[MELS_SIZE-1] -= 0.001;
 23f3426:	6030      	str	r0, [r6, #0]
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f3428:	2101      	movs	r1, #1
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 23f342a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f342e:	a807      	add	r0, sp, #28
 23f3430:	2300      	movs	r3, #0
 23f3432:	464a      	mov	r2, r9
 23f3434:	f7fd fd15 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f3438:	9b07      	ldr	r3, [sp, #28]
 23f343a:	2b00      	cmp	r3, #0
 23f343c:	f000 80c7 	beq.w	23f35ce <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x37e>
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f3440:	2300      	movs	r3, #0
 23f3442:	2101      	movs	r1, #1
 23f3444:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23f3446:	a80b      	add	r0, sp, #44	; 0x2c
 23f3448:	f7fd fd0b 	bl	23f0e62 <_ZN2ei9ei_matrixC1EmmPf>
 23f344c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f344e:	2b00      	cmp	r3, #0
 23f3450:	f000 80ba 	beq.w	23f35c8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x378>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f3454:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f3456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f345a:	1a9b      	subs	r3, r3, r2
 23f345c:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
 23f3460:	f080 80a2 	bcs.w	23f35a8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x358>
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 23f3464:	4631      	mov	r1, r6
 23f3466:	a810      	add	r0, sp, #64	; 0x40
 23f3468:	f7ff fa62 	bl	23f2930 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 23f346c:	6801      	ldr	r1, [r0, #0]
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f346e:	980f      	ldr	r0, [sp, #60]	; 0x3c
            size_t signal_length = stack_frame_info.frame_length;
 23f3470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f3472:	f8d0 c010 	ldr.w	ip, [r0, #16]
 23f3476:	188b      	adds	r3, r1, r2
 23f3478:	4563      	cmp	r3, ip
                signal_length = signal_length -
 23f347a:	bf84      	itt	hi
 23f347c:	eba2 020c 	subhi.w	r2, r2, ip
 23f3480:	18d2      	addhi	r2, r2, r3
            ret = stack_frame_info.signal->get_data(
 23f3482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f3484:	f7fe fe52 	bl	23f212c <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
 23f3488:	4680      	mov	r8, r0
 23f348a:	2800      	cmp	r0, #0
 23f348c:	f040 8091 	bne.w	23f35b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
            ret = numpy::power_spectrum(
 23f3490:	9b03      	ldr	r3, [sp, #12]
 23f3492:	9a07      	ldr	r2, [sp, #28]
 23f3494:	9300      	str	r3, [sp, #0]
 23f3496:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f3498:	464b      	mov	r3, r9
 23f349a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23f349c:	f7fe f93a 	bl	23f1714 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
            if (ret != 0) {
 23f34a0:	4680      	mov	r8, r0
 23f34a2:	2800      	cmp	r0, #0
 23f34a4:	f040 8085 	bne.w	23f35b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
        float res = 0.0f;
 23f34a8:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23f35e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x398>
 23f34ac:	9b07      	ldr	r3, [sp, #28]
            res += input_array[ix];
 23f34ae:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f34b2:	f108 0801 	add.w	r8, r8, #1
 23f34b6:	45c1      	cmp	r9, r8
            res += input_array[ix];
 23f34b8:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f34bc:	d8f7      	bhi.n	23f34ae <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25e>
            if (energy == 0) {
 23f34be:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f34c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
 23f34c6:	bf08      	it	eq
 23f34c8:	eddf 7a48 	vldreq	s15, [pc, #288]	; 23f35ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x39c>
            if (out_energies) {
 23f34cc:	b127      	cbz	r7, 23f34d8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x288>
                out_energies->buffer[ix] = energy;
 23f34ce:	683b      	ldr	r3, [r7, #0]
 23f34d0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f34d4:	edc3 7a00 	vstr	s15, [r3]
            for (size_t i = 0; i < num_filters; i++) {
 23f34d8:	4629      	mov	r1, r5
 23f34da:	f04f 0c00 	mov.w	ip, #0
 23f34de:	68a3      	ldr	r3, [r4, #8]
 23f34e0:	6822      	ldr	r2, [r4, #0]
 23f34e2:	4373      	muls	r3, r6
 23f34e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23f34e8:	45e2      	cmp	sl, ip
 23f34ea:	d95b      	bls.n	23f35a4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x354>
                size_t left = bins[i];
 23f34ec:	f8b1 b000 	ldrh.w	fp, [r1]
                size_t middle = bins[i+1];
 23f34f0:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 23f34f4:	f10c 0c01 	add.w	ip, ip, #1
                size_t right = bins[i+2];
 23f34f8:	f8b1 8002 	ldrh.w	r8, [r1, #2]
                assert(right < power_spectrum_frame_size);
 23f34fc:	45c1      	cmp	r9, r8
 23f34fe:	d806      	bhi.n	23f350e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2be>
 23f3500:	f240 115f 	movw	r1, #351	; 0x15f
 23f3504:	4b3a      	ldr	r3, [pc, #232]	; (23f35f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a0>)
 23f3506:	4a3b      	ldr	r2, [pc, #236]	; (23f35f4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a4>)
 23f3508:	483b      	ldr	r0, [pc, #236]	; (23f35f8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a8>)
 23f350a:	f003 ffa1 	bl	23f7450 <__assert_func>
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 23f350e:	9807      	ldr	r0, [sp, #28]
                for (size_t bin = left+1; bin < right; bin++) {
 23f3510:	f10b 0e01 	add.w	lr, fp, #1
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 23f3514:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 23f3518:	6800      	ldr	r0, [r0, #0]
 23f351a:	f843 0b04 	str.w	r0, [r3], #4
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f351e:	eba2 000b 	sub.w	r0, r2, fp
 23f3522:	ee07 0a10 	vmov	s14, r0
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f3526:	eba8 0002 	sub.w	r0, r8, r2
 23f352a:	ee06 0a90 	vmov	s13, r0
                for (size_t bin = left+1; bin < right; bin++) {
 23f352e:	45c6      	cmp	lr, r8
 23f3530:	d2da      	bcs.n	23f34e8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x298>
                    if (bin < middle) {
 23f3532:	4596      	cmp	lr, r2
 23f3534:	d218      	bcs.n	23f3568 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f3536:	ee07 ba90 	vmov	s15, fp
 23f353a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 23f353e:	ee07 ea90 	vmov	s15, lr
 23f3542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f3546:	ee77 7ac6 	vsub.f32	s15, s15, s12
 23f354a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
                            power_spectrum_frame.buffer[bin];
 23f354e:	9807      	ldr	r0, [sp, #28]
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f3550:	eec7 5a86 	vdiv.f32	s11, s15, s12
                            power_spectrum_frame.buffer[bin];
 23f3554:	eb00 008e 	add.w	r0, r0, lr, lsl #2
                        row_ptr[i] +=
 23f3558:	ed90 6a00 	vldr	s12, [r0]
 23f355c:	ed53 7a01 	vldr	s15, [r3, #-4]
 23f3560:	eee5 7a86 	vfma.f32	s15, s11, s12
 23f3564:	ed43 7a01 	vstr	s15, [r3, #-4]
                    if (bin > middle) {
 23f3568:	4596      	cmp	lr, r2
 23f356a:	d918      	bls.n	23f359e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x34e>
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f356c:	ee07 ea90 	vmov	s15, lr
 23f3570:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 23f3574:	ee07 8a90 	vmov	s15, r8
 23f3578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f357c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 23f3580:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                            power_spectrum_frame.buffer[bin];
 23f3584:	9807      	ldr	r0, [sp, #28]
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f3586:	eec7 5a86 	vdiv.f32	s11, s15, s12
                            power_spectrum_frame.buffer[bin];
 23f358a:	eb00 008e 	add.w	r0, r0, lr, lsl #2
                        row_ptr[i] +=
 23f358e:	ed90 6a00 	vldr	s12, [r0]
 23f3592:	ed53 7a01 	vldr	s15, [r3, #-4]
 23f3596:	eee5 7a86 	vfma.f32	s15, s11, s12
 23f359a:	ed43 7a01 	vstr	s15, [r3, #-4]
                for (size_t bin = left+1; bin < right; bin++) {
 23f359e:	f10e 0e01 	add.w	lr, lr, #1
 23f35a2:	e7c4      	b.n	23f352e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2de>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f35a4:	3601      	adds	r6, #1
 23f35a6:	e756      	b.n	23f3456 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x206>
        numpy::zero_handling(out_features);
 23f35a8:	4620      	mov	r0, r4
 23f35aa:	f7fe f8f1 	bl	23f1790 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
 23f35ae:	f04f 0800 	mov.w	r8, #0
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f35b2:	a80b      	add	r0, sp, #44	; 0x2c
 23f35b4:	f7fd fc6a 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
 23f35b8:	4645      	mov	r5, r8
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f35ba:	a807      	add	r0, sp, #28
 23f35bc:	f7fd fc66 	bl	23f0e8c <_ZN2ei9ei_matrixD1Ev>
        ei_unique_ptr_t __ptr__(mels,ei_free);
 23f35c0:	a805      	add	r0, sp, #20
 23f35c2:	f7fe fd64 	bl	23f208e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 23f35c6:	e6aa      	b.n	23f331e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f35c8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 23f35fc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ac>
 23f35cc:	e7f1      	b.n	23f35b2 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f35ce:	4d0b      	ldr	r5, [pc, #44]	; (23f35fc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ac>)
 23f35d0:	e7f3      	b.n	23f35ba <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x36a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f35d2:	4d0b      	ldr	r5, [pc, #44]	; (23f3600 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3b0>)
 23f35d4:	e6a3      	b.n	23f331e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
 23f35d6:	bf00      	nop
 23f35d8:	d2f1a9fc 	.word	0xd2f1a9fc
 23f35dc:	3f50624d 	.word	0x3f50624d
 23f35e0:	023fcacc 	.word	0x023fcacc
 23f35e4:	023f3da3 	.word	0x023f3da3
 23f35e8:	00000000 	.word	0x00000000
 23f35ec:	2edbe6ff 	.word	0x2edbe6ff
 23f35f0:	023fcadf 	.word	0x023fcadf
 23f35f4:	023fcb01 	.word	0x023fcb01
 23f35f8:	023fcb9e 	.word	0x023fcb9e
 23f35fc:	fffffc16 	.word	0xfffffc16
 23f3600:	fffffc14 	.word	0xfffffc14

023f3604 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f3604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3608:	ed2d 8b02 	vpush	{d8}
 23f360c:	b093      	sub	sp, #76	; 0x4c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f360e:	e9d2 7305 	ldrd	r7, r3, [r2, #20]
 23f3612:	9309      	str	r3, [sp, #36]	; 0x24
 23f3614:	69d3      	ldr	r3, [r2, #28]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f3616:	4680      	mov	r8, r0
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f3618:	9307      	str	r3, [sp, #28]
 23f361a:	6a13      	ldr	r3, [r2, #32]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f361c:	460c      	mov	r4, r1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f361e:	9308      	str	r3, [sp, #32]
 23f3620:	6a53      	ldr	r3, [r2, #36]	; 0x24
 23f3622:	ed92 8a03 	vldr	s16, [r2, #12]
 23f3626:	930a      	str	r3, [sp, #40]	; 0x28
    if (config.axes != 1) {
 23f3628:	6893      	ldr	r3, [r2, #8]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f362a:	edd2 8a04 	vldr	s17, [r2, #16]
    if (config.axes != 1) {
 23f362e:	2b01      	cmp	r3, #1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f3630:	8896      	ldrh	r6, [r2, #4]
 23f3632:	f8d2 b028 	ldr.w	fp, [r2, #40]	; 0x28
    if (config.axes != 1) {
 23f3636:	f040 80ab 	bne.w	23f3790 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
    if (signal->total_length == 0) {
 23f363a:	6902      	ldr	r2, [r0, #16]
 23f363c:	2a00      	cmp	r2, #0
 23f363e:	f000 80a9 	beq.w	23f3794 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x190>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 23f3642:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    _Function_base() : _M_manager(nullptr) { }
 23f3646:	2100      	movs	r1, #0
    if (config.implementation_version < 3) {
 23f3648:	2e02      	cmp	r6, #2
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 23f364a:	ee17 5a90 	vmov	r5, s15
 23f364e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23f37bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
 23f3652:	910f      	str	r1, [sp, #60]	; 0x3c
    if (config.implementation_version < 3) {
 23f3654:	d832      	bhi.n	23f36bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>
        preemphasis = nullptr;
 23f3656:	f8ca 1000 	str.w	r1, [sl]
        preemphasized_audio_signal.get_data = signal->get_data;
 23f365a:	4601      	mov	r1, r0
 23f365c:	a80d      	add	r0, sp, #52	; 0x34
        preemphasized_audio_signal.total_length = signal->total_length;
 23f365e:	9211      	str	r2, [sp, #68]	; 0x44
        preemphasized_audio_signal.get_data = signal->get_data;
 23f3660:	f7ff faa0 	bl	23f2ba4 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>
            config.implementation_version);
 23f3664:	b2bb      	uxth	r3, r7
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 23f3666:	4632      	mov	r2, r6
 23f3668:	4629      	mov	r1, r5
 23f366a:	eef0 0a68 	vmov.f32	s1, s17
 23f366e:	eeb0 0a48 	vmov.f32	s0, s16
 23f3672:	9811      	ldr	r0, [sp, #68]	; 0x44
 23f3674:	930b      	str	r3, [sp, #44]	; 0x2c
 23f3676:	f7fd fb31 	bl	23f0cdc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 23f367a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 23f367e:	b2bf      	uxth	r7, r7
 23f3680:	fb07 f900 	mul.w	r9, r7, r0
 23f3684:	4680      	mov	r8, r0
 23f3686:	fb02 f001 	mul.w	r0, r2, r1
 23f368a:	4581      	cmp	r9, r0
 23f368c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 23f37bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
 23f3690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f3692:	d92a      	bls.n	23f36ea <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 23f3694:	4840      	ldr	r0, [pc, #256]	; (23f3798 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x194>)
 23f3696:	f000 fb53 	bl	23f3d40 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 23f369a:	463a      	mov	r2, r7
 23f369c:	4641      	mov	r1, r8
 23f369e:	483f      	ldr	r0, [pc, #252]	; (23f379c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x198>)
 23f36a0:	f000 fb4e 	bl	23f3d40 <_Z9ei_printfPKcz>
        if (preemphasis) {
 23f36a4:	f8da 4000 	ldr.w	r4, [sl]
 23f36a8:	b134      	cbz	r4, 23f36b8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb4>
            delete preemphasis;
 23f36aa:	4620      	mov	r0, r4
 23f36ac:	f7fe f8de 	bl	23f186c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 23f36b0:	211c      	movs	r1, #28
 23f36b2:	4620      	mov	r0, r4
 23f36b4:	f7f9 feb3 	bl	23ed41e <_ZdlPvj>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f36b8:	4d39      	ldr	r5, [pc, #228]	; (23f37a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
 23f36ba:	e03e      	b.n	23f373a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 23f36bc:	201c      	movs	r0, #28
 23f36be:	930b      	str	r3, [sp, #44]	; 0x2c
 23f36c0:	f7f9 fea7 	bl	23ed412 <_Znwj>
 23f36c4:	4681      	mov	r9, r0
 23f36c6:	b130      	cbz	r0, 23f36d6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xd2>
 23f36c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f36ca:	ed9f 0a36 	vldr	s0, [pc, #216]	; 23f37a4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>
 23f36ce:	461a      	mov	r2, r3
 23f36d0:	4641      	mov	r1, r8
 23f36d2:	f7fe fdd9 	bl	23f2288 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
        preemphasized_audio_signal.total_length = signal->total_length;
 23f36d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 23f36da:	4933      	ldr	r1, [pc, #204]	; (23f37a8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
 23f36dc:	a80d      	add	r0, sp, #52	; 0x34
        preemphasis = pre;
 23f36de:	f8ca 9000 	str.w	r9, [sl]
        preemphasized_audio_signal.total_length = signal->total_length;
 23f36e2:	9311      	str	r3, [sp, #68]	; 0x44
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 23f36e4:	f7ff fa76 	bl	23f2bd4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
 23f36e8:	e7bc      	b.n	23f3664 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f36ea:	9908      	ldr	r1, [sp, #32]
    output_matrix->cols = out_matrix_size.cols;
 23f36ec:	e9c4 8701 	strd	r8, r7, [r4, #4]
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f36f0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 23f36f4:	9103      	str	r1, [sp, #12]
 23f36f6:	9907      	ldr	r1, [sp, #28]
    if (config.implementation_version > 2) {
 23f36f8:	2e02      	cmp	r6, #2
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f36fa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 23f36fe:	9300      	str	r3, [sp, #0]
 23f3700:	eef0 0a68 	vmov.f32	s1, s17
 23f3704:	eeb0 0a48 	vmov.f32	s0, s16
 23f3708:	462b      	mov	r3, r5
 23f370a:	f04f 0100 	mov.w	r1, #0
 23f370e:	4620      	mov	r0, r4
 23f3710:	9604      	str	r6, [sp, #16]
 23f3712:	aa0d      	add	r2, sp, #52	; 0x34
    if (config.implementation_version > 2) {
 23f3714:	d91a      	bls.n	23f374c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3716:	f7ff fd9b 	bl	23f3250 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
    if (preemphasis) {
 23f371a:	f8da 7000 	ldr.w	r7, [sl]
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 23f371e:	4605      	mov	r5, r0
    if (preemphasis) {
 23f3720:	b137      	cbz	r7, 23f3730 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        delete preemphasis;
 23f3722:	4638      	mov	r0, r7
 23f3724:	f7fe f8a2 	bl	23f186c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 23f3728:	211c      	movs	r1, #28
 23f372a:	4638      	mov	r0, r7
 23f372c:	f7f9 fe77 	bl	23ed41e <_ZdlPvj>
    if (ret != EIDSP_OK) {
 23f3730:	b17d      	cbz	r5, 23f3752 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 23f3732:	4629      	mov	r1, r5
 23f3734:	481d      	ldr	r0, [pc, #116]	; (23f37ac <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
 23f3736:	f000 fb03 	bl	23f3d40 <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f373a:	a80d      	add	r0, sp, #52	; 0x34
 23f373c:	f7fd fb88 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
}
 23f3740:	4628      	mov	r0, r5
 23f3742:	b013      	add	sp, #76	; 0x4c
 23f3744:	ecbd 8b02 	vpop	{d8}
 23f3748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 23f374c:	f7ff fc4e 	bl	23f2fec <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 23f3750:	e7e3      	b.n	23f371a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x116>
    if (config.implementation_version < 3) {
 23f3752:	2e02      	cmp	r6, #2
 23f3754:	d80e      	bhi.n	23f3774 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x170>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 23f3756:	2301      	movs	r3, #1
 23f3758:	462a      	mov	r2, r5
 23f375a:	4620      	mov	r0, r4
 23f375c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 23f3760:	f7fd fec2 	bl	23f14e8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
        if (ret != EIDSP_OK) {
 23f3764:	4606      	mov	r6, r0
 23f3766:	b170      	cbz	r0, 23f3786 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 23f3768:	4601      	mov	r1, r0
 23f376a:	4811      	ldr	r0, [pc, #68]	; (23f37b0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>)
            ei_printf("ERR: normalization failed (%d)\n", ret);
 23f376c:	f000 fae8 	bl	23f3d40 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 23f3770:	4635      	mov	r5, r6
 23f3772:	e7e2      	b.n	23f373a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
 23f3774:	4659      	mov	r1, fp
 23f3776:	4620      	mov	r0, r4
 23f3778:	f7fd f97a 	bl	23f0a70 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
 23f377c:	4606      	mov	r6, r0
 23f377e:	b110      	cbz	r0, 23f3786 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 23f3780:	4601      	mov	r1, r0
 23f3782:	480c      	ldr	r0, [pc, #48]	; (23f37b4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
 23f3784:	e7f2      	b.n	23f376c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x168>
    output_matrix->rows = 1;
 23f3786:	2301      	movs	r3, #1
    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 23f3788:	f8c4 9008 	str.w	r9, [r4, #8]
    output_matrix->rows = 1;
 23f378c:	6063      	str	r3, [r4, #4]
    return EIDSP_OK;
 23f378e:	e7d4      	b.n	23f373a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f3790:	4d03      	ldr	r5, [pc, #12]	; (23f37a0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
 23f3792:	e7d5      	b.n	23f3740 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 23f3794:	4d08      	ldr	r5, [pc, #32]	; (23f37b8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
 23f3796:	e7d3      	b.n	23f3740 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
 23f3798:	023fca9f 	.word	0x023fca9f
 23f379c:	023fcab3 	.word	0x023fcab3
 23f37a0:	fffffc14 	.word	0xfffffc14
 23f37a4:	3f7ae148 	.word	0x3f7ae148
 23f37a8:	023f2271 	.word	0x023f2271
 23f37ac:	023fcc08 	.word	0x023fcc08
 23f37b0:	023fc9b5 	.word	0x023fc9b5
 23f37b4:	023fc9cd 	.word	0x023fc9cd
 23f37b8:	fffffc10 	.word	0xfffffc10
 23f37bc:	1007a5d8 	.word	0x1007a5d8

023f37c0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
}
 23f37c0:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23f37c2:	2100      	movs	r1, #0
}
 23f37c4:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23f37c6:	2001      	movs	r0, #1
 23f37c8:	f003 fdb6 	bl	23f7338 <system_thread_set_state>
        capacity_(0) {
 23f37cc:	2300      	movs	r3, #0
 23f37ce:	e9cd 3300 	strd	r3, r3, [sp]
 23f37d2:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f37d4:	f004 fa54 	bl	23f7c80 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f37d8:	4c1a      	ldr	r4, [pc, #104]	; (23f3844 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x84>)
 23f37da:	4605      	mov	r5, r0
 23f37dc:	4626      	mov	r6, r4
 23f37de:	4669      	mov	r1, sp
 23f37e0:	a803      	add	r0, sp, #12
 23f37e2:	f7ff faff 	bl	23f2de4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f37e6:	a903      	add	r1, sp, #12
 23f37e8:	a806      	add	r0, sp, #24
 23f37ea:	f7ff fafb 	bl	23f2de4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f37ee:	4b16      	ldr	r3, [pc, #88]	; (23f3848 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x88>)
 23f37f0:	a906      	add	r1, sp, #24
 23f37f2:	f846 3b04 	str.w	r3, [r6], #4
 23f37f6:	a809      	add	r0, sp, #36	; 0x24
 23f37f8:	f7ff faf4 	bl	23f2de4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f37fc:	aa09      	add	r2, sp, #36	; 0x24
 23f37fe:	2132      	movs	r1, #50	; 0x32
 23f3800:	4630      	mov	r0, r6
 23f3802:	f005 f84b 	bl	23f889c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f3806:	a809      	add	r0, sp, #36	; 0x24
 23f3808:	f7fe fc2e 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f380c:	a806      	add	r0, sp, #24
 23f380e:	f7fe fc2b 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f3812:	4b0e      	ldr	r3, [pc, #56]	; (23f384c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8c>)
 23f3814:	a803      	add	r0, sp, #12
 23f3816:	6023      	str	r3, [r4, #0]
 23f3818:	6225      	str	r5, [r4, #32]
 23f381a:	f7fe fc25 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f381e:	4b0c      	ldr	r3, [pc, #48]	; (23f3850 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x90>)
 23f3820:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f3822:	f004 fa2d 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f3826:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f382a:	f004 fa17 	bl	23f7c5c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f382e:	f004 fd07 	bl	23f8240 <_ZN5spark10LogManager8instanceEv>
 23f3832:	4621      	mov	r1, r4
 23f3834:	f004 ff0a 	bl	23f864c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23f3838:	4668      	mov	r0, sp
 23f383a:	f7fe fc15 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f383e:	b00c      	add	sp, #48	; 0x30
 23f3840:	bd70      	pop	{r4, r5, r6, pc}
 23f3842:	bf00      	nop
 23f3844:	1007a5e0 	.word	0x1007a5e0
 23f3848:	023fcc28 	.word	0x023fcc28
 23f384c:	023ffa9c 	.word	0x023ffa9c
 23f3850:	023fcc40 	.word	0x023fcc40

023f3854 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f3854:	b530      	push	{r4, r5, lr}
  tensor->type = tensorData[i].type;
 23f3856:	2418      	movs	r4, #24
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f3858:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
 23f385a:	4344      	muls	r4, r0
 23f385c:	4915      	ldr	r1, [pc, #84]	; (23f38b4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x60>)
 23f385e:	190a      	adds	r2, r1, r4
 23f3860:	7855      	ldrb	r5, [r2, #1]
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 23f3862:	5d0c      	ldrb	r4, [r1, r4]
  tensor->type = tensorData[i].type;
 23f3864:	701d      	strb	r5, [r3, #0]
  tensor->is_variable = 0;
 23f3866:	2500      	movs	r5, #0
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 23f3868:	2c02      	cmp	r4, #2
  tensor->allocation_type = tensorData[i].allocation_type;
 23f386a:	751c      	strb	r4, [r3, #20]
  tensor->is_variable = 0;
 23f386c:	f883 502d 	strb.w	r5, [r3, #45]	; 0x2d
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3870:	bf08      	it	eq
 23f3872:	4c11      	ldreq	r4, [pc, #68]	; (23f38b8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x64>)
  tensor->bytes = tensorData[i].bytes;
 23f3874:	68d5      	ldr	r5, [r2, #12]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3876:	bf08      	it	eq
 23f3878:	6824      	ldreq	r4, [r4, #0]
  tensor->bytes = tensorData[i].bytes;
 23f387a:	619d      	str	r5, [r3, #24]
  tensor->dims = tensorData[i].dims;
 23f387c:	6895      	ldr	r5, [r2, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f387e:	6852      	ldr	r2, [r2, #4]
  tensor->dims = tensorData[i].dims;
 23f3880:	609d      	str	r5, [r3, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3882:	bf08      	it	eq
 23f3884:	1912      	addeq	r2, r2, r4

    tensor->data.data =  start;
 23f3886:	605a      	str	r2, [r3, #4]
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
 23f3888:	2218      	movs	r2, #24
 23f388a:	fb02 1200 	mla	r2, r2, r0, r1
 23f388e:	6951      	ldr	r1, [r2, #20]
 23f3890:	6910      	ldr	r0, [r2, #16]
 23f3892:	f103 0430 	add.w	r4, r3, #48	; 0x30
 23f3896:	e884 0003 	stmia.w	r4, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 23f389a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 23f389e:	2901      	cmp	r1, #1
 23f38a0:	d106      	bne.n	23f38b0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x5c>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 23f38a2:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
 23f38a4:	6811      	ldr	r1, [r2, #0]
 23f38a6:	6849      	ldr	r1, [r1, #4]
 23f38a8:	60d9      	str	r1, [r3, #12]
    tensor->params.zero_point = quant->zero_point->data[0];
 23f38aa:	6852      	ldr	r2, [r2, #4]
 23f38ac:	6852      	ldr	r2, [r2, #4]
 23f38ae:	611a      	str	r2, [r3, #16]
  }

}
 23f38b0:	bd30      	pop	{r4, r5, pc}
 23f38b2:	bf00      	nop
 23f38b4:	100799d4 	.word	0x100799d4
 23f38b8:	1007a604 	.word	0x1007a604

023f38bc <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
 23f38bc:	4b04      	ldr	r3, [pc, #16]	; (23f38d0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x14>)
 23f38be:	681b      	ldr	r3, [r3, #0]
 23f38c0:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
 23f38c2:	bfa3      	ittte	ge
 23f38c4:	4b03      	ldrge	r3, [pc, #12]	; (23f38d4 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
 23f38c6:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
 23f38ca:	6848      	ldrge	r0, [r1, #4]
    return NULL;
 23f38cc:	2000      	movlt	r0, #0
}
 23f38ce:	4770      	bx	lr
 23f38d0:	1007aa28 	.word	0x1007aa28
 23f38d4:	1007a9d8 	.word	0x1007a9d8

023f38d8 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 23f38d8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 23f38dc:	4a07      	ldr	r2, [pc, #28]	; (23f38fc <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x24>)
 23f38de:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 23f38e2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23f38e6:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
 23f38ea:	f8a2 310c 	strh.w	r3, [r2, #268]	; 0x10c
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 23f38ee:	4a04      	ldr	r2, [pc, #16]	; (23f3900 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>)
 23f38f0:	8193      	strh	r3, [r2, #12]
 23f38f2:	8393      	strh	r3, [r2, #28]
 23f38f4:	8593      	strh	r3, [r2, #44]	; 0x2c
 23f38f6:	8793      	strh	r3, [r2, #60]	; 0x3c
  }
}
 23f38f8:	4770      	bx	lr
 23f38fa:	bf00      	nop
 23f38fc:	1007a888 	.word	0x1007a888
 23f3900:	1007a998 	.word	0x1007a998

023f3904 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f3904:	481c      	ldr	r0, [pc, #112]	; (23f3978 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x74>)
                                       int tensor_idx) {
 23f3906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3908:	4602      	mov	r2, r0
 23f390a:	460b      	mov	r3, r1
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f390c:	f647 75ff 	movw	r5, #32767	; 0x7fff
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f3910:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == tensor_idx) {
 23f3912:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f3916:	429c      	cmp	r4, r3
 23f3918:	d102      	bne.n	23f3920 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1c>
      return &tflEvalTensors[ix].tensor;
 23f391a:	eb02 1001 	add.w	r0, r2, r1, lsl #4
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}
 23f391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f3920:	42ac      	cmp	r4, r5
 23f3922:	d11f      	bne.n	23f3964 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x60>
  if (i < 0) {
 23f3924:	2b00      	cmp	r3, #0
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 23f3926:	ea4f 1401 	mov.w	r4, r1, lsl #4
 23f392a:	eb02 1001 	add.w	r0, r2, r1, lsl #4
  if (i < 0) {
 23f392e:	da05      	bge.n	23f393c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x38>
    tensor->data.data = nullptr;
 23f3930:	2100      	movs	r1, #0
 23f3932:	5111      	str	r1, [r2, r4]
    tensor->dims = nullptr;
 23f3934:	6041      	str	r1, [r0, #4]
      tflEvalTensors[ix].index = tensor_idx;
 23f3936:	4422      	add	r2, r4
 23f3938:	8193      	strh	r3, [r2, #12]
      return &tflEvalTensors[ix].tensor;
 23f393a:	e7f0      	b.n	23f391e <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1a>
  tensor->type = tensorData[i].type;
 23f393c:	2118      	movs	r1, #24
 23f393e:	4359      	muls	r1, r3
 23f3940:	4e0e      	ldr	r6, [pc, #56]	; (23f397c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x78>)
 23f3942:	1875      	adds	r5, r6, r1
  if(allocation_type == kTfLiteArenaRw) {
 23f3944:	5c71      	ldrb	r1, [r6, r1]
  tensor->type = tensorData[i].type;
 23f3946:	786f      	ldrb	r7, [r5, #1]
  if(allocation_type == kTfLiteArenaRw) {
 23f3948:	2902      	cmp	r1, #2
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f394a:	bf08      	it	eq
 23f394c:	490c      	ldreq	r1, [pc, #48]	; (23f3980 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x7c>)
  tensor->type = tensorData[i].type;
 23f394e:	7207      	strb	r7, [r0, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3950:	bf08      	it	eq
 23f3952:	6809      	ldreq	r1, [r1, #0]
  tensor->dims = tensorData[i].dims;
 23f3954:	68af      	ldr	r7, [r5, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3956:	686d      	ldr	r5, [r5, #4]
  tensor->dims = tensorData[i].dims;
 23f3958:	6047      	str	r7, [r0, #4]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f395a:	bf06      	itte	eq
 23f395c:	1949      	addeq	r1, r1, r5
    tensor->data.data =  start;
 23f395e:	5111      	streq	r1, [r2, r4]
    tensor->data.data = tensorData[i].data;
 23f3960:	5115      	strne	r5, [r2, r4]
 23f3962:	e7e8      	b.n	23f3936 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x32>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f3964:	3101      	adds	r1, #1
 23f3966:	2904      	cmp	r1, #4
 23f3968:	f100 0010 	add.w	r0, r0, #16
 23f396c:	d1d1      	bne.n	23f3912 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xe>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 23f396e:	4805      	ldr	r0, [pc, #20]	; (23f3984 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x80>)
 23f3970:	f000 f9e6 	bl	23f3d40 <_Z9ei_printfPKcz>
  return nullptr;
 23f3974:	2000      	movs	r0, #0
 23f3976:	e7d2      	b.n	23f391e <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1a>
 23f3978:	1007a998 	.word	0x1007a998
 23f397c:	100799d4 	.word	0x100799d4
 23f3980:	1007a604 	.word	0x1007a604
 23f3984:	023fd044 	.word	0x023fd044

023f3988 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:
                               int tensor_idx) {
 23f3988:	b538      	push	{r3, r4, r5, lr}
 23f398a:	4b12      	ldr	r3, [pc, #72]	; (23f39d4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x4c>)
 23f398c:	460d      	mov	r5, r1
 23f398e:	461c      	mov	r4, r3
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f3990:	2100      	movs	r1, #0
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f3992:	f647 70ff 	movw	r0, #32767	; 0x7fff
    if (tflTensors[ix].index == tensor_idx) {
 23f3996:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 23f399a:	42aa      	cmp	r2, r5
 23f399c:	d104      	bne.n	23f39a8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>
      return &tflTensors[ix].tensor;
 23f399e:	2344      	movs	r3, #68	; 0x44
 23f39a0:	fb03 4401 	mla	r4, r3, r1, r4
}
 23f39a4:	4620      	mov	r0, r4
 23f39a6:	bd38      	pop	{r3, r4, r5, pc}
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f39a8:	4282      	cmp	r2, r0
 23f39aa:	d109      	bne.n	23f39c0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x38>
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 23f39ac:	2344      	movs	r3, #68	; 0x44
 23f39ae:	fb03 4401 	mla	r4, r3, r1, r4
 23f39b2:	4628      	mov	r0, r5
 23f39b4:	4621      	mov	r1, r4
 23f39b6:	f7ff ff4d 	bl	23f3854 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 23f39ba:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      return &tflTensors[ix].tensor;
 23f39be:	e7f1      	b.n	23f39a4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x1c>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f39c0:	3101      	adds	r1, #1
 23f39c2:	2904      	cmp	r1, #4
 23f39c4:	f103 0344 	add.w	r3, r3, #68	; 0x44
 23f39c8:	d1e5      	bne.n	23f3996 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0xe>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 23f39ca:	4803      	ldr	r0, [pc, #12]	; (23f39d8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x50>)
 23f39cc:	f000 f9b8 	bl	23f3d40 <_Z9ei_printfPKcz>
  return nullptr;
 23f39d0:	2400      	movs	r4, #0
 23f39d2:	e7e7      	b.n	23f39a4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x1c>
 23f39d4:	1007a888 	.word	0x1007a888
 23f39d8:	023fd07a 	.word	0x023fd07a

023f39dc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
 23f39dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (current_location - bytes < tensor_boundary) {
 23f39de:	4b16      	ldr	r3, [pc, #88]	; (23f3a38 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x5c>)
 23f39e0:	4816      	ldr	r0, [pc, #88]	; (23f3a3c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
 23f39e2:	681c      	ldr	r4, [r3, #0]
 23f39e4:	6800      	ldr	r0, [r0, #0]
 23f39e6:	1a64      	subs	r4, r4, r1
 23f39e8:	4284      	cmp	r4, r0
                                       size_t bytes) {
 23f39ea:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
 23f39ec:	d21e      	bcs.n	23f3a2c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 23f39ee:	4d14      	ldr	r5, [pc, #80]	; (23f3a40 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
 23f39f0:	682b      	ldr	r3, [r5, #0]
 23f39f2:	2b09      	cmp	r3, #9
 23f39f4:	d906      	bls.n	23f3a04 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x28>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 23f39f6:	4813      	ldr	r0, [pc, #76]	; (23f3a44 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
 23f39f8:	f000 f9a2 	bl	23f3d40 <_Z9ei_printfPKcz>
      return NULL;
 23f39fc:	2400      	movs	r4, #0
}
 23f39fe:	4620      	mov	r0, r4
 23f3a00:	b003      	add	sp, #12
 23f3a02:	bd30      	pop	{r4, r5, pc}
    ptr = ei_calloc(bytes, 1);
 23f3a04:	4610      	mov	r0, r2
 23f3a06:	2101      	movs	r1, #1
 23f3a08:	9201      	str	r2, [sp, #4]
 23f3a0a:	f000 f9c8 	bl	23f3d9e <_Z9ei_callocjj>
    if (ptr == NULL) {
 23f3a0e:	9a01      	ldr	r2, [sp, #4]
 23f3a10:	4604      	mov	r4, r0
 23f3a12:	b920      	cbnz	r0, 23f3a1e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x42>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 23f3a14:	4611      	mov	r1, r2
 23f3a16:	480c      	ldr	r0, [pc, #48]	; (23f3a48 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
 23f3a18:	f000 f992 	bl	23f3d40 <_Z9ei_printfPKcz>
      return NULL;
 23f3a1c:	e7ef      	b.n	23f39fe <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
    overflow_buffers[overflow_buffers_ix++] = ptr;
 23f3a1e:	682b      	ldr	r3, [r5, #0]
 23f3a20:	1c5a      	adds	r2, r3, #1
 23f3a22:	602a      	str	r2, [r5, #0]
 23f3a24:	4a09      	ldr	r2, [pc, #36]	; (23f3a4c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x70>)
 23f3a26:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return ptr;
 23f3a2a:	e7e8      	b.n	23f39fe <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
  memset(ptr, 0, bytes);
 23f3a2c:	2100      	movs	r1, #0
 23f3a2e:	4620      	mov	r0, r4
  current_location -= bytes;
 23f3a30:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
 23f3a32:	f007 fd9b 	bl	23fb56c <memset>
  return ptr;
 23f3a36:	e7e2      	b.n	23f39fe <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
 23f3a38:	1007a9fc 	.word	0x1007a9fc
 23f3a3c:	1007a9f8 	.word	0x1007a9f8
 23f3a40:	1007aa2c 	.word	0x1007aa2c
 23f3a44:	023fd0b2 	.word	0x023fd0b2
 23f3a48:	023fd12f 	.word	0x023fd12f
 23f3a4c:	1007aa00 	.word	0x1007aa00

023f3a50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
 23f3a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f3a52:	4e0e      	ldr	r6, [pc, #56]	; (23f3a8c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>)
                                                int* buffer_idx) {
 23f3a54:	460d      	mov	r5, r1
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f3a56:	6833      	ldr	r3, [r6, #0]
                                                int* buffer_idx) {
 23f3a58:	4617      	mov	r7, r2
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f3a5a:	2b03      	cmp	r3, #3
 23f3a5c:	d904      	bls.n	23f3a68 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x18>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 23f3a5e:	480c      	ldr	r0, [pc, #48]	; (23f3a90 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x40>)
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f3a60:	f000 f96e 	bl	23f3d40 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f3a64:	2001      	movs	r0, #1
}
 23f3a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 23f3a68:	f7ff ffb8 	bl	23f39dc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
 23f3a6c:	b910      	cbnz	r0, 23f3a74 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f3a6e:	4629      	mov	r1, r5
 23f3a70:	4808      	ldr	r0, [pc, #32]	; (23f3a94 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x44>)
 23f3a72:	e7f5      	b.n	23f3a60 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x10>
  scratch_buffers[scratch_buffers_ix] = b;
 23f3a74:	6833      	ldr	r3, [r6, #0]
 23f3a76:	4c08      	ldr	r4, [pc, #32]	; (23f3a98 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>)
  *buffer_idx = scratch_buffers_ix;
 23f3a78:	603b      	str	r3, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
 23f3a7a:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
 23f3a7e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  scratch_buffers_ix++;
 23f3a82:	3301      	adds	r3, #1
  scratch_buffers[scratch_buffers_ix] = b;
 23f3a84:	6060      	str	r0, [r4, #4]
  scratch_buffers_ix++;
 23f3a86:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 23f3a88:	2000      	movs	r0, #0
 23f3a8a:	e7ec      	b.n	23f3a66 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x16>
 23f3a8c:	1007aa28 	.word	0x1007aa28
 23f3a90:	023fd165 	.word	0x023fd165
 23f3a94:	023fd1bd 	.word	0x023fd1bd
 23f3a98:	1007a9d8 	.word	0x1007a9d8

023f3a9c <_Z19tflite_learn_5_initPFPvjjE>:

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f3a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3aa0:	4603      	mov	r3, r0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f3aa2:	f242 3150 	movw	r1, #9040	; 0x2350
 23f3aa6:	2010      	movs	r0, #16
TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f3aa8:	b099      	sub	sp, #100	; 0x64
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f3aaa:	4798      	blx	r3
 23f3aac:	4b57      	ldr	r3, [pc, #348]	; (23f3c0c <_Z19tflite_learn_5_initPFPvjjE+0x170>)
 23f3aae:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
 23f3ab0:	b930      	cbnz	r0, 23f3ac0 <_Z19tflite_learn_5_initPFPvjjE+0x24>
    ei_printf("ERR: failed to allocate tensor arena\n");
 23f3ab2:	4857      	ldr	r0, [pc, #348]	; (23f3c10 <_Z19tflite_learn_5_initPFPvjjE+0x174>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f3ab4:	f000 f944 	bl	23f3d40 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f3ab8:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
 23f3aba:	b019      	add	sp, #100	; 0x64
 23f3abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
 23f3ac0:	4b54      	ldr	r3, [pc, #336]	; (23f3c14 <_Z19tflite_learn_5_initPFPvjjE+0x178>)
 23f3ac2:	f500 540d 	add.w	r4, r0, #9024	; 0x2340
 23f3ac6:	3410      	adds	r4, #16
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f3ac8:	4a53      	ldr	r2, [pc, #332]	; (23f3c18 <_Z19tflite_learn_5_initPFPvjjE+0x17c>)
  current_location = tensor_arena + kTensorArenaSize;
 23f3aca:	601c      	str	r4, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f3acc:	4b53      	ldr	r3, [pc, #332]	; (23f3c1c <_Z19tflite_learn_5_initPFPvjjE+0x180>)
  for (size_t i = 0; i < 23; ++i) {
 23f3ace:	2600      	movs	r6, #0
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f3ad0:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 23f3ad2:	4a53      	ldr	r2, [pc, #332]	; (23f3c20 <_Z19tflite_learn_5_initPFPvjjE+0x184>)
  tensor_boundary = tensor_arena;
 23f3ad4:	4d53      	ldr	r5, [pc, #332]	; (23f3c24 <_Z19tflite_learn_5_initPFPvjjE+0x188>)
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 23f3ad6:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBuffer;
 23f3ad8:	4a53      	ldr	r2, [pc, #332]	; (23f3c28 <_Z19tflite_learn_5_initPFPvjjE+0x18c>)
 23f3ada:	4f54      	ldr	r7, [pc, #336]	; (23f3c2c <_Z19tflite_learn_5_initPFPvjjE+0x190>)
 23f3adc:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensor;
 23f3ade:	4a54      	ldr	r2, [pc, #336]	; (23f3c30 <_Z19tflite_learn_5_initPFPvjjE+0x194>)
  tensor_boundary = tensor_arena;
 23f3ae0:	6028      	str	r0, [r5, #0]
  ctx.GetTensor = &GetTensor;
 23f3ae2:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensor;
 23f3ae4:	4a53      	ldr	r2, [pc, #332]	; (23f3c34 <_Z19tflite_learn_5_initPFPvjjE+0x198>)
 23f3ae6:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.tensors_size = 23;
 23f3ae8:	2217      	movs	r2, #23
 23f3aea:	601a      	str	r2, [r3, #0]
    init_tflite_tensor(i, &tensor);
 23f3aec:	4630      	mov	r0, r6
 23f3aee:	a908      	add	r1, sp, #32
 23f3af0:	f7ff feb0 	bl	23f3854 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 23f3af4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23f3af8:	2b02      	cmp	r3, #2
 23f3afa:	d106      	bne.n	23f3b0a <_Z19tflite_learn_5_initPFPvjjE+0x6e>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 23f3afc:	68fa      	ldr	r2, [r7, #12]
 23f3afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f3b00:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
 23f3b02:	682a      	ldr	r2, [r5, #0]
 23f3b04:	4293      	cmp	r3, r2
        tensor_boundary = data_end_ptr;
 23f3b06:	bf88      	it	hi
 23f3b08:	602b      	strhi	r3, [r5, #0]
  for (size_t i = 0; i < 23; ++i) {
 23f3b0a:	3601      	adds	r6, #1
 23f3b0c:	2e17      	cmp	r6, #23
 23f3b0e:	f107 0718 	add.w	r7, r7, #24
 23f3b12:	d1eb      	bne.n	23f3aec <_Z19tflite_learn_5_initPFPvjjE+0x50>
  if (tensor_boundary > current_location /* end of arena size */) {
 23f3b14:	682b      	ldr	r3, [r5, #0]
 23f3b16:	429c      	cmp	r4, r3
 23f3b18:	d201      	bcs.n	23f3b1e <_Z19tflite_learn_5_initPFPvjjE+0x82>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f3b1a:	4847      	ldr	r0, [pc, #284]	; (23f3c38 <_Z19tflite_learn_5_initPFPvjjE+0x19c>)
 23f3b1c:	e7ca      	b.n	23f3ab4 <_Z19tflite_learn_5_initPFPvjjE+0x18>
  registrations[OP_RESHAPE] = Register_RESHAPE();
 23f3b1e:	466d      	mov	r5, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f3b20:	466f      	mov	r7, sp
  registrations[OP_RESHAPE] = Register_RESHAPE();
 23f3b22:	4c46      	ldr	r4, [pc, #280]	; (23f3c3c <_Z19tflite_learn_5_initPFPvjjE+0x1a0>)
 23f3b24:	4668      	mov	r0, sp
 23f3b26:	f000 fd6f 	bl	23f4608 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 23f3b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f3b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f3b2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f3b36:	4668      	mov	r0, sp
 23f3b38:	f001 f948 	bl	23f4dcc <_ZN6tflite16Register_CONV_2DEv>
 23f3b3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f3b3e:	466f      	mov	r7, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f3b40:	f104 0610 	add.w	r6, r4, #16
 23f3b44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f3b46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3b4a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f3b4e:	4668      	mov	r0, sp
 23f3b50:	f001 fcfc 	bl	23f554c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 23f3b54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f3b56:	466f      	mov	r7, sp
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f3b58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23f3b5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f3b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3b62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f3b66:	4668      	mov	r0, sp
 23f3b68:	f104 0650 	add.w	r6, r4, #80	; 0x50
 23f3b6c:	f000 fbd8 	bl	23f4320 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 23f3b70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 23f3b72:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f3b74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3b78:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 23f3b7c:	466e      	mov	r6, sp
 23f3b7e:	4668      	mov	r0, sp
 23f3b80:	f104 0770 	add.w	r7, r4, #112	; 0x70
 23f3b84:	f001 f9d2 	bl	23f4f2c <_ZN6tflite16Register_SOFTMAXEv>
 23f3b88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f3b8a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 23f3b8c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 23f3c40 <_Z19tflite_learn_5_initPFPvjjE+0x1a4>
 23f3b90:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 23f3c44 <_Z19tflite_learn_5_initPFPvjjE+0x1a8>
 23f3b94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3b98:	260b      	movs	r6, #11
 23f3b9a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 23f3b9e:	4645      	mov	r5, r8
 23f3ba0:	464f      	mov	r7, r9
tflNodes[i].custom_initial_data = nullptr;
 23f3ba2:	f04f 0a00 	mov.w	sl, #0
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f3ba6:	f8df b074 	ldr.w	fp, [pc, #116]	; 23f3c1c <_Z19tflite_learn_5_initPFPvjjE+0x180>
 23f3baa:	3c10      	subs	r4, #16
    tflNodes[i].inputs = nodeData[i].inputs;
 23f3bac:	683b      	ldr	r3, [r7, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 23f3bae:	68b9      	ldr	r1, [r7, #8]
    tflNodes[i].inputs = nodeData[i].inputs;
 23f3bb0:	602b      	str	r3, [r5, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 23f3bb2:	687b      	ldr	r3, [r7, #4]
tflNodes[i].custom_initial_data = nullptr;
 23f3bb4:	e9c5 1a05 	strd	r1, sl, [r5, #20]
    tflNodes[i].outputs = nodeData[i].outputs;
 23f3bb8:	606b      	str	r3, [r5, #4]
if (registrations[nodeData[i].used_op_index].init) {
 23f3bba:	7b3b      	ldrb	r3, [r7, #12]
      tflNodes[i].custom_initial_data_size = 0;
 23f3bbc:	f8c5 a01c 	str.w	sl, [r5, #28]
if (registrations[nodeData[i].used_op_index].init) {
 23f3bc0:	015b      	lsls	r3, r3, #5
 23f3bc2:	58e3      	ldr	r3, [r4, r3]
 23f3bc4:	b11b      	cbz	r3, 23f3bce <_Z19tflite_learn_5_initPFPvjjE+0x132>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f3bc6:	2200      	movs	r2, #0
 23f3bc8:	4658      	mov	r0, fp
 23f3bca:	4798      	blx	r3
 23f3bcc:	6128      	str	r0, [r5, #16]
  for (size_t i = 0; i < 11; ++i) {
 23f3bce:	3e01      	subs	r6, #1
 23f3bd0:	f107 0710 	add.w	r7, r7, #16
 23f3bd4:	f105 0524 	add.w	r5, r5, #36	; 0x24
 23f3bd8:	d1e8      	bne.n	23f3bac <_Z19tflite_learn_5_initPFPvjjE+0x110>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f3bda:	4d10      	ldr	r5, [pc, #64]	; (23f3c1c <_Z19tflite_learn_5_initPFPvjjE+0x180>)
    if (registrations[nodeData[i].used_op_index].prepare) {
 23f3bdc:	f899 300c 	ldrb.w	r3, [r9, #12]
 23f3be0:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 23f3be4:	689f      	ldr	r7, [r3, #8]
 23f3be6:	b947      	cbnz	r7, 23f3bfa <_Z19tflite_learn_5_initPFPvjjE+0x15e>
  for (size_t i = 0; i < 11; ++i) {
 23f3be8:	3601      	adds	r6, #1
 23f3bea:	2e0b      	cmp	r6, #11
 23f3bec:	f109 0910 	add.w	r9, r9, #16
 23f3bf0:	f108 0824 	add.w	r8, r8, #36	; 0x24
 23f3bf4:	d1f2      	bne.n	23f3bdc <_Z19tflite_learn_5_initPFPvjjE+0x140>
  return kTfLiteOk;
 23f3bf6:	2000      	movs	r0, #0
 23f3bf8:	e75f      	b.n	23f3aba <_Z19tflite_learn_5_initPFPvjjE+0x1e>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f3bfa:	4641      	mov	r1, r8
 23f3bfc:	4628      	mov	r0, r5
      ResetTensors();
 23f3bfe:	f7ff fe6b 	bl	23f38d8 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f3c02:	47b8      	blx	r7
      if (status != kTfLiteOk) {
 23f3c04:	2800      	cmp	r0, #0
 23f3c06:	d0ef      	beq.n	23f3be8 <_Z19tflite_learn_5_initPFPvjjE+0x14c>
 23f3c08:	e757      	b.n	23f3aba <_Z19tflite_learn_5_initPFPvjjE+0x1e>
 23f3c0a:	bf00      	nop
 23f3c0c:	1007a604 	.word	0x1007a604
 23f3c10:	023fd1f0 	.word	0x023fd1f0
 23f3c14:	1007a9fc 	.word	0x1007a9fc
 23f3c18:	023f39dd 	.word	0x023f39dd
 23f3c1c:	1007a6a8 	.word	0x1007a6a8
 23f3c20:	023f3a51 	.word	0x023f3a51
 23f3c24:	1007a9f8 	.word	0x1007a9f8
 23f3c28:	023f38bd 	.word	0x023f38bd
 23f3c2c:	100799d4 	.word	0x100799d4
 23f3c30:	023f3989 	.word	0x023f3989
 23f3c34:	023f3905 	.word	0x023f3905
 23f3c38:	023fd216 	.word	0x023fd216
 23f3c3c:	1007a608 	.word	0x1007a608
 23f3c40:	023fecf8 	.word	0x023fecf8
 23f3c44:	1007a6fc 	.word	0x1007a6fc

023f3c48 <_Z20tflite_learn_5_inputiP12TfLiteTensor>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
 23f3c48:	b508      	push	{r3, lr}
  init_tflite_tensor(inTensorIndices[index], tensor);
 23f3c4a:	2000      	movs	r0, #0
 23f3c4c:	f7ff fe02 	bl	23f3854 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f3c50:	2000      	movs	r0, #0
 23f3c52:	bd08      	pop	{r3, pc}

023f3c54 <_Z21tflite_learn_5_outputiP12TfLiteTensor>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
 23f3c54:	b508      	push	{r3, lr}
  init_tflite_tensor(outTensorIndices[index], tensor);
 23f3c56:	2016      	movs	r0, #22
 23f3c58:	f7ff fdfc 	bl	23f3854 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f3c5c:	2000      	movs	r0, #0
 23f3c5e:	bd08      	pop	{r3, pc}

023f3c60 <_Z21tflite_learn_5_invokev>:

TfLiteStatus tflite_learn_5_invoke() {
 23f3c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < 11; ++i) {
 23f3c64:	2400      	movs	r4, #0
 23f3c66:	4e0c      	ldr	r6, [pc, #48]	; (23f3c98 <_Z21tflite_learn_5_invokev+0x38>)
 23f3c68:	4d0c      	ldr	r5, [pc, #48]	; (23f3c9c <_Z21tflite_learn_5_invokev+0x3c>)
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 23f3c6a:	4f0d      	ldr	r7, [pc, #52]	; (23f3ca0 <_Z21tflite_learn_5_invokev+0x40>)
 23f3c6c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 23f3ca4 <_Z21tflite_learn_5_invokev+0x44>
    ResetTensors();
 23f3c70:	f7ff fe32 	bl	23f38d8 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 23f3c74:	7b33      	ldrb	r3, [r6, #12]
 23f3c76:	4629      	mov	r1, r5
 23f3c78:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 23f3c7c:	4640      	mov	r0, r8
 23f3c7e:	68db      	ldr	r3, [r3, #12]
 23f3c80:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 23f3c82:	b930      	cbnz	r0, 23f3c92 <_Z21tflite_learn_5_invokev+0x32>
  for (size_t i = 0; i < 11; ++i) {
 23f3c84:	3401      	adds	r4, #1
 23f3c86:	2c0b      	cmp	r4, #11
 23f3c88:	f106 0610 	add.w	r6, r6, #16
 23f3c8c:	f105 0524 	add.w	r5, r5, #36	; 0x24
 23f3c90:	d1ee      	bne.n	23f3c70 <_Z21tflite_learn_5_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
 23f3c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f3c96:	bf00      	nop
 23f3c98:	023fecf8 	.word	0x023fecf8
 23f3c9c:	1007a6fc 	.word	0x1007a6fc
 23f3ca0:	1007a608 	.word	0x1007a608
 23f3ca4:	1007a6a8 	.word	0x1007a6a8

023f3ca8 <_Z20tflite_learn_5_resetPFvPvE>:

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 23f3ca8:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 23f3caa:	2400      	movs	r4, #0
  free_fnc(tensor_arena);
 23f3cac:	4a09      	ldr	r2, [pc, #36]	; (23f3cd4 <_Z20tflite_learn_5_resetPFvPvE+0x2c>)
TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 23f3cae:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
 23f3cb0:	6810      	ldr	r0, [r2, #0]
 23f3cb2:	4798      	blx	r3
  scratch_buffers_ix = 0;
 23f3cb4:	4b08      	ldr	r3, [pc, #32]	; (23f3cd8 <_Z20tflite_learn_5_resetPFvPvE+0x30>)
 23f3cb6:	4e09      	ldr	r6, [pc, #36]	; (23f3cdc <_Z20tflite_learn_5_resetPFvPvE+0x34>)

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f3cb8:	4d09      	ldr	r5, [pc, #36]	; (23f3ce0 <_Z20tflite_learn_5_resetPFvPvE+0x38>)
  scratch_buffers_ix = 0;
 23f3cba:	601c      	str	r4, [r3, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f3cbc:	682b      	ldr	r3, [r5, #0]
 23f3cbe:	42a3      	cmp	r3, r4
 23f3cc0:	d905      	bls.n	23f3cce <_Z20tflite_learn_5_resetPFvPvE+0x26>
    ei_free(overflow_buffers[ix]);
 23f3cc2:	f856 0b04 	ldr.w	r0, [r6], #4
 23f3cc6:	f000 f86c 	bl	23f3da2 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f3cca:	3401      	adds	r4, #1
 23f3ccc:	e7f6      	b.n	23f3cbc <_Z20tflite_learn_5_resetPFvPvE+0x14>
  }
  overflow_buffers_ix = 0;
 23f3cce:	2000      	movs	r0, #0
 23f3cd0:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
 23f3cd2:	bd70      	pop	{r4, r5, r6, pc}
 23f3cd4:	1007a604 	.word	0x1007a604
 23f3cd8:	1007aa28 	.word	0x1007aa28
 23f3cdc:	1007aa00 	.word	0x1007aa00
 23f3ce0:	1007aa2c 	.word	0x1007aa2c

023f3ce4 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f3ce4:	4b10      	ldr	r3, [pc, #64]	; (23f3d28 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x44>)
 23f3ce6:	681a      	ldr	r2, [r3, #0]
};const NodeInfo_t nodeData[] = {
 23f3ce8:	4b10      	ldr	r3, [pc, #64]	; (23f3d2c <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x48>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f3cea:	f502 6178 	add.w	r1, r2, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 23f3cee:	6059      	str	r1, [r3, #4]
 23f3cf0:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 23f3cf4:	f502 7148 	add.w	r1, r2, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 23f3cf8:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 23f3cfc:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 23f3d00:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 23f3d04:	f502 71c8 	add.w	r1, r2, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 23f3d08:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 23f3d0c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 23f3d10:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 23f3d14:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 23f3d18:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 23f3d1c:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 23f3d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
}
 23f3d24:	4770      	bx	lr
 23f3d26:	bf00      	nop
 23f3d28:	1007a604 	.word	0x1007a604
 23f3d2c:	100799d4 	.word	0x100799d4

023f3d30 <_Z29ei_run_impulse_check_canceledv>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
 23f3d30:	2000      	movs	r0, #0
 23f3d32:	4770      	bx	lr

023f3d34 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
 23f3d34:	b508      	push	{r3, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f3d36:	f003 f969 	bl	23f700c <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
 23f3d3a:	2100      	movs	r1, #0
 23f3d3c:	bd08      	pop	{r3, pc}
	...

023f3d40 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f3d40:	b40f      	push	{r0, r1, r2, r3}
 23f3d42:	b513      	push	{r0, r1, r4, lr}
 23f3d44:	ab04      	add	r3, sp, #16
 23f3d46:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f3d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f3d4e:	480b      	ldr	r0, [pc, #44]	; (23f3d7c <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f3d50:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f3d52:	f003 fb45 	bl	23f73e0 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f3d56:	2800      	cmp	r0, #0
 23f3d58:	dd0b      	ble.n	23f3d72 <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f3d5a:	f003 ff91 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f3d5e:	4604      	mov	r4, r0
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 23f3d60:	4806      	ldr	r0, [pc, #24]	; (23f3d7c <_Z9ei_printfPKcz+0x3c>)
 23f3d62:	f7f9 fb31 	bl	23ed3c8 <strlen>
 23f3d66:	6823      	ldr	r3, [r4, #0]
 23f3d68:	4602      	mov	r2, r0
 23f3d6a:	68db      	ldr	r3, [r3, #12]
 23f3d6c:	4620      	mov	r0, r4
 23f3d6e:	4903      	ldr	r1, [pc, #12]	; (23f3d7c <_Z9ei_printfPKcz+0x3c>)
 23f3d70:	4798      	blx	r3
    }
}
 23f3d72:	b002      	add	sp, #8
 23f3d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f3d78:	b004      	add	sp, #16
 23f3d7a:	4770      	bx	lr
 23f3d7c:	1007aa30 	.word	0x1007aa30

023f3d80 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 23f3d80:	b507      	push	{r0, r1, r2, lr}
 23f3d82:	ed8d 0a01 	vstr	s0, [sp, #4]
    Serial.print(f, 6);
 23f3d86:	f003 ff7b 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f3d8a:	2106      	movs	r1, #6
 23f3d8c:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 23f3d90:	b003      	add	sp, #12
 23f3d92:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.print(f, 6);
 23f3d96:	f005 b9ab 	b.w	23f90f0 <_ZN5Print5printEfi>

023f3d9a <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
 23f3d9a:	f003 baf7 	b.w	23f738c <malloc>

023f3d9e <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
 23f3d9e:	f007 bbab 	b.w	23fb4f8 <calloc>

023f3da2 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
 23f3da2:	f003 bb01 	b.w	23f73a8 <free>

023f3da6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 23f3da6:	3801      	subs	r0, #1
 23f3da8:	280f      	cmp	r0, #15
 23f3daa:	d815      	bhi.n	23f3dd8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
 23f3dac:	e8df f000 	tbb	[pc, r0]
 23f3db0:	0e100c0c 	.word	0x0e100c0c
 23f3db4:	0e081014 	.word	0x0e081014
 23f3db8:	120e0810 	.word	0x120e0810
 23f3dbc:	0c14140e 	.word	0x0c14140e
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 23f3dc0:	2302      	movs	r3, #2
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 23f3dc2:	2000      	movs	r0, #0
      *size = sizeof(float);
 23f3dc4:	600b      	str	r3, [r1, #0]
      break;
 23f3dc6:	4770      	bx	lr
      *size = sizeof(float);
 23f3dc8:	2304      	movs	r3, #4
 23f3dca:	e7fa      	b.n	23f3dc2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
 23f3dcc:	2308      	movs	r3, #8
 23f3dce:	e7f8      	b.n	23f3dc2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
 23f3dd0:	2301      	movs	r3, #1
 23f3dd2:	e7f6      	b.n	23f3dc2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
 23f3dd4:	2310      	movs	r3, #16
 23f3dd6:	e7f4      	b.n	23f3dc2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  return kTfLiteOk;
 23f3dd8:	2001      	movs	r0, #1
}
 23f3dda:	4770      	bx	lr

023f3ddc <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 23f3ddc:	2200      	movs	r2, #0
  int result = 1;
 23f3dde:	2301      	movs	r3, #1
int ElementCount(const TfLiteIntArray& dims) {
 23f3de0:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
 23f3de2:	f850 4b04 	ldr.w	r4, [r0], #4
 23f3de6:	4294      	cmp	r4, r2
 23f3de8:	dd04      	ble.n	23f3df4 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
 23f3dea:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
 23f3dee:	3201      	adds	r2, #1
    result *= dims.data[i];
 23f3df0:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
 23f3df2:	e7f8      	b.n	23f3de6 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
 23f3df4:	4618      	mov	r0, r3
 23f3df6:	bd10      	pop	{r4, pc}

023f3df8 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 23f3df8:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
 23f3dfa:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
 23f3dfc:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
 23f3dfe:	2b05      	cmp	r3, #5
 23f3e00:	dd03      	ble.n	23f3e0a <_ZN6tflite12RuntimeShapeD1Ev+0x12>
 23f3e02:	6840      	ldr	r0, [r0, #4]
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 23f3e04:	b108      	cbz	r0, 23f3e0a <_ZN6tflite12RuntimeShapeD1Ev+0x12>
 23f3e06:	f7f9 fb08 	bl	23ed41a <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 23f3e0a:	4620      	mov	r0, r4
 23f3e0c:	bd10      	pop	{r4, pc}

023f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
 23f3e0e:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
 23f3e10:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 23f3e12:	da01      	bge.n	23f3e18 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 23f3e14:	f003 faf2 	bl	23f73fc <abort>
    TFLITE_DCHECK_LT(i, size_);
 23f3e18:	6803      	ldr	r3, [r0, #0]
 23f3e1a:	428b      	cmp	r3, r1
 23f3e1c:	ddfa      	ble.n	23f3e14 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 23f3e1e:	2b05      	cmp	r3, #5
 23f3e20:	bfcb      	itete	gt
 23f3e22:	6843      	ldrgt	r3, [r0, #4]
 23f3e24:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
 23f3e28:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
 23f3e2c:	6840      	ldrle	r0, [r0, #4]
  }
 23f3e2e:	bd08      	pop	{r3, pc}

023f3e30 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 23f3e30:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f3e32:	6801      	ldr	r1, [r0, #0]
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 23f3e34:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f3e36:	2905      	cmp	r1, #5
 23f3e38:	bfcc      	ite	gt
 23f3e3a:	6843      	ldrgt	r3, [r0, #4]
 23f3e3c:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
 23f3e3e:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
 23f3e40:	428a      	cmp	r2, r1
 23f3e42:	da04      	bge.n	23f3e4e <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
 23f3e44:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
 23f3e48:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f3e4a:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
 23f3e4c:	e7f8      	b.n	23f3e40 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
 23f3e4e:	bd10      	pop	{r4, pc}

023f3e50 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 23f3e50:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 23f3e52:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 23f3e54:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 23f3e56:	2d04      	cmp	r5, #4
 23f3e58:	d001      	beq.n	23f3e5e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
 23f3e5a:	f003 facf 	bl	23f73fc <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 23f3e5e:	2900      	cmp	r1, #0
 23f3e60:	dbfb      	blt.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f3e62:	6845      	ldr	r5, [r0, #4]
 23f3e64:	428d      	cmp	r5, r1
 23f3e66:	ddf8      	ble.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 23f3e68:	2a00      	cmp	r2, #0
 23f3e6a:	dbf6      	blt.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f3e6c:	6886      	ldr	r6, [r0, #8]
 23f3e6e:	4296      	cmp	r6, r2
 23f3e70:	ddf3      	ble.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 23f3e72:	2b00      	cmp	r3, #0
 23f3e74:	dbf1      	blt.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f3e76:	68c5      	ldr	r5, [r0, #12]
 23f3e78:	429d      	cmp	r5, r3
 23f3e7a:	ddee      	ble.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 23f3e7c:	2c00      	cmp	r4, #0
 23f3e7e:	dbec      	blt.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f3e80:	6900      	ldr	r0, [r0, #16]
 23f3e82:	42a0      	cmp	r0, r4
 23f3e84:	dde9      	ble.n	23f3e5a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 23f3e86:	fb01 2206 	mla	r2, r1, r6, r2
 23f3e8a:	fb05 3302 	mla	r3, r5, r2, r3
}
 23f3e8e:	fb00 4003 	mla	r0, r0, r3, r4
 23f3e92:	bd70      	pop	{r4, r5, r6, pc}

023f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 23f3e94:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f3e96:	b908      	cbnz	r0, 23f3e9c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f3e98:	f003 fab0 	bl	23f73fc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f3e9c:	2900      	cmp	r1, #0
 23f3e9e:	d0fb      	beq.n	23f3e98 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
}
 23f3ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f3ea4:	6809      	ldr	r1, [r1, #0]
 23f3ea6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f3ea8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f3eac:	6851      	ldr	r1, [r2, #4]
 23f3eae:	4718      	bx	r3

023f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 23f3eb0:	b570      	push	{r4, r5, r6, lr}
 23f3eb2:	4615      	mov	r5, r2
 23f3eb4:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f3eb6:	f7ff ffaa 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f3eba:	4631      	mov	r1, r6
 23f3ebc:	4604      	mov	r4, r0
 23f3ebe:	4628      	mov	r0, r5
 23f3ec0:	f7ff ffa5 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f3ec4:	4284      	cmp	r4, r0
 23f3ec6:	d001      	beq.n	23f3ecc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
 23f3ec8:	f003 fa98 	bl	23f73fc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
 23f3ecc:	bd70      	pop	{r4, r5, r6, pc}

023f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 23f3ece:	b570      	push	{r4, r5, r6, lr}
 23f3ed0:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 23f3ed2:	b911      	cbnz	r1, 23f3eda <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 23f3ed4:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f3ed6:	4620      	mov	r0, r4
 23f3ed8:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
 23f3eda:	688d      	ldr	r5, [r1, #8]
 23f3edc:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
 23f3ee0:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
 23f3ee2:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f3ee4:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 23f3ee8:	dc05      	bgt.n	23f3ef6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f3eea:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f3eec:	4632      	mov	r2, r6
 23f3eee:	4629      	mov	r1, r5
 23f3ef0:	f007 fb15 	bl	23fb51e <memcpy>
  }
 23f3ef4:	e7ef      	b.n	23f3ed6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
 23f3ef6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 23f3efa:	4293      	cmp	r3, r2
 23f3efc:	bfb4      	ite	lt
 23f3efe:	4630      	movlt	r0, r6
 23f3f00:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f3f04:	f7f9 fa87 	bl	23ed416 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f3f08:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f3f0a:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f3f0c:	2b05      	cmp	r3, #5
 23f3f0e:	dced      	bgt.n	23f3eec <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
 23f3f10:	e7eb      	b.n	23f3eea <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

023f3f12 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableEvalInput(context, node, index);
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 23f3f12:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f3f14:	b908      	cbnz	r0, 23f3f1a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f3f16:	f003 fa71 	bl	23f73fc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f3f1a:	2900      	cmp	r1, #0
 23f3f1c:	d0fb      	beq.n	23f3f16 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
}
 23f3f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f3f22:	6849      	ldr	r1, [r1, #4]
 23f3f24:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f3f26:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f3f2a:	6851      	ldr	r1, [r2, #4]
 23f3f2c:	4718      	bx	r3

023f3f2e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 23f3f2e:	b123      	cbz	r3, 23f3f3a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>

  switch (padding) {
 23f3f30:	2801      	cmp	r0, #1
 23f3f32:	d004      	beq.n	23f3f3e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
 23f3f34:	2802      	cmp	r0, #2
 23f3f36:	d007      	beq.n	23f3f48 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
 23f3f38:	2300      	movs	r3, #0
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
 23f3f3a:	4618      	mov	r0, r3
 23f3f3c:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
 23f3f3e:	4419      	add	r1, r3
 23f3f40:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
 23f3f42:	fb91 f3f3 	sdiv	r3, r1, r3
 23f3f46:	e7f8      	b.n	23f3f3a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f3f48:	9800      	ldr	r0, [sp, #0]
 23f3f4a:	3a01      	subs	r2, #1
 23f3f4c:	4342      	muls	r2, r0
      return (image_size + stride - effective_filter_size) / stride;
 23f3f4e:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f3f50:	3201      	adds	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
 23f3f52:	1a89      	subs	r1, r1, r2
 23f3f54:	e7f5      	b.n	23f3f42 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

023f3f56 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f3f56:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f3f58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f3f5a:	b90b      	cbnz	r3, 23f3f60 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f3f5c:	f003 fa4e 	bl	23f73fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f3f60:	2124      	movs	r1, #36	; 0x24
}
 23f3f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f3f66:	4718      	bx	r3

023f3f68 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f3f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3f6c:	b0b7      	sub	sp, #220	; 0xdc
 23f3f6e:	e9dd a640 	ldrd	sl, r6, [sp, #256]	; 0x100
 23f3f72:	4607      	mov	r7, r0
 23f3f74:	460c      	mov	r4, r1
  TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                  TfLiteTypeGetName(output->type), output->type);
  return kTfLiteError;
  #endif

  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f3f76:	a824      	add	r0, sp, #144	; 0x90
 23f3f78:	4631      	mov	r1, r6
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f3f7a:	4698      	mov	r8, r3
 23f3f7c:	4691      	mov	r9, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f3f7e:	f001 faf3 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 23f3f82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f3f84:	2b02      	cmp	r3, #2
 23f3f86:	d001      	beq.n	23f3f8c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24>
 23f3f88:	f003 fa38 	bl	23f73fc <abort>
  const int batches = output_shape.Dims(0);
 23f3f8c:	2100      	movs	r1, #0
 23f3f8e:	a824      	add	r0, sp, #144	; 0x90
 23f3f90:	f7ff ff3d 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
 23f3f94:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
 23f3f96:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
 23f3f98:	a824      	add	r0, sp, #144	; 0x90
 23f3f9a:	f7ff ff38 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f3f9e:	4641      	mov	r1, r8
  const int output_depth = output_shape.Dims(1);
 23f3fa0:	4683      	mov	fp, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f3fa2:	a82a      	add	r0, sp, #168	; 0xa8
 23f3fa4:	f001 fae0 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f3fa8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 23f3faa:	a82a      	add	r0, sp, #168	; 0xa8
 23f3fac:	3901      	subs	r1, #1
 23f3fae:	f7ff ff2e 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f3fb2:	4649      	mov	r1, r9
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f3fb4:	9008      	str	r0, [sp, #32]
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f3fb6:	a830      	add	r0, sp, #192	; 0xc0
 23f3fb8:	f001 fad6 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
  quant_params.shift = data.reference_op_data.output_shift;

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 23f3fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
 23f3fbe:	2501      	movs	r5, #1
  bias_dims.h = 1;
  bias_dims.w = 1;
  bias_dims.c = output_depth;

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 23f3fc0:	e9cd b31a 	strd	fp, r3, [sp, #104]	; 0x68
  input_dims.n = batches;
 23f3fc4:	930f      	str	r3, [sp, #60]	; 0x3c
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 23f3fc6:	2300      	movs	r3, #0
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f3fc8:	6961      	ldr	r1, [r4, #20]
  input_dims.c = accum_depth;
 23f3fca:	9a08      	ldr	r2, [sp, #32]
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f3fcc:	4249      	negs	r1, r1
 23f3fce:	911f      	str	r1, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f3fd0:	69e1      	ldr	r1, [r4, #28]
  input_dims.w = 1;
 23f3fd2:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f3fd6:	9121      	str	r1, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 23f3fd8:	69a1      	ldr	r1, [r4, #24]
  filter_dims.n = accum_depth;
 23f3fda:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 23f3fde:	4249      	negs	r1, r1
 23f3fe0:	9120      	str	r1, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f3fe2:	68a1      	ldr	r1, [r4, #8]
  filter_dims.w = 1;
 23f3fe4:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f3fe8:	9122      	str	r1, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f3fea:	68e1      	ldr	r1, [r4, #12]
  bias_dims.n = 1;
 23f3fec:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f3ff0:	9123      	str	r1, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 23f3ff2:	6821      	ldr	r1, [r4, #0]
  bias_dims.w = 1;
 23f3ff4:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 23f3ff8:	910b      	str	r1, [sp, #44]	; 0x2c
  quant_params.shift = data.reference_op_data.output_shift;
 23f3ffa:	6861      	ldr	r1, [r4, #4]
  output_dims.w = 1;
 23f3ffc:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  quant_params.shift = data.reference_op_data.output_shift;
 23f4000:	910c      	str	r1, [sp, #48]	; 0x30
  output_dims.c = output_depth;
 23f4002:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  ctx.size = 0;
 23f4006:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
 23f400a:	6a21      	ldr	r1, [r4, #32]
 23f400c:	4299      	cmp	r1, r3
 23f400e:	db03      	blt.n	23f4018 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f4010:	4638      	mov	r0, r7
 23f4012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 23f4014:	4798      	blx	r3
 23f4016:	900d      	str	r0, [sp, #52]	; 0x34
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
 23f4018:	f1b9 0f00 	cmp.w	r9, #0
 23f401c:	d0b4      	beq.n	23f3f88 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f401e:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
 23f4022:	f1b8 0f00 	cmp.w	r8, #0
 23f4026:	d0af      	beq.n	23f3f88 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4028:	f8d8 1000 	ldr.w	r1, [r8]
  TFLITE_DCHECK(tensor != nullptr);
 23f402c:	f1ba 0f00 	cmp.w	sl, #0
 23f4030:	d0aa      	beq.n	23f3f88 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4032:	f8da 0000 	ldr.w	r0, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f4036:	2e00      	cmp	r6, #0
 23f4038:	d045      	beq.n	23f40c6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15e>
 23f403a:	6833      	ldr	r3, [r6, #0]
  }

  TF_LITE_ENSURE_EQ(
 23f403c:	9306      	str	r3, [sp, #24]
 23f403e:	ab1b      	add	r3, sp, #108	; 0x6c
 23f4040:	e9cd 0304 	strd	r0, r3, [sp, #16]
 23f4044:	ab17      	add	r3, sp, #92	; 0x5c
 23f4046:	e9cd 1302 	strd	r1, r3, [sp, #8]
 23f404a:	ab13      	add	r3, sp, #76	; 0x4c
 23f404c:	e9cd 2300 	strd	r2, r3, [sp]
 23f4050:	a91f      	add	r1, sp, #124	; 0x7c
 23f4052:	ab0f      	add	r3, sp, #60	; 0x3c
 23f4054:	aa0b      	add	r2, sp, #44	; 0x2c
 23f4056:	a80d      	add	r0, sp, #52	; 0x34
 23f4058:	f7fa fc2c 	bl	23ee8b4 <arm_fully_connected_s8>
 23f405c:	4604      	mov	r4, r0
 23f405e:	b328      	cbz	r0, 23f40ac <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
 23f4060:	693c      	ldr	r4, [r7, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4062:	f8d9 3000 	ldr.w	r3, [r9]
 23f4066:	f8d8 2000 	ldr.w	r2, [r8]
 23f406a:	f8da 1000 	ldr.w	r1, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f406e:	b106      	cbz	r6, 23f4072 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
 23f4070:	6836      	ldr	r6, [r6, #0]
 23f4072:	a81b      	add	r0, sp, #108	; 0x6c
 23f4074:	e9cd 1004 	strd	r1, r0, [sp, #16]
 23f4078:	a917      	add	r1, sp, #92	; 0x5c
 23f407a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 23f407e:	aa13      	add	r2, sp, #76	; 0x4c
 23f4080:	e9cd 3200 	strd	r3, r2, [sp]
 23f4084:	a91f      	add	r1, sp, #124	; 0x7c
 23f4086:	ab0f      	add	r3, sp, #60	; 0x3c
 23f4088:	aa0b      	add	r2, sp, #44	; 0x2c
 23f408a:	9606      	str	r6, [sp, #24]
 23f408c:	a80d      	add	r0, sp, #52	; 0x34
 23f408e:	f7fa fc11 	bl	23ee8b4 <arm_fully_connected_s8>
 23f4092:	2300      	movs	r3, #0
 23f4094:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f4098:	4b0c      	ldr	r3, [pc, #48]	; (23f40cc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x164>)
 23f409a:	4638      	mov	r0, r7
 23f409c:	9301      	str	r3, [sp, #4]
 23f409e:	4b0c      	ldr	r3, [pc, #48]	; (23f40d0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x168>)
 23f40a0:	4a0c      	ldr	r2, [pc, #48]	; (23f40d4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x16c>)
 23f40a2:	9300      	str	r3, [sp, #0]
 23f40a4:	490c      	ldr	r1, [pc, #48]	; (23f40d8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x170>)
 23f40a6:	23b2      	movs	r3, #178	; 0xb2
 23f40a8:	47a0      	blx	r4
 23f40aa:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f40ac:	a830      	add	r0, sp, #192	; 0xc0
 23f40ae:	f7ff fea3 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f40b2:	a82a      	add	r0, sp, #168	; 0xa8
 23f40b4:	f7ff fea0 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f40b8:	a824      	add	r0, sp, #144	; 0x90
 23f40ba:	f7ff fe9d 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
 23f40be:	4620      	mov	r0, r4
 23f40c0:	b037      	add	sp, #220	; 0xdc
 23f40c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f40c6:	4633      	mov	r3, r6
 23f40c8:	e7b8      	b.n	23f403c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xd4>
 23f40ca:	bf00      	nop
 23f40cc:	023feea1 	.word	0x023feea1
 23f40d0:	023feeb2 	.word	0x023feeb2
 23f40d4:	023fee04 	.word	0x023fee04
 23f40d8:	023fee87 	.word	0x023fee87

023f40dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f40dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f40e0:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f40e4:	4604      	mov	r4, r0
 23f40e6:	460d      	mov	r5, r1
 23f40e8:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK(node->user_data != nullptr);
 23f40ea:	f1b9 0f00 	cmp.w	r9, #0
 23f40ee:	d101      	bne.n	23f40f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 23f40f0:	f003 f984 	bl	23f73fc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f40f4:	f8d1 b014 	ldr.w	fp, [r1, #20]
 23f40f8:	f1bb 0f00 	cmp.w	fp, #0
 23f40fc:	d0f8      	beq.n	23f40f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
 23f40fe:	4b50      	ldr	r3, [pc, #320]	; (23f4240 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 23f4100:	681a      	ldr	r2, [r3, #0]
 23f4102:	f001 fbe1 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f4106:	4607      	mov	r7, r0
 23f4108:	b960      	cbnz	r0, 23f4124 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 23f410a:	4b4e      	ldr	r3, [pc, #312]	; (23f4244 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 23f410c:	9300      	str	r3, [sp, #0]
 23f410e:	2340      	movs	r3, #64	; 0x40
 23f4110:	6925      	ldr	r5, [r4, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4112:	4620      	mov	r0, r4
 23f4114:	4a4c      	ldr	r2, [pc, #304]	; (23f4248 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 23f4116:	494d      	ldr	r1, [pc, #308]	; (23f424c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 23f4118:	47a8      	blx	r5
 23f411a:	2501      	movs	r5, #1
}
 23f411c:	4628      	mov	r0, r5
 23f411e:	b015      	add	sp, #84	; 0x54
 23f4120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
 23f4124:	4b4a      	ldr	r3, [pc, #296]	; (23f4250 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 23f4126:	4629      	mov	r1, r5
 23f4128:	4620      	mov	r0, r4
 23f412a:	681a      	ldr	r2, [r3, #0]
 23f412c:	f001 fbcc 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4130:	4680      	mov	r8, r0
 23f4132:	b920      	cbnz	r0, 23f413e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
 23f4134:	4b47      	ldr	r3, [pc, #284]	; (23f4254 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 23f4136:	9300      	str	r3, [sp, #0]
 23f4138:	6925      	ldr	r5, [r4, #16]
 23f413a:	2343      	movs	r3, #67	; 0x43
 23f413c:	e7e9      	b.n	23f4112 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 23f413e:	4b46      	ldr	r3, [pc, #280]	; (23f4258 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 23f4140:	4629      	mov	r1, r5
 23f4142:	681a      	ldr	r2, [r3, #0]
 23f4144:	4620      	mov	r0, r4
 23f4146:	f001 fbd1 	bl	23f58ec <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 23f414a:	4b44      	ldr	r3, [pc, #272]	; (23f425c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 23f414c:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 23f414e:	4629      	mov	r1, r5
 23f4150:	4620      	mov	r0, r4
 23f4152:	681a      	ldr	r2, [r3, #0]
 23f4154:	f001 fbbb 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f4158:	4606      	mov	r6, r0
 23f415a:	b920      	cbnz	r0, 23f4166 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 23f415c:	4b40      	ldr	r3, [pc, #256]	; (23f4260 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
 23f415e:	9300      	str	r3, [sp, #0]
 23f4160:	6925      	ldr	r5, [r4, #16]
 23f4162:	2347      	movs	r3, #71	; 0x47
 23f4164:	e7d5      	b.n	23f4112 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f4166:	7838      	ldrb	r0, [r7, #0]
 23f4168:	7833      	ldrb	r3, [r6, #0]
 23f416a:	4283      	cmp	r3, r0
 23f416c:	d012      	beq.n	23f4194 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
 23f416e:	6927      	ldr	r7, [r4, #16]
 23f4170:	f7f9 f96c 	bl	23ed44c <TfLiteTypeGetName>
 23f4174:	4605      	mov	r5, r0
 23f4176:	7830      	ldrb	r0, [r6, #0]
 23f4178:	f7f9 f968 	bl	23ed44c <TfLiteTypeGetName>
 23f417c:	4b39      	ldr	r3, [pc, #228]	; (23f4264 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 23f417e:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f4182:	9301      	str	r3, [sp, #4]
 23f4184:	4b38      	ldr	r3, [pc, #224]	; (23f4268 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 23f4186:	4620      	mov	r0, r4
 23f4188:	9300      	str	r3, [sp, #0]
 23f418a:	4a2f      	ldr	r2, [pc, #188]	; (23f4248 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 23f418c:	2349      	movs	r3, #73	; 0x49
 23f418e:	4937      	ldr	r1, [pc, #220]	; (23f426c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
 23f4190:	47b8      	blx	r7
 23f4192:	e7c2      	b.n	23f411a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 23f4194:	f898 2000 	ldrb.w	r2, [r8]
 23f4198:	429a      	cmp	r2, r3
 23f419a:	d004      	beq.n	23f41a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
 23f419c:	4620      	mov	r0, r4
 23f419e:	6923      	ldr	r3, [r4, #16]
 23f41a0:	4933      	ldr	r1, [pc, #204]	; (23f4270 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
 23f41a2:	4798      	blx	r3
 23f41a4:	e7b9      	b.n	23f411a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
 23f41a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f41aa:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f41ae:	783a      	ldrb	r2, [r7, #0]
 23f41b0:	f89b 1000 	ldrb.w	r1, [fp]
 23f41b4:	463b      	mov	r3, r7
 23f41b6:	4620      	mov	r0, r4
 23f41b8:	e9cd 6902 	strd	r6, r9, [sp, #8]
 23f41bc:	e9cd 8a00 	strd	r8, sl, [sp]
 23f41c0:	f000 f8ce 	bl	23f4360 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 23f41c4:	4605      	mov	r5, r0
 23f41c6:	2800      	cmp	r0, #0
 23f41c8:	d1a8      	bne.n	23f411c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
 23f41ca:	783b      	ldrb	r3, [r7, #0]
 23f41cc:	2b09      	cmp	r3, #9
 23f41ce:	d1a5      	bne.n	23f411c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
 23f41d0:	4641      	mov	r1, r8
 23f41d2:	a808      	add	r0, sp, #32
 23f41d4:	f7ff fe7b 	bl	23f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 23f41d8:	4631      	mov	r1, r6
 23f41da:	a80e      	add	r0, sp, #56	; 0x38
 23f41dc:	f7ff fe77 	bl	23f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 23f41e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f41e2:	2b02      	cmp	r3, #2
 23f41e4:	d184      	bne.n	23f40f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f41e6:	9908      	ldr	r1, [sp, #32]
 23f41e8:	a808      	add	r0, sp, #32
 23f41ea:	3901      	subs	r1, #1
 23f41ec:	f7ff fe0f 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
 23f41f0:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f41f2:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
 23f41f4:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
 23f41f6:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
 23f41fa:	f7ff fe08 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f41fe:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 23f4200:	a804      	add	r0, sp, #16
 23f4202:	f7fa fb88 	bl	23ee916 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
 23f4206:	1e01      	subs	r1, r0, #0
 23f4208:	dd0e      	ble.n	23f4228 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f420a:	4620      	mov	r0, r4
 23f420c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f420e:	f109 0220 	add.w	r2, r9, #32
 23f4212:	4798      	blx	r3
 23f4214:	4604      	mov	r4, r0
 23f4216:	b158      	cbz	r0, 23f4230 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
 23f4218:	a80e      	add	r0, sp, #56	; 0x38
 23f421a:	f7ff fded 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f421e:	a808      	add	r0, sp, #32
 23f4220:	f7ff fdea 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f4224:	4625      	mov	r5, r4
 23f4226:	e779      	b.n	23f411c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
 23f4228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f422c:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
 23f4230:	a80e      	add	r0, sp, #56	; 0x38
 23f4232:	f7ff fde1 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
 23f4236:	a808      	add	r0, sp, #32
 23f4238:	f7ff fdde 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f423c:	e76e      	b.n	23f411c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f423e:	bf00      	nop
 23f4240:	023ff0a8 	.word	0x023ff0a8
 23f4244:	023fefed 	.word	0x023fefed
 23f4248:	023fee04 	.word	0x023fee04
 23f424c:	023fefd6 	.word	0x023fefd6
 23f4250:	023ff0b0 	.word	0x023ff0b0
 23f4254:	023feffe 	.word	0x023feffe
 23f4258:	023ff0a4 	.word	0x023ff0a4
 23f425c:	023ff0ac 	.word	0x023ff0ac
 23f4260:	023ff010 	.word	0x023ff010
 23f4264:	023ff03c 	.word	0x023ff03c
 23f4268:	023ff049 	.word	0x023ff049
 23f426c:	023ff022 	.word	0x023ff022
 23f4270:	023ff055 	.word	0x023ff055

023f4274 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f4274:	b5f0      	push	{r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f4276:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f4278:	4605      	mov	r5, r0
 23f427a:	460c      	mov	r4, r1
 23f427c:	b085      	sub	sp, #20
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f427e:	b90b      	cbnz	r3, 23f4284 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10>
 23f4280:	f003 f8bc 	bl	23f73fc <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f4284:	4b21      	ldr	r3, [pc, #132]	; (23f430c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>)
  return GetMutableEvalInput(context, node, index);
 23f4286:	681a      	ldr	r2, [r3, #0]
 23f4288:	f7ff fe04 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f428c:	4b20      	ldr	r3, [pc, #128]	; (23f4310 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>)
 23f428e:	4621      	mov	r1, r4
 23f4290:	681a      	ldr	r2, [r3, #0]
 23f4292:	4606      	mov	r6, r0
 23f4294:	4628      	mov	r0, r5
 23f4296:	f7ff fdfd 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f429a:	4a1e      	ldr	r2, [pc, #120]	; (23f4314 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
 23f429c:	4621      	mov	r1, r4
 23f429e:	6812      	ldr	r2, [r2, #0]
 23f42a0:	9003      	str	r0, [sp, #12]
 23f42a2:	4628      	mov	r0, r5
 23f42a4:	f7ff fdf6 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f42a8:	4a1b      	ldr	r2, [pc, #108]	; (23f4318 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>)
 23f42aa:	4621      	mov	r1, r4
 23f42ac:	4607      	mov	r7, r0
 23f42ae:	6812      	ldr	r2, [r2, #0]
 23f42b0:	4628      	mov	r0, r5
 23f42b2:	f7ff fe2e 	bl	23f3f12 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
 23f42b6:	6921      	ldr	r1, [r4, #16]
 23f42b8:	2900      	cmp	r1, #0
 23f42ba:	d0e1      	beq.n	23f4280 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 23f42bc:	7a34      	ldrb	r4, [r6, #8]
 23f42be:	2c03      	cmp	r4, #3
 23f42c0:	d018      	beq.n	23f42f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>
 23f42c2:	2c09      	cmp	r4, #9
 23f42c4:	9b03      	ldr	r3, [sp, #12]
 23f42c6:	d00d      	beq.n	23f42e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 23f42c8:	2c01      	cmp	r4, #1
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f42ca:	4620      	mov	r0, r4
 23f42cc:	692f      	ldr	r7, [r5, #16]
  switch (input->type) {
 23f42ce:	d113      	bne.n	23f42f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f42d0:	f7f9 f8bc 	bl	23ed44c <TfLiteTypeGetName>
 23f42d4:	7a33      	ldrb	r3, [r6, #8]
 23f42d6:	4602      	mov	r2, r0
 23f42d8:	4910      	ldr	r1, [pc, #64]	; (23f431c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 23f42da:	4628      	mov	r0, r5
 23f42dc:	47b8      	blx	r7
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
}
 23f42de:	4620      	mov	r0, r4
 23f42e0:	b005      	add	sp, #20
 23f42e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 23f42e4:	e9cd 7000 	strd	r7, r0, [sp]
 23f42e8:	4632      	mov	r2, r6
 23f42ea:	4628      	mov	r0, r5
 23f42ec:	f7ff fe3c 	bl	23f3f68 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
 23f42f0:	4604      	mov	r4, r0
                               output);
 23f42f2:	e7f4      	b.n	23f42de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f42f4:	4620      	mov	r0, r4
 23f42f6:	692f      	ldr	r7, [r5, #16]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f42f8:	f7f9 f8a8 	bl	23ed44c <TfLiteTypeGetName>
 23f42fc:	7a33      	ldrb	r3, [r6, #8]
 23f42fe:	4602      	mov	r2, r0
 23f4300:	4906      	ldr	r1, [pc, #24]	; (23f431c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 23f4302:	4628      	mov	r0, r5
 23f4304:	47b8      	blx	r7
      return kTfLiteError;
 23f4306:	2401      	movs	r4, #1
 23f4308:	e7e9      	b.n	23f42de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
 23f430a:	bf00      	nop
 23f430c:	023ff0a8 	.word	0x023ff0a8
 23f4310:	023ff0b0 	.word	0x023ff0b0
 23f4314:	023ff0a4 	.word	0x023ff0a4
 23f4318:	023ff0ac 	.word	0x023ff0ac
 23f431c:	023ff086 	.word	0x023ff086

023f4320 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 23f4320:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
 23f4322:	4b0b      	ldr	r3, [pc, #44]	; (23f4350 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
 23f4324:	4c0b      	ldr	r4, [pc, #44]	; (23f4354 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
  fully_connected_registration.invoke = Eval;
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
 23f4326:	4605      	mov	r5, r0
  fully_connected_registration.init = Init;
 23f4328:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
 23f432a:	2300      	movs	r3, #0
TfLiteRegistration Register_FULLY_CONNECTED() {
 23f432c:	4606      	mov	r6, r0
  fully_connected_registration.prepare = Prepare;
 23f432e:	4a0a      	ldr	r2, [pc, #40]	; (23f4358 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.free = nullptr;
 23f4330:	6063      	str	r3, [r4, #4]
  fully_connected_registration.prepare = Prepare;
 23f4332:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.invoke = Eval;
 23f4334:	4a09      	ldr	r2, [pc, #36]	; (23f435c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.custom_name = nullptr;
 23f4336:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.profiling_string = nullptr;
 23f433a:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.version = 0;
 23f433e:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
 23f4340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f4342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f4344:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f4348:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 23f434c:	4630      	mov	r0, r6
 23f434e:	bd70      	pop	{r4, r5, r6, pc}
 23f4350:	023f3f57 	.word	0x023f3f57
 23f4354:	1007ae30 	.word	0x1007ae30
 23f4358:	023f40dd 	.word	0x023f40dd
 23f435c:	023f4275 	.word	0x023f4275

023f4360 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 23f4360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (data_type != kTfLiteFloat32) {
 23f4364:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 23f4366:	b085      	sub	sp, #20
 23f4368:	4606      	mov	r6, r0
 23f436a:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
 23f436e:	460f      	mov	r7, r1
 23f4370:	461d      	mov	r5, r3
 23f4372:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
 23f4376:	d027      	beq.n	23f43c8 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
 23f4378:	2200      	movs	r2, #0
 23f437a:	2300      	movs	r3, #0
 23f437c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f4380:	ab02      	add	r3, sp, #8
 23f4382:	e9cd 8300 	strd	r8, r3, [sp]
 23f4386:	464a      	mov	r2, r9
 23f4388:	4629      	mov	r1, r5
 23f438a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f438c:	f001 fae4 	bl	23f5958 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f4390:	b9b8      	cbnz	r0, 23f43c2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 23f4392:	4620      	mov	r0, r4
 23f4394:	1d21      	adds	r1, r4, #4
 23f4396:	ed9d 0b02 	vldr	d0, [sp, #8]
 23f439a:	f001 fcc3 	bl	23f5d24 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 23f439e:	692b      	ldr	r3, [r5, #16]
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;

    return CalculateActivationRangeQuantized(context, activation, output,
 23f43a0:	4642      	mov	r2, r8
    data->input_zero_point = input->params.zero_point;
 23f43a2:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
 23f43a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f43a8:	4639      	mov	r1, r7
    data->filter_zero_point = filter->params.zero_point;
 23f43aa:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
 23f43ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f43b0:	4630      	mov	r0, r6
    data->output_zero_point = output->params.zero_point;
 23f43b2:	61e3      	str	r3, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f43b4:	f104 030c 	add.w	r3, r4, #12
 23f43b8:	9300      	str	r3, [sp, #0]
 23f43ba:	f104 0308 	add.w	r3, r4, #8
 23f43be:	f001 fb21 	bl	23f5a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
 23f43c2:	b005      	add	sp, #20
 23f43c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
 23f43c8:	2000      	movs	r0, #0
 23f43ca:	e7fa      	b.n	23f43c2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

023f43cc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f43cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f43ce:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
 23f43d0:	4605      	mov	r5, r0
 23f43d2:	b908      	cbnz	r0, 23f43d8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
 23f43d4:	f003 f812 	bl	23f73fc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f43d8:	2900      	cmp	r1, #0
 23f43da:	d0fb      	beq.n	23f43d4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f43dc:	680a      	ldr	r2, [r1, #0]
 23f43de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f43e0:	6851      	ldr	r1, [r2, #4]
 23f43e2:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f43e4:	6872      	ldr	r2, [r6, #4]
 23f43e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f43e8:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f43ea:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f43ec:	4628      	mov	r0, r5
 23f43ee:	4798      	blx	r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 23f43f0:	a901      	add	r1, sp, #4
 23f43f2:	4606      	mov	r6, r0
 23f43f4:	7a20      	ldrb	r0, [r4, #8]
 23f43f6:	f7ff fcd6 	bl	23f3da6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 23f43fa:	4605      	mov	r5, r0
 23f43fc:	b998      	cbnz	r0, 23f4426 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
 23f43fe:	6860      	ldr	r0, [r4, #4]
 23f4400:	f7ff fcec 	bl	23f3ddc <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 23f4404:	9b01      	ldr	r3, [sp, #4]
 23f4406:	4358      	muls	r0, r3
 23f4408:	9001      	str	r0, [sp, #4]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 23f440a:	6822      	ldr	r2, [r4, #0]
 23f440c:	6833      	ldr	r3, [r6, #0]
 23f440e:	429a      	cmp	r2, r3
 23f4410:	d009      	beq.n	23f4426 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 23f4412:	462b      	mov	r3, r5
 23f4414:	9a01      	ldr	r2, [sp, #4]
 23f4416:	429a      	cmp	r2, r3
 23f4418:	d905      	bls.n	23f4426 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
 23f441a:	6822      	ldr	r2, [r4, #0]
 23f441c:	5cd1      	ldrb	r1, [r2, r3]
 23f441e:	6832      	ldr	r2, [r6, #0]
 23f4420:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
 23f4422:	3301      	adds	r3, #1
 23f4424:	e7f6      	b.n	23f4414 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
    }
  }
  return kTfLiteOk;
}
 23f4426:	4628      	mov	r0, r5
 23f4428:	b002      	add	sp, #8
 23f442a:	bd70      	pop	{r4, r5, r6, pc}

023f442c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 23f442c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f4430:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 23f4432:	4604      	mov	r4, r0
 23f4434:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f4436:	f001 fa47 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f443a:	4607      	mov	r7, r0
 23f443c:	b958      	cbnz	r0, 23f4456 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
 23f443e:	4b40      	ldr	r3, [pc, #256]	; (23f4540 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>)
 23f4440:	6925      	ldr	r5, [r4, #16]
 23f4442:	9300      	str	r3, [sp, #0]
 23f4444:	2323      	movs	r3, #35	; 0x23
  TF_LITE_ENSURE(context, output != nullptr);
 23f4446:	4620      	mov	r0, r4
 23f4448:	4a3e      	ldr	r2, [pc, #248]	; (23f4544 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f444a:	493f      	ldr	r1, [pc, #252]	; (23f4548 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
 23f444c:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f444e:	2001      	movs	r0, #1
}
 23f4450:	b004      	add	sp, #16
 23f4452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f4456:	2200      	movs	r2, #0
 23f4458:	4641      	mov	r1, r8
 23f445a:	4620      	mov	r0, r4
 23f445c:	f001 fa37 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f4460:	4606      	mov	r6, r0
 23f4462:	b920      	cbnz	r0, 23f446e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x42>
 23f4464:	4b39      	ldr	r3, [pc, #228]	; (23f454c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
 23f4466:	6925      	ldr	r5, [r4, #16]
 23f4468:	9300      	str	r3, [sp, #0]
 23f446a:	2325      	movs	r3, #37	; 0x25
 23f446c:	e7eb      	b.n	23f4446 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a>
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
  int64_t count = 1;
  for (int i = 0; i < dims->size; ++i) {
 23f446e:	2200      	movs	r2, #0
  int64_t count = 1;
 23f4470:	2501      	movs	r5, #1
  for (int i = 0; i < dims->size; ++i) {
 23f4472:	68bb      	ldr	r3, [r7, #8]
 23f4474:	f853 0b04 	ldr.w	r0, [r3], #4
 23f4478:	4290      	cmp	r0, r2
 23f447a:	dd05      	ble.n	23f4488 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5c>
    count *= dims->data[i];
 23f447c:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
 23f4480:	3201      	adds	r2, #1
    count *= dims->data[i];
 23f4482:	fba5 5101 	umull	r5, r1, r5, r1
  for (int i = 0; i < dims->size; ++i) {
 23f4486:	e7f7      	b.n	23f4478 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4c>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f4488:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
 23f448c:	68b2      	ldr	r2, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
 23f448e:	681b      	ldr	r3, [r3, #0]
 23f4490:	2b01      	cmp	r3, #1
 23f4492:	d105      	bne.n	23f44a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 23f4494:	6813      	ldr	r3, [r2, #0]
 23f4496:	2b01      	cmp	r3, #1
 23f4498:	d102      	bne.n	23f44a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 23f449a:	6853      	ldr	r3, [r2, #4]
 23f449c:	b903      	cbnz	r3, 23f44a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
    output_shape->size = 0;
 23f449e:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
 23f44a0:	4694      	mov	ip, r2
 23f44a2:	2000      	movs	r0, #0
  int stretch_dim = -1;
 23f44a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  int num_output_elements = 1;
 23f44a8:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
 23f44aa:	f85c 8b04 	ldr.w	r8, [ip], #4
 23f44ae:	4580      	cmp	r8, r0
 23f44b0:	dd1a      	ble.n	23f44e8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbc>
    int value = output_shape->data[i];
 23f44b2:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
 23f44b6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 23f44ba:	d10f      	bne.n	23f44dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 23f44bc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 23f44c0:	d010      	beq.n	23f44e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb8>
 23f44c2:	4b23      	ldr	r3, [pc, #140]	; (23f4550 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
 23f44c4:	e9cd 1e02 	strd	r1, lr, [sp, #8]
 23f44c8:	9301      	str	r3, [sp, #4]
 23f44ca:	4b22      	ldr	r3, [pc, #136]	; (23f4554 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
 23f44cc:	6925      	ldr	r5, [r4, #16]
 23f44ce:	9300      	str	r3, [sp, #0]
 23f44d0:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f44d2:	4620      	mov	r0, r4
 23f44d4:	4a1b      	ldr	r2, [pc, #108]	; (23f4544 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f44d6:	4920      	ldr	r1, [pc, #128]	; (23f4558 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
 23f44d8:	47a8      	blx	r5
 23f44da:	e7b8      	b.n	23f444e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
      num_output_elements *= value;
 23f44dc:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
 23f44e0:	3001      	adds	r0, #1
 23f44e2:	e7e4      	b.n	23f44ae <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
 23f44e4:	4601      	mov	r1, r0
 23f44e6:	e7fb      	b.n	23f44e0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
  if (stretch_dim != -1) {
 23f44e8:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 23f44ea:	bf1f      	itttt	ne
 23f44ec:	fb95 f0f3 	sdivne	r0, r5, r3
 23f44f0:	eb02 0281 	addne.w	r2, r2, r1, lsl #2
 23f44f4:	6050      	strne	r0, [r2, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 23f44f6:	4343      	mulne	r3, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f44f8:	7832      	ldrb	r2, [r6, #0]
 23f44fa:	7838      	ldrb	r0, [r7, #0]
 23f44fc:	4282      	cmp	r2, r0
 23f44fe:	d012      	beq.n	23f4526 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
 23f4500:	6927      	ldr	r7, [r4, #16]
 23f4502:	f7f8 ffa3 	bl	23ed44c <TfLiteTypeGetName>
 23f4506:	4605      	mov	r5, r0
 23f4508:	7830      	ldrb	r0, [r6, #0]
 23f450a:	f7f8 ff9f 	bl	23ed44c <TfLiteTypeGetName>
 23f450e:	4b13      	ldr	r3, [pc, #76]	; (23f455c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
 23f4510:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f4514:	9301      	str	r3, [sp, #4]
 23f4516:	4b12      	ldr	r3, [pc, #72]	; (23f4560 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
 23f4518:	4620      	mov	r0, r4
 23f451a:	9300      	str	r3, [sp, #0]
 23f451c:	4a09      	ldr	r2, [pc, #36]	; (23f4544 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f451e:	2345      	movs	r3, #69	; 0x45
 23f4520:	4910      	ldr	r1, [pc, #64]	; (23f4564 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
 23f4522:	47b8      	blx	r7
 23f4524:	e793      	b.n	23f444e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f4526:	42ab      	cmp	r3, r5
 23f4528:	d008      	beq.n	23f453c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x110>
 23f452a:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f452e:	4b0e      	ldr	r3, [pc, #56]	; (23f4568 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
 23f4530:	6925      	ldr	r5, [r4, #16]
 23f4532:	9301      	str	r3, [sp, #4]
 23f4534:	4b0d      	ldr	r3, [pc, #52]	; (23f456c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
 23f4536:	9300      	str	r3, [sp, #0]
 23f4538:	2346      	movs	r3, #70	; 0x46
 23f453a:	e7ca      	b.n	23f44d2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
  return kTfLiteOk;
 23f453c:	2000      	movs	r0, #0
 23f453e:	e787      	b.n	23f4450 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
 23f4540:	023fefed 	.word	0x023fefed
 23f4544:	023ff0b4 	.word	0x023ff0b4
 23f4548:	023fefd6 	.word	0x023fefd6
 23f454c:	023ff010 	.word	0x023ff010
 23f4550:	023ff12f 	.word	0x023ff12f
 23f4554:	023ff132 	.word	0x023ff132
 23f4558:	023fee87 	.word	0x023fee87
 23f455c:	023ff03c 	.word	0x023ff03c
 23f4560:	023ff049 	.word	0x023ff049
 23f4564:	023ff022 	.word	0x023ff022
 23f4568:	023ff13e 	.word	0x023ff13e
 23f456c:	023ff152 	.word	0x023ff152

023f4570 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4570:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f4572:	680b      	ldr	r3, [r1, #0]
 23f4574:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f4576:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4578:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f457a:	3b01      	subs	r3, #1
 23f457c:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f457e:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f4580:	d909      	bls.n	23f4596 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 23f4582:	4b19      	ldr	r3, [pc, #100]	; (23f45e8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 23f4584:	4a19      	ldr	r2, [pc, #100]	; (23f45ec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f4586:	9300      	str	r3, [sp, #0]
 23f4588:	6904      	ldr	r4, [r0, #16]
 23f458a:	234b      	movs	r3, #75	; 0x4b
 23f458c:	4918      	ldr	r1, [pc, #96]	; (23f45f0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 23f458e:	47a0      	blx	r4
 23f4590:	2001      	movs	r0, #1
}
 23f4592:	b005      	add	sp, #20
 23f4594:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 23f4596:	684b      	ldr	r3, [r1, #4]
 23f4598:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f459a:	2e01      	cmp	r6, #1
 23f459c:	d00c      	beq.n	23f45b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 23f459e:	2401      	movs	r4, #1
 23f45a0:	4b14      	ldr	r3, [pc, #80]	; (23f45f4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
 23f45a2:	e9cd 6402 	strd	r6, r4, [sp, #8]
 23f45a6:	9301      	str	r3, [sp, #4]
 23f45a8:	4b13      	ldr	r3, [pc, #76]	; (23f45f8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
 23f45aa:	4a10      	ldr	r2, [pc, #64]	; (23f45ec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f45ac:	9300      	str	r3, [sp, #0]
 23f45ae:	6905      	ldr	r5, [r0, #16]
 23f45b0:	234c      	movs	r3, #76	; 0x4c
 23f45b2:	4912      	ldr	r1, [pc, #72]	; (23f45fc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f45b4:	47a8      	blx	r5
 23f45b6:	e7eb      	b.n	23f4590 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 23f45b8:	f7ff ff38 	bl	23f442c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 23f45bc:	2800      	cmp	r0, #0
 23f45be:	d0e8      	beq.n	23f4592 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 23f45c0:	4621      	mov	r1, r4
 23f45c2:	4628      	mov	r0, r5
 23f45c4:	692f      	ldr	r7, [r5, #16]
 23f45c6:	f7ff ff31 	bl	23f442c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 23f45ca:	2300      	movs	r3, #0
 23f45cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f45d0:	4b0b      	ldr	r3, [pc, #44]	; (23f4600 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
 23f45d2:	4628      	mov	r0, r5
 23f45d4:	9301      	str	r3, [sp, #4]
 23f45d6:	4b0b      	ldr	r3, [pc, #44]	; (23f4604 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
 23f45d8:	4a04      	ldr	r2, [pc, #16]	; (23f45ec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f45da:	9300      	str	r3, [sp, #0]
 23f45dc:	4907      	ldr	r1, [pc, #28]	; (23f45fc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f45de:	234d      	movs	r3, #77	; 0x4d
 23f45e0:	47b8      	blx	r7
 23f45e2:	4630      	mov	r0, r6
 23f45e4:	e7d5      	b.n	23f4592 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 23f45e6:	bf00      	nop
 23f45e8:	023ff165 	.word	0x023ff165
 23f45ec:	023ff0b4 	.word	0x023ff0b4
 23f45f0:	023fefd6 	.word	0x023fefd6
 23f45f4:	023ff563 	.word	0x023ff563
 23f45f8:	023ff192 	.word	0x023ff192
 23f45fc:	023fee87 	.word	0x023fee87
 23f4600:	023ff1a3 	.word	0x023ff1a3
 23f4604:	023ff1ad 	.word	0x023ff1ad

023f4608 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 23f4608:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f460a:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
 23f460c:	4606      	mov	r6, r0
          /*version=*/0};
 23f460e:	4d04      	ldr	r5, [pc, #16]	; (23f4620 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
 23f4610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f4612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f4618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f461c:	4630      	mov	r0, r6
 23f461e:	bd70      	pop	{r4, r5, r6, pc}
 23f4620:	023fb920 	.word	0x023fb920

023f4624 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f4624:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f4626:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f4628:	b90b      	cbnz	r3, 23f462e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f462a:	f002 fee7 	bl	23f73fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f462e:	2138      	movs	r1, #56	; 0x38
}
 23f4630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f4634:	4718      	bx	r3
	...

023f4638 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 23f4638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f463c:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 23f463e:	6943      	ldr	r3, [r0, #20]
    int8_t* output_data) {
 23f4640:	b0a1      	sub	sp, #132	; 0x84
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 23f4642:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
 23f4644:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8_t* output_data) {
 23f4648:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_width = params.stride_width;
 23f464c:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
 23f464e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8_t* output_data) {
 23f4652:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
  const int stride_height = params.stride_height;
 23f4656:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
 23f4658:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8_t* output_data) {
 23f465c:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
  const int dilation_width_factor = params.dilation_width_factor;
 23f4660:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
 23f4662:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 23f4666:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
 23f4668:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 23f466c:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
 23f466e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 23f4672:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
 23f4674:	69c3      	ldr	r3, [r0, #28]
 23f4676:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 23f4678:	6a83      	ldr	r3, [r0, #40]	; 0x28
 23f467a:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
 23f467c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f467e:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 23f4680:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 23f4684:	4293      	cmp	r3, r2
 23f4686:	dd01      	ble.n	23f468c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
 23f4688:	f002 feb8 	bl	23f73fc <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f468c:	f8d8 3000 	ldr.w	r3, [r8]
 23f4690:	2b04      	cmp	r3, #4
 23f4692:	d1f9      	bne.n	23f4688 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 23f4694:	f8d9 3000 	ldr.w	r3, [r9]
 23f4698:	2b04      	cmp	r3, #4
 23f469a:	d1f5      	bne.n	23f4688 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f469c:	f8da 3000 	ldr.w	r3, [sl]
 23f46a0:	2b04      	cmp	r3, #4
 23f46a2:	d1f1      	bne.n	23f4688 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 23f46a4:	2300      	movs	r3, #0
 23f46a6:	4652      	mov	r2, sl
 23f46a8:	4619      	mov	r1, r3
 23f46aa:	4640      	mov	r0, r8
 23f46ac:	f7ff fc00 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f46b0:	2303      	movs	r3, #3
 23f46b2:	464a      	mov	r2, r9
 23f46b4:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 23f46b6:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f46b8:	4640      	mov	r0, r8
 23f46ba:	f7ff fbf9 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f46be:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f46c0:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f46c2:	4652      	mov	r2, sl
 23f46c4:	2100      	movs	r1, #0
 23f46c6:	4648      	mov	r0, r9
 23f46c8:	f7ff fbf2 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 23f46cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f46ce:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
 23f46d0:	b12b      	cbz	r3, 23f46de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 23f46d2:	982d      	ldr	r0, [sp, #180]	; 0xb4
 23f46d4:	f7ff fbac 	bl	23f3e30 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 23f46d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f46da:	4298      	cmp	r0, r3
 23f46dc:	d1d4      	bne.n	23f4688 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 23f46de:	2101      	movs	r1, #1
 23f46e0:	4640      	mov	r0, r8
 23f46e2:	f7ff fb94 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
 23f46e6:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
 23f46e8:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 23f46ea:	4640      	mov	r0, r8
 23f46ec:	f7ff fb8f 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
 23f46f0:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
 23f46f2:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
 23f46f4:	4648      	mov	r0, r9
 23f46f6:	f7ff fb8a 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
 23f46fa:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
 23f46fc:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
 23f46fe:	4648      	mov	r0, r9
 23f4700:	f7ff fb85 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
 23f4704:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
 23f4706:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
 23f4708:	4650      	mov	r0, sl
 23f470a:	f7ff fb80 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
 23f470e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
 23f4710:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
 23f4712:	4650      	mov	r0, sl
 23f4714:	f7ff fb7b 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
 23f4718:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
 23f471c:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
 23f471e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23f4720:	459b      	cmp	fp, r3
 23f4722:	f280 80d0 	bge.w	23f48c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
 23f4726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f4728:	425b      	negs	r3, r3
 23f472a:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
 23f472c:	2300      	movs	r3, #0
 23f472e:	9304      	str	r3, [sp, #16]
 23f4730:	9b04      	ldr	r3, [sp, #16]
 23f4732:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23f4734:	4293      	cmp	r3, r2
 23f4736:	f280 80c3 	bge.w	23f48c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 23f473a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f473c:	425b      	negs	r3, r3
 23f473e:	9308      	str	r3, [sp, #32]
 23f4740:	2300      	movs	r3, #0
 23f4742:	9305      	str	r3, [sp, #20]
 23f4744:	9b05      	ldr	r3, [sp, #20]
 23f4746:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 23f4748:	4293      	cmp	r3, r2
 23f474a:	f280 80b1 	bge.w	23f48b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f474e:	2500      	movs	r5, #0
 23f4750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f4752:	429d      	cmp	r5, r3
 23f4754:	f280 80a4 	bge.w	23f48a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x268>
          int32_t acc = 0;
 23f4758:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f475a:	9e09      	ldr	r6, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 23f475c:	9406      	str	r4, [sp, #24]
 23f475e:	9b06      	ldr	r3, [sp, #24]
 23f4760:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f4762:	4293      	cmp	r3, r2
 23f4764:	da3e      	bge.n	23f47e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f4766:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 23f4768:	9f08      	ldr	r7, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f476a:	9307      	str	r3, [sp, #28]
 23f476c:	9b07      	ldr	r3, [sp, #28]
 23f476e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 23f4770:	4293      	cmp	r3, r2
 23f4772:	da31      	bge.n	23f47d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 23f4774:	2f00      	cmp	r7, #0
 23f4776:	db29      	blt.n	23f47cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4778:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23f477a:	42bb      	cmp	r3, r7
 23f477c:	dd26      	ble.n	23f47cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f477e:	2e00      	cmp	r6, #0
 23f4780:	db24      	blt.n	23f47cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4782:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23f4784:	42b3      	cmp	r3, r6
 23f4786:	dd21      	ble.n	23f47cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4788:	2300      	movs	r3, #0
 23f478a:	9303      	str	r3, [sp, #12]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 23f478c:	9b03      	ldr	r3, [sp, #12]
 23f478e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f4790:	4293      	cmp	r3, r2
 23f4792:	da1b      	bge.n	23f47cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 23f4794:	4632      	mov	r2, r6
 23f4796:	4659      	mov	r1, fp
 23f4798:	9300      	str	r3, [sp, #0]
 23f479a:	4640      	mov	r0, r8
 23f479c:	463b      	mov	r3, r7
 23f479e:	f7ff fb57 	bl	23f3e50 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
 23f47a2:	9b03      	ldr	r3, [sp, #12]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 23f47a4:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
 23f47a6:	9300      	str	r3, [sp, #0]
 23f47a8:	4629      	mov	r1, r5
 23f47aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f47ae:	4648      	mov	r0, r9
 23f47b0:	f7ff fb4e 	bl	23f3e50 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
 23f47b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23f47b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f47b8:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 23f47ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f47bc:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 23f47be:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23f47c0:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
 23f47c2:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 23f47c6:	9b03      	ldr	r3, [sp, #12]
 23f47c8:	3301      	adds	r3, #1
 23f47ca:	e7de      	b.n	23f478a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f47cc:	9b07      	ldr	r3, [sp, #28]
 23f47ce:	3301      	adds	r3, #1
 23f47d0:	9307      	str	r3, [sp, #28]
 23f47d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f47d4:	441f      	add	r7, r3
 23f47d6:	e7c9      	b.n	23f476c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x134>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 23f47d8:	9b06      	ldr	r3, [sp, #24]
 23f47da:	3301      	adds	r3, #1
 23f47dc:	9306      	str	r3, [sp, #24]
 23f47de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f47e0:	441e      	add	r6, r3
 23f47e2:	e7bc      	b.n	23f475e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
              }
            }
          }

          if (bias_data) {
 23f47e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23f47e6:	b113      	cbz	r3, 23f47ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
 23f47e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 23f47ec:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
 23f47ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23f47f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23f47f2:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 23f47f6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 23f47fa:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
 23f47fe:	2e00      	cmp	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 23f4800:	fa04 f402 	lsl.w	r4, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
 23f4804:	bfcc      	ite	gt
 23f4806:	2600      	movgt	r6, #0
 23f4808:	4276      	negle	r6, r6
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 23f480a:	42a3      	cmp	r3, r4
 23f480c:	d122      	bne.n	23f4854 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
 23f480e:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 23f4812:	4250      	negs	r0, r2
 23f4814:	4150      	adcs	r0, r2
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
 23f4816:	fb84 4203 	smull	r4, r2, r4, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 23f481a:	4b2c      	ldr	r3, [pc, #176]	; (23f48cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>)
 23f481c:	2a00      	cmp	r2, #0
 23f481e:	bfac      	ite	ge
 23f4820:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 23f4824:	4619      	movlt	r1, r3
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 23f4826:	b9b8      	cbnz	r0, 23f4858 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 23f4828:	190b      	adds	r3, r1, r4
 23f482a:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
 23f482e:	2c00      	cmp	r4, #0
 23f4830:	da04      	bge.n	23f483c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x204>
 23f4832:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23f4836:	189b      	adds	r3, r3, r2
 23f4838:	f144 0400 	adc.w	r4, r4, #0
 23f483c:	0fdb      	lsrs	r3, r3, #31
 23f483e:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
 23f4842:	2e1f      	cmp	r6, #31
 23f4844:	dd0b      	ble.n	23f485e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x226>
 23f4846:	f240 1167 	movw	r1, #359	; 0x167
 23f484a:	4b21      	ldr	r3, [pc, #132]	; (23f48d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x298>)
 23f484c:	4a21      	ldr	r2, [pc, #132]	; (23f48d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29c>)
 23f484e:	4822      	ldr	r0, [pc, #136]	; (23f48d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>)
 23f4850:	f002 fdfe 	bl	23f7450 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 23f4854:	2000      	movs	r0, #0
 23f4856:	e7de      	b.n	23f4816 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
 23f4858:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23f485c:	e7f1      	b.n	23f4842 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 23f485e:	2701      	movs	r7, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 23f4860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23f4864:	40b7      	lsls	r7, r6
 23f4866:	3f01      	subs	r7, #1
 23f4868:	9500      	str	r5, [sp, #0]
 23f486a:	4659      	mov	r1, fp
 23f486c:	4650      	mov	r0, sl
 23f486e:	f7ff faef 	bl	23f3e50 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return a & b;
 23f4872:	ea07 0304 	and.w	r3, r7, r4
  return a >> offset;
 23f4876:	107f      	asrs	r7, r7, #1
  return a + b;
 23f4878:	eb07 77d4 	add.w	r7, r7, r4, lsr #31
  return a >> offset;
 23f487c:	4134      	asrs	r4, r6
  return a + b;
 23f487e:	42bb      	cmp	r3, r7
 23f4880:	bfc8      	it	gt
 23f4882:	3401      	addgt	r4, #1
          acc += output_offset;
 23f4884:	9b15      	ldr	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f4886:	3501      	adds	r5, #1
          acc += output_offset;
 23f4888:	441c      	add	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 23f488a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f488c:	429c      	cmp	r4, r3
 23f488e:	bfb8      	it	lt
 23f4890:	461c      	movlt	r4, r3
 23f4892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f4894:	429c      	cmp	r4, r3
 23f4896:	bfa8      	it	ge
 23f4898:	461c      	movge	r4, r3
 23f489a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 23f489c:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f489e:	e757      	b.n	23f4750 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x118>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 23f48a0:	9b05      	ldr	r3, [sp, #20]
 23f48a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23f48a4:	3301      	adds	r3, #1
 23f48a6:	9305      	str	r3, [sp, #20]
 23f48a8:	9b08      	ldr	r3, [sp, #32]
 23f48aa:	4413      	add	r3, r2
 23f48ac:	9308      	str	r3, [sp, #32]
 23f48ae:	e749      	b.n	23f4744 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 23f48b0:	9b04      	ldr	r3, [sp, #16]
 23f48b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f48b4:	3301      	adds	r3, #1
 23f48b6:	9304      	str	r3, [sp, #16]
 23f48b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f48ba:	4413      	add	r3, r2
 23f48bc:	9309      	str	r3, [sp, #36]	; 0x24
 23f48be:	e737      	b.n	23f4730 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
 23f48c0:	f10b 0b01 	add.w	fp, fp, #1
 23f48c4:	e72b      	b.n	23f471e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 23f48c6:	b021      	add	sp, #132	; 0x84
 23f48c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f48cc:	c0000001 	.word	0xc0000001
 23f48d0:	023ff1ca 	.word	0x023ff1ca
 23f48d4:	023ff1d9 	.word	0x023ff1d9
 23f48d8:	023ff233 	.word	0x023ff233

023f48dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>:
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel(
 23f48dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f48e0:	4617      	mov	r7, r2
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 23f48e2:	694a      	ldr	r2, [r1, #20]
TfLiteStatus EvalQuantizedPerChannel(
 23f48e4:	469b      	mov	fp, r3
  conv_params.dilation.w = params.dilation_width_factor;
 23f48e6:	690b      	ldr	r3, [r1, #16]
TfLiteStatus EvalQuantizedPerChannel(
 23f48e8:	b0e1      	sub	sp, #388	; 0x184
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 23f48ea:	2a01      	cmp	r2, #1
TfLiteStatus EvalQuantizedPerChannel(
 23f48ec:	4682      	mov	sl, r0
 23f48ee:	e9dd 856a 	ldrd	r8, r5, [sp, #424]	; 0x1a8
 23f48f2:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  conv_params.dilation.h = params.dilation_height_factor;
 23f48f4:	924f      	str	r2, [sp, #316]	; 0x13c
  conv_params.dilation.w = params.dilation_width_factor;
 23f48f6:	934e      	str	r3, [sp, #312]	; 0x138
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 23f48f8:	ae30      	add	r6, sp, #192	; 0xc0
 23f48fa:	f040 80bd 	bne.w	23f4a78 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
 23f48fe:	2b01      	cmp	r3, #1
 23f4900:	f040 80ba 	bne.w	23f4a78 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f4904:	693b      	ldr	r3, [r7, #16]
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4906:	a81e      	add	r0, sp, #120	; 0x78
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f4908:	425b      	negs	r3, r3
 23f490a:	9348      	str	r3, [sp, #288]	; 0x120
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 23f490c:	69bb      	ldr	r3, [r7, #24]
 23f490e:	9349      	str	r3, [sp, #292]	; 0x124
    conv_params.stride.h = params.stride_height;
 23f4910:	688b      	ldr	r3, [r1, #8]
 23f4912:	934b      	str	r3, [sp, #300]	; 0x12c
    conv_params.stride.w = params.stride_width;
 23f4914:	684b      	ldr	r3, [r1, #4]
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4916:	4641      	mov	r1, r8
    conv_params.stride.w = params.stride_width;
 23f4918:	934a      	str	r3, [sp, #296]	; 0x128
    conv_params.padding.h = data.reference_op_data.padding.height;
 23f491a:	687b      	ldr	r3, [r7, #4]
 23f491c:	934d      	str	r3, [sp, #308]	; 0x134
    conv_params.padding.w = data.reference_op_data.padding.width;
 23f491e:	683b      	ldr	r3, [r7, #0]
 23f4920:	934c      	str	r3, [sp, #304]	; 0x130
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 23f4922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 23f4924:	9350      	str	r3, [sp, #320]	; 0x140
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 23f4926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 23f4928:	9351      	str	r3, [sp, #324]	; 0x144
    quant_params.multiplier = const_cast<int32_t*>(
 23f492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 23f492c:	930a      	str	r3, [sp, #40]	; 0x28
    quant_params.shift =
 23f492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 23f4930:	930b      	str	r3, [sp, #44]	; 0x2c
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4932:	f000 fe19 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f4936:	4659      	mov	r1, fp
 23f4938:	a824      	add	r0, sp, #144	; 0x90
 23f493a:	f000 fe15 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f493e:	4621      	mov	r1, r4
 23f4940:	a82a      	add	r0, sp, #168	; 0xa8
 23f4942:	f000 fe11 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 23f4946:	4629      	mov	r1, r5
 23f4948:	4630      	mov	r0, r6
 23f494a:	f000 fe0d 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 23f494e:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
 23f4952:	429a      	cmp	r2, r3
 23f4954:	dd01      	ble.n	23f495a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7e>
 23f4956:	f002 fd51 	bl	23f73fc <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f495a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f495c:	2b04      	cmp	r3, #4
 23f495e:	d1fa      	bne.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 23f4960:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23f4962:	2b04      	cmp	r3, #4
 23f4964:	d1f7      	bne.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f4966:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f4968:	2b04      	cmp	r3, #4
 23f496a:	d1f4      	bne.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 23f496c:	2300      	movs	r3, #0
 23f496e:	aa2a      	add	r2, sp, #168	; 0xa8
 23f4970:	4619      	mov	r1, r3
 23f4972:	a824      	add	r0, sp, #144	; 0x90
 23f4974:	f7ff fa9c 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4978:	2303      	movs	r3, #3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 23f497a:	9008      	str	r0, [sp, #32]
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f497c:	4619      	mov	r1, r3
 23f497e:	aa1e      	add	r2, sp, #120	; 0x78
 23f4980:	a824      	add	r0, sp, #144	; 0x90
 23f4982:	f7ff fa95 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f4986:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4988:	9009      	str	r0, [sp, #36]	; 0x24
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f498a:	2100      	movs	r1, #0
 23f498c:	aa2a      	add	r2, sp, #168	; 0xa8
 23f498e:	a81e      	add	r0, sp, #120	; 0x78
 23f4990:	f7ff fa8e 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f4994:	4681      	mov	r9, r0
  TFLITE_DCHECK(tensor != nullptr);
 23f4996:	2d00      	cmp	r5, #0
 23f4998:	d0dd      	beq.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 23f499a:	682b      	ldr	r3, [r5, #0]
 23f499c:	b123      	cbz	r3, 23f49a8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0xcc>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 23f499e:	4630      	mov	r0, r6
 23f49a0:	f7ff fa46 	bl	23f3e30 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 23f49a4:	4581      	cmp	r9, r0
 23f49a6:	d1d6      	bne.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 23f49a8:	9b08      	ldr	r3, [sp, #32]
    input_dims.h = input_shape.Dims(1);
 23f49aa:	2101      	movs	r1, #1
 23f49ac:	a824      	add	r0, sp, #144	; 0x90
    input_dims.n = batch_size;
 23f49ae:	930e      	str	r3, [sp, #56]	; 0x38
    input_dims.h = input_shape.Dims(1);
 23f49b0:	f7ff fa2d 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
 23f49b4:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
 23f49b6:	900f      	str	r0, [sp, #60]	; 0x3c
    input_dims.w = input_shape.Dims(2);
 23f49b8:	a824      	add	r0, sp, #144	; 0x90
 23f49ba:	f7ff fa28 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
 23f49be:	9b09      	ldr	r3, [sp, #36]	; 0x24

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
    filter_dims.h = filter_shape.Dims(1);
 23f49c0:	2101      	movs	r1, #1
    input_dims.w = input_shape.Dims(2);
 23f49c2:	9010      	str	r0, [sp, #64]	; 0x40
    filter_dims.h = filter_shape.Dims(1);
 23f49c4:	a81e      	add	r0, sp, #120	; 0x78
    input_dims.c = input_depth;
 23f49c6:	9311      	str	r3, [sp, #68]	; 0x44
    filter_dims.n = output_depth;
 23f49c8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    filter_dims.h = filter_shape.Dims(1);
 23f49cc:	f7ff fa1f 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
 23f49d0:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
 23f49d2:	9013      	str	r0, [sp, #76]	; 0x4c
    filter_dims.w = filter_shape.Dims(2);
 23f49d4:	a81e      	add	r0, sp, #120	; 0x78
 23f49d6:	f7ff fa1a 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 23f49da:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
 23f49dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    filter_dims.w = filter_shape.Dims(2);
 23f49de:	9014      	str	r0, [sp, #80]	; 0x50
    filter_dims.c = input_depth;
 23f49e0:	9315      	str	r3, [sp, #84]	; 0x54
    bias_dims.w = 1;
    bias_dims.c = output_depth;

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 23f49e2:	9b08      	ldr	r3, [sp, #32]
    output_dims.h = output_shape.Dims(1);
 23f49e4:	a82a      	add	r0, sp, #168	; 0xa8
    output_dims.n = batch_size;
 23f49e6:	931a      	str	r3, [sp, #104]	; 0x68
    bias_dims.h = 1;
 23f49e8:	e9cd 1116 	strd	r1, r1, [sp, #88]	; 0x58
    bias_dims.c = output_depth;
 23f49ec:	e9cd 1918 	strd	r1, r9, [sp, #96]	; 0x60
    output_dims.h = output_shape.Dims(1);
 23f49f0:	f7ff fa0d 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
 23f49f4:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
 23f49f6:	901b      	str	r0, [sp, #108]	; 0x6c
    output_dims.w = output_shape.Dims(2);
 23f49f8:	a82a      	add	r0, sp, #168	; 0xa8
 23f49fa:	f7ff fa08 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.c = output_depth;

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 23f49fe:	2300      	movs	r3, #0
    ctx.size = 0;

    if (data.buffer_idx > -1) {
 23f4a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
    filter_dims.n = output_depth;
 23f4a02:	ae12      	add	r6, sp, #72	; 0x48
    if (data.buffer_idx > -1) {
 23f4a04:	4299      	cmp	r1, r3
    output_dims.c = output_depth;
 23f4a06:	e9cd 091c 	strd	r0, r9, [sp, #112]	; 0x70
    ctx.size = 0;
 23f4a0a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    if (data.buffer_idx > -1) {
 23f4a0e:	db04      	blt.n	23f4a1a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x13e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f4a10:	4650      	mov	r0, sl
 23f4a12:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 23f4a16:	4798      	blx	r3
 23f4a18:	900c      	str	r0, [sp, #48]	; 0x30
 23f4a1a:	f1bb 0f00 	cmp.w	fp, #0
 23f4a1e:	d09a      	beq.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4a20:	f8db 3000 	ldr.w	r3, [fp]
  TFLITE_DCHECK(tensor != nullptr);
 23f4a24:	f1b8 0f00 	cmp.w	r8, #0
 23f4a28:	d095      	beq.n	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4a2a:	f8d8 2000 	ldr.w	r2, [r8]
 23f4a2e:	6829      	ldr	r1, [r5, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f4a30:	b104      	cbz	r4, 23f4a34 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x158>
 23f4a32:	6824      	ldr	r4, [r4, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 23f4a34:	a81a      	add	r0, sp, #104	; 0x68
 23f4a36:	e9cd 1004 	strd	r1, r0, [sp, #16]
 23f4a3a:	a916      	add	r1, sp, #88	; 0x58
 23f4a3c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 23f4a40:	e9cd 3600 	strd	r3, r6, [sp]
 23f4a44:	9406      	str	r4, [sp, #24]
 23f4a46:	ab0e      	add	r3, sp, #56	; 0x38
 23f4a48:	aa0a      	add	r2, sp, #40	; 0x28
 23f4a4a:	a948      	add	r1, sp, #288	; 0x120
 23f4a4c:	a80c      	add	r0, sp, #48	; 0x30
 23f4a4e:	f7fa f9df 	bl	23eee10 <arm_convolve_wrapper_s8>
 23f4a52:	2800      	cmp	r0, #0
 23f4a54:	f47f af7f 	bne.w	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 23f4a58:	a830      	add	r0, sp, #192	; 0xc0
 23f4a5a:	f7ff f9cd 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f4a5e:	a82a      	add	r0, sp, #168	; 0xa8
 23f4a60:	f7ff f9ca 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f4a64:	a824      	add	r0, sp, #144	; 0x90
 23f4a66:	f7ff f9c7 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4a6a:	a81e      	add	r0, sp, #120	; 0x78
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
        data.reference_op_data.per_channel_output_multiplier,
        data.reference_op_data.per_channel_output_shift,
        tflite::micro::GetTensorShape(input),
 23f4a6c:	f7ff f9c4 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
 23f4a70:	2000      	movs	r0, #0
 23f4a72:	b061      	add	sp, #388	; 0x184
 23f4a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ConvParamsQuantized(params, data.reference_op_data),
 23f4a78:	a852      	add	r0, sp, #328	; 0x148
 23f4a7a:	463a      	mov	r2, r7
 23f4a7c:	f000 fa64 	bl	23f4f48 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_shift,
 23f4a80:	e9d7 9a09 	ldrd	r9, sl, [r7, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
 23f4a84:	4659      	mov	r1, fp
 23f4a86:	a842      	add	r0, sp, #264	; 0x108
 23f4a88:	f000 fd6e 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f4a8c:	f1bb 0f00 	cmp.w	fp, #0
 23f4a90:	f43f af61 	beq.w	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4a94:	f8db 3000 	ldr.w	r3, [fp]
        tflite::micro::GetTensorShape(filter),
 23f4a98:	af3c      	add	r7, sp, #240	; 0xf0
 23f4a9a:	4641      	mov	r1, r8
 23f4a9c:	4638      	mov	r0, r7
 23f4a9e:	9308      	str	r3, [sp, #32]
 23f4aa0:	f000 fd62 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f4aa4:	f1b8 0f00 	cmp.w	r8, #0
 23f4aa8:	f43f af55 	beq.w	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4aac:	f8d8 b000 	ldr.w	fp, [r8]
        tflite::micro::GetTensorShape(bias),
 23f4ab0:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 23f4ab4:	4629      	mov	r1, r5
 23f4ab6:	4640      	mov	r0, r8
 23f4ab8:	f000 fd56 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f4abc:	2d00      	cmp	r5, #0
 23f4abe:	f43f af4a 	beq.w	23f4956 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
        tflite::micro::GetTensorShape(output),
 23f4ac2:	4621      	mov	r1, r4
 23f4ac4:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4ac6:	682d      	ldr	r5, [r5, #0]
 23f4ac8:	f000 fd4e 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f4acc:	b104      	cbz	r4, 23f4ad0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x1f4>
 23f4ace:	6824      	ldr	r4, [r4, #0]
    reference_integer_ops::ConvPerChannel(
 23f4ad0:	9b08      	ldr	r3, [sp, #32]
 23f4ad2:	4652      	mov	r2, sl
 23f4ad4:	4649      	mov	r1, r9
 23f4ad6:	9300      	str	r3, [sp, #0]
 23f4ad8:	a852      	add	r0, sp, #328	; 0x148
 23f4ada:	ab42      	add	r3, sp, #264	; 0x108
 23f4adc:	e9cd 6405 	strd	r6, r4, [sp, #20]
 23f4ae0:	e9cd 8503 	strd	r8, r5, [sp, #12]
 23f4ae4:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 23f4ae8:	f7ff fda6 	bl	23f4638 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 23f4aec:	4630      	mov	r0, r6
 23f4aee:	f7ff f983 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 23f4af2:	4640      	mov	r0, r8
 23f4af4:	f7ff f980 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 23f4af8:	4638      	mov	r0, r7
 23f4afa:	f7ff f97d 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 23f4afe:	a842      	add	r0, sp, #264	; 0x108
 23f4b00:	e7b4      	b.n	23f4a6c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x190>
	...

023f4b04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f4b08:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4b0a:	4604      	mov	r4, r0
 23f4b0c:	460d      	mov	r5, r1
 23f4b0e:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK(node->user_data != nullptr);
 23f4b10:	b90e      	cbnz	r6, 23f4b16 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f4b12:	f002 fc73 	bl	23f73fc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f4b16:	f8d1 8014 	ldr.w	r8, [r1, #20]
 23f4b1a:	f1b8 0f00 	cmp.w	r8, #0
 23f4b1e:	d0f8      	beq.n	23f4b12 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f4b20:	4b5f      	ldr	r3, [pc, #380]	; (23f4ca0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
 23f4b22:	681a      	ldr	r2, [r3, #0]
 23f4b24:	f000 fed0 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f4b28:	4607      	mov	r7, r0
 23f4b2a:	b960      	cbnz	r0, 23f4b46 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 23f4b2c:	4b5d      	ldr	r3, [pc, #372]	; (23f4ca4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
 23f4b2e:	6925      	ldr	r5, [r4, #16]
 23f4b30:	9300      	str	r3, [sp, #0]
 23f4b32:	233d      	movs	r3, #61	; 0x3d
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4b34:	4620      	mov	r0, r4
 23f4b36:	4a5c      	ldr	r2, [pc, #368]	; (23f4ca8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
 23f4b38:	495c      	ldr	r1, [pc, #368]	; (23f4cac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
 23f4b3a:	47a8      	blx	r5
 23f4b3c:	2501      	movs	r5, #1
}
 23f4b3e:	4628      	mov	r0, r5
 23f4b40:	b02d      	add	sp, #180	; 0xb4
 23f4b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 23f4b46:	4b5a      	ldr	r3, [pc, #360]	; (23f4cb0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
 23f4b48:	4629      	mov	r1, r5
 23f4b4a:	4620      	mov	r0, r4
 23f4b4c:	681a      	ldr	r2, [r3, #0]
 23f4b4e:	f000 febb 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4b52:	4682      	mov	sl, r0
 23f4b54:	b920      	cbnz	r0, 23f4b60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 23f4b56:	4b57      	ldr	r3, [pc, #348]	; (23f4cb4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
 23f4b58:	6925      	ldr	r5, [r4, #16]
 23f4b5a:	9300      	str	r3, [sp, #0]
 23f4b5c:	233f      	movs	r3, #63	; 0x3f
 23f4b5e:	e7e9      	b.n	23f4b34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f4b60:	4b55      	ldr	r3, [pc, #340]	; (23f4cb8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
 23f4b62:	4629      	mov	r1, r5
 23f4b64:	4620      	mov	r0, r4
 23f4b66:	681a      	ldr	r2, [r3, #0]
 23f4b68:	f000 feb1 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f4b6c:	4681      	mov	r9, r0
 23f4b6e:	b920      	cbnz	r0, 23f4b7a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
 23f4b70:	4b52      	ldr	r3, [pc, #328]	; (23f4cbc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
 23f4b72:	6925      	ldr	r5, [r4, #16]
 23f4b74:	9300      	str	r3, [sp, #0]
 23f4b76:	2341      	movs	r3, #65	; 0x41
 23f4b78:	e7dc      	b.n	23f4b34 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
 23f4b7a:	4639      	mov	r1, r7
 23f4b7c:	a816      	add	r0, sp, #88	; 0x58
 23f4b7e:	f7ff f9a6 	bl	23f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 23f4b82:	4649      	mov	r1, r9
 23f4b84:	a81c      	add	r0, sp, #112	; 0x70
 23f4b86:	f7ff f9a2 	bl	23f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f4b8a:	2300      	movs	r3, #0
 23f4b8c:	aa1c      	add	r2, sp, #112	; 0x70
 23f4b8e:	4619      	mov	r1, r3
 23f4b90:	a816      	add	r0, sp, #88	; 0x58
 23f4b92:	f7ff f98d 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
 23f4b96:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f4b98:	4683      	mov	fp, r0
  input_dims.h = input->dims->data[1];
 23f4b9a:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
 23f4b9c:	68db      	ldr	r3, [r3, #12]
  input_dims.c = input_shape.Dims(3);
 23f4b9e:	2103      	movs	r1, #3
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f4ba0:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.c = input_shape.Dims(3);
 23f4ba2:	a816      	add	r0, sp, #88	; 0x58
  input_dims.h = input->dims->data[1];
 23f4ba4:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.w = input->dims->data[2];
 23f4ba6:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
 23f4ba8:	f7ff f931 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
 23f4bac:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
 23f4bae:	900d      	str	r0, [sp, #52]	; 0x34
 23f4bb0:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
 23f4bb2:	a81c      	add	r0, sp, #112	; 0x70
 23f4bb4:	f7ff f92b 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
 23f4bb8:	f8da 2008 	ldr.w	r2, [sl, #8]
  filter_dims.c = input_dims.c;
 23f4bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
 23f4bbe:	6891      	ldr	r1, [r2, #8]
  filter_dims.w = filter->dims->data[2];
 23f4bc0:	68d2      	ldr	r2, [r2, #12]
  output_dims.n = input_dims.n;
 23f4bc2:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  filter_dims.w = filter->dims->data[2];
 23f4bc6:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.h = output->dims->data[1];
 23f4bc8:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.n = output_shape.Dims(3);
 23f4bcc:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 23f4bce:	689a      	ldr	r2, [r3, #8]
  output_dims.w = output->dims->data[2];
 23f4bd0:	68db      	ldr	r3, [r3, #12]
  filter_dims.h = filter->dims->data[1];
 23f4bd2:	910f      	str	r1, [sp, #60]	; 0x3c
  output_dims.c = output_shape.Dims(3);
 23f4bd4:	a81c      	add	r0, sp, #112	; 0x70
 23f4bd6:	2103      	movs	r1, #3
  output_dims.h = output->dims->data[1];
 23f4bd8:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.w = output->dims->data[2];
 23f4bda:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
 23f4bdc:	f7ff f917 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f4be0:	4a37      	ldr	r2, [pc, #220]	; (23f4cc0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
 23f4be2:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f4be4:	6812      	ldr	r2, [r2, #0]
 23f4be6:	f8da 3008 	ldr.w	r3, [sl, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f4bea:	4620      	mov	r0, r4
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f4bec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f4bf0:	6859      	ldr	r1, [r3, #4]
 23f4bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f4bf4:	0089      	lsls	r1, r1, #2
 23f4bf6:	9109      	str	r1, [sp, #36]	; 0x24
 23f4bf8:	4798      	blx	r3
  data->reference_op_data.per_channel_output_multiplier =
 23f4bfa:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f4bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f4bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f4c00:	4620      	mov	r0, r4
 23f4c02:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
 23f4c04:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 23f4c06:	9606      	str	r6, [sp, #24]
 23f4c08:	783b      	ldrb	r3, [r7, #0]
 23f4c0a:	4629      	mov	r1, r5
 23f4c0c:	9305      	str	r3, [sp, #20]
 23f4c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f4c10:	4642      	mov	r2, r8
 23f4c12:	9304      	str	r3, [sp, #16]
 23f4c14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f4c16:	4620      	mov	r0, r4
 23f4c18:	9303      	str	r3, [sp, #12]
 23f4c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f4c1c:	9302      	str	r3, [sp, #8]
 23f4c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f4c20:	9301      	str	r3, [sp, #4]
 23f4c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f4c24:	9300      	str	r3, [sp, #0]
 23f4c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f4c28:	f000 f9b6 	bl	23f4f98 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 23f4c2c:	4605      	mov	r5, r0
 23f4c2e:	2800      	cmp	r0, #0
 23f4c30:	d12a      	bne.n	23f4c88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
  if (input->type == kTfLiteInt8) {
 23f4c32:	783b      	ldrb	r3, [r7, #0]
 23f4c34:	2b09      	cmp	r3, #9
 23f4c36:	d12e      	bne.n	23f4c96 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    conv_params.input_offset = -input->params.zero_point;
 23f4c38:	693b      	ldr	r3, [r7, #16]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4c3a:	a90a      	add	r1, sp, #40	; 0x28
    conv_params.input_offset = -input->params.zero_point;
 23f4c3c:	425b      	negs	r3, r3
 23f4c3e:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
 23f4c40:	f8d9 3010 	ldr.w	r3, [r9, #16]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4c44:	aa0e      	add	r2, sp, #56	; 0x38
    conv_params.output_offset = output->params.zero_point;
 23f4c46:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
 23f4c48:	f8d8 3008 	ldr.w	r3, [r8, #8]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4c4c:	a822      	add	r0, sp, #136	; 0x88
    conv_params.stride.h = params.stride_height;
 23f4c4e:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
 23f4c50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f4c54:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
 23f4c56:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f4c5a:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
 23f4c5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f4c60:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
 23f4c62:	6873      	ldr	r3, [r6, #4]
 23f4c64:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
 23f4c66:	6833      	ldr	r3, [r6, #0]
 23f4c68:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 23f4c6a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 23f4c6c:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 23f4c6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 23f4c70:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4c72:	ab12      	add	r3, sp, #72	; 0x48
 23f4c74:	f7fa f928 	bl	23eeec8 <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
 23f4c78:	1e01      	subs	r1, r0, #0
 23f4c7a:	dd0c      	ble.n	23f4c96 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f4c7c:	4620      	mov	r0, r4
 23f4c7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f4c80:	f106 0234 	add.w	r2, r6, #52	; 0x34
 23f4c84:	4798      	blx	r3
 23f4c86:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
 23f4c88:	a81c      	add	r0, sp, #112	; 0x70
 23f4c8a:	f7ff f8b5 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 23f4c8e:	a816      	add	r0, sp, #88	; 0x58
 23f4c90:	f7ff f8b2 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f4c94:	e753      	b.n	23f4b3e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
 23f4c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f4c9a:	6373      	str	r3, [r6, #52]	; 0x34
 23f4c9c:	e7f4      	b.n	23f4c88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
 23f4c9e:	bf00      	nop
 23f4ca0:	023ff3e4 	.word	0x023ff3e4
 23f4ca4:	023fefed 	.word	0x023fefed
 23f4ca8:	023ff2b1 	.word	0x023ff2b1
 23f4cac:	023fefd6 	.word	0x023fefd6
 23f4cb0:	023ff3ec 	.word	0x023ff3ec
 23f4cb4:	023feffe 	.word	0x023feffe
 23f4cb8:	023ff3e8 	.word	0x023ff3e8
 23f4cbc:	023ff010 	.word	0x023ff010
 23f4cc0:	023ff3f0 	.word	0x023ff3f0

023f4cc4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f4cc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 23f4cc8:	4b36      	ldr	r3, [pc, #216]	; (23f4da4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f4cca:	460d      	mov	r5, r1
  return GetMutableEvalInput(context, node, index);
 23f4ccc:	681a      	ldr	r2, [r3, #0]
 23f4cce:	4604      	mov	r4, r0
 23f4cd0:	f7ff f8e0 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 23f4cd4:	4b34      	ldr	r3, [pc, #208]	; (23f4da8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
 23f4cd6:	4606      	mov	r6, r0
 23f4cd8:	681a      	ldr	r2, [r3, #0]
 23f4cda:	4629      	mov	r1, r5
 23f4cdc:	4620      	mov	r0, r4
 23f4cde:	f7ff f8d9 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f4ce2:	682b      	ldr	r3, [r5, #0]
 23f4ce4:	4607      	mov	r7, r0
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 23f4ce6:	681b      	ldr	r3, [r3, #0]
 23f4ce8:	2b03      	cmp	r3, #3
 23f4cea:	d109      	bne.n	23f4d00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
 23f4cec:	4b2f      	ldr	r3, [pc, #188]	; (23f4dac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
 23f4cee:	4629      	mov	r1, r5
 23f4cf0:	4620      	mov	r0, r4
 23f4cf2:	681a      	ldr	r2, [r3, #0]
 23f4cf4:	f7ff f8ce 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f4cf8:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
 23f4cfa:	b924      	cbnz	r4, 23f4d06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42>
 23f4cfc:	f002 fb7e 	bl	23f73fc <abort>
 23f4d00:	f04f 0800 	mov.w	r8, #0
 23f4d04:	e7f9      	b.n	23f4cfa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f4d06:	4a2a      	ldr	r2, [pc, #168]	; (23f4db0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
 23f4d08:	686b      	ldr	r3, [r5, #4]
 23f4d0a:	6812      	ldr	r2, [r2, #0]
 23f4d0c:	4620      	mov	r0, r4
 23f4d0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f4d12:	6859      	ldr	r1, [r3, #4]
 23f4d14:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23f4d16:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f4d18:	6969      	ldr	r1, [r5, #20]
 23f4d1a:	2900      	cmp	r1, #0
 23f4d1c:	d0ee      	beq.n	23f4cfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 23f4d1e:	692a      	ldr	r2, [r5, #16]
 23f4d20:	2a00      	cmp	r2, #0
 23f4d22:	d0eb      	beq.n	23f4cfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f4d24:	7a35      	ldrb	r5, [r6, #8]
 23f4d26:	7a03      	ldrb	r3, [r0, #8]
 23f4d28:	429d      	cmp	r5, r3
 23f4d2a:	d00e      	beq.n	23f4d4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 23f4d2c:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f4d30:	4b20      	ldr	r3, [pc, #128]	; (23f4db4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 23f4d32:	4620      	mov	r0, r4
 23f4d34:	9301      	str	r3, [sp, #4]
 23f4d36:	4b20      	ldr	r3, [pc, #128]	; (23f4db8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 23f4d38:	6925      	ldr	r5, [r4, #16]
 23f4d3a:	9300      	str	r3, [sp, #0]
 23f4d3c:	4a1f      	ldr	r2, [pc, #124]	; (23f4dbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>)
 23f4d3e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 23f4d42:	491f      	ldr	r1, [pc, #124]	; (23f4dc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>)
 23f4d44:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 23f4d46:	2501      	movs	r5, #1
 23f4d48:	e01e      	b.n	23f4d88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 23f4d4a:	7a3b      	ldrb	r3, [r7, #8]
 23f4d4c:	42ab      	cmp	r3, r5
 23f4d4e:	d004      	beq.n	23f4d5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
 23f4d50:	4620      	mov	r0, r4
 23f4d52:	6923      	ldr	r3, [r4, #16]
 23f4d54:	491b      	ldr	r1, [pc, #108]	; (23f4dc4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 23f4d56:	4798      	blx	r3
 23f4d58:	e7f5      	b.n	23f4d46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
  switch (input->type) {  // Already know in/out types are same.
 23f4d5a:	2d01      	cmp	r5, #1
 23f4d5c:	d00b      	beq.n	23f4d76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
 23f4d5e:	2d09      	cmp	r5, #9
 23f4d60:	d016      	beq.n	23f4d90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4d62:	4628      	mov	r0, r5
 23f4d64:	6927      	ldr	r7, [r4, #16]
 23f4d66:	f7f8 fb71 	bl	23ed44c <TfLiteTypeGetName>
 23f4d6a:	7a33      	ldrb	r3, [r6, #8]
 23f4d6c:	4602      	mov	r2, r0
 23f4d6e:	4916      	ldr	r1, [pc, #88]	; (23f4dc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 23f4d70:	4620      	mov	r0, r4
 23f4d72:	47b8      	blx	r7
 23f4d74:	e7e7      	b.n	23f4d46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4d76:	4628      	mov	r0, r5
 23f4d78:	6927      	ldr	r7, [r4, #16]
 23f4d7a:	f7f8 fb67 	bl	23ed44c <TfLiteTypeGetName>
 23f4d7e:	7a33      	ldrb	r3, [r6, #8]
 23f4d80:	4602      	mov	r2, r0
 23f4d82:	4911      	ldr	r1, [pc, #68]	; (23f4dc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 23f4d84:	4620      	mov	r0, r4
 23f4d86:	47b8      	blx	r7
  }
  return kTfLiteOk;
}
 23f4d88:	4628      	mov	r0, r5
 23f4d8a:	b004      	add	sp, #16
 23f4d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 23f4d90:	e9cd 8001 	strd	r8, r0, [sp, #4]
 23f4d94:	4633      	mov	r3, r6
 23f4d96:	4620      	mov	r0, r4
 23f4d98:	9700      	str	r7, [sp, #0]
 23f4d9a:	f7ff fd9f 	bl	23f48dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>
 23f4d9e:	4605      	mov	r5, r0
                                     bias, output, nullptr);
 23f4da0:	e7f2      	b.n	23f4d88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
 23f4da2:	bf00      	nop
 23f4da4:	023ff3e4 	.word	0x023ff3e4
 23f4da8:	023ff3ec 	.word	0x023ff3ec
 23f4dac:	023ff3e0 	.word	0x023ff3e0
 23f4db0:	023ff3e8 	.word	0x023ff3e8
 23f4db4:	023ff03c 	.word	0x023ff03c
 23f4db8:	023ff049 	.word	0x023ff049
 23f4dbc:	023ff2b1 	.word	0x023ff2b1
 23f4dc0:	023fee87 	.word	0x023fee87
 23f4dc4:	023ff055 	.word	0x023ff055
 23f4dc8:	023ff086 	.word	0x023ff086

023f4dcc <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 23f4dcc:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f4dce:	4604      	mov	r4, r0
TfLiteRegistration Register_CONV_2D() {
 23f4dd0:	4606      	mov	r6, r0
          /*version=*/0};
 23f4dd2:	4d04      	ldr	r5, [pc, #16]	; (23f4de4 <_ZN6tflite16Register_CONV_2DEv+0x18>)
 23f4dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f4dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4dd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f4ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f4de0:	4630      	mov	r0, r6
 23f4de2:	bd70      	pop	{r4, r5, r6, pc}
 23f4de4:	023fb940 	.word	0x023fb940

023f4de8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f4de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4dec:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
 23f4dee:	4604      	mov	r4, r0
 23f4df0:	b093      	sub	sp, #76	; 0x4c
 23f4df2:	b908      	cbnz	r0, 23f4df8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
 23f4df4:	f002 fb02 	bl	23f73fc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f4df8:	2900      	cmp	r1, #0
 23f4dfa:	d0fb      	beq.n	23f4df4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f4dfc:	680a      	ldr	r2, [r1, #0]
 23f4dfe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f4e00:	6851      	ldr	r1, [r2, #4]
 23f4e02:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f4e04:	6872      	ldr	r2, [r6, #4]
 23f4e06:	6d23      	ldr	r3, [r4, #80]	; 0x50
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f4e08:	4605      	mov	r5, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f4e0a:	6851      	ldr	r1, [r2, #4]
 23f4e0c:	4620      	mov	r0, r4
 23f4e0e:	4798      	blx	r3
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f4e10:	6933      	ldr	r3, [r6, #16]
 23f4e12:	4607      	mov	r7, r0
 23f4e14:	2b00      	cmp	r3, #0
 23f4e16:	d0ed      	beq.n	23f4df4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);

  switch (input->type) {
 23f4e18:	7a2e      	ldrb	r6, [r5, #8]
 23f4e1a:	1e72      	subs	r2, r6, #1
 23f4e1c:	2a08      	cmp	r2, #8
 23f4e1e:	d878      	bhi.n	23f4f12 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
 23f4e20:	e8df f002 	tbb	[pc, r2]
 23f4e24:	77697705 	.word	0x77697705
 23f4e28:	77747777 	.word	0x77747777
 23f4e2c:	12          	.byte	0x12
 23f4e2d:	00          	.byte	0x00
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4e2e:	2001      	movs	r0, #1
 23f4e30:	6927      	ldr	r7, [r4, #16]
 23f4e32:	f7f8 fb0b 	bl	23ed44c <TfLiteTypeGetName>
 23f4e36:	7a2b      	ldrb	r3, [r5, #8]
 23f4e38:	4602      	mov	r2, r0
 23f4e3a:	493b      	ldr	r1, [pc, #236]	; (23f4f28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f4e3c:	4620      	mov	r0, r4
 23f4e3e:	47b8      	blx	r7
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
}
 23f4e40:	4630      	mov	r0, r6
 23f4e42:	b013      	add	sp, #76	; 0x4c
 23f4e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (output->type == kTfLiteInt16) {
 23f4e48:	7a02      	ldrb	r2, [r0, #8]
 23f4e4a:	2a07      	cmp	r2, #7
 23f4e4c:	d051      	beq.n	23f4ef2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  const SoftmaxParams data =
 23f4e4e:	e9d3 8202 	ldrd	r8, r2, [r3, #8]

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 23f4e52:	2400      	movs	r4, #0
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f4e54:	4629      	mov	r1, r5
 23f4e56:	a806      	add	r0, sp, #24
  const SoftmaxParams data =
 23f4e58:	f8d3 a018 	ldr.w	sl, [r3, #24]
 23f4e5c:	9205      	str	r2, [sp, #20]
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f4e5e:	f000 fb83 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 23f4e62:	4639      	mov	r1, r7
 23f4e64:	a80c      	add	r0, sp, #48	; 0x30
 23f4e66:	f000 fb7f 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 23f4e6a:	f8dd b018 	ldr.w	fp, [sp, #24]
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 23f4e6e:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
  for (int i = 0; i < dims_count; ++i) {
 23f4e72:	45a3      	cmp	fp, r4
 23f4e74:	dd0e      	ble.n	23f4e94 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    if (i != skip_dim) {
 23f4e76:	42a6      	cmp	r6, r4
 23f4e78:	d00a      	beq.n	23f4e90 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 23f4e7a:	4621      	mov	r1, r4
 23f4e7c:	a806      	add	r0, sp, #24
 23f4e7e:	f7fe ffc6 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f4e82:	4621      	mov	r1, r4
 23f4e84:	4681      	mov	r9, r0
 23f4e86:	a80c      	add	r0, sp, #48	; 0x30
 23f4e88:	f7fe ffc1 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f4e8c:	4581      	cmp	r9, r0
 23f4e8e:	d1b1      	bne.n	23f4df4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  for (int i = 0; i < dims_count; ++i) {
 23f4e90:	3401      	adds	r4, #1
 23f4e92:	e7ee      	b.n	23f4e72 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 23f4e94:	2e00      	cmp	r6, #0
 23f4e96:	dbad      	blt.n	23f4df4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  for (int i = 0; i < dims_count; ++i) {
 23f4e98:	2300      	movs	r3, #0
  int flat_size = 1;
 23f4e9a:	2401      	movs	r4, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f4e9c:	f1bb 0f05 	cmp.w	fp, #5
 23f4ea0:	bfcc      	ite	gt
 23f4ea2:	9907      	ldrgt	r1, [sp, #28]
 23f4ea4:	a907      	addle	r1, sp, #28
  for (int i = 0; i < dims_count; ++i) {
 23f4ea6:	459b      	cmp	fp, r3
 23f4ea8:	d007      	beq.n	23f4eba <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f4eaa:	429e      	cmp	r6, r3
 23f4eac:	bf0c      	ite	eq
 23f4eae:	2201      	moveq	r2, #1
 23f4eb0:	f851 2023 	ldrne.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 23f4eb4:	3301      	adds	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f4eb6:	4354      	muls	r4, r2
  for (int i = 0; i < dims_count; ++i) {
 23f4eb8:	e7f5      	b.n	23f4ea6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f4eba:	4631      	mov	r1, r6
 23f4ebc:	a806      	add	r0, sp, #24
 23f4ebe:	f7fe ffa6 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f4ec2:	4631      	mov	r1, r6
 23f4ec4:	4683      	mov	fp, r0
 23f4ec6:	a80c      	add	r0, sp, #48	; 0x30
 23f4ec8:	f7fe ffa1 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f4ecc:	4583      	cmp	fp, r0
 23f4ece:	d191      	bne.n	23f4df4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 23f4ed0:	683b      	ldr	r3, [r7, #0]
 23f4ed2:	465a      	mov	r2, fp
 23f4ed4:	e9cd a301 	strd	sl, r3, [sp, #4]
 23f4ed8:	9b05      	ldr	r3, [sp, #20]
 23f4eda:	4621      	mov	r1, r4
 23f4edc:	9300      	str	r3, [sp, #0]
 23f4ede:	6828      	ldr	r0, [r5, #0]
 23f4ee0:	4643      	mov	r3, r8
 23f4ee2:	f7f9 f891 	bl	23ee008 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 23f4ee6:	a80c      	add	r0, sp, #48	; 0x30
 23f4ee8:	f7fe ff86 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f4eec:	a806      	add	r0, sp, #24
 23f4eee:	f7fe ff83 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
 23f4ef2:	2600      	movs	r6, #0
 23f4ef4:	e7a4      	b.n	23f4e40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4ef6:	2003      	movs	r0, #3
 23f4ef8:	6926      	ldr	r6, [r4, #16]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4efa:	f7f8 faa7 	bl	23ed44c <TfLiteTypeGetName>
 23f4efe:	7a2b      	ldrb	r3, [r5, #8]
 23f4f00:	4602      	mov	r2, r0
 23f4f02:	4909      	ldr	r1, [pc, #36]	; (23f4f28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f4f04:	4620      	mov	r0, r4
 23f4f06:	47b0      	blx	r6
      return kTfLiteError;
 23f4f08:	2601      	movs	r6, #1
 23f4f0a:	e799      	b.n	23f4e40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4f0c:	2007      	movs	r0, #7
 23f4f0e:	6926      	ldr	r6, [r4, #16]
 23f4f10:	e7f3      	b.n	23f4efa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4f12:	4630      	mov	r0, r6
 23f4f14:	6927      	ldr	r7, [r4, #16]
 23f4f16:	f7f8 fa99 	bl	23ed44c <TfLiteTypeGetName>
 23f4f1a:	7a2b      	ldrb	r3, [r5, #8]
 23f4f1c:	4602      	mov	r2, r0
 23f4f1e:	4902      	ldr	r1, [pc, #8]	; (23f4f28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f4f20:	4620      	mov	r0, r4
 23f4f22:	47b8      	blx	r7
 23f4f24:	e7f0      	b.n	23f4f08 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x120>
 23f4f26:	bf00      	nop
 23f4f28:	023ff086 	.word	0x023ff086

023f4f2c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 23f4f2c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f4f2e:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
 23f4f30:	4606      	mov	r6, r0
          /*version=*/0};
 23f4f32:	4d04      	ldr	r5, [pc, #16]	; (23f4f44 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
 23f4f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f4f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f4f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f4f40:	4630      	mov	r0, r6
 23f4f42:	bd70      	pop	{r4, r5, r6, pc}
 23f4f44:	023fb960 	.word	0x023fb960

023f4f48 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
}

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 23f4f48:	b570      	push	{r4, r5, r6, lr}
 23f4f4a:	4615      	mov	r5, r2
 23f4f4c:	4604      	mov	r4, r0
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 23f4f4e:	6913      	ldr	r3, [r2, #16]
                               const OpDataConv& data) {
 23f4f50:	460e      	mov	r6, r1
  op_params.input_offset = -data.input_zero_point;
 23f4f52:	425b      	negs	r3, r3
 23f4f54:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
 23f4f56:	6953      	ldr	r3, [r2, #20]
 23f4f58:	425b      	negs	r3, r3
 23f4f5a:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
 23f4f5c:	6993      	ldr	r3, [r2, #24]
 23f4f5e:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
 23f4f60:	69d3      	ldr	r3, [r2, #28]
 23f4f62:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
 23f4f64:	6a13      	ldr	r3, [r2, #32]
 23f4f66:	425b      	negs	r3, r3
 23f4f68:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 23f4f6a:	7808      	ldrb	r0, [r1, #0]
 23f4f6c:	f000 fb20 	bl	23f55b0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
 23f4f70:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 23f4f72:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
 23f4f74:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
 23f4f76:	682b      	ldr	r3, [r5, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
 23f4f78:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
 23f4f7a:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
 23f4f7c:	68b3      	ldr	r3, [r6, #8]
 23f4f7e:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
 23f4f80:	6873      	ldr	r3, [r6, #4]
 23f4f82:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 23f4f84:	6973      	ldr	r3, [r6, #20]
 23f4f86:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 23f4f88:	6933      	ldr	r3, [r6, #16]
 23f4f8a:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 23f4f8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23f4f8e:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 23f4f90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23f4f92:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 23f4f94:	bd70      	pop	{r4, r5, r6, pc}
	...

023f4f98 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 23f4f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4f9c:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
 23f4f9e:	680b      	ldr	r3, [r1, #0]
                                 OpDataConv* data) {
 23f4fa0:	b08f      	sub	sp, #60	; 0x3c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f4fa2:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
 23f4fa4:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f4fa6:	3b02      	subs	r3, #2
 23f4fa8:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
 23f4faa:	4688      	mov	r8, r1
 23f4fac:	4617      	mov	r7, r2
 23f4fae:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f4fb0:	d90b      	bls.n	23f4fca <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
 23f4fb2:	4b5d      	ldr	r3, [pc, #372]	; (23f5128 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
 23f4fb4:	4a5d      	ldr	r2, [pc, #372]	; (23f512c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f4fb6:	9300      	str	r3, [sp, #0]
 23f4fb8:	6904      	ldr	r4, [r0, #16]
 23f4fba:	2356      	movs	r3, #86	; 0x56
 23f4fbc:	495c      	ldr	r1, [pc, #368]	; (23f5130 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
 23f4fbe:	47a0      	blx	r4
 23f4fc0:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
 23f4fc2:	4620      	mov	r0, r4
 23f4fc4:	b00f      	add	sp, #60	; 0x3c
 23f4fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 23f4fca:	684b      	ldr	r3, [r1, #4]
 23f4fcc:	681c      	ldr	r4, [r3, #0]
 23f4fce:	2c01      	cmp	r4, #1
 23f4fd0:	d00c      	beq.n	23f4fec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
 23f4fd2:	2601      	movs	r6, #1
 23f4fd4:	4b57      	ldr	r3, [pc, #348]	; (23f5134 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
 23f4fd6:	e9cd 4602 	strd	r4, r6, [sp, #8]
 23f4fda:	9301      	str	r3, [sp, #4]
 23f4fdc:	4b56      	ldr	r3, [pc, #344]	; (23f5138 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
 23f4fde:	4a53      	ldr	r2, [pc, #332]	; (23f512c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f4fe0:	9300      	str	r3, [sp, #0]
 23f4fe2:	6904      	ldr	r4, [r0, #16]
 23f4fe4:	2357      	movs	r3, #87	; 0x57
 23f4fe6:	4955      	ldr	r1, [pc, #340]	; (23f513c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
 23f4fe8:	47a0      	blx	r4
 23f4fea:	e7e9      	b.n	23f4fc0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
 23f4fec:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
 23f4ff0:	930a      	str	r3, [sp, #40]	; 0x28
 23f4ff2:	6953      	ldr	r3, [r2, #20]
  auto padding = params.padding;
 23f4ff4:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 23f4ff8:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
 23f4ffa:	6913      	ldr	r3, [r2, #16]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f4ffc:	4649      	mov	r1, r9
 23f4ffe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23f5000:	930c      	str	r3, [sp, #48]	; 0x30
 23f5002:	9300      	str	r3, [sp, #0]
 23f5004:	4658      	mov	r0, fp
 23f5006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f5008:	f7fe ff91 	bl	23f3f2e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f500c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f500e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f5010:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f5012:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f5014:	9300      	str	r3, [sp, #0]
 23f5016:	4658      	mov	r0, fp
 23f5018:	4653      	mov	r3, sl
 23f501a:	f7fe ff88 	bl	23f3f2e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f501e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23f5020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f5022:	3b01      	subs	r3, #1
 23f5024:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5026:	3801      	subs	r0, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f5028:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f502a:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
 23f502e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f5030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
 23f5032:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f5036:	9b19      	ldr	r3, [sp, #100]	; 0x64
  total_padding = total_padding > 0 ? total_padding : 0;
 23f5038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f503c:	3b01      	subs	r3, #1
 23f503e:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f5042:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5044:	1e50      	subs	r0, r2, #1
 23f5046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f5048:	4641      	mov	r1, r8
 23f504a:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
 23f504e:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 23f5052:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 23f5056:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 23f5058:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
 23f505c:	6032      	str	r2, [r6, #0]
 23f505e:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
 23f5060:	ea4f 026a 	mov.w	r2, sl, asr #1
  *offset = total_padding % 2;
 23f5064:	f00a 0301 	and.w	r3, sl, #1
 23f5068:	6072      	str	r2, [r6, #4]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f506a:	4628      	mov	r0, r5
 23f506c:	2200      	movs	r2, #0
      padding, &out_height, &out_width);
 23f506e:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f5070:	f000 fc2a 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f5074:	4682      	mov	sl, r0
 23f5076:	b940      	cbnz	r0, 23f508a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
 23f5078:	4b31      	ldr	r3, [pc, #196]	; (23f5140 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
 23f507a:	692e      	ldr	r6, [r5, #16]
 23f507c:	9300      	str	r3, [sp, #0]
 23f507e:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
 23f5080:	4628      	mov	r0, r5
 23f5082:	4a2a      	ldr	r2, [pc, #168]	; (23f512c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f5084:	492a      	ldr	r1, [pc, #168]	; (23f5130 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
 23f5086:	47b0      	blx	r6
 23f5088:	e79b      	b.n	23f4fc2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 23f508a:	4622      	mov	r2, r4
 23f508c:	4641      	mov	r1, r8
 23f508e:	4628      	mov	r0, r5
 23f5090:	f000 fc1a 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f5094:	4681      	mov	r9, r0
 23f5096:	b920      	cbnz	r0, 23f50a2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
 23f5098:	4b2a      	ldr	r3, [pc, #168]	; (23f5144 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
 23f509a:	692e      	ldr	r6, [r5, #16]
 23f509c:	9300      	str	r3, [sp, #0]
 23f509e:	2363      	movs	r3, #99	; 0x63
 23f50a0:	e7ee      	b.n	23f5080 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 23f50a2:	4641      	mov	r1, r8
 23f50a4:	2202      	movs	r2, #2
 23f50a6:	4628      	mov	r0, r5
 23f50a8:	f000 fc20 	bl	23f58ec <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f50ac:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 23f50ae:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f50b0:	2200      	movs	r2, #0
 23f50b2:	4628      	mov	r0, r5
 23f50b4:	f000 fc0b 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f50b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f50ba:	4680      	mov	r8, r0
 23f50bc:	b920      	cbnz	r0, 23f50c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
 23f50be:	4b22      	ldr	r3, [pc, #136]	; (23f5148 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
 23f50c0:	692e      	ldr	r6, [r5, #16]
 23f50c2:	9300      	str	r3, [sp, #0]
 23f50c4:	2367      	movs	r3, #103	; 0x67
 23f50c6:	e7db      	b.n	23f5080 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
 23f50c8:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 23f50cc:	2a01      	cmp	r2, #1
 23f50ce:	d10a      	bne.n	23f50e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
 23f50d0:	f8da 3010 	ldr.w	r3, [sl, #16]
  return kTfLiteOk;
 23f50d4:	2400      	movs	r4, #0
  data->input_zero_point = input->params.zero_point;
 23f50d6:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
 23f50d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23f50dc:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
 23f50de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f50e2:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
 23f50e4:	e76d      	b.n	23f4fc2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 23f50e6:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 23f50ea:	370c      	adds	r7, #12
 23f50ec:	6852      	ldr	r2, [r2, #4]
 23f50ee:	4651      	mov	r1, sl
 23f50f0:	9208      	str	r2, [sp, #32]
 23f50f2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 23f50f4:	9207      	str	r2, [sp, #28]
 23f50f6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 23f50f8:	e9cd 0700 	strd	r0, r7, [sp]
 23f50fc:	9206      	str	r2, [sp, #24]
 23f50fe:	f106 0230 	add.w	r2, r6, #48	; 0x30
 23f5102:	9205      	str	r2, [sp, #20]
 23f5104:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 23f5108:	9204      	str	r2, [sp, #16]
 23f510a:	f106 0220 	add.w	r2, r6, #32
 23f510e:	9203      	str	r2, [sp, #12]
 23f5110:	f106 021c 	add.w	r2, r6, #28
 23f5114:	9202      	str	r2, [sp, #8]
 23f5116:	4628      	mov	r0, r5
 23f5118:	464a      	mov	r2, r9
 23f511a:	f000 fcd5 	bl	23f5ac8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 23f511e:	4604      	mov	r4, r0
 23f5120:	2800      	cmp	r0, #0
 23f5122:	d0d5      	beq.n	23f50d0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
 23f5124:	e74d      	b.n	23f4fc2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
 23f5126:	bf00      	nop
 23f5128:	023ff3a8 	.word	0x023ff3a8
 23f512c:	023ff329 	.word	0x023ff329
 23f5130:	023fefd6 	.word	0x023fefd6
 23f5134:	023ff563 	.word	0x023ff563
 23f5138:	023ff3cc 	.word	0x023ff3cc
 23f513c:	023fee87 	.word	0x023fee87
 23f5140:	023fefed 	.word	0x023fefed
 23f5144:	023feffe 	.word	0x023feffe
 23f5148:	023ff010 	.word	0x023ff010

023f514c <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f514c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f514e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f5150:	b90b      	cbnz	r3, 23f5156 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0xa>
 23f5152:	f002 f953 	bl	23f73fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f5156:	2124      	movs	r1, #36	; 0x24
}
 23f5158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f515c:	4718      	bx	r3
	...

023f5160 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
 23f5160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5164:	ed2d 8b02 	vpush	{d8}
 23f5168:	ee08 3a90 	vmov	s17, r3
      params->stride_height, params->stride_width,
 23f516c:	e9d1 8901 	ldrd	r8, r9, [r1, #4]
  return t->dims->data[dim];
 23f5170:	6893      	ldr	r3, [r2, #8]
                             OpData* data) {
 23f5172:	4616      	mov	r6, r2
 23f5174:	68df      	ldr	r7, [r3, #12]
 23f5176:	689a      	ldr	r2, [r3, #8]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 23f5178:	690b      	ldr	r3, [r1, #16]
                             OpData* data) {
 23f517a:	b087      	sub	sp, #28
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 23f517c:	9303      	str	r3, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f517e:	2301      	movs	r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
 23f5180:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 23f5184:	f891 a000 	ldrb.w	sl, [r1]
                             OpData* data) {
 23f5188:	460d      	mov	r5, r1
 23f518a:	9204      	str	r2, [sp, #16]
 23f518c:	4639      	mov	r1, r7
 23f518e:	465a      	mov	r2, fp
 23f5190:	9300      	str	r3, [sp, #0]
 23f5192:	ee08 0a10 	vmov	s16, r0
 23f5196:	4643      	mov	r3, r8
 23f5198:	4650      	mov	r0, sl
 23f519a:	f7fe fec8 	bl	23f3f2e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f519e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 23f51a2:	2301      	movs	r3, #1
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f51a4:	9005      	str	r0, [sp, #20]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f51a6:	9300      	str	r3, [sp, #0]
 23f51a8:	4650      	mov	r0, sl
 23f51aa:	464b      	mov	r3, r9
 23f51ac:	f7fe febf 	bl	23f3f2e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f51b0:	9b03      	ldr	r3, [sp, #12]
 23f51b2:	3801      	subs	r0, #1
 23f51b4:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
 23f51b8:	9b04      	ldr	r3, [sp, #16]
 23f51ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 23f51bc:	eba9 0903 	sub.w	r9, r9, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f51c0:	9b05      	ldr	r3, [sp, #20]
  total_padding = total_padding > 0 ? total_padding : 0;
 23f51c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f51c6:	3b01      	subs	r3, #1
 23f51c8:	fb08 b303 	mla	r3, r8, r3, fp
  int total_padding =
 23f51cc:	1bdb      	subs	r3, r3, r7
  total_padding = total_padding > 0 ? total_padding : 0;
 23f51ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 23f51d2:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 23f51d4:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
 23f51d8:	6022      	str	r2, [r4, #0]
 23f51da:	60a3      	str	r3, [r4, #8]
  return total_padding / 2;
 23f51dc:	ea4f 0269 	mov.w	r2, r9, asr #1
  *offset = total_padding % 2;
 23f51e0:	f009 0301 	and.w	r3, r9, #1
 23f51e4:	6062      	str	r2, [r4, #4]
 23f51e6:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
 23f51e8:	7833      	ldrb	r3, [r6, #0]
 23f51ea:	7d29      	ldrb	r1, [r5, #20]
 23f51ec:	2b01      	cmp	r3, #1
 23f51ee:	d11e      	bne.n	23f522e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xce>
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 23f51f0:	2901      	cmp	r1, #1
 23f51f2:	d103      	bne.n	23f51fc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x9c>
    *activation_min = 0;
 23f51f4:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 23f51f6:	61e3      	str	r3, [r4, #28]
    *activation_max = std::numeric_limits<T>::max();
 23f51f8:	4b16      	ldr	r3, [pc, #88]	; (23f5254 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xf4>)
 23f51fa:	e004      	b.n	23f5206 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
  } else if (activation == kTfLiteActRelu6) {
 23f51fc:	2903      	cmp	r1, #3
 23f51fe:	d10c      	bne.n	23f521a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xba>
    *activation_min = 0;
 23f5200:	2300      	movs	r3, #0
 23f5202:	61e3      	str	r3, [r4, #28]
    *activation_max = 6;
 23f5204:	4b14      	ldr	r3, [pc, #80]	; (23f5258 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xf8>)
 23f5206:	6223      	str	r3, [r4, #32]
  data->buffer_idx = -1;
 23f5208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  return kTfLiteOk;
 23f520c:	2000      	movs	r0, #0
  data->buffer_idx = -1;
 23f520e:	6123      	str	r3, [r4, #16]
}
 23f5210:	b007      	add	sp, #28
 23f5212:	ecbd 8b02 	vpop	{d8}
 23f5216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (activation == kTfLiteActReluN1To1) {
 23f521a:	2902      	cmp	r1, #2
 23f521c:	d104      	bne.n	23f5228 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc8>
    *activation_min = -1;
 23f521e:	4b0f      	ldr	r3, [pc, #60]	; (23f525c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xfc>)
 23f5220:	61e3      	str	r3, [r4, #28]
    *activation_max = 1;
 23f5222:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 23f5226:	e7ee      	b.n	23f5206 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
    *activation_min = std::numeric_limits<T>::lowest();
 23f5228:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 23f522c:	e7e3      	b.n	23f51f6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x96>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f522e:	f104 0318 	add.w	r3, r4, #24
 23f5232:	9300      	str	r3, [sp, #0]
 23f5234:	ee18 2a90 	vmov	r2, s17
 23f5238:	ee18 0a10 	vmov	r0, s16
 23f523c:	f104 0314 	add.w	r3, r4, #20
 23f5240:	f000 fbe0 	bl	23f5a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 23f5244:	2800      	cmp	r0, #0
 23f5246:	d1e3      	bne.n	23f5210 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xb0>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 23f5248:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 23f524c:	429a      	cmp	r2, r3
 23f524e:	dddb      	ble.n	23f5208 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa8>
 23f5250:	f002 f8d4 	bl	23f73fc <abort>
 23f5254:	7f7fffff 	.word	0x7f7fffff
 23f5258:	40c00000 	.word	0x40c00000
 23f525c:	bf800000 	.word	0xbf800000

023f5260 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f5260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f5264:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f5268:	4604      	mov	r4, r0
 23f526a:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 23f526c:	f1b8 0f00 	cmp.w	r8, #0
 23f5270:	d101      	bne.n	23f5276 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 23f5272:	f002 f8c3 	bl	23f73fc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f5276:	694f      	ldr	r7, [r1, #20]
 23f5278:	2f00      	cmp	r7, #0
 23f527a:	d0fa      	beq.n	23f5272 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f527c:	2200      	movs	r2, #0
 23f527e:	f000 fb23 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f5282:	4606      	mov	r6, r0
 23f5284:	b960      	cbnz	r0, 23f52a0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f5286:	4b11      	ldr	r3, [pc, #68]	; (23f52cc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
 23f5288:	6925      	ldr	r5, [r4, #16]
 23f528a:	9300      	str	r3, [sp, #0]
 23f528c:	f44f 738e 	mov.w	r3, #284	; 0x11c
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 23f5290:	4620      	mov	r0, r4
 23f5292:	4a0f      	ldr	r2, [pc, #60]	; (23f52d0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
 23f5294:	490f      	ldr	r1, [pc, #60]	; (23f52d4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
 23f5296:	47a8      	blx	r5
 23f5298:	2001      	movs	r0, #1

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));

  return kTfLiteOk;
}
 23f529a:	b002      	add	sp, #8
 23f529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f52a0:	2200      	movs	r2, #0
 23f52a2:	4629      	mov	r1, r5
 23f52a4:	4620      	mov	r0, r4
 23f52a6:	f000 fb12 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f52aa:	4603      	mov	r3, r0
 23f52ac:	b928      	cbnz	r0, 23f52ba <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 23f52ae:	4b0a      	ldr	r3, [pc, #40]	; (23f52d8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 23f52b0:	6925      	ldr	r5, [r4, #16]
 23f52b2:	9300      	str	r3, [sp, #0]
 23f52b4:	f44f 738f 	mov.w	r3, #286	; 0x11e
 23f52b8:	e7ea      	b.n	23f5290 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f52ba:	4632      	mov	r2, r6
 23f52bc:	4639      	mov	r1, r7
 23f52be:	4620      	mov	r0, r4
 23f52c0:	f8cd 8000 	str.w	r8, [sp]
 23f52c4:	f7ff ff4c 	bl	23f5160 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 23f52c8:	e7e7      	b.n	23f529a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 23f52ca:	bf00      	nop
 23f52cc:	023fefed 	.word	0x023fefed
 23f52d0:	023ff3f4 	.word	0x023ff3f4
 23f52d4:	023fefd6 	.word	0x023fefd6
 23f52d8:	023ff010 	.word	0x023ff010

023f52dc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 23f52dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f52e0:	690f      	ldr	r7, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 23f52e2:	4604      	mov	r4, r0
 23f52e4:	460d      	mov	r5, r1
 23f52e6:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
 23f52e8:	b90f      	cbnz	r7, 23f52ee <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f52ea:	f002 f887 	bl	23f73fc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f52ee:	f8d1 9014 	ldr.w	r9, [r1, #20]
 23f52f2:	f1b9 0f00 	cmp.w	r9, #0
 23f52f6:	d0f8      	beq.n	23f52ea <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f52f8:	2200      	movs	r2, #0
 23f52fa:	f000 fae5 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f52fe:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f5300:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f5302:	2200      	movs	r2, #0
 23f5304:	4620      	mov	r0, r4
 23f5306:	f000 fae2 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f530a:	4632      	mov	r2, r6
 23f530c:	4603      	mov	r3, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f530e:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f5310:	4649      	mov	r1, r9
 23f5312:	4620      	mov	r0, r4
 23f5314:	9700      	str	r7, [sp, #0]
 23f5316:	f7ff ff23 	bl	23f5160 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 23f531a:	4605      	mov	r5, r0
 23f531c:	bb70      	cbnz	r0, 23f537c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

  if (input->type == kTfLiteInt8) {
 23f531e:	7833      	ldrb	r3, [r6, #0]
 23f5320:	2b09      	cmp	r3, #9
 23f5322:	d12b      	bne.n	23f537c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    RuntimeShape input_shape = GetTensorShape(input);
 23f5324:	4631      	mov	r1, r6
 23f5326:	a802      	add	r0, sp, #8
 23f5328:	f7fe fdd1 	bl	23f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f532c:	9b02      	ldr	r3, [sp, #8]
 23f532e:	2b04      	cmp	r3, #4
 23f5330:	d1db      	bne.n	23f52ea <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

    RuntimeShape output_shape = GetTensorShape(output);
 23f5332:	4641      	mov	r1, r8
 23f5334:	a808      	add	r0, sp, #32
 23f5336:	f7fe fdca 	bl	23f3ece <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f533a:	9b08      	ldr	r3, [sp, #32]
 23f533c:	2b04      	cmp	r3, #4
 23f533e:	d1d4      	bne.n	23f52ea <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f5340:	2303      	movs	r3, #3
 23f5342:	aa08      	add	r2, sp, #32
 23f5344:	4619      	mov	r1, r3
 23f5346:	a802      	add	r0, sp, #8
 23f5348:	f7fe fdb2 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f534c:	4606      	mov	r6, r0
    const int output_width = output_shape.Dims(2);
 23f534e:	2102      	movs	r1, #2
 23f5350:	a808      	add	r0, sp, #32
 23f5352:	f7fe fd5c 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 23f5356:	4631      	mov	r1, r6
 23f5358:	f7f9 ff74 	bl	23ef244 <arm_avgpool_s8_get_buffer_size>

    if (buffer_size > 0) {
 23f535c:	1e01      	subs	r1, r0, #0
 23f535e:	dd11      	ble.n	23f5384 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f5360:	4620      	mov	r0, r4
 23f5362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f5364:	f107 0210 	add.w	r2, r7, #16
 23f5368:	4798      	blx	r3
 23f536a:	4604      	mov	r4, r0
 23f536c:	b168      	cbz	r0, 23f538a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
 23f536e:	a808      	add	r0, sp, #32
 23f5370:	f7fe fd42 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f5374:	a802      	add	r0, sp, #8
 23f5376:	f7fe fd3f 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f537a:	4625      	mov	r5, r4
    } else {
      data->buffer_idx = -1;
    }
  }
  return kTfLiteOk;
}
 23f537c:	4628      	mov	r0, r5
 23f537e:	b00f      	add	sp, #60	; 0x3c
 23f5380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      data->buffer_idx = -1;
 23f5384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f5388:	613b      	str	r3, [r7, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 23f538a:	a808      	add	r0, sp, #32
 23f538c:	f7fe fd34 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
 23f5390:	a802      	add	r0, sp, #8
 23f5392:	f7fe fd31 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
 23f5396:	e7f1      	b.n	23f537c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

023f5398 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 23f5398:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f539a:	694b      	ldr	r3, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 23f539c:	4604      	mov	r4, r0
 23f539e:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f53a0:	b90b      	cbnz	r3, 23f53a6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
 23f53a2:	f002 f82b 	bl	23f73fc <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f53a6:	690b      	ldr	r3, [r1, #16]
 23f53a8:	2b00      	cmp	r3, #0
 23f53aa:	d0fa      	beq.n	23f53a2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa>
  return GetMutableEvalInput(context, node, index);
 23f53ac:	2200      	movs	r2, #0
 23f53ae:	f7fe fd71 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f53b2:	4605      	mov	r5, r0
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f53b4:	4631      	mov	r1, r6
 23f53b6:	2200      	movs	r2, #0
 23f53b8:	4620      	mov	r0, r4
 23f53ba:	f7fe fdaa 	bl	23f3f12 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 23f53be:	7a28      	ldrb	r0, [r5, #8]
 23f53c0:	6926      	ldr	r6, [r4, #16]
 23f53c2:	2803      	cmp	r0, #3
 23f53c4:	d003      	beq.n	23f53ce <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x36>
 23f53c6:	2809      	cmp	r0, #9
 23f53c8:	d001      	beq.n	23f53ce <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x36>
 23f53ca:	2801      	cmp	r0, #1
 23f53cc:	d108      	bne.n	23f53e0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x48>

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    case kTfLiteInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f53ce:	f7f8 f83d 	bl	23ed44c <TfLiteTypeGetName>
 23f53d2:	7a2b      	ldrb	r3, [r5, #8]
 23f53d4:	4602      	mov	r2, r0
 23f53d6:	4906      	ldr	r1, [pc, #24]	; (23f53f0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x58>)
 23f53d8:	4620      	mov	r0, r4
 23f53da:	47b0      	blx	r6
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 23f53dc:	2001      	movs	r0, #1
 23f53de:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 23f53e0:	f7f8 f834 	bl	23ed44c <TfLiteTypeGetName>
 23f53e4:	4903      	ldr	r1, [pc, #12]	; (23f53f4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 23f53e6:	4602      	mov	r2, r0
 23f53e8:	4620      	mov	r0, r4
 23f53ea:	47b0      	blx	r6
      return kTfLiteError;
 23f53ec:	e7f6      	b.n	23f53dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x44>
 23f53ee:	bf00      	nop
 23f53f0:	023ff086 	.word	0x023ff086
 23f53f4:	023ff46f 	.word	0x023ff46f

023f53f8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f53f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f53fc:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f5400:	4605      	mov	r5, r0
 23f5402:	460c      	mov	r4, r1
 23f5404:	b0a4      	sub	sp, #144	; 0x90
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f5406:	f1b9 0f00 	cmp.w	r9, #0
 23f540a:	d101      	bne.n	23f5410 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x18>
 23f540c:	f001 fff6 	bl	23f73fc <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f5410:	f8d1 8010 	ldr.w	r8, [r1, #16]
 23f5414:	f1b8 0f00 	cmp.w	r8, #0
 23f5418:	d0f8      	beq.n	23f540c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14>
 23f541a:	2200      	movs	r2, #0
 23f541c:	f7fe fd3a 	bl	23f3e94 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f5420:	4607      	mov	r7, r0
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f5422:	4621      	mov	r1, r4
 23f5424:	2200      	movs	r2, #0
 23f5426:	4628      	mov	r0, r5
 23f5428:	f7fe fd73 	bl	23f3f12 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  switch (input->type) {
 23f542c:	7a3c      	ldrb	r4, [r7, #8]
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f542e:	4606      	mov	r6, r0
  switch (input->type) {
 23f5430:	2c03      	cmp	r4, #3
 23f5432:	d010      	beq.n	23f5456 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 23f5434:	2c09      	cmp	r4, #9
 23f5436:	d019      	beq.n	23f546c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 23f5438:	2c01      	cmp	r4, #1
      #endif

      MaxEvalInt8(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 23f543a:	4620      	mov	r0, r4
 23f543c:	692e      	ldr	r6, [r5, #16]
  switch (input->type) {
 23f543e:	d17a      	bne.n	23f5536 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x13e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f5440:	f7f8 f804 	bl	23ed44c <TfLiteTypeGetName>
 23f5444:	7a3b      	ldrb	r3, [r7, #8]
 23f5446:	4602      	mov	r2, r0
 23f5448:	493e      	ldr	r1, [pc, #248]	; (23f5544 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f544a:	4628      	mov	r0, r5
 23f544c:	47b0      	blx	r6
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 23f544e:	4620      	mov	r0, r4
 23f5450:	b024      	add	sp, #144	; 0x90
 23f5452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f5456:	4620      	mov	r0, r4
 23f5458:	692e      	ldr	r6, [r5, #16]
 23f545a:	f7f7 fff7 	bl	23ed44c <TfLiteTypeGetName>
 23f545e:	7a3b      	ldrb	r3, [r7, #8]
 23f5460:	4602      	mov	r2, r0
 23f5462:	4938      	ldr	r1, [pc, #224]	; (23f5544 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f5464:	4628      	mov	r0, r5
 23f5466:	47b0      	blx	r6
      return kTfLiteError;
 23f5468:	2401      	movs	r4, #1
 23f546a:	e7f0      	b.n	23f544e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f546c:	4639      	mov	r1, r7
 23f546e:	a812      	add	r0, sp, #72	; 0x48
 23f5470:	f000 f87a 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f5474:	4631      	mov	r1, r6
 23f5476:	a818      	add	r0, sp, #96	; 0x60
 23f5478:	f000 f876 	bl	23f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f547c:	2303      	movs	r3, #3
 23f547e:	aa18      	add	r2, sp, #96	; 0x60
 23f5480:	4619      	mov	r1, r3
 23f5482:	a812      	add	r0, sp, #72	; 0x48
 23f5484:	f7fe fd14 	bl	23f3eb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.n = 1;
 23f5488:	2401      	movs	r4, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f548a:	4682      	mov	sl, r0
  input_dims.h = input_shape.Dims(1);
 23f548c:	4621      	mov	r1, r4
 23f548e:	a812      	add	r0, sp, #72	; 0x48
  input_dims.n = 1;
 23f5490:	9406      	str	r4, [sp, #24]
  input_dims.h = input_shape.Dims(1);
 23f5492:	f7fe fcbc 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  input_dims.w = input_shape.Dims(2);
 23f5496:	2102      	movs	r1, #2
  input_dims.h = input_shape.Dims(1);
 23f5498:	9007      	str	r0, [sp, #28]
  input_dims.w = input_shape.Dims(2);
 23f549a:	a812      	add	r0, sp, #72	; 0x48
 23f549c:	f7fe fcb7 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.h = output_shape.Dims(1);
 23f54a0:	4621      	mov	r1, r4
  input_dims.c = depth;
 23f54a2:	e9cd 0a08 	strd	r0, sl, [sp, #32]
  output_dims.h = output_shape.Dims(1);
 23f54a6:	a818      	add	r0, sp, #96	; 0x60
  output_dims.n = 1;
 23f54a8:	940a      	str	r4, [sp, #40]	; 0x28
  output_dims.h = output_shape.Dims(1);
 23f54aa:	f7fe fcb0 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.w = output_shape.Dims(2);
 23f54ae:	2102      	movs	r1, #2
  output_dims.h = output_shape.Dims(1);
 23f54b0:	900b      	str	r0, [sp, #44]	; 0x2c
  output_dims.w = output_shape.Dims(2);
 23f54b2:	a818      	add	r0, sp, #96	; 0x60
 23f54b4:	f7fe fcab 	bl	23f3e0e <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.c = depth;
 23f54b8:	e9cd 0a0c 	strd	r0, sl, [sp, #48]	; 0x30
  pool_params.stride.h = params->stride_height;
 23f54bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 23f54c0:	931f      	str	r3, [sp, #124]	; 0x7c
  pool_params.stride.w = params->stride_width;
 23f54c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 23f54c6:	931e      	str	r3, [sp, #120]	; 0x78
  pool_params.padding.h = data.padding.height;
 23f54c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f54cc:	9321      	str	r3, [sp, #132]	; 0x84
  pool_params.padding.w = data.padding.width;
 23f54ce:	f8d8 3000 	ldr.w	r3, [r8]
  filter_dims.n = 1;
 23f54d2:	940e      	str	r4, [sp, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 23f54d4:	9320      	str	r3, [sp, #128]	; 0x80
  pool_params.activation.min = data.activation_min;
 23f54d6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f54da:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.activation.max = data.activation_max;
 23f54dc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 23f54e0:	9323      	str	r3, [sp, #140]	; 0x8c
  filter_dims.h = params->filter_height;
 23f54e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
  if (data.buffer_idx > -1) {
 23f54e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
  filter_dims.h = params->filter_height;
 23f54ea:	930f      	str	r3, [sp, #60]	; 0x3c
  filter_dims.w = params->filter_width;
 23f54ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
  filter_dims.c = 1;
 23f54f0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  ctx.buf = nullptr;
 23f54f4:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 23f54f6:	4299      	cmp	r1, r3
  ctx.size = 0;
 23f54f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (data.buffer_idx > -1) {
 23f54fc:	db03      	blt.n	23f5506 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f54fe:	4628      	mov	r0, r5
 23f5500:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 23f5502:	4798      	blx	r3
 23f5504:	9004      	str	r0, [sp, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f5506:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f5508:	b106      	cbz	r6, 23f550c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x114>
 23f550a:	6836      	ldr	r6, [r6, #0]
  TFLITE_DCHECK_EQ(
 23f550c:	aa0a      	add	r2, sp, #40	; 0x28
 23f550e:	9201      	str	r2, [sp, #4]
 23f5510:	aa0e      	add	r2, sp, #56	; 0x38
 23f5512:	9200      	str	r2, [sp, #0]
 23f5514:	9602      	str	r6, [sp, #8]
 23f5516:	aa06      	add	r2, sp, #24
 23f5518:	a91e      	add	r1, sp, #120	; 0x78
 23f551a:	a804      	add	r0, sp, #16
 23f551c:	f7f9 fe94 	bl	23ef248 <arm_max_pool_s8>
 23f5520:	4604      	mov	r4, r0
 23f5522:	2800      	cmp	r0, #0
 23f5524:	f47f af72 	bne.w	23f540c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f5528:	a818      	add	r0, sp, #96	; 0x60
 23f552a:	f7fe fc65 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f552e:	a812      	add	r0, sp, #72	; 0x48
 23f5530:	f7fe fc62 	bl	23f3df8 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 23f5534:	e78b      	b.n	23f544e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 23f5536:	f7f7 ff89 	bl	23ed44c <TfLiteTypeGetName>
 23f553a:	4903      	ldr	r1, [pc, #12]	; (23f5548 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x150>)
 23f553c:	4602      	mov	r2, r0
 23f553e:	4628      	mov	r0, r5
 23f5540:	47b0      	blx	r6
 23f5542:	e791      	b.n	23f5468 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
 23f5544:	023ff086 	.word	0x023ff086
 23f5548:	023ff498 	.word	0x023ff498

023f554c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 23f554c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f554e:	4604      	mov	r4, r0
TfLiteRegistration Register_MAX_POOL_2D() {
 23f5550:	4606      	mov	r6, r0
          /*version=*/0};
 23f5552:	4d04      	ldr	r5, [pc, #16]	; (23f5564 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
 23f5554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5558:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f555c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f5560:	4630      	mov	r0, r6
 23f5562:	bd70      	pop	{r4, r5, r6, pc}
 23f5564:	023fb9a0 	.word	0x023fb9a0

023f5568 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 23f5568:	b570      	push	{r4, r5, r6, lr}
 23f556a:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 23f556c:	b109      	cbz	r1, 23f5572 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 23f556e:	684d      	ldr	r5, [r1, #4]
 23f5570:	b91d      	cbnz	r5, 23f557a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 23f5572:	2300      	movs	r3, #0
 23f5574:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f5576:	4620      	mov	r0, r4
 23f5578:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
 23f557a:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
 23f557e:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
 23f5580:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f5582:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 23f5586:	dc05      	bgt.n	23f5594 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f5588:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f558a:	4632      	mov	r2, r6
 23f558c:	4629      	mov	r1, r5
 23f558e:	f005 ffc6 	bl	23fb51e <memcpy>
  }
 23f5592:	e7f0      	b.n	23f5576 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
 23f5594:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 23f5598:	4293      	cmp	r3, r2
 23f559a:	bfb4      	ite	lt
 23f559c:	4630      	movlt	r0, r6
 23f559e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f55a2:	f7f7 ff38 	bl	23ed416 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f55a6:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f55a8:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f55aa:	2b05      	cmp	r3, #5
 23f55ac:	dced      	bgt.n	23f558a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
 23f55ae:	e7eb      	b.n	23f5588 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

023f55b0 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
 23f55b0:	2801      	cmp	r0, #1
 23f55b2:	d002      	beq.n	23f55ba <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 23f55b4:	2802      	cmp	r0, #2
 23f55b6:	bf18      	it	ne
 23f55b8:	2000      	movne	r0, #0
  }
}
 23f55ba:	4770      	bx	lr

023f55bc <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 23f55bc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f55be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f55c0:	b90b      	cbnz	r3, 23f55c6 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
 23f55c2:	f001 ff1b 	bl	23f73fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 23f55c6:	2138      	movs	r1, #56	; 0x38
}
 23f55c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 23f55cc:	4718      	bx	r3
	...

023f55d0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f55d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f55d4:	ed2d 8b02 	vpush	{d8}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f55d8:	680b      	ldr	r3, [r1, #0]
 23f55da:	4604      	mov	r4, r0
 23f55dc:	681e      	ldr	r6, [r3, #0]
 23f55de:	460f      	mov	r7, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f55e0:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f55e2:	b088      	sub	sp, #32
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f55e4:	d011      	beq.n	23f560a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 23f55e6:	2501      	movs	r5, #1
 23f55e8:	4b8c      	ldr	r3, [pc, #560]	; (23f581c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f55ea:	e9cd 6502 	strd	r6, r5, [sp, #8]
 23f55ee:	9301      	str	r3, [sp, #4]
 23f55f0:	4b8b      	ldr	r3, [pc, #556]	; (23f5820 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 23f55f2:	4a8c      	ldr	r2, [pc, #560]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f55f4:	9300      	str	r3, [sp, #0]
 23f55f6:	6904      	ldr	r4, [r0, #16]
 23f55f8:	237b      	movs	r3, #123	; 0x7b
 23f55fa:	498b      	ldr	r1, [pc, #556]	; (23f5828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f55fc:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
 23f55fe:	4628      	mov	r0, r5
 23f5600:	b008      	add	sp, #32
 23f5602:	ecbd 8b02 	vpop	{d8}
 23f5606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 23f560a:	684b      	ldr	r3, [r1, #4]
 23f560c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f560e:	2d01      	cmp	r5, #1
 23f5610:	d00c      	beq.n	23f562c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 23f5612:	4b82      	ldr	r3, [pc, #520]	; (23f581c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f5614:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23f5618:	9301      	str	r3, [sp, #4]
 23f561a:	4b84      	ldr	r3, [pc, #528]	; (23f582c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 23f561c:	4a81      	ldr	r2, [pc, #516]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f561e:	9300      	str	r3, [sp, #0]
 23f5620:	6904      	ldr	r4, [r0, #16]
 23f5622:	237c      	movs	r3, #124	; 0x7c
 23f5624:	4980      	ldr	r1, [pc, #512]	; (23f5828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f5626:	47a0      	blx	r4
    return kTfLiteError;
 23f5628:	2501      	movs	r5, #1
 23f562a:	e7e8      	b.n	23f55fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
 23f562c:	2200      	movs	r2, #0
 23f562e:	f000 f94b 	bl	23f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f5632:	4606      	mov	r6, r0
 23f5634:	b940      	cbnz	r0, 23f5648 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
 23f5636:	4b7e      	ldr	r3, [pc, #504]	; (23f5830 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 23f5638:	9300      	str	r3, [sp, #0]
 23f563a:	237e      	movs	r3, #126	; 0x7e
 23f563c:	6926      	ldr	r6, [r4, #16]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 23f563e:	4620      	mov	r0, r4
 23f5640:	4a78      	ldr	r2, [pc, #480]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5642:	497c      	ldr	r1, [pc, #496]	; (23f5834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 23f5644:	47b0      	blx	r6
 23f5646:	e7da      	b.n	23f55fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 23f5648:	6883      	ldr	r3, [r0, #8]
 23f564a:	681b      	ldr	r3, [r3, #0]
 23f564c:	2b00      	cmp	r3, #0
 23f564e:	dc04      	bgt.n	23f565a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 23f5650:	4b79      	ldr	r3, [pc, #484]	; (23f5838 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 23f5652:	9300      	str	r3, [sp, #0]
 23f5654:	6926      	ldr	r6, [r4, #16]
 23f5656:	237f      	movs	r3, #127	; 0x7f
 23f5658:	e7f1      	b.n	23f563e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
 23f565a:	2200      	movs	r2, #0
 23f565c:	4639      	mov	r1, r7
 23f565e:	4620      	mov	r0, r4
 23f5660:	f000 f935 	bl	23f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f5664:	4603      	mov	r3, r0
 23f5666:	b920      	cbnz	r0, 23f5672 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 23f5668:	4b74      	ldr	r3, [pc, #464]	; (23f583c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 23f566a:	9300      	str	r3, [sp, #0]
 23f566c:	6926      	ldr	r6, [r4, #16]
 23f566e:	2381      	movs	r3, #129	; 0x81
 23f5670:	e7e5      	b.n	23f563e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 23f5672:	f8d7 8010 	ldr.w	r8, [r7, #16]
 23f5676:	f1b8 0f00 	cmp.w	r8, #0
 23f567a:	d104      	bne.n	23f5686 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
 23f567c:	4b70      	ldr	r3, [pc, #448]	; (23f5840 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 23f567e:	9300      	str	r3, [sp, #0]
 23f5680:	6926      	ldr	r6, [r4, #16]
 23f5682:	2383      	movs	r3, #131	; 0x83
 23f5684:	e7db      	b.n	23f563e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
 23f5686:	7830      	ldrb	r0, [r6, #0]
 23f5688:	2807      	cmp	r0, #7
 23f568a:	d108      	bne.n	23f569e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f568c:	6927      	ldr	r7, [r4, #16]
 23f568e:	f7f7 fedd 	bl	23ed44c <TfLiteTypeGetName>
 23f5692:	7833      	ldrb	r3, [r6, #0]
 23f5694:	4602      	mov	r2, r0
 23f5696:	496b      	ldr	r1, [pc, #428]	; (23f5844 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 23f5698:	4620      	mov	r0, r4
 23f569a:	47b8      	blx	r7
    return kTfLiteError;
 23f569c:	e7af      	b.n	23f55fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  if (output->type == kTfLiteInt16) {
 23f569e:	781a      	ldrb	r2, [r3, #0]
 23f56a0:	2a07      	cmp	r2, #7
 23f56a2:	d106      	bne.n	23f56b2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_ENSURE(context,
 23f56a4:	2809      	cmp	r0, #9
 23f56a6:	d014      	beq.n	23f56d2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 23f56a8:	4b67      	ldr	r3, [pc, #412]	; (23f5848 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 23f56aa:	9300      	str	r3, [sp, #0]
 23f56ac:	6926      	ldr	r6, [r4, #16]
 23f56ae:	2399      	movs	r3, #153	; 0x99
 23f56b0:	e7c5      	b.n	23f563e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f56b2:	4290      	cmp	r0, r2
 23f56b4:	f000 809a 	beq.w	23f57ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 23f56b8:	4b64      	ldr	r3, [pc, #400]	; (23f584c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f56ba:	e9cd 0202 	strd	r0, r2, [sp, #8]
 23f56be:	9301      	str	r3, [sp, #4]
 23f56c0:	4b63      	ldr	r3, [pc, #396]	; (23f5850 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 23f56c2:	4620      	mov	r0, r4
 23f56c4:	9300      	str	r3, [sp, #0]
 23f56c6:	6926      	ldr	r6, [r4, #16]
 23f56c8:	239c      	movs	r3, #156	; 0x9c
 23f56ca:	4a56      	ldr	r2, [pc, #344]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f56cc:	4956      	ldr	r1, [pc, #344]	; (23f5828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f56ce:	47b0      	blx	r6
 23f56d0:	e795      	b.n	23f55fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 23f56d2:	691a      	ldr	r2, [r3, #16]
 23f56d4:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 23f56d8:	d00d      	beq.n	23f56f6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x126>
 23f56da:	4b5e      	ldr	r3, [pc, #376]	; (23f5854 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 23f56dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f56e0:	4b5d      	ldr	r3, [pc, #372]	; (23f5858 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 23f56e2:	9301      	str	r3, [sp, #4]
 23f56e4:	4b5d      	ldr	r3, [pc, #372]	; (23f585c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f56e6:	9300      	str	r3, [sp, #0]
 23f56e8:	2337      	movs	r3, #55	; 0x37
 23f56ea:	6925      	ldr	r5, [r4, #16]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f56ec:	4620      	mov	r0, r4
 23f56ee:	4a4d      	ldr	r2, [pc, #308]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f56f0:	494d      	ldr	r1, [pc, #308]	; (23f5828 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f56f2:	47a8      	blx	r5
 23f56f4:	e798      	b.n	23f5628 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 23f56f6:	eddf 7a5a 	vldr	s15, [pc, #360]	; 23f5860 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>
 23f56fa:	ed93 7a03 	vldr	s14, [r3, #12]
 23f56fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f5702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5706:	eddf 6a57 	vldr	s13, [pc, #348]	; 23f5864 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>
 23f570a:	bfcc      	ite	gt
 23f570c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 23f5710:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 23f5714:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f5718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f571c:	dd35      	ble.n	23f578a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f571e:	2200      	movs	r2, #0
 23f5720:	4b51      	ldr	r3, [pc, #324]	; (23f5868 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 23f5722:	ee17 0a10 	vmov	r0, s14
 23f5726:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f572a:	f7f7 f8a5 	bl	23ec878 <__aeabi_f2d>
 23f572e:	4b4f      	ldr	r3, [pc, #316]	; (23f586c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 23f5730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f5734:	9301      	str	r3, [sp, #4]
 23f5736:	4b4e      	ldr	r3, [pc, #312]	; (23f5870 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 23f5738:	4620      	mov	r0, r4
 23f573a:	9300      	str	r3, [sp, #0]
 23f573c:	6925      	ldr	r5, [r4, #16]
 23f573e:	2338      	movs	r3, #56	; 0x38
 23f5740:	4a38      	ldr	r2, [pc, #224]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5742:	494c      	ldr	r1, [pc, #304]	; (23f5874 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
 23f5744:	47a8      	blx	r5
 23f5746:	e76f      	b.n	23f5628 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f5748:	691a      	ldr	r2, [r3, #16]
 23f574a:	f112 0f80 	cmn.w	r2, #128	; 0x80
 23f574e:	d00a      	beq.n	23f5766 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x196>
 23f5750:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 23f5754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f5758:	4b47      	ldr	r3, [pc, #284]	; (23f5878 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 23f575a:	9301      	str	r3, [sp, #4]
 23f575c:	4b3f      	ldr	r3, [pc, #252]	; (23f585c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f575e:	9300      	str	r3, [sp, #0]
 23f5760:	6925      	ldr	r5, [r4, #16]
 23f5762:	233c      	movs	r3, #60	; 0x3c
 23f5764:	e7c2      	b.n	23f56ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 23f5766:	ed93 7a03 	vldr	s14, [r3, #12]
 23f576a:	eddf 7a44 	vldr	s15, [pc, #272]	; 23f587c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
 23f576e:	eeb4 7a67 	vcmp.f32	s14, s15
 23f5772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5776:	d008      	beq.n	23f578a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f5778:	4b41      	ldr	r3, [pc, #260]	; (23f5880 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 23f577a:	4620      	mov	r0, r4
 23f577c:	9300      	str	r3, [sp, #0]
 23f577e:	6925      	ldr	r5, [r4, #16]
 23f5780:	233d      	movs	r3, #61	; 0x3d
 23f5782:	4a28      	ldr	r2, [pc, #160]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5784:	492b      	ldr	r1, [pc, #172]	; (23f5834 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 23f5786:	47a8      	blx	r5
 23f5788:	e74e      	b.n	23f5628 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      tflite::PreprocessSoftmaxScaling(
 23f578a:	68f0      	ldr	r0, [r6, #12]
 23f578c:	f7f7 f874 	bl	23ec878 <__aeabi_f2d>
          static_cast<double>(params->beta),
 23f5790:	697b      	ldr	r3, [r7, #20]
      tflite::PreprocessSoftmaxScaling(
 23f5792:	ec41 0b18 	vmov	d8, r0, r1
 23f5796:	6818      	ldr	r0, [r3, #0]
 23f5798:	f7f7 f86e 	bl	23ec878 <__aeabi_f2d>
 23f579c:	f108 0408 	add.w	r4, r8, #8
 23f57a0:	ec41 0b10 	vmov	d0, r0, r1
 23f57a4:	eeb0 1a48 	vmov.f32	s2, s16
 23f57a8:	eef0 1a68 	vmov.f32	s3, s17
 23f57ac:	4621      	mov	r1, r4
 23f57ae:	2005      	movs	r0, #5
 23f57b0:	aa07      	add	r2, sp, #28
 23f57b2:	f000 fb15 	bl	23f5de0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 23f57b6:	9907      	ldr	r1, [sp, #28]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f57b8:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
 23f57ba:	f8c8 100c 	str.w	r1, [r8, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f57be:	2005      	movs	r0, #5
 23f57c0:	f000 fb4a 	bl	23f5e58 <_ZN6tflite20CalculateInputRadiusEiii>
 23f57c4:	f7f7 f846 	bl	23ec854 <__aeabi_i2d>
 23f57c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
 23f57cc:	4619      	mov	r1, r3
 23f57ce:	f7f7 fb5b 	bl	23ece88 <__aeabi_d2iz>
  return kTfLiteOk;
 23f57d2:	2500      	movs	r5, #0
      op_data->diff_min =
 23f57d4:	f8c8 0018 	str.w	r0, [r8, #24]
  return kTfLiteOk;
 23f57d8:	e711      	b.n	23f55fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f57da:	6925      	ldr	r5, [r4, #16]
 23f57dc:	f7f7 fe36 	bl	23ed44c <TfLiteTypeGetName>
 23f57e0:	7833      	ldrb	r3, [r6, #0]
 23f57e2:	4602      	mov	r2, r0
 23f57e4:	4917      	ldr	r1, [pc, #92]	; (23f5844 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 23f57e6:	4620      	mov	r0, r4
 23f57e8:	47a8      	blx	r5
 23f57ea:	e71d      	b.n	23f5628 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 23f57ec:	2809      	cmp	r0, #9
 23f57ee:	d1f4      	bne.n	23f57da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 23f57f0:	2a09      	cmp	r2, #9
 23f57f2:	d0a9      	beq.n	23f5748 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>
 23f57f4:	4610      	mov	r0, r2
 23f57f6:	6926      	ldr	r6, [r4, #16]
 23f57f8:	f7f7 fe28 	bl	23ed44c <TfLiteTypeGetName>
 23f57fc:	4605      	mov	r5, r0
 23f57fe:	2009      	movs	r0, #9
 23f5800:	f7f7 fe24 	bl	23ed44c <TfLiteTypeGetName>
 23f5804:	4b1f      	ldr	r3, [pc, #124]	; (23f5884 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
 23f5806:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f580a:	9301      	str	r3, [sp, #4]
 23f580c:	4b0f      	ldr	r3, [pc, #60]	; (23f584c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f580e:	4620      	mov	r0, r4
 23f5810:	9300      	str	r3, [sp, #0]
 23f5812:	4a04      	ldr	r2, [pc, #16]	; (23f5824 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5814:	233b      	movs	r3, #59	; 0x3b
 23f5816:	491c      	ldr	r1, [pc, #112]	; (23f5888 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
 23f5818:	47b0      	blx	r6
 23f581a:	e705      	b.n	23f5628 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 23f581c:	023ff563 	.word	0x023ff563
 23f5820:	023ff53b 	.word	0x023ff53b
 23f5824:	023ff4b9 	.word	0x023ff4b9
 23f5828:	023fee87 	.word	0x023fee87
 23f582c:	023ff192 	.word	0x023ff192
 23f5830:	023fefed 	.word	0x023fefed
 23f5834:	023fefd6 	.word	0x023fefd6
 23f5838:	023ff54b 	.word	0x023ff54b
 23f583c:	023ff010 	.word	0x023ff010
 23f5840:	023ff565 	.word	0x023ff565
 23f5844:	023ff086 	.word	0x023ff086
 23f5848:	023ff580 	.word	0x023ff580
 23f584c:	023ff03c 	.word	0x023ff03c
 23f5850:	023ff049 	.word	0x023ff049
 23f5854:	ffff8000 	.word	0xffff8000
 23f5858:	023ff5ba 	.word	0x023ff5ba
 23f585c:	023ff5c1 	.word	0x023ff5c1
 23f5860:	37800000 	.word	0x37800000
 23f5864:	3283126f 	.word	0x3283126f
 23f5868:	3ef00000 	.word	0x3ef00000
 23f586c:	023ff5fb 	.word	0x023ff5fb
 23f5870:	023ff607 	.word	0x023ff607
 23f5874:	023ff5db 	.word	0x023ff5db
 23f5878:	023ff628 	.word	0x023ff628
 23f587c:	3b800000 	.word	0x3b800000
 23f5880:	023ff62d 	.word	0x023ff62d
 23f5884:	023ff61c 	.word	0x023ff61c
 23f5888:	023ff022 	.word	0x023ff022

023f588c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
  return context->GetTensor(context, tensor_index);
 23f588c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 23f588e:	4718      	bx	r3

023f5890 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 23f5890:	ed90 7a00 	vldr	s14, [r0]
 23f5894:	eec0 7a07 	vdiv.f32	s15, s0, s14
  { return __builtin_roundf(__x); }
 23f5898:	fef8 7a67 	vrinta.f32	s15, s15
 23f589c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  };
 23f58a0:	ee17 3a90 	vmov	r3, s15
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 23f58a4:	6840      	ldr	r0, [r0, #4]
  };
 23f58a6:	4403      	add	r3, r0
 23f58a8:	4618      	mov	r0, r3
 23f58aa:	4770      	bx	lr

023f58ac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
 23f58ac:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f58ae:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
 23f58b2:	db07      	blt.n	23f58c4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
 23f58b4:	4293      	cmp	r3, r2
 23f58b6:	dd05      	ble.n	23f58c4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
 23f58b8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
 23f58bc:	2900      	cmp	r1, #0
 23f58be:	db01      	blt.n	23f58c4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
 23f58c0:	f7ff bfe4 	b.w	23f588c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
 23f58c4:	2000      	movs	r0, #0
 23f58c6:	4770      	bx	lr

023f58c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
 23f58c8:	6809      	ldr	r1, [r1, #0]
 23f58ca:	f7ff bfef 	b.w	23f58ac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

023f58ce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
 23f58ce:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
 23f58d0:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f58d2:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 23f58d6:	db07      	blt.n	23f58e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
 23f58d8:	4291      	cmp	r1, r2
 23f58da:	dd05      	ble.n	23f58e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
 23f58dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 23f58e0:	2900      	cmp	r1, #0
 23f58e2:	db01      	blt.n	23f58e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
 23f58e4:	f7ff bfd2 	b.w	23f588c <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
 23f58e8:	2000      	movs	r0, #0
 23f58ea:	4770      	bx	lr

023f58ec <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
 23f58ec:	6809      	ldr	r1, [r1, #0]
 23f58ee:	f7ff bfdd 	b.w	23f58ac <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>
	...

023f58f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
 23f58f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
 23f58f6:	edd1 7a03 	vldr	s15, [r1, #12]
 23f58fa:	ed92 7a03 	vldr	s14, [r2, #12]
 23f58fe:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f5902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f5906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
 23f590a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f590c:	da0a      	bge.n	23f5924 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 23f590e:	4b0f      	ldr	r3, [pc, #60]	; (23f594c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 23f5910:	4a0f      	ldr	r2, [pc, #60]	; (23f5950 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 23f5912:	9300      	str	r3, [sp, #0]
 23f5914:	6904      	ldr	r4, [r0, #16]
 23f5916:	f240 134d 	movw	r3, #333	; 0x14d
 23f591a:	490e      	ldr	r1, [pc, #56]	; (23f5954 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 23f591c:	47a0      	blx	r4
 23f591e:	2001      	movs	r0, #1
}
 23f5920:	b002      	add	sp, #8
 23f5922:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 23f5924:	ee17 0a90 	vmov	r0, s15
 23f5928:	f7f6 ffa6 	bl	23ec878 <__aeabi_f2d>
 23f592c:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f592e:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
 23f5930:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f5932:	f7f6 ffa1 	bl	23ec878 <__aeabi_f2d>
 23f5936:	460b      	mov	r3, r1
 23f5938:	4602      	mov	r2, r0
 23f593a:	4629      	mov	r1, r5
 23f593c:	4620      	mov	r0, r4
 23f593e:	f7f7 f91d 	bl	23ecb7c <__aeabi_ddiv>
 23f5942:	9b06      	ldr	r3, [sp, #24]
 23f5944:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 23f5948:	2000      	movs	r0, #0
 23f594a:	e7e9      	b.n	23f5920 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 23f594c:	023ff6cd 	.word	0x023ff6cd
 23f5950:	023ff64f 	.word	0x023ff64f
 23f5954:	023fefd6 	.word	0x023fefd6

023f5958 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 23f5958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f595c:	4604      	mov	r4, r0
 23f595e:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f5962:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
 23f5964:	4615      	mov	r5, r2
 23f5966:	461e      	mov	r6, r3
 23f5968:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f596a:	f7f6 ff85 	bl	23ec878 <__aeabi_f2d>
 23f596e:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
 23f5970:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f5972:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
 23f5974:	f7f6 ff80 	bl	23ec878 <__aeabi_f2d>
 23f5978:	4602      	mov	r2, r0
 23f597a:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f597c:	4640      	mov	r0, r8
 23f597e:	4649      	mov	r1, r9
 23f5980:	f7f6 ffd2 	bl	23ec928 <__aeabi_dmul>
 23f5984:	4680      	mov	r8, r0
 23f5986:	4689      	mov	r9, r1
  if (bias) {
 23f5988:	b1d6      	cbz	r6, 23f59c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
 23f598a:	68f0      	ldr	r0, [r6, #12]
 23f598c:	f7f6 ff74 	bl	23ec878 <__aeabi_f2d>
 23f5990:	4602      	mov	r2, r0
 23f5992:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 23f5994:	4640      	mov	r0, r8
 23f5996:	4649      	mov	r1, r9
 23f5998:	f7f6 fe0e 	bl	23ec5b8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23f599c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
 23f599e:	68f8      	ldr	r0, [r7, #12]
 23f59a0:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 23f59a4:	f7f6 ff68 	bl	23ec878 <__aeabi_f2d>
 23f59a8:	4602      	mov	r2, r0
 23f59aa:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f59ac:	4640      	mov	r0, r8
 23f59ae:	4649      	mov	r1, r9
 23f59b0:	f7f7 f8e4 	bl	23ecb7c <__aeabi_ddiv>
 23f59b4:	a311      	add	r3, pc, #68	; (adr r3, 23f59fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
 23f59b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f59ba:	f7f7 fa31 	bl	23ece20 <__aeabi_dcmple>
 23f59be:	b150      	cbz	r0, 23f59d6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f59c0:	463b      	mov	r3, r7
 23f59c2:	462a      	mov	r2, r5
 23f59c4:	4651      	mov	r1, sl
 23f59c6:	4620      	mov	r0, r4
 23f59c8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 23f59cc:	b003      	add	sp, #12
 23f59ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f59d2:	f7ff bf8f 	b.w	23f58f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f59d6:	4b06      	ldr	r3, [pc, #24]	; (23f59f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
 23f59d8:	4620      	mov	r0, r4
 23f59da:	9300      	str	r3, [sp, #0]
 23f59dc:	6925      	ldr	r5, [r4, #16]
 23f59de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 23f59e2:	4a04      	ldr	r2, [pc, #16]	; (23f59f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
 23f59e4:	4904      	ldr	r1, [pc, #16]	; (23f59f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
 23f59e6:	47a8      	blx	r5
}
 23f59e8:	2001      	movs	r0, #1
 23f59ea:	b003      	add	sp, #12
 23f59ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f59f0:	023ff6e6 	.word	0x023ff6e6
 23f59f4:	023ff64f 	.word	0x023ff64f
 23f59f8:	023fefd6 	.word	0x023fefd6
 23f59fc:	47ae147b 	.word	0x47ae147b
 23f5a00:	3f947ae1 	.word	0x3f947ae1

023f5a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 23f5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5a06:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 23f5a08:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
 23f5a0a:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
 23f5a0c:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 23f5a0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
 23f5a10:	d00e      	beq.n	23f5a30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 23f5a12:	2b09      	cmp	r3, #9
 23f5a14:	d01f      	beq.n	23f5a56 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 23f5a16:	2b07      	cmp	r3, #7
 23f5a18:	d021      	beq.n	23f5a5e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 23f5a1a:	4b26      	ldr	r3, [pc, #152]	; (23f5ab4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb0>)
 23f5a1c:	4a26      	ldr	r2, [pc, #152]	; (23f5ab8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>)
 23f5a1e:	9300      	str	r3, [sp, #0]
 23f5a20:	6904      	ldr	r4, [r0, #16]
 23f5a22:	f44f 73c0 	mov.w	r3, #384	; 0x180
 23f5a26:	4925      	ldr	r1, [pc, #148]	; (23f5abc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>)
 23f5a28:	47a0      	blx	r4
 23f5a2a:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
 23f5a2c:	b005      	add	sp, #20
 23f5a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 23f5a30:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 23f5a32:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
 23f5a34:	6913      	ldr	r3, [r2, #16]
  };
 23f5a36:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
 23f5a38:	2901      	cmp	r1, #1
  };
 23f5a3a:	9202      	str	r2, [sp, #8]
 23f5a3c:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
 23f5a3e:	d112      	bne.n	23f5a66 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
 23f5a40:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 23f5ac0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
 23f5a44:	a802      	add	r0, sp, #8
 23f5a46:	f7ff ff23 	bl	23f5890 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 23f5a4a:	4286      	cmp	r6, r0
 23f5a4c:	bfac      	ite	ge
 23f5a4e:	602e      	strge	r6, [r5, #0]
 23f5a50:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
 23f5a52:	603c      	str	r4, [r7, #0]
 23f5a54:	e01b      	b.n	23f5a8e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
 23f5a56:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 23f5a58:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 23f5a5c:	e7ea      	b.n	23f5a34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
    qmax = std::numeric_limits<int16_t>::max();
 23f5a5e:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
 23f5a62:	4e18      	ldr	r6, [pc, #96]	; (23f5ac4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc0>)
 23f5a64:	e7e6      	b.n	23f5a34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
 23f5a66:	2903      	cmp	r1, #3
 23f5a68:	d113      	bne.n	23f5a92 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
 23f5a6a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 23f5ac0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
 23f5a6e:	a802      	add	r0, sp, #8
 23f5a70:	f7ff ff0e 	bl	23f5890 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
 23f5a74:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
 23f5a78:	4286      	cmp	r6, r0
 23f5a7a:	bfac      	ite	ge
 23f5a7c:	602e      	strge	r6, [r5, #0]
 23f5a7e:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
 23f5a80:	a802      	add	r0, sp, #8
 23f5a82:	f7ff ff05 	bl	23f5890 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 23f5a86:	4284      	cmp	r4, r0
 23f5a88:	bfd4      	ite	le
 23f5a8a:	603c      	strle	r4, [r7, #0]
 23f5a8c:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
 23f5a8e:	2000      	movs	r0, #0
 23f5a90:	e7cc      	b.n	23f5a2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
 23f5a92:	2902      	cmp	r1, #2
 23f5a94:	d10b      	bne.n	23f5aae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
 23f5a96:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f5a9a:	a802      	add	r0, sp, #8
 23f5a9c:	f7ff fef8 	bl	23f5890 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
 23f5aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
 23f5aa4:	4286      	cmp	r6, r0
 23f5aa6:	bfac      	ite	ge
 23f5aa8:	602e      	strge	r6, [r5, #0]
 23f5aaa:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
 23f5aac:	e7e8      	b.n	23f5a80 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
    *act_min = qmin;
 23f5aae:	602e      	str	r6, [r5, #0]
 23f5ab0:	e7cf      	b.n	23f5a52 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
 23f5ab2:	bf00      	nop
 23f5ab4:	023ff708 	.word	0x023ff708
 23f5ab8:	023ff64f 	.word	0x023ff64f
 23f5abc:	023fefd6 	.word	0x023fefd6
 23f5ac0:	00000000 	.word	0x00000000
 23f5ac4:	ffff8000 	.word	0xffff8000

023f5ac8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f5ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5acc:	ed2d 8b06 	vpush	{d8-d10}
 23f5ad0:	b093      	sub	sp, #76	; 0x4c
 23f5ad2:	ee09 3a10 	vmov	s18, r3
 23f5ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f5ad8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f5adc:	9306      	str	r3, [sp, #24]
 23f5ade:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f5ae0:	2d01      	cmp	r5, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f5ae2:	9308      	str	r3, [sp, #32]
 23f5ae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f5ae6:	4604      	mov	r4, r0
 23f5ae8:	ee09 3a90 	vmov	s19, r3
 23f5aec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23f5aee:	468b      	mov	fp, r1
 23f5af0:	9309      	str	r3, [sp, #36]	; 0x24
 23f5af2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23f5af4:	4692      	mov	sl, r2
 23f5af6:	ee0a 3a10 	vmov	s20, r3
 23f5afa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23f5afc:	930a      	str	r3, [sp, #40]	; 0x28
 23f5afe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23f5b00:	930b      	str	r3, [sp, #44]	; 0x2c
 23f5b02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 23f5b04:	930c      	str	r3, [sp, #48]	; 0x30
 23f5b06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f5b08:	9307      	str	r3, [sp, #28]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f5b0a:	d011      	beq.n	23f5b30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x68>
 23f5b0c:	2601      	movs	r6, #1
 23f5b0e:	4b77      	ldr	r3, [pc, #476]	; (23f5cec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
 23f5b10:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23f5b14:	9301      	str	r3, [sp, #4]
 23f5b16:	4b76      	ldr	r3, [pc, #472]	; (23f5cf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x228>)
 23f5b18:	4a76      	ldr	r2, [pc, #472]	; (23f5cf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5b1a:	9300      	str	r3, [sp, #0]
 23f5b1c:	6904      	ldr	r4, [r0, #16]
 23f5b1e:	23dc      	movs	r3, #220	; 0xdc
 23f5b20:	4975      	ldr	r1, [pc, #468]	; (23f5cf8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f5b22:	47a0      	blx	r4
}
 23f5b24:	4630      	mov	r0, r6
 23f5b26:	b013      	add	sp, #76	; 0x4c
 23f5b28:	ecbd 8b06 	vpop	{d8-d10}
 23f5b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 23f5b30:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
 23f5b34:	2e01      	cmp	r6, #1
 23f5b36:	d00c      	beq.n	23f5b52 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x8a>
 23f5b38:	4b6c      	ldr	r3, [pc, #432]	; (23f5cec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
 23f5b3a:	e9cd 6502 	strd	r6, r5, [sp, #8]
 23f5b3e:	9301      	str	r3, [sp, #4]
 23f5b40:	4b6e      	ldr	r3, [pc, #440]	; (23f5cfc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x234>)
 23f5b42:	4a6c      	ldr	r2, [pc, #432]	; (23f5cf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5b44:	9300      	str	r3, [sp, #0]
 23f5b46:	6904      	ldr	r4, [r0, #16]
 23f5b48:	23de      	movs	r3, #222	; 0xde
 23f5b4a:	496b      	ldr	r1, [pc, #428]	; (23f5cf8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f5b4c:	47a0      	blx	r4
 23f5b4e:	462e      	mov	r6, r5
 23f5b50:	e7e8      	b.n	23f5b24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
  const auto* affine_quantization =
 23f5b52:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 23f5b54:	b93a      	cbnz	r2, 23f5b66 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x9e>
 23f5b56:	4b6a      	ldr	r3, [pc, #424]	; (23f5d00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>)
 23f5b58:	9300      	str	r3, [sp, #0]
 23f5b5a:	23e9      	movs	r3, #233	; 0xe9
 23f5b5c:	6904      	ldr	r4, [r0, #16]
  TF_LITE_ENSURE(context, affine_quantization->scale);
 23f5b5e:	4a65      	ldr	r2, [pc, #404]	; (23f5cf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5b60:	4968      	ldr	r1, [pc, #416]	; (23f5d04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>)
 23f5b62:	47a0      	blx	r4
 23f5b64:	e7de      	b.n	23f5b24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
 23f5b66:	6817      	ldr	r7, [r2, #0]
 23f5b68:	b927      	cbnz	r7, 23f5b74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xac>
 23f5b6a:	4b67      	ldr	r3, [pc, #412]	; (23f5d08 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x240>)
 23f5b6c:	9300      	str	r3, [sp, #0]
 23f5b6e:	6904      	ldr	r4, [r0, #16]
 23f5b70:	23ea      	movs	r3, #234	; 0xea
 23f5b72:	e7f4      	b.n	23f5b5e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 23f5b74:	683d      	ldr	r5, [r7, #0]
  if (is_per_channel) {
 23f5b76:	2d01      	cmp	r5, #1
 23f5b78:	dd38      	ble.n	23f5bec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
    TF_LITE_ENSURE(context,
 23f5b7a:	780b      	ldrb	r3, [r1, #0]
 23f5b7c:	2b09      	cmp	r3, #9
 23f5b7e:	d006      	beq.n	23f5b8e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
 23f5b80:	2b07      	cmp	r3, #7
 23f5b82:	d004      	beq.n	23f5b8e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
 23f5b84:	4b61      	ldr	r3, [pc, #388]	; (23f5d0c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
 23f5b86:	9300      	str	r3, [sp, #0]
 23f5b88:	6904      	ldr	r4, [r0, #16]
 23f5b8a:	23ee      	movs	r3, #238	; 0xee
 23f5b8c:	e7e7      	b.n	23f5b5e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 23f5b8e:	f89a 3000 	ldrb.w	r3, [sl]
 23f5b92:	2b09      	cmp	r3, #9
 23f5b94:	d00d      	beq.n	23f5bb2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xea>
 23f5b96:	2209      	movs	r2, #9
 23f5b98:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f5b9c:	4b5c      	ldr	r3, [pc, #368]	; (23f5d10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
 23f5b9e:	9301      	str	r3, [sp, #4]
 23f5ba0:	4b5c      	ldr	r3, [pc, #368]	; (23f5d14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
 23f5ba2:	9300      	str	r3, [sp, #0]
 23f5ba4:	23f0      	movs	r3, #240	; 0xf0
 23f5ba6:	6925      	ldr	r5, [r4, #16]
    TF_LITE_ENSURE_EQ(
 23f5ba8:	4620      	mov	r0, r4
 23f5baa:	4a52      	ldr	r2, [pc, #328]	; (23f5cf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5bac:	4952      	ldr	r1, [pc, #328]	; (23f5cf8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f5bae:	47a8      	blx	r5
 23f5bb0:	e7b8      	b.n	23f5b24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 23f5bb2:	9b07      	ldr	r3, [sp, #28]
 23f5bb4:	429d      	cmp	r5, r3
 23f5bb6:	d008      	beq.n	23f5bca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x102>
 23f5bb8:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f5bbc:	4b56      	ldr	r3, [pc, #344]	; (23f5d18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
 23f5bbe:	9301      	str	r3, [sp, #4]
 23f5bc0:	4b56      	ldr	r3, [pc, #344]	; (23f5d1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
 23f5bc2:	9300      	str	r3, [sp, #0]
 23f5bc4:	6925      	ldr	r5, [r4, #16]
 23f5bc6:	23f1      	movs	r3, #241	; 0xf1
 23f5bc8:	e7ee      	b.n	23f5ba8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
    TF_LITE_ENSURE_EQ(
 23f5bca:	f8da 3008 	ldr.w	r3, [sl, #8]
 23f5bce:	6892      	ldr	r2, [r2, #8]
 23f5bd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f5bd4:	685b      	ldr	r3, [r3, #4]
 23f5bd6:	42ab      	cmp	r3, r5
 23f5bd8:	d008      	beq.n	23f5bec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
 23f5bda:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f5bde:	4b50      	ldr	r3, [pc, #320]	; (23f5d20 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
 23f5be0:	9301      	str	r3, [sp, #4]
 23f5be2:	4b4d      	ldr	r3, [pc, #308]	; (23f5d18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
 23f5be4:	9300      	str	r3, [sp, #0]
 23f5be6:	6925      	ldr	r5, [r4, #16]
 23f5be8:	23f2      	movs	r3, #242	; 0xf2
 23f5bea:	e7dd      	b.n	23f5ba8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
  const float input_scale = input->params.scale;
 23f5bec:	eddb 7a03 	vldr	s15, [fp, #12]
  const float output_scale = output->params.scale;
 23f5bf0:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
 23f5bf2:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
 23f5bf6:	edd3 7a03 	vldr	s15, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
 23f5bfa:	2600      	movs	r6, #0
  const float output_scale = output->params.scale;
 23f5bfc:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
 23f5c00:	1d3b      	adds	r3, r7, #4
 23f5c02:	9305      	str	r3, [sp, #20]
 23f5c04:	9b07      	ldr	r3, [sp, #28]
 23f5c06:	429e      	cmp	r6, r3
 23f5c08:	da34      	bge.n	23f5c74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ac>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 23f5c0a:	2d01      	cmp	r5, #1
 23f5c0c:	bfca      	itet	gt
 23f5c0e:	9b05      	ldrgt	r3, [sp, #20]
 23f5c10:	687b      	ldrle	r3, [r7, #4]
 23f5c12:	681b      	ldrgt	r3, [r3, #0]
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5c14:	ee18 0a10 	vmov	r0, s16
 23f5c18:	930d      	str	r3, [sp, #52]	; 0x34
 23f5c1a:	f7f6 fe2d 	bl	23ec878 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(scale);
 23f5c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5c20:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(scale);
 23f5c22:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5c24:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(scale);
 23f5c26:	f7f6 fe27 	bl	23ec878 <__aeabi_f2d>
 23f5c2a:	4602      	mov	r2, r0
 23f5c2c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5c2e:	4640      	mov	r0, r8
 23f5c30:	4649      	mov	r1, r9
 23f5c32:	f7f6 fe79 	bl	23ec928 <__aeabi_dmul>
 23f5c36:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
 23f5c38:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5c3c:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
 23f5c3e:	f7f6 fe1b 	bl	23ec878 <__aeabi_f2d>
 23f5c42:	4602      	mov	r2, r0
 23f5c44:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5c46:	4640      	mov	r0, r8
 23f5c48:	4649      	mov	r1, r9
 23f5c4a:	f7f6 ff97 	bl	23ecb7c <__aeabi_ddiv>
 23f5c4e:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 23f5c52:	a910      	add	r1, sp, #64	; 0x40
 23f5c54:	a80f      	add	r0, sp, #60	; 0x3c
 23f5c56:	f000 f865 	bl	23f5d24 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 23f5c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f5c5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f5c5e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
 23f5c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f5c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23f5c66:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
 23f5c6a:	9b05      	ldr	r3, [sp, #20]
 23f5c6c:	3601      	adds	r6, #1
 23f5c6e:	3304      	adds	r3, #4
 23f5c70:	9305      	str	r3, [sp, #20]
 23f5c72:	e7c7      	b.n	23f5c04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
  if (input->type == kTfLiteUInt8) {
 23f5c74:	f89b 3000 	ldrb.w	r3, [fp]
 23f5c78:	2b03      	cmp	r3, #3
 23f5c7a:	d11d      	bne.n	23f5cb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1f0>
    double real_multiplier = 0.0;
 23f5c7c:	2200      	movs	r2, #0
 23f5c7e:	2300      	movs	r3, #0
 23f5c80:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f5c84:	ab10      	add	r3, sp, #64	; 0x40
 23f5c86:	9301      	str	r3, [sp, #4]
 23f5c88:	9b06      	ldr	r3, [sp, #24]
 23f5c8a:	4652      	mov	r2, sl
 23f5c8c:	9300      	str	r3, [sp, #0]
 23f5c8e:	4659      	mov	r1, fp
 23f5c90:	ee19 3a10 	vmov	r3, s18
 23f5c94:	4620      	mov	r0, r4
 23f5c96:	f7ff fe5f 	bl	23f5958 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f5c9a:	4606      	mov	r6, r0
 23f5c9c:	2800      	cmp	r0, #0
 23f5c9e:	f47f af41 	bne.w	23f5b24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 23f5ca2:	ee19 0a90 	vmov	r0, s19
 23f5ca6:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 23f5caa:	a90f      	add	r1, sp, #60	; 0x3c
 23f5cac:	f000 f83a 	bl	23f5d24 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 23f5cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f5cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f5cb4:	425b      	negs	r3, r3
 23f5cb6:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 23f5cb8:	f89b 3000 	ldrb.w	r3, [fp]
 23f5cbc:	2b09      	cmp	r3, #9
 23f5cbe:	d003      	beq.n	23f5cc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x200>
 23f5cc0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 23f5cc4:	2b03      	cmp	r3, #3
 23f5cc6:	d10e      	bne.n	23f5ce6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x21e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f5cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f5cca:	4620      	mov	r0, r4
 23f5ccc:	9322      	str	r3, [sp, #136]	; 0x88
 23f5cce:	ee1a 3a10 	vmov	r3, s20
 23f5cd2:	9908      	ldr	r1, [sp, #32]
 23f5cd4:	9a06      	ldr	r2, [sp, #24]
 23f5cd6:	7809      	ldrb	r1, [r1, #0]
}
 23f5cd8:	b013      	add	sp, #76	; 0x4c
 23f5cda:	ecbd 8b06 	vpop	{d8-d10}
 23f5cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f5ce2:	f7ff be8f 	b.w	23f5a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  return kTfLiteOk;
 23f5ce6:	2600      	movs	r6, #0
 23f5ce8:	e71c      	b.n	23f5b24 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
 23f5cea:	bf00      	nop
 23f5cec:	023ff70e 	.word	0x023ff70e
 23f5cf0:	023ff728 	.word	0x023ff728
 23f5cf4:	023ff64f 	.word	0x023ff64f
 23f5cf8:	023fee87 	.word	0x023fee87
 23f5cfc:	023ff741 	.word	0x023ff741
 23f5d00:	023ff75b 	.word	0x023ff75b
 23f5d04:	023fefd6 	.word	0x023fefd6
 23f5d08:	023ff76f 	.word	0x023ff76f
 23f5d0c:	023ff580 	.word	0x023ff580
 23f5d10:	023ff61c 	.word	0x023ff61c
 23f5d14:	023ff78a 	.word	0x023ff78a
 23f5d18:	023ff797 	.word	0x023ff797
 23f5d1c:	023ff7a4 	.word	0x023ff7a4
 23f5d20:	023ff7c5 	.word	0x023ff7c5

023f5d24 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 23f5d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
 23f5d26:	2200      	movs	r2, #0
                        int* shift) {
 23f5d28:	4606      	mov	r6, r0
 23f5d2a:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 23f5d2c:	2300      	movs	r3, #0
 23f5d2e:	ec51 0b10 	vmov	r0, r1, d0
 23f5d32:	ed8d 0b00 	vstr	d0, [sp]
 23f5d36:	f7f7 f85f 	bl	23ecdf8 <__aeabi_dcmpeq>
 23f5d3a:	ed9d 0b00 	vldr	d0, [sp]
 23f5d3e:	4605      	mov	r5, r0
 23f5d40:	b120      	cbz	r0, 23f5d4c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 23f5d42:	2300      	movs	r3, #0
 23f5d44:	6033      	str	r3, [r6, #0]
    *shift = 0;
 23f5d46:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 23f5d48:	b002      	add	sp, #8
 23f5d4a:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
 23f5d4c:	4620      	mov	r0, r4
 23f5d4e:	f003 ff6f 	bl	23f9c30 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f5d52:	2200      	movs	r2, #0
 23f5d54:	4b13      	ldr	r3, [pc, #76]	; (23f5da4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
  const double q = std::frexp(double_multiplier, shift);
 23f5d56:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f5d5a:	f7f6 fde5 	bl	23ec928 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 23f5d5e:	ec41 0b10 	vmov	d0, r0, r1
 23f5d62:	f003 ff9d 	bl	23f9ca0 <round>
 23f5d66:	ec51 0b10 	vmov	r0, r1, d0
 23f5d6a:	f7f7 f975 	bl	23ed058 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 23f5d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 23f5d72:	4282      	cmp	r2, r0
 23f5d74:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f5d78:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 23f5d7a:	da01      	bge.n	23f5d80 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
 23f5d7c:	f001 fb3e 	bl	23f73fc <abort>
  if (q_fixed == (1ll << 31)) {
 23f5d80:	42a9      	cmp	r1, r5
 23f5d82:	bf08      	it	eq
 23f5d84:	4290      	cmpeq	r0, r2
    ++*shift;
 23f5d86:	bf02      	ittt	eq
 23f5d88:	6823      	ldreq	r3, [r4, #0]
 23f5d8a:	3301      	addeq	r3, #1
 23f5d8c:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 23f5d8e:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
 23f5d90:	bf08      	it	eq
 23f5d92:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
 23f5d96:	321f      	adds	r2, #31
    *shift = 0;
 23f5d98:	bfbc      	itt	lt
 23f5d9a:	2300      	movlt	r3, #0
 23f5d9c:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 23f5d9e:	6033      	str	r3, [r6, #0]
 23f5da0:	e7d2      	b.n	23f5d48 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
 23f5da2:	bf00      	nop
 23f5da4:	41e00000 	.word	0x41e00000

023f5da8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 23f5da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f5daa:	4b0c      	ldr	r3, [pc, #48]	; (23f5ddc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
 23f5dac:	4605      	mov	r5, r0
 23f5dae:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f5db0:	2200      	movs	r2, #0
 23f5db2:	ec51 0b10 	vmov	r0, r1, d0
 23f5db6:	ed8d 0b00 	vstr	d0, [sp]
 23f5dba:	f7f7 f845 	bl	23ece48 <__aeabi_dcmpgt>
 23f5dbe:	ed9d 0b00 	vldr	d0, [sp]
 23f5dc2:	b908      	cbnz	r0, 23f5dc8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
 23f5dc4:	f001 fb1a 	bl	23f73fc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 23f5dc8:	4621      	mov	r1, r4
 23f5dca:	4628      	mov	r0, r5
 23f5dcc:	f7ff ffaa 	bl	23f5d24 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 23f5dd0:	6823      	ldr	r3, [r4, #0]
 23f5dd2:	2b00      	cmp	r3, #0
 23f5dd4:	dbf6      	blt.n	23f5dc4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
 23f5dd6:	b003      	add	sp, #12
 23f5dd8:	bd30      	pop	{r4, r5, pc}
 23f5dda:	bf00      	nop
 23f5ddc:	3ff00000 	.word	0x3ff00000

023f5de0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 23f5de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f5de4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
 23f5de8:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f5dec:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 23f5df0:	ec57 6b10 	vmov	r6, r7, d0
 23f5df4:	ec59 8b11 	vmov	r8, r9, d1
 23f5df8:	4693      	mov	fp, r2
 23f5dfa:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f5dfc:	f7f6 fd2a 	bl	23ec854 <__aeabi_i2d>
 23f5e00:	4642      	mov	r2, r8
 23f5e02:	4604      	mov	r4, r0
 23f5e04:	460d      	mov	r5, r1
 23f5e06:	464b      	mov	r3, r9
 23f5e08:	4630      	mov	r0, r6
 23f5e0a:	4639      	mov	r1, r7
 23f5e0c:	f7f6 fd8c 	bl	23ec928 <__aeabi_dmul>
 23f5e10:	4602      	mov	r2, r0
 23f5e12:	460b      	mov	r3, r1
 23f5e14:	4620      	mov	r0, r4
 23f5e16:	4629      	mov	r1, r5
 23f5e18:	f7f6 fd86 	bl	23ec928 <__aeabi_dmul>
 23f5e1c:	4602      	mov	r2, r0
 23f5e1e:	460b      	mov	r3, r1
 23f5e20:	ec43 2b18 	vmov	d8, r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 23f5e24:	a30a      	add	r3, pc, #40	; (adr r3, 23f5e50 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
 23f5e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5e2a:	f7f7 f80d 	bl	23ece48 <__aeabi_dcmpgt>
 23f5e2e:	b108      	cbz	r0, 23f5e34 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
 23f5e30:	ed9f 8b07 	vldr	d8, [pc, #28]	; 23f5e50 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f5e34:	4659      	mov	r1, fp
 23f5e36:	4650      	mov	r0, sl
 23f5e38:	eeb0 0a48 	vmov.f32	s0, s16
 23f5e3c:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
 23f5e40:	ecbd 8b02 	vpop	{d8}
 23f5e44:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f5e48:	f7ff bfae 	b.w	23f5da8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
 23f5e4c:	f3af 8000 	nop.w
 23f5e50:	ffc00000 	.word	0xffc00000
 23f5e54:	41dfffff 	.word	0x41dfffff

023f5e58 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 23f5e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5e5c:	2401      	movs	r4, #1
                         int total_signed_bits) {
 23f5e5e:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5e60:	fa04 f000 	lsl.w	r0, r4, r0
 23f5e64:	3801      	subs	r0, #1
                         int total_signed_bits) {
 23f5e66:	4688      	mov	r8, r1
 23f5e68:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5e6a:	f7f6 fcf3 	bl	23ec854 <__aeabi_i2d>
 23f5e6e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f5e70:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5e74:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f5e76:	f1c0 0320 	rsb	r3, r0, #32
 23f5e7a:	f1a0 0120 	sub.w	r1, r0, #32
 23f5e7e:	fa24 f303 	lsr.w	r3, r4, r3
 23f5e82:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5e86:	fa04 f000 	lsl.w	r0, r4, r0
 23f5e8a:	4319      	orrs	r1, r3
 23f5e8c:	f7f6 fd1e 	bl	23ec8cc <__aeabi_l2d>
 23f5e90:	4602      	mov	r2, r0
 23f5e92:	460b      	mov	r3, r1
 23f5e94:	4630      	mov	r0, r6
 23f5e96:	4639      	mov	r1, r7
 23f5e98:	f7f6 fd46 	bl	23ec928 <__aeabi_dmul>
      (1ll << input_left_shift);
 23f5e9c:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5ea0:	460f      	mov	r7, r1
      (1ll << input_left_shift);
 23f5ea2:	f1a8 0120 	sub.w	r1, r8, #32
 23f5ea6:	fa24 f303 	lsr.w	r3, r4, r3
 23f5eaa:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f5eae:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f5eb0:	4319      	orrs	r1, r3
 23f5eb2:	fa04 f008 	lsl.w	r0, r4, r8
 23f5eb6:	f7f6 fd09 	bl	23ec8cc <__aeabi_l2d>
 23f5eba:	4602      	mov	r2, r0
 23f5ebc:	460b      	mov	r3, r1
  const double max_input_rescaled =
 23f5ebe:	4630      	mov	r0, r6
 23f5ec0:	4639      	mov	r1, r7
 23f5ec2:	f7f6 fe5b 	bl	23ecb7c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 23f5ec6:	ec41 0b10 	vmov	d0, r0, r1
 23f5eca:	f003 fe2d 	bl	23f9b28 <floor>
 23f5ece:	ec51 0b10 	vmov	r0, r1, d0
 23f5ed2:	f7f6 ffd9 	bl	23ece88 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 23f5ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

023f5edc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 23f5edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5ee0:	ed2d 8b08 	vpush	{d8-d11}
 23f5ee4:	4616      	mov	r6, r2
 23f5ee6:	b089      	sub	sp, #36	; 0x24
 23f5ee8:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
 23f5eec:	460f      	mov	r7, r1
    kiss_fft_cpx * Fout_beg=Fout;
    const int p=*factors++; /* the radix  */
    const int m=*factors++; /* stage's fft length/p */
 23f5eee:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
 23f5ef2:	6811      	ldr	r1, [r2, #0]
        }
        return;
    }
#endif

    if (m==1) {
 23f5ef4:	f1ba 0f01 	cmp.w	sl, #1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23f5ef8:	fb0a f901 	mul.w	r9, sl, r1
    const int p=*factors++; /* the radix  */
 23f5efc:	9103      	str	r1, [sp, #12]
        do{
            *Fout = *f;
            f += fstride*in_stride;
 23f5efe:	fb06 f103 	mul.w	r1, r6, r3
{
 23f5f02:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23f5f04:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
 23f5f08:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
 23f5f0c:	d116      	bne.n	23f5f3c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
 23f5f0e:	4603      	mov	r3, r0
            *Fout = *f;
 23f5f10:	e897 0003 	ldmia.w	r7, {r0, r1}
 23f5f14:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
 23f5f18:	3308      	adds	r3, #8
 23f5f1a:	4599      	cmp	r9, r3
            f += fstride*in_stride;
 23f5f1c:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
 23f5f1e:	d1f7      	bne.n	23f5f10 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
 23f5f20:	f505 7384 	add.w	r3, r5, #264	; 0x108
 23f5f24:	9305      	str	r3, [sp, #20]
 23f5f26:	9b03      	ldr	r3, [sp, #12]
 23f5f28:	3b02      	subs	r3, #2
 23f5f2a:	2b03      	cmp	r3, #3
 23f5f2c:	f200 828a 	bhi.w	23f6444 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x568>
 23f5f30:	e8df f013 	tbh	[pc, r3, lsl #1]
 23f5f34:	0056001b 	.word	0x0056001b
 23f5f38:	019b00fb 	.word	0x019b00fb
    const int m=*factors++; /* stage's fft length/p */
 23f5f3c:	3208      	adds	r2, #8
 23f5f3e:	9204      	str	r2, [sp, #16]
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23f5f40:	9a03      	ldr	r2, [sp, #12]
            f += fstride*in_stride;
        }while( (Fout += m) != Fout_end );
 23f5f42:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23f5f46:	4372      	muls	r2, r6
 23f5f48:	9904      	ldr	r1, [sp, #16]
 23f5f4a:	9501      	str	r5, [sp, #4]
 23f5f4c:	9100      	str	r1, [sp, #0]
 23f5f4e:	4639      	mov	r1, r7
 23f5f50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23f5f54:	9005      	str	r0, [sp, #20]
 23f5f56:	f7ff ffc1 	bl	23f5edc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
 23f5f5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f5f5e:	9805      	ldr	r0, [sp, #20]
            f += fstride*in_stride;
 23f5f60:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
 23f5f62:	4458      	add	r0, fp
 23f5f64:	4581      	cmp	r9, r0
 23f5f66:	d1ef      	bne.n	23f5f48 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
 23f5f68:	e7da      	b.n	23f5f20 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
 23f5f6a:	f10a 0301 	add.w	r3, sl, #1
 23f5f6e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
 23f5f72:	00f6      	lsls	r6, r6, #3
 23f5f74:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
 23f5f76:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f5f7a:	ed53 5a01 	vldr	s11, [r3, #-4]
 23f5f7e:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
 23f5f82:	ed13 6a02 	vldr	s12, [r3, #-8]
 23f5f86:	ee26 7ae5 	vnmul.f32	s14, s13, s11
 23f5f8a:	eea6 7a27 	vfma.f32	s14, s12, s15
 23f5f8e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 23f5f92:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
 23f5f96:	ed54 6a02 	vldr	s13, [r4, #-8]
 23f5f9a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 23f5f9e:	ed43 6a02 	vstr	s13, [r3, #-8]
 23f5fa2:	ed54 6a01 	vldr	s13, [r4, #-4]
 23f5fa6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 23f5faa:	ed43 6a01 	vstr	s13, [r3, #-4]
        C_ADDTO( *Fout ,  t );
 23f5fae:	ed54 6a02 	vldr	s13, [r4, #-8]
 23f5fb2:	ee36 7a87 	vadd.f32	s14, s13, s14
 23f5fb6:	ed04 7a02 	vstr	s14, [r4, #-8]
 23f5fba:	ed14 7a01 	vldr	s14, [r4, #-4]
 23f5fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
    }while (--m);
 23f5fc2:	f1ba 0a01 	subs.w	sl, sl, #1
        C_ADDTO( *Fout ,  t );
 23f5fc6:	ed44 7a01 	vstr	s15, [r4, #-4]
    }while (--m);
 23f5fca:	f103 0308 	add.w	r3, r3, #8
 23f5fce:	f104 0408 	add.w	r4, r4, #8
 23f5fd2:	4435      	add	r5, r6
 23f5fd4:	d1cf      	bne.n	23f5f76 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
        case 4: kf_bfly4(Fout,fstride,st,m); break;
        case 5: kf_bfly5(Fout,fstride,st,m); break;
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    }
}
 23f5fd6:	b009      	add	sp, #36	; 0x24
 23f5fd8:	ecbd 8b08 	vpop	{d8-d11}
 23f5fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
 23f5fe0:	fb06 f30a 	mul.w	r3, r6, sl
 23f5fe4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 23f5fe8:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
 23f5fec:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
 23f5ff0:	0133      	lsls	r3, r6, #4
 23f5ff2:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
 23f5ff6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 23f5ffa:	f104 0608 	add.w	r6, r4, #8
 23f5ffe:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 23f6000:	4657      	mov	r7, sl
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23f6002:	eef1 9a49 	vneg.f32	s19, s18
         tw2 += fstride*2;
 23f6006:	46aa      	mov	sl, r5
 23f6008:	9303      	str	r3, [sp, #12]
 23f600a:	3404      	adds	r4, #4
         C_MUL(scratch[1],Fout[m] , *tw1);
 23f600c:	edd8 7a01 	vldr	s15, [r8, #4]
 23f6010:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f6014:	ee66 8ae7 	vnmul.f32	s17, s13, s15
 23f6018:	ed14 6a01 	vldr	s12, [r4, #-4]
 23f601c:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
 23f6020:	eeb0 7a68 	vmov.f32	s14, s17
 23f6024:	eea6 7a08 	vfma.f32	s14, s12, s16
 23f6028:	ee28 8a27 	vmul.f32	s16, s16, s15
 23f602c:	eef0 7a48 	vmov.f32	s15, s16
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23f6030:	edd9 5a01 	vldr	s11, [r9, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
 23f6034:	eee6 7a26 	vfma.f32	s15, s12, s13
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23f6038:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
 23f603c:	ed99 6a00 	vldr	s12, [r9]
 23f6040:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
 23f6044:	ee66 8ae5 	vnmul.f32	s17, s13, s11
 23f6048:	eee6 8a08 	vfma.f32	s17, s12, s16
 23f604c:	ee28 8a25 	vmul.f32	s16, s16, s11
 23f6050:	eea6 8a26 	vfma.f32	s16, s12, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23f6054:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_ADD(scratch[3],scratch[1],scratch[2]);
 23f6058:	ee37 aa88 	vadd.f32	s20, s15, s16
 23f605c:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_SUB(scratch[0],scratch[1],scratch[2]);
 23f6060:	ee37 8ac8 	vsub.f32	s16, s15, s16
 23f6064:	ee77 8a68 	vsub.f32	s17, s14, s17
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23f6068:	f7f6 fc06 	bl	23ec878 <__aeabi_f2d>
 23f606c:	ec41 0b1b 	vmov	d11, r0, r1
 23f6070:	ee1a 0a90 	vmov	r0, s21
 23f6074:	f7f6 fc00 	bl	23ec878 <__aeabi_f2d>
 23f6078:	2200      	movs	r2, #0
 23f607a:	4bf1      	ldr	r3, [pc, #964]	; (23f6440 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23f607c:	f7f6 fc54 	bl	23ec928 <__aeabi_dmul>
 23f6080:	4602      	mov	r2, r0
 23f6082:	460b      	mov	r3, r1
 23f6084:	ec51 0b1b 	vmov	r0, r1, d11
 23f6088:	f7f6 fa96 	bl	23ec5b8 <__aeabi_dsub>
 23f608c:	f7f6 ff44 	bl	23ecf18 <__aeabi_d2f>
 23f6090:	f844 0c04 	str.w	r0, [r4, #-4]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 23f6094:	f856 0c04 	ldr.w	r0, [r6, #-4]
 23f6098:	f7f6 fbee 	bl	23ec878 <__aeabi_f2d>
 23f609c:	ec41 0b1b 	vmov	d11, r0, r1
 23f60a0:	ee1a 0a10 	vmov	r0, s20
 23f60a4:	f7f6 fbe8 	bl	23ec878 <__aeabi_f2d>
 23f60a8:	2200      	movs	r2, #0
 23f60aa:	4be5      	ldr	r3, [pc, #916]	; (23f6440 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23f60ac:	f7f6 fc3c 	bl	23ec928 <__aeabi_dmul>
 23f60b0:	460b      	mov	r3, r1
 23f60b2:	4602      	mov	r2, r0
 23f60b4:	ec51 0b1b 	vmov	r0, r1, d11
 23f60b8:	f7f6 fa7e 	bl	23ec5b8 <__aeabi_dsub>
 23f60bc:	f7f6 ff2c 	bl	23ecf18 <__aeabi_d2f>
 23f60c0:	f8c8 0004 	str.w	r0, [r8, #4]
         C_ADDTO(*Fout,scratch[3]);
 23f60c4:	ed56 7a02 	vldr	s15, [r6, #-8]
 23f60c8:	ee77 7aaa 	vadd.f32	s15, s15, s21
 23f60cc:	ed46 7a02 	vstr	s15, [r6, #-8]
 23f60d0:	ed56 7a01 	vldr	s15, [r6, #-4]
 23f60d4:	ee77 7a8a 	vadd.f32	s15, s15, s20
 23f60d8:	ed46 7a01 	vstr	s15, [r6, #-4]
         Fout[m2].r = Fout[m].r + scratch[0].i;
 23f60dc:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f60e0:	eee9 7a08 	vfma.f32	s15, s18, s16
 23f60e4:	edc9 7a00 	vstr	s15, [r9]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23f60e8:	edd8 7a01 	vldr	s15, [r8, #4]
 23f60ec:	eee9 7aa8 	vfma.f32	s15, s19, s17
 23f60f0:	edc9 7a01 	vstr	s15, [r9, #4]
         Fout[m].r -= scratch[0].i;
 23f60f4:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f60f8:	eee9 7a88 	vfma.f32	s15, s19, s16
 23f60fc:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].i += scratch[0].r;
 23f6100:	edd8 7a01 	vldr	s15, [r8, #4]
 23f6104:	eee9 7a28 	vfma.f32	s15, s18, s17
 23f6108:	edc8 7a01 	vstr	s15, [r8, #4]
     }while(--k);
 23f610c:	9b03      	ldr	r3, [sp, #12]
 23f610e:	3f01      	subs	r7, #1
 23f6110:	f106 0608 	add.w	r6, r6, #8
 23f6114:	f108 0808 	add.w	r8, r8, #8
 23f6118:	445d      	add	r5, fp
 23f611a:	f109 0908 	add.w	r9, r9, #8
 23f611e:	449a      	add	sl, r3
 23f6120:	f104 0408 	add.w	r4, r4, #8
 23f6124:	f47f af72 	bne.w	23f600c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
 23f6128:	e755      	b.n	23f5fd6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        tw3 += fstride*3;
 23f612a:	2218      	movs	r2, #24
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 23f612c:	4657      	mov	r7, sl
    tw3 = tw2 = tw1 = st->twiddles;
 23f612e:	46a9      	mov	r9, r5
        tw3 += fstride*3;
 23f6130:	46ae      	mov	lr, r5
 23f6132:	46a8      	mov	r8, r5
        tw1 += fstride;
 23f6134:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
        tw2 += fstride*2;
 23f6138:	ea4f 1a06 	mov.w	sl, r6, lsl #4
        tw3 += fstride*3;
 23f613c:	4356      	muls	r6, r2
 23f613e:	eb04 1007 	add.w	r0, r4, r7, lsl #4
 23f6142:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
 23f6146:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
 23f614a:	f104 0c04 	add.w	ip, r4, #4
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f614e:	ed91 7a01 	vldr	s14, [r1, #4]
 23f6152:	edd9 6a43 	vldr	s13, [r9, #268]	; 0x10c
 23f6156:	ed91 5a00 	vldr	s10, [r1]
 23f615a:	edd9 7a42 	vldr	s15, [r9, #264]	; 0x108
 23f615e:	ee26 6ac7 	vnmul.f32	s12, s13, s14
 23f6162:	eea5 6a27 	vfma.f32	s12, s10, s15
 23f6166:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f616a:	eee5 7a26 	vfma.f32	s15, s10, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f616e:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f6172:	eeb0 7a67 	vmov.f32	s14, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f6176:	edd8 7a43 	vldr	s15, [r8, #268]	; 0x10c
 23f617a:	ed90 5a00 	vldr	s10, [r0]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f617e:	eef0 5a46 	vmov.f32	s11, s12
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f6182:	ee67 6ae4 	vnmul.f32	s13, s15, s9
 23f6186:	ed98 6a42 	vldr	s12, [r8, #264]	; 0x108
 23f618a:	eee5 6a06 	vfma.f32	s13, s10, s12
 23f618e:	ee26 6a24 	vmul.f32	s12, s12, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f6192:	edd3 3a01 	vldr	s7, [r3, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f6196:	eea5 6a27 	vfma.f32	s12, s10, s15
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f619a:	ed9e 5a43 	vldr	s10, [lr, #268]	; 0x10c
 23f619e:	edd3 4a00 	vldr	s9, [r3]
 23f61a2:	edde 7a42 	vldr	s15, [lr, #264]	; 0x108
 23f61a6:	ee25 4a63 	vnmul.f32	s8, s10, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f61aa:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f61ae:	eea4 4aa7 	vfma.f32	s8, s9, s15
 23f61b2:	ee67 7aa3 	vmul.f32	s15, s15, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f61b6:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f61ba:	eee4 7a85 	vfma.f32	s15, s9, s10
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f61be:	ee73 4a66 	vsub.f32	s9, s6, s13
        C_ADDTO(*Fout, scratch[1]);
 23f61c2:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23f61c6:	ee35 3a84 	vadd.f32	s6, s11, s8
        C_ADDTO(*Fout, scratch[1]);
 23f61ca:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f61ce:	ee33 5ac6 	vsub.f32	s10, s7, s12
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f61d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
        C_ADDTO(*Fout, scratch[1]);
 23f61d6:	ee36 6a23 	vadd.f32	s12, s12, s7
 23f61da:	ed84 6a01 	vstr	s12, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f61de:	edc0 6a00 	vstr	s13, [r0]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23f61e2:	ee77 3a27 	vadd.f32	s7, s14, s15
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23f61e6:	ee35 6ac4 	vsub.f32	s12, s11, s8
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f61ea:	edd4 5a01 	vldr	s11, [r4, #4]
 23f61ee:	ee75 5ae3 	vsub.f32	s11, s11, s7
 23f61f2:	edc0 5a01 	vstr	s11, [r0, #4]
        C_ADDTO( *Fout , scratch[3] );
 23f61f6:	ed5c 6a01 	vldr	s13, [ip, #-4]
 23f61fa:	ee76 6a83 	vadd.f32	s13, s13, s6
 23f61fe:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23f6202:	ee77 7a67 	vsub.f32	s15, s14, s15
        C_ADDTO( *Fout , scratch[3] );
 23f6206:	ed94 7a01 	vldr	s14, [r4, #4]
 23f620a:	ee37 7a23 	vadd.f32	s14, s14, s7
 23f620e:	ed84 7a01 	vstr	s14, [r4, #4]
        if(st->inverse) {
 23f6212:	686a      	ldr	r2, [r5, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23f6214:	ee74 6aa7 	vadd.f32	s13, s9, s15
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23f6218:	ee35 7a46 	vsub.f32	s14, s10, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
 23f621c:	ee74 7ae7 	vsub.f32	s15, s9, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
 23f6220:	ee35 6a06 	vadd.f32	s12, s10, s12
        if(st->inverse) {
 23f6224:	b1c2      	cbz	r2, 23f6258 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x37c>
            Fout[m].r = scratch[5].r - scratch[4].i;
 23f6226:	edc1 7a00 	vstr	s15, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
 23f622a:	ed81 6a01 	vstr	s12, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23f622e:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23f6232:	ed83 7a01 	vstr	s14, [r3, #4]
    }while(--k);
 23f6236:	3f01      	subs	r7, #1
        ++Fout;
 23f6238:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
 23f623c:	f101 0108 	add.w	r1, r1, #8
 23f6240:	44d9      	add	r9, fp
 23f6242:	f100 0008 	add.w	r0, r0, #8
 23f6246:	44d0      	add	r8, sl
 23f6248:	f103 0308 	add.w	r3, r3, #8
 23f624c:	44b6      	add	lr, r6
 23f624e:	f10c 0c08 	add.w	ip, ip, #8
 23f6252:	f47f af7c 	bne.w	23f614e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x272>
 23f6256:	e6be      	b.n	23f5fd6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
 23f6258:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
 23f625c:	ed81 7a01 	vstr	s14, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 23f6260:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 23f6264:	ed83 6a01 	vstr	s12, [r3, #4]
 23f6268:	e7e5      	b.n	23f6236 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x35a>
    ya = twiddles[fstride*m];
 23f626a:	fb0a f306 	mul.w	r3, sl, r6
 23f626e:	9a05      	ldr	r2, [sp, #20]
    Fout4=Fout0+4*m;
 23f6270:	46ac      	mov	ip, r5
    ya = twiddles[fstride*m];
 23f6272:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 23f6276:	ed97 2a01 	vldr	s4, [r7, #4]
 23f627a:	00f2      	lsls	r2, r6, #3
 23f627c:	9203      	str	r2, [sp, #12]
 23f627e:	2218      	movs	r2, #24
    Fout4=Fout0+4*m;
 23f6280:	46ae      	mov	lr, r5
 23f6282:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
 23f6284:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f6288:	eef1 0a42 	vneg.f32	s1, s4
 23f628c:	4372      	muls	r2, r6
    ya = twiddles[fstride*m];
 23f628e:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
 23f6292:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
 23f6296:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
 23f629a:	ed97 1a00 	vldr	s2, [r7]
 23f629e:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
 23f62a2:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 23f62a6:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
 23f62aa:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
 23f62ae:	eb03 100a 	add.w	r0, r3, sl, lsl #4
 23f62b2:	9204      	str	r2, [sp, #16]
 23f62b4:	0176      	lsls	r6, r6, #5
    for ( u=0; u<m; ++u ) {
 23f62b6:	45ca      	cmp	sl, r9
 23f62b8:	f104 0408 	add.w	r4, r4, #8
 23f62bc:	f107 0708 	add.w	r7, r7, #8
 23f62c0:	f103 0308 	add.w	r3, r3, #8
 23f62c4:	f101 0108 	add.w	r1, r1, #8
 23f62c8:	f100 0008 	add.w	r0, r0, #8
 23f62cc:	f77f ae83 	ble.w	23f5fd6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f62d0:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f62d4:	ed57 3a01 	vldr	s7, [r7, #-4]
 23f62d8:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
 23f62dc:	ed17 6a02 	vldr	s12, [r7, #-8]
 23f62e0:	ee26 3ae3 	vnmul.f32	s6, s13, s7
 23f62e4:	eea6 3a25 	vfma.f32	s6, s12, s11
 23f62e8:	ee65 5aa3 	vmul.f32	s11, s11, s7
 23f62ec:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f62f0:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
 23f62f4:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f62f8:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f62fc:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
 23f6300:	ed13 5a02 	vldr	s10, [r3, #-8]
 23f6304:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23f6308:	ee64 6aa6 	vmul.f32	s13, s9, s13
 23f630c:	eee5 6a25 	vfma.f32	s13, s10, s11
 23f6310:	eea5 6a24 	vfma.f32	s12, s10, s9
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f6314:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f6318:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f631c:	ed51 6a01 	vldr	s13, [r1, #-4]
 23f6320:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
 23f6324:	ed11 4a02 	vldr	s8, [r1, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f6328:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f632c:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23f6330:	eea4 6a05 	vfma.f32	s12, s8, s10
 23f6334:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f6338:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f633c:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f6340:	ed50 5a01 	vldr	s11, [r0, #-4]
 23f6344:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f6348:	eef0 9a43 	vmov.f32	s19, s6
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f634c:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f6350:	ee26 3ae5 	vnmul.f32	s6, s13, s11
 23f6354:	ed10 6a02 	vldr	s12, [r0, #-8]
 23f6358:	eea6 3a04 	vfma.f32	s6, s12, s8
 23f635c:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23f6360:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23f6364:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23f6368:	ee78 9a80 	vadd.f32	s19, s17, s0
        scratch[0] = *Fout0;
 23f636c:	ed14 7a02 	vldr	s14, [r4, #-8]
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23f6370:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f6374:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23f6378:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
 23f637c:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23f6380:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
 23f6384:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[0] = *Fout0;
 23f6388:	ed54 7a01 	vldr	s15, [r4, #-4]
        Fout0->r += scratch[7].r + scratch[8].r;
 23f638c:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
 23f6390:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f6394:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->i += scratch[7].i + scratch[8].i;
 23f6398:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23f639c:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
 23f63a0:	ed04 5a01 	vstr	s10, [r4, #-4]
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23f63a4:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f63a8:	eeb0 5a67 	vmov.f32	s10, s15
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23f63ac:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f63b0:	eee1 4a8a 	vfma.f32	s9, s3, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23f63b4:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f63b8:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f63bc:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f63c0:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23f63c4:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23f63c8:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f63cc:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23f63d0:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f63d4:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f63d8:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23f63dc:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23f63e0:	ee66 6a42 	vnmul.f32	s13, s12, s4
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23f63e4:	eee1 7a09 	vfma.f32	s15, s2, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f63e8:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f63ec:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f63f0:	ee35 0a44 	vsub.f32	s0, s10, s8
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23f63f4:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23f63f8:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23f63fc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 23f6400:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f6404:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f6408:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23f640c:	ed40 4a02 	vstr	s9, [r0, #-8]
 23f6410:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f6414:	ed03 6a02 	vstr	s12, [r3, #-8]
 23f6418:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f641c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 23f6420:	9a03      	ldr	r2, [sp, #12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f6422:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f6426:	4415      	add	r5, r2
 23f6428:	9a04      	ldr	r2, [sp, #16]
 23f642a:	ed01 7a02 	vstr	s14, [r1, #-8]
 23f642e:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
 23f6432:	f109 0901 	add.w	r9, r9, #1
 23f6436:	44d8      	add	r8, fp
 23f6438:	4496      	add	lr, r2
 23f643a:	44b4      	add	ip, r6
 23f643c:	e73b      	b.n	23f62b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3da>
 23f643e:	bf00      	nop
 23f6440:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
 23f6444:	682b      	ldr	r3, [r5, #0]
 23f6446:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 23f6448:	9b03      	ldr	r3, [sp, #12]
 23f644a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 23f644e:	4658      	mov	r0, fp
 23f6450:	f7fd fca3 	bl	23f3d9a <_Z9ei_mallocj>
 23f6454:	f04f 0c00 	mov.w	ip, #0
 23f6458:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
 23f645a:	4665      	mov	r5, ip
 23f645c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23f6460:	9207      	str	r2, [sp, #28]
 23f6462:	fb0a f206 	mul.w	r2, sl, r6
 23f6466:	4483      	add	fp, r0
 23f6468:	9206      	str	r2, [sp, #24]
 23f646a:	45aa      	cmp	sl, r5
 23f646c:	dd51      	ble.n	23f6512 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x636>
 23f646e:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f6470:	2200      	movs	r2, #0
 23f6472:	9903      	ldr	r1, [sp, #12]
 23f6474:	4291      	cmp	r1, r2
 23f6476:	dc38      	bgt.n	23f64ea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60e>
 23f6478:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f647a:	f04f 0800 	mov.w	r8, #0
 23f647e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 23f6482:	9903      	ldr	r1, [sp, #12]
 23f6484:	4541      	cmp	r1, r8
 23f6486:	dd41      	ble.n	23f650c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x630>
            Fout[ k ] = scratch[0];
 23f6488:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f648c:	e882 0003 	stmia.w	r2, {r0, r1}
            int twidx=0;
 23f6490:	2100      	movs	r1, #0
 23f6492:	f103 0008 	add.w	r0, r3, #8
            for (q=1;q<p;++q ) {
 23f6496:	4558      	cmp	r0, fp
 23f6498:	d031      	beq.n	23f64fe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x622>
                if (twidx>=Norig) twidx-=Norig;
 23f649a:	9f04      	ldr	r7, [sp, #16]
                twidx += fstride * k;
 23f649c:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
 23f649e:	428f      	cmp	r7, r1
 23f64a0:	bfd8      	it	le
 23f64a2:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f64a4:	9f05      	ldr	r7, [sp, #20]
 23f64a6:	ed90 5a01 	vldr	s10, [r0, #4]
 23f64aa:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
 23f64ae:	ed99 6a01 	vldr	s12, [r9, #4]
 23f64b2:	edd0 5a00 	vldr	s11, [r0]
 23f64b6:	edd9 7a00 	vldr	s15, [r9]
 23f64ba:	ee26 7a45 	vnmul.f32	s14, s12, s10
 23f64be:	eea5 7aa7 	vfma.f32	s14, s11, s15
 23f64c2:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
 23f64c6:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f64ca:	ee67 7a85 	vmul.f32	s15, s15, s10
                C_ADDTO( Fout[ k ] ,t);
 23f64ce:	ee37 7a26 	vadd.f32	s14, s14, s13
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f64d2:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
 23f64d6:	ed82 7a00 	vstr	s14, [r2]
 23f64da:	ed92 7a01 	vldr	s14, [r2, #4]
 23f64de:	ee77 7a27 	vadd.f32	s15, s14, s15
 23f64e2:	3008      	adds	r0, #8
 23f64e4:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
 23f64e8:	e7d5      	b.n	23f6496 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ba>
            scratch[q1] = Fout[ k  ];
 23f64ea:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 23f64ee:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
 23f64f2:	c903      	ldmia	r1, {r0, r1}
            k += m;
 23f64f4:	44d6      	add	lr, sl
            scratch[q1] = Fout[ k  ];
 23f64f6:	e888 0003 	stmia.w	r8, {r0, r1}
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f64fa:	3201      	adds	r2, #1
 23f64fc:	e7b9      	b.n	23f6472 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x596>
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f64fe:	9907      	ldr	r1, [sp, #28]
 23f6500:	f108 0801 	add.w	r8, r8, #1
 23f6504:	440a      	add	r2, r1
 23f6506:	9906      	ldr	r1, [sp, #24]
 23f6508:	448e      	add	lr, r1
 23f650a:	e7ba      	b.n	23f6482 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5a6>
    for ( u=0; u<m; ++u ) {
 23f650c:	3501      	adds	r5, #1
 23f650e:	44b4      	add	ip, r6
 23f6510:	e7ab      	b.n	23f646a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58e>
    KISS_FFT_TMP_FREE(scratch);
 23f6512:	4618      	mov	r0, r3
}
 23f6514:	b009      	add	sp, #36	; 0x24
 23f6516:	ecbd 8b08 	vpop	{d8-d11}
 23f651a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
 23f651e:	f7fd bc40 	b.w	23f3da2 <_Z7ei_freePv>
 23f6522:	bf00      	nop
 23f6524:	0000      	movs	r0, r0
	...

023f6528 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 23f6528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 23f652c:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
 23f6530:	ed2d 8b02 	vpush	{d8}
 23f6534:	4604      	mov	r4, r0
 23f6536:	460e      	mov	r6, r1
 23f6538:	4615      	mov	r5, r2
 23f653a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    size_t memneeded = sizeof(struct kiss_fft_state)
 23f653e:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
 23f6540:	2b00      	cmp	r3, #0
 23f6542:	d13d      	bne.n	23f65c0 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 23f6544:	4638      	mov	r0, r7
 23f6546:	f7fd fc28 	bl	23f3d9a <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
 23f654a:	4605      	mov	r5, r0
 23f654c:	b3d0      	cbz	r0, 23f65c4 <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
 23f654e:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
 23f6552:	f505 7a84 	add.w	sl, r5, #264	; 0x108
 23f6556:	2e00      	cmp	r6, #0
 23f6558:	d044      	beq.n	23f65e4 <kiss_fft_alloc+0xbc>
 23f655a:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
 23f655c:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
 23f6560:	4620      	mov	r0, r4
 23f6562:	f7f6 f977 	bl	23ec854 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23f6566:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
 23f6568:	4680      	mov	r8, r0
 23f656a:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23f656c:	f106 0608 	add.w	r6, r6, #8
 23f6570:	da67      	bge.n	23f6642 <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
 23f6572:	4650      	mov	r0, sl
 23f6574:	f7f6 f96e 	bl	23ec854 <__aeabi_i2d>
 23f6578:	a34b      	add	r3, pc, #300	; (adr r3, 23f66a8 <kiss_fft_alloc+0x180>)
 23f657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f657e:	f7f6 f9d3 	bl	23ec928 <__aeabi_dmul>
 23f6582:	4642      	mov	r2, r8
 23f6584:	464b      	mov	r3, r9
 23f6586:	f7f6 faf9 	bl	23ecb7c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23f658a:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
 23f658e:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23f6592:	f003 fa69 	bl	23f9a68 <cos>
 23f6596:	ec51 0b10 	vmov	r0, r1, d0
 23f659a:	f7f6 fcbd 	bl	23ecf18 <__aeabi_d2f>
 23f659e:	eeb0 0a48 	vmov.f32	s0, s16
 23f65a2:	eef0 0a68 	vmov.f32	s1, s17
 23f65a6:	f846 0c08 	str.w	r0, [r6, #-8]
 23f65aa:	f003 fbcd 	bl	23f9d48 <sin>
 23f65ae:	ec51 0b10 	vmov	r0, r1, d0
 23f65b2:	f7f6 fcb1 	bl	23ecf18 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23f65b6:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
 23f65ba:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
 23f65be:	e7cf      	b.n	23f6560 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
 23f65c0:	b952      	cbnz	r2, 23f65d8 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
 23f65c2:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
 23f65c4:	f1bb 0f00 	cmp.w	fp, #0
 23f65c8:	d001      	beq.n	23f65ce <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
 23f65ca:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
 23f65ce:	4628      	mov	r0, r5
 23f65d0:	ecbd 8b02 	vpop	{d8}
 23f65d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
 23f65d8:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
 23f65da:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
 23f65dc:	42ba      	cmp	r2, r7
 23f65de:	d2b6      	bcs.n	23f654e <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
 23f65e0:	2500      	movs	r5, #0
 23f65e2:	e7ef      	b.n	23f65c4 <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
 23f65e4:	4620      	mov	r0, r4
 23f65e6:	f7f6 f935 	bl	23ec854 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23f65ea:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
 23f65ec:	4680      	mov	r8, r0
 23f65ee:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23f65f0:	f10a 0a08 	add.w	sl, sl, #8
 23f65f4:	da25      	bge.n	23f6642 <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
 23f65f6:	4630      	mov	r0, r6
 23f65f8:	f7f6 f92c 	bl	23ec854 <__aeabi_i2d>
 23f65fc:	a32c      	add	r3, pc, #176	; (adr r3, 23f66b0 <kiss_fft_alloc+0x188>)
 23f65fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6602:	f7f6 f991 	bl	23ec928 <__aeabi_dmul>
 23f6606:	4642      	mov	r2, r8
 23f6608:	464b      	mov	r3, r9
 23f660a:	f7f6 fab7 	bl	23ecb7c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23f660e:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
 23f6612:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23f6616:	f003 fa27 	bl	23f9a68 <cos>
 23f661a:	ec51 0b10 	vmov	r0, r1, d0
 23f661e:	f7f6 fc7b 	bl	23ecf18 <__aeabi_d2f>
 23f6622:	eeb0 0a48 	vmov.f32	s0, s16
 23f6626:	eef0 0a68 	vmov.f32	s1, s17
 23f662a:	f84a 0c08 	str.w	r0, [sl, #-8]
 23f662e:	f003 fb8b 	bl	23f9d48 <sin>
 23f6632:	ec51 0b10 	vmov	r0, r1, d0
 23f6636:	f7f6 fc6f 	bl	23ecf18 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23f663a:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
 23f663c:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
 23f6640:	e7d0      	b.n	23f65e4 <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
 23f6642:	4620      	mov	r0, r4
 23f6644:	f7f6 f906 	bl	23ec854 <__aeabi_i2d>
 23f6648:	ec41 0b10 	vmov	d0, r0, r1
 23f664c:	f003 fbfe 	bl	23f9e4c <sqrt>
 23f6650:	f003 fa6a 	bl	23f9b28 <floor>
    int p=4;
 23f6654:	2604      	movs	r6, #4
    floor_sqrt = floor( sqrt((double)n) );
 23f6656:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
 23f665a:	f105 0a08 	add.w	sl, r5, #8
        while (n % p) {
 23f665e:	fb94 f3f6 	sdiv	r3, r4, r6
 23f6662:	fb06 4213 	mls	r2, r6, r3, r4
 23f6666:	b1aa      	cbz	r2, 23f6694 <kiss_fft_alloc+0x16c>
            switch (p) {
 23f6668:	2e02      	cmp	r6, #2
 23f666a:	d00f      	beq.n	23f668c <kiss_fft_alloc+0x164>
 23f666c:	2e04      	cmp	r6, #4
 23f666e:	d00f      	beq.n	23f6690 <kiss_fft_alloc+0x168>
                default: p += 2; break;
 23f6670:	3602      	adds	r6, #2
            if (p > floor_sqrt)
 23f6672:	4630      	mov	r0, r6
 23f6674:	f7f6 f8ee 	bl	23ec854 <__aeabi_i2d>
 23f6678:	4602      	mov	r2, r0
 23f667a:	460b      	mov	r3, r1
 23f667c:	4640      	mov	r0, r8
 23f667e:	4649      	mov	r1, r9
 23f6680:	f7f6 fbc4 	bl	23ece0c <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
 23f6684:	2800      	cmp	r0, #0
 23f6686:	bf18      	it	ne
 23f6688:	4626      	movne	r6, r4
 23f668a:	e7e8      	b.n	23f665e <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
 23f668c:	2603      	movs	r6, #3
 23f668e:	e7f0      	b.n	23f6672 <kiss_fft_alloc+0x14a>
            switch (p) {
 23f6690:	2602      	movs	r6, #2
 23f6692:	e7ee      	b.n	23f6672 <kiss_fft_alloc+0x14a>
    } while (n > 1);
 23f6694:	2b01      	cmp	r3, #1
        n /= p;
 23f6696:	461c      	mov	r4, r3
        *facbuf++ = n;
 23f6698:	e9ca 6300 	strd	r6, r3, [sl]
    } while (n > 1);
 23f669c:	dd92      	ble.n	23f65c4 <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
 23f669e:	f10a 0a08 	add.w	sl, sl, #8
 23f66a2:	e7dc      	b.n	23f665e <kiss_fft_alloc+0x136>
 23f66a4:	f3af 8000 	nop.w
 23f66a8:	54442d18 	.word	0x54442d18
 23f66ac:	401921fb 	.word	0x401921fb
 23f66b0:	54442d18 	.word	0x54442d18
 23f66b4:	c01921fb 	.word	0xc01921fb

023f66b8 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 23f66b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f66bc:	4604      	mov	r4, r0
    if (fin == fout) {
 23f66be:	4291      	cmp	r1, r2
{
 23f66c0:	460d      	mov	r5, r1
 23f66c2:	4610      	mov	r0, r2
 23f66c4:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23f66c6:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
 23f66ca:	d117      	bne.n	23f66fc <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 23f66cc:	6820      	ldr	r0, [r4, #0]
 23f66ce:	00c0      	lsls	r0, r0, #3
 23f66d0:	f7fd fb63 	bl	23f3d9a <_Z9ei_mallocj>
 23f66d4:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23f66d6:	463b      	mov	r3, r7
 23f66d8:	4629      	mov	r1, r5
 23f66da:	2201      	movs	r2, #1
 23f66dc:	e9cd 8400 	strd	r8, r4, [sp]
 23f66e0:	f7ff fbfc 	bl	23f5edc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 23f66e4:	6822      	ldr	r2, [r4, #0]
 23f66e6:	4631      	mov	r1, r6
 23f66e8:	4628      	mov	r0, r5
 23f66ea:	00d2      	lsls	r2, r2, #3
 23f66ec:	f004 ff17 	bl	23fb51e <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 23f66f0:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 23f66f2:	b002      	add	sp, #8
 23f66f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
 23f66f8:	f7fd bb53 	b.w	23f3da2 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 23f66fc:	2201      	movs	r2, #1
 23f66fe:	e9cd 8400 	strd	r8, r4, [sp]
 23f6702:	f7ff fbeb 	bl	23f5edc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 23f6706:	b002      	add	sp, #8
 23f6708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f670c <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
 23f670c:	2301      	movs	r3, #1
 23f670e:	f7ff bfd3 	b.w	23f66b8 <kiss_fft_stride>
 23f6712:	0000      	movs	r0, r0
 23f6714:	0000      	movs	r0, r0
	...

023f6718 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 23f6718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f671c:	ed2d 8b02 	vpush	{d8}
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
 23f6720:	2500      	movs	r5, #0
{
 23f6722:	b085      	sub	sp, #20

    if (nfft & 1) {
 23f6724:	f010 0a01 	ands.w	sl, r0, #1
{
 23f6728:	468b      	mov	fp, r1
 23f672a:	4614      	mov	r4, r2
 23f672c:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
 23f672e:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
 23f6730:	d009      	beq.n	23f6746 <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
 23f6732:	4863      	ldr	r0, [pc, #396]	; (23f68c0 <kiss_fftr_alloc+0x1a8>)
 23f6734:	f7fd fb04 	bl	23f3d40 <_Z9ei_printfPKcz>
        return NULL;
 23f6738:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
 23f673a:	4620      	mov	r0, r4
 23f673c:	b005      	add	sp, #20
 23f673e:	ecbd 8b02 	vpop	{d8}
 23f6742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
 23f6746:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 23f6748:	ab03      	add	r3, sp, #12
 23f674a:	4652      	mov	r2, sl
 23f674c:	4628      	mov	r0, r5
 23f674e:	f8cd a000 	str.w	sl, [sp]
 23f6752:	f7ff fee9 	bl	23f6528 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 23f6756:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 23f675a:	9b03      	ldr	r3, [sp, #12]
 23f675c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 23f6760:	1076      	asrs	r6, r6, #1
 23f6762:	330c      	adds	r3, #12
 23f6764:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
 23f6768:	2f00      	cmp	r7, #0
 23f676a:	d158      	bne.n	23f681e <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 23f676c:	4630      	mov	r0, r6
 23f676e:	f7fd fb14 	bl	23f3d9a <_Z9ei_mallocj>
 23f6772:	4604      	mov	r4, r0
    if (!st)
 23f6774:	2c00      	cmp	r4, #0
 23f6776:	d0e0      	beq.n	23f673a <kiss_fftr_alloc+0x22>
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 23f6778:	f104 020c 	add.w	r2, r4, #12
 23f677c:	6022      	str	r2, [r4, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23f677e:	9b03      	ldr	r3, [sp, #12]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f6780:	4659      	mov	r1, fp
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23f6782:	4413      	add	r3, r2
 23f6784:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 23f6786:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 23f678a:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f678c:	2300      	movs	r3, #0
 23f678e:	4628      	mov	r0, r5
 23f6790:	9300      	str	r3, [sp, #0]
        for (i = 0; i < nfft/2; ++i) {
 23f6792:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f6796:	ab03      	add	r3, sp, #12
 23f6798:	f7ff fec6 	bl	23f6528 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
 23f679c:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
 23f679e:	f1bb 0f00 	cmp.w	fp, #0
 23f67a2:	d042      	beq.n	23f682a <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
 23f67a4:	4557      	cmp	r7, sl
 23f67a6:	dd7d      	ble.n	23f68a4 <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23f67a8:	f10a 0a01 	add.w	sl, sl, #1
 23f67ac:	4650      	mov	r0, sl
 23f67ae:	f7f6 f851 	bl	23ec854 <__aeabi_i2d>
 23f67b2:	4680      	mov	r8, r0
 23f67b4:	4628      	mov	r0, r5
 23f67b6:	4689      	mov	r9, r1
 23f67b8:	f7f6 f84c 	bl	23ec854 <__aeabi_i2d>
 23f67bc:	4602      	mov	r2, r0
 23f67be:	460b      	mov	r3, r1
 23f67c0:	4640      	mov	r0, r8
 23f67c2:	4649      	mov	r1, r9
 23f67c4:	f7f6 f9da 	bl	23ecb7c <__aeabi_ddiv>
 23f67c8:	2200      	movs	r2, #0
 23f67ca:	4b3e      	ldr	r3, [pc, #248]	; (23f68c4 <kiss_fftr_alloc+0x1ac>)
 23f67cc:	f7f5 fef6 	bl	23ec5bc <__adddf3>
            double phase =
 23f67d0:	a337      	add	r3, pc, #220	; (adr r3, 23f68b0 <kiss_fftr_alloc+0x198>)
 23f67d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f67d6:	f7f6 f8a7 	bl	23ec928 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23f67da:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23f67de:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23f67e2:	f003 f941 	bl	23f9a68 <cos>
 23f67e6:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 23f67ea:	68a3      	ldr	r3, [r4, #8]
 23f67ec:	ec51 0b10 	vmov	r0, r1, d0
 23f67f0:	f1a8 0808 	sub.w	r8, r8, #8
 23f67f4:	eb03 0908 	add.w	r9, r3, r8
 23f67f8:	f7f6 fb8e 	bl	23ecf18 <__aeabi_d2f>
 23f67fc:	eeb0 0a48 	vmov.f32	s0, s16
 23f6800:	eef0 0a68 	vmov.f32	s1, s17
 23f6804:	f8c9 0000 	str.w	r0, [r9]
 23f6808:	f003 fa9e 	bl	23f9d48 <sin>
 23f680c:	68a3      	ldr	r3, [r4, #8]
 23f680e:	ec51 0b10 	vmov	r0, r1, d0
 23f6812:	4498      	add	r8, r3
 23f6814:	f7f6 fb80 	bl	23ecf18 <__aeabi_d2f>
 23f6818:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23f681c:	e7c2      	b.n	23f67a4 <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
 23f681e:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
 23f6820:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
 23f6822:	42b3      	cmp	r3, r6
 23f6824:	d2a6      	bcs.n	23f6774 <kiss_fftr_alloc+0x5c>
        return NULL;
 23f6826:	4654      	mov	r4, sl
 23f6828:	e787      	b.n	23f673a <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
 23f682a:	455f      	cmp	r7, fp
 23f682c:	dd3a      	ble.n	23f68a4 <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23f682e:	f10b 0b01 	add.w	fp, fp, #1
 23f6832:	4658      	mov	r0, fp
 23f6834:	f7f6 f80e 	bl	23ec854 <__aeabi_i2d>
 23f6838:	4680      	mov	r8, r0
 23f683a:	4628      	mov	r0, r5
 23f683c:	4689      	mov	r9, r1
 23f683e:	f7f6 f809 	bl	23ec854 <__aeabi_i2d>
 23f6842:	4602      	mov	r2, r0
 23f6844:	460b      	mov	r3, r1
 23f6846:	4640      	mov	r0, r8
 23f6848:	4649      	mov	r1, r9
 23f684a:	f7f6 f997 	bl	23ecb7c <__aeabi_ddiv>
 23f684e:	2200      	movs	r2, #0
 23f6850:	4b1c      	ldr	r3, [pc, #112]	; (23f68c4 <kiss_fftr_alloc+0x1ac>)
 23f6852:	f7f5 feb3 	bl	23ec5bc <__adddf3>
            double phase =
 23f6856:	a318      	add	r3, pc, #96	; (adr r3, 23f68b8 <kiss_fftr_alloc+0x1a0>)
 23f6858:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f685c:	f7f6 f864 	bl	23ec928 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23f6860:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23f6864:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23f6868:	f003 f8fe 	bl	23f9a68 <cos>
 23f686c:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 23f6870:	68a3      	ldr	r3, [r4, #8]
 23f6872:	ec51 0b10 	vmov	r0, r1, d0
 23f6876:	f1a8 0808 	sub.w	r8, r8, #8
 23f687a:	eb03 0908 	add.w	r9, r3, r8
 23f687e:	f7f6 fb4b 	bl	23ecf18 <__aeabi_d2f>
 23f6882:	eeb0 0a48 	vmov.f32	s0, s16
 23f6886:	eef0 0a68 	vmov.f32	s1, s17
 23f688a:	f8c9 0000 	str.w	r0, [r9]
 23f688e:	f003 fa5b 	bl	23f9d48 <sin>
 23f6892:	68a3      	ldr	r3, [r4, #8]
 23f6894:	ec51 0b10 	vmov	r0, r1, d0
 23f6898:	4498      	add	r8, r3
 23f689a:	f7f6 fb3d 	bl	23ecf18 <__aeabi_d2f>
 23f689e:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23f68a2:	e7c2      	b.n	23f682a <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
 23f68a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f68a6:	2b00      	cmp	r3, #0
 23f68a8:	f43f af47 	beq.w	23f673a <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
 23f68ac:	601e      	str	r6, [r3, #0]
 23f68ae:	e744      	b.n	23f673a <kiss_fftr_alloc+0x22>
 23f68b0:	54442d18 	.word	0x54442d18
 23f68b4:	400921fb 	.word	0x400921fb
 23f68b8:	54442d18 	.word	0x54442d18
 23f68bc:	c00921fb 	.word	0xc00921fb
 23f68c0:	023ff802 	.word	0x023ff802
 23f68c4:	3fe00000 	.word	0x3fe00000

023f68c8 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 23f68c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 23f68ca:	6803      	ldr	r3, [r0, #0]
{
 23f68cc:	4604      	mov	r4, r0
    if ( st->substate->inverse) {
 23f68ce:	685b      	ldr	r3, [r3, #4]
{
 23f68d0:	4616      	mov	r6, r2
    if ( st->substate->inverse) {
 23f68d2:	b123      	cbz	r3, 23f68de <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
 23f68d4:	4836      	ldr	r0, [pc, #216]	; (23f69b0 <kiss_fftr+0xe8>)
 23f68d6:	9101      	str	r1, [sp, #4]
 23f68d8:	f7fd fa32 	bl	23f3d40 <_Z9ei_printfPKcz>
 23f68dc:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
 23f68de:	6820      	ldr	r0, [r4, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23f68e0:	6862      	ldr	r2, [r4, #4]
    ncfft = st->substate->nfft;
 23f68e2:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23f68e4:	f7ff ff12 	bl	23f670c <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 23f68e8:	6863      	ldr	r3, [r4, #4]
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 23f68ea:	2200      	movs	r2, #0
    tdc.r = st->tmpbuf[0].r;
 23f68ec:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
 23f68f0:	ed93 7a01 	vldr	s14, [r3, #4]
    freqdata[0].r = tdc.r + tdc.i;
 23f68f4:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
 23f68f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f68fc:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
 23f6900:	edc6 6a00 	vstr	s13, [r6]
    freqdata[ncfft].r = tdc.r - tdc.i;
 23f6904:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].i = freqdata[0].i = 0;
 23f6908:	6072      	str	r2, [r6, #4]
 23f690a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
        fpk    = st->tmpbuf[k];
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f690c:	f06f 0207 	mvn.w	r2, #7
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6910:	2701      	movs	r7, #1

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f6912:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23f691a:	106d      	asrs	r5, r5, #1
 23f691c:	f106 0c08 	add.w	ip, r6, #8
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f6920:	1b92      	subs	r2, r2, r6
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6922:	42bd      	cmp	r5, r7
 23f6924:	f10c 0c08 	add.w	ip, ip, #8
 23f6928:	db3f      	blt.n	23f69aa <kiss_fftr+0xe2>
        fpk    = st->tmpbuf[k];
 23f692a:	6861      	ldr	r1, [r4, #4]
 23f692c:	00f8      	lsls	r0, r7, #3
 23f692e:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 23f6932:	edd6 5a01 	vldr	s11, [r6, #4]
 23f6936:	edd6 6a00 	vldr	s13, [r6]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f693a:	18d6      	adds	r6, r2, r3
 23f693c:	4431      	add	r1, r6
 23f693e:	edd1 4a00 	vldr	s9, [r1]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 23f6942:	edd1 7a01 	vldr	s15, [r1, #4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23f6946:	68a1      	ldr	r1, [r4, #8]
 23f6948:	3808      	subs	r0, #8
 23f694a:	4401      	add	r1, r0
        C_ADD( f1k, fpk , fpnk );
 23f694c:	ee34 7aa6 	vadd.f32	s14, s9, s13
 23f6950:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
 23f6954:	ee76 6ae4 	vsub.f32	s13, s13, s9
 23f6958:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23f695c:	edd1 4a01 	vldr	s9, [r1, #4]
 23f6960:	ed91 4a00 	vldr	s8, [r1]
 23f6964:	ee64 5ae7 	vnmul.f32	s11, s9, s15
 23f6968:	ee67 7a84 	vmul.f32	s15, s15, s8
 23f696c:	eee6 5a84 	vfma.f32	s11, s13, s8
 23f6970:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f6974:	ee77 6a25 	vadd.f32	s13, s14, s11
 23f6978:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f697c:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f6980:	ed4c 6a02 	vstr	s13, [ip, #-8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f6984:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f6988:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f698c:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f6990:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f6994:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f6998:	ed4c 6a01 	vstr	s13, [ip, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f699c:	3701      	adds	r7, #1
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f699e:	ed03 7a02 	vstr	s14, [r3, #-8]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f69a2:	ed43 7a01 	vstr	s15, [r3, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f69a6:	3b08      	subs	r3, #8
 23f69a8:	e7bb      	b.n	23f6922 <kiss_fftr+0x5a>
    }
}
 23f69aa:	b003      	add	sp, #12
 23f69ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f69ae:	bf00      	nop
 23f69b0:	023ff81b 	.word	0x023ff81b

023f69b4 <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23f69b4:	2001      	movs	r0, #1
 23f69b6:	4770      	bx	lr

023f69b8 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23f69b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f69bc:	4770      	bx	lr

023f69be <_ZN14Microphone_PDM6uninitEv>:
	}
 23f69be:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f69c2:	4770      	bx	lr

023f69c4 <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23f69c4:	f000 b8c8 	b.w	23f6b58 <_ZN22Microphone_PDM_RTL872x4initEv>

023f69c8 <_ZN14Microphone_PDM5startEv>:
		return Microphone_PDM_MCU::start();
 23f69c8:	f000 b8da 	b.w	23f6b80 <_ZN22Microphone_PDM_RTL872x5startEv>

023f69cc <_ZN14Microphone_PDM4stopEv>:
		return Microphone_PDM_MCU::stop();
 23f69cc:	f000 b8b9 	b.w	23f6b42 <_ZN22Microphone_PDM_RTL872x4stopEv>

023f69d0 <_ZNK14Microphone_PDM16samplesAvailableEv>:
		return Microphone_PDM_MCU::samplesAvailable();
 23f69d0:	f000 b8de 	b.w	23f6b90 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023f69d4 <_ZN14Microphone_PDM11copySamplesEPv>:
		return Microphone_PDM_MCU::copySamples(pSamples);
 23f69d4:	f000 b8e5 	b.w	23f6ba2 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>

023f69d8 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23f69d8:	b510      	push	{r4, lr}
 23f69da:	4604      	mov	r4, r0
 23f69dc:	4b02      	ldr	r3, [pc, #8]	; (23f69e8 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23f69de:	6003      	str	r3, [r0, #0]
 23f69e0:	f000 f8ae 	bl	23f6b40 <_ZN22Microphone_PDM_RTL872xD1Ev>
 23f69e4:	4620      	mov	r0, r4
 23f69e6:	bd10      	pop	{r4, pc}
 23f69e8:	023ff84c 	.word	0x023ff84c

023f69ec <_ZN18Microphone_PDM_MCUD0Ev>:
 23f69ec:	b510      	push	{r4, lr}
 23f69ee:	4604      	mov	r4, r0
 23f69f0:	f7ff fff2 	bl	23f69d8 <_ZN18Microphone_PDM_MCUD1Ev>
 23f69f4:	4620      	mov	r0, r4
 23f69f6:	2120      	movs	r1, #32
 23f69f8:	f7f6 fd11 	bl	23ed41e <_ZdlPvj>
 23f69fc:	4620      	mov	r0, r4
 23f69fe:	bd10      	pop	{r4, pc}

023f6a00 <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM *Microphone_PDM::_instance = NULL;

Microphone_PDM::Microphone_PDM() {
}

Microphone_PDM::~Microphone_PDM() {
 23f6a00:	b510      	push	{r4, lr}
 23f6a02:	4604      	mov	r4, r0
 23f6a04:	4b02      	ldr	r3, [pc, #8]	; (23f6a10 <_ZN14Microphone_PDMD1Ev+0x10>)
 23f6a06:	6003      	str	r3, [r0, #0]
 23f6a08:	f7ff ffe6 	bl	23f69d8 <_ZN18Microphone_PDM_MCUD1Ev>

}
 23f6a0c:	4620      	mov	r0, r4
 23f6a0e:	bd10      	pop	{r4, pc}
 23f6a10:	023ff87c 	.word	0x023ff87c

023f6a14 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23f6a14:	b510      	push	{r4, lr}
 23f6a16:	4604      	mov	r4, r0
}
 23f6a18:	f7ff fff2 	bl	23f6a00 <_ZN14Microphone_PDMD1Ev>
 23f6a1c:	4620      	mov	r0, r4
 23f6a1e:	2124      	movs	r1, #36	; 0x24
 23f6a20:	f7f6 fcfd 	bl	23ed41e <_ZdlPvj>
 23f6a24:	4620      	mov	r0, r4
 23f6a26:	bd10      	pop	{r4, pc}

023f6a28 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23f6a28:	2300      	movs	r3, #0
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f6a2a:	b530      	push	{r4, r5, lr}
 23f6a2c:	b085      	sub	sp, #20
 23f6a2e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23f6a30:	688b      	ldr	r3, [r1, #8]
 23f6a32:	4605      	mov	r5, r0
 23f6a34:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23f6a36:	b133      	cbz	r3, 23f6a46 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f6a38:	2202      	movs	r2, #2
 23f6a3a:	4668      	mov	r0, sp
 23f6a3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f6a3e:	68e3      	ldr	r3, [r4, #12]
 23f6a40:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f6a42:	68a3      	ldr	r3, [r4, #8]
 23f6a44:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23f6a46:	4669      	mov	r1, sp
 23f6a48:	4628      	mov	r0, r5
 23f6a4a:	f000 f8c1 	bl	23f6bd0 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23f6a4e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f6a50:	4668      	mov	r0, sp
 23f6a52:	f7fa f9fd 	bl	23f0e50 <_ZNSt14_Function_baseD1Ev>
	}
 23f6a56:	4620      	mov	r0, r4
 23f6a58:	b005      	add	sp, #20
 23f6a5a:	bd30      	pop	{r4, r5, pc}

023f6a5c <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23f6a5c:	b510      	push	{r4, lr}
 23f6a5e:	4604      	mov	r4, r0
 23f6a60:	f000 f8dc 	bl	23f6c1c <_ZN22Microphone_PDM_RTL872xC1Ev>
 23f6a64:	4b02      	ldr	r3, [pc, #8]	; (23f6a70 <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23f6a66:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23f6a68:	6023      	str	r3, [r4, #0]
 23f6a6a:	2300      	movs	r3, #0
 23f6a6c:	6223      	str	r3, [r4, #32]
}
 23f6a6e:	bd10      	pop	{r4, pc}
 23f6a70:	023ff87c 	.word	0x023ff87c

023f6a74 <_ZN14Microphone_PDM8instanceEv>:

// [static] 
Microphone_PDM &Microphone_PDM::instance() {
 23f6a74:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23f6a76:	4d06      	ldr	r5, [pc, #24]	; (23f6a90 <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23f6a78:	682b      	ldr	r3, [r5, #0]
 23f6a7a:	b93b      	cbnz	r3, 23f6a8c <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23f6a7c:	2024      	movs	r0, #36	; 0x24
 23f6a7e:	f7f6 fcc8 	bl	23ed412 <_Znwj>
 23f6a82:	4604      	mov	r4, r0
 23f6a84:	b108      	cbz	r0, 23f6a8a <_ZN14Microphone_PDM8instanceEv+0x16>
 23f6a86:	f7ff ffe9 	bl	23f6a5c <_ZN14Microphone_PDMC1Ev>
 23f6a8a:	602c      	str	r4, [r5, #0]
	}
	return *_instance;
}
 23f6a8c:	6828      	ldr	r0, [r5, #0]
 23f6a8e:	bd38      	pop	{r3, r4, r5, pc}
 23f6a90:	1007ae50 	.word	0x1007ae50

023f6a94 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>:
	}
	sampling = NULL;
}

size_t Microphone_PDM::getSampleSizeInBytes() const {
	switch(outputSize) {
 23f6a94:	6903      	ldr	r3, [r0, #16]
		case OutputSize::UNSIGNED_8:
			return 1;

		default:
			return 2;
 23f6a96:	2b00      	cmp	r3, #0
	}
}
 23f6a98:	bf0c      	ite	eq
 23f6a9a:	2001      	moveq	r0, #1
 23f6a9c:	2002      	movne	r0, #2
 23f6a9e:	4770      	bx	lr

023f6aa0 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:


void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f6aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6aa2:	4607      	mov	r7, r0
	const int16_t *srcEnd = &src[numSamples];

	size_t increment = copySrcIncrement();
 23f6aa4:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23f6aa6:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23f6aa8:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f6aaa:	460c      	mov	r4, r1
 23f6aac:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23f6aae:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23f6ab2:	4798      	blx	r3

	if (outputSize == OutputSize::UNSIGNED_8) {
 23f6ab4:	693b      	ldr	r3, [r7, #16]
 23f6ab6:	b9c3      	cbnz	r3, 23f6aea <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>

		// Scale the 16-bit signed values to an appropriate range for unsigned 8-bit values
		int16_t div = (int16_t)(1 << (size_t) range);
 23f6ab8:	2201      	movs	r2, #1
			if (val > 127) {
				val = 127;
			}

			// Add 128 to make unsigned 8-bit (offset)
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f6aba:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23f6abe:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23f6ac0:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23f6ac2:	409a      	lsls	r2, r3
 23f6ac4:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23f6ac6:	42b4      	cmp	r4, r6
 23f6ac8:	d236      	bcs.n	23f6b38 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23f6aca:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f6ace:	4404      	add	r4, r0
			int16_t val = *src / div;
 23f6ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 23f6ad4:	b21b      	sxth	r3, r3
			if (val < -128) {
 23f6ad6:	2b7f      	cmp	r3, #127	; 0x7f
 23f6ad8:	bfa8      	it	ge
 23f6ada:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f6adc:	428b      	cmp	r3, r1
 23f6ade:	bfb8      	it	lt
 23f6ae0:	460b      	movlt	r3, r1
 23f6ae2:	3b80      	subs	r3, #128	; 0x80
 23f6ae4:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23f6ae8:	e7ed      	b.n	23f6ac6 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
			dst += sizeof(uint8_t);
		}

	}
	else if (outputSize == OutputSize::SIGNED_16) {		
 23f6aea:	2b01      	cmp	r3, #1
 23f6aec:	d117      	bne.n	23f6b1e <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f6aee:	697a      	ldr	r2, [r7, #20]
			// Clip to signed 16-bit
			if (val < -32767) {
				val = -32767;
			}
			if (val > 32768) {
				val = 32868;
 23f6af0:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23f6af4:	4911      	ldr	r1, [pc, #68]	; (23f6b3c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f6af6:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23f6afa:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23f6afc:	42b4      	cmp	r4, r6
 23f6afe:	d21b      	bcs.n	23f6b38 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23f6b00:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f6b04:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23f6b06:	4093      	lsls	r3, r2
			if (val < -32767) {
 23f6b08:	428b      	cmp	r3, r1
 23f6b0a:	db06      	blt.n	23f6b1a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23f6b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23f6b10:	bfc8      	it	gt
 23f6b12:	463b      	movgt	r3, r7
			}

			*((int16_t *)dst) = (int16_t) val;
 23f6b14:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23f6b18:	e7f0      	b.n	23f6afc <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23f6b1a:	4b08      	ldr	r3, [pc, #32]	; (23f6b3c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23f6b1c:	e7fa      	b.n	23f6b14 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
			dst += sizeof(uint16_t);
		}
	}
	else {
		// OutputSize::RAW_SIGNED_16
		if (src != (int16_t *)dst || increment != 1) {
 23f6b1e:	42ac      	cmp	r4, r5
 23f6b20:	d101      	bne.n	23f6b26 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23f6b22:	2801      	cmp	r0, #1
 23f6b24:	d008      	beq.n	23f6b38 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			while(src < srcEnd) {
				*((int16_t *)dst) = *src;
				dst += sizeof(int16_t);
				src += increment;
 23f6b26:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23f6b28:	42b4      	cmp	r4, r6
 23f6b2a:	d205      	bcs.n	23f6b38 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23f6b2c:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23f6b30:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23f6b32:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23f6b36:	e7f7      	b.n	23f6b28 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
			}
		}
	}
}
 23f6b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6b3a:	bf00      	nop
 23f6b3c:	ffff8001 	.word	0xffff8001

023f6b40 <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23f6b40:	4770      	bx	lr

023f6b42 <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23f6b42:	2300      	movs	r3, #0
 23f6b44:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23f6b46:	4618      	mov	r0, r3
 23f6b48:	4770      	bx	lr

023f6b4a <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23f6b4a:	b510      	push	{r4, lr}
 23f6b4c:	4604      	mov	r4, r0
}
 23f6b4e:	2120      	movs	r1, #32
 23f6b50:	f7f6 fc65 	bl	23ed41e <_ZdlPvj>
 23f6b54:	4620      	mov	r0, r4
 23f6b56:	bd10      	pop	{r4, pc}

023f6b58 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23f6b58:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23f6b5a:	68c3      	ldr	r3, [r0, #12]
 23f6b5c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23f6b60:	d008      	beq.n	23f6b74 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f6b62:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23f6b66:	d005      	beq.n	23f6b74 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f6b68:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23f6b6c:	bf1c      	itt	ne
 23f6b6e:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23f6b72:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23f6b74:	7a01      	ldrb	r1, [r0, #8]
 23f6b76:	68c0      	ldr	r0, [r0, #12]
 23f6b78:	f7f9 feae 	bl	23f08d8 <dmic_setup>
}
 23f6b7c:	2000      	movs	r0, #0
 23f6b7e:	bd08      	pop	{r3, pc}

023f6b80 <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23f6b80:	b510      	push	{r4, lr}
 23f6b82:	4604      	mov	r4, r0
    dmic_flush();
 23f6b84:	f7f9 ff42 	bl	23f0a0c <dmic_flush>
    running = true;
 23f6b88:	2301      	movs	r3, #1
}
 23f6b8a:	2000      	movs	r0, #0
    running = true;
 23f6b8c:	7723      	strb	r3, [r4, #28]
}
 23f6b8e:	bd10      	pop	{r4, pc}

023f6b90 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23f6b90:	b508      	push	{r3, lr}
    if (!running) {
 23f6b92:	7f00      	ldrb	r0, [r0, #28]
 23f6b94:	b120      	cbz	r0, 23f6ba0 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23f6b96:	f7f9 ff43 	bl	23f0a20 <dmic_ready>
 23f6b9a:	3800      	subs	r0, #0
 23f6b9c:	bf18      	it	ne
 23f6b9e:	2001      	movne	r0, #1
}
 23f6ba0:	bd08      	pop	{r3, pc}

023f6ba2 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f6ba2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23f6ba4:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f6ba6:	4604      	mov	r4, r0
    if (!running) {
 23f6ba8:	b91d      	cbnz	r5, 23f6bb2 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23f6baa:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23f6bac:	4628      	mov	r0, r5
 23f6bae:	b003      	add	sp, #12
 23f6bb0:	bd30      	pop	{r4, r5, pc}
 23f6bb2:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23f6bb4:	f7f9 ff34 	bl	23f0a20 <dmic_ready>
	if (src) {
 23f6bb8:	4601      	mov	r1, r0
 23f6bba:	2800      	cmp	r0, #0
 23f6bbc:	d0f5      	beq.n	23f6baa <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23f6bbe:	4620      	mov	r0, r4
 23f6bc0:	9a01      	ldr	r2, [sp, #4]
 23f6bc2:	f7ff ff6d 	bl	23f6aa0 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23f6bc6:	2100      	movs	r1, #0
 23f6bc8:	4608      	mov	r0, r1
 23f6bca:	f7f9 ff2b 	bl	23f0a24 <dmic_read>
		return true;
 23f6bce:	e7ed      	b.n	23f6bac <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023f6bd0 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f6bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23f6bd2:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f6bd4:	4606      	mov	r6, r0
 23f6bd6:	460d      	mov	r5, r1
    if (!running) {
 23f6bd8:	b91f      	cbnz	r7, 23f6be2 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23f6bda:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23f6bdc:	4638      	mov	r0, r7
 23f6bde:	b003      	add	sp, #12
 23f6be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23f6be2:	f7f9 ff1d 	bl	23f0a20 <dmic_ready>
	if (src) {
 23f6be6:	4604      	mov	r4, r0
 23f6be8:	2800      	cmp	r0, #0
 23f6bea:	d0f6      	beq.n	23f6bda <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23f6bec:	4602      	mov	r2, r0
 23f6bee:	4601      	mov	r1, r0
 23f6bf0:	4630      	mov	r0, r6
 23f6bf2:	f7ff ff55 	bl	23f6aa0 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23f6bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 23f6bfa:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f6bfc:	68ab      	ldr	r3, [r5, #8]
 23f6bfe:	9400      	str	r4, [sp, #0]
 23f6c00:	b90b      	cbnz	r3, 23f6c06 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23f6c02:	f002 fe97 	bl	23f9934 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6c06:	4669      	mov	r1, sp
 23f6c08:	4628      	mov	r0, r5
 23f6c0a:	68eb      	ldr	r3, [r5, #12]
 23f6c0c:	aa01      	add	r2, sp, #4
 23f6c0e:	4798      	blx	r3
        dmic_read(NULL, 0);
 23f6c10:	2100      	movs	r1, #0
 23f6c12:	4608      	mov	r0, r1
 23f6c14:	f7f9 ff06 	bl	23f0a24 <dmic_read>
		return true;
 23f6c18:	e7e0      	b.n	23f6bdc <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>
	...

023f6c1c <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23f6c1c:	f04f 0c01 	mov.w	ip, #1
 23f6c20:	2104      	movs	r1, #4
 23f6c22:	4a06      	ldr	r2, [pc, #24]	; (23f6c3c <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23f6c24:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23f6c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 23f6c2c:	6042      	str	r2, [r0, #4]
 23f6c2e:	2200      	movs	r2, #0
 23f6c30:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23f6c32:	4903      	ldr	r1, [pc, #12]	; (23f6c40 <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23f6c34:	7202      	strb	r2, [r0, #8]
 23f6c36:	6001      	str	r1, [r0, #0]
 23f6c38:	7702      	strb	r2, [r0, #28]
}
 23f6c3a:	4770      	bx	lr
 23f6c3c:	000c000b 	.word	0x000c000b
 23f6c40:	023ff8ac 	.word	0x023ff8ac

023f6c44 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23f6c44:	2300      	movs	r3, #0
 23f6c46:	4802      	ldr	r0, [pc, #8]	; (23f6c50 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23f6c48:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23f6c4a:	f000 b97d 	b.w	23f6f48 <os_mutex_create>
 23f6c4e:	bf00      	nop
 23f6c50:	1007ae54 	.word	0x1007ae54

023f6c54 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f6c54:	b509      	push	{r0, r3, lr}
 23f6c56:	4804      	ldr	r0, [pc, #16]	; (23f6c68 <HAL_USB_USART_Init+0x14>)
 23f6c58:	6800      	ldr	r0, [r0, #0]
 23f6c5a:	4b04      	ldr	r3, [pc, #16]	; (23f6c6c <HAL_USB_USART_Init+0x18>)
 23f6c5c:	4403      	add	r3, r0
 23f6c5e:	681b      	ldr	r3, [r3, #0]
 23f6c60:	681b      	ldr	r3, [r3, #0]
 23f6c62:	9302      	str	r3, [sp, #8]
 23f6c64:	bd09      	pop	{r0, r3, pc}
 23f6c66:	0000      	.short	0x0000
 23f6c68:	1007996c 	.word	0x1007996c
 23f6c6c:	00000034 	.word	0x00000034

023f6c70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f6c70:	b509      	push	{r0, r3, lr}
 23f6c72:	4804      	ldr	r0, [pc, #16]	; (23f6c84 <HAL_USB_USART_Begin+0x14>)
 23f6c74:	6800      	ldr	r0, [r0, #0]
 23f6c76:	4b04      	ldr	r3, [pc, #16]	; (23f6c88 <HAL_USB_USART_Begin+0x18>)
 23f6c78:	4403      	add	r3, r0
 23f6c7a:	681b      	ldr	r3, [r3, #0]
 23f6c7c:	685b      	ldr	r3, [r3, #4]
 23f6c7e:	9302      	str	r3, [sp, #8]
 23f6c80:	bd09      	pop	{r0, r3, pc}
 23f6c82:	0000      	.short	0x0000
 23f6c84:	1007996c 	.word	0x1007996c
 23f6c88:	00000034 	.word	0x00000034

023f6c8c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f6c8c:	b509      	push	{r0, r3, lr}
 23f6c8e:	4804      	ldr	r0, [pc, #16]	; (23f6ca0 <HAL_USB_USART_End+0x14>)
 23f6c90:	6800      	ldr	r0, [r0, #0]
 23f6c92:	4b04      	ldr	r3, [pc, #16]	; (23f6ca4 <HAL_USB_USART_End+0x18>)
 23f6c94:	4403      	add	r3, r0
 23f6c96:	681b      	ldr	r3, [r3, #0]
 23f6c98:	689b      	ldr	r3, [r3, #8]
 23f6c9a:	9302      	str	r3, [sp, #8]
 23f6c9c:	bd09      	pop	{r0, r3, pc}
 23f6c9e:	0000      	.short	0x0000
 23f6ca0:	1007996c 	.word	0x1007996c
 23f6ca4:	00000034 	.word	0x00000034

023f6ca8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f6ca8:	b509      	push	{r0, r3, lr}
 23f6caa:	4804      	ldr	r0, [pc, #16]	; (23f6cbc <HAL_USB_USART_Available_Data+0x14>)
 23f6cac:	6800      	ldr	r0, [r0, #0]
 23f6cae:	4b04      	ldr	r3, [pc, #16]	; (23f6cc0 <HAL_USB_USART_Available_Data+0x18>)
 23f6cb0:	4403      	add	r3, r0
 23f6cb2:	681b      	ldr	r3, [r3, #0]
 23f6cb4:	691b      	ldr	r3, [r3, #16]
 23f6cb6:	9302      	str	r3, [sp, #8]
 23f6cb8:	bd09      	pop	{r0, r3, pc}
 23f6cba:	0000      	.short	0x0000
 23f6cbc:	1007996c 	.word	0x1007996c
 23f6cc0:	00000034 	.word	0x00000034

023f6cc4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f6cc4:	b509      	push	{r0, r3, lr}
 23f6cc6:	4804      	ldr	r0, [pc, #16]	; (23f6cd8 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f6cc8:	6800      	ldr	r0, [r0, #0]
 23f6cca:	4b04      	ldr	r3, [pc, #16]	; (23f6cdc <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f6ccc:	4403      	add	r3, r0
 23f6cce:	681b      	ldr	r3, [r3, #0]
 23f6cd0:	695b      	ldr	r3, [r3, #20]
 23f6cd2:	9302      	str	r3, [sp, #8]
 23f6cd4:	bd09      	pop	{r0, r3, pc}
 23f6cd6:	0000      	.short	0x0000
 23f6cd8:	1007996c 	.word	0x1007996c
 23f6cdc:	00000034 	.word	0x00000034

023f6ce0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f6ce0:	b509      	push	{r0, r3, lr}
 23f6ce2:	4804      	ldr	r0, [pc, #16]	; (23f6cf4 <HAL_USB_USART_Receive_Data+0x14>)
 23f6ce4:	6800      	ldr	r0, [r0, #0]
 23f6ce6:	4b04      	ldr	r3, [pc, #16]	; (23f6cf8 <HAL_USB_USART_Receive_Data+0x18>)
 23f6ce8:	4403      	add	r3, r0
 23f6cea:	681b      	ldr	r3, [r3, #0]
 23f6cec:	699b      	ldr	r3, [r3, #24]
 23f6cee:	9302      	str	r3, [sp, #8]
 23f6cf0:	bd09      	pop	{r0, r3, pc}
 23f6cf2:	0000      	.short	0x0000
 23f6cf4:	1007996c 	.word	0x1007996c
 23f6cf8:	00000034 	.word	0x00000034

023f6cfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f6cfc:	b509      	push	{r0, r3, lr}
 23f6cfe:	4804      	ldr	r0, [pc, #16]	; (23f6d10 <HAL_USB_USART_Send_Data+0x14>)
 23f6d00:	6800      	ldr	r0, [r0, #0]
 23f6d02:	4b04      	ldr	r3, [pc, #16]	; (23f6d14 <HAL_USB_USART_Send_Data+0x18>)
 23f6d04:	4403      	add	r3, r0
 23f6d06:	681b      	ldr	r3, [r3, #0]
 23f6d08:	69db      	ldr	r3, [r3, #28]
 23f6d0a:	9302      	str	r3, [sp, #8]
 23f6d0c:	bd09      	pop	{r0, r3, pc}
 23f6d0e:	0000      	.short	0x0000
 23f6d10:	1007996c 	.word	0x1007996c
 23f6d14:	00000034 	.word	0x00000034

023f6d18 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f6d18:	b509      	push	{r0, r3, lr}
 23f6d1a:	4804      	ldr	r0, [pc, #16]	; (23f6d2c <HAL_USB_USART_Flush_Data+0x14>)
 23f6d1c:	6800      	ldr	r0, [r0, #0]
 23f6d1e:	4b04      	ldr	r3, [pc, #16]	; (23f6d30 <HAL_USB_USART_Flush_Data+0x18>)
 23f6d20:	4403      	add	r3, r0
 23f6d22:	681b      	ldr	r3, [r3, #0]
 23f6d24:	6a1b      	ldr	r3, [r3, #32]
 23f6d26:	9302      	str	r3, [sp, #8]
 23f6d28:	bd09      	pop	{r0, r3, pc}
 23f6d2a:	0000      	.short	0x0000
 23f6d2c:	1007996c 	.word	0x1007996c
 23f6d30:	00000034 	.word	0x00000034

023f6d34 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f6d34:	b509      	push	{r0, r3, lr}
 23f6d36:	4804      	ldr	r0, [pc, #16]	; (23f6d48 <HAL_USB_USART_Is_Connected+0x14>)
 23f6d38:	6800      	ldr	r0, [r0, #0]
 23f6d3a:	4b04      	ldr	r3, [pc, #16]	; (23f6d4c <HAL_USB_USART_Is_Connected+0x18>)
 23f6d3c:	4403      	add	r3, r0
 23f6d3e:	681b      	ldr	r3, [r3, #0]
 23f6d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6d42:	9302      	str	r3, [sp, #8]
 23f6d44:	bd09      	pop	{r0, r3, pc}
 23f6d46:	0000      	.short	0x0000
 23f6d48:	1007996c 	.word	0x1007996c
 23f6d4c:	00000034 	.word	0x00000034

023f6d50 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f6d50:	b509      	push	{r0, r3, lr}
 23f6d52:	4804      	ldr	r0, [pc, #16]	; (23f6d64 <hal_i2c_write+0x14>)
 23f6d54:	6800      	ldr	r0, [r0, #0]
 23f6d56:	4b04      	ldr	r3, [pc, #16]	; (23f6d68 <hal_i2c_write+0x18>)
 23f6d58:	4403      	add	r3, r0
 23f6d5a:	681b      	ldr	r3, [r3, #0]
 23f6d5c:	6a1b      	ldr	r3, [r3, #32]
 23f6d5e:	9302      	str	r3, [sp, #8]
 23f6d60:	bd09      	pop	{r0, r3, pc}
 23f6d62:	0000      	.short	0x0000
 23f6d64:	1007996c 	.word	0x1007996c
 23f6d68:	00000010 	.word	0x00000010

023f6d6c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f6d6c:	b509      	push	{r0, r3, lr}
 23f6d6e:	4804      	ldr	r0, [pc, #16]	; (23f6d80 <hal_i2c_available+0x14>)
 23f6d70:	6800      	ldr	r0, [r0, #0]
 23f6d72:	4b04      	ldr	r3, [pc, #16]	; (23f6d84 <hal_i2c_available+0x18>)
 23f6d74:	4403      	add	r3, r0
 23f6d76:	681b      	ldr	r3, [r3, #0]
 23f6d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f6d7a:	9302      	str	r3, [sp, #8]
 23f6d7c:	bd09      	pop	{r0, r3, pc}
 23f6d7e:	0000      	.short	0x0000
 23f6d80:	1007996c 	.word	0x1007996c
 23f6d84:	00000010 	.word	0x00000010

023f6d88 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f6d88:	b509      	push	{r0, r3, lr}
 23f6d8a:	4804      	ldr	r0, [pc, #16]	; (23f6d9c <hal_i2c_read+0x14>)
 23f6d8c:	6800      	ldr	r0, [r0, #0]
 23f6d8e:	4b04      	ldr	r3, [pc, #16]	; (23f6da0 <hal_i2c_read+0x18>)
 23f6d90:	4403      	add	r3, r0
 23f6d92:	681b      	ldr	r3, [r3, #0]
 23f6d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6d96:	9302      	str	r3, [sp, #8]
 23f6d98:	bd09      	pop	{r0, r3, pc}
 23f6d9a:	0000      	.short	0x0000
 23f6d9c:	1007996c 	.word	0x1007996c
 23f6da0:	00000010 	.word	0x00000010

023f6da4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f6da4:	b509      	push	{r0, r3, lr}
 23f6da6:	4804      	ldr	r0, [pc, #16]	; (23f6db8 <hal_i2c_peek+0x14>)
 23f6da8:	6800      	ldr	r0, [r0, #0]
 23f6daa:	4b04      	ldr	r3, [pc, #16]	; (23f6dbc <hal_i2c_peek+0x18>)
 23f6dac:	4403      	add	r3, r0
 23f6dae:	681b      	ldr	r3, [r3, #0]
 23f6db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6db2:	9302      	str	r3, [sp, #8]
 23f6db4:	bd09      	pop	{r0, r3, pc}
 23f6db6:	0000      	.short	0x0000
 23f6db8:	1007996c 	.word	0x1007996c
 23f6dbc:	00000010 	.word	0x00000010

023f6dc0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f6dc0:	b509      	push	{r0, r3, lr}
 23f6dc2:	4804      	ldr	r0, [pc, #16]	; (23f6dd4 <hal_i2c_flush+0x14>)
 23f6dc4:	6800      	ldr	r0, [r0, #0]
 23f6dc6:	4b04      	ldr	r3, [pc, #16]	; (23f6dd8 <hal_i2c_flush+0x18>)
 23f6dc8:	4403      	add	r3, r0
 23f6dca:	681b      	ldr	r3, [r3, #0]
 23f6dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6dce:	9302      	str	r3, [sp, #8]
 23f6dd0:	bd09      	pop	{r0, r3, pc}
 23f6dd2:	0000      	.short	0x0000
 23f6dd4:	1007996c 	.word	0x1007996c
 23f6dd8:	00000010 	.word	0x00000010

023f6ddc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f6ddc:	b509      	push	{r0, r3, lr}
 23f6dde:	4804      	ldr	r0, [pc, #16]	; (23f6df0 <hal_i2c_is_enabled+0x14>)
 23f6de0:	6800      	ldr	r0, [r0, #0]
 23f6de2:	4b04      	ldr	r3, [pc, #16]	; (23f6df4 <hal_i2c_is_enabled+0x18>)
 23f6de4:	4403      	add	r3, r0
 23f6de6:	681b      	ldr	r3, [r3, #0]
 23f6de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f6dea:	9302      	str	r3, [sp, #8]
 23f6dec:	bd09      	pop	{r0, r3, pc}
 23f6dee:	0000      	.short	0x0000
 23f6df0:	1007996c 	.word	0x1007996c
 23f6df4:	00000010 	.word	0x00000010

023f6df8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f6df8:	b509      	push	{r0, r3, lr}
 23f6dfa:	4804      	ldr	r0, [pc, #16]	; (23f6e0c <hal_i2c_init+0x14>)
 23f6dfc:	6800      	ldr	r0, [r0, #0]
 23f6dfe:	4b04      	ldr	r3, [pc, #16]	; (23f6e10 <hal_i2c_init+0x18>)
 23f6e00:	4403      	add	r3, r0
 23f6e02:	681b      	ldr	r3, [r3, #0]
 23f6e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f6e06:	9302      	str	r3, [sp, #8]
 23f6e08:	bd09      	pop	{r0, r3, pc}
 23f6e0a:	0000      	.short	0x0000
 23f6e0c:	1007996c 	.word	0x1007996c
 23f6e10:	00000010 	.word	0x00000010

023f6e14 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f6e14:	b509      	push	{r0, r3, lr}
 23f6e16:	4804      	ldr	r0, [pc, #16]	; (23f6e28 <hal_usart_end+0x14>)
 23f6e18:	6800      	ldr	r0, [r0, #0]
 23f6e1a:	4b04      	ldr	r3, [pc, #16]	; (23f6e2c <hal_usart_end+0x18>)
 23f6e1c:	4403      	add	r3, r0
 23f6e1e:	681b      	ldr	r3, [r3, #0]
 23f6e20:	689b      	ldr	r3, [r3, #8]
 23f6e22:	9302      	str	r3, [sp, #8]
 23f6e24:	bd09      	pop	{r0, r3, pc}
 23f6e26:	0000      	.short	0x0000
 23f6e28:	1007996c 	.word	0x1007996c
 23f6e2c:	00000024 	.word	0x00000024

023f6e30 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f6e30:	b509      	push	{r0, r3, lr}
 23f6e32:	4804      	ldr	r0, [pc, #16]	; (23f6e44 <hal_usart_write+0x14>)
 23f6e34:	6800      	ldr	r0, [r0, #0]
 23f6e36:	4b04      	ldr	r3, [pc, #16]	; (23f6e48 <hal_usart_write+0x18>)
 23f6e38:	4403      	add	r3, r0
 23f6e3a:	681b      	ldr	r3, [r3, #0]
 23f6e3c:	68db      	ldr	r3, [r3, #12]
 23f6e3e:	9302      	str	r3, [sp, #8]
 23f6e40:	bd09      	pop	{r0, r3, pc}
 23f6e42:	0000      	.short	0x0000
 23f6e44:	1007996c 	.word	0x1007996c
 23f6e48:	00000024 	.word	0x00000024

023f6e4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f6e4c:	b509      	push	{r0, r3, lr}
 23f6e4e:	4804      	ldr	r0, [pc, #16]	; (23f6e60 <hal_usart_available+0x14>)
 23f6e50:	6800      	ldr	r0, [r0, #0]
 23f6e52:	4b04      	ldr	r3, [pc, #16]	; (23f6e64 <hal_usart_available+0x18>)
 23f6e54:	4403      	add	r3, r0
 23f6e56:	681b      	ldr	r3, [r3, #0]
 23f6e58:	691b      	ldr	r3, [r3, #16]
 23f6e5a:	9302      	str	r3, [sp, #8]
 23f6e5c:	bd09      	pop	{r0, r3, pc}
 23f6e5e:	0000      	.short	0x0000
 23f6e60:	1007996c 	.word	0x1007996c
 23f6e64:	00000024 	.word	0x00000024

023f6e68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f6e68:	b509      	push	{r0, r3, lr}
 23f6e6a:	4804      	ldr	r0, [pc, #16]	; (23f6e7c <hal_usart_read+0x14>)
 23f6e6c:	6800      	ldr	r0, [r0, #0]
 23f6e6e:	4b04      	ldr	r3, [pc, #16]	; (23f6e80 <hal_usart_read+0x18>)
 23f6e70:	4403      	add	r3, r0
 23f6e72:	681b      	ldr	r3, [r3, #0]
 23f6e74:	695b      	ldr	r3, [r3, #20]
 23f6e76:	9302      	str	r3, [sp, #8]
 23f6e78:	bd09      	pop	{r0, r3, pc}
 23f6e7a:	0000      	.short	0x0000
 23f6e7c:	1007996c 	.word	0x1007996c
 23f6e80:	00000024 	.word	0x00000024

023f6e84 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f6e84:	b509      	push	{r0, r3, lr}
 23f6e86:	4804      	ldr	r0, [pc, #16]	; (23f6e98 <hal_usart_peek+0x14>)
 23f6e88:	6800      	ldr	r0, [r0, #0]
 23f6e8a:	4b04      	ldr	r3, [pc, #16]	; (23f6e9c <hal_usart_peek+0x18>)
 23f6e8c:	4403      	add	r3, r0
 23f6e8e:	681b      	ldr	r3, [r3, #0]
 23f6e90:	699b      	ldr	r3, [r3, #24]
 23f6e92:	9302      	str	r3, [sp, #8]
 23f6e94:	bd09      	pop	{r0, r3, pc}
 23f6e96:	0000      	.short	0x0000
 23f6e98:	1007996c 	.word	0x1007996c
 23f6e9c:	00000024 	.word	0x00000024

023f6ea0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f6ea0:	b509      	push	{r0, r3, lr}
 23f6ea2:	4804      	ldr	r0, [pc, #16]	; (23f6eb4 <hal_usart_flush+0x14>)
 23f6ea4:	6800      	ldr	r0, [r0, #0]
 23f6ea6:	4b04      	ldr	r3, [pc, #16]	; (23f6eb8 <hal_usart_flush+0x18>)
 23f6ea8:	4403      	add	r3, r0
 23f6eaa:	681b      	ldr	r3, [r3, #0]
 23f6eac:	69db      	ldr	r3, [r3, #28]
 23f6eae:	9302      	str	r3, [sp, #8]
 23f6eb0:	bd09      	pop	{r0, r3, pc}
 23f6eb2:	0000      	.short	0x0000
 23f6eb4:	1007996c 	.word	0x1007996c
 23f6eb8:	00000024 	.word	0x00000024

023f6ebc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f6ebc:	b509      	push	{r0, r3, lr}
 23f6ebe:	4804      	ldr	r0, [pc, #16]	; (23f6ed0 <hal_usart_is_enabled+0x14>)
 23f6ec0:	6800      	ldr	r0, [r0, #0]
 23f6ec2:	4b04      	ldr	r3, [pc, #16]	; (23f6ed4 <hal_usart_is_enabled+0x18>)
 23f6ec4:	4403      	add	r3, r0
 23f6ec6:	681b      	ldr	r3, [r3, #0]
 23f6ec8:	6a1b      	ldr	r3, [r3, #32]
 23f6eca:	9302      	str	r3, [sp, #8]
 23f6ecc:	bd09      	pop	{r0, r3, pc}
 23f6ece:	0000      	.short	0x0000
 23f6ed0:	1007996c 	.word	0x1007996c
 23f6ed4:	00000024 	.word	0x00000024

023f6ed8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f6ed8:	b509      	push	{r0, r3, lr}
 23f6eda:	4804      	ldr	r0, [pc, #16]	; (23f6eec <hal_usart_available_data_for_write+0x14>)
 23f6edc:	6800      	ldr	r0, [r0, #0]
 23f6ede:	4b04      	ldr	r3, [pc, #16]	; (23f6ef0 <hal_usart_available_data_for_write+0x18>)
 23f6ee0:	4403      	add	r3, r0
 23f6ee2:	681b      	ldr	r3, [r3, #0]
 23f6ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6ee6:	9302      	str	r3, [sp, #8]
 23f6ee8:	bd09      	pop	{r0, r3, pc}
 23f6eea:	0000      	.short	0x0000
 23f6eec:	1007996c 	.word	0x1007996c
 23f6ef0:	00000024 	.word	0x00000024

023f6ef4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f6ef4:	b509      	push	{r0, r3, lr}
 23f6ef6:	4804      	ldr	r0, [pc, #16]	; (23f6f08 <hal_usart_begin_config+0x14>)
 23f6ef8:	6800      	ldr	r0, [r0, #0]
 23f6efa:	4b04      	ldr	r3, [pc, #16]	; (23f6f0c <hal_usart_begin_config+0x18>)
 23f6efc:	4403      	add	r3, r0
 23f6efe:	681b      	ldr	r3, [r3, #0]
 23f6f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6f02:	9302      	str	r3, [sp, #8]
 23f6f04:	bd09      	pop	{r0, r3, pc}
 23f6f06:	0000      	.short	0x0000
 23f6f08:	1007996c 	.word	0x1007996c
 23f6f0c:	00000024 	.word	0x00000024

023f6f10 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f6f10:	b509      	push	{r0, r3, lr}
 23f6f12:	4804      	ldr	r0, [pc, #16]	; (23f6f24 <hal_usart_init_ex+0x14>)
 23f6f14:	6800      	ldr	r0, [r0, #0]
 23f6f16:	4b04      	ldr	r3, [pc, #16]	; (23f6f28 <hal_usart_init_ex+0x18>)
 23f6f18:	4403      	add	r3, r0
 23f6f1a:	681b      	ldr	r3, [r3, #0]
 23f6f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f6f1e:	9302      	str	r3, [sp, #8]
 23f6f20:	bd09      	pop	{r0, r3, pc}
 23f6f22:	0000      	.short	0x0000
 23f6f24:	1007996c 	.word	0x1007996c
 23f6f28:	00000024 	.word	0x00000024

023f6f2c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f6f2c:	b509      	push	{r0, r3, lr}
 23f6f2e:	4804      	ldr	r0, [pc, #16]	; (23f6f40 <inet_inet_ntop+0x14>)
 23f6f30:	6800      	ldr	r0, [r0, #0]
 23f6f32:	4b04      	ldr	r3, [pc, #16]	; (23f6f44 <inet_inet_ntop+0x18>)
 23f6f34:	4403      	add	r3, r0
 23f6f36:	681b      	ldr	r3, [r3, #0]
 23f6f38:	695b      	ldr	r3, [r3, #20]
 23f6f3a:	9302      	str	r3, [sp, #8]
 23f6f3c:	bd09      	pop	{r0, r3, pc}
 23f6f3e:	0000      	.short	0x0000
 23f6f40:	1007996c 	.word	0x1007996c
 23f6f44:	0000004c 	.word	0x0000004c

023f6f48 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f6f48:	b509      	push	{r0, r3, lr}
 23f6f4a:	4804      	ldr	r0, [pc, #16]	; (23f6f5c <os_mutex_create+0x14>)
 23f6f4c:	6800      	ldr	r0, [r0, #0]
 23f6f4e:	4b04      	ldr	r3, [pc, #16]	; (23f6f60 <os_mutex_create+0x18>)
 23f6f50:	4403      	add	r3, r0
 23f6f52:	681b      	ldr	r3, [r3, #0]
 23f6f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6f56:	9302      	str	r3, [sp, #8]
 23f6f58:	bd09      	pop	{r0, r3, pc}
 23f6f5a:	0000      	.short	0x0000
 23f6f5c:	1007996c 	.word	0x1007996c
 23f6f60:	00000030 	.word	0x00000030

023f6f64 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f6f64:	b509      	push	{r0, r3, lr}
 23f6f66:	4804      	ldr	r0, [pc, #16]	; (23f6f78 <os_mutex_recursive_create+0x14>)
 23f6f68:	6800      	ldr	r0, [r0, #0]
 23f6f6a:	4b04      	ldr	r3, [pc, #16]	; (23f6f7c <os_mutex_recursive_create+0x18>)
 23f6f6c:	4403      	add	r3, r0
 23f6f6e:	681b      	ldr	r3, [r3, #0]
 23f6f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6f72:	9302      	str	r3, [sp, #8]
 23f6f74:	bd09      	pop	{r0, r3, pc}
 23f6f76:	0000      	.short	0x0000
 23f6f78:	1007996c 	.word	0x1007996c
 23f6f7c:	00000030 	.word	0x00000030

023f6f80 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f6f80:	b509      	push	{r0, r3, lr}
 23f6f82:	4804      	ldr	r0, [pc, #16]	; (23f6f94 <os_mutex_recursive_destroy+0x14>)
 23f6f84:	6800      	ldr	r0, [r0, #0]
 23f6f86:	4b04      	ldr	r3, [pc, #16]	; (23f6f98 <os_mutex_recursive_destroy+0x18>)
 23f6f88:	4403      	add	r3, r0
 23f6f8a:	681b      	ldr	r3, [r3, #0]
 23f6f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f6f8e:	9302      	str	r3, [sp, #8]
 23f6f90:	bd09      	pop	{r0, r3, pc}
 23f6f92:	0000      	.short	0x0000
 23f6f94:	1007996c 	.word	0x1007996c
 23f6f98:	00000030 	.word	0x00000030

023f6f9c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f6f9c:	b509      	push	{r0, r3, lr}
 23f6f9e:	4804      	ldr	r0, [pc, #16]	; (23f6fb0 <os_mutex_recursive_lock+0x14>)
 23f6fa0:	6800      	ldr	r0, [r0, #0]
 23f6fa2:	4b04      	ldr	r3, [pc, #16]	; (23f6fb4 <os_mutex_recursive_lock+0x18>)
 23f6fa4:	4403      	add	r3, r0
 23f6fa6:	681b      	ldr	r3, [r3, #0]
 23f6fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f6faa:	9302      	str	r3, [sp, #8]
 23f6fac:	bd09      	pop	{r0, r3, pc}
 23f6fae:	0000      	.short	0x0000
 23f6fb0:	1007996c 	.word	0x1007996c
 23f6fb4:	00000030 	.word	0x00000030

023f6fb8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f6fb8:	b509      	push	{r0, r3, lr}
 23f6fba:	4804      	ldr	r0, [pc, #16]	; (23f6fcc <os_mutex_recursive_unlock+0x14>)
 23f6fbc:	6800      	ldr	r0, [r0, #0]
 23f6fbe:	4b04      	ldr	r3, [pc, #16]	; (23f6fd0 <os_mutex_recursive_unlock+0x18>)
 23f6fc0:	4403      	add	r3, r0
 23f6fc2:	681b      	ldr	r3, [r3, #0]
 23f6fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6fc6:	9302      	str	r3, [sp, #8]
 23f6fc8:	bd09      	pop	{r0, r3, pc}
 23f6fca:	0000      	.short	0x0000
 23f6fcc:	1007996c 	.word	0x1007996c
 23f6fd0:	00000030 	.word	0x00000030

023f6fd4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f6fd4:	b509      	push	{r0, r3, lr}
 23f6fd6:	4804      	ldr	r0, [pc, #16]	; (23f6fe8 <HAL_RNG_GetRandomNumber+0x14>)
 23f6fd8:	6800      	ldr	r0, [r0, #0]
 23f6fda:	4b04      	ldr	r3, [pc, #16]	; (23f6fec <HAL_RNG_GetRandomNumber+0x18>)
 23f6fdc:	4403      	add	r3, r0
 23f6fde:	681b      	ldr	r3, [r3, #0]
 23f6fe0:	685b      	ldr	r3, [r3, #4]
 23f6fe2:	9302      	str	r3, [sp, #8]
 23f6fe4:	bd09      	pop	{r0, r3, pc}
 23f6fe6:	0000      	.short	0x0000
 23f6fe8:	1007996c 	.word	0x1007996c
 23f6fec:	00000000 	.word	0x00000000

023f6ff0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f6ff0:	b509      	push	{r0, r3, lr}
 23f6ff2:	4804      	ldr	r0, [pc, #16]	; (23f7004 <HAL_Delay_Microseconds+0x14>)
 23f6ff4:	6800      	ldr	r0, [r0, #0]
 23f6ff6:	4b04      	ldr	r3, [pc, #16]	; (23f7008 <HAL_Delay_Microseconds+0x18>)
 23f6ff8:	4403      	add	r3, r0
 23f6ffa:	681b      	ldr	r3, [r3, #0]
 23f6ffc:	68db      	ldr	r3, [r3, #12]
 23f6ffe:	9302      	str	r3, [sp, #8]
 23f7000:	bd09      	pop	{r0, r3, pc}
 23f7002:	0000      	.short	0x0000
 23f7004:	1007996c 	.word	0x1007996c
 23f7008:	00000000 	.word	0x00000000

023f700c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23f700c:	b509      	push	{r0, r3, lr}
 23f700e:	4804      	ldr	r0, [pc, #16]	; (23f7020 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23f7010:	6800      	ldr	r0, [r0, #0]
 23f7012:	4b04      	ldr	r3, [pc, #16]	; (23f7024 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23f7014:	4403      	add	r3, r0
 23f7016:	681b      	ldr	r3, [r3, #0]
 23f7018:	691b      	ldr	r3, [r3, #16]
 23f701a:	9302      	str	r3, [sp, #8]
 23f701c:	bd09      	pop	{r0, r3, pc}
 23f701e:	0000      	.short	0x0000
 23f7020:	1007996c 	.word	0x1007996c
 23f7024:	00000000 	.word	0x00000000

023f7028 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f7028:	b509      	push	{r0, r3, lr}
 23f702a:	4804      	ldr	r0, [pc, #16]	; (23f703c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f702c:	6800      	ldr	r0, [r0, #0]
 23f702e:	4b04      	ldr	r3, [pc, #16]	; (23f7040 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f7030:	4403      	add	r3, r0
 23f7032:	681b      	ldr	r3, [r3, #0]
 23f7034:	695b      	ldr	r3, [r3, #20]
 23f7036:	9302      	str	r3, [sp, #8]
 23f7038:	bd09      	pop	{r0, r3, pc}
 23f703a:	0000      	.short	0x0000
 23f703c:	1007996c 	.word	0x1007996c
 23f7040:	00000000 	.word	0x00000000

023f7044 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f7044:	b509      	push	{r0, r3, lr}
 23f7046:	4804      	ldr	r0, [pc, #16]	; (23f7058 <hal_timer_millis+0x14>)
 23f7048:	6800      	ldr	r0, [r0, #0]
 23f704a:	4b04      	ldr	r3, [pc, #16]	; (23f705c <hal_timer_millis+0x18>)
 23f704c:	4403      	add	r3, r0
 23f704e:	681b      	ldr	r3, [r3, #0]
 23f7050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f7052:	9302      	str	r3, [sp, #8]
 23f7054:	bd09      	pop	{r0, r3, pc}
 23f7056:	0000      	.short	0x0000
 23f7058:	1007996c 	.word	0x1007996c
 23f705c:	00000000 	.word	0x00000000

023f7060 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f7060:	b509      	push	{r0, r3, lr}
 23f7062:	4804      	ldr	r0, [pc, #16]	; (23f7074 <hal_spi_init+0x14>)
 23f7064:	6800      	ldr	r0, [r0, #0]
 23f7066:	4b04      	ldr	r3, [pc, #16]	; (23f7078 <hal_spi_init+0x18>)
 23f7068:	4403      	add	r3, r0
 23f706a:	681b      	ldr	r3, [r3, #0]
 23f706c:	69db      	ldr	r3, [r3, #28]
 23f706e:	9302      	str	r3, [sp, #8]
 23f7070:	bd09      	pop	{r0, r3, pc}
 23f7072:	0000      	.short	0x0000
 23f7074:	1007996c 	.word	0x1007996c
 23f7078:	00000018 	.word	0x00000018

023f707c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f707c:	b509      	push	{r0, r3, lr}
 23f707e:	4804      	ldr	r0, [pc, #16]	; (23f7090 <hal_spi_is_enabled+0x14>)
 23f7080:	6800      	ldr	r0, [r0, #0]
 23f7082:	4b04      	ldr	r3, [pc, #16]	; (23f7094 <hal_spi_is_enabled+0x18>)
 23f7084:	4403      	add	r3, r0
 23f7086:	681b      	ldr	r3, [r3, #0]
 23f7088:	6a1b      	ldr	r3, [r3, #32]
 23f708a:	9302      	str	r3, [sp, #8]
 23f708c:	bd09      	pop	{r0, r3, pc}
 23f708e:	0000      	.short	0x0000
 23f7090:	1007996c 	.word	0x1007996c
 23f7094:	00000018 	.word	0x00000018

023f7098 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f7098:	b509      	push	{r0, r3, lr}
 23f709a:	4804      	ldr	r0, [pc, #16]	; (23f70ac <hal_gpio_mode+0x14>)
 23f709c:	6800      	ldr	r0, [r0, #0]
 23f709e:	4b04      	ldr	r3, [pc, #16]	; (23f70b0 <hal_gpio_mode+0x18>)
 23f70a0:	4403      	add	r3, r0
 23f70a2:	681b      	ldr	r3, [r3, #0]
 23f70a4:	689b      	ldr	r3, [r3, #8]
 23f70a6:	9302      	str	r3, [sp, #8]
 23f70a8:	bd09      	pop	{r0, r3, pc}
 23f70aa:	0000      	.short	0x0000
 23f70ac:	1007996c 	.word	0x1007996c
 23f70b0:	00000014 	.word	0x00000014

023f70b4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f70b4:	b509      	push	{r0, r3, lr}
 23f70b6:	4804      	ldr	r0, [pc, #16]	; (23f70c8 <hal_gpio_get_mode+0x14>)
 23f70b8:	6800      	ldr	r0, [r0, #0]
 23f70ba:	4b04      	ldr	r3, [pc, #16]	; (23f70cc <hal_gpio_get_mode+0x18>)
 23f70bc:	4403      	add	r3, r0
 23f70be:	681b      	ldr	r3, [r3, #0]
 23f70c0:	68db      	ldr	r3, [r3, #12]
 23f70c2:	9302      	str	r3, [sp, #8]
 23f70c4:	bd09      	pop	{r0, r3, pc}
 23f70c6:	0000      	.short	0x0000
 23f70c8:	1007996c 	.word	0x1007996c
 23f70cc:	00000014 	.word	0x00000014

023f70d0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f70d0:	b509      	push	{r0, r3, lr}
 23f70d2:	4804      	ldr	r0, [pc, #16]	; (23f70e4 <hal_gpio_write+0x14>)
 23f70d4:	6800      	ldr	r0, [r0, #0]
 23f70d6:	4b04      	ldr	r3, [pc, #16]	; (23f70e8 <hal_gpio_write+0x18>)
 23f70d8:	4403      	add	r3, r0
 23f70da:	681b      	ldr	r3, [r3, #0]
 23f70dc:	691b      	ldr	r3, [r3, #16]
 23f70de:	9302      	str	r3, [sp, #8]
 23f70e0:	bd09      	pop	{r0, r3, pc}
 23f70e2:	0000      	.short	0x0000
 23f70e4:	1007996c 	.word	0x1007996c
 23f70e8:	00000014 	.word	0x00000014

023f70ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f70ec:	b509      	push	{r0, r3, lr}
 23f70ee:	4804      	ldr	r0, [pc, #16]	; (23f7100 <netdb_freeaddrinfo+0x14>)
 23f70f0:	6800      	ldr	r0, [r0, #0]
 23f70f2:	4b04      	ldr	r3, [pc, #16]	; (23f7104 <netdb_freeaddrinfo+0x18>)
 23f70f4:	4403      	add	r3, r0
 23f70f6:	681b      	ldr	r3, [r3, #0]
 23f70f8:	689b      	ldr	r3, [r3, #8]
 23f70fa:	9302      	str	r3, [sp, #8]
 23f70fc:	bd09      	pop	{r0, r3, pc}
 23f70fe:	0000      	.short	0x0000
 23f7100:	1007996c 	.word	0x1007996c
 23f7104:	00000050 	.word	0x00000050

023f7108 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f7108:	b509      	push	{r0, r3, lr}
 23f710a:	4804      	ldr	r0, [pc, #16]	; (23f711c <netdb_getaddrinfo+0x14>)
 23f710c:	6800      	ldr	r0, [r0, #0]
 23f710e:	4b04      	ldr	r3, [pc, #16]	; (23f7120 <netdb_getaddrinfo+0x18>)
 23f7110:	4403      	add	r3, r0
 23f7112:	681b      	ldr	r3, [r3, #0]
 23f7114:	68db      	ldr	r3, [r3, #12]
 23f7116:	9302      	str	r3, [sp, #8]
 23f7118:	bd09      	pop	{r0, r3, pc}
 23f711a:	0000      	.short	0x0000
 23f711c:	1007996c 	.word	0x1007996c
 23f7120:	00000050 	.word	0x00000050

023f7124 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f7124:	b509      	push	{r0, r3, lr}
 23f7126:	4804      	ldr	r0, [pc, #16]	; (23f7138 <panic_+0x14>)
 23f7128:	6800      	ldr	r0, [r0, #0]
 23f712a:	4b04      	ldr	r3, [pc, #16]	; (23f713c <panic_+0x18>)
 23f712c:	4403      	add	r3, r0
 23f712e:	681b      	ldr	r3, [r3, #0]
 23f7130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f7132:	9302      	str	r3, [sp, #8]
 23f7134:	bd09      	pop	{r0, r3, pc}
 23f7136:	0000      	.short	0x0000
 23f7138:	1007996c 	.word	0x1007996c
 23f713c:	00000048 	.word	0x00000048

023f7140 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f7140:	b509      	push	{r0, r3, lr}
 23f7142:	4804      	ldr	r0, [pc, #16]	; (23f7154 <log_level_name+0x14>)
 23f7144:	6800      	ldr	r0, [r0, #0]
 23f7146:	4b04      	ldr	r3, [pc, #16]	; (23f7158 <log_level_name+0x18>)
 23f7148:	4403      	add	r3, r0
 23f714a:	681b      	ldr	r3, [r3, #0]
 23f714c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f714e:	9302      	str	r3, [sp, #8]
 23f7150:	bd09      	pop	{r0, r3, pc}
 23f7152:	0000      	.short	0x0000
 23f7154:	1007996c 	.word	0x1007996c
 23f7158:	00000048 	.word	0x00000048

023f715c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f715c:	b509      	push	{r0, r3, lr}
 23f715e:	4804      	ldr	r0, [pc, #16]	; (23f7170 <log_set_callbacks+0x14>)
 23f7160:	6800      	ldr	r0, [r0, #0]
 23f7162:	4b04      	ldr	r3, [pc, #16]	; (23f7174 <log_set_callbacks+0x18>)
 23f7164:	4403      	add	r3, r0
 23f7166:	681b      	ldr	r3, [r3, #0]
 23f7168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f716a:	9302      	str	r3, [sp, #8]
 23f716c:	bd09      	pop	{r0, r3, pc}
 23f716e:	0000      	.short	0x0000
 23f7170:	1007996c 	.word	0x1007996c
 23f7174:	00000048 	.word	0x00000048

023f7178 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f7178:	b509      	push	{r0, r3, lr}
 23f717a:	4804      	ldr	r0, [pc, #16]	; (23f718c <spark_process+0x14>)
 23f717c:	6800      	ldr	r0, [r0, #0]
 23f717e:	4b04      	ldr	r3, [pc, #16]	; (23f7190 <spark_process+0x18>)
 23f7180:	4403      	add	r3, r0
 23f7182:	681b      	ldr	r3, [r3, #0]
 23f7184:	689b      	ldr	r3, [r3, #8]
 23f7186:	9302      	str	r3, [sp, #8]
 23f7188:	bd09      	pop	{r0, r3, pc}
 23f718a:	0000      	.short	0x0000
 23f718c:	1007996c 	.word	0x1007996c
 23f7190:	0000002c 	.word	0x0000002c

023f7194 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f7194:	b509      	push	{r0, r3, lr}
 23f7196:	4804      	ldr	r0, [pc, #16]	; (23f71a8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f7198:	6800      	ldr	r0, [r0, #0]
 23f719a:	4b04      	ldr	r3, [pc, #16]	; (23f71ac <spark_set_random_seed_from_cloud_handler+0x18>)
 23f719c:	4403      	add	r3, r0
 23f719e:	681b      	ldr	r3, [r3, #0]
 23f71a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f71a2:	9302      	str	r3, [sp, #8]
 23f71a4:	bd09      	pop	{r0, r3, pc}
 23f71a6:	0000      	.short	0x0000
 23f71a8:	1007996c 	.word	0x1007996c
 23f71ac:	0000002c 	.word	0x0000002c

023f71b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f71b0:	b509      	push	{r0, r3, lr}
 23f71b2:	4804      	ldr	r0, [pc, #16]	; (23f71c4 <network_connect+0x14>)
 23f71b4:	6800      	ldr	r0, [r0, #0]
 23f71b6:	4b04      	ldr	r3, [pc, #16]	; (23f71c8 <network_connect+0x18>)
 23f71b8:	4403      	add	r3, r0
 23f71ba:	681b      	ldr	r3, [r3, #0]
 23f71bc:	685b      	ldr	r3, [r3, #4]
 23f71be:	9302      	str	r3, [sp, #8]
 23f71c0:	bd09      	pop	{r0, r3, pc}
 23f71c2:	0000      	.short	0x0000
 23f71c4:	1007996c 	.word	0x1007996c
 23f71c8:	00000028 	.word	0x00000028

023f71cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f71cc:	b509      	push	{r0, r3, lr}
 23f71ce:	4804      	ldr	r0, [pc, #16]	; (23f71e0 <network_connecting+0x14>)
 23f71d0:	6800      	ldr	r0, [r0, #0]
 23f71d2:	4b04      	ldr	r3, [pc, #16]	; (23f71e4 <network_connecting+0x18>)
 23f71d4:	4403      	add	r3, r0
 23f71d6:	681b      	ldr	r3, [r3, #0]
 23f71d8:	689b      	ldr	r3, [r3, #8]
 23f71da:	9302      	str	r3, [sp, #8]
 23f71dc:	bd09      	pop	{r0, r3, pc}
 23f71de:	0000      	.short	0x0000
 23f71e0:	1007996c 	.word	0x1007996c
 23f71e4:	00000028 	.word	0x00000028

023f71e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f71e8:	b509      	push	{r0, r3, lr}
 23f71ea:	4804      	ldr	r0, [pc, #16]	; (23f71fc <network_disconnect+0x14>)
 23f71ec:	6800      	ldr	r0, [r0, #0]
 23f71ee:	4b04      	ldr	r3, [pc, #16]	; (23f7200 <network_disconnect+0x18>)
 23f71f0:	4403      	add	r3, r0
 23f71f2:	681b      	ldr	r3, [r3, #0]
 23f71f4:	68db      	ldr	r3, [r3, #12]
 23f71f6:	9302      	str	r3, [sp, #8]
 23f71f8:	bd09      	pop	{r0, r3, pc}
 23f71fa:	0000      	.short	0x0000
 23f71fc:	1007996c 	.word	0x1007996c
 23f7200:	00000028 	.word	0x00000028

023f7204 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f7204:	b509      	push	{r0, r3, lr}
 23f7206:	4804      	ldr	r0, [pc, #16]	; (23f7218 <network_ready+0x14>)
 23f7208:	6800      	ldr	r0, [r0, #0]
 23f720a:	4b04      	ldr	r3, [pc, #16]	; (23f721c <network_ready+0x18>)
 23f720c:	4403      	add	r3, r0
 23f720e:	681b      	ldr	r3, [r3, #0]
 23f7210:	691b      	ldr	r3, [r3, #16]
 23f7212:	9302      	str	r3, [sp, #8]
 23f7214:	bd09      	pop	{r0, r3, pc}
 23f7216:	0000      	.short	0x0000
 23f7218:	1007996c 	.word	0x1007996c
 23f721c:	00000028 	.word	0x00000028

023f7220 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7220:	b509      	push	{r0, r3, lr}
 23f7222:	4804      	ldr	r0, [pc, #16]	; (23f7234 <network_on+0x14>)
 23f7224:	6800      	ldr	r0, [r0, #0]
 23f7226:	4b04      	ldr	r3, [pc, #16]	; (23f7238 <network_on+0x18>)
 23f7228:	4403      	add	r3, r0
 23f722a:	681b      	ldr	r3, [r3, #0]
 23f722c:	695b      	ldr	r3, [r3, #20]
 23f722e:	9302      	str	r3, [sp, #8]
 23f7230:	bd09      	pop	{r0, r3, pc}
 23f7232:	0000      	.short	0x0000
 23f7234:	1007996c 	.word	0x1007996c
 23f7238:	00000028 	.word	0x00000028

023f723c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f723c:	b509      	push	{r0, r3, lr}
 23f723e:	4804      	ldr	r0, [pc, #16]	; (23f7250 <network_off+0x14>)
 23f7240:	6800      	ldr	r0, [r0, #0]
 23f7242:	4b04      	ldr	r3, [pc, #16]	; (23f7254 <network_off+0x18>)
 23f7244:	4403      	add	r3, r0
 23f7246:	681b      	ldr	r3, [r3, #0]
 23f7248:	699b      	ldr	r3, [r3, #24]
 23f724a:	9302      	str	r3, [sp, #8]
 23f724c:	bd09      	pop	{r0, r3, pc}
 23f724e:	0000      	.short	0x0000
 23f7250:	1007996c 	.word	0x1007996c
 23f7254:	00000028 	.word	0x00000028

023f7258 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f7258:	b509      	push	{r0, r3, lr}
 23f725a:	4804      	ldr	r0, [pc, #16]	; (23f726c <network_listen+0x14>)
 23f725c:	6800      	ldr	r0, [r0, #0]
 23f725e:	4b04      	ldr	r3, [pc, #16]	; (23f7270 <network_listen+0x18>)
 23f7260:	4403      	add	r3, r0
 23f7262:	681b      	ldr	r3, [r3, #0]
 23f7264:	69db      	ldr	r3, [r3, #28]
 23f7266:	9302      	str	r3, [sp, #8]
 23f7268:	bd09      	pop	{r0, r3, pc}
 23f726a:	0000      	.short	0x0000
 23f726c:	1007996c 	.word	0x1007996c
 23f7270:	00000028 	.word	0x00000028

023f7274 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f7274:	b509      	push	{r0, r3, lr}
 23f7276:	4804      	ldr	r0, [pc, #16]	; (23f7288 <network_listening+0x14>)
 23f7278:	6800      	ldr	r0, [r0, #0]
 23f727a:	4b04      	ldr	r3, [pc, #16]	; (23f728c <network_listening+0x18>)
 23f727c:	4403      	add	r3, r0
 23f727e:	681b      	ldr	r3, [r3, #0]
 23f7280:	6a1b      	ldr	r3, [r3, #32]
 23f7282:	9302      	str	r3, [sp, #8]
 23f7284:	bd09      	pop	{r0, r3, pc}
 23f7286:	0000      	.short	0x0000
 23f7288:	1007996c 	.word	0x1007996c
 23f728c:	00000028 	.word	0x00000028

023f7290 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f7290:	b509      	push	{r0, r3, lr}
 23f7292:	4804      	ldr	r0, [pc, #16]	; (23f72a4 <network_set_listen_timeout+0x14>)
 23f7294:	6800      	ldr	r0, [r0, #0]
 23f7296:	4b04      	ldr	r3, [pc, #16]	; (23f72a8 <network_set_listen_timeout+0x18>)
 23f7298:	4403      	add	r3, r0
 23f729a:	681b      	ldr	r3, [r3, #0]
 23f729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f729e:	9302      	str	r3, [sp, #8]
 23f72a0:	bd09      	pop	{r0, r3, pc}
 23f72a2:	0000      	.short	0x0000
 23f72a4:	1007996c 	.word	0x1007996c
 23f72a8:	00000028 	.word	0x00000028

023f72ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f72ac:	b509      	push	{r0, r3, lr}
 23f72ae:	4804      	ldr	r0, [pc, #16]	; (23f72c0 <network_get_listen_timeout+0x14>)
 23f72b0:	6800      	ldr	r0, [r0, #0]
 23f72b2:	4b04      	ldr	r3, [pc, #16]	; (23f72c4 <network_get_listen_timeout+0x18>)
 23f72b4:	4403      	add	r3, r0
 23f72b6:	681b      	ldr	r3, [r3, #0]
 23f72b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f72ba:	9302      	str	r3, [sp, #8]
 23f72bc:	bd09      	pop	{r0, r3, pc}
 23f72be:	0000      	.short	0x0000
 23f72c0:	1007996c 	.word	0x1007996c
 23f72c4:	00000028 	.word	0x00000028

023f72c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f72c8:	b509      	push	{r0, r3, lr}
 23f72ca:	4804      	ldr	r0, [pc, #16]	; (23f72dc <network_is_on+0x14>)
 23f72cc:	6800      	ldr	r0, [r0, #0]
 23f72ce:	4b04      	ldr	r3, [pc, #16]	; (23f72e0 <network_is_on+0x18>)
 23f72d0:	4403      	add	r3, r0
 23f72d2:	681b      	ldr	r3, [r3, #0]
 23f72d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f72d6:	9302      	str	r3, [sp, #8]
 23f72d8:	bd09      	pop	{r0, r3, pc}
 23f72da:	0000      	.short	0x0000
 23f72dc:	1007996c 	.word	0x1007996c
 23f72e0:	00000028 	.word	0x00000028

023f72e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f72e4:	b509      	push	{r0, r3, lr}
 23f72e6:	4804      	ldr	r0, [pc, #16]	; (23f72f8 <network_is_off+0x14>)
 23f72e8:	6800      	ldr	r0, [r0, #0]
 23f72ea:	4b04      	ldr	r3, [pc, #16]	; (23f72fc <network_is_off+0x18>)
 23f72ec:	4403      	add	r3, r0
 23f72ee:	681b      	ldr	r3, [r3, #0]
 23f72f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f72f2:	9302      	str	r3, [sp, #8]
 23f72f4:	bd09      	pop	{r0, r3, pc}
 23f72f6:	0000      	.short	0x0000
 23f72f8:	1007996c 	.word	0x1007996c
 23f72fc:	00000028 	.word	0x00000028

023f7300 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f7300:	b509      	push	{r0, r3, lr}
 23f7302:	4804      	ldr	r0, [pc, #16]	; (23f7314 <set_system_mode+0x14>)
 23f7304:	6800      	ldr	r0, [r0, #0]
 23f7306:	4b04      	ldr	r3, [pc, #16]	; (23f7318 <set_system_mode+0x18>)
 23f7308:	4403      	add	r3, r0
 23f730a:	681b      	ldr	r3, [r3, #0]
 23f730c:	685b      	ldr	r3, [r3, #4]
 23f730e:	9302      	str	r3, [sp, #8]
 23f7310:	bd09      	pop	{r0, r3, pc}
 23f7312:	0000      	.short	0x0000
 23f7314:	1007996c 	.word	0x1007996c
 23f7318:	00000008 	.word	0x00000008

023f731c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f731c:	b509      	push	{r0, r3, lr}
 23f731e:	4804      	ldr	r0, [pc, #16]	; (23f7330 <system_delay_ms+0x14>)
 23f7320:	6800      	ldr	r0, [r0, #0]
 23f7322:	4b04      	ldr	r3, [pc, #16]	; (23f7334 <system_delay_ms+0x18>)
 23f7324:	4403      	add	r3, r0
 23f7326:	681b      	ldr	r3, [r3, #0]
 23f7328:	695b      	ldr	r3, [r3, #20]
 23f732a:	9302      	str	r3, [sp, #8]
 23f732c:	bd09      	pop	{r0, r3, pc}
 23f732e:	0000      	.short	0x0000
 23f7330:	1007996c 	.word	0x1007996c
 23f7334:	00000008 	.word	0x00000008

023f7338 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f7338:	b509      	push	{r0, r3, lr}
 23f733a:	4804      	ldr	r0, [pc, #16]	; (23f734c <system_thread_set_state+0x14>)
 23f733c:	6800      	ldr	r0, [r0, #0]
 23f733e:	4b04      	ldr	r3, [pc, #16]	; (23f7350 <system_thread_set_state+0x18>)
 23f7340:	4403      	add	r3, r0
 23f7342:	681b      	ldr	r3, [r3, #0]
 23f7344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7346:	9302      	str	r3, [sp, #8]
 23f7348:	bd09      	pop	{r0, r3, pc}
 23f734a:	0000      	.short	0x0000
 23f734c:	1007996c 	.word	0x1007996c
 23f7350:	00000008 	.word	0x00000008

023f7354 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f7354:	b509      	push	{r0, r3, lr}
 23f7356:	4804      	ldr	r0, [pc, #16]	; (23f7368 <system_ctrl_set_app_request_handler+0x14>)
 23f7358:	6800      	ldr	r0, [r0, #0]
 23f735a:	4b04      	ldr	r3, [pc, #16]	; (23f736c <system_ctrl_set_app_request_handler+0x18>)
 23f735c:	4403      	add	r3, r0
 23f735e:	681b      	ldr	r3, [r3, #0]
 23f7360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f7364:	9302      	str	r3, [sp, #8]
 23f7366:	bd09      	pop	{r0, r3, pc}
 23f7368:	1007996c 	.word	0x1007996c
 23f736c:	00000008 	.word	0x00000008

023f7370 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f7370:	b509      	push	{r0, r3, lr}
 23f7372:	4804      	ldr	r0, [pc, #16]	; (23f7384 <system_ctrl_set_result+0x14>)
 23f7374:	6800      	ldr	r0, [r0, #0]
 23f7376:	4b04      	ldr	r3, [pc, #16]	; (23f7388 <system_ctrl_set_result+0x18>)
 23f7378:	4403      	add	r3, r0
 23f737a:	681b      	ldr	r3, [r3, #0]
 23f737c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f7380:	9302      	str	r3, [sp, #8]
 23f7382:	bd09      	pop	{r0, r3, pc}
 23f7384:	1007996c 	.word	0x1007996c
 23f7388:	00000008 	.word	0x00000008

023f738c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f738c:	b509      	push	{r0, r3, lr}
 23f738e:	4804      	ldr	r0, [pc, #16]	; (23f73a0 <malloc+0x14>)
 23f7390:	6800      	ldr	r0, [r0, #0]
 23f7392:	4b04      	ldr	r3, [pc, #16]	; (23f73a4 <malloc+0x18>)
 23f7394:	4403      	add	r3, r0
 23f7396:	681b      	ldr	r3, [r3, #0]
 23f7398:	681b      	ldr	r3, [r3, #0]
 23f739a:	9302      	str	r3, [sp, #8]
 23f739c:	bd09      	pop	{r0, r3, pc}
 23f739e:	0000      	.short	0x0000
 23f73a0:	1007996c 	.word	0x1007996c
 23f73a4:	00000004 	.word	0x00000004

023f73a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f73a8:	b509      	push	{r0, r3, lr}
 23f73aa:	4804      	ldr	r0, [pc, #16]	; (23f73bc <free+0x14>)
 23f73ac:	6800      	ldr	r0, [r0, #0]
 23f73ae:	4b04      	ldr	r3, [pc, #16]	; (23f73c0 <free+0x18>)
 23f73b0:	4403      	add	r3, r0
 23f73b2:	681b      	ldr	r3, [r3, #0]
 23f73b4:	685b      	ldr	r3, [r3, #4]
 23f73b6:	9302      	str	r3, [sp, #8]
 23f73b8:	bd09      	pop	{r0, r3, pc}
 23f73ba:	0000      	.short	0x0000
 23f73bc:	1007996c 	.word	0x1007996c
 23f73c0:	00000004 	.word	0x00000004

023f73c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f73c4:	b509      	push	{r0, r3, lr}
 23f73c6:	4804      	ldr	r0, [pc, #16]	; (23f73d8 <realloc+0x14>)
 23f73c8:	6800      	ldr	r0, [r0, #0]
 23f73ca:	4b04      	ldr	r3, [pc, #16]	; (23f73dc <realloc+0x18>)
 23f73cc:	4403      	add	r3, r0
 23f73ce:	681b      	ldr	r3, [r3, #0]
 23f73d0:	689b      	ldr	r3, [r3, #8]
 23f73d2:	9302      	str	r3, [sp, #8]
 23f73d4:	bd09      	pop	{r0, r3, pc}
 23f73d6:	0000      	.short	0x0000
 23f73d8:	1007996c 	.word	0x1007996c
 23f73dc:	00000004 	.word	0x00000004

023f73e0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f73e0:	b509      	push	{r0, r3, lr}
 23f73e2:	4804      	ldr	r0, [pc, #16]	; (23f73f4 <vsnprintf+0x14>)
 23f73e4:	6800      	ldr	r0, [r0, #0]
 23f73e6:	4b04      	ldr	r3, [pc, #16]	; (23f73f8 <vsnprintf+0x18>)
 23f73e8:	4403      	add	r3, r0
 23f73ea:	681b      	ldr	r3, [r3, #0]
 23f73ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f73ee:	9302      	str	r3, [sp, #8]
 23f73f0:	bd09      	pop	{r0, r3, pc}
 23f73f2:	0000      	.short	0x0000
 23f73f4:	1007996c 	.word	0x1007996c
 23f73f8:	00000004 	.word	0x00000004

023f73fc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f73fc:	b509      	push	{r0, r3, lr}
 23f73fe:	4804      	ldr	r0, [pc, #16]	; (23f7410 <abort+0x14>)
 23f7400:	6800      	ldr	r0, [r0, #0]
 23f7402:	4b04      	ldr	r3, [pc, #16]	; (23f7414 <abort+0x18>)
 23f7404:	4403      	add	r3, r0
 23f7406:	681b      	ldr	r3, [r3, #0]
 23f7408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f740a:	9302      	str	r3, [sp, #8]
 23f740c:	bd09      	pop	{r0, r3, pc}
 23f740e:	0000      	.short	0x0000
 23f7410:	1007996c 	.word	0x1007996c
 23f7414:	00000004 	.word	0x00000004

023f7418 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f7418:	b509      	push	{r0, r3, lr}
 23f741a:	4804      	ldr	r0, [pc, #16]	; (23f742c <_malloc_r+0x14>)
 23f741c:	6800      	ldr	r0, [r0, #0]
 23f741e:	4b04      	ldr	r3, [pc, #16]	; (23f7430 <_malloc_r+0x18>)
 23f7420:	4403      	add	r3, r0
 23f7422:	681b      	ldr	r3, [r3, #0]
 23f7424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7426:	9302      	str	r3, [sp, #8]
 23f7428:	bd09      	pop	{r0, r3, pc}
 23f742a:	0000      	.short	0x0000
 23f742c:	1007996c 	.word	0x1007996c
 23f7430:	00000004 	.word	0x00000004

023f7434 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f7434:	b509      	push	{r0, r3, lr}
 23f7436:	4804      	ldr	r0, [pc, #16]	; (23f7448 <__errno+0x14>)
 23f7438:	6800      	ldr	r0, [r0, #0]
 23f743a:	4b04      	ldr	r3, [pc, #16]	; (23f744c <__errno+0x18>)
 23f743c:	4403      	add	r3, r0
 23f743e:	681b      	ldr	r3, [r3, #0]
 23f7440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7442:	9302      	str	r3, [sp, #8]
 23f7444:	bd09      	pop	{r0, r3, pc}
 23f7446:	0000      	.short	0x0000
 23f7448:	1007996c 	.word	0x1007996c
 23f744c:	00000004 	.word	0x00000004

023f7450 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f7450:	b509      	push	{r0, r3, lr}
 23f7452:	4804      	ldr	r0, [pc, #16]	; (23f7464 <__assert_func+0x14>)
 23f7454:	6800      	ldr	r0, [r0, #0]
 23f7456:	4b04      	ldr	r3, [pc, #16]	; (23f7468 <__assert_func+0x18>)
 23f7458:	4403      	add	r3, r0
 23f745a:	681b      	ldr	r3, [r3, #0]
 23f745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f745e:	9302      	str	r3, [sp, #8]
 23f7460:	bd09      	pop	{r0, r3, pc}
 23f7462:	0000      	.short	0x0000
 23f7464:	1007996c 	.word	0x1007996c
 23f7468:	00000004 	.word	0x00000004

023f746c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f746c:	b509      	push	{r0, r3, lr}
 23f746e:	4804      	ldr	r0, [pc, #16]	; (23f7480 <newlib_impure_ptr_callback+0x14>)
 23f7470:	6800      	ldr	r0, [r0, #0]
 23f7472:	4b04      	ldr	r3, [pc, #16]	; (23f7484 <newlib_impure_ptr_callback+0x18>)
 23f7474:	4403      	add	r3, r0
 23f7476:	681b      	ldr	r3, [r3, #0]
 23f7478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f747a:	9302      	str	r3, [sp, #8]
 23f747c:	bd09      	pop	{r0, r3, pc}
 23f747e:	0000      	.short	0x0000
 23f7480:	1007996c 	.word	0x1007996c
 23f7484:	00000004 	.word	0x00000004

023f7488 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f7488:	2300      	movs	r3, #0
 23f748a:	6840      	ldr	r0, [r0, #4]
 23f748c:	461a      	mov	r2, r3
 23f748e:	f7ff be8f 	b.w	23f71b0 <network_connect>

023f7492 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f7492:	2200      	movs	r2, #0
 23f7494:	2102      	movs	r1, #2
 23f7496:	6840      	ldr	r0, [r0, #4]
 23f7498:	f7ff bea6 	b.w	23f71e8 <network_disconnect>

023f749c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f749c:	2200      	movs	r2, #0
 23f749e:	6840      	ldr	r0, [r0, #4]
 23f74a0:	4611      	mov	r1, r2
 23f74a2:	f7ff be93 	b.w	23f71cc <network_connecting>

023f74a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f74a6:	2200      	movs	r2, #0
 23f74a8:	6840      	ldr	r0, [r0, #4]
 23f74aa:	4611      	mov	r1, r2
 23f74ac:	f7ff beaa 	b.w	23f7204 <network_ready>

023f74b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f74b0:	2300      	movs	r3, #0
 23f74b2:	6840      	ldr	r0, [r0, #4]
 23f74b4:	461a      	mov	r2, r3
 23f74b6:	4619      	mov	r1, r3
 23f74b8:	f7ff beb2 	b.w	23f7220 <network_on>

023f74bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f74bc:	2300      	movs	r3, #0
 23f74be:	6840      	ldr	r0, [r0, #4]
 23f74c0:	461a      	mov	r2, r3
 23f74c2:	4619      	mov	r1, r3
 23f74c4:	f7ff beba 	b.w	23f723c <network_off>

023f74c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f74c8:	2100      	movs	r1, #0
 23f74ca:	6840      	ldr	r0, [r0, #4]
 23f74cc:	f7ff befc 	b.w	23f72c8 <network_is_on>

023f74d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f74d0:	2100      	movs	r1, #0
 23f74d2:	6840      	ldr	r0, [r0, #4]
 23f74d4:	f7ff bf06 	b.w	23f72e4 <network_is_off>

023f74d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f74d8:	2200      	movs	r2, #0
 23f74da:	6840      	ldr	r0, [r0, #4]
 23f74dc:	f081 0101 	eor.w	r1, r1, #1
 23f74e0:	f7ff beba 	b.w	23f7258 <network_listen>

023f74e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f74e4:	2200      	movs	r2, #0
 23f74e6:	6840      	ldr	r0, [r0, #4]
 23f74e8:	f7ff bed2 	b.w	23f7290 <network_set_listen_timeout>

023f74ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f74ec:	2200      	movs	r2, #0
 23f74ee:	6840      	ldr	r0, [r0, #4]
 23f74f0:	4611      	mov	r1, r2
 23f74f2:	f7ff bedb 	b.w	23f72ac <network_get_listen_timeout>

023f74f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f74f6:	2200      	movs	r2, #0
 23f74f8:	6840      	ldr	r0, [r0, #4]
 23f74fa:	4611      	mov	r1, r2
 23f74fc:	f7ff beba 	b.w	23f7274 <network_listening>

023f7500 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23f7500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f7504:	b095      	sub	sp, #84	; 0x54
 23f7506:	4614      	mov	r4, r2
 23f7508:	460d      	mov	r5, r1
 23f750a:	4607      	mov	r7, r0
    IPAddress addr;
 23f750c:	f000 fc16 	bl	23f7d3c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f7510:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23f7512:	221c      	movs	r2, #28
 23f7514:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23f7516:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23f7518:	f004 f828 	bl	23fb56c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23f751c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f751e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23f7520:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f7522:	2100      	movs	r1, #0
 23f7524:	466b      	mov	r3, sp
 23f7526:	aa0c      	add	r2, sp, #48	; 0x30
 23f7528:	f7ff fdee 	bl	23f7108 <netdb_getaddrinfo>
    if (!r) {
 23f752c:	4604      	mov	r4, r0
 23f752e:	2800      	cmp	r0, #0
 23f7530:	d14b      	bne.n	23f75ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f7532:	4602      	mov	r2, r0
 23f7534:	2101      	movs	r1, #1
 23f7536:	6868      	ldr	r0, [r5, #4]
 23f7538:	f7ff fe64 	bl	23f7204 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f753c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f753e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f7540:	4622      	mov	r2, r4
 23f7542:	6868      	ldr	r0, [r5, #4]
 23f7544:	f7ff fe5e 	bl	23f7204 <network_ready>
        bool ok = false;
 23f7548:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f754a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f754c:	9e00      	ldr	r6, [sp, #0]
 23f754e:	2e00      	cmp	r6, #0
 23f7550:	d03b      	beq.n	23f75ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23f7552:	2900      	cmp	r1, #0
 23f7554:	d139      	bne.n	23f75ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f7556:	6873      	ldr	r3, [r6, #4]
 23f7558:	2b02      	cmp	r3, #2
 23f755a:	d003      	beq.n	23f7564 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23f755c:	2b0a      	cmp	r3, #10
 23f755e:	d011      	beq.n	23f7584 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f7560:	69f6      	ldr	r6, [r6, #28]
 23f7562:	e7f4      	b.n	23f754e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23f7564:	f1b8 0f00 	cmp.w	r8, #0
 23f7568:	d0fa      	beq.n	23f7560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f756a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23f756c:	a806      	add	r0, sp, #24
 23f756e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f7570:	1d3c      	adds	r4, r7, #4
 23f7572:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23f7574:	f000 fc10 	bl	23f7d98 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f7578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f757a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f757c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f757e:	4641      	mov	r1, r8
 23f7580:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f7582:	e7ed      	b.n	23f7560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f7584:	f1b9 0f00 	cmp.w	r9, #0
 23f7588:	d0ea      	beq.n	23f7560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f758a:	2210      	movs	r2, #16
 23f758c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f758e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f7590:	f003 ffec 	bl	23fb56c <memset>
                    a.v = 6;
 23f7594:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f7596:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23f7598:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f759c:	f104 0308 	add.w	r3, r4, #8
 23f75a0:	3418      	adds	r4, #24
 23f75a2:	462a      	mov	r2, r5
 23f75a4:	6818      	ldr	r0, [r3, #0]
 23f75a6:	6859      	ldr	r1, [r3, #4]
 23f75a8:	3308      	adds	r3, #8
 23f75aa:	c203      	stmia	r2!, {r0, r1}
 23f75ac:	42a3      	cmp	r3, r4
 23f75ae:	4615      	mov	r5, r2
 23f75b0:	d1f7      	bne.n	23f75a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23f75b2:	a901      	add	r1, sp, #4
 23f75b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23f75b6:	1d3c      	adds	r4, r7, #4
 23f75b8:	ad07      	add	r5, sp, #28
 23f75ba:	f000 fbcd 	bl	23f7d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f75be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f75c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f75c2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f75c4:	4649      	mov	r1, r9
 23f75c6:	7023      	strb	r3, [r4, #0]
                    break;
 23f75c8:	e7ca      	b.n	23f7560 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f75ca:	9800      	ldr	r0, [sp, #0]
 23f75cc:	f7ff fd8e 	bl	23f70ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f75d0:	4638      	mov	r0, r7
 23f75d2:	b015      	add	sp, #84	; 0x54
 23f75d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023f75d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f75d8:	4b02      	ldr	r3, [pc, #8]	; (23f75e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f75da:	4a03      	ldr	r2, [pc, #12]	; (23f75e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f75dc:	601a      	str	r2, [r3, #0]
 23f75de:	2200      	movs	r2, #0
 23f75e0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f75e2:	4770      	bx	lr
 23f75e4:	1007ae58 	.word	0x1007ae58
 23f75e8:	023ff8dc 	.word	0x023ff8dc

023f75ec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f75ec:	2200      	movs	r2, #0
 23f75ee:	6840      	ldr	r0, [r0, #4]
 23f75f0:	4611      	mov	r1, r2
 23f75f2:	f7ff be07 	b.w	23f7204 <network_ready>

023f75f6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f75f6:	2200      	movs	r2, #0
 23f75f8:	6840      	ldr	r0, [r0, #4]
 23f75fa:	4611      	mov	r1, r2
 23f75fc:	f7ff be3a 	b.w	23f7274 <network_listening>

023f7600 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f7600:	2200      	movs	r2, #0
 23f7602:	6840      	ldr	r0, [r0, #4]
 23f7604:	4611      	mov	r1, r2
 23f7606:	f7ff be51 	b.w	23f72ac <network_get_listen_timeout>

023f760a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f760a:	2200      	movs	r2, #0
 23f760c:	6840      	ldr	r0, [r0, #4]
 23f760e:	f7ff be3f 	b.w	23f7290 <network_set_listen_timeout>

023f7612 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f7612:	2200      	movs	r2, #0
 23f7614:	6840      	ldr	r0, [r0, #4]
 23f7616:	f081 0101 	eor.w	r1, r1, #1
 23f761a:	f7ff be1d 	b.w	23f7258 <network_listen>

023f761e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f761e:	2300      	movs	r3, #0
 23f7620:	6840      	ldr	r0, [r0, #4]
 23f7622:	461a      	mov	r2, r3
 23f7624:	4619      	mov	r1, r3
 23f7626:	f7ff be09 	b.w	23f723c <network_off>

023f762a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f762a:	2300      	movs	r3, #0
 23f762c:	6840      	ldr	r0, [r0, #4]
 23f762e:	461a      	mov	r2, r3
 23f7630:	4619      	mov	r1, r3
 23f7632:	f7ff bdf5 	b.w	23f7220 <network_on>

023f7636 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f7636:	2200      	movs	r2, #0
 23f7638:	6840      	ldr	r0, [r0, #4]
 23f763a:	4611      	mov	r1, r2
 23f763c:	f7ff bdc6 	b.w	23f71cc <network_connecting>

023f7640 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f7640:	2200      	movs	r2, #0
 23f7642:	2102      	movs	r1, #2
 23f7644:	6840      	ldr	r0, [r0, #4]
 23f7646:	f7ff bdcf 	b.w	23f71e8 <network_disconnect>

023f764a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f764a:	2300      	movs	r3, #0
 23f764c:	6840      	ldr	r0, [r0, #4]
 23f764e:	461a      	mov	r2, r3
 23f7650:	f7ff bdae 	b.w	23f71b0 <network_connect>

023f7654 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f7654:	2204      	movs	r2, #4
 23f7656:	4b02      	ldr	r3, [pc, #8]	; (23f7660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f7658:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f765a:	4a02      	ldr	r2, [pc, #8]	; (23f7664 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f765c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f765e:	4770      	bx	lr
 23f7660:	1007ae60 	.word	0x1007ae60
 23f7664:	023ff918 	.word	0x023ff918

023f7668 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f7668:	b510      	push	{r4, lr}
 23f766a:	4604      	mov	r4, r0
 23f766c:	4608      	mov	r0, r1
{
    _spi = spi;
 23f766e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f7670:	f7ff fcf6 	bl	23f7060 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f7674:	2300      	movs	r3, #0
}
 23f7676:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f7678:	6063      	str	r3, [r4, #4]
}
 23f767a:	bd10      	pop	{r4, pc}

023f767c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f767c:	4770      	bx	lr

023f767e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f767e:	7441      	strb	r1, [r0, #17]
}
 23f7680:	4770      	bx	lr

023f7682 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f7682:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f7684:	7c00      	ldrb	r0, [r0, #16]
 23f7686:	f7ff fc27 	bl	23f6ed8 <hal_usart_available_data_for_write>
}
 23f768a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f768e:	bd08      	pop	{r3, pc}

023f7690 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f7690:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f7692:	7c00      	ldrb	r0, [r0, #16]
 23f7694:	f7ff fbda 	bl	23f6e4c <hal_usart_available>
}
 23f7698:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f769c:	bd08      	pop	{r3, pc}

023f769e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f769e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f76a0:	7c00      	ldrb	r0, [r0, #16]
 23f76a2:	f7ff fbef 	bl	23f6e84 <hal_usart_peek>
}
 23f76a6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f76aa:	bd08      	pop	{r3, pc}

023f76ac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f76ac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f76ae:	7c00      	ldrb	r0, [r0, #16]
 23f76b0:	f7ff fbda 	bl	23f6e68 <hal_usart_read>
}
 23f76b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f76b8:	bd08      	pop	{r3, pc}

023f76ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f76ba:	7c00      	ldrb	r0, [r0, #16]
 23f76bc:	f7ff bbf0 	b.w	23f6ea0 <hal_usart_flush>

023f76c0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f76c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f76c2:	7c45      	ldrb	r5, [r0, #17]
{
 23f76c4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f76c6:	b12d      	cbz	r5, 23f76d4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f76c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f76ca:	b003      	add	sp, #12
 23f76cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f76d0:	f7ff bbae 	b.w	23f6e30 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f76d4:	7c00      	ldrb	r0, [r0, #16]
 23f76d6:	9101      	str	r1, [sp, #4]
 23f76d8:	f7ff fbfe 	bl	23f6ed8 <hal_usart_available_data_for_write>
 23f76dc:	2800      	cmp	r0, #0
 23f76de:	9901      	ldr	r1, [sp, #4]
 23f76e0:	dcf2      	bgt.n	23f76c8 <_ZN11USARTSerial5writeEh+0x8>
}
 23f76e2:	4628      	mov	r0, r5
 23f76e4:	b003      	add	sp, #12
 23f76e6:	bd30      	pop	{r4, r5, pc}

023f76e8 <_ZN11USARTSerialD0Ev>:
 23f76e8:	b510      	push	{r4, lr}
 23f76ea:	4604      	mov	r4, r0
 23f76ec:	2114      	movs	r1, #20
 23f76ee:	f7f5 fe96 	bl	23ed41e <_ZdlPvj>
 23f76f2:	4620      	mov	r0, r4
 23f76f4:	bd10      	pop	{r4, pc}
	...

023f76f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f76f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f76fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f76fe:	4604      	mov	r4, r0
 23f7700:	4608      	mov	r0, r1
 23f7702:	4611      	mov	r1, r2
 23f7704:	2200      	movs	r2, #0
 23f7706:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f770a:	4b04      	ldr	r3, [pc, #16]	; (23f771c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f770c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f770e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f7710:	2301      	movs	r3, #1
 23f7712:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f7714:	f7ff fbfc 	bl	23f6f10 <hal_usart_init_ex>
}
 23f7718:	4620      	mov	r0, r4
 23f771a:	bd10      	pop	{r4, pc}
 23f771c:	023ff954 	.word	0x023ff954

023f7720 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23f7720:	2300      	movs	r3, #0
 23f7722:	7c00      	ldrb	r0, [r0, #16]
 23f7724:	f7ff bbe6 	b.w	23f6ef4 <hal_usart_begin_config>

023f7728 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23f7728:	2200      	movs	r2, #0
 23f772a:	f7ff bff9 	b.w	23f7720 <_ZN11USARTSerial5beginEmm>

023f772e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23f772e:	7c00      	ldrb	r0, [r0, #16]
 23f7730:	f7ff bb70 	b.w	23f6e14 <hal_usart_end>

023f7734 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f7734:	7c00      	ldrb	r0, [r0, #16]
 23f7736:	f7ff bbc1 	b.w	23f6ebc <hal_usart_is_enabled>

023f773a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f773a:	4770      	bx	lr

023f773c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f773e:	4606      	mov	r6, r0
 23f7740:	4615      	mov	r5, r2
 23f7742:	460c      	mov	r4, r1
 23f7744:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f7746:	42bc      	cmp	r4, r7
 23f7748:	d006      	beq.n	23f7758 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f774a:	6833      	ldr	r3, [r6, #0]
 23f774c:	4630      	mov	r0, r6
 23f774e:	689b      	ldr	r3, [r3, #8]
 23f7750:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f7754:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f7756:	e7f6      	b.n	23f7746 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f7758:	4628      	mov	r0, r5
 23f775a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f775c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f775c:	2200      	movs	r2, #0
 23f775e:	7c00      	ldrb	r0, [r0, #16]
 23f7760:	f7ff baf6 	b.w	23f6d50 <hal_i2c_write>

023f7764 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f7764:	2100      	movs	r1, #0
 23f7766:	7c00      	ldrb	r0, [r0, #16]
 23f7768:	f7ff bb00 	b.w	23f6d6c <hal_i2c_available>

023f776c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f776c:	2100      	movs	r1, #0
 23f776e:	7c00      	ldrb	r0, [r0, #16]
 23f7770:	f7ff bb0a 	b.w	23f6d88 <hal_i2c_read>

023f7774 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f7774:	2100      	movs	r1, #0
 23f7776:	7c00      	ldrb	r0, [r0, #16]
 23f7778:	f7ff bb14 	b.w	23f6da4 <hal_i2c_peek>

023f777c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f777c:	2100      	movs	r1, #0
 23f777e:	7c00      	ldrb	r0, [r0, #16]
 23f7780:	f7ff bb1e 	b.w	23f6dc0 <hal_i2c_flush>

023f7784 <_ZN7TwoWireD0Ev>:
 23f7784:	b510      	push	{r4, lr}
 23f7786:	4604      	mov	r4, r0
 23f7788:	2114      	movs	r1, #20
 23f778a:	f7f5 fe48 	bl	23ed41e <_ZdlPvj>
 23f778e:	4620      	mov	r0, r4
 23f7790:	bd10      	pop	{r4, pc}
	...

023f7794 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f7794:	b538      	push	{r3, r4, r5, lr}
 23f7796:	4604      	mov	r4, r0
 23f7798:	4615      	mov	r5, r2
 23f779a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f779e:	2200      	movs	r2, #0
 23f77a0:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f77a4:	4b09      	ldr	r3, [pc, #36]	; (23f77cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f77a6:	4608      	mov	r0, r1
  _i2c = i2c;
 23f77a8:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f77aa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f77ac:	4629      	mov	r1, r5
 23f77ae:	f7ff fb23 	bl	23f6df8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f77b2:	30bf      	adds	r0, #191	; 0xbf
 23f77b4:	d108      	bne.n	23f77c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f77b6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f77b8:	07db      	lsls	r3, r3, #31
 23f77ba:	d505      	bpl.n	23f77c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f77bc:	6868      	ldr	r0, [r5, #4]
 23f77be:	f7ff fdf3 	bl	23f73a8 <free>
    free(conf.tx_buffer);
 23f77c2:	68e8      	ldr	r0, [r5, #12]
 23f77c4:	f7ff fdf0 	bl	23f73a8 <free>
}
 23f77c8:	4620      	mov	r0, r4
 23f77ca:	bd38      	pop	{r3, r4, r5, pc}
 23f77cc:	023ff984 	.word	0x023ff984

023f77d0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f77d0:	2201      	movs	r2, #1
 23f77d2:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f77d6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f77da:	4618      	mov	r0, r3
 23f77dc:	2901      	cmp	r1, #1
 23f77de:	d108      	bne.n	23f77f2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f77e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f77e4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f77e8:	3a01      	subs	r2, #1
 23f77ea:	f103 0310 	add.w	r3, r3, #16
 23f77ee:	d1f2      	bne.n	23f77d6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f77f0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f77f2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f77f4:	bf04      	itt	eq
 23f77f6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f77fa:	1852      	addeq	r2, r2, r1
 23f77fc:	e7f4      	b.n	23f77e8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f77fe <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f77fe:	b40e      	push	{r1, r2, r3}
 23f7800:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7802:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f7804:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f7806:	af00      	add	r7, sp, #0
 23f7808:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f780c:	f855 2b04 	ldr.w	r2, [r5], #4
 23f7810:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f7812:	462b      	mov	r3, r5
 23f7814:	1878      	adds	r0, r7, r1
 23f7816:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f7818:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f781a:	f7ff fde1 	bl	23f73e0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f781e:	280f      	cmp	r0, #15
 23f7820:	687a      	ldr	r2, [r7, #4]
 23f7822:	d91a      	bls.n	23f785a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f7824:	f100 0308 	add.w	r3, r0, #8
 23f7828:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f782c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f782e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f7832:	1c41      	adds	r1, r0, #1
 23f7834:	462b      	mov	r3, r5
 23f7836:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f7838:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f783a:	f7ff fdd1 	bl	23f73e0 <vsnprintf>
        if (n > 0) {
 23f783e:	1e02      	subs	r2, r0, #0
 23f7840:	dd04      	ble.n	23f784c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f7842:	6823      	ldr	r3, [r4, #0]
 23f7844:	4669      	mov	r1, sp
 23f7846:	4620      	mov	r0, r4
 23f7848:	689b      	ldr	r3, [r3, #8]
 23f784a:	4798      	blx	r3
 23f784c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f784e:	3720      	adds	r7, #32
 23f7850:	46bd      	mov	sp, r7
 23f7852:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f7856:	b003      	add	sp, #12
 23f7858:	4770      	bx	lr
    } else if (n > 0) {
 23f785a:	2800      	cmp	r0, #0
 23f785c:	d0f7      	beq.n	23f784e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f785e:	6823      	ldr	r3, [r4, #0]
 23f7860:	4602      	mov	r2, r0
 23f7862:	689b      	ldr	r3, [r3, #8]
 23f7864:	4620      	mov	r0, r4
 23f7866:	f107 0110 	add.w	r1, r7, #16
 23f786a:	4798      	blx	r3
}
 23f786c:	e7ef      	b.n	23f784e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f786e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23f786e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f7870:	6843      	ldr	r3, [r0, #4]
    {
 23f7872:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f7874:	3b01      	subs	r3, #1
 23f7876:	6043      	str	r3, [r0, #4]
 23f7878:	b963      	cbnz	r3, 23f7894 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23f787a:	6803      	ldr	r3, [r0, #0]
 23f787c:	689b      	ldr	r3, [r3, #8]
 23f787e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f7880:	68a3      	ldr	r3, [r4, #8]
 23f7882:	3b01      	subs	r3, #1
 23f7884:	60a3      	str	r3, [r4, #8]
 23f7886:	b92b      	cbnz	r3, 23f7894 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f7888:	6823      	ldr	r3, [r4, #0]
 23f788a:	4620      	mov	r0, r4
        }
    }
 23f788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f7890:	68db      	ldr	r3, [r3, #12]
 23f7892:	4718      	bx	r3
    }
 23f7894:	bd10      	pop	{r4, pc}

023f7896 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f7896:	b538      	push	{r3, r4, r5, lr}
 23f7898:	680b      	ldr	r3, [r1, #0]
 23f789a:	4604      	mov	r4, r0
 23f789c:	6003      	str	r3, [r0, #0]
 23f789e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f78a0:	6843      	ldr	r3, [r0, #4]
 23f78a2:	429d      	cmp	r5, r3
 23f78a4:	d008      	beq.n	23f78b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f78a6:	b115      	cbz	r5, 23f78ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f78a8:	686b      	ldr	r3, [r5, #4]
 23f78aa:	3301      	adds	r3, #1
 23f78ac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f78ae:	6860      	ldr	r0, [r4, #4]
 23f78b0:	b108      	cbz	r0, 23f78b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f78b2:	f7ff ffdc 	bl	23f786e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f78b6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f78b8:	bd38      	pop	{r3, r4, r5, pc}

023f78ba <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f78ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f78bc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f78be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f78c2:	2201      	movs	r2, #1
 23f78c4:	689b      	ldr	r3, [r3, #8]
 23f78c6:	f10d 0107 	add.w	r1, sp, #7
 23f78ca:	4798      	blx	r3
}
 23f78cc:	b003      	add	sp, #12
 23f78ce:	f85d fb04 	ldr.w	pc, [sp], #4

023f78d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f78d2:	460b      	mov	r3, r1
 23f78d4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f78d6:	2200      	movs	r2, #0
 23f78d8:	b510      	push	{r4, lr}
 23f78da:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f78dc:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f78e0:	6083      	str	r3, [r0, #8]
    if (t) {
 23f78e2:	b90b      	cbnz	r3, 23f78e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f78e4:	4620      	mov	r0, r4
 23f78e6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f78e8:	f7ff ffd5 	bl	23f7896 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f78ec:	e7fa      	b.n	23f78e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f78ee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f78ee:	6883      	ldr	r3, [r0, #8]
 23f78f0:	b1eb      	cbz	r3, 23f792e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f78f2:	781a      	ldrb	r2, [r3, #0]
 23f78f4:	2a03      	cmp	r2, #3
 23f78f6:	d81a      	bhi.n	23f792e <_ZNK5spark9JSONValue4typeEv+0x40>
 23f78f8:	e8df f002 	tbb	[pc, r2]
 23f78fc:	1b021704 	.word	0x1b021704
 23f7900:	2005      	movs	r0, #5
 23f7902:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f7904:	6802      	ldr	r2, [r0, #0]
 23f7906:	685b      	ldr	r3, [r3, #4]
 23f7908:	6852      	ldr	r2, [r2, #4]
 23f790a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f790c:	282d      	cmp	r0, #45	; 0x2d
 23f790e:	d012      	beq.n	23f7936 <_ZNK5spark9JSONValue4typeEv+0x48>
 23f7910:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f7914:	2b09      	cmp	r3, #9
 23f7916:	d90e      	bls.n	23f7936 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f7918:	2874      	cmp	r0, #116	; 0x74
 23f791a:	d00e      	beq.n	23f793a <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f791c:	2866      	cmp	r0, #102	; 0x66
 23f791e:	d00c      	beq.n	23f793a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f7920:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f7924:	4258      	negs	r0, r3
 23f7926:	4158      	adcs	r0, r3
 23f7928:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f792a:	2006      	movs	r0, #6
 23f792c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f792e:	2000      	movs	r0, #0
 23f7930:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f7932:	2004      	movs	r0, #4
 23f7934:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f7936:	2003      	movs	r0, #3
 23f7938:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f793a:	2002      	movs	r0, #2
}
 23f793c:	4770      	bx	lr

023f793e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f793e:	b510      	push	{r4, lr}
 23f7940:	4604      	mov	r4, r0
    switch (type()) {
 23f7942:	f7ff ffd4 	bl	23f78ee <_ZNK5spark9JSONValue4typeEv>
 23f7946:	2802      	cmp	r0, #2
 23f7948:	d00e      	beq.n	23f7968 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f794a:	1ec3      	subs	r3, r0, #3
 23f794c:	b2db      	uxtb	r3, r3
 23f794e:	2b01      	cmp	r3, #1
 23f7950:	d814      	bhi.n	23f797c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f7952:	6822      	ldr	r2, [r4, #0]
 23f7954:	68a3      	ldr	r3, [r4, #8]
 23f7956:	6850      	ldr	r0, [r2, #4]
 23f7958:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f795a:	220a      	movs	r2, #10
}
 23f795c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f7960:	2100      	movs	r1, #0
 23f7962:	4418      	add	r0, r3
 23f7964:	f003 bf12 	b.w	23fb78c <strtol>
        const char* const s = d_->json + t_->start;
 23f7968:	6822      	ldr	r2, [r4, #0]
 23f796a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f796c:	6852      	ldr	r2, [r2, #4]
 23f796e:	685b      	ldr	r3, [r3, #4]
 23f7970:	5cd0      	ldrb	r0, [r2, r3]
 23f7972:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f7976:	4258      	negs	r0, r3
 23f7978:	4158      	adcs	r0, r3
}
 23f797a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f797c:	2000      	movs	r0, #0
 23f797e:	e7fc      	b.n	23f797a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023f7980 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f7980:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f7982:	2300      	movs	r3, #0
 23f7984:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f7986:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f798a:	480e      	ldr	r0, [pc, #56]	; (23f79c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f798c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f7990:	b1a9      	cbz	r1, 23f79be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f7992:	780b      	ldrb	r3, [r1, #0]
 23f7994:	2b03      	cmp	r3, #3
 23f7996:	d006      	beq.n	23f79a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f7998:	b98b      	cbnz	r3, 23f79be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f799a:	6813      	ldr	r3, [r2, #0]
 23f799c:	6858      	ldr	r0, [r3, #4]
 23f799e:	684b      	ldr	r3, [r1, #4]
 23f79a0:	5cc3      	ldrb	r3, [r0, r3]
 23f79a2:	2b6e      	cmp	r3, #110	; 0x6e
 23f79a4:	d007      	beq.n	23f79b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f79a6:	6813      	ldr	r3, [r2, #0]
 23f79a8:	684d      	ldr	r5, [r1, #4]
 23f79aa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f79ac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f79ae:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f79b0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f79b2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f79b4:	60e3      	str	r3, [r4, #12]
 23f79b6:	4611      	mov	r1, r2
 23f79b8:	4620      	mov	r0, r4
 23f79ba:	f7ff ff6c 	bl	23f7896 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f79be:	4620      	mov	r0, r4
 23f79c0:	bd38      	pop	{r3, r4, r5, pc}
 23f79c2:	bf00      	nop
 23f79c4:	023fc6fe 	.word	0x023fc6fe

023f79c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f79c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f79ca:	2500      	movs	r5, #0
 23f79cc:	460b      	mov	r3, r1
 23f79ce:	4604      	mov	r4, r0
 23f79d0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f79d2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f79d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f79da:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f79de:	b14b      	cbz	r3, 23f79f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f79e0:	781a      	ldrb	r2, [r3, #0]
 23f79e2:	2a01      	cmp	r2, #1
 23f79e4:	d106      	bne.n	23f79f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f79e6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f79ea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f79ec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f79ee:	6143      	str	r3, [r0, #20]
 23f79f0:	f7ff ff51 	bl	23f7896 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f79f4:	4620      	mov	r0, r4
 23f79f6:	bd38      	pop	{r3, r4, r5, pc}

023f79f8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f79f8:	b510      	push	{r4, lr}
    if (!n_) {
 23f79fa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f79fc:	4604      	mov	r4, r0
    if (!n_) {
 23f79fe:	b163      	cbz	r3, 23f7a1a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f7a00:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f7a02:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f7a04:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f7a06:	3010      	adds	r0, #16
 23f7a08:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f7a0a:	6120      	str	r0, [r4, #16]
    --n_;
 23f7a0c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f7a0e:	b113      	cbz	r3, 23f7a16 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f7a10:	f7ff fede 	bl	23f77d0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f7a14:	60a0      	str	r0, [r4, #8]
    return true;
 23f7a16:	2001      	movs	r0, #1
 23f7a18:	e000      	b.n	23f7a1c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f7a1a:	4618      	mov	r0, r3
}
 23f7a1c:	bd10      	pop	{r4, pc}

023f7a1e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f7a1e:	b510      	push	{r4, lr}
    write('}');
 23f7a20:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f7a22:	4604      	mov	r4, r0
    write('}');
 23f7a24:	f7ff ff49 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f7a28:	2301      	movs	r3, #1
}
 23f7a2a:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7a2c:	7123      	strb	r3, [r4, #4]
}
 23f7a2e:	bd10      	pop	{r4, pc}

023f7a30 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f7a30:	b508      	push	{r3, lr}
    switch (state_) {
 23f7a32:	7903      	ldrb	r3, [r0, #4]
 23f7a34:	2b01      	cmp	r3, #1
 23f7a36:	d002      	beq.n	23f7a3e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f7a38:	2b02      	cmp	r3, #2
 23f7a3a:	d004      	beq.n	23f7a46 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f7a3c:	bd08      	pop	{r3, pc}
        write(',');
 23f7a3e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f7a40:	f7ff ff3b 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
}
 23f7a44:	e7fa      	b.n	23f7a3c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f7a46:	213a      	movs	r1, #58	; 0x3a
 23f7a48:	e7fa      	b.n	23f7a40 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f7a4a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f7a4a:	b510      	push	{r4, lr}
 23f7a4c:	4604      	mov	r4, r0
    writeSeparator();
 23f7a4e:	f7ff ffef 	bl	23f7a30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f7a52:	4620      	mov	r0, r4
 23f7a54:	217b      	movs	r1, #123	; 0x7b
 23f7a56:	f7ff ff30 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f7a5a:	2300      	movs	r3, #0
}
 23f7a5c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f7a5e:	7123      	strb	r3, [r4, #4]
}
 23f7a60:	bd10      	pop	{r4, pc}
	...

023f7a64 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f7a64:	b513      	push	{r0, r1, r4, lr}
 23f7a66:	4604      	mov	r4, r0
 23f7a68:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f7a6a:	f7ff ffe1 	bl	23f7a30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f7a6e:	6823      	ldr	r3, [r4, #0]
 23f7a70:	4620      	mov	r0, r4
 23f7a72:	68db      	ldr	r3, [r3, #12]
 23f7a74:	9a01      	ldr	r2, [sp, #4]
 23f7a76:	4903      	ldr	r1, [pc, #12]	; (23f7a84 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f7a78:	4798      	blx	r3
    state_ = NEXT;
 23f7a7a:	2301      	movs	r3, #1
}
 23f7a7c:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7a7e:	7123      	strb	r3, [r4, #4]
}
 23f7a80:	b002      	add	sp, #8
 23f7a82:	bd10      	pop	{r4, pc}
 23f7a84:	023fc766 	.word	0x023fc766

023f7a88 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f7a88:	b513      	push	{r0, r1, r4, lr}
 23f7a8a:	4604      	mov	r4, r0
 23f7a8c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f7a8e:	f7ff ffcf 	bl	23f7a30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f7a92:	6823      	ldr	r3, [r4, #0]
 23f7a94:	4620      	mov	r0, r4
 23f7a96:	68db      	ldr	r3, [r3, #12]
 23f7a98:	9a01      	ldr	r2, [sp, #4]
 23f7a9a:	4903      	ldr	r1, [pc, #12]	; (23f7aa8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f7a9c:	4798      	blx	r3
    state_ = NEXT;
 23f7a9e:	2301      	movs	r3, #1
}
 23f7aa0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7aa2:	7123      	strb	r3, [r4, #4]
}
 23f7aa4:	b002      	add	sp, #8
 23f7aa6:	bd10      	pop	{r4, pc}
 23f7aa8:	023ff9a4 	.word	0x023ff9a4

023f7aac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f7aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f7ab0:	460d      	mov	r5, r1
 23f7ab2:	4690      	mov	r8, r2
    write('"');
 23f7ab4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f7ab6:	4604      	mov	r4, r0
 23f7ab8:	462f      	mov	r7, r5
    write('"');
 23f7aba:	f7ff fefe 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f7abe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f7b64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f7ac2:	44a8      	add	r8, r5
    while (s != end) {
 23f7ac4:	4547      	cmp	r7, r8
 23f7ac6:	46ba      	mov	sl, r7
 23f7ac8:	d03d      	beq.n	23f7b46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f7aca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f7ace:	2e22      	cmp	r6, #34	; 0x22
 23f7ad0:	d006      	beq.n	23f7ae0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f7ad2:	2e5c      	cmp	r6, #92	; 0x5c
 23f7ad4:	d004      	beq.n	23f7ae0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f7ad6:	4630      	mov	r0, r6
 23f7ad8:	f003 fd16 	bl	23fb508 <isprint>
 23f7adc:	2800      	cmp	r0, #0
 23f7ade:	d1f1      	bne.n	23f7ac4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f7ae0:	6823      	ldr	r3, [r4, #0]
 23f7ae2:	4629      	mov	r1, r5
 23f7ae4:	4620      	mov	r0, r4
 23f7ae6:	689b      	ldr	r3, [r3, #8]
 23f7ae8:	ebaa 0205 	sub.w	r2, sl, r5
 23f7aec:	4798      	blx	r3
            write('\\');
 23f7aee:	215c      	movs	r1, #92	; 0x5c
 23f7af0:	4620      	mov	r0, r4
 23f7af2:	f7ff fee2 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f7af6:	2e0d      	cmp	r6, #13
 23f7af8:	d80a      	bhi.n	23f7b10 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f7afa:	2e07      	cmp	r6, #7
 23f7afc:	d91c      	bls.n	23f7b38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f7afe:	f1a6 0308 	sub.w	r3, r6, #8
 23f7b02:	2b05      	cmp	r3, #5
 23f7b04:	d818      	bhi.n	23f7b38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f7b06:	e8df f003 	tbb	[pc, r3]
 23f7b0a:	0f0d      	.short	0x0f0d
 23f7b0c:	15131711 	.word	0x15131711
 23f7b10:	2e22      	cmp	r6, #34	; 0x22
 23f7b12:	d001      	beq.n	23f7b18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f7b14:	2e5c      	cmp	r6, #92	; 0x5c
 23f7b16:	d10f      	bne.n	23f7b38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f7b18:	4631      	mov	r1, r6
                write('b');
 23f7b1a:	4620      	mov	r0, r4
 23f7b1c:	f7ff fecd 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f7b20:	463d      	mov	r5, r7
    while (s != end) {
 23f7b22:	e7cf      	b.n	23f7ac4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f7b24:	2162      	movs	r1, #98	; 0x62
 23f7b26:	e7f8      	b.n	23f7b1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f7b28:	2174      	movs	r1, #116	; 0x74
 23f7b2a:	e7f6      	b.n	23f7b1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f7b2c:	216e      	movs	r1, #110	; 0x6e
 23f7b2e:	e7f4      	b.n	23f7b1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f7b30:	2166      	movs	r1, #102	; 0x66
 23f7b32:	e7f2      	b.n	23f7b1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f7b34:	2172      	movs	r1, #114	; 0x72
 23f7b36:	e7f0      	b.n	23f7b1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f7b38:	6823      	ldr	r3, [r4, #0]
 23f7b3a:	4632      	mov	r2, r6
 23f7b3c:	4649      	mov	r1, r9
 23f7b3e:	4620      	mov	r0, r4
 23f7b40:	68db      	ldr	r3, [r3, #12]
 23f7b42:	4798      	blx	r3
                break;
 23f7b44:	e7ec      	b.n	23f7b20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f7b46:	42bd      	cmp	r5, r7
 23f7b48:	d005      	beq.n	23f7b56 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f7b4a:	6823      	ldr	r3, [r4, #0]
 23f7b4c:	4629      	mov	r1, r5
 23f7b4e:	4620      	mov	r0, r4
 23f7b50:	689b      	ldr	r3, [r3, #8]
 23f7b52:	1b7a      	subs	r2, r7, r5
 23f7b54:	4798      	blx	r3
    }
    write('"');
 23f7b56:	2122      	movs	r1, #34	; 0x22
 23f7b58:	4620      	mov	r0, r4
 23f7b5a:	f7ff feae 	bl	23f78ba <_ZN5spark10JSONWriter5writeEc>
}
 23f7b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f7b62:	bf00      	nop
 23f7b64:	023ff9a7 	.word	0x023ff9a7

023f7b68 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f7b68:	b513      	push	{r0, r1, r4, lr}
 23f7b6a:	4604      	mov	r4, r0
 23f7b6c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f7b70:	f7ff ff5e 	bl	23f7a30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f7b74:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f7b78:	4620      	mov	r0, r4
 23f7b7a:	f7ff ff97 	bl	23f7aac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f7b7e:	2302      	movs	r3, #2
}
 23f7b80:	4620      	mov	r0, r4
    state_ = VALUE;
 23f7b82:	7123      	strb	r3, [r4, #4]
}
 23f7b84:	b002      	add	sp, #8
 23f7b86:	bd10      	pop	{r4, pc}

023f7b88 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f7b88:	b513      	push	{r0, r1, r4, lr}
 23f7b8a:	4604      	mov	r4, r0
 23f7b8c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f7b90:	f7ff ff4e 	bl	23f7a30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f7b94:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f7b98:	4620      	mov	r0, r4
 23f7b9a:	f7ff ff87 	bl	23f7aac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f7b9e:	2301      	movs	r3, #1
}
 23f7ba0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7ba2:	7123      	strb	r3, [r4, #4]
}
 23f7ba4:	b002      	add	sp, #8
 23f7ba6:	bd10      	pop	{r4, pc}

023f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f7ba8:	b510      	push	{r4, lr}
 23f7baa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23f7bac:	6800      	ldr	r0, [r0, #0]
 23f7bae:	b108      	cbz	r0, 23f7bb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23f7bb0:	f7ff fe5d 	bl	23f786e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23f7bb4:	4620      	mov	r0, r4
 23f7bb6:	bd10      	pop	{r4, pc}

023f7bb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f7bb8:	7441      	strb	r1, [r0, #17]
}
 23f7bba:	4770      	bx	lr

023f7bbc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f7bbc:	4770      	bx	lr

023f7bbe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f7bbe:	4770      	bx	lr

023f7bc0 <_ZN9USBSerial4readEv>:
{
 23f7bc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f7bc2:	2100      	movs	r1, #0
 23f7bc4:	7c00      	ldrb	r0, [r0, #16]
 23f7bc6:	f7ff f88b 	bl	23f6ce0 <HAL_USB_USART_Receive_Data>
}
 23f7bca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f7bce:	bd08      	pop	{r3, pc}

023f7bd0 <_ZN9USBSerial4peekEv>:
{
 23f7bd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f7bd2:	2101      	movs	r1, #1
 23f7bd4:	7c00      	ldrb	r0, [r0, #16]
 23f7bd6:	f7ff f883 	bl	23f6ce0 <HAL_USB_USART_Receive_Data>
}
 23f7bda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f7bde:	bd08      	pop	{r3, pc}

023f7be0 <_ZN9USBSerial17availableForWriteEv>:
{
 23f7be0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f7be2:	7c00      	ldrb	r0, [r0, #16]
 23f7be4:	f7ff f86e 	bl	23f6cc4 <HAL_USB_USART_Available_Data_For_Write>
}
 23f7be8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f7bec:	bd08      	pop	{r3, pc}

023f7bee <_ZN9USBSerial9availableEv>:
{
 23f7bee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f7bf0:	7c00      	ldrb	r0, [r0, #16]
 23f7bf2:	f7ff f859 	bl	23f6ca8 <HAL_USB_USART_Available_Data>
}
 23f7bf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f7bfa:	bd08      	pop	{r3, pc}

023f7bfc <_ZN9USBSerial5writeEh>:
{
 23f7bfc:	b513      	push	{r0, r1, r4, lr}
 23f7bfe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f7c00:	7c00      	ldrb	r0, [r0, #16]
{
 23f7c02:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f7c04:	f7ff f85e 	bl	23f6cc4 <HAL_USB_USART_Available_Data_For_Write>
 23f7c08:	2800      	cmp	r0, #0
 23f7c0a:	9901      	ldr	r1, [sp, #4]
 23f7c0c:	dc01      	bgt.n	23f7c12 <_ZN9USBSerial5writeEh+0x16>
 23f7c0e:	7c60      	ldrb	r0, [r4, #17]
 23f7c10:	b120      	cbz	r0, 23f7c1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f7c12:	7c20      	ldrb	r0, [r4, #16]
 23f7c14:	f7ff f872 	bl	23f6cfc <HAL_USB_USART_Send_Data>
 23f7c18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f7c1c:	b002      	add	sp, #8
 23f7c1e:	bd10      	pop	{r4, pc}

023f7c20 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f7c20:	7c00      	ldrb	r0, [r0, #16]
 23f7c22:	f7ff b879 	b.w	23f6d18 <HAL_USB_USART_Flush_Data>

023f7c26 <_ZN9USBSerialD0Ev>:
 23f7c26:	b510      	push	{r4, lr}
 23f7c28:	4604      	mov	r4, r0
 23f7c2a:	2114      	movs	r1, #20
 23f7c2c:	f7f5 fbf7 	bl	23ed41e <_ZdlPvj>
 23f7c30:	4620      	mov	r0, r4
 23f7c32:	bd10      	pop	{r4, pc}

023f7c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f7c34:	b510      	push	{r4, lr}
 23f7c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f7c3a:	4604      	mov	r4, r0
 23f7c3c:	4608      	mov	r0, r1
 23f7c3e:	2100      	movs	r1, #0
 23f7c40:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f7c44:	4b04      	ldr	r3, [pc, #16]	; (23f7c58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f7c46:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f7c48:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f7c4a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f7c4c:	4611      	mov	r1, r2
  _blocking = true;
 23f7c4e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f7c50:	f7ff f800 	bl	23f6c54 <HAL_USB_USART_Init>
}
 23f7c54:	4620      	mov	r0, r4
 23f7c56:	bd10      	pop	{r4, pc}
 23f7c58:	023ff9b8 	.word	0x023ff9b8

023f7c5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f7c5c:	2200      	movs	r2, #0
 23f7c5e:	7c00      	ldrb	r0, [r0, #16]
 23f7c60:	f7ff b806 	b.w	23f6c70 <HAL_USB_USART_Begin>

023f7c64 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23f7c64:	7c00      	ldrb	r0, [r0, #16]
 23f7c66:	f7ff b811 	b.w	23f6c8c <HAL_USB_USART_End>

023f7c6a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f7c6a:	7c00      	ldrb	r0, [r0, #16]
 23f7c6c:	f7ff b862 	b.w	23f6d34 <HAL_USB_USART_Is_Connected>

023f7c70 <_Z19acquireSerialBufferv>:
{
 23f7c70:	b510      	push	{r4, lr}
 23f7c72:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f7c74:	2214      	movs	r2, #20
 23f7c76:	2100      	movs	r1, #0
 23f7c78:	f003 fc78 	bl	23fb56c <memset>
}
 23f7c7c:	4620      	mov	r0, r4
 23f7c7e:	bd10      	pop	{r4, pc}

023f7c80 <_Z16_fetch_usbserialv>:
{
 23f7c80:	b510      	push	{r4, lr}
 23f7c82:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f7c84:	a803      	add	r0, sp, #12
 23f7c86:	f7ff fff3 	bl	23f7c70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f7c8a:	4c0c      	ldr	r4, [pc, #48]	; (23f7cbc <_Z16_fetch_usbserialv+0x3c>)
 23f7c8c:	e8d4 1f8f 	ldab	r1, [r4]
 23f7c90:	f011 0101 	ands.w	r1, r1, #1
 23f7c94:	d10f      	bne.n	23f7cb6 <_Z16_fetch_usbserialv+0x36>
 23f7c96:	4620      	mov	r0, r4
 23f7c98:	9101      	str	r1, [sp, #4]
 23f7c9a:	f7f5 fbcf 	bl	23ed43c <__cxa_guard_acquire>
 23f7c9e:	9901      	ldr	r1, [sp, #4]
 23f7ca0:	b148      	cbz	r0, 23f7cb6 <_Z16_fetch_usbserialv+0x36>
 23f7ca2:	aa03      	add	r2, sp, #12
 23f7ca4:	4806      	ldr	r0, [pc, #24]	; (23f7cc0 <_Z16_fetch_usbserialv+0x40>)
 23f7ca6:	f7ff ffc5 	bl	23f7c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f7caa:	4620      	mov	r0, r4
 23f7cac:	f7f5 fbcb 	bl	23ed446 <__cxa_guard_release>
 23f7cb0:	4804      	ldr	r0, [pc, #16]	; (23f7cc4 <_Z16_fetch_usbserialv+0x44>)
 23f7cb2:	f003 fc1b 	bl	23fb4ec <atexit>
	return _usbserial;
}
 23f7cb6:	4802      	ldr	r0, [pc, #8]	; (23f7cc0 <_Z16_fetch_usbserialv+0x40>)
 23f7cb8:	b008      	add	sp, #32
 23f7cba:	bd10      	pop	{r4, pc}
 23f7cbc:	1007ae68 	.word	0x1007ae68
 23f7cc0:	1007ae6c 	.word	0x1007ae6c
 23f7cc4:	023f7bbd 	.word	0x023f7bbd

023f7cc8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23f7cc8:	4770      	bx	lr

023f7cca <_ZN9IPAddressD0Ev>:
 23f7cca:	b510      	push	{r4, lr}
 23f7ccc:	4604      	mov	r4, r0
 23f7cce:	2118      	movs	r1, #24
 23f7cd0:	f7f5 fba5 	bl	23ed41e <_ZdlPvj>
 23f7cd4:	4620      	mov	r0, r4
 23f7cd6:	bd10      	pop	{r4, pc}

023f7cd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f7cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f7cda:	7d03      	ldrb	r3, [r0, #20]
{
 23f7cdc:	460e      	mov	r6, r1
	if (address.v==6) {
 23f7cde:	2b06      	cmp	r3, #6
 23f7ce0:	f04f 0400 	mov.w	r4, #0
{
 23f7ce4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7ce6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f7cea:	d012      	beq.n	23f7d12 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f7cec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f7cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f7cf4:	220a      	movs	r2, #10
 23f7cf6:	4630      	mov	r0, r6
 23f7cf8:	f001 f913 	bl	23f8f22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f7cfc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f7cfe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f7d00:	d019      	beq.n	23f7d36 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f7d02:	2c00      	cmp	r4, #0
 23f7d04:	d0f4      	beq.n	23f7cf0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f7d06:	212e      	movs	r1, #46	; 0x2e
 23f7d08:	4630      	mov	r0, r6
 23f7d0a:	f001 f907 	bl	23f8f1c <_ZN5Print5printEc>
 23f7d0e:	4404      	add	r4, r0
 23f7d10:	e7ee      	b.n	23f7cf0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7d12:	232f      	movs	r3, #47	; 0x2f
 23f7d14:	466a      	mov	r2, sp
 23f7d16:	4639      	mov	r1, r7
 23f7d18:	200a      	movs	r0, #10
		buf[0] = 0;
 23f7d1a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7d1e:	f7ff f905 	bl	23f6f2c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f7d22:	4668      	mov	r0, sp
 23f7d24:	f7f5 fb50 	bl	23ed3c8 <strlen>
 23f7d28:	6833      	ldr	r3, [r6, #0]
 23f7d2a:	4602      	mov	r2, r0
 23f7d2c:	4669      	mov	r1, sp
 23f7d2e:	4630      	mov	r0, r6
 23f7d30:	68db      	ldr	r3, [r3, #12]
 23f7d32:	4798      	blx	r3
 23f7d34:	4604      	mov	r4, r0
    }
    return n;
}
 23f7d36:	4620      	mov	r0, r4
 23f7d38:	b00d      	add	sp, #52	; 0x34
 23f7d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f7d3c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f7d3c:	b510      	push	{r4, lr}
 23f7d3e:	4604      	mov	r4, r0
 23f7d40:	4b04      	ldr	r3, [pc, #16]	; (23f7d54 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f7d42:	2211      	movs	r2, #17
 23f7d44:	2100      	movs	r1, #0
 23f7d46:	f840 3b04 	str.w	r3, [r0], #4
 23f7d4a:	f003 fc0f 	bl	23fb56c <memset>
}
 23f7d4e:	4620      	mov	r0, r4
 23f7d50:	bd10      	pop	{r4, pc}
 23f7d52:	bf00      	nop
 23f7d54:	023ff9e8 	.word	0x023ff9e8

023f7d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f7d58:	4603      	mov	r3, r0
 23f7d5a:	4a07      	ldr	r2, [pc, #28]	; (23f7d78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f7d5c:	b510      	push	{r4, lr}
 23f7d5e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f7d62:	f101 0210 	add.w	r2, r1, #16
 23f7d66:	f851 4b04 	ldr.w	r4, [r1], #4
 23f7d6a:	4291      	cmp	r1, r2
 23f7d6c:	f843 4b04 	str.w	r4, [r3], #4
 23f7d70:	d1f9      	bne.n	23f7d66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f7d72:	780a      	ldrb	r2, [r1, #0]
 23f7d74:	701a      	strb	r2, [r3, #0]
}
 23f7d76:	bd10      	pop	{r4, pc}
 23f7d78:	023ff9e8 	.word	0x023ff9e8

023f7d7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f7d7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f7d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f7d82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f7d86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f7d8a:	2304      	movs	r3, #4
 23f7d8c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f7d90:	6041      	str	r1, [r0, #4]
 23f7d92:	7503      	strb	r3, [r0, #20]
}
 23f7d94:	bd10      	pop	{r4, pc}
	...

023f7d98 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f7d98:	b507      	push	{r0, r1, r2, lr}
 23f7d9a:	4b06      	ldr	r3, [pc, #24]	; (23f7db4 <_ZN9IPAddressC1EPKh+0x1c>)
 23f7d9c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f7d9e:	78cb      	ldrb	r3, [r1, #3]
 23f7da0:	9300      	str	r3, [sp, #0]
 23f7da2:	788b      	ldrb	r3, [r1, #2]
 23f7da4:	784a      	ldrb	r2, [r1, #1]
 23f7da6:	7809      	ldrb	r1, [r1, #0]
 23f7da8:	f7ff ffe8 	bl	23f7d7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f7dac:	b003      	add	sp, #12
 23f7dae:	f85d fb04 	ldr.w	pc, [sp], #4
 23f7db2:	bf00      	nop
 23f7db4:	023ff9e8 	.word	0x023ff9e8

023f7db8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f7db8:	4b01      	ldr	r3, [pc, #4]	; (23f7dc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f7dba:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f7dbc:	4770      	bx	lr
 23f7dbe:	bf00      	nop
 23f7dc0:	10079c0c 	.word	0x10079c0c

023f7dc4 <serialEventRun>:
{
 23f7dc4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f7dc6:	4b0f      	ldr	r3, [pc, #60]	; (23f7e04 <serialEventRun+0x40>)
 23f7dc8:	b143      	cbz	r3, 23f7ddc <serialEventRun+0x18>
 23f7dca:	f7ff ff59 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f7dce:	6803      	ldr	r3, [r0, #0]
 23f7dd0:	691b      	ldr	r3, [r3, #16]
 23f7dd2:	4798      	blx	r3
 23f7dd4:	2800      	cmp	r0, #0
 23f7dd6:	dd01      	ble.n	23f7ddc <serialEventRun+0x18>
        serialEvent();
 23f7dd8:	e000      	b.n	23f7ddc <serialEventRun+0x18>
 23f7dda:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f7ddc:	4b0a      	ldr	r3, [pc, #40]	; (23f7e08 <serialEventRun+0x44>)
 23f7dde:	b143      	cbz	r3, 23f7df2 <serialEventRun+0x2e>
 23f7de0:	f001 faec 	bl	23f93bc <_Z22__fetch_global_Serial1v>
 23f7de4:	6803      	ldr	r3, [r0, #0]
 23f7de6:	691b      	ldr	r3, [r3, #16]
 23f7de8:	4798      	blx	r3
 23f7dea:	2800      	cmp	r0, #0
 23f7dec:	dd01      	ble.n	23f7df2 <serialEventRun+0x2e>
        serialEvent1();
 23f7dee:	e000      	b.n	23f7df2 <serialEventRun+0x2e>
 23f7df0:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f7df2:	4b06      	ldr	r3, [pc, #24]	; (23f7e0c <serialEventRun+0x48>)
 23f7df4:	b10b      	cbz	r3, 23f7dfa <serialEventRun+0x36>
 23f7df6:	f001 fb27 	bl	23f9448 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23f7dfa:	4b05      	ldr	r3, [pc, #20]	; (23f7e10 <serialEventRun+0x4c>)
 23f7dfc:	b10b      	cbz	r3, 23f7e02 <serialEventRun+0x3e>
 23f7dfe:	f001 fb59 	bl	23f94b4 <_Z15serialEventRun3v>
}
 23f7e02:	bd08      	pop	{r3, pc}
	...

023f7e14 <_post_loop>:
{
 23f7e14:	b508      	push	{r3, lr}
	serialEventRun();
 23f7e16:	f7ff ffd5 	bl	23f7dc4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f7e1a:	f7ff f905 	bl	23f7028 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f7e1e:	4b01      	ldr	r3, [pc, #4]	; (23f7e24 <_post_loop+0x10>)
 23f7e20:	6018      	str	r0, [r3, #0]
}
 23f7e22:	bd08      	pop	{r3, pc}
 23f7e24:	1007af08 	.word	0x1007af08

023f7e28 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f7e28:	4805      	ldr	r0, [pc, #20]	; (23f7e40 <_Z33system_initialize_user_backup_ramv+0x18>)
 23f7e2a:	4a06      	ldr	r2, [pc, #24]	; (23f7e44 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f7e2c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f7e2e:	1a12      	subs	r2, r2, r0
 23f7e30:	4905      	ldr	r1, [pc, #20]	; (23f7e48 <_Z33system_initialize_user_backup_ramv+0x20>)
 23f7e32:	f003 fb74 	bl	23fb51e <memcpy>
    __backup_sram_signature = signature;
 23f7e36:	4b05      	ldr	r3, [pc, #20]	; (23f7e4c <_Z33system_initialize_user_backup_ramv+0x24>)
 23f7e38:	4a05      	ldr	r2, [pc, #20]	; (23f7e50 <_Z33system_initialize_user_backup_ramv+0x28>)
 23f7e3a:	601a      	str	r2, [r3, #0]
}
 23f7e3c:	bd08      	pop	{r3, pc}
 23f7e3e:	bf00      	nop
 23f7e40:	1007b400 	.word	0x1007b400
 23f7e44:	1007b404 	.word	0x1007b404
 23f7e48:	085ff604 	.word	0x085ff604
 23f7e4c:	1007b400 	.word	0x1007b400
 23f7e50:	9a271c1e 	.word	0x9a271c1e

023f7e54 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f7e54:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f7e56:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f7e58:	461a      	mov	r2, r3
 23f7e5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f7e5e:	9300      	str	r3, [sp, #0]
 23f7e60:	f7ff fa86 	bl	23f7370 <system_ctrl_set_result>
}
 23f7e64:	b003      	add	sp, #12
 23f7e66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f7e6c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f7e6c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f7e6e:	8843      	ldrh	r3, [r0, #2]
 23f7e70:	2b0a      	cmp	r3, #10
 23f7e72:	d008      	beq.n	23f7e86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f7e74:	2b50      	cmp	r3, #80	; 0x50
 23f7e76:	d10b      	bne.n	23f7e90 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f7e78:	4b09      	ldr	r3, [pc, #36]	; (23f7ea0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f7e7a:	681b      	ldr	r3, [r3, #0]
 23f7e7c:	b14b      	cbz	r3, 23f7e92 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f7e7e:	b003      	add	sp, #12
 23f7e80:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f7e84:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f7e86:	f7ff ffe5 	bl	23f7e54 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f7e8a:	b003      	add	sp, #12
 23f7e8c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f7e90:	2300      	movs	r3, #0
 23f7e92:	461a      	mov	r2, r3
 23f7e94:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f7e98:	9300      	str	r3, [sp, #0]
 23f7e9a:	f7ff fa69 	bl	23f7370 <system_ctrl_set_result>
}
 23f7e9e:	e7f4      	b.n	23f7e8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f7ea0:	1007ae84 	.word	0x1007ae84

023f7ea4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f7ea4:	2100      	movs	r1, #0
{
 23f7ea6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f7ea8:	4811      	ldr	r0, [pc, #68]	; (23f7ef0 <module_user_init_hook+0x4c>)
 23f7eaa:	f7ff fadf 	bl	23f746c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f7eae:	4b11      	ldr	r3, [pc, #68]	; (23f7ef4 <module_user_init_hook+0x50>)
 23f7eb0:	681a      	ldr	r2, [r3, #0]
 23f7eb2:	4b11      	ldr	r3, [pc, #68]	; (23f7ef8 <module_user_init_hook+0x54>)
 23f7eb4:	429a      	cmp	r2, r3
 23f7eb6:	bf0c      	ite	eq
 23f7eb8:	2201      	moveq	r2, #1
 23f7eba:	2200      	movne	r2, #0
 23f7ebc:	4b0f      	ldr	r3, [pc, #60]	; (23f7efc <module_user_init_hook+0x58>)
 23f7ebe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f7ec0:	d001      	beq.n	23f7ec6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f7ec2:	f7ff ffb1 	bl	23f7e28 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f7ec6:	f7ff f885 	bl	23f6fd4 <HAL_RNG_GetRandomNumber>
 23f7eca:	4604      	mov	r4, r0
    srand(seed);
 23f7ecc:	f003 fb66 	bl	23fb59c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f7ed0:	4b0b      	ldr	r3, [pc, #44]	; (23f7f00 <module_user_init_hook+0x5c>)
 23f7ed2:	b113      	cbz	r3, 23f7eda <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f7ed4:	4620      	mov	r0, r4
 23f7ed6:	e000      	b.n	23f7eda <module_user_init_hook+0x36>
 23f7ed8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f7eda:	2100      	movs	r1, #0
 23f7edc:	4808      	ldr	r0, [pc, #32]	; (23f7f00 <module_user_init_hook+0x5c>)
 23f7ede:	f7ff f959 	bl	23f7194 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f7ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f7ee6:	2100      	movs	r1, #0
 23f7ee8:	4806      	ldr	r0, [pc, #24]	; (23f7f04 <module_user_init_hook+0x60>)
 23f7eea:	f7ff ba33 	b.w	23f7354 <system_ctrl_set_app_request_handler>
 23f7eee:	bf00      	nop
 23f7ef0:	023f7db9 	.word	0x023f7db9
 23f7ef4:	1007b400 	.word	0x1007b400
 23f7ef8:	9a271c1e 	.word	0x9a271c1e
 23f7efc:	1007ae80 	.word	0x1007ae80
 23f7f00:	00000000 	.word	0x00000000
 23f7f04:	023f7e6d 	.word	0x023f7e6d

023f7f08 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f7f08:	2200      	movs	r2, #0
 23f7f0a:	4b01      	ldr	r3, [pc, #4]	; (23f7f10 <_GLOBAL__sub_I_RGB+0x8>)
 23f7f0c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f7f0e:	4770      	bx	lr
 23f7f10:	1007ae88 	.word	0x1007ae88

023f7f14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f7f14:	2100      	movs	r1, #0
 23f7f16:	f7ff ba01 	b.w	23f731c <system_delay_ms>
	...

023f7f1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f7f1c:	4b02      	ldr	r3, [pc, #8]	; (23f7f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f7f1e:	681a      	ldr	r2, [r3, #0]
 23f7f20:	4b02      	ldr	r3, [pc, #8]	; (23f7f2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f7f22:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f7f24:	4770      	bx	lr
 23f7f26:	bf00      	nop
 23f7f28:	10079bfc 	.word	0x10079bfc
 23f7f2c:	1007ae98 	.word	0x1007ae98

023f7f30 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23f7f30:	6880      	ldr	r0, [r0, #8]
 23f7f32:	6803      	ldr	r3, [r0, #0]
 23f7f34:	68db      	ldr	r3, [r3, #12]
 23f7f36:	4718      	bx	r3

023f7f38 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f7f38:	4770      	bx	lr

023f7f3a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f7f3a:	4608      	mov	r0, r1
 23f7f3c:	b111      	cbz	r1, 23f7f44 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f7f3e:	680b      	ldr	r3, [r1, #0]
 23f7f40:	685b      	ldr	r3, [r3, #4]
 23f7f42:	4718      	bx	r3
}
 23f7f44:	4770      	bx	lr

023f7f46 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f7f46:	4770      	bx	lr

023f7f48 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f7f48:	4770      	bx	lr

023f7f4a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f7f4a:	4770      	bx	lr

023f7f4c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f7f4c:	4770      	bx	lr

023f7f4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f7f4e:	b538      	push	{r3, r4, r5, lr}
 23f7f50:	4604      	mov	r4, r0
 23f7f52:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f7f54:	6800      	ldr	r0, [r0, #0]
 23f7f56:	212e      	movs	r1, #46	; 0x2e
 23f7f58:	f003 fb5b 	bl	23fb612 <strchrnul>
    size = s - category;
 23f7f5c:	6823      	ldr	r3, [r4, #0]
 23f7f5e:	1ac3      	subs	r3, r0, r3
 23f7f60:	602b      	str	r3, [r5, #0]
    if (size) {
 23f7f62:	b123      	cbz	r3, 23f7f6e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f7f64:	7803      	ldrb	r3, [r0, #0]
 23f7f66:	b103      	cbz	r3, 23f7f6a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f7f68:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23f7f6a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7f6c:	6020      	str	r0, [r4, #0]
}
 23f7f6e:	4618      	mov	r0, r3
 23f7f70:	bd38      	pop	{r3, r4, r5, pc}

023f7f72 <_ZN5spark16JSONStreamWriterD0Ev>:
 23f7f72:	b510      	push	{r4, lr}
 23f7f74:	4604      	mov	r4, r0
 23f7f76:	210c      	movs	r1, #12
 23f7f78:	f7f5 fa51 	bl	23ed41e <_ZdlPvj>
 23f7f7c:	4620      	mov	r0, r4
 23f7f7e:	bd10      	pop	{r4, pc}

023f7f80 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f7f80:	b510      	push	{r4, lr}
 23f7f82:	4604      	mov	r4, r0
 23f7f84:	2104      	movs	r1, #4
 23f7f86:	f7f5 fa4a 	bl	23ed41e <_ZdlPvj>
 23f7f8a:	4620      	mov	r0, r4
 23f7f8c:	bd10      	pop	{r4, pc}

023f7f8e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f7f8e:	b510      	push	{r4, lr}
 23f7f90:	4604      	mov	r4, r0
 23f7f92:	2104      	movs	r1, #4
 23f7f94:	f7f5 fa43 	bl	23ed41e <_ZdlPvj>
 23f7f98:	4620      	mov	r0, r4
 23f7f9a:	bd10      	pop	{r4, pc}

023f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f7f9c:	f7fe bffe 	b.w	23f6f9c <os_mutex_recursive_lock>

023f7fa0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f7fa0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f7fa2:	f7f5 fa07 	bl	23ed3b4 <strcmp>
}
 23f7fa6:	fab0 f080 	clz	r0, r0
 23f7faa:	0940      	lsrs	r0, r0, #5
 23f7fac:	bd08      	pop	{r3, pc}

023f7fae <__tcf_1>:
 23f7fae:	4770      	bx	lr

023f7fb0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f7fb0:	b510      	push	{r4, lr}
 23f7fb2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f7fb4:	f7ff fe64 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f7fb8:	4284      	cmp	r4, r0
 23f7fba:	d105      	bne.n	23f7fc8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f7fbc:	f7ff fe60 	bl	23f7c80 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f7fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f7fc4:	f7ff be4e 	b.w	23f7c64 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f7fc8:	f001 f9f8 	bl	23f93bc <_Z22__fetch_global_Serial1v>
 23f7fcc:	4284      	cmp	r4, r0
 23f7fce:	d105      	bne.n	23f7fdc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f7fd0:	f001 f9f4 	bl	23f93bc <_Z22__fetch_global_Serial1v>
}
 23f7fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f7fd8:	f7ff bba9 	b.w	23f772e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f7fdc:	b12c      	cbz	r4, 23f7fea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f7fde:	6823      	ldr	r3, [r4, #0]
 23f7fe0:	4620      	mov	r0, r4
}
 23f7fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f7fe6:	685b      	ldr	r3, [r3, #4]
 23f7fe8:	4718      	bx	r3
 23f7fea:	bd10      	pop	{r4, pc}

023f7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f7fec:	680b      	ldr	r3, [r1, #0]
 23f7fee:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f7ff0:	684b      	ldr	r3, [r1, #4]
 23f7ff2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f7ff4:	b113      	cbz	r3, 23f7ffc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f7ff6:	685a      	ldr	r2, [r3, #4]
 23f7ff8:	3201      	adds	r2, #1
 23f7ffa:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f7ffc:	4770      	bx	lr

023f7ffe <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f7ffe:	b513      	push	{r0, r1, r4, lr}
 23f8000:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f8002:	4608      	mov	r0, r1
 23f8004:	9101      	str	r1, [sp, #4]
 23f8006:	f7f5 f9df 	bl	23ed3c8 <strlen>
 23f800a:	4602      	mov	r2, r0
 23f800c:	4620      	mov	r0, r4
 23f800e:	9901      	ldr	r1, [sp, #4]
}
 23f8010:	b002      	add	sp, #8
 23f8012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f8016:	f7ff bdb7 	b.w	23f7b88 <_ZN5spark10JSONWriter5valueEPKcj>

023f801a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f801a:	b513      	push	{r0, r1, r4, lr}
 23f801c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f801e:	4608      	mov	r0, r1
 23f8020:	9101      	str	r1, [sp, #4]
 23f8022:	f7f5 f9d1 	bl	23ed3c8 <strlen>
 23f8026:	4602      	mov	r2, r0
 23f8028:	4620      	mov	r0, r4
 23f802a:	6823      	ldr	r3, [r4, #0]
 23f802c:	9901      	ldr	r1, [sp, #4]
 23f802e:	68db      	ldr	r3, [r3, #12]
}
 23f8030:	b002      	add	sp, #8
 23f8032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f8036:	4718      	bx	r3

023f8038 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f8038:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f803a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f803c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f8040:	2201      	movs	r2, #1
 23f8042:	68db      	ldr	r3, [r3, #12]
 23f8044:	f10d 0107 	add.w	r1, sp, #7
 23f8048:	4798      	blx	r3
}
 23f804a:	b003      	add	sp, #12
 23f804c:	f85d fb04 	ldr.w	pc, [sp], #4

023f8050 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23f8050:	680a      	ldr	r2, [r1, #0]
 23f8052:	b510      	push	{r4, lr}
 23f8054:	6002      	str	r2, [r0, #0]
 23f8056:	684a      	ldr	r2, [r1, #4]
 23f8058:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f805a:	2200      	movs	r2, #0
 23f805c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f8060:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f8062:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8064:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f8066:	6084      	str	r4, [r0, #8]
 23f8068:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f806a:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f806c:	60c4      	str	r4, [r0, #12]
 23f806e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8070:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f8072:	6104      	str	r4, [r0, #16]
 23f8074:	bd10      	pop	{r4, pc}
	...

023f8078 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f8078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f807c:	f04f 0a14 	mov.w	sl, #20
 23f8080:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f8084:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23f8086:	4645      	mov	r5, r8
 23f8088:	fb0a f404 	mul.w	r4, sl, r4
 23f808c:	9300      	str	r3, [sp, #0]
 23f808e:	4b17      	ldr	r3, [pc, #92]	; (23f80ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f8090:	10a4      	asrs	r4, r4, #2
 23f8092:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23f8094:	2c00      	cmp	r4, #0
 23f8096:	dd21      	ble.n	23f80dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23f8098:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f809a:	fb0a f006 	mul.w	r0, sl, r6
 23f809e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f80a2:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f80a6:	463a      	mov	r2, r7
 23f80a8:	455f      	cmp	r7, fp
 23f80aa:	bf28      	it	cs
 23f80ac:	465a      	movcs	r2, fp
 23f80ae:	5828      	ldr	r0, [r5, r0]
 23f80b0:	9101      	str	r1, [sp, #4]
 23f80b2:	f003 fac0 	bl	23fb636 <strncmp>
                if (cmp == 0) {
 23f80b6:	2800      	cmp	r0, #0
 23f80b8:	f04f 0301 	mov.w	r3, #1
 23f80bc:	9901      	ldr	r1, [sp, #4]
 23f80be:	d10b      	bne.n	23f80d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f80c0:	455f      	cmp	r7, fp
 23f80c2:	d103      	bne.n	23f80cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f80c4:	9a00      	ldr	r2, [sp, #0]
 23f80c6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f80c8:	4634      	mov	r4, r6
 23f80ca:	e7e3      	b.n	23f8094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23f80cc:	d9fc      	bls.n	23f80c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23f80ce:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f80d0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f80d4:	3e01      	subs	r6, #1
 23f80d6:	e7f7      	b.n	23f80c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f80d8:	dbf9      	blt.n	23f80ce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f80da:	e7f5      	b.n	23f80c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f80dc:	eba5 0508 	sub.w	r5, r5, r8
}
 23f80e0:	4802      	ldr	r0, [pc, #8]	; (23f80ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f80e2:	10ad      	asrs	r5, r5, #2
 23f80e4:	4368      	muls	r0, r5
 23f80e6:	b003      	add	sp, #12
 23f80e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f80ec:	cccccccd 	.word	0xcccccccd

023f80f0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f80f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f80f2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f80f4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f80f6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f80f8:	b303      	cbz	r3, 23f813c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f80fa:	b1f9      	cbz	r1, 23f813c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f80fc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f80fe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f8102:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f8104:	a903      	add	r1, sp, #12
 23f8106:	a801      	add	r0, sp, #4
 23f8108:	f7ff ff21 	bl	23f7f4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f810c:	4601      	mov	r1, r0
 23f810e:	b1a8      	cbz	r0, 23f813c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8110:	f10d 030b 	add.w	r3, sp, #11
 23f8114:	4620      	mov	r0, r4
 23f8116:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f8118:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f811c:	f7ff ffac 	bl	23f8078 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23f8120:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f8124:	b153      	cbz	r3, 23f813c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23f8126:	6823      	ldr	r3, [r4, #0]
 23f8128:	2414      	movs	r4, #20
 23f812a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23f812e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23f8132:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23f8134:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23f8136:	bfa8      	it	ge
 23f8138:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23f813a:	e7e3      	b.n	23f8104 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23f813c:	4628      	mov	r0, r5
 23f813e:	b004      	add	sp, #16
 23f8140:	bd70      	pop	{r4, r5, r6, pc}

023f8142 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23f8142:	b40e      	push	{r1, r2, r3}
 23f8144:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8146:	b08c      	sub	sp, #48	; 0x30
 23f8148:	af00      	add	r7, sp, #0
 23f814a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23f814e:	f855 2b04 	ldr.w	r2, [r5], #4
 23f8152:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8154:	462b      	mov	r3, r5
 23f8156:	2120      	movs	r1, #32
 23f8158:	f107 0010 	add.w	r0, r7, #16
 23f815c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f815e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8160:	f7ff f93e 	bl	23f73e0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23f8164:	281f      	cmp	r0, #31
 23f8166:	687a      	ldr	r2, [r7, #4]
 23f8168:	d91a      	bls.n	23f81a0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23f816a:	f100 0308 	add.w	r3, r0, #8
 23f816e:	f023 0307 	bic.w	r3, r3, #7
        }
 23f8172:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23f8174:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8178:	1c41      	adds	r1, r0, #1
 23f817a:	462b      	mov	r3, r5
 23f817c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f817e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f8180:	f7ff f92e 	bl	23f73e0 <vsnprintf>
        if (n > 0) {
 23f8184:	1e02      	subs	r2, r0, #0
 23f8186:	dd04      	ble.n	23f8192 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23f8188:	6823      	ldr	r3, [r4, #0]
 23f818a:	4669      	mov	r1, sp
 23f818c:	4620      	mov	r0, r4
 23f818e:	68db      	ldr	r3, [r3, #12]
 23f8190:	4798      	blx	r3
 23f8192:	46b5      	mov	sp, r6
}
 23f8194:	3730      	adds	r7, #48	; 0x30
 23f8196:	46bd      	mov	sp, r7
 23f8198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f819c:	b003      	add	sp, #12
 23f819e:	4770      	bx	lr
    } else if (n > 0) {
 23f81a0:	2800      	cmp	r0, #0
 23f81a2:	d0f7      	beq.n	23f8194 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23f81a4:	6823      	ldr	r3, [r4, #0]
 23f81a6:	4602      	mov	r2, r0
 23f81a8:	68db      	ldr	r3, [r3, #12]
 23f81aa:	4620      	mov	r0, r4
 23f81ac:	f107 0110 	add.w	r1, r7, #16
 23f81b0:	4798      	blx	r3
}
 23f81b2:	e7ef      	b.n	23f8194 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023f81b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23f81b4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23f81b6:	4c08      	ldr	r4, [pc, #32]	; (23f81d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23f81b8:	e8d4 3f8f 	ldab	r3, [r4]
 23f81bc:	07db      	lsls	r3, r3, #31
 23f81be:	d409      	bmi.n	23f81d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f81c0:	4620      	mov	r0, r4
 23f81c2:	f7f5 f93b 	bl	23ed43c <__cxa_guard_acquire>
 23f81c6:	b128      	cbz	r0, 23f81d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f81c8:	4620      	mov	r0, r4
 23f81ca:	f7f5 f93c 	bl	23ed446 <__cxa_guard_release>
 23f81ce:	4803      	ldr	r0, [pc, #12]	; (23f81dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23f81d0:	f003 f98c 	bl	23fb4ec <atexit>
}
 23f81d4:	4802      	ldr	r0, [pc, #8]	; (23f81e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23f81d6:	bd10      	pop	{r4, pc}
 23f81d8:	1007aea0 	.word	0x1007aea0
 23f81dc:	023f7f47 	.word	0x023f7f47
 23f81e0:	10079c00 	.word	0x10079c00

023f81e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23f81e4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23f81e6:	4c08      	ldr	r4, [pc, #32]	; (23f8208 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23f81e8:	e8d4 3f8f 	ldab	r3, [r4]
 23f81ec:	07db      	lsls	r3, r3, #31
 23f81ee:	d409      	bmi.n	23f8204 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f81f0:	4620      	mov	r0, r4
 23f81f2:	f7f5 f923 	bl	23ed43c <__cxa_guard_acquire>
 23f81f6:	b128      	cbz	r0, 23f8204 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f81f8:	4620      	mov	r0, r4
 23f81fa:	f7f5 f924 	bl	23ed446 <__cxa_guard_release>
 23f81fe:	4803      	ldr	r0, [pc, #12]	; (23f820c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23f8200:	f003 f974 	bl	23fb4ec <atexit>
    return &factory;
}
 23f8204:	4802      	ldr	r0, [pc, #8]	; (23f8210 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23f8206:	bd10      	pop	{r4, pc}
 23f8208:	1007aea4 	.word	0x1007aea4
 23f820c:	023f7faf 	.word	0x023f7faf
 23f8210:	10079c04 	.word	0x10079c04

023f8214 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23f8214:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f8216:	2500      	movs	r5, #0
 23f8218:	4604      	mov	r4, r0
 23f821a:	e9c0 5500 	strd	r5, r5, [r0]
 23f821e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f8222:	6085      	str	r5, [r0, #8]
 23f8224:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23f8226:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23f822a:	f7fe fe9b 	bl	23f6f64 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23f822e:	f7ff ffc1 	bl	23f81b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23f8232:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f8234:	f7ff ffd6 	bl	23f81e4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23f8238:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f823a:	6220      	str	r0, [r4, #32]
}
 23f823c:	4620      	mov	r0, r4
 23f823e:	bd38      	pop	{r3, r4, r5, pc}

023f8240 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23f8240:	b510      	push	{r4, lr}
    static LogManager mgr;
 23f8242:	4c0a      	ldr	r4, [pc, #40]	; (23f826c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23f8244:	e8d4 3f8f 	ldab	r3, [r4]
 23f8248:	07db      	lsls	r3, r3, #31
 23f824a:	d40c      	bmi.n	23f8266 <_ZN5spark10LogManager8instanceEv+0x26>
 23f824c:	4620      	mov	r0, r4
 23f824e:	f7f5 f8f5 	bl	23ed43c <__cxa_guard_acquire>
 23f8252:	b140      	cbz	r0, 23f8266 <_ZN5spark10LogManager8instanceEv+0x26>
 23f8254:	4806      	ldr	r0, [pc, #24]	; (23f8270 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f8256:	f7ff ffdd 	bl	23f8214 <_ZN5spark10LogManagerC1Ev>
 23f825a:	4620      	mov	r0, r4
 23f825c:	f7f5 f8f3 	bl	23ed446 <__cxa_guard_release>
 23f8260:	4804      	ldr	r0, [pc, #16]	; (23f8274 <_ZN5spark10LogManager8instanceEv+0x34>)
 23f8262:	f003 f943 	bl	23fb4ec <atexit>
    return &mgr;
}
 23f8266:	4802      	ldr	r0, [pc, #8]	; (23f8270 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f8268:	bd10      	pop	{r4, pc}
 23f826a:	bf00      	nop
 23f826c:	1007ae9c 	.word	0x1007ae9c
 23f8270:	1007aeac 	.word	0x1007aeac
 23f8274:	023f87b5 	.word	0x023f87b5

023f8278 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23f8278:	2300      	movs	r3, #0
 23f827a:	4a02      	ldr	r2, [pc, #8]	; (23f8284 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23f827c:	4902      	ldr	r1, [pc, #8]	; (23f8288 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23f827e:	4803      	ldr	r0, [pc, #12]	; (23f828c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23f8280:	f7fe bf6c 	b.w	23f715c <log_set_callbacks>
 23f8284:	023f859d 	.word	0x023f859d
 23f8288:	023f8529 	.word	0x023f8529
 23f828c:	023f84a9 	.word	0x023f84a9

023f8290 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23f8290:	2300      	movs	r3, #0
 23f8292:	461a      	mov	r2, r3
 23f8294:	4619      	mov	r1, r3
 23f8296:	4618      	mov	r0, r3
 23f8298:	f7fe bf60 	b.w	23f715c <log_set_callbacks>

023f829c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23f829c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f829e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23f82a0:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f82a2:	4668      	mov	r0, sp
 23f82a4:	f7ff fea2 	bl	23f7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f82a8:	466a      	mov	r2, sp
 23f82aa:	4629      	mov	r1, r5
 23f82ac:	4620      	mov	r0, r4
 23f82ae:	f7ff fb8b 	bl	23f79c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23f82b2:	a801      	add	r0, sp, #4
 23f82b4:	f7ff fc78 	bl	23f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f82b8:	4620      	mov	r0, r4
 23f82ba:	b003      	add	sp, #12
 23f82bc:	bd30      	pop	{r4, r5, pc}

023f82be <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23f82be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f82c0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23f82c2:	68cd      	ldr	r5, [r1, #12]
 23f82c4:	4668      	mov	r0, sp
 23f82c6:	f7ff fe91 	bl	23f7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f82ca:	466a      	mov	r2, sp
 23f82cc:	4629      	mov	r1, r5
 23f82ce:	4620      	mov	r0, r4
 23f82d0:	f7ff fb56 	bl	23f7980 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f82d4:	a801      	add	r0, sp, #4
 23f82d6:	f7ff fc67 	bl	23f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f82da:	4620      	mov	r0, r4
 23f82dc:	b003      	add	sp, #12
 23f82de:	bd30      	pop	{r4, r5, pc}

023f82e0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23f82e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f82e2:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23f82e4:	690d      	ldr	r5, [r1, #16]
 23f82e6:	4668      	mov	r0, sp
 23f82e8:	f7ff fe80 	bl	23f7fec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f82ec:	466a      	mov	r2, sp
 23f82ee:	4629      	mov	r1, r5
 23f82f0:	4620      	mov	r0, r4
 23f82f2:	f7ff faee 	bl	23f78d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f82f6:	a801      	add	r0, sp, #4
 23f82f8:	f7ff fc56 	bl	23f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f82fc:	4620      	mov	r0, r4
 23f82fe:	b003      	add	sp, #12
 23f8300:	bd30      	pop	{r4, r5, pc}
	...

023f8304 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23f8304:	b570      	push	{r4, r5, r6, lr}
 23f8306:	b08a      	sub	sp, #40	; 0x28
 23f8308:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23f830a:	4601      	mov	r1, r0
 23f830c:	a804      	add	r0, sp, #16
 23f830e:	f7ff ffc5 	bl	23f829c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23f8312:	4e14      	ldr	r6, [pc, #80]	; (23f8364 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23f8314:	a804      	add	r0, sp, #16
 23f8316:	f7ff fb6f 	bl	23f79f8 <_ZN5spark18JSONObjectIterator4nextEv>
 23f831a:	b1e8      	cbz	r0, 23f8358 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23f831c:	4668      	mov	r0, sp
 23f831e:	a904      	add	r1, sp, #16
 23f8320:	f7ff ffcd 	bl	23f82be <_ZNK5spark18JSONObjectIterator4nameEv>
 23f8324:	4631      	mov	r1, r6
 23f8326:	9802      	ldr	r0, [sp, #8]
 23f8328:	f7ff fe3a 	bl	23f7fa0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23f832c:	4604      	mov	r4, r0
 23f832e:	b110      	cbz	r0, 23f8336 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23f8330:	1e2c      	subs	r4, r5, #0
 23f8332:	bf18      	it	ne
 23f8334:	2401      	movne	r4, #1
 23f8336:	a801      	add	r0, sp, #4
 23f8338:	f7ff fc36 	bl	23f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f833c:	2c00      	cmp	r4, #0
 23f833e:	d0e9      	beq.n	23f8314 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23f8340:	4668      	mov	r0, sp
 23f8342:	a904      	add	r1, sp, #16
 23f8344:	f7ff ffcc 	bl	23f82e0 <_ZNK5spark18JSONObjectIterator5valueEv>
 23f8348:	4668      	mov	r0, sp
 23f834a:	f7ff faf8 	bl	23f793e <_ZNK5spark9JSONValue5toIntEv>
 23f834e:	6028      	str	r0, [r5, #0]
 23f8350:	a801      	add	r0, sp, #4
 23f8352:	f7ff fc29 	bl	23f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8356:	e7dd      	b.n	23f8314 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23f8358:	a805      	add	r0, sp, #20
 23f835a:	f7ff fc25 	bl	23f7ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f835e:	b00a      	add	sp, #40	; 0x28
 23f8360:	bd70      	pop	{r4, r5, r6, pc}
 23f8362:	bf00      	nop
 23f8364:	023ffa10 	.word	0x023ffa10

023f8368 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f8368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f836a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23f836c:	4913      	ldr	r1, [pc, #76]	; (23f83bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23f836e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f8370:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23f8372:	f7f5 f81f 	bl	23ed3b4 <strcmp>
 23f8376:	b950      	cbnz	r0, 23f838e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23f8378:	f7ff fc82 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f837c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f8380:	f7ff fc6c 	bl	23f7c5c <_ZN9USBSerial5beginEl>
}
 23f8384:	b003      	add	sp, #12
 23f8386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23f838a:	f7ff bc79 	b.w	23f7c80 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23f838e:	4620      	mov	r0, r4
 23f8390:	490b      	ldr	r1, [pc, #44]	; (23f83c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23f8392:	f7f5 f80f 	bl	23ed3b4 <strcmp>
 23f8396:	b978      	cbnz	r0, 23f83b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23f8398:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23f839c:	a901      	add	r1, sp, #4
 23f839e:	4628      	mov	r0, r5
        int baud = 9600;
 23f83a0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23f83a2:	f7ff ffaf 	bl	23f8304 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23f83a6:	f001 f809 	bl	23f93bc <_Z22__fetch_global_Serial1v>
 23f83aa:	9901      	ldr	r1, [sp, #4]
 23f83ac:	f7ff f9bc 	bl	23f7728 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23f83b0:	f001 f804 	bl	23f93bc <_Z22__fetch_global_Serial1v>
}
 23f83b4:	b003      	add	sp, #12
 23f83b6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23f83b8:	2000      	movs	r0, #0
 23f83ba:	e7fb      	b.n	23f83b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23f83bc:	023ffa15 	.word	0x023ffa15
 23f83c0:	023ffa1c 	.word	0x023ffa1c

023f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f83c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f83c6:	2614      	movs	r6, #20
 23f83c8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f83cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f83ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f83d2:	42ae      	cmp	r6, r5
 23f83d4:	d005      	beq.n	23f83e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23f83d6:	f105 0008 	add.w	r0, r5, #8
 23f83da:	f7ff fff3 	bl	23f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f83de:	3514      	adds	r5, #20
 23f83e0:	e7f7      	b.n	23f83d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f83e2:	6820      	ldr	r0, [r4, #0]
 23f83e4:	f7fe ffe0 	bl	23f73a8 <free>
}
 23f83e8:	4620      	mov	r0, r4
 23f83ea:	bd70      	pop	{r4, r5, r6, pc}

023f83ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f83ec:	b570      	push	{r4, r5, r6, lr}
 23f83ee:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f83f0:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f83f4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f83f8:	42ae      	cmp	r6, r5
 23f83fa:	d004      	beq.n	23f8406 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f83fc:	4628      	mov	r0, r5
 23f83fe:	f000 fe8f 	bl	23f9120 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f8402:	3510      	adds	r5, #16
 23f8404:	e7f8      	b.n	23f83f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f8406:	6820      	ldr	r0, [r4, #0]
 23f8408:	f7fe ffce 	bl	23f73a8 <free>
}
 23f840c:	4620      	mov	r0, r4
 23f840e:	bd70      	pop	{r4, r5, r6, pc}

023f8410 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23f8410:	b510      	push	{r4, lr}
 23f8412:	4604      	mov	r4, r0
 23f8414:	300c      	adds	r0, #12
 23f8416:	f7ff ffd5 	bl	23f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f841a:	4620      	mov	r0, r4
 23f841c:	f7ff ffe6 	bl	23f83ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f8420:	4620      	mov	r0, r4
 23f8422:	bd10      	pop	{r4, pc}

023f8424 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23f8424:	b510      	push	{r4, lr}
 23f8426:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23f8428:	4b03      	ldr	r3, [pc, #12]	; (23f8438 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23f842a:	f840 3b04 	str.w	r3, [r0], #4
 23f842e:	f7ff ffef 	bl	23f8410 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23f8432:	4620      	mov	r0, r4
 23f8434:	bd10      	pop	{r4, pc}
 23f8436:	bf00      	nop
 23f8438:	023fcc28 	.word	0x023fcc28

023f843c <_ZN5spark16StreamLogHandlerD0Ev>:
 23f843c:	b510      	push	{r4, lr}
 23f843e:	4604      	mov	r4, r0
 23f8440:	f7ff fff0 	bl	23f8424 <_ZN5spark16StreamLogHandlerD1Ev>
 23f8444:	4620      	mov	r0, r4
 23f8446:	2124      	movs	r1, #36	; 0x24
 23f8448:	f7f4 ffe9 	bl	23ed41e <_ZdlPvj>
 23f844c:	4620      	mov	r0, r4
 23f844e:	bd10      	pop	{r4, pc}

023f8450 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23f8450:	b510      	push	{r4, lr}
 23f8452:	4604      	mov	r4, r0
 23f8454:	4b02      	ldr	r3, [pc, #8]	; (23f8460 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23f8456:	6003      	str	r3, [r0, #0]
 23f8458:	f7ff ffe4 	bl	23f8424 <_ZN5spark16StreamLogHandlerD1Ev>
 23f845c:	4620      	mov	r0, r4
 23f845e:	bd10      	pop	{r4, pc}
 23f8460:	023ffab4 	.word	0x023ffab4

023f8464 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23f8464:	b510      	push	{r4, lr}
 23f8466:	4604      	mov	r4, r0
 23f8468:	f7ff fff2 	bl	23f8450 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23f846c:	4620      	mov	r0, r4
 23f846e:	2124      	movs	r1, #36	; 0x24
 23f8470:	f7f4 ffd5 	bl	23ed41e <_ZdlPvj>
 23f8474:	4620      	mov	r0, r4
 23f8476:	bd10      	pop	{r4, pc}

023f8478 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23f8478:	2200      	movs	r2, #0
 23f847a:	e9c0 2200 	strd	r2, r2, [r0]
 23f847e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f8480:	b510      	push	{r4, lr}
 23f8482:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8484:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f8486:	6004      	str	r4, [r0, #0]
 23f8488:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f848a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f848c:	6044      	str	r4, [r0, #4]
 23f848e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8490:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f8492:	6084      	str	r4, [r0, #8]
}
 23f8494:	bd10      	pop	{r4, pc}

023f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f8496:	b510      	push	{r4, lr}
 23f8498:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23f849a:	6803      	ldr	r3, [r0, #0]
 23f849c:	6818      	ldr	r0, [r3, #0]
 23f849e:	f7fe fd8b 	bl	23f6fb8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23f84a2:	4620      	mov	r0, r4
 23f84a4:	bd10      	pop	{r4, pc}
	...

023f84a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23f84a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f84ac:	b087      	sub	sp, #28
 23f84ae:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23f84b0:	4b1c      	ldr	r3, [pc, #112]	; (23f8524 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23f84b2:	4680      	mov	r8, r0
 23f84b4:	685b      	ldr	r3, [r3, #4]
 23f84b6:	4689      	mov	r9, r1
 23f84b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f84bc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23f84be:	b96b      	cbnz	r3, 23f84dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23f84c0:	f7ff febe 	bl	23f8240 <_ZN5spark10LogManager8instanceEv>
 23f84c4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f84c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23f84ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f84cc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23f84ce:	f7ff fd65 	bl	23f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23f84d2:	7b23      	ldrb	r3, [r4, #12]
 23f84d4:	b12b      	cbz	r3, 23f84e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23f84d6:	a805      	add	r0, sp, #20
 23f84d8:	f7ff ffdd 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23f84dc:	b007      	add	sp, #28
 23f84de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23f84e2:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23f84e4:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23f84e8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23f84ea:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f84ee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f84f2:	45aa      	cmp	sl, r5
 23f84f4:	d012      	beq.n	23f851c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23f84f6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23f84fa:	4631      	mov	r1, r6
 23f84fc:	1d38      	adds	r0, r7, #4
 23f84fe:	f7ff fdf7 	bl	23f80f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f8502:	4581      	cmp	r9, r0
 23f8504:	d3f5      	bcc.n	23f84f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23f8506:	9a03      	ldr	r2, [sp, #12]
 23f8508:	683b      	ldr	r3, [r7, #0]
 23f850a:	9200      	str	r2, [sp, #0]
 23f850c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23f8510:	464a      	mov	r2, r9
 23f8512:	4633      	mov	r3, r6
 23f8514:	4641      	mov	r1, r8
 23f8516:	4638      	mov	r0, r7
 23f8518:	47d8      	blx	fp
 23f851a:	e7ea      	b.n	23f84f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23f851c:	2300      	movs	r3, #0
 23f851e:	7323      	strb	r3, [r4, #12]
 23f8520:	e7d9      	b.n	23f84d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23f8522:	bf00      	nop
 23f8524:	e000ed00 	.word	0xe000ed00

023f8528 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23f8528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f852c:	469b      	mov	fp, r3
 23f852e:	4b1a      	ldr	r3, [pc, #104]	; (23f8598 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23f8530:	4680      	mov	r8, r0
 23f8532:	685b      	ldr	r3, [r3, #4]
 23f8534:	4689      	mov	r9, r1
 23f8536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f853a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23f853c:	b96b      	cbnz	r3, 23f855a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23f853e:	f7ff fe7f 	bl	23f8240 <_ZN5spark10LogManager8instanceEv>
 23f8542:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f8544:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f8548:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f854a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f854c:	f7ff fd26 	bl	23f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23f8550:	7b23      	ldrb	r3, [r4, #12]
 23f8552:	b12b      	cbz	r3, 23f8560 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23f8554:	a801      	add	r0, sp, #4
 23f8556:	f7ff ff9e 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f855a:	b003      	add	sp, #12
 23f855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23f8560:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23f8562:	b2f6      	uxtb	r6, r6
 23f8564:	7323      	strb	r3, [r4, #12]
 23f8566:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f856a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f856e:	4555      	cmp	r5, sl
 23f8570:	d00e      	beq.n	23f8590 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23f8572:	f855 7b04 	ldr.w	r7, [r5], #4
 23f8576:	4659      	mov	r1, fp
 23f8578:	1d38      	adds	r0, r7, #4
 23f857a:	f7ff fdb9 	bl	23f80f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f857e:	4286      	cmp	r6, r0
 23f8580:	d3f5      	bcc.n	23f856e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23f8582:	683b      	ldr	r3, [r7, #0]
 23f8584:	464a      	mov	r2, r9
 23f8586:	4641      	mov	r1, r8
 23f8588:	4638      	mov	r0, r7
 23f858a:	68db      	ldr	r3, [r3, #12]
 23f858c:	4798      	blx	r3
 23f858e:	e7ee      	b.n	23f856e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23f8590:	2300      	movs	r3, #0
 23f8592:	7323      	strb	r3, [r4, #12]
 23f8594:	e7de      	b.n	23f8554 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23f8596:	bf00      	nop
 23f8598:	e000ed00 	.word	0xe000ed00

023f859c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23f859c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f85a0:	4b16      	ldr	r3, [pc, #88]	; (23f85fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23f85a2:	4605      	mov	r5, r0
 23f85a4:	685b      	ldr	r3, [r3, #4]
 23f85a6:	460f      	mov	r7, r1
 23f85a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23f85ac:	bb1b      	cbnz	r3, 23f85f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23f85ae:	f7ff fe47 	bl	23f8240 <_ZN5spark10LogManager8instanceEv>
 23f85b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f85b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f85b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f85ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f85bc:	f7ff fcee 	bl	23f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>
 23f85c0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23f85c4:	2446      	movs	r4, #70	; 0x46
 23f85c6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f85ca:	45b0      	cmp	r8, r6
 23f85cc:	d109      	bne.n	23f85e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23f85ce:	a801      	add	r0, sp, #4
 23f85d0:	f7ff ff61 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23f85d4:	42a5      	cmp	r5, r4
 23f85d6:	bfb4      	ite	lt
 23f85d8:	2000      	movlt	r0, #0
 23f85da:	2001      	movge	r0, #1
}
 23f85dc:	b002      	add	sp, #8
 23f85de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23f85e2:	f856 0b04 	ldr.w	r0, [r6], #4
 23f85e6:	4639      	mov	r1, r7
 23f85e8:	3004      	adds	r0, #4
 23f85ea:	f7ff fd81 	bl	23f80f0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23f85ee:	4284      	cmp	r4, r0
 23f85f0:	bfa8      	it	ge
 23f85f2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23f85f4:	e7e9      	b.n	23f85ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23f85f6:	2000      	movs	r0, #0
 23f85f8:	e7f0      	b.n	23f85dc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23f85fa:	bf00      	nop
 23f85fc:	e000ed00 	.word	0xe000ed00

023f8600 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f8600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8602:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23f8606:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f8608:	4604      	mov	r4, r0
 23f860a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f860c:	db0d      	blt.n	23f862a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23f860e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23f8610:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f8612:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f8614:	dd04      	ble.n	23f8620 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23f8616:	00b9      	lsls	r1, r7, #2
 23f8618:	f7fe fed4 	bl	23f73c4 <realloc>
            if (!d) {
 23f861c:	b918      	cbnz	r0, 23f8626 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23f861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23f8620:	f7fe fec2 	bl	23f73a8 <free>
        T* d = nullptr;
 23f8624:	2000      	movs	r0, #0
        data_ = d;
 23f8626:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f8628:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23f862a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f862c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f862e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23f8632:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f8634:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23f8638:	1d08      	adds	r0, r1, #4
 23f863a:	f002 ff7d 	bl	23fb538 <memmove>
    new(p) T(std::move(value));
 23f863e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23f8642:	6863      	ldr	r3, [r4, #4]
    return true;
 23f8644:	2001      	movs	r0, #1
    ++size_;
 23f8646:	3301      	adds	r3, #1
 23f8648:	6063      	str	r3, [r4, #4]
    return true;
 23f864a:	e7e8      	b.n	23f861e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023f864c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f864c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f864e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f8650:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f8654:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8656:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f8658:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23f865a:	f7ff fc9f 	bl	23f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23f865e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f8662:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23f8666:	4293      	cmp	r3, r2
 23f8668:	4619      	mov	r1, r3
 23f866a:	d00a      	beq.n	23f8682 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23f866c:	6809      	ldr	r1, [r1, #0]
 23f866e:	3304      	adds	r3, #4
 23f8670:	42a9      	cmp	r1, r5
 23f8672:	d1f8      	bne.n	23f8666 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23f8674:	a801      	add	r0, sp, #4
 23f8676:	f7ff ff0e 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f867a:	2500      	movs	r5, #0
}
 23f867c:	4628      	mov	r0, r5
 23f867e:	b003      	add	sp, #12
 23f8680:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23f8682:	4629      	mov	r1, r5
 23f8684:	4620      	mov	r0, r4
 23f8686:	f7ff ffbb 	bl	23f8600 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23f868a:	4605      	mov	r5, r0
 23f868c:	2800      	cmp	r0, #0
 23f868e:	d0f1      	beq.n	23f8674 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23f8690:	6863      	ldr	r3, [r4, #4]
 23f8692:	2b01      	cmp	r3, #1
 23f8694:	d101      	bne.n	23f869a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23f8696:	f7ff fdef 	bl	23f8278 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f869a:	a801      	add	r0, sp, #4
 23f869c:	f7ff fefb 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f86a0:	e7ec      	b.n	23f867c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023f86a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f86a2:	460b      	mov	r3, r1
 23f86a4:	b570      	push	{r4, r5, r6, lr}
 23f86a6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23f86a8:	e9d0 0200 	ldrd	r0, r2, [r0]
 23f86ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23f86b0:	4282      	cmp	r2, r0
 23f86b2:	d00f      	beq.n	23f86d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23f86b4:	4601      	mov	r1, r0
            if (*p == value) {
 23f86b6:	681d      	ldr	r5, [r3, #0]
 23f86b8:	f851 6b04 	ldr.w	r6, [r1], #4
 23f86bc:	42ae      	cmp	r6, r5
 23f86be:	d107      	bne.n	23f86d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f86c0:	1a52      	subs	r2, r2, r1
 23f86c2:	f002 ff39 	bl	23fb538 <memmove>
    return true;
 23f86c6:	2001      	movs	r0, #1
    --size_;
 23f86c8:	6863      	ldr	r3, [r4, #4]
 23f86ca:	3b01      	subs	r3, #1
 23f86cc:	6063      	str	r3, [r4, #4]
}
 23f86ce:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23f86d0:	4608      	mov	r0, r1
 23f86d2:	e7ed      	b.n	23f86b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23f86d4:	2000      	movs	r0, #0
 23f86d6:	e7fa      	b.n	23f86ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023f86d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f86d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f86da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f86dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f86e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f86e2:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f86e4:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23f86e6:	f7ff fc59 	bl	23f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23f86ea:	4620      	mov	r0, r4
 23f86ec:	a901      	add	r1, sp, #4
 23f86ee:	f7ff ffd8 	bl	23f86a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23f86f2:	b118      	cbz	r0, 23f86fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23f86f4:	6863      	ldr	r3, [r4, #4]
 23f86f6:	b90b      	cbnz	r3, 23f86fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23f86f8:	f7ff fdca 	bl	23f8290 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f86fc:	a803      	add	r0, sp, #12
 23f86fe:	f7ff feca 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f8702:	b004      	add	sp, #16
 23f8704:	bd10      	pop	{r4, pc}

023f8706 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23f8706:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23f8708:	b570      	push	{r4, r5, r6, lr}
 23f870a:	4604      	mov	r4, r0
 23f870c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f8710:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23f8714:	42ae      	cmp	r6, r5
 23f8716:	d015      	beq.n	23f8744 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23f8718:	4620      	mov	r0, r4
 23f871a:	f105 0110 	add.w	r1, r5, #16
 23f871e:	f7ff ffc0 	bl	23f86a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23f8722:	6863      	ldr	r3, [r4, #4]
 23f8724:	b90b      	cbnz	r3, 23f872a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23f8726:	f7ff fdb3 	bl	23f8290 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23f872a:	69e0      	ldr	r0, [r4, #28]
 23f872c:	6929      	ldr	r1, [r5, #16]
 23f872e:	6803      	ldr	r3, [r0, #0]
 23f8730:	68db      	ldr	r3, [r3, #12]
 23f8732:	4798      	blx	r3
        if (h.stream) {
 23f8734:	6969      	ldr	r1, [r5, #20]
 23f8736:	b119      	cbz	r1, 23f8740 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23f8738:	6a20      	ldr	r0, [r4, #32]
 23f873a:	6803      	ldr	r3, [r0, #0]
 23f873c:	68db      	ldr	r3, [r3, #12]
 23f873e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23f8740:	3518      	adds	r5, #24
 23f8742:	e7e7      	b.n	23f8714 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23f8744:	2618      	movs	r6, #24
 23f8746:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f874a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f874e:	42ae      	cmp	r6, r5
 23f8750:	d004      	beq.n	23f875c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23f8752:	4628      	mov	r0, r5
 23f8754:	f000 fce4 	bl	23f9120 <_ZN6StringD1Ev>
 23f8758:	3518      	adds	r5, #24
 23f875a:	e7f8      	b.n	23f874e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23f875c:	2300      	movs	r3, #0
 23f875e:	6163      	str	r3, [r4, #20]
}
 23f8760:	bd70      	pop	{r4, r5, r6, pc}

023f8762 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23f8762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f8764:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23f8766:	f7ff fd93 	bl	23f8290 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f876a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23f876e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8770:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f8772:	f7ff fc13 	bl	23f7f9c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23f8776:	4620      	mov	r0, r4
 23f8778:	f7ff ffc5 	bl	23f8706 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23f877c:	a801      	add	r0, sp, #4
 23f877e:	f7ff fe8a 	bl	23f8496 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23f8782:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f8784:	b108      	cbz	r0, 23f878a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23f8786:	f7fe fbfb 	bl	23f6f80 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23f878a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f878e:	2618      	movs	r6, #24
 23f8790:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f8794:	42ae      	cmp	r6, r5
 23f8796:	d004      	beq.n	23f87a2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23f8798:	4628      	mov	r0, r5
 23f879a:	f000 fcc1 	bl	23f9120 <_ZN6StringD1Ev>
 23f879e:	3518      	adds	r5, #24
 23f87a0:	e7f8      	b.n	23f8794 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23f87a2:	6920      	ldr	r0, [r4, #16]
 23f87a4:	f7fe fe00 	bl	23f73a8 <free>
 23f87a8:	6820      	ldr	r0, [r4, #0]
 23f87aa:	f7fe fdfd 	bl	23f73a8 <free>
}
 23f87ae:	4620      	mov	r0, r4
 23f87b0:	b002      	add	sp, #8
 23f87b2:	bd70      	pop	{r4, r5, r6, pc}

023f87b4 <__tcf_2>:
    static LogManager mgr;
 23f87b4:	4801      	ldr	r0, [pc, #4]	; (23f87bc <__tcf_2+0x8>)
 23f87b6:	f7ff bfd4 	b.w	23f8762 <_ZN5spark10LogManagerD1Ev>
 23f87ba:	bf00      	nop
 23f87bc:	1007aeac 	.word	0x1007aeac

023f87c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23f87c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f87c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f87c4:	4604      	mov	r4, r0
 23f87c6:	460d      	mov	r5, r1
 23f87c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f87ca:	d915      	bls.n	23f87f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23f87cc:	4290      	cmp	r0, r2
 23f87ce:	d214      	bcs.n	23f87fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23f87d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f87d4:	1a75      	subs	r5, r6, r1
 23f87d6:	f1a1 0714 	sub.w	r7, r1, #20
 23f87da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f87dc:	42b7      	cmp	r7, r6
 23f87de:	d01a      	beq.n	23f8816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23f87e0:	b11c      	cbz	r4, 23f87ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23f87e2:	4631      	mov	r1, r6
 23f87e4:	4620      	mov	r0, r4
 23f87e6:	f7ff fc33 	bl	23f8050 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23f87ea:	f106 0008 	add.w	r0, r6, #8
 23f87ee:	f7ff fde9 	bl	23f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23f87f2:	3e14      	subs	r6, #20
 23f87f4:	3c14      	subs	r4, #20
 23f87f6:	e7f1      	b.n	23f87dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23f87f8:	d00d      	beq.n	23f8816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23f87fa:	42b5      	cmp	r5, r6
 23f87fc:	d00b      	beq.n	23f8816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23f87fe:	b11c      	cbz	r4, 23f8808 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23f8800:	4629      	mov	r1, r5
 23f8802:	4620      	mov	r0, r4
 23f8804:	f7ff fc24 	bl	23f8050 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23f8808:	f105 0008 	add.w	r0, r5, #8
 23f880c:	f7ff fdda 	bl	23f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23f8810:	3514      	adds	r5, #20
 23f8812:	3414      	adds	r4, #20
 23f8814:	e7f1      	b.n	23f87fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23f8816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f8818:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f881a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f881c:	4604      	mov	r4, r0
 23f881e:	460d      	mov	r5, r1
 23f8820:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f8822:	d914      	bls.n	23f884e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23f8824:	4290      	cmp	r0, r2
 23f8826:	d213      	bcs.n	23f8850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23f8828:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23f882c:	1a75      	subs	r5, r6, r1
 23f882e:	f1a1 0710 	sub.w	r7, r1, #16
 23f8832:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f8834:	42b7      	cmp	r7, r6
 23f8836:	d018      	beq.n	23f886a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23f8838:	b11c      	cbz	r4, 23f8842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23f883a:	4631      	mov	r1, r6
 23f883c:	4620      	mov	r0, r4
 23f883e:	f000 fcd8 	bl	23f91f2 <_ZN6StringC1EOS_>
                end->~T();
 23f8842:	4630      	mov	r0, r6
 23f8844:	f000 fc6c 	bl	23f9120 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f8848:	3e10      	subs	r6, #16
 23f884a:	3c10      	subs	r4, #16
 23f884c:	e7f2      	b.n	23f8834 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f884e:	d00c      	beq.n	23f886a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23f8850:	42b5      	cmp	r5, r6
 23f8852:	d00a      	beq.n	23f886a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23f8854:	b11c      	cbz	r4, 23f885e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23f8856:	4629      	mov	r1, r5
 23f8858:	4620      	mov	r0, r4
 23f885a:	f000 fcca 	bl	23f91f2 <_ZN6StringC1EOS_>
                p->~T();
 23f885e:	4628      	mov	r0, r5
 23f8860:	f000 fc5e 	bl	23f9120 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f8864:	3510      	adds	r5, #16
 23f8866:	3410      	adds	r4, #16
 23f8868:	e7f2      	b.n	23f8850 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23f886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f886c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f886c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f886e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f8870:	4605      	mov	r5, r0
        if (n > 0) {
 23f8872:	dd11      	ble.n	23f8898 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f8874:	0130      	lsls	r0, r6, #4
 23f8876:	f7fe fd89 	bl	23f738c <malloc>
            if (!d) {
 23f887a:	4604      	mov	r4, r0
 23f887c:	b158      	cbz	r0, 23f8896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f887e:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f8882:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23f8886:	f7ff ffc7 	bl	23f8818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f888a:	6828      	ldr	r0, [r5, #0]
 23f888c:	f7fe fd8c 	bl	23f73a8 <free>
        return true;
 23f8890:	2001      	movs	r0, #1
        data_ = d;
 23f8892:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f8894:	60ae      	str	r6, [r5, #8]
    }
 23f8896:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f8898:	2400      	movs	r4, #0
 23f889a:	e7f6      	b.n	23f888a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023f889c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f88a0:	4690      	mov	r8, r2
        capacity_(0) {
 23f88a2:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f88a4:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f88a6:	b095      	sub	sp, #84	; 0x54
 23f88a8:	9103      	str	r1, [sp, #12]
    return size_;
 23f88aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23f88ae:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23f88b0:	4299      	cmp	r1, r3
        capacity_(0) {
 23f88b2:	e9c0 3300 	strd	r3, r3, [r0]
 23f88b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23f88ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f88be:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f88c2:	7602      	strb	r2, [r0, #24]
 23f88c4:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23f88c6:	dc23      	bgt.n	23f8910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23f88c8:	e9d8 5700 	ldrd	r5, r7, [r8]
 23f88cc:	2314      	movs	r3, #20
 23f88ce:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23f88d2:	42af      	cmp	r7, r5
 23f88d4:	d03b      	beq.n	23f894e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23f88d6:	4629      	mov	r1, r5
 23f88d8:	a80b      	add	r0, sp, #44	; 0x2c
 23f88da:	f000 fc8a 	bl	23f91f2 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23f88de:	a90b      	add	r1, sp, #44	; 0x2c
 23f88e0:	a80f      	add	r0, sp, #60	; 0x3c
 23f88e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23f88e4:	f000 fc85 	bl	23f91f2 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f88e8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23f88ec:	4299      	cmp	r1, r3
 23f88ee:	da1b      	bge.n	23f8928 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23f88f0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23f88f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23f88f4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23f88f8:	4631      	mov	r1, r6
 23f88fa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23f88fe:	f106 0010 	add.w	r0, r6, #16
 23f8902:	f7ff ff89 	bl	23f8818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23f8906:	b9ee      	cbnz	r6, 23f8944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23f8908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f890a:	3301      	adds	r3, #1
 23f890c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23f890e:	e011      	b.n	23f8934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23f8910:	a808      	add	r0, sp, #32
 23f8912:	f7ff ffab 	bl	23f886c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f8916:	2800      	cmp	r0, #0
 23f8918:	d1d6      	bne.n	23f88c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23f891a:	a808      	add	r0, sp, #32
 23f891c:	f7ff fd66 	bl	23f83ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f8920:	4620      	mov	r0, r4
 23f8922:	b015      	add	sp, #84	; 0x54
 23f8924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8928:	3101      	adds	r1, #1
 23f892a:	a808      	add	r0, sp, #32
 23f892c:	f7ff ff9e 	bl	23f886c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f8930:	2800      	cmp	r0, #0
 23f8932:	d1dd      	bne.n	23f88f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23f8934:	a80f      	add	r0, sp, #60	; 0x3c
 23f8936:	f000 fbf3 	bl	23f9120 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23f893a:	a80b      	add	r0, sp, #44	; 0x2c
 23f893c:	f000 fbf0 	bl	23f9120 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23f8940:	3514      	adds	r5, #20
 23f8942:	e7c6      	b.n	23f88d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23f8944:	4630      	mov	r0, r6
 23f8946:	a90f      	add	r1, sp, #60	; 0x3c
 23f8948:	f000 fc53 	bl	23f91f2 <_ZN6StringC1EOS_>
 23f894c:	e7dc      	b.n	23f8908 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23f894e:	2600      	movs	r6, #0
 23f8950:	f04f 0914 	mov.w	r9, #20
 23f8954:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23f8958:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23f895a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23f895e:	429e      	cmp	r6, r3
 23f8960:	da7c      	bge.n	23f8a5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f8962:	0133      	lsls	r3, r6, #4
 23f8964:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23f8966:	9306      	str	r3, [sp, #24]
        if (!category) {
 23f8968:	b90b      	cbnz	r3, 23f896e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23f896a:	3601      	adds	r6, #1
 23f896c:	e7f5      	b.n	23f895a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23f896e:	2300      	movs	r3, #0
 23f8970:	9307      	str	r3, [sp, #28]
 23f8972:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23f8976:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8978:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23f897a:	a907      	add	r1, sp, #28
 23f897c:	a806      	add	r0, sp, #24
 23f897e:	f7ff fae6 	bl	23f7f4e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f8982:	4682      	mov	sl, r0
 23f8984:	2800      	cmp	r0, #0
 23f8986:	d0f0      	beq.n	23f896a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23f8988:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23f898c:	4601      	mov	r1, r0
            bool found = false;
 23f898e:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8992:	4628      	mov	r0, r5
 23f8994:	9a07      	ldr	r2, [sp, #28]
 23f8996:	f10d 0317 	add.w	r3, sp, #23
 23f899a:	f7ff fb6d 	bl	23f8078 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f899e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f89a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f89a4:	2f00      	cmp	r7, #0
 23f89a6:	d14a      	bne.n	23f8a3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23f89a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23f89ac:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23f89b0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23f89b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f89b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23f89bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23f89c0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f89c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23f89c6:	4293      	cmp	r3, r2
 23f89c8:	db17      	blt.n	23f89fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23f89ca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23f89ce:	f1ba 0f00 	cmp.w	sl, #0
 23f89d2:	dd30      	ble.n	23f8a36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23f89d4:	fb09 f00a 	mul.w	r0, r9, sl
 23f89d8:	f7fe fcd8 	bl	23f738c <malloc>
            if (!d) {
 23f89dc:	4683      	mov	fp, r0
 23f89de:	b360      	cbz	r0, 23f8a3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23f89e0:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f89e4:	fb09 1202 	mla	r2, r9, r2, r1
 23f89e8:	f7ff feea 	bl	23f87c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23f89ec:	6828      	ldr	r0, [r5, #0]
 23f89ee:	f7fe fcdb 	bl	23f73a8 <free>
        data_ = d;
 23f89f2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23f89f6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23f89fa:	682b      	ldr	r3, [r5, #0]
 23f89fc:	9a01      	ldr	r2, [sp, #4]
 23f89fe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23f8a02:	686a      	ldr	r2, [r5, #4]
 23f8a04:	4651      	mov	r1, sl
 23f8a06:	fb09 3202 	mla	r2, r9, r2, r3
 23f8a0a:	f10a 0014 	add.w	r0, sl, #20
 23f8a0e:	f7ff fed7 	bl	23f87c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23f8a12:	f1ba 0f00 	cmp.w	sl, #0
 23f8a16:	d003      	beq.n	23f8a20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23f8a18:	4650      	mov	r0, sl
 23f8a1a:	a90f      	add	r1, sp, #60	; 0x3c
 23f8a1c:	f7ff fb18 	bl	23f8050 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23f8a20:	686b      	ldr	r3, [r5, #4]
 23f8a22:	3301      	adds	r3, #1
 23f8a24:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23f8a26:	a811      	add	r0, sp, #68	; 0x44
 23f8a28:	f7ff fccc 	bl	23f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f8a2c:	b13f      	cbz	r7, 23f8a3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23f8a2e:	a80b      	add	r0, sp, #44	; 0x2c
 23f8a30:	f7ff fcc8 	bl	23f83c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f8a34:	e771      	b.n	23f891a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23f8a36:	46bb      	mov	fp, r7
 23f8a38:	e7d8      	b.n	23f89ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f8a3a:	2701      	movs	r7, #1
 23f8a3c:	e7f3      	b.n	23f8a26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23f8a3e:	9b01      	ldr	r3, [sp, #4]
 23f8a40:	682d      	ldr	r5, [r5, #0]
 23f8a42:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23f8a46:	9b06      	ldr	r3, [sp, #24]
 23f8a48:	781b      	ldrb	r3, [r3, #0]
 23f8a4a:	b92b      	cbnz	r3, 23f8a58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23f8a4c:	f8d8 3000 	ldr.w	r3, [r8]
 23f8a50:	9a02      	ldr	r2, [sp, #8]
 23f8a52:	4413      	add	r3, r2
 23f8a54:	7c1b      	ldrb	r3, [r3, #16]
 23f8a56:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23f8a58:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23f8a5a:	e78e      	b.n	23f897a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a5c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f8a5e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a60:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f8a62:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a64:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a66:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23f8a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a6a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a6c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f8a6e:	60a2      	str	r2, [r4, #8]
 23f8a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a72:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a74:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f8a76:	60e2      	str	r2, [r4, #12]
 23f8a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a7a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a7c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8a7e:	6122      	str	r2, [r4, #16]
 23f8a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a82:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23f8a84:	9b03      	ldr	r3, [sp, #12]
 23f8a86:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23f8a88:	6162      	str	r2, [r4, #20]
 23f8a8a:	7623      	strb	r3, [r4, #24]
 23f8a8c:	e7cf      	b.n	23f8a2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023f8a90 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f8a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8a92:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f8a94:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f8a96:	4617      	mov	r7, r2
 23f8a98:	b087      	sub	sp, #28
 23f8a9a:	460d      	mov	r5, r1
        stream_(&stream) {
 23f8a9c:	4668      	mov	r0, sp
 23f8a9e:	4619      	mov	r1, r3
 23f8aa0:	f7fa f9a0 	bl	23f2de4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f8aa4:	4b0b      	ldr	r3, [pc, #44]	; (23f8ad4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23f8aa6:	4669      	mov	r1, sp
 23f8aa8:	f846 3b04 	str.w	r3, [r6], #4
 23f8aac:	a803      	add	r0, sp, #12
 23f8aae:	f7fa f999 	bl	23f2de4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f8ab2:	4639      	mov	r1, r7
 23f8ab4:	aa03      	add	r2, sp, #12
 23f8ab6:	4630      	mov	r0, r6
 23f8ab8:	f7ff fef0 	bl	23f889c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8abc:	a803      	add	r0, sp, #12
 23f8abe:	f7f9 fad3 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f8ac2:	4668      	mov	r0, sp
 23f8ac4:	f7f9 fad0 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f8ac8:	4620      	mov	r0, r4
        stream_(&stream) {
 23f8aca:	4b03      	ldr	r3, [pc, #12]	; (23f8ad8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23f8acc:	6225      	str	r5, [r4, #32]
 23f8ace:	6023      	str	r3, [r4, #0]
}
 23f8ad0:	b007      	add	sp, #28
 23f8ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8ad4:	023fcc28 	.word	0x023fcc28
 23f8ad8:	023ffa9c 	.word	0x023ffa9c

023f8adc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23f8adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8ade:	460f      	mov	r7, r1
 23f8ae0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f8ae2:	4638      	mov	r0, r7
 23f8ae4:	491c      	ldr	r1, [pc, #112]	; (23f8b58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23f8ae6:	4616      	mov	r6, r2
 23f8ae8:	461d      	mov	r5, r3
 23f8aea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f8aec:	f7f4 fc62 	bl	23ed3b4 <strcmp>
 23f8af0:	b9c0      	cbnz	r0, 23f8b24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23f8af2:	b1a4      	cbz	r4, 23f8b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23f8af4:	4629      	mov	r1, r5
 23f8af6:	a801      	add	r0, sp, #4
 23f8af8:	f7ff fcbe 	bl	23f8478 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f8afc:	2024      	movs	r0, #36	; 0x24
 23f8afe:	4917      	ldr	r1, [pc, #92]	; (23f8b5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f8b00:	f000 fef2 	bl	23f98e8 <_ZnwjRKSt9nothrow_t>
 23f8b04:	4605      	mov	r5, r0
 23f8b06:	b130      	cbz	r0, 23f8b16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23f8b08:	ab01      	add	r3, sp, #4
 23f8b0a:	4632      	mov	r2, r6
 23f8b0c:	4621      	mov	r1, r4
 23f8b0e:	f7ff ffbf 	bl	23f8a90 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8b12:	4b13      	ldr	r3, [pc, #76]	; (23f8b60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23f8b14:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f8b16:	a801      	add	r0, sp, #4
 23f8b18:	f7f9 faa6 	bl	23f2068 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f8b1c:	462c      	mov	r4, r5
}
 23f8b1e:	4620      	mov	r0, r4
 23f8b20:	b005      	add	sp, #20
 23f8b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23f8b24:	4638      	mov	r0, r7
 23f8b26:	490f      	ldr	r1, [pc, #60]	; (23f8b64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23f8b28:	f7f4 fc44 	bl	23ed3b4 <strcmp>
 23f8b2c:	b990      	cbnz	r0, 23f8b54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23f8b2e:	2c00      	cmp	r4, #0
 23f8b30:	d0f5      	beq.n	23f8b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f8b32:	4629      	mov	r1, r5
 23f8b34:	a801      	add	r0, sp, #4
 23f8b36:	f7ff fc9f 	bl	23f8478 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f8b3a:	2024      	movs	r0, #36	; 0x24
 23f8b3c:	4907      	ldr	r1, [pc, #28]	; (23f8b5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f8b3e:	f000 fed3 	bl	23f98e8 <_ZnwjRKSt9nothrow_t>
 23f8b42:	4605      	mov	r5, r0
 23f8b44:	2800      	cmp	r0, #0
 23f8b46:	d0e6      	beq.n	23f8b16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23f8b48:	4632      	mov	r2, r6
 23f8b4a:	4621      	mov	r1, r4
 23f8b4c:	ab01      	add	r3, sp, #4
 23f8b4e:	f7ff ff9f 	bl	23f8a90 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8b52:	e7e0      	b.n	23f8b16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23f8b54:	2400      	movs	r4, #0
 23f8b56:	e7e2      	b.n	23f8b1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23f8b58:	023ffa24 	.word	0x023ffa24
 23f8b5c:	023ffb6b 	.word	0x023ffb6b
 23f8b60:	023ffab4 	.word	0x023ffab4
 23f8b64:	023ffa28 	.word	0x023ffa28

023f8b68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23f8b68:	4b01      	ldr	r3, [pc, #4]	; (23f8b70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f8b6a:	4a02      	ldr	r2, [pc, #8]	; (23f8b74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f8b6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f8b6e:	4770      	bx	lr
 23f8b70:	1007aea8 	.word	0x1007aea8
 23f8b74:	023ffa39 	.word	0x023ffa39

023f8b78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8b7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23f8b7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8b82:	4604      	mov	r4, r0
 23f8b84:	460e      	mov	r6, r1
 23f8b86:	4617      	mov	r7, r2
 23f8b88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23f8b8a:	f7ff f879 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f8b8e:	4581      	cmp	r9, r0
 23f8b90:	d04d      	beq.n	23f8c2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23f8b92:	792b      	ldrb	r3, [r5, #4]
 23f8b94:	0719      	lsls	r1, r3, #28
 23f8b96:	d504      	bpl.n	23f8ba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23f8b98:	4620      	mov	r0, r4
 23f8b9a:	696a      	ldr	r2, [r5, #20]
 23f8b9c:	4954      	ldr	r1, [pc, #336]	; (23f8cf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23f8b9e:	f7ff fad0 	bl	23f8142 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23f8ba2:	f1b8 0f00 	cmp.w	r8, #0
 23f8ba6:	d00d      	beq.n	23f8bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23f8ba8:	215b      	movs	r1, #91	; 0x5b
 23f8baa:	4620      	mov	r0, r4
 23f8bac:	f7ff fa44 	bl	23f8038 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23f8bb0:	4641      	mov	r1, r8
 23f8bb2:	4620      	mov	r0, r4
 23f8bb4:	f7ff fa31 	bl	23f801a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23f8bb8:	6823      	ldr	r3, [r4, #0]
 23f8bba:	2202      	movs	r2, #2
 23f8bbc:	4620      	mov	r0, r4
 23f8bbe:	68db      	ldr	r3, [r3, #12]
 23f8bc0:	494c      	ldr	r1, [pc, #304]	; (23f8cf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23f8bc2:	4798      	blx	r3
    if (attr.has_file) {
 23f8bc4:	792b      	ldrb	r3, [r5, #4]
 23f8bc6:	07da      	lsls	r2, r3, #31
 23f8bc8:	d524      	bpl.n	23f8c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23f8bca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23f8bce:	212f      	movs	r1, #47	; 0x2f
 23f8bd0:	4640      	mov	r0, r8
 23f8bd2:	f002 fd44 	bl	23fb65e <strrchr>
    if (s1) {
 23f8bd6:	b108      	cbz	r0, 23f8bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23f8bd8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23f8bdc:	4641      	mov	r1, r8
 23f8bde:	4620      	mov	r0, r4
 23f8be0:	f7ff fa1b 	bl	23f801a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23f8be4:	792b      	ldrb	r3, [r5, #4]
 23f8be6:	079b      	lsls	r3, r3, #30
 23f8be8:	d508      	bpl.n	23f8bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23f8bea:	213a      	movs	r1, #58	; 0x3a
 23f8bec:	4620      	mov	r0, r4
 23f8bee:	f7ff fa23 	bl	23f8038 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23f8bf2:	4620      	mov	r0, r4
 23f8bf4:	68ea      	ldr	r2, [r5, #12]
 23f8bf6:	4940      	ldr	r1, [pc, #256]	; (23f8cf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23f8bf8:	f7ff faa3 	bl	23f8142 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23f8bfc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23f8bfe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23f8c00:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23f8c04:	4620      	mov	r0, r4
            write(", ", 2);
 23f8c06:	f04f 0202 	mov.w	r2, #2
 23f8c0a:	68db      	ldr	r3, [r3, #12]
 23f8c0c:	bf14      	ite	ne
 23f8c0e:	493b      	ldrne	r1, [pc, #236]	; (23f8cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23f8c10:	493b      	ldreq	r1, [pc, #236]	; (23f8d00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f8c12:	4798      	blx	r3
    if (attr.has_function) {
 23f8c14:	792b      	ldrb	r3, [r5, #4]
 23f8c16:	0758      	lsls	r0, r3, #29
 23f8c18:	d51d      	bpl.n	23f8c56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f8c1a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f8c1c:	460b      	mov	r3, r1
 23f8c1e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23f8c20:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f8c24:	b160      	cbz	r0, 23f8c40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23f8c26:	2820      	cmp	r0, #32
 23f8c28:	d108      	bne.n	23f8c3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23f8c2a:	4619      	mov	r1, r3
 23f8c2c:	e7f7      	b.n	23f8c1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23f8c2e:	4835      	ldr	r0, [pc, #212]	; (23f8d04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23f8c30:	f7fe fc61 	bl	23f74f6 <_ZN5spark12NetworkClass9listeningEv>
 23f8c34:	2800      	cmp	r0, #0
 23f8c36:	d0ac      	beq.n	23f8b92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23f8c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23f8c3c:	2828      	cmp	r0, #40	; 0x28
 23f8c3e:	d1ee      	bne.n	23f8c1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23f8c40:	6823      	ldr	r3, [r4, #0]
 23f8c42:	1a52      	subs	r2, r2, r1
 23f8c44:	4620      	mov	r0, r4
 23f8c46:	68db      	ldr	r3, [r3, #12]
 23f8c48:	4798      	blx	r3
        write("(): ", 4);
 23f8c4a:	6823      	ldr	r3, [r4, #0]
 23f8c4c:	2204      	movs	r2, #4
 23f8c4e:	4620      	mov	r0, r4
 23f8c50:	68db      	ldr	r3, [r3, #12]
 23f8c52:	492d      	ldr	r1, [pc, #180]	; (23f8d08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23f8c54:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23f8c56:	2100      	movs	r1, #0
 23f8c58:	4638      	mov	r0, r7
 23f8c5a:	f7fe fa71 	bl	23f7140 <log_level_name>
 23f8c5e:	4601      	mov	r1, r0
    write(s);
 23f8c60:	4620      	mov	r0, r4
 23f8c62:	f7ff f9da 	bl	23f801a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23f8c66:	6823      	ldr	r3, [r4, #0]
 23f8c68:	2202      	movs	r2, #2
 23f8c6a:	4620      	mov	r0, r4
 23f8c6c:	68db      	ldr	r3, [r3, #12]
 23f8c6e:	4924      	ldr	r1, [pc, #144]	; (23f8d00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f8c70:	4798      	blx	r3
    if (msg) {
 23f8c72:	b11e      	cbz	r6, 23f8c7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23f8c74:	4631      	mov	r1, r6
 23f8c76:	4620      	mov	r0, r4
 23f8c78:	f7ff f9cf 	bl	23f801a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23f8c7c:	792b      	ldrb	r3, [r5, #4]
 23f8c7e:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f8c82:	d02c      	beq.n	23f8cde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23f8c84:	6823      	ldr	r3, [r4, #0]
 23f8c86:	4921      	ldr	r1, [pc, #132]	; (23f8d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23f8c88:	68db      	ldr	r3, [r3, #12]
 23f8c8a:	2202      	movs	r2, #2
 23f8c8c:	4620      	mov	r0, r4
 23f8c8e:	4798      	blx	r3
        if (attr.has_code) {
 23f8c90:	792b      	ldrb	r3, [r5, #4]
 23f8c92:	06d9      	lsls	r1, r3, #27
 23f8c94:	d50a      	bpl.n	23f8cac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23f8c96:	6823      	ldr	r3, [r4, #0]
 23f8c98:	2207      	movs	r2, #7
 23f8c9a:	4620      	mov	r0, r4
 23f8c9c:	491c      	ldr	r1, [pc, #112]	; (23f8d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23f8c9e:	68db      	ldr	r3, [r3, #12]
 23f8ca0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23f8ca2:	4620      	mov	r0, r4
 23f8ca4:	69aa      	ldr	r2, [r5, #24]
 23f8ca6:	491b      	ldr	r1, [pc, #108]	; (23f8d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23f8ca8:	f7ff fa4b 	bl	23f8142 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23f8cac:	792b      	ldrb	r3, [r5, #4]
 23f8cae:	069a      	lsls	r2, r3, #26
 23f8cb0:	d511      	bpl.n	23f8cd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23f8cb2:	06db      	lsls	r3, r3, #27
 23f8cb4:	d505      	bpl.n	23f8cc2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23f8cb6:	6823      	ldr	r3, [r4, #0]
 23f8cb8:	2202      	movs	r2, #2
 23f8cba:	4620      	mov	r0, r4
 23f8cbc:	68db      	ldr	r3, [r3, #12]
 23f8cbe:	490f      	ldr	r1, [pc, #60]	; (23f8cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23f8cc0:	4798      	blx	r3
            write("details = ", 10);
 23f8cc2:	6823      	ldr	r3, [r4, #0]
 23f8cc4:	4620      	mov	r0, r4
 23f8cc6:	4914      	ldr	r1, [pc, #80]	; (23f8d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23f8cc8:	220a      	movs	r2, #10
 23f8cca:	68db      	ldr	r3, [r3, #12]
 23f8ccc:	4798      	blx	r3
            write(attr.details);
 23f8cce:	4620      	mov	r0, r4
 23f8cd0:	69e9      	ldr	r1, [r5, #28]
 23f8cd2:	f7ff f9a2 	bl	23f801a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23f8cd6:	215d      	movs	r1, #93	; 0x5d
 23f8cd8:	4620      	mov	r0, r4
 23f8cda:	f7ff f9ad 	bl	23f8038 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23f8cde:	6823      	ldr	r3, [r4, #0]
 23f8ce0:	4620      	mov	r0, r4
}
 23f8ce2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23f8ce6:	2202      	movs	r2, #2
 23f8ce8:	68db      	ldr	r3, [r3, #12]
 23f8cea:	490c      	ldr	r1, [pc, #48]	; (23f8d1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23f8cec:	4718      	bx	r3
 23f8cee:	bf00      	nop
 23f8cf0:	023ffa3d 	.word	0x023ffa3d
 23f8cf4:	023ffa44 	.word	0x023ffa44
 23f8cf8:	023fc766 	.word	0x023fc766
 23f8cfc:	023ffa47 	.word	0x023ffa47
 23f8d00:	023ffa4c 	.word	0x023ffa4c
 23f8d04:	1007ae58 	.word	0x1007ae58
 23f8d08:	023ffa4a 	.word	0x023ffa4a
 23f8d0c:	023ffa4f 	.word	0x023ffa4f
 23f8d10:	023ffa52 	.word	0x023ffa52
 23f8d14:	023ffa5a 	.word	0x023ffa5a
 23f8d18:	023ffa5d 	.word	0x023ffa5d
 23f8d1c:	023fc88f 	.word	0x023fc88f

023f8d20 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f8d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8d24:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23f8d26:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f8d28:	460d      	mov	r5, r1
 23f8d2a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23f8d2c:	f7fe ffa8 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f8d30:	4287      	cmp	r7, r0
 23f8d32:	d007      	beq.n	23f8d44 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23f8d34:	6a20      	ldr	r0, [r4, #32]
 23f8d36:	4632      	mov	r2, r6
 23f8d38:	6803      	ldr	r3, [r0, #0]
 23f8d3a:	4629      	mov	r1, r5
}
 23f8d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23f8d40:	68db      	ldr	r3, [r3, #12]
 23f8d42:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23f8d44:	4803      	ldr	r0, [pc, #12]	; (23f8d54 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23f8d46:	f7fe fbd6 	bl	23f74f6 <_ZN5spark12NetworkClass9listeningEv>
 23f8d4a:	2800      	cmp	r0, #0
 23f8d4c:	d0f2      	beq.n	23f8d34 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23f8d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8d52:	bf00      	nop
 23f8d54:	1007ae58 	.word	0x1007ae58

023f8d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f8d5c:	b085      	sub	sp, #20
    return stream_;
 23f8d5e:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23f8d62:	4605      	mov	r5, r0
 23f8d64:	460f      	mov	r7, r1
 23f8d66:	4690      	mov	r8, r2
 23f8d68:	461e      	mov	r6, r3
 23f8d6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23f8d6c:	f7fe ff88 	bl	23f7c80 <_Z16_fetch_usbserialv>
 23f8d70:	4581      	cmp	r9, r0
 23f8d72:	d105      	bne.n	23f8d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23f8d74:	4849      	ldr	r0, [pc, #292]	; (23f8e9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23f8d76:	f7fe fbbe 	bl	23f74f6 <_ZN5spark12NetworkClass9listeningEv>
 23f8d7a:	2800      	cmp	r0, #0
 23f8d7c:	f040 808a 	bne.w	23f8e94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23f8d80:	f04f 0900 	mov.w	r9, #0
 23f8d84:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23f8d86:	4a46      	ldr	r2, [pc, #280]	; (23f8ea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23f8d88:	a801      	add	r0, sp, #4
 23f8d8a:	9201      	str	r2, [sp, #4]
 23f8d8c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23f8d8e:	f88d 9008 	strb.w	r9, [sp, #8]
 23f8d92:	f7fe fe5a 	bl	23f7a4a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23f8d96:	4649      	mov	r1, r9
 23f8d98:	4640      	mov	r0, r8
 23f8d9a:	f7fe f9d1 	bl	23f7140 <log_level_name>
 23f8d9e:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23f8da0:	4940      	ldr	r1, [pc, #256]	; (23f8ea4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23f8da2:	2201      	movs	r2, #1
 23f8da4:	a801      	add	r0, sp, #4
 23f8da6:	f7fe fedf 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8daa:	4641      	mov	r1, r8
 23f8dac:	f7ff f927 	bl	23f7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23f8db0:	b13f      	cbz	r7, 23f8dc2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23f8db2:	493d      	ldr	r1, [pc, #244]	; (23f8ea8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23f8db4:	2201      	movs	r2, #1
 23f8db6:	a801      	add	r0, sp, #4
 23f8db8:	f7fe fed6 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8dbc:	4639      	mov	r1, r7
 23f8dbe:	f7ff f91e 	bl	23f7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23f8dc2:	b13e      	cbz	r6, 23f8dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23f8dc4:	4939      	ldr	r1, [pc, #228]	; (23f8eac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23f8dc6:	2201      	movs	r2, #1
 23f8dc8:	a801      	add	r0, sp, #4
 23f8dca:	f7fe fecd 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8dce:	4631      	mov	r1, r6
 23f8dd0:	f7ff f915 	bl	23f7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23f8dd4:	7923      	ldrb	r3, [r4, #4]
 23f8dd6:	07df      	lsls	r7, r3, #31
 23f8dd8:	d50e      	bpl.n	23f8df8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23f8dda:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23f8ddc:	212f      	movs	r1, #47	; 0x2f
 23f8dde:	4630      	mov	r0, r6
 23f8de0:	f002 fc3d 	bl	23fb65e <strrchr>
    if (s1) {
 23f8de4:	b100      	cbz	r0, 23f8de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23f8de6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23f8de8:	4931      	ldr	r1, [pc, #196]	; (23f8eb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23f8dea:	2201      	movs	r2, #1
 23f8dec:	a801      	add	r0, sp, #4
 23f8dee:	f7fe febb 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8df2:	4631      	mov	r1, r6
 23f8df4:	f7ff f903 	bl	23f7ffe <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23f8df8:	7923      	ldrb	r3, [r4, #4]
 23f8dfa:	079e      	lsls	r6, r3, #30
 23f8dfc:	d507      	bpl.n	23f8e0e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23f8dfe:	492d      	ldr	r1, [pc, #180]	; (23f8eb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23f8e00:	2202      	movs	r2, #2
 23f8e02:	a801      	add	r0, sp, #4
 23f8e04:	f7fe feb0 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8e08:	68e1      	ldr	r1, [r4, #12]
 23f8e0a:	f7fe fe2b 	bl	23f7a64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23f8e0e:	7923      	ldrb	r3, [r4, #4]
 23f8e10:	0758      	lsls	r0, r3, #29
 23f8e12:	d514      	bpl.n	23f8e3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f8e14:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f8e16:	4633      	mov	r3, r6
 23f8e18:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23f8e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f8e1e:	b12a      	cbz	r2, 23f8e2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23f8e20:	2a20      	cmp	r2, #32
 23f8e22:	d101      	bne.n	23f8e28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23f8e24:	461e      	mov	r6, r3
 23f8e26:	e7f7      	b.n	23f8e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23f8e28:	2a28      	cmp	r2, #40	; 0x28
 23f8e2a:	d1f5      	bne.n	23f8e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23f8e2c:	2202      	movs	r2, #2
 23f8e2e:	4922      	ldr	r1, [pc, #136]	; (23f8eb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23f8e30:	a801      	add	r0, sp, #4
 23f8e32:	f7fe fe99 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8e36:	4631      	mov	r1, r6
 23f8e38:	1bba      	subs	r2, r7, r6
 23f8e3a:	f7fe fea5 	bl	23f7b88 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23f8e3e:	7923      	ldrb	r3, [r4, #4]
 23f8e40:	0719      	lsls	r1, r3, #28
 23f8e42:	d507      	bpl.n	23f8e54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23f8e44:	491d      	ldr	r1, [pc, #116]	; (23f8ebc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23f8e46:	2201      	movs	r2, #1
 23f8e48:	a801      	add	r0, sp, #4
 23f8e4a:	f7fe fe8d 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8e4e:	6961      	ldr	r1, [r4, #20]
 23f8e50:	f7fe fe1a 	bl	23f7a88 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23f8e54:	7923      	ldrb	r3, [r4, #4]
 23f8e56:	06da      	lsls	r2, r3, #27
 23f8e58:	d508      	bpl.n	23f8e6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23f8e5a:	2204      	movs	r2, #4
 23f8e5c:	4918      	ldr	r1, [pc, #96]	; (23f8ec0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23f8e5e:	eb0d 0002 	add.w	r0, sp, r2
 23f8e62:	f7fe fe81 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8e66:	69a1      	ldr	r1, [r4, #24]
 23f8e68:	f7fe fdfc 	bl	23f7a64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23f8e6c:	7923      	ldrb	r3, [r4, #4]
 23f8e6e:	069b      	lsls	r3, r3, #26
 23f8e70:	d507      	bpl.n	23f8e82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23f8e72:	4914      	ldr	r1, [pc, #80]	; (23f8ec4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23f8e74:	2206      	movs	r2, #6
 23f8e76:	a801      	add	r0, sp, #4
 23f8e78:	f7fe fe76 	bl	23f7b68 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8e7c:	69e1      	ldr	r1, [r4, #28]
 23f8e7e:	f7ff f8be 	bl	23f7ffe <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23f8e82:	a801      	add	r0, sp, #4
 23f8e84:	f7fe fdcb 	bl	23f7a1e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23f8e88:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23f8e8a:	2202      	movs	r2, #2
 23f8e8c:	6803      	ldr	r3, [r0, #0]
 23f8e8e:	490e      	ldr	r1, [pc, #56]	; (23f8ec8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23f8e90:	68db      	ldr	r3, [r3, #12]
 23f8e92:	4798      	blx	r3
}
 23f8e94:	b005      	add	sp, #20
 23f8e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f8e9a:	bf00      	nop
 23f8e9c:	1007ae58 	.word	0x1007ae58
 23f8ea0:	023ffa84 	.word	0x023ffa84
 23f8ea4:	023ffa1a 	.word	0x023ffa1a
 23f8ea8:	023ff13c 	.word	0x023ff13c
 23f8eac:	023ffe62 	.word	0x023ffe62
 23f8eb0:	023ffafa 	.word	0x023ffafa
 23f8eb4:	023ffa68 	.word	0x023ffa68
 23f8eb8:	023ffa6b 	.word	0x023ffa6b
 23f8ebc:	023ff5d9 	.word	0x023ff5d9
 23f8ec0:	023ffa6e 	.word	0x023ffa6e
 23f8ec4:	023ffa73 	.word	0x023ffa73
 23f8ec8:	023fc88f 	.word	0x023fc88f

023f8ecc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f8ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8ece:	4606      	mov	r6, r0
 23f8ed0:	460d      	mov	r5, r1
  size_t n = 0;
 23f8ed2:	2400      	movs	r4, #0
 23f8ed4:	188f      	adds	r7, r1, r2
  while (size--) {
 23f8ed6:	42bd      	cmp	r5, r7
 23f8ed8:	d00c      	beq.n	23f8ef4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f8eda:	6833      	ldr	r3, [r6, #0]
 23f8edc:	4630      	mov	r0, r6
 23f8ede:	689b      	ldr	r3, [r3, #8]
 23f8ee0:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f8ee4:	4798      	blx	r3
     if (chunk>=0)
 23f8ee6:	1e03      	subs	r3, r0, #0
 23f8ee8:	db01      	blt.n	23f8eee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f8eea:	441c      	add	r4, r3
  while (size--) {
 23f8eec:	e7f3      	b.n	23f8ed6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f8eee:	2c00      	cmp	r4, #0
 23f8ef0:	bf08      	it	eq
 23f8ef2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f8ef4:	4620      	mov	r0, r4
 23f8ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8ef8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f8ef8:	b513      	push	{r0, r1, r4, lr}
 23f8efa:	4604      	mov	r4, r0
    }
 23f8efc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f8efe:	b159      	cbz	r1, 23f8f18 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f8f00:	9101      	str	r1, [sp, #4]
 23f8f02:	f7f4 fa61 	bl	23ed3c8 <strlen>
 23f8f06:	4602      	mov	r2, r0
 23f8f08:	4620      	mov	r0, r4
 23f8f0a:	6823      	ldr	r3, [r4, #0]
 23f8f0c:	9901      	ldr	r1, [sp, #4]
 23f8f0e:	68db      	ldr	r3, [r3, #12]
    }
 23f8f10:	b002      	add	sp, #8
 23f8f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f8f16:	4718      	bx	r3
    }
 23f8f18:	b002      	add	sp, #8
 23f8f1a:	bd10      	pop	{r4, pc}

023f8f1c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23f8f1c:	6803      	ldr	r3, [r0, #0]
 23f8f1e:	689b      	ldr	r3, [r3, #8]
 23f8f20:	4718      	bx	r3

023f8f22 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f8f22:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f8f24:	2a01      	cmp	r2, #1
 23f8f26:	bf98      	it	ls
 23f8f28:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f8f2a:	b530      	push	{r4, r5, lr}
 23f8f2c:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f8f2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f8f32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f8f34:	460d      	mov	r5, r1
 23f8f36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f8f3a:	fb01 5312 	mls	r3, r1, r2, r5
 23f8f3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f8f42:	2b09      	cmp	r3, #9
 23f8f44:	bf94      	ite	ls
 23f8f46:	3330      	addls	r3, #48	; 0x30
 23f8f48:	3337      	addhi	r3, #55	; 0x37
 23f8f4a:	b2db      	uxtb	r3, r3
  } while(n);
 23f8f4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f8f4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f8f52:	d9ef      	bls.n	23f8f34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f8f54:	4621      	mov	r1, r4
 23f8f56:	f7ff ffcf 	bl	23f8ef8 <_ZN5Print5writeEPKc>
}
 23f8f5a:	b00b      	add	sp, #44	; 0x2c
 23f8f5c:	bd30      	pop	{r4, r5, pc}
	...

023f8f60 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23f8f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8f64:	ec55 4b10 	vmov	r4, r5, d0
 23f8f68:	4606      	mov	r6, r0
 23f8f6a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23f8f6c:	ee10 2a10 	vmov	r2, s0
 23f8f70:	462b      	mov	r3, r5
 23f8f72:	ee10 0a10 	vmov	r0, s0
 23f8f76:	4629      	mov	r1, r5
 23f8f78:	f7f3 ff70 	bl	23ece5c <__aeabi_dcmpun>
 23f8f7c:	b140      	cbz	r0, 23f8f90 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23f8f7e:	4953      	ldr	r1, [pc, #332]	; (23f90cc <_ZN5Print10printFloatEdh+0x16c>)
 23f8f80:	4630      	mov	r0, r6
 23f8f82:	f7ff ffb9 	bl	23f8ef8 <_ZN5Print5writeEPKc>
 23f8f86:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23f8f88:	4650      	mov	r0, sl
 23f8f8a:	b003      	add	sp, #12
 23f8f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  { return __builtin_isinf(__x); }
 23f8f90:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23f8f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8f98:	4620      	mov	r0, r4
 23f8f9a:	4649      	mov	r1, r9
 23f8f9c:	4b4c      	ldr	r3, [pc, #304]	; (23f90d0 <_ZN5Print10printFloatEdh+0x170>)
 23f8f9e:	f7f3 ff5d 	bl	23ece5c <__aeabi_dcmpun>
 23f8fa2:	b948      	cbnz	r0, 23f8fb8 <_ZN5Print10printFloatEdh+0x58>
 23f8fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8fa8:	4620      	mov	r0, r4
 23f8faa:	4649      	mov	r1, r9
 23f8fac:	4b48      	ldr	r3, [pc, #288]	; (23f90d0 <_ZN5Print10printFloatEdh+0x170>)
 23f8fae:	f7f3 ff37 	bl	23ece20 <__aeabi_dcmple>
 23f8fb2:	b908      	cbnz	r0, 23f8fb8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23f8fb4:	4947      	ldr	r1, [pc, #284]	; (23f90d4 <_ZN5Print10printFloatEdh+0x174>)
 23f8fb6:	e7e3      	b.n	23f8f80 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23f8fb8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f8fbc:	4620      	mov	r0, r4
 23f8fbe:	4629      	mov	r1, r5
 23f8fc0:	4b45      	ldr	r3, [pc, #276]	; (23f90d8 <_ZN5Print10printFloatEdh+0x178>)
 23f8fc2:	f7f3 ff41 	bl	23ece48 <__aeabi_dcmpgt>
 23f8fc6:	b108      	cbz	r0, 23f8fcc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23f8fc8:	4944      	ldr	r1, [pc, #272]	; (23f90dc <_ZN5Print10printFloatEdh+0x17c>)
 23f8fca:	e7d9      	b.n	23f8f80 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23f8fcc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f8fd0:	4620      	mov	r0, r4
 23f8fd2:	4629      	mov	r1, r5
 23f8fd4:	4b42      	ldr	r3, [pc, #264]	; (23f90e0 <_ZN5Print10printFloatEdh+0x180>)
 23f8fd6:	f7f3 ff19 	bl	23ece0c <__aeabi_dcmplt>
 23f8fda:	2800      	cmp	r0, #0
 23f8fdc:	d1f4      	bne.n	23f8fc8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23f8fde:	2200      	movs	r2, #0
 23f8fe0:	2300      	movs	r3, #0
 23f8fe2:	4620      	mov	r0, r4
 23f8fe4:	4629      	mov	r1, r5
 23f8fe6:	f7f3 ff11 	bl	23ece0c <__aeabi_dcmplt>
 23f8fea:	b1d0      	cbz	r0, 23f9022 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23f8fec:	212d      	movs	r1, #45	; 0x2d
 23f8fee:	4630      	mov	r0, r6
 23f8ff0:	f7ff ff94 	bl	23f8f1c <_ZN5Print5printEc>
     number = -number;
 23f8ff4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23f8ff8:	4682      	mov	sl, r0
     number = -number;
 23f8ffa:	461d      	mov	r5, r3
  size_t n = 0;
 23f8ffc:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23f9000:	2000      	movs	r0, #0
    rounding /= 10.0;
 23f9002:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23f9006:	4937      	ldr	r1, [pc, #220]	; (23f90e4 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23f9008:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23f90ec <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23f900c:	fa5f f38b 	uxtb.w	r3, fp
 23f9010:	429f      	cmp	r7, r3
 23f9012:	d908      	bls.n	23f9026 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23f9014:	4642      	mov	r2, r8
 23f9016:	464b      	mov	r3, r9
 23f9018:	f7f3 fdb0 	bl	23ecb7c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23f901c:	f10b 0b01 	add.w	fp, fp, #1
 23f9020:	e7f4      	b.n	23f900c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23f9022:	4682      	mov	sl, r0
 23f9024:	e7ea      	b.n	23f8ffc <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23f9026:	4622      	mov	r2, r4
 23f9028:	462b      	mov	r3, r5
 23f902a:	f7f3 fac7 	bl	23ec5bc <__adddf3>
 23f902e:	460d      	mov	r5, r1
 23f9030:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23f9032:	f7f3 ff51 	bl	23eced8 <__aeabi_d2uiz>
 23f9036:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23f9038:	f7f3 fbfc 	bl	23ec834 <__aeabi_ui2d>
 23f903c:	4602      	mov	r2, r0
 23f903e:	460b      	mov	r3, r1
 23f9040:	4620      	mov	r0, r4
 23f9042:	4629      	mov	r1, r5
 23f9044:	f7f3 fab8 	bl	23ec5b8 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f9048:	220a      	movs	r2, #10
 23f904a:	4604      	mov	r4, r0
 23f904c:	460d      	mov	r5, r1
 23f904e:	4630      	mov	r0, r6
 23f9050:	4641      	mov	r1, r8
 23f9052:	f7ff ff66 	bl	23f8f22 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23f9056:	4482      	add	sl, r0
  if (digits > 0) {
 23f9058:	2f00      	cmp	r7, #0
 23f905a:	d095      	beq.n	23f8f88 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23f905c:	4630      	mov	r0, r6
 23f905e:	4922      	ldr	r1, [pc, #136]	; (23f90e8 <_ZN5Print10printFloatEdh+0x188>)
 23f9060:	f7ff ff4a 	bl	23f8ef8 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23f9064:	f04f 0800 	mov.w	r8, #0
 23f9068:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23f90ec <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23f906c:	4482      	add	sl, r0
  while (digits-- > 0)
 23f906e:	2f00      	cmp	r7, #0
 23f9070:	d08a      	beq.n	23f8f88 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23f9072:	4642      	mov	r2, r8
 23f9074:	464b      	mov	r3, r9
 23f9076:	4620      	mov	r0, r4
 23f9078:	4629      	mov	r1, r5
 23f907a:	f7f3 fc55 	bl	23ec928 <__aeabi_dmul>
 23f907e:	4604      	mov	r4, r0
 23f9080:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23f9082:	f7f3 ff01 	bl	23ece88 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23f9086:	f1b0 0b00 	subs.w	fp, r0, #0
 23f908a:	da1c      	bge.n	23f90c6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23f908c:	212d      	movs	r1, #45	; 0x2d
 23f908e:	4630      	mov	r0, r6
 23f9090:	f7ff ff44 	bl	23f8f1c <_ZN5Print5printEc>
 23f9094:	4603      	mov	r3, r0
            val = -n;
 23f9096:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23f909a:	220a      	movs	r2, #10
 23f909c:	4630      	mov	r0, r6
 23f909e:	9301      	str	r3, [sp, #4]
 23f90a0:	f7ff ff3f 	bl	23f8f22 <_ZN5Print11printNumberEmh>
 23f90a4:	9b01      	ldr	r3, [sp, #4]
 23f90a6:	3f01      	subs	r7, #1
 23f90a8:	4418      	add	r0, r3
    n += print(toPrint);
 23f90aa:	4482      	add	sl, r0
    remainder -= toPrint;
 23f90ac:	4658      	mov	r0, fp
 23f90ae:	f7f3 fbd1 	bl	23ec854 <__aeabi_i2d>
 23f90b2:	4602      	mov	r2, r0
 23f90b4:	460b      	mov	r3, r1
 23f90b6:	4620      	mov	r0, r4
 23f90b8:	4629      	mov	r1, r5
 23f90ba:	f7f3 fa7d 	bl	23ec5b8 <__aeabi_dsub>
 23f90be:	b2ff      	uxtb	r7, r7
 23f90c0:	4604      	mov	r4, r0
 23f90c2:	460d      	mov	r5, r1
  while (digits-- > 0)
 23f90c4:	e7d3      	b.n	23f906e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23f90c6:	4659      	mov	r1, fp
        size_t t = 0;
 23f90c8:	2300      	movs	r3, #0
 23f90ca:	e7e6      	b.n	23f909a <_ZN5Print10printFloatEdh+0x13a>
 23f90cc:	023ffaf4 	.word	0x023ffaf4
 23f90d0:	7fefffff 	.word	0x7fefffff
 23f90d4:	023ffaf8 	.word	0x023ffaf8
 23f90d8:	41efffff 	.word	0x41efffff
 23f90dc:	023ffafc 	.word	0x023ffafc
 23f90e0:	c1efffff 	.word	0xc1efffff
 23f90e4:	3fe00000 	.word	0x3fe00000
 23f90e8:	023ff0a0 	.word	0x023ff0a0
 23f90ec:	40240000 	.word	0x40240000

023f90f0 <_ZN5Print5printEfi>:
{
 23f90f0:	b538      	push	{r3, r4, r5, lr}
 23f90f2:	4604      	mov	r4, r0
 23f90f4:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23f90f8:	b2cd      	uxtb	r5, r1
 23f90fa:	f7f3 fbbd 	bl	23ec878 <__aeabi_f2d>
 23f90fe:	ec41 0b10 	vmov	d0, r0, r1
 23f9102:	4629      	mov	r1, r5
 23f9104:	4620      	mov	r0, r4
}
 23f9106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23f910a:	f7ff bf29 	b.w	23f8f60 <_ZN5Print10printFloatEdh>
	...

023f9110 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23f9110:	2300      	movs	r3, #0
 23f9112:	4802      	ldr	r0, [pc, #8]	; (23f911c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f9114:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23f9116:	f7fd bf25 	b.w	23f6f64 <os_mutex_recursive_create>
 23f911a:	bf00      	nop
 23f911c:	1007aed4 	.word	0x1007aed4

023f9120 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23f9120:	b510      	push	{r4, lr}
 23f9122:	4604      	mov	r4, r0
{
	free(buffer);
 23f9124:	6800      	ldr	r0, [r0, #0]
 23f9126:	f7fe f93f 	bl	23f73a8 <free>
}
 23f912a:	4620      	mov	r0, r4
 23f912c:	bd10      	pop	{r4, pc}

023f912e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23f912e:	b510      	push	{r4, lr}
 23f9130:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23f9132:	6800      	ldr	r0, [r0, #0]
 23f9134:	b108      	cbz	r0, 23f913a <_ZN6String10invalidateEv+0xc>
 23f9136:	f7fe f937 	bl	23f73a8 <free>
	buffer = NULL;
 23f913a:	2300      	movs	r3, #0
	capacity = len = 0;
 23f913c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23f9140:	6023      	str	r3, [r4, #0]
}
 23f9142:	bd10      	pop	{r4, pc}

023f9144 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f9144:	b538      	push	{r3, r4, r5, lr}
 23f9146:	4604      	mov	r4, r0
 23f9148:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f914a:	6800      	ldr	r0, [r0, #0]
 23f914c:	3101      	adds	r1, #1
 23f914e:	f7fe f939 	bl	23f73c4 <realloc>
	if (newbuffer) {
 23f9152:	b110      	cbz	r0, 23f915a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23f9154:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23f9158:	2001      	movs	r0, #1
	}
	return 0;
}
 23f915a:	bd38      	pop	{r3, r4, r5, pc}

023f915c <_ZN6String7reserveEj>:
{
 23f915c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23f915e:	6803      	ldr	r3, [r0, #0]
{
 23f9160:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23f9162:	b123      	cbz	r3, 23f916e <_ZN6String7reserveEj+0x12>
 23f9164:	6843      	ldr	r3, [r0, #4]
 23f9166:	428b      	cmp	r3, r1
 23f9168:	d301      	bcc.n	23f916e <_ZN6String7reserveEj+0x12>
 23f916a:	2001      	movs	r0, #1
}
 23f916c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23f916e:	4620      	mov	r0, r4
 23f9170:	f7ff ffe8 	bl	23f9144 <_ZN6String12changeBufferEj>
 23f9174:	2800      	cmp	r0, #0
 23f9176:	d0f9      	beq.n	23f916c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23f9178:	68a3      	ldr	r3, [r4, #8]
 23f917a:	2b00      	cmp	r3, #0
 23f917c:	d1f5      	bne.n	23f916a <_ZN6String7reserveEj+0xe>
 23f917e:	6822      	ldr	r2, [r4, #0]
 23f9180:	7013      	strb	r3, [r2, #0]
 23f9182:	e7f2      	b.n	23f916a <_ZN6String7reserveEj+0xe>

023f9184 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f9184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9186:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23f9188:	4611      	mov	r1, r2
 23f918a:	9201      	str	r2, [sp, #4]
{
 23f918c:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23f918e:	f7ff ffe5 	bl	23f915c <_ZN6String7reserveEj>
 23f9192:	9a01      	ldr	r2, [sp, #4]
 23f9194:	b928      	cbnz	r0, 23f91a2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23f9196:	4620      	mov	r0, r4
 23f9198:	f7ff ffc9 	bl	23f912e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23f919c:	4620      	mov	r0, r4
 23f919e:	b003      	add	sp, #12
 23f91a0:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23f91a2:	4629      	mov	r1, r5
	len = length;
 23f91a4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23f91a6:	6820      	ldr	r0, [r4, #0]
 23f91a8:	f002 f9b9 	bl	23fb51e <memcpy>
	buffer[len] = 0;
 23f91ac:	2100      	movs	r1, #0
 23f91ae:	6822      	ldr	r2, [r4, #0]
 23f91b0:	68a3      	ldr	r3, [r4, #8]
 23f91b2:	54d1      	strb	r1, [r2, r3]
	return *this;
 23f91b4:	e7f2      	b.n	23f919c <_ZN6String4copyEPKcj+0x18>

023f91b6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23f91b6:	b538      	push	{r3, r4, r5, lr}
 23f91b8:	4605      	mov	r5, r0
	if (buffer) {
 23f91ba:	6800      	ldr	r0, [r0, #0]
{
 23f91bc:	460c      	mov	r4, r1
	if (buffer) {
 23f91be:	b170      	cbz	r0, 23f91de <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23f91c0:	686a      	ldr	r2, [r5, #4]
 23f91c2:	688b      	ldr	r3, [r1, #8]
 23f91c4:	429a      	cmp	r2, r3
 23f91c6:	d308      	bcc.n	23f91da <_ZN6String4moveERS_+0x24>
 23f91c8:	6809      	ldr	r1, [r1, #0]
 23f91ca:	b131      	cbz	r1, 23f91da <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23f91cc:	f002 fa2b 	bl	23fb626 <strcpy>
			len = rhs.len;
 23f91d0:	68a3      	ldr	r3, [r4, #8]
 23f91d2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23f91d4:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23f91d6:	60a3      	str	r3, [r4, #8]
}
 23f91d8:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23f91da:	f7fe f8e5 	bl	23f73a8 <free>
	buffer = rhs.buffer;
 23f91de:	6823      	ldr	r3, [r4, #0]
 23f91e0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23f91e2:	6863      	ldr	r3, [r4, #4]
 23f91e4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23f91e6:	68a3      	ldr	r3, [r4, #8]
 23f91e8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23f91ea:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23f91ec:	e9c4 3300 	strd	r3, r3, [r4]
 23f91f0:	e7f1      	b.n	23f91d6 <_ZN6String4moveERS_+0x20>

023f91f2 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23f91f2:	2300      	movs	r3, #0
String::String(String &&rval)
 23f91f4:	b510      	push	{r4, lr}
 23f91f6:	4604      	mov	r4, r0
	capacity = 0;
 23f91f8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f91fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f91fe:	7303      	strb	r3, [r0, #12]
	move(rval);
 23f9200:	f7ff ffd9 	bl	23f91b6 <_ZN6String4moveERS_>
}
 23f9204:	4620      	mov	r0, r4
 23f9206:	bd10      	pop	{r4, pc}

023f9208 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23f9208:	4288      	cmp	r0, r1
{
 23f920a:	b510      	push	{r4, lr}
 23f920c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23f920e:	d005      	beq.n	23f921c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23f9210:	680b      	ldr	r3, [r1, #0]
 23f9212:	b12b      	cbz	r3, 23f9220 <_ZN6StringaSERKS_+0x18>
 23f9214:	688a      	ldr	r2, [r1, #8]
 23f9216:	4619      	mov	r1, r3
 23f9218:	f7ff ffb4 	bl	23f9184 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23f921c:	4620      	mov	r0, r4
 23f921e:	bd10      	pop	{r4, pc}
	else invalidate();
 23f9220:	f7ff ff85 	bl	23f912e <_ZN6String10invalidateEv>
 23f9224:	e7fa      	b.n	23f921c <_ZN6StringaSERKS_+0x14>

023f9226 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23f9226:	2300      	movs	r3, #0
String::String(const String &value)
 23f9228:	b510      	push	{r4, lr}
 23f922a:	4604      	mov	r4, r0
	capacity = 0;
 23f922c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f9230:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f9232:	7303      	strb	r3, [r0, #12]
	*this = value;
 23f9234:	f7ff ffe8 	bl	23f9208 <_ZN6StringaSERKS_>
}
 23f9238:	4620      	mov	r0, r4
 23f923a:	bd10      	pop	{r4, pc}

023f923c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f923c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f923e:	2000      	movs	r0, #0
 23f9240:	4b04      	ldr	r3, [pc, #16]	; (23f9254 <_GLOBAL__sub_I_System+0x18>)
 23f9242:	601a      	str	r2, [r3, #0]
 23f9244:	4b04      	ldr	r3, [pc, #16]	; (23f9258 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f9246:	4a05      	ldr	r2, [pc, #20]	; (23f925c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f9248:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f924c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f924e:	f7fe b857 	b.w	23f7300 <set_system_mode>
 23f9252:	bf00      	nop
 23f9254:	1007aee4 	.word	0x1007aee4
 23f9258:	1007aed8 	.word	0x1007aed8
 23f925c:	ffff0000 	.word	0xffff0000

023f9260 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f9260:	2200      	movs	r2, #0
 23f9262:	6840      	ldr	r0, [r0, #4]
 23f9264:	4611      	mov	r1, r2
 23f9266:	f7fe b805 	b.w	23f7274 <network_listening>

023f926a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f926a:	2200      	movs	r2, #0
 23f926c:	6840      	ldr	r0, [r0, #4]
 23f926e:	4611      	mov	r1, r2
 23f9270:	f7fe b81c 	b.w	23f72ac <network_get_listen_timeout>

023f9274 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9274:	2200      	movs	r2, #0
 23f9276:	6840      	ldr	r0, [r0, #4]
 23f9278:	f7fe b80a 	b.w	23f7290 <network_set_listen_timeout>

023f927c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f927c:	2200      	movs	r2, #0
 23f927e:	6840      	ldr	r0, [r0, #4]
 23f9280:	f081 0101 	eor.w	r1, r1, #1
 23f9284:	f7fd bfe8 	b.w	23f7258 <network_listen>

023f9288 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9288:	2300      	movs	r3, #0
 23f928a:	6840      	ldr	r0, [r0, #4]
 23f928c:	461a      	mov	r2, r3
 23f928e:	4619      	mov	r1, r3
 23f9290:	f7fd bfd4 	b.w	23f723c <network_off>

023f9294 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9294:	2300      	movs	r3, #0
 23f9296:	6840      	ldr	r0, [r0, #4]
 23f9298:	461a      	mov	r2, r3
 23f929a:	4619      	mov	r1, r3
 23f929c:	f7fd bfc0 	b.w	23f7220 <network_on>

023f92a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f92a0:	2200      	movs	r2, #0
 23f92a2:	6840      	ldr	r0, [r0, #4]
 23f92a4:	4611      	mov	r1, r2
 23f92a6:	f7fd bfad 	b.w	23f7204 <network_ready>

023f92aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f92aa:	2200      	movs	r2, #0
 23f92ac:	6840      	ldr	r0, [r0, #4]
 23f92ae:	4611      	mov	r1, r2
 23f92b0:	f7fd bf8c 	b.w	23f71cc <network_connecting>

023f92b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f92b4:	2200      	movs	r2, #0
 23f92b6:	2102      	movs	r1, #2
 23f92b8:	6840      	ldr	r0, [r0, #4]
 23f92ba:	f7fd bf95 	b.w	23f71e8 <network_disconnect>

023f92be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f92be:	2300      	movs	r3, #0
 23f92c0:	6840      	ldr	r0, [r0, #4]
 23f92c2:	461a      	mov	r2, r3
 23f92c4:	f7fd bf74 	b.w	23f71b0 <network_connect>

023f92c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f92c8:	2203      	movs	r2, #3
 23f92ca:	4b02      	ldr	r3, [pc, #8]	; (23f92d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f92cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f92ce:	4a02      	ldr	r2, [pc, #8]	; (23f92d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f92d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f92d2:	4770      	bx	lr
 23f92d4:	1007aee8 	.word	0x1007aee8
 23f92d8:	023ffb08 	.word	0x023ffb08

023f92dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f92dc:	4770      	bx	lr
	...

023f92e0 <_Z17acquireWireBufferv>:
{
 23f92e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23f92e2:	4b0a      	ldr	r3, [pc, #40]	; (23f930c <_Z17acquireWireBufferv+0x2c>)
{
 23f92e4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23f92e6:	6003      	str	r3, [r0, #0]
 23f92e8:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f92ea:	4909      	ldr	r1, [pc, #36]	; (23f9310 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23f92ec:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f92ee:	2020      	movs	r0, #32
 23f92f0:	f000 fafc 	bl	23f98ec <_ZnajRKSt9nothrow_t>
	};
 23f92f4:	2520      	movs	r5, #32
 23f92f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f92f8:	4905      	ldr	r1, [pc, #20]	; (23f9310 <_Z17acquireWireBufferv+0x30>)
 23f92fa:	4628      	mov	r0, r5
	};
 23f92fc:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f92fe:	f000 faf5 	bl	23f98ec <_ZnajRKSt9nothrow_t>
	};
 23f9302:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23f9306:	4620      	mov	r0, r4
 23f9308:	bd38      	pop	{r3, r4, r5, pc}
 23f930a:	bf00      	nop
 23f930c:	00010018 	.word	0x00010018
 23f9310:	023ffb6b 	.word	0x023ffb6b

023f9314 <_Z19__fetch_global_Wirev>:
{
 23f9314:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9316:	4d0e      	ldr	r5, [pc, #56]	; (23f9350 <_Z19__fetch_global_Wirev+0x3c>)
{
 23f9318:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f931a:	e8d5 1f8f 	ldab	r1, [r5]
 23f931e:	f011 0401 	ands.w	r4, r1, #1
 23f9322:	d111      	bne.n	23f9348 <_Z19__fetch_global_Wirev+0x34>
 23f9324:	4628      	mov	r0, r5
 23f9326:	f7f4 f889 	bl	23ed43c <__cxa_guard_acquire>
 23f932a:	b168      	cbz	r0, 23f9348 <_Z19__fetch_global_Wirev+0x34>
 23f932c:	4668      	mov	r0, sp
 23f932e:	f7ff ffd7 	bl	23f92e0 <_Z17acquireWireBufferv>
 23f9332:	466a      	mov	r2, sp
 23f9334:	4621      	mov	r1, r4
 23f9336:	4807      	ldr	r0, [pc, #28]	; (23f9354 <_Z19__fetch_global_Wirev+0x40>)
 23f9338:	f7fe fa2c 	bl	23f7794 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23f933c:	4628      	mov	r0, r5
 23f933e:	f7f4 f882 	bl	23ed446 <__cxa_guard_release>
 23f9342:	4805      	ldr	r0, [pc, #20]	; (23f9358 <_Z19__fetch_global_Wirev+0x44>)
 23f9344:	f002 f8d2 	bl	23fb4ec <atexit>
	return wire;
}
 23f9348:	4802      	ldr	r0, [pc, #8]	; (23f9354 <_Z19__fetch_global_Wirev+0x40>)
 23f934a:	b007      	add	sp, #28
 23f934c:	bd30      	pop	{r4, r5, pc}
 23f934e:	bf00      	nop
 23f9350:	1007aef0 	.word	0x1007aef0
 23f9354:	1007aef4 	.word	0x1007aef4
 23f9358:	023f92dd 	.word	0x023f92dd

023f935c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f935c:	4770      	bx	lr
	...

023f9360 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23f9360:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f9362:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23f9364:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f9366:	462a      	mov	r2, r5
 23f9368:	2100      	movs	r1, #0
 23f936a:	f002 f8ff 	bl	23fb56c <memset>
 23f936e:	8025      	strh	r5, [r4, #0]
 23f9370:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9372:	4907      	ldr	r1, [pc, #28]	; (23f9390 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23f9374:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f9376:	8125      	strh	r5, [r4, #8]
 23f9378:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f937a:	f000 fab7 	bl	23f98ec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f937e:	4904      	ldr	r1, [pc, #16]	; (23f9390 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23f9380:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9382:	4628      	mov	r0, r5
 23f9384:	f000 fab2 	bl	23f98ec <_ZnajRKSt9nothrow_t>
    };
 23f9388:	60e0      	str	r0, [r4, #12]
}
 23f938a:	4620      	mov	r0, r4
 23f938c:	bd38      	pop	{r3, r4, r5, pc}
 23f938e:	bf00      	nop
 23f9390:	023ffb6b 	.word	0x023ffb6b

023f9394 <__tcf_2>:
 23f9394:	4770      	bx	lr

023f9396 <__tcf_1>:
 23f9396:	4770      	bx	lr

023f9398 <_Z20acquireSerial1Bufferv>:
{
 23f9398:	b510      	push	{r4, lr}
 23f939a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23f939c:	f7ff ffe0 	bl	23f9360 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23f93a0:	4620      	mov	r0, r4
 23f93a2:	bd10      	pop	{r4, pc}

023f93a4 <_Z20acquireSerial2Bufferv>:
 23f93a4:	b510      	push	{r4, lr}
 23f93a6:	4604      	mov	r4, r0
 23f93a8:	f7ff ffda 	bl	23f9360 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f93ac:	4620      	mov	r0, r4
 23f93ae:	bd10      	pop	{r4, pc}

023f93b0 <_Z20acquireSerial3Bufferv>:
 23f93b0:	b510      	push	{r4, lr}
 23f93b2:	4604      	mov	r4, r0
 23f93b4:	f7ff ffd4 	bl	23f9360 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f93b8:	4620      	mov	r0, r4
 23f93ba:	bd10      	pop	{r4, pc}

023f93bc <_Z22__fetch_global_Serial1v>:
{
 23f93bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f93be:	4d0e      	ldr	r5, [pc, #56]	; (23f93f8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f93c0:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f93c2:	e8d5 1f8f 	ldab	r1, [r5]
 23f93c6:	f011 0401 	ands.w	r4, r1, #1
 23f93ca:	d111      	bne.n	23f93f0 <_Z22__fetch_global_Serial1v+0x34>
 23f93cc:	4628      	mov	r0, r5
 23f93ce:	f7f4 f835 	bl	23ed43c <__cxa_guard_acquire>
 23f93d2:	b168      	cbz	r0, 23f93f0 <_Z22__fetch_global_Serial1v+0x34>
 23f93d4:	a801      	add	r0, sp, #4
 23f93d6:	f7ff ffdf 	bl	23f9398 <_Z20acquireSerial1Bufferv>
 23f93da:	4621      	mov	r1, r4
 23f93dc:	aa01      	add	r2, sp, #4
 23f93de:	4807      	ldr	r0, [pc, #28]	; (23f93fc <_Z22__fetch_global_Serial1v+0x40>)
 23f93e0:	f7fe f98a 	bl	23f76f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f93e4:	4628      	mov	r0, r5
 23f93e6:	f7f4 f82e 	bl	23ed446 <__cxa_guard_release>
 23f93ea:	4805      	ldr	r0, [pc, #20]	; (23f9400 <_Z22__fetch_global_Serial1v+0x44>)
 23f93ec:	f002 f87e 	bl	23fb4ec <atexit>
    return serial1;
}
 23f93f0:	4802      	ldr	r0, [pc, #8]	; (23f93fc <_Z22__fetch_global_Serial1v+0x40>)
 23f93f2:	b007      	add	sp, #28
 23f93f4:	bd30      	pop	{r4, r5, pc}
 23f93f6:	bf00      	nop
 23f93f8:	1007af0c 	.word	0x1007af0c
 23f93fc:	1007af18 	.word	0x1007af18
 23f9400:	023f935d 	.word	0x023f935d

023f9404 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f9404:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9406:	4c0d      	ldr	r4, [pc, #52]	; (23f943c <_Z22__fetch_global_Serial2v+0x38>)
{
 23f9408:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f940a:	e8d4 3f8f 	ldab	r3, [r4]
 23f940e:	07db      	lsls	r3, r3, #31
 23f9410:	d411      	bmi.n	23f9436 <_Z22__fetch_global_Serial2v+0x32>
 23f9412:	4620      	mov	r0, r4
 23f9414:	f7f4 f812 	bl	23ed43c <__cxa_guard_acquire>
 23f9418:	b168      	cbz	r0, 23f9436 <_Z22__fetch_global_Serial2v+0x32>
 23f941a:	a801      	add	r0, sp, #4
 23f941c:	f7ff ffc2 	bl	23f93a4 <_Z20acquireSerial2Bufferv>
 23f9420:	2101      	movs	r1, #1
 23f9422:	aa01      	add	r2, sp, #4
 23f9424:	4806      	ldr	r0, [pc, #24]	; (23f9440 <_Z22__fetch_global_Serial2v+0x3c>)
 23f9426:	f7fe f967 	bl	23f76f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f942a:	4620      	mov	r0, r4
 23f942c:	f7f4 f80b 	bl	23ed446 <__cxa_guard_release>
 23f9430:	4804      	ldr	r0, [pc, #16]	; (23f9444 <_Z22__fetch_global_Serial2v+0x40>)
 23f9432:	f002 f85b 	bl	23fb4ec <atexit>
	return serial2;
}
 23f9436:	4802      	ldr	r0, [pc, #8]	; (23f9440 <_Z22__fetch_global_Serial2v+0x3c>)
 23f9438:	b006      	add	sp, #24
 23f943a:	bd10      	pop	{r4, pc}
 23f943c:	1007af10 	.word	0x1007af10
 23f9440:	1007af2c 	.word	0x1007af2c
 23f9444:	023f9397 	.word	0x023f9397

023f9448 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23f9448:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23f944a:	f7ff ffdb 	bl	23f9404 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23f944e:	4b07      	ldr	r3, [pc, #28]	; (23f946c <_Z15serialEventRun2v+0x24>)
 23f9450:	4604      	mov	r4, r0
 23f9452:	b153      	cbz	r3, 23f946a <_Z15serialEventRun2v+0x22>
 23f9454:	f7fe f96e 	bl	23f7734 <_ZN11USARTSerial9isEnabledEv>
 23f9458:	b138      	cbz	r0, 23f946a <_Z15serialEventRun2v+0x22>
 23f945a:	6823      	ldr	r3, [r4, #0]
 23f945c:	4620      	mov	r0, r4
 23f945e:	691b      	ldr	r3, [r3, #16]
 23f9460:	4798      	blx	r3
 23f9462:	2800      	cmp	r0, #0
 23f9464:	dd01      	ble.n	23f946a <_Z15serialEventRun2v+0x22>
        handler();
 23f9466:	e000      	b.n	23f946a <_Z15serialEventRun2v+0x22>
 23f9468:	bf00      	nop
}
 23f946a:	bd10      	pop	{r4, pc}
 23f946c:	00000000 	.word	0x00000000

023f9470 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23f9470:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f9472:	4c0d      	ldr	r4, [pc, #52]	; (23f94a8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23f9474:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f9476:	e8d4 3f8f 	ldab	r3, [r4]
 23f947a:	07db      	lsls	r3, r3, #31
 23f947c:	d411      	bmi.n	23f94a2 <_Z22__fetch_global_Serial3v+0x32>
 23f947e:	4620      	mov	r0, r4
 23f9480:	f7f3 ffdc 	bl	23ed43c <__cxa_guard_acquire>
 23f9484:	b168      	cbz	r0, 23f94a2 <_Z22__fetch_global_Serial3v+0x32>
 23f9486:	a801      	add	r0, sp, #4
 23f9488:	f7ff ff92 	bl	23f93b0 <_Z20acquireSerial3Bufferv>
 23f948c:	2102      	movs	r1, #2
 23f948e:	aa01      	add	r2, sp, #4
 23f9490:	4806      	ldr	r0, [pc, #24]	; (23f94ac <_Z22__fetch_global_Serial3v+0x3c>)
 23f9492:	f7fe f931 	bl	23f76f8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9496:	4620      	mov	r0, r4
 23f9498:	f7f3 ffd5 	bl	23ed446 <__cxa_guard_release>
 23f949c:	4804      	ldr	r0, [pc, #16]	; (23f94b0 <_Z22__fetch_global_Serial3v+0x40>)
 23f949e:	f002 f825 	bl	23fb4ec <atexit>
	return serial3;
}
 23f94a2:	4802      	ldr	r0, [pc, #8]	; (23f94ac <_Z22__fetch_global_Serial3v+0x3c>)
 23f94a4:	b006      	add	sp, #24
 23f94a6:	bd10      	pop	{r4, pc}
 23f94a8:	1007af14 	.word	0x1007af14
 23f94ac:	1007af40 	.word	0x1007af40
 23f94b0:	023f9395 	.word	0x023f9395

023f94b4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23f94b4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23f94b6:	f7ff ffdb 	bl	23f9470 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23f94ba:	4b07      	ldr	r3, [pc, #28]	; (23f94d8 <_Z15serialEventRun3v+0x24>)
 23f94bc:	4604      	mov	r4, r0
 23f94be:	b153      	cbz	r3, 23f94d6 <_Z15serialEventRun3v+0x22>
 23f94c0:	f7fe f938 	bl	23f7734 <_ZN11USARTSerial9isEnabledEv>
 23f94c4:	b138      	cbz	r0, 23f94d6 <_Z15serialEventRun3v+0x22>
 23f94c6:	6823      	ldr	r3, [r4, #0]
 23f94c8:	4620      	mov	r0, r4
 23f94ca:	691b      	ldr	r3, [r3, #16]
 23f94cc:	4798      	blx	r3
 23f94ce:	2800      	cmp	r0, #0
 23f94d0:	dd01      	ble.n	23f94d6 <_Z15serialEventRun3v+0x22>
        handler();
 23f94d2:	e000      	b.n	23f94d6 <_Z15serialEventRun3v+0x22>
 23f94d4:	bf00      	nop
}
 23f94d6:	bd10      	pop	{r4, pc}
 23f94d8:	00000000 	.word	0x00000000

023f94dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23f94dc:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23f94de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f94e0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23f94e2:	d902      	bls.n	23f94ea <pinAvailable+0xe>
    return false;
 23f94e4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23f94e6:	b003      	add	sp, #12
 23f94e8:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f94ea:	f1a0 030f 	sub.w	r3, r0, #15
 23f94ee:	2b02      	cmp	r3, #2
 23f94f0:	d90b      	bls.n	23f950a <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23f94f2:	2801      	cmp	r0, #1
 23f94f4:	d821      	bhi.n	23f953a <pinAvailable+0x5e>
 23f94f6:	f7ff ff0d 	bl	23f9314 <_Z19__fetch_global_Wirev>
 23f94fa:	2100      	movs	r1, #0
 23f94fc:	7c00      	ldrb	r0, [r0, #16]
 23f94fe:	f7fd fc6d 	bl	23f6ddc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f9502:	f080 0001 	eor.w	r0, r0, #1
 23f9506:	b2c0      	uxtb	r0, r0
 23f9508:	e7ed      	b.n	23f94e6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23f950a:	4d11      	ldr	r5, [pc, #68]	; (23f9550 <pinAvailable+0x74>)
 23f950c:	e8d5 1f8f 	ldab	r1, [r5]
 23f9510:	f011 0101 	ands.w	r1, r1, #1
 23f9514:	d10b      	bne.n	23f952e <pinAvailable+0x52>
 23f9516:	4628      	mov	r0, r5
 23f9518:	9101      	str	r1, [sp, #4]
 23f951a:	f7f3 ff8f 	bl	23ed43c <__cxa_guard_acquire>
 23f951e:	9901      	ldr	r1, [sp, #4]
 23f9520:	b128      	cbz	r0, 23f952e <pinAvailable+0x52>
 23f9522:	480c      	ldr	r0, [pc, #48]	; (23f9554 <pinAvailable+0x78>)
 23f9524:	f7fe f8a0 	bl	23f7668 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f9528:	4628      	mov	r0, r5
 23f952a:	f7f3 ff8c 	bl	23ed446 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f952e:	4b09      	ldr	r3, [pc, #36]	; (23f9554 <pinAvailable+0x78>)
 23f9530:	7818      	ldrb	r0, [r3, #0]
 23f9532:	f7fd fda3 	bl	23f707c <hal_spi_is_enabled>
 23f9536:	2800      	cmp	r0, #0
 23f9538:	d1d4      	bne.n	23f94e4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f953a:	3c08      	subs	r4, #8
 23f953c:	2c01      	cmp	r4, #1
 23f953e:	d805      	bhi.n	23f954c <pinAvailable+0x70>
 23f9540:	f7ff ff3c 	bl	23f93bc <_Z22__fetch_global_Serial1v>
 23f9544:	7c00      	ldrb	r0, [r0, #16]
 23f9546:	f7fd fcb9 	bl	23f6ebc <hal_usart_is_enabled>
 23f954a:	e7da      	b.n	23f9502 <pinAvailable+0x26>
  return true; // 'pin' is available
 23f954c:	2001      	movs	r0, #1
 23f954e:	e7ca      	b.n	23f94e6 <pinAvailable+0xa>
 23f9550:	1007af54 	.word	0x1007af54
 23f9554:	1007af58 	.word	0x1007af58

023f9558 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9558:	281b      	cmp	r0, #27
{
 23f955a:	b538      	push	{r3, r4, r5, lr}
 23f955c:	4604      	mov	r4, r0
 23f955e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9560:	d80a      	bhi.n	23f9578 <pinMode+0x20>
 23f9562:	29ff      	cmp	r1, #255	; 0xff
 23f9564:	d008      	beq.n	23f9578 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23f9566:	f7ff ffb9 	bl	23f94dc <pinAvailable>
 23f956a:	b128      	cbz	r0, 23f9578 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23f956c:	4629      	mov	r1, r5
 23f956e:	4620      	mov	r0, r4
}
 23f9570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23f9574:	f7fd bd90 	b.w	23f7098 <hal_gpio_mode>
}
 23f9578:	bd38      	pop	{r3, r4, r5, pc}

023f957a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23f957a:	b538      	push	{r3, r4, r5, lr}
 23f957c:	4604      	mov	r4, r0
 23f957e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23f9580:	f7fd fd98 	bl	23f70b4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23f9584:	28ff      	cmp	r0, #255	; 0xff
 23f9586:	d010      	beq.n	23f95aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23f9588:	2806      	cmp	r0, #6
 23f958a:	d804      	bhi.n	23f9596 <digitalWrite+0x1c>
 23f958c:	234d      	movs	r3, #77	; 0x4d
 23f958e:	fa23 f000 	lsr.w	r0, r3, r0
 23f9592:	07c3      	lsls	r3, r0, #31
 23f9594:	d409      	bmi.n	23f95aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23f9596:	4620      	mov	r0, r4
 23f9598:	f7ff ffa0 	bl	23f94dc <pinAvailable>
 23f959c:	b128      	cbz	r0, 23f95aa <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23f959e:	4629      	mov	r1, r5
 23f95a0:	4620      	mov	r0, r4
}
 23f95a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23f95a6:	f7fd bd93 	b.w	23f70d0 <hal_gpio_write>
}
 23f95aa:	bd38      	pop	{r3, r4, r5, pc}

023f95ac <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23f95ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f95b0:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23f95b4:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23f95b8:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23f95bc:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23f95c0:	4770      	bx	lr
	...

023f95c4 <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23f95c4:	2801      	cmp	r0, #1
{
 23f95c6:	b570      	push	{r4, r5, r6, lr}
 23f95c8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23f95cc:	d14a      	bne.n	23f9664 <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23f95ce:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23f95d2:	009a      	lsls	r2, r3, #2
 23f95d4:	d445      	bmi.n	23f9662 <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23f95d6:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23f95da:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23f95de:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23f95e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23f95e4:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23f95e8:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23f95ec:	4e21      	ldr	r6, [pc, #132]	; (23f9674 <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23f95ee:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23f95f2:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23f95f6:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23f95f8:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23f95fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23f9600:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23f9604:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f9608:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23f960c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f9610:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23f9614:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23f9616:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23f961a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23f961e:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f9622:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23f9626:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f962a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23f962e:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23f9630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23f9634:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23f9636:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23f963a:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23f963e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23f9642:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23f9646:	009b      	lsls	r3, r3, #2
 23f9648:	d5fb      	bpl.n	23f9642 <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f964a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23f964e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f9652:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f9656:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23f965a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f965e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23f9662:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f9664:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23f9668:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23f966c:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23f9670:	e7f5      	b.n	23f965e <PLL_I2S_Set+0x9a>
 23f9672:	bf00      	nop
 23f9674:	1010a949 	.word	0x1010a949

023f9678 <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23f9678:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23f967a:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23f967e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23f9682:	4770      	bx	lr

023f9684 <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f9684:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23f9686:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f9688:	bf0b      	itete	eq
 23f968a:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23f968e:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f9692:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23f9694:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23f9696:	bf0b      	itete	eq
 23f9698:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23f969a:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23f969c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23f96a0:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23f96a4:	6043      	str	r3, [r0, #4]
	}
}
 23f96a6:	4770      	bx	lr

023f96a8 <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f96a8:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23f96aa:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f96ac:	bf0b      	itete	eq
 23f96ae:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23f96b2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f96b6:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23f96b8:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23f96ba:	bf0b      	itete	eq
 23f96bc:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23f96be:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23f96c0:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23f96c4:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23f96c8:	6043      	str	r3, [r0, #4]
	}
}
 23f96ca:	4770      	bx	lr

023f96cc <AUDIO_SP_Init>:
{
 23f96cc:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23f96ce:	680b      	ldr	r3, [r1, #0]
{
 23f96d0:	4605      	mov	r5, r0
 23f96d2:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23f96d4:	b133      	cbz	r3, 23f96e4 <AUDIO_SP_Init+0x18>
 23f96d6:	3b02      	subs	r3, #2
 23f96d8:	2b01      	cmp	r3, #1
 23f96da:	d903      	bls.n	23f96e4 <AUDIO_SP_Init+0x18>
 23f96dc:	213a      	movs	r1, #58	; 0x3a
 23f96de:	481f      	ldr	r0, [pc, #124]	; (23f975c <AUDIO_SP_Init+0x90>)
 23f96e0:	f002 f8d2 	bl	23fb888 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23f96e4:	6863      	ldr	r3, [r4, #4]
 23f96e6:	2b03      	cmp	r3, #3
 23f96e8:	d906      	bls.n	23f96f8 <AUDIO_SP_Init+0x2c>
 23f96ea:	3b06      	subs	r3, #6
 23f96ec:	2b01      	cmp	r3, #1
 23f96ee:	d903      	bls.n	23f96f8 <AUDIO_SP_Init+0x2c>
 23f96f0:	213b      	movs	r1, #59	; 0x3b
 23f96f2:	481a      	ldr	r0, [pc, #104]	; (23f975c <AUDIO_SP_Init+0x90>)
 23f96f4:	f002 f8c8 	bl	23fb888 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23f96f8:	68a3      	ldr	r3, [r4, #8]
 23f96fa:	2b01      	cmp	r3, #1
 23f96fc:	d903      	bls.n	23f9706 <AUDIO_SP_Init+0x3a>
 23f96fe:	213c      	movs	r1, #60	; 0x3c
 23f9700:	4816      	ldr	r0, [pc, #88]	; (23f975c <AUDIO_SP_Init+0x90>)
 23f9702:	f002 f8c1 	bl	23fb888 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23f9706:	68e3      	ldr	r3, [r4, #12]
 23f9708:	2b03      	cmp	r3, #3
 23f970a:	d903      	bls.n	23f9714 <AUDIO_SP_Init+0x48>
 23f970c:	213d      	movs	r1, #61	; 0x3d
 23f970e:	4813      	ldr	r0, [pc, #76]	; (23f975c <AUDIO_SP_Init+0x90>)
 23f9710:	f002 f8ba 	bl	23fb888 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23f9714:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f9716:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23f9718:	f043 0301 	orr.w	r3, r3, #1
 23f971c:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23f971e:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f9720:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23f9722:	f023 0301 	bic.w	r3, r3, #1
 23f9726:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23f9728:	4b0d      	ldr	r3, [pc, #52]	; (23f9760 <AUDIO_SP_Init+0x94>)
 23f972a:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f972c:	4b0d      	ldr	r3, [pc, #52]	; (23f9764 <AUDIO_SP_Init+0x98>)
 23f972e:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23f9730:	4b0d      	ldr	r3, [pc, #52]	; (23f9768 <AUDIO_SP_Init+0x9c>)
 23f9732:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23f9734:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23f9738:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23f973a:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23f973c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23f9740:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23f9744:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23f9748:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23f974a:	68a2      	ldr	r2, [r4, #8]
 23f974c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23f9750:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23f9752:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23f9756:	606b      	str	r3, [r5, #4]
}
 23f9758:	bd38      	pop	{r3, r4, r5, pc}
 23f975a:	bf00      	nop
 23f975c:	023ffb5d 	.word	0x023ffb5d
 23f9760:	80100271 	.word	0x80100271
 23f9764:	023f9685 	.word	0x023f9685
 23f9768:	023f96a9 	.word	0x023f96a9

023f976c <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f976c:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23f976e:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f9770:	bf0b      	itete	eq
 23f9772:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23f9776:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f977a:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23f977c:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23f977e:	bf0b      	itete	eq
 23f9780:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23f9782:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23f9784:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23f9788:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23f978c:	60c3      	str	r3, [r0, #12]
	}
}
 23f978e:	4770      	bx	lr

023f9790 <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23f9790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f9794:	461f      	mov	r7, r3
 23f9796:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23f979a:	230c      	movs	r3, #12
 23f979c:	4358      	muls	r0, r3
 23f979e:	4b4b      	ldr	r3, [pc, #300]	; (23f98cc <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23f97a0:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23f97a2:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23f97a6:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23f97aa:	b931      	cbnz	r1, 23f97ba <AUDIO_SP_RXGDMA_Init+0x2a>
 23f97ac:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23f97b0:	4847      	ldr	r0, [pc, #284]	; (23f98d0 <AUDIO_SP_RXGDMA_Init+0x140>)
 23f97b2:	9201      	str	r2, [sp, #4]
 23f97b4:	f002 f868 	bl	23fb888 <__io_assert_failed_veneer>
 23f97b8:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23f97ba:	4639      	mov	r1, r7
 23f97bc:	230c      	movs	r3, #12
 23f97be:	4f45      	ldr	r7, [pc, #276]	; (23f98d4 <AUDIO_SP_RXGDMA_Init+0x144>)
 23f97c0:	2000      	movs	r0, #0
 23f97c2:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23f97c4:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23f97c6:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23f97c8:	d07e      	beq.n	23f98c8 <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23f97ca:	2254      	movs	r2, #84	; 0x54
 23f97cc:	2100      	movs	r1, #0
 23f97ce:	4b42      	ldr	r3, [pc, #264]	; (23f98d8 <AUDIO_SP_RXGDMA_Init+0x148>)
 23f97d0:	4620      	mov	r0, r4
 23f97d2:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23f97d4:	210b      	movs	r1, #11
 23f97d6:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23f97d8:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23f97dc:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23f97de:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23f97e0:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23f97e2:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23f97e4:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23f97e6:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23f97ea:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23f97ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23f97f2:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23f97f4:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23f97f6:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23f97f8:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23f97fa:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23f97fc:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23f97fe:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23f9800:	d144      	bne.n	23f988c <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23f9802:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23f9806:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23f9808:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23f980a:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23f980c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23f980e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23f9812:	d904      	bls.n	23f981e <AUDIO_SP_RXGDMA_Init+0x8e>
 23f9814:	f240 1177 	movw	r1, #375	; 0x177
 23f9818:	482d      	ldr	r0, [pc, #180]	; (23f98d0 <AUDIO_SP_RXGDMA_Init+0x140>)
 23f981a:	f002 f835 	bl	23fb888 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23f981e:	4622      	mov	r2, r4
 23f9820:	4b2e      	ldr	r3, [pc, #184]	; (23f98dc <AUDIO_SP_RXGDMA_Init+0x14c>)
 23f9822:	7861      	ldrb	r1, [r4, #1]
 23f9824:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23f9826:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23f9828:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f982a:	4a2d      	ldr	r2, [pc, #180]	; (23f98e0 <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23f982c:	462f      	mov	r7, r5
 23f982e:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f9830:	03db      	lsls	r3, r3, #15
 23f9832:	d522      	bpl.n	23f987a <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23f9834:	1c68      	adds	r0, r5, #1
 23f9836:	d130      	bne.n	23f989a <AUDIO_SP_RXGDMA_Init+0x10a>
 23f9838:	1c71      	adds	r1, r6, #1
 23f983a:	d130      	bne.n	23f989e <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23f983c:	2300      	movs	r3, #0
 23f983e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f9842:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f9846:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23f984a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23f984e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23f9852:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23f9856:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23f9858:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f985a:	ea03 0705 	and.w	r7, r3, r5
 23f985e:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23f9862:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f9864:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23f9868:	d2f9      	bcs.n	23f985e <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23f986a:	3b20      	subs	r3, #32
 23f986c:	f113 0f20 	cmn.w	r3, #32
 23f9870:	d1f2      	bne.n	23f9858 <AUDIO_SP_RXGDMA_Init+0xc8>
 23f9872:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f9876:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f987a:	7820      	ldrb	r0, [r4, #0]
 23f987c:	2201      	movs	r2, #1
 23f987e:	7861      	ldrb	r1, [r4, #1]
 23f9880:	4b18      	ldr	r3, [pc, #96]	; (23f98e4 <AUDIO_SP_RXGDMA_Init+0x154>)
 23f9882:	4798      	blx	r3

	return _TRUE;
 23f9884:	2001      	movs	r0, #1
}
 23f9886:	b003      	add	sp, #12
 23f9888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23f988c:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23f9890:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23f9892:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23f9894:	08b3      	lsrs	r3, r6, #2
 23f9896:	8523      	strh	r3, [r4, #40]	; 0x28
 23f9898:	e7b8      	b.n	23f980c <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f989a:	06eb      	lsls	r3, r5, #27
 23f989c:	d007      	beq.n	23f98ae <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f989e:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f98a2:	4435      	add	r5, r6
 23f98a4:	3d01      	subs	r5, #1
 23f98a6:	f025 051f 	bic.w	r5, r5, #31
 23f98aa:	3520      	adds	r5, #32
 23f98ac:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23f98ae:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23f98b0:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23f98b4:	4a0a      	ldr	r2, [pc, #40]	; (23f98e0 <AUDIO_SP_RXGDMA_Init+0x150>)
 23f98b6:	4437      	add	r7, r6
    while (op_size > 0) {
 23f98b8:	2d00      	cmp	r5, #0
 23f98ba:	eba7 0305 	sub.w	r3, r7, r5
 23f98be:	ddd8      	ble.n	23f9872 <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23f98c0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f98c4:	3d20      	subs	r5, #32
 23f98c6:	e7f7      	b.n	23f98b8 <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23f98c8:	2000      	movs	r0, #0
 23f98ca:	e7dc      	b.n	23f9886 <AUDIO_SP_RXGDMA_Init+0xf6>
 23f98cc:	023ffb3c 	.word	0x023ffb3c
 23f98d0:	023ffb48 	.word	0x023ffb48
 23f98d4:	1010c43d 	.word	0x1010c43d
 23f98d8:	10110ea1 	.word	0x10110ea1
 23f98dc:	1010bff9 	.word	0x1010bff9
 23f98e0:	e000ed00 	.word	0xe000ed00
 23f98e4:	1010bf91 	.word	0x1010bf91

023f98e8 <_ZnwjRKSt9nothrow_t>:
 23f98e8:	f7f3 bd93 	b.w	23ed412 <_Znwj>

023f98ec <_ZnajRKSt9nothrow_t>:
 23f98ec:	f7f3 bd93 	b.w	23ed416 <_Znaj>

023f98f0 <_ZSt19__throw_logic_errorPKc>:
 23f98f0:	b508      	push	{r3, lr}
 23f98f2:	f7fd fd83 	bl	23f73fc <abort>

023f98f6 <_ZSt20__throw_length_errorPKc>:
 23f98f6:	b508      	push	{r3, lr}
 23f98f8:	f7fd fd80 	bl	23f73fc <abort>

023f98fc <_ZSt24__throw_out_of_range_fmtPKcz>:
 23f98fc:	b40f      	push	{r0, r1, r2, r3}
 23f98fe:	b580      	push	{r7, lr}
 23f9900:	b084      	sub	sp, #16
 23f9902:	af00      	add	r7, sp, #0
 23f9904:	f107 0418 	add.w	r4, r7, #24
 23f9908:	f854 2b04 	ldr.w	r2, [r4], #4
 23f990c:	4610      	mov	r0, r2
 23f990e:	607a      	str	r2, [r7, #4]
 23f9910:	f7f3 fd5a 	bl	23ed3c8 <strlen>
 23f9914:	f200 2307 	addw	r3, r0, #519	; 0x207
 23f9918:	f500 7100 	add.w	r1, r0, #512	; 0x200
 23f991c:	687a      	ldr	r2, [r7, #4]
 23f991e:	f023 0307 	bic.w	r3, r3, #7
 23f9922:	60fc      	str	r4, [r7, #12]
 23f9924:	ebad 0d03 	sub.w	sp, sp, r3
 23f9928:	4623      	mov	r3, r4
 23f992a:	4668      	mov	r0, sp
 23f992c:	f000 f858 	bl	23f99e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 23f9930:	f7fd fd64 	bl	23f73fc <abort>

023f9934 <_ZSt25__throw_bad_function_callv>:
 23f9934:	b508      	push	{r3, lr}
 23f9936:	f7fd fd61 	bl	23f73fc <abort>
	...

023f993c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 23f993c:	b580      	push	{r7, lr}
 23f993e:	b09c      	sub	sp, #112	; 0x70
 23f9940:	4606      	mov	r6, r0
 23f9942:	460c      	mov	r4, r1
 23f9944:	2269      	movs	r2, #105	; 0x69
 23f9946:	af00      	add	r7, sp, #0
 23f9948:	1ba4      	subs	r4, r4, r6
 23f994a:	490e      	ldr	r1, [pc, #56]	; (23f9984 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 23f994c:	1d38      	adds	r0, r7, #4
 23f994e:	f001 fde6 	bl	23fb51e <memcpy>
 23f9952:	f104 0370 	add.w	r3, r4, #112	; 0x70
 23f9956:	2268      	movs	r2, #104	; 0x68
 23f9958:	1d39      	adds	r1, r7, #4
 23f995a:	f023 0307 	bic.w	r3, r3, #7
 23f995e:	ebad 0d03 	sub.w	sp, sp, r3
 23f9962:	466d      	mov	r5, sp
 23f9964:	4628      	mov	r0, r5
 23f9966:	f001 fdda 	bl	23fb51e <memcpy>
 23f996a:	4622      	mov	r2, r4
 23f996c:	4631      	mov	r1, r6
 23f996e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 23f9972:	f001 fdd4 	bl	23fb51e <memcpy>
 23f9976:	442c      	add	r4, r5
 23f9978:	2300      	movs	r3, #0
 23f997a:	4628      	mov	r0, r5
 23f997c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f9980:	f7ff ffb6 	bl	23f98f0 <_ZSt19__throw_logic_errorPKc>
 23f9984:	023ffb6c 	.word	0x023ffb6c

023f9988 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 23f9988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f998c:	af00      	add	r7, sp, #0
 23f998e:	b084      	sub	sp, #16
 23f9990:	f8df 8048 	ldr.w	r8, [pc, #72]	; 23f99dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 23f9994:	f04f 0c0a 	mov.w	ip, #10
 23f9998:	466d      	mov	r5, sp
 23f999a:	f105 040c 	add.w	r4, r5, #12
 23f999e:	4623      	mov	r3, r4
 23f99a0:	fbb2 f6fc 	udiv	r6, r2, ip
 23f99a4:	fb0c 2e16 	mls	lr, ip, r6, r2
 23f99a8:	f818 e00e 	ldrb.w	lr, [r8, lr]
 23f99ac:	f803 ed01 	strb.w	lr, [r3, #-1]!
 23f99b0:	4696      	mov	lr, r2
 23f99b2:	4632      	mov	r2, r6
 23f99b4:	f1be 0f09 	cmp.w	lr, #9
 23f99b8:	d8f2      	bhi.n	23f99a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 23f99ba:	1ae4      	subs	r4, r4, r3
 23f99bc:	428c      	cmp	r4, r1
 23f99be:	d809      	bhi.n	23f99d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 23f99c0:	f1c4 030c 	rsb	r3, r4, #12
 23f99c4:	4622      	mov	r2, r4
 23f99c6:	18e9      	adds	r1, r5, r3
 23f99c8:	f001 fda9 	bl	23fb51e <memcpy>
 23f99cc:	4620      	mov	r0, r4
 23f99ce:	46bd      	mov	sp, r7
 23f99d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f99d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f99d8:	e7f8      	b.n	23f99cc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 23f99da:	bf00      	nop
 23f99dc:	023ffbd5 	.word	0x023ffbd5

023f99e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 23f99e0:	3901      	subs	r1, #1
 23f99e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f99e6:	4607      	mov	r7, r0
 23f99e8:	4615      	mov	r5, r2
 23f99ea:	eb00 0801 	add.w	r8, r0, r1
 23f99ee:	4604      	mov	r4, r0
 23f99f0:	782a      	ldrb	r2, [r5, #0]
 23f99f2:	b392      	cbz	r2, 23f9a5a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 23f99f4:	4544      	cmp	r4, r8
 23f99f6:	d22a      	bcs.n	23f9a4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f99f8:	2a25      	cmp	r2, #37	; 0x25
 23f99fa:	d107      	bne.n	23f9a0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f99fc:	786a      	ldrb	r2, [r5, #1]
 23f99fe:	2a73      	cmp	r2, #115	; 0x73
 23f9a00:	d009      	beq.n	23f9a16 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 23f9a02:	2a7a      	cmp	r2, #122	; 0x7a
 23f9a04:	d012      	beq.n	23f9a2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 23f9a06:	2a25      	cmp	r2, #37	; 0x25
 23f9a08:	d100      	bne.n	23f9a0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9a0a:	3501      	adds	r5, #1
 23f9a0c:	f815 2b01 	ldrb.w	r2, [r5], #1
 23f9a10:	f804 2b01 	strb.w	r2, [r4], #1
 23f9a14:	e7ec      	b.n	23f99f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9a16:	f853 2b04 	ldr.w	r2, [r3], #4
 23f9a1a:	3a01      	subs	r2, #1
 23f9a1c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 23f9a20:	b1c9      	cbz	r1, 23f9a56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 23f9a22:	4544      	cmp	r4, r8
 23f9a24:	d013      	beq.n	23f9a4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f9a26:	f804 1b01 	strb.w	r1, [r4], #1
 23f9a2a:	e7f7      	b.n	23f9a1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 23f9a2c:	78aa      	ldrb	r2, [r5, #2]
 23f9a2e:	2a75      	cmp	r2, #117	; 0x75
 23f9a30:	d1ec      	bne.n	23f9a0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9a32:	461e      	mov	r6, r3
 23f9a34:	eba8 0104 	sub.w	r1, r8, r4
 23f9a38:	4620      	mov	r0, r4
 23f9a3a:	f856 2b04 	ldr.w	r2, [r6], #4
 23f9a3e:	f7ff ffa3 	bl	23f9988 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 23f9a42:	2800      	cmp	r0, #0
 23f9a44:	dd03      	ble.n	23f9a4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f9a46:	4404      	add	r4, r0
 23f9a48:	3503      	adds	r5, #3
 23f9a4a:	4633      	mov	r3, r6
 23f9a4c:	e7d0      	b.n	23f99f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9a4e:	4621      	mov	r1, r4
 23f9a50:	4638      	mov	r0, r7
 23f9a52:	f7ff ff73 	bl	23f993c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 23f9a56:	3502      	adds	r5, #2
 23f9a58:	e7ca      	b.n	23f99f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9a5a:	1be0      	subs	r0, r4, r7
 23f9a5c:	7022      	strb	r2, [r4, #0]
 23f9a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9a62:	0000      	movs	r0, r0
 23f9a64:	0000      	movs	r0, r0
	...

023f9a68 <cos>:
 23f9a68:	ec51 0b10 	vmov	r0, r1, d0
 23f9a6c:	4a26      	ldr	r2, [pc, #152]	; (23f9b08 <cos+0xa0>)
 23f9a6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9a72:	4293      	cmp	r3, r2
 23f9a74:	dd20      	ble.n	23f9ab8 <cos+0x50>
 23f9a76:	4a25      	ldr	r2, [pc, #148]	; (23f9b0c <cos+0xa4>)
 23f9a78:	4293      	cmp	r3, r2
 23f9a7a:	b500      	push	{lr}
 23f9a7c:	b085      	sub	sp, #20
 23f9a7e:	dd09      	ble.n	23f9a94 <cos+0x2c>
 23f9a80:	ee10 2a10 	vmov	r2, s0
 23f9a84:	460b      	mov	r3, r1
 23f9a86:	f7f2 fd97 	bl	23ec5b8 <__aeabi_dsub>
 23f9a8a:	ec41 0b10 	vmov	d0, r0, r1
 23f9a8e:	b005      	add	sp, #20
 23f9a90:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9a94:	4668      	mov	r0, sp
 23f9a96:	f000 fa7b 	bl	23f9f90 <__ieee754_rem_pio2>
 23f9a9a:	f000 0003 	and.w	r0, r0, #3
 23f9a9e:	2801      	cmp	r0, #1
 23f9aa0:	d00e      	beq.n	23f9ac0 <cos+0x58>
 23f9aa2:	2802      	cmp	r0, #2
 23f9aa4:	d022      	beq.n	23f9aec <cos+0x84>
 23f9aa6:	b1d0      	cbz	r0, 23f9ade <cos+0x76>
 23f9aa8:	2001      	movs	r0, #1
 23f9aaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9aae:	ed9d 0b00 	vldr	d0, [sp]
 23f9ab2:	f001 fbb1 	bl	23fb218 <__kernel_sin>
 23f9ab6:	e7ea      	b.n	23f9a8e <cos+0x26>
 23f9ab8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23f9b00 <cos+0x98>
 23f9abc:	f000 be48 	b.w	23fa750 <__kernel_cos>
 23f9ac0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9ac4:	ed9d 0b00 	vldr	d0, [sp]
 23f9ac8:	f001 fba6 	bl	23fb218 <__kernel_sin>
 23f9acc:	ec53 2b10 	vmov	r2, r3, d0
 23f9ad0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f9ad4:	ee00 3a90 	vmov	s1, r3
 23f9ad8:	b005      	add	sp, #20
 23f9ada:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9ade:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9ae2:	ed9d 0b00 	vldr	d0, [sp]
 23f9ae6:	f000 fe33 	bl	23fa750 <__kernel_cos>
 23f9aea:	e7d0      	b.n	23f9a8e <cos+0x26>
 23f9aec:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9af0:	ed9d 0b00 	vldr	d0, [sp]
 23f9af4:	f000 fe2c 	bl	23fa750 <__kernel_cos>
 23f9af8:	e7e8      	b.n	23f9acc <cos+0x64>
 23f9afa:	bf00      	nop
 23f9afc:	f3af 8000 	nop.w
	...
 23f9b08:	3fe921fb 	.word	0x3fe921fb
 23f9b0c:	7fefffff 	.word	0x7fefffff

023f9b10 <fabs>:
 23f9b10:	ec51 0b10 	vmov	r0, r1, d0
 23f9b14:	ee10 2a10 	vmov	r2, s0
 23f9b18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9b1c:	ec43 2b10 	vmov	d0, r2, r3
 23f9b20:	4770      	bx	lr
 23f9b22:	bf00      	nop
 23f9b24:	0000      	movs	r0, r0
	...

023f9b28 <floor>:
 23f9b28:	ec51 0b10 	vmov	r0, r1, d0
 23f9b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9b2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f9b32:	460c      	mov	r4, r1
 23f9b34:	ee10 6a10 	vmov	r6, s0
 23f9b38:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23f9b3c:	2d13      	cmp	r5, #19
 23f9b3e:	dc30      	bgt.n	23f9ba2 <floor+0x7a>
 23f9b40:	2d00      	cmp	r5, #0
 23f9b42:	db1e      	blt.n	23f9b82 <floor+0x5a>
 23f9b44:	4f38      	ldr	r7, [pc, #224]	; (23f9c28 <floor+0x100>)
 23f9b46:	412f      	asrs	r7, r5
 23f9b48:	ea01 0307 	and.w	r3, r1, r7
 23f9b4c:	4303      	orrs	r3, r0
 23f9b4e:	d02d      	beq.n	23f9bac <floor+0x84>
 23f9b50:	a333      	add	r3, pc, #204	; (adr r3, 23f9c20 <floor+0xf8>)
 23f9b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b56:	f7f2 fd31 	bl	23ec5bc <__adddf3>
 23f9b5a:	2200      	movs	r2, #0
 23f9b5c:	2300      	movs	r3, #0
 23f9b5e:	f7f3 f973 	bl	23ece48 <__aeabi_dcmpgt>
 23f9b62:	b148      	cbz	r0, 23f9b78 <floor+0x50>
 23f9b64:	2c00      	cmp	r4, #0
 23f9b66:	da04      	bge.n	23f9b72 <floor+0x4a>
 23f9b68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23f9b6c:	fa43 f505 	asr.w	r5, r3, r5
 23f9b70:	442c      	add	r4, r5
 23f9b72:	ea24 0407 	bic.w	r4, r4, r7
 23f9b76:	2600      	movs	r6, #0
 23f9b78:	4623      	mov	r3, r4
 23f9b7a:	4632      	mov	r2, r6
 23f9b7c:	ec43 2b10 	vmov	d0, r2, r3
 23f9b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9b82:	a327      	add	r3, pc, #156	; (adr r3, 23f9c20 <floor+0xf8>)
 23f9b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b88:	f7f2 fd18 	bl	23ec5bc <__adddf3>
 23f9b8c:	2200      	movs	r2, #0
 23f9b8e:	2300      	movs	r3, #0
 23f9b90:	f7f3 f95a 	bl	23ece48 <__aeabi_dcmpgt>
 23f9b94:	2800      	cmp	r0, #0
 23f9b96:	d0ef      	beq.n	23f9b78 <floor+0x50>
 23f9b98:	2c00      	cmp	r4, #0
 23f9b9a:	db29      	blt.n	23f9bf0 <floor+0xc8>
 23f9b9c:	2600      	movs	r6, #0
 23f9b9e:	4634      	mov	r4, r6
 23f9ba0:	e7ea      	b.n	23f9b78 <floor+0x50>
 23f9ba2:	2d33      	cmp	r5, #51	; 0x33
 23f9ba4:	dd05      	ble.n	23f9bb2 <floor+0x8a>
 23f9ba6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23f9baa:	d019      	beq.n	23f9be0 <floor+0xb8>
 23f9bac:	ec41 0b10 	vmov	d0, r0, r1
 23f9bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9bb2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23f9bb6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23f9bba:	40df      	lsrs	r7, r3
 23f9bbc:	4207      	tst	r7, r0
 23f9bbe:	d0f5      	beq.n	23f9bac <floor+0x84>
 23f9bc0:	a317      	add	r3, pc, #92	; (adr r3, 23f9c20 <floor+0xf8>)
 23f9bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9bc6:	f7f2 fcf9 	bl	23ec5bc <__adddf3>
 23f9bca:	2200      	movs	r2, #0
 23f9bcc:	2300      	movs	r3, #0
 23f9bce:	f7f3 f93b 	bl	23ece48 <__aeabi_dcmpgt>
 23f9bd2:	2800      	cmp	r0, #0
 23f9bd4:	d0d0      	beq.n	23f9b78 <floor+0x50>
 23f9bd6:	2c00      	cmp	r4, #0
 23f9bd8:	db13      	blt.n	23f9c02 <floor+0xda>
 23f9bda:	ea26 0607 	bic.w	r6, r6, r7
 23f9bde:	e7cb      	b.n	23f9b78 <floor+0x50>
 23f9be0:	ee10 2a10 	vmov	r2, s0
 23f9be4:	460b      	mov	r3, r1
 23f9be6:	f7f2 fce9 	bl	23ec5bc <__adddf3>
 23f9bea:	ec41 0b10 	vmov	d0, r0, r1
 23f9bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9bf0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23f9bf4:	4a0d      	ldr	r2, [pc, #52]	; (23f9c2c <floor+0x104>)
 23f9bf6:	4333      	orrs	r3, r6
 23f9bf8:	2600      	movs	r6, #0
 23f9bfa:	42b3      	cmp	r3, r6
 23f9bfc:	bf18      	it	ne
 23f9bfe:	4614      	movne	r4, r2
 23f9c00:	e7ba      	b.n	23f9b78 <floor+0x50>
 23f9c02:	2d14      	cmp	r5, #20
 23f9c04:	d008      	beq.n	23f9c18 <floor+0xf0>
 23f9c06:	2301      	movs	r3, #1
 23f9c08:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23f9c0c:	fa03 f505 	lsl.w	r5, r3, r5
 23f9c10:	19ae      	adds	r6, r5, r6
 23f9c12:	bf28      	it	cs
 23f9c14:	18e4      	addcs	r4, r4, r3
 23f9c16:	e7e0      	b.n	23f9bda <floor+0xb2>
 23f9c18:	3401      	adds	r4, #1
 23f9c1a:	e7de      	b.n	23f9bda <floor+0xb2>
 23f9c1c:	f3af 8000 	nop.w
 23f9c20:	8800759c 	.word	0x8800759c
 23f9c24:	7e37e43c 	.word	0x7e37e43c
 23f9c28:	000fffff 	.word	0x000fffff
 23f9c2c:	bff00000 	.word	0xbff00000

023f9c30 <frexp>:
 23f9c30:	b538      	push	{r3, r4, r5, lr}
 23f9c32:	ec53 2b10 	vmov	r2, r3, d0
 23f9c36:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23f9c3a:	4d15      	ldr	r5, [pc, #84]	; (23f9c90 <frexp+0x60>)
 23f9c3c:	4604      	mov	r4, r0
 23f9c3e:	2000      	movs	r0, #0
 23f9c40:	42a9      	cmp	r1, r5
 23f9c42:	6020      	str	r0, [r4, #0]
 23f9c44:	dc20      	bgt.n	23f9c88 <frexp+0x58>
 23f9c46:	ee10 5a10 	vmov	r5, s0
 23f9c4a:	430d      	orrs	r5, r1
 23f9c4c:	d01c      	beq.n	23f9c88 <frexp+0x58>
 23f9c4e:	4d11      	ldr	r5, [pc, #68]	; (23f9c94 <frexp+0x64>)
 23f9c50:	469c      	mov	ip, r3
 23f9c52:	401d      	ands	r5, r3
 23f9c54:	b965      	cbnz	r5, 23f9c70 <frexp+0x40>
 23f9c56:	4619      	mov	r1, r3
 23f9c58:	2200      	movs	r2, #0
 23f9c5a:	ee10 0a10 	vmov	r0, s0
 23f9c5e:	4b0e      	ldr	r3, [pc, #56]	; (23f9c98 <frexp+0x68>)
 23f9c60:	f7f2 fe62 	bl	23ec928 <__aeabi_dmul>
 23f9c64:	4602      	mov	r2, r0
 23f9c66:	468c      	mov	ip, r1
 23f9c68:	f06f 0035 	mvn.w	r0, #53	; 0x35
 23f9c6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9c70:	1509      	asrs	r1, r1, #20
 23f9c72:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 23f9c76:	4401      	add	r1, r0
 23f9c78:	6021      	str	r1, [r4, #0]
 23f9c7a:	4908      	ldr	r1, [pc, #32]	; (23f9c9c <frexp+0x6c>)
 23f9c7c:	ea0c 0101 	and.w	r1, ip, r1
 23f9c80:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 23f9c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23f9c88:	ec43 2b10 	vmov	d0, r2, r3
 23f9c8c:	bd38      	pop	{r3, r4, r5, pc}
 23f9c8e:	bf00      	nop
 23f9c90:	7fefffff 	.word	0x7fefffff
 23f9c94:	7ff00000 	.word	0x7ff00000
 23f9c98:	43500000 	.word	0x43500000
 23f9c9c:	800fffff 	.word	0x800fffff

023f9ca0 <round>:
 23f9ca0:	b538      	push	{r3, r4, r5, lr}
 23f9ca2:	ec53 2b10 	vmov	r2, r3, d0
 23f9ca6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23f9caa:	461c      	mov	r4, r3
 23f9cac:	ee10 0a10 	vmov	r0, s0
 23f9cb0:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23f9cb4:	2913      	cmp	r1, #19
 23f9cb6:	dc1c      	bgt.n	23f9cf2 <round+0x52>
 23f9cb8:	2900      	cmp	r1, #0
 23f9cba:	db13      	blt.n	23f9ce4 <round+0x44>
 23f9cbc:	4d20      	ldr	r5, [pc, #128]	; (23f9d40 <round+0xa0>)
 23f9cbe:	fa45 fc01 	asr.w	ip, r5, r1
 23f9cc2:	ea03 050c 	and.w	r5, r3, ip
 23f9cc6:	4328      	orrs	r0, r5
 23f9cc8:	d018      	beq.n	23f9cfc <round+0x5c>
 23f9cca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 23f9cce:	2000      	movs	r0, #0
 23f9cd0:	fa43 f101 	asr.w	r1, r3, r1
 23f9cd4:	440c      	add	r4, r1
 23f9cd6:	ea24 040c 	bic.w	r4, r4, ip
 23f9cda:	4623      	mov	r3, r4
 23f9cdc:	4602      	mov	r2, r0
 23f9cde:	ec43 2b10 	vmov	d0, r2, r3
 23f9ce2:	bd38      	pop	{r3, r4, r5, pc}
 23f9ce4:	3101      	adds	r1, #1
 23f9ce6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 23f9cea:	d024      	beq.n	23f9d36 <round+0x96>
 23f9cec:	461c      	mov	r4, r3
 23f9cee:	2000      	movs	r0, #0
 23f9cf0:	e7f3      	b.n	23f9cda <round+0x3a>
 23f9cf2:	2933      	cmp	r1, #51	; 0x33
 23f9cf4:	dd05      	ble.n	23f9d02 <round+0x62>
 23f9cf6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23f9cfa:	d016      	beq.n	23f9d2a <round+0x8a>
 23f9cfc:	ec43 2b10 	vmov	d0, r2, r3
 23f9d00:	bd38      	pop	{r3, r4, r5, pc}
 23f9d02:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23f9d06:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23f9d0a:	fa25 fc0c 	lsr.w	ip, r5, ip
 23f9d0e:	ea12 0f0c 	tst.w	r2, ip
 23f9d12:	d0f3      	beq.n	23f9cfc <round+0x5c>
 23f9d14:	2301      	movs	r3, #1
 23f9d16:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 23f9d1a:	fa03 f101 	lsl.w	r1, r3, r1
 23f9d1e:	1840      	adds	r0, r0, r1
 23f9d20:	bf28      	it	cs
 23f9d22:	18e4      	addcs	r4, r4, r3
 23f9d24:	ea20 000c 	bic.w	r0, r0, ip
 23f9d28:	e7d7      	b.n	23f9cda <round+0x3a>
 23f9d2a:	4619      	mov	r1, r3
 23f9d2c:	f7f2 fc46 	bl	23ec5bc <__adddf3>
 23f9d30:	ec41 0b10 	vmov	d0, r0, r1
 23f9d34:	bd38      	pop	{r3, r4, r5, pc}
 23f9d36:	4c03      	ldr	r4, [pc, #12]	; (23f9d44 <round+0xa4>)
 23f9d38:	2000      	movs	r0, #0
 23f9d3a:	431c      	orrs	r4, r3
 23f9d3c:	e7cd      	b.n	23f9cda <round+0x3a>
 23f9d3e:	bf00      	nop
 23f9d40:	000fffff 	.word	0x000fffff
 23f9d44:	3ff00000 	.word	0x3ff00000

023f9d48 <sin>:
 23f9d48:	ec51 0b10 	vmov	r0, r1, d0
 23f9d4c:	4a26      	ldr	r2, [pc, #152]	; (23f9de8 <sin+0xa0>)
 23f9d4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9d52:	4293      	cmp	r3, r2
 23f9d54:	dd27      	ble.n	23f9da6 <sin+0x5e>
 23f9d56:	4a25      	ldr	r2, [pc, #148]	; (23f9dec <sin+0xa4>)
 23f9d58:	4293      	cmp	r3, r2
 23f9d5a:	b500      	push	{lr}
 23f9d5c:	b085      	sub	sp, #20
 23f9d5e:	dd09      	ble.n	23f9d74 <sin+0x2c>
 23f9d60:	ee10 2a10 	vmov	r2, s0
 23f9d64:	460b      	mov	r3, r1
 23f9d66:	f7f2 fc27 	bl	23ec5b8 <__aeabi_dsub>
 23f9d6a:	ec41 0b10 	vmov	d0, r0, r1
 23f9d6e:	b005      	add	sp, #20
 23f9d70:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9d74:	4668      	mov	r0, sp
 23f9d76:	f000 f90b 	bl	23f9f90 <__ieee754_rem_pio2>
 23f9d7a:	f000 0003 	and.w	r0, r0, #3
 23f9d7e:	2801      	cmp	r0, #1
 23f9d80:	d016      	beq.n	23f9db0 <sin+0x68>
 23f9d82:	2802      	cmp	r0, #2
 23f9d84:	d023      	beq.n	23f9dce <sin+0x86>
 23f9d86:	b1d0      	cbz	r0, 23f9dbe <sin+0x76>
 23f9d88:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9d8c:	ed9d 0b00 	vldr	d0, [sp]
 23f9d90:	f000 fcde 	bl	23fa750 <__kernel_cos>
 23f9d94:	ec53 2b10 	vmov	r2, r3, d0
 23f9d98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f9d9c:	ee00 3a90 	vmov	s1, r3
 23f9da0:	b005      	add	sp, #20
 23f9da2:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9da6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23f9de0 <sin+0x98>
 23f9daa:	2000      	movs	r0, #0
 23f9dac:	f001 ba34 	b.w	23fb218 <__kernel_sin>
 23f9db0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9db4:	ed9d 0b00 	vldr	d0, [sp]
 23f9db8:	f000 fcca 	bl	23fa750 <__kernel_cos>
 23f9dbc:	e7d7      	b.n	23f9d6e <sin+0x26>
 23f9dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9dc2:	ed9d 0b00 	vldr	d0, [sp]
 23f9dc6:	2001      	movs	r0, #1
 23f9dc8:	f001 fa26 	bl	23fb218 <__kernel_sin>
 23f9dcc:	e7cf      	b.n	23f9d6e <sin+0x26>
 23f9dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9dd2:	ed9d 0b00 	vldr	d0, [sp]
 23f9dd6:	2001      	movs	r0, #1
 23f9dd8:	f001 fa1e 	bl	23fb218 <__kernel_sin>
 23f9ddc:	e7da      	b.n	23f9d94 <sin+0x4c>
 23f9dde:	bf00      	nop
	...
 23f9de8:	3fe921fb 	.word	0x3fe921fb
 23f9dec:	7fefffff 	.word	0x7fefffff

023f9df0 <frexpf>:
 23f9df0:	2300      	movs	r3, #0
 23f9df2:	ee10 2a10 	vmov	r2, s0
 23f9df6:	ee10 1a10 	vmov	r1, s0
 23f9dfa:	6003      	str	r3, [r0, #0]
 23f9dfc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 23f9e00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 23f9e04:	da1c      	bge.n	23f9e40 <frexpf+0x50>
 23f9e06:	fab3 fc83 	clz	ip, r3
 23f9e0a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 23f9e0e:	b1bb      	cbz	r3, 23f9e40 <frexpf+0x50>
 23f9e10:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 23f9e14:	d109      	bne.n	23f9e2a <frexpf+0x3a>
 23f9e16:	eddf 7a0c 	vldr	s15, [pc, #48]	; 23f9e48 <frexpf+0x58>
 23f9e1a:	f06f 0c18 	mvn.w	ip, #24
 23f9e1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 23f9e22:	ee17 1a90 	vmov	r1, s15
 23f9e26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9e2a:	15db      	asrs	r3, r3, #23
 23f9e2c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 23f9e30:	3b7e      	subs	r3, #126	; 0x7e
 23f9e32:	f041 527c 	orr.w	r2, r1, #1056964608	; 0x3f000000
 23f9e36:	4463      	add	r3, ip
 23f9e38:	ee00 2a10 	vmov	s0, r2
 23f9e3c:	6003      	str	r3, [r0, #0]
 23f9e3e:	4770      	bx	lr
 23f9e40:	ee00 2a10 	vmov	s0, r2
 23f9e44:	4770      	bx	lr
 23f9e46:	bf00      	nop
 23f9e48:	4c000000 	.word	0x4c000000

023f9e4c <sqrt>:
 23f9e4c:	b538      	push	{r3, r4, r5, lr}
 23f9e4e:	ed2d 8b02 	vpush	{d8}
 23f9e52:	ec55 4b10 	vmov	r4, r5, d0
 23f9e56:	f000 fac1 	bl	23fa3dc <__ieee754_sqrt>
 23f9e5a:	4b18      	ldr	r3, [pc, #96]	; (23f9ebc <sqrt+0x70>)
 23f9e5c:	eeb0 8a40 	vmov.f32	s16, s0
 23f9e60:	eef0 8a60 	vmov.f32	s17, s1
 23f9e64:	f993 3000 	ldrsb.w	r3, [r3]
 23f9e68:	3301      	adds	r3, #1
 23f9e6a:	d00d      	beq.n	23f9e88 <sqrt+0x3c>
 23f9e6c:	4622      	mov	r2, r4
 23f9e6e:	462b      	mov	r3, r5
 23f9e70:	4620      	mov	r0, r4
 23f9e72:	4629      	mov	r1, r5
 23f9e74:	f7f2 fff2 	bl	23ece5c <__aeabi_dcmpun>
 23f9e78:	b930      	cbnz	r0, 23f9e88 <sqrt+0x3c>
 23f9e7a:	2200      	movs	r2, #0
 23f9e7c:	2300      	movs	r3, #0
 23f9e7e:	4620      	mov	r0, r4
 23f9e80:	4629      	mov	r1, r5
 23f9e82:	f7f2 ffc3 	bl	23ece0c <__aeabi_dcmplt>
 23f9e86:	b930      	cbnz	r0, 23f9e96 <sqrt+0x4a>
 23f9e88:	eeb0 0a48 	vmov.f32	s0, s16
 23f9e8c:	eef0 0a68 	vmov.f32	s1, s17
 23f9e90:	ecbd 8b02 	vpop	{d8}
 23f9e94:	bd38      	pop	{r3, r4, r5, pc}
 23f9e96:	f7fd facd 	bl	23f7434 <__errno>
 23f9e9a:	2200      	movs	r2, #0
 23f9e9c:	2300      	movs	r3, #0
 23f9e9e:	2121      	movs	r1, #33	; 0x21
 23f9ea0:	6001      	str	r1, [r0, #0]
 23f9ea2:	4610      	mov	r0, r2
 23f9ea4:	4619      	mov	r1, r3
 23f9ea6:	f7f2 fe69 	bl	23ecb7c <__aeabi_ddiv>
 23f9eaa:	ec41 0b18 	vmov	d8, r0, r1
 23f9eae:	eeb0 0a48 	vmov.f32	s0, s16
 23f9eb2:	eef0 0a68 	vmov.f32	s1, s17
 23f9eb6:	ecbd 8b02 	vpop	{d8}
 23f9eba:	bd38      	pop	{r3, r4, r5, pc}
 23f9ebc:	10079c08 	.word	0x10079c08

023f9ec0 <expf>:
 23f9ec0:	b508      	push	{r3, lr}
 23f9ec2:	ed2d 8b02 	vpush	{d8}
 23f9ec6:	eeb0 8a40 	vmov.f32	s16, s0
 23f9eca:	f000 fb49 	bl	23fa560 <__ieee754_expf>
 23f9ece:	4b16      	ldr	r3, [pc, #88]	; (23f9f28 <expf+0x68>)
 23f9ed0:	eef0 8a40 	vmov.f32	s17, s0
 23f9ed4:	f993 3000 	ldrsb.w	r3, [r3]
 23f9ed8:	3301      	adds	r3, #1
 23f9eda:	d012      	beq.n	23f9f02 <expf+0x42>
 23f9edc:	eeb0 0a48 	vmov.f32	s0, s16
 23f9ee0:	f001 faf6 	bl	23fb4d0 <finitef>
 23f9ee4:	b168      	cbz	r0, 23f9f02 <expf+0x42>
 23f9ee6:	eddf 7a11 	vldr	s15, [pc, #68]	; 23f9f2c <expf+0x6c>
 23f9eea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f9eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9ef2:	dc12      	bgt.n	23f9f1a <expf+0x5a>
 23f9ef4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23f9f30 <expf+0x70>
 23f9ef8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f9efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f00:	d404      	bmi.n	23f9f0c <expf+0x4c>
 23f9f02:	eeb0 0a68 	vmov.f32	s0, s17
 23f9f06:	ecbd 8b02 	vpop	{d8}
 23f9f0a:	bd08      	pop	{r3, pc}
 23f9f0c:	f7fd fa92 	bl	23f7434 <__errno>
 23f9f10:	2322      	movs	r3, #34	; 0x22
 23f9f12:	eddf 8a08 	vldr	s17, [pc, #32]	; 23f9f34 <expf+0x74>
 23f9f16:	6003      	str	r3, [r0, #0]
 23f9f18:	e7f3      	b.n	23f9f02 <expf+0x42>
 23f9f1a:	f7fd fa8b 	bl	23f7434 <__errno>
 23f9f1e:	2322      	movs	r3, #34	; 0x22
 23f9f20:	eddf 8a05 	vldr	s17, [pc, #20]	; 23f9f38 <expf+0x78>
 23f9f24:	6003      	str	r3, [r0, #0]
 23f9f26:	e7ec      	b.n	23f9f02 <expf+0x42>
 23f9f28:	10079c08 	.word	0x10079c08
 23f9f2c:	42b17180 	.word	0x42b17180
 23f9f30:	c2cff1b5 	.word	0xc2cff1b5
 23f9f34:	00000000 	.word	0x00000000
 23f9f38:	7f800000 	.word	0x7f800000

023f9f3c <sqrtf>:
 23f9f3c:	b508      	push	{r3, lr}
 23f9f3e:	ed2d 8b02 	vpush	{d8}
 23f9f42:	eeb0 8a40 	vmov.f32	s16, s0
 23f9f46:	f000 fbfd 	bl	23fa744 <__ieee754_sqrtf>
 23f9f4a:	4b0e      	ldr	r3, [pc, #56]	; (23f9f84 <sqrtf+0x48>)
 23f9f4c:	f993 3000 	ldrsb.w	r3, [r3]
 23f9f50:	3301      	adds	r3, #1
 23f9f52:	d00b      	beq.n	23f9f6c <sqrtf+0x30>
 23f9f54:	eeb4 8a48 	vcmp.f32	s16, s16
 23f9f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f5c:	d606      	bvs.n	23f9f6c <sqrtf+0x30>
 23f9f5e:	eddf 8a0a 	vldr	s17, [pc, #40]	; 23f9f88 <sqrtf+0x4c>
 23f9f62:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23f9f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f6a:	d402      	bmi.n	23f9f72 <sqrtf+0x36>
 23f9f6c:	ecbd 8b02 	vpop	{d8}
 23f9f70:	bd08      	pop	{r3, pc}
 23f9f72:	f7fd fa5f 	bl	23f7434 <__errno>
 23f9f76:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 23f9f7a:	2321      	movs	r3, #33	; 0x21
 23f9f7c:	6003      	str	r3, [r0, #0]
 23f9f7e:	ecbd 8b02 	vpop	{d8}
 23f9f82:	bd08      	pop	{r3, pc}
 23f9f84:	10079c08 	.word	0x10079c08
	...

023f9f90 <__ieee754_rem_pio2>:
 23f9f90:	ec53 2b10 	vmov	r2, r3, d0
 23f9f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9f98:	4991      	ldr	r1, [pc, #580]	; (23fa1e0 <__ieee754_rem_pio2+0x250>)
 23f9f9a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23f9f9e:	4604      	mov	r4, r0
 23f9fa0:	428d      	cmp	r5, r1
 23f9fa2:	ed2d 8b06 	vpush	{d8-d10}
 23f9fa6:	b08b      	sub	sp, #44	; 0x2c
 23f9fa8:	f340 808c 	ble.w	23fa0c4 <__ieee754_rem_pio2+0x134>
 23f9fac:	498d      	ldr	r1, [pc, #564]	; (23fa1e4 <__ieee754_rem_pio2+0x254>)
 23f9fae:	461f      	mov	r7, r3
 23f9fb0:	428d      	cmp	r5, r1
 23f9fb2:	dc2b      	bgt.n	23fa00c <__ieee754_rem_pio2+0x7c>
 23f9fb4:	2f00      	cmp	r7, #0
 23f9fb6:	4619      	mov	r1, r3
 23f9fb8:	ee10 0a10 	vmov	r0, s0
 23f9fbc:	a37e      	add	r3, pc, #504	; (adr r3, 23fa1b8 <__ieee754_rem_pio2+0x228>)
 23f9fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9fc2:	f340 81b8 	ble.w	23fa336 <__ieee754_rem_pio2+0x3a6>
 23f9fc6:	f7f2 faf7 	bl	23ec5b8 <__aeabi_dsub>
 23f9fca:	4b87      	ldr	r3, [pc, #540]	; (23fa1e8 <__ieee754_rem_pio2+0x258>)
 23f9fcc:	4680      	mov	r8, r0
 23f9fce:	4689      	mov	r9, r1
 23f9fd0:	429d      	cmp	r5, r3
 23f9fd2:	f000 808f 	beq.w	23fa0f4 <__ieee754_rem_pio2+0x164>
 23f9fd6:	2601      	movs	r6, #1
 23f9fd8:	a379      	add	r3, pc, #484	; (adr r3, 23fa1c0 <__ieee754_rem_pio2+0x230>)
 23f9fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9fde:	f7f2 faeb 	bl	23ec5b8 <__aeabi_dsub>
 23f9fe2:	4602      	mov	r2, r0
 23f9fe4:	460b      	mov	r3, r1
 23f9fe6:	4640      	mov	r0, r8
 23f9fe8:	4649      	mov	r1, r9
 23f9fea:	e9c4 2300 	strd	r2, r3, [r4]
 23f9fee:	f7f2 fae3 	bl	23ec5b8 <__aeabi_dsub>
 23f9ff2:	a373      	add	r3, pc, #460	; (adr r3, 23fa1c0 <__ieee754_rem_pio2+0x230>)
 23f9ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9ff8:	f7f2 fade 	bl	23ec5b8 <__aeabi_dsub>
 23f9ffc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa000:	4630      	mov	r0, r6
 23fa002:	b00b      	add	sp, #44	; 0x2c
 23fa004:	ecbd 8b06 	vpop	{d8-d10}
 23fa008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa00c:	4977      	ldr	r1, [pc, #476]	; (23fa1ec <__ieee754_rem_pio2+0x25c>)
 23fa00e:	428d      	cmp	r5, r1
 23fa010:	f340 8092 	ble.w	23fa138 <__ieee754_rem_pio2+0x1a8>
 23fa014:	4976      	ldr	r1, [pc, #472]	; (23fa1f0 <__ieee754_rem_pio2+0x260>)
 23fa016:	428d      	cmp	r5, r1
 23fa018:	dc61      	bgt.n	23fa0de <__ieee754_rem_pio2+0x14e>
 23fa01a:	152e      	asrs	r6, r5, #20
 23fa01c:	ee10 0a10 	vmov	r0, s0
 23fa020:	4690      	mov	r8, r2
 23fa022:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23fa026:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23fa02a:	4689      	mov	r9, r1
 23fa02c:	f7f2 ff2c 	bl	23ece88 <__aeabi_d2iz>
 23fa030:	f7f2 fc10 	bl	23ec854 <__aeabi_i2d>
 23fa034:	4602      	mov	r2, r0
 23fa036:	460b      	mov	r3, r1
 23fa038:	4640      	mov	r0, r8
 23fa03a:	4649      	mov	r1, r9
 23fa03c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fa040:	f7f2 faba 	bl	23ec5b8 <__aeabi_dsub>
 23fa044:	2200      	movs	r2, #0
 23fa046:	4b6b      	ldr	r3, [pc, #428]	; (23fa1f4 <__ieee754_rem_pio2+0x264>)
 23fa048:	f7f2 fc6e 	bl	23ec928 <__aeabi_dmul>
 23fa04c:	4689      	mov	r9, r1
 23fa04e:	4680      	mov	r8, r0
 23fa050:	f7f2 ff1a 	bl	23ece88 <__aeabi_d2iz>
 23fa054:	4605      	mov	r5, r0
 23fa056:	f7f2 fbfd 	bl	23ec854 <__aeabi_i2d>
 23fa05a:	4602      	mov	r2, r0
 23fa05c:	460b      	mov	r3, r1
 23fa05e:	4640      	mov	r0, r8
 23fa060:	4649      	mov	r1, r9
 23fa062:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fa066:	f7f2 faa7 	bl	23ec5b8 <__aeabi_dsub>
 23fa06a:	2200      	movs	r2, #0
 23fa06c:	4b61      	ldr	r3, [pc, #388]	; (23fa1f4 <__ieee754_rem_pio2+0x264>)
 23fa06e:	f7f2 fc5b 	bl	23ec928 <__aeabi_dmul>
 23fa072:	4602      	mov	r2, r0
 23fa074:	460b      	mov	r3, r1
 23fa076:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fa07a:	2200      	movs	r2, #0
 23fa07c:	2300      	movs	r3, #0
 23fa07e:	f7f2 febb 	bl	23ecdf8 <__aeabi_dcmpeq>
 23fa082:	2800      	cmp	r0, #0
 23fa084:	f000 8155 	beq.w	23fa332 <__ieee754_rem_pio2+0x3a2>
 23fa088:	2d00      	cmp	r5, #0
 23fa08a:	bf0c      	ite	eq
 23fa08c:	2301      	moveq	r3, #1
 23fa08e:	2302      	movne	r3, #2
 23fa090:	4959      	ldr	r1, [pc, #356]	; (23fa1f8 <__ieee754_rem_pio2+0x268>)
 23fa092:	4632      	mov	r2, r6
 23fa094:	a804      	add	r0, sp, #16
 23fa096:	9101      	str	r1, [sp, #4]
 23fa098:	2102      	movs	r1, #2
 23fa09a:	9100      	str	r1, [sp, #0]
 23fa09c:	4621      	mov	r1, r4
 23fa09e:	f000 fc97 	bl	23fa9d0 <__kernel_rem_pio2>
 23fa0a2:	2f00      	cmp	r7, #0
 23fa0a4:	4606      	mov	r6, r0
 23fa0a6:	daab      	bge.n	23fa000 <__ieee754_rem_pio2+0x70>
 23fa0a8:	6861      	ldr	r1, [r4, #4]
 23fa0aa:	4246      	negs	r6, r0
 23fa0ac:	6822      	ldr	r2, [r4, #0]
 23fa0ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa0b2:	68e1      	ldr	r1, [r4, #12]
 23fa0b4:	e9c4 2300 	strd	r2, r3, [r4]
 23fa0b8:	68a2      	ldr	r2, [r4, #8]
 23fa0ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa0be:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fa0c2:	e79d      	b.n	23fa000 <__ieee754_rem_pio2+0x70>
 23fa0c4:	2000      	movs	r0, #0
 23fa0c6:	2100      	movs	r1, #0
 23fa0c8:	2600      	movs	r6, #0
 23fa0ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa0ce:	4630      	mov	r0, r6
 23fa0d0:	ed84 0b00 	vstr	d0, [r4]
 23fa0d4:	b00b      	add	sp, #44	; 0x2c
 23fa0d6:	ecbd 8b06 	vpop	{d8-d10}
 23fa0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa0de:	ee10 0a10 	vmov	r0, s0
 23fa0e2:	4619      	mov	r1, r3
 23fa0e4:	f7f2 fa68 	bl	23ec5b8 <__aeabi_dsub>
 23fa0e8:	2600      	movs	r6, #0
 23fa0ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa0ee:	e9c4 0100 	strd	r0, r1, [r4]
 23fa0f2:	e785      	b.n	23fa000 <__ieee754_rem_pio2+0x70>
 23fa0f4:	a334      	add	r3, pc, #208	; (adr r3, 23fa1c8 <__ieee754_rem_pio2+0x238>)
 23fa0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa0fa:	f7f2 fa5d 	bl	23ec5b8 <__aeabi_dsub>
 23fa0fe:	4680      	mov	r8, r0
 23fa100:	4689      	mov	r9, r1
 23fa102:	2601      	movs	r6, #1
 23fa104:	a332      	add	r3, pc, #200	; (adr r3, 23fa1d0 <__ieee754_rem_pio2+0x240>)
 23fa106:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa10a:	f7f2 fa55 	bl	23ec5b8 <__aeabi_dsub>
 23fa10e:	4602      	mov	r2, r0
 23fa110:	460b      	mov	r3, r1
 23fa112:	4640      	mov	r0, r8
 23fa114:	4649      	mov	r1, r9
 23fa116:	e9c4 2300 	strd	r2, r3, [r4]
 23fa11a:	f7f2 fa4d 	bl	23ec5b8 <__aeabi_dsub>
 23fa11e:	a32c      	add	r3, pc, #176	; (adr r3, 23fa1d0 <__ieee754_rem_pio2+0x240>)
 23fa120:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa124:	f7f2 fa48 	bl	23ec5b8 <__aeabi_dsub>
 23fa128:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa12c:	4630      	mov	r0, r6
 23fa12e:	b00b      	add	sp, #44	; 0x2c
 23fa130:	ecbd 8b06 	vpop	{d8-d10}
 23fa134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa138:	f7ff fcea 	bl	23f9b10 <fabs>
 23fa13c:	ee10 0a10 	vmov	r0, s0
 23fa140:	ec59 8b10 	vmov	r8, r9, d0
 23fa144:	a324      	add	r3, pc, #144	; (adr r3, 23fa1d8 <__ieee754_rem_pio2+0x248>)
 23fa146:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa14a:	4649      	mov	r1, r9
 23fa14c:	f7f2 fbec 	bl	23ec928 <__aeabi_dmul>
 23fa150:	2200      	movs	r2, #0
 23fa152:	4b2a      	ldr	r3, [pc, #168]	; (23fa1fc <__ieee754_rem_pio2+0x26c>)
 23fa154:	f7f2 fa32 	bl	23ec5bc <__adddf3>
 23fa158:	f7f2 fe96 	bl	23ece88 <__aeabi_d2iz>
 23fa15c:	4606      	mov	r6, r0
 23fa15e:	f7f2 fb79 	bl	23ec854 <__aeabi_i2d>
 23fa162:	4602      	mov	r2, r0
 23fa164:	460b      	mov	r3, r1
 23fa166:	ec43 2b18 	vmov	d8, r2, r3
 23fa16a:	a313      	add	r3, pc, #76	; (adr r3, 23fa1b8 <__ieee754_rem_pio2+0x228>)
 23fa16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa170:	f7f2 fbda 	bl	23ec928 <__aeabi_dmul>
 23fa174:	4602      	mov	r2, r0
 23fa176:	460b      	mov	r3, r1
 23fa178:	4640      	mov	r0, r8
 23fa17a:	4649      	mov	r1, r9
 23fa17c:	eeb0 9a48 	vmov.f32	s18, s16
 23fa180:	eef0 9a68 	vmov.f32	s19, s17
 23fa184:	f7f2 fa18 	bl	23ec5b8 <__aeabi_dsub>
 23fa188:	4682      	mov	sl, r0
 23fa18a:	468b      	mov	fp, r1
 23fa18c:	a30c      	add	r3, pc, #48	; (adr r3, 23fa1c0 <__ieee754_rem_pio2+0x230>)
 23fa18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa192:	ec51 0b18 	vmov	r0, r1, d8
 23fa196:	f7f2 fbc7 	bl	23ec928 <__aeabi_dmul>
 23fa19a:	2e1f      	cmp	r6, #31
 23fa19c:	ec41 0b18 	vmov	d8, r0, r1
 23fa1a0:	dc30      	bgt.n	23fa204 <__ieee754_rem_pio2+0x274>
 23fa1a2:	4b17      	ldr	r3, [pc, #92]	; (23fa200 <__ieee754_rem_pio2+0x270>)
 23fa1a4:	1e72      	subs	r2, r6, #1
 23fa1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fa1aa:	42ab      	cmp	r3, r5
 23fa1ac:	d02a      	beq.n	23fa204 <__ieee754_rem_pio2+0x274>
 23fa1ae:	4602      	mov	r2, r0
 23fa1b0:	460b      	mov	r3, r1
 23fa1b2:	e09d      	b.n	23fa2f0 <__ieee754_rem_pio2+0x360>
 23fa1b4:	f3af 8000 	nop.w
 23fa1b8:	54400000 	.word	0x54400000
 23fa1bc:	3ff921fb 	.word	0x3ff921fb
 23fa1c0:	1a626331 	.word	0x1a626331
 23fa1c4:	3dd0b461 	.word	0x3dd0b461
 23fa1c8:	1a600000 	.word	0x1a600000
 23fa1cc:	3dd0b461 	.word	0x3dd0b461
 23fa1d0:	2e037073 	.word	0x2e037073
 23fa1d4:	3ba3198a 	.word	0x3ba3198a
 23fa1d8:	6dc9c883 	.word	0x6dc9c883
 23fa1dc:	3fe45f30 	.word	0x3fe45f30
 23fa1e0:	3fe921fb 	.word	0x3fe921fb
 23fa1e4:	4002d97b 	.word	0x4002d97b
 23fa1e8:	3ff921fb 	.word	0x3ff921fb
 23fa1ec:	413921fb 	.word	0x413921fb
 23fa1f0:	7fefffff 	.word	0x7fefffff
 23fa1f4:	41700000 	.word	0x41700000
 23fa1f8:	023ffc60 	.word	0x023ffc60
 23fa1fc:	3fe00000 	.word	0x3fe00000
 23fa200:	023ffbe0 	.word	0x023ffbe0
 23fa204:	152b      	asrs	r3, r5, #20
 23fa206:	4650      	mov	r0, sl
 23fa208:	4659      	mov	r1, fp
 23fa20a:	9303      	str	r3, [sp, #12]
 23fa20c:	ec53 2b18 	vmov	r2, r3, d8
 23fa210:	f7f2 f9d2 	bl	23ec5b8 <__aeabi_dsub>
 23fa214:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fa218:	4680      	mov	r8, r0
 23fa21a:	4689      	mov	r9, r1
 23fa21c:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fa220:	2d10      	cmp	r5, #16
 23fa222:	dd6b      	ble.n	23fa2fc <__ieee754_rem_pio2+0x36c>
 23fa224:	a364      	add	r3, pc, #400	; (adr r3, 23fa3b8 <__ieee754_rem_pio2+0x428>)
 23fa226:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa22a:	ec51 0b19 	vmov	r0, r1, d9
 23fa22e:	f7f2 fb7b 	bl	23ec928 <__aeabi_dmul>
 23fa232:	4680      	mov	r8, r0
 23fa234:	4689      	mov	r9, r1
 23fa236:	4650      	mov	r0, sl
 23fa238:	4642      	mov	r2, r8
 23fa23a:	4659      	mov	r1, fp
 23fa23c:	464b      	mov	r3, r9
 23fa23e:	f7f2 f9bb 	bl	23ec5b8 <__aeabi_dsub>
 23fa242:	4602      	mov	r2, r0
 23fa244:	460b      	mov	r3, r1
 23fa246:	4650      	mov	r0, sl
 23fa248:	4659      	mov	r1, fp
 23fa24a:	4692      	mov	sl, r2
 23fa24c:	469b      	mov	fp, r3
 23fa24e:	ec43 2b1a 	vmov	d10, r2, r3
 23fa252:	f7f2 f9b1 	bl	23ec5b8 <__aeabi_dsub>
 23fa256:	4642      	mov	r2, r8
 23fa258:	464b      	mov	r3, r9
 23fa25a:	f7f2 f9ad 	bl	23ec5b8 <__aeabi_dsub>
 23fa25e:	4680      	mov	r8, r0
 23fa260:	4689      	mov	r9, r1
 23fa262:	a357      	add	r3, pc, #348	; (adr r3, 23fa3c0 <__ieee754_rem_pio2+0x430>)
 23fa264:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa268:	ec51 0b19 	vmov	r0, r1, d9
 23fa26c:	f7f2 fb5c 	bl	23ec928 <__aeabi_dmul>
 23fa270:	4642      	mov	r2, r8
 23fa272:	464b      	mov	r3, r9
 23fa274:	f7f2 f9a0 	bl	23ec5b8 <__aeabi_dsub>
 23fa278:	4602      	mov	r2, r0
 23fa27a:	460b      	mov	r3, r1
 23fa27c:	4650      	mov	r0, sl
 23fa27e:	4659      	mov	r1, fp
 23fa280:	ec43 2b18 	vmov	d8, r2, r3
 23fa284:	f7f2 f998 	bl	23ec5b8 <__aeabi_dsub>
 23fa288:	9a03      	ldr	r2, [sp, #12]
 23fa28a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fa28e:	4680      	mov	r8, r0
 23fa290:	4689      	mov	r9, r1
 23fa292:	1ad3      	subs	r3, r2, r3
 23fa294:	2b31      	cmp	r3, #49	; 0x31
 23fa296:	dd31      	ble.n	23fa2fc <__ieee754_rem_pio2+0x36c>
 23fa298:	a34c      	add	r3, pc, #304	; (adr r3, 23fa3cc <__ieee754_rem_pio2+0x43c>)
 23fa29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa29e:	ec51 0b19 	vmov	r0, r1, d9
 23fa2a2:	f7f2 fb41 	bl	23ec928 <__aeabi_dmul>
 23fa2a6:	4680      	mov	r8, r0
 23fa2a8:	4689      	mov	r9, r1
 23fa2aa:	4642      	mov	r2, r8
 23fa2ac:	464b      	mov	r3, r9
 23fa2ae:	ec51 0b1a 	vmov	r0, r1, d10
 23fa2b2:	f7f2 f981 	bl	23ec5b8 <__aeabi_dsub>
 23fa2b6:	4682      	mov	sl, r0
 23fa2b8:	468b      	mov	fp, r1
 23fa2ba:	4652      	mov	r2, sl
 23fa2bc:	465b      	mov	r3, fp
 23fa2be:	ec51 0b1a 	vmov	r0, r1, d10
 23fa2c2:	f7f2 f979 	bl	23ec5b8 <__aeabi_dsub>
 23fa2c6:	4642      	mov	r2, r8
 23fa2c8:	464b      	mov	r3, r9
 23fa2ca:	f7f2 f975 	bl	23ec5b8 <__aeabi_dsub>
 23fa2ce:	4680      	mov	r8, r0
 23fa2d0:	4689      	mov	r9, r1
 23fa2d2:	a340      	add	r3, pc, #256	; (adr r3, 23fa3d4 <__ieee754_rem_pio2+0x444>)
 23fa2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa2d8:	ec51 0b19 	vmov	r0, r1, d9
 23fa2dc:	f7f2 fb24 	bl	23ec928 <__aeabi_dmul>
 23fa2e0:	4642      	mov	r2, r8
 23fa2e2:	464b      	mov	r3, r9
 23fa2e4:	f7f2 f968 	bl	23ec5b8 <__aeabi_dsub>
 23fa2e8:	4602      	mov	r2, r0
 23fa2ea:	460b      	mov	r3, r1
 23fa2ec:	ec43 2b18 	vmov	d8, r2, r3
 23fa2f0:	4650      	mov	r0, sl
 23fa2f2:	4659      	mov	r1, fp
 23fa2f4:	f7f2 f960 	bl	23ec5b8 <__aeabi_dsub>
 23fa2f8:	4680      	mov	r8, r0
 23fa2fa:	4689      	mov	r9, r1
 23fa2fc:	4642      	mov	r2, r8
 23fa2fe:	464b      	mov	r3, r9
 23fa300:	4650      	mov	r0, sl
 23fa302:	4659      	mov	r1, fp
 23fa304:	e9c4 8900 	strd	r8, r9, [r4]
 23fa308:	f7f2 f956 	bl	23ec5b8 <__aeabi_dsub>
 23fa30c:	ec53 2b18 	vmov	r2, r3, d8
 23fa310:	f7f2 f952 	bl	23ec5b8 <__aeabi_dsub>
 23fa314:	2f00      	cmp	r7, #0
 23fa316:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa31a:	f6bf ae71 	bge.w	23fa000 <__ieee754_rem_pio2+0x70>
 23fa31e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fa322:	4276      	negs	r6, r6
 23fa324:	e9c4 8300 	strd	r8, r3, [r4]
 23fa328:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa32c:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fa330:	e666      	b.n	23fa000 <__ieee754_rem_pio2+0x70>
 23fa332:	2303      	movs	r3, #3
 23fa334:	e6ac      	b.n	23fa090 <__ieee754_rem_pio2+0x100>
 23fa336:	f7f2 f941 	bl	23ec5bc <__adddf3>
 23fa33a:	4b23      	ldr	r3, [pc, #140]	; (23fa3c8 <__ieee754_rem_pio2+0x438>)
 23fa33c:	4680      	mov	r8, r0
 23fa33e:	4689      	mov	r9, r1
 23fa340:	429d      	cmp	r5, r3
 23fa342:	d016      	beq.n	23fa372 <__ieee754_rem_pio2+0x3e2>
 23fa344:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fa348:	a319      	add	r3, pc, #100	; (adr r3, 23fa3b0 <__ieee754_rem_pio2+0x420>)
 23fa34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa34e:	f7f2 f935 	bl	23ec5bc <__adddf3>
 23fa352:	4602      	mov	r2, r0
 23fa354:	460b      	mov	r3, r1
 23fa356:	4640      	mov	r0, r8
 23fa358:	4649      	mov	r1, r9
 23fa35a:	e9c4 2300 	strd	r2, r3, [r4]
 23fa35e:	f7f2 f92b 	bl	23ec5b8 <__aeabi_dsub>
 23fa362:	a313      	add	r3, pc, #76	; (adr r3, 23fa3b0 <__ieee754_rem_pio2+0x420>)
 23fa364:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa368:	f7f2 f928 	bl	23ec5bc <__adddf3>
 23fa36c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa370:	e646      	b.n	23fa000 <__ieee754_rem_pio2+0x70>
 23fa372:	a311      	add	r3, pc, #68	; (adr r3, 23fa3b8 <__ieee754_rem_pio2+0x428>)
 23fa374:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa378:	f7f2 f920 	bl	23ec5bc <__adddf3>
 23fa37c:	4680      	mov	r8, r0
 23fa37e:	4689      	mov	r9, r1
 23fa380:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fa384:	a30e      	add	r3, pc, #56	; (adr r3, 23fa3c0 <__ieee754_rem_pio2+0x430>)
 23fa386:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa38a:	f7f2 f917 	bl	23ec5bc <__adddf3>
 23fa38e:	4602      	mov	r2, r0
 23fa390:	460b      	mov	r3, r1
 23fa392:	4640      	mov	r0, r8
 23fa394:	4649      	mov	r1, r9
 23fa396:	e9c4 2300 	strd	r2, r3, [r4]
 23fa39a:	f7f2 f90d 	bl	23ec5b8 <__aeabi_dsub>
 23fa39e:	a308      	add	r3, pc, #32	; (adr r3, 23fa3c0 <__ieee754_rem_pio2+0x430>)
 23fa3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3a4:	f7f2 f90a 	bl	23ec5bc <__adddf3>
 23fa3a8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa3ac:	e628      	b.n	23fa000 <__ieee754_rem_pio2+0x70>
 23fa3ae:	bf00      	nop
 23fa3b0:	1a626331 	.word	0x1a626331
 23fa3b4:	3dd0b461 	.word	0x3dd0b461
 23fa3b8:	1a600000 	.word	0x1a600000
 23fa3bc:	3dd0b461 	.word	0x3dd0b461
 23fa3c0:	2e037073 	.word	0x2e037073
 23fa3c4:	3ba3198a 	.word	0x3ba3198a
 23fa3c8:	3ff921fb 	.word	0x3ff921fb
 23fa3cc:	2e000000 	.word	0x2e000000
 23fa3d0:	3ba3198a 	.word	0x3ba3198a
 23fa3d4:	252049c1 	.word	0x252049c1
 23fa3d8:	397b839a 	.word	0x397b839a

023fa3dc <__ieee754_sqrt>:
 23fa3dc:	495e      	ldr	r1, [pc, #376]	; (23fa558 <__ieee754_sqrt+0x17c>)
 23fa3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa3e2:	ec55 4b10 	vmov	r4, r5, d0
 23fa3e6:	43a9      	bics	r1, r5
 23fa3e8:	f000 8094 	beq.w	23fa514 <__ieee754_sqrt+0x138>
 23fa3ec:	2d00      	cmp	r5, #0
 23fa3ee:	462b      	mov	r3, r5
 23fa3f0:	ee10 2a10 	vmov	r2, s0
 23fa3f4:	dd5a      	ble.n	23fa4ac <__ieee754_sqrt+0xd0>
 23fa3f6:	1528      	asrs	r0, r5, #20
 23fa3f8:	d067      	beq.n	23fa4ca <__ieee754_sqrt+0xee>
 23fa3fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fa3fe:	07c1      	lsls	r1, r0, #31
 23fa400:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fa404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fa408:	d403      	bmi.n	23fa412 <__ieee754_sqrt+0x36>
 23fa40a:	005b      	lsls	r3, r3, #1
 23fa40c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fa410:	0052      	lsls	r2, r2, #1
 23fa412:	0fd1      	lsrs	r1, r2, #31
 23fa414:	2600      	movs	r6, #0
 23fa416:	107f      	asrs	r7, r7, #1
 23fa418:	f04f 0c16 	mov.w	ip, #22
 23fa41c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fa420:	46b6      	mov	lr, r6
 23fa422:	0052      	lsls	r2, r2, #1
 23fa424:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fa428:	eb0e 0001 	add.w	r0, lr, r1
 23fa42c:	4298      	cmp	r0, r3
 23fa42e:	dc03      	bgt.n	23fa438 <__ieee754_sqrt+0x5c>
 23fa430:	1a1b      	subs	r3, r3, r0
 23fa432:	eb00 0e01 	add.w	lr, r0, r1
 23fa436:	440e      	add	r6, r1
 23fa438:	005b      	lsls	r3, r3, #1
 23fa43a:	f1bc 0c01 	subs.w	ip, ip, #1
 23fa43e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fa442:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fa446:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fa44a:	d1ed      	bne.n	23fa428 <__ieee754_sqrt+0x4c>
 23fa44c:	4665      	mov	r5, ip
 23fa44e:	2420      	movs	r4, #32
 23fa450:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fa454:	e014      	b.n	23fa480 <__ieee754_sqrt+0xa4>
 23fa456:	d10a      	bne.n	23fa46e <__ieee754_sqrt+0x92>
 23fa458:	4290      	cmp	r0, r2
 23fa45a:	d808      	bhi.n	23fa46e <__ieee754_sqrt+0x92>
 23fa45c:	2800      	cmp	r0, #0
 23fa45e:	eb00 0c01 	add.w	ip, r0, r1
 23fa462:	db1d      	blt.n	23fa4a0 <__ieee754_sqrt+0xc4>
 23fa464:	46f0      	mov	r8, lr
 23fa466:	2300      	movs	r3, #0
 23fa468:	1a12      	subs	r2, r2, r0
 23fa46a:	440d      	add	r5, r1
 23fa46c:	46c6      	mov	lr, r8
 23fa46e:	0fd0      	lsrs	r0, r2, #31
 23fa470:	3c01      	subs	r4, #1
 23fa472:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fa476:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fa47a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fa47e:	d033      	beq.n	23fa4e8 <__ieee754_sqrt+0x10c>
 23fa480:	4573      	cmp	r3, lr
 23fa482:	eb01 000c 	add.w	r0, r1, ip
 23fa486:	dde6      	ble.n	23fa456 <__ieee754_sqrt+0x7a>
 23fa488:	2800      	cmp	r0, #0
 23fa48a:	eb00 0c01 	add.w	ip, r0, r1
 23fa48e:	db07      	blt.n	23fa4a0 <__ieee754_sqrt+0xc4>
 23fa490:	46f0      	mov	r8, lr
 23fa492:	eba3 030e 	sub.w	r3, r3, lr
 23fa496:	4290      	cmp	r0, r2
 23fa498:	bf88      	it	hi
 23fa49a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fa49e:	e7e3      	b.n	23fa468 <__ieee754_sqrt+0x8c>
 23fa4a0:	f1bc 0f00 	cmp.w	ip, #0
 23fa4a4:	dbf4      	blt.n	23fa490 <__ieee754_sqrt+0xb4>
 23fa4a6:	f10e 0801 	add.w	r8, lr, #1
 23fa4aa:	e7f2      	b.n	23fa492 <__ieee754_sqrt+0xb6>
 23fa4ac:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fa4b0:	4321      	orrs	r1, r4
 23fa4b2:	d028      	beq.n	23fa506 <__ieee754_sqrt+0x12a>
 23fa4b4:	2d00      	cmp	r5, #0
 23fa4b6:	d13d      	bne.n	23fa534 <__ieee754_sqrt+0x158>
 23fa4b8:	4628      	mov	r0, r5
 23fa4ba:	0ad1      	lsrs	r1, r2, #11
 23fa4bc:	3815      	subs	r0, #21
 23fa4be:	0552      	lsls	r2, r2, #21
 23fa4c0:	460b      	mov	r3, r1
 23fa4c2:	2900      	cmp	r1, #0
 23fa4c4:	d0f9      	beq.n	23fa4ba <__ieee754_sqrt+0xde>
 23fa4c6:	02cf      	lsls	r7, r1, #11
 23fa4c8:	d441      	bmi.n	23fa54e <__ieee754_sqrt+0x172>
 23fa4ca:	2400      	movs	r4, #0
 23fa4cc:	005b      	lsls	r3, r3, #1
 23fa4ce:	4625      	mov	r5, r4
 23fa4d0:	3401      	adds	r4, #1
 23fa4d2:	02de      	lsls	r6, r3, #11
 23fa4d4:	d5fa      	bpl.n	23fa4cc <__ieee754_sqrt+0xf0>
 23fa4d6:	4619      	mov	r1, r3
 23fa4d8:	4613      	mov	r3, r2
 23fa4da:	40a2      	lsls	r2, r4
 23fa4dc:	f1c4 0420 	rsb	r4, r4, #32
 23fa4e0:	40e3      	lsrs	r3, r4
 23fa4e2:	1b40      	subs	r0, r0, r5
 23fa4e4:	430b      	orrs	r3, r1
 23fa4e6:	e788      	b.n	23fa3fa <__ieee754_sqrt+0x1e>
 23fa4e8:	4313      	orrs	r3, r2
 23fa4ea:	d10e      	bne.n	23fa50a <__ieee754_sqrt+0x12e>
 23fa4ec:	086c      	lsrs	r4, r5, #1
 23fa4ee:	07f3      	lsls	r3, r6, #31
 23fa4f0:	491a      	ldr	r1, [pc, #104]	; (23fa55c <__ieee754_sqrt+0x180>)
 23fa4f2:	bf48      	it	mi
 23fa4f4:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fa4f8:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fa4fc:	4622      	mov	r2, r4
 23fa4fe:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fa502:	ec43 2b10 	vmov	d0, r2, r3
 23fa506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa50a:	1c6a      	adds	r2, r5, #1
 23fa50c:	d01d      	beq.n	23fa54a <__ieee754_sqrt+0x16e>
 23fa50e:	1c6c      	adds	r4, r5, #1
 23fa510:	0864      	lsrs	r4, r4, #1
 23fa512:	e7ec      	b.n	23fa4ee <__ieee754_sqrt+0x112>
 23fa514:	ee10 2a10 	vmov	r2, s0
 23fa518:	462b      	mov	r3, r5
 23fa51a:	ee10 0a10 	vmov	r0, s0
 23fa51e:	4629      	mov	r1, r5
 23fa520:	f7f2 fa02 	bl	23ec928 <__aeabi_dmul>
 23fa524:	4622      	mov	r2, r4
 23fa526:	462b      	mov	r3, r5
 23fa528:	f7f2 f848 	bl	23ec5bc <__adddf3>
 23fa52c:	ec41 0b10 	vmov	d0, r0, r1
 23fa530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa534:	4620      	mov	r0, r4
 23fa536:	4629      	mov	r1, r5
 23fa538:	f7f2 f83e 	bl	23ec5b8 <__aeabi_dsub>
 23fa53c:	4602      	mov	r2, r0
 23fa53e:	460b      	mov	r3, r1
 23fa540:	f7f2 fb1c 	bl	23ecb7c <__aeabi_ddiv>
 23fa544:	ec41 0b10 	vmov	d0, r0, r1
 23fa548:	e7dd      	b.n	23fa506 <__ieee754_sqrt+0x12a>
 23fa54a:	3601      	adds	r6, #1
 23fa54c:	e7cf      	b.n	23fa4ee <__ieee754_sqrt+0x112>
 23fa54e:	4613      	mov	r3, r2
 23fa550:	2420      	movs	r4, #32
 23fa552:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fa556:	e7c3      	b.n	23fa4e0 <__ieee754_sqrt+0x104>
 23fa558:	7ff00000 	.word	0x7ff00000
 23fa55c:	3fe00000 	.word	0x3fe00000

023fa560 <__ieee754_expf>:
 23fa560:	ee10 3a10 	vmov	r3, s0
 23fa564:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 23fa568:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 23fa56c:	d859      	bhi.n	23fa622 <__ieee754_expf+0xc2>
 23fa56e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 23fa572:	f000 8093 	beq.w	23fa69c <__ieee754_expf+0x13c>
 23fa576:	4861      	ldr	r0, [pc, #388]	; (23fa6fc <__ieee754_expf+0x19c>)
 23fa578:	4283      	cmp	r3, r0
 23fa57a:	dc55      	bgt.n	23fa628 <__ieee754_expf+0xc8>
 23fa57c:	b129      	cbz	r1, 23fa58a <__ieee754_expf+0x2a>
 23fa57e:	4b60      	ldr	r3, [pc, #384]	; (23fa700 <__ieee754_expf+0x1a0>)
 23fa580:	429a      	cmp	r2, r3
 23fa582:	d902      	bls.n	23fa58a <__ieee754_expf+0x2a>
 23fa584:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 23fa704 <__ieee754_expf+0x1a4>
 23fa588:	4770      	bx	lr
 23fa58a:	4b5f      	ldr	r3, [pc, #380]	; (23fa708 <__ieee754_expf+0x1a8>)
 23fa58c:	429a      	cmp	r2, r3
 23fa58e:	d950      	bls.n	23fa632 <__ieee754_expf+0xd2>
 23fa590:	4b5e      	ldr	r3, [pc, #376]	; (23fa70c <__ieee754_expf+0x1ac>)
 23fa592:	429a      	cmp	r2, r3
 23fa594:	f200 8094 	bhi.w	23fa6c0 <__ieee754_expf+0x160>
 23fa598:	485d      	ldr	r0, [pc, #372]	; (23fa710 <__ieee754_expf+0x1b0>)
 23fa59a:	f1c1 0301 	rsb	r3, r1, #1
 23fa59e:	4a5d      	ldr	r2, [pc, #372]	; (23fa714 <__ieee754_expf+0x1b4>)
 23fa5a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fa5a4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23fa5a8:	1a59      	subs	r1, r3, r1
 23fa5aa:	ed90 4a00 	vldr	s8, [r0]
 23fa5ae:	ed92 7a00 	vldr	s14, [r2]
 23fa5b2:	ee30 4a44 	vsub.f32	s8, s0, s8
 23fa5b6:	ee34 0a47 	vsub.f32	s0, s8, s14
 23fa5ba:	eddf 7a57 	vldr	s15, [pc, #348]	; 23fa718 <__ieee754_expf+0x1b8>
 23fa5be:	eddf 4a57 	vldr	s9, [pc, #348]	; 23fa71c <__ieee754_expf+0x1bc>
 23fa5c2:	ed9f 5a57 	vldr	s10, [pc, #348]	; 23fa720 <__ieee754_expf+0x1c0>
 23fa5c6:	ee60 6a00 	vmul.f32	s13, s0, s0
 23fa5ca:	ed9f 6a56 	vldr	s12, [pc, #344]	; 23fa724 <__ieee754_expf+0x1c4>
 23fa5ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 23fa728 <__ieee754_expf+0x1c8>
 23fa5d2:	eee6 4aa7 	vfma.f32	s9, s13, s15
 23fa5d6:	eea4 5aa6 	vfma.f32	s10, s9, s13
 23fa5da:	eea5 6a26 	vfma.f32	s12, s10, s13
 23fa5de:	eee6 5a26 	vfma.f32	s11, s12, s13
 23fa5e2:	eeb0 6a40 	vmov.f32	s12, s0
 23fa5e6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 23fa5ea:	2900      	cmp	r1, #0
 23fa5ec:	d047      	beq.n	23fa67e <__ieee754_expf+0x11e>
 23fa5ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 23fa5f2:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
 23fa5f6:	ee60 5a06 	vmul.f32	s11, s0, s12
 23fa5fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23fa5fe:	ee36 6ac6 	vsub.f32	s12, s13, s12
 23fa602:	ee85 0a86 	vdiv.f32	s0, s11, s12
 23fa606:	ee37 0a40 	vsub.f32	s0, s14, s0
 23fa60a:	ee30 0a44 	vsub.f32	s0, s0, s8
 23fa60e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23fa612:	db49      	blt.n	23fa6a8 <__ieee754_expf+0x148>
 23fa614:	ee10 3a10 	vmov	r3, s0
 23fa618:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23fa61c:	ee00 3a10 	vmov	s0, r3
 23fa620:	4770      	bx	lr
 23fa622:	ee30 0a00 	vadd.f32	s0, s0, s0
 23fa626:	4770      	bx	lr
 23fa628:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23fa72c <__ieee754_expf+0x1cc>
 23fa62c:	ee20 0a00 	vmul.f32	s0, s0, s0
 23fa630:	4770      	bx	lr
 23fa632:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 23fa636:	d20a      	bcs.n	23fa64e <__ieee754_expf+0xee>
 23fa638:	eddf 7a3c 	vldr	s15, [pc, #240]	; 23fa72c <__ieee754_expf+0x1cc>
 23fa63c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23fa640:	ee70 7a27 	vadd.f32	s15, s0, s15
 23fa644:	eef4 7ac7 	vcmpe.f32	s15, s14
 23fa648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fa64c:	dc52      	bgt.n	23fa6f4 <__ieee754_expf+0x194>
 23fa64e:	ee60 7a00 	vmul.f32	s15, s0, s0
 23fa652:	ed9f 5a31 	vldr	s10, [pc, #196]	; 23fa718 <__ieee754_expf+0x1b8>
 23fa656:	eddf 5a31 	vldr	s11, [pc, #196]	; 23fa71c <__ieee754_expf+0x1bc>
 23fa65a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 23fa720 <__ieee754_expf+0x1c0>
 23fa65e:	eee7 5a85 	vfma.f32	s11, s15, s10
 23fa662:	eddf 6a30 	vldr	s13, [pc, #192]	; 23fa724 <__ieee754_expf+0x1c4>
 23fa666:	ed9f 7a30 	vldr	s14, [pc, #192]	; 23fa728 <__ieee754_expf+0x1c8>
 23fa66a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 23fa66e:	eee7 6a86 	vfma.f32	s13, s15, s12
 23fa672:	eeb0 6a40 	vmov.f32	s12, s0
 23fa676:	eea7 7aa6 	vfma.f32	s14, s15, s13
 23fa67a:	eea7 6ac7 	vfms.f32	s12, s15, s14
 23fa67e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 23fa682:	ee60 6a06 	vmul.f32	s13, s0, s12
 23fa686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23fa68a:	ee36 6a67 	vsub.f32	s12, s12, s15
 23fa68e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 23fa692:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23fa696:	ee37 0a40 	vsub.f32	s0, s14, s0
 23fa69a:	4770      	bx	lr
 23fa69c:	eddf 7a19 	vldr	s15, [pc, #100]	; 23fa704 <__ieee754_expf+0x1a4>
 23fa6a0:	2900      	cmp	r1, #0
 23fa6a2:	fe00 0a27 	vseleq.f32	s0, s0, s15
 23fa6a6:	4770      	bx	lr
 23fa6a8:	3164      	adds	r1, #100	; 0x64
 23fa6aa:	ee10 3a10 	vmov	r3, s0
 23fa6ae:	eddf 7a20 	vldr	s15, [pc, #128]	; 23fa730 <__ieee754_expf+0x1d0>
 23fa6b2:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23fa6b6:	ee00 3a10 	vmov	s0, r3
 23fa6ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 23fa6be:	4770      	bx	lr
 23fa6c0:	4b1c      	ldr	r3, [pc, #112]	; (23fa734 <__ieee754_expf+0x1d4>)
 23fa6c2:	eeb0 4a40 	vmov.f32	s8, s0
 23fa6c6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 23fa738 <__ieee754_expf+0x1d8>
 23fa6ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 23fa6ce:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 23fa73c <__ieee754_expf+0x1dc>
 23fa6d2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23fa740 <__ieee754_expf+0x1e0>
 23fa6d6:	edd1 7a00 	vldr	s15, [r1]
 23fa6da:	eee0 7a07 	vfma.f32	s15, s0, s14
 23fa6de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23fa6e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23fa6e6:	ee17 1a90 	vmov	r1, s15
 23fa6ea:	eea7 4a46 	vfms.f32	s8, s14, s12
 23fa6ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 23fa6f2:	e760      	b.n	23fa5b6 <__ieee754_expf+0x56>
 23fa6f4:	ee30 0a07 	vadd.f32	s0, s0, s14
 23fa6f8:	4770      	bx	lr
 23fa6fa:	bf00      	nop
 23fa6fc:	42b17217 	.word	0x42b17217
 23fa700:	42cff1b5 	.word	0x42cff1b5
 23fa704:	00000000 	.word	0x00000000
 23fa708:	3eb17218 	.word	0x3eb17218
 23fa70c:	3f851591 	.word	0x3f851591
 23fa710:	023ffd70 	.word	0x023ffd70
 23fa714:	023ffd78 	.word	0x023ffd78
 23fa718:	3331bb4c 	.word	0x3331bb4c
 23fa71c:	b5ddea0e 	.word	0xb5ddea0e
 23fa720:	388ab355 	.word	0x388ab355
 23fa724:	bb360b61 	.word	0xbb360b61
 23fa728:	3e2aaaab 	.word	0x3e2aaaab
 23fa72c:	7149f2ca 	.word	0x7149f2ca
 23fa730:	0d800000 	.word	0x0d800000
 23fa734:	023ffd68 	.word	0x023ffd68
 23fa738:	3fb8aa3b 	.word	0x3fb8aa3b
 23fa73c:	3f317180 	.word	0x3f317180
 23fa740:	3717f7d1 	.word	0x3717f7d1

023fa744 <__ieee754_sqrtf>:
 23fa744:	eeb1 0ac0 	vsqrt.f32	s0, s0
 23fa748:	4770      	bx	lr
 23fa74a:	bf00      	nop
 23fa74c:	0000      	movs	r0, r0
	...

023fa750 <__kernel_cos>:
 23fa750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa754:	ec57 6b10 	vmov	r6, r7, d0
 23fa758:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fa75c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fa760:	ec5b ab11 	vmov	sl, fp, d1
 23fa764:	ed2d 8b04 	vpush	{d8-d9}
 23fa768:	da71      	bge.n	23fa84e <__kernel_cos+0xfe>
 23fa76a:	ee10 0a10 	vmov	r0, s0
 23fa76e:	4639      	mov	r1, r7
 23fa770:	f7f2 fb8a 	bl	23ece88 <__aeabi_d2iz>
 23fa774:	2800      	cmp	r0, #0
 23fa776:	f000 80f6 	beq.w	23fa966 <__kernel_cos+0x216>
 23fa77a:	4632      	mov	r2, r6
 23fa77c:	463b      	mov	r3, r7
 23fa77e:	4630      	mov	r0, r6
 23fa780:	4639      	mov	r1, r7
 23fa782:	f7f2 f8d1 	bl	23ec928 <__aeabi_dmul>
 23fa786:	4604      	mov	r4, r0
 23fa788:	460d      	mov	r5, r1
 23fa78a:	a37b      	add	r3, pc, #492	; (adr r3, 23fa978 <__kernel_cos+0x228>)
 23fa78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa790:	f7f2 f8ca 	bl	23ec928 <__aeabi_dmul>
 23fa794:	a37a      	add	r3, pc, #488	; (adr r3, 23fa980 <__kernel_cos+0x230>)
 23fa796:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa79a:	f7f1 ff0f 	bl	23ec5bc <__adddf3>
 23fa79e:	4622      	mov	r2, r4
 23fa7a0:	462b      	mov	r3, r5
 23fa7a2:	f7f2 f8c1 	bl	23ec928 <__aeabi_dmul>
 23fa7a6:	a378      	add	r3, pc, #480	; (adr r3, 23fa988 <__kernel_cos+0x238>)
 23fa7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7ac:	f7f1 ff04 	bl	23ec5b8 <__aeabi_dsub>
 23fa7b0:	4622      	mov	r2, r4
 23fa7b2:	462b      	mov	r3, r5
 23fa7b4:	f7f2 f8b8 	bl	23ec928 <__aeabi_dmul>
 23fa7b8:	a375      	add	r3, pc, #468	; (adr r3, 23fa990 <__kernel_cos+0x240>)
 23fa7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7be:	f7f1 fefd 	bl	23ec5bc <__adddf3>
 23fa7c2:	4622      	mov	r2, r4
 23fa7c4:	462b      	mov	r3, r5
 23fa7c6:	f7f2 f8af 	bl	23ec928 <__aeabi_dmul>
 23fa7ca:	a373      	add	r3, pc, #460	; (adr r3, 23fa998 <__kernel_cos+0x248>)
 23fa7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7d0:	f7f1 fef2 	bl	23ec5b8 <__aeabi_dsub>
 23fa7d4:	4622      	mov	r2, r4
 23fa7d6:	462b      	mov	r3, r5
 23fa7d8:	f7f2 f8a6 	bl	23ec928 <__aeabi_dmul>
 23fa7dc:	a370      	add	r3, pc, #448	; (adr r3, 23fa9a0 <__kernel_cos+0x250>)
 23fa7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7e2:	f7f1 feeb 	bl	23ec5bc <__adddf3>
 23fa7e6:	4622      	mov	r2, r4
 23fa7e8:	462b      	mov	r3, r5
 23fa7ea:	f7f2 f89d 	bl	23ec928 <__aeabi_dmul>
 23fa7ee:	ec41 0b18 	vmov	d8, r0, r1
 23fa7f2:	2200      	movs	r2, #0
 23fa7f4:	4b70      	ldr	r3, [pc, #448]	; (23fa9b8 <__kernel_cos+0x268>)
 23fa7f6:	4620      	mov	r0, r4
 23fa7f8:	4629      	mov	r1, r5
 23fa7fa:	f7f2 f895 	bl	23ec928 <__aeabi_dmul>
 23fa7fe:	4680      	mov	r8, r0
 23fa800:	4689      	mov	r9, r1
 23fa802:	4620      	mov	r0, r4
 23fa804:	4629      	mov	r1, r5
 23fa806:	ec53 2b18 	vmov	r2, r3, d8
 23fa80a:	f7f2 f88d 	bl	23ec928 <__aeabi_dmul>
 23fa80e:	4604      	mov	r4, r0
 23fa810:	460d      	mov	r5, r1
 23fa812:	4652      	mov	r2, sl
 23fa814:	465b      	mov	r3, fp
 23fa816:	4630      	mov	r0, r6
 23fa818:	4639      	mov	r1, r7
 23fa81a:	f7f2 f885 	bl	23ec928 <__aeabi_dmul>
 23fa81e:	4602      	mov	r2, r0
 23fa820:	460b      	mov	r3, r1
 23fa822:	4620      	mov	r0, r4
 23fa824:	4629      	mov	r1, r5
 23fa826:	f7f1 fec7 	bl	23ec5b8 <__aeabi_dsub>
 23fa82a:	4602      	mov	r2, r0
 23fa82c:	460b      	mov	r3, r1
 23fa82e:	4640      	mov	r0, r8
 23fa830:	4649      	mov	r1, r9
 23fa832:	f7f1 fec1 	bl	23ec5b8 <__aeabi_dsub>
 23fa836:	4602      	mov	r2, r0
 23fa838:	460b      	mov	r3, r1
 23fa83a:	2000      	movs	r0, #0
 23fa83c:	495f      	ldr	r1, [pc, #380]	; (23fa9bc <__kernel_cos+0x26c>)
 23fa83e:	f7f1 febb 	bl	23ec5b8 <__aeabi_dsub>
 23fa842:	ecbd 8b04 	vpop	{d8-d9}
 23fa846:	ec41 0b10 	vmov	d0, r0, r1
 23fa84a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa84e:	ee10 2a10 	vmov	r2, s0
 23fa852:	ee10 0a10 	vmov	r0, s0
 23fa856:	463b      	mov	r3, r7
 23fa858:	4639      	mov	r1, r7
 23fa85a:	f7f2 f865 	bl	23ec928 <__aeabi_dmul>
 23fa85e:	4604      	mov	r4, r0
 23fa860:	460d      	mov	r5, r1
 23fa862:	a345      	add	r3, pc, #276	; (adr r3, 23fa978 <__kernel_cos+0x228>)
 23fa864:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa868:	f7f2 f85e 	bl	23ec928 <__aeabi_dmul>
 23fa86c:	a344      	add	r3, pc, #272	; (adr r3, 23fa980 <__kernel_cos+0x230>)
 23fa86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa872:	f7f1 fea3 	bl	23ec5bc <__adddf3>
 23fa876:	4622      	mov	r2, r4
 23fa878:	462b      	mov	r3, r5
 23fa87a:	f7f2 f855 	bl	23ec928 <__aeabi_dmul>
 23fa87e:	a342      	add	r3, pc, #264	; (adr r3, 23fa988 <__kernel_cos+0x238>)
 23fa880:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa884:	f7f1 fe98 	bl	23ec5b8 <__aeabi_dsub>
 23fa888:	4622      	mov	r2, r4
 23fa88a:	462b      	mov	r3, r5
 23fa88c:	f7f2 f84c 	bl	23ec928 <__aeabi_dmul>
 23fa890:	a33f      	add	r3, pc, #252	; (adr r3, 23fa990 <__kernel_cos+0x240>)
 23fa892:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa896:	f7f1 fe91 	bl	23ec5bc <__adddf3>
 23fa89a:	4622      	mov	r2, r4
 23fa89c:	462b      	mov	r3, r5
 23fa89e:	f7f2 f843 	bl	23ec928 <__aeabi_dmul>
 23fa8a2:	a33d      	add	r3, pc, #244	; (adr r3, 23fa998 <__kernel_cos+0x248>)
 23fa8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8a8:	f7f1 fe86 	bl	23ec5b8 <__aeabi_dsub>
 23fa8ac:	4622      	mov	r2, r4
 23fa8ae:	462b      	mov	r3, r5
 23fa8b0:	f7f2 f83a 	bl	23ec928 <__aeabi_dmul>
 23fa8b4:	a33a      	add	r3, pc, #232	; (adr r3, 23fa9a0 <__kernel_cos+0x250>)
 23fa8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8ba:	f7f1 fe7f 	bl	23ec5bc <__adddf3>
 23fa8be:	462b      	mov	r3, r5
 23fa8c0:	4622      	mov	r2, r4
 23fa8c2:	f7f2 f831 	bl	23ec928 <__aeabi_dmul>
 23fa8c6:	4b3e      	ldr	r3, [pc, #248]	; (23fa9c0 <__kernel_cos+0x270>)
 23fa8c8:	4599      	cmp	r9, r3
 23fa8ca:	ec41 0b18 	vmov	d8, r0, r1
 23fa8ce:	dd90      	ble.n	23fa7f2 <__kernel_cos+0xa2>
 23fa8d0:	4b3c      	ldr	r3, [pc, #240]	; (23fa9c4 <__kernel_cos+0x274>)
 23fa8d2:	4599      	cmp	r9, r3
 23fa8d4:	dc3c      	bgt.n	23fa950 <__kernel_cos+0x200>
 23fa8d6:	2200      	movs	r2, #0
 23fa8d8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fa8dc:	2000      	movs	r0, #0
 23fa8de:	4937      	ldr	r1, [pc, #220]	; (23fa9bc <__kernel_cos+0x26c>)
 23fa8e0:	4690      	mov	r8, r2
 23fa8e2:	4699      	mov	r9, r3
 23fa8e4:	f7f1 fe68 	bl	23ec5b8 <__aeabi_dsub>
 23fa8e8:	ec41 0b19 	vmov	d9, r0, r1
 23fa8ec:	2200      	movs	r2, #0
 23fa8ee:	4b32      	ldr	r3, [pc, #200]	; (23fa9b8 <__kernel_cos+0x268>)
 23fa8f0:	4620      	mov	r0, r4
 23fa8f2:	4629      	mov	r1, r5
 23fa8f4:	f7f2 f818 	bl	23ec928 <__aeabi_dmul>
 23fa8f8:	4642      	mov	r2, r8
 23fa8fa:	464b      	mov	r3, r9
 23fa8fc:	f7f1 fe5c 	bl	23ec5b8 <__aeabi_dsub>
 23fa900:	4680      	mov	r8, r0
 23fa902:	4689      	mov	r9, r1
 23fa904:	4620      	mov	r0, r4
 23fa906:	4629      	mov	r1, r5
 23fa908:	ec53 2b18 	vmov	r2, r3, d8
 23fa90c:	f7f2 f80c 	bl	23ec928 <__aeabi_dmul>
 23fa910:	4604      	mov	r4, r0
 23fa912:	460d      	mov	r5, r1
 23fa914:	4652      	mov	r2, sl
 23fa916:	465b      	mov	r3, fp
 23fa918:	4630      	mov	r0, r6
 23fa91a:	4639      	mov	r1, r7
 23fa91c:	f7f2 f804 	bl	23ec928 <__aeabi_dmul>
 23fa920:	4602      	mov	r2, r0
 23fa922:	460b      	mov	r3, r1
 23fa924:	4620      	mov	r0, r4
 23fa926:	4629      	mov	r1, r5
 23fa928:	f7f1 fe46 	bl	23ec5b8 <__aeabi_dsub>
 23fa92c:	4602      	mov	r2, r0
 23fa92e:	460b      	mov	r3, r1
 23fa930:	4640      	mov	r0, r8
 23fa932:	4649      	mov	r1, r9
 23fa934:	f7f1 fe40 	bl	23ec5b8 <__aeabi_dsub>
 23fa938:	4602      	mov	r2, r0
 23fa93a:	460b      	mov	r3, r1
 23fa93c:	ec51 0b19 	vmov	r0, r1, d9
 23fa940:	f7f1 fe3a 	bl	23ec5b8 <__aeabi_dsub>
 23fa944:	ecbd 8b04 	vpop	{d8-d9}
 23fa948:	ec41 0b10 	vmov	d0, r0, r1
 23fa94c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa950:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fa9a8 <__kernel_cos+0x258>
 23fa954:	f04f 0800 	mov.w	r8, #0
 23fa958:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fa9c8 <__kernel_cos+0x278>
 23fa95c:	eeb0 9a47 	vmov.f32	s18, s14
 23fa960:	eef0 9a67 	vmov.f32	s19, s15
 23fa964:	e7c2      	b.n	23fa8ec <__kernel_cos+0x19c>
 23fa966:	ecbd 8b04 	vpop	{d8-d9}
 23fa96a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fa9b0 <__kernel_cos+0x260>
 23fa96e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa972:	bf00      	nop
 23fa974:	f3af 8000 	nop.w
 23fa978:	be8838d4 	.word	0xbe8838d4
 23fa97c:	bda8fae9 	.word	0xbda8fae9
 23fa980:	bdb4b1c4 	.word	0xbdb4b1c4
 23fa984:	3e21ee9e 	.word	0x3e21ee9e
 23fa988:	809c52ad 	.word	0x809c52ad
 23fa98c:	3e927e4f 	.word	0x3e927e4f
 23fa990:	19cb1590 	.word	0x19cb1590
 23fa994:	3efa01a0 	.word	0x3efa01a0
 23fa998:	16c15177 	.word	0x16c15177
 23fa99c:	3f56c16c 	.word	0x3f56c16c
 23fa9a0:	5555554c 	.word	0x5555554c
 23fa9a4:	3fa55555 	.word	0x3fa55555
 23fa9a8:	00000000 	.word	0x00000000
 23fa9ac:	3fe70000 	.word	0x3fe70000
 23fa9b0:	00000000 	.word	0x00000000
 23fa9b4:	3ff00000 	.word	0x3ff00000
 23fa9b8:	3fe00000 	.word	0x3fe00000
 23fa9bc:	3ff00000 	.word	0x3ff00000
 23fa9c0:	3fd33332 	.word	0x3fd33332
 23fa9c4:	3fe90000 	.word	0x3fe90000
 23fa9c8:	3fd20000 	.word	0x3fd20000
 23fa9cc:	00000000 	.word	0x00000000

023fa9d0 <__kernel_rem_pio2>:
 23fa9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa9d4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fa9d8:	461c      	mov	r4, r3
 23fa9da:	f112 0f14 	cmn.w	r2, #20
 23fa9de:	9308      	str	r3, [sp, #32]
 23fa9e0:	910b      	str	r1, [sp, #44]	; 0x2c
 23fa9e2:	4bb6      	ldr	r3, [pc, #728]	; (23facbc <__kernel_rem_pio2+0x2ec>)
 23fa9e4:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fa9e6:	9004      	str	r0, [sp, #16]
 23fa9e8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fa9ec:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fa9f0:	9105      	str	r1, [sp, #20]
 23fa9f2:	9303      	str	r3, [sp, #12]
 23fa9f4:	f2c0 833a 	blt.w	23fb06c <__kernel_rem_pio2+0x69c>
 23fa9f8:	1ed3      	subs	r3, r2, #3
 23fa9fa:	49b1      	ldr	r1, [pc, #708]	; (23facc0 <__kernel_rem_pio2+0x2f0>)
 23fa9fc:	fb81 0103 	smull	r0, r1, r1, r3
 23faa00:	17db      	asrs	r3, r3, #31
 23faa02:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23faa06:	9307      	str	r3, [sp, #28]
 23faa08:	3301      	adds	r3, #1
 23faa0a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23faa0e:	00db      	lsls	r3, r3, #3
 23faa10:	18d3      	adds	r3, r2, r3
 23faa12:	9a07      	ldr	r2, [sp, #28]
 23faa14:	9306      	str	r3, [sp, #24]
 23faa16:	9b03      	ldr	r3, [sp, #12]
 23faa18:	1ad4      	subs	r4, r2, r3
 23faa1a:	9a05      	ldr	r2, [sp, #20]
 23faa1c:	18d6      	adds	r6, r2, r3
 23faa1e:	d414      	bmi.n	23faa4a <__kernel_rem_pio2+0x7a>
 23faa20:	3601      	adds	r6, #1
 23faa22:	ad20      	add	r5, sp, #128	; 0x80
 23faa24:	f04f 0800 	mov.w	r8, #0
 23faa28:	f04f 0900 	mov.w	r9, #0
 23faa2c:	4426      	add	r6, r4
 23faa2e:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23faa30:	2c00      	cmp	r4, #0
 23faa32:	4640      	mov	r0, r8
 23faa34:	4649      	mov	r1, r9
 23faa36:	db03      	blt.n	23faa40 <__kernel_rem_pio2+0x70>
 23faa38:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23faa3c:	f7f1 ff0a 	bl	23ec854 <__aeabi_i2d>
 23faa40:	3401      	adds	r4, #1
 23faa42:	42b4      	cmp	r4, r6
 23faa44:	e8e5 0102 	strd	r0, r1, [r5], #8
 23faa48:	d1f2      	bne.n	23faa30 <__kernel_rem_pio2+0x60>
 23faa4a:	9b05      	ldr	r3, [sp, #20]
 23faa4c:	2b00      	cmp	r3, #0
 23faa4e:	f2c0 83c7 	blt.w	23fb1e0 <__kernel_rem_pio2+0x810>
 23faa52:	9b08      	ldr	r3, [sp, #32]
 23faa54:	a920      	add	r1, sp, #128	; 0x80
 23faa56:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23faa5a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23faa5e:	00da      	lsls	r2, r3, #3
 23faa60:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23faa64:	9202      	str	r2, [sp, #8]
 23faa66:	9a05      	ldr	r2, [sp, #20]
 23faa68:	441a      	add	r2, r3
 23faa6a:	9201      	str	r2, [sp, #4]
 23faa6c:	9a04      	ldr	r2, [sp, #16]
 23faa6e:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23faa72:	9b03      	ldr	r3, [sp, #12]
 23faa74:	2b00      	cmp	r3, #0
 23faa76:	f2c0 81a6 	blt.w	23fadc6 <__kernel_rem_pio2+0x3f6>
 23faa7a:	4657      	mov	r7, sl
 23faa7c:	9e04      	ldr	r6, [sp, #16]
 23faa7e:	2400      	movs	r4, #0
 23faa80:	2500      	movs	r5, #0
 23faa82:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23faa86:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23faa8a:	f7f1 ff4d 	bl	23ec928 <__aeabi_dmul>
 23faa8e:	4602      	mov	r2, r0
 23faa90:	460b      	mov	r3, r1
 23faa92:	4620      	mov	r0, r4
 23faa94:	4629      	mov	r1, r5
 23faa96:	f7f1 fd91 	bl	23ec5bc <__adddf3>
 23faa9a:	4546      	cmp	r6, r8
 23faa9c:	4604      	mov	r4, r0
 23faa9e:	460d      	mov	r5, r1
 23faaa0:	d1ef      	bne.n	23faa82 <__kernel_rem_pio2+0xb2>
 23faaa2:	f109 0901 	add.w	r9, r9, #1
 23faaa6:	9b01      	ldr	r3, [sp, #4]
 23faaa8:	f10a 0a08 	add.w	sl, sl, #8
 23faaac:	4599      	cmp	r9, r3
 23faaae:	e8eb 4502 	strd	r4, r5, [fp], #8
 23faab2:	d1de      	bne.n	23faa72 <__kernel_rem_pio2+0xa2>
 23faab4:	9a04      	ldr	r2, [sp, #16]
 23faab6:	a90b      	add	r1, sp, #44	; 0x2c
 23faab8:	9b02      	ldr	r3, [sp, #8]
 23faaba:	4413      	add	r3, r2
 23faabc:	469b      	mov	fp, r3
 23faabe:	9b05      	ldr	r3, [sp, #20]
 23faac0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23faac4:	a90c      	add	r1, sp, #48	; 0x30
 23faac6:	920a      	str	r2, [sp, #40]	; 0x28
 23faac8:	461a      	mov	r2, r3
 23faaca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23faace:	9201      	str	r2, [sp, #4]
 23faad0:	3b08      	subs	r3, #8
 23faad2:	9309      	str	r3, [sp, #36]	; 0x24
 23faad4:	9a01      	ldr	r2, [sp, #4]
 23faad6:	a998      	add	r1, sp, #608	; 0x260
 23faad8:	2a00      	cmp	r2, #0
 23faada:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23faade:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23faae2:	dd29      	ble.n	23fab38 <__kernel_rem_pio2+0x168>
 23faae4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23faae8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23faaec:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23faaf0:	2200      	movs	r2, #0
 23faaf2:	4b74      	ldr	r3, [pc, #464]	; (23facc4 <__kernel_rem_pio2+0x2f4>)
 23faaf4:	4620      	mov	r0, r4
 23faaf6:	4629      	mov	r1, r5
 23faaf8:	f7f1 ff16 	bl	23ec928 <__aeabi_dmul>
 23faafc:	f7f2 f9c4 	bl	23ece88 <__aeabi_d2iz>
 23fab00:	f7f1 fea8 	bl	23ec854 <__aeabi_i2d>
 23fab04:	2200      	movs	r2, #0
 23fab06:	4b70      	ldr	r3, [pc, #448]	; (23facc8 <__kernel_rem_pio2+0x2f8>)
 23fab08:	4606      	mov	r6, r0
 23fab0a:	460f      	mov	r7, r1
 23fab0c:	f7f1 ff0c 	bl	23ec928 <__aeabi_dmul>
 23fab10:	4602      	mov	r2, r0
 23fab12:	460b      	mov	r3, r1
 23fab14:	4620      	mov	r0, r4
 23fab16:	4629      	mov	r1, r5
 23fab18:	f7f1 fd4e 	bl	23ec5b8 <__aeabi_dsub>
 23fab1c:	f7f2 f9b4 	bl	23ece88 <__aeabi_d2iz>
 23fab20:	4639      	mov	r1, r7
 23fab22:	f849 0b04 	str.w	r0, [r9], #4
 23fab26:	4630      	mov	r0, r6
 23fab28:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fab2c:	f7f1 fd46 	bl	23ec5bc <__adddf3>
 23fab30:	4604      	mov	r4, r0
 23fab32:	45d0      	cmp	r8, sl
 23fab34:	460d      	mov	r5, r1
 23fab36:	d1db      	bne.n	23faaf0 <__kernel_rem_pio2+0x120>
 23fab38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fab3c:	ec45 4b10 	vmov	d0, r4, r5
 23fab40:	4648      	mov	r0, r9
 23fab42:	f000 fc31 	bl	23fb3a8 <scalbn>
 23fab46:	2200      	movs	r2, #0
 23fab48:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fab4c:	ee10 0a10 	vmov	r0, s0
 23fab50:	ec55 4b10 	vmov	r4, r5, d0
 23fab54:	4629      	mov	r1, r5
 23fab56:	f7f1 fee7 	bl	23ec928 <__aeabi_dmul>
 23fab5a:	ec41 0b10 	vmov	d0, r0, r1
 23fab5e:	f7fe ffe3 	bl	23f9b28 <floor>
 23fab62:	2200      	movs	r2, #0
 23fab64:	4b59      	ldr	r3, [pc, #356]	; (23faccc <__kernel_rem_pio2+0x2fc>)
 23fab66:	ec51 0b10 	vmov	r0, r1, d0
 23fab6a:	f7f1 fedd 	bl	23ec928 <__aeabi_dmul>
 23fab6e:	4602      	mov	r2, r0
 23fab70:	460b      	mov	r3, r1
 23fab72:	4620      	mov	r0, r4
 23fab74:	4629      	mov	r1, r5
 23fab76:	f7f1 fd1f 	bl	23ec5b8 <__aeabi_dsub>
 23fab7a:	460d      	mov	r5, r1
 23fab7c:	4604      	mov	r4, r0
 23fab7e:	f7f2 f983 	bl	23ece88 <__aeabi_d2iz>
 23fab82:	4680      	mov	r8, r0
 23fab84:	f7f1 fe66 	bl	23ec854 <__aeabi_i2d>
 23fab88:	460b      	mov	r3, r1
 23fab8a:	4602      	mov	r2, r0
 23fab8c:	4629      	mov	r1, r5
 23fab8e:	4620      	mov	r0, r4
 23fab90:	f7f1 fd12 	bl	23ec5b8 <__aeabi_dsub>
 23fab94:	464b      	mov	r3, r9
 23fab96:	4606      	mov	r6, r0
 23fab98:	460f      	mov	r7, r1
 23fab9a:	2b00      	cmp	r3, #0
 23fab9c:	f340 8098 	ble.w	23facd0 <__kernel_rem_pio2+0x300>
 23faba0:	9a01      	ldr	r2, [sp, #4]
 23faba2:	a90c      	add	r1, sp, #48	; 0x30
 23faba4:	f1c9 0318 	rsb	r3, r9, #24
 23faba8:	f1c9 0517 	rsb	r5, r9, #23
 23fabac:	3a01      	subs	r2, #1
 23fabae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fabb2:	fa41 f003 	asr.w	r0, r1, r3
 23fabb6:	fa00 f303 	lsl.w	r3, r0, r3
 23fabba:	4480      	add	r8, r0
 23fabbc:	1acb      	subs	r3, r1, r3
 23fabbe:	a90c      	add	r1, sp, #48	; 0x30
 23fabc0:	fa43 f505 	asr.w	r5, r3, r5
 23fabc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fabc8:	2d00      	cmp	r5, #0
 23fabca:	f300 808b 	bgt.w	23face4 <__kernel_rem_pio2+0x314>
 23fabce:	2200      	movs	r2, #0
 23fabd0:	2300      	movs	r3, #0
 23fabd2:	4630      	mov	r0, r6
 23fabd4:	4639      	mov	r1, r7
 23fabd6:	f7f2 f90f 	bl	23ecdf8 <__aeabi_dcmpeq>
 23fabda:	2800      	cmp	r0, #0
 23fabdc:	f000 824d 	beq.w	23fb07a <__kernel_rem_pio2+0x6aa>
 23fabe0:	9a01      	ldr	r2, [sp, #4]
 23fabe2:	9b05      	ldr	r3, [sp, #20]
 23fabe4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fabe8:	4553      	cmp	r3, sl
 23fabea:	dc10      	bgt.n	23fac0e <__kernel_rem_pio2+0x23e>
 23fabec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fabf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fabf2:	4413      	add	r3, r2
 23fabf4:	aa0c      	add	r2, sp, #48	; 0x30
 23fabf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fabfa:	2200      	movs	r2, #0
 23fabfc:	f853 1904 	ldr.w	r1, [r3], #-4
 23fac00:	4283      	cmp	r3, r0
 23fac02:	ea42 0201 	orr.w	r2, r2, r1
 23fac06:	d1f9      	bne.n	23fabfc <__kernel_rem_pio2+0x22c>
 23fac08:	2a00      	cmp	r2, #0
 23fac0a:	f040 80df 	bne.w	23fadcc <__kernel_rem_pio2+0x3fc>
 23fac0e:	9b05      	ldr	r3, [sp, #20]
 23fac10:	aa0c      	add	r2, sp, #48	; 0x30
 23fac12:	3b01      	subs	r3, #1
 23fac14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fac18:	2b00      	cmp	r3, #0
 23fac1a:	f040 80cf 	bne.w	23fadbc <__kernel_rem_pio2+0x3ec>
 23fac1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fac20:	2301      	movs	r3, #1
 23fac22:	f852 1904 	ldr.w	r1, [r2], #-4
 23fac26:	3301      	adds	r3, #1
 23fac28:	2900      	cmp	r1, #0
 23fac2a:	d0fa      	beq.n	23fac22 <__kernel_rem_pio2+0x252>
 23fac2c:	9a01      	ldr	r2, [sp, #4]
 23fac2e:	18d3      	adds	r3, r2, r3
 23fac30:	9302      	str	r3, [sp, #8]
 23fac32:	1c53      	adds	r3, r2, #1
 23fac34:	4699      	mov	r9, r3
 23fac36:	9a01      	ldr	r2, [sp, #4]
 23fac38:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fac3c:	9908      	ldr	r1, [sp, #32]
 23fac3e:	440a      	add	r2, r1
 23fac40:	4690      	mov	r8, r2
 23fac42:	9a07      	ldr	r2, [sp, #28]
 23fac44:	441a      	add	r2, r3
 23fac46:	4492      	add	sl, r2
 23fac48:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fac4a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fac4e:	aa20      	add	r2, sp, #128	; 0x80
 23fac50:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fac54:	aa70      	add	r2, sp, #448	; 0x1c0
 23fac56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fac5a:	9301      	str	r3, [sp, #4]
 23fac5c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fac60:	4647      	mov	r7, r8
 23fac62:	f7f1 fdf7 	bl	23ec854 <__aeabi_i2d>
 23fac66:	460b      	mov	r3, r1
 23fac68:	9903      	ldr	r1, [sp, #12]
 23fac6a:	4602      	mov	r2, r0
 23fac6c:	f108 0808 	add.w	r8, r8, #8
 23fac70:	2900      	cmp	r1, #0
 23fac72:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fac76:	db1e      	blt.n	23facb6 <__kernel_rem_pio2+0x2e6>
 23fac78:	9e04      	ldr	r6, [sp, #16]
 23fac7a:	2400      	movs	r4, #0
 23fac7c:	2500      	movs	r5, #0
 23fac7e:	e001      	b.n	23fac84 <__kernel_rem_pio2+0x2b4>
 23fac80:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fac84:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fac88:	f7f1 fe4e 	bl	23ec928 <__aeabi_dmul>
 23fac8c:	4602      	mov	r2, r0
 23fac8e:	460b      	mov	r3, r1
 23fac90:	4620      	mov	r0, r4
 23fac92:	4629      	mov	r1, r5
 23fac94:	f7f1 fc92 	bl	23ec5bc <__adddf3>
 23fac98:	455e      	cmp	r6, fp
 23fac9a:	4604      	mov	r4, r0
 23fac9c:	460d      	mov	r5, r1
 23fac9e:	d1ef      	bne.n	23fac80 <__kernel_rem_pio2+0x2b0>
 23faca0:	9b01      	ldr	r3, [sp, #4]
 23faca2:	f109 0901 	add.w	r9, r9, #1
 23faca6:	e8e3 4502 	strd	r4, r5, [r3], #8
 23facaa:	9301      	str	r3, [sp, #4]
 23facac:	9b02      	ldr	r3, [sp, #8]
 23facae:	4599      	cmp	r9, r3
 23facb0:	ddd4      	ble.n	23fac5c <__kernel_rem_pio2+0x28c>
 23facb2:	9301      	str	r3, [sp, #4]
 23facb4:	e70e      	b.n	23faad4 <__kernel_rem_pio2+0x104>
 23facb6:	2400      	movs	r4, #0
 23facb8:	2500      	movs	r5, #0
 23facba:	e7f1      	b.n	23faca0 <__kernel_rem_pio2+0x2d0>
 23facbc:	023ffdc0 	.word	0x023ffdc0
 23facc0:	2aaaaaab 	.word	0x2aaaaaab
 23facc4:	3e700000 	.word	0x3e700000
 23facc8:	41700000 	.word	0x41700000
 23faccc:	40200000 	.word	0x40200000
 23facd0:	d16b      	bne.n	23fadaa <__kernel_rem_pio2+0x3da>
 23facd2:	9b01      	ldr	r3, [sp, #4]
 23facd4:	aa0c      	add	r2, sp, #48	; 0x30
 23facd6:	3b01      	subs	r3, #1
 23facd8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23facdc:	15ed      	asrs	r5, r5, #23
 23facde:	2d00      	cmp	r5, #0
 23face0:	f77f af75 	ble.w	23fabce <__kernel_rem_pio2+0x1fe>
 23face4:	9b01      	ldr	r3, [sp, #4]
 23face6:	f108 0801 	add.w	r8, r8, #1
 23facea:	2b00      	cmp	r3, #0
 23facec:	f340 81c3 	ble.w	23fb076 <__kernel_rem_pio2+0x6a6>
 23facf0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23facf2:	2c00      	cmp	r4, #0
 23facf4:	d151      	bne.n	23fad9a <__kernel_rem_pio2+0x3ca>
 23facf6:	9b01      	ldr	r3, [sp, #4]
 23facf8:	2b01      	cmp	r3, #1
 23facfa:	d020      	beq.n	23fad3e <__kernel_rem_pio2+0x36e>
 23facfc:	ab0c      	add	r3, sp, #48	; 0x30
 23facfe:	2201      	movs	r2, #1
 23fad00:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fad04:	2c00      	cmp	r4, #0
 23fad06:	d04b      	beq.n	23fada0 <__kernel_rem_pio2+0x3d0>
 23fad08:	1c53      	adds	r3, r2, #1
 23fad0a:	a90c      	add	r1, sp, #48	; 0x30
 23fad0c:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fad10:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fad14:	9901      	ldr	r1, [sp, #4]
 23fad16:	4299      	cmp	r1, r3
 23fad18:	dd10      	ble.n	23fad3c <__kernel_rem_pio2+0x36c>
 23fad1a:	a80c      	add	r0, sp, #48	; 0x30
 23fad1c:	aa0c      	add	r2, sp, #48	; 0x30
 23fad1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fad22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fad26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fad2a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fad2e:	e000      	b.n	23fad32 <__kernel_rem_pio2+0x362>
 23fad30:	681a      	ldr	r2, [r3, #0]
 23fad32:	1a8a      	subs	r2, r1, r2
 23fad34:	f843 2b04 	str.w	r2, [r3], #4
 23fad38:	4283      	cmp	r3, r0
 23fad3a:	d1f9      	bne.n	23fad30 <__kernel_rem_pio2+0x360>
 23fad3c:	2401      	movs	r4, #1
 23fad3e:	9b06      	ldr	r3, [sp, #24]
 23fad40:	2b00      	cmp	r3, #0
 23fad42:	dd0e      	ble.n	23fad62 <__kernel_rem_pio2+0x392>
 23fad44:	2b01      	cmp	r3, #1
 23fad46:	f000 816b 	beq.w	23fb020 <__kernel_rem_pio2+0x650>
 23fad4a:	2b02      	cmp	r3, #2
 23fad4c:	d109      	bne.n	23fad62 <__kernel_rem_pio2+0x392>
 23fad4e:	9b01      	ldr	r3, [sp, #4]
 23fad50:	a90c      	add	r1, sp, #48	; 0x30
 23fad52:	1e5a      	subs	r2, r3, #1
 23fad54:	ab0c      	add	r3, sp, #48	; 0x30
 23fad56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fad5a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fad5e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fad62:	2d02      	cmp	r5, #2
 23fad64:	f47f af33 	bne.w	23fabce <__kernel_rem_pio2+0x1fe>
 23fad68:	4632      	mov	r2, r6
 23fad6a:	463b      	mov	r3, r7
 23fad6c:	2000      	movs	r0, #0
 23fad6e:	49b6      	ldr	r1, [pc, #728]	; (23fb048 <__kernel_rem_pio2+0x678>)
 23fad70:	f7f1 fc22 	bl	23ec5b8 <__aeabi_dsub>
 23fad74:	4606      	mov	r6, r0
 23fad76:	460f      	mov	r7, r1
 23fad78:	2c00      	cmp	r4, #0
 23fad7a:	f43f af28 	beq.w	23fabce <__kernel_rem_pio2+0x1fe>
 23fad7e:	9806      	ldr	r0, [sp, #24]
 23fad80:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fb038 <__kernel_rem_pio2+0x668>
 23fad84:	f000 fb10 	bl	23fb3a8 <scalbn>
 23fad88:	4630      	mov	r0, r6
 23fad8a:	4639      	mov	r1, r7
 23fad8c:	ec53 2b10 	vmov	r2, r3, d0
 23fad90:	f7f1 fc12 	bl	23ec5b8 <__aeabi_dsub>
 23fad94:	4606      	mov	r6, r0
 23fad96:	460f      	mov	r7, r1
 23fad98:	e719      	b.n	23fabce <__kernel_rem_pio2+0x1fe>
 23fad9a:	2301      	movs	r3, #1
 23fad9c:	2200      	movs	r2, #0
 23fad9e:	e7b4      	b.n	23fad0a <__kernel_rem_pio2+0x33a>
 23fada0:	3201      	adds	r2, #1
 23fada2:	9901      	ldr	r1, [sp, #4]
 23fada4:	428a      	cmp	r2, r1
 23fada6:	d1ab      	bne.n	23fad00 <__kernel_rem_pio2+0x330>
 23fada8:	e7c9      	b.n	23fad3e <__kernel_rem_pio2+0x36e>
 23fadaa:	2200      	movs	r2, #0
 23fadac:	4ba7      	ldr	r3, [pc, #668]	; (23fb04c <__kernel_rem_pio2+0x67c>)
 23fadae:	f7f2 f841 	bl	23ece34 <__aeabi_dcmpge>
 23fadb2:	2800      	cmp	r0, #0
 23fadb4:	f040 8152 	bne.w	23fb05c <__kernel_rem_pio2+0x68c>
 23fadb8:	4605      	mov	r5, r0
 23fadba:	e708      	b.n	23fabce <__kernel_rem_pio2+0x1fe>
 23fadbc:	9b01      	ldr	r3, [sp, #4]
 23fadbe:	3301      	adds	r3, #1
 23fadc0:	4699      	mov	r9, r3
 23fadc2:	9302      	str	r3, [sp, #8]
 23fadc4:	e737      	b.n	23fac36 <__kernel_rem_pio2+0x266>
 23fadc6:	2400      	movs	r4, #0
 23fadc8:	2500      	movs	r5, #0
 23fadca:	e66a      	b.n	23faaa2 <__kernel_rem_pio2+0xd2>
 23fadcc:	9b06      	ldr	r3, [sp, #24]
 23fadce:	9503      	str	r5, [sp, #12]
 23fadd0:	f1a3 0218 	sub.w	r2, r3, #24
 23fadd4:	ab0c      	add	r3, sp, #48	; 0x30
 23fadd6:	f8cd 801c 	str.w	r8, [sp, #28]
 23fadda:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fadde:	9206      	str	r2, [sp, #24]
 23fade0:	b973      	cbnz	r3, 23fae00 <__kernel_rem_pio2+0x430>
 23fade2:	4b9b      	ldr	r3, [pc, #620]	; (23fb050 <__kernel_rem_pio2+0x680>)
 23fade4:	9901      	ldr	r1, [sp, #4]
 23fade6:	4419      	add	r1, r3
 23fade8:	460b      	mov	r3, r1
 23fadea:	a90c      	add	r1, sp, #48	; 0x30
 23fadec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fadf0:	f853 1904 	ldr.w	r1, [r3], #-4
 23fadf4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fadf8:	3a18      	subs	r2, #24
 23fadfa:	2900      	cmp	r1, #0
 23fadfc:	d0f8      	beq.n	23fadf0 <__kernel_rem_pio2+0x420>
 23fadfe:	9206      	str	r2, [sp, #24]
 23fae00:	9806      	ldr	r0, [sp, #24]
 23fae02:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fb038 <__kernel_rem_pio2+0x668>
 23fae06:	f000 facf 	bl	23fb3a8 <scalbn>
 23fae0a:	f1ba 0f00 	cmp.w	sl, #0
 23fae0e:	ec55 4b10 	vmov	r4, r5, d0
 23fae12:	f2c0 81db 	blt.w	23fb1cc <__kernel_rem_pio2+0x7fc>
 23fae16:	ab70      	add	r3, sp, #448	; 0x1c0
 23fae18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fae1c:	f04f 0800 	mov.w	r8, #0
 23fae20:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fb054 <__kernel_rem_pio2+0x684>
 23fae24:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fae28:	9204      	str	r2, [sp, #16]
 23fae2a:	f10a 0301 	add.w	r3, sl, #1
 23fae2e:	aa0c      	add	r2, sp, #48	; 0x30
 23fae30:	f10b 0708 	add.w	r7, fp, #8
 23fae34:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fae38:	9306      	str	r3, [sp, #24]
 23fae3a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fae3e:	f7f1 fd09 	bl	23ec854 <__aeabi_i2d>
 23fae42:	4622      	mov	r2, r4
 23fae44:	462b      	mov	r3, r5
 23fae46:	f7f1 fd6f 	bl	23ec928 <__aeabi_dmul>
 23fae4a:	464b      	mov	r3, r9
 23fae4c:	4642      	mov	r2, r8
 23fae4e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fae52:	4620      	mov	r0, r4
 23fae54:	4629      	mov	r1, r5
 23fae56:	f7f1 fd67 	bl	23ec928 <__aeabi_dmul>
 23fae5a:	ab0c      	add	r3, sp, #48	; 0x30
 23fae5c:	4604      	mov	r4, r0
 23fae5e:	460d      	mov	r5, r1
 23fae60:	429e      	cmp	r6, r3
 23fae62:	d1ea      	bne.n	23fae3a <__kernel_rem_pio2+0x46a>
 23fae64:	ab48      	add	r3, sp, #288	; 0x120
 23fae66:	f04f 0900 	mov.w	r9, #0
 23fae6a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fae6e:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fae72:	f1ba 0f00 	cmp.w	sl, #0
 23fae76:	db2c      	blt.n	23faed2 <__kernel_rem_pio2+0x502>
 23fae78:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fb058 <__kernel_rem_pio2+0x688>
 23fae7c:	465f      	mov	r7, fp
 23fae7e:	2600      	movs	r6, #0
 23fae80:	2400      	movs	r4, #0
 23fae82:	2500      	movs	r5, #0
 23fae84:	a36e      	add	r3, pc, #440	; (adr r3, 23fb040 <__kernel_rem_pio2+0x670>)
 23fae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fae8a:	e003      	b.n	23fae94 <__kernel_rem_pio2+0x4c4>
 23fae8c:	45b1      	cmp	r9, r6
 23fae8e:	db10      	blt.n	23faeb2 <__kernel_rem_pio2+0x4e2>
 23fae90:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fae94:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fae98:	3601      	adds	r6, #1
 23fae9a:	f7f1 fd45 	bl	23ec928 <__aeabi_dmul>
 23fae9e:	4602      	mov	r2, r0
 23faea0:	460b      	mov	r3, r1
 23faea2:	4620      	mov	r0, r4
 23faea4:	4629      	mov	r1, r5
 23faea6:	f7f1 fb89 	bl	23ec5bc <__adddf3>
 23faeaa:	45b2      	cmp	sl, r6
 23faeac:	4604      	mov	r4, r0
 23faeae:	460d      	mov	r5, r1
 23faeb0:	daec      	bge.n	23fae8c <__kernel_rem_pio2+0x4bc>
 23faeb2:	9b01      	ldr	r3, [sp, #4]
 23faeb4:	f1ab 0b08 	sub.w	fp, fp, #8
 23faeb8:	9a02      	ldr	r2, [sp, #8]
 23faeba:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23faebe:	454a      	cmp	r2, r9
 23faec0:	e9c3 4500 	strd	r4, r5, [r3]
 23faec4:	f109 0301 	add.w	r3, r9, #1
 23faec8:	d006      	beq.n	23faed8 <__kernel_rem_pio2+0x508>
 23faeca:	f1ba 0f00 	cmp.w	sl, #0
 23faece:	4699      	mov	r9, r3
 23faed0:	dad2      	bge.n	23fae78 <__kernel_rem_pio2+0x4a8>
 23faed2:	2400      	movs	r4, #0
 23faed4:	2500      	movs	r5, #0
 23faed6:	e7ec      	b.n	23faeb2 <__kernel_rem_pio2+0x4e2>
 23faed8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23faeda:	f8dd a008 	ldr.w	sl, [sp, #8]
 23faede:	2b02      	cmp	r3, #2
 23faee0:	dc1e      	bgt.n	23faf20 <__kernel_rem_pio2+0x550>
 23faee2:	2b00      	cmp	r3, #0
 23faee4:	f300 80ff 	bgt.w	23fb0e6 <__kernel_rem_pio2+0x716>
 23faee8:	d113      	bne.n	23faf12 <__kernel_rem_pio2+0x542>
 23faeea:	9c04      	ldr	r4, [sp, #16]
 23faeec:	2000      	movs	r0, #0
 23faeee:	9d01      	ldr	r5, [sp, #4]
 23faef0:	2100      	movs	r1, #0
 23faef2:	3408      	adds	r4, #8
 23faef4:	442c      	add	r4, r5
 23faef6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23faefa:	f7f1 fb5f 	bl	23ec5bc <__adddf3>
 23faefe:	42a5      	cmp	r5, r4
 23faf00:	d1f9      	bne.n	23faef6 <__kernel_rem_pio2+0x526>
 23faf02:	9b03      	ldr	r3, [sp, #12]
 23faf04:	b113      	cbz	r3, 23faf0c <__kernel_rem_pio2+0x53c>
 23faf06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23faf0a:	4619      	mov	r1, r3
 23faf0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23faf0e:	e9c3 0100 	strd	r0, r1, [r3]
 23faf12:	9b07      	ldr	r3, [sp, #28]
 23faf14:	f003 0007 	and.w	r0, r3, #7
 23faf18:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23faf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faf20:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23faf22:	2b03      	cmp	r3, #3
 23faf24:	d1f5      	bne.n	23faf12 <__kernel_rem_pio2+0x542>
 23faf26:	f1ba 0f00 	cmp.w	sl, #0
 23faf2a:	f000 816b 	beq.w	23fb204 <__kernel_rem_pio2+0x834>
 23faf2e:	9a01      	ldr	r2, [sp, #4]
 23faf30:	9b04      	ldr	r3, [sp, #16]
 23faf32:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23faf36:	18d3      	adds	r3, r2, r3
 23faf38:	e9d3 4500 	ldrd	r4, r5, [r3]
 23faf3c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23faf40:	4620      	mov	r0, r4
 23faf42:	4629      	mov	r1, r5
 23faf44:	4632      	mov	r2, r6
 23faf46:	463b      	mov	r3, r7
 23faf48:	f7f1 fb38 	bl	23ec5bc <__adddf3>
 23faf4c:	46a0      	mov	r8, r4
 23faf4e:	46a9      	mov	r9, r5
 23faf50:	4604      	mov	r4, r0
 23faf52:	460d      	mov	r5, r1
 23faf54:	4630      	mov	r0, r6
 23faf56:	4622      	mov	r2, r4
 23faf58:	4639      	mov	r1, r7
 23faf5a:	462b      	mov	r3, r5
 23faf5c:	f7f1 fb2c 	bl	23ec5b8 <__aeabi_dsub>
 23faf60:	464b      	mov	r3, r9
 23faf62:	4642      	mov	r2, r8
 23faf64:	f7f1 fb2a 	bl	23ec5bc <__adddf3>
 23faf68:	9b01      	ldr	r3, [sp, #4]
 23faf6a:	455b      	cmp	r3, fp
 23faf6c:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23faf70:	e9cb 4500 	strd	r4, r5, [fp]
 23faf74:	d1e2      	bne.n	23faf3c <__kernel_rem_pio2+0x56c>
 23faf76:	f1ba 0f01 	cmp.w	sl, #1
 23faf7a:	f340 8143 	ble.w	23fb204 <__kernel_rem_pio2+0x834>
 23faf7e:	9b04      	ldr	r3, [sp, #16]
 23faf80:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23faf84:	9901      	ldr	r1, [sp, #4]
 23faf86:	461a      	mov	r2, r3
 23faf88:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23faf8c:	4453      	add	r3, sl
 23faf8e:	440a      	add	r2, r1
 23faf90:	00db      	lsls	r3, r3, #3
 23faf92:	f103 0a08 	add.w	sl, r3, #8
 23faf96:	9302      	str	r3, [sp, #8]
 23faf98:	e9d2 4500 	ldrd	r4, r5, [r2]
 23faf9c:	448a      	add	sl, r1
 23faf9e:	4620      	mov	r0, r4
 23fafa0:	4629      	mov	r1, r5
 23fafa2:	46a0      	mov	r8, r4
 23fafa4:	46a9      	mov	r9, r5
 23fafa6:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fafaa:	4632      	mov	r2, r6
 23fafac:	463b      	mov	r3, r7
 23fafae:	f7f1 fb05 	bl	23ec5bc <__adddf3>
 23fafb2:	4604      	mov	r4, r0
 23fafb4:	460d      	mov	r5, r1
 23fafb6:	4630      	mov	r0, r6
 23fafb8:	4622      	mov	r2, r4
 23fafba:	4639      	mov	r1, r7
 23fafbc:	462b      	mov	r3, r5
 23fafbe:	f7f1 fafb 	bl	23ec5b8 <__aeabi_dsub>
 23fafc2:	4642      	mov	r2, r8
 23fafc4:	464b      	mov	r3, r9
 23fafc6:	f7f1 faf9 	bl	23ec5bc <__adddf3>
 23fafca:	45d3      	cmp	fp, sl
 23fafcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fafd0:	e9ca 4500 	strd	r4, r5, [sl]
 23fafd4:	d1e3      	bne.n	23faf9e <__kernel_rem_pio2+0x5ce>
 23fafd6:	9c02      	ldr	r4, [sp, #8]
 23fafd8:	2000      	movs	r0, #0
 23fafda:	9b01      	ldr	r3, [sp, #4]
 23fafdc:	2100      	movs	r1, #0
 23fafde:	3410      	adds	r4, #16
 23fafe0:	f103 0510 	add.w	r5, r3, #16
 23fafe4:	441c      	add	r4, r3
 23fafe6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fafea:	f7f1 fae7 	bl	23ec5bc <__adddf3>
 23fafee:	42a5      	cmp	r5, r4
 23faff0:	d1f9      	bne.n	23fafe6 <__kernel_rem_pio2+0x616>
 23faff2:	9b03      	ldr	r3, [sp, #12]
 23faff4:	2b00      	cmp	r3, #0
 23faff6:	f040 80b4 	bne.w	23fb162 <__kernel_rem_pio2+0x792>
 23faffa:	9d01      	ldr	r5, [sp, #4]
 23faffc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23faffe:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fb002:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fb006:	e9c4 2300 	strd	r2, r3, [r4]
 23fb00a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fb00e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fb012:	9b07      	ldr	r3, [sp, #28]
 23fb014:	f003 0007 	and.w	r0, r3, #7
 23fb018:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fb01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb020:	9b01      	ldr	r3, [sp, #4]
 23fb022:	a90c      	add	r1, sp, #48	; 0x30
 23fb024:	1e5a      	subs	r2, r3, #1
 23fb026:	ab0c      	add	r3, sp, #48	; 0x30
 23fb028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fb02c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fb030:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fb034:	e695      	b.n	23fad62 <__kernel_rem_pio2+0x392>
 23fb036:	bf00      	nop
 23fb038:	00000000 	.word	0x00000000
 23fb03c:	3ff00000 	.word	0x3ff00000
 23fb040:	40000000 	.word	0x40000000
 23fb044:	3ff921fb 	.word	0x3ff921fb
 23fb048:	3ff00000 	.word	0x3ff00000
 23fb04c:	3fe00000 	.word	0x3fe00000
 23fb050:	3ffffffe 	.word	0x3ffffffe
 23fb054:	3e700000 	.word	0x3e700000
 23fb058:	023ffd88 	.word	0x023ffd88
 23fb05c:	9b01      	ldr	r3, [sp, #4]
 23fb05e:	f108 0801 	add.w	r8, r8, #1
 23fb062:	2b00      	cmp	r3, #0
 23fb064:	f340 80a8 	ble.w	23fb1b8 <__kernel_rem_pio2+0x7e8>
 23fb068:	2502      	movs	r5, #2
 23fb06a:	e641      	b.n	23facf0 <__kernel_rem_pio2+0x320>
 23fb06c:	2100      	movs	r1, #0
 23fb06e:	f06f 0317 	mvn.w	r3, #23
 23fb072:	9107      	str	r1, [sp, #28]
 23fb074:	e4cc      	b.n	23faa10 <__kernel_rem_pio2+0x40>
 23fb076:	2400      	movs	r4, #0
 23fb078:	e661      	b.n	23fad3e <__kernel_rem_pio2+0x36e>
 23fb07a:	ec47 6b10 	vmov	d0, r6, r7
 23fb07e:	9e06      	ldr	r6, [sp, #24]
 23fb080:	9503      	str	r5, [sp, #12]
 23fb082:	4270      	negs	r0, r6
 23fb084:	f8cd 801c 	str.w	r8, [sp, #28]
 23fb088:	f000 f98e 	bl	23fb3a8 <scalbn>
 23fb08c:	2200      	movs	r2, #0
 23fb08e:	4b5f      	ldr	r3, [pc, #380]	; (23fb20c <__kernel_rem_pio2+0x83c>)
 23fb090:	ee10 0a10 	vmov	r0, s0
 23fb094:	ec55 4b10 	vmov	r4, r5, d0
 23fb098:	4629      	mov	r1, r5
 23fb09a:	f7f1 fecb 	bl	23ece34 <__aeabi_dcmpge>
 23fb09e:	2800      	cmp	r0, #0
 23fb0a0:	d055      	beq.n	23fb14e <__kernel_rem_pio2+0x77e>
 23fb0a2:	3618      	adds	r6, #24
 23fb0a4:	2200      	movs	r2, #0
 23fb0a6:	4b5a      	ldr	r3, [pc, #360]	; (23fb210 <__kernel_rem_pio2+0x840>)
 23fb0a8:	4620      	mov	r0, r4
 23fb0aa:	4629      	mov	r1, r5
 23fb0ac:	9606      	str	r6, [sp, #24]
 23fb0ae:	f7f1 fc3b 	bl	23ec928 <__aeabi_dmul>
 23fb0b2:	9f01      	ldr	r7, [sp, #4]
 23fb0b4:	f7f1 fee8 	bl	23ece88 <__aeabi_d2iz>
 23fb0b8:	4606      	mov	r6, r0
 23fb0ba:	f7f1 fbcb 	bl	23ec854 <__aeabi_i2d>
 23fb0be:	2200      	movs	r2, #0
 23fb0c0:	4b52      	ldr	r3, [pc, #328]	; (23fb20c <__kernel_rem_pio2+0x83c>)
 23fb0c2:	f107 0a01 	add.w	sl, r7, #1
 23fb0c6:	f7f1 fc2f 	bl	23ec928 <__aeabi_dmul>
 23fb0ca:	460b      	mov	r3, r1
 23fb0cc:	4602      	mov	r2, r0
 23fb0ce:	4629      	mov	r1, r5
 23fb0d0:	4620      	mov	r0, r4
 23fb0d2:	f7f1 fa71 	bl	23ec5b8 <__aeabi_dsub>
 23fb0d6:	f7f1 fed7 	bl	23ece88 <__aeabi_d2iz>
 23fb0da:	ab0c      	add	r3, sp, #48	; 0x30
 23fb0dc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fb0e0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fb0e4:	e68c      	b.n	23fae00 <__kernel_rem_pio2+0x430>
 23fb0e6:	9d01      	ldr	r5, [sp, #4]
 23fb0e8:	2000      	movs	r0, #0
 23fb0ea:	9a06      	ldr	r2, [sp, #24]
 23fb0ec:	2100      	movs	r1, #0
 23fb0ee:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fb0f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fb0f6:	f7f1 fa61 	bl	23ec5bc <__adddf3>
 23fb0fa:	42a5      	cmp	r5, r4
 23fb0fc:	d1f9      	bne.n	23fb0f2 <__kernel_rem_pio2+0x722>
 23fb0fe:	9b03      	ldr	r3, [sp, #12]
 23fb100:	2b00      	cmp	r3, #0
 23fb102:	d149      	bne.n	23fb198 <__kernel_rem_pio2+0x7c8>
 23fb104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fb106:	4602      	mov	r2, r0
 23fb108:	e9c3 0100 	strd	r0, r1, [r3]
 23fb10c:	460b      	mov	r3, r1
 23fb10e:	9901      	ldr	r1, [sp, #4]
 23fb110:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb114:	f7f1 fa50 	bl	23ec5b8 <__aeabi_dsub>
 23fb118:	f1ba 0f00 	cmp.w	sl, #0
 23fb11c:	dd0d      	ble.n	23fb13a <__kernel_rem_pio2+0x76a>
 23fb11e:	ad4a      	add	r5, sp, #296	; 0x128
 23fb120:	2401      	movs	r4, #1
 23fb122:	3401      	adds	r4, #1
 23fb124:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fb128:	f7f1 fa48 	bl	23ec5bc <__adddf3>
 23fb12c:	45a2      	cmp	sl, r4
 23fb12e:	daf8      	bge.n	23fb122 <__kernel_rem_pio2+0x752>
 23fb130:	9b03      	ldr	r3, [sp, #12]
 23fb132:	b113      	cbz	r3, 23fb13a <__kernel_rem_pio2+0x76a>
 23fb134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb138:	4619      	mov	r1, r3
 23fb13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fb13c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fb140:	9b07      	ldr	r3, [sp, #28]
 23fb142:	f003 0007 	and.w	r0, r3, #7
 23fb146:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fb14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb14e:	4620      	mov	r0, r4
 23fb150:	4629      	mov	r1, r5
 23fb152:	f7f1 fe99 	bl	23ece88 <__aeabi_d2iz>
 23fb156:	9b01      	ldr	r3, [sp, #4]
 23fb158:	aa0c      	add	r2, sp, #48	; 0x30
 23fb15a:	469a      	mov	sl, r3
 23fb15c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fb160:	e64e      	b.n	23fae00 <__kernel_rem_pio2+0x430>
 23fb162:	9b01      	ldr	r3, [sp, #4]
 23fb164:	4602      	mov	r2, r0
 23fb166:	461e      	mov	r6, r3
 23fb168:	685c      	ldr	r4, [r3, #4]
 23fb16a:	68dd      	ldr	r5, [r3, #12]
 23fb16c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fb172:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fb176:	6832      	ldr	r2, [r6, #0]
 23fb178:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fb17c:	e9c1 2300 	strd	r2, r3, [r1]
 23fb180:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fb184:	68b2      	ldr	r2, [r6, #8]
 23fb186:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fb18a:	9b07      	ldr	r3, [sp, #28]
 23fb18c:	f003 0007 	and.w	r0, r3, #7
 23fb190:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fb194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb19a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb19e:	6053      	str	r3, [r2, #4]
 23fb1a0:	460b      	mov	r3, r1
 23fb1a2:	9901      	ldr	r1, [sp, #4]
 23fb1a4:	6010      	str	r0, [r2, #0]
 23fb1a6:	4602      	mov	r2, r0
 23fb1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb1ac:	f7f1 fa04 	bl	23ec5b8 <__aeabi_dsub>
 23fb1b0:	f1ba 0f00 	cmp.w	sl, #0
 23fb1b4:	dcb3      	bgt.n	23fb11e <__kernel_rem_pio2+0x74e>
 23fb1b6:	e7bd      	b.n	23fb134 <__kernel_rem_pio2+0x764>
 23fb1b8:	4632      	mov	r2, r6
 23fb1ba:	463b      	mov	r3, r7
 23fb1bc:	2000      	movs	r0, #0
 23fb1be:	4915      	ldr	r1, [pc, #84]	; (23fb214 <__kernel_rem_pio2+0x844>)
 23fb1c0:	f7f1 f9fa 	bl	23ec5b8 <__aeabi_dsub>
 23fb1c4:	2502      	movs	r5, #2
 23fb1c6:	4606      	mov	r6, r0
 23fb1c8:	460f      	mov	r7, r1
 23fb1ca:	e500      	b.n	23fabce <__kernel_rem_pio2+0x1fe>
 23fb1cc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fb1ce:	2b02      	cmp	r3, #2
 23fb1d0:	dc0a      	bgt.n	23fb1e8 <__kernel_rem_pio2+0x818>
 23fb1d2:	2b00      	cmp	r3, #0
 23fb1d4:	dc11      	bgt.n	23fb1fa <__kernel_rem_pio2+0x82a>
 23fb1d6:	f47f ae9c 	bne.w	23faf12 <__kernel_rem_pio2+0x542>
 23fb1da:	2000      	movs	r0, #0
 23fb1dc:	2100      	movs	r1, #0
 23fb1de:	e690      	b.n	23faf02 <__kernel_rem_pio2+0x532>
 23fb1e0:	9b08      	ldr	r3, [sp, #32]
 23fb1e2:	00db      	lsls	r3, r3, #3
 23fb1e4:	9302      	str	r3, [sp, #8]
 23fb1e6:	e465      	b.n	23faab4 <__kernel_rem_pio2+0xe4>
 23fb1e8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fb1ea:	2b03      	cmp	r3, #3
 23fb1ec:	f47f ae91 	bne.w	23faf12 <__kernel_rem_pio2+0x542>
 23fb1f0:	ab48      	add	r3, sp, #288	; 0x120
 23fb1f2:	2000      	movs	r0, #0
 23fb1f4:	2100      	movs	r1, #0
 23fb1f6:	9301      	str	r3, [sp, #4]
 23fb1f8:	e6fb      	b.n	23faff2 <__kernel_rem_pio2+0x622>
 23fb1fa:	ab48      	add	r3, sp, #288	; 0x120
 23fb1fc:	2000      	movs	r0, #0
 23fb1fe:	2100      	movs	r1, #0
 23fb200:	9301      	str	r3, [sp, #4]
 23fb202:	e77c      	b.n	23fb0fe <__kernel_rem_pio2+0x72e>
 23fb204:	2000      	movs	r0, #0
 23fb206:	2100      	movs	r1, #0
 23fb208:	e6f3      	b.n	23faff2 <__kernel_rem_pio2+0x622>
 23fb20a:	bf00      	nop
 23fb20c:	41700000 	.word	0x41700000
 23fb210:	3e700000 	.word	0x3e700000
 23fb214:	3ff00000 	.word	0x3ff00000

023fb218 <__kernel_sin>:
 23fb218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb21c:	ec5b ab10 	vmov	sl, fp, d0
 23fb220:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fb224:	4680      	mov	r8, r0
 23fb226:	ed2d 8b02 	vpush	{d8}
 23fb22a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fb22e:	b083      	sub	sp, #12
 23fb230:	ed8d 1b00 	vstr	d1, [sp]
 23fb234:	da07      	bge.n	23fb246 <__kernel_sin+0x2e>
 23fb236:	ee10 0a10 	vmov	r0, s0
 23fb23a:	4659      	mov	r1, fp
 23fb23c:	f7f1 fe24 	bl	23ece88 <__aeabi_d2iz>
 23fb240:	2800      	cmp	r0, #0
 23fb242:	f000 808e 	beq.w	23fb362 <__kernel_sin+0x14a>
 23fb246:	4652      	mov	r2, sl
 23fb248:	465b      	mov	r3, fp
 23fb24a:	4650      	mov	r0, sl
 23fb24c:	4659      	mov	r1, fp
 23fb24e:	f7f1 fb6b 	bl	23ec928 <__aeabi_dmul>
 23fb252:	4604      	mov	r4, r0
 23fb254:	460d      	mov	r5, r1
 23fb256:	4650      	mov	r0, sl
 23fb258:	4622      	mov	r2, r4
 23fb25a:	4659      	mov	r1, fp
 23fb25c:	462b      	mov	r3, r5
 23fb25e:	f7f1 fb63 	bl	23ec928 <__aeabi_dmul>
 23fb262:	4606      	mov	r6, r0
 23fb264:	460f      	mov	r7, r1
 23fb266:	4620      	mov	r0, r4
 23fb268:	4629      	mov	r1, r5
 23fb26a:	a344      	add	r3, pc, #272	; (adr r3, 23fb37c <__kernel_sin+0x164>)
 23fb26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb270:	f7f1 fb5a 	bl	23ec928 <__aeabi_dmul>
 23fb274:	a343      	add	r3, pc, #268	; (adr r3, 23fb384 <__kernel_sin+0x16c>)
 23fb276:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb27a:	f7f1 f99d 	bl	23ec5b8 <__aeabi_dsub>
 23fb27e:	4622      	mov	r2, r4
 23fb280:	462b      	mov	r3, r5
 23fb282:	f7f1 fb51 	bl	23ec928 <__aeabi_dmul>
 23fb286:	a341      	add	r3, pc, #260	; (adr r3, 23fb38c <__kernel_sin+0x174>)
 23fb288:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb28c:	f7f1 f996 	bl	23ec5bc <__adddf3>
 23fb290:	4622      	mov	r2, r4
 23fb292:	462b      	mov	r3, r5
 23fb294:	f7f1 fb48 	bl	23ec928 <__aeabi_dmul>
 23fb298:	a33e      	add	r3, pc, #248	; (adr r3, 23fb394 <__kernel_sin+0x17c>)
 23fb29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb29e:	f7f1 f98b 	bl	23ec5b8 <__aeabi_dsub>
 23fb2a2:	4622      	mov	r2, r4
 23fb2a4:	462b      	mov	r3, r5
 23fb2a6:	f7f1 fb3f 	bl	23ec928 <__aeabi_dmul>
 23fb2aa:	a33c      	add	r3, pc, #240	; (adr r3, 23fb39c <__kernel_sin+0x184>)
 23fb2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb2b0:	f7f1 f984 	bl	23ec5bc <__adddf3>
 23fb2b4:	ec41 0b18 	vmov	d8, r0, r1
 23fb2b8:	f1b8 0f00 	cmp.w	r8, #0
 23fb2bc:	d037      	beq.n	23fb32e <__kernel_sin+0x116>
 23fb2be:	2200      	movs	r2, #0
 23fb2c0:	4b2d      	ldr	r3, [pc, #180]	; (23fb378 <__kernel_sin+0x160>)
 23fb2c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fb2c6:	f7f1 fb2f 	bl	23ec928 <__aeabi_dmul>
 23fb2ca:	4680      	mov	r8, r0
 23fb2cc:	4689      	mov	r9, r1
 23fb2ce:	4630      	mov	r0, r6
 23fb2d0:	4639      	mov	r1, r7
 23fb2d2:	ec53 2b18 	vmov	r2, r3, d8
 23fb2d6:	f7f1 fb27 	bl	23ec928 <__aeabi_dmul>
 23fb2da:	4602      	mov	r2, r0
 23fb2dc:	460b      	mov	r3, r1
 23fb2de:	4640      	mov	r0, r8
 23fb2e0:	4649      	mov	r1, r9
 23fb2e2:	f7f1 f969 	bl	23ec5b8 <__aeabi_dsub>
 23fb2e6:	4622      	mov	r2, r4
 23fb2e8:	462b      	mov	r3, r5
 23fb2ea:	f7f1 fb1d 	bl	23ec928 <__aeabi_dmul>
 23fb2ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb2f2:	f7f1 f961 	bl	23ec5b8 <__aeabi_dsub>
 23fb2f6:	4604      	mov	r4, r0
 23fb2f8:	460d      	mov	r5, r1
 23fb2fa:	4630      	mov	r0, r6
 23fb2fc:	4639      	mov	r1, r7
 23fb2fe:	a31c      	add	r3, pc, #112	; (adr r3, 23fb370 <__kernel_sin+0x158>)
 23fb300:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb304:	f7f1 fb10 	bl	23ec928 <__aeabi_dmul>
 23fb308:	4602      	mov	r2, r0
 23fb30a:	460b      	mov	r3, r1
 23fb30c:	4620      	mov	r0, r4
 23fb30e:	4629      	mov	r1, r5
 23fb310:	f7f1 f954 	bl	23ec5bc <__adddf3>
 23fb314:	4602      	mov	r2, r0
 23fb316:	460b      	mov	r3, r1
 23fb318:	4650      	mov	r0, sl
 23fb31a:	4659      	mov	r1, fp
 23fb31c:	f7f1 f94c 	bl	23ec5b8 <__aeabi_dsub>
 23fb320:	ec41 0b10 	vmov	d0, r0, r1
 23fb324:	b003      	add	sp, #12
 23fb326:	ecbd 8b02 	vpop	{d8}
 23fb32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb32e:	4602      	mov	r2, r0
 23fb330:	460b      	mov	r3, r1
 23fb332:	4620      	mov	r0, r4
 23fb334:	4629      	mov	r1, r5
 23fb336:	f7f1 faf7 	bl	23ec928 <__aeabi_dmul>
 23fb33a:	a30d      	add	r3, pc, #52	; (adr r3, 23fb370 <__kernel_sin+0x158>)
 23fb33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb340:	f7f1 f93a 	bl	23ec5b8 <__aeabi_dsub>
 23fb344:	4632      	mov	r2, r6
 23fb346:	463b      	mov	r3, r7
 23fb348:	f7f1 faee 	bl	23ec928 <__aeabi_dmul>
 23fb34c:	4652      	mov	r2, sl
 23fb34e:	465b      	mov	r3, fp
 23fb350:	f7f1 f934 	bl	23ec5bc <__adddf3>
 23fb354:	ec41 0b10 	vmov	d0, r0, r1
 23fb358:	b003      	add	sp, #12
 23fb35a:	ecbd 8b02 	vpop	{d8}
 23fb35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb362:	ec4b ab10 	vmov	d0, sl, fp
 23fb366:	b003      	add	sp, #12
 23fb368:	ecbd 8b02 	vpop	{d8}
 23fb36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb370:	55555549 	.word	0x55555549
 23fb374:	3fc55555 	.word	0x3fc55555
 23fb378:	3fe00000 	.word	0x3fe00000
 23fb37c:	5acfd57c 	.word	0x5acfd57c
 23fb380:	3de5d93a 	.word	0x3de5d93a
 23fb384:	8a2b9ceb 	.word	0x8a2b9ceb
 23fb388:	3e5ae5e6 	.word	0x3e5ae5e6
 23fb38c:	57b1fe7d 	.word	0x57b1fe7d
 23fb390:	3ec71de3 	.word	0x3ec71de3
 23fb394:	19c161d5 	.word	0x19c161d5
 23fb398:	3f2a01a0 	.word	0x3f2a01a0
 23fb39c:	1110f8a6 	.word	0x1110f8a6
 23fb3a0:	3f811111 	.word	0x3f811111
 23fb3a4:	00000000 	.word	0x00000000

023fb3a8 <scalbn>:
 23fb3a8:	b538      	push	{r3, r4, r5, lr}
 23fb3aa:	ec53 2b10 	vmov	r2, r3, d0
 23fb3ae:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fb3b2:	469c      	mov	ip, r3
 23fb3b4:	4604      	mov	r4, r0
 23fb3b6:	bb89      	cbnz	r1, 23fb41c <scalbn+0x74>
 23fb3b8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fb3bc:	ee10 1a10 	vmov	r1, s0
 23fb3c0:	ea5c 0101 	orrs.w	r1, ip, r1
 23fb3c4:	d029      	beq.n	23fb41a <scalbn+0x72>
 23fb3c6:	4d3e      	ldr	r5, [pc, #248]	; (23fb4c0 <scalbn+0x118>)
 23fb3c8:	4619      	mov	r1, r3
 23fb3ca:	2200      	movs	r2, #0
 23fb3cc:	4b3d      	ldr	r3, [pc, #244]	; (23fb4c4 <scalbn+0x11c>)
 23fb3ce:	ee10 0a10 	vmov	r0, s0
 23fb3d2:	f7f1 faa9 	bl	23ec928 <__aeabi_dmul>
 23fb3d6:	42ac      	cmp	r4, r5
 23fb3d8:	4602      	mov	r2, r0
 23fb3da:	460b      	mov	r3, r1
 23fb3dc:	db16      	blt.n	23fb40c <scalbn+0x64>
 23fb3de:	468c      	mov	ip, r1
 23fb3e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fb3e4:	3936      	subs	r1, #54	; 0x36
 23fb3e6:	4421      	add	r1, r4
 23fb3e8:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fb3ec:	4281      	cmp	r1, r0
 23fb3ee:	dc21      	bgt.n	23fb434 <scalbn+0x8c>
 23fb3f0:	2900      	cmp	r1, #0
 23fb3f2:	dc47      	bgt.n	23fb484 <scalbn+0xdc>
 23fb3f4:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fb3f8:	da34      	bge.n	23fb464 <scalbn+0xbc>
 23fb3fa:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fb3fe:	428c      	cmp	r4, r1
 23fb400:	dc18      	bgt.n	23fb434 <scalbn+0x8c>
 23fb402:	2b00      	cmp	r3, #0
 23fb404:	a126      	add	r1, pc, #152	; (adr r1, 23fb4a0 <scalbn+0xf8>)
 23fb406:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb40a:	db43      	blt.n	23fb494 <scalbn+0xec>
 23fb40c:	a324      	add	r3, pc, #144	; (adr r3, 23fb4a0 <scalbn+0xf8>)
 23fb40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb412:	f7f1 fa89 	bl	23ec928 <__aeabi_dmul>
 23fb416:	ec41 0b10 	vmov	d0, r0, r1
 23fb41a:	bd38      	pop	{r3, r4, r5, pc}
 23fb41c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fb420:	4571      	cmp	r1, lr
 23fb422:	d1e0      	bne.n	23fb3e6 <scalbn+0x3e>
 23fb424:	ee10 0a10 	vmov	r0, s0
 23fb428:	4619      	mov	r1, r3
 23fb42a:	f7f1 f8c7 	bl	23ec5bc <__adddf3>
 23fb42e:	ec41 0b10 	vmov	d0, r0, r1
 23fb432:	bd38      	pop	{r3, r4, r5, pc}
 23fb434:	2b00      	cmp	r3, #0
 23fb436:	a11c      	add	r1, pc, #112	; (adr r1, 23fb4a8 <scalbn+0x100>)
 23fb438:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb43c:	db07      	blt.n	23fb44e <scalbn+0xa6>
 23fb43e:	a31a      	add	r3, pc, #104	; (adr r3, 23fb4a8 <scalbn+0x100>)
 23fb440:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb444:	f7f1 fa70 	bl	23ec928 <__aeabi_dmul>
 23fb448:	ec41 0b10 	vmov	d0, r0, r1
 23fb44c:	bd38      	pop	{r3, r4, r5, pc}
 23fb44e:	a118      	add	r1, pc, #96	; (adr r1, 23fb4b0 <scalbn+0x108>)
 23fb450:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb454:	a314      	add	r3, pc, #80	; (adr r3, 23fb4a8 <scalbn+0x100>)
 23fb456:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb45a:	f7f1 fa65 	bl	23ec928 <__aeabi_dmul>
 23fb45e:	ec41 0b10 	vmov	d0, r0, r1
 23fb462:	e7f3      	b.n	23fb44c <scalbn+0xa4>
 23fb464:	4818      	ldr	r0, [pc, #96]	; (23fb4c8 <scalbn+0x120>)
 23fb466:	3136      	adds	r1, #54	; 0x36
 23fb468:	4614      	mov	r4, r2
 23fb46a:	4b18      	ldr	r3, [pc, #96]	; (23fb4cc <scalbn+0x124>)
 23fb46c:	ea0c 0000 	and.w	r0, ip, r0
 23fb470:	2200      	movs	r2, #0
 23fb472:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fb476:	4620      	mov	r0, r4
 23fb478:	4629      	mov	r1, r5
 23fb47a:	f7f1 fa55 	bl	23ec928 <__aeabi_dmul>
 23fb47e:	ec41 0b10 	vmov	d0, r0, r1
 23fb482:	bd38      	pop	{r3, r4, r5, pc}
 23fb484:	4810      	ldr	r0, [pc, #64]	; (23fb4c8 <scalbn+0x120>)
 23fb486:	ea0c 0000 	and.w	r0, ip, r0
 23fb48a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fb48e:	ec43 2b10 	vmov	d0, r2, r3
 23fb492:	bd38      	pop	{r3, r4, r5, pc}
 23fb494:	a108      	add	r1, pc, #32	; (adr r1, 23fb4b8 <scalbn+0x110>)
 23fb496:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb49a:	e7b7      	b.n	23fb40c <scalbn+0x64>
 23fb49c:	f3af 8000 	nop.w
 23fb4a0:	c2f8f359 	.word	0xc2f8f359
 23fb4a4:	01a56e1f 	.word	0x01a56e1f
 23fb4a8:	8800759c 	.word	0x8800759c
 23fb4ac:	7e37e43c 	.word	0x7e37e43c
 23fb4b0:	8800759c 	.word	0x8800759c
 23fb4b4:	fe37e43c 	.word	0xfe37e43c
 23fb4b8:	c2f8f359 	.word	0xc2f8f359
 23fb4bc:	81a56e1f 	.word	0x81a56e1f
 23fb4c0:	ffff3cb0 	.word	0xffff3cb0
 23fb4c4:	43500000 	.word	0x43500000
 23fb4c8:	800fffff 	.word	0x800fffff
 23fb4cc:	3c900000 	.word	0x3c900000

023fb4d0 <finitef>:
 23fb4d0:	b082      	sub	sp, #8
 23fb4d2:	ed8d 0a01 	vstr	s0, [sp, #4]
 23fb4d6:	9801      	ldr	r0, [sp, #4]
 23fb4d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fb4dc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 23fb4e0:	bfac      	ite	ge
 23fb4e2:	2000      	movge	r0, #0
 23fb4e4:	2001      	movlt	r0, #1
 23fb4e6:	b002      	add	sp, #8
 23fb4e8:	4770      	bx	lr
 23fb4ea:	bf00      	nop

023fb4ec <atexit>:
 23fb4ec:	2300      	movs	r3, #0
 23fb4ee:	4601      	mov	r1, r0
 23fb4f0:	461a      	mov	r2, r3
 23fb4f2:	4618      	mov	r0, r3
 23fb4f4:	f000 b954 	b.w	23fb7a0 <__register_exitproc>

023fb4f8 <calloc>:
 23fb4f8:	4b02      	ldr	r3, [pc, #8]	; (23fb504 <calloc+0xc>)
 23fb4fa:	460a      	mov	r2, r1
 23fb4fc:	4601      	mov	r1, r0
 23fb4fe:	6818      	ldr	r0, [r3, #0]
 23fb500:	f000 b83c 	b.w	23fb57c <_calloc_r>
 23fb504:	10079c0c 	.word	0x10079c0c

023fb508 <isprint>:
 23fb508:	4b02      	ldr	r3, [pc, #8]	; (23fb514 <isprint+0xc>)
 23fb50a:	4418      	add	r0, r3
 23fb50c:	7840      	ldrb	r0, [r0, #1]
 23fb50e:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fb512:	4770      	bx	lr
 23fb514:	023ffe64 	.word	0x023ffe64

023fb518 <__retarget_lock_acquire_recursive>:
 23fb518:	4770      	bx	lr

023fb51a <__retarget_lock_release>:
 23fb51a:	4770      	bx	lr

023fb51c <__retarget_lock_release_recursive>:
 23fb51c:	4770      	bx	lr

023fb51e <memcpy>:
 23fb51e:	440a      	add	r2, r1
 23fb520:	1e43      	subs	r3, r0, #1
 23fb522:	4291      	cmp	r1, r2
 23fb524:	d100      	bne.n	23fb528 <memcpy+0xa>
 23fb526:	4770      	bx	lr
 23fb528:	b510      	push	{r4, lr}
 23fb52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fb52e:	4291      	cmp	r1, r2
 23fb530:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fb534:	d1f9      	bne.n	23fb52a <memcpy+0xc>
 23fb536:	bd10      	pop	{r4, pc}

023fb538 <memmove>:
 23fb538:	4288      	cmp	r0, r1
 23fb53a:	b510      	push	{r4, lr}
 23fb53c:	eb01 0402 	add.w	r4, r1, r2
 23fb540:	d902      	bls.n	23fb548 <memmove+0x10>
 23fb542:	4284      	cmp	r4, r0
 23fb544:	4623      	mov	r3, r4
 23fb546:	d807      	bhi.n	23fb558 <memmove+0x20>
 23fb548:	1e43      	subs	r3, r0, #1
 23fb54a:	42a1      	cmp	r1, r4
 23fb54c:	d008      	beq.n	23fb560 <memmove+0x28>
 23fb54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fb552:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fb556:	e7f8      	b.n	23fb54a <memmove+0x12>
 23fb558:	4402      	add	r2, r0
 23fb55a:	4601      	mov	r1, r0
 23fb55c:	428a      	cmp	r2, r1
 23fb55e:	d100      	bne.n	23fb562 <memmove+0x2a>
 23fb560:	bd10      	pop	{r4, pc}
 23fb562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fb566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fb56a:	e7f7      	b.n	23fb55c <memmove+0x24>

023fb56c <memset>:
 23fb56c:	4402      	add	r2, r0
 23fb56e:	4603      	mov	r3, r0
 23fb570:	4293      	cmp	r3, r2
 23fb572:	d100      	bne.n	23fb576 <memset+0xa>
 23fb574:	4770      	bx	lr
 23fb576:	f803 1b01 	strb.w	r1, [r3], #1
 23fb57a:	e7f9      	b.n	23fb570 <memset+0x4>

023fb57c <_calloc_r>:
 23fb57c:	434a      	muls	r2, r1
 23fb57e:	b513      	push	{r0, r1, r4, lr}
 23fb580:	4611      	mov	r1, r2
 23fb582:	9201      	str	r2, [sp, #4]
 23fb584:	f7fb ff48 	bl	23f7418 <_malloc_r>
 23fb588:	4604      	mov	r4, r0
 23fb58a:	b118      	cbz	r0, 23fb594 <_calloc_r+0x18>
 23fb58c:	9a01      	ldr	r2, [sp, #4]
 23fb58e:	2100      	movs	r1, #0
 23fb590:	f7ff ffec 	bl	23fb56c <memset>
 23fb594:	4620      	mov	r0, r4
 23fb596:	b002      	add	sp, #8
 23fb598:	bd10      	pop	{r4, pc}
	...

023fb59c <srand>:
 23fb59c:	b538      	push	{r3, r4, r5, lr}
 23fb59e:	4b10      	ldr	r3, [pc, #64]	; (23fb5e0 <srand+0x44>)
 23fb5a0:	4604      	mov	r4, r0
 23fb5a2:	681d      	ldr	r5, [r3, #0]
 23fb5a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb5a6:	b9b3      	cbnz	r3, 23fb5d6 <srand+0x3a>
 23fb5a8:	2018      	movs	r0, #24
 23fb5aa:	f7fb feef 	bl	23f738c <malloc>
 23fb5ae:	4602      	mov	r2, r0
 23fb5b0:	63a8      	str	r0, [r5, #56]	; 0x38
 23fb5b2:	b920      	cbnz	r0, 23fb5be <srand+0x22>
 23fb5b4:	4b0b      	ldr	r3, [pc, #44]	; (23fb5e4 <srand+0x48>)
 23fb5b6:	2142      	movs	r1, #66	; 0x42
 23fb5b8:	480b      	ldr	r0, [pc, #44]	; (23fb5e8 <srand+0x4c>)
 23fb5ba:	f7fb ff49 	bl	23f7450 <__assert_func>
 23fb5be:	490b      	ldr	r1, [pc, #44]	; (23fb5ec <srand+0x50>)
 23fb5c0:	4b0b      	ldr	r3, [pc, #44]	; (23fb5f0 <srand+0x54>)
 23fb5c2:	e9c0 1300 	strd	r1, r3, [r0]
 23fb5c6:	4b0b      	ldr	r3, [pc, #44]	; (23fb5f4 <srand+0x58>)
 23fb5c8:	2100      	movs	r1, #0
 23fb5ca:	6083      	str	r3, [r0, #8]
 23fb5cc:	230b      	movs	r3, #11
 23fb5ce:	8183      	strh	r3, [r0, #12]
 23fb5d0:	2001      	movs	r0, #1
 23fb5d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fb5d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb5d8:	2200      	movs	r2, #0
 23fb5da:	611c      	str	r4, [r3, #16]
 23fb5dc:	615a      	str	r2, [r3, #20]
 23fb5de:	bd38      	pop	{r3, r4, r5, pc}
 23fb5e0:	10079c0c 	.word	0x10079c0c
 23fb5e4:	023ffdd0 	.word	0x023ffdd0
 23fb5e8:	023ffde7 	.word	0x023ffde7
 23fb5ec:	abcd330e 	.word	0xabcd330e
 23fb5f0:	e66d1234 	.word	0xe66d1234
 23fb5f4:	0005deec 	.word	0x0005deec

023fb5f8 <strchr>:
 23fb5f8:	b2c9      	uxtb	r1, r1
 23fb5fa:	4603      	mov	r3, r0
 23fb5fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb600:	b11a      	cbz	r2, 23fb60a <strchr+0x12>
 23fb602:	428a      	cmp	r2, r1
 23fb604:	d1f9      	bne.n	23fb5fa <strchr+0x2>
 23fb606:	4618      	mov	r0, r3
 23fb608:	4770      	bx	lr
 23fb60a:	2900      	cmp	r1, #0
 23fb60c:	bf18      	it	ne
 23fb60e:	2300      	movne	r3, #0
 23fb610:	e7f9      	b.n	23fb606 <strchr+0xe>

023fb612 <strchrnul>:
 23fb612:	b510      	push	{r4, lr}
 23fb614:	4604      	mov	r4, r0
 23fb616:	f7ff ffef 	bl	23fb5f8 <strchr>
 23fb61a:	b918      	cbnz	r0, 23fb624 <strchrnul+0x12>
 23fb61c:	4620      	mov	r0, r4
 23fb61e:	f7f1 fed3 	bl	23ed3c8 <strlen>
 23fb622:	4420      	add	r0, r4
 23fb624:	bd10      	pop	{r4, pc}

023fb626 <strcpy>:
 23fb626:	4603      	mov	r3, r0
 23fb628:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fb62c:	f803 2b01 	strb.w	r2, [r3], #1
 23fb630:	2a00      	cmp	r2, #0
 23fb632:	d1f9      	bne.n	23fb628 <strcpy+0x2>
 23fb634:	4770      	bx	lr

023fb636 <strncmp>:
 23fb636:	b510      	push	{r4, lr}
 23fb638:	b17a      	cbz	r2, 23fb65a <strncmp+0x24>
 23fb63a:	4603      	mov	r3, r0
 23fb63c:	3901      	subs	r1, #1
 23fb63e:	1884      	adds	r4, r0, r2
 23fb640:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb644:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fb648:	4290      	cmp	r0, r2
 23fb64a:	d101      	bne.n	23fb650 <strncmp+0x1a>
 23fb64c:	42a3      	cmp	r3, r4
 23fb64e:	d101      	bne.n	23fb654 <strncmp+0x1e>
 23fb650:	1a80      	subs	r0, r0, r2
 23fb652:	bd10      	pop	{r4, pc}
 23fb654:	2800      	cmp	r0, #0
 23fb656:	d1f3      	bne.n	23fb640 <strncmp+0xa>
 23fb658:	e7fa      	b.n	23fb650 <strncmp+0x1a>
 23fb65a:	4610      	mov	r0, r2
 23fb65c:	e7f9      	b.n	23fb652 <strncmp+0x1c>

023fb65e <strrchr>:
 23fb65e:	b538      	push	{r3, r4, r5, lr}
 23fb660:	4603      	mov	r3, r0
 23fb662:	460c      	mov	r4, r1
 23fb664:	b969      	cbnz	r1, 23fb682 <strrchr+0x24>
 23fb666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fb66a:	f7ff bfc5 	b.w	23fb5f8 <strchr>
 23fb66e:	1c43      	adds	r3, r0, #1
 23fb670:	4605      	mov	r5, r0
 23fb672:	4621      	mov	r1, r4
 23fb674:	4618      	mov	r0, r3
 23fb676:	f7ff ffbf 	bl	23fb5f8 <strchr>
 23fb67a:	2800      	cmp	r0, #0
 23fb67c:	d1f7      	bne.n	23fb66e <strrchr+0x10>
 23fb67e:	4628      	mov	r0, r5
 23fb680:	bd38      	pop	{r3, r4, r5, pc}
 23fb682:	2500      	movs	r5, #0
 23fb684:	e7f5      	b.n	23fb672 <strrchr+0x14>
	...

023fb688 <_strtol_l.constprop.0>:
 23fb688:	2b01      	cmp	r3, #1
 23fb68a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb68e:	d001      	beq.n	23fb694 <_strtol_l.constprop.0+0xc>
 23fb690:	2b24      	cmp	r3, #36	; 0x24
 23fb692:	d906      	bls.n	23fb6a2 <_strtol_l.constprop.0+0x1a>
 23fb694:	f7fb fece 	bl	23f7434 <__errno>
 23fb698:	2316      	movs	r3, #22
 23fb69a:	6003      	str	r3, [r0, #0]
 23fb69c:	2000      	movs	r0, #0
 23fb69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fb6a2:	460d      	mov	r5, r1
 23fb6a4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fb788 <_strtol_l.constprop.0+0x100>
 23fb6a8:	462e      	mov	r6, r5
 23fb6aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fb6ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fb6b2:	f017 0708 	ands.w	r7, r7, #8
 23fb6b6:	d1f7      	bne.n	23fb6a8 <_strtol_l.constprop.0+0x20>
 23fb6b8:	2c2d      	cmp	r4, #45	; 0x2d
 23fb6ba:	d132      	bne.n	23fb722 <_strtol_l.constprop.0+0x9a>
 23fb6bc:	782c      	ldrb	r4, [r5, #0]
 23fb6be:	2701      	movs	r7, #1
 23fb6c0:	1cb5      	adds	r5, r6, #2
 23fb6c2:	2b00      	cmp	r3, #0
 23fb6c4:	d05b      	beq.n	23fb77e <_strtol_l.constprop.0+0xf6>
 23fb6c6:	2b10      	cmp	r3, #16
 23fb6c8:	d109      	bne.n	23fb6de <_strtol_l.constprop.0+0x56>
 23fb6ca:	2c30      	cmp	r4, #48	; 0x30
 23fb6cc:	d107      	bne.n	23fb6de <_strtol_l.constprop.0+0x56>
 23fb6ce:	782c      	ldrb	r4, [r5, #0]
 23fb6d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fb6d4:	2c58      	cmp	r4, #88	; 0x58
 23fb6d6:	d14d      	bne.n	23fb774 <_strtol_l.constprop.0+0xec>
 23fb6d8:	786c      	ldrb	r4, [r5, #1]
 23fb6da:	2310      	movs	r3, #16
 23fb6dc:	3502      	adds	r5, #2
 23fb6de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fb6e2:	f04f 0c00 	mov.w	ip, #0
 23fb6e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fb6ea:	4666      	mov	r6, ip
 23fb6ec:	fbb8 f9f3 	udiv	r9, r8, r3
 23fb6f0:	fb03 8a19 	mls	sl, r3, r9, r8
 23fb6f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fb6f8:	f1be 0f09 	cmp.w	lr, #9
 23fb6fc:	d816      	bhi.n	23fb72c <_strtol_l.constprop.0+0xa4>
 23fb6fe:	4674      	mov	r4, lr
 23fb700:	42a3      	cmp	r3, r4
 23fb702:	dd24      	ble.n	23fb74e <_strtol_l.constprop.0+0xc6>
 23fb704:	f1bc 0f00 	cmp.w	ip, #0
 23fb708:	db1e      	blt.n	23fb748 <_strtol_l.constprop.0+0xc0>
 23fb70a:	45b1      	cmp	r9, r6
 23fb70c:	d31c      	bcc.n	23fb748 <_strtol_l.constprop.0+0xc0>
 23fb70e:	d101      	bne.n	23fb714 <_strtol_l.constprop.0+0x8c>
 23fb710:	45a2      	cmp	sl, r4
 23fb712:	db19      	blt.n	23fb748 <_strtol_l.constprop.0+0xc0>
 23fb714:	fb06 4603 	mla	r6, r6, r3, r4
 23fb718:	f04f 0c01 	mov.w	ip, #1
 23fb71c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fb720:	e7e8      	b.n	23fb6f4 <_strtol_l.constprop.0+0x6c>
 23fb722:	2c2b      	cmp	r4, #43	; 0x2b
 23fb724:	bf04      	itt	eq
 23fb726:	782c      	ldrbeq	r4, [r5, #0]
 23fb728:	1cb5      	addeq	r5, r6, #2
 23fb72a:	e7ca      	b.n	23fb6c2 <_strtol_l.constprop.0+0x3a>
 23fb72c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fb730:	f1be 0f19 	cmp.w	lr, #25
 23fb734:	d801      	bhi.n	23fb73a <_strtol_l.constprop.0+0xb2>
 23fb736:	3c37      	subs	r4, #55	; 0x37
 23fb738:	e7e2      	b.n	23fb700 <_strtol_l.constprop.0+0x78>
 23fb73a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fb73e:	f1be 0f19 	cmp.w	lr, #25
 23fb742:	d804      	bhi.n	23fb74e <_strtol_l.constprop.0+0xc6>
 23fb744:	3c57      	subs	r4, #87	; 0x57
 23fb746:	e7db      	b.n	23fb700 <_strtol_l.constprop.0+0x78>
 23fb748:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb74c:	e7e6      	b.n	23fb71c <_strtol_l.constprop.0+0x94>
 23fb74e:	f1bc 0f00 	cmp.w	ip, #0
 23fb752:	da05      	bge.n	23fb760 <_strtol_l.constprop.0+0xd8>
 23fb754:	2322      	movs	r3, #34	; 0x22
 23fb756:	4646      	mov	r6, r8
 23fb758:	6003      	str	r3, [r0, #0]
 23fb75a:	b942      	cbnz	r2, 23fb76e <_strtol_l.constprop.0+0xe6>
 23fb75c:	4630      	mov	r0, r6
 23fb75e:	e79e      	b.n	23fb69e <_strtol_l.constprop.0+0x16>
 23fb760:	b107      	cbz	r7, 23fb764 <_strtol_l.constprop.0+0xdc>
 23fb762:	4276      	negs	r6, r6
 23fb764:	2a00      	cmp	r2, #0
 23fb766:	d0f9      	beq.n	23fb75c <_strtol_l.constprop.0+0xd4>
 23fb768:	f1bc 0f00 	cmp.w	ip, #0
 23fb76c:	d000      	beq.n	23fb770 <_strtol_l.constprop.0+0xe8>
 23fb76e:	1e69      	subs	r1, r5, #1
 23fb770:	6011      	str	r1, [r2, #0]
 23fb772:	e7f3      	b.n	23fb75c <_strtol_l.constprop.0+0xd4>
 23fb774:	2430      	movs	r4, #48	; 0x30
 23fb776:	2b00      	cmp	r3, #0
 23fb778:	d1b1      	bne.n	23fb6de <_strtol_l.constprop.0+0x56>
 23fb77a:	2308      	movs	r3, #8
 23fb77c:	e7af      	b.n	23fb6de <_strtol_l.constprop.0+0x56>
 23fb77e:	2c30      	cmp	r4, #48	; 0x30
 23fb780:	d0a5      	beq.n	23fb6ce <_strtol_l.constprop.0+0x46>
 23fb782:	230a      	movs	r3, #10
 23fb784:	e7ab      	b.n	23fb6de <_strtol_l.constprop.0+0x56>
 23fb786:	bf00      	nop
 23fb788:	023ffe65 	.word	0x023ffe65

023fb78c <strtol>:
 23fb78c:	4613      	mov	r3, r2
 23fb78e:	460a      	mov	r2, r1
 23fb790:	4601      	mov	r1, r0
 23fb792:	4802      	ldr	r0, [pc, #8]	; (23fb79c <strtol+0x10>)
 23fb794:	6800      	ldr	r0, [r0, #0]
 23fb796:	f7ff bf77 	b.w	23fb688 <_strtol_l.constprop.0>
 23fb79a:	bf00      	nop
 23fb79c:	10079c0c 	.word	0x10079c0c

023fb7a0 <__register_exitproc>:
 23fb7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fb7a4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fb864 <__register_exitproc+0xc4>
 23fb7a8:	4606      	mov	r6, r0
 23fb7aa:	461f      	mov	r7, r3
 23fb7ac:	460d      	mov	r5, r1
 23fb7ae:	f8d8 0000 	ldr.w	r0, [r8]
 23fb7b2:	4691      	mov	r9, r2
 23fb7b4:	f7ff feb0 	bl	23fb518 <__retarget_lock_acquire_recursive>
 23fb7b8:	4b26      	ldr	r3, [pc, #152]	; (23fb854 <__register_exitproc+0xb4>)
 23fb7ba:	681c      	ldr	r4, [r3, #0]
 23fb7bc:	b934      	cbnz	r4, 23fb7cc <__register_exitproc+0x2c>
 23fb7be:	4c26      	ldr	r4, [pc, #152]	; (23fb858 <__register_exitproc+0xb8>)
 23fb7c0:	601c      	str	r4, [r3, #0]
 23fb7c2:	4b26      	ldr	r3, [pc, #152]	; (23fb85c <__register_exitproc+0xbc>)
 23fb7c4:	b113      	cbz	r3, 23fb7cc <__register_exitproc+0x2c>
 23fb7c6:	681b      	ldr	r3, [r3, #0]
 23fb7c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fb7cc:	6863      	ldr	r3, [r4, #4]
 23fb7ce:	2b1f      	cmp	r3, #31
 23fb7d0:	dd07      	ble.n	23fb7e2 <__register_exitproc+0x42>
 23fb7d2:	f8d8 0000 	ldr.w	r0, [r8]
 23fb7d6:	f7ff fea1 	bl	23fb51c <__retarget_lock_release_recursive>
 23fb7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fb7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fb7e2:	b35e      	cbz	r6, 23fb83c <__register_exitproc+0x9c>
 23fb7e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fb7e8:	b988      	cbnz	r0, 23fb80e <__register_exitproc+0x6e>
 23fb7ea:	4b1d      	ldr	r3, [pc, #116]	; (23fb860 <__register_exitproc+0xc0>)
 23fb7ec:	b923      	cbnz	r3, 23fb7f8 <__register_exitproc+0x58>
 23fb7ee:	f8d8 0000 	ldr.w	r0, [r8]
 23fb7f2:	f7ff fe92 	bl	23fb51a <__retarget_lock_release>
 23fb7f6:	e7f0      	b.n	23fb7da <__register_exitproc+0x3a>
 23fb7f8:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fb7fc:	f7fb fdc6 	bl	23f738c <malloc>
 23fb800:	2800      	cmp	r0, #0
 23fb802:	d0f4      	beq.n	23fb7ee <__register_exitproc+0x4e>
 23fb804:	2300      	movs	r3, #0
 23fb806:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fb80a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fb80e:	6863      	ldr	r3, [r4, #4]
 23fb810:	2201      	movs	r2, #1
 23fb812:	2e02      	cmp	r6, #2
 23fb814:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fb818:	fa02 f203 	lsl.w	r2, r2, r3
 23fb81c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fb820:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fb824:	ea43 0302 	orr.w	r3, r3, r2
 23fb828:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fb82c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fb830:	bf02      	ittt	eq
 23fb832:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fb836:	4313      	orreq	r3, r2
 23fb838:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fb83c:	6863      	ldr	r3, [r4, #4]
 23fb83e:	f8d8 0000 	ldr.w	r0, [r8]
 23fb842:	1c5a      	adds	r2, r3, #1
 23fb844:	3302      	adds	r3, #2
 23fb846:	6062      	str	r2, [r4, #4]
 23fb848:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fb84c:	f7ff fe66 	bl	23fb51c <__retarget_lock_release_recursive>
 23fb850:	2000      	movs	r0, #0
 23fb852:	e7c4      	b.n	23fb7de <__register_exitproc+0x3e>
 23fb854:	1007aff0 	.word	0x1007aff0
 23fb858:	1007af64 	.word	0x1007af64
 23fb85c:	00000000 	.word	0x00000000
 23fb860:	023f738d 	.word	0x023f738d
 23fb864:	10079c70 	.word	0x10079c70

023fb868 <__DelayMs_veneer>:
 23fb868:	b401      	push	{r0}
 23fb86a:	4802      	ldr	r0, [pc, #8]	; (23fb874 <__DelayMs_veneer+0xc>)
 23fb86c:	4684      	mov	ip, r0
 23fb86e:	bc01      	pop	{r0}
 23fb870:	4760      	bx	ip
 23fb872:	bf00      	nop
 23fb874:	1010a995 	.word	0x1010a995

023fb878 <__DelayUs_veneer>:
 23fb878:	b401      	push	{r0}
 23fb87a:	4802      	ldr	r0, [pc, #8]	; (23fb884 <__DelayUs_veneer+0xc>)
 23fb87c:	4684      	mov	ip, r0
 23fb87e:	bc01      	pop	{r0}
 23fb880:	4760      	bx	ip
 23fb882:	bf00      	nop
 23fb884:	1010a949 	.word	0x1010a949

023fb888 <__io_assert_failed_veneer>:
 23fb888:	b401      	push	{r0}
 23fb88a:	4802      	ldr	r0, [pc, #8]	; (23fb894 <__io_assert_failed_veneer+0xc>)
 23fb88c:	4684      	mov	ip, r0
 23fb88e:	bc01      	pop	{r0}
 23fb890:	4760      	bx	ip
 23fb892:	bf00      	nop
 23fb894:	1010a871 	.word	0x1010a871

023fb898 <link_const_data_start>:
 23fb898:	00042783 	.word	0x00042783
 23fb89c:	023fc454 	.word	0x023fc454
 23fb8a0:	023fc45e 	.word	0x023fc45e
 23fb8a4:	00000001 	.word	0x00000001
 23fb8a8:	00000f78 	.word	0x00000f78
 23fb8ac:	00003e80 	.word	0x00003e80
 23fb8b0:	00000001 	.word	0x00000001
 23fb8b4:	00003e80 	.word	0x00003e80
	...
 23fb8c4:	3d800000 	.word	0x3d800000
 23fb8c8:	467a0000 	.word	0x467a0000
 23fb8cc:	00000001 	.word	0x00000001
 23fb8d0:	10079994 	.word	0x10079994
	...
 23fb8dc:	000000ff 	.word	0x000000ff
 23fb8e0:	00000000 	.word	0x00000000
 23fb8e4:	00000009 	.word	0x00000009
 23fb8e8:	00000001 	.word	0x00000001
 23fb8ec:	023fcc50 	.word	0x023fcc50
 23fb8f0:	00000002 	.word	0x00000002
 23fb8f4:	00000001 	.word	0x00000001
 23fb8f8:	023fc46c 	.word	0x023fc46c
 23fb8fc:	00000fa0 	.word	0x00000fa0
 23fb900:	00000004 	.word	0x00000004
 23fb904:	00090000 	.word	0x00090000
 23fb908:	00000001 	.word	0x00000001
 23fb90c:	000003e8 	.word	0x000003e8
 23fb910:	3f4ccccd 	.word	0x3f4ccccd
 23fb914:	000001f4 	.word	0x000001f4
 23fb918:	00000000 	.word	0x00000000
 23fb91c:	10079970 	.word	0x10079970
	...
 23fb928:	023f4571 	.word	0x023f4571
 23fb92c:	023f43cd 	.word	0x023f43cd
	...
 23fb940:	023f4625 	.word	0x023f4625
 23fb944:	00000000 	.word	0x00000000
 23fb948:	023f4b05 	.word	0x023f4b05
 23fb94c:	023f4cc5 	.word	0x023f4cc5
	...
 23fb960:	023f55bd 	.word	0x023f55bd
 23fb964:	00000000 	.word	0x00000000
 23fb968:	023f55d1 	.word	0x023f55d1
 23fb96c:	023f4de9 	.word	0x023f4de9
	...
 23fb980:	023f514d 	.word	0x023f514d
 23fb984:	00000000 	.word	0x00000000
 23fb988:	023f52dd 	.word	0x023f52dd
 23fb98c:	023f5399 	.word	0x023f5399
	...
 23fb9a0:	023f514d 	.word	0x023f514d
 23fb9a4:	00000000 	.word	0x00000000
 23fb9a8:	023f5261 	.word	0x023f5261
 23fb9ac:	023f53f9 	.word	0x023f53f9
	...

023fb9c0 <dynalib_user>:
 23fb9c0:	023ed3d9 023ed401 023ed405 00000000     ..>...>...>.....
 23fb9d0:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fb9e0:	6c617574 6b6e5500 6e776f6e 70797420     tual.Unknown typ
 23fb9f0:	4f4e0065 45505954 4f4c4600 32335441     e.NOTYPE.FLOAT32
 23fba00:	4e495500 53003854 4e495254 4f420047     .UINT8.STRING.BO
 23fba10:	49004c4f 3631544e 4d4f4300 58454c50     OL.INT16.COMPLEX
 23fba20:	46003436 54414f4c 46003631 54414f4c     64.FLOAT16.FLOAT
 23fba30:	43003436 4c504d4f 32315845 49550038     64.COMPLEX128.UI
 23fba40:	3436544e 53455200 4352554f 41560045     NT64.RESOURCE.VA
 23fba50:	4e414952 49550054 3233544e 00000000     RIANT.UINT32....

023fba60 <CSWTCH.24>:
 23fba60:	023fb9f2 023fb9f9 023fba57 023fba01     ..?...?.W.?...?.
 23fba70:	023fba3f 023fba07 023fba0e 023fba13     ?.?...?...?...?.
 23fba80:	023fba19 023fba02 023fba23 023fba2b     ..?...?.#.?.+.?.
 23fba90:	023fba33 023fba3e 023fba45 023fba4e     3.?.>.?.E.?.N.?.
 23fbaa0:	023fba56                                V.?.

023fbaa4 <arm_cfft_sR_f32_len128>:
 23fbaa4:	00000080 023fbc54 023fbab4 000000d0     ....T.?...?.....

023fbab4 <armBitRevIndexTable128>:
 23fbab4:	02000008 00400010 02400018 00800020     ......@...@. ...
 23fbac4:	02800028 00c00030 02c00038 01000040     (...0...8...@...
 23fbad4:	03000048 01400050 03400058 01800060     H...P.@.X.@.`...
 23fbae4:	03800068 01c00070 03c00078 02000080     h...p...x.......
 23fbaf4:	02080088 03000090 02480098 020800a0     ..........H.....
 23fbb04:	028800a8 00c800b0 02c800b8 010800c0     ................
 23fbb14:	030800c8 014800d0 034800d8 018800e0     ......H...H.....
 23fbb24:	038800e8 01c800f0 03c800f8 02100108     ................
 23fbb34:	01400110 02500118 03000120 02900128     ..@...P. ...(...
 23fbb44:	01480130 02d00138 03100148 03500158     0.H.8...H...X.P.
 23fbb54:	01900160 03900168 01d00170 03d00178     `...h...p...x...
 23fbb64:	02400180 02180188 03400190 02580198     ..@.......@...X.
 23fbb74:	024801a0 029801a8 034801b0 02d801b8     ..H.......H.....
 23fbb84:	025001c0 031801c8 035001d0 035801d8     ..P.......P...X.
 23fbb94:	025801e0 039801e8 035801f0 03d801f8     ..X.......X.....
 23fbba4:	02200208 02400210 02600218 02a00228     .. ...@...`.(...
 23fbbb4:	02600230 02e00238 03000240 03200248     0.`.8...@...H. .
 23fbbc4:	03400250 03600258 03200260 03a00268     P.@.X.`.`. .h...
 23fbbd4:	03600270 03e00278 02a00288 03800290     p.`.x...........
 23fbbe4:	03a00298 038802b0 02e802b8 038002c0     ................
 23fbbf4:	032802c8 039002d0 036802d8 03a002e0     ..(.......h.....
 23fbc04:	03a802e8 039802f0 03e802f8 03200308     .............. .
 23fbc14:	03400310 03600318 03880328 03600330     ..@...`.(...0.`.
 23fbc24:	03980338 03600348 03700358 03b00368     8...H.`.X.p.h...
 23fbc34:	03f00378 03a00388 03c00390 03e00398     x...............
 23fbc44:	03c803b0 03e803b8 03e003c8 03f003d8     ................

023fbc54 <twiddleCoef_128>:
 23fbc54:	3f800000 00000000 3f7fb10f 3d48fb2f     ...?.......?/.H=
 23fbc64:	3f7ec46d 3dc8bd36 3f7d3aac 3e164083     m.~?6..=.:}?.@.>
 23fbc74:	3f7b14be 3e47c5c2 3f7853f8 3e78cfcc     ..{?..G>.Sx?..x>
 23fbc84:	3f74fa0b 3e94a031 3f710908 3eac7cd4     ..t?1..>..q?.|.>
 23fbc94:	3f6c835e 3ec3ef15 3f676bd8 3edae880     ^.l?...>.kg?...>
 23fbca4:	3f61c598 3ef15aea 3f5b941a 3f039c3d     ..a?.Z.>..[?=..?
 23fbcb4:	3f54db31 3f0e39da 3f4d9f02 3f187fc0     1.T?.9.?..M?...?
 23fbcc4:	3f45e403 3f226799 3f3daef9 3f2beb4a     ..E?.g"?..=?J.+?
 23fbcd4:	3f3504f3 3f3504f3 3f2beb4a 3f3daef9     ..5?..5?J.+?..=?
 23fbce4:	3f226799 3f45e403 3f187fc0 3f4d9f02     .g"?..E?...?..M?
 23fbcf4:	3f0e39da 3f54db31 3f039c3d 3f5b941a     .9.?1.T?=..?..[?
 23fbd04:	3ef15aea 3f61c598 3edae880 3f676bd8     .Z.>..a?...>.kg?
 23fbd14:	3ec3ef15 3f6c835e 3eac7cd4 3f710908     ...>^.l?.|.>..q?
 23fbd24:	3e94a031 3f74fa0b 3e78cfcc 3f7853f8     1..>..t?..x>.Sx?
 23fbd34:	3e47c5c2 3f7b14be 3e164083 3f7d3aac     ..G>..{?.@.>.:}?
 23fbd44:	3dc8bd36 3f7ec46d 3d48fb2f 3f7fb10f     6..=m.~?/.H=...?
 23fbd54:	00000000 3f800000 bd48fb2f 3f7fb10f     .......?/.H....?
 23fbd64:	bdc8bd36 3f7ec46d be164083 3f7d3aac     6...m.~?.@...:}?
 23fbd74:	be47c5c2 3f7b14be be78cfcc 3f7853f8     ..G...{?..x..Sx?
 23fbd84:	be94a031 3f74fa0b beac7cd4 3f710908     1.....t?.|....q?
 23fbd94:	bec3ef15 3f6c835e bedae880 3f676bd8     ....^.l?.....kg?
 23fbda4:	bef15aea 3f61c598 bf039c3d 3f5b941a     .Z....a?=.....[?
 23fbdb4:	bf0e39da 3f54db31 bf187fc0 3f4d9f02     .9..1.T?......M?
 23fbdc4:	bf226799 3f45e403 bf2beb4a 3f3daef9     .g"...E?J.+...=?
 23fbdd4:	bf3504f3 3f3504f3 bf3daef9 3f2beb4a     ..5...5?..=.J.+?
 23fbde4:	bf45e403 3f226799 bf4d9f02 3f187fc0     ..E..g"?..M....?
 23fbdf4:	bf54db31 3f0e39da bf5b941a 3f039c3d     1.T..9.?..[.=..?
 23fbe04:	bf61c598 3ef15aea bf676bd8 3edae880     ..a..Z.>.kg....>
 23fbe14:	bf6c835e 3ec3ef15 bf710908 3eac7cd4     ^.l....>..q..|.>
 23fbe24:	bf74fa0b 3e94a031 bf7853f8 3e78cfcc     ..t.1..>.Sx...x>
 23fbe34:	bf7b14be 3e47c5c2 bf7d3aac 3e164083     ..{...G>.:}..@.>
 23fbe44:	bf7ec46d 3dc8bd36 bf7fb10f 3d48fb2f     m.~.6..=..../.H=
 23fbe54:	bf800000 00000000 bf7fb10f bd48fb2f     ............/.H.
 23fbe64:	bf7ec46d bdc8bd36 bf7d3aac be164083     m.~.6....:}..@..
 23fbe74:	bf7b14be be47c5c2 bf7853f8 be78cfcc     ..{...G..Sx...x.
 23fbe84:	bf74fa0b be94a031 bf710908 beac7cd4     ..t.1.....q..|..
 23fbe94:	bf6c835e bec3ef15 bf676bd8 bedae880     ^.l......kg.....
 23fbea4:	bf61c598 bef15aea bf5b941a bf039c3d     ..a..Z....[.=...
 23fbeb4:	bf54db31 bf0e39da bf4d9f02 bf187fc0     1.T..9....M.....
 23fbec4:	bf45e403 bf226799 bf3daef9 bf2beb4a     ..E..g"...=.J.+.
 23fbed4:	bf3504f3 bf3504f3 bf2beb4a bf3daef9     ..5...5.J.+...=.
 23fbee4:	bf226799 bf45e403 bf187fc0 bf4d9f02     .g"...E.......M.
 23fbef4:	bf0e39da bf54db31 bf039c3d bf5b941a     .9..1.T.=.....[.
 23fbf04:	bef15aea bf61c598 bedae880 bf676bd8     .Z....a......kg.
 23fbf14:	bec3ef15 bf6c835e beac7cd4 bf710908     ....^.l..|....q.
 23fbf24:	be94a031 bf74fa0b be78cfcc bf7853f8     1.....t...x..Sx.
 23fbf34:	be47c5c2 bf7b14be be164083 bf7d3aac     ..G...{..@...:}.
 23fbf44:	bdc8bd36 bf7ec46d bd48fb2f bf7fb10f     6...m.~./.H.....
 23fbf54:	80000000 bf800000 3d48fb2f bf7fb10f     ......../.H=....
 23fbf64:	3dc8bd36 bf7ec46d 3e164083 bf7d3aac     6..=m.~..@.>.:}.
 23fbf74:	3e47c5c2 bf7b14be 3e78cfcc bf7853f8     ..G>..{...x>.Sx.
 23fbf84:	3e94a031 bf74fa0b 3eac7cd4 bf710908     1..>..t..|.>..q.
 23fbf94:	3ec3ef15 bf6c835e 3edae880 bf676bd8     ...>^.l....>.kg.
 23fbfa4:	3ef15aea bf61c598 3f039c3d bf5b941a     .Z.>..a.=..?..[.
 23fbfb4:	3f0e39da bf54db31 3f187fc0 bf4d9f02     .9.?1.T....?..M.
 23fbfc4:	3f226799 bf45e403 3f2beb4a bf3daef9     .g"?..E.J.+?..=.
 23fbfd4:	3f3504f3 bf3504f3 3f3daef9 bf2beb4a     ..5?..5...=?J.+.
 23fbfe4:	3f45e403 bf226799 3f4d9f02 bf187fc0     ..E?.g"...M?....
 23fbff4:	3f54db31 bf0e39da 3f5b941a bf039c3d     1.T?.9....[?=...
 23fc004:	3f61c598 bef15aea 3f676bd8 bedae880     ..a?.Z...kg?....
 23fc014:	3f6c835e bec3ef15 3f710908 beac7cd4     ^.l?......q?.|..
 23fc024:	3f74fa0b be94a031 3f7853f8 be78cfcc     ..t?1....Sx?..x.
 23fc034:	3f7b14be be47c5c2 3f7d3aac be164083     ..{?..G..:}?.@..
 23fc044:	3f7ec46d bdc8bd36 3f7fb10f bd48fb2f     m.~?6......?/.H.

023fc054 <twiddleCoef_rfft_256>:
 23fc054:	00000000 3f800000 3cc90ab0 3f7fec43     .......?...<C..?
 23fc064:	3d48fb2f 3f7fb10f 3d96a905 3f7f4e6d     /.H=...?...=mN.?
 23fc074:	3dc8bd36 3f7ec46d 3dfab273 3f7e1324     6..=m.~?s..=$.~?
 23fc084:	3e164083 3f7d3aac 3e2f10a2 3f7c3b28     .@.>.:}?../>(;|?
 23fc094:	3e47c5c2 3f7b14be 3e605c13 3f79c79d     ..G>..{?.\`>..y?
 23fc0a4:	3e78cfcc 3f7853f8 3e888e93 3f76ba07     ..x>.Sx?...>..v?
 23fc0b4:	3e94a031 3f74fa0b 3ea09ae5 3f731447     1..>..t?...>G.s?
 23fc0c4:	3eac7cd4 3f710908 3eb8442a 3f6ed89e     .|.>..q?*D.>..n?
 23fc0d4:	3ec3ef15 3f6c835e 3ecf7bca 3f6a09a7     ...>^.l?.{.>..j?
 23fc0e4:	3edae880 3f676bd8 3ee63375 3f64aa59     ...>.kg?u3.>Y.d?
 23fc0f4:	3ef15aea 3f61c598 3efc5d27 3f5ebe05     .Z.>..a?'].>..^?
 23fc104:	3f039c3d 3f5b941a 3f08f59b 3f584853     =..?..[?...?SHX?
 23fc114:	3f0e39da 3f54db31 3f13682a 3f514d3d     .9.?1.T?*h.?=MQ?
 23fc124:	3f187fc0 3f4d9f02 3f1d7fd1 3f49d112     ...?..M?...?..I?
 23fc134:	3f226799 3f45e403 3f273656 3f41d870     .g"?..E?V6'?p.A?
 23fc144:	3f2beb4a 3f3daef9 3f3085bb 3f396842     J.+?..=?..0?Bh9?
 23fc154:	3f3504f3 3f3504f3 3f396842 3f3085bb     ..5?..5?Bh9?..0?
 23fc164:	3f3daef9 3f2beb4a 3f41d870 3f273656     ..=?J.+?p.A?V6'?
 23fc174:	3f45e403 3f226799 3f49d112 3f1d7fd1     ..E?.g"?..I?...?
 23fc184:	3f4d9f02 3f187fc0 3f514d3d 3f13682a     ..M?...?=MQ?*h.?
 23fc194:	3f54db31 3f0e39da 3f584853 3f08f59b     1.T?.9.?SHX?...?
 23fc1a4:	3f5b941a 3f039c3d 3f5ebe05 3efc5d27     ..[?=..?..^?'].>
 23fc1b4:	3f61c598 3ef15aea 3f64aa59 3ee63375     ..a?.Z.>Y.d?u3.>
 23fc1c4:	3f676bd8 3edae880 3f6a09a7 3ecf7bca     .kg?...>..j?.{.>
 23fc1d4:	3f6c835e 3ec3ef15 3f6ed89e 3eb8442a     ^.l?...>..n?*D.>
 23fc1e4:	3f710908 3eac7cd4 3f731447 3ea09ae5     ..q?.|.>G.s?...>
 23fc1f4:	3f74fa0b 3e94a031 3f76ba07 3e888e93     ..t?1..>..v?...>
 23fc204:	3f7853f8 3e78cfcc 3f79c79d 3e605c13     .Sx?..x>..y?.\`>
 23fc214:	3f7b14be 3e47c5c2 3f7c3b28 3e2f10a2     ..{?..G>(;|?../>
 23fc224:	3f7d3aac 3e164083 3f7e1324 3dfab273     .:}?.@.>$.~?s..=
 23fc234:	3f7ec46d 3dc8bd36 3f7f4e6d 3d96a905     m.~?6..=mN.?...=
 23fc244:	3f7fb10f 3d48fb2f 3f7fec43 3cc90ab0     ...?/.H=C..?...<
 23fc254:	3f800000 00000000 3f7fec43 bcc90ab0     ...?....C..?....
 23fc264:	3f7fb10f bd48fb2f 3f7f4e6d bd96a905     ...?/.H.mN.?....
 23fc274:	3f7ec46d bdc8bd36 3f7e1324 bdfab273     m.~?6...$.~?s...
 23fc284:	3f7d3aac be164083 3f7c3b28 be2f10a2     .:}?.@..(;|?../.
 23fc294:	3f7b14be be47c5c2 3f79c79d be605c13     ..{?..G...y?.\`.
 23fc2a4:	3f7853f8 be78cfcc 3f76ba07 be888e93     .Sx?..x...v?....
 23fc2b4:	3f74fa0b be94a031 3f731447 bea09ae5     ..t?1...G.s?....
 23fc2c4:	3f710908 beac7cd4 3f6ed89e beb8442a     ..q?.|....n?*D..
 23fc2d4:	3f6c835e bec3ef15 3f6a09a7 becf7bca     ^.l?......j?.{..
 23fc2e4:	3f676bd8 bedae880 3f64aa59 bee63375     .kg?....Y.d?u3..
 23fc2f4:	3f61c598 bef15aea 3f5ebe05 befc5d27     ..a?.Z....^?']..
 23fc304:	3f5b941a bf039c3d 3f584853 bf08f59b     ..[?=...SHX?....
 23fc314:	3f54db31 bf0e39da 3f514d3d bf13682a     1.T?.9..=MQ?*h..
 23fc324:	3f4d9f02 bf187fc0 3f49d112 bf1d7fd1     ..M?......I?....
 23fc334:	3f45e403 bf226799 3f41d870 bf273656     ..E?.g".p.A?V6'.
 23fc344:	3f3daef9 bf2beb4a 3f396842 bf3085bb     ..=?J.+.Bh9?..0.
 23fc354:	3f3504f3 bf3504f3 3f3085bb bf396842     ..5?..5...0?Bh9.
 23fc364:	3f2beb4a bf3daef9 3f273656 bf41d870     J.+?..=.V6'?p.A.
 23fc374:	3f226799 bf45e403 3f1d7fd1 bf49d112     .g"?..E....?..I.
 23fc384:	3f187fc0 bf4d9f02 3f13682a bf514d3d     ...?..M.*h.?=MQ.
 23fc394:	3f0e39da bf54db31 3f08f59b bf584853     .9.?1.T....?SHX.
 23fc3a4:	3f039c3d bf5b941a 3efc5d27 bf5ebe05     =..?..[.'].>..^.
 23fc3b4:	3ef15aea bf61c598 3ee63375 bf64aa59     .Z.>..a.u3.>Y.d.
 23fc3c4:	3edae880 bf676bd8 3ecf7bca bf6a09a7     ...>.kg..{.>..j.
 23fc3d4:	3ec3ef15 bf6c835e 3eb8442a bf6ed89e     ...>^.l.*D.>..n.
 23fc3e4:	3eac7cd4 bf710908 3ea09ae5 bf731447     .|.>..q....>G.s.
 23fc3f4:	3e94a031 bf74fa0b 3e888e93 bf76ba07     1..>..t....>..v.
 23fc404:	3e78cfcc bf7853f8 3e605c13 bf79c79d     ..x>.Sx..\`>..y.
 23fc414:	3e47c5c2 bf7b14be 3e2f10a2 bf7c3b28     ..G>..{.../>(;|.
 23fc424:	3e164083 bf7d3aac 3dfab273 bf7e1324     .@.>.:}.s..=$.~.
 23fc434:	3dc8bd36 bf7ec46d 3d96a905 bf7f4e6d     6..=m.~....=mN..
 23fc444:	3d48fb2f bf7fb10f 3cc90ab0 bf7fec43     /.H=.......<C...
 23fc454:	6b63694e 6c694220 69760064 6c617573     Nick Bild.visual
 23fc464:	656c615f 00737472 69647561 6c46006f     _alerts.audio.Fl
 23fc474:	75427461 72656666 2e312073 302e3231     atBuffers 1.12.0
 23fc484:	626d6100 6e616c75 62006563 676b6361     .ambulance.backg
 23fc494:	6e756f72 61640064 7265676e 72696600     round.danger.fir
 23fc4a4:	69660065 72746572 006b6375 746f6f66     e.firetruck.foot
 23fc4b4:	70657473 61670073 61740073 6e696b6c     steps.gas.talkin
 23fc4c4:	72740067 69666661 6f760063 7b206469     g.traffic.void {
 23fc4d4:	6e6f6e61 756f6d79 3a3a7d73 615f6965     anonymous}::ei_a
 23fc4e4:	6e67696c 665f6465 28656572 64696f76     ligned_free(void
 23fc4f4:	2f00292a 656d6f68 63696e2f 6f732f6b     *)./home/nick/so
 23fc504:	61777466 762f6572 61757369 6c615f6c     ftware/visual_al
 23fc514:	2f747265 75736976 615f6c61 7472656c     ert/visual_alert
 23fc524:	6e695f73 65726566 6e69636e 732f2f67     s_inferencing//s
 23fc534:	652f6372 2d656764 75706d69 2d65736c     rc/edge-impulse-
 23fc544:	2f6b6473 73616c63 69666973 652f7265     sdk/classifier/e
 23fc554:	6c615f69 656e6769 616d5f64 636f6c6c     i_aligned_malloc
 23fc564:	2800682e 67696c61 2026206e 696c6128     .h.(align & (ali
 23fc574:	2d206e67 29293120 203d3d20 6f760030     gn - 1)) == 0.vo
 23fc584:	202a6469 6f6e617b 6f6d796e 3a7d7375     id* {anonymous}:
 23fc594:	5f69653a 67696c61 5f64656e 6c6c6163     :ei_aligned_call
 23fc5a4:	7328636f 5f657a69 73202c74 5f657a69     oc(size_t, size_
 23fc5b4:	46002974 656c6961 6f742064 6c6c6120     t).Failed to all
 23fc5c4:	7461636f 46542065 6574694c 65726120     ocate TFLite are
 23fc5d4:	2820616e 6f727265 6f632072 25206564     na (error code %
 23fc5e4:	000a2964 3a525245 706e6920 74207475     d)..ERR: input t
 23fc5f4:	6f736e65 61682072 69732073 2520657a     ensor has size %
 23fc604:	62202c64 69207475 7475706e 74616d20     d, but input mat
 23fc614:	20786972 20736168 20736168 657a6973     rix has has size
 23fc624:	0a642520 52524500 6143203a 746f6e6e      %d..ERR: Cannot
 23fc634:	6e616820 20656c64 75706e69 79742074      handle input ty
 23fc644:	28206570 0a296425 52524500 6f4d203a     pe (%d)..ERR: Mo
 23fc654:	656c6962 2074654e 20445353 6e207369     bileNet SSD is n
 23fc664:	7320746f 6f707075 64657472 206e6920     ot supported in 
 23fc674:	204e4f45 5420726f 6f736e65 6f6c4672     EON or TensorFlo
 23fc684:	694c2077 4d206574 6f726369 5245000a     w Lite Micro..ER
 23fc694:	49203a52 6c61766e 6f206469 75707475     R: Invalid outpu
 23fc6a4:	79742074 28206570 20296425 20726f66     t type (%d) for 
 23fc6b4:	4f4c4f59 6c203576 20747361 6579616c     YOLOv5 last laye
 23fc6c4:	45000a72 203a5252 75736e55 726f7070     r..ERR: Unsuppor
 23fc6d4:	20646574 656a626f 64207463 63657465     ted object detec
 23fc6e4:	6e6f6974 73616c20 616c2074 20726579     tion last layer 
 23fc6f4:	29642528 7325000a 5000093a 69646572     (%d)..%s:..Predi
 23fc704:	6f697463 2820736e 656d6974 6425203a     ctions (time: %d
 23fc714:	2e736d20 000a3a29 65676445 706d4920      ms.):..Edge Imp
 23fc724:	65736c75 666e6920 6e657265 72206563     ulse inference r
 23fc734:	656e6e75 6f662072 61502072 63697472     unner for Partic
 23fc744:	6420656c 63697665 0a0d7365 4d445000     le devices...PDM
 23fc754:	63656420 7265646f 696e6920 72652074      decoder init er
 23fc764:	64253d72 666e4900 6e657265 676e6963     r=%d.Inferencing
 23fc774:	74657320 676e6974 000a3a73 746e4909      settings:...Int
 23fc784:	61767265 25203a6c 2066322e 0a2e736d     erval: %.2f ms..
 23fc794:	72460900 20656d61 657a6973 6425203a     ..Frame size: %d
 23fc7a4:	5309000a 6c706d61 656c2065 6874676e     ...Sample length
 23fc7b4:	6425203a 2e736d20 4e09000a 6f202e6f     : %d ms....No. o
 23fc7c4:	6c632066 65737361 25203a73 46000a64     f classes: %d..F
 23fc7d4:	656c6961 6f742064 61747320 50207472     ailed to start P
 23fc7e4:	00214d44 3a525245 756f4320 6e20646c     DM!.ERR: Could n
 23fc7f4:	6120746f 636f6c6c 20657461 69647561     ot allocate audi
 23fc804:	7562206f 72656666 69732820 2520657a     o buffer (size %
 23fc814:	202c2964 73696874 756f6320 6220646c     d), this could b
 23fc824:	75642065 6f742065 65687420 6e697720     e due to the win
 23fc834:	20776f64 676e656c 6f206874 6f792066     dow length of yo
 23fc844:	6d207275 6c65646f 54000a0d 6e696d69     ur model...Timin
 23fc854:	44203a67 25205053 736d2064 6e69202c     g: DSP %d ms, in
 23fc864:	65726566 2065636e 6d206425 61202c73     ference %d ms, a
 23fc874:	616d6f6e 2520796c 736d2064 50000a0d     nomaly %d ms...P
 23fc884:	69646572 6f697463 0d3a736e 2020000a     redictions:...  
 23fc894:	203a7325 352e2500 000a0d66 79617247     %s: .%.5f...Gray
 23fc8a4:	6c616373 52450065 46203a52 656c6961     scale.ERR: Faile
 23fc8b4:	6f742064 6e757220 50534420 6f727020     d to run DSP pro
 23fc8c4:	73736563 64252820 76000a29 6f746365     cess (%d)..vecto
 23fc8d4:	5f3a3a72 61725f4d 5f65676e 63656863     r::_M_range_chec
 23fc8e4:	5f203a6b 28206e5f 63696877 73692068     k: __n (which is
 23fc8f4:	757a2520 3d3e2029 69687420 733e2d73      %zu) >= this->s
 23fc904:	28657a69 77282029 68636968 20736920     ize() (which is 
 23fc914:	29757a25 52524500 6f57203a 20646c75     %zu).ERR: Would 
 23fc924:	74697277 756f2065 64697374 65662065     write outside fe
 23fc934:	72757461 75622065 72656666 7552000a     ature buffer..Ru
 23fc944:	6e696e6e 6d692067 736c7570 2e2e2e65     nning impulse...
 23fc954:	5245000a 55203a52 6f6e6b6e 65206e77     ..ERR: Unknown e
 23fc964:	61727478 66207463 74636e75 2c6e6f69     xtract function,
 23fc974:	6c6e6f20 464d2079 202c4343 2045464d      only MFCC, MFE 
 23fc984:	20646e61 63657073 676f7274 206d6172     and spectrogram 
 23fc994:	70707573 6574726f 0d000a64 6165460a     supported....Fea
 23fc9a4:	65727574 25282073 736d2064 203a292e     tures (%d ms.): 
 23fc9b4:	52524500 6d63203a 20776e76 6c696166     .ERR: cmvnw fail
 23fc9c4:	28206465 0a296425 52524500 6f6e203a     ed (%d)..ERR: no
 23fc9d4:	6c616d72 74617a69 206e6f69 6c696166     rmalization fail
 23fc9e4:	28206465 0a296425 61745300 6e697472     ed (%d)..Startin
 23fc9f4:	6e692067 65726566 6e69636e 6e692067     g inferencing in
 23fca04:	73203220 6e6f6365 2e2e7364 52000a2e      2 seconds.....R
 23fca14:	726f6365 676e6964 0a2e2e2e 6d615300     ecording.....Sam
 23fca24:	20656c70 656d6974 6425203a 52000a0d     ple time: %d...R
 23fca34:	726f6365 676e6964 6e6f6420 45000a65     ecording done..E
 23fca44:	203a5252 6c696146 74206465 7572206f     RR: Failed to ru
 23fca54:	6c63206e 69737361 72656966 64252820     n classifier (%d
 23fca64:	72000a29 635f6e75 7373616c 65696669     )..run_classifie
 23fca74:	65722072 6e727574 203a6465 0a0d6425     r returned: %d..
 23fca84:	63657600 3a726f74 5f4d5f3a 6c616572     .vector::_M_real
 23fca94:	5f636f6c 65736e69 6f007472 6d5f7475     loc_insert.out_m
 23fcaa4:	69727461 203d2078 25786425 63000a64     atrix = %dx%d..c
 23fcab4:	75636c61 6574616c 69732064 3d20657a     alculated size =
 23fcac4:	78642520 000a6425 6c6c754e 65686320      %dx%d..Null che
 23fcad4:	66206b63 656c6961 72000a64 74686769     ck failed..right
 23fcae4:	70203c20 7265776f 6570735f 75727463      < power_spectru
 23fcaf4:	72665f6d 5f656d61 657a6973 61747300     m_frame_size.sta
 23fcb04:	20636974 20746e69 3a3a6965 65657073     tic int ei::spee
 23fcb14:	79706863 65663a3a 72757461 6d3a3a65     chpy::feature::m
 23fcb24:	65286566 6d3a3a69 69727461 2a745f78     fe(ei::matrix_t*
 23fcb34:	6965202c 616d3a3a 78697274 2c2a745f     , ei::matrix_t*,
 23fcb44:	3a696520 6769733a 5f6c616e 202c2a74      ei::signal_t*, 
 23fcb54:	746e6975 745f3233 6c66202c 2c74616f     uint32_t, float,
 23fcb64:	6f6c6620 202c7461 746e6975 745f3631      float, uint16_t
 23fcb74:	6975202c 3631746e 202c745f 746e6975     , uint16_t, uint
 23fcb84:	745f3233 6975202c 3233746e 202c745f     32_t, uint32_t, 
 23fcb94:	746e6975 745f3631 682f0029 2f656d6f     uint16_t)./home/
 23fcba4:	6b63696e 666f732f 72617774 69762f65     nick/software/vi
 23fcbb4:	6c617573 656c615f 762f7472 61757369     sual_alert/visua
 23fcbc4:	6c615f6c 73747265 666e695f 6e657265     l_alerts_inferen
 23fcbd4:	676e6963 72732f2f 64652f63 692d6567     cing//src/edge-i
 23fcbe4:	6c75706d 732d6573 642f6b64 732f7073     mpulse-sdk/dsp/s
 23fcbf4:	63656570 2f797068 74616566 2e657275     peechpy/feature.
 23fcc04:	00707068 3a525245 45464d20 69616620     hpp.ERR: MFE fai
 23fcc14:	2064656c 29642528 0000000a              led (%d)....

023fcc20 <_ZTVN5spark10LogHandlerE>:
	...
 23fcc30:	023ed425 023f0a29                       %.>.).?.

023fcc38 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fcc40:	023f0e09 023f0e3d 023f8b79 023f8d21     ..?.=.?.y.?.!.?.

023fcc50 <_ZL18ei_learning_blocks>:
 23fcc50:	023f20a1 023fcc74 00000000              . ?.t.?.....

023fcc5c <_ZL24ei_config_tflite_graph_5>:
 23fcc5c:	00000001 023f3a9d 023f3c61 023f3ca9     .....:?.a<?..<?.
 23fcc6c:	023f3c49 023f3c55                       I<?.U<?.

023fcc74 <_ZL26ei_learning_block_config_5>:
 23fcc74:	00000001 00000005 0100ff00 00010102     ................
 23fcc84:	023fcc5c                                \.?.

023fcc88 <_ZN2eiL25quantized_values_one_zeroE>:
 23fcc88:	00000000 3c23d70a 3ca3d70a 3cf5c28f     ......#<...<...<
 23fcc98:	3d23d70a 3d3a2e8c 3d430c31 3d4ccccd     ..#=..:=1.C=..L=
 23fcca8:	3d579436 3d638e39 3d70f0f1 3d75c28f     6.W=9.c=..p=..u=
 23fccb8:	3d800000 3d888889 3d8f5c29 3d924925     ...=...=)\.=%I.=
 23fccc8:	3d9d89d9 3da3d70a 3daaaaab 3db851ec     ...=...=...=.Q.=
 23fccd8:	3dba2e8c 3dc30c31 3dcccccd 3dd79436     ...=1..=...=6..=
 23fcce8:	3de147ae 3de38e39 3df0f0f1 3df5c28f     .G.=9..=...=...=
 23fccf8:	3e000000 3e051eb8 3e088889 3e0ba2e9     ...>...>...>...>
 23fcd08:	3e0f5c29 3e124925 3e19999a 3e1d89d9     )\.>%I.>...>...>
 23fcd18:	3e21af28 3e23d70a 3e2aaaab 3e2e147b     (.!>..#>..*>{..>
 23fcd28:	3e34b4b5 3e3851ec 3e3a2e8c 3e400000     ..4>.Q8>..:>..@>
 23fcd38:	3e428f5c 3e430c31 3e4ccccd 3e570a3d     \.B>1.C>..L>=.W>
 23fcd48:	3e579436 3e5b6db7 3e6147ae 3e638e39     6.W>.m[>.Ga>9.c>
 23fcd58:	3e68ba2f 3e6b851f 3e6c4ec5 3e70f0f1     /.h>..k>.Nl>..p>
 23fcd68:	3e73cf3d 3e75c28f 3e800000 3e851eb8     =.s>..u>...>...>
 23fcd78:	3e86bca2 3e888889 3e8a3d71 3e8ba2e9     ...>...>q=.>...>
 23fcd88:	3e8e38e4 3e8f5c29 3e924925 3e947ae1     .8.>)\.>%I.>.z.>
 23fcd98:	3e969697 3e99999a 3e9d89d9 3e9eb852     ...>...>...>R..>
 23fcda8:	3ea00000 3ea1af28 3ea2e8ba 3ea3d70a     ...>(..>...>...>
 23fcdb8:	3ea8f5c3 3eaaaaab 3eae147b 3eb33333     ...>...>{..>33.>
 23fcdc8:	3eb4b4b5 3eb6db6e 3eb851ec 3eba2e8c     ...>n..>.Q.>...>
 23fcdd8:	3ebca1af 3ebd70a4 3ec00000 3ec28f5c     ...>.p.>...>\..>
 23fcde8:	3ec30c31 3ec4ec4f 3ec71c72 3ec7ae14     1..>O..>r..>...>
 23fcdf8:	3ecccccd 3ed1745d 3ed1eb85 3ed2d2d3     ...>]t.>...>...>
 23fce08:	3ed55555 3ed70a3d 3ed79436 3edb6db7     UU.>=..>6..>.m.>
 23fce18:	3edc28f6 3ee00000 3ee147ae 3ee38e39     .(.>...>.G.>9..>
 23fce28:	3ee66666 3ee8ba2f 3eeb851f 3eec4ec5     ff.>/..>...>.N.>
 23fce38:	3eeeeeef 3ef0a3d7 3ef0f0f1 3ef286bd     ...>...>...>...>
 23fce48:	3ef3cf3d 3ef5c28f 3efae148 3f000000     =..>...>H..>...?
 23fce58:	3f028f5c 3f051eb8 3f061862 3f06bca2     \..?...?b..?...?
 23fce68:	3f078788 3f07ae14 3f088889 3f09d89e     ...?...?...?...?
 23fce78:	3f0a3d71 3f0ba2e9 3f0ccccd 3f0e38e4     q=.?...?...?.8.?
 23fce88:	3f0f5c29 3f100000 3f11eb85 3f124925     )\.?...?...?%I.?
 23fce98:	3f1435e5 3f147ae1 3f155555 3f169697     .5.?.z.?UU.?...?
 23fcea8:	3f170a3d 3f1745d1 3f19999a 3f1c28f6     =..?.E.?...?.(.?
 23fceb8:	3f1c71c7 3f1d89d9 3f1e79e8 3f1eb852     .q.?...?.y.?R..?
 23fcec8:	3f200000 3f2147ae 3f21af28 3f22e8ba     .. ?.G!?(.!?.."?
 23fced8:	3f23d70a 3f249249 3f25a5a6 3f266666     ..#?I.$?..%?ff&?
 23fcee8:	3f28f5c3 3f2aaaab 3f2b851f 3f2e147b     ..(?..*?..+?{..?
 23fcef8:	3f2e8ba3 3f2f286c 3f300000 3f30a3d7     ...?l(/?..0?..0?
 23fcf08:	3f313b14 3f333333 3f34b4b5 3f35c28f     .;1?333?..4?..5?
 23fcf18:	3f36db6e 3f3851ec 3f38e38e 3f3a2e8c     n.6?.Q8?..8?..:?
 23fcf28:	3f3ae148 3f3bbbbc 3f3ca1af 3f3d70a4     H.:?..;?..<?.p=?
 23fcf38:	3f400000 3f428f5c 3f430c31 3f43c3c4     ..@?\.B?1.C?..C?
 23fcf48:	3f44ec4f 3f451eb8 3f45d174 3f471c72     O.D?..E?t.E?r.G?
 23fcf58:	3f47ae14 3f492492 3f4a1af3 3f4a3d71     ..G?.$I?..J?q=J?
 23fcf68:	3f4ccccd 3f4f3cf4 3f4f5c29 3f500000     ..L?.<O?)\O?..P?
 23fcf78:	3f51745d 3f51eb85 3f52d2d3 3f547ae1     ]tQ?..Q?..R?.zT?
 23fcf88:	3f555555 3f570a3d 3f579436 3f589d8a     UUU?=.W?6.W?..X?
 23fcf98:	3f59999a 3f5b6db7 3f5c28f6 3f5d1746     ..Y?.m[?.(\?F.]?
 23fcfa8:	3f5dddde 3f5eb852 3f600000 3f6147ae     ..]?R.^?..`?.Ga?
 23fcfb8:	3f61e1e2 3f638e39 3f63d70a 3f650d79     ..a?9.c?..c?y.e?
 23fcfc8:	3f666666 3f679e7a 3f68ba2f 3f68f5c3     fff?z.g?/.h?..h?
 23fcfd8:	3f6aaaab 3f6b851f 3f6c4ec5 3f6db6db     ..j?..k?.Nl?..m?
 23fcfe8:	3f6e147b 3f6eeeef 3f700000 3f70a3d7     {.n?..n?..p?..p?
 23fcff8:	3f70f0f1 3f71c71c 3f7286bd 3f733333     ..p?..q?..r?33s?
 23fd008:	3f73cf3d 3f745d17 3f75c28f 3f7851ec     =.s?.]t?..u?.Qx?
 23fd018:	3f7ae148 3f7d70a4 3f800000 3f800000     H.z?.p}?...?...?
 23fd028:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
 23fd038:	3f800000 3f800000 3f800000 3a525245     ...?...?...?ERR:
 23fd048:	74654720 736e6554 6320726f 656c6c61      GetTensor calle
 23fd058:	65622064 646e6f79 58414d20 4c46545f     d beyond MAX_TFL
 23fd068:	4156455f 4f435f4c 20544e55 29642528     _EVAL_COUNT (%d)
 23fd078:	5245000a 47203a52 65547465 726f736e     ..ERR: GetTensor
 23fd088:	6c616320 2064656c 6f796562 4d20646e      called beyond M
 23fd098:	545f5841 545f4c46 4f534e45 4f435f52     AX_TFL_TENSOR_CO
 23fd0a8:	20544e55 29642528 5245000a 46203a52     UNT (%d)..ERR: F
 23fd0b8:	656c6961 6f742064 6c6c6120 7461636f     ailed to allocat
 23fd0c8:	65702065 73697372 746e6574 66756220     e persistent buf
 23fd0d8:	20726566 7320666f 20657a69 202c6425     fer of size %d, 
 23fd0e8:	73656f64 746f6e20 74696620 206e6920     does not fit in 
 23fd0f8:	736e6574 6120726f 616e6572 646e6120     tensor arena and
 23fd108:	61657220 64656863 5f494520 5f58414d      reached EI_MAX_
 23fd118:	5245564f 574f4c46 4655425f 5f524546     OVERFLOW_BUFFER_
 23fd128:	4e554f43 45000a54 203a5252 6c696146     COUNT..ERR: Fail
 23fd138:	74206465 6c61206f 61636f6c 70206574     ed to allocate p
 23fd148:	69737265 6e657473 75622074 72656666     ersistent buffer
 23fd158:	20666f20 657a6973 0a642520 52524500      of size %d..ERR
 23fd168:	6146203a 64656c69 206f7420 6f6c6c61     : Failed to allo
 23fd178:	65746163 72637320 68637461 66756220     cate scratch buf
 23fd188:	20726566 7320666f 20657a69 202c6425     fer of size %d, 
 23fd198:	63616572 20646568 4d5f4945 535f5841     reached EI_MAX_S
 23fd1a8:	54415243 425f4843 45464655 4f435f52     CRATCH_BUFFER_CO
 23fd1b8:	0a544e55 52524500 6146203a 64656c69     UNT..ERR: Failed
 23fd1c8:	206f7420 6f6c6c61 65746163 72637320      to allocate scr
 23fd1d8:	68637461 66756220 20726566 7320666f     atch buffer of s
 23fd1e8:	20657a69 000a6425 3a525245 69616620     ize %d..ERR: fai
 23fd1f8:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
 23fd208:	736e6574 6120726f 616e6572 5245000a     tensor arena..ER
 23fd218:	74203a52 6f736e65 72612072 20616e65     R: tensor arena 
 23fd228:	74207369 73206f6f 6c6c616d 6f64202c     is too small, do
 23fd238:	6e207365 6620746f 6d207469 6c65646f     es not fit model
 23fd248:	65202d20 206e6576 68746977 2074756f      - even without 
 23fd258:	61726373 20686374 66667562 0a737265     scratch buffers.
 23fd268:	00000000                                ....

023fd26c <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23fd26c:	00000001 ffffff80                       ........

023fd274 <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23fd274:	00000001 00000000                       ........

023fd27c <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23fd27c:	00000001 00000000                       ........

023fd284 <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23fd284:	00000010 00000000 00000000 00000000     ................
	...

023fd2c8 <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23fd2c8:	00000010 00000000 00000000 00000000     ................
	...

023fd30c <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23fd30c:	00000001 3b800000                       .......;

023fd314 <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23fd314:	00000008 00000000 00000000 00000000     ................
	...

023fd338 <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
 23fd338:	00000008 00000000 00000000 00000000     ................
	...

023fd35c <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
 23fd35c:	00000001 ffffff80                       ........

023fd364 <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
 23fd364:	00000001 ffffff80                       ........

023fd36c <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
 23fd36c:	00000001 ffffff80                       ........

023fd374 <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
 23fd374:	00000001 ffffff80                       ........

023fd37c <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
 23fd37c:	00000001 ffffff80                       ........

023fd384 <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
 23fd384:	00000001 ffffff80                       ........

023fd38c <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
 23fd38c:	00000001 ffffff80                       ........

023fd394 <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
 23fd394:	00000001 ffffff80                       ........

023fd39c <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
 23fd39c:	00000001 ffffff80                       ........

023fd3a4 <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
 23fd3a4:	00000001 0000003a                       ....:...

023fd3ac <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
 23fd3ac:	00000001 ffffff80                       ........

023fd3b4 <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23fd3b4:	00000001 39cc2375                       ....u#.9

023fd3bc <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23fd3bc:	00000001 3c348482                       ......4<

023fd3c4 <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23fd3c4:	00000010 38efa6de 39193acf 39101135     .......8.:.95..9
 23fd3d4:	38ea3ca0 394285e0 38d7b35e 3924564b     .<.8..B9^..8KV$9
 23fd3e4:	38d9919c 38abaaaa 38b3eb00 391a7a88     ...8...8...8.z.9
 23fd3f4:	3934ae76 3932aab8 38a6eef6 38c999a0     v.49..29...8...8
 23fd404:	390bd79d                                ...9

023fd408 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23fd408:	00000010 3bbb2485 3bef4ff5 3be100a0     .....$.;.O.;...;
 23fd418:	3bb6ea03 3c17e6dc 3ba87078 3c005470     ...;...<xp.;pT.<
 23fd428:	3ba9e5ed 3b860daf 3b8c7f32 3bf1434b     ...;...;2..;KC.;
 23fd438:	3c0d17d4 3c0b8517 3b825b79 3b9d6da5     ...<...<y[.;.m.;
 23fd448:	3bda6767 00000000                       gg.;....

023fd450 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23fd450:	00000001 00000001 00000063 00000028     ........c...(...

023fd460 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23fd460:	00000001 00000063 00000001 00000008     ....c...........

023fd470 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23fd470:	00000001 00000001 00000032 00000008     ........2.......

023fd480 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23fd480:	00000001 00000032 00000001 00000010     ....2...........

023fd490 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23fd490:	ffffffff 00000190 00000000 00000000     ................

023fd4a0 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23fd4a0:	ffffff09 000002c1 fffffb9f ffffff3b     ............;...
 23fd4b0:	ffffffca 00000253 fffffec4 fffffc2d     ....S.......-...
 23fd4c0:	000002eb 00000000 00000000 00000000     ................

023fd4d0 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
 23fd4d0:	fcbfe1ec 06f10d0b 0010fff8 d0efb9f4     ................
 23fd4e0:	0df1e80d 10ee070f 1f230505 e4ecec1e     ..........#.....
 23fd4f0:	03e10e10 050c0e07 fe1f0108 f3fdf60a     ................
 23fd500:	fbfe19f8 0ced120c 03201509 e8fbdb02     .......... .....
 23fd510:	0af9070d fef10b0e 1517ff0d e205f60e     ................
 23fd520:	19fa05ef 0af2021a 21160804 cef0edf0     ...........!....
 23fd530:	0af008dc 03e8030a 1814ff15 c7eef4ee     ................
 23fd540:	eceef4f1 fee90206 fb14120a caeee0f8     ................
 23fd550:	eae805f8 06b20c04 02210602 b406df00     ..........!.....
 23fd560:	f7eae70f f8de0804 0f2208f7 c207f211     ..........".....
 23fd570:	ec01fe1a 11e41009 0f1a06ff c0040513     ................
 23fd580:	f401050d 0eed16fd 0d110903 c50303fb     ................
 23fd590:	e7f409f4 06ee0e09 fd120d0b be06eaff     ................
 23fd5a0:	14f9fe08 11da0d0b 30fe1111 bbfcf30d     ...........0....
 23fd5b0:	0bfb0f14 0df3090d 1ff305fa dc00ed08     ................
 23fd5c0:	05e608fd 0afd0cf3 150e0806 f4fceef7     ................
 23fd5d0:	1cec1d0e 07eb0df5 2f120806 d3fad605     .........../....
 23fd5e0:	10e215f5 fae70b03 1f1bf90f f000f5fd     ................
 23fd5f0:	18ea13ee 04f9071a 170bfb06 eef90bff     ................
 23fd600:	03e9fbec 00070212 f81c0ffb e3f4f1e6     ................
 23fd610:	f3e2f2f1 02ee0f0f fe221afe c3f8dfee     ..........".....
 23fd620:	fedff6f0 00ed110c 03290d0d b1deccf8     ..........).....
 23fd630:	eae9f208 10f3170d fd280401 b1f1fb12     ..........(.....
 23fd640:	f001031b 14e318fa 09230507 bc11e510     ..........#.....
 23fd650:	e2f6fdfc 0de7fc02 0d29fafa d5f8ebf3     ..........).....
 23fd660:	15b0fdd1 fbaceee8 161cfbd1 01bca5f0     ................
 23fd670:	188118d1 f5b0e7f3 150ff5bb 18bc96f8     ................
 23fd680:	16a72ad5 f2b8efd0 1305e2bc 0ec082df     .*..............
 23fd690:	159d1de6 e0c6f3c2 0407f2d1 18d0b6ef     ................
 23fd6a0:	13ea1fd9 dadfd4c9 0ddfeedf 19e4b6ec     ................
 23fd6b0:	0ced21f4 e1e0c1db 0af2f6eb 24e5be07     .!.............$
 23fd6c0:	0cdb17f2 dad4f4c8 0bfef8e2 06d4caed     ................
 23fd6d0:	1ae116f5 e2e8d9b4 09e8eee9 10d0b0ea     ................
 23fd6e0:	0ecc1103 dcd0f1c9 11f6f5f0 13d1b9f8     ................
 23fd6f0:	0d091f07 e1c3f4b8 14e0e5cf 1c050615     ................
 23fd700:	10fa1f0e edd8e3b2 14f3e8de 1afcfddb     ................
 23fd710:	13b72bd1 d0c7e0e5 11fce7e1 1699a5e6     .+..............
 23fd720:	0bb622dd d7ccd9bb 09e3f8cf 08c3b8d4     ."..............
 23fd730:	15ae22c5 d1bfdbdf 16f4e7e6 13b49cf6     ."..............
 23fd740:	12bd1fed dad5cae7 1400f0e0 11ce9ef7     ................
 23fd750:	0d1b2707 dbe1dfb6 08f6f5dc 1909dbe3     .'..............
 23fd760:	0c060df5 cfd2d4af 0afe03e1 0f10e1e3     ................
 23fd770:	15ff09e6 cbbfdba9 1104fecd 1be6c3f1     ................
 23fd780:	13da20f2 d3d9c9c8 0d02f3e4 12eeadf9     . ..............
 23fd790:	1b061ee1 ddddeccd 1016f6ef 14dab7f7     ................
 23fd7a0:	17e21df0 d4f3d3c7 0afcf8e6 11e5b401     ................
 23fd7b0:	0e021700 d3e5ce8c 07fbf5dc 10eedbd6     ................
 23fd7c0:	13ef17ef cfbdd5ba 14feffe4 15d3cbe6     ................
 23fd7d0:	07c635fb cebad1b0 1c17eddd 13da9fc1     .5..............
 23fd7e0:	0ce727d1 cdd3eedd 0a03f2e4 12c9c806     .'..............
 23fd7f0:	040ef5fc 1620de07 0c151806 05070cff     ...... .........
 23fd800:	f805f504 0e02dee1 f0ca1704 f8e409e6     ................
 23fd810:	dad8e60c 14fbe9e5 febf0318 d2fc13f7     ................
 23fd820:	f0f4e813 07f4ebe3 fed30108 eef80d00     ................
 23fd830:	02e5d612 0405e4d3 2313020b e00202f5     ...........#....
 23fd840:	fef6f70e 00fef7e6 1b0bfb04 db130f04     ................
 23fd850:	00e5e413 0a0100ee 150002fd f7081905     ................
 23fd860:	f0e2f51a 090e0b04 0b1211f9 e7111210     ................
 23fd870:	f8fde6fd 0311030b 100b0423 f8132202     ........#...."..
 23fd880:	f1f6fb14 0a18efe5 eed80b1b f30019fd     ................
 23fd890:	02effc06 0105efe0 14e5040b f3fa07fa     ................
 23fd8a0:	0cebf702 fdfde80d 14fbfd0f e7f6090a     ................
 23fd8b0:	fee4c410 0b090104 02fdf414 ea061bf5     ................
 23fd8c0:	f6fce405 15fcfbed 10070110 d00d16fb     ................
 23fd8d0:	ddf4df00 010df6e1 15080110 cdff13ff     ................
 23fd8e0:	08f1d407 0502ee10 3314020a e2fe152a     ...........3*...
 23fd8f0:	05e8e011 18140a0f 25021015 e1160b0c     ...........%....
 23fd900:	f4f5e802 090a0fe9 1719181f b80801ff     ................
 23fd910:	e8e7ed0a 06e800f1 1cff1509 b118f903     ................
 23fd920:	00e9f210 05f6efea 12eefc18 d0040806     ................
 23fd930:	efe5eb0e 05f9f4e2 14010601 d7060911     ................
 23fd940:	f201e510 01e6fdec 0ff5f90d d211031f     ................
 23fd950:	03e0dee6 06fae4f5 1dff09fe e6fc0c08     ................
 23fd960:	f4d2c2f0 0507e5f0 0af50d05 edf0f800     ................
 23fd970:	07070ad7 150de409 00111d0a e40a0df4     ................
 23fd980:	110d09f9 ea08f2e9 faf2dbfb 23f5f9cb     ...............#
 23fd990:	0f1f03d8 de0defe2 d6f0e4f6 20e1ffc6     ............... 
 23fd9a0:	0c1a10c3 eb05e90f ebe7e2e4 12e80bed     ................
 23fd9b0:	111009f6 f311e6f0 e3ea0ff5 10ef0fd5     ................
 23fd9c0:	0a0d0d10 020d0fe5 f40405f5 08f810da     ................
 23fd9d0:	fd10fe1a 0dfe10f0 cee1f3f3 f703f5ea     ................
 23fd9e0:	f106f9f9 fd01dbf4 d5d2fef8 0bf3f5f2     ................
 23fd9f0:	0123f5dd e4ffc5d7 bfea00ff 12e106bd     ..#.............
 23fda00:	ff0d12c5 ef05e51c d4f1f7fd 14e7eef0     ................
 23fda10:	061c03cf 0213ea10 f300fa04 2dd9f9cf     ...............-
 23fda20:	0f0e06d7 0d05f216 dceefbf4 11d103f7     ................
 23fda30:	ec150707 fb0cf611 c8f0fcfe 08ed03de     ................
 23fda40:	f6240aef f1fcf0e0 a7f6e9ec 09df10d9     ..$.............
 23fda50:	f81311d8 ea0fe8df ade6fbf1 0fdc05ba     ................
 23fda60:	1a1c19d9 df18d5ee d4daeaf9 0fee18bf     ................
 23fda70:	fb221222 f50e06bc c2e2e309 16e526fe     "."..........&..
 23fda80:	f111ff15 ff000abf d2e8f3f3 100517eb     ................
 23fda90:	002e09e8 f20ef8cd cce7f8f4 06f50dbf     ................
 23fdaa0:	ed05f1c1 f20fe6d8 b3effb02 08e401c1     ................
 23fdab0:	fffe00d2 f508eee8 c7ee00f9 0cf1ebb3     ................
 23fdac0:	f804ec0c f20beeee d0cdf4ee 0bf609ba     ................
 23fdad0:	f517f6ef e90cfaf0 c8fc07f7 15fc18f1     ................
 23fdae0:	132b16e7 fc19edec c2faebf7 150d16d4     ..+.............
 23fdaf0:	0b120bda eb1ce4e9 ceefe2f3 1bf1f6e5     ................
 23fdb00:	0208fbfa f40debfa d4fb08ef 10ff09e0     ................
 23fdb10:	fa0610ff 0a09090d e40e111b e5f7eded     ................
 23fdb20:	d2f306e1 0d110a10 bc021315 d8f6f4ed     ................
 23fdb30:	ebf0f4db 0e0bfb00 e5070e16 ecffddf9     ................
 23fdb40:	f0eee5f8 0c04fd08 e6fb0717 e6e9fc0b     ................
 23fdb50:	dbff12d5 fc05fe0a d00e0d1e eefa05eb     ................
 23fdb60:	ddf1fbe0 fd030707 c20e0c17 ece4eae2     ................
 23fdb70:	e3f8e1f4 11fb0103 c111060e e6d8e001     ................
 23fdb80:	ee0603f7 0cfa040c 0c05090f f4fadd05     ................
 23fdb90:	fceadff5 0a040002 f301080f ece4ece0     ................
 23fdba0:	f3f40ed7 fefeff08 0ffb0e0e e6edcbe9     ................
 23fdbb0:	e500fadb fef8f200 f315090b e7e6dbf8     ................
 23fdbc0:	def1e80c 0706f70d f00e0d12 d720ed22     ............". .
 23fdbd0:	cc00030d 060b050a fc07fd16 e119de17     ................
 23fdbe0:	ecf000f6 070f0402 bb030714 03f5f010     ................
 23fdbf0:	e7fb11e7 06fa1209 f11e050e f1e1dbff     ................
 23fdc00:	cdf102e3 fae70e09 f3050115 dce8ded5     ................
 23fdc10:	d7edf1d7 ffe408ff dc00fe0b e8e2ede3     ................
 23fdc20:	e8e8f31b 03fdf806 d6110809 e7fbf4fb     ................
 23fdc30:	f905ec12 09041413 f60a0a0e ff01f6f8     ................
 23fdc40:	fdf6f1ef 08f0fd00 ff060007 f2f6f30f     ................
 23fdc50:	0bfc03ed 1301f816 1f070c14 ebedeef9     ................
 23fdc60:	04d8f5d4 0f06050d fd09071a e4e1e8eb     ................
 23fdc70:	f3e6ffe6 05e1f510 f6ff0c0c d9f1e6fb     ................
 23fdc80:	f1edf5dd 0ee2ef0e e511161d cef8e3f5     ................
 23fdc90:	20fc081e 09162920 f40a1921 da0a1724     ...  )..!...$...
 23fdca0:	0bca1805 f3f6eafe 06d9e804 04fdd0fc     ................
 23fdcb0:	0ee01108 f713ec1c 0ecbf70b 14f6e004     ................
 23fdcc0:	03f800ff ff09eb0c 0be3e80e 10fbf809     ................
 23fdcd0:	16d10bfd fd0cf414 1709ddea 1b04e700     ................
 23fdce0:	0af816f1 f40fef19 0605f8fb 08f5f506     ................
 23fdcf0:	11df23fb ed080210 0bf1ed0f 0df5f0f9     .#..............
 23fdd00:	0dfcfe04 070ced02 0af3f50f 15e8ebf0     ................
 23fdd10:	0ae8fdf2 f7030a13 0a08f104 0ccaefff     ................
 23fdd20:	14dd05ef ec10d90b 0400e7f5 0ff7d9fc     ................
 23fdd30:	09dd0c1a f40df512 061bdef7 13fff215     ................
 23fdd40:	10d2fa09 ecf8e4f8 0cfadcea 0ffee805     ................
 23fdd50:	0eda03f3 fff6eef9 15fcc9f5 0beff403     ................
 23fdd60:	13db1804 edffe002 0fe6e30f 0c04da04     ................
 23fdd70:	15f212fc e209c811 0bdfeaf6 11fcecff     ................
 23fdd80:	0fe60207 ebf9e700 0ad8dbfa 11f9f510     ................
 23fdd90:	0ad10905 fd05e104 13f3d4f9 0d1ce517     ................
 23fdda0:	0fea0b07 f005eaef 07efe108 0ee1ebfc     ................
 23fddb0:	12d90607 f202ed14 05d9eaf0 11eef1ff     ................
 23fddc0:	0efa0b17 f404e0ed 0edccbfa 1304ef0a     ................
 23fddd0:	0fe10606 f40bddf8 01d1dc02 16db0200     ................
 23fdde0:	11ef0ff2 ee07e2ff fddbe305 1fe8e00b     ................
 23fddf0:	18da02fe f406d5fb 01dee5fb 02f9d419     ................
 23fde00:	1ce10617 f20de9e6 14d6dc04 10fbfc07     ................
 23fde10:	0dfbfd07 e6fcddef 15e2e0f6 0f13ea05     ................
 23fde20:	09f3eff1 d4f1e7b5 04e4e5fe 1be3dfed     ................
 23fde30:	0811d4bc dc0addf4 101407eb f9fa1a12     ................
 23fde40:	0d0de0dd d00feff6 1e2c0aeb f5140a08     ..........,.....
 23fde50:	fe1be4d4 f11bf5fe 181211f3 f61403e5     ................
 23fde60:	010cf1ca e10ef7f7 151a1503 f90b0aed     ................
 23fde70:	011ee0d1 f314ebf4 18eb09f8 f724130e     ..............$.
 23fde80:	0d0ce1c9 e00ef1e6 0cf908ff fffafc00     ................
 23fde90:	ff15d2da da0701f1 1712feea fd0ff7f4     ................
 23fdea0:	100bfce1 ef12ed07 2407f8eb 000a160a     ...........$....
 23fdeb0:	fcfaeaed e00cf6e3 fbfd0afe 010305f4     ................
 23fdec0:	f30ff2c5 d810e2d2 ecf80f04 f81709d1     ................
 23fded0:	0713ddcf e61fe3d1 09f2170d fe1f0adc     ................
 23fdee0:	f517dad1 df19d7e6 09f81ff2 00210cf0     ..............!.
 23fdef0:	081fdfc0 cf0eecf3 262206fd 001a01da     .........."&....
 23fdf00:	0208d9cf cb16e3f9 1423edf4 0a0a06f8     ..........#.....
 23fdf10:	fd08e3d4 d502e2e3 07f8ef00 fd030ae7     ................
 23fdf20:	0515e2d4 dd0bea03 fef805fc 01040b03     ................
 23fdf30:	ff0aecde ed0ef0f0 01f2fcf7 05030501     ................
 23fdf40:	010cebd0 dc0dede9 fe03f5f8 fe0d18e7     ................
 23fdf50:	f71cd7d7 cf0bd9f6 05e30bfd 061b1400     ................
 23fdf60:	fa0becdf ec08eddc 04fe04f2 090303ef     ................
 23fdf70:	040de1eb ce07f8ee 180af9ee 06231d23     ............#.#.
 23fdf80:	fb17efee f30ef2fe 0ce5ebe5 fc0203f3     ................
 23fdf90:	f8fefcd7 c808f0df eaea10f4 f81b0ce4     ................
 23fdfa0:	fa09fcd4 d312e0d1 01ed1004 090914df     ................
 23fdfb0:	fa16fbd5 c602ecd8 fbe10700 0d0219e8     ................
 23fdfc0:	061bf506 f80407ea e8fae4eb ff0d2704     .............'..
 23fdfd0:	fd25f904 f20c15e8 fff8eee4 f52020f9     ..%..........  .
 23fdfe0:	e726fd02 f60108f4 e501e9fa fc0cf901     ..&.............
 23fdff0:	f22f020a f01c07ef f004e2e6 fc021505     ../.............
 23fe000:	0419f30b f2fb08fb f4f9f4ee f4090508     ................
 23fe010:	ff1bd502 ff0800f9 ed09f0db fe0d0a07     ................
 23fe020:	f31c0d0b ef08fdf2 f607e5e6 fe131912     ................
 23fe030:	0222080d f216eff2 04dbebea 0f0f1800     ..".............
 23fe040:	f922f905 fb15f3e7 eef3f6fe f60d1607     ..".............
 23fe050:	fe26e704 f603f802 f70ae6fc 04091000     ..&.............
 23fe060:	f818f40b f3110212 06ecefef 07170d02     ................
 23fe070:	fe1b00ff fb0dedfc ef08f4ff 0b040c00     ................
 23fe080:	fe0c0b01 f4f1011b 051cf301 fdf40b0b     ................
 23fe090:	0214f115 f90c01fa eb07fcf5 03100403     ................
 23fe0a0:	eb0cd806 fdfa01f8 cffbfbe2 ec0d0f00     ................
 23fe0b0:	f628fcfe fa04fa12 d8edf5f3 fd020bf4     ..(.............
 23fe0c0:	fc1df9fc fb10f312 dcf5f5f0 01030707     ................
 23fe0d0:	f624fb13 f803f7ff e103f60d f41a15f0     ..$.............
 23fe0e0:	fd22f602 040509f7 f7fcf5f3 010afe0e     ..".............
 23fe0f0:	f526fd15 f8140eff ed07f7fd 071a1010     ..&.............
 23fe100:	0a25120c f41107f0 e5ee05f6 011b100a     ..%.............
 23fe110:	ff1d1706 f70af909 fddaf203 ff1d100f     ................
 23fe120:	fc1ef70d f614f303 eee3e2fa 0012180d     ................
 23fe130:	f514100b 0104e216 f000f2f7 fd111a1f     ................
 23fe140:	f506000b f3050209 ec01f0fa 05fcf4f4     ................
 23fe150:	cce8e432 05dd17f3 f2caf3e3 ea13081b     2...............
 23fe160:	c5d9ee0f 03be12e6 dbcafcd0 d90f0909     ................
 23fe170:	cbf3040f 06b40405 f0d0f1fa cf16f71f     ................
 23fe180:	dbf20311 04d30a00 eefef7f4 ef18f412     ................
 23fe190:	d0fc0416 02cf150a d9d203ef d705e404     ................
 23fe1a0:	e1fefd19 0bef17ed ecc3eecb e8fbfd0f     ................
 23fe1b0:	c9f2eb0d 07d619f7 f1e2f1db e50a110f     ................
 23fe1c0:	e1effe09 04e11603 f5eafbdd ee040807     ................
 23fe1d0:	d6e1f511 feee1005 e0d5f7da db01f80d     ................
 23fe1e0:	ddedfc15 03dd0cf5 f0e001da e7fe010f     ................
 23fe1f0:	d4d6fc12 06d40f19 d5dffffc e4faf9fc     ................
 23fe200:	bfebf3fe 03d30b05 d9e1fdfa df01f802     ................
 23fe210:	c0ebfe12 01befc0a e4d909ee d9fd0609     ................
 23fe220:	bef6ff0a 08df0b07 e5f5feea d10a0705     ................
 23fe230:	dbdff516 fdef090a e7ed03ed e70b0a0e     ................
 23fe240:	d8e4ff00 06cd0507 f1dcfeef e505fd0e     ................
 23fe250:	caef010a 0ace0e18 dde2010f dafbf8f3     ................
 23fe260:	cbf1f502 fbd0160b d3cc10f1 d8f7e308     ................
 23fe270:	c5e3f60c 0ced0eeb d1dbfaea ebf4fc02     ................
 23fe280:	b6dcf80f 04d70e10 cfe209eb d204f305     ................
 23fe290:	c7e3ed12 0ed51606 cdd301db c903f000     ................
 23fe2a0:	bec6000a 0cd816fb c7bd03ca d0ffff0f     ................
 23fe2b0:	bddaf80f 12dd0efe dee4f8e1 d405f306     ................
 23fe2c0:	d1e8ee05 16cf0f16 dfdf0de2 c1f6f308     ................
 23fe2d0:	f6d4f315 09c80be7 ffb401d4 f10cff0a     ................

023fe2e0 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
 23fe2e0:	000000c9 00000477 fffff725 000006fc     ....w...%.......
 23fe2f0:	fffffd79 0000012d fffff782 fffff497     y...-...........
 23fe300:	ffffec2f fffff0ad fffffd76 00000146     /.......v...F...
 23fe310:	fffffed7 ffffedfa fffff6e3 00000dde     ................

023fe320 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
 23fe320:	f71c5e03 ee9f00b4 e4b946f6 c1c102c3     .^.......F......
 23fe330:	e2ec7ffa e394fbb5 bad9aaf6 eccde414     ................
 23fe340:	8ff981fd 14f4e319 88f89444 05cfdbfa     ........D.......
 23fe350:	350a1808 dff896d3 49191853 f01a81d9     ...5....S..I....
 23fe360:	00092af3 c8008ae3 a050c717 01c9e761     .*........P.a...
 23fe370:	4735cd09 f6d7f342 c57ffde4 e60be04f     ..5GB.......O...
 23fe380:	ea0ab2f2 102cef0b f12bbdf7 f8280e12     ......,...+...(.
 23fe390:	0d7ffc03 0e132703 3be61693 14c9f3e7     .....'.....;....
 23fe3a0:	fcbd4381 e59c3b29 3fbc5983 03a117f1     .C..);...Y.?....
 23fe3b0:	2d73113a 000905e8 e24c030d fcfbfdf0     :.s-......L.....
 23fe3c0:	477ffbf7 d8c401f0 a3fb52f5 0c7e32fb     ...G.....R...2~.
 23fe3d0:	1a364303 20711e36 d5e220fd fb7f113f     .C6.6.q . ..?...
 23fe3e0:	00fece48 5130ff15 0e81c21e 74a8fb1c     H.....0Q.......t
 23fe3f0:	eef6e118 1cd33a0f 6aefc31b e9293885     .....:.....j.8).
 23fe400:	ee93d314 f1e4fdc9 7fb3ec07 14cc3efb     .............>..
 23fe410:	7faee4ac ff4ffd4d 4ebee29c 1027f928     ....M.O....N(.'.
 23fe420:	5c9ee4ae 1f270a0e 39d9eaf6 ee24ed79     ...\..'....9y.$.
 23fe430:	0b3bd1f2 f529e77f 2ce1ddf1 f115e720     ..;...)...., ...
 23fe440:	17d81df4 ec3ef6fb fcc617f7 e80e06ef     ......>.........
 23fe450:	f97f48fa fe00ed0f 1caf1c2a bcddfe90     .H......*.......
 23fe460:	46c1547f b6c7cd99 517e66f0 d4ecbec2     .T.F.....f~Q....
 23fe470:	1f3050fd bbf506d4 424a7ff6 adfbecc0     .P0.......JB....
 23fe480:	58deee28 afb8d0e4 fc43094c dcbdc4f4     (..X....L.C.....
 23fe490:	db56ee12 d9cbc703 cc7fe5fe e3c6d8e9     ..V.............

023fe4a0 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23fe4a0:	00000008 3780c5af 37a12c38 37a4c0f8     .......78,.7...7
 23fe4b0:	378fc9ae 37ca219f 375cff74 37954a88     ...7.!.7t.\7.J.7
 23fe4c0:	3786a713                                ...7

023fe4c4 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
 23fe4c4:	00000008 3b80c5af 3ba12c38 3ba4c0f8     .......;8,.;...;
 23fe4d4:	3b8fc9ae 3bca219f 3b5cff74 3b954a88     ...;.!.;t.\;.J.;
 23fe4e4:	3b86a713                                ...;

023fe4e8 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
 23fe4e8:	00000001 3b800000                       .......;

023fe4f0 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
 23fe4f0:	00000001 3ca3ea2a                       ....*..<

023fe4f8 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
 23fe4f8:	00000001 3ca3ea2a                       ....*..<

023fe500 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
 23fe500:	00000001 3ca3ea2a                       ....*..<

023fe508 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
 23fe508:	00000001 3ca3ea2a                       ....*..<

023fe510 <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
 23fe510:	00000001 3d10bfb9                       .......=

023fe518 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
 23fe518:	00000001 3d10bfb9                       .......=

023fe520 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
 23fe520:	00000001 3d10bfb9                       .......=

023fe528 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
 23fe528:	00000001 3d10bfb9                       .......=

023fe530 <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
 23fe530:	00000001 3f071097                       .......?

023fe538 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
 23fe538:	00000001 3b800000                       .......;

023fe540 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
 23fe540:	0000154a 0000234c 00000c17 ffffe1e9     J...L#..........
 23fe550:	000033f4 ffff8ad8 fffff882 ffffa89f     .3..............

023fe560 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
 23fe560:	5116e3fe 23722912 b7efd6db ccbaa4dd     ...Q.)r#........
 23fe570:	10d7afcb 200ffe4b e5151816 490b1825     ....K.. ....%..I
 23fe580:	11524056 fd17fe1c 61d7b8ec 427b1027     V@R........a'.{B
 23fe590:	1e0fcdf8 e701f581 5ddad401 0413220d     ...........]."..
 23fe5a0:	073707f1 591a3040 2c2d312a e4e02e35     ..7.@0.Y*1-,5...
 23fe5b0:	3437b811 ff10e945 b6aff6d3 b0be91c3     ..74E...........
 23fe5c0:	16fa9ea3 02f1e147 0dd2e4f6 effb1cf5     ....G...........
 23fe5d0:	fe182a35 f4152bf3 4b562dad 5c0a7f31     5*...+...-VK1..\
 23fe5e0:	d8eff822 e72ce921 2c37ffc4 1d37e70d     "...!.,...7,..7.
 23fe5f0:	e3e0f605 c1f505e7 0ce7d4a9 ba11d7bd     ................
 23fe600:	27133803 5454673f e4e8e52e 05dde20c     .8.'?gTT........
 23fe610:	f7f5eff7 0a101f0c de0505d4 e3e519ed     ................
 23fe620:	e7dae6b1 a909eebe 064a0f13 3b57661d     ..........J..fW;
 23fe630:	0cd8fdec e702ee27 f62729e1 260202e2     ....'....)'....&
 23fe640:	19e83215 d108d8eb 10c99dc1 f2f8fbf6     .2..............
 23fe650:	e0bb3167 e9d5c2c2 cd04e28d e5a8e90e     g1..............
 23fe660:	1cfbdb49 ecdcee50 9ea0bdd0 02c0c6cf     I...P...........
 23fe670:	cd0b0bba 0b30cffe dae1f173 ca04ede9     ......0.s.......
 23fe680:	bd1fb4d5 d9ec08bc 2c01c6e4 d9c2072c     ...........,,...
 23fe690:	b696e998 02c2bfb2 aebef0b1 f2e7d2ae     ................
 23fe6a0:	01b7ce41 3d5d3a48 2e1a0f26 3135582b     A...H:]=&...+X51
 23fe6b0:	29601b3e 450a407f f8f8df27 4b594820     >.`).@.E'... HYK
 23fe6c0:	094c2a54 6c545043 09472b3b f720f943     T*L.CPTl;+G.C. .
 23fe6d0:	c3f7ec64 1c5408c7 e3486063 10f6fce0     d.....T.c`H.....
 23fe6e0:	0d3b1e13 414c257b 02dac7f3 0dcf2f00     ..;.{%LA...../..
 23fe6f0:	e8ffc6cf aef0e609 b4bff044 eb55c488     ........D.....U.
 23fe700:	dd22654f 04c1d3d1 0e27d2f6 4f54f54b     Oe".......'.K.TO
 23fe710:	e1b0abe7 e62c0c0d 01570c35 d4f91f2f     ......,.5.W./...
 23fe720:	ad131507 1b08ef81 e8194e37 e2a0d88e     ........7N......
 23fe730:	281fe1d6 f043ce56 d99395bc e5d3f809     ...(V.C.........
 23fe740:	c39add6c f1aee3bc 362cfddd 2d16381e     l.........,6.8.-
 23fe750:	e4d7d9ea 0dd3050d 24e5e818 16fbf029     ...........$)...
 23fe760:	ea0812f3 1af3f803 86d3f544 b7dad1c5     ........D.......
 23fe770:	2e39f8f5 feff3500 eff8fae4 23fd270c     ..9..5.......'.#
 23fe780:	fce90923 24e80c04 0a0df8e2 0ce0dff9     #......$........
 23fe790:	bb83d27f d5c1cea5 392feec6 0ff4421e     ........../9.B..
 23fe7a0:	fbedd7de f9e1121c 00cace22 e0170af9     ........".......
 23fe7b0:	13dc1d1b eef5ed26 0cca33eb f3c6caeb     ....&....3......
 23fe7c0:	75053112 2a266b63 0f140ee4 d84709c6     .1.uck&*......G.
 23fe7d0:	070499f4 51af11d4 fc22d62d f2110ffc     .......Q-.".....
 23fe7e0:	29f6f1ab f2d0bbeb 1ef8ee02 332e7f5f     ...)........_..3
 23fe7f0:	2152fc22 3b30f70c 18cfe7cc 11d2eb0f     ".R!..0;........
 23fe800:	e9dc01f8 d3d05417 e613f425 e2eadbeb     .....T..%.......
 23fe810:	5d433f28 3b1a7652 a919dc3f 2df24600     (?C]Rv.;?....F.-
 23fe820:	1526abec 4df7c60d c7d3a90f 3cfa0804     ..&....M.......<
 23fe830:	e7e72410 cce0e6cf f1d9c2dc 123ffbd5     .$............?.
 23fe840:	05507f2b 09ef05df 0c3e0cfc e003df05     +.P.......>.....
 23fe850:	f2a8ae10 e6e602bb ed20eb05 0f0c25ca     .......... ..%..
 23fe860:	15e30905 125c20c6 2e663523 f2e9c2e1     ..... \.#5f.....
 23fe870:	160e3be2 2825e1e3 faadf2d8 f4e0020f     .;....%(........
 23fe880:	b9bbd7f6 d7d0b5a0 c2c30220 ef16dcd5     ........ .......
 23fe890:	ee45274d ed0abbe3 f8e10212 05f814e6     M'E.............
 23fe8a0:	03cceff4 09d3bdc9 29f1cc24 0eced705     ........$..)....
 23fe8b0:	0d4bffe3 32f0dd4f f0ed2622 e0bf12e3     ..K.O..2"&......
 23fe8c0:	12dec809 0c041918 dafd3e58 f6ecf71a     ........X>......
 23fe8d0:	03b0ace7 2901a7b0 134d3902 1bdf0c48     .......).9M.H...
 23fe8e0:	db08f10c 030516f0 08d4cbe8 1ee7de07     ................
 23fe8f0:	0229225a 16cd1810 019a81ce fef0aab7     Z").............
 23fe900:	3f1e32e9 4c1b2516 f91e1f36 120925ef     .2.?.%.L6....%..
 23fe910:	12f30ac8 4e250eea 0be50617 21f3ede1     ......%N.......!

023fe920 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23fe920:	00000002 00000001 00000f78              ........x...

023fe92c <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23fe92c:	00000001 00000004                       ........

023fe934 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23fe934:	00000001 00000004                       ........

023fe93c <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23fe93c:	00000001 00000004                       ........

023fe944 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23fe944:	00000001 00000004                       ........

023fe94c <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23fe94c:	00000001 00000002                       ........

023fe954 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23fe954:	00000001 00000009                       ........

023fe95c <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23fe95c:	00000002 00000009 00000190              ............

023fe968 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23fe968:	00000001 00000010                       ........

023fe970 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23fe970:	00000004 00000010 00000001 00000003     ................
 23fe980:	00000008                                ....

023fe984 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23fe984:	00000001 00000008                       ........

023fe98c <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
 23fe98c:	00000004 00000008 00000001 00000003     ................
 23fe99c:	00000028                                (...

023fe9a0 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
 23fe9a0:	00000004 00000001 00000001 00000063     ............c...
 23fe9b0:	00000028                                (...

023fe9b4 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
 23fe9b4:	00000004 00000001 00000001 00000063     ............c...
 23fe9c4:	00000008                                ....

023fe9c8 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
 23fe9c8:	00000004 00000001 00000063 00000001     ........c.......
 23fe9d8:	00000008                                ....

023fe9dc <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
 23fe9dc:	00000004 00000001 00000032 00000001     ........2.......
 23fe9ec:	00000008                                ....

023fe9f0 <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
 23fe9f0:	00000004 00000001 00000001 00000032     ............2...
 23fea00:	00000008                                ....

023fea04 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
 23fea04:	00000004 00000001 00000001 00000032     ............2...
 23fea14:	00000010                                ....

023fea18 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
 23fea18:	00000004 00000001 00000032 00000001     ........2.......
 23fea28:	00000010                                ....

023fea2c <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
 23fea2c:	00000004 00000001 00000019 00000001     ................
 23fea3c:	00000010                                ....

023fea40 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
 23fea40:	00000002 00000001 00000190              ............

023fea4c <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
 23fea4c:	00000002 00000001 00000009              ............

023fea58 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
 23fea58:	00000002 00000001 00000009              ............

023fea64 <_ZN12_GLOBAL__N_1L6quant0E>:
 23fea64:	023fd30c 023fd26c 00000000              ..?.l.?.....

023fea70 <_ZN12_GLOBAL__N_1L6quant6E>:
 23fea70:	023fd3b4 023fd274 00000000              ..?.t.?.....

023fea7c <_ZN12_GLOBAL__N_1L6quant7E>:
 23fea7c:	023fd3bc 023fd27c 00000000              ..?.|.?.....

023fea88 <_ZN12_GLOBAL__N_1L6quant8E>:
 23fea88:	023fd3c4 023fd284 00000000              ..?...?.....

023fea94 <_ZN12_GLOBAL__N_1L6quant9E>:
 23fea94:	023fd408 023fd2c8 00000000              ..?...?.....

023feaa0 <_ZN12_GLOBAL__N_1L7inputs0E>:
 23feaa0:	00000002 00000000 00000001              ............

023feaac <_ZN12_GLOBAL__N_1L7inputs1E>:
 23feaac:	00000003 0000000c 0000000b 0000000a     ................

023feabc <_ZN12_GLOBAL__N_1L7inputs2E>:
 23feabc:	00000002 0000000d 00000002              ............

023feac8 <_ZN12_GLOBAL__N_1L7inputs3E>:
 23feac8:	00000001 0000000e                       ........

023fead0 <_ZN12_GLOBAL__N_1L7inputs4E>:
 23fead0:	00000002 0000000f 00000003              ............

023feadc <_ZN12_GLOBAL__N_1L7inputs5E>:
 23feadc:	00000003 00000010 00000009 00000008     ................

023feaec <_ZN12_GLOBAL__N_1L7inputs6E>:
 23feaec:	00000002 00000011 00000004              ............

023feaf8 <_ZN12_GLOBAL__N_1L7inputs7E>:
 23feaf8:	00000001 00000012                       ........

023feb00 <_ZN12_GLOBAL__N_1L7inputs8E>:
 23feb00:	00000002 00000013 00000005              ............

023feb0c <_ZN12_GLOBAL__N_1L7inputs9E>:
 23feb0c:	00000003 00000014 00000007 00000006     ................

023feb1c <_ZN12_GLOBAL__N_1L7opdata0E>:
	...

023feb40 <_ZN12_GLOBAL__N_1L7opdata1E>:
 23feb40:	00000001 00000001 00000001 00000001     ................
 23feb50:	00000001 00000001                       ........

023feb58 <_ZN12_GLOBAL__N_1L7opdata2E>:
	...

023feb7c <_ZN12_GLOBAL__N_1L7opdata3E>:
 23feb7c:	00000001 00000001 00000002 00000001     ................
 23feb8c:	00000002 00000000 00000000 00000000     ................
	...

023feba4 <_ZN12_GLOBAL__N_1L7opdata4E>:
	...

023febc8 <_ZN12_GLOBAL__N_1L7opdata5E>:
 23febc8:	00000001 00000001 00000001 00000001     ................
 23febd8:	00000001 00000001                       ........

023febe0 <_ZN12_GLOBAL__N_1L7opdata6E>:
	...

023fec04 <_ZN12_GLOBAL__N_1L7opdata7E>:
 23fec04:	00000001 00000001 00000002 00000001     ................
 23fec14:	00000002 00000000 00000000 00000000     ................
	...

023fec2c <_ZN12_GLOBAL__N_1L7opdata8E>:
	...

023fec50 <_ZN12_GLOBAL__N_1L7opdata9E>:
 23fec50:	00000000                                ....

023fec54 <_ZN12_GLOBAL__N_1L7quant10E>:
 23fec54:	023fe4a0 023fd314 00000000              ..?...?.....

023fec60 <_ZN12_GLOBAL__N_1L7quant11E>:
 23fec60:	023fe4c4 023fd338 00000000              ..?.8.?.....

023fec6c <_ZN12_GLOBAL__N_1L7quant12E>:
 23fec6c:	023fe4e8 023fd35c 00000000              ..?.\.?.....

023fec78 <_ZN12_GLOBAL__N_1L7quant13E>:
 23fec78:	023fe4f0 023fd364 00000000              ..?.d.?.....

023fec84 <_ZN12_GLOBAL__N_1L7quant14E>:
 23fec84:	023fe4f8 023fd36c 00000000              ..?.l.?.....

023fec90 <_ZN12_GLOBAL__N_1L7quant15E>:
 23fec90:	023fe500 023fd374 00000000              ..?.t.?.....

023fec9c <_ZN12_GLOBAL__N_1L7quant16E>:
 23fec9c:	023fe508 023fd37c 00000000              ..?.|.?.....

023feca8 <_ZN12_GLOBAL__N_1L7quant17E>:
 23feca8:	023fe510 023fd384 00000000              ..?...?.....

023fecb4 <_ZN12_GLOBAL__N_1L7quant18E>:
 23fecb4:	023fe518 023fd38c 00000000              ..?...?.....

023fecc0 <_ZN12_GLOBAL__N_1L7quant19E>:
 23fecc0:	023fe520 023fd394 00000000               .?...?.....

023feccc <_ZN12_GLOBAL__N_1L7quant20E>:
 23feccc:	023fe528 023fd39c 00000000              (.?...?.....

023fecd8 <_ZN12_GLOBAL__N_1L7quant21E>:
 23fecd8:	023fe530 023fd3a4 00000000              0.?...?.....

023fece4 <_ZN12_GLOBAL__N_1L7quant22E>:
 23fece4:	023fe538 023fd3ac 00000000              8.?...?.....

023fecf0 <_ZN12_GLOBAL__N_1L8inputs10E>:
 23fecf0:	00000001 00000015                       ........

023fecf8 <_ZN12_GLOBAL__N_1L8nodeDataE>:
 23fecf8:	023feaa0 023fedac 023feb1c 00000000     ..?...?...?.....
 23fed08:	023feaac 023fedb4 023feb40 00000001     ..?...?.@.?.....
 23fed18:	023feabc 023fedbc 023feb58 00000000     ..?...?.X.?.....
 23fed28:	023feac8 023fedc4 023feb7c 00000002     ..?...?.|.?.....
 23fed38:	023fead0 023fedcc 023feba4 00000000     ..?...?...?.....
 23fed48:	023feadc 023fedd4 023febc8 00000001     ..?...?...?.....
 23fed58:	023feaec 023feddc 023febe0 00000000     ..?...?...?.....
 23fed68:	023feaf8 023fede4 023fec04 00000002     ..?...?...?.....
 23fed78:	023feb00 023fedec 023fec2c 00000000     ..?...?.,.?.....
 23fed88:	023feb0c 023fedf4 023fec50 00000003     ..?...?.P.?.....
 23fed98:	023fecf0 023fedfc 023feda8 00000004     ..?...?...?.....

023feda8 <_ZN12_GLOBAL__N_1L8opdata10E>:
 23feda8:	3f800000                                ...?

023fedac <_ZN12_GLOBAL__N_1L8outputs0E>:
 23fedac:	00000001 0000000c                       ........

023fedb4 <_ZN12_GLOBAL__N_1L8outputs1E>:
 23fedb4:	00000001 0000000d                       ........

023fedbc <_ZN12_GLOBAL__N_1L8outputs2E>:
 23fedbc:	00000001 0000000e                       ........

023fedc4 <_ZN12_GLOBAL__N_1L8outputs3E>:
 23fedc4:	00000001 0000000f                       ........

023fedcc <_ZN12_GLOBAL__N_1L8outputs4E>:
 23fedcc:	00000001 00000010                       ........

023fedd4 <_ZN12_GLOBAL__N_1L8outputs5E>:
 23fedd4:	00000001 00000011                       ........

023feddc <_ZN12_GLOBAL__N_1L8outputs6E>:
 23feddc:	00000001 00000012                       ........

023fede4 <_ZN12_GLOBAL__N_1L8outputs7E>:
 23fede4:	00000001 00000013                       ........

023fedec <_ZN12_GLOBAL__N_1L8outputs8E>:
 23fedec:	00000001 00000014                       ........

023fedf4 <_ZN12_GLOBAL__N_1L8outputs9E>:
 23fedf4:	00000001 00000015                       ........

023fedfc <_ZN12_GLOBAL__N_1L9outputs10E>:
 23fedfc:	00000001 00000016 6d6f682f 696e2f65     ......../home/ni
 23fee0c:	732f6b63 7774666f 2f657261 75736976     ck/software/visu
 23fee1c:	615f6c61 7472656c 7369762f 5f6c6175     al_alert/visual_
 23fee2c:	72656c61 695f7374 7265666e 69636e65     alerts_inferenci
 23fee3c:	2f2f676e 2f637273 65676465 706d692d     ng//src/edge-imp
 23fee4c:	65736c75 6b64732d 6e65742f 66726f73     ulse-sdk/tensorf
 23fee5c:	2f776f6c 6574696c 63696d2f 6b2f6f72     low/lite/micro/k
 23fee6c:	656e7265 662f736c 796c6c75 6e6f635f     ernels/fully_con
 23fee7c:	7463656e 632e6465 25007070 64253a73     nected.cpp.%s:%d
 23fee8c:	20732520 25203d21 25282073 3d212064      %s != %s (%d !=
 23fee9c:	29642520 4d524100 54414d5f 55535f48      %d).ARM_MATH_SU
 23feeac:	53454343 72610053 75665f6d 5f796c6c     CCESS.arm_fully_
 23feebc:	6e6e6f63 65746365 38735f64 63262028     connected_s8( &c
 23feecc:	202c7874 5f636626 61726170 202c736d     tx, &fc_params, 
 23feedc:	61757126 705f746e 6d617261 26202c73     &quant_params, &
 23feeec:	75706e69 69645f74 202c736d 696c6674     input_dims, tfli
 23feefc:	3a3a6574 7263696d 473a3a6f 65547465     te::micro::GetTe
 23fef0c:	726f736e 61746144 746e693c 3e745f38     nsorData<int8_t>
 23fef1c:	706e6928 2c297475 69662620 7265746c     (input), &filter
 23fef2c:	6d69645f 74202c73 74696c66 6d3a3a65     _dims, tflite::m
 23fef3c:	6f726369 65473a3a 6e655474 44726f73     icro::GetTensorD
 23fef4c:	3c617461 38746e69 283e745f 746c6966     ata<int8_t>(filt
 23fef5c:	2c297265 69622620 645f7361 2c736d69     er), &bias_dims,
 23fef6c:	6c667420 3a657469 63696d3a 3a3a6f72      tflite::micro::
 23fef7c:	54746547 6f736e65 74614472 6e693c61     GetTensorData<in
 23fef8c:	5f323374 62283e74 29736169 6f26202c     t32_t>(bias), &o
 23fef9c:	75707475 69645f74 202c736d 696c6674     utput_dims, tfli
 23fefac:	3a3a6574 7263696d 473a3a6f 65547465     te::micro::GetTe
 23fefbc:	726f736e 61746144 746e693c 3e745f38     nsorData<int8_t>
 23fefcc:	74756f28 29747570 73250029 2064253a     (output)).%s:%d 
 23fefdc:	77207325 6e207361 7420746f 2e657572     %s was not true.
 23fefec:	706e6900 21207475 756e203d 74706c6c     .input != nullpt
 23feffc:	69660072 7265746c 203d2120 6c6c756e     r.filter != null
 23ff00c:	00727470 7074756f 21207475 756e203d     ptr.output != nu
 23ff01c:	74706c6c 73250072 2064253a 21207325     llptr.%s:%d %s !
 23ff02c:	7325203d 73252820 203d2120 00297325     = %s (%s != %s).
 23ff03c:	7074756f 3e2d7475 65707974 706e6900     output->type.inp
 23ff04c:	3e2d7475 65707974 62794800 20646972     ut->type.Hybrid 
 23ff05c:	65646f6d 6120736c 6e206572 7320746f     models are not s
 23ff06c:	6f707075 64657472 206e6f20 694c4654     upported on TFLi
 23ff07c:	4d206574 6f726369 7954002e 25206570     te Micro..Type %
 23ff08c:	25282073 6e202964 7320746f 6f707075     s (%d) not suppo
 23ff09c:	64657472 0000002e                       rted....

023ff0a4 <_ZN6tflite25kFullyConnectedBiasTensorE>:
 23ff0a4:	00000002                                ....

023ff0a8 <_ZN6tflite26kFullyConnectedInputTensorE>:
 23ff0a8:	00000000                                ....

023ff0ac <_ZN6tflite27kFullyConnectedOutputTensorE>:
 23ff0ac:	00000000                                ....

023ff0b0 <_ZN6tflite28kFullyConnectedWeightsTensorE>:
 23ff0b0:	00000001 6d6f682f 696e2f65 732f6b63     ..../home/nick/s
 23ff0c0:	7774666f 2f657261 75736976 615f6c61     oftware/visual_a
 23ff0d0:	7472656c 7369762f 5f6c6175 72656c61     lert/visual_aler
 23ff0e0:	695f7374 7265666e 69636e65 2f2f676e     ts_inferencing//
 23ff0f0:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
 23ff100:	6b64732d 6e65742f 66726f73 2f776f6c     -sdk/tensorflow/
 23ff110:	6574696c 63696d2f 6b2f6f72 656e7265     lite/micro/kerne
 23ff120:	722f736c 61687365 632e6570 2d007070     ls/reshape.cpp.-
 23ff130:	74730031 63746572 69645f68 756e006d     1.stretch_dim.nu
 23ff140:	756f5f6d 74757074 656c655f 746e656d     m_output_element
 23ff150:	756e0073 6e695f6d 5f747570 6d656c65     s.num_input_elem
 23ff160:	73746e65 6d754e00 75706e49 6e287374     ents.NumInputs(n
 23ff170:	2965646f 203d3d20 7c7c2031 6d754e20     ode) == 1 || Num
 23ff180:	75706e49 6e287374 2965646f 203d3d20     Inputs(node) == 
 23ff190:	754e0032 74754f6d 73747570 646f6e28     2.NumOutputs(nod
 23ff1a0:	6b002965 694c6654 6b4f6574 73655200     e).kTfLiteOk.Res
 23ff1b0:	65706168 7074754f 63287475 65746e6f     hapeOutput(conte
 23ff1c0:	202c7478 65646f6e 78650029 656e6f70     xt, node).expone
 23ff1d0:	3c20746e 3133203d 746e4900 72656765     nt <= 31.Integer
 23ff1e0:	65707954 6d656720 776f6c6d 523a3a70     Type gemmlowp::R
 23ff1f0:	646e756f 44676e69 64697669 50794265     oundingDivideByP
 23ff200:	4928544f 6765746e 79547265 202c6570     OT(IntegerType, 
 23ff210:	29746e69 69775b20 49206874 6765746e     int) [with Integ
 23ff220:	79547265 3d206570 6e6f6c20 6e692067     erType = long in
 23ff230:	2f005d74 656d6f68 63696e2f 6f732f6b     t]./home/nick/so
 23ff240:	61777466 762f6572 61757369 6c615f6c     ftware/visual_al
 23ff250:	2f747265 75736976 615f6c61 7472656c     ert/visual_alert
 23ff260:	6e695f73 65726566 6e69636e 732f2f67     s_inferencing//s
 23ff270:	652f6372 2d656764 75706d69 2d65736c     rc/edge-impulse-
 23ff280:	2f6b6473 72696874 61705f64 2f797472     sdk/third_party/
 23ff290:	6d6d6567 70776f6c 7869662f 6f706465     gemmlowp/fixedpo
 23ff2a0:	2f746e69 65786966 696f7064 682e746e     int/fixedpoint.h
 23ff2b0:	6f682f00 6e2f656d 2f6b6369 74666f73     ./home/nick/soft
 23ff2c0:	65726177 7369762f 5f6c6175 72656c61     ware/visual_aler
 23ff2d0:	69762f74 6c617573 656c615f 5f737472     t/visual_alerts_
 23ff2e0:	65666e69 636e6572 2f676e69 6372732f     inferencing//src
 23ff2f0:	6764652f 6d692d65 736c7570 64732d65     /edge-impulse-sd
 23ff300:	65742f6b 726f736e 776f6c66 74696c2f     k/tensorflow/lit
 23ff310:	696d2f65 2f6f7263 6e72656b 2f736c65     e/micro/kernels/
 23ff320:	766e6f63 7070632e 6f682f00 6e2f656d     conv.cpp./home/n
 23ff330:	2f6b6369 74666f73 65726177 7369762f     ick/software/vis
 23ff340:	5f6c6175 72656c61 69762f74 6c617573     ual_alert/visual
 23ff350:	656c615f 5f737472 65666e69 636e6572     _alerts_inferenc
 23ff360:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff370:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff380:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff390:	6e72656b 2f736c65 766e6f63 6d6f635f     kernels/conv_com
 23ff3a0:	2e6e6f6d 00707063 5f736168 73616962     mon.cpp.has_bias
 23ff3b0:	207c7c20 65646f6e 6e693e2d 73747570      || node->inputs
 23ff3c0:	69733e2d 3d20657a 0032203d 65646f6e     ->size == 2.node
 23ff3d0:	756f3e2d 74757074 733e2d73 00657a69     ->outputs->size.

023ff3e0 <_ZN6tflite15kConvBiasTensorE>:
 23ff3e0:	00000002                                ....

023ff3e4 <_ZN6tflite16kConvInputTensorE>:
 23ff3e4:	00000000                                ....

023ff3e8 <_ZN6tflite17kConvOutputTensorE>:
 23ff3e8:	00000000                                ....

023ff3ec <_ZN6tflite18kConvWeightsTensorE>:
 23ff3ec:	00000001                                ....

023ff3f0 <_ZN6tflite23kConvQuantizedDimensionE>:
 23ff3f0:	00000000 6d6f682f 696e2f65 732f6b63     ..../home/nick/s
 23ff400:	7774666f 2f657261 75736976 615f6c61     oftware/visual_a
 23ff410:	7472656c 7369762f 5f6c6175 72656c61     lert/visual_aler
 23ff420:	695f7374 7265666e 69636e65 2f2f676e     ts_inferencing//
 23ff430:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
 23ff440:	6b64732d 6e65742f 66726f73 2f776f6c     -sdk/tensorflow/
 23ff450:	6574696c 63696d2f 6b2f6f72 656e7265     lite/micro/kerne
 23ff460:	702f736c 696c6f6f 632e676e 49007070     ls/pooling.cpp.I
 23ff470:	7475706e 70797420 73252065 20736920     nput type %s is 
 23ff480:	20746f6e 72727563 6c746e65 75732079     not currently su
 23ff490:	726f7070 00646574 65707954 20732520     pported.Type %s 
 23ff4a0:	20746f6e 72727563 6c746e65 75732079     not currently su
 23ff4b0:	726f7070 2e646574 6f682f00 6e2f656d     pported../home/n
 23ff4c0:	2f6b6369 74666f73 65726177 7369762f     ick/software/vis
 23ff4d0:	5f6c6175 72656c61 69762f74 6c617573     ual_alert/visual
 23ff4e0:	656c615f 5f737472 65666e69 636e6572     _alerts_inferenc
 23ff4f0:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff500:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff510:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff520:	6e72656b 2f736c65 74666f73 5f78616d     kernels/softmax_
 23ff530:	6d6d6f63 632e6e6f 4e007070 6e496d75     common.cpp.NumIn
 23ff540:	73747570 646f6e28 4e002965 69446d75     puts(node).NumDi
 23ff550:	736e656d 736e6f69 706e6928 20297475     mensions(input) 
 23ff560:	31203d3e 646f6e00 753e2d65 5f726573     >= 1.node->user_
 23ff570:	61746164 203d2120 6c6c756e 00727470     data != nullptr.
 23ff580:	75706e69 743e2d74 20657079 6b203d3d     input->type == k
 23ff590:	694c6654 6e496574 7c203874 6e69207c     TfLiteInt8 || in
 23ff5a0:	2d747570 7079743e 3d3d2065 66546b20     put->type == kTf
 23ff5b0:	6574694c 31746e49 332d0036 38363732     LiteInt16.-32768
 23ff5c0:	74756f00 2d747570 7261703e 2e736d61     .output->params.
 23ff5d0:	6f72657a 696f705f 2500746e 64253a73     zero_point.%s:%d
 23ff5e0:	20732520 20746f6e 7261656e 20732520      %s not near %s 
 23ff5f0:	20662528 25203d21 31002966 2f20662e     (%f != %f).1.f /
 23ff600:	35353620 6f003633 75707475 703e2d74      65536.output->p
 23ff610:	6d617261 63732e73 00656c61 4c66546b     arams.scale.kTfL
 23ff620:	49657469 0038746e 3832312d 74756f00     iteInt8.-128.out
 23ff630:	2d747570 7261703e 2e736d61 6c616373     put->params.scal
 23ff640:	3d3d2065 662e3120 32202f20 2f003635     e == 1.f / 256./
 23ff650:	656d6f68 63696e2f 6f732f6b 61777466     home/nick/softwa
 23ff660:	762f6572 61757369 6c615f6c 2f747265     re/visual_alert/
 23ff670:	75736976 615f6c61 7472656c 6e695f73     visual_alerts_in
 23ff680:	65726566 6e69636e 732f2f67 652f6372     ferencing//src/e
 23ff690:	2d656764 75706d69 2d65736c 2f6b6473     dge-impulse-sdk/
 23ff6a0:	736e6574 6c66726f 6c2f776f 2f657469     tensorflow/lite/
 23ff6b0:	6e72656b 2f736c65 6e72656b 755f6c65     kernels/kernel_u
 23ff6c0:	5f6c6974 6574696c 7070632e 706e6900     til_lite.cpp.inp
 23ff6d0:	705f7475 75646f72 735f7463 656c6163     ut_product_scale
 23ff6e0:	203d3e20 63730030 5f656c61 66666964      >= 0.scale_diff
 23ff6f0:	6f202f20 75707475 63735f74 20656c61      / output_scale 
 23ff700:	30203d3c 0032302e 736c6166 546b0065     <= 0.02.false.kT
 23ff710:	74694c66 66664165 51656e69 746e6175     fLiteAffineQuant
 23ff720:	74617a69 006e6f69 75706e69 713e2d74     ization.input->q
 23ff730:	746e6175 74617a69 2e6e6f69 65707974     uantization.type
 23ff740:	6c696600 2d726574 6175713e 7a69746e     .filter->quantiz
 23ff750:	6f697461 79742e6e 61006570 6e696666     ation.type.affin
 23ff760:	75715f65 69746e61 6974617a 61006e6f     e_quantization.a
 23ff770:	6e696666 75715f65 69746e61 6974617a     ffine_quantizati
 23ff780:	3e2d6e6f 6c616373 69660065 7265746c     on->scale.filter
 23ff790:	79743e2d 6e006570 635f6d75 6e6e6168     ->type.num_chann
 23ff7a0:	00736c65 69666661 715f656e 746e6175     els.affine_quant
 23ff7b0:	74617a69 2d6e6f69 6163733e 3e2d656c     ization->scale->
 23ff7c0:	657a6973 6c696600 2d726574 6d69643e     size.filter->dim
 23ff7d0:	643e2d73 5b617461 69666661 715f656e     s->data[affine_q
 23ff7e0:	746e6175 74617a69 2d6e6f69 6175713e     uantization->qua
 23ff7f0:	7a69746e 645f6465 6e656d69 6e6f6973     ntized_dimension
 23ff800:	4646005d 656c2054 6874676e 73756d20     ].FFT length mus
 23ff810:	65622074 65766520 6b000a6e 20737369     t be even..kiss 
 23ff820:	20746666 67617375 72652065 3a726f72     fft usage error:
 23ff830:	706d6920 65706f72 6c612072 0a636f6c      improper alloc.
 23ff840:	00000000                                ....

023ff844 <_ZTV18Microphone_PDM_MCU>:
	...
 23ff84c:	023f69d9 023f69ed 023f69b5 023f6b59     .i?..i?..i?.Yk?.
 23ff85c:	023f69b9 023f6b81 023f6b43 023f6b91     .i?..k?.Ck?..k?.
 23ff86c:	023f6ba3 023f6bd1                       .k?..k?.

023ff874 <_ZTV14Microphone_PDM>:
	...
 23ff87c:	023f6a01 023f6a15 023f69b5 023f69c5     .j?..j?..i?..i?.
 23ff88c:	023f69bf 023f69c9 023f69cd 023f69d1     .i?..i?..i?..i?.
 23ff89c:	023f69d5 023f6a29                       .i?.)j?.

023ff8a4 <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ff8ac:	023f6b41 023f6b4b 023f69b5 023f6b59     Ak?.Kk?..i?.Yk?.
 23ff8bc:	023f69b9 023f6b81 023f6b43 023f6b91     .i?..k?.Ck?..k?.
 23ff8cc:	023f6ba3 023f6bd1                       .k?..k?.

023ff8d4 <_ZTVN5spark12NetworkClassE>:
	...
 23ff8dc:	023f7489 023f7493 023f749d 023f74a7     .t?..t?..t?..t?.
 23ff8ec:	023f74b1 023f74bd 023f74c9 023f74d1     .t?..t?..t?..t?.
 23ff8fc:	023f74d9 023f74e5 023f74ed 023f74f7     .t?..t?..t?..t?.
 23ff90c:	023f7501                                .u?.

023ff910 <_ZTVN5spark9WiFiClassE>:
	...
 23ff918:	023f764b 023f7641 023f7637 023f75ed     Kv?.Av?.7v?..u?.
 23ff928:	023f762b 023f761f 023f74c9 023f74d1     +v?..v?..t?..t?.
 23ff938:	023f7613 023f760b 023f7601 023f75f7     .v?..v?..v?..u?.
 23ff948:	023f7501                                .u?.

023ff94c <_ZTV11USARTSerial>:
	...
 23ff954:	023f767d 023f76e9 023f76c1 023f8ecd     }v?..v?..v?...?.
 23ff964:	023f7691 023f76ad 023f769f 023f76bb     .v?..v?..v?..v?.
 23ff974:	023f767f 023f7683                       .v?..v?.

023ff97c <_ZTV7TwoWire>:
	...
 23ff984:	023f773b 023f7785 023f775d 023f773d     ;w?..w?.]w?.=w?.
 23ff994:	023f7765 023f776d 023f7775 023f777d     ew?.mw?.uw?.}w?.
 23ff9a4:	75007525 78343025 00000000              %u.u%04x....

023ff9b0 <_ZTV9USBSerial>:
	...
 23ff9b8:	023f7bbf 023f7c27 023f7bfd 023f8ecd     .{?.'|?..{?...?.
 23ff9c8:	023f7bef 023f7bc1 023f7bd1 023f7c21     .{?..{?..{?.!|?.
 23ff9d8:	023f7be1 023f7bb9                       .{?..{?.

023ff9e0 <_ZTV9IPAddress>:
	...
 23ff9e8:	023f7cd9 023f7cc9 023f7ccb 252d5925     .|?..|?..|?.%Y-%
 23ff9f8:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffa08:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ffa18:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffa28:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffa38:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffa48:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffa58:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffa68:	66006e6c 6f63006e 64006564 69617465     ln.fn.code.detai
 23ffa78:	0000006c                                l...

023ffa7c <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffa84:	023f7f4d 023f7f73 023f7f31 023f77ff     M.?.s.?.1.?..w?.

023ffa94 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffa9c:	023f8425 023f843d 023f8b79 023f8d21     %.?.=.?.y.?.!.?.

023ffaac <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffab4:	023f8451 023f8465 023f8d59 023f7f39     Q.?.e.?.Y.?.9.?.

023ffac4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffacc:	023f7f4b 023f7f81 023f8add 023f7f3b     K.?...?...?.;.?.

023ffadc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffae4:	023f7f49 023f7f8f 023f8369 023f7fb1     I.?...?.i.?...?.
 23ffaf4:	006e616e 00666e69 0066766f              nan.inf.ovf.

023ffb00 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb08:	023f92bf 023f92b5 023f92ab 023f92a1     ..?...?...?...?.
 23ffb18:	023f9295 023f9289 023f74c9 023f74d1     ..?...?..t?..t?.
 23ffb28:	023f927d 023f9275 023f926b 023f9261     }.?.u.?.k.?.a.?.
 23ffb38:	023f7501                                .u?.

023ffb3c <AUDIO_DEV_TABLE>:
 23ffb3c:	40010800 0000000a 0000000b              ...@........

023ffb48 <__FUNCTION__.0>:
 23ffb48:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffb58:	74696e49                                 Init.

023ffb5d <__FUNCTION__.4>:
 23ffb5d:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffb6b <_ZSt7nothrow>:
 23ffb6b:	746f6e00 6f6e6520 20686775 63617073     .not enough spac
 23ffb7b:	6f662065 6f662072 74616d72 70786520     e for format exp
 23ffb8b:	69736e61 28206e6f 61656c50 73206573     ansion (Please s
 23ffb9b:	696d6275 75662074 62206c6c 72206775     ubmit full bug r
 23ffbab:	726f7065 74612074 74746820 2f3a7370     eport at https:/
 23ffbbb:	6363672f 756e672e 67726f2e 6775622f     /gcc.gnu.org/bug
 23ffbcb:	3a292f73 2020200a 31300020 35343332     s/):.    .012345
 23ffbdb:	39383736                                 6789.

023ffbe0 <npio2_hw>:
 23ffbe0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffbf0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffc00:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffc10:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffc20:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffc30:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffc40:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffc50:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffc60 <two_over_pi>:
 23ffc60:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffc70:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffc80:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffc90:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffca0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffcb0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffcc0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffcd0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffce0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffcf0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffd00:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffd10:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffd20:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffd30:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffd40:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffd50:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffd60:	0060e27b 00c08c6b                       {.`.k...

023ffd68 <halF>:
 23ffd68:	3f000000 bf000000                       ...?....

023ffd70 <ln2HI>:
 23ffd70:	3f317180 bf317180                       .q1?.q1.

023ffd78 <ln2LO>:
 23ffd78:	3717f7d1 b717f7d1                       ...7....

023ffd80 <PIo2>:
 23ffd80:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffd90:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffda0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffdb0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffdc0 <init_jk>:
 23ffdc0:	00000002 00000003 00000004 00000006     ................
 23ffdd0:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffde0:	64656563 2f006465 2f746e6d 6b726f77     ceeded./mnt/work
 23ffdf0:	63617073 6f772f65 70736b72 2f656361     space/workspace/
 23ffe00:	2d434347 702d3031 6c657069 2f656e69     GCC-10-pipeline/
 23ffe10:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffe20:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffe30:	5f343231 36303631 36303831 732f3134     124_1606180641/s
 23ffe40:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffe50:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
 23ffe60:	00632e64                                d.c.

023ffe64 <_ctype_>:
 23ffe64:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffe74:	20202020 20202020 20202020 20202020                     
 23ffe84:	10108820 10101010 10101010 10101010      ...............
 23ffe94:	04040410 04040404 10040404 10101010     ................
 23ffea4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffeb4:	01010101 01010101 01010101 10101010     ................
 23ffec4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffed4:	02020202 02020202 02020202 10101010     ................
 23ffee4:	00000020 00000000 00000000 00000000      ...............
	...

023fff68 <__sf_fake_stderr>:
	...

023fff88 <__sf_fake_stdin>:
	...

023fffa8 <__sf_fake_stdout>:
	...

023fffc8 <link_const_data_end>:
 23fffc8:	023f37c1 	.word	0x023f37c1
 23fffcc:	023f3ce5 	.word	0x023f3ce5
 23fffd0:	023f6c45 	.word	0x023f6c45
 23fffd4:	023f75d9 	.word	0x023f75d9
 23fffd8:	023f7655 	.word	0x023f7655
 23fffdc:	023f7f09 	.word	0x023f7f09
 23fffe0:	023f7f1d 	.word	0x023f7f1d
 23fffe4:	023f8b69 	.word	0x023f8b69
 23fffe8:	023f9111 	.word	0x023f9111
 23fffec:	023f923d 	.word	0x023f923d
 23ffff0:	023f92c9 	.word	0x023f92c9
