
/home/nick/software/visual_alert/visual_alerts_inferencing/target/5.3.0/p2/visual_alerts_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f7000  085f7000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085f7018  085f7018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8a18  085f7088  00008a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000075dc  023f8a20  085f7090  00008a20  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         000002a0  10079e48  085fe66c  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bdsram.data  00000800  1007a100  085fe90c  0001a100  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000700  1007a900  1007a900  0002a900  2**5
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff10c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000ea8  085ff110  085ff110  0001f110  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001f110  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00160ff4  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000158d5  00000000  00000000  00180ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003430  00000000  00000000  001968c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a56c  00000000  00000000  00199cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f26f  00000000  00000000  001c4265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011b1fa  00000000  00000000  002134d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00050ea2  00000000  00000000  0032e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 0000df10  00000000  00000000  0037f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009f60  00000000  00000000  0038d480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f7018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f7018:	480e      	ldr	r0, [pc, #56]	; (85f7054 <module_user_pre_init+0x3c>)
 85f701a:	490f      	ldr	r1, [pc, #60]	; (85f7058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f701c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f701e:	4288      	cmp	r0, r1
 85f7020:	d005      	beq.n	85f702e <module_user_pre_init+0x16>
 85f7022:	4a0e      	ldr	r2, [pc, #56]	; (85f705c <module_user_pre_init+0x44>)
 85f7024:	4282      	cmp	r2, r0
 85f7026:	d002      	beq.n	85f702e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f7028:	4b0d      	ldr	r3, [pc, #52]	; (85f7060 <module_user_pre_init+0x48>)
 85f702a:	1a12      	subs	r2, r2, r0
 85f702c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f702e:	480d      	ldr	r0, [pc, #52]	; (85f7064 <module_user_pre_init+0x4c>)
 85f7030:	4a0d      	ldr	r2, [pc, #52]	; (85f7068 <module_user_pre_init+0x50>)
 85f7032:	2100      	movs	r1, #0
 85f7034:	4b0d      	ldr	r3, [pc, #52]	; (85f706c <module_user_pre_init+0x54>)
 85f7036:	1a12      	subs	r2, r2, r0
 85f7038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f703a:	480d      	ldr	r0, [pc, #52]	; (85f7070 <module_user_pre_init+0x58>)
 85f703c:	490d      	ldr	r1, [pc, #52]	; (85f7074 <module_user_pre_init+0x5c>)
 85f703e:	4288      	cmp	r0, r1
 85f7040:	d005      	beq.n	85f704e <module_user_pre_init+0x36>
 85f7042:	4a0d      	ldr	r2, [pc, #52]	; (85f7078 <module_user_pre_init+0x60>)
 85f7044:	4282      	cmp	r2, r0
 85f7046:	d002      	beq.n	85f704e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f7048:	4b05      	ldr	r3, [pc, #20]	; (85f7060 <module_user_pre_init+0x48>)
 85f704a:	1a12      	subs	r2, r2, r0
 85f704c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f704e:	4801      	ldr	r0, [pc, #4]	; (85f7054 <module_user_pre_init+0x3c>)
 85f7050:	bd08      	pop	{r3, pc}
 85f7052:	bf00      	nop
 85f7054:	10079e48 	.word	0x10079e48
 85f7058:	085fe66c 	.word	0x085fe66c
 85f705c:	1007a0e8 	.word	0x1007a0e8
 85f7060:	10110d2d 	.word	0x10110d2d
 85f7064:	1007a900 	.word	0x1007a900
 85f7068:	1007b000 	.word	0x1007b000
 85f706c:	10110ea1 	.word	0x10110ea1
 85f7070:	023f8a18 	.word	0x023f8a18
 85f7074:	085f7088 	.word	0x085f7088
 85f7078:	023ffffc 	.word	0x023ffffc

085f707c <dynalib_preinit>:
 85f707c:	085f7019 00000000                       .p_.....

Disassembly of section .psram_text:

023f8a20 <strcmp>:
 23f8a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f8a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f8a28:	2a01      	cmp	r2, #1
 23f8a2a:	bf28      	it	cs
 23f8a2c:	429a      	cmpcs	r2, r3
 23f8a2e:	d0f7      	beq.n	23f8a20 <strcmp>
 23f8a30:	1ad0      	subs	r0, r2, r3
 23f8a32:	4770      	bx	lr

023f8a34 <strlen>:
 23f8a34:	4603      	mov	r3, r0
 23f8a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f8a3a:	2a00      	cmp	r2, #0
 23f8a3c:	d1fb      	bne.n	23f8a36 <strlen+0x2>
 23f8a3e:	1a18      	subs	r0, r3, r0
 23f8a40:	3801      	subs	r0, #1
 23f8a42:	4770      	bx	lr

023f8a44 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f8a44:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f8a46:	f001 ffbf 	bl	23fa9c8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8a4a:	2500      	movs	r5, #0
 23f8a4c:	4e05      	ldr	r6, [pc, #20]	; (23f8a64 <module_user_init+0x20>)
 23f8a4e:	4c06      	ldr	r4, [pc, #24]	; (23f8a68 <module_user_init+0x24>)
 23f8a50:	1ba4      	subs	r4, r4, r6
 23f8a52:	08a4      	lsrs	r4, r4, #2
 23f8a54:	42ac      	cmp	r4, r5
 23f8a56:	d100      	bne.n	23f8a5a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f8a58:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f8a5a:	f856 3b04 	ldr.w	r3, [r6], #4
 23f8a5e:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8a60:	3501      	adds	r5, #1
 23f8a62:	e7f7      	b.n	23f8a54 <module_user_init+0x10>
 23f8a64:	023fffd0 	.word	0x023fffd0
 23f8a68:	023ffffc 	.word	0x023ffffc

023f8a6c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f8a6c:	f000 bbf2 	b.w	23f9254 <setup>

023f8a70 <module_user_loop>:
}

void module_user_loop() {
 23f8a70:	b508      	push	{r3, lr}
    loop();
 23f8a72:	f000 fc77 	bl	23f9364 <loop>
    _post_loop();
}
 23f8a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f8a7a:	f001 bf5d 	b.w	23fa938 <_post_loop>

023f8a7e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f8a7e:	f001 ba79 	b.w	23f9f74 <malloc>

023f8a82 <_Znaj>:
 23f8a82:	f001 ba77 	b.w	23f9f74 <malloc>

023f8a86 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f8a86:	f001 ba83 	b.w	23f9f90 <free>
	...

023f8a8c <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8a8c:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f8a8e:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8a90:	4a02      	ldr	r2, [pc, #8]	; (23f8a9c <__cxa_pure_virtual+0x10>)
 23f8a92:	4903      	ldr	r1, [pc, #12]	; (23f8aa0 <__cxa_pure_virtual+0x14>)
 23f8a94:	f001 f92c 	bl	23f9cf0 <panic_>
  while (1);
 23f8a98:	e7fe      	b.n	23f8a98 <__cxa_pure_virtual+0xc>
 23f8a9a:	bf00      	nop
 23f8a9c:	023f9c65 	.word	0x023f9c65
 23f8aa0:	023fde40 	.word	0x023fde40

023f8aa4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f8aa4:	7800      	ldrb	r0, [r0, #0]
 23f8aa6:	fab0 f080 	clz	r0, r0
 23f8aaa:	0940      	lsrs	r0, r0, #5
 23f8aac:	4770      	bx	lr

023f8aae <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f8aae:	2301      	movs	r3, #1
 23f8ab0:	7003      	strb	r3, [r0, #0]
 23f8ab2:	4770      	bx	lr

023f8ab4 <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f8ab4:	0409      	lsls	r1, r1, #16
 23f8ab6:	4a06      	ldr	r2, [pc, #24]	; (23f8ad0 <AUDIO_SI_WriteReg+0x1c>)
 23f8ab8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23f8abc:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f8ac0:	4b04      	ldr	r3, [pc, #16]	; (23f8ad4 <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f8ac2:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f8ac4:	6811      	ldr	r1, [r2, #0]
 23f8ac6:	07c9      	lsls	r1, r1, #31
 23f8ac8:	d501      	bpl.n	23f8ace <AUDIO_SI_WriteReg+0x1a>
 23f8aca:	3b01      	subs	r3, #1
 23f8acc:	d1fa      	bne.n	23f8ac4 <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23f8ace:	4770      	bx	lr
 23f8ad0:	40010000 	.word	0x40010000
 23f8ad4:	000186a0 	.word	0x000186a0

023f8ad8 <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23f8ad8:	4a06      	ldr	r2, [pc, #24]	; (23f8af4 <AUDIO_SI_ReadReg+0x1c>)
 23f8ada:	0200      	lsls	r0, r0, #8
 23f8adc:	f040 0010 	orr.w	r0, r0, #16
 23f8ae0:	6010      	str	r0, [r2, #0]
 23f8ae2:	4805      	ldr	r0, [pc, #20]	; (23f8af8 <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23f8ae4:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23f8ae6:	06d9      	lsls	r1, r3, #27
 23f8ae8:	d502      	bpl.n	23f8af0 <AUDIO_SI_ReadReg+0x18>
 23f8aea:	3801      	subs	r0, #1
 23f8aec:	d1fa      	bne.n	23f8ae4 <AUDIO_SI_ReadReg+0xc>
 23f8aee:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23f8af0:	0c18      	lsrs	r0, r3, #16
}
 23f8af2:	4770      	bx	lr
 23f8af4:	40010000 	.word	0x40010000
 23f8af8:	000186a0 	.word	0x000186a0

023f8afc <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23f8afc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f8b00:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f8b02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23f8b06:	461d      	mov	r5, r3
 23f8b08:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f8b0a:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23f8b0e:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23f8b10:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23f8b14:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f8b16:	bf4c      	ite	mi
 23f8b18:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f8b1c:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f8b20:	f015 0410 	ands.w	r4, r5, #16
{
 23f8b24:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23f8b26:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f8b2a:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f8b2e:	d059      	beq.n	23f8be4 <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23f8b30:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f8b34:	2012      	movs	r0, #18
 23f8b36:	f7ff ffbd 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23f8b3a:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f8b3e:	2015      	movs	r0, #21
 23f8b40:	f7ff ffb8 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f8b44:	201b      	movs	r0, #27
 23f8b46:	f7ff ffc7 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23f8b4a:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f8b4e:	b281      	uxth	r1, r0
 23f8b50:	201b      	movs	r0, #27
 23f8b52:	f7ff ffaf 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f8b56:	201b      	movs	r0, #27
 23f8b58:	f7ff ffbe 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23f8b5c:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f8b60:	b281      	uxth	r1, r0
 23f8b62:	201b      	movs	r0, #27
 23f8b64:	f7ff ffa6 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f8b68:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f8b6c:	2018      	movs	r0, #24
 23f8b6e:	f7ff ffa1 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f8b72:	20fb      	movs	r0, #251	; 0xfb
 23f8b74:	f7ff ffb0 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23f8b78:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23f8b7c:	b281      	uxth	r1, r0
 23f8b7e:	20fb      	movs	r0, #251	; 0xfb
 23f8b80:	f7ff ff98 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f8b84:	2011      	movs	r0, #17
 23f8b86:	f7ff ffa7 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23f8b8a:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f8b8e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f8b92:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f8b94:	2011      	movs	r0, #17
 23f8b96:	f7ff ff8d 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f8b9a:	2014      	movs	r0, #20
 23f8b9c:	f7ff ff9c 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23f8ba0:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f8ba4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f8ba8:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23f8baa:	2014      	movs	r0, #20
 23f8bac:	f7ff ff82 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f8bb0:	2018      	movs	r0, #24
 23f8bb2:	f7ff ff91 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f8bb6:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f8bba:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f8bbe:	b281      	uxth	r1, r0
 23f8bc0:	2018      	movs	r0, #24
 23f8bc2:	f7ff ff77 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f8bc6:	2117      	movs	r1, #23
 23f8bc8:	201b      	movs	r0, #27
 23f8bca:	f7ff ff73 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f8bce:	4649      	mov	r1, r9
 23f8bd0:	2017      	movs	r0, #23
 23f8bd2:	f7ff ff6f 	bl	23f8ab4 <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23f8bd6:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f8bd8:	2010      	movs	r0, #16
}
 23f8bda:	b002      	add	sp, #8
 23f8bdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f8be0:	f7ff bf68 	b.w	23f8ab4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23f8be4:	2003      	movs	r0, #3
 23f8be6:	f7ff ff77 	bl	23f8ad8 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f8bea:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23f8bee:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f8bf2:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f8bf4:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f8bf6:	f7ff ff5d 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f8bfa:	f015 0a08 	ands.w	sl, r5, #8
 23f8bfe:	d04a      	beq.n	23f8c96 <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23f8c00:	2018      	movs	r0, #24
 23f8c02:	f7ff ff69 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23f8c06:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f8c0a:	b281      	uxth	r1, r0
 23f8c0c:	2018      	movs	r0, #24
 23f8c0e:	f7ff ff51 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f8c12:	4620      	mov	r0, r4
 23f8c14:	f7ff ff60 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23f8c18:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f8c1c:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23f8c20:	f041 0103 	orr.w	r1, r1, #3
 23f8c24:	4620      	mov	r0, r4
 23f8c26:	f7ff ff45 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f8c2a:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23f8c2e:	2001      	movs	r0, #1
 23f8c30:	f7ff ff40 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f8c34:	2002      	movs	r0, #2
 23f8c36:	f7ff ff4f 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f8c3a:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f8c3e:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f8c42:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f8c46:	2002      	movs	r0, #2
 23f8c48:	f7ff ff34 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f8c4c:	2110      	movs	r1, #16
 23f8c4e:	200c      	movs	r0, #12
 23f8c50:	f7ff ff30 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f8c54:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23f8c58:	2001      	movs	r0, #1
 23f8c5a:	f7ff ff2b 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f8c5e:	2002      	movs	r0, #2
 23f8c60:	f7ff ff3a 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23f8c64:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f8c68:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f8c6c:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23f8c70:	2002      	movs	r0, #2
 23f8c72:	f7ff ff1f 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f8c76:	4620      	mov	r0, r4
 23f8c78:	f7ff ff2e 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23f8c7c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f8c80:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23f8c84:	f041 0103 	orr.w	r1, r1, #3
 23f8c88:	4620      	mov	r0, r4
 23f8c8a:	f7ff ff13 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f8c8e:	2118      	movs	r1, #24
 23f8c90:	200c      	movs	r0, #12
 23f8c92:	f7ff ff0f 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f8c96:	f015 0405 	ands.w	r4, r5, #5
 23f8c9a:	d02f      	beq.n	23f8cfc <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23f8c9c:	2002      	movs	r0, #2
 23f8c9e:	f7ff ff1b 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f8ca2:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23f8ca6:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f8caa:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f8cac:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f8cae:	f7ff ff01 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		DelayUs(5);
 23f8cb2:	2005      	movs	r0, #5
 23f8cb4:	f005 f8a8 	bl	23fde08 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23f8cb8:	07ea      	lsls	r2, r5, #31
 23f8cba:	d57f      	bpl.n	23f8dbc <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23f8cbc:	200c      	movs	r0, #12
 23f8cbe:	f7ff ff0b 	bl	23f8ad8 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23f8cc2:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23f8cc6:	b281      	uxth	r1, r0
 23f8cc8:	200c      	movs	r0, #12
 23f8cca:	f7ff fef3 	bl	23f8ab4 <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23f8cce:	2002      	movs	r0, #2
 23f8cd0:	f7ff ff02 	bl	23f8ad8 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23f8cd4:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f8cd8:	b281      	uxth	r1, r0
 23f8cda:	2002      	movs	r0, #2
 23f8cdc:	f7ff feea 	bl	23f8ab4 <AUDIO_SI_WriteReg>
			DelayUs(100);
 23f8ce0:	2064      	movs	r0, #100	; 0x64
 23f8ce2:	f005 f891 	bl	23fde08 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23f8ce6:	2003      	movs	r0, #3
 23f8ce8:	f7ff fef6 	bl	23f8ad8 <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f8cec:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23f8cf0:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23f8cf4:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f8cf6:	2003      	movs	r0, #3
 23f8cf8:	f7ff fedc 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23f8cfc:	f015 0f0d 	tst.w	r5, #13
 23f8d00:	d002      	beq.n	23f8d08 <CODEC_Init+0x20c>
		DelayMs(200);
 23f8d02:	20c8      	movs	r0, #200	; 0xc8
 23f8d04:	f005 f878 	bl	23fddf8 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f8d08:	f1ba 0f00 	cmp.w	sl, #0
 23f8d0c:	d020      	beq.n	23f8d50 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f8d0e:	2000      	movs	r0, #0
 23f8d10:	f7ff fee2 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23f8d14:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f8d18:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23f8d1c:	f041 0103 	orr.w	r1, r1, #3
 23f8d20:	2000      	movs	r0, #0
 23f8d22:	f7ff fec7 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f8d26:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23f8d2a:	2001      	movs	r0, #1
 23f8d2c:	f7ff fec2 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f8d30:	2002      	movs	r0, #2
 23f8d32:	f7ff fed1 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f8d36:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f8d3a:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f8d3e:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f8d42:	2002      	movs	r0, #2
 23f8d44:	f7ff feb6 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f8d48:	2110      	movs	r1, #16
 23f8d4a:	200c      	movs	r0, #12
 23f8d4c:	f7ff feb2 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f8d50:	b16c      	cbz	r4, 23f8d6e <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23f8d52:	2000      	movs	r0, #0
 23f8d54:	f7ff fec0 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23f8d58:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23f8d5c:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f8d60:	b281      	uxth	r1, r0
 23f8d62:	2000      	movs	r0, #0
 23f8d64:	f7ff fea6 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		DelayUs(50);
 23f8d68:	2032      	movs	r0, #50	; 0x32
 23f8d6a:	f005 f84d 	bl	23fde08 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f8d6e:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f8d72:	2018      	movs	r0, #24
 23f8d74:	f7ff fe9e 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23f8d78:	f246 3120 	movw	r1, #25376	; 0x6320
 23f8d7c:	2011      	movs	r0, #17
 23f8d7e:	f7ff fe99 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23f8d82:	f246 3120 	movw	r1, #25376	; 0x6320
 23f8d86:	2014      	movs	r0, #20
 23f8d88:	f7ff fe94 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f8d8c:	b364      	cbz	r4, 23f8de8 <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f8d8e:	2012      	movs	r0, #18
 23f8d90:	f7ff fea2 	bl	23f8ad8 <AUDIO_SI_ReadReg>
 23f8d94:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f8d96:	2015      	movs	r0, #21
 23f8d98:	f7ff fe9e 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23f8d9c:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23f8da0:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23f8da4:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23f8da6:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23f8daa:	2e09      	cmp	r6, #9
 23f8dac:	d80e      	bhi.n	23f8dcc <CODEC_Init+0x2d0>
 23f8dae:	e8df f006 	tbb	[pc, r6]
 23f8db2:	c0bb      	.short	0xc0bb
 23f8db4:	0d0db60d 	.word	0x0d0db60d
 23f8db8:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23f8dbc:	2003      	movs	r0, #3
 23f8dbe:	f7ff fe8b 	bl	23f8ad8 <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f8dc2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f8dc6:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23f8dca:	e794      	b.n	23f8cf6 <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f8dcc:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f8dd0:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f8dd4:	2012      	movs	r0, #18
 23f8dd6:	f7ff fe6d 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23f8dda:	2015      	movs	r0, #21
 23f8ddc:	4651      	mov	r1, sl
 23f8dde:	f7ff fe69 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23f8de2:	2032      	movs	r0, #50	; 0x32
 23f8de4:	f005 f808 	bl	23fddf8 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f8de8:	2117      	movs	r1, #23
 23f8dea:	201b      	movs	r0, #27
 23f8dec:	f7ff fe62 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f8df0:	4649      	mov	r1, r9
 23f8df2:	2017      	movs	r0, #23
 23f8df4:	f7ff fe5e 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f8df8:	20fb      	movs	r0, #251	; 0xfb
 23f8dfa:	f7ff fe6d 	bl	23f8ad8 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23f8dfe:	f020 0106 	bic.w	r1, r0, #6
 23f8e02:	f041 0108 	orr.w	r1, r1, #8
 23f8e06:	b289      	uxth	r1, r1
 23f8e08:	20fb      	movs	r0, #251	; 0xfb
 23f8e0a:	f7ff fe53 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23f8e0e:	20fd      	movs	r0, #253	; 0xfd
 23f8e10:	f7ff fe62 	bl	23f8ad8 <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23f8e14:	f020 0106 	bic.w	r1, r0, #6
 23f8e18:	f041 0108 	orr.w	r1, r1, #8
 23f8e1c:	b289      	uxth	r1, r1
 23f8e1e:	20fd      	movs	r0, #253	; 0xfd
 23f8e20:	f7ff fe48 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23f8e24:	2027      	movs	r0, #39	; 0x27
 23f8e26:	f7ff fe57 	bl	23f8ad8 <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23f8e2a:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23f8e2e:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23f8e30:	b90f      	cbnz	r7, 23f8e36 <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23f8e32:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23f8e36:	2027      	movs	r0, #39	; 0x27
 23f8e38:	f7ff fe3c 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23f8e3c:	20fa      	movs	r0, #250	; 0xfa
 23f8e3e:	f7ff fe4b 	bl	23f8ad8 <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23f8e42:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23f8e46:	0540      	lsls	r0, r0, #21
 23f8e48:	0d40      	lsrs	r0, r0, #21
 23f8e4a:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23f8e4e:	20fa      	movs	r0, #250	; 0xfa
 23f8e50:	9101      	str	r1, [sp, #4]
 23f8e52:	f7ff fe2f 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23f8e56:	20fc      	movs	r0, #252	; 0xfc
 23f8e58:	9901      	ldr	r1, [sp, #4]
 23f8e5a:	f7ff fe2b 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23f8e5e:	07ab      	lsls	r3, r5, #30
 23f8e60:	d540      	bpl.n	23f8ee4 <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f8e62:	2011      	movs	r0, #17
 23f8e64:	f7ff fe38 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23f8e68:	4c34      	ldr	r4, [pc, #208]	; (23f8f3c <CODEC_Init+0x440>)
 23f8e6a:	4020      	ands	r0, r4
 23f8e6c:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f8e70:	f041 0119 	orr.w	r1, r1, #25
 23f8e74:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f8e76:	2011      	movs	r0, #17
 23f8e78:	f7ff fe1c 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f8e7c:	2012      	movs	r0, #18
 23f8e7e:	f7ff fe2b 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f8e82:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f8e86:	b281      	uxth	r1, r0
 23f8e88:	2012      	movs	r0, #18
 23f8e8a:	f7ff fe13 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f8e8e:	2014      	movs	r0, #20
 23f8e90:	f7ff fe22 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23f8e94:	4020      	ands	r0, r4
 23f8e96:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f8e9a:	f041 0118 	orr.w	r1, r1, #24
 23f8e9e:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23f8ea0:	2014      	movs	r0, #20
 23f8ea2:	f7ff fe07 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f8ea6:	2015      	movs	r0, #21
 23f8ea8:	f7ff fe16 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f8eac:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23f8eb0:	b281      	uxth	r1, r0
 23f8eb2:	2015      	movs	r0, #21
 23f8eb4:	f7ff fdfe 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f8eb8:	2017      	movs	r0, #23
 23f8eba:	f7ff fe0d 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23f8ebe:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23f8ec2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23f8ec6:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f8ec8:	2017      	movs	r0, #23
 23f8eca:	f7ff fdf3 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f8ece:	2018      	movs	r0, #24
 23f8ed0:	f7ff fe02 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f8ed4:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f8ed8:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f8edc:	b281      	uxth	r1, r0
 23f8ede:	2018      	movs	r0, #24
 23f8ee0:	f7ff fde8 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23f8ee4:	f026 0608 	bic.w	r6, r6, #8
 23f8ee8:	2e01      	cmp	r6, #1
 23f8eea:	d113      	bne.n	23f8f14 <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f8eec:	2017      	movs	r0, #23
 23f8eee:	f7ff fdf3 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23f8ef2:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23f8ef6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23f8efa:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f8efc:	2017      	movs	r0, #23
 23f8efe:	f7ff fdd9 	bl	23f8ab4 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f8f02:	201b      	movs	r0, #27
 23f8f04:	f7ff fde8 	bl	23f8ad8 <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23f8f08:	f020 000c 	bic.w	r0, r0, #12
 23f8f0c:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f8f0e:	201b      	movs	r0, #27
 23f8f10:	f7ff fdd0 	bl	23f8ab4 <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23f8f14:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f8f18:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23f8f1c:	e65c      	b.n	23f8bd8 <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f8f1e:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f8f22:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23f8f26:	e755      	b.n	23f8dd4 <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f8f28:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f8f2c:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23f8f30:	e750      	b.n	23f8dd4 <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f8f32:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f8f36:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23f8f3a:	e74b      	b.n	23f8dd4 <CODEC_Init+0x2d8>
 23f8f3c:	ffffdffe 	.word	0xffffdffe

023f8f40 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23f8f40:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f8f42:	4a05      	ldr	r2, [pc, #20]	; (23f8f58 <sp_get_ready_rx_page+0x18>)
 23f8f44:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23f8f48:	434b      	muls	r3, r1
 23f8f4a:	18d1      	adds	r1, r2, r3
 23f8f4c:	5cd3      	ldrb	r3, [r2, r3]
 23f8f4e:	b90b      	cbnz	r3, 23f8f54 <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23f8f50:	6848      	ldr	r0, [r1, #4]
 23f8f52:	4770      	bx	lr
		return NULL;
 23f8f54:	2000      	movs	r0, #0
	}
}
 23f8f56:	4770      	bx	lr
 23f8f58:	1007aa00 	.word	0x1007aa00

023f8f5c <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23f8f5c:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f8f5e:	4d0c      	ldr	r5, [pc, #48]	; (23f8f90 <sp_read_rx_page+0x34>)
{
 23f8f60:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f8f62:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23f8f66:	b128      	cbz	r0, 23f8f74 <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23f8f68:	230c      	movs	r3, #12
 23f8f6a:	fb03 5304 	mla	r3, r3, r4, r5
 23f8f6e:	6859      	ldr	r1, [r3, #4]
 23f8f70:	f004 fda3 	bl	23fdaba <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23f8f74:	230c      	movs	r3, #12
 23f8f76:	2201      	movs	r2, #1
 23f8f78:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23f8f7a:	4414      	add	r4, r2
 23f8f7c:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23f8f7e:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23f8f80:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23f8f82:	bf0a      	itet	eq
 23f8f84:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23f8f86:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23f8f8a:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23f8f8e:	bd38      	pop	{r3, r4, r5, pc}
 23f8f90:	1007aa00 	.word	0x1007aa00

023f8f94 <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23f8f94:	4a09      	ldr	r2, [pc, #36]	; (23f8fbc <sp_release_rx_page+0x28>)
 23f8f96:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23f8f9a:	b969      	cbnz	r1, 23f8fb8 <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23f8f9c:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f8f9e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23f8fa2:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23f8fa4:	3301      	adds	r3, #1
 23f8fa6:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f8fa8:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23f8faa:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f8fac:	d002      	beq.n	23f8fb4 <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23f8fae:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23f8fb2:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23f8fb4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23f8fb8:	4770      	bx	lr
 23f8fba:	bf00      	nop
 23f8fbc:	1007aa00 	.word	0x1007aa00

023f8fc0 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23f8fc0:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f8fc2:	4b08      	ldr	r3, [pc, #32]	; (23f8fe4 <sp_get_free_rx_page+0x24>)
 23f8fc4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23f8fc8:	434a      	muls	r2, r1
 23f8fca:	1899      	adds	r1, r3, r2
 23f8fcc:	5c9a      	ldrb	r2, [r3, r2]
 23f8fce:	b122      	cbz	r2, 23f8fda <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23f8fd0:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23f8fd2:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23f8fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23f8fd8:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23f8fda:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23f8fdc:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23f8fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23f8fe2:	4770      	bx	lr
 23f8fe4:	1007aa00 	.word	0x1007aa00

023f8fe8 <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23f8fe8:	4b06      	ldr	r3, [pc, #24]	; (23f9004 <sp_get_free_rx_length+0x1c>)
 23f8fea:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23f8fee:	b10a      	cbz	r2, 23f8ff4 <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23f8ff0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23f8ff2:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23f8ff4:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f8ff6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23f8ffa:	fb01 3302 	mla	r3, r1, r2, r3
 23f8ffe:	6898      	ldr	r0, [r3, #8]
	}
}
 23f9000:	4770      	bx	lr
 23f9002:	bf00      	nop
 23f9004:	1007aa00 	.word	0x1007aa00

023f9008 <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23f9008:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f900a:	4b21      	ldr	r3, [pc, #132]	; (23f9090 <sp_rx_complete+0x88>)
 23f900c:	4604      	mov	r4, r0
 23f900e:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f9010:	03d8      	lsls	r0, r3, #15
 23f9012:	d51a      	bpl.n	23f904a <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23f9014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23f9016:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f9018:	06d9      	lsls	r1, r3, #27
 23f901a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23f901e:	d008      	beq.n	23f9032 <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f9020:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f9024:	3b01      	subs	r3, #1
 23f9026:	4413      	add	r3, r2
 23f9028:	f023 031f 	bic.w	r3, r3, #31
 23f902c:	3320      	adds	r3, #32
 23f902e:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f9030:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f9032:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23f9036:	4816      	ldr	r0, [pc, #88]	; (23f9090 <sp_rx_complete+0x88>)
 23f9038:	4413      	add	r3, r2
    while (op_size > 0) {
 23f903a:	2a00      	cmp	r2, #0
 23f903c:	eba3 0102 	sub.w	r1, r3, r2
 23f9040:	dc21      	bgt.n	23f9086 <sp_rx_complete+0x7e>
 23f9042:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f9046:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23f904a:	7861      	ldrb	r1, [r4, #1]
 23f904c:	4b11      	ldr	r3, [pc, #68]	; (23f9094 <sp_rx_complete+0x8c>)
 23f904e:	7820      	ldrb	r0, [r4, #0]
 23f9050:	4798      	blx	r3

	sp_release_rx_page();
 23f9052:	f7ff ff9f 	bl	23f8f94 <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23f9056:	f7ff ffb3 	bl	23f8fc0 <sp_get_free_rx_page>
 23f905a:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23f905c:	f7ff ffc4 	bl	23f8fe8 <sp_get_free_rx_length>
 23f9060:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23f9062:	9a01      	ldr	r2, [sp, #4]
 23f9064:	7861      	ldrb	r1, [r4, #1]
 23f9066:	7820      	ldrb	r0, [r4, #0]
 23f9068:	4b0b      	ldr	r3, [pc, #44]	; (23f9098 <sp_rx_complete+0x90>)
 23f906a:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23f906c:	7861      	ldrb	r1, [r4, #1]
 23f906e:	7820      	ldrb	r0, [r4, #0]
 23f9070:	08aa      	lsrs	r2, r5, #2
 23f9072:	4b0a      	ldr	r3, [pc, #40]	; (23f909c <sp_rx_complete+0x94>)
 23f9074:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f9076:	2201      	movs	r2, #1
 23f9078:	7861      	ldrb	r1, [r4, #1]
 23f907a:	7820      	ldrb	r0, [r4, #0]
 23f907c:	4b08      	ldr	r3, [pc, #32]	; (23f90a0 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23f907e:	b003      	add	sp, #12
 23f9080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f9084:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23f9086:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f908a:	3a20      	subs	r2, #32
 23f908c:	e7d5      	b.n	23f903a <sp_rx_complete+0x32>
 23f908e:	bf00      	nop
 23f9090:	e000ed00 	.word	0xe000ed00
 23f9094:	1010bda5 	.word	0x1010bda5
 23f9098:	1010c2b9 	.word	0x1010c2b9
 23f909c:	1010c309 	.word	0x1010c309
 23f90a0:	1010bf91 	.word	0x1010bf91

023f90a4 <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23f90a4:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23f90a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23f90aa:	d01c      	beq.n	23f90e6 <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23f90ac:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23f90b0:	bf14      	ite	ne
 23f90b2:	2505      	movne	r5, #5
 23f90b4:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f90b6:	4b37      	ldr	r3, [pc, #220]	; (23f9194 <dmic_setup+0xf0>)
 23f90b8:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f90ba:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f90be:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23f90c0:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23f90c4:	2201      	movs	r2, #1
 23f90c6:	4608      	mov	r0, r1
 23f90c8:	4f33      	ldr	r7, [pc, #204]	; (23f9198 <dmic_setup+0xf4>)
 23f90ca:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23f90cc:	4933      	ldr	r1, [pc, #204]	; (23f919c <dmic_setup+0xf8>)
 23f90ce:	2201      	movs	r2, #1
 23f90d0:	4608      	mov	r0, r1
 23f90d2:	47b8      	blx	r7
 23f90d4:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f90d6:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23f90d8:	2b04      	cmp	r3, #4
 23f90da:	d807      	bhi.n	23f90ec <dmic_setup+0x48>
 23f90dc:	e8df f003 	tbb	[pc, r3]
 23f90e0:	06560605 	.word	0x06560605
 23f90e4:	58          	.byte	0x58
 23f90e5:	00          	.byte	0x00
	switch(sampleRate) {
 23f90e6:	2507      	movs	r5, #7
 23f90e8:	e7e5      	b.n	23f90b6 <dmic_setup+0x12>
			div = 12;
 23f90ea:	260c      	movs	r6, #12
	PLL_Div(div);
 23f90ec:	4630      	mov	r0, r6
 23f90ee:	f004 fa0b 	bl	23fd508 <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23f90f2:	2302      	movs	r3, #2
 23f90f4:	4622      	mov	r2, r4
 23f90f6:	4628      	mov	r0, r5
 23f90f8:	2100      	movs	r1, #0
 23f90fa:	f7ff fcff 	bl	23f8afc <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23f90fe:	4d28      	ldr	r5, [pc, #160]	; (23f91a0 <dmic_setup+0xfc>)
 23f9100:	2100      	movs	r1, #0
 23f9102:	2021      	movs	r0, #33	; 0x21
 23f9104:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23f9106:	2100      	movs	r1, #0
 23f9108:	2022      	movs	r0, #34	; 0x22
 23f910a:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23f910c:	4d25      	ldr	r5, [pc, #148]	; (23f91a4 <dmic_setup+0x100>)
 23f910e:	210c      	movs	r1, #12
 23f9110:	2021      	movs	r0, #33	; 0x21
 23f9112:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23f9114:	210c      	movs	r1, #12
 23f9116:	2022      	movs	r0, #34	; 0x22
 23f9118:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f911a:	4b23      	ldr	r3, [pc, #140]	; (23f91a8 <dmic_setup+0x104>)
 23f911c:	4a23      	ldr	r2, [pc, #140]	; (23f91ac <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f911e:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f9120:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23f9122:	2280      	movs	r2, #128	; 0x80
 23f9124:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23f9126:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f9128:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f912c:	4920      	ldr	r1, [pc, #128]	; (23f91b0 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23f912e:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23f9130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f9134:	3201      	adds	r2, #1
 23f9136:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f9138:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f913c:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f913e:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23f9142:	f103 030c 	add.w	r3, r3, #12
 23f9146:	d1f5      	bne.n	23f9134 <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f9148:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23f914a:	4d1a      	ldr	r5, [pc, #104]	; (23f91b4 <dmic_setup+0x110>)
 23f914c:	4b1a      	ldr	r3, [pc, #104]	; (23f91b8 <dmic_setup+0x114>)
 23f914e:	4628      	mov	r0, r5
 23f9150:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f9152:	4629      	mov	r1, r5
 23f9154:	4819      	ldr	r0, [pc, #100]	; (23f91bc <dmic_setup+0x118>)
 23f9156:	4b1a      	ldr	r3, [pc, #104]	; (23f91c0 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23f9158:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f915a:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f915c:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23f915e:	2101      	movs	r1, #1
 23f9160:	4816      	ldr	r0, [pc, #88]	; (23f91bc <dmic_setup+0x118>)
 23f9162:	4b18      	ldr	r3, [pc, #96]	; (23f91c4 <dmic_setup+0x120>)
 23f9164:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23f9166:	2101      	movs	r1, #1
 23f9168:	4b17      	ldr	r3, [pc, #92]	; (23f91c8 <dmic_setup+0x124>)
 23f916a:	4814      	ldr	r0, [pc, #80]	; (23f91bc <dmic_setup+0x118>)
 23f916c:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23f916e:	f7ff ff27 	bl	23f8fc0 <sp_get_free_rx_page>
 23f9172:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23f9174:	f7ff ff38 	bl	23f8fe8 <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23f9178:	4a14      	ldr	r2, [pc, #80]	; (23f91cc <dmic_setup+0x128>)
 23f917a:	e9cd 4000 	strd	r4, r0, [sp]
 23f917e:	4611      	mov	r1, r2
 23f9180:	4630      	mov	r0, r6
 23f9182:	4b13      	ldr	r3, [pc, #76]	; (23f91d0 <dmic_setup+0x12c>)
 23f9184:	4c13      	ldr	r4, [pc, #76]	; (23f91d4 <dmic_setup+0x130>)
 23f9186:	47a0      	blx	r4

    // Particle.connect();
}
 23f9188:	b003      	add	sp, #12
 23f918a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23f918c:	2618      	movs	r6, #24
			break;
 23f918e:	e7ad      	b.n	23f90ec <dmic_setup+0x48>
			div = 48;
 23f9190:	2630      	movs	r6, #48	; 0x30
			break;
 23f9192:	e7ab      	b.n	23f90ec <dmic_setup+0x48>
 23f9194:	023fd521 	.word	0x023fd521
 23f9198:	10110039 	.word	0x10110039
 23f919c:	40080000 	.word	0x40080000
 23f91a0:	1010cf99 	.word	0x1010cf99
 23f91a4:	1010cfb9 	.word	0x1010cfb9
 23f91a8:	1007aa00 	.word	0x1007aa00
 23f91ac:	1007a980 	.word	0x1007a980
 23f91b0:	1007a100 	.word	0x1007a100
 23f91b4:	1007a954 	.word	0x1007a954
 23f91b8:	023fd5d5 	.word	0x023fd5d5
 23f91bc:	40010800 	.word	0x40010800
 23f91c0:	023fd629 	.word	0x023fd629
 23f91c4:	023fd6c9 	.word	0x023fd6c9
 23f91c8:	023fd605 	.word	0x023fd605
 23f91cc:	1007a900 	.word	0x1007a900
 23f91d0:	023f9009 	.word	0x023f9009
 23f91d4:	023fd6ed 	.word	0x023fd6ed

023f91d8 <dmic_flush>:


void dmic_flush() {
 23f91d8:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23f91da:	f7ff feb1 	bl	23f8f40 <sp_get_ready_rx_page>
 23f91de:	b900      	cbnz	r0, 23f91e2 <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23f91e0:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23f91e2:	2100      	movs	r1, #0
 23f91e4:	4608      	mov	r0, r1
 23f91e6:	f7ff feb9 	bl	23f8f5c <sp_read_rx_page>
 23f91ea:	e7f6      	b.n	23f91da <dmic_flush+0x2>

023f91ec <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23f91ec:	f7ff bea8 	b.w	23f8f40 <sp_get_ready_rx_page>

023f91f0 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23f91f0:	f7ff beb4 	b.w	23f8f5c <sp_read_rx_page>

023f91f4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f91f4:	4770      	bx	lr
	...

023f91f8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f91f8:	b510      	push	{r4, lr}
 23f91fa:	4604      	mov	r4, r0
 23f91fc:	4b09      	ldr	r3, [pc, #36]	; (23f9224 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f91fe:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f9200:	f001 fdb0 	bl	23fad64 <_ZN5spark10LogManager8instanceEv>
 23f9204:	4621      	mov	r1, r4
 23f9206:	f001 fff9 	bl	23fb1fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f920a:	f001 facb 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23f920e:	f001 fabb 	bl	23fa788 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f9212:	4620      	mov	r0, r4
 23f9214:	4b04      	ldr	r3, [pc, #16]	; (23f9228 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f9216:	f840 3b04 	str.w	r3, [r0], #4
 23f921a:	f001 fe8b 	bl	23faf34 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f921e:	4620      	mov	r0, r4
 23f9220:	bd10      	pop	{r4, pc}
 23f9222:	bf00      	nop
 23f9224:	023fe010 	.word	0x023fe010
 23f9228:	023fdff8 	.word	0x023fdff8

023f922c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f922c:	b510      	push	{r4, lr}
 23f922e:	4604      	mov	r4, r0
    }
 23f9230:	f7ff ffe2 	bl	23f91f8 <_ZN5spark16SerialLogHandlerD1Ev>
 23f9234:	4620      	mov	r0, r4
 23f9236:	2124      	movs	r1, #36	; 0x24
 23f9238:	f7ff fc25 	bl	23f8a86 <_ZdlPvj>
 23f923c:	4620      	mov	r0, r4
 23f923e:	bd10      	pop	{r4, pc}

023f9240 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23f9240:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23f9242:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f9244:	4604      	mov	r4, r0
      if (_M_manager)
 23f9246:	b113      	cbz	r3, 23f924e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f9248:	2203      	movs	r2, #3
 23f924a:	4601      	mov	r1, r0
 23f924c:	4798      	blx	r3
    }
 23f924e:	4620      	mov	r0, r4
 23f9250:	bd10      	pop	{r4, pc}
	...

023f9254 <setup>:

/**
 * @brief      Particle setup function
 */
void setup()
{
 23f9254:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f9256:	2000      	movs	r0, #0
 23f9258:	f000 fd20 	bl	23f9c9c <hal_timer_millis>
        while (_while() && !_condition()) {
 23f925c:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23f9260:	4604      	mov	r4, r0
 23f9262:	2000      	movs	r0, #0
 23f9264:	f000 fd1a 	bl	23f9c9c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f9268:	1b00      	subs	r0, r0, r4
 23f926a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f926e:	42a8      	cmp	r0, r5
 23f9270:	f171 0300 	sbcs.w	r3, r1, #0
 23f9274:	d207      	bcs.n	23f9286 <setup+0x32>
    // put your setup code here, to run once:

    // Wait for serial to make it easier to see the serial logs at startup.
    waitFor(Serial.isConnected, 15000);
 23f9276:	f001 fa95 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23f927a:	f001 fa88 	bl	23fa78e <_ZN9USBSerial11isConnectedEv>
 23f927e:	b910      	cbnz	r0, 23f9286 <setup+0x32>
            spark_process();
 23f9280:	f000 fd6e 	bl	23f9d60 <spark_process>
        while (_while() && !_condition()) {
 23f9284:	e7ed      	b.n	23f9262 <setup+0xe>
 23f9286:	f001 fa8d 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23f928a:	f001 fa80 	bl	23fa78e <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23f928e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f9292:	f001 fbd1 	bl	23faa38 <delay>

    ei_printf("Edge Impulse inference runner for Particle devices\r\n");
 23f9296:	4828      	ldr	r0, [pc, #160]	; (23f9338 <setup+0xe4>)
 23f9298:	f000 f9c8 	bl	23f962c <_Z9ei_printfPKcz>

    int err = Microphone_PDM::instance()
 23f929c:	f000 fa46 	bl	23f972c <_ZN14Microphone_PDM8instanceEv>
	 * RANGE_32768 From -32768 to 32767 (16 bits) (same as raw mode)
	 *
	 * The range should be set based on the PDM microphone you are using. For the Adafruit microphone,
	 * the default value of RANGE_2048 (12-bit) is correct. 
	 */
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23f92a0:	2101      	movs	r1, #1
 23f92a2:	2208      	movs	r2, #8
 23f92a4:	e9c0 1204 	strd	r1, r2, [r0, #16]
	 * @param sampleRate 8000, 16000, or 32000. The default is 16000.
	 * 
	 * This call can only be used on RTL827x (P2, Photon 2). It is ignored on nRF52.
	 * Setting an invalid value will use 16000.
	 */
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23f92a8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .withOutputSize(Microphone_PDM::OutputSize::SIGNED_16)
        .withRange(Microphone_PDM::Range::RANGE_32768)
        .withSampleRate(EI_CLASSIFIER_FREQUENCY)
        .init();
 23f92ac:	6803      	ldr	r3, [r0, #0]
 23f92ae:	60c2      	str	r2, [r0, #12]
 23f92b0:	68db      	ldr	r3, [r3, #12]
 23f92b2:	4798      	blx	r3

    if (err) {
 23f92b4:	4601      	mov	r1, r0
 23f92b6:	b110      	cbz	r0, 23f92be <setup+0x6a>
        ei_printf("PDM decoder init err=%d", err);
 23f92b8:	4820      	ldr	r0, [pc, #128]	; (23f933c <setup+0xe8>)
 23f92ba:	f000 f9b7 	bl	23f962c <_Z9ei_printfPKcz>
    }

    // summary of inferencing settings (from model_metadata.h)
    ei_printf("Inferencing settings:\n");
 23f92be:	4820      	ldr	r0, [pc, #128]	; (23f9340 <setup+0xec>)
 23f92c0:	f000 f9b4 	bl	23f962c <_Z9ei_printfPKcz>
    ei_printf("\tInterval: %.2f ms.\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 23f92c4:	2200      	movs	r2, #0
 23f92c6:	4b1f      	ldr	r3, [pc, #124]	; (23f9344 <setup+0xf0>)
 23f92c8:	481f      	ldr	r0, [pc, #124]	; (23f9348 <setup+0xf4>)
 23f92ca:	f000 f9af 	bl	23f962c <_Z9ei_printfPKcz>
    ei_printf("\tFrame size: %d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 23f92ce:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f92d2:	481e      	ldr	r0, [pc, #120]	; (23f934c <setup+0xf8>)
 23f92d4:	f000 f9aa 	bl	23f962c <_Z9ei_printfPKcz>
    ei_printf("\tSample length: %d ms.\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 23f92d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23f92dc:	481c      	ldr	r0, [pc, #112]	; (23f9350 <setup+0xfc>)
 23f92de:	f000 f9a5 	bl	23f962c <_Z9ei_printfPKcz>
    ei_printf("\tNo. of classes: %d\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 23f92e2:	2109      	movs	r1, #9
 23f92e4:	481b      	ldr	r0, [pc, #108]	; (23f9354 <setup+0x100>)
 23f92e6:	f000 f9a1 	bl	23f962c <_Z9ei_printfPKcz>
 *
 * @return     { description_of_the_return_value }
 */
static bool microphone_inference_start(uint32_t n_samples)
{
    inference.buffer = (int16_t *)malloc(n_samples * sizeof(int16_t));
 23f92ea:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 23f92ee:	f000 fe41 	bl	23f9f74 <malloc>
 23f92f2:	4c19      	ldr	r4, [pc, #100]	; (23f9358 <setup+0x104>)
 23f92f4:	6020      	str	r0, [r4, #0]

    if(inference.buffer == NULL) {
 23f92f6:	b1b0      	cbz	r0, 23f9326 <setup+0xd2>
        return false;
    }

    inference.buf_count  = 0;
    inference.n_samples  = n_samples;
 23f92f8:	2300      	movs	r3, #0
 23f92fa:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
    inference.buf_ready  = 0;
 23f92fe:	7123      	strb	r3, [r4, #4]
    inference.n_samples  = n_samples;
 23f9300:	e9c4 3202 	strd	r3, r2, [r4, #8]

    if (Microphone_PDM::instance().start()) {
 23f9304:	f000 fa12 	bl	23f972c <_ZN14Microphone_PDM8instanceEv>
 23f9308:	6803      	ldr	r3, [r0, #0]
 23f930a:	695b      	ldr	r3, [r3, #20]
 23f930c:	4798      	blx	r3
 23f930e:	b188      	cbz	r0, 23f9334 <setup+0xe0>
        ei_printf("Failed to start PDM!");
 23f9310:	4812      	ldr	r0, [pc, #72]	; (23f935c <setup+0x108>)
 23f9312:	f000 f98b 	bl	23f962c <_Z9ei_printfPKcz>
/**
 * @brief      Stop PDM and release buffers
 */
static void microphone_inference_end(void)
{
    Microphone_PDM::instance().stop();
 23f9316:	f000 fa09 	bl	23f972c <_ZN14Microphone_PDM8instanceEv>
 23f931a:	6803      	ldr	r3, [r0, #0]
 23f931c:	699b      	ldr	r3, [r3, #24]
 23f931e:	4798      	blx	r3
    free(inference.buffer);
 23f9320:	6820      	ldr	r0, [r4, #0]
 23f9322:	f000 fe35 	bl	23f9f90 <free>
}
 23f9326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ei_printf("ERR: Could not allocate audio buffer (size %d), this could be due to the window length of your model\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT);
 23f932a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f932e:	480c      	ldr	r0, [pc, #48]	; (23f9360 <setup+0x10c>)
 23f9330:	f000 b97c 	b.w	23f962c <_Z9ei_printfPKcz>
}
 23f9334:	bd38      	pop	{r3, r4, r5, pc}
 23f9336:	bf00      	nop
 23f9338:	023fde55 	.word	0x023fde55
 23f933c:	023fde8a 	.word	0x023fde8a
 23f9340:	023fdea2 	.word	0x023fdea2
 23f9344:	3fb00000 	.word	0x3fb00000
 23f9348:	023fdeb9 	.word	0x023fdeb9
 23f934c:	023fdece 	.word	0x023fdece
 23f9350:	023fdedf 	.word	0x023fdedf
 23f9354:	023fdef7 	.word	0x023fdef7
 23f9358:	1007aa40 	.word	0x1007aa40
 23f935c:	023fdf0c 	.word	0x023fdf0c
 23f9360:	023fdf21 	.word	0x023fdf21

023f9364 <loop>:
{
 23f9364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ei_printf("Scanning...\n");
 23f9368:	483a      	ldr	r0, [pc, #232]	; (23f9454 <loop+0xf0>)
{
 23f936a:	b08f      	sub	sp, #60	; 0x3c
    ei_printf("Scanning...\n");
 23f936c:	f000 f95e 	bl	23f962c <_Z9ei_printfPKcz>
    Vector<BleScanResult> scanResults = BLE.scan();
 23f9370:	f002 fdea 	bl	23fbf48 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f9374:	4601      	mov	r1, r0
 23f9376:	a807      	add	r0, sp, #28
 23f9378:	f003 fdaa 	bl	23fced0 <_ZNK8particle14BleLocalDevice4scanEv>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
 23f937c:	9908      	ldr	r1, [sp, #32]
    if (scanResults.size()) {
 23f937e:	2900      	cmp	r1, #0
 23f9380:	d04f      	beq.n	23f9422 <loop+0xbe>
        ei_printf("%d devices found\n", scanResults.size());
 23f9382:	4835      	ldr	r0, [pc, #212]	; (23f9458 <loop+0xf4>)
 23f9384:	f000 f952 	bl	23f962c <_Z9ei_printfPKcz>
        for (int ii = 0; ii < scanResults.size(); ii++) {
 23f9388:	2500      	movs	r5, #0
 23f938a:	2724      	movs	r7, #36	; 0x24
            ei_printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm\n",
 23f938c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f945c <loop+0xf8>
                ei_printf("Advertising name: %s\n", name.c_str());
 23f9390:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 23f9460 <loop+0xfc>
        for (int ii = 0; ii < scanResults.size(); ii++) {
 23f9394:	9b08      	ldr	r3, [sp, #32]
 23f9396:	429d      	cmp	r5, r3
 23f9398:	da43      	bge.n	23f9422 <loop+0xbe>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::operator[](int i) {
 23f939a:	fb07 f405 	mul.w	r4, r7, r5
                    scanResults[ii].address()[0], scanResults[ii].address()[1], scanResults[ii].address()[2],
 23f939e:	9807      	ldr	r0, [sp, #28]
 23f93a0:	2100      	movs	r1, #0
 23f93a2:	4420      	add	r0, r4
 23f93a4:	f002 fbde 	bl	23fbb64 <_ZNK8particle10BleAddressixEh>
 23f93a8:	4606      	mov	r6, r0
 23f93aa:	9807      	ldr	r0, [sp, #28]
 23f93ac:	2101      	movs	r1, #1
 23f93ae:	4420      	add	r0, r4
 23f93b0:	f002 fbd8 	bl	23fbb64 <_ZNK8particle10BleAddressixEh>
 23f93b4:	9005      	str	r0, [sp, #20]
 23f93b6:	9807      	ldr	r0, [sp, #28]
 23f93b8:	2102      	movs	r1, #2
 23f93ba:	4420      	add	r0, r4
 23f93bc:	f002 fbd2 	bl	23fbb64 <_ZNK8particle10BleAddressixEh>
 23f93c0:	9004      	str	r0, [sp, #16]
                    scanResults[ii].address()[3], scanResults[ii].address()[4], scanResults[ii].address()[5], scanResults[ii].rssi());
 23f93c2:	9807      	ldr	r0, [sp, #28]
 23f93c4:	2103      	movs	r1, #3
 23f93c6:	4420      	add	r0, r4
 23f93c8:	f002 fbcc 	bl	23fbb64 <_ZNK8particle10BleAddressixEh>
 23f93cc:	4682      	mov	sl, r0
 23f93ce:	9807      	ldr	r0, [sp, #28]
 23f93d0:	2104      	movs	r1, #4
 23f93d2:	4420      	add	r0, r4
 23f93d4:	f002 fbc6 	bl	23fbb64 <_ZNK8particle10BleAddressixEh>
 23f93d8:	4683      	mov	fp, r0
 23f93da:	9807      	ldr	r0, [sp, #28]
 23f93dc:	2105      	movs	r1, #5
 23f93de:	4420      	add	r0, r4
 23f93e0:	f002 fbc0 	bl	23fbb64 <_ZNK8particle10BleAddressixEh>
            ei_printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm\n",
 23f93e4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
 23f93e8:	9907      	ldr	r1, [sp, #28]
 23f93ea:	4421      	add	r1, r4
 23f93ec:	f991 1020 	ldrsb.w	r1, [r1, #32]
 23f93f0:	e9cd ab00 	strd	sl, fp, [sp]
 23f93f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f93f8:	4631      	mov	r1, r6
 23f93fa:	4640      	mov	r0, r8
 23f93fc:	f000 f916 	bl	23f962c <_Z9ei_printfPKcz>
    return data_[i];
 23f9400:	9907      	ldr	r1, [sp, #28]
            String name = scanResults[ii].advertisingData().deviceName();
 23f9402:	a80a      	add	r0, sp, #40	; 0x28
 23f9404:	4421      	add	r1, r4
 23f9406:	3108      	adds	r1, #8
 23f9408:	f002 fcce 	bl	23fbda8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (name.length() > 0) {
 23f940c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f940e:	b11b      	cbz	r3, 23f9418 <loop+0xb4>
                ei_printf("Advertising name: %s\n", name.c_str());
 23f9410:	4648      	mov	r0, r9
 23f9412:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f9414:	f000 f90a 	bl	23f962c <_Z9ei_printfPKcz>
            String name = scanResults[ii].advertisingData().deviceName();
 23f9418:	a80a      	add	r0, sp, #40	; 0x28
 23f941a:	f003 fe7d 	bl	23fd118 <_ZN6StringD1Ev>
        for (int ii = 0; ii < scanResults.size(); ii++) {
 23f941e:	3501      	adds	r5, #1
 23f9420:	e7b8      	b.n	23f9394 <loop+0x30>
    destruct(data_, data_ + size_);
 23f9422:	2524      	movs	r5, #36	; 0x24
    delay(3000);
 23f9424:	f640 30b8 	movw	r0, #3000	; 0xbb8
 23f9428:	f001 fb06 	bl	23faa38 <delay>
 23f942c:	e9dd 4307 	ldrd	r4, r3, [sp, #28]
 23f9430:	fb05 4503 	mla	r5, r5, r3, r4
        for (; p != end; ++p) {
 23f9434:	42a5      	cmp	r5, r4
 23f9436:	d007      	beq.n	23f9448 <loop+0xe4>
    ::free(ptr);
 23f9438:	6960      	ldr	r0, [r4, #20]
 23f943a:	f000 fda9 	bl	23f9f90 <free>
 23f943e:	68a0      	ldr	r0, [r4, #8]
 23f9440:	f000 fda6 	bl	23f9f90 <free>
        for (; p != end; ++p) {
 23f9444:	3424      	adds	r4, #36	; 0x24
 23f9446:	e7f5      	b.n	23f9434 <loop+0xd0>
    ::free(ptr);
 23f9448:	9807      	ldr	r0, [sp, #28]
 23f944a:	f000 fda1 	bl	23f9f90 <free>
}
 23f944e:	b00f      	add	sp, #60	; 0x3c
 23f9450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9454:	023fdf88 	.word	0x023fdf88
 23f9458:	023fdf95 	.word	0x023fdf95
 23f945c:	023fdfa7 	.word	0x023fdfa7
 23f9460:	023fdfd8 	.word	0x023fdfd8

023f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f9464:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f9466:	2614      	movs	r6, #20
 23f9468:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f946c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f946e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f9472:	42ae      	cmp	r6, r5
 23f9474:	d004      	beq.n	23f9480 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f9476:	4628      	mov	r0, r5
 23f9478:	f003 fe4e 	bl	23fd118 <_ZN6StringD1Ev>
 23f947c:	3514      	adds	r5, #20
 23f947e:	e7f8      	b.n	23f9472 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f9480:	6820      	ldr	r0, [r4, #0]
 23f9482:	f000 fd85 	bl	23f9f90 <free>
}
 23f9486:	4620      	mov	r0, r4
 23f9488:	bd70      	pop	{r4, r5, r6, pc}

023f948a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f948a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f948e:	4604      	mov	r4, r0
 23f9490:	460d      	mov	r5, r1
 23f9492:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f9494:	d916      	bls.n	23f94c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f9496:	4290      	cmp	r0, r2
 23f9498:	d215      	bcs.n	23f94c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f949a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f949e:	1a75      	subs	r5, r6, r1
 23f94a0:	f1a1 0714 	sub.w	r7, r1, #20
 23f94a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f94a6:	42b7      	cmp	r7, r6
 23f94a8:	d01c      	beq.n	23f94e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f94aa:	b12c      	cbz	r4, 23f94b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f94ac:	4631      	mov	r1, r6
 23f94ae:	4620      	mov	r0, r4
 23f94b0:	f003 feae 	bl	23fd210 <_ZN6StringC1EOS_>
 23f94b4:	7c33      	ldrb	r3, [r6, #16]
 23f94b6:	7423      	strb	r3, [r4, #16]
 23f94b8:	4630      	mov	r0, r6
 23f94ba:	f003 fe2d 	bl	23fd118 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f94be:	3e14      	subs	r6, #20
 23f94c0:	3c14      	subs	r4, #20
 23f94c2:	e7f0      	b.n	23f94a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f94c4:	d00e      	beq.n	23f94e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f94c6:	42b5      	cmp	r5, r6
 23f94c8:	d00c      	beq.n	23f94e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f94ca:	b12c      	cbz	r4, 23f94d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f94cc:	4629      	mov	r1, r5
 23f94ce:	4620      	mov	r0, r4
 23f94d0:	f003 fe9e 	bl	23fd210 <_ZN6StringC1EOS_>
 23f94d4:	7c2b      	ldrb	r3, [r5, #16]
 23f94d6:	7423      	strb	r3, [r4, #16]
 23f94d8:	4628      	mov	r0, r5
 23f94da:	f003 fe1d 	bl	23fd118 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f94de:	3514      	adds	r5, #20
 23f94e0:	3414      	adds	r4, #20
 23f94e2:	e7f0      	b.n	23f94c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f94e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f94e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f94e6:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f94e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f94ec:	e9c0 3300 	strd	r3, r3, [r0]
 23f94f0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f94f2:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f94f4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f94f6:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f94f8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f94fa:	dd24      	ble.n	23f9546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f94fc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f9500:	fb08 f007 	mul.w	r0, r8, r7
 23f9504:	f000 fd36 	bl	23f9f74 <malloc>
            if (!d) {
 23f9508:	4605      	mov	r5, r0
 23f950a:	b1e0      	cbz	r0, 23f9546 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f950c:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f9510:	fb08 1202 	mla	r2, r8, r2, r1
 23f9514:	f7ff ffb9 	bl	23f948a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f9518:	6820      	ldr	r0, [r4, #0]
 23f951a:	f000 fd39 	bl	23f9f90 <free>
        data_ = d;
 23f951e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f9520:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f9522:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f9526:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f952a:	45b8      	cmp	r8, r7
 23f952c:	d009      	beq.n	23f9542 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f952e:	4639      	mov	r1, r7
 23f9530:	4628      	mov	r0, r5
 23f9532:	f003 fe87 	bl	23fd244 <_ZN6StringC1ERKS_>
 23f9536:	7c3b      	ldrb	r3, [r7, #16]
 23f9538:	3514      	adds	r5, #20
 23f953a:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f953e:	3714      	adds	r7, #20
 23f9540:	e7f3      	b.n	23f952a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f9542:	6873      	ldr	r3, [r6, #4]
 23f9544:	6063      	str	r3, [r4, #4]
}
 23f9546:	4620      	mov	r0, r4
 23f9548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f954c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
}
 23f954c:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23f954e:	2100      	movs	r1, #0
}
 23f9550:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23f9552:	2001      	movs	r0, #1
 23f9554:	f000 fce4 	bl	23f9f20 <system_thread_set_state>
        capacity_(0) {
 23f9558:	2300      	movs	r3, #0
 23f955a:	e9cd 3300 	strd	r3, r3, [sp]
 23f955e:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f9560:	f001 f920 	bl	23fa7a4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f9564:	4c1a      	ldr	r4, [pc, #104]	; (23f95d0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x84>)
 23f9566:	4605      	mov	r5, r0
 23f9568:	4626      	mov	r6, r4
 23f956a:	4669      	mov	r1, sp
 23f956c:	a803      	add	r0, sp, #12
 23f956e:	f7ff ffba 	bl	23f94e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f9572:	a903      	add	r1, sp, #12
 23f9574:	a806      	add	r0, sp, #24
 23f9576:	f7ff ffb6 	bl	23f94e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f957a:	4b16      	ldr	r3, [pc, #88]	; (23f95d4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x88>)
 23f957c:	a906      	add	r1, sp, #24
 23f957e:	f846 3b04 	str.w	r3, [r6], #4
 23f9582:	a809      	add	r0, sp, #36	; 0x24
 23f9584:	f7ff ffaf 	bl	23f94e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f9588:	aa09      	add	r2, sp, #36	; 0x24
 23f958a:	2132      	movs	r1, #50	; 0x32
 23f958c:	4630      	mov	r0, r6
 23f958e:	f001 ff17 	bl	23fb3c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f9592:	a809      	add	r0, sp, #36	; 0x24
 23f9594:	f7ff ff66 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f9598:	a806      	add	r0, sp, #24
 23f959a:	f7ff ff63 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f959e:	4b0e      	ldr	r3, [pc, #56]	; (23f95d8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8c>)
 23f95a0:	a803      	add	r0, sp, #12
 23f95a2:	6023      	str	r3, [r4, #0]
 23f95a4:	6225      	str	r5, [r4, #32]
 23f95a6:	f7ff ff5d 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f95aa:	4b0c      	ldr	r3, [pc, #48]	; (23f95dc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x90>)
 23f95ac:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f95ae:	f001 f8f9 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23f95b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f95b6:	f001 f8e3 	bl	23fa780 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f95ba:	f001 fbd3 	bl	23fad64 <_ZN5spark10LogManager8instanceEv>
 23f95be:	4621      	mov	r1, r4
 23f95c0:	f001 fdd6 	bl	23fb170 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23f95c4:	4668      	mov	r0, sp
 23f95c6:	f7ff ff4d 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f95ca:	b00c      	add	sp, #48	; 0x30
 23f95cc:	bd70      	pop	{r4, r5, r6, pc}
 23f95ce:	bf00      	nop
 23f95d0:	1007aa50 	.word	0x1007aa50
 23f95d4:	023fdff8 	.word	0x023fdff8
 23f95d8:	023ffb28 	.word	0x023ffb28
 23f95dc:	023fe010 	.word	0x023fe010

023f95e0 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE>:
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f95e0:	4b10      	ldr	r3, [pc, #64]	; (23f9624 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x44>)
 23f95e2:	681a      	ldr	r2, [r3, #0]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
 23f95e4:	4b10      	ldr	r3, [pc, #64]	; (23f9628 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x48>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f95e6:	f502 6178 	add.w	r1, r2, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 23f95ea:	6059      	str	r1, [r3, #4]
 23f95ec:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 23f95f0:	f502 7148 	add.w	r1, r2, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 23f95f4:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 23f95f8:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 23f95fc:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 23f9600:	f502 71c8 	add.w	r1, r2, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 23f9604:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 23f9608:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 23f960c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 23f9610:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 23f9614:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 23f9618:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 23f961c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
 23f9620:	4770      	bx	lr
 23f9622:	bf00      	nop
 23f9624:	1007aa74 	.word	0x1007aa74
 23f9628:	10079e4c 	.word	0x10079e4c

023f962c <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f962c:	b40f      	push	{r0, r1, r2, r3}
 23f962e:	b513      	push	{r0, r1, r4, lr}
 23f9630:	ab04      	add	r3, sp, #16
 23f9632:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f9636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f963a:	480b      	ldr	r0, [pc, #44]	; (23f9668 <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f963c:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f963e:	f000 fcc3 	bl	23f9fc8 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f9642:	2800      	cmp	r0, #0
 23f9644:	dd0b      	ble.n	23f965e <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f9646:	f001 f8ad 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23f964a:	4604      	mov	r4, r0
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 23f964c:	4806      	ldr	r0, [pc, #24]	; (23f9668 <_Z9ei_printfPKcz+0x3c>)
 23f964e:	f7ff f9f1 	bl	23f8a34 <strlen>
 23f9652:	6823      	ldr	r3, [r4, #0]
 23f9654:	4602      	mov	r2, r0
 23f9656:	68db      	ldr	r3, [r3, #12]
 23f9658:	4620      	mov	r0, r4
 23f965a:	4903      	ldr	r1, [pc, #12]	; (23f9668 <_Z9ei_printfPKcz+0x3c>)
 23f965c:	4798      	blx	r3
    }
}
 23f965e:	b002      	add	sp, #8
 23f9660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9664:	b004      	add	sp, #16
 23f9666:	4770      	bx	lr
 23f9668:	1007aa78 	.word	0x1007aa78

023f966c <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23f966c:	2001      	movs	r0, #1
 23f966e:	4770      	bx	lr

023f9670 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23f9670:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f9674:	4770      	bx	lr

023f9676 <_ZN14Microphone_PDM6uninitEv>:
	 * Releases the resources used by the PDM module, though the 2K RAM buffer is statically 
	 * allocated on the heap and is not freed.
	 */
	int uninit() {
		return Microphone_PDM_MCU::uninit();
	}
 23f9676:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f967a:	4770      	bx	lr

023f967c <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23f967c:	f000 b8c2 	b.w	23f9804 <_ZN22Microphone_PDM_RTL872x4initEv>

023f9680 <_ZN14Microphone_PDM5startEv>:

	/**
	 * @brief Start sampling
	 */
	int start() {
		return Microphone_PDM_MCU::start();
 23f9680:	f000 b8d4 	b.w	23f982c <_ZN22Microphone_PDM_RTL872x5startEv>

023f9684 <_ZN14Microphone_PDM4stopEv>:
	 * On the RTL872x (P2, Photon 2), it's not actually possible to stop sampling once you
	 * start it. Calling stop() will discard the data and samplesAvailable(), copySamples(),
	 * etc. will behave as if the DMA had been stopped.
	 */
	int stop() {
		return Microphone_PDM_MCU::stop();
 23f9684:	f000 b8b3 	b.w	23f97ee <_ZN22Microphone_PDM_RTL872x4stopEv>

023f9688 <_ZNK14Microphone_PDM16samplesAvailableEv>:
	 * 
	 * @return true 
	 * @return false 
	 */
	bool samplesAvailable() const {
		return Microphone_PDM_MCU::samplesAvailable();
 23f9688:	f000 b8d8 	b.w	23f983c <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023f968c <_ZN14Microphone_PDM11copySamplesEPv>:
	 * 
	 * You can skip calling samplesAvailable() and just call copySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool copySamples(void*pSamples) {
		return Microphone_PDM_MCU::copySamples(pSamples);
 23f968c:	f000 b8df 	b.w	23f984e <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>

023f9690 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23f9690:	b510      	push	{r4, lr}
 23f9692:	4604      	mov	r4, r0
 23f9694:	4b02      	ldr	r3, [pc, #8]	; (23f96a0 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23f9696:	6003      	str	r3, [r0, #0]
 23f9698:	f000 f8a8 	bl	23f97ec <_ZN22Microphone_PDM_RTL872xD1Ev>
 23f969c:	4620      	mov	r0, r4
 23f969e:	bd10      	pop	{r4, pc}
 23f96a0:	023ff8f4 	.word	0x023ff8f4

023f96a4 <_ZN18Microphone_PDM_MCUD0Ev>:
 23f96a4:	b510      	push	{r4, lr}
 23f96a6:	4604      	mov	r4, r0
 23f96a8:	f7ff fff2 	bl	23f9690 <_ZN18Microphone_PDM_MCUD1Ev>
 23f96ac:	4620      	mov	r0, r4
 23f96ae:	2120      	movs	r1, #32
 23f96b0:	f7ff f9e9 	bl	23f8a86 <_ZdlPvj>
 23f96b4:	4620      	mov	r0, r4
 23f96b6:	bd10      	pop	{r4, pc}

023f96b8 <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM *Microphone_PDM::_instance = NULL;

Microphone_PDM::Microphone_PDM() {
}

Microphone_PDM::~Microphone_PDM() {
 23f96b8:	b510      	push	{r4, lr}
 23f96ba:	4604      	mov	r4, r0
 23f96bc:	4b02      	ldr	r3, [pc, #8]	; (23f96c8 <_ZN14Microphone_PDMD1Ev+0x10>)
 23f96be:	6003      	str	r3, [r0, #0]
 23f96c0:	f7ff ffe6 	bl	23f9690 <_ZN18Microphone_PDM_MCUD1Ev>

}
 23f96c4:	4620      	mov	r0, r4
 23f96c6:	bd10      	pop	{r4, pc}
 23f96c8:	023ff924 	.word	0x023ff924

023f96cc <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23f96cc:	b510      	push	{r4, lr}
 23f96ce:	4604      	mov	r4, r0
}
 23f96d0:	f7ff fff2 	bl	23f96b8 <_ZN14Microphone_PDMD1Ev>
 23f96d4:	4620      	mov	r0, r4
 23f96d6:	2124      	movs	r1, #36	; 0x24
 23f96d8:	f7ff f9d5 	bl	23f8a86 <_ZdlPvj>
 23f96dc:	4620      	mov	r0, r4
 23f96de:	bd10      	pop	{r4, pc}

023f96e0 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23f96e0:	2300      	movs	r3, #0
	 * of data. The number of bytes will vary depending on the outputSize. 
	 * 
	 * You can skip calling samplesAvailable() and just call noCopySamples which will return false in the same cases
	 * where samplesAvailable() would have returned false.
	 */
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f96e2:	b530      	push	{r4, r5, lr}
 23f96e4:	b085      	sub	sp, #20
 23f96e6:	9302      	str	r3, [sp, #8]

    bool _M_empty() const { return !_M_manager; }
 23f96e8:	688b      	ldr	r3, [r1, #8]
 23f96ea:	4605      	mov	r5, r0
 23f96ec:	460c      	mov	r4, r1
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 23f96ee:	b133      	cbz	r3, 23f96fe <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f96f0:	2202      	movs	r2, #2
 23f96f2:	4668      	mov	r0, sp
 23f96f4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f96f6:	68e3      	ldr	r3, [r4, #12]
 23f96f8:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f96fa:	68a3      	ldr	r3, [r4, #8]
 23f96fc:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23f96fe:	4669      	mov	r1, sp
 23f9700:	4628      	mov	r0, r5
 23f9702:	f000 f8bb 	bl	23f987c <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23f9706:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f9708:	4668      	mov	r0, sp
 23f970a:	f7ff fd99 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
	}
 23f970e:	4620      	mov	r0, r4
 23f9710:	b005      	add	sp, #20
 23f9712:	bd30      	pop	{r4, r5, pc}

023f9714 <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23f9714:	b510      	push	{r4, lr}
 23f9716:	4604      	mov	r4, r0
 23f9718:	f000 f8d6 	bl	23f98c8 <_ZN22Microphone_PDM_RTL872xC1Ev>
 23f971c:	4b02      	ldr	r3, [pc, #8]	; (23f9728 <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23f971e:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23f9720:	6023      	str	r3, [r4, #0]
 23f9722:	2300      	movs	r3, #0
 23f9724:	6223      	str	r3, [r4, #32]
}
 23f9726:	bd10      	pop	{r4, pc}
 23f9728:	023ff924 	.word	0x023ff924

023f972c <_ZN14Microphone_PDM8instanceEv>:

// [static] 
Microphone_PDM &Microphone_PDM::instance() {
 23f972c:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23f972e:	4d06      	ldr	r5, [pc, #24]	; (23f9748 <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23f9730:	682b      	ldr	r3, [r5, #0]
 23f9732:	b93b      	cbnz	r3, 23f9744 <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23f9734:	2024      	movs	r0, #36	; 0x24
 23f9736:	f7ff f9a2 	bl	23f8a7e <_Znwj>
 23f973a:	4604      	mov	r4, r0
 23f973c:	b108      	cbz	r0, 23f9742 <_ZN14Microphone_PDM8instanceEv+0x16>
 23f973e:	f7ff ffe9 	bl	23f9714 <_ZN14Microphone_PDMC1Ev>
 23f9742:	602c      	str	r4, [r5, #0]
	}
	return *_instance;
}
 23f9744:	6828      	ldr	r0, [r5, #0]
 23f9746:	bd38      	pop	{r3, r4, r5, pc}
 23f9748:	1007ae78 	.word	0x1007ae78

023f974c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:
			return 2;
	}
}


void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f974e:	4607      	mov	r7, r0
	const int16_t *srcEnd = &src[numSamples];

	size_t increment = copySrcIncrement();
 23f9750:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23f9752:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23f9754:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f9756:	460c      	mov	r4, r1
 23f9758:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23f975a:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23f975e:	4798      	blx	r3

	if (outputSize == OutputSize::UNSIGNED_8) {
 23f9760:	693b      	ldr	r3, [r7, #16]
 23f9762:	b9c3      	cbnz	r3, 23f9796 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>

		// Scale the 16-bit signed values to an appropriate range for unsigned 8-bit values
		int16_t div = (int16_t)(1 << (size_t) range);
 23f9764:	2201      	movs	r2, #1
			if (val > 127) {
				val = 127;
			}

			// Add 128 to make unsigned 8-bit (offset)
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f9766:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23f976a:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23f976c:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23f976e:	409a      	lsls	r2, r3
 23f9770:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23f9772:	42b4      	cmp	r4, r6
 23f9774:	d236      	bcs.n	23f97e4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23f9776:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f977a:	4404      	add	r4, r0
			int16_t val = *src / div;
 23f977c:	fb93 f3f2 	sdiv	r3, r3, r2
 23f9780:	b21b      	sxth	r3, r3
			if (val < -128) {
 23f9782:	2b7f      	cmp	r3, #127	; 0x7f
 23f9784:	bfa8      	it	ge
 23f9786:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f9788:	428b      	cmp	r3, r1
 23f978a:	bfb8      	it	lt
 23f978c:	460b      	movlt	r3, r1
 23f978e:	3b80      	subs	r3, #128	; 0x80
 23f9790:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23f9794:	e7ed      	b.n	23f9772 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
			dst += sizeof(uint8_t);
		}

	}
	else if (outputSize == OutputSize::SIGNED_16) {		
 23f9796:	2b01      	cmp	r3, #1
 23f9798:	d117      	bne.n	23f97ca <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f979a:	697a      	ldr	r2, [r7, #20]
			// Clip to signed 16-bit
			if (val < -32767) {
				val = -32767;
			}
			if (val > 32768) {
				val = 32868;
 23f979c:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23f97a0:	4911      	ldr	r1, [pc, #68]	; (23f97e8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f97a2:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23f97a6:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23f97a8:	42b4      	cmp	r4, r6
 23f97aa:	d21b      	bcs.n	23f97e4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23f97ac:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f97b0:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23f97b2:	4093      	lsls	r3, r2
			if (val < -32767) {
 23f97b4:	428b      	cmp	r3, r1
 23f97b6:	db06      	blt.n	23f97c6 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23f97b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23f97bc:	bfc8      	it	gt
 23f97be:	463b      	movgt	r3, r7
			}

			*((int16_t *)dst) = (int16_t) val;
 23f97c0:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23f97c4:	e7f0      	b.n	23f97a8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23f97c6:	4b08      	ldr	r3, [pc, #32]	; (23f97e8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23f97c8:	e7fa      	b.n	23f97c0 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
			dst += sizeof(uint16_t);
		}
	}
	else {
		// OutputSize::RAW_SIGNED_16
		if (src != (int16_t *)dst || increment != 1) {
 23f97ca:	42ac      	cmp	r4, r5
 23f97cc:	d101      	bne.n	23f97d2 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23f97ce:	2801      	cmp	r0, #1
 23f97d0:	d008      	beq.n	23f97e4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			while(src < srcEnd) {
				*((int16_t *)dst) = *src;
				dst += sizeof(int16_t);
				src += increment;
 23f97d2:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23f97d4:	42b4      	cmp	r4, r6
 23f97d6:	d205      	bcs.n	23f97e4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23f97d8:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23f97dc:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23f97de:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23f97e2:	e7f7      	b.n	23f97d4 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
			}
		}
	}
}
 23f97e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f97e6:	bf00      	nop
 23f97e8:	ffff8001 	.word	0xffff8001

023f97ec <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23f97ec:	4770      	bx	lr

023f97ee <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23f97ee:	2300      	movs	r3, #0
 23f97f0:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23f97f2:	4618      	mov	r0, r3
 23f97f4:	4770      	bx	lr

023f97f6 <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23f97f6:	b510      	push	{r4, lr}
 23f97f8:	4604      	mov	r4, r0
}
 23f97fa:	2120      	movs	r1, #32
 23f97fc:	f7ff f943 	bl	23f8a86 <_ZdlPvj>
 23f9800:	4620      	mov	r0, r4
 23f9802:	bd10      	pop	{r4, pc}

023f9804 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23f9804:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23f9806:	68c3      	ldr	r3, [r0, #12]
 23f9808:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23f980c:	d008      	beq.n	23f9820 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f980e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23f9812:	d005      	beq.n	23f9820 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f9814:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23f9818:	bf1c      	itt	ne
 23f981a:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23f981e:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23f9820:	7a01      	ldrb	r1, [r0, #8]
 23f9822:	68c0      	ldr	r0, [r0, #12]
 23f9824:	f7ff fc3e 	bl	23f90a4 <dmic_setup>
}
 23f9828:	2000      	movs	r0, #0
 23f982a:	bd08      	pop	{r3, pc}

023f982c <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23f982c:	b510      	push	{r4, lr}
 23f982e:	4604      	mov	r4, r0
    dmic_flush();
 23f9830:	f7ff fcd2 	bl	23f91d8 <dmic_flush>
    running = true;
 23f9834:	2301      	movs	r3, #1
}
 23f9836:	2000      	movs	r0, #0
    running = true;
 23f9838:	7723      	strb	r3, [r4, #28]
}
 23f983a:	bd10      	pop	{r4, pc}

023f983c <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23f983c:	b508      	push	{r3, lr}
    if (!running) {
 23f983e:	7f00      	ldrb	r0, [r0, #28]
 23f9840:	b120      	cbz	r0, 23f984c <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23f9842:	f7ff fcd3 	bl	23f91ec <dmic_ready>
 23f9846:	3800      	subs	r0, #0
 23f9848:	bf18      	it	ne
 23f984a:	2001      	movne	r0, #1
}
 23f984c:	bd08      	pop	{r3, pc}

023f984e <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f984e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23f9850:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f9852:	4604      	mov	r4, r0
    if (!running) {
 23f9854:	b91d      	cbnz	r5, 23f985e <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23f9856:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23f9858:	4628      	mov	r0, r5
 23f985a:	b003      	add	sp, #12
 23f985c:	bd30      	pop	{r4, r5, pc}
 23f985e:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23f9860:	f7ff fcc4 	bl	23f91ec <dmic_ready>
	if (src) {
 23f9864:	4601      	mov	r1, r0
 23f9866:	2800      	cmp	r0, #0
 23f9868:	d0f5      	beq.n	23f9856 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23f986a:	4620      	mov	r0, r4
 23f986c:	9a01      	ldr	r2, [sp, #4]
 23f986e:	f7ff ff6d 	bl	23f974c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23f9872:	2100      	movs	r1, #0
 23f9874:	4608      	mov	r0, r1
 23f9876:	f7ff fcbb 	bl	23f91f0 <dmic_read>
		return true;
 23f987a:	e7ed      	b.n	23f9858 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023f987c <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f987c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23f987e:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f9880:	4606      	mov	r6, r0
 23f9882:	460d      	mov	r5, r1
    if (!running) {
 23f9884:	b91f      	cbnz	r7, 23f988e <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23f9886:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23f9888:	4638      	mov	r0, r7
 23f988a:	b003      	add	sp, #12
 23f988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23f988e:	f7ff fcad 	bl	23f91ec <dmic_ready>
	if (src) {
 23f9892:	4604      	mov	r4, r0
 23f9894:	2800      	cmp	r0, #0
 23f9896:	d0f6      	beq.n	23f9886 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23f9898:	4602      	mov	r2, r0
 23f989a:	4601      	mov	r1, r0
 23f989c:	4630      	mov	r0, r6
 23f989e:	f7ff ff55 	bl	23f974c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23f98a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 23f98a6:	9301      	str	r3, [sp, #4]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f98a8:	68ab      	ldr	r3, [r5, #8]
 23f98aa:	9400      	str	r4, [sp, #0]
 23f98ac:	b90b      	cbnz	r3, 23f98b2 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23f98ae:	f003 ffcd 	bl	23fd84c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f98b2:	4669      	mov	r1, sp
 23f98b4:	4628      	mov	r0, r5
 23f98b6:	68eb      	ldr	r3, [r5, #12]
 23f98b8:	aa01      	add	r2, sp, #4
 23f98ba:	4798      	blx	r3
        dmic_read(NULL, 0);
 23f98bc:	2100      	movs	r1, #0
 23f98be:	4608      	mov	r0, r1
 23f98c0:	f7ff fc96 	bl	23f91f0 <dmic_read>
		return true;
 23f98c4:	e7e0      	b.n	23f9888 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>
	...

023f98c8 <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23f98c8:	f04f 0c01 	mov.w	ip, #1
 23f98cc:	2104      	movs	r1, #4
 23f98ce:	4a06      	ldr	r2, [pc, #24]	; (23f98e8 <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23f98d0:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23f98d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 23f98d8:	6042      	str	r2, [r0, #4]
 23f98da:	2200      	movs	r2, #0
 23f98dc:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23f98de:	4903      	ldr	r1, [pc, #12]	; (23f98ec <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23f98e0:	7202      	strb	r2, [r0, #8]
 23f98e2:	6001      	str	r1, [r0, #0]
 23f98e4:	7702      	strb	r2, [r0, #28]
}
 23f98e6:	4770      	bx	lr
 23f98e8:	000c000b 	.word	0x000c000b
 23f98ec:	023ff954 	.word	0x023ff954

023f98f0 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23f98f0:	2300      	movs	r3, #0
 23f98f2:	4802      	ldr	r0, [pc, #8]	; (23f98fc <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23f98f4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23f98f6:	f000 b91b 	b.w	23f9b30 <os_mutex_create>
 23f98fa:	bf00      	nop
 23f98fc:	1007ae7c 	.word	0x1007ae7c

023f9900 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f9900:	b509      	push	{r0, r3, lr}
 23f9902:	4804      	ldr	r0, [pc, #16]	; (23f9914 <HAL_USB_USART_Init+0x14>)
 23f9904:	6800      	ldr	r0, [r0, #0]
 23f9906:	4b04      	ldr	r3, [pc, #16]	; (23f9918 <HAL_USB_USART_Init+0x18>)
 23f9908:	4403      	add	r3, r0
 23f990a:	681b      	ldr	r3, [r3, #0]
 23f990c:	681b      	ldr	r3, [r3, #0]
 23f990e:	9302      	str	r3, [sp, #8]
 23f9910:	bd09      	pop	{r0, r3, pc}
 23f9912:	0000      	.short	0x0000
 23f9914:	10079e48 	.word	0x10079e48
 23f9918:	00000034 	.word	0x00000034

023f991c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f991c:	b509      	push	{r0, r3, lr}
 23f991e:	4804      	ldr	r0, [pc, #16]	; (23f9930 <HAL_USB_USART_Begin+0x14>)
 23f9920:	6800      	ldr	r0, [r0, #0]
 23f9922:	4b04      	ldr	r3, [pc, #16]	; (23f9934 <HAL_USB_USART_Begin+0x18>)
 23f9924:	4403      	add	r3, r0
 23f9926:	681b      	ldr	r3, [r3, #0]
 23f9928:	685b      	ldr	r3, [r3, #4]
 23f992a:	9302      	str	r3, [sp, #8]
 23f992c:	bd09      	pop	{r0, r3, pc}
 23f992e:	0000      	.short	0x0000
 23f9930:	10079e48 	.word	0x10079e48
 23f9934:	00000034 	.word	0x00000034

023f9938 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f9938:	b509      	push	{r0, r3, lr}
 23f993a:	4804      	ldr	r0, [pc, #16]	; (23f994c <HAL_USB_USART_End+0x14>)
 23f993c:	6800      	ldr	r0, [r0, #0]
 23f993e:	4b04      	ldr	r3, [pc, #16]	; (23f9950 <HAL_USB_USART_End+0x18>)
 23f9940:	4403      	add	r3, r0
 23f9942:	681b      	ldr	r3, [r3, #0]
 23f9944:	689b      	ldr	r3, [r3, #8]
 23f9946:	9302      	str	r3, [sp, #8]
 23f9948:	bd09      	pop	{r0, r3, pc}
 23f994a:	0000      	.short	0x0000
 23f994c:	10079e48 	.word	0x10079e48
 23f9950:	00000034 	.word	0x00000034

023f9954 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f9954:	b509      	push	{r0, r3, lr}
 23f9956:	4804      	ldr	r0, [pc, #16]	; (23f9968 <HAL_USB_USART_Available_Data+0x14>)
 23f9958:	6800      	ldr	r0, [r0, #0]
 23f995a:	4b04      	ldr	r3, [pc, #16]	; (23f996c <HAL_USB_USART_Available_Data+0x18>)
 23f995c:	4403      	add	r3, r0
 23f995e:	681b      	ldr	r3, [r3, #0]
 23f9960:	691b      	ldr	r3, [r3, #16]
 23f9962:	9302      	str	r3, [sp, #8]
 23f9964:	bd09      	pop	{r0, r3, pc}
 23f9966:	0000      	.short	0x0000
 23f9968:	10079e48 	.word	0x10079e48
 23f996c:	00000034 	.word	0x00000034

023f9970 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f9970:	b509      	push	{r0, r3, lr}
 23f9972:	4804      	ldr	r0, [pc, #16]	; (23f9984 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f9974:	6800      	ldr	r0, [r0, #0]
 23f9976:	4b04      	ldr	r3, [pc, #16]	; (23f9988 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f9978:	4403      	add	r3, r0
 23f997a:	681b      	ldr	r3, [r3, #0]
 23f997c:	695b      	ldr	r3, [r3, #20]
 23f997e:	9302      	str	r3, [sp, #8]
 23f9980:	bd09      	pop	{r0, r3, pc}
 23f9982:	0000      	.short	0x0000
 23f9984:	10079e48 	.word	0x10079e48
 23f9988:	00000034 	.word	0x00000034

023f998c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f998c:	b509      	push	{r0, r3, lr}
 23f998e:	4804      	ldr	r0, [pc, #16]	; (23f99a0 <HAL_USB_USART_Receive_Data+0x14>)
 23f9990:	6800      	ldr	r0, [r0, #0]
 23f9992:	4b04      	ldr	r3, [pc, #16]	; (23f99a4 <HAL_USB_USART_Receive_Data+0x18>)
 23f9994:	4403      	add	r3, r0
 23f9996:	681b      	ldr	r3, [r3, #0]
 23f9998:	699b      	ldr	r3, [r3, #24]
 23f999a:	9302      	str	r3, [sp, #8]
 23f999c:	bd09      	pop	{r0, r3, pc}
 23f999e:	0000      	.short	0x0000
 23f99a0:	10079e48 	.word	0x10079e48
 23f99a4:	00000034 	.word	0x00000034

023f99a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f99a8:	b509      	push	{r0, r3, lr}
 23f99aa:	4804      	ldr	r0, [pc, #16]	; (23f99bc <HAL_USB_USART_Send_Data+0x14>)
 23f99ac:	6800      	ldr	r0, [r0, #0]
 23f99ae:	4b04      	ldr	r3, [pc, #16]	; (23f99c0 <HAL_USB_USART_Send_Data+0x18>)
 23f99b0:	4403      	add	r3, r0
 23f99b2:	681b      	ldr	r3, [r3, #0]
 23f99b4:	69db      	ldr	r3, [r3, #28]
 23f99b6:	9302      	str	r3, [sp, #8]
 23f99b8:	bd09      	pop	{r0, r3, pc}
 23f99ba:	0000      	.short	0x0000
 23f99bc:	10079e48 	.word	0x10079e48
 23f99c0:	00000034 	.word	0x00000034

023f99c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f99c4:	b509      	push	{r0, r3, lr}
 23f99c6:	4804      	ldr	r0, [pc, #16]	; (23f99d8 <HAL_USB_USART_Flush_Data+0x14>)
 23f99c8:	6800      	ldr	r0, [r0, #0]
 23f99ca:	4b04      	ldr	r3, [pc, #16]	; (23f99dc <HAL_USB_USART_Flush_Data+0x18>)
 23f99cc:	4403      	add	r3, r0
 23f99ce:	681b      	ldr	r3, [r3, #0]
 23f99d0:	6a1b      	ldr	r3, [r3, #32]
 23f99d2:	9302      	str	r3, [sp, #8]
 23f99d4:	bd09      	pop	{r0, r3, pc}
 23f99d6:	0000      	.short	0x0000
 23f99d8:	10079e48 	.word	0x10079e48
 23f99dc:	00000034 	.word	0x00000034

023f99e0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f99e0:	b509      	push	{r0, r3, lr}
 23f99e2:	4804      	ldr	r0, [pc, #16]	; (23f99f4 <HAL_USB_USART_Is_Connected+0x14>)
 23f99e4:	6800      	ldr	r0, [r0, #0]
 23f99e6:	4b04      	ldr	r3, [pc, #16]	; (23f99f8 <HAL_USB_USART_Is_Connected+0x18>)
 23f99e8:	4403      	add	r3, r0
 23f99ea:	681b      	ldr	r3, [r3, #0]
 23f99ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f99ee:	9302      	str	r3, [sp, #8]
 23f99f0:	bd09      	pop	{r0, r3, pc}
 23f99f2:	0000      	.short	0x0000
 23f99f4:	10079e48 	.word	0x10079e48
 23f99f8:	00000034 	.word	0x00000034

023f99fc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f99fc:	b509      	push	{r0, r3, lr}
 23f99fe:	4804      	ldr	r0, [pc, #16]	; (23f9a10 <hal_usart_end+0x14>)
 23f9a00:	6800      	ldr	r0, [r0, #0]
 23f9a02:	4b04      	ldr	r3, [pc, #16]	; (23f9a14 <hal_usart_end+0x18>)
 23f9a04:	4403      	add	r3, r0
 23f9a06:	681b      	ldr	r3, [r3, #0]
 23f9a08:	689b      	ldr	r3, [r3, #8]
 23f9a0a:	9302      	str	r3, [sp, #8]
 23f9a0c:	bd09      	pop	{r0, r3, pc}
 23f9a0e:	0000      	.short	0x0000
 23f9a10:	10079e48 	.word	0x10079e48
 23f9a14:	00000024 	.word	0x00000024

023f9a18 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f9a18:	b509      	push	{r0, r3, lr}
 23f9a1a:	4804      	ldr	r0, [pc, #16]	; (23f9a2c <hal_usart_write+0x14>)
 23f9a1c:	6800      	ldr	r0, [r0, #0]
 23f9a1e:	4b04      	ldr	r3, [pc, #16]	; (23f9a30 <hal_usart_write+0x18>)
 23f9a20:	4403      	add	r3, r0
 23f9a22:	681b      	ldr	r3, [r3, #0]
 23f9a24:	68db      	ldr	r3, [r3, #12]
 23f9a26:	9302      	str	r3, [sp, #8]
 23f9a28:	bd09      	pop	{r0, r3, pc}
 23f9a2a:	0000      	.short	0x0000
 23f9a2c:	10079e48 	.word	0x10079e48
 23f9a30:	00000024 	.word	0x00000024

023f9a34 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f9a34:	b509      	push	{r0, r3, lr}
 23f9a36:	4804      	ldr	r0, [pc, #16]	; (23f9a48 <hal_usart_available+0x14>)
 23f9a38:	6800      	ldr	r0, [r0, #0]
 23f9a3a:	4b04      	ldr	r3, [pc, #16]	; (23f9a4c <hal_usart_available+0x18>)
 23f9a3c:	4403      	add	r3, r0
 23f9a3e:	681b      	ldr	r3, [r3, #0]
 23f9a40:	691b      	ldr	r3, [r3, #16]
 23f9a42:	9302      	str	r3, [sp, #8]
 23f9a44:	bd09      	pop	{r0, r3, pc}
 23f9a46:	0000      	.short	0x0000
 23f9a48:	10079e48 	.word	0x10079e48
 23f9a4c:	00000024 	.word	0x00000024

023f9a50 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f9a50:	b509      	push	{r0, r3, lr}
 23f9a52:	4804      	ldr	r0, [pc, #16]	; (23f9a64 <hal_usart_read+0x14>)
 23f9a54:	6800      	ldr	r0, [r0, #0]
 23f9a56:	4b04      	ldr	r3, [pc, #16]	; (23f9a68 <hal_usart_read+0x18>)
 23f9a58:	4403      	add	r3, r0
 23f9a5a:	681b      	ldr	r3, [r3, #0]
 23f9a5c:	695b      	ldr	r3, [r3, #20]
 23f9a5e:	9302      	str	r3, [sp, #8]
 23f9a60:	bd09      	pop	{r0, r3, pc}
 23f9a62:	0000      	.short	0x0000
 23f9a64:	10079e48 	.word	0x10079e48
 23f9a68:	00000024 	.word	0x00000024

023f9a6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f9a6c:	b509      	push	{r0, r3, lr}
 23f9a6e:	4804      	ldr	r0, [pc, #16]	; (23f9a80 <hal_usart_peek+0x14>)
 23f9a70:	6800      	ldr	r0, [r0, #0]
 23f9a72:	4b04      	ldr	r3, [pc, #16]	; (23f9a84 <hal_usart_peek+0x18>)
 23f9a74:	4403      	add	r3, r0
 23f9a76:	681b      	ldr	r3, [r3, #0]
 23f9a78:	699b      	ldr	r3, [r3, #24]
 23f9a7a:	9302      	str	r3, [sp, #8]
 23f9a7c:	bd09      	pop	{r0, r3, pc}
 23f9a7e:	0000      	.short	0x0000
 23f9a80:	10079e48 	.word	0x10079e48
 23f9a84:	00000024 	.word	0x00000024

023f9a88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f9a88:	b509      	push	{r0, r3, lr}
 23f9a8a:	4804      	ldr	r0, [pc, #16]	; (23f9a9c <hal_usart_flush+0x14>)
 23f9a8c:	6800      	ldr	r0, [r0, #0]
 23f9a8e:	4b04      	ldr	r3, [pc, #16]	; (23f9aa0 <hal_usart_flush+0x18>)
 23f9a90:	4403      	add	r3, r0
 23f9a92:	681b      	ldr	r3, [r3, #0]
 23f9a94:	69db      	ldr	r3, [r3, #28]
 23f9a96:	9302      	str	r3, [sp, #8]
 23f9a98:	bd09      	pop	{r0, r3, pc}
 23f9a9a:	0000      	.short	0x0000
 23f9a9c:	10079e48 	.word	0x10079e48
 23f9aa0:	00000024 	.word	0x00000024

023f9aa4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f9aa4:	b509      	push	{r0, r3, lr}
 23f9aa6:	4804      	ldr	r0, [pc, #16]	; (23f9ab8 <hal_usart_is_enabled+0x14>)
 23f9aa8:	6800      	ldr	r0, [r0, #0]
 23f9aaa:	4b04      	ldr	r3, [pc, #16]	; (23f9abc <hal_usart_is_enabled+0x18>)
 23f9aac:	4403      	add	r3, r0
 23f9aae:	681b      	ldr	r3, [r3, #0]
 23f9ab0:	6a1b      	ldr	r3, [r3, #32]
 23f9ab2:	9302      	str	r3, [sp, #8]
 23f9ab4:	bd09      	pop	{r0, r3, pc}
 23f9ab6:	0000      	.short	0x0000
 23f9ab8:	10079e48 	.word	0x10079e48
 23f9abc:	00000024 	.word	0x00000024

023f9ac0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f9ac0:	b509      	push	{r0, r3, lr}
 23f9ac2:	4804      	ldr	r0, [pc, #16]	; (23f9ad4 <hal_usart_available_data_for_write+0x14>)
 23f9ac4:	6800      	ldr	r0, [r0, #0]
 23f9ac6:	4b04      	ldr	r3, [pc, #16]	; (23f9ad8 <hal_usart_available_data_for_write+0x18>)
 23f9ac8:	4403      	add	r3, r0
 23f9aca:	681b      	ldr	r3, [r3, #0]
 23f9acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9ace:	9302      	str	r3, [sp, #8]
 23f9ad0:	bd09      	pop	{r0, r3, pc}
 23f9ad2:	0000      	.short	0x0000
 23f9ad4:	10079e48 	.word	0x10079e48
 23f9ad8:	00000024 	.word	0x00000024

023f9adc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f9adc:	b509      	push	{r0, r3, lr}
 23f9ade:	4804      	ldr	r0, [pc, #16]	; (23f9af0 <hal_usart_begin_config+0x14>)
 23f9ae0:	6800      	ldr	r0, [r0, #0]
 23f9ae2:	4b04      	ldr	r3, [pc, #16]	; (23f9af4 <hal_usart_begin_config+0x18>)
 23f9ae4:	4403      	add	r3, r0
 23f9ae6:	681b      	ldr	r3, [r3, #0]
 23f9ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9aea:	9302      	str	r3, [sp, #8]
 23f9aec:	bd09      	pop	{r0, r3, pc}
 23f9aee:	0000      	.short	0x0000
 23f9af0:	10079e48 	.word	0x10079e48
 23f9af4:	00000024 	.word	0x00000024

023f9af8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f9af8:	b509      	push	{r0, r3, lr}
 23f9afa:	4804      	ldr	r0, [pc, #16]	; (23f9b0c <hal_usart_init_ex+0x14>)
 23f9afc:	6800      	ldr	r0, [r0, #0]
 23f9afe:	4b04      	ldr	r3, [pc, #16]	; (23f9b10 <hal_usart_init_ex+0x18>)
 23f9b00:	4403      	add	r3, r0
 23f9b02:	681b      	ldr	r3, [r3, #0]
 23f9b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9b06:	9302      	str	r3, [sp, #8]
 23f9b08:	bd09      	pop	{r0, r3, pc}
 23f9b0a:	0000      	.short	0x0000
 23f9b0c:	10079e48 	.word	0x10079e48
 23f9b10:	00000024 	.word	0x00000024

023f9b14 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f9b14:	b509      	push	{r0, r3, lr}
 23f9b16:	4804      	ldr	r0, [pc, #16]	; (23f9b28 <inet_inet_ntop+0x14>)
 23f9b18:	6800      	ldr	r0, [r0, #0]
 23f9b1a:	4b04      	ldr	r3, [pc, #16]	; (23f9b2c <inet_inet_ntop+0x18>)
 23f9b1c:	4403      	add	r3, r0
 23f9b1e:	681b      	ldr	r3, [r3, #0]
 23f9b20:	695b      	ldr	r3, [r3, #20]
 23f9b22:	9302      	str	r3, [sp, #8]
 23f9b24:	bd09      	pop	{r0, r3, pc}
 23f9b26:	0000      	.short	0x0000
 23f9b28:	10079e48 	.word	0x10079e48
 23f9b2c:	0000004c 	.word	0x0000004c

023f9b30 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f9b30:	b509      	push	{r0, r3, lr}
 23f9b32:	4804      	ldr	r0, [pc, #16]	; (23f9b44 <os_mutex_create+0x14>)
 23f9b34:	6800      	ldr	r0, [r0, #0]
 23f9b36:	4b04      	ldr	r3, [pc, #16]	; (23f9b48 <os_mutex_create+0x18>)
 23f9b38:	4403      	add	r3, r0
 23f9b3a:	681b      	ldr	r3, [r3, #0]
 23f9b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9b3e:	9302      	str	r3, [sp, #8]
 23f9b40:	bd09      	pop	{r0, r3, pc}
 23f9b42:	0000      	.short	0x0000
 23f9b44:	10079e48 	.word	0x10079e48
 23f9b48:	00000030 	.word	0x00000030

023f9b4c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f9b4c:	b509      	push	{r0, r3, lr}
 23f9b4e:	4804      	ldr	r0, [pc, #16]	; (23f9b60 <os_mutex_recursive_create+0x14>)
 23f9b50:	6800      	ldr	r0, [r0, #0]
 23f9b52:	4b04      	ldr	r3, [pc, #16]	; (23f9b64 <os_mutex_recursive_create+0x18>)
 23f9b54:	4403      	add	r3, r0
 23f9b56:	681b      	ldr	r3, [r3, #0]
 23f9b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9b5a:	9302      	str	r3, [sp, #8]
 23f9b5c:	bd09      	pop	{r0, r3, pc}
 23f9b5e:	0000      	.short	0x0000
 23f9b60:	10079e48 	.word	0x10079e48
 23f9b64:	00000030 	.word	0x00000030

023f9b68 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f9b68:	b509      	push	{r0, r3, lr}
 23f9b6a:	4804      	ldr	r0, [pc, #16]	; (23f9b7c <os_mutex_recursive_destroy+0x14>)
 23f9b6c:	6800      	ldr	r0, [r0, #0]
 23f9b6e:	4b04      	ldr	r3, [pc, #16]	; (23f9b80 <os_mutex_recursive_destroy+0x18>)
 23f9b70:	4403      	add	r3, r0
 23f9b72:	681b      	ldr	r3, [r3, #0]
 23f9b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9b76:	9302      	str	r3, [sp, #8]
 23f9b78:	bd09      	pop	{r0, r3, pc}
 23f9b7a:	0000      	.short	0x0000
 23f9b7c:	10079e48 	.word	0x10079e48
 23f9b80:	00000030 	.word	0x00000030

023f9b84 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f9b84:	b509      	push	{r0, r3, lr}
 23f9b86:	4804      	ldr	r0, [pc, #16]	; (23f9b98 <os_mutex_recursive_lock+0x14>)
 23f9b88:	6800      	ldr	r0, [r0, #0]
 23f9b8a:	4b04      	ldr	r3, [pc, #16]	; (23f9b9c <os_mutex_recursive_lock+0x18>)
 23f9b8c:	4403      	add	r3, r0
 23f9b8e:	681b      	ldr	r3, [r3, #0]
 23f9b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9b92:	9302      	str	r3, [sp, #8]
 23f9b94:	bd09      	pop	{r0, r3, pc}
 23f9b96:	0000      	.short	0x0000
 23f9b98:	10079e48 	.word	0x10079e48
 23f9b9c:	00000030 	.word	0x00000030

023f9ba0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f9ba0:	b509      	push	{r0, r3, lr}
 23f9ba2:	4804      	ldr	r0, [pc, #16]	; (23f9bb4 <os_mutex_recursive_unlock+0x14>)
 23f9ba4:	6800      	ldr	r0, [r0, #0]
 23f9ba6:	4b04      	ldr	r3, [pc, #16]	; (23f9bb8 <os_mutex_recursive_unlock+0x18>)
 23f9ba8:	4403      	add	r3, r0
 23f9baa:	681b      	ldr	r3, [r3, #0]
 23f9bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9bae:	9302      	str	r3, [sp, #8]
 23f9bb0:	bd09      	pop	{r0, r3, pc}
 23f9bb2:	0000      	.short	0x0000
 23f9bb4:	10079e48 	.word	0x10079e48
 23f9bb8:	00000030 	.word	0x00000030

023f9bbc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23f9bbc:	b509      	push	{r0, r3, lr}
 23f9bbe:	4804      	ldr	r0, [pc, #16]	; (23f9bd0 <hal_ble_stack_init+0x14>)
 23f9bc0:	6800      	ldr	r0, [r0, #0]
 23f9bc2:	4b04      	ldr	r3, [pc, #16]	; (23f9bd4 <hal_ble_stack_init+0x18>)
 23f9bc4:	4403      	add	r3, r0
 23f9bc6:	681b      	ldr	r3, [r3, #0]
 23f9bc8:	689b      	ldr	r3, [r3, #8]
 23f9bca:	9302      	str	r3, [sp, #8]
 23f9bcc:	bd09      	pop	{r0, r3, pc}
 23f9bce:	0000      	.short	0x0000
 23f9bd0:	10079e48 	.word	0x10079e48
 23f9bd4:	00000060 	.word	0x00000060

023f9bd8 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23f9bd8:	b509      	push	{r0, r3, lr}
 23f9bda:	4804      	ldr	r0, [pc, #16]	; (23f9bec <hal_ble_gap_start_scan+0x14>)
 23f9bdc:	6800      	ldr	r0, [r0, #0]
 23f9bde:	4b04      	ldr	r3, [pc, #16]	; (23f9bf0 <hal_ble_gap_start_scan+0x18>)
 23f9be0:	4403      	add	r3, r0
 23f9be2:	681b      	ldr	r3, [r3, #0]
 23f9be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23f9be6:	9302      	str	r3, [sp, #8]
 23f9be8:	bd09      	pop	{r0, r3, pc}
 23f9bea:	0000      	.short	0x0000
 23f9bec:	10079e48 	.word	0x10079e48
 23f9bf0:	00000060 	.word	0x00000060

023f9bf4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23f9bf4:	b509      	push	{r0, r3, lr}
 23f9bf6:	4804      	ldr	r0, [pc, #16]	; (23f9c08 <hal_ble_gap_stop_scan+0x14>)
 23f9bf8:	6800      	ldr	r0, [r0, #0]
 23f9bfa:	4b04      	ldr	r3, [pc, #16]	; (23f9c0c <hal_ble_gap_stop_scan+0x18>)
 23f9bfc:	4403      	add	r3, r0
 23f9bfe:	681b      	ldr	r3, [r3, #0]
 23f9c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23f9c04:	9302      	str	r3, [sp, #8]
 23f9c06:	bd09      	pop	{r0, r3, pc}
 23f9c08:	10079e48 	.word	0x10079e48
 23f9c0c:	00000060 	.word	0x00000060

023f9c10 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23f9c10:	b509      	push	{r0, r3, lr}
 23f9c12:	4804      	ldr	r0, [pc, #16]	; (23f9c24 <hal_ble_gap_disconnect+0x14>)
 23f9c14:	6800      	ldr	r0, [r0, #0]
 23f9c16:	4b04      	ldr	r3, [pc, #16]	; (23f9c28 <hal_ble_gap_disconnect+0x18>)
 23f9c18:	4403      	add	r3, r0
 23f9c1a:	681b      	ldr	r3, [r3, #0]
 23f9c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f9c20:	9302      	str	r3, [sp, #8]
 23f9c22:	bd09      	pop	{r0, r3, pc}
 23f9c24:	10079e48 	.word	0x10079e48
 23f9c28:	00000060 	.word	0x00000060

023f9c2c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23f9c2c:	b509      	push	{r0, r3, lr}
 23f9c2e:	4804      	ldr	r0, [pc, #16]	; (23f9c40 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23f9c30:	6800      	ldr	r0, [r0, #0]
 23f9c32:	4b04      	ldr	r3, [pc, #16]	; (23f9c44 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23f9c34:	4403      	add	r3, r0
 23f9c36:	681b      	ldr	r3, [r3, #0]
 23f9c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23f9c3c:	9302      	str	r3, [sp, #8]
 23f9c3e:	bd09      	pop	{r0, r3, pc}
 23f9c40:	10079e48 	.word	0x10079e48
 23f9c44:	00000060 	.word	0x00000060

023f9c48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f9c48:	b509      	push	{r0, r3, lr}
 23f9c4a:	4804      	ldr	r0, [pc, #16]	; (23f9c5c <HAL_RNG_GetRandomNumber+0x14>)
 23f9c4c:	6800      	ldr	r0, [r0, #0]
 23f9c4e:	4b04      	ldr	r3, [pc, #16]	; (23f9c60 <HAL_RNG_GetRandomNumber+0x18>)
 23f9c50:	4403      	add	r3, r0
 23f9c52:	681b      	ldr	r3, [r3, #0]
 23f9c54:	685b      	ldr	r3, [r3, #4]
 23f9c56:	9302      	str	r3, [sp, #8]
 23f9c58:	bd09      	pop	{r0, r3, pc}
 23f9c5a:	0000      	.short	0x0000
 23f9c5c:	10079e48 	.word	0x10079e48
 23f9c60:	00000000 	.word	0x00000000

023f9c64 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f9c64:	b509      	push	{r0, r3, lr}
 23f9c66:	4804      	ldr	r0, [pc, #16]	; (23f9c78 <HAL_Delay_Microseconds+0x14>)
 23f9c68:	6800      	ldr	r0, [r0, #0]
 23f9c6a:	4b04      	ldr	r3, [pc, #16]	; (23f9c7c <HAL_Delay_Microseconds+0x18>)
 23f9c6c:	4403      	add	r3, r0
 23f9c6e:	681b      	ldr	r3, [r3, #0]
 23f9c70:	68db      	ldr	r3, [r3, #12]
 23f9c72:	9302      	str	r3, [sp, #8]
 23f9c74:	bd09      	pop	{r0, r3, pc}
 23f9c76:	0000      	.short	0x0000
 23f9c78:	10079e48 	.word	0x10079e48
 23f9c7c:	00000000 	.word	0x00000000

023f9c80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f9c80:	b509      	push	{r0, r3, lr}
 23f9c82:	4804      	ldr	r0, [pc, #16]	; (23f9c94 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f9c84:	6800      	ldr	r0, [r0, #0]
 23f9c86:	4b04      	ldr	r3, [pc, #16]	; (23f9c98 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f9c88:	4403      	add	r3, r0
 23f9c8a:	681b      	ldr	r3, [r3, #0]
 23f9c8c:	695b      	ldr	r3, [r3, #20]
 23f9c8e:	9302      	str	r3, [sp, #8]
 23f9c90:	bd09      	pop	{r0, r3, pc}
 23f9c92:	0000      	.short	0x0000
 23f9c94:	10079e48 	.word	0x10079e48
 23f9c98:	00000000 	.word	0x00000000

023f9c9c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f9c9c:	b509      	push	{r0, r3, lr}
 23f9c9e:	4804      	ldr	r0, [pc, #16]	; (23f9cb0 <hal_timer_millis+0x14>)
 23f9ca0:	6800      	ldr	r0, [r0, #0]
 23f9ca2:	4b04      	ldr	r3, [pc, #16]	; (23f9cb4 <hal_timer_millis+0x18>)
 23f9ca4:	4403      	add	r3, r0
 23f9ca6:	681b      	ldr	r3, [r3, #0]
 23f9ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f9caa:	9302      	str	r3, [sp, #8]
 23f9cac:	bd09      	pop	{r0, r3, pc}
 23f9cae:	0000      	.short	0x0000
 23f9cb0:	10079e48 	.word	0x10079e48
 23f9cb4:	00000000 	.word	0x00000000

023f9cb8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f9cb8:	b509      	push	{r0, r3, lr}
 23f9cba:	4804      	ldr	r0, [pc, #16]	; (23f9ccc <netdb_freeaddrinfo+0x14>)
 23f9cbc:	6800      	ldr	r0, [r0, #0]
 23f9cbe:	4b04      	ldr	r3, [pc, #16]	; (23f9cd0 <netdb_freeaddrinfo+0x18>)
 23f9cc0:	4403      	add	r3, r0
 23f9cc2:	681b      	ldr	r3, [r3, #0]
 23f9cc4:	689b      	ldr	r3, [r3, #8]
 23f9cc6:	9302      	str	r3, [sp, #8]
 23f9cc8:	bd09      	pop	{r0, r3, pc}
 23f9cca:	0000      	.short	0x0000
 23f9ccc:	10079e48 	.word	0x10079e48
 23f9cd0:	00000050 	.word	0x00000050

023f9cd4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f9cd4:	b509      	push	{r0, r3, lr}
 23f9cd6:	4804      	ldr	r0, [pc, #16]	; (23f9ce8 <netdb_getaddrinfo+0x14>)
 23f9cd8:	6800      	ldr	r0, [r0, #0]
 23f9cda:	4b04      	ldr	r3, [pc, #16]	; (23f9cec <netdb_getaddrinfo+0x18>)
 23f9cdc:	4403      	add	r3, r0
 23f9cde:	681b      	ldr	r3, [r3, #0]
 23f9ce0:	68db      	ldr	r3, [r3, #12]
 23f9ce2:	9302      	str	r3, [sp, #8]
 23f9ce4:	bd09      	pop	{r0, r3, pc}
 23f9ce6:	0000      	.short	0x0000
 23f9ce8:	10079e48 	.word	0x10079e48
 23f9cec:	00000050 	.word	0x00000050

023f9cf0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f9cf0:	b509      	push	{r0, r3, lr}
 23f9cf2:	4804      	ldr	r0, [pc, #16]	; (23f9d04 <panic_+0x14>)
 23f9cf4:	6800      	ldr	r0, [r0, #0]
 23f9cf6:	4b04      	ldr	r3, [pc, #16]	; (23f9d08 <panic_+0x18>)
 23f9cf8:	4403      	add	r3, r0
 23f9cfa:	681b      	ldr	r3, [r3, #0]
 23f9cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9cfe:	9302      	str	r3, [sp, #8]
 23f9d00:	bd09      	pop	{r0, r3, pc}
 23f9d02:	0000      	.short	0x0000
 23f9d04:	10079e48 	.word	0x10079e48
 23f9d08:	00000048 	.word	0x00000048

023f9d0c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f9d0c:	b509      	push	{r0, r3, lr}
 23f9d0e:	4804      	ldr	r0, [pc, #16]	; (23f9d20 <log_message+0x14>)
 23f9d10:	6800      	ldr	r0, [r0, #0]
 23f9d12:	4b04      	ldr	r3, [pc, #16]	; (23f9d24 <log_message+0x18>)
 23f9d14:	4403      	add	r3, r0
 23f9d16:	681b      	ldr	r3, [r3, #0]
 23f9d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9d1a:	9302      	str	r3, [sp, #8]
 23f9d1c:	bd09      	pop	{r0, r3, pc}
 23f9d1e:	0000      	.short	0x0000
 23f9d20:	10079e48 	.word	0x10079e48
 23f9d24:	00000048 	.word	0x00000048

023f9d28 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f9d28:	b509      	push	{r0, r3, lr}
 23f9d2a:	4804      	ldr	r0, [pc, #16]	; (23f9d3c <log_level_name+0x14>)
 23f9d2c:	6800      	ldr	r0, [r0, #0]
 23f9d2e:	4b04      	ldr	r3, [pc, #16]	; (23f9d40 <log_level_name+0x18>)
 23f9d30:	4403      	add	r3, r0
 23f9d32:	681b      	ldr	r3, [r3, #0]
 23f9d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f9d36:	9302      	str	r3, [sp, #8]
 23f9d38:	bd09      	pop	{r0, r3, pc}
 23f9d3a:	0000      	.short	0x0000
 23f9d3c:	10079e48 	.word	0x10079e48
 23f9d40:	00000048 	.word	0x00000048

023f9d44 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f9d44:	b509      	push	{r0, r3, lr}
 23f9d46:	4804      	ldr	r0, [pc, #16]	; (23f9d58 <log_set_callbacks+0x14>)
 23f9d48:	6800      	ldr	r0, [r0, #0]
 23f9d4a:	4b04      	ldr	r3, [pc, #16]	; (23f9d5c <log_set_callbacks+0x18>)
 23f9d4c:	4403      	add	r3, r0
 23f9d4e:	681b      	ldr	r3, [r3, #0]
 23f9d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f9d52:	9302      	str	r3, [sp, #8]
 23f9d54:	bd09      	pop	{r0, r3, pc}
 23f9d56:	0000      	.short	0x0000
 23f9d58:	10079e48 	.word	0x10079e48
 23f9d5c:	00000048 	.word	0x00000048

023f9d60 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f9d60:	b509      	push	{r0, r3, lr}
 23f9d62:	4804      	ldr	r0, [pc, #16]	; (23f9d74 <spark_process+0x14>)
 23f9d64:	6800      	ldr	r0, [r0, #0]
 23f9d66:	4b04      	ldr	r3, [pc, #16]	; (23f9d78 <spark_process+0x18>)
 23f9d68:	4403      	add	r3, r0
 23f9d6a:	681b      	ldr	r3, [r3, #0]
 23f9d6c:	689b      	ldr	r3, [r3, #8]
 23f9d6e:	9302      	str	r3, [sp, #8]
 23f9d70:	bd09      	pop	{r0, r3, pc}
 23f9d72:	0000      	.short	0x0000
 23f9d74:	10079e48 	.word	0x10079e48
 23f9d78:	0000002c 	.word	0x0000002c

023f9d7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f9d7c:	b509      	push	{r0, r3, lr}
 23f9d7e:	4804      	ldr	r0, [pc, #16]	; (23f9d90 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f9d80:	6800      	ldr	r0, [r0, #0]
 23f9d82:	4b04      	ldr	r3, [pc, #16]	; (23f9d94 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f9d84:	4403      	add	r3, r0
 23f9d86:	681b      	ldr	r3, [r3, #0]
 23f9d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9d8a:	9302      	str	r3, [sp, #8]
 23f9d8c:	bd09      	pop	{r0, r3, pc}
 23f9d8e:	0000      	.short	0x0000
 23f9d90:	10079e48 	.word	0x10079e48
 23f9d94:	0000002c 	.word	0x0000002c

023f9d98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9d98:	b509      	push	{r0, r3, lr}
 23f9d9a:	4804      	ldr	r0, [pc, #16]	; (23f9dac <network_connect+0x14>)
 23f9d9c:	6800      	ldr	r0, [r0, #0]
 23f9d9e:	4b04      	ldr	r3, [pc, #16]	; (23f9db0 <network_connect+0x18>)
 23f9da0:	4403      	add	r3, r0
 23f9da2:	681b      	ldr	r3, [r3, #0]
 23f9da4:	685b      	ldr	r3, [r3, #4]
 23f9da6:	9302      	str	r3, [sp, #8]
 23f9da8:	bd09      	pop	{r0, r3, pc}
 23f9daa:	0000      	.short	0x0000
 23f9dac:	10079e48 	.word	0x10079e48
 23f9db0:	00000028 	.word	0x00000028

023f9db4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f9db4:	b509      	push	{r0, r3, lr}
 23f9db6:	4804      	ldr	r0, [pc, #16]	; (23f9dc8 <network_connecting+0x14>)
 23f9db8:	6800      	ldr	r0, [r0, #0]
 23f9dba:	4b04      	ldr	r3, [pc, #16]	; (23f9dcc <network_connecting+0x18>)
 23f9dbc:	4403      	add	r3, r0
 23f9dbe:	681b      	ldr	r3, [r3, #0]
 23f9dc0:	689b      	ldr	r3, [r3, #8]
 23f9dc2:	9302      	str	r3, [sp, #8]
 23f9dc4:	bd09      	pop	{r0, r3, pc}
 23f9dc6:	0000      	.short	0x0000
 23f9dc8:	10079e48 	.word	0x10079e48
 23f9dcc:	00000028 	.word	0x00000028

023f9dd0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f9dd0:	b509      	push	{r0, r3, lr}
 23f9dd2:	4804      	ldr	r0, [pc, #16]	; (23f9de4 <network_disconnect+0x14>)
 23f9dd4:	6800      	ldr	r0, [r0, #0]
 23f9dd6:	4b04      	ldr	r3, [pc, #16]	; (23f9de8 <network_disconnect+0x18>)
 23f9dd8:	4403      	add	r3, r0
 23f9dda:	681b      	ldr	r3, [r3, #0]
 23f9ddc:	68db      	ldr	r3, [r3, #12]
 23f9dde:	9302      	str	r3, [sp, #8]
 23f9de0:	bd09      	pop	{r0, r3, pc}
 23f9de2:	0000      	.short	0x0000
 23f9de4:	10079e48 	.word	0x10079e48
 23f9de8:	00000028 	.word	0x00000028

023f9dec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f9dec:	b509      	push	{r0, r3, lr}
 23f9dee:	4804      	ldr	r0, [pc, #16]	; (23f9e00 <network_ready+0x14>)
 23f9df0:	6800      	ldr	r0, [r0, #0]
 23f9df2:	4b04      	ldr	r3, [pc, #16]	; (23f9e04 <network_ready+0x18>)
 23f9df4:	4403      	add	r3, r0
 23f9df6:	681b      	ldr	r3, [r3, #0]
 23f9df8:	691b      	ldr	r3, [r3, #16]
 23f9dfa:	9302      	str	r3, [sp, #8]
 23f9dfc:	bd09      	pop	{r0, r3, pc}
 23f9dfe:	0000      	.short	0x0000
 23f9e00:	10079e48 	.word	0x10079e48
 23f9e04:	00000028 	.word	0x00000028

023f9e08 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9e08:	b509      	push	{r0, r3, lr}
 23f9e0a:	4804      	ldr	r0, [pc, #16]	; (23f9e1c <network_on+0x14>)
 23f9e0c:	6800      	ldr	r0, [r0, #0]
 23f9e0e:	4b04      	ldr	r3, [pc, #16]	; (23f9e20 <network_on+0x18>)
 23f9e10:	4403      	add	r3, r0
 23f9e12:	681b      	ldr	r3, [r3, #0]
 23f9e14:	695b      	ldr	r3, [r3, #20]
 23f9e16:	9302      	str	r3, [sp, #8]
 23f9e18:	bd09      	pop	{r0, r3, pc}
 23f9e1a:	0000      	.short	0x0000
 23f9e1c:	10079e48 	.word	0x10079e48
 23f9e20:	00000028 	.word	0x00000028

023f9e24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9e24:	b509      	push	{r0, r3, lr}
 23f9e26:	4804      	ldr	r0, [pc, #16]	; (23f9e38 <network_off+0x14>)
 23f9e28:	6800      	ldr	r0, [r0, #0]
 23f9e2a:	4b04      	ldr	r3, [pc, #16]	; (23f9e3c <network_off+0x18>)
 23f9e2c:	4403      	add	r3, r0
 23f9e2e:	681b      	ldr	r3, [r3, #0]
 23f9e30:	699b      	ldr	r3, [r3, #24]
 23f9e32:	9302      	str	r3, [sp, #8]
 23f9e34:	bd09      	pop	{r0, r3, pc}
 23f9e36:	0000      	.short	0x0000
 23f9e38:	10079e48 	.word	0x10079e48
 23f9e3c:	00000028 	.word	0x00000028

023f9e40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f9e40:	b509      	push	{r0, r3, lr}
 23f9e42:	4804      	ldr	r0, [pc, #16]	; (23f9e54 <network_listen+0x14>)
 23f9e44:	6800      	ldr	r0, [r0, #0]
 23f9e46:	4b04      	ldr	r3, [pc, #16]	; (23f9e58 <network_listen+0x18>)
 23f9e48:	4403      	add	r3, r0
 23f9e4a:	681b      	ldr	r3, [r3, #0]
 23f9e4c:	69db      	ldr	r3, [r3, #28]
 23f9e4e:	9302      	str	r3, [sp, #8]
 23f9e50:	bd09      	pop	{r0, r3, pc}
 23f9e52:	0000      	.short	0x0000
 23f9e54:	10079e48 	.word	0x10079e48
 23f9e58:	00000028 	.word	0x00000028

023f9e5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f9e5c:	b509      	push	{r0, r3, lr}
 23f9e5e:	4804      	ldr	r0, [pc, #16]	; (23f9e70 <network_listening+0x14>)
 23f9e60:	6800      	ldr	r0, [r0, #0]
 23f9e62:	4b04      	ldr	r3, [pc, #16]	; (23f9e74 <network_listening+0x18>)
 23f9e64:	4403      	add	r3, r0
 23f9e66:	681b      	ldr	r3, [r3, #0]
 23f9e68:	6a1b      	ldr	r3, [r3, #32]
 23f9e6a:	9302      	str	r3, [sp, #8]
 23f9e6c:	bd09      	pop	{r0, r3, pc}
 23f9e6e:	0000      	.short	0x0000
 23f9e70:	10079e48 	.word	0x10079e48
 23f9e74:	00000028 	.word	0x00000028

023f9e78 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f9e78:	b509      	push	{r0, r3, lr}
 23f9e7a:	4804      	ldr	r0, [pc, #16]	; (23f9e8c <network_set_listen_timeout+0x14>)
 23f9e7c:	6800      	ldr	r0, [r0, #0]
 23f9e7e:	4b04      	ldr	r3, [pc, #16]	; (23f9e90 <network_set_listen_timeout+0x18>)
 23f9e80:	4403      	add	r3, r0
 23f9e82:	681b      	ldr	r3, [r3, #0]
 23f9e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9e86:	9302      	str	r3, [sp, #8]
 23f9e88:	bd09      	pop	{r0, r3, pc}
 23f9e8a:	0000      	.short	0x0000
 23f9e8c:	10079e48 	.word	0x10079e48
 23f9e90:	00000028 	.word	0x00000028

023f9e94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f9e94:	b509      	push	{r0, r3, lr}
 23f9e96:	4804      	ldr	r0, [pc, #16]	; (23f9ea8 <network_get_listen_timeout+0x14>)
 23f9e98:	6800      	ldr	r0, [r0, #0]
 23f9e9a:	4b04      	ldr	r3, [pc, #16]	; (23f9eac <network_get_listen_timeout+0x18>)
 23f9e9c:	4403      	add	r3, r0
 23f9e9e:	681b      	ldr	r3, [r3, #0]
 23f9ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9ea2:	9302      	str	r3, [sp, #8]
 23f9ea4:	bd09      	pop	{r0, r3, pc}
 23f9ea6:	0000      	.short	0x0000
 23f9ea8:	10079e48 	.word	0x10079e48
 23f9eac:	00000028 	.word	0x00000028

023f9eb0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f9eb0:	b509      	push	{r0, r3, lr}
 23f9eb2:	4804      	ldr	r0, [pc, #16]	; (23f9ec4 <network_is_on+0x14>)
 23f9eb4:	6800      	ldr	r0, [r0, #0]
 23f9eb6:	4b04      	ldr	r3, [pc, #16]	; (23f9ec8 <network_is_on+0x18>)
 23f9eb8:	4403      	add	r3, r0
 23f9eba:	681b      	ldr	r3, [r3, #0]
 23f9ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9ebe:	9302      	str	r3, [sp, #8]
 23f9ec0:	bd09      	pop	{r0, r3, pc}
 23f9ec2:	0000      	.short	0x0000
 23f9ec4:	10079e48 	.word	0x10079e48
 23f9ec8:	00000028 	.word	0x00000028

023f9ecc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f9ecc:	b509      	push	{r0, r3, lr}
 23f9ece:	4804      	ldr	r0, [pc, #16]	; (23f9ee0 <network_is_off+0x14>)
 23f9ed0:	6800      	ldr	r0, [r0, #0]
 23f9ed2:	4b04      	ldr	r3, [pc, #16]	; (23f9ee4 <network_is_off+0x18>)
 23f9ed4:	4403      	add	r3, r0
 23f9ed6:	681b      	ldr	r3, [r3, #0]
 23f9ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9eda:	9302      	str	r3, [sp, #8]
 23f9edc:	bd09      	pop	{r0, r3, pc}
 23f9ede:	0000      	.short	0x0000
 23f9ee0:	10079e48 	.word	0x10079e48
 23f9ee4:	00000028 	.word	0x00000028

023f9ee8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f9ee8:	b509      	push	{r0, r3, lr}
 23f9eea:	4804      	ldr	r0, [pc, #16]	; (23f9efc <set_system_mode+0x14>)
 23f9eec:	6800      	ldr	r0, [r0, #0]
 23f9eee:	4b04      	ldr	r3, [pc, #16]	; (23f9f00 <set_system_mode+0x18>)
 23f9ef0:	4403      	add	r3, r0
 23f9ef2:	681b      	ldr	r3, [r3, #0]
 23f9ef4:	685b      	ldr	r3, [r3, #4]
 23f9ef6:	9302      	str	r3, [sp, #8]
 23f9ef8:	bd09      	pop	{r0, r3, pc}
 23f9efa:	0000      	.short	0x0000
 23f9efc:	10079e48 	.word	0x10079e48
 23f9f00:	00000008 	.word	0x00000008

023f9f04 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f9f04:	b509      	push	{r0, r3, lr}
 23f9f06:	4804      	ldr	r0, [pc, #16]	; (23f9f18 <system_delay_ms+0x14>)
 23f9f08:	6800      	ldr	r0, [r0, #0]
 23f9f0a:	4b04      	ldr	r3, [pc, #16]	; (23f9f1c <system_delay_ms+0x18>)
 23f9f0c:	4403      	add	r3, r0
 23f9f0e:	681b      	ldr	r3, [r3, #0]
 23f9f10:	695b      	ldr	r3, [r3, #20]
 23f9f12:	9302      	str	r3, [sp, #8]
 23f9f14:	bd09      	pop	{r0, r3, pc}
 23f9f16:	0000      	.short	0x0000
 23f9f18:	10079e48 	.word	0x10079e48
 23f9f1c:	00000008 	.word	0x00000008

023f9f20 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f9f20:	b509      	push	{r0, r3, lr}
 23f9f22:	4804      	ldr	r0, [pc, #16]	; (23f9f34 <system_thread_set_state+0x14>)
 23f9f24:	6800      	ldr	r0, [r0, #0]
 23f9f26:	4b04      	ldr	r3, [pc, #16]	; (23f9f38 <system_thread_set_state+0x18>)
 23f9f28:	4403      	add	r3, r0
 23f9f2a:	681b      	ldr	r3, [r3, #0]
 23f9f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9f2e:	9302      	str	r3, [sp, #8]
 23f9f30:	bd09      	pop	{r0, r3, pc}
 23f9f32:	0000      	.short	0x0000
 23f9f34:	10079e48 	.word	0x10079e48
 23f9f38:	00000008 	.word	0x00000008

023f9f3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f9f3c:	b509      	push	{r0, r3, lr}
 23f9f3e:	4804      	ldr	r0, [pc, #16]	; (23f9f50 <system_ctrl_set_app_request_handler+0x14>)
 23f9f40:	6800      	ldr	r0, [r0, #0]
 23f9f42:	4b04      	ldr	r3, [pc, #16]	; (23f9f54 <system_ctrl_set_app_request_handler+0x18>)
 23f9f44:	4403      	add	r3, r0
 23f9f46:	681b      	ldr	r3, [r3, #0]
 23f9f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f9f4c:	9302      	str	r3, [sp, #8]
 23f9f4e:	bd09      	pop	{r0, r3, pc}
 23f9f50:	10079e48 	.word	0x10079e48
 23f9f54:	00000008 	.word	0x00000008

023f9f58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f9f58:	b509      	push	{r0, r3, lr}
 23f9f5a:	4804      	ldr	r0, [pc, #16]	; (23f9f6c <system_ctrl_set_result+0x14>)
 23f9f5c:	6800      	ldr	r0, [r0, #0]
 23f9f5e:	4b04      	ldr	r3, [pc, #16]	; (23f9f70 <system_ctrl_set_result+0x18>)
 23f9f60:	4403      	add	r3, r0
 23f9f62:	681b      	ldr	r3, [r3, #0]
 23f9f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f9f68:	9302      	str	r3, [sp, #8]
 23f9f6a:	bd09      	pop	{r0, r3, pc}
 23f9f6c:	10079e48 	.word	0x10079e48
 23f9f70:	00000008 	.word	0x00000008

023f9f74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f9f74:	b509      	push	{r0, r3, lr}
 23f9f76:	4804      	ldr	r0, [pc, #16]	; (23f9f88 <malloc+0x14>)
 23f9f78:	6800      	ldr	r0, [r0, #0]
 23f9f7a:	4b04      	ldr	r3, [pc, #16]	; (23f9f8c <malloc+0x18>)
 23f9f7c:	4403      	add	r3, r0
 23f9f7e:	681b      	ldr	r3, [r3, #0]
 23f9f80:	681b      	ldr	r3, [r3, #0]
 23f9f82:	9302      	str	r3, [sp, #8]
 23f9f84:	bd09      	pop	{r0, r3, pc}
 23f9f86:	0000      	.short	0x0000
 23f9f88:	10079e48 	.word	0x10079e48
 23f9f8c:	00000004 	.word	0x00000004

023f9f90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f9f90:	b509      	push	{r0, r3, lr}
 23f9f92:	4804      	ldr	r0, [pc, #16]	; (23f9fa4 <free+0x14>)
 23f9f94:	6800      	ldr	r0, [r0, #0]
 23f9f96:	4b04      	ldr	r3, [pc, #16]	; (23f9fa8 <free+0x18>)
 23f9f98:	4403      	add	r3, r0
 23f9f9a:	681b      	ldr	r3, [r3, #0]
 23f9f9c:	685b      	ldr	r3, [r3, #4]
 23f9f9e:	9302      	str	r3, [sp, #8]
 23f9fa0:	bd09      	pop	{r0, r3, pc}
 23f9fa2:	0000      	.short	0x0000
 23f9fa4:	10079e48 	.word	0x10079e48
 23f9fa8:	00000004 	.word	0x00000004

023f9fac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f9fac:	b509      	push	{r0, r3, lr}
 23f9fae:	4804      	ldr	r0, [pc, #16]	; (23f9fc0 <realloc+0x14>)
 23f9fb0:	6800      	ldr	r0, [r0, #0]
 23f9fb2:	4b04      	ldr	r3, [pc, #16]	; (23f9fc4 <realloc+0x18>)
 23f9fb4:	4403      	add	r3, r0
 23f9fb6:	681b      	ldr	r3, [r3, #0]
 23f9fb8:	689b      	ldr	r3, [r3, #8]
 23f9fba:	9302      	str	r3, [sp, #8]
 23f9fbc:	bd09      	pop	{r0, r3, pc}
 23f9fbe:	0000      	.short	0x0000
 23f9fc0:	10079e48 	.word	0x10079e48
 23f9fc4:	00000004 	.word	0x00000004

023f9fc8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f9fc8:	b509      	push	{r0, r3, lr}
 23f9fca:	4804      	ldr	r0, [pc, #16]	; (23f9fdc <vsnprintf+0x14>)
 23f9fcc:	6800      	ldr	r0, [r0, #0]
 23f9fce:	4b04      	ldr	r3, [pc, #16]	; (23f9fe0 <vsnprintf+0x18>)
 23f9fd0:	4403      	add	r3, r0
 23f9fd2:	681b      	ldr	r3, [r3, #0]
 23f9fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9fd6:	9302      	str	r3, [sp, #8]
 23f9fd8:	bd09      	pop	{r0, r3, pc}
 23f9fda:	0000      	.short	0x0000
 23f9fdc:	10079e48 	.word	0x10079e48
 23f9fe0:	00000004 	.word	0x00000004

023f9fe4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f9fe4:	b509      	push	{r0, r3, lr}
 23f9fe6:	4804      	ldr	r0, [pc, #16]	; (23f9ff8 <abort+0x14>)
 23f9fe8:	6800      	ldr	r0, [r0, #0]
 23f9fea:	4b04      	ldr	r3, [pc, #16]	; (23f9ffc <abort+0x18>)
 23f9fec:	4403      	add	r3, r0
 23f9fee:	681b      	ldr	r3, [r3, #0]
 23f9ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9ff2:	9302      	str	r3, [sp, #8]
 23f9ff4:	bd09      	pop	{r0, r3, pc}
 23f9ff6:	0000      	.short	0x0000
 23f9ff8:	10079e48 	.word	0x10079e48
 23f9ffc:	00000004 	.word	0x00000004

023fa000 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fa000:	b509      	push	{r0, r3, lr}
 23fa002:	4804      	ldr	r0, [pc, #16]	; (23fa014 <__errno+0x14>)
 23fa004:	6800      	ldr	r0, [r0, #0]
 23fa006:	4b04      	ldr	r3, [pc, #16]	; (23fa018 <__errno+0x18>)
 23fa008:	4403      	add	r3, r0
 23fa00a:	681b      	ldr	r3, [r3, #0]
 23fa00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fa00e:	9302      	str	r3, [sp, #8]
 23fa010:	bd09      	pop	{r0, r3, pc}
 23fa012:	0000      	.short	0x0000
 23fa014:	10079e48 	.word	0x10079e48
 23fa018:	00000004 	.word	0x00000004

023fa01c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fa01c:	b509      	push	{r0, r3, lr}
 23fa01e:	4804      	ldr	r0, [pc, #16]	; (23fa030 <__assert_func+0x14>)
 23fa020:	6800      	ldr	r0, [r0, #0]
 23fa022:	4b04      	ldr	r3, [pc, #16]	; (23fa034 <__assert_func+0x18>)
 23fa024:	4403      	add	r3, r0
 23fa026:	681b      	ldr	r3, [r3, #0]
 23fa028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa02a:	9302      	str	r3, [sp, #8]
 23fa02c:	bd09      	pop	{r0, r3, pc}
 23fa02e:	0000      	.short	0x0000
 23fa030:	10079e48 	.word	0x10079e48
 23fa034:	00000004 	.word	0x00000004

023fa038 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fa038:	b509      	push	{r0, r3, lr}
 23fa03a:	4804      	ldr	r0, [pc, #16]	; (23fa04c <newlib_impure_ptr_callback+0x14>)
 23fa03c:	6800      	ldr	r0, [r0, #0]
 23fa03e:	4b04      	ldr	r3, [pc, #16]	; (23fa050 <newlib_impure_ptr_callback+0x18>)
 23fa040:	4403      	add	r3, r0
 23fa042:	681b      	ldr	r3, [r3, #0]
 23fa044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa046:	9302      	str	r3, [sp, #8]
 23fa048:	bd09      	pop	{r0, r3, pc}
 23fa04a:	0000      	.short	0x0000
 23fa04c:	10079e48 	.word	0x10079e48
 23fa050:	00000004 	.word	0x00000004

023fa054 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fa054:	2300      	movs	r3, #0
 23fa056:	6840      	ldr	r0, [r0, #4]
 23fa058:	461a      	mov	r2, r3
 23fa05a:	f7ff be9d 	b.w	23f9d98 <network_connect>

023fa05e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fa05e:	2200      	movs	r2, #0
 23fa060:	2102      	movs	r1, #2
 23fa062:	6840      	ldr	r0, [r0, #4]
 23fa064:	f7ff beb4 	b.w	23f9dd0 <network_disconnect>

023fa068 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fa068:	2200      	movs	r2, #0
 23fa06a:	6840      	ldr	r0, [r0, #4]
 23fa06c:	4611      	mov	r1, r2
 23fa06e:	f7ff bea1 	b.w	23f9db4 <network_connecting>

023fa072 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fa072:	2200      	movs	r2, #0
 23fa074:	6840      	ldr	r0, [r0, #4]
 23fa076:	4611      	mov	r1, r2
 23fa078:	f7ff beb8 	b.w	23f9dec <network_ready>

023fa07c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fa07c:	2300      	movs	r3, #0
 23fa07e:	6840      	ldr	r0, [r0, #4]
 23fa080:	461a      	mov	r2, r3
 23fa082:	4619      	mov	r1, r3
 23fa084:	f7ff bec0 	b.w	23f9e08 <network_on>

023fa088 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fa088:	2300      	movs	r3, #0
 23fa08a:	6840      	ldr	r0, [r0, #4]
 23fa08c:	461a      	mov	r2, r3
 23fa08e:	4619      	mov	r1, r3
 23fa090:	f7ff bec8 	b.w	23f9e24 <network_off>

023fa094 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fa094:	2100      	movs	r1, #0
 23fa096:	6840      	ldr	r0, [r0, #4]
 23fa098:	f7ff bf0a 	b.w	23f9eb0 <network_is_on>

023fa09c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fa09c:	2100      	movs	r1, #0
 23fa09e:	6840      	ldr	r0, [r0, #4]
 23fa0a0:	f7ff bf14 	b.w	23f9ecc <network_is_off>

023fa0a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fa0a4:	2200      	movs	r2, #0
 23fa0a6:	6840      	ldr	r0, [r0, #4]
 23fa0a8:	f081 0101 	eor.w	r1, r1, #1
 23fa0ac:	f7ff bec8 	b.w	23f9e40 <network_listen>

023fa0b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fa0b0:	2200      	movs	r2, #0
 23fa0b2:	6840      	ldr	r0, [r0, #4]
 23fa0b4:	f7ff bee0 	b.w	23f9e78 <network_set_listen_timeout>

023fa0b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fa0b8:	2200      	movs	r2, #0
 23fa0ba:	6840      	ldr	r0, [r0, #4]
 23fa0bc:	4611      	mov	r1, r2
 23fa0be:	f7ff bee9 	b.w	23f9e94 <network_get_listen_timeout>

023fa0c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fa0c2:	2200      	movs	r2, #0
 23fa0c4:	6840      	ldr	r0, [r0, #4]
 23fa0c6:	4611      	mov	r1, r2
 23fa0c8:	f7ff bec8 	b.w	23f9e5c <network_listening>

023fa0cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fa0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fa0d0:	b095      	sub	sp, #84	; 0x54
 23fa0d2:	4614      	mov	r4, r2
 23fa0d4:	460d      	mov	r5, r1
 23fa0d6:	4607      	mov	r7, r0
    IPAddress addr;
 23fa0d8:	f000 fbc2 	bl	23fa860 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fa0dc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fa0de:	221c      	movs	r2, #28
 23fa0e0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fa0e2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fa0e4:	f003 fd10 	bl	23fdb08 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fa0e8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fa0ea:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fa0ec:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fa0ee:	2100      	movs	r1, #0
 23fa0f0:	466b      	mov	r3, sp
 23fa0f2:	aa0c      	add	r2, sp, #48	; 0x30
 23fa0f4:	f7ff fdee 	bl	23f9cd4 <netdb_getaddrinfo>
    if (!r) {
 23fa0f8:	4604      	mov	r4, r0
 23fa0fa:	2800      	cmp	r0, #0
 23fa0fc:	d14b      	bne.n	23fa196 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fa0fe:	4602      	mov	r2, r0
 23fa100:	2101      	movs	r1, #1
 23fa102:	6868      	ldr	r0, [r5, #4]
 23fa104:	f7ff fe72 	bl	23f9dec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fa108:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fa10a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fa10c:	4622      	mov	r2, r4
 23fa10e:	6868      	ldr	r0, [r5, #4]
 23fa110:	f7ff fe6c 	bl	23f9dec <network_ready>
        bool ok = false;
 23fa114:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fa116:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fa118:	9e00      	ldr	r6, [sp, #0]
 23fa11a:	2e00      	cmp	r6, #0
 23fa11c:	d03b      	beq.n	23fa196 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fa11e:	2900      	cmp	r1, #0
 23fa120:	d139      	bne.n	23fa196 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fa122:	6873      	ldr	r3, [r6, #4]
 23fa124:	2b02      	cmp	r3, #2
 23fa126:	d003      	beq.n	23fa130 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fa128:	2b0a      	cmp	r3, #10
 23fa12a:	d011      	beq.n	23fa150 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fa12c:	69f6      	ldr	r6, [r6, #28]
 23fa12e:	e7f4      	b.n	23fa11a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fa130:	f1b8 0f00 	cmp.w	r8, #0
 23fa134:	d0fa      	beq.n	23fa12c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fa136:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23fa138:	a806      	add	r0, sp, #24
 23fa13a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fa13c:	1d3c      	adds	r4, r7, #4
 23fa13e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fa140:	f000 fbbc 	bl	23fa8bc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fa144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fa146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fa148:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fa14a:	4641      	mov	r1, r8
 23fa14c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fa14e:	e7ed      	b.n	23fa12c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fa150:	f1b9 0f00 	cmp.w	r9, #0
 23fa154:	d0ea      	beq.n	23fa12c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fa156:	2210      	movs	r2, #16
 23fa158:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fa15a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fa15c:	f003 fcd4 	bl	23fdb08 <memset>
                    a.v = 6;
 23fa160:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fa162:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fa164:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fa168:	f104 0308 	add.w	r3, r4, #8
 23fa16c:	3418      	adds	r4, #24
 23fa16e:	462a      	mov	r2, r5
 23fa170:	6818      	ldr	r0, [r3, #0]
 23fa172:	6859      	ldr	r1, [r3, #4]
 23fa174:	3308      	adds	r3, #8
 23fa176:	c203      	stmia	r2!, {r0, r1}
 23fa178:	42a3      	cmp	r3, r4
 23fa17a:	4615      	mov	r5, r2
 23fa17c:	d1f7      	bne.n	23fa16e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fa17e:	a901      	add	r1, sp, #4
 23fa180:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fa182:	1d3c      	adds	r4, r7, #4
 23fa184:	ad07      	add	r5, sp, #28
 23fa186:	f000 fb79 	bl	23fa87c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fa18a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fa18c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fa18e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fa190:	4649      	mov	r1, r9
 23fa192:	7023      	strb	r3, [r4, #0]
                    break;
 23fa194:	e7ca      	b.n	23fa12c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fa196:	9800      	ldr	r0, [sp, #0]
 23fa198:	f7ff fd8e 	bl	23f9cb8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fa19c:	4638      	mov	r0, r7
 23fa19e:	b015      	add	sp, #84	; 0x54
 23fa1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fa1a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fa1a4:	4b02      	ldr	r3, [pc, #8]	; (23fa1b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fa1a6:	4a03      	ldr	r2, [pc, #12]	; (23fa1b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fa1a8:	601a      	str	r2, [r3, #0]
 23fa1aa:	2200      	movs	r2, #0
 23fa1ac:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fa1ae:	4770      	bx	lr
 23fa1b0:	1007ae80 	.word	0x1007ae80
 23fa1b4:	023ff984 	.word	0x023ff984

023fa1b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fa1b8:	2200      	movs	r2, #0
 23fa1ba:	6840      	ldr	r0, [r0, #4]
 23fa1bc:	4611      	mov	r1, r2
 23fa1be:	f7ff be15 	b.w	23f9dec <network_ready>

023fa1c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fa1c2:	2200      	movs	r2, #0
 23fa1c4:	6840      	ldr	r0, [r0, #4]
 23fa1c6:	4611      	mov	r1, r2
 23fa1c8:	f7ff be48 	b.w	23f9e5c <network_listening>

023fa1cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fa1cc:	2200      	movs	r2, #0
 23fa1ce:	6840      	ldr	r0, [r0, #4]
 23fa1d0:	4611      	mov	r1, r2
 23fa1d2:	f7ff be5f 	b.w	23f9e94 <network_get_listen_timeout>

023fa1d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fa1d6:	2200      	movs	r2, #0
 23fa1d8:	6840      	ldr	r0, [r0, #4]
 23fa1da:	f7ff be4d 	b.w	23f9e78 <network_set_listen_timeout>

023fa1de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fa1de:	2200      	movs	r2, #0
 23fa1e0:	6840      	ldr	r0, [r0, #4]
 23fa1e2:	f081 0101 	eor.w	r1, r1, #1
 23fa1e6:	f7ff be2b 	b.w	23f9e40 <network_listen>

023fa1ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fa1ea:	2300      	movs	r3, #0
 23fa1ec:	6840      	ldr	r0, [r0, #4]
 23fa1ee:	461a      	mov	r2, r3
 23fa1f0:	4619      	mov	r1, r3
 23fa1f2:	f7ff be17 	b.w	23f9e24 <network_off>

023fa1f6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fa1f6:	2300      	movs	r3, #0
 23fa1f8:	6840      	ldr	r0, [r0, #4]
 23fa1fa:	461a      	mov	r2, r3
 23fa1fc:	4619      	mov	r1, r3
 23fa1fe:	f7ff be03 	b.w	23f9e08 <network_on>

023fa202 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fa202:	2200      	movs	r2, #0
 23fa204:	6840      	ldr	r0, [r0, #4]
 23fa206:	4611      	mov	r1, r2
 23fa208:	f7ff bdd4 	b.w	23f9db4 <network_connecting>

023fa20c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fa20c:	2200      	movs	r2, #0
 23fa20e:	2102      	movs	r1, #2
 23fa210:	6840      	ldr	r0, [r0, #4]
 23fa212:	f7ff bddd 	b.w	23f9dd0 <network_disconnect>

023fa216 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fa216:	2300      	movs	r3, #0
 23fa218:	6840      	ldr	r0, [r0, #4]
 23fa21a:	461a      	mov	r2, r3
 23fa21c:	f7ff bdbc 	b.w	23f9d98 <network_connect>

023fa220 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fa220:	2204      	movs	r2, #4
 23fa222:	4b02      	ldr	r3, [pc, #8]	; (23fa22c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fa224:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fa226:	4a02      	ldr	r2, [pc, #8]	; (23fa230 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fa228:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fa22a:	4770      	bx	lr
 23fa22c:	1007ae88 	.word	0x1007ae88
 23fa230:	023ff9c0 	.word	0x023ff9c0

023fa234 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fa234:	4770      	bx	lr

023fa236 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fa236:	7441      	strb	r1, [r0, #17]
}
 23fa238:	4770      	bx	lr

023fa23a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fa23a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fa23c:	7c00      	ldrb	r0, [r0, #16]
 23fa23e:	f7ff fc3f 	bl	23f9ac0 <hal_usart_available_data_for_write>
}
 23fa242:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fa246:	bd08      	pop	{r3, pc}

023fa248 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fa248:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fa24a:	7c00      	ldrb	r0, [r0, #16]
 23fa24c:	f7ff fbf2 	bl	23f9a34 <hal_usart_available>
}
 23fa250:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fa254:	bd08      	pop	{r3, pc}

023fa256 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fa256:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fa258:	7c00      	ldrb	r0, [r0, #16]
 23fa25a:	f7ff fc07 	bl	23f9a6c <hal_usart_peek>
}
 23fa25e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fa262:	bd08      	pop	{r3, pc}

023fa264 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fa264:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fa266:	7c00      	ldrb	r0, [r0, #16]
 23fa268:	f7ff fbf2 	bl	23f9a50 <hal_usart_read>
}
 23fa26c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fa270:	bd08      	pop	{r3, pc}

023fa272 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fa272:	7c00      	ldrb	r0, [r0, #16]
 23fa274:	f7ff bc08 	b.w	23f9a88 <hal_usart_flush>

023fa278 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fa278:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fa27a:	7c45      	ldrb	r5, [r0, #17]
{
 23fa27c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fa27e:	b12d      	cbz	r5, 23fa28c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fa280:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fa282:	b003      	add	sp, #12
 23fa284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fa288:	f7ff bbc6 	b.w	23f9a18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fa28c:	7c00      	ldrb	r0, [r0, #16]
 23fa28e:	9101      	str	r1, [sp, #4]
 23fa290:	f7ff fc16 	bl	23f9ac0 <hal_usart_available_data_for_write>
 23fa294:	2800      	cmp	r0, #0
 23fa296:	9901      	ldr	r1, [sp, #4]
 23fa298:	dcf2      	bgt.n	23fa280 <_ZN11USARTSerial5writeEh+0x8>
}
 23fa29a:	4628      	mov	r0, r5
 23fa29c:	b003      	add	sp, #12
 23fa29e:	bd30      	pop	{r4, r5, pc}

023fa2a0 <_ZN11USARTSerialD0Ev>:
 23fa2a0:	b510      	push	{r4, lr}
 23fa2a2:	4604      	mov	r4, r0
 23fa2a4:	2114      	movs	r1, #20
 23fa2a6:	f7fe fbee 	bl	23f8a86 <_ZdlPvj>
 23fa2aa:	4620      	mov	r0, r4
 23fa2ac:	bd10      	pop	{r4, pc}
	...

023fa2b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fa2b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fa2b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fa2b6:	4604      	mov	r4, r0
 23fa2b8:	4608      	mov	r0, r1
 23fa2ba:	4611      	mov	r1, r2
 23fa2bc:	2200      	movs	r2, #0
 23fa2be:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fa2c2:	4b04      	ldr	r3, [pc, #16]	; (23fa2d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fa2c4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fa2c6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fa2c8:	2301      	movs	r3, #1
 23fa2ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fa2cc:	f7ff fc14 	bl	23f9af8 <hal_usart_init_ex>
}
 23fa2d0:	4620      	mov	r0, r4
 23fa2d2:	bd10      	pop	{r4, pc}
 23fa2d4:	023ffa04 	.word	0x023ffa04

023fa2d8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fa2d8:	2300      	movs	r3, #0
 23fa2da:	7c00      	ldrb	r0, [r0, #16]
 23fa2dc:	f7ff bbfe 	b.w	23f9adc <hal_usart_begin_config>

023fa2e0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fa2e0:	2200      	movs	r2, #0
 23fa2e2:	f7ff bff9 	b.w	23fa2d8 <_ZN11USARTSerial5beginEmm>

023fa2e6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fa2e6:	7c00      	ldrb	r0, [r0, #16]
 23fa2e8:	f7ff bb88 	b.w	23f99fc <hal_usart_end>

023fa2ec <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fa2ec:	7c00      	ldrb	r0, [r0, #16]
 23fa2ee:	f7ff bbd9 	b.w	23f9aa4 <hal_usart_is_enabled>

023fa2f2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fa2f2:	2201      	movs	r2, #1
 23fa2f4:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fa2f8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fa2fc:	4618      	mov	r0, r3
 23fa2fe:	2901      	cmp	r1, #1
 23fa300:	d108      	bne.n	23fa314 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fa302:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fa306:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fa30a:	3a01      	subs	r2, #1
 23fa30c:	f103 0310 	add.w	r3, r3, #16
 23fa310:	d1f2      	bne.n	23fa2f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fa312:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fa314:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fa316:	bf04      	itt	eq
 23fa318:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fa31c:	1852      	addeq	r2, r2, r1
 23fa31e:	e7f4      	b.n	23fa30a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fa320 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa320:	b40e      	push	{r1, r2, r3}
 23fa322:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa324:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa326:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa328:	af00      	add	r7, sp, #0
 23fa32a:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fa32e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa332:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa334:	462b      	mov	r3, r5
 23fa336:	1878      	adds	r0, r7, r1
 23fa338:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa33a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa33c:	f7ff fe44 	bl	23f9fc8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fa340:	280f      	cmp	r0, #15
 23fa342:	687a      	ldr	r2, [r7, #4]
 23fa344:	d91a      	bls.n	23fa37c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fa346:	f100 0308 	add.w	r3, r0, #8
 23fa34a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fa34e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fa350:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa354:	1c41      	adds	r1, r0, #1
 23fa356:	462b      	mov	r3, r5
 23fa358:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa35a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa35c:	f7ff fe34 	bl	23f9fc8 <vsnprintf>
        if (n > 0) {
 23fa360:	1e02      	subs	r2, r0, #0
 23fa362:	dd04      	ble.n	23fa36e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fa364:	6823      	ldr	r3, [r4, #0]
 23fa366:	4669      	mov	r1, sp
 23fa368:	4620      	mov	r0, r4
 23fa36a:	689b      	ldr	r3, [r3, #8]
 23fa36c:	4798      	blx	r3
 23fa36e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fa370:	3720      	adds	r7, #32
 23fa372:	46bd      	mov	sp, r7
 23fa374:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa378:	b003      	add	sp, #12
 23fa37a:	4770      	bx	lr
    } else if (n > 0) {
 23fa37c:	2800      	cmp	r0, #0
 23fa37e:	d0f7      	beq.n	23fa370 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fa380:	6823      	ldr	r3, [r4, #0]
 23fa382:	4602      	mov	r2, r0
 23fa384:	689b      	ldr	r3, [r3, #8]
 23fa386:	4620      	mov	r0, r4
 23fa388:	f107 0110 	add.w	r1, r7, #16
 23fa38c:	4798      	blx	r3
}
 23fa38e:	e7ef      	b.n	23fa370 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fa390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fa390:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fa392:	6843      	ldr	r3, [r0, #4]
    {
 23fa394:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fa396:	3b01      	subs	r3, #1
 23fa398:	6043      	str	r3, [r0, #4]
 23fa39a:	b963      	cbnz	r3, 23fa3b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fa39c:	6803      	ldr	r3, [r0, #0]
 23fa39e:	689b      	ldr	r3, [r3, #8]
 23fa3a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa3a2:	68a3      	ldr	r3, [r4, #8]
 23fa3a4:	3b01      	subs	r3, #1
 23fa3a6:	60a3      	str	r3, [r4, #8]
 23fa3a8:	b92b      	cbnz	r3, 23fa3b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fa3aa:	6823      	ldr	r3, [r4, #0]
 23fa3ac:	4620      	mov	r0, r4
        }
    }
 23fa3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fa3b2:	68db      	ldr	r3, [r3, #12]
 23fa3b4:	4718      	bx	r3
    }
 23fa3b6:	bd10      	pop	{r4, pc}

023fa3b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa3b8:	b538      	push	{r3, r4, r5, lr}
 23fa3ba:	680b      	ldr	r3, [r1, #0]
 23fa3bc:	4604      	mov	r4, r0
 23fa3be:	6003      	str	r3, [r0, #0]
 23fa3c0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fa3c2:	6843      	ldr	r3, [r0, #4]
 23fa3c4:	429d      	cmp	r5, r3
 23fa3c6:	d008      	beq.n	23fa3da <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fa3c8:	b115      	cbz	r5, 23fa3d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fa3ca:	686b      	ldr	r3, [r5, #4]
 23fa3cc:	3301      	adds	r3, #1
 23fa3ce:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fa3d0:	6860      	ldr	r0, [r4, #4]
 23fa3d2:	b108      	cbz	r0, 23fa3d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fa3d4:	f7ff ffdc 	bl	23fa390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fa3d8:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa3da:	bd38      	pop	{r3, r4, r5, pc}

023fa3dc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fa3dc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fa3de:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fa3e0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fa3e4:	2201      	movs	r2, #1
 23fa3e6:	689b      	ldr	r3, [r3, #8]
 23fa3e8:	f10d 0107 	add.w	r1, sp, #7
 23fa3ec:	4798      	blx	r3
}
 23fa3ee:	b003      	add	sp, #12
 23fa3f0:	f85d fb04 	ldr.w	pc, [sp], #4

023fa3f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa3f4:	460b      	mov	r3, r1
 23fa3f6:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fa3f8:	2200      	movs	r2, #0
 23fa3fa:	b510      	push	{r4, lr}
 23fa3fc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa3fe:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fa402:	6083      	str	r3, [r0, #8]
    if (t) {
 23fa404:	b90b      	cbnz	r3, 23fa40a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fa406:	4620      	mov	r0, r4
 23fa408:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fa40a:	f7ff ffd5 	bl	23fa3b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fa40e:	e7fa      	b.n	23fa406 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fa410 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fa410:	6883      	ldr	r3, [r0, #8]
 23fa412:	b1eb      	cbz	r3, 23fa450 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fa414:	781a      	ldrb	r2, [r3, #0]
 23fa416:	2a03      	cmp	r2, #3
 23fa418:	d81a      	bhi.n	23fa450 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fa41a:	e8df f002 	tbb	[pc, r2]
 23fa41e:	1704      	.short	0x1704
 23fa420:	1b02      	.short	0x1b02
 23fa422:	2005      	movs	r0, #5
 23fa424:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fa426:	6802      	ldr	r2, [r0, #0]
 23fa428:	685b      	ldr	r3, [r3, #4]
 23fa42a:	6852      	ldr	r2, [r2, #4]
 23fa42c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fa42e:	282d      	cmp	r0, #45	; 0x2d
 23fa430:	d012      	beq.n	23fa458 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fa432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fa436:	2b09      	cmp	r3, #9
 23fa438:	d90e      	bls.n	23fa458 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fa43a:	2874      	cmp	r0, #116	; 0x74
 23fa43c:	d00e      	beq.n	23fa45c <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fa43e:	2866      	cmp	r0, #102	; 0x66
 23fa440:	d00c      	beq.n	23fa45c <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fa442:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fa446:	4258      	negs	r0, r3
 23fa448:	4158      	adcs	r0, r3
 23fa44a:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fa44c:	2006      	movs	r0, #6
 23fa44e:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fa450:	2000      	movs	r0, #0
 23fa452:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fa454:	2004      	movs	r0, #4
 23fa456:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fa458:	2003      	movs	r0, #3
 23fa45a:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fa45c:	2002      	movs	r0, #2
}
 23fa45e:	4770      	bx	lr

023fa460 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fa460:	b510      	push	{r4, lr}
 23fa462:	4604      	mov	r4, r0
    switch (type()) {
 23fa464:	f7ff ffd4 	bl	23fa410 <_ZNK5spark9JSONValue4typeEv>
 23fa468:	2802      	cmp	r0, #2
 23fa46a:	d00e      	beq.n	23fa48a <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fa46c:	1ec3      	subs	r3, r0, #3
 23fa46e:	b2db      	uxtb	r3, r3
 23fa470:	2b01      	cmp	r3, #1
 23fa472:	d814      	bhi.n	23fa49e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fa474:	6822      	ldr	r2, [r4, #0]
 23fa476:	68a3      	ldr	r3, [r4, #8]
 23fa478:	6850      	ldr	r0, [r2, #4]
 23fa47a:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fa47c:	220a      	movs	r2, #10
}
 23fa47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fa482:	2100      	movs	r1, #0
 23fa484:	4418      	add	r0, r3
 23fa486:	f003 bc3f 	b.w	23fdd08 <strtol>
        const char* const s = d_->json + t_->start;
 23fa48a:	6822      	ldr	r2, [r4, #0]
 23fa48c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fa48e:	6852      	ldr	r2, [r2, #4]
 23fa490:	685b      	ldr	r3, [r3, #4]
 23fa492:	5cd0      	ldrb	r0, [r2, r3]
 23fa494:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fa498:	4258      	negs	r0, r3
 23fa49a:	4158      	adcs	r0, r3
}
 23fa49c:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fa49e:	2000      	movs	r0, #0
 23fa4a0:	e7fc      	b.n	23fa49c <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023fa4a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa4a4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa4a6:	2300      	movs	r3, #0
 23fa4a8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa4aa:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fa4ae:	480e      	ldr	r0, [pc, #56]	; (23fa4e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fa4b0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fa4b4:	b1a9      	cbz	r1, 23fa4e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fa4b6:	780b      	ldrb	r3, [r1, #0]
 23fa4b8:	2b03      	cmp	r3, #3
 23fa4ba:	d006      	beq.n	23fa4ca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fa4bc:	b98b      	cbnz	r3, 23fa4e2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fa4be:	6813      	ldr	r3, [r2, #0]
 23fa4c0:	6858      	ldr	r0, [r3, #4]
 23fa4c2:	684b      	ldr	r3, [r1, #4]
 23fa4c4:	5cc3      	ldrb	r3, [r0, r3]
 23fa4c6:	2b6e      	cmp	r3, #110	; 0x6e
 23fa4c8:	d007      	beq.n	23fa4da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fa4ca:	6813      	ldr	r3, [r2, #0]
 23fa4cc:	684d      	ldr	r5, [r1, #4]
 23fa4ce:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fa4d0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fa4d2:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fa4d4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fa4d6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fa4d8:	60e3      	str	r3, [r4, #12]
 23fa4da:	4611      	mov	r1, r2
 23fa4dc:	4620      	mov	r0, r4
 23fa4de:	f7ff ff6b 	bl	23fa3b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa4e2:	4620      	mov	r0, r4
 23fa4e4:	bd38      	pop	{r3, r4, r5, pc}
 23fa4e6:	bf00      	nop
 23fa4e8:	023fdf87 	.word	0x023fdf87

023fa4ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa4ec:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa4ee:	2500      	movs	r5, #0
 23fa4f0:	460b      	mov	r3, r1
 23fa4f2:	4604      	mov	r4, r0
 23fa4f4:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa4f6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fa4fa:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fa4fe:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fa502:	b14b      	cbz	r3, 23fa518 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fa504:	781a      	ldrb	r2, [r3, #0]
 23fa506:	2a01      	cmp	r2, #1
 23fa508:	d106      	bne.n	23fa518 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fa50a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fa50e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fa510:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fa512:	6143      	str	r3, [r0, #20]
 23fa514:	f7ff ff50 	bl	23fa3b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa518:	4620      	mov	r0, r4
 23fa51a:	bd38      	pop	{r3, r4, r5, pc}

023fa51c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fa51c:	b510      	push	{r4, lr}
    if (!n_) {
 23fa51e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fa520:	4604      	mov	r4, r0
    if (!n_) {
 23fa522:	b163      	cbz	r3, 23fa53e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fa524:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fa526:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fa528:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fa52a:	3010      	adds	r0, #16
 23fa52c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fa52e:	6120      	str	r0, [r4, #16]
    --n_;
 23fa530:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fa532:	b113      	cbz	r3, 23fa53a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fa534:	f7ff fedd 	bl	23fa2f2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fa538:	60a0      	str	r0, [r4, #8]
    return true;
 23fa53a:	2001      	movs	r0, #1
 23fa53c:	e000      	b.n	23fa540 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fa53e:	4618      	mov	r0, r3
}
 23fa540:	bd10      	pop	{r4, pc}

023fa542 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa542:	b510      	push	{r4, lr}
    write('}');
 23fa544:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa546:	4604      	mov	r4, r0
    write('}');
 23fa548:	f7ff ff48 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fa54c:	2301      	movs	r3, #1
}
 23fa54e:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa550:	7123      	strb	r3, [r4, #4]
}
 23fa552:	bd10      	pop	{r4, pc}

023fa554 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fa554:	b508      	push	{r3, lr}
    switch (state_) {
 23fa556:	7903      	ldrb	r3, [r0, #4]
 23fa558:	2b01      	cmp	r3, #1
 23fa55a:	d002      	beq.n	23fa562 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fa55c:	2b02      	cmp	r3, #2
 23fa55e:	d004      	beq.n	23fa56a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fa560:	bd08      	pop	{r3, pc}
        write(',');
 23fa562:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fa564:	f7ff ff3a 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
}
 23fa568:	e7fa      	b.n	23fa560 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fa56a:	213a      	movs	r1, #58	; 0x3a
 23fa56c:	e7fa      	b.n	23fa564 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fa56e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fa56e:	b510      	push	{r4, lr}
 23fa570:	4604      	mov	r4, r0
    writeSeparator();
 23fa572:	f7ff ffef 	bl	23fa554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fa576:	4620      	mov	r0, r4
 23fa578:	217b      	movs	r1, #123	; 0x7b
 23fa57a:	f7ff ff2f 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fa57e:	2300      	movs	r3, #0
}
 23fa580:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fa582:	7123      	strb	r3, [r4, #4]
}
 23fa584:	bd10      	pop	{r4, pc}
	...

023fa588 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fa588:	b513      	push	{r0, r1, r4, lr}
 23fa58a:	4604      	mov	r4, r0
 23fa58c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa58e:	f7ff ffe1 	bl	23fa554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fa592:	6823      	ldr	r3, [r4, #0]
 23fa594:	4620      	mov	r0, r4
 23fa596:	68db      	ldr	r3, [r3, #12]
 23fa598:	9a01      	ldr	r2, [sp, #4]
 23fa59a:	4903      	ldr	r1, [pc, #12]	; (23fa5a8 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fa59c:	4798      	blx	r3
    state_ = NEXT;
 23fa59e:	2301      	movs	r3, #1
}
 23fa5a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa5a2:	7123      	strb	r3, [r4, #4]
}
 23fa5a4:	b002      	add	sp, #8
 23fa5a6:	bd10      	pop	{r4, pc}
 23fa5a8:	023fde9f 	.word	0x023fde9f

023fa5ac <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fa5ac:	b513      	push	{r0, r1, r4, lr}
 23fa5ae:	4604      	mov	r4, r0
 23fa5b0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa5b2:	f7ff ffcf 	bl	23fa554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fa5b6:	6823      	ldr	r3, [r4, #0]
 23fa5b8:	4620      	mov	r0, r4
 23fa5ba:	68db      	ldr	r3, [r3, #12]
 23fa5bc:	9a01      	ldr	r2, [sp, #4]
 23fa5be:	4903      	ldr	r1, [pc, #12]	; (23fa5cc <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fa5c0:	4798      	blx	r3
    state_ = NEXT;
 23fa5c2:	2301      	movs	r3, #1
}
 23fa5c4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa5c6:	7123      	strb	r3, [r4, #4]
}
 23fa5c8:	b002      	add	sp, #8
 23fa5ca:	bd10      	pop	{r4, pc}
 23fa5cc:	023ffa2c 	.word	0x023ffa2c

023fa5d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa5d4:	460d      	mov	r5, r1
 23fa5d6:	4690      	mov	r8, r2
    write('"');
 23fa5d8:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa5da:	4604      	mov	r4, r0
 23fa5dc:	462f      	mov	r7, r5
    write('"');
 23fa5de:	f7ff fefd 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fa5e2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fa688 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fa5e6:	44a8      	add	r8, r5
    while (s != end) {
 23fa5e8:	4547      	cmp	r7, r8
 23fa5ea:	46ba      	mov	sl, r7
 23fa5ec:	d03d      	beq.n	23fa66a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fa5ee:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fa5f2:	2e22      	cmp	r6, #34	; 0x22
 23fa5f4:	d006      	beq.n	23fa604 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa5f6:	2e5c      	cmp	r6, #92	; 0x5c
 23fa5f8:	d004      	beq.n	23fa604 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa5fa:	4630      	mov	r0, r6
 23fa5fc:	f003 fa42 	bl	23fda84 <isprint>
 23fa600:	2800      	cmp	r0, #0
 23fa602:	d1f1      	bne.n	23fa5e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fa604:	6823      	ldr	r3, [r4, #0]
 23fa606:	4629      	mov	r1, r5
 23fa608:	4620      	mov	r0, r4
 23fa60a:	689b      	ldr	r3, [r3, #8]
 23fa60c:	ebaa 0205 	sub.w	r2, sl, r5
 23fa610:	4798      	blx	r3
            write('\\');
 23fa612:	215c      	movs	r1, #92	; 0x5c
 23fa614:	4620      	mov	r0, r4
 23fa616:	f7ff fee1 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fa61a:	2e0d      	cmp	r6, #13
 23fa61c:	d80a      	bhi.n	23fa634 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fa61e:	2e07      	cmp	r6, #7
 23fa620:	d91c      	bls.n	23fa65c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa622:	f1a6 0308 	sub.w	r3, r6, #8
 23fa626:	2b05      	cmp	r3, #5
 23fa628:	d818      	bhi.n	23fa65c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa62a:	e8df f003 	tbb	[pc, r3]
 23fa62e:	0f0d      	.short	0x0f0d
 23fa630:	15131711 	.word	0x15131711
 23fa634:	2e22      	cmp	r6, #34	; 0x22
 23fa636:	d001      	beq.n	23fa63c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fa638:	2e5c      	cmp	r6, #92	; 0x5c
 23fa63a:	d10f      	bne.n	23fa65c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fa63c:	4631      	mov	r1, r6
                write('b');
 23fa63e:	4620      	mov	r0, r4
 23fa640:	f7ff fecc 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fa644:	463d      	mov	r5, r7
    while (s != end) {
 23fa646:	e7cf      	b.n	23fa5e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fa648:	2162      	movs	r1, #98	; 0x62
 23fa64a:	e7f8      	b.n	23fa63e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fa64c:	2174      	movs	r1, #116	; 0x74
 23fa64e:	e7f6      	b.n	23fa63e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fa650:	216e      	movs	r1, #110	; 0x6e
 23fa652:	e7f4      	b.n	23fa63e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fa654:	2166      	movs	r1, #102	; 0x66
 23fa656:	e7f2      	b.n	23fa63e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fa658:	2172      	movs	r1, #114	; 0x72
 23fa65a:	e7f0      	b.n	23fa63e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fa65c:	6823      	ldr	r3, [r4, #0]
 23fa65e:	4632      	mov	r2, r6
 23fa660:	4649      	mov	r1, r9
 23fa662:	4620      	mov	r0, r4
 23fa664:	68db      	ldr	r3, [r3, #12]
 23fa666:	4798      	blx	r3
                break;
 23fa668:	e7ec      	b.n	23fa644 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fa66a:	42bd      	cmp	r5, r7
 23fa66c:	d005      	beq.n	23fa67a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fa66e:	6823      	ldr	r3, [r4, #0]
 23fa670:	4629      	mov	r1, r5
 23fa672:	4620      	mov	r0, r4
 23fa674:	689b      	ldr	r3, [r3, #8]
 23fa676:	1b7a      	subs	r2, r7, r5
 23fa678:	4798      	blx	r3
    }
    write('"');
 23fa67a:	2122      	movs	r1, #34	; 0x22
 23fa67c:	4620      	mov	r0, r4
 23fa67e:	f7ff fead 	bl	23fa3dc <_ZN5spark10JSONWriter5writeEc>
}
 23fa682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa686:	bf00      	nop
 23fa688:	023ffa2f 	.word	0x023ffa2f

023fa68c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fa68c:	b513      	push	{r0, r1, r4, lr}
 23fa68e:	4604      	mov	r4, r0
 23fa690:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa694:	f7ff ff5e 	bl	23fa554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fa698:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa69c:	4620      	mov	r0, r4
 23fa69e:	f7ff ff97 	bl	23fa5d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fa6a2:	2302      	movs	r3, #2
}
 23fa6a4:	4620      	mov	r0, r4
    state_ = VALUE;
 23fa6a6:	7123      	strb	r3, [r4, #4]
}
 23fa6a8:	b002      	add	sp, #8
 23fa6aa:	bd10      	pop	{r4, pc}

023fa6ac <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fa6ac:	b513      	push	{r0, r1, r4, lr}
 23fa6ae:	4604      	mov	r4, r0
 23fa6b0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa6b4:	f7ff ff4e 	bl	23fa554 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fa6b8:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa6bc:	4620      	mov	r0, r4
 23fa6be:	f7ff ff87 	bl	23fa5d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fa6c2:	2301      	movs	r3, #1
}
 23fa6c4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa6c6:	7123      	strb	r3, [r4, #4]
}
 23fa6c8:	b002      	add	sp, #8
 23fa6ca:	bd10      	pop	{r4, pc}

023fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fa6cc:	b510      	push	{r4, lr}
 23fa6ce:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fa6d0:	6800      	ldr	r0, [r0, #0]
 23fa6d2:	b108      	cbz	r0, 23fa6d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fa6d4:	f7ff fe5c 	bl	23fa390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fa6d8:	4620      	mov	r0, r4
 23fa6da:	bd10      	pop	{r4, pc}

023fa6dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fa6dc:	7441      	strb	r1, [r0, #17]
}
 23fa6de:	4770      	bx	lr

023fa6e0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fa6e0:	4770      	bx	lr

023fa6e2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fa6e2:	4770      	bx	lr

023fa6e4 <_ZN9USBSerial4readEv>:
{
 23fa6e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fa6e6:	2100      	movs	r1, #0
 23fa6e8:	7c00      	ldrb	r0, [r0, #16]
 23fa6ea:	f7ff f94f 	bl	23f998c <HAL_USB_USART_Receive_Data>
}
 23fa6ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fa6f2:	bd08      	pop	{r3, pc}

023fa6f4 <_ZN9USBSerial4peekEv>:
{
 23fa6f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fa6f6:	2101      	movs	r1, #1
 23fa6f8:	7c00      	ldrb	r0, [r0, #16]
 23fa6fa:	f7ff f947 	bl	23f998c <HAL_USB_USART_Receive_Data>
}
 23fa6fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fa702:	bd08      	pop	{r3, pc}

023fa704 <_ZN9USBSerial17availableForWriteEv>:
{
 23fa704:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fa706:	7c00      	ldrb	r0, [r0, #16]
 23fa708:	f7ff f932 	bl	23f9970 <HAL_USB_USART_Available_Data_For_Write>
}
 23fa70c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fa710:	bd08      	pop	{r3, pc}

023fa712 <_ZN9USBSerial9availableEv>:
{
 23fa712:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fa714:	7c00      	ldrb	r0, [r0, #16]
 23fa716:	f7ff f91d 	bl	23f9954 <HAL_USB_USART_Available_Data>
}
 23fa71a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fa71e:	bd08      	pop	{r3, pc}

023fa720 <_ZN9USBSerial5writeEh>:
{
 23fa720:	b513      	push	{r0, r1, r4, lr}
 23fa722:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fa724:	7c00      	ldrb	r0, [r0, #16]
{
 23fa726:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fa728:	f7ff f922 	bl	23f9970 <HAL_USB_USART_Available_Data_For_Write>
 23fa72c:	2800      	cmp	r0, #0
 23fa72e:	9901      	ldr	r1, [sp, #4]
 23fa730:	dc01      	bgt.n	23fa736 <_ZN9USBSerial5writeEh+0x16>
 23fa732:	7c60      	ldrb	r0, [r4, #17]
 23fa734:	b120      	cbz	r0, 23fa740 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fa736:	7c20      	ldrb	r0, [r4, #16]
 23fa738:	f7ff f936 	bl	23f99a8 <HAL_USB_USART_Send_Data>
 23fa73c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fa740:	b002      	add	sp, #8
 23fa742:	bd10      	pop	{r4, pc}

023fa744 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fa744:	7c00      	ldrb	r0, [r0, #16]
 23fa746:	f7ff b93d 	b.w	23f99c4 <HAL_USB_USART_Flush_Data>

023fa74a <_ZN9USBSerialD0Ev>:
 23fa74a:	b510      	push	{r4, lr}
 23fa74c:	4604      	mov	r4, r0
 23fa74e:	2114      	movs	r1, #20
 23fa750:	f7fe f999 	bl	23f8a86 <_ZdlPvj>
 23fa754:	4620      	mov	r0, r4
 23fa756:	bd10      	pop	{r4, pc}

023fa758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fa758:	b510      	push	{r4, lr}
 23fa75a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fa75e:	4604      	mov	r4, r0
 23fa760:	4608      	mov	r0, r1
 23fa762:	2100      	movs	r1, #0
 23fa764:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fa768:	4b04      	ldr	r3, [pc, #16]	; (23fa77c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fa76a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fa76c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fa76e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fa770:	4611      	mov	r1, r2
  _blocking = true;
 23fa772:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fa774:	f7ff f8c4 	bl	23f9900 <HAL_USB_USART_Init>
}
 23fa778:	4620      	mov	r0, r4
 23fa77a:	bd10      	pop	{r4, pc}
 23fa77c:	023ffa40 	.word	0x023ffa40

023fa780 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fa780:	2200      	movs	r2, #0
 23fa782:	7c00      	ldrb	r0, [r0, #16]
 23fa784:	f7ff b8ca 	b.w	23f991c <HAL_USB_USART_Begin>

023fa788 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fa788:	7c00      	ldrb	r0, [r0, #16]
 23fa78a:	f7ff b8d5 	b.w	23f9938 <HAL_USB_USART_End>

023fa78e <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fa78e:	7c00      	ldrb	r0, [r0, #16]
 23fa790:	f7ff b926 	b.w	23f99e0 <HAL_USB_USART_Is_Connected>

023fa794 <_Z19acquireSerialBufferv>:
{
 23fa794:	b510      	push	{r4, lr}
 23fa796:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fa798:	2214      	movs	r2, #20
 23fa79a:	2100      	movs	r1, #0
 23fa79c:	f003 f9b4 	bl	23fdb08 <memset>
}
 23fa7a0:	4620      	mov	r0, r4
 23fa7a2:	bd10      	pop	{r4, pc}

023fa7a4 <_Z16_fetch_usbserialv>:
{
 23fa7a4:	b510      	push	{r4, lr}
 23fa7a6:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fa7a8:	a803      	add	r0, sp, #12
 23fa7aa:	f7ff fff3 	bl	23fa794 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fa7ae:	4c0c      	ldr	r4, [pc, #48]	; (23fa7e0 <_Z16_fetch_usbserialv+0x3c>)
 23fa7b0:	e8d4 1f8f 	ldab	r1, [r4]
 23fa7b4:	f011 0101 	ands.w	r1, r1, #1
 23fa7b8:	d10f      	bne.n	23fa7da <_Z16_fetch_usbserialv+0x36>
 23fa7ba:	4620      	mov	r0, r4
 23fa7bc:	9101      	str	r1, [sp, #4]
 23fa7be:	f7fe f971 	bl	23f8aa4 <__cxa_guard_acquire>
 23fa7c2:	9901      	ldr	r1, [sp, #4]
 23fa7c4:	b148      	cbz	r0, 23fa7da <_Z16_fetch_usbserialv+0x36>
 23fa7c6:	aa03      	add	r2, sp, #12
 23fa7c8:	4806      	ldr	r0, [pc, #24]	; (23fa7e4 <_Z16_fetch_usbserialv+0x40>)
 23fa7ca:	f7ff ffc5 	bl	23fa758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fa7ce:	4620      	mov	r0, r4
 23fa7d0:	f7fe f96d 	bl	23f8aae <__cxa_guard_release>
 23fa7d4:	4804      	ldr	r0, [pc, #16]	; (23fa7e8 <_Z16_fetch_usbserialv+0x44>)
 23fa7d6:	f003 f94f 	bl	23fda78 <atexit>
	return _usbserial;
}
 23fa7da:	4802      	ldr	r0, [pc, #8]	; (23fa7e4 <_Z16_fetch_usbserialv+0x40>)
 23fa7dc:	b008      	add	sp, #32
 23fa7de:	bd10      	pop	{r4, pc}
 23fa7e0:	1007ae90 	.word	0x1007ae90
 23fa7e4:	1007ae94 	.word	0x1007ae94
 23fa7e8:	023fa6e1 	.word	0x023fa6e1

023fa7ec <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23fa7ec:	4770      	bx	lr

023fa7ee <_ZN9IPAddressD0Ev>:
 23fa7ee:	b510      	push	{r4, lr}
 23fa7f0:	4604      	mov	r4, r0
 23fa7f2:	2118      	movs	r1, #24
 23fa7f4:	f7fe f947 	bl	23f8a86 <_ZdlPvj>
 23fa7f8:	4620      	mov	r0, r4
 23fa7fa:	bd10      	pop	{r4, pc}

023fa7fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fa7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fa7fe:	7d03      	ldrb	r3, [r0, #20]
{
 23fa800:	460e      	mov	r6, r1
	if (address.v==6) {
 23fa802:	2b06      	cmp	r3, #6
 23fa804:	f04f 0400 	mov.w	r4, #0
{
 23fa808:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa80a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fa80e:	d012      	beq.n	23fa836 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fa810:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa814:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fa818:	220a      	movs	r2, #10
 23fa81a:	4630      	mov	r0, r6
 23fa81c:	f001 f913 	bl	23fba46 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fa820:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fa822:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fa824:	d019      	beq.n	23fa85a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fa826:	2c00      	cmp	r4, #0
 23fa828:	d0f4      	beq.n	23fa814 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fa82a:	212e      	movs	r1, #46	; 0x2e
 23fa82c:	4630      	mov	r0, r6
 23fa82e:	f001 f907 	bl	23fba40 <_ZN5Print5printEc>
 23fa832:	4404      	add	r4, r0
 23fa834:	e7ee      	b.n	23fa814 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa836:	232f      	movs	r3, #47	; 0x2f
 23fa838:	466a      	mov	r2, sp
 23fa83a:	4639      	mov	r1, r7
 23fa83c:	200a      	movs	r0, #10
		buf[0] = 0;
 23fa83e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa842:	f7ff f967 	bl	23f9b14 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fa846:	4668      	mov	r0, sp
 23fa848:	f7fe f8f4 	bl	23f8a34 <strlen>
 23fa84c:	6833      	ldr	r3, [r6, #0]
 23fa84e:	4602      	mov	r2, r0
 23fa850:	4669      	mov	r1, sp
 23fa852:	4630      	mov	r0, r6
 23fa854:	68db      	ldr	r3, [r3, #12]
 23fa856:	4798      	blx	r3
 23fa858:	4604      	mov	r4, r0
    }
    return n;
}
 23fa85a:	4620      	mov	r0, r4
 23fa85c:	b00d      	add	sp, #52	; 0x34
 23fa85e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa860 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fa860:	b510      	push	{r4, lr}
 23fa862:	4604      	mov	r4, r0
 23fa864:	4b04      	ldr	r3, [pc, #16]	; (23fa878 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fa866:	2211      	movs	r2, #17
 23fa868:	2100      	movs	r1, #0
 23fa86a:	f840 3b04 	str.w	r3, [r0], #4
 23fa86e:	f003 f94b 	bl	23fdb08 <memset>
}
 23fa872:	4620      	mov	r0, r4
 23fa874:	bd10      	pop	{r4, pc}
 23fa876:	bf00      	nop
 23fa878:	023ffa70 	.word	0x023ffa70

023fa87c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fa87c:	4603      	mov	r3, r0
 23fa87e:	4a07      	ldr	r2, [pc, #28]	; (23fa89c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fa880:	b510      	push	{r4, lr}
 23fa882:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fa886:	f101 0210 	add.w	r2, r1, #16
 23fa88a:	f851 4b04 	ldr.w	r4, [r1], #4
 23fa88e:	4291      	cmp	r1, r2
 23fa890:	f843 4b04 	str.w	r4, [r3], #4
 23fa894:	d1f9      	bne.n	23fa88a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fa896:	780a      	ldrb	r2, [r1, #0]
 23fa898:	701a      	strb	r2, [r3, #0]
}
 23fa89a:	bd10      	pop	{r4, pc}
 23fa89c:	023ffa70 	.word	0x023ffa70

023fa8a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fa8a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fa8a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fa8a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fa8aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fa8ae:	2304      	movs	r3, #4
 23fa8b0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fa8b4:	6041      	str	r1, [r0, #4]
 23fa8b6:	7503      	strb	r3, [r0, #20]
}
 23fa8b8:	bd10      	pop	{r4, pc}
	...

023fa8bc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fa8bc:	b507      	push	{r0, r1, r2, lr}
 23fa8be:	4b06      	ldr	r3, [pc, #24]	; (23fa8d8 <_ZN9IPAddressC1EPKh+0x1c>)
 23fa8c0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fa8c2:	78cb      	ldrb	r3, [r1, #3]
 23fa8c4:	9300      	str	r3, [sp, #0]
 23fa8c6:	788b      	ldrb	r3, [r1, #2]
 23fa8c8:	784a      	ldrb	r2, [r1, #1]
 23fa8ca:	7809      	ldrb	r1, [r1, #0]
 23fa8cc:	f7ff ffe8 	bl	23fa8a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fa8d0:	b003      	add	sp, #12
 23fa8d2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa8d6:	bf00      	nop
 23fa8d8:	023ffa70 	.word	0x023ffa70

023fa8dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fa8dc:	4b01      	ldr	r3, [pc, #4]	; (23fa8e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fa8de:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fa8e0:	4770      	bx	lr
 23fa8e2:	bf00      	nop
 23fa8e4:	1007a080 	.word	0x1007a080

023fa8e8 <serialEventRun>:
{
 23fa8e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fa8ea:	4b0f      	ldr	r3, [pc, #60]	; (23fa928 <serialEventRun+0x40>)
 23fa8ec:	b143      	cbz	r3, 23fa900 <serialEventRun+0x18>
 23fa8ee:	f7ff ff59 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23fa8f2:	6803      	ldr	r3, [r0, #0]
 23fa8f4:	691b      	ldr	r3, [r3, #16]
 23fa8f6:	4798      	blx	r3
 23fa8f8:	2800      	cmp	r0, #0
 23fa8fa:	dd01      	ble.n	23fa900 <serialEventRun+0x18>
        serialEvent();
 23fa8fc:	e000      	b.n	23fa900 <serialEventRun+0x18>
 23fa8fe:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fa900:	4b0a      	ldr	r3, [pc, #40]	; (23fa92c <serialEventRun+0x44>)
 23fa902:	b143      	cbz	r3, 23fa916 <serialEventRun+0x2e>
 23fa904:	f002 fd70 	bl	23fd3e8 <_Z22__fetch_global_Serial1v>
 23fa908:	6803      	ldr	r3, [r0, #0]
 23fa90a:	691b      	ldr	r3, [r3, #16]
 23fa90c:	4798      	blx	r3
 23fa90e:	2800      	cmp	r0, #0
 23fa910:	dd01      	ble.n	23fa916 <serialEventRun+0x2e>
        serialEvent1();
 23fa912:	e000      	b.n	23fa916 <serialEventRun+0x2e>
 23fa914:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fa916:	4b06      	ldr	r3, [pc, #24]	; (23fa930 <serialEventRun+0x48>)
 23fa918:	b10b      	cbz	r3, 23fa91e <serialEventRun+0x36>
 23fa91a:	f002 fdab 	bl	23fd474 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fa91e:	4b05      	ldr	r3, [pc, #20]	; (23fa934 <serialEventRun+0x4c>)
 23fa920:	b10b      	cbz	r3, 23fa926 <serialEventRun+0x3e>
 23fa922:	f002 fddd 	bl	23fd4e0 <_Z15serialEventRun3v>
}
 23fa926:	bd08      	pop	{r3, pc}
	...

023fa938 <_post_loop>:
{
 23fa938:	b508      	push	{r3, lr}
	serialEventRun();
 23fa93a:	f7ff ffd5 	bl	23fa8e8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fa93e:	f7ff f99f 	bl	23f9c80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fa942:	4b01      	ldr	r3, [pc, #4]	; (23fa948 <_post_loop+0x10>)
 23fa944:	6018      	str	r0, [r3, #0]
}
 23fa946:	bd08      	pop	{r3, pc}
 23fa948:	1007af20 	.word	0x1007af20

023fa94c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fa94c:	4805      	ldr	r0, [pc, #20]	; (23fa964 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fa94e:	4a06      	ldr	r2, [pc, #24]	; (23fa968 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fa950:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fa952:	1a12      	subs	r2, r2, r0
 23fa954:	4905      	ldr	r1, [pc, #20]	; (23fa96c <_Z33system_initialize_user_backup_ramv+0x20>)
 23fa956:	f003 f8b0 	bl	23fdaba <memcpy>
    __backup_sram_signature = signature;
 23fa95a:	4b05      	ldr	r3, [pc, #20]	; (23fa970 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fa95c:	4a05      	ldr	r2, [pc, #20]	; (23fa974 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fa95e:	601a      	str	r2, [r3, #0]
}
 23fa960:	bd08      	pop	{r3, pc}
 23fa962:	bf00      	nop
 23fa964:	1007b400 	.word	0x1007b400
 23fa968:	1007b404 	.word	0x1007b404
 23fa96c:	085ff10c 	.word	0x085ff10c
 23fa970:	1007b400 	.word	0x1007b400
 23fa974:	9a271c1e 	.word	0x9a271c1e

023fa978 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa978:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fa97a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa97c:	461a      	mov	r2, r3
 23fa97e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fa982:	9300      	str	r3, [sp, #0]
 23fa984:	f7ff fae8 	bl	23f9f58 <system_ctrl_set_result>
}
 23fa988:	b003      	add	sp, #12
 23fa98a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fa990 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fa990:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fa992:	8843      	ldrh	r3, [r0, #2]
 23fa994:	2b0a      	cmp	r3, #10
 23fa996:	d008      	beq.n	23fa9aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fa998:	2b50      	cmp	r3, #80	; 0x50
 23fa99a:	d10b      	bne.n	23fa9b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fa99c:	4b09      	ldr	r3, [pc, #36]	; (23fa9c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fa99e:	681b      	ldr	r3, [r3, #0]
 23fa9a0:	b14b      	cbz	r3, 23fa9b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fa9a2:	b003      	add	sp, #12
 23fa9a4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fa9a8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fa9aa:	f7ff ffe5 	bl	23fa978 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fa9ae:	b003      	add	sp, #12
 23fa9b0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa9b4:	2300      	movs	r3, #0
 23fa9b6:	461a      	mov	r2, r3
 23fa9b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fa9bc:	9300      	str	r3, [sp, #0]
 23fa9be:	f7ff facb 	bl	23f9f58 <system_ctrl_set_result>
}
 23fa9c2:	e7f4      	b.n	23fa9ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fa9c4:	1007aeac 	.word	0x1007aeac

023fa9c8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fa9c8:	2100      	movs	r1, #0
{
 23fa9ca:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fa9cc:	4811      	ldr	r0, [pc, #68]	; (23faa14 <module_user_init_hook+0x4c>)
 23fa9ce:	f7ff fb33 	bl	23fa038 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fa9d2:	4b11      	ldr	r3, [pc, #68]	; (23faa18 <module_user_init_hook+0x50>)
 23fa9d4:	681a      	ldr	r2, [r3, #0]
 23fa9d6:	4b11      	ldr	r3, [pc, #68]	; (23faa1c <module_user_init_hook+0x54>)
 23fa9d8:	429a      	cmp	r2, r3
 23fa9da:	bf0c      	ite	eq
 23fa9dc:	2201      	moveq	r2, #1
 23fa9de:	2200      	movne	r2, #0
 23fa9e0:	4b0f      	ldr	r3, [pc, #60]	; (23faa20 <module_user_init_hook+0x58>)
 23fa9e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fa9e4:	d001      	beq.n	23fa9ea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fa9e6:	f7ff ffb1 	bl	23fa94c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fa9ea:	f7ff f92d 	bl	23f9c48 <HAL_RNG_GetRandomNumber>
 23fa9ee:	4604      	mov	r4, r0
    srand(seed);
 23fa9f0:	f003 f892 	bl	23fdb18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fa9f4:	4b0b      	ldr	r3, [pc, #44]	; (23faa24 <module_user_init_hook+0x5c>)
 23fa9f6:	b113      	cbz	r3, 23fa9fe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fa9f8:	4620      	mov	r0, r4
 23fa9fa:	e000      	b.n	23fa9fe <module_user_init_hook+0x36>
 23fa9fc:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fa9fe:	2100      	movs	r1, #0
 23faa00:	4808      	ldr	r0, [pc, #32]	; (23faa24 <module_user_init_hook+0x5c>)
 23faa02:	f7ff f9bb 	bl	23f9d7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23faa06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23faa0a:	2100      	movs	r1, #0
 23faa0c:	4806      	ldr	r0, [pc, #24]	; (23faa28 <module_user_init_hook+0x60>)
 23faa0e:	f7ff ba95 	b.w	23f9f3c <system_ctrl_set_app_request_handler>
 23faa12:	bf00      	nop
 23faa14:	023fa8dd 	.word	0x023fa8dd
 23faa18:	1007b400 	.word	0x1007b400
 23faa1c:	9a271c1e 	.word	0x9a271c1e
 23faa20:	1007aea8 	.word	0x1007aea8
 23faa24:	00000000 	.word	0x00000000
 23faa28:	023fa991 	.word	0x023fa991

023faa2c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23faa2c:	2200      	movs	r2, #0
 23faa2e:	4b01      	ldr	r3, [pc, #4]	; (23faa34 <_GLOBAL__sub_I_RGB+0x8>)
 23faa30:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23faa32:	4770      	bx	lr
 23faa34:	1007aeb0 	.word	0x1007aeb0

023faa38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23faa38:	2100      	movs	r1, #0
 23faa3a:	f7ff ba63 	b.w	23f9f04 <system_delay_ms>
	...

023faa40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23faa40:	4b02      	ldr	r3, [pc, #8]	; (23faa4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23faa42:	681a      	ldr	r2, [r3, #0]
 23faa44:	4b02      	ldr	r3, [pc, #8]	; (23faa50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23faa46:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23faa48:	4770      	bx	lr
 23faa4a:	bf00      	nop
 23faa4c:	1007a074 	.word	0x1007a074
 23faa50:	1007aec0 	.word	0x1007aec0

023faa54 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23faa54:	6880      	ldr	r0, [r0, #8]
 23faa56:	6803      	ldr	r3, [r0, #0]
 23faa58:	68db      	ldr	r3, [r3, #12]
 23faa5a:	4718      	bx	r3

023faa5c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23faa5c:	4770      	bx	lr

023faa5e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23faa5e:	4608      	mov	r0, r1
 23faa60:	b111      	cbz	r1, 23faa68 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23faa62:	680b      	ldr	r3, [r1, #0]
 23faa64:	685b      	ldr	r3, [r3, #4]
 23faa66:	4718      	bx	r3
}
 23faa68:	4770      	bx	lr

023faa6a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23faa6a:	4770      	bx	lr

023faa6c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23faa6c:	4770      	bx	lr

023faa6e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23faa6e:	4770      	bx	lr

023faa70 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23faa70:	4770      	bx	lr

023faa72 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23faa72:	b538      	push	{r3, r4, r5, lr}
 23faa74:	4604      	mov	r4, r0
 23faa76:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23faa78:	6800      	ldr	r0, [r0, #0]
 23faa7a:	212e      	movs	r1, #46	; 0x2e
 23faa7c:	f003 f887 	bl	23fdb8e <strchrnul>
    size = s - category;
 23faa80:	6823      	ldr	r3, [r4, #0]
 23faa82:	1ac3      	subs	r3, r0, r3
 23faa84:	602b      	str	r3, [r5, #0]
    if (size) {
 23faa86:	b123      	cbz	r3, 23faa92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23faa88:	7803      	ldrb	r3, [r0, #0]
 23faa8a:	b103      	cbz	r3, 23faa8e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23faa8c:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23faa8e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23faa90:	6020      	str	r0, [r4, #0]
}
 23faa92:	4618      	mov	r0, r3
 23faa94:	bd38      	pop	{r3, r4, r5, pc}

023faa96 <_ZN5spark16JSONStreamWriterD0Ev>:
 23faa96:	b510      	push	{r4, lr}
 23faa98:	4604      	mov	r4, r0
 23faa9a:	210c      	movs	r1, #12
 23faa9c:	f7fd fff3 	bl	23f8a86 <_ZdlPvj>
 23faaa0:	4620      	mov	r0, r4
 23faaa2:	bd10      	pop	{r4, pc}

023faaa4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23faaa4:	b510      	push	{r4, lr}
 23faaa6:	4604      	mov	r4, r0
 23faaa8:	2104      	movs	r1, #4
 23faaaa:	f7fd ffec 	bl	23f8a86 <_ZdlPvj>
 23faaae:	4620      	mov	r0, r4
 23faab0:	bd10      	pop	{r4, pc}

023faab2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23faab2:	b510      	push	{r4, lr}
 23faab4:	4604      	mov	r4, r0
 23faab6:	2104      	movs	r1, #4
 23faab8:	f7fd ffe5 	bl	23f8a86 <_ZdlPvj>
 23faabc:	4620      	mov	r0, r4
 23faabe:	bd10      	pop	{r4, pc}

023faac0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23faac0:	f7ff b860 	b.w	23f9b84 <os_mutex_recursive_lock>

023faac4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23faac4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23faac6:	f7fd ffab 	bl	23f8a20 <strcmp>
}
 23faaca:	fab0 f080 	clz	r0, r0
 23faace:	0940      	lsrs	r0, r0, #5
 23faad0:	bd08      	pop	{r3, pc}

023faad2 <__tcf_1>:
 23faad2:	4770      	bx	lr

023faad4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23faad4:	b510      	push	{r4, lr}
 23faad6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23faad8:	f7ff fe64 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23faadc:	4284      	cmp	r4, r0
 23faade:	d105      	bne.n	23faaec <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23faae0:	f7ff fe60 	bl	23fa7a4 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23faae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23faae8:	f7ff be4e 	b.w	23fa788 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23faaec:	f002 fc7c 	bl	23fd3e8 <_Z22__fetch_global_Serial1v>
 23faaf0:	4284      	cmp	r4, r0
 23faaf2:	d105      	bne.n	23fab00 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23faaf4:	f002 fc78 	bl	23fd3e8 <_Z22__fetch_global_Serial1v>
}
 23faaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23faafc:	f7ff bbf3 	b.w	23fa2e6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fab00:	b12c      	cbz	r4, 23fab0e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fab02:	6823      	ldr	r3, [r4, #0]
 23fab04:	4620      	mov	r0, r4
}
 23fab06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fab0a:	685b      	ldr	r3, [r3, #4]
 23fab0c:	4718      	bx	r3
 23fab0e:	bd10      	pop	{r4, pc}

023fab10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fab10:	680b      	ldr	r3, [r1, #0]
 23fab12:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fab14:	684b      	ldr	r3, [r1, #4]
 23fab16:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fab18:	b113      	cbz	r3, 23fab20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fab1a:	685a      	ldr	r2, [r3, #4]
 23fab1c:	3201      	adds	r2, #1
 23fab1e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fab20:	4770      	bx	lr

023fab22 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fab22:	b513      	push	{r0, r1, r4, lr}
 23fab24:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fab26:	4608      	mov	r0, r1
 23fab28:	9101      	str	r1, [sp, #4]
 23fab2a:	f7fd ff83 	bl	23f8a34 <strlen>
 23fab2e:	4602      	mov	r2, r0
 23fab30:	4620      	mov	r0, r4
 23fab32:	9901      	ldr	r1, [sp, #4]
}
 23fab34:	b002      	add	sp, #8
 23fab36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fab3a:	f7ff bdb7 	b.w	23fa6ac <_ZN5spark10JSONWriter5valueEPKcj>

023fab3e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fab3e:	b513      	push	{r0, r1, r4, lr}
 23fab40:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fab42:	4608      	mov	r0, r1
 23fab44:	9101      	str	r1, [sp, #4]
 23fab46:	f7fd ff75 	bl	23f8a34 <strlen>
 23fab4a:	4602      	mov	r2, r0
 23fab4c:	4620      	mov	r0, r4
 23fab4e:	6823      	ldr	r3, [r4, #0]
 23fab50:	9901      	ldr	r1, [sp, #4]
 23fab52:	68db      	ldr	r3, [r3, #12]
}
 23fab54:	b002      	add	sp, #8
 23fab56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fab5a:	4718      	bx	r3

023fab5c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fab5c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fab5e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fab60:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fab64:	2201      	movs	r2, #1
 23fab66:	68db      	ldr	r3, [r3, #12]
 23fab68:	f10d 0107 	add.w	r1, sp, #7
 23fab6c:	4798      	blx	r3
}
 23fab6e:	b003      	add	sp, #12
 23fab70:	f85d fb04 	ldr.w	pc, [sp], #4

023fab74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fab74:	680a      	ldr	r2, [r1, #0]
 23fab76:	b510      	push	{r4, lr}
 23fab78:	6002      	str	r2, [r0, #0]
 23fab7a:	684a      	ldr	r2, [r1, #4]
 23fab7c:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23fab7e:	2200      	movs	r2, #0
 23fab80:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fab84:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fab86:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fab88:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fab8a:	6084      	str	r4, [r0, #8]
 23fab8c:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fab8e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fab90:	60c4      	str	r4, [r0, #12]
 23fab92:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fab94:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fab96:	6104      	str	r4, [r0, #16]
 23fab98:	bd10      	pop	{r4, pc}
	...

023fab9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fab9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23faba0:	f04f 0a14 	mov.w	sl, #20
 23faba4:	e9d0 8400 	ldrd	r8, r4, [r0]
 23faba8:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fabaa:	4645      	mov	r5, r8
 23fabac:	fb0a f404 	mul.w	r4, sl, r4
 23fabb0:	9300      	str	r3, [sp, #0]
 23fabb2:	4b17      	ldr	r3, [pc, #92]	; (23fac10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fabb4:	10a4      	asrs	r4, r4, #2
 23fabb6:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fabb8:	2c00      	cmp	r4, #0
 23fabba:	dd21      	ble.n	23fac00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fabbc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fabbe:	fb0a f006 	mul.w	r0, sl, r6
 23fabc2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fabc6:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fabca:	463a      	mov	r2, r7
 23fabcc:	455f      	cmp	r7, fp
 23fabce:	bf28      	it	cs
 23fabd0:	465a      	movcs	r2, fp
 23fabd2:	5828      	ldr	r0, [r5, r0]
 23fabd4:	9101      	str	r1, [sp, #4]
 23fabd6:	f002 ffec 	bl	23fdbb2 <strncmp>
                if (cmp == 0) {
 23fabda:	2800      	cmp	r0, #0
 23fabdc:	f04f 0301 	mov.w	r3, #1
 23fabe0:	9901      	ldr	r1, [sp, #4]
 23fabe2:	d10b      	bne.n	23fabfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fabe4:	455f      	cmp	r7, fp
 23fabe6:	d103      	bne.n	23fabf0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fabe8:	9a00      	ldr	r2, [sp, #0]
 23fabea:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fabec:	4634      	mov	r4, r6
 23fabee:	e7e3      	b.n	23fabb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fabf0:	d9fc      	bls.n	23fabec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fabf2:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fabf4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fabf8:	3e01      	subs	r6, #1
 23fabfa:	e7f7      	b.n	23fabec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fabfc:	dbf9      	blt.n	23fabf2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fabfe:	e7f5      	b.n	23fabec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fac00:	eba5 0508 	sub.w	r5, r5, r8
}
 23fac04:	4802      	ldr	r0, [pc, #8]	; (23fac10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fac06:	10ad      	asrs	r5, r5, #2
 23fac08:	4368      	muls	r0, r5
 23fac0a:	b003      	add	sp, #12
 23fac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fac10:	cccccccd 	.word	0xcccccccd

023fac14 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fac14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fac16:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fac18:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fac1a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fac1c:	b303      	cbz	r3, 23fac60 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fac1e:	b1f9      	cbz	r1, 23fac60 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fac20:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fac22:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fac26:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fac28:	a903      	add	r1, sp, #12
 23fac2a:	a801      	add	r0, sp, #4
 23fac2c:	f7ff ff21 	bl	23faa72 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fac30:	4601      	mov	r1, r0
 23fac32:	b1a8      	cbz	r0, 23fac60 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fac34:	f10d 030b 	add.w	r3, sp, #11
 23fac38:	4620      	mov	r0, r4
 23fac3a:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fac3c:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fac40:	f7ff ffac 	bl	23fab9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fac44:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fac48:	b153      	cbz	r3, 23fac60 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fac4a:	6823      	ldr	r3, [r4, #0]
 23fac4c:	2414      	movs	r4, #20
 23fac4e:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fac52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fac56:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fac58:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fac5a:	bfa8      	it	ge
 23fac5c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fac5e:	e7e3      	b.n	23fac28 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fac60:	4628      	mov	r0, r5
 23fac62:	b004      	add	sp, #16
 23fac64:	bd70      	pop	{r4, r5, r6, pc}

023fac66 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fac66:	b40e      	push	{r1, r2, r3}
 23fac68:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fac6a:	b08c      	sub	sp, #48	; 0x30
 23fac6c:	af00      	add	r7, sp, #0
 23fac6e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fac72:	f855 2b04 	ldr.w	r2, [r5], #4
 23fac76:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac78:	462b      	mov	r3, r5
 23fac7a:	2120      	movs	r1, #32
 23fac7c:	f107 0010 	add.w	r0, r7, #16
 23fac80:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fac82:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac84:	f7ff f9a0 	bl	23f9fc8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fac88:	281f      	cmp	r0, #31
 23fac8a:	687a      	ldr	r2, [r7, #4]
 23fac8c:	d91a      	bls.n	23facc4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fac8e:	f100 0308 	add.w	r3, r0, #8
 23fac92:	f023 0307 	bic.w	r3, r3, #7
        }
 23fac96:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fac98:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac9c:	1c41      	adds	r1, r0, #1
 23fac9e:	462b      	mov	r3, r5
 23faca0:	4668      	mov	r0, sp
        va_start(args, fmt);
 23faca2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23faca4:	f7ff f990 	bl	23f9fc8 <vsnprintf>
        if (n > 0) {
 23faca8:	1e02      	subs	r2, r0, #0
 23facaa:	dd04      	ble.n	23facb6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23facac:	6823      	ldr	r3, [r4, #0]
 23facae:	4669      	mov	r1, sp
 23facb0:	4620      	mov	r0, r4
 23facb2:	68db      	ldr	r3, [r3, #12]
 23facb4:	4798      	blx	r3
 23facb6:	46b5      	mov	sp, r6
}
 23facb8:	3730      	adds	r7, #48	; 0x30
 23facba:	46bd      	mov	sp, r7
 23facbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23facc0:	b003      	add	sp, #12
 23facc2:	4770      	bx	lr
    } else if (n > 0) {
 23facc4:	2800      	cmp	r0, #0
 23facc6:	d0f7      	beq.n	23facb8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23facc8:	6823      	ldr	r3, [r4, #0]
 23facca:	4602      	mov	r2, r0
 23faccc:	68db      	ldr	r3, [r3, #12]
 23facce:	4620      	mov	r0, r4
 23facd0:	f107 0110 	add.w	r1, r7, #16
 23facd4:	4798      	blx	r3
}
 23facd6:	e7ef      	b.n	23facb8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023facd8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23facd8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23facda:	4c08      	ldr	r4, [pc, #32]	; (23facfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23facdc:	e8d4 3f8f 	ldab	r3, [r4]
 23face0:	07db      	lsls	r3, r3, #31
 23face2:	d409      	bmi.n	23facf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23face4:	4620      	mov	r0, r4
 23face6:	f7fd fedd 	bl	23f8aa4 <__cxa_guard_acquire>
 23facea:	b128      	cbz	r0, 23facf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23facec:	4620      	mov	r0, r4
 23facee:	f7fd fede 	bl	23f8aae <__cxa_guard_release>
 23facf2:	4803      	ldr	r0, [pc, #12]	; (23fad00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23facf4:	f002 fec0 	bl	23fda78 <atexit>
}
 23facf8:	4802      	ldr	r0, [pc, #8]	; (23fad04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23facfa:	bd10      	pop	{r4, pc}
 23facfc:	1007aec8 	.word	0x1007aec8
 23fad00:	023faa6b 	.word	0x023faa6b
 23fad04:	1007a078 	.word	0x1007a078

023fad08 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fad08:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fad0a:	4c08      	ldr	r4, [pc, #32]	; (23fad2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fad0c:	e8d4 3f8f 	ldab	r3, [r4]
 23fad10:	07db      	lsls	r3, r3, #31
 23fad12:	d409      	bmi.n	23fad28 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fad14:	4620      	mov	r0, r4
 23fad16:	f7fd fec5 	bl	23f8aa4 <__cxa_guard_acquire>
 23fad1a:	b128      	cbz	r0, 23fad28 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fad1c:	4620      	mov	r0, r4
 23fad1e:	f7fd fec6 	bl	23f8aae <__cxa_guard_release>
 23fad22:	4803      	ldr	r0, [pc, #12]	; (23fad30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fad24:	f002 fea8 	bl	23fda78 <atexit>
    return &factory;
}
 23fad28:	4802      	ldr	r0, [pc, #8]	; (23fad34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fad2a:	bd10      	pop	{r4, pc}
 23fad2c:	1007aecc 	.word	0x1007aecc
 23fad30:	023faad3 	.word	0x023faad3
 23fad34:	1007a07c 	.word	0x1007a07c

023fad38 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fad38:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fad3a:	2500      	movs	r5, #0
 23fad3c:	4604      	mov	r4, r0
 23fad3e:	e9c0 5500 	strd	r5, r5, [r0]
 23fad42:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fad46:	6085      	str	r5, [r0, #8]
 23fad48:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fad4a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fad4e:	f7fe fefd 	bl	23f9b4c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fad52:	f7ff ffc1 	bl	23facd8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fad56:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fad58:	f7ff ffd6 	bl	23fad08 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fad5c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fad5e:	6220      	str	r0, [r4, #32]
}
 23fad60:	4620      	mov	r0, r4
 23fad62:	bd38      	pop	{r3, r4, r5, pc}

023fad64 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fad64:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fad66:	4c0a      	ldr	r4, [pc, #40]	; (23fad90 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fad68:	e8d4 3f8f 	ldab	r3, [r4]
 23fad6c:	07db      	lsls	r3, r3, #31
 23fad6e:	d40c      	bmi.n	23fad8a <_ZN5spark10LogManager8instanceEv+0x26>
 23fad70:	4620      	mov	r0, r4
 23fad72:	f7fd fe97 	bl	23f8aa4 <__cxa_guard_acquire>
 23fad76:	b140      	cbz	r0, 23fad8a <_ZN5spark10LogManager8instanceEv+0x26>
 23fad78:	4806      	ldr	r0, [pc, #24]	; (23fad94 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fad7a:	f7ff ffdd 	bl	23fad38 <_ZN5spark10LogManagerC1Ev>
 23fad7e:	4620      	mov	r0, r4
 23fad80:	f7fd fe95 	bl	23f8aae <__cxa_guard_release>
 23fad84:	4804      	ldr	r0, [pc, #16]	; (23fad98 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fad86:	f002 fe77 	bl	23fda78 <atexit>
    return &mgr;
}
 23fad8a:	4802      	ldr	r0, [pc, #8]	; (23fad94 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fad8c:	bd10      	pop	{r4, pc}
 23fad8e:	bf00      	nop
 23fad90:	1007aec4 	.word	0x1007aec4
 23fad94:	1007aed4 	.word	0x1007aed4
 23fad98:	023fb2d9 	.word	0x023fb2d9

023fad9c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fad9c:	2300      	movs	r3, #0
 23fad9e:	4a02      	ldr	r2, [pc, #8]	; (23fada8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fada0:	4902      	ldr	r1, [pc, #8]	; (23fadac <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fada2:	4803      	ldr	r0, [pc, #12]	; (23fadb0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fada4:	f7fe bfce 	b.w	23f9d44 <log_set_callbacks>
 23fada8:	023fb0c1 	.word	0x023fb0c1
 23fadac:	023fb04d 	.word	0x023fb04d
 23fadb0:	023fafcd 	.word	0x023fafcd

023fadb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fadb4:	2300      	movs	r3, #0
 23fadb6:	461a      	mov	r2, r3
 23fadb8:	4619      	mov	r1, r3
 23fadba:	4618      	mov	r0, r3
 23fadbc:	f7fe bfc2 	b.w	23f9d44 <log_set_callbacks>

023fadc0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fadc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fadc2:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fadc4:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fadc6:	4668      	mov	r0, sp
 23fadc8:	f7ff fea2 	bl	23fab10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fadcc:	466a      	mov	r2, sp
 23fadce:	4629      	mov	r1, r5
 23fadd0:	4620      	mov	r0, r4
 23fadd2:	f7ff fb8b 	bl	23fa4ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fadd6:	a801      	add	r0, sp, #4
 23fadd8:	f7ff fc78 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23faddc:	4620      	mov	r0, r4
 23fadde:	b003      	add	sp, #12
 23fade0:	bd30      	pop	{r4, r5, pc}

023fade2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fade2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fade4:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fade6:	68cd      	ldr	r5, [r1, #12]
 23fade8:	4668      	mov	r0, sp
 23fadea:	f7ff fe91 	bl	23fab10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fadee:	466a      	mov	r2, sp
 23fadf0:	4629      	mov	r1, r5
 23fadf2:	4620      	mov	r0, r4
 23fadf4:	f7ff fb56 	bl	23fa4a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fadf8:	a801      	add	r0, sp, #4
 23fadfa:	f7ff fc67 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fadfe:	4620      	mov	r0, r4
 23fae00:	b003      	add	sp, #12
 23fae02:	bd30      	pop	{r4, r5, pc}

023fae04 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fae04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fae06:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fae08:	690d      	ldr	r5, [r1, #16]
 23fae0a:	4668      	mov	r0, sp
 23fae0c:	f7ff fe80 	bl	23fab10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fae10:	466a      	mov	r2, sp
 23fae12:	4629      	mov	r1, r5
 23fae14:	4620      	mov	r0, r4
 23fae16:	f7ff faed 	bl	23fa3f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fae1a:	a801      	add	r0, sp, #4
 23fae1c:	f7ff fc56 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fae20:	4620      	mov	r0, r4
 23fae22:	b003      	add	sp, #12
 23fae24:	bd30      	pop	{r4, r5, pc}
	...

023fae28 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fae28:	b570      	push	{r4, r5, r6, lr}
 23fae2a:	b08a      	sub	sp, #40	; 0x28
 23fae2c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fae2e:	4601      	mov	r1, r0
 23fae30:	a804      	add	r0, sp, #16
 23fae32:	f7ff ffc5 	bl	23fadc0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fae36:	4e14      	ldr	r6, [pc, #80]	; (23fae88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fae38:	a804      	add	r0, sp, #16
 23fae3a:	f7ff fb6f 	bl	23fa51c <_ZN5spark18JSONObjectIterator4nextEv>
 23fae3e:	b1e8      	cbz	r0, 23fae7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fae40:	4668      	mov	r0, sp
 23fae42:	a904      	add	r1, sp, #16
 23fae44:	f7ff ffcd 	bl	23fade2 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fae48:	4631      	mov	r1, r6
 23fae4a:	9802      	ldr	r0, [sp, #8]
 23fae4c:	f7ff fe3a 	bl	23faac4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fae50:	4604      	mov	r4, r0
 23fae52:	b110      	cbz	r0, 23fae5a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fae54:	1e2c      	subs	r4, r5, #0
 23fae56:	bf18      	it	ne
 23fae58:	2401      	movne	r4, #1
 23fae5a:	a801      	add	r0, sp, #4
 23fae5c:	f7ff fc36 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fae60:	2c00      	cmp	r4, #0
 23fae62:	d0e9      	beq.n	23fae38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fae64:	4668      	mov	r0, sp
 23fae66:	a904      	add	r1, sp, #16
 23fae68:	f7ff ffcc 	bl	23fae04 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fae6c:	4668      	mov	r0, sp
 23fae6e:	f7ff faf7 	bl	23fa460 <_ZNK5spark9JSONValue5toIntEv>
 23fae72:	6028      	str	r0, [r5, #0]
 23fae74:	a801      	add	r0, sp, #4
 23fae76:	f7ff fc29 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fae7a:	e7dd      	b.n	23fae38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fae7c:	a805      	add	r0, sp, #20
 23fae7e:	f7ff fc25 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fae82:	b00a      	add	sp, #40	; 0x28
 23fae84:	bd70      	pop	{r4, r5, r6, pc}
 23fae86:	bf00      	nop
 23fae88:	023ffa98 	.word	0x023ffa98

023fae8c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fae8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fae8e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fae90:	4913      	ldr	r1, [pc, #76]	; (23faee0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fae92:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fae94:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fae96:	f7fd fdc3 	bl	23f8a20 <strcmp>
 23fae9a:	b950      	cbnz	r0, 23faeb2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fae9c:	f7ff fc82 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23faea0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23faea4:	f7ff fc6c 	bl	23fa780 <_ZN9USBSerial5beginEl>
}
 23faea8:	b003      	add	sp, #12
 23faeaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23faeae:	f7ff bc79 	b.w	23fa7a4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23faeb2:	4620      	mov	r0, r4
 23faeb4:	490b      	ldr	r1, [pc, #44]	; (23faee4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23faeb6:	f7fd fdb3 	bl	23f8a20 <strcmp>
 23faeba:	b978      	cbnz	r0, 23faedc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23faebc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23faec0:	a901      	add	r1, sp, #4
 23faec2:	4628      	mov	r0, r5
        int baud = 9600;
 23faec4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23faec6:	f7ff ffaf 	bl	23fae28 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23faeca:	f002 fa8d 	bl	23fd3e8 <_Z22__fetch_global_Serial1v>
 23faece:	9901      	ldr	r1, [sp, #4]
 23faed0:	f7ff fa06 	bl	23fa2e0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23faed4:	f002 fa88 	bl	23fd3e8 <_Z22__fetch_global_Serial1v>
}
 23faed8:	b003      	add	sp, #12
 23faeda:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23faedc:	2000      	movs	r0, #0
 23faede:	e7fb      	b.n	23faed8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23faee0:	023ffa9d 	.word	0x023ffa9d
 23faee4:	023ffaa4 	.word	0x023ffaa4

023faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faee8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23faeea:	2614      	movs	r6, #20
 23faeec:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faef0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faef2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23faef6:	42ae      	cmp	r6, r5
 23faef8:	d005      	beq.n	23faf06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23faefa:	f105 0008 	add.w	r0, r5, #8
 23faefe:	f7ff fff3 	bl	23faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23faf02:	3514      	adds	r5, #20
 23faf04:	e7f7      	b.n	23faef6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23faf06:	6820      	ldr	r0, [r4, #0]
 23faf08:	f7ff f842 	bl	23f9f90 <free>
}
 23faf0c:	4620      	mov	r0, r4
 23faf0e:	bd70      	pop	{r4, r5, r6, pc}

023faf10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faf10:	b570      	push	{r4, r5, r6, lr}
 23faf12:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faf14:	e9d0 5300 	ldrd	r5, r3, [r0]
 23faf18:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23faf1c:	42ae      	cmp	r6, r5
 23faf1e:	d004      	beq.n	23faf2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23faf20:	4628      	mov	r0, r5
 23faf22:	f002 f8f9 	bl	23fd118 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23faf26:	3510      	adds	r5, #16
 23faf28:	e7f8      	b.n	23faf1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23faf2a:	6820      	ldr	r0, [r4, #0]
 23faf2c:	f7ff f830 	bl	23f9f90 <free>
}
 23faf30:	4620      	mov	r0, r4
 23faf32:	bd70      	pop	{r4, r5, r6, pc}

023faf34 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23faf34:	b510      	push	{r4, lr}
 23faf36:	4604      	mov	r4, r0
 23faf38:	300c      	adds	r0, #12
 23faf3a:	f7ff ffd5 	bl	23faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23faf3e:	4620      	mov	r0, r4
 23faf40:	f7ff ffe6 	bl	23faf10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23faf44:	4620      	mov	r0, r4
 23faf46:	bd10      	pop	{r4, pc}

023faf48 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23faf48:	b510      	push	{r4, lr}
 23faf4a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23faf4c:	4b03      	ldr	r3, [pc, #12]	; (23faf5c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23faf4e:	f840 3b04 	str.w	r3, [r0], #4
 23faf52:	f7ff ffef 	bl	23faf34 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23faf56:	4620      	mov	r0, r4
 23faf58:	bd10      	pop	{r4, pc}
 23faf5a:	bf00      	nop
 23faf5c:	023fdff8 	.word	0x023fdff8

023faf60 <_ZN5spark16StreamLogHandlerD0Ev>:
 23faf60:	b510      	push	{r4, lr}
 23faf62:	4604      	mov	r4, r0
 23faf64:	f7ff fff0 	bl	23faf48 <_ZN5spark16StreamLogHandlerD1Ev>
 23faf68:	4620      	mov	r0, r4
 23faf6a:	2124      	movs	r1, #36	; 0x24
 23faf6c:	f7fd fd8b 	bl	23f8a86 <_ZdlPvj>
 23faf70:	4620      	mov	r0, r4
 23faf72:	bd10      	pop	{r4, pc}

023faf74 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23faf74:	b510      	push	{r4, lr}
 23faf76:	4604      	mov	r4, r0
 23faf78:	4b02      	ldr	r3, [pc, #8]	; (23faf84 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23faf7a:	6003      	str	r3, [r0, #0]
 23faf7c:	f7ff ffe4 	bl	23faf48 <_ZN5spark16StreamLogHandlerD1Ev>
 23faf80:	4620      	mov	r0, r4
 23faf82:	bd10      	pop	{r4, pc}
 23faf84:	023ffb40 	.word	0x023ffb40

023faf88 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23faf88:	b510      	push	{r4, lr}
 23faf8a:	4604      	mov	r4, r0
 23faf8c:	f7ff fff2 	bl	23faf74 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23faf90:	4620      	mov	r0, r4
 23faf92:	2124      	movs	r1, #36	; 0x24
 23faf94:	f7fd fd77 	bl	23f8a86 <_ZdlPvj>
 23faf98:	4620      	mov	r0, r4
 23faf9a:	bd10      	pop	{r4, pc}

023faf9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23faf9c:	2200      	movs	r2, #0
 23faf9e:	e9c0 2200 	strd	r2, r2, [r0]
 23fafa2:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fafa4:	b510      	push	{r4, lr}
 23fafa6:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fafa8:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fafaa:	6004      	str	r4, [r0, #0]
 23fafac:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fafae:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fafb0:	6044      	str	r4, [r0, #4]
 23fafb2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fafb4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fafb6:	6084      	str	r4, [r0, #8]
}
 23fafb8:	bd10      	pop	{r4, pc}

023fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fafba:	b510      	push	{r4, lr}
 23fafbc:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fafbe:	6803      	ldr	r3, [r0, #0]
 23fafc0:	6818      	ldr	r0, [r3, #0]
 23fafc2:	f7fe fded 	bl	23f9ba0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fafc6:	4620      	mov	r0, r4
 23fafc8:	bd10      	pop	{r4, pc}
	...

023fafcc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fafcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fafd0:	b087      	sub	sp, #28
 23fafd2:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fafd4:	4b1c      	ldr	r3, [pc, #112]	; (23fb048 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fafd6:	4680      	mov	r8, r0
 23fafd8:	685b      	ldr	r3, [r3, #4]
 23fafda:	4689      	mov	r9, r1
 23fafdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fafe0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fafe2:	b96b      	cbnz	r3, 23fb000 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fafe4:	f7ff febe 	bl	23fad64 <_ZN5spark10LogManager8instanceEv>
 23fafe8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fafea:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fafee:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23faff0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23faff2:	f7ff fd65 	bl	23faac0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23faff6:	7b23      	ldrb	r3, [r4, #12]
 23faff8:	b12b      	cbz	r3, 23fb006 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23faffa:	a805      	add	r0, sp, #20
 23faffc:	f7ff ffdd 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fb000:	b007      	add	sp, #28
 23fb002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fb006:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fb008:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fb00c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fb00e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fb012:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fb016:	45aa      	cmp	sl, r5
 23fb018:	d012      	beq.n	23fb040 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fb01a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fb01e:	4631      	mov	r1, r6
 23fb020:	1d38      	adds	r0, r7, #4
 23fb022:	f7ff fdf7 	bl	23fac14 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fb026:	4581      	cmp	r9, r0
 23fb028:	d3f5      	bcc.n	23fb016 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fb02a:	9a03      	ldr	r2, [sp, #12]
 23fb02c:	683b      	ldr	r3, [r7, #0]
 23fb02e:	9200      	str	r2, [sp, #0]
 23fb030:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fb034:	464a      	mov	r2, r9
 23fb036:	4633      	mov	r3, r6
 23fb038:	4641      	mov	r1, r8
 23fb03a:	4638      	mov	r0, r7
 23fb03c:	47d8      	blx	fp
 23fb03e:	e7ea      	b.n	23fb016 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fb040:	2300      	movs	r3, #0
 23fb042:	7323      	strb	r3, [r4, #12]
 23fb044:	e7d9      	b.n	23faffa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fb046:	bf00      	nop
 23fb048:	e000ed00 	.word	0xe000ed00

023fb04c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fb04c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb050:	469b      	mov	fp, r3
 23fb052:	4b1a      	ldr	r3, [pc, #104]	; (23fb0bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fb054:	4680      	mov	r8, r0
 23fb056:	685b      	ldr	r3, [r3, #4]
 23fb058:	4689      	mov	r9, r1
 23fb05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fb05e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fb060:	b96b      	cbnz	r3, 23fb07e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fb062:	f7ff fe7f 	bl	23fad64 <_ZN5spark10LogManager8instanceEv>
 23fb066:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fb068:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb06c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb06e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fb070:	f7ff fd26 	bl	23faac0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fb074:	7b23      	ldrb	r3, [r4, #12]
 23fb076:	b12b      	cbz	r3, 23fb084 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fb078:	a801      	add	r0, sp, #4
 23fb07a:	f7ff ff9e 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fb07e:	b003      	add	sp, #12
 23fb080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fb084:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fb086:	b2f6      	uxtb	r6, r6
 23fb088:	7323      	strb	r3, [r4, #12]
 23fb08a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fb08e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fb092:	4555      	cmp	r5, sl
 23fb094:	d00e      	beq.n	23fb0b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fb096:	f855 7b04 	ldr.w	r7, [r5], #4
 23fb09a:	4659      	mov	r1, fp
 23fb09c:	1d38      	adds	r0, r7, #4
 23fb09e:	f7ff fdb9 	bl	23fac14 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fb0a2:	4286      	cmp	r6, r0
 23fb0a4:	d3f5      	bcc.n	23fb092 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fb0a6:	683b      	ldr	r3, [r7, #0]
 23fb0a8:	464a      	mov	r2, r9
 23fb0aa:	4641      	mov	r1, r8
 23fb0ac:	4638      	mov	r0, r7
 23fb0ae:	68db      	ldr	r3, [r3, #12]
 23fb0b0:	4798      	blx	r3
 23fb0b2:	e7ee      	b.n	23fb092 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fb0b4:	2300      	movs	r3, #0
 23fb0b6:	7323      	strb	r3, [r4, #12]
 23fb0b8:	e7de      	b.n	23fb078 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fb0ba:	bf00      	nop
 23fb0bc:	e000ed00 	.word	0xe000ed00

023fb0c0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fb0c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb0c4:	4b16      	ldr	r3, [pc, #88]	; (23fb120 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fb0c6:	4605      	mov	r5, r0
 23fb0c8:	685b      	ldr	r3, [r3, #4]
 23fb0ca:	460f      	mov	r7, r1
 23fb0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fb0d0:	bb1b      	cbnz	r3, 23fb11a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fb0d2:	f7ff fe47 	bl	23fad64 <_ZN5spark10LogManager8instanceEv>
 23fb0d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fb0d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb0dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb0de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fb0e0:	f7ff fcee 	bl	23faac0 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fb0e4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fb0e8:	2446      	movs	r4, #70	; 0x46
 23fb0ea:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fb0ee:	45b0      	cmp	r8, r6
 23fb0f0:	d109      	bne.n	23fb106 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fb0f2:	a801      	add	r0, sp, #4
 23fb0f4:	f7ff ff61 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fb0f8:	42a5      	cmp	r5, r4
 23fb0fa:	bfb4      	ite	lt
 23fb0fc:	2000      	movlt	r0, #0
 23fb0fe:	2001      	movge	r0, #1
}
 23fb100:	b002      	add	sp, #8
 23fb102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fb106:	f856 0b04 	ldr.w	r0, [r6], #4
 23fb10a:	4639      	mov	r1, r7
 23fb10c:	3004      	adds	r0, #4
 23fb10e:	f7ff fd81 	bl	23fac14 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fb112:	4284      	cmp	r4, r0
 23fb114:	bfa8      	it	ge
 23fb116:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fb118:	e7e9      	b.n	23fb0ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fb11a:	2000      	movs	r0, #0
 23fb11c:	e7f0      	b.n	23fb100 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fb11e:	bf00      	nop
 23fb120:	e000ed00 	.word	0xe000ed00

023fb124 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb126:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fb12a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb12c:	4604      	mov	r4, r0
 23fb12e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb130:	db0d      	blt.n	23fb14e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fb132:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fb134:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fb136:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fb138:	dd04      	ble.n	23fb144 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fb13a:	00b9      	lsls	r1, r7, #2
 23fb13c:	f7fe ff36 	bl	23f9fac <realloc>
            if (!d) {
 23fb140:	b918      	cbnz	r0, 23fb14a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fb142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fb144:	f7fe ff24 	bl	23f9f90 <free>
        T* d = nullptr;
 23fb148:	2000      	movs	r0, #0
        data_ = d;
 23fb14a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb14c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fb14e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fb150:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb152:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fb156:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb158:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fb15c:	1d08      	adds	r0, r1, #4
 23fb15e:	f002 fcb9 	bl	23fdad4 <memmove>
    new(p) T(std::move(value));
 23fb162:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fb166:	6863      	ldr	r3, [r4, #4]
    return true;
 23fb168:	2001      	movs	r0, #1
    ++size_;
 23fb16a:	3301      	adds	r3, #1
 23fb16c:	6063      	str	r3, [r4, #4]
    return true;
 23fb16e:	e7e8      	b.n	23fb142 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fb170 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fb170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb172:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fb174:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb178:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb17a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fb17c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fb17e:	f7ff fc9f 	bl	23faac0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fb182:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fb186:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fb18a:	4293      	cmp	r3, r2
 23fb18c:	4619      	mov	r1, r3
 23fb18e:	d00a      	beq.n	23fb1a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fb190:	6809      	ldr	r1, [r1, #0]
 23fb192:	3304      	adds	r3, #4
 23fb194:	42a9      	cmp	r1, r5
 23fb196:	d1f8      	bne.n	23fb18a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fb198:	a801      	add	r0, sp, #4
 23fb19a:	f7ff ff0e 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fb19e:	2500      	movs	r5, #0
}
 23fb1a0:	4628      	mov	r0, r5
 23fb1a2:	b003      	add	sp, #12
 23fb1a4:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fb1a6:	4629      	mov	r1, r5
 23fb1a8:	4620      	mov	r0, r4
 23fb1aa:	f7ff ffbb 	bl	23fb124 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fb1ae:	4605      	mov	r5, r0
 23fb1b0:	2800      	cmp	r0, #0
 23fb1b2:	d0f1      	beq.n	23fb198 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fb1b4:	6863      	ldr	r3, [r4, #4]
 23fb1b6:	2b01      	cmp	r3, #1
 23fb1b8:	d101      	bne.n	23fb1be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fb1ba:	f7ff fdef 	bl	23fad9c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fb1be:	a801      	add	r0, sp, #4
 23fb1c0:	f7ff fefb 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fb1c4:	e7ec      	b.n	23fb1a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fb1c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fb1c6:	460b      	mov	r3, r1
 23fb1c8:	b570      	push	{r4, r5, r6, lr}
 23fb1ca:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fb1cc:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fb1d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fb1d4:	4282      	cmp	r2, r0
 23fb1d6:	d00f      	beq.n	23fb1f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fb1d8:	4601      	mov	r1, r0
            if (*p == value) {
 23fb1da:	681d      	ldr	r5, [r3, #0]
 23fb1dc:	f851 6b04 	ldr.w	r6, [r1], #4
 23fb1e0:	42ae      	cmp	r6, r5
 23fb1e2:	d107      	bne.n	23fb1f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb1e4:	1a52      	subs	r2, r2, r1
 23fb1e6:	f002 fc75 	bl	23fdad4 <memmove>
    return true;
 23fb1ea:	2001      	movs	r0, #1
    --size_;
 23fb1ec:	6863      	ldr	r3, [r4, #4]
 23fb1ee:	3b01      	subs	r3, #1
 23fb1f0:	6063      	str	r3, [r4, #4]
}
 23fb1f2:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fb1f4:	4608      	mov	r0, r1
 23fb1f6:	e7ed      	b.n	23fb1d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fb1f8:	2000      	movs	r0, #0
 23fb1fa:	e7fa      	b.n	23fb1f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fb1fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fb1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fb1fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fb200:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb204:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fb206:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb208:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fb20a:	f7ff fc59 	bl	23faac0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fb20e:	4620      	mov	r0, r4
 23fb210:	a901      	add	r1, sp, #4
 23fb212:	f7ff ffd8 	bl	23fb1c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fb216:	b118      	cbz	r0, 23fb220 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fb218:	6863      	ldr	r3, [r4, #4]
 23fb21a:	b90b      	cbnz	r3, 23fb220 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fb21c:	f7ff fdca 	bl	23fadb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fb220:	a803      	add	r0, sp, #12
 23fb222:	f7ff feca 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fb226:	b004      	add	sp, #16
 23fb228:	bd10      	pop	{r4, pc}

023fb22a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fb22a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fb22c:	b570      	push	{r4, r5, r6, lr}
 23fb22e:	4604      	mov	r4, r0
 23fb230:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fb234:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fb238:	42ae      	cmp	r6, r5
 23fb23a:	d015      	beq.n	23fb268 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fb23c:	4620      	mov	r0, r4
 23fb23e:	f105 0110 	add.w	r1, r5, #16
 23fb242:	f7ff ffc0 	bl	23fb1c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fb246:	6863      	ldr	r3, [r4, #4]
 23fb248:	b90b      	cbnz	r3, 23fb24e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fb24a:	f7ff fdb3 	bl	23fadb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fb24e:	69e0      	ldr	r0, [r4, #28]
 23fb250:	6929      	ldr	r1, [r5, #16]
 23fb252:	6803      	ldr	r3, [r0, #0]
 23fb254:	68db      	ldr	r3, [r3, #12]
 23fb256:	4798      	blx	r3
        if (h.stream) {
 23fb258:	6969      	ldr	r1, [r5, #20]
 23fb25a:	b119      	cbz	r1, 23fb264 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fb25c:	6a20      	ldr	r0, [r4, #32]
 23fb25e:	6803      	ldr	r3, [r0, #0]
 23fb260:	68db      	ldr	r3, [r3, #12]
 23fb262:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fb264:	3518      	adds	r5, #24
 23fb266:	e7e7      	b.n	23fb238 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fb268:	2618      	movs	r6, #24
 23fb26a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fb26e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb272:	42ae      	cmp	r6, r5
 23fb274:	d004      	beq.n	23fb280 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fb276:	4628      	mov	r0, r5
 23fb278:	f001 ff4e 	bl	23fd118 <_ZN6StringD1Ev>
 23fb27c:	3518      	adds	r5, #24
 23fb27e:	e7f8      	b.n	23fb272 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fb280:	2300      	movs	r3, #0
 23fb282:	6163      	str	r3, [r4, #20]
}
 23fb284:	bd70      	pop	{r4, r5, r6, pc}

023fb286 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fb286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb288:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fb28a:	f7ff fd93 	bl	23fadb4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fb28e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fb292:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb294:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fb296:	f7ff fc13 	bl	23faac0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fb29a:	4620      	mov	r0, r4
 23fb29c:	f7ff ffc5 	bl	23fb22a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fb2a0:	a801      	add	r0, sp, #4
 23fb2a2:	f7ff fe8a 	bl	23fafba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fb2a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb2a8:	b108      	cbz	r0, 23fb2ae <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fb2aa:	f7fe fc5d 	bl	23f9b68 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fb2ae:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fb2b2:	2618      	movs	r6, #24
 23fb2b4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb2b8:	42ae      	cmp	r6, r5
 23fb2ba:	d004      	beq.n	23fb2c6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fb2bc:	4628      	mov	r0, r5
 23fb2be:	f001 ff2b 	bl	23fd118 <_ZN6StringD1Ev>
 23fb2c2:	3518      	adds	r5, #24
 23fb2c4:	e7f8      	b.n	23fb2b8 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fb2c6:	6920      	ldr	r0, [r4, #16]
 23fb2c8:	f7fe fe62 	bl	23f9f90 <free>
 23fb2cc:	6820      	ldr	r0, [r4, #0]
 23fb2ce:	f7fe fe5f 	bl	23f9f90 <free>
}
 23fb2d2:	4620      	mov	r0, r4
 23fb2d4:	b002      	add	sp, #8
 23fb2d6:	bd70      	pop	{r4, r5, r6, pc}

023fb2d8 <__tcf_2>:
    static LogManager mgr;
 23fb2d8:	4801      	ldr	r0, [pc, #4]	; (23fb2e0 <__tcf_2+0x8>)
 23fb2da:	f7ff bfd4 	b.w	23fb286 <_ZN5spark10LogManagerD1Ev>
 23fb2de:	bf00      	nop
 23fb2e0:	1007aed4 	.word	0x1007aed4

023fb2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fb2e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb2e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb2e8:	4604      	mov	r4, r0
 23fb2ea:	460d      	mov	r5, r1
 23fb2ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb2ee:	d915      	bls.n	23fb31c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fb2f0:	4290      	cmp	r0, r2
 23fb2f2:	d214      	bcs.n	23fb31e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fb2f4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb2f8:	1a75      	subs	r5, r6, r1
 23fb2fa:	f1a1 0714 	sub.w	r7, r1, #20
 23fb2fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb300:	42b7      	cmp	r7, r6
 23fb302:	d01a      	beq.n	23fb33a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fb304:	b11c      	cbz	r4, 23fb30e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fb306:	4631      	mov	r1, r6
 23fb308:	4620      	mov	r0, r4
 23fb30a:	f7ff fc33 	bl	23fab74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fb30e:	f106 0008 	add.w	r0, r6, #8
 23fb312:	f7ff fde9 	bl	23faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fb316:	3e14      	subs	r6, #20
 23fb318:	3c14      	subs	r4, #20
 23fb31a:	e7f1      	b.n	23fb300 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fb31c:	d00d      	beq.n	23fb33a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fb31e:	42b5      	cmp	r5, r6
 23fb320:	d00b      	beq.n	23fb33a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fb322:	b11c      	cbz	r4, 23fb32c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fb324:	4629      	mov	r1, r5
 23fb326:	4620      	mov	r0, r4
 23fb328:	f7ff fc24 	bl	23fab74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fb32c:	f105 0008 	add.w	r0, r5, #8
 23fb330:	f7ff fdda 	bl	23faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fb334:	3514      	adds	r5, #20
 23fb336:	3414      	adds	r4, #20
 23fb338:	e7f1      	b.n	23fb31e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fb33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb33c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb33c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb340:	4604      	mov	r4, r0
 23fb342:	460d      	mov	r5, r1
 23fb344:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb346:	d914      	bls.n	23fb372 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fb348:	4290      	cmp	r0, r2
 23fb34a:	d213      	bcs.n	23fb374 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fb34c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fb350:	1a75      	subs	r5, r6, r1
 23fb352:	f1a1 0710 	sub.w	r7, r1, #16
 23fb356:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb358:	42b7      	cmp	r7, r6
 23fb35a:	d018      	beq.n	23fb38e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fb35c:	b11c      	cbz	r4, 23fb366 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fb35e:	4631      	mov	r1, r6
 23fb360:	4620      	mov	r0, r4
 23fb362:	f001 ff55 	bl	23fd210 <_ZN6StringC1EOS_>
                end->~T();
 23fb366:	4630      	mov	r0, r6
 23fb368:	f001 fed6 	bl	23fd118 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb36c:	3e10      	subs	r6, #16
 23fb36e:	3c10      	subs	r4, #16
 23fb370:	e7f2      	b.n	23fb358 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb372:	d00c      	beq.n	23fb38e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fb374:	42b5      	cmp	r5, r6
 23fb376:	d00a      	beq.n	23fb38e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fb378:	b11c      	cbz	r4, 23fb382 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fb37a:	4629      	mov	r1, r5
 23fb37c:	4620      	mov	r0, r4
 23fb37e:	f001 ff47 	bl	23fd210 <_ZN6StringC1EOS_>
                p->~T();
 23fb382:	4628      	mov	r0, r5
 23fb384:	f001 fec8 	bl	23fd118 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb388:	3510      	adds	r5, #16
 23fb38a:	3410      	adds	r4, #16
 23fb38c:	e7f2      	b.n	23fb374 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fb38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb390 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fb390:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fb392:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fb394:	4605      	mov	r5, r0
        if (n > 0) {
 23fb396:	dd11      	ble.n	23fb3bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fb398:	0130      	lsls	r0, r6, #4
 23fb39a:	f7fe fdeb 	bl	23f9f74 <malloc>
            if (!d) {
 23fb39e:	4604      	mov	r4, r0
 23fb3a0:	b158      	cbz	r0, 23fb3ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fb3a2:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb3a6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fb3aa:	f7ff ffc7 	bl	23fb33c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb3ae:	6828      	ldr	r0, [r5, #0]
 23fb3b0:	f7fe fdee 	bl	23f9f90 <free>
        return true;
 23fb3b4:	2001      	movs	r0, #1
        data_ = d;
 23fb3b6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fb3b8:	60ae      	str	r6, [r5, #8]
    }
 23fb3ba:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fb3bc:	2400      	movs	r4, #0
 23fb3be:	e7f6      	b.n	23fb3ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fb3c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fb3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb3c4:	4690      	mov	r8, r2
        capacity_(0) {
 23fb3c6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fb3c8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fb3ca:	b095      	sub	sp, #84	; 0x54
 23fb3cc:	9103      	str	r1, [sp, #12]
    return size_;
 23fb3ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fb3d2:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fb3d4:	4299      	cmp	r1, r3
        capacity_(0) {
 23fb3d6:	e9c0 3300 	strd	r3, r3, [r0]
 23fb3da:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fb3de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fb3e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fb3e6:	7602      	strb	r2, [r0, #24]
 23fb3e8:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fb3ea:	dc23      	bgt.n	23fb434 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fb3ec:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fb3f0:	2314      	movs	r3, #20
 23fb3f2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fb3f6:	42af      	cmp	r7, r5
 23fb3f8:	d03b      	beq.n	23fb472 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fb3fa:	4629      	mov	r1, r5
 23fb3fc:	a80b      	add	r0, sp, #44	; 0x2c
 23fb3fe:	f001 ff07 	bl	23fd210 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fb402:	a90b      	add	r1, sp, #44	; 0x2c
 23fb404:	a80f      	add	r0, sp, #60	; 0x3c
 23fb406:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fb408:	f001 ff02 	bl	23fd210 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb40c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fb410:	4299      	cmp	r1, r3
 23fb412:	da1b      	bge.n	23fb44c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fb414:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fb416:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fb418:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fb41c:	4631      	mov	r1, r6
 23fb41e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fb422:	f106 0010 	add.w	r0, r6, #16
 23fb426:	f7ff ff89 	bl	23fb33c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fb42a:	b9ee      	cbnz	r6, 23fb468 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fb42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb42e:	3301      	adds	r3, #1
 23fb430:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fb432:	e011      	b.n	23fb458 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fb434:	a808      	add	r0, sp, #32
 23fb436:	f7ff ffab 	bl	23fb390 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb43a:	2800      	cmp	r0, #0
 23fb43c:	d1d6      	bne.n	23fb3ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fb43e:	a808      	add	r0, sp, #32
 23fb440:	f7ff fd66 	bl	23faf10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fb444:	4620      	mov	r0, r4
 23fb446:	b015      	add	sp, #84	; 0x54
 23fb448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb44c:	3101      	adds	r1, #1
 23fb44e:	a808      	add	r0, sp, #32
 23fb450:	f7ff ff9e 	bl	23fb390 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb454:	2800      	cmp	r0, #0
 23fb456:	d1dd      	bne.n	23fb414 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fb458:	a80f      	add	r0, sp, #60	; 0x3c
 23fb45a:	f001 fe5d 	bl	23fd118 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fb45e:	a80b      	add	r0, sp, #44	; 0x2c
 23fb460:	f001 fe5a 	bl	23fd118 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fb464:	3514      	adds	r5, #20
 23fb466:	e7c6      	b.n	23fb3f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fb468:	4630      	mov	r0, r6
 23fb46a:	a90f      	add	r1, sp, #60	; 0x3c
 23fb46c:	f001 fed0 	bl	23fd210 <_ZN6StringC1EOS_>
 23fb470:	e7dc      	b.n	23fb42c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fb472:	2600      	movs	r6, #0
 23fb474:	f04f 0914 	mov.w	r9, #20
 23fb478:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fb47c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fb47e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fb482:	429e      	cmp	r6, r3
 23fb484:	da7c      	bge.n	23fb580 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fb486:	0133      	lsls	r3, r6, #4
 23fb488:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fb48a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fb48c:	b90b      	cbnz	r3, 23fb492 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fb48e:	3601      	adds	r6, #1
 23fb490:	e7f5      	b.n	23fb47e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fb492:	2300      	movs	r3, #0
 23fb494:	9307      	str	r3, [sp, #28]
 23fb496:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fb49a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fb49c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fb49e:	a907      	add	r1, sp, #28
 23fb4a0:	a806      	add	r0, sp, #24
 23fb4a2:	f7ff fae6 	bl	23faa72 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fb4a6:	4682      	mov	sl, r0
 23fb4a8:	2800      	cmp	r0, #0
 23fb4aa:	d0f0      	beq.n	23fb48e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fb4ac:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb4b0:	4601      	mov	r1, r0
            bool found = false;
 23fb4b2:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb4b6:	4628      	mov	r0, r5
 23fb4b8:	9a07      	ldr	r2, [sp, #28]
 23fb4ba:	f10d 0317 	add.w	r3, sp, #23
 23fb4be:	f7ff fb6d 	bl	23fab9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb4c2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb4c6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb4c8:	2f00      	cmp	r7, #0
 23fb4ca:	d14a      	bne.n	23fb562 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fb4cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fb4d0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fb4d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fb4d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb4dc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fb4e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fb4e4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb4e6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fb4ea:	4293      	cmp	r3, r2
 23fb4ec:	db17      	blt.n	23fb51e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fb4ee:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fb4f2:	f1ba 0f00 	cmp.w	sl, #0
 23fb4f6:	dd30      	ble.n	23fb55a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fb4f8:	fb09 f00a 	mul.w	r0, r9, sl
 23fb4fc:	f7fe fd3a 	bl	23f9f74 <malloc>
            if (!d) {
 23fb500:	4683      	mov	fp, r0
 23fb502:	b360      	cbz	r0, 23fb55e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fb504:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb508:	fb09 1202 	mla	r2, r9, r2, r1
 23fb50c:	f7ff feea 	bl	23fb2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fb510:	6828      	ldr	r0, [r5, #0]
 23fb512:	f7fe fd3d 	bl	23f9f90 <free>
        data_ = d;
 23fb516:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fb51a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fb51e:	682b      	ldr	r3, [r5, #0]
 23fb520:	9a01      	ldr	r2, [sp, #4]
 23fb522:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fb526:	686a      	ldr	r2, [r5, #4]
 23fb528:	4651      	mov	r1, sl
 23fb52a:	fb09 3202 	mla	r2, r9, r2, r3
 23fb52e:	f10a 0014 	add.w	r0, sl, #20
 23fb532:	f7ff fed7 	bl	23fb2e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fb536:	f1ba 0f00 	cmp.w	sl, #0
 23fb53a:	d003      	beq.n	23fb544 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fb53c:	4650      	mov	r0, sl
 23fb53e:	a90f      	add	r1, sp, #60	; 0x3c
 23fb540:	f7ff fb18 	bl	23fab74 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fb544:	686b      	ldr	r3, [r5, #4]
 23fb546:	3301      	adds	r3, #1
 23fb548:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fb54a:	a811      	add	r0, sp, #68	; 0x44
 23fb54c:	f7ff fccc 	bl	23faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb550:	b13f      	cbz	r7, 23fb562 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fb552:	a80b      	add	r0, sp, #44	; 0x2c
 23fb554:	f7ff fcc8 	bl	23faee8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fb558:	e771      	b.n	23fb43e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fb55a:	46bb      	mov	fp, r7
 23fb55c:	e7d8      	b.n	23fb510 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb55e:	2701      	movs	r7, #1
 23fb560:	e7f3      	b.n	23fb54a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fb562:	9b01      	ldr	r3, [sp, #4]
 23fb564:	682d      	ldr	r5, [r5, #0]
 23fb566:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fb56a:	9b06      	ldr	r3, [sp, #24]
 23fb56c:	781b      	ldrb	r3, [r3, #0]
 23fb56e:	b92b      	cbnz	r3, 23fb57c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fb570:	f8d8 3000 	ldr.w	r3, [r8]
 23fb574:	9a02      	ldr	r2, [sp, #8]
 23fb576:	4413      	add	r3, r2
 23fb578:	7c1b      	ldrb	r3, [r3, #16]
 23fb57a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fb57c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fb57e:	e78e      	b.n	23fb49e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb580:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb582:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb584:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb586:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb588:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb58a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fb58c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fb58e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb590:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fb592:	60a2      	str	r2, [r4, #8]
 23fb594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fb596:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb598:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fb59a:	60e2      	str	r2, [r4, #12]
 23fb59c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fb59e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb5a0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fb5a2:	6122      	str	r2, [r4, #16]
 23fb5a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fb5a6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fb5a8:	9b03      	ldr	r3, [sp, #12]
 23fb5aa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fb5ac:	6162      	str	r2, [r4, #20]
 23fb5ae:	7623      	strb	r3, [r4, #24]
 23fb5b0:	e7cf      	b.n	23fb552 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fb5b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb5b6:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fb5b8:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb5ba:	4617      	mov	r7, r2
 23fb5bc:	b087      	sub	sp, #28
 23fb5be:	460d      	mov	r5, r1
        stream_(&stream) {
 23fb5c0:	4668      	mov	r0, sp
 23fb5c2:	4619      	mov	r1, r3
 23fb5c4:	f7fd ff8f 	bl	23f94e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb5c8:	4b0b      	ldr	r3, [pc, #44]	; (23fb5f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fb5ca:	4669      	mov	r1, sp
 23fb5cc:	f846 3b04 	str.w	r3, [r6], #4
 23fb5d0:	a803      	add	r0, sp, #12
 23fb5d2:	f7fd ff88 	bl	23f94e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb5d6:	4639      	mov	r1, r7
 23fb5d8:	aa03      	add	r2, sp, #12
 23fb5da:	4630      	mov	r0, r6
 23fb5dc:	f7ff fef0 	bl	23fb3c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb5e0:	a803      	add	r0, sp, #12
 23fb5e2:	f7fd ff3f 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb5e6:	4668      	mov	r0, sp
 23fb5e8:	f7fd ff3c 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fb5ec:	4620      	mov	r0, r4
        stream_(&stream) {
 23fb5ee:	4b03      	ldr	r3, [pc, #12]	; (23fb5fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fb5f0:	6225      	str	r5, [r4, #32]
 23fb5f2:	6023      	str	r3, [r4, #0]
}
 23fb5f4:	b007      	add	sp, #28
 23fb5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb5f8:	023fdff8 	.word	0x023fdff8
 23fb5fc:	023ffb28 	.word	0x023ffb28

023fb600 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fb600:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb602:	460f      	mov	r7, r1
 23fb604:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb606:	4638      	mov	r0, r7
 23fb608:	491c      	ldr	r1, [pc, #112]	; (23fb67c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fb60a:	4616      	mov	r6, r2
 23fb60c:	461d      	mov	r5, r3
 23fb60e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb610:	f7fd fa06 	bl	23f8a20 <strcmp>
 23fb614:	b9c0      	cbnz	r0, 23fb648 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fb616:	b1a4      	cbz	r4, 23fb642 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fb618:	4629      	mov	r1, r5
 23fb61a:	a801      	add	r0, sp, #4
 23fb61c:	f7ff fcbe 	bl	23faf9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb620:	2024      	movs	r0, #36	; 0x24
 23fb622:	4917      	ldr	r1, [pc, #92]	; (23fb680 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb624:	f002 f90e 	bl	23fd844 <_ZnwjRKSt9nothrow_t>
 23fb628:	4605      	mov	r5, r0
 23fb62a:	b130      	cbz	r0, 23fb63a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fb62c:	ab01      	add	r3, sp, #4
 23fb62e:	4632      	mov	r2, r6
 23fb630:	4621      	mov	r1, r4
 23fb632:	f7ff ffbf 	bl	23fb5b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb636:	4b13      	ldr	r3, [pc, #76]	; (23fb684 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fb638:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb63a:	a801      	add	r0, sp, #4
 23fb63c:	f7fd ff12 	bl	23f9464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb640:	462c      	mov	r4, r5
}
 23fb642:	4620      	mov	r0, r4
 23fb644:	b005      	add	sp, #20
 23fb646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fb648:	4638      	mov	r0, r7
 23fb64a:	490f      	ldr	r1, [pc, #60]	; (23fb688 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fb64c:	f7fd f9e8 	bl	23f8a20 <strcmp>
 23fb650:	b990      	cbnz	r0, 23fb678 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fb652:	2c00      	cmp	r4, #0
 23fb654:	d0f5      	beq.n	23fb642 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb656:	4629      	mov	r1, r5
 23fb658:	a801      	add	r0, sp, #4
 23fb65a:	f7ff fc9f 	bl	23faf9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb65e:	2024      	movs	r0, #36	; 0x24
 23fb660:	4907      	ldr	r1, [pc, #28]	; (23fb680 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb662:	f002 f8ef 	bl	23fd844 <_ZnwjRKSt9nothrow_t>
 23fb666:	4605      	mov	r5, r0
 23fb668:	2800      	cmp	r0, #0
 23fb66a:	d0e6      	beq.n	23fb63a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fb66c:	4632      	mov	r2, r6
 23fb66e:	4621      	mov	r1, r4
 23fb670:	ab01      	add	r3, sp, #4
 23fb672:	f7ff ff9f 	bl	23fb5b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb676:	e7e0      	b.n	23fb63a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fb678:	2400      	movs	r4, #0
 23fb67a:	e7e2      	b.n	23fb642 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fb67c:	023ffaac 	.word	0x023ffaac
 23fb680:	023ffce7 	.word	0x023ffce7
 23fb684:	023ffb40 	.word	0x023ffb40
 23fb688:	023ffab0 	.word	0x023ffab0

023fb68c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fb68c:	4b01      	ldr	r3, [pc, #4]	; (23fb694 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fb68e:	4a02      	ldr	r2, [pc, #8]	; (23fb698 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fb690:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fb692:	4770      	bx	lr
 23fb694:	1007aed0 	.word	0x1007aed0
 23fb698:	023ffac1 	.word	0x023ffac1

023fb69c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb6a0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fb6a2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb6a6:	4604      	mov	r4, r0
 23fb6a8:	460e      	mov	r6, r1
 23fb6aa:	4617      	mov	r7, r2
 23fb6ac:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fb6ae:	f7ff f879 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23fb6b2:	4581      	cmp	r9, r0
 23fb6b4:	d04d      	beq.n	23fb752 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fb6b6:	792b      	ldrb	r3, [r5, #4]
 23fb6b8:	0719      	lsls	r1, r3, #28
 23fb6ba:	d504      	bpl.n	23fb6c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fb6bc:	4620      	mov	r0, r4
 23fb6be:	696a      	ldr	r2, [r5, #20]
 23fb6c0:	4954      	ldr	r1, [pc, #336]	; (23fb814 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fb6c2:	f7ff fad0 	bl	23fac66 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fb6c6:	f1b8 0f00 	cmp.w	r8, #0
 23fb6ca:	d00d      	beq.n	23fb6e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fb6cc:	215b      	movs	r1, #91	; 0x5b
 23fb6ce:	4620      	mov	r0, r4
 23fb6d0:	f7ff fa44 	bl	23fab5c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fb6d4:	4641      	mov	r1, r8
 23fb6d6:	4620      	mov	r0, r4
 23fb6d8:	f7ff fa31 	bl	23fab3e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fb6dc:	6823      	ldr	r3, [r4, #0]
 23fb6de:	2202      	movs	r2, #2
 23fb6e0:	4620      	mov	r0, r4
 23fb6e2:	68db      	ldr	r3, [r3, #12]
 23fb6e4:	494c      	ldr	r1, [pc, #304]	; (23fb818 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fb6e6:	4798      	blx	r3
    if (attr.has_file) {
 23fb6e8:	792b      	ldrb	r3, [r5, #4]
 23fb6ea:	07da      	lsls	r2, r3, #31
 23fb6ec:	d524      	bpl.n	23fb738 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fb6ee:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fb6f2:	212f      	movs	r1, #47	; 0x2f
 23fb6f4:	4640      	mov	r0, r8
 23fb6f6:	f002 fa70 	bl	23fdbda <strrchr>
    if (s1) {
 23fb6fa:	b108      	cbz	r0, 23fb700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fb6fc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fb700:	4641      	mov	r1, r8
 23fb702:	4620      	mov	r0, r4
 23fb704:	f7ff fa1b 	bl	23fab3e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fb708:	792b      	ldrb	r3, [r5, #4]
 23fb70a:	079b      	lsls	r3, r3, #30
 23fb70c:	d508      	bpl.n	23fb720 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fb70e:	213a      	movs	r1, #58	; 0x3a
 23fb710:	4620      	mov	r0, r4
 23fb712:	f7ff fa23 	bl	23fab5c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fb716:	4620      	mov	r0, r4
 23fb718:	68ea      	ldr	r2, [r5, #12]
 23fb71a:	4940      	ldr	r1, [pc, #256]	; (23fb81c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fb71c:	f7ff faa3 	bl	23fac66 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fb720:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fb722:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fb724:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fb728:	4620      	mov	r0, r4
            write(", ", 2);
 23fb72a:	f04f 0202 	mov.w	r2, #2
 23fb72e:	68db      	ldr	r3, [r3, #12]
 23fb730:	bf14      	ite	ne
 23fb732:	493b      	ldrne	r1, [pc, #236]	; (23fb820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fb734:	493b      	ldreq	r1, [pc, #236]	; (23fb824 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb736:	4798      	blx	r3
    if (attr.has_function) {
 23fb738:	792b      	ldrb	r3, [r5, #4]
 23fb73a:	0758      	lsls	r0, r3, #29
 23fb73c:	d51d      	bpl.n	23fb77a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb73e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb740:	460b      	mov	r3, r1
 23fb742:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fb744:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb748:	b160      	cbz	r0, 23fb764 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fb74a:	2820      	cmp	r0, #32
 23fb74c:	d108      	bne.n	23fb760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fb74e:	4619      	mov	r1, r3
 23fb750:	e7f7      	b.n	23fb742 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fb752:	4835      	ldr	r0, [pc, #212]	; (23fb828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fb754:	f7fe fcb5 	bl	23fa0c2 <_ZN5spark12NetworkClass9listeningEv>
 23fb758:	2800      	cmp	r0, #0
 23fb75a:	d0ac      	beq.n	23fb6b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fb75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fb760:	2828      	cmp	r0, #40	; 0x28
 23fb762:	d1ee      	bne.n	23fb742 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fb764:	6823      	ldr	r3, [r4, #0]
 23fb766:	1a52      	subs	r2, r2, r1
 23fb768:	4620      	mov	r0, r4
 23fb76a:	68db      	ldr	r3, [r3, #12]
 23fb76c:	4798      	blx	r3
        write("(): ", 4);
 23fb76e:	6823      	ldr	r3, [r4, #0]
 23fb770:	2204      	movs	r2, #4
 23fb772:	4620      	mov	r0, r4
 23fb774:	68db      	ldr	r3, [r3, #12]
 23fb776:	492d      	ldr	r1, [pc, #180]	; (23fb82c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fb778:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fb77a:	2100      	movs	r1, #0
 23fb77c:	4638      	mov	r0, r7
 23fb77e:	f7fe fad3 	bl	23f9d28 <log_level_name>
 23fb782:	4601      	mov	r1, r0
    write(s);
 23fb784:	4620      	mov	r0, r4
 23fb786:	f7ff f9da 	bl	23fab3e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fb78a:	6823      	ldr	r3, [r4, #0]
 23fb78c:	2202      	movs	r2, #2
 23fb78e:	4620      	mov	r0, r4
 23fb790:	68db      	ldr	r3, [r3, #12]
 23fb792:	4924      	ldr	r1, [pc, #144]	; (23fb824 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb794:	4798      	blx	r3
    if (msg) {
 23fb796:	b11e      	cbz	r6, 23fb7a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fb798:	4631      	mov	r1, r6
 23fb79a:	4620      	mov	r0, r4
 23fb79c:	f7ff f9cf 	bl	23fab3e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fb7a0:	792b      	ldrb	r3, [r5, #4]
 23fb7a2:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fb7a6:	d02c      	beq.n	23fb802 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fb7a8:	6823      	ldr	r3, [r4, #0]
 23fb7aa:	4921      	ldr	r1, [pc, #132]	; (23fb830 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fb7ac:	68db      	ldr	r3, [r3, #12]
 23fb7ae:	2202      	movs	r2, #2
 23fb7b0:	4620      	mov	r0, r4
 23fb7b2:	4798      	blx	r3
        if (attr.has_code) {
 23fb7b4:	792b      	ldrb	r3, [r5, #4]
 23fb7b6:	06d9      	lsls	r1, r3, #27
 23fb7b8:	d50a      	bpl.n	23fb7d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fb7ba:	6823      	ldr	r3, [r4, #0]
 23fb7bc:	2207      	movs	r2, #7
 23fb7be:	4620      	mov	r0, r4
 23fb7c0:	491c      	ldr	r1, [pc, #112]	; (23fb834 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fb7c2:	68db      	ldr	r3, [r3, #12]
 23fb7c4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fb7c6:	4620      	mov	r0, r4
 23fb7c8:	69aa      	ldr	r2, [r5, #24]
 23fb7ca:	491b      	ldr	r1, [pc, #108]	; (23fb838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fb7cc:	f7ff fa4b 	bl	23fac66 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fb7d0:	792b      	ldrb	r3, [r5, #4]
 23fb7d2:	069a      	lsls	r2, r3, #26
 23fb7d4:	d511      	bpl.n	23fb7fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fb7d6:	06db      	lsls	r3, r3, #27
 23fb7d8:	d505      	bpl.n	23fb7e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fb7da:	6823      	ldr	r3, [r4, #0]
 23fb7dc:	2202      	movs	r2, #2
 23fb7de:	4620      	mov	r0, r4
 23fb7e0:	68db      	ldr	r3, [r3, #12]
 23fb7e2:	490f      	ldr	r1, [pc, #60]	; (23fb820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fb7e4:	4798      	blx	r3
            write("details = ", 10);
 23fb7e6:	6823      	ldr	r3, [r4, #0]
 23fb7e8:	4620      	mov	r0, r4
 23fb7ea:	4914      	ldr	r1, [pc, #80]	; (23fb83c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fb7ec:	220a      	movs	r2, #10
 23fb7ee:	68db      	ldr	r3, [r3, #12]
 23fb7f0:	4798      	blx	r3
            write(attr.details);
 23fb7f2:	4620      	mov	r0, r4
 23fb7f4:	69e9      	ldr	r1, [r5, #28]
 23fb7f6:	f7ff f9a2 	bl	23fab3e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fb7fa:	215d      	movs	r1, #93	; 0x5d
 23fb7fc:	4620      	mov	r0, r4
 23fb7fe:	f7ff f9ad 	bl	23fab5c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fb802:	6823      	ldr	r3, [r4, #0]
 23fb804:	4620      	mov	r0, r4
}
 23fb806:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fb80a:	2202      	movs	r2, #2
 23fb80c:	68db      	ldr	r3, [r3, #12]
 23fb80e:	490c      	ldr	r1, [pc, #48]	; (23fb840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fb810:	4718      	bx	r3
 23fb812:	bf00      	nop
 23fb814:	023ffac5 	.word	0x023ffac5
 23fb818:	023ffacc 	.word	0x023ffacc
 23fb81c:	023fde9f 	.word	0x023fde9f
 23fb820:	023ffacf 	.word	0x023ffacf
 23fb824:	023ffad4 	.word	0x023ffad4
 23fb828:	1007ae80 	.word	0x1007ae80
 23fb82c:	023ffad2 	.word	0x023ffad2
 23fb830:	023ffad7 	.word	0x023ffad7
 23fb834:	023ffada 	.word	0x023ffada
 23fb838:	023ffae2 	.word	0x023ffae2
 23fb83c:	023ffae5 	.word	0x023ffae5
 23fb840:	023fdf85 	.word	0x023fdf85

023fb844 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb848:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fb84a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb84c:	460d      	mov	r5, r1
 23fb84e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fb850:	f7fe ffa8 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23fb854:	4287      	cmp	r7, r0
 23fb856:	d007      	beq.n	23fb868 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fb858:	6a20      	ldr	r0, [r4, #32]
 23fb85a:	4632      	mov	r2, r6
 23fb85c:	6803      	ldr	r3, [r0, #0]
 23fb85e:	4629      	mov	r1, r5
}
 23fb860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fb864:	68db      	ldr	r3, [r3, #12]
 23fb866:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fb868:	4803      	ldr	r0, [pc, #12]	; (23fb878 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fb86a:	f7fe fc2a 	bl	23fa0c2 <_ZN5spark12NetworkClass9listeningEv>
 23fb86e:	2800      	cmp	r0, #0
 23fb870:	d0f2      	beq.n	23fb858 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fb872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb876:	bf00      	nop
 23fb878:	1007ae80 	.word	0x1007ae80

023fb87c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb880:	b085      	sub	sp, #20
    return stream_;
 23fb882:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fb886:	4605      	mov	r5, r0
 23fb888:	460f      	mov	r7, r1
 23fb88a:	4690      	mov	r8, r2
 23fb88c:	461e      	mov	r6, r3
 23fb88e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fb890:	f7fe ff88 	bl	23fa7a4 <_Z16_fetch_usbserialv>
 23fb894:	4581      	cmp	r9, r0
 23fb896:	d105      	bne.n	23fb8a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fb898:	4849      	ldr	r0, [pc, #292]	; (23fb9c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fb89a:	f7fe fc12 	bl	23fa0c2 <_ZN5spark12NetworkClass9listeningEv>
 23fb89e:	2800      	cmp	r0, #0
 23fb8a0:	f040 808a 	bne.w	23fb9b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fb8a4:	f04f 0900 	mov.w	r9, #0
 23fb8a8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fb8aa:	4a46      	ldr	r2, [pc, #280]	; (23fb9c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fb8ac:	a801      	add	r0, sp, #4
 23fb8ae:	9201      	str	r2, [sp, #4]
 23fb8b0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fb8b2:	f88d 9008 	strb.w	r9, [sp, #8]
 23fb8b6:	f7fe fe5a 	bl	23fa56e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fb8ba:	4649      	mov	r1, r9
 23fb8bc:	4640      	mov	r0, r8
 23fb8be:	f7fe fa33 	bl	23f9d28 <log_level_name>
 23fb8c2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fb8c4:	4940      	ldr	r1, [pc, #256]	; (23fb9c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fb8c6:	2201      	movs	r2, #1
 23fb8c8:	a801      	add	r0, sp, #4
 23fb8ca:	f7fe fedf 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8ce:	4641      	mov	r1, r8
 23fb8d0:	f7ff f927 	bl	23fab22 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fb8d4:	b13f      	cbz	r7, 23fb8e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fb8d6:	493d      	ldr	r1, [pc, #244]	; (23fb9cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fb8d8:	2201      	movs	r2, #1
 23fb8da:	a801      	add	r0, sp, #4
 23fb8dc:	f7fe fed6 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8e0:	4639      	mov	r1, r7
 23fb8e2:	f7ff f91e 	bl	23fab22 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fb8e6:	b13e      	cbz	r6, 23fb8f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fb8e8:	4939      	ldr	r1, [pc, #228]	; (23fb9d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fb8ea:	2201      	movs	r2, #1
 23fb8ec:	a801      	add	r0, sp, #4
 23fb8ee:	f7fe fecd 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8f2:	4631      	mov	r1, r6
 23fb8f4:	f7ff f915 	bl	23fab22 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fb8f8:	7923      	ldrb	r3, [r4, #4]
 23fb8fa:	07df      	lsls	r7, r3, #31
 23fb8fc:	d50e      	bpl.n	23fb91c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fb8fe:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fb900:	212f      	movs	r1, #47	; 0x2f
 23fb902:	4630      	mov	r0, r6
 23fb904:	f002 f969 	bl	23fdbda <strrchr>
    if (s1) {
 23fb908:	b100      	cbz	r0, 23fb90c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fb90a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fb90c:	4931      	ldr	r1, [pc, #196]	; (23fb9d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fb90e:	2201      	movs	r2, #1
 23fb910:	a801      	add	r0, sp, #4
 23fb912:	f7fe febb 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb916:	4631      	mov	r1, r6
 23fb918:	f7ff f903 	bl	23fab22 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fb91c:	7923      	ldrb	r3, [r4, #4]
 23fb91e:	079e      	lsls	r6, r3, #30
 23fb920:	d507      	bpl.n	23fb932 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fb922:	492d      	ldr	r1, [pc, #180]	; (23fb9d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fb924:	2202      	movs	r2, #2
 23fb926:	a801      	add	r0, sp, #4
 23fb928:	f7fe feb0 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb92c:	68e1      	ldr	r1, [r4, #12]
 23fb92e:	f7fe fe2b 	bl	23fa588 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fb932:	7923      	ldrb	r3, [r4, #4]
 23fb934:	0758      	lsls	r0, r3, #29
 23fb936:	d514      	bpl.n	23fb962 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb938:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb93a:	4633      	mov	r3, r6
 23fb93c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fb93e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb942:	b12a      	cbz	r2, 23fb950 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fb944:	2a20      	cmp	r2, #32
 23fb946:	d101      	bne.n	23fb94c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fb948:	461e      	mov	r6, r3
 23fb94a:	e7f7      	b.n	23fb93c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fb94c:	2a28      	cmp	r2, #40	; 0x28
 23fb94e:	d1f5      	bne.n	23fb93c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fb950:	2202      	movs	r2, #2
 23fb952:	4922      	ldr	r1, [pc, #136]	; (23fb9dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fb954:	a801      	add	r0, sp, #4
 23fb956:	f7fe fe99 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb95a:	4631      	mov	r1, r6
 23fb95c:	1bba      	subs	r2, r7, r6
 23fb95e:	f7fe fea5 	bl	23fa6ac <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fb962:	7923      	ldrb	r3, [r4, #4]
 23fb964:	0719      	lsls	r1, r3, #28
 23fb966:	d507      	bpl.n	23fb978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fb968:	491d      	ldr	r1, [pc, #116]	; (23fb9e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fb96a:	2201      	movs	r2, #1
 23fb96c:	a801      	add	r0, sp, #4
 23fb96e:	f7fe fe8d 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb972:	6961      	ldr	r1, [r4, #20]
 23fb974:	f7fe fe1a 	bl	23fa5ac <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fb978:	7923      	ldrb	r3, [r4, #4]
 23fb97a:	06da      	lsls	r2, r3, #27
 23fb97c:	d508      	bpl.n	23fb990 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fb97e:	2204      	movs	r2, #4
 23fb980:	4918      	ldr	r1, [pc, #96]	; (23fb9e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fb982:	eb0d 0002 	add.w	r0, sp, r2
 23fb986:	f7fe fe81 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb98a:	69a1      	ldr	r1, [r4, #24]
 23fb98c:	f7fe fdfc 	bl	23fa588 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fb990:	7923      	ldrb	r3, [r4, #4]
 23fb992:	069b      	lsls	r3, r3, #26
 23fb994:	d507      	bpl.n	23fb9a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fb996:	4914      	ldr	r1, [pc, #80]	; (23fb9e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fb998:	2206      	movs	r2, #6
 23fb99a:	a801      	add	r0, sp, #4
 23fb99c:	f7fe fe76 	bl	23fa68c <_ZN5spark10JSONWriter4nameEPKcj>
 23fb9a0:	69e1      	ldr	r1, [r4, #28]
 23fb9a2:	f7ff f8be 	bl	23fab22 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fb9a6:	a801      	add	r0, sp, #4
 23fb9a8:	f7fe fdcb 	bl	23fa542 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fb9ac:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fb9ae:	2202      	movs	r2, #2
 23fb9b0:	6803      	ldr	r3, [r0, #0]
 23fb9b2:	490e      	ldr	r1, [pc, #56]	; (23fb9ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fb9b4:	68db      	ldr	r3, [r3, #12]
 23fb9b6:	4798      	blx	r3
}
 23fb9b8:	b005      	add	sp, #20
 23fb9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fb9be:	bf00      	nop
 23fb9c0:	1007ae80 	.word	0x1007ae80
 23fb9c4:	023ffb10 	.word	0x023ffb10
 23fb9c8:	023ffaa2 	.word	0x023ffaa2
 23fb9cc:	023ffaf0 	.word	0x023ffaf0
 23fb9d0:	023ffe6b 	.word	0x023ffe6b
 23fb9d4:	023ffaf2 	.word	0x023ffaf2
 23fb9d8:	023ffaf4 	.word	0x023ffaf4
 23fb9dc:	023ffaf7 	.word	0x023ffaf7
 23fb9e0:	023ffafa 	.word	0x023ffafa
 23fb9e4:	023ffafc 	.word	0x023ffafc
 23fb9e8:	023ffb01 	.word	0x023ffb01
 23fb9ec:	023fdf85 	.word	0x023fdf85

023fb9f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fb9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb9f2:	4606      	mov	r6, r0
 23fb9f4:	460d      	mov	r5, r1
  size_t n = 0;
 23fb9f6:	2400      	movs	r4, #0
 23fb9f8:	188f      	adds	r7, r1, r2
  while (size--) {
 23fb9fa:	42bd      	cmp	r5, r7
 23fb9fc:	d00c      	beq.n	23fba18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fb9fe:	6833      	ldr	r3, [r6, #0]
 23fba00:	4630      	mov	r0, r6
 23fba02:	689b      	ldr	r3, [r3, #8]
 23fba04:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fba08:	4798      	blx	r3
     if (chunk>=0)
 23fba0a:	1e03      	subs	r3, r0, #0
 23fba0c:	db01      	blt.n	23fba12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fba0e:	441c      	add	r4, r3
  while (size--) {
 23fba10:	e7f3      	b.n	23fb9fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fba12:	2c00      	cmp	r4, #0
 23fba14:	bf08      	it	eq
 23fba16:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fba18:	4620      	mov	r0, r4
 23fba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fba1c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fba1c:	b513      	push	{r0, r1, r4, lr}
 23fba1e:	4604      	mov	r4, r0
    }
 23fba20:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fba22:	b159      	cbz	r1, 23fba3c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fba24:	9101      	str	r1, [sp, #4]
 23fba26:	f7fd f805 	bl	23f8a34 <strlen>
 23fba2a:	4602      	mov	r2, r0
 23fba2c:	4620      	mov	r0, r4
 23fba2e:	6823      	ldr	r3, [r4, #0]
 23fba30:	9901      	ldr	r1, [sp, #4]
 23fba32:	68db      	ldr	r3, [r3, #12]
    }
 23fba34:	b002      	add	sp, #8
 23fba36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fba3a:	4718      	bx	r3
    }
 23fba3c:	b002      	add	sp, #8
 23fba3e:	bd10      	pop	{r4, pc}

023fba40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fba40:	6803      	ldr	r3, [r0, #0]
 23fba42:	689b      	ldr	r3, [r3, #8]
 23fba44:	4718      	bx	r3

023fba46 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fba46:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fba48:	2a01      	cmp	r2, #1
 23fba4a:	bf98      	it	ls
 23fba4c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fba4e:	b530      	push	{r4, r5, lr}
 23fba50:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fba52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fba56:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fba58:	460d      	mov	r5, r1
 23fba5a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fba5e:	fb01 5312 	mls	r3, r1, r2, r5
 23fba62:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fba66:	2b09      	cmp	r3, #9
 23fba68:	bf94      	ite	ls
 23fba6a:	3330      	addls	r3, #48	; 0x30
 23fba6c:	3337      	addhi	r3, #55	; 0x37
 23fba6e:	b2db      	uxtb	r3, r3
  } while(n);
 23fba70:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fba72:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fba76:	d9ef      	bls.n	23fba58 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fba78:	4621      	mov	r1, r4
 23fba7a:	f7ff ffcf 	bl	23fba1c <_ZN5Print5writeEPKc>
}
 23fba7e:	b00b      	add	sp, #44	; 0x2c
 23fba80:	bd30      	pop	{r4, r5, pc}

023fba82 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fba82:	4770      	bx	lr

023fba84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fba84:	4b06      	ldr	r3, [pc, #24]	; (23fbaa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fba86:	b510      	push	{r4, lr}
	    ||
 23fba88:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fba8a:	f100 040c 	add.w	r4, r0, #12
 23fba8e:	d005      	beq.n	23fba9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fba90:	4608      	mov	r0, r1
 23fba92:	f001 fedf 	bl	23fd854 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fba96:	2800      	cmp	r0, #0
 23fba98:	bf08      	it	eq
 23fba9a:	2400      	moveq	r4, #0
      }
 23fba9c:	4620      	mov	r0, r4
 23fba9e:	bd10      	pop	{r4, pc}
 23fbaa0:	023ff9f4 	.word	0x023ff9f4

023fbaa4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbaa4:	b510      	push	{r4, lr}
 23fbaa6:	4604      	mov	r4, r0
 23fbaa8:	2130      	movs	r1, #48	; 0x30
 23fbaaa:	f7fc ffec 	bl	23f8a86 <_ZdlPvj>
 23fbaae:	4620      	mov	r0, r4
 23fbab0:	bd10      	pop	{r4, pc}

023fbab2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fbab2:	2130      	movs	r1, #48	; 0x30
 23fbab4:	f7fc bfe7 	b.w	23f8a86 <_ZdlPvj>

023fbab8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fbab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fbaba:	2500      	movs	r5, #0
 23fbabc:	1cec      	adds	r4, r5, #3
 23fbabe:	428c      	cmp	r4, r1
 23fbac0:	d80d      	bhi.n	23fbade <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fbac2:	1c6e      	adds	r6, r5, #1
 23fbac4:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fbac6:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fbac8:	4297      	cmp	r7, r2
 23fbaca:	d105      	bne.n	23fbad8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fbacc:	4426      	add	r6, r4
 23fbace:	42b1      	cmp	r1, r6
 23fbad0:	d305      	bcc.n	23fbade <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fbad2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fbad4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fbad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fbad8:	3401      	adds	r4, #1
 23fbada:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fbadc:	e7ee      	b.n	23fbabc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fbade:	2000      	movs	r0, #0
 23fbae0:	e7f9      	b.n	23fbad6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

023fbae2 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fbae2:	b510      	push	{r4, lr}
	if (_M_manager)
 23fbae4:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fbae6:	4604      	mov	r4, r0
	if (_M_manager)
 23fbae8:	b12b      	cbz	r3, 23fbaf6 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fbaea:	2203      	movs	r2, #3
 23fbaec:	4601      	mov	r1, r0
 23fbaee:	4798      	blx	r3
	    _M_manager = nullptr;
 23fbaf0:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fbaf2:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fbaf6:	bd10      	pop	{r4, pc}

023fbaf8 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fbaf8:	b510      	push	{r4, lr}
	if (_M_manager)
 23fbafa:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fbafc:	4604      	mov	r4, r0
	if (_M_manager)
 23fbafe:	b12b      	cbz	r3, 23fbb0c <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fbb00:	2203      	movs	r2, #3
 23fbb02:	4601      	mov	r1, r0
 23fbb04:	4798      	blx	r3
	    _M_manager = nullptr;
 23fbb06:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fbb08:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fbb0c:	bd10      	pop	{r4, pc}

023fbb0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fbb0e:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fbb10:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fbb12:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fbb14:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fbb16:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fbb18:	d008      	beq.n	23fbb2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fbb1a:	b111      	cbz	r1, 23fbb22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fbb1c:	684b      	ldr	r3, [r1, #4]
 23fbb1e:	3301      	adds	r3, #1
 23fbb20:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fbb22:	6828      	ldr	r0, [r5, #0]
 23fbb24:	b108      	cbz	r0, 23fbb2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fbb26:	f7fe fc33 	bl	23fa390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fbb2a:	602c      	str	r4, [r5, #0]
      }
 23fbb2c:	bd38      	pop	{r3, r4, r5, pc}
	...

023fbb30 <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fbb30:	2300      	movs	r3, #0
    WiringBleLock() :
 23fbb32:	b510      	push	{r4, lr}
            locked_(false) {
 23fbb34:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23fbb36:	4b04      	ldr	r3, [pc, #16]	; (23fbb48 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fbb38:	4604      	mov	r4, r0
 23fbb3a:	6818      	ldr	r0, [r3, #0]
 23fbb3c:	f7fe f822 	bl	23f9b84 <os_mutex_recursive_lock>
        locked_ = true;
 23fbb40:	2301      	movs	r3, #1
    }
 23fbb42:	4620      	mov	r0, r4
        locked_ = true;
 23fbb44:	7023      	strb	r3, [r4, #0]
    }
 23fbb46:	bd10      	pop	{r4, pc}
 23fbb48:	1007af00 	.word	0x1007af00

023fbb4c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fbb4c:	b510      	push	{r4, lr}
        if (locked_) {
 23fbb4e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fbb50:	4604      	mov	r4, r0
        if (locked_) {
 23fbb52:	b11b      	cbz	r3, 23fbb5c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fbb54:	4b02      	ldr	r3, [pc, #8]	; (23fbb60 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fbb56:	6818      	ldr	r0, [r3, #0]
 23fbb58:	f7fe f822 	bl	23f9ba0 <os_mutex_recursive_unlock>
    }
 23fbb5c:	4620      	mov	r0, r4
 23fbb5e:	bd10      	pop	{r4, pc}
 23fbb60:	1007af00 	.word	0x1007af00

023fbb64 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
 23fbb64:	2905      	cmp	r1, #5
    return address_.addr[i];
 23fbb66:	bf94      	ite	ls
 23fbb68:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
 23fbb6a:	2000      	movhi	r0, #0
}
 23fbb6c:	4770      	bx	lr

023fbb6e <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fbb6e:	b082      	sub	sp, #8
    address_ = addr;
 23fbb70:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fbb72:	4603      	mov	r3, r0
    address_ = addr;
 23fbb74:	6808      	ldr	r0, [r1, #0]
 23fbb76:	6849      	ldr	r1, [r1, #4]
 23fbb78:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fbb7a:	466a      	mov	r2, sp
 23fbb7c:	ca03      	ldmia	r2!, {r0, r1}
 23fbb7e:	6018      	str	r0, [r3, #0]
}
 23fbb80:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fbb82:	6059      	str	r1, [r3, #4]
}
 23fbb84:	b002      	add	sp, #8
 23fbb86:	4770      	bx	lr

023fbb88 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fbb88:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fbb8a:	7982      	ldrb	r2, [r0, #6]
 23fbb8c:	798b      	ldrb	r3, [r1, #6]
 23fbb8e:	429a      	cmp	r2, r3
 23fbb90:	d106      	bne.n	23fbba0 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fbb92:	2206      	movs	r2, #6
 23fbb94:	f001 ff81 	bl	23fda9a <memcmp>
 23fbb98:	fab0 f080 	clz	r0, r0
 23fbb9c:	0940      	lsrs	r0, r0, #5
}
 23fbb9e:	bd08      	pop	{r3, pc}
    return false;
 23fbba0:	2000      	movs	r0, #0
 23fbba2:	e7fc      	b.n	23fbb9e <_ZNK8particle10BleAddresseqERKS0_+0x16>

023fbba4 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fbba4:	b570      	push	{r4, r5, r6, lr}
 23fbba6:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fbba8:	4b38      	ldr	r3, [pc, #224]	; (23fbc8c <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fbbaa:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fbbac:	6818      	ldr	r0, [r3, #0]
 23fbbae:	889b      	ldrh	r3, [r3, #4]
 23fbbb0:	9000      	str	r0, [sp, #0]
 23fbbb2:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fbbb6:	4b36      	ldr	r3, [pc, #216]	; (23fbc90 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fbbb8:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fbbba:	6818      	ldr	r0, [r3, #0]
 23fbbbc:	889b      	ldrh	r3, [r3, #4]
 23fbbbe:	9002      	str	r0, [sp, #8]
 23fbbc0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fbbc4:	b97e      	cbnz	r6, 23fbbe6 <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fbbc6:	2206      	movs	r2, #6
 23fbbc8:	4669      	mov	r1, sp
 23fbbca:	4620      	mov	r0, r4
 23fbbcc:	f001 ff65 	bl	23fda9a <memcmp>
 23fbbd0:	b138      	cbz	r0, 23fbbe2 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fbbd2:	2206      	movs	r2, #6
 23fbbd4:	4620      	mov	r0, r4
 23fbbd6:	a902      	add	r1, sp, #8
 23fbbd8:	f001 ff5f 	bl	23fda9a <memcmp>
 23fbbdc:	3800      	subs	r0, #0
 23fbbde:	bf18      	it	ne
 23fbbe0:	2001      	movne	r0, #1
}
 23fbbe2:	b006      	add	sp, #24
 23fbbe4:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fbbe6:	88a3      	ldrh	r3, [r4, #4]
 23fbbe8:	6820      	ldr	r0, [r4, #0]
 23fbbea:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fbbee:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fbbf2:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fbbf4:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fbbf6:	d124      	bne.n	23fbc42 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fbbf8:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fbbfc:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fbbfe:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fbc02:	4669      	mov	r1, sp
 23fbc04:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fbc06:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fbc0a:	f001 ff46 	bl	23fda9a <memcmp>
 23fbc0e:	2800      	cmp	r0, #0
 23fbc10:	d03a      	beq.n	23fbc88 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fbc12:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fbc16:	2206      	movs	r2, #6
 23fbc18:	a902      	add	r1, sp, #8
 23fbc1a:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fbc1c:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fbc20:	f001 ff3b 	bl	23fda9a <memcmp>
 23fbc24:	b380      	cbz	r0, 23fbc88 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fbc26:	7960      	ldrb	r0, [r4, #5]
 23fbc28:	2e01      	cmp	r6, #1
 23fbc2a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fbc2e:	d104      	bne.n	23fbc3a <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fbc30:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fbc32:	bf14      	ite	ne
 23fbc34:	2000      	movne	r0, #0
 23fbc36:	2001      	moveq	r0, #1
 23fbc38:	e7d3      	b.n	23fbbe2 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fbc3a:	fab0 f080 	clz	r0, r0
 23fbc3e:	0940      	lsrs	r0, r0, #5
 23fbc40:	e7cf      	b.n	23fbbe2 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fbc42:	2e02      	cmp	r6, #2
 23fbc44:	d11e      	bne.n	23fbc84 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fbc46:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fbc48:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fbc4c:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fbc50:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fbc54:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fbc58:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fbc5c:	f001 ff1d 	bl	23fda9a <memcmp>
 23fbc60:	b190      	cbz	r0, 23fbc88 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fbc62:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fbc66:	2203      	movs	r2, #3
 23fbc68:	f10d 010b 	add.w	r1, sp, #11
 23fbc6c:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fbc70:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fbc74:	f001 ff11 	bl	23fda9a <memcmp>
 23fbc78:	b130      	cbz	r0, 23fbc88 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fbc7a:	7960      	ldrb	r0, [r4, #5]
 23fbc7c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fbc80:	2840      	cmp	r0, #64	; 0x40
 23fbc82:	e7d6      	b.n	23fbc32 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fbc84:	2001      	movs	r0, #1
 23fbc86:	e7ac      	b.n	23fbbe2 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fbc88:	2000      	movs	r0, #0
 23fbc8a:	e7aa      	b.n	23fbbe2 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fbc8c:	023fde18 	.word	0x023fde18
 23fbc90:	023ffbbe 	.word	0x023ffbbe

023fbc94 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fbc94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fbc98:	6003      	str	r3, [r0, #0]
 23fbc9a:	8083      	strh	r3, [r0, #4]
}
 23fbc9c:	2000      	movs	r0, #0
 23fbc9e:	4770      	bx	lr

023fbca0 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fbca0:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fbca2:	4602      	mov	r2, r0
 23fbca4:	b508      	push	{r3, lr}
        : address_{} {
 23fbca6:	6001      	str	r1, [r0, #0]
 23fbca8:	6041      	str	r1, [r0, #4]
    clear();
 23fbcaa:	f7ff fff3 	bl	23fbc94 <_ZN8particle10BleAddress5clearEv>
}
 23fbcae:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fbcb0:	7191      	strb	r1, [r2, #6]
}
 23fbcb2:	bd08      	pop	{r3, pc}

023fbcb4 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23fbcb4:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fbcb6:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23fbcb8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23fbcba:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fbcbc:	4b04      	ldr	r3, [pc, #16]	; (23fbcd0 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fbcbe:	f103 0110 	add.w	r1, r3, #16
 23fbcc2:	f853 4b04 	ldr.w	r4, [r3], #4
 23fbcc6:	428b      	cmp	r3, r1
 23fbcc8:	f842 4b04 	str.w	r4, [r2], #4
 23fbccc:	d1f9      	bne.n	23fbcc2 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fbcce:	bd10      	pop	{r4, pc}
 23fbcd0:	023fde1e 	.word	0x023fde1e

023fbcd4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fbcd4:	b510      	push	{r4, lr}
    if (uuid128) {
 23fbcd6:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fbcd8:	4604      	mov	r4, r0
    if (uuid128) {
 23fbcda:	b1b1      	cbz	r1, 23fbd0a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fbcdc:	2a01      	cmp	r2, #1
 23fbcde:	f101 0210 	add.w	r2, r1, #16
 23fbce2:	d10a      	bne.n	23fbcfa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fbce4:	4601      	mov	r1, r0
 23fbce6:	f853 0b04 	ldr.w	r0, [r3], #4
 23fbcea:	4293      	cmp	r3, r2
 23fbcec:	f841 0b04 	str.w	r0, [r1], #4
 23fbcf0:	d1f9      	bne.n	23fbce6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fbcf2:	2301      	movs	r3, #1
 23fbcf4:	6123      	str	r3, [r4, #16]
}
 23fbcf6:	4620      	mov	r0, r4
 23fbcf8:	bd10      	pop	{r4, pc}
 23fbcfa:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fbcfc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fbd00:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fbd02:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fbd06:	d1f9      	bne.n	23fbcfc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fbd08:	e7f3      	b.n	23fbcf2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fbd0a:	2210      	movs	r2, #16
 23fbd0c:	f001 fefc 	bl	23fdb08 <memset>
 23fbd10:	e7f1      	b.n	23fbcf6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fbd12 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23fbd12:	b538      	push	{r3, r4, r5, lr}
 23fbd14:	4604      	mov	r4, r0
 23fbd16:	460d      	mov	r5, r1
        : BleUuid() {
 23fbd18:	f7ff ffcc 	bl	23fbcb4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23fbd1c:	2300      	movs	r3, #0
}
 23fbd1e:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23fbd20:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fbd22:	81a5      	strh	r5, [r4, #12]
}
 23fbd24:	bd38      	pop	{r3, r4, r5, pc}

023fbd26 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fbd26:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fbd28:	6902      	ldr	r2, [r0, #16]
 23fbd2a:	690b      	ldr	r3, [r1, #16]
 23fbd2c:	429a      	cmp	r2, r3
 23fbd2e:	d106      	bne.n	23fbd3e <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fbd30:	2210      	movs	r2, #16
 23fbd32:	f001 feb2 	bl	23fda9a <memcmp>
 23fbd36:	fab0 f080 	clz	r0, r0
 23fbd3a:	0940      	lsrs	r0, r0, #5
}
 23fbd3c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fbd3e:	2000      	movs	r0, #0
 23fbd40:	e7fc      	b.n	23fbd3c <_ZNK8particle7BleUuideqERKS0_+0x16>

023fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23fbd42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fbd44:	4605      	mov	r5, r0
 23fbd46:	4616      	mov	r6, r2
 23fbd48:	461f      	mov	r7, r3
 23fbd4a:	460a      	mov	r2, r1
 23fbd4c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbd50:	ab01      	add	r3, sp, #4
 23fbd52:	f7ff feb1 	bl	23fbab8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23fbd56:	f030 0402 	bics.w	r4, r0, #2
 23fbd5a:	d00c      	beq.n	23fbd76 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23fbd5c:	1e84      	subs	r4, r0, #2
 23fbd5e:	42bc      	cmp	r4, r7
 23fbd60:	bf28      	it	cs
 23fbd62:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23fbd64:	b13e      	cbz	r6, 23fbd76 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23fbd66:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23fbd68:	682b      	ldr	r3, [r5, #0]
 23fbd6a:	3102      	adds	r1, #2
 23fbd6c:	4622      	mov	r2, r4
 23fbd6e:	4630      	mov	r0, r6
 23fbd70:	4419      	add	r1, r3
 23fbd72:	f001 fea2 	bl	23fdaba <memcpy>
}
 23fbd76:	4620      	mov	r0, r4
 23fbd78:	b003      	add	sp, #12
 23fbd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fbd7c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fbd7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbd7e:	4613      	mov	r3, r2
 23fbd80:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fbd82:	9201      	str	r2, [sp, #4]
 23fbd84:	460a      	mov	r2, r1
 23fbd86:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fbd88:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fbd8a:	f7ff ffda 	bl	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23fbd8e:	b940      	cbnz	r0, 23fbda2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fbd90:	4622      	mov	r2, r4
 23fbd92:	2109      	movs	r1, #9
 23fbd94:	4628      	mov	r0, r5
 23fbd96:	9b01      	ldr	r3, [sp, #4]
}
 23fbd98:	b003      	add	sp, #12
 23fbd9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fbd9e:	f7ff bfd0 	b.w	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23fbda2:	b003      	add	sp, #12
 23fbda4:	bd30      	pop	{r4, r5, pc}
	...

023fbda8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23fbda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fbdaa:	460c      	mov	r4, r1
 23fbdac:	b089      	sub	sp, #36	; 0x24
    String name;
 23fbdae:	490c      	ldr	r1, [pc, #48]	; (23fbde0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23fbdb0:	4605      	mov	r5, r0
    String name;
 23fbdb2:	f001 f9fc 	bl	23fd1ae <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23fbdb6:	221f      	movs	r2, #31
 23fbdb8:	4669      	mov	r1, sp
 23fbdba:	4620      	mov	r0, r4
 23fbdbc:	f7ff ffde 	bl	23fbd7c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23fbdc0:	4606      	mov	r6, r0
 23fbdc2:	b150      	cbz	r0, 23fbdda <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23fbdc4:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23fbdc6:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23fbdc8:	4628      	mov	r0, r5
 23fbdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fbdce:	f001 fa5b 	bl	23fd288 <_ZN6String6concatEc>
 23fbdd2:	b110      	cbz	r0, 23fbdda <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23fbdd4:	3701      	adds	r7, #1
 23fbdd6:	42be      	cmp	r6, r7
 23fbdd8:	d1f6      	bne.n	23fbdc8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23fbdda:	4628      	mov	r0, r5
 23fbddc:	b009      	add	sp, #36	; 0x24
 23fbdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fbde0:	023fdf87 	.word	0x023fdf87

023fbde4 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23fbde4:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23fbde6:	2302      	movs	r3, #2
 23fbde8:	2119      	movs	r1, #25
 23fbdea:	aa01      	add	r2, sp, #4
 23fbdec:	f7ff ffa9 	bl	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23fbdf0:	b108      	cbz	r0, 23fbdf6 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23fbdf2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23fbdf6:	b003      	add	sp, #12
 23fbdf8:	f85d fb04 	ldr.w	pc, [sp], #4

023fbdfc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fbdfc:	b510      	push	{r4, lr}
    return data_ + size_;
 23fbdfe:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fbe02:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fbe06:	4293      	cmp	r3, r2
 23fbe08:	4618      	mov	r0, r3
 23fbe0a:	d005      	beq.n	23fbe18 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fbe0c:	6804      	ldr	r4, [r0, #0]
 23fbe0e:	3308      	adds	r3, #8
 23fbe10:	8824      	ldrh	r4, [r4, #0]
 23fbe12:	428c      	cmp	r4, r1
 23fbe14:	d1f7      	bne.n	23fbe06 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
 23fbe16:	bd10      	pop	{r4, pc}
        return nullptr;
 23fbe18:	2000      	movs	r0, #0
 23fbe1a:	e7fc      	b.n	23fbe16 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>

023fbe1c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fbe1c:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fbe1e:	2500      	movs	r5, #0
 23fbe20:	4606      	mov	r6, r0
 23fbe22:	6005      	str	r5, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fbe24:	2030      	movs	r0, #48	; 0x30
 23fbe26:	f7fc fe2a 	bl	23f8a7e <_Znwj>
	  auto __pi = ::new (__mem)
 23fbe2a:	4604      	mov	r4, r0
 23fbe2c:	b198      	cbz	r0, 23fbe56 <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fbe2e:	2301      	movs	r3, #1
 23fbe30:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fbe34:	4b0a      	ldr	r3, [pc, #40]	; (23fbe60 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fbe36:	300e      	adds	r0, #14
 23fbe38:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fbe3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fbe40:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fbe44:	f7ff ff2c 	bl	23fbca0 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fbe48:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fbe4c:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fbe50:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fbe54:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fbe56:	6074      	str	r4, [r6, #4]
 23fbe58:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fbe5a:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fbe5c:	6034      	str	r4, [r6, #0]
 23fbe5e:	bd70      	pop	{r4, r5, r6, pc}
 23fbe60:	023ffc68 	.word	0x023ffc68

023fbe64 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
 23fbe64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbe66:	460d      	mov	r5, r1
 23fbe68:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fbe6a:	a801      	add	r0, sp, #4
 23fbe6c:	f7ff fe60 	bl	23fbb30 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fbe70:	682a      	ldr	r2, [r5, #0]
 23fbe72:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fbe74:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fbe78:	6023      	str	r3, [r4, #0]
 23fbe7a:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fbe7e:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fbe80:	f7ff fe64 	bl	23fbb4c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fbe84:	4620      	mov	r0, r4
 23fbe86:	b003      	add	sp, #12
 23fbe88:	bd30      	pop	{r4, r5, pc}

023fbe8a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fbe8a:	b530      	push	{r4, r5, lr}
 23fbe8c:	4605      	mov	r5, r0
 23fbe8e:	460c      	mov	r4, r1
 23fbe90:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fbe92:	a801      	add	r0, sp, #4
 23fbe94:	f7ff fe4c 	bl	23fbb30 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fbe98:	682a      	ldr	r2, [r5, #0]
 23fbe9a:	6823      	ldr	r3, [r4, #0]
 23fbe9c:	8812      	ldrh	r2, [r2, #0]
 23fbe9e:	881b      	ldrh	r3, [r3, #0]
 23fbea0:	429a      	cmp	r2, r3
 23fbea2:	d10d      	bne.n	23fbec0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fbea4:	4629      	mov	r1, r5
 23fbea6:	a802      	add	r0, sp, #8
 23fbea8:	f7ff ffdc 	bl	23fbe64 <_ZNK8particle13BlePeerDevice7addressEv>
 23fbeac:	4621      	mov	r1, r4
 23fbeae:	a804      	add	r0, sp, #16
 23fbeb0:	f7ff ffd8 	bl	23fbe64 <_ZNK8particle13BlePeerDevice7addressEv>
 23fbeb4:	a904      	add	r1, sp, #16
 23fbeb6:	a802      	add	r0, sp, #8
 23fbeb8:	f7ff fe66 	bl	23fbb88 <_ZNK8particle10BleAddresseqERKS0_>
 23fbebc:	4604      	mov	r4, r0
 23fbebe:	b900      	cbnz	r0, 23fbec2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fbec0:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fbec2:	a801      	add	r0, sp, #4
 23fbec4:	f7ff fe42 	bl	23fbb4c <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fbec8:	4620      	mov	r0, r4
 23fbeca:	b007      	add	sp, #28
 23fbecc:	bd30      	pop	{r4, r5, pc}
	...

023fbed0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fbed0:	b570      	push	{r4, r5, r6, lr}
 23fbed2:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fbed4:	2074      	movs	r0, #116	; 0x74
 23fbed6:	f7fc fdd2 	bl	23f8a7e <_Znwj>
 23fbeda:	4604      	mov	r4, r0
 23fbedc:	b1a0      	cbz	r0, 23fbf08 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fbede:	2500      	movs	r5, #0
 23fbee0:	e9c0 5500 	strd	r5, r5, [r0]
 23fbee4:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fbee8:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fbeec:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fbef0:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fbef2:	3024      	adds	r0, #36	; 0x24
 23fbef4:	f7ff ff92 	bl	23fbe1c <_ZN8particle13BlePeerDeviceC1Ev>
 23fbef8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fbefc:	f7ff ff8e 	bl	23fbe1c <_ZN8particle13BlePeerDeviceC1Ev>
    _Function_base() : _M_manager(nullptr) { }
 23fbf00:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fbf02:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fbf04:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fbf06:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fbf08:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fbf0a:	b924      	cbnz	r4, 23fbf16 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fbf0c:	200a      	movs	r0, #10
 23fbf0e:	4a0a      	ldr	r2, [pc, #40]	; (23fbf38 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fbf10:	490a      	ldr	r1, [pc, #40]	; (23fbf3c <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fbf12:	f7fd feed 	bl	23f9cf0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fbf16:	2000      	movs	r0, #0
 23fbf18:	f7fd fe50 	bl	23f9bbc <hal_ble_stack_init>
 23fbf1c:	b120      	cbz	r0, 23fbf28 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fbf1e:	200a      	movs	r0, #10
 23fbf20:	4a05      	ldr	r2, [pc, #20]	; (23fbf38 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fbf22:	4907      	ldr	r1, [pc, #28]	; (23fbf40 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fbf24:	f7fd fee4 	bl	23f9cf0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fbf28:	2200      	movs	r2, #0
 23fbf2a:	6831      	ldr	r1, [r6, #0]
 23fbf2c:	4805      	ldr	r0, [pc, #20]	; (23fbf44 <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fbf2e:	f7fd fe7d 	bl	23f9c2c <hal_ble_set_callback_on_periph_link_events>
}
 23fbf32:	4630      	mov	r0, r6
 23fbf34:	bd70      	pop	{r4, r5, r6, pc}
 23fbf36:	bf00      	nop
 23fbf38:	023f9c65 	.word	0x023f9c65
 23fbf3c:	023ffb80 	.word	0x023ffb80
 23fbf40:	023ffbc5 	.word	0x023ffbc5
 23fbf44:	023fc775 	.word	0x023fc775

023fbf48 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fbf48:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fbf4a:	4c0a      	ldr	r4, [pc, #40]	; (23fbf74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fbf4c:	e8d4 3f8f 	ldab	r3, [r4]
 23fbf50:	07db      	lsls	r3, r3, #31
 23fbf52:	d40c      	bmi.n	23fbf6e <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fbf54:	4620      	mov	r0, r4
 23fbf56:	f7fc fda5 	bl	23f8aa4 <__cxa_guard_acquire>
 23fbf5a:	b140      	cbz	r0, 23fbf6e <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fbf5c:	4806      	ldr	r0, [pc, #24]	; (23fbf78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fbf5e:	f7ff ffb7 	bl	23fbed0 <_ZN8particle14BleLocalDeviceC1Ev>
 23fbf62:	4620      	mov	r0, r4
 23fbf64:	f7fc fda3 	bl	23f8aae <__cxa_guard_release>
 23fbf68:	4804      	ldr	r0, [pc, #16]	; (23fbf7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fbf6a:	f001 fd85 	bl	23fda78 <atexit>
    return instance;
}
 23fbf6e:	4802      	ldr	r0, [pc, #8]	; (23fbf78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fbf70:	bd10      	pop	{r4, pc}
 23fbf72:	bf00      	nop
 23fbf74:	1007aefc 	.word	0x1007aefc
 23fbf78:	1007af04 	.word	0x1007af04
 23fbf7c:	023fca21 	.word	0x023fca21

023fbf80 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23fbf80:	b510      	push	{r4, lr}
 23fbf82:	4604      	mov	r4, r0
    ::free(ptr);
 23fbf84:	6940      	ldr	r0, [r0, #20]
 23fbf86:	f7fe f803 	bl	23f9f90 <free>
 23fbf8a:	68a0      	ldr	r0, [r4, #8]
 23fbf8c:	f7fe f800 	bl	23f9f90 <free>
 23fbf90:	4620      	mov	r0, r4
 23fbf92:	bd10      	pop	{r4, pc}

023fbf94 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23fbf94:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
 23fbf96:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23fbf9a:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
 23fbf9e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fbfa2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23fbfa6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23fbfaa:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23fbfae:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23fbfb2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23fbfb6:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23fbfba:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23fbfbe:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
 23fbfc2:	6202      	str	r2, [r0, #32]
 23fbfc4:	6302      	str	r2, [r0, #48]	; 0x30
 23fbfc6:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
 23fbfca:	4770      	bx	lr

023fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbfcc:	b510      	push	{r4, lr}
 23fbfce:	4604      	mov	r4, r0
    ::free(ptr);
 23fbfd0:	6800      	ldr	r0, [r0, #0]
 23fbfd2:	f7fd ffdd 	bl	23f9f90 <free>
}
 23fbfd6:	4620      	mov	r0, r4
 23fbfd8:	bd10      	pop	{r4, pc}

023fbfda <_ZN8particle16BleScanDelegatorD1Ev>:

    ~BleScanDelegator() = default;
 23fbfda:	b570      	push	{r4, r5, r6, lr}
 23fbfdc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbfde:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23fbfe0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 23fbfe2:	f7fd ffd5 	bl	23f9f90 <free>
 23fbfe6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23fbfe8:	f7fd ffd2 	bl	23f9f90 <free>
    }
    ~BleScanFilter() = default;
 23fbfec:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23fbff0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fbff4:	f7ff ffea 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23fbff8:	4628      	mov	r0, r5
 23fbffa:	f7fe ff89 	bl	23faf10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23fbffe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fc002:	f7fd f91d 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
 23fc006:	f104 0018 	add.w	r0, r4, #24
 23fc00a:	f7fd f919 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23fc00e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc012:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc016:	42ae      	cmp	r6, r5
 23fc018:	d004      	beq.n	23fc024 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
 23fc01a:	4628      	mov	r0, r5
 23fc01c:	f7ff ffb0 	bl	23fbf80 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23fc020:	3524      	adds	r5, #36	; 0x24
 23fc022:	e7f8      	b.n	23fc016 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
 23fc024:	6820      	ldr	r0, [r4, #0]
 23fc026:	f7fd ffb3 	bl	23f9f90 <free>
 23fc02a:	4620      	mov	r0, r4
 23fc02c:	bd70      	pop	{r4, r5, r6, pc}

023fc02e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fc02e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fc030:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fc032:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fc034:	6843      	ldr	r3, [r0, #4]
 23fc036:	db02      	blt.n	23fc03e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fc038:	1862      	adds	r2, r4, r1
 23fc03a:	429a      	cmp	r2, r3
 23fc03c:	dd00      	ble.n	23fc040 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fc03e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fc040:	682a      	ldr	r2, [r5, #0]
 23fc042:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fc044:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fc046:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc048:	1a52      	subs	r2, r2, r1
 23fc04a:	f001 fd43 	bl	23fdad4 <memmove>
    size_ -= n;
 23fc04e:	686a      	ldr	r2, [r5, #4]
 23fc050:	1b12      	subs	r2, r2, r4
 23fc052:	606a      	str	r2, [r5, #4]
}
 23fc054:	bd38      	pop	{r3, r4, r5, pc}

023fc056 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fc056:	680b      	ldr	r3, [r1, #0]
 23fc058:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fc05a:	b113      	cbz	r3, 23fc062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fc05c:	685a      	ldr	r2, [r3, #4]
 23fc05e:	3201      	adds	r2, #1
 23fc060:	605a      	str	r2, [r3, #4]
      }
 23fc062:	4770      	bx	lr

023fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc064:	b510      	push	{r4, lr}
 23fc066:	4604      	mov	r4, r0
 23fc068:	f851 3b04 	ldr.w	r3, [r1], #4
 23fc06c:	f840 3b04 	str.w	r3, [r0], #4
 23fc070:	f7ff fff1 	bl	23fc056 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fc074:	4620      	mov	r0, r4
 23fc076:	bd10      	pop	{r4, pc}

023fc078 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc078:	b570      	push	{r4, r5, r6, lr}
 23fc07a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc07c:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc080:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fc084:	42ae      	cmp	r6, r5
 23fc086:	d004      	beq.n	23fc092 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
 23fc088:	1d28      	adds	r0, r5, #4
 23fc08a:	f7fe fb1f 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc08e:	3508      	adds	r5, #8
 23fc090:	e7f8      	b.n	23fc084 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc092:	6820      	ldr	r0, [r4, #0]
 23fc094:	f7fd ff7c 	bl	23f9f90 <free>
}
 23fc098:	4620      	mov	r0, r4
 23fc09a:	bd70      	pop	{r4, r5, r6, pc}

023fc09c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc09c:	b570      	push	{r4, r5, r6, lr}
 23fc09e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc0a0:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc0a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fc0a8:	42ae      	cmp	r6, r5
 23fc0aa:	d004      	beq.n	23fc0b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fc0ac:	1d28      	adds	r0, r5, #4
 23fc0ae:	f7fe fb0d 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc0b2:	3508      	adds	r5, #8
 23fc0b4:	e7f8      	b.n	23fc0a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc0b6:	6820      	ldr	r0, [r4, #0]
 23fc0b8:	f7fd ff6a 	bl	23f9f90 <free>
}
 23fc0bc:	4620      	mov	r0, r4
 23fc0be:	bd70      	pop	{r4, r5, r6, pc}

023fc0c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fc0c0:	b510      	push	{r4, lr}
 23fc0c2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fc0c4:	3024      	adds	r0, #36	; 0x24
 23fc0c6:	f7ff ffe9 	bl	23fc09c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fc0ca:	f104 0018 	add.w	r0, r4, #24
 23fc0ce:	f7ff ffd3 	bl	23fc078 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fc0d2:	bd10      	pop	{r4, pc}

023fc0d4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fc0d4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fc0d6:	b510      	push	{r4, lr}
      if (_M_empty())
 23fc0d8:	b90a      	cbnz	r2, 23fc0de <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fc0da:	f001 fbb7 	bl	23fd84c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc0de:	68c3      	ldr	r3, [r0, #12]
    }
 23fc0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc0e4:	4718      	bx	r3

023fc0e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc0e6:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fc0ec:	e9c0 3300 	strd	r3, r3, [r0]
 23fc0f0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc0f2:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc0f6:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc0f8:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc0fa:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc0fc:	dd4a      	ble.n	23fc194 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23fc0fe:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23fc102:	f7fd ff37 	bl	23f9f74 <malloc>
            if (!d) {
 23fc106:	4606      	mov	r6, r0
 23fc108:	2800      	cmp	r0, #0
 23fc10a:	d043      	beq.n	23fc194 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23fc10c:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fc110:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fc112:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23fc116:	d916      	bls.n	23fc146 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23fc118:	4550      	cmp	r0, sl
 23fc11a:	d215      	bcs.n	23fc148 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23fc11c:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23fc120:	f1a4 0910 	sub.w	r9, r4, #16
 23fc124:	ebaa 0404 	sub.w	r4, sl, r4
 23fc128:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fc12a:	45d1      	cmp	r9, sl
 23fc12c:	d01d      	beq.n	23fc16a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23fc12e:	b11c      	cbz	r4, 23fc138 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23fc130:	4651      	mov	r1, sl
 23fc132:	4620      	mov	r0, r4
 23fc134:	f001 f86c 	bl	23fd210 <_ZN6StringC1EOS_>
                end->~T();
 23fc138:	4650      	mov	r0, sl
 23fc13a:	f000 ffed 	bl	23fd118 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc13e:	f1aa 0a10 	sub.w	sl, sl, #16
 23fc142:	3c10      	subs	r4, #16
 23fc144:	e7f1      	b.n	23fc12a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23fc146:	d010      	beq.n	23fc16a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23fc148:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fc14a:	45a2      	cmp	sl, r4
 23fc14c:	d00d      	beq.n	23fc16a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23fc14e:	f1b9 0f00 	cmp.w	r9, #0
 23fc152:	d003      	beq.n	23fc15c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23fc154:	4621      	mov	r1, r4
 23fc156:	4648      	mov	r0, r9
 23fc158:	f001 f85a 	bl	23fd210 <_ZN6StringC1EOS_>
                p->~T();
 23fc15c:	4620      	mov	r0, r4
 23fc15e:	f000 ffdb 	bl	23fd118 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc162:	3410      	adds	r4, #16
 23fc164:	f109 0910 	add.w	r9, r9, #16
 23fc168:	e7ef      	b.n	23fc14a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23fc16a:	6828      	ldr	r0, [r5, #0]
 23fc16c:	f7fd ff10 	bl	23f9f90 <free>
        capacity_ = n;
 23fc170:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23fc174:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc176:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fc17a:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23fc17e:	45a0      	cmp	r8, r4
 23fc180:	d006      	beq.n	23fc190 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23fc182:	4621      	mov	r1, r4
 23fc184:	4630      	mov	r0, r6
 23fc186:	f001 f85d 	bl	23fd244 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23fc18a:	3410      	adds	r4, #16
 23fc18c:	3610      	adds	r6, #16
 23fc18e:	e7f6      	b.n	23fc17e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23fc190:	687b      	ldr	r3, [r7, #4]
 23fc192:	606b      	str	r3, [r5, #4]
}
 23fc194:	4628      	mov	r0, r5
 23fc196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fc19a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
            return false;
        }
        return true;
    }

    bool filterByDeviceName(const BleScanResult& result) {
 23fc19a:	b530      	push	{r4, r5, lr}
 23fc19c:	b08d      	sub	sp, #52	; 0x34
 23fc19e:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23fc1a0:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23fc1a4:	a801      	add	r0, sp, #4
 23fc1a6:	f7ff ff9e 	bl	23fc0e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23fc1aa:	9b02      	ldr	r3, [sp, #8]
 23fc1ac:	2b00      	cmp	r3, #0
 23fc1ae:	dd2f      	ble.n	23fc210 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23fc1b0:	f104 0114 	add.w	r1, r4, #20
 23fc1b4:	a804      	add	r0, sp, #16
 23fc1b6:	f7ff fdf7 	bl	23fbda8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23fc1ba:	f104 0108 	add.w	r1, r4, #8
 23fc1be:	a808      	add	r0, sp, #32
 23fc1c0:	f7ff fdf2 	bl	23fbda8 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23fc1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fc1c6:	9b06      	ldr	r3, [sp, #24]
 23fc1c8:	4313      	orrs	r3, r2
 23fc1ca:	d01f      	beq.n	23fc20c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23fc1cc:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fc1d0:	eb04 1505 	add.w	r5, r4, r5, lsl #4
                LOG_DEBUG(TRACE, "Device name mismatched.");
                return false;
            }
            for (const auto& name : filterDeviceNames) {
 23fc1d4:	42ac      	cmp	r4, r5
 23fc1d6:	d019      	beq.n	23fc20c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23fc1d8:	4620      	mov	r0, r4
 23fc1da:	a904      	add	r1, sp, #16
 23fc1dc:	f001 f876 	bl	23fd2cc <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fc1e0:	b160      	cbz	r0, 23fc1fc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23fc1e2:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23fc1e4:	a808      	add	r0, sp, #32
 23fc1e6:	f000 ff97 	bl	23fd118 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23fc1ea:	a804      	add	r0, sp, #16
 23fc1ec:	f000 ff94 	bl	23fd118 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23fc1f0:	a801      	add	r0, sp, #4
 23fc1f2:	f7fe fe8d 	bl	23faf10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
            }
            LOG_DEBUG(TRACE, "Device name mismatched.");
            return false;
        }
        return true;
    }
 23fc1f6:	4620      	mov	r0, r4
 23fc1f8:	b00d      	add	sp, #52	; 0x34
 23fc1fa:	bd30      	pop	{r4, r5, pc}
 23fc1fc:	4620      	mov	r0, r4
 23fc1fe:	a908      	add	r1, sp, #32
 23fc200:	f001 f864 	bl	23fd2cc <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fc204:	3410      	adds	r4, #16
 23fc206:	2800      	cmp	r0, #0
 23fc208:	d0e4      	beq.n	23fc1d4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23fc20a:	e7ea      	b.n	23fc1e2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23fc20c:	2400      	movs	r4, #0
 23fc20e:	e7e9      	b.n	23fc1e4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23fc210:	2401      	movs	r4, #1
 23fc212:	e7ed      	b.n	23fc1f0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023fc214 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
 23fc216:	2300      	movs	r3, #0
 23fc218:	e9c0 3300 	strd	r3, r3, [r0]
 23fc21c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc21e:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc220:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc222:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc224:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc226:	dd40      	ble.n	23fc2aa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
    return ::malloc(size);
 23fc228:	00f8      	lsls	r0, r7, #3
 23fc22a:	f7fd fea3 	bl	23f9f74 <malloc>
            if (!d) {
 23fc22e:	4604      	mov	r4, r0
 23fc230:	b3d8      	cbz	r0, 23fc2aa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
            move(d, data_, data_ + size_);
 23fc232:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
 23fc236:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fc238:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
 23fc23c:	d910      	bls.n	23fc260 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
 23fc23e:	429c      	cmp	r4, r3
 23fc240:	d20f      	bcs.n	23fc262 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
 23fc242:	3b08      	subs	r3, #8
            dest += end - p - 1;
 23fc244:	1a1a      	subs	r2, r3, r0
 23fc246:	f1a0 0c08 	sub.w	ip, r0, #8
 23fc24a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
 23fc24c:	459c      	cmp	ip, r3
 23fc24e:	d018      	beq.n	23fc282 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
 23fc250:	b11a      	cbz	r2, 23fc25a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
 23fc252:	6819      	ldr	r1, [r3, #0]
 23fc254:	6011      	str	r1, [r2, #0]
 23fc256:	6859      	ldr	r1, [r3, #4]
 23fc258:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
 23fc25a:	3b08      	subs	r3, #8
 23fc25c:	3a08      	subs	r2, #8
 23fc25e:	e7f5      	b.n	23fc24c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
 23fc260:	d00f      	beq.n	23fc282 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
 23fc262:	4601      	mov	r1, r0
 23fc264:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
 23fc266:	428b      	cmp	r3, r1
 23fc268:	d00b      	beq.n	23fc282 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
 23fc26a:	b13a      	cbz	r2, 23fc27c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
 23fc26c:	f8d1 c000 	ldr.w	ip, [r1]
 23fc270:	f8c2 c000 	str.w	ip, [r2]
 23fc274:	f8d1 c004 	ldr.w	ip, [r1, #4]
 23fc278:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
 23fc27c:	3108      	adds	r1, #8
 23fc27e:	3208      	adds	r2, #8
 23fc280:	e7f1      	b.n	23fc266 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
 23fc282:	f7fd fe85 	bl	23f9f90 <free>
        data_ = d;
 23fc286:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc288:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc28a:	e9d6 3100 	ldrd	r3, r1, [r6]
 23fc28e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23fc292:	4298      	cmp	r0, r3
 23fc294:	d008      	beq.n	23fc2a8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x94>
 23fc296:	681a      	ldr	r2, [r3, #0]
 23fc298:	3408      	adds	r4, #8
 23fc29a:	f844 2c08 	str.w	r2, [r4, #-8]
 23fc29e:	685a      	ldr	r2, [r3, #4]
 23fc2a0:	3308      	adds	r3, #8
 23fc2a2:	f844 2c04 	str.w	r2, [r4, #-4]
 23fc2a6:	e7f4      	b.n	23fc292 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
 23fc2a8:	6069      	str	r1, [r5, #4]
}
 23fc2aa:	4628      	mov	r0, r5
 23fc2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc2ae <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc2ae:	b570      	push	{r4, r5, r6, lr}
 23fc2b0:	4604      	mov	r4, r0
        capacity_(0) {
 23fc2b2:	2000      	movs	r0, #0
 23fc2b4:	e9c4 0000 	strd	r0, r0, [r4]
 23fc2b8:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc2ba:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc2bc:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc2be:	4286      	cmp	r6, r0
 23fc2c0:	dd12      	ble.n	23fc2e8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23fc2c2:	0071      	lsls	r1, r6, #1
 23fc2c4:	f7fd fe72 	bl	23f9fac <realloc>
            if (!d) {
 23fc2c8:	b170      	cbz	r0, 23fc2e8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23fc2ca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fc2cc:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc2ce:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fc2d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23fc2d6:	429a      	cmp	r2, r3
 23fc2d8:	d004      	beq.n	23fc2e4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23fc2da:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fc2de:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23fc2e2:	e7f8      	b.n	23fc2d6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23fc2e4:	686b      	ldr	r3, [r5, #4]
 23fc2e6:	6063      	str	r3, [r4, #4]
}
 23fc2e8:	4620      	mov	r0, r4
 23fc2ea:	bd70      	pop	{r4, r5, r6, pc}

023fc2ec <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23fc2ec:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fc2ee:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fc2f0:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fc2f2:	b923      	cbnz	r3, 23fc2fe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                LOG_DEBUG(TRACE, "Custom data mismatched.");
                return false;
            }
            if (srLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(srLen);
                SCOPE_GUARD({
 23fc2f4:	6803      	ldr	r3, [r0, #0]
 23fc2f6:	6818      	ldr	r0, [r3, #0]
 23fc2f8:	b108      	cbz	r0, 23fc2fe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23fc2fa:	f7fd fe49 	bl	23f9f90 <free>
            func_();
        }
    }
 23fc2fe:	4620      	mov	r0, r4
 23fc300:	bd10      	pop	{r4, pc}

023fc302 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23fc302:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fc304:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fc306:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fc308:	b923      	cbnz	r3, 23fc314 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                    return true;
                }
            }
            if (advLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(advLen);
                SCOPE_GUARD({
 23fc30a:	6803      	ldr	r3, [r0, #0]
 23fc30c:	6818      	ldr	r0, [r3, #0]
 23fc30e:	b108      	cbz	r0, 23fc314 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23fc310:	f7fd fe3e 	bl	23f9f90 <free>
    }
 23fc314:	4620      	mov	r0, r4
 23fc316:	bd10      	pop	{r4, pc}

023fc318 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23fc318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23fc31c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23fc320:	460f      	mov	r7, r1
 23fc322:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23fc324:	f1b8 0f00 	cmp.w	r8, #0
 23fc328:	d072      	beq.n	23fc410 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23fc32a:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23fc32c:	2d00      	cmp	r5, #0
 23fc32e:	d06f      	beq.n	23fc410 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23fc330:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fc334:	231f      	movs	r3, #31
 23fc336:	2200      	movs	r2, #0
 23fc338:	21ff      	movs	r1, #255	; 0xff
 23fc33a:	4648      	mov	r0, r9
 23fc33c:	f7ff fd01 	bl	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fc340:	23ff      	movs	r3, #255	; 0xff
        return advertisingData_;
 23fc342:	3708      	adds	r7, #8
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fc344:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fc346:	2200      	movs	r2, #0
 23fc348:	4619      	mov	r1, r3
 23fc34a:	4638      	mov	r0, r7
 23fc34c:	f7ff fcf9 	bl	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fc350:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fc352:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fc354:	d006      	beq.n	23fc364 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23fc356:	42ae      	cmp	r6, r5
 23fc358:	d030      	beq.n	23fc3bc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23fc35a:	2400      	movs	r4, #0
            }
            LOG_DEBUG(TRACE, "Custom data mismatched.");
            return false;
        }
        return true;
    }
 23fc35c:	4620      	mov	r0, r4
 23fc35e:	b00f      	add	sp, #60	; 0x3c
 23fc360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23fc364:	4620      	mov	r0, r4
 23fc366:	f7fd fe05 	bl	23f9f74 <malloc>
            dismissed_(false) {
 23fc36a:	ab03      	add	r3, sp, #12
 23fc36c:	9304      	str	r3, [sp, #16]
 23fc36e:	2300      	movs	r3, #0
 23fc370:	4604      	mov	r4, r0
 23fc372:	9003      	str	r0, [sp, #12]
 23fc374:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23fc378:	b970      	cbnz	r0, 23fc398 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23fc37a:	2320      	movs	r3, #32
 23fc37c:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fc380:	4b24      	ldr	r3, [pc, #144]	; (23fc414 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fc382:	4925      	ldr	r1, [pc, #148]	; (23fc418 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fc384:	9300      	str	r3, [sp, #0]
 23fc386:	aa06      	add	r2, sp, #24
 23fc388:	4603      	mov	r3, r0
 23fc38a:	2032      	movs	r0, #50	; 0x32
 23fc38c:	f7fd fcbe 	bl	23f9d0c <log_message>
                    return false;
 23fc390:	a804      	add	r0, sp, #16
 23fc392:	f7ff ffab 	bl	23fc2ec <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23fc396:	e7e1      	b.n	23fc35c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23fc398:	4602      	mov	r2, r0
 23fc39a:	21ff      	movs	r1, #255	; 0xff
 23fc39c:	462b      	mov	r3, r5
 23fc39e:	4648      	mov	r0, r9
 23fc3a0:	f7ff fccf 	bl	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23fc3a4:	462a      	mov	r2, r5
 23fc3a6:	4641      	mov	r1, r8
 23fc3a8:	9803      	ldr	r0, [sp, #12]
 23fc3aa:	f001 fb76 	bl	23fda9a <memcmp>
 23fc3ae:	b118      	cbz	r0, 23fc3b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23fc3b0:	a804      	add	r0, sp, #16
 23fc3b2:	f7ff ff9b 	bl	23fc2ec <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23fc3b6:	e7ce      	b.n	23fc356 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23fc3b8:	2401      	movs	r4, #1
 23fc3ba:	e7e9      	b.n	23fc390 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23fc3bc:	4628      	mov	r0, r5
 23fc3be:	f7fd fdd9 	bl	23f9f74 <malloc>
 23fc3c2:	2400      	movs	r4, #0
 23fc3c4:	ab03      	add	r3, sp, #12
 23fc3c6:	4606      	mov	r6, r0
 23fc3c8:	9003      	str	r0, [sp, #12]
 23fc3ca:	9304      	str	r3, [sp, #16]
 23fc3cc:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23fc3d0:	b978      	cbnz	r0, 23fc3f2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23fc3d2:	2320      	movs	r3, #32
 23fc3d4:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fc3d8:	4b0e      	ldr	r3, [pc, #56]	; (23fc414 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fc3da:	490f      	ldr	r1, [pc, #60]	; (23fc418 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fc3dc:	9300      	str	r3, [sp, #0]
 23fc3de:	aa06      	add	r2, sp, #24
 23fc3e0:	4603      	mov	r3, r0
 23fc3e2:	2032      	movs	r0, #50	; 0x32
 23fc3e4:	f7fd fc92 	bl	23f9d0c <log_message>
                    return false;
 23fc3e8:	4634      	mov	r4, r6
 23fc3ea:	a804      	add	r0, sp, #16
 23fc3ec:	f7ff ff89 	bl	23fc302 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23fc3f0:	e7b4      	b.n	23fc35c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23fc3f2:	4602      	mov	r2, r0
 23fc3f4:	21ff      	movs	r1, #255	; 0xff
 23fc3f6:	462b      	mov	r3, r5
 23fc3f8:	4638      	mov	r0, r7
 23fc3fa:	f7ff fca2 	bl	23fbd42 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23fc3fe:	462a      	mov	r2, r5
 23fc400:	4641      	mov	r1, r8
 23fc402:	9803      	ldr	r0, [sp, #12]
 23fc404:	f001 fb49 	bl	23fda9a <memcmp>
 23fc408:	2800      	cmp	r0, #0
 23fc40a:	d1ee      	bne.n	23fc3ea <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23fc40c:	2401      	movs	r4, #1
 23fc40e:	e7ec      	b.n	23fc3ea <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23fc410:	2401      	movs	r4, #1
 23fc412:	e7a3      	b.n	23fc35c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23fc414:	023ffc07 	.word	0x023ffc07
 23fc418:	023ffb97 	.word	0x023ffb97

023fc41c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fc41c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fc41e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fc420:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fc422:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fc424:	dd03      	ble.n	23fc42e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fc426:	f7fd fdc1 	bl	23f9fac <realloc>
            if (!d) {
 23fc42a:	b918      	cbnz	r0, 23fc434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fc42c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fc42e:	f7fd fdaf 	bl	23f9f90 <free>
        T* d = nullptr;
 23fc432:	2000      	movs	r0, #0
        data_ = d;
 23fc434:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fc436:	60a5      	str	r5, [r4, #8]
        return true;
 23fc438:	2001      	movs	r0, #1
 23fc43a:	e7f7      	b.n	23fc42c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fc43c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fc43c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fc43e:	6883      	ldr	r3, [r0, #8]
 23fc440:	428b      	cmp	r3, r1
 23fc442:	da02      	bge.n	23fc44a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fc444:	f7ff ffea 	bl	23fc41c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fc448:	bd08      	pop	{r3, pc}
    return true;
 23fc44a:	2001      	movs	r0, #1
 23fc44c:	e7fc      	b.n	23fc448 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc44e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc450:	2300      	movs	r3, #0
 23fc452:	e9c0 3300 	strd	r3, r3, [r0]
 23fc456:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc458:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc45a:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc45c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc45e:	4299      	cmp	r1, r3
 23fc460:	dd10      	ble.n	23fc484 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fc462:	f7ff ffdb 	bl	23fc41c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fc466:	b168      	cbz	r0, 23fc484 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc468:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fc46c:	6822      	ldr	r2, [r4, #0]
 23fc46e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fc470:	4299      	cmp	r1, r3
 23fc472:	d005      	beq.n	23fc480 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fc474:	b10a      	cbz	r2, 23fc47a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fc476:	7818      	ldrb	r0, [r3, #0]
 23fc478:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fc47a:	3301      	adds	r3, #1
 23fc47c:	3201      	adds	r2, #1
 23fc47e:	e7f7      	b.n	23fc470 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fc480:	686b      	ldr	r3, [r5, #4]
 23fc482:	6063      	str	r3, [r4, #4]
}
 23fc484:	4620      	mov	r0, r4
 23fc486:	bd38      	pop	{r3, r4, r5, pc}

023fc488 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23fc488:	b538      	push	{r3, r4, r5, lr}
 23fc48a:	4604      	mov	r4, r0
 23fc48c:	460d      	mov	r5, r1
    address_ = addr.address_;
 23fc48e:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23fc490:	3008      	adds	r0, #8
 23fc492:	f840 3c08 	str.w	r3, [r0, #-8]
 23fc496:	684b      	ldr	r3, [r1, #4]
 23fc498:	3108      	adds	r1, #8
 23fc49a:	f840 3c04 	str.w	r3, [r0, #-4]
 23fc49e:	f7ff ffd6 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fc4a2:	f105 0114 	add.w	r1, r5, #20
 23fc4a6:	f104 0014 	add.w	r0, r4, #20
 23fc4aa:	f7ff ffd0 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fc4ae:	f895 3020 	ldrb.w	r3, [r5, #32]
 23fc4b2:	4620      	mov	r0, r4
 23fc4b4:	f884 3020 	strb.w	r3, [r4, #32]
 23fc4b8:	bd38      	pop	{r3, r4, r5, pc}

023fc4ba <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23fc4ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fc4bc:	4604      	mov	r4, r0
 23fc4be:	a801      	add	r0, sp, #4
 23fc4c0:	f7ff ffc5 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fc4c4:	9b01      	ldr	r3, [sp, #4]
 23fc4c6:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc4c8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fc4ca:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc4cc:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc4ce:	6062      	str	r2, [r4, #4]
 23fc4d0:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc4d2:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc4d4:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc4d6:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc4d8:	9001      	str	r0, [sp, #4]
 23fc4da:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fc4dc:	f7fd fd58 	bl	23f9f90 <free>
 23fc4e0:	b004      	add	sp, #16
 23fc4e2:	bd10      	pop	{r4, pc}

023fc4e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fc4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc4e8:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc4ea:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fc4ec:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc4ee:	4419      	add	r1, r3
 23fc4f0:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fc4f2:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc4f4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fc4f6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc4f8:	dc12      	bgt.n	23fc520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fc4fa:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc4fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc4fe:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc500:	4631      	mov	r1, r6
 23fc502:	1bd2      	subs	r2, r2, r7
 23fc504:	1970      	adds	r0, r6, r5
 23fc506:	f001 fae5 	bl	23fdad4 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fc50a:	462a      	mov	r2, r5
 23fc50c:	4641      	mov	r1, r8
 23fc50e:	4630      	mov	r0, r6
 23fc510:	f001 fad3 	bl	23fdaba <memcpy>
    return true;
 23fc514:	2001      	movs	r0, #1
    size_ += n;
 23fc516:	6863      	ldr	r3, [r4, #4]
 23fc518:	442b      	add	r3, r5
 23fc51a:	6063      	str	r3, [r4, #4]
}
 23fc51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fc520:	f7ff ff7c 	bl	23fc41c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fc524:	2800      	cmp	r0, #0
 23fc526:	d1e8      	bne.n	23fc4fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fc528:	e7f8      	b.n	23fc51c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fc52a <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fc52a:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23fc52c:	460a      	mov	r2, r1
 23fc52e:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fc530:	b510      	push	{r4, lr}
 23fc532:	4604      	mov	r4, r0
    size_ = 0;
 23fc534:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23fc536:	b102      	cbz	r2, 23fc53a <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23fc538:	b90b      	cbnz	r3, 23fc53e <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23fc53a:	2000      	movs	r0, #0
}
 23fc53c:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23fc53e:	2bff      	cmp	r3, #255	; 0xff
 23fc540:	bf28      	it	cs
 23fc542:	23ff      	movcs	r3, #255	; 0xff
 23fc544:	f7ff ffce 	bl	23fc4e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23fc548:	2800      	cmp	r0, #0
 23fc54a:	d0f7      	beq.n	23fc53c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23fc54c:	6860      	ldr	r0, [r4, #4]
 23fc54e:	e7f5      	b.n	23fc53c <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023fc550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fc550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc552:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc554:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fc558:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fc55a:	4604      	mov	r4, r0
 23fc55c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc55e:	da0b      	bge.n	23fc578 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fc560:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc562:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc564:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc566:	1b52      	subs	r2, r2, r5
 23fc568:	1c48      	adds	r0, r1, #1
 23fc56a:	f001 fab3 	bl	23fdad4 <memmove>
    new(p) T(std::move(value));
 23fc56e:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fc570:	6863      	ldr	r3, [r4, #4]
 23fc572:	3301      	adds	r3, #1
 23fc574:	6063      	str	r3, [r4, #4]
}
 23fc576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc578:	3101      	adds	r1, #1
 23fc57a:	f7ff ff4f 	bl	23fc41c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fc57e:	2800      	cmp	r0, #0
 23fc580:	d1ee      	bne.n	23fc560 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fc582:	e7f8      	b.n	23fc576 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fc584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc584:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fc586:	6841      	ldr	r1, [r0, #4]
 23fc588:	f7ff bfe2 	b.w	23fc550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fc58c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fc58c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fc590:	4604      	mov	r4, r0
 23fc592:	461d      	mov	r5, r3
 23fc594:	460f      	mov	r7, r1
 23fc596:	ab01      	add	r3, sp, #4
 23fc598:	4690      	mov	r8, r2
 23fc59a:	460a      	mov	r2, r1
 23fc59c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fc5a0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fc5a4:	f7ff fa88 	bl	23fbab8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fc5a8:	1cae      	adds	r6, r5, #2
 23fc5aa:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fc5ac:	6863      	ldr	r3, [r4, #4]
 23fc5ae:	f1b9 0f00 	cmp.w	r9, #0
 23fc5b2:	d126      	bne.n	23fc602 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fc5b4:	b328      	cbz	r0, 23fc602 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fc5b6:	4433      	add	r3, r6
 23fc5b8:	1a1b      	subs	r3, r3, r0
 23fc5ba:	2bff      	cmp	r3, #255	; 0xff
 23fc5bc:	d809      	bhi.n	23fc5d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fc5be:	4620      	mov	r0, r4
 23fc5c0:	9901      	ldr	r1, [sp, #4]
 23fc5c2:	f7ff fd34 	bl	23fc02e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fc5c6:	6861      	ldr	r1, [r4, #4]
 23fc5c8:	4620      	mov	r0, r4
 23fc5ca:	4431      	add	r1, r6
 23fc5cc:	f7ff ff36 	bl	23fc43c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fc5d0:	b918      	cbnz	r0, 23fc5da <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fc5d2:	6860      	ldr	r0, [r4, #4]
}
 23fc5d4:	b003      	add	sp, #12
 23fc5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fc5da:	1c6a      	adds	r2, r5, #1
 23fc5dc:	4620      	mov	r0, r4
 23fc5de:	9901      	ldr	r1, [sp, #4]
 23fc5e0:	b2d2      	uxtb	r2, r2
 23fc5e2:	f7ff ffb5 	bl	23fc550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fc5e6:	9901      	ldr	r1, [sp, #4]
 23fc5e8:	463a      	mov	r2, r7
 23fc5ea:	3101      	adds	r1, #1
 23fc5ec:	4620      	mov	r0, r4
 23fc5ee:	f7ff ffaf 	bl	23fc550 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fc5f2:	462b      	mov	r3, r5
 23fc5f4:	4642      	mov	r2, r8
 23fc5f6:	9901      	ldr	r1, [sp, #4]
 23fc5f8:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fc5fa:	4620      	mov	r0, r4
 23fc5fc:	f7ff ff72 	bl	23fc4e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fc600:	e7e7      	b.n	23fc5d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fc602:	18f1      	adds	r1, r6, r3
 23fc604:	29ff      	cmp	r1, #255	; 0xff
 23fc606:	d8e4      	bhi.n	23fc5d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fc608:	4620      	mov	r0, r4
 23fc60a:	f7ff ff17 	bl	23fc43c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fc60e:	2800      	cmp	r0, #0
 23fc610:	d0df      	beq.n	23fc5d2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fc612:	1c69      	adds	r1, r5, #1
 23fc614:	4620      	mov	r0, r4
 23fc616:	b2c9      	uxtb	r1, r1
 23fc618:	f7ff ffb4 	bl	23fc584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fc61c:	4639      	mov	r1, r7
 23fc61e:	4620      	mov	r0, r4
 23fc620:	f7ff ffb0 	bl	23fc584 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fc624:	462b      	mov	r3, r5
 23fc626:	4642      	mov	r2, r8
 23fc628:	6861      	ldr	r1, [r4, #4]
 23fc62a:	e7e6      	b.n	23fc5fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fc62c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fc62c:	b430      	push	{r4, r5}
 23fc62e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fc632:	b11a      	cbz	r2, 23fc63c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fc634:	9502      	str	r5, [sp, #8]
}
 23fc636:	bc30      	pop	{r4, r5}
 23fc638:	f7ff bfa8 	b.w	23fc58c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fc63c:	6840      	ldr	r0, [r0, #4]
}
 23fc63e:	bc30      	pop	{r4, r5}
 23fc640:	4770      	bx	lr

023fc642 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fc642:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fc644:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fc646:	2206      	movs	r2, #6
 23fc648:	e9c0 3300 	strd	r3, r3, [r0]
 23fc64c:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fc64e:	9300      	str	r3, [sp, #0]
 23fc650:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fc652:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fc654:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fc658:	4619      	mov	r1, r3
 23fc65a:	f10d 020f 	add.w	r2, sp, #15
 23fc65e:	f7ff ffe5 	bl	23fc62c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fc662:	4620      	mov	r0, r4
 23fc664:	b004      	add	sp, #16
 23fc666:	bd10      	pop	{r4, pc}

023fc668 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fc668:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc66c:	4604      	mov	r4, r0
 23fc66e:	460d      	mov	r5, r1
 23fc670:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc672:	d914      	bls.n	23fc69e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fc674:	4290      	cmp	r0, r2
 23fc676:	d213      	bcs.n	23fc6a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fc678:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fc67c:	1a75      	subs	r5, r6, r1
 23fc67e:	f1a1 0708 	sub.w	r7, r1, #8
 23fc682:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc684:	42b7      	cmp	r7, r6
 23fc686:	d018      	beq.n	23fc6ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fc688:	b11c      	cbz	r4, 23fc692 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fc68a:	4631      	mov	r1, r6
 23fc68c:	4620      	mov	r0, r4
 23fc68e:	f7ff fce9 	bl	23fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fc692:	1d30      	adds	r0, r6, #4
 23fc694:	f7fe f81a 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fc698:	3e08      	subs	r6, #8
 23fc69a:	3c08      	subs	r4, #8
 23fc69c:	e7f2      	b.n	23fc684 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fc69e:	d00c      	beq.n	23fc6ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fc6a0:	42b5      	cmp	r5, r6
 23fc6a2:	d00a      	beq.n	23fc6ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fc6a4:	b11c      	cbz	r4, 23fc6ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fc6a6:	4629      	mov	r1, r5
 23fc6a8:	4620      	mov	r0, r4
 23fc6aa:	f7ff fcdb 	bl	23fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fc6ae:	1d28      	adds	r0, r5, #4
 23fc6b0:	f7fe f80c 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fc6b4:	3508      	adds	r5, #8
 23fc6b6:	3408      	adds	r4, #8
 23fc6b8:	e7f2      	b.n	23fc6a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fc6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc6bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fc6be:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fc6c0:	6846      	ldr	r6, [r0, #4]
 23fc6c2:	4668      	mov	r0, sp
 23fc6c4:	f7ff fcce 	bl	23fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc6c8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fc6cc:	429f      	cmp	r7, r3
 23fc6ce:	db12      	blt.n	23fc6f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fc6d0:	3701      	adds	r7, #1
        if (n > 0) {
 23fc6d2:	2f00      	cmp	r7, #0
 23fc6d4:	dd29      	ble.n	23fc72a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fc6d6:	00f8      	lsls	r0, r7, #3
 23fc6d8:	f7fd fc4c 	bl	23f9f74 <malloc>
            if (!d) {
 23fc6dc:	4605      	mov	r5, r0
 23fc6de:	b1f0      	cbz	r0, 23fc71e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fc6e0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc6e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fc6e8:	f7ff ffbe 	bl	23fc668 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fc6ec:	6820      	ldr	r0, [r4, #0]
 23fc6ee:	f7fd fc4f 	bl	23f9f90 <free>
        data_ = d;
 23fc6f2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc6f4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fc6f6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc6f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc6fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fc6fe:	4631      	mov	r1, r6
 23fc700:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fc704:	f106 0008 	add.w	r0, r6, #8
 23fc708:	f7ff ffae 	bl	23fc668 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc70c:	b11e      	cbz	r6, 23fc716 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fc70e:	4669      	mov	r1, sp
 23fc710:	4630      	mov	r0, r6
 23fc712:	f7ff fca7 	bl	23fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fc716:	2501      	movs	r5, #1
    ++size_;
 23fc718:	6863      	ldr	r3, [r4, #4]
 23fc71a:	3301      	adds	r3, #1
 23fc71c:	6063      	str	r3, [r4, #4]
 23fc71e:	a801      	add	r0, sp, #4
 23fc720:	f7fd ffd4 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc724:	4628      	mov	r0, r5
 23fc726:	b003      	add	sp, #12
 23fc728:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fc72a:	2500      	movs	r5, #0
 23fc72c:	e7de      	b.n	23fc6ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fc72e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fc72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc730:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fc732:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fc736:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fc738:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fc73c:	42a6      	cmp	r6, r4
 23fc73e:	d005      	beq.n	23fc74c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fc740:	4639      	mov	r1, r7
 23fc742:	4620      	mov	r0, r4
 23fc744:	f7ff fba1 	bl	23fbe8a <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fc748:	b108      	cbz	r0, 23fc74e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fc74a:	b914      	cbnz	r4, 23fc752 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fc74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fc74e:	3408      	adds	r4, #8
 23fc750:	e7f4      	b.n	23fc73c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fc752:	1d20      	adds	r0, r4, #4
 23fc754:	f7fd ffba 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fc758:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fc75c:	4620      	mov	r0, r4
 23fc75e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fc762:	f104 0108 	add.w	r1, r4, #8
 23fc766:	f7ff ff7f 	bl	23fc668 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fc76a:	686b      	ldr	r3, [r5, #4]
 23fc76c:	3b01      	subs	r3, #1
 23fc76e:	606b      	str	r3, [r5, #4]
    return true;
 23fc770:	e7ec      	b.n	23fc74c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fc774 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fc774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc778:	4605      	mov	r5, r0
 23fc77a:	b08f      	sub	sp, #60	; 0x3c
        WiringBleLock lk;
 23fc77c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fc77e:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fc780:	f7ff f9d6 	bl	23fbb30 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fc784:	682e      	ldr	r6, [r5, #0]
 23fc786:	1ef3      	subs	r3, r6, #3
 23fc788:	2b0d      	cmp	r3, #13
 23fc78a:	d86a      	bhi.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fc78c:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fc790:	0078000e 	.word	0x0078000e
 23fc794:	00fc0069 	.word	0x00fc0069
 23fc798:	00690069 	.word	0x00690069
 23fc79c:	00690069 	.word	0x00690069
 23fc7a0:	00c60069 	.word	0x00c60069
 23fc7a4:	00c600c6 	.word	0x00c600c6
 23fc7a8:	00c600c6 	.word	0x00c600c6
        return address_;
 23fc7ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fc7ae:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fc7b2:	3002      	adds	r0, #2
 23fc7b4:	f7ff f9f6 	bl	23fbba4 <_ZNK8particle10BleAddress7isValidEv>
 23fc7b8:	b338      	cbz	r0, 23fc80a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fc7ba:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fc7bc:	89aa      	ldrh	r2, [r5, #12]
 23fc7be:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fc7c2:	a806      	add	r0, sp, #24
 23fc7c4:	801a      	strh	r2, [r3, #0]
 23fc7c6:	f7ff fc4d 	bl	23fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fc7ca:	a906      	add	r1, sp, #24
 23fc7cc:	4630      	mov	r0, r6
 23fc7ce:	f7ff ff75 	bl	23fc6bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fc7d2:	a807      	add	r0, sp, #28
 23fc7d4:	f7fd ff7a 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fc7d8:	a806      	add	r0, sp, #24
 23fc7da:	f7ff fb1f 	bl	23fbe1c <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc7de:	9b06      	ldr	r3, [sp, #24]
 23fc7e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fc7e4:	9907      	ldr	r1, [sp, #28]
 23fc7e6:	6263      	str	r3, [r4, #36]	; 0x24
 23fc7e8:	f7ff f991 	bl	23fbb0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fc7ec:	a807      	add	r0, sp, #28
 23fc7ee:	f7fd ff6d 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fc7f2:	2120      	movs	r1, #32
 23fc7f4:	2300      	movs	r3, #0
 23fc7f6:	e9cd 1306 	strd	r1, r3, [sp, #24]
 23fc7fa:	4a6d      	ldr	r2, [pc, #436]	; (23fc9b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x23c>)
                    LOG(TRACE, "Disconnected");
 23fc7fc:	9200      	str	r2, [sp, #0]
 23fc7fe:	2001      	movs	r0, #1
 23fc800:	496c      	ldr	r1, [pc, #432]	; (23fc9b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fc802:	aa06      	add	r2, sp, #24
 23fc804:	f7fd fa82 	bl	23f9d0c <log_message>
 23fc808:	e02b      	b.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fc80a:	a804      	add	r0, sp, #16
 23fc80c:	f7ff fb06 	bl	23fbe1c <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fc810:	89aa      	ldrh	r2, [r5, #12]
 23fc812:	9b04      	ldr	r3, [sp, #16]
 23fc814:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fc816:	6869      	ldr	r1, [r5, #4]
 23fc818:	9804      	ldr	r0, [sp, #16]
 23fc81a:	3108      	adds	r1, #8
 23fc81c:	3002      	adds	r0, #2
 23fc81e:	f7ff f9a6 	bl	23fbb6e <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fc822:	a904      	add	r1, sp, #16
 23fc824:	a806      	add	r0, sp, #24
 23fc826:	f7ff fc1d 	bl	23fc064 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fc82a:	4630      	mov	r0, r6
 23fc82c:	a906      	add	r1, sp, #24
 23fc82e:	f7ff ff45 	bl	23fc6bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fc832:	4605      	mov	r5, r0
 23fc834:	a807      	add	r0, sp, #28
 23fc836:	f7fd ff49 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc83a:	b9c5      	cbnz	r5, 23fc86e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fc83c:	2320      	movs	r3, #32
 23fc83e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 23fc842:	4b5d      	ldr	r3, [pc, #372]	; (23fc9b8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fc844:	2001      	movs	r0, #1
 23fc846:	495b      	ldr	r1, [pc, #364]	; (23fc9b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fc848:	9300      	str	r3, [sp, #0]
 23fc84a:	aa06      	add	r2, sp, #24
 23fc84c:	462b      	mov	r3, r5
 23fc84e:	f7fd fa5d 	bl	23f9d0c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fc852:	9b04      	ldr	r3, [sp, #16]
 23fc854:	4629      	mov	r1, r5
 23fc856:	8818      	ldrh	r0, [r3, #0]
 23fc858:	f7fd f9da 	bl	23f9c10 <hal_ble_gap_disconnect>
 23fc85c:	a805      	add	r0, sp, #20
 23fc85e:	f7fd ff35 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fc862:	a803      	add	r0, sp, #12
 23fc864:	f7ff f972 	bl	23fbb4c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fc868:	b00f      	add	sp, #60	; 0x3c
 23fc86a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if (impl->connectedCallback_) {
 23fc86e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fc870:	b123      	cbz	r3, 23fc87c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fc872:	a904      	add	r1, sp, #16
 23fc874:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fc878:	f7ff fc2c 	bl	23fc0d4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fc87c:	a805      	add	r0, sp, #20
 23fc87e:	e7b6      	b.n	23fc7ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fc880:	4620      	mov	r0, r4
 23fc882:	89a9      	ldrh	r1, [r5, #12]
 23fc884:	f7ff faba 	bl	23fbdfc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fc888:	4606      	mov	r6, r0
 23fc88a:	2800      	cmp	r0, #0
 23fc88c:	d0e9      	beq.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fc88e:	4601      	mov	r1, r0
 23fc890:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fc894:	f7ff faf9 	bl	23fbe8a <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fc898:	f104 0818 	add.w	r8, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fc89c:	b148      	cbz	r0, 23fc8b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fc89e:	4631      	mov	r1, r6
 23fc8a0:	4640      	mov	r0, r8
 23fc8a2:	f7ff ff44 	bl	23fc72e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fc8a6:	2220      	movs	r2, #32
 23fc8a8:	2300      	movs	r3, #0
 23fc8aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fc8ae:	4a43      	ldr	r2, [pc, #268]	; (23fc9bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fc8b0:	e7a4      	b.n	23fc7fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fc8b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fc8b6:	6835      	ldr	r5, [r6, #0]
    return data_ + size_;
 23fc8b8:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fc8bc:	8029      	strh	r1, [r5, #0]
 23fc8be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fc8c2:	429a      	cmp	r2, r3
 23fc8c4:	d003      	beq.n	23fc8ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fc8c6:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc8ca:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fc8cc:	e7f9      	b.n	23fc8c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fc8ce:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fc8d2:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fc8d6:	45b9      	cmp	r9, r7
 23fc8d8:	d004      	beq.n	23fc8e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
      ~__shared_ptr() = default;
 23fc8da:	1d38      	adds	r0, r7, #4
 23fc8dc:	f7fd fef6 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc8e0:	3708      	adds	r7, #8
 23fc8e2:	e7f8      	b.n	23fc8d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fc8e4:	2300      	movs	r3, #0
 23fc8e6:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fc8e8:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fc8ec:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fc8f0:	45b9      	cmp	r9, r7
 23fc8f2:	d004      	beq.n	23fc8fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x18a>
 23fc8f4:	1d38      	adds	r0, r7, #4
 23fc8f6:	f7fd fee9 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc8fa:	3708      	adds	r7, #8
 23fc8fc:	e7f8      	b.n	23fc8f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17c>
    size_ = 0;
 23fc8fe:	2300      	movs	r3, #0
 23fc900:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fc902:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fc904:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fc906:	b123      	cbz	r3, 23fc912 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                            impl->disconnectedCallback_(*peer);
 23fc908:	4631      	mov	r1, r6
 23fc90a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fc90e:	f7ff fbe1 	bl	23fc0d4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fc912:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fc916:	6833      	ldr	r3, [r6, #0]
 23fc918:	801a      	strh	r2, [r3, #0]
 23fc91a:	e7c0      	b.n	23fc89e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fc91c:	4620      	mov	r0, r4
 23fc91e:	89a9      	ldrh	r1, [r5, #12]
 23fc920:	f7ff fa6c 	bl	23fbdfc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fc924:	2800      	cmp	r0, #0
 23fc926:	d09c      	beq.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fc928:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fc92a:	2b00      	cmp	r3, #0
 23fc92c:	d099      	beq.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fc92e:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fc930:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fc932:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fc936:	d001      	beq.n	23fc93c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c8>
 23fc938:	2e10      	cmp	r6, #16
 23fc93a:	d117      	bne.n	23fc96c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>
                        BlePairingEventPayload payload = {};
 23fc93c:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fc93e:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fc940:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fc942:	2506      	movs	r5, #6
                        };
 23fc944:	f88d 3015 	strb.w	r3, [sp, #21]
 23fc948:	9104      	str	r1, [sp, #16]
 23fc94a:	ab09      	add	r3, sp, #36	; 0x24
 23fc94c:	f88d 2014 	strb.w	r2, [sp, #20]
 23fc950:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fc952:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fc956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fc95a:	9508      	str	r5, [sp, #32]
 23fc95c:	e883 0003 	stmia.w	r3, {r0, r1}
 23fc960:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fc962:	a906      	add	r1, sp, #24
 23fc964:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fc968:	4798      	blx	r3
 23fc96a:	e77a      	b.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fc96c:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fc96e:	bf01      	itttt	eq
 23fc970:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fc972:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fc974:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fc978:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fc97a:	bf1d      	ittte	ne
 23fc97c:	461a      	movne	r2, r3
 23fc97e:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fc980:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fc982:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fc986:	e7dd      	b.n	23fc944 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d0>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fc988:	89a9      	ldrh	r1, [r5, #12]
 23fc98a:	4620      	mov	r0, r4
 23fc98c:	f7ff fa36 	bl	23fbdfc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fc990:	4601      	mov	r1, r0
 23fc992:	2800      	cmp	r0, #0
 23fc994:	f43f af65 	beq.w	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fc998:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fc99a:	2b00      	cmp	r3, #0
 23fc99c:	f43f af61 	beq.w	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fc9a0:	686b      	ldr	r3, [r5, #4]
 23fc9a2:	aa06      	add	r2, sp, #24
 23fc9a4:	9306      	str	r3, [sp, #24]
 23fc9a6:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fc9aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fc9ac:	4798      	blx	r3
 23fc9ae:	e758      	b.n	23fc862 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fc9b0:	023ffc48 	.word	0x023ffc48
 23fc9b4:	023ffb97 	.word	0x023ffb97
 23fc9b8:	023ffc22 	.word	0x023ffc22
 23fc9bc:	023ffc52 	.word	0x023ffc52

023fc9c0 <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fc9c0:	b570      	push	{r4, r5, r6, lr}
 23fc9c2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fc9c4:	3064      	adds	r0, #100	; 0x64
 23fc9c6:	f7fc fc3b 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
 23fc9ca:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fc9ce:	f7fc fc37 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
 23fc9d2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fc9d6:	f7fc fc33 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
 23fc9da:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fc9de:	f7fc fc2f 	bl	23f9240 <_ZNSt14_Function_baseD1Ev>
      ~__shared_ptr() = default;
 23fc9e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fc9e6:	f7fd fe71 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc9ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fc9ee:	f7fd fe6d 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fc9f2:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fc9f6:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fc9fa:	42ae      	cmp	r6, r5
 23fc9fc:	d004      	beq.n	23fca08 <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fc9fe:	1d28      	adds	r0, r5, #4
 23fca00:	f7fd fe64 	bl	23fa6cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fca04:	3508      	adds	r5, #8
 23fca06:	e7f8      	b.n	23fc9fa <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fca08:	69a0      	ldr	r0, [r4, #24]
 23fca0a:	f7fd fac1 	bl	23f9f90 <free>
 23fca0e:	f104 000c 	add.w	r0, r4, #12
 23fca12:	f7ff fb43 	bl	23fc09c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fca16:	4620      	mov	r0, r4
 23fca18:	f7ff fb2e 	bl	23fc078 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fca1c:	4620      	mov	r0, r4
 23fca1e:	bd70      	pop	{r4, r5, r6, pc}

023fca20 <__tcf_0>:
    static BleLocalDevice instance;
 23fca20:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fca22:	4b06      	ldr	r3, [pc, #24]	; (23fca3c <__tcf_0+0x1c>)
 23fca24:	681c      	ldr	r4, [r3, #0]
 23fca26:	b144      	cbz	r4, 23fca3a <__tcf_0+0x1a>
	delete __ptr;
 23fca28:	4620      	mov	r0, r4
 23fca2a:	f7ff ffc9 	bl	23fc9c0 <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fca2e:	4620      	mov	r0, r4
 23fca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fca34:	2174      	movs	r1, #116	; 0x74
 23fca36:	f7fc b826 	b.w	23f8a86 <_ZdlPvj>
 23fca3a:	bd10      	pop	{r4, pc}
 23fca3c:	1007af04 	.word	0x1007af04

023fca40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fca40:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fca42:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fca44:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fca46:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fca48:	dd05      	ble.n	23fca56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23fca4a:	2114      	movs	r1, #20
 23fca4c:	4369      	muls	r1, r5
 23fca4e:	f7fd faad 	bl	23f9fac <realloc>
            if (!d) {
 23fca52:	b918      	cbnz	r0, 23fca5c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23fca54:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fca56:	f7fd fa9b 	bl	23f9f90 <free>
        T* d = nullptr;
 23fca5a:	2000      	movs	r0, #0
        data_ = d;
 23fca5c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fca5e:	60a5      	str	r5, [r4, #8]
        return true;
 23fca60:	2001      	movs	r0, #1
 23fca62:	e7f7      	b.n	23fca54 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023fca64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fca64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fca68:	2400      	movs	r4, #0
 23fca6a:	e9c0 4400 	strd	r4, r4, [r0]
 23fca6e:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fca70:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fca72:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fca74:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fca76:	42a1      	cmp	r1, r4
 23fca78:	dd1c      	ble.n	23fcab4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23fca7a:	f7ff ffe1 	bl	23fca40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fca7e:	b1c8      	cbz	r0, 23fcab4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fca80:	e9d8 9300 	ldrd	r9, r3, [r8]
 23fca84:	f04f 0c14 	mov.w	ip, #20
 23fca88:	fb0c 9c03 	mla	ip, ip, r3, r9
 23fca8c:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23fca90:	eb09 0504 	add.w	r5, r9, r4
 23fca94:	45ac      	cmp	ip, r5
 23fca96:	d00a      	beq.n	23fcaae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23fca98:	eb1e 0604 	adds.w	r6, lr, r4
 23fca9c:	bf1e      	ittt	ne
 23fca9e:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23fcaa0:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23fcaa2:	682b      	ldrne	r3, [r5, #0]
 23fcaa4:	f104 0414 	add.w	r4, r4, #20
 23fcaa8:	bf18      	it	ne
 23fcaaa:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23fcaac:	e7f0      	b.n	23fca90 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fcaae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fcab2:	607b      	str	r3, [r7, #4]
}
 23fcab4:	4638      	mov	r0, r7
 23fcab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fcaba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fcaba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23fcabe:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fcac0:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23fcac2:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fcac6:	19e9      	adds	r1, r5, r7
 23fcac8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fcaca:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fcacc:	dc17      	bgt.n	23fcafe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23fcace:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23fcad0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fcad2:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23fcad4:	fb03 f907 	mul.w	r9, r3, r7
 23fcad8:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fcada:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcadc:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23fcade:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcae0:	4631      	mov	r1, r6
 23fcae2:	eb06 0009 	add.w	r0, r6, r9
 23fcae6:	f000 fff5 	bl	23fdad4 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fcaea:	464a      	mov	r2, r9
 23fcaec:	4641      	mov	r1, r8
 23fcaee:	4630      	mov	r0, r6
 23fcaf0:	f000 ffe3 	bl	23fdaba <memcpy>
    size_ += n;
 23fcaf4:	6863      	ldr	r3, [r4, #4]
 23fcaf6:	443b      	add	r3, r7
 23fcaf8:	6063      	str	r3, [r4, #4]
}
 23fcafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fcafe:	f7ff ff9f 	bl	23fca40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fcb02:	2800      	cmp	r0, #0
 23fcb04:	d1e3      	bne.n	23fcace <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23fcb06:	e7f8      	b.n	23fcafa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023fcb08 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fcb08:	b082      	sub	sp, #8
 23fcb0a:	b570      	push	{r4, r5, r6, lr}
 23fcb0c:	460c      	mov	r4, r1
 23fcb0e:	a904      	add	r1, sp, #16
 23fcb10:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb14:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fcb18:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fcb1a:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb1c:	da17      	bge.n	23fcb4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23fcb1e:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23fcb20:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23fcb22:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23fcb26:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fcb28:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcb2a:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23fcb2c:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcb2e:	4621      	mov	r1, r4
 23fcb30:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23fcb32:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcb34:	f000 ffce 	bl	23fdad4 <memmove>
    new(p) T(std::move(value));
 23fcb38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fcb3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fcb3c:	6833      	ldr	r3, [r6, #0]
 23fcb3e:	6023      	str	r3, [r4, #0]
    ++size_;
 23fcb40:	686b      	ldr	r3, [r5, #4]
 23fcb42:	3301      	adds	r3, #1
 23fcb44:	606b      	str	r3, [r5, #4]
}
 23fcb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fcb4a:	b002      	add	sp, #8
 23fcb4c:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb4e:	3101      	adds	r1, #1
 23fcb50:	f7ff ff76 	bl	23fca40 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fcb54:	2800      	cmp	r0, #0
 23fcb56:	d1e2      	bne.n	23fcb1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23fcb58:	e7f5      	b.n	23fcb46 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023fcb5a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fcb5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fcb5e:	2400      	movs	r4, #0
 23fcb60:	4605      	mov	r5, r0
 23fcb62:	460f      	mov	r7, r1
 23fcb64:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fcb66:	1e93      	subs	r3, r2, #2
 23fcb68:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fcb6c:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fcb6e:	b2db      	uxtb	r3, r3
 23fcb70:	6084      	str	r4, [r0, #8]
 23fcb72:	9305      	str	r3, [sp, #20]
    return size_;
 23fcb74:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fcb76:	428c      	cmp	r4, r1
 23fcb78:	da72      	bge.n	23fcc60 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23fcb7a:	6838      	ldr	r0, [r7, #0]
 23fcb7c:	4642      	mov	r2, r8
 23fcb7e:	ab07      	add	r3, sp, #28
 23fcb80:	1b09      	subs	r1, r1, r4
 23fcb82:	4420      	add	r0, r4
 23fcb84:	f7fe ff98 	bl	23fbab8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23fcb88:	4606      	mov	r6, r0
 23fcb8a:	2800      	cmp	r0, #0
 23fcb8c:	d068      	beq.n	23fcc60 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fcb8e:	9b05      	ldr	r3, [sp, #20]
 23fcb90:	2b01      	cmp	r3, #1
 23fcb92:	d82f      	bhi.n	23fcbf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fcb94:	f04f 0900 	mov.w	r9, #0
 23fcb98:	f1a0 0b02 	sub.w	fp, r0, #2
 23fcb9c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23fcba0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fcba4:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fcba6:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fcba8:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fcbaa:	d055      	beq.n	23fcc58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23fcbac:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fcbae:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23fcbb2:	4413      	add	r3, r2
 23fcbb4:	78d9      	ldrb	r1, [r3, #3]
 23fcbb6:	789b      	ldrb	r3, [r3, #2]
 23fcbb8:	a808      	add	r0, sp, #32
 23fcbba:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23fcbbe:	f7ff f8a8 	bl	23fbd12 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23fcbc2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fcbc6:	f10d 0e20 	add.w	lr, sp, #32
 23fcbca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fcbce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fcbd2:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fcbd6:	f109 0901 	add.w	r9, r9, #1
 23fcbda:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fcbde:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fcbe2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fcbe6:	ab0d      	add	r3, sp, #52	; 0x34
 23fcbe8:	4628      	mov	r0, r5
 23fcbea:	cb0c      	ldmia	r3, {r2, r3}
 23fcbec:	6869      	ldr	r1, [r5, #4]
 23fcbee:	f7ff ff8b 	bl	23fcb08 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fcbf2:	e7d7      	b.n	23fcba4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23fcbf4:	f1a8 0306 	sub.w	r3, r8, #6
 23fcbf8:	2b01      	cmp	r3, #1
 23fcbfa:	d82d      	bhi.n	23fcc58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fcbfc:	f04f 0900 	mov.w	r9, #0
 23fcc00:	f1a0 0b02 	sub.w	fp, r0, #2
 23fcc04:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23fcc08:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23fcc0c:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fcc0e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fcc10:	d022      	beq.n	23fcc58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fcc12:	3302      	adds	r3, #2
    return data_[i];
 23fcc14:	6839      	ldr	r1, [r7, #0]
 23fcc16:	4423      	add	r3, r4
 23fcc18:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23fcc1c:	2201      	movs	r2, #1
 23fcc1e:	4419      	add	r1, r3
 23fcc20:	a808      	add	r0, sp, #32
 23fcc22:	f7ff f857 	bl	23fbcd4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23fcc26:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fcc2a:	f10d 0e20 	add.w	lr, sp, #32
 23fcc2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fcc32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fcc36:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fcc3a:	f109 0901 	add.w	r9, r9, #1
 23fcc3e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fcc42:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fcc46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fcc4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23fcc4e:	4628      	mov	r0, r5
 23fcc50:	6869      	ldr	r1, [r5, #4]
 23fcc52:	f7ff ff59 	bl	23fcb08 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fcc56:	e7d9      	b.n	23fcc0c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fcc58:	9b07      	ldr	r3, [sp, #28]
 23fcc5a:	441c      	add	r4, r3
 23fcc5c:	4434      	add	r4, r6
 23fcc5e:	e789      	b.n	23fcb74 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23fcc60:	4628      	mov	r0, r5
 23fcc62:	b013      	add	sp, #76	; 0x4c
 23fcc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fcc68 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23fcc68:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23fcc6a:	b530      	push	{r4, r5, lr}
 23fcc6c:	4604      	mov	r4, r0
 23fcc6e:	460d      	mov	r5, r1
 23fcc70:	b085      	sub	sp, #20
 23fcc72:	e9c0 3300 	strd	r3, r3, [r0]
 23fcc76:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fcc78:	2202      	movs	r2, #2
 23fcc7a:	a801      	add	r0, sp, #4
 23fcc7c:	f7ff ff6d 	bl	23fcb5a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fcc80:	a901      	add	r1, sp, #4
 23fcc82:	4620      	mov	r0, r4
 23fcc84:	f7ff ff19 	bl	23fcaba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fcc88:	a801      	add	r0, sp, #4
 23fcc8a:	f7ff f99f 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fcc8e:	2202      	movs	r2, #2
 23fcc90:	4629      	mov	r1, r5
 23fcc92:	a801      	add	r0, sp, #4
 23fcc94:	f7ff ff61 	bl	23fcb5a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fcc98:	a901      	add	r1, sp, #4
 23fcc9a:	4620      	mov	r0, r4
 23fcc9c:	f7ff ff0d 	bl	23fcaba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fcca0:	a801      	add	r0, sp, #4
 23fcca2:	f7ff f993 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23fcca6:	2203      	movs	r2, #3
 23fcca8:	4629      	mov	r1, r5
 23fccaa:	a801      	add	r0, sp, #4
 23fccac:	f7ff ff55 	bl	23fcb5a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fccb0:	a901      	add	r1, sp, #4
 23fccb2:	4620      	mov	r0, r4
 23fccb4:	f7ff ff01 	bl	23fcaba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fccb8:	a801      	add	r0, sp, #4
 23fccba:	f7ff f987 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23fccbe:	2206      	movs	r2, #6
 23fccc0:	4629      	mov	r1, r5
 23fccc2:	a801      	add	r0, sp, #4
 23fccc4:	f7ff ff49 	bl	23fcb5a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fccc8:	a901      	add	r1, sp, #4
 23fccca:	4620      	mov	r0, r4
 23fcccc:	f7ff fef5 	bl	23fcaba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fccd0:	a801      	add	r0, sp, #4
 23fccd2:	f7ff f97b 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23fccd6:	2207      	movs	r2, #7
 23fccd8:	4629      	mov	r1, r5
 23fccda:	a801      	add	r0, sp, #4
 23fccdc:	f7ff ff3d 	bl	23fcb5a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fcce0:	4620      	mov	r0, r4
 23fcce2:	a901      	add	r1, sp, #4
 23fcce4:	f7ff fee9 	bl	23fcaba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fcce8:	a801      	add	r0, sp, #4
 23fccea:	f7ff f96f 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fccee:	4620      	mov	r0, r4
 23fccf0:	b005      	add	sp, #20
 23fccf2:	bd30      	pop	{r4, r5, pc}

023fccf4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23fccf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fccf8:	b08b      	sub	sp, #44	; 0x2c
 23fccfa:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fccfc:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23fcd00:	a801      	add	r0, sp, #4
 23fcd02:	f7ff feaf 	bl	23fca64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23fcd06:	9b02      	ldr	r3, [sp, #8]
 23fcd08:	2b00      	cmp	r3, #0
 23fcd0a:	dd4a      	ble.n	23fcda2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fcd0c:	f104 0114 	add.w	r1, r4, #20
 23fcd10:	a804      	add	r0, sp, #16
 23fcd12:	f7ff ffa9 	bl	23fcc68 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fcd16:	f104 0108 	add.w	r1, r4, #8
 23fcd1a:	a807      	add	r0, sp, #28
 23fcd1c:	f7ff ffa4 	bl	23fcc68 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23fcd20:	9d05      	ldr	r5, [sp, #20]
 23fcd22:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23fcd24:	2d00      	cmp	r5, #0
 23fcd26:	dc01      	bgt.n	23fcd2c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23fcd28:	2e00      	cmp	r6, #0
 23fcd2a:	dd38      	ble.n	23fcd9e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23fcd2c:	2314      	movs	r3, #20
    return data_;
 23fcd2e:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23fcd30:	9f02      	ldr	r7, [sp, #8]
 23fcd32:	4692      	mov	sl, r2
    return data_;
 23fcd34:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23fcd38:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23fcd3c:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23fcd40:	fb03 8505 	mla	r5, r3, r5, r8
 23fcd44:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23fcd48:	45ba      	cmp	sl, r7
 23fcd4a:	d028      	beq.n	23fcd9e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
 23fcd4c:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23fcd4e:	45ab      	cmp	fp, r5
 23fcd50:	d015      	beq.n	23fcd7e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23fcd52:	4659      	mov	r1, fp
 23fcd54:	4650      	mov	r0, sl
 23fcd56:	f7fe ffe6 	bl	23fbd26 <_ZNK8particle7BleUuideqERKS0_>
 23fcd5a:	f10b 0b14 	add.w	fp, fp, #20
 23fcd5e:	4604      	mov	r4, r0
 23fcd60:	2800      	cmp	r0, #0
 23fcd62:	d0f4      	beq.n	23fcd4e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fcd64:	a807      	add	r0, sp, #28
 23fcd66:	f7ff f931 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fcd6a:	a804      	add	r0, sp, #16
 23fcd6c:	f7ff f92e 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fcd70:	a801      	add	r0, sp, #4
 23fcd72:	f7ff f92b 	bl	23fbfcc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23fcd76:	4620      	mov	r0, r4
 23fcd78:	b00b      	add	sp, #44	; 0x2c
 23fcd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcd7e:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23fcd80:	45b3      	cmp	fp, r6
 23fcd82:	d009      	beq.n	23fcd98 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23fcd84:	4659      	mov	r1, fp
 23fcd86:	4650      	mov	r0, sl
 23fcd88:	f7fe ffcd 	bl	23fbd26 <_ZNK8particle7BleUuideqERKS0_>
 23fcd8c:	f10b 0b14 	add.w	fp, fp, #20
 23fcd90:	4604      	mov	r4, r0
 23fcd92:	2800      	cmp	r0, #0
 23fcd94:	d0f4      	beq.n	23fcd80 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23fcd96:	e7e5      	b.n	23fcd64 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23fcd98:	f10a 0a14 	add.w	sl, sl, #20
 23fcd9c:	e7d4      	b.n	23fcd48 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23fcd9e:	2400      	movs	r4, #0
 23fcda0:	e7e0      	b.n	23fcd64 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23fcda2:	2401      	movs	r4, #1
 23fcda4:	e7e4      	b.n	23fcd70 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023fcda6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fcda6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcdaa:	4604      	mov	r4, r0
 23fcdac:	460d      	mov	r5, r1
 23fcdae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcdb0:	d914      	bls.n	23fcddc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fcdb2:	4290      	cmp	r0, r2
 23fcdb4:	d213      	bcs.n	23fcdde <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fcdb6:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23fcdba:	1a75      	subs	r5, r6, r1
 23fcdbc:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23fcdc0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcdc2:	42b7      	cmp	r7, r6
 23fcdc4:	d018      	beq.n	23fcdf8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fcdc6:	b11c      	cbz	r4, 23fcdd0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fcdc8:	4631      	mov	r1, r6
 23fcdca:	4620      	mov	r0, r4
 23fcdcc:	f7ff fb5c 	bl	23fc488 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23fcdd0:	4630      	mov	r0, r6
 23fcdd2:	f7ff f8d5 	bl	23fbf80 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23fcdd6:	3e24      	subs	r6, #36	; 0x24
 23fcdd8:	3c24      	subs	r4, #36	; 0x24
 23fcdda:	e7f2      	b.n	23fcdc2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fcddc:	d00c      	beq.n	23fcdf8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fcdde:	42b5      	cmp	r5, r6
 23fcde0:	d00a      	beq.n	23fcdf8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fcde2:	b11c      	cbz	r4, 23fcdec <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fcde4:	4629      	mov	r1, r5
 23fcde6:	4620      	mov	r0, r4
 23fcde8:	f7ff fb4e 	bl	23fc488 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23fcdec:	4628      	mov	r0, r5
 23fcdee:	f7ff f8c7 	bl	23fbf80 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcdf2:	3524      	adds	r5, #36	; 0x24
 23fcdf4:	3424      	adds	r4, #36	; 0x24
 23fcdf6:	e7f2      	b.n	23fcdde <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fcdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcdfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fcdfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23fcdfc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fcdfe:	4605      	mov	r5, r0
        if (n > 0) {
 23fce00:	dd13      	ble.n	23fce2a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fce02:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23fce04:	fb07 f006 	mul.w	r0, r7, r6
 23fce08:	f7fd f8b4 	bl	23f9f74 <malloc>
            if (!d) {
 23fce0c:	4604      	mov	r4, r0
 23fce0e:	b158      	cbz	r0, 23fce28 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23fce10:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fce14:	fb07 1202 	mla	r2, r7, r2, r1
 23fce18:	f7ff ffc5 	bl	23fcda6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fce1c:	6828      	ldr	r0, [r5, #0]
 23fce1e:	f7fd f8b7 	bl	23f9f90 <free>
        return true;
 23fce22:	2001      	movs	r0, #1
        data_ = d;
 23fce24:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fce26:	60ae      	str	r6, [r5, #8]
    }
 23fce28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fce2a:	2400      	movs	r4, #0
 23fce2c:	e7f6      	b.n	23fce1c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023fce2e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fce2e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fce30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fce34:	e9c0 3300 	strd	r3, r3, [r0]
 23fce38:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fce3a:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fce3c:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fce3e:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fce40:	4299      	cmp	r1, r3
 23fce42:	dd29      	ble.n	23fce98 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
 23fce44:	f7ff ffd9 	bl	23fcdfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fce48:	b330      	cbz	r0, 23fce98 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fce4a:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fce4e:	f04f 0824 	mov.w	r8, #36	; 0x24
 23fce52:	682e      	ldr	r6, [r5, #0]
 23fce54:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
 23fce58:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
 23fce5a:	f1a4 0208 	sub.w	r2, r4, #8
 23fce5e:	4590      	cmp	r8, r2
 23fce60:	d018      	beq.n	23fce94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
 23fce62:	b1a6      	cbz	r6, 23fce8e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
 23fce64:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fce68:	4621      	mov	r1, r4
 23fce6a:	6033      	str	r3, [r6, #0]
 23fce6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 23fce70:	f106 0008 	add.w	r0, r6, #8
 23fce74:	6073      	str	r3, [r6, #4]
 23fce76:	f7ff faea 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fce7a:	f104 010c 	add.w	r1, r4, #12
 23fce7e:	f106 0014 	add.w	r0, r6, #20
 23fce82:	f7ff fae4 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fce86:	f994 3018 	ldrsb.w	r3, [r4, #24]
 23fce8a:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
 23fce8e:	3624      	adds	r6, #36	; 0x24
 23fce90:	3424      	adds	r4, #36	; 0x24
 23fce92:	e7e2      	b.n	23fce5a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fce94:	687b      	ldr	r3, [r7, #4]
 23fce96:	606b      	str	r3, [r5, #4]
}
 23fce98:	4628      	mov	r0, r5
 23fce9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fcea0 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
 23fcea0:	b538      	push	{r3, r4, r5, lr}
 23fcea2:	460c      	mov	r4, r1
 23fcea4:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
 23fcea6:	f101 0018 	add.w	r0, r1, #24
 23fceaa:	f7fe fe1a 	bl	23fbae2 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23fceae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fceb2:	f7fe fe21 	bl	23fbaf8 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
 23fceb6:	2200      	movs	r2, #0
 23fceb8:	4621      	mov	r1, r4
 23fceba:	4804      	ldr	r0, [pc, #16]	; (23fcecc <_ZN8particle16BleScanDelegator5startEv+0x2c>)
 23fcebc:	f7fc fe8c 	bl	23f9bd8 <hal_ble_gap_start_scan>
        return resultsVector_;
 23fcec0:	4621      	mov	r1, r4
 23fcec2:	4628      	mov	r0, r5
 23fcec4:	f7ff ffb3 	bl	23fce2e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
 23fcec8:	4628      	mov	r0, r5
 23fceca:	bd38      	pop	{r3, r4, r5, pc}
 23fcecc:	023fcef1 	.word	0x023fcef1

023fced0 <_ZNK8particle14BleLocalDevice4scanEv>:
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}

Vector<BleScanResult> BleLocalDevice::scan() const {
 23fced0:	b510      	push	{r4, lr}
 23fced2:	4604      	mov	r4, r0
 23fced4:	b09e      	sub	sp, #120	; 0x78
    BleScanDelegator scanner;
 23fced6:	a801      	add	r0, sp, #4
 23fced8:	f7ff f85c 	bl	23fbf94 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
 23fcedc:	4620      	mov	r0, r4
 23fcede:	a901      	add	r1, sp, #4
 23fcee0:	f7ff ffde 	bl	23fcea0 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
 23fcee4:	a801      	add	r0, sp, #4
 23fcee6:	f7ff f878 	bl	23fbfda <_ZN8particle16BleScanDelegatorD1Ev>
}
 23fceea:	4620      	mov	r0, r4
 23fceec:	b01e      	add	sp, #120	; 0x78
 23fceee:	bd10      	pop	{r4, pc}

023fcef0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23fcef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fcef4:	4606      	mov	r6, r0
 23fcef6:	460c      	mov	r4, r1
 23fcef8:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
 23fcefa:	ad01      	add	r5, sp, #4
 23fcefc:	4628      	mov	r0, r5
 23fcefe:	f7fe fecf 	bl	23fbca0 <_ZN8particle10BleAddressC1Ev>
 23fcf02:	a803      	add	r0, sp, #12
 23fcf04:	f7ff fb9d 	bl	23fc642 <_ZN8particle18BleAdvertisingDataC1Ev>
 23fcf08:	a806      	add	r0, sp, #24
 23fcf0a:	f7ff fb9a 	bl	23fc642 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23fcf0e:	6930      	ldr	r0, [r6, #16]
 23fcf10:	6971      	ldr	r1, [r6, #20]
 23fcf12:	ab13      	add	r3, sp, #76	; 0x4c
 23fcf14:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23fcf16:	7833      	ldrb	r3, [r6, #0]
    address_ = addr.address_;
 23fcf18:	e885 0003 	stmia.w	r5, {r0, r1}
        scanResponse_.set(buf, len);
 23fcf1c:	89f2      	ldrh	r2, [r6, #14]
 23fcf1e:	68b1      	ldr	r1, [r6, #8]
 23fcf20:	a806      	add	r0, sp, #24
        rssi_ = value;
 23fcf22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23fcf26:	f7ff fb00 	bl	23fc52a <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23fcf2a:	89b2      	ldrh	r2, [r6, #12]
 23fcf2c:	6871      	ldr	r1, [r6, #4]
 23fcf2e:	a803      	add	r0, sp, #12
 23fcf30:	f7ff fafb 	bl	23fc52a <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23fcf34:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
 23fcf38:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23fcf3a:	2b7f      	cmp	r3, #127	; 0x7f
 23fcf3c:	d003      	beq.n	23fcf46 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
 23fcf3e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fcf42:	429a      	cmp	r2, r3
 23fcf44:	db5c      	blt.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
 23fcf46:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23fcf4a:	2b7f      	cmp	r3, #127	; 0x7f
 23fcf4c:	d003      	beq.n	23fcf56 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
 23fcf4e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fcf52:	429a      	cmp	r2, r3
 23fcf54:	dc54      	bgt.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
 23fcf56:	4638      	mov	r0, r7
 23fcf58:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23fcf5c:	f7ff f95a 	bl	23fc214 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23fcf60:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23fcf62:	2b00      	cmp	r3, #0
 23fcf64:	dd52      	ble.n	23fd00c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
 23fcf66:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
 23fcf68:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23fcf6c:	45b1      	cmp	r9, r6
 23fcf6e:	d050      	beq.n	23fd012 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
 23fcf70:	4630      	mov	r0, r6
 23fcf72:	4629      	mov	r1, r5
 23fcf74:	f7fe fe08 	bl	23fbb88 <_ZNK8particle10BleAddresseqERKS0_>
 23fcf78:	3608      	adds	r6, #8
 23fcf7a:	4680      	mov	r8, r0
 23fcf7c:	2800      	cmp	r0, #0
 23fcf7e:	d0f5      	beq.n	23fcf6c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
 23fcf80:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fcf82:	f7fd f805 	bl	23f9f90 <free>
        if (!delegator->filterByRssi(result) ||
 23fcf86:	f1b8 0f00 	cmp.w	r8, #0
 23fcf8a:	d039      	beq.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
 23fcf8c:	4629      	mov	r1, r5
 23fcf8e:	4620      	mov	r0, r4
 23fcf90:	f7ff f903 	bl	23fc19a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23fcf94:	b3a0      	cbz	r0, 23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
 23fcf96:	4629      	mov	r1, r5
 23fcf98:	4620      	mov	r0, r4
 23fcf9a:	f7ff feab 	bl	23fccf4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23fcf9e:	4606      	mov	r6, r0
 23fcfa0:	b370      	cbz	r0, 23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
 23fcfa2:	4638      	mov	r0, r7
 23fcfa4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23fcfa8:	f7ff f981 	bl	23fc2ae <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23fcfac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fcfae:	2b00      	cmp	r3, #0
 23fcfb0:	dd12      	ble.n	23fcfd8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23fcfb2:	a806      	add	r0, sp, #24
 23fcfb4:	f7fe ff16 	bl	23fbde4 <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23fcfb8:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23fcfba:	a803      	add	r0, sp, #12
 23fcfbc:	f7fe ff12 	bl	23fbde4 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23fcfc0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23fcfc4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23fcfc8:	429a      	cmp	r2, r3
 23fcfca:	d025      	beq.n	23fd018 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
 23fcfcc:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fcfd0:	4588      	cmp	r8, r1
 23fcfd2:	d001      	beq.n	23fcfd8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
 23fcfd4:	4288      	cmp	r0, r1
 23fcfd6:	d1f7      	bne.n	23fcfc8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
 23fcfd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fcfda:	f7fc ffd9 	bl	23f9f90 <free>
              !delegator->filterByServiceUUID(result) ||
 23fcfde:	b17e      	cbz	r6, 23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
 23fcfe0:	4629      	mov	r1, r5
 23fcfe2:	4620      	mov	r0, r4
 23fcfe4:	f7ff f998 	bl	23fc318 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23fcfe8:	b150      	cbz	r0, 23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
 23fcfea:	6a23      	ldr	r3, [r4, #32]
 23fcfec:	b1b3      	cbz	r3, 23fd01c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fcfee:	4639      	mov	r1, r7
            delegator->foundCount_++;
 23fcff0:	6963      	ldr	r3, [r4, #20]
 23fcff2:	9513      	str	r5, [sp, #76]	; 0x4c
 23fcff4:	3301      	adds	r3, #1
 23fcff6:	6163      	str	r3, [r4, #20]
 23fcff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fcffa:	f104 0018 	add.w	r0, r4, #24
 23fcffe:	4798      	blx	r3
            return;
 23fd000:	4628      	mov	r0, r5
 23fd002:	f7fe ffbd 	bl	23fbf80 <_ZN8particle13BleScanResultD1Ev>
    }
 23fd006:	b01d      	add	sp, #116	; 0x74
 23fd008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 23fd00c:	f04f 0801 	mov.w	r8, #1
 23fd010:	e7b6      	b.n	23fcf80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fd012:	f04f 0800 	mov.w	r8, #0
 23fd016:	e7b3      	b.n	23fcf80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fd018:	2600      	movs	r6, #0
 23fd01a:	e7dd      	b.n	23fcfd8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
 23fd01c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 23fd020:	f1b8 0f00 	cmp.w	r8, #0
 23fd024:	d007      	beq.n	23fd036 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
 23fd026:	6963      	ldr	r3, [r4, #20]
 23fd028:	4629      	mov	r1, r5
 23fd02a:	3301      	adds	r3, #1
 23fd02c:	6163      	str	r3, [r4, #20]
 23fd02e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fd032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23fd034:	e7e3      	b.n	23fcffe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
 23fd036:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23fd03a:	f1bc 0f00 	cmp.w	ip, #0
 23fd03e:	d025      	beq.n	23fd08c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
 23fd040:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fd042:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
 23fd044:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fd046:	4293      	cmp	r3, r2
            delegator->foundCount_++;
 23fd048:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fd04a:	d8d9      	bhi.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fd04c:	2224      	movs	r2, #36	; 0x24
 23fd04e:	4353      	muls	r3, r2
    address_ = addr.address_;
 23fd050:	462a      	mov	r2, r5
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fd052:	3b24      	subs	r3, #36	; 0x24
 23fd054:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
 23fd058:	ca03      	ldmia	r2!, {r0, r1}
 23fd05a:	f84c 0003 	str.w	r0, [ip, r3]
 23fd05e:	6071      	str	r1, [r6, #4]
class BleScanResult {
 23fd060:	f106 0008 	add.w	r0, r6, #8
 23fd064:	a903      	add	r1, sp, #12
 23fd066:	f7ff fa28 	bl	23fc4ba <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fd06a:	a906      	add	r1, sp, #24
 23fd06c:	f106 0014 	add.w	r0, r6, #20
 23fd070:	f7ff fa23 	bl	23fc4ba <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fd074:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23fd078:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23fd07c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23fd080:	429a      	cmp	r2, r3
 23fd082:	d3bd      	bcc.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
 23fd084:	4640      	mov	r0, r8
 23fd086:	f7fc fdb5 	bl	23f9bf4 <hal_ble_gap_stop_scan>
 23fd08a:	e7b9      	b.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
 23fd08c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23fd090:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fd094:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23fd098:	a903      	add	r1, sp, #12
 23fd09a:	a80c      	add	r0, sp, #48	; 0x30
 23fd09c:	f7ff f9d7 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fd0a0:	a906      	add	r1, sp, #24
 23fd0a2:	a80f      	add	r0, sp, #60	; 0x3c
 23fd0a4:	f7ff f9d3 	bl	23fc44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fd0a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23fd0ac:	4641      	mov	r1, r8
 23fd0ae:	4638      	mov	r0, r7
 23fd0b0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23fd0b4:	6866      	ldr	r6, [r4, #4]
 23fd0b6:	f7ff f9e7 	bl	23fc488 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd0ba:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fd0be:	4299      	cmp	r1, r3
 23fd0c0:	da10      	bge.n	23fd0e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
 23fd0c2:	2224      	movs	r2, #36	; 0x24
 23fd0c4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd0c6:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23fd0c8:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23fd0cc:	fb02 3201 	mla	r2, r2, r1, r3
 23fd0d0:	f106 0024 	add.w	r0, r6, #36	; 0x24
 23fd0d4:	4631      	mov	r1, r6
 23fd0d6:	f7ff fe66 	bl	23fcda6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fd0da:	b986      	cbnz	r6, 23fd0fe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
 23fd0dc:	6863      	ldr	r3, [r4, #4]
 23fd0de:	3301      	adds	r3, #1
 23fd0e0:	6063      	str	r3, [r4, #4]
    return true;
 23fd0e2:	e005      	b.n	23fd0f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd0e4:	4620      	mov	r0, r4
 23fd0e6:	3101      	adds	r1, #1
 23fd0e8:	f7ff fe87 	bl	23fcdfa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fd0ec:	2800      	cmp	r0, #0
 23fd0ee:	d1e8      	bne.n	23fd0c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
 23fd0f0:	4638      	mov	r0, r7
 23fd0f2:	f7fe ff45 	bl	23fbf80 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23fd0f6:	4640      	mov	r0, r8
 23fd0f8:	f7fe ff42 	bl	23fbf80 <_ZN8particle13BleScanResultD1Ev>
 23fd0fc:	e780      	b.n	23fd000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
 23fd0fe:	4639      	mov	r1, r7
 23fd100:	4630      	mov	r0, r6
 23fd102:	f7ff f9c1 	bl	23fc488 <_ZN8particle13BleScanResultC1EOS0_>
 23fd106:	e7e9      	b.n	23fd0dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

023fd108 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fd108:	2300      	movs	r3, #0
 23fd10a:	4802      	ldr	r0, [pc, #8]	; (23fd114 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd10c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fd10e:	f7fc bd1d 	b.w	23f9b4c <os_mutex_recursive_create>
 23fd112:	bf00      	nop
 23fd114:	1007af00 	.word	0x1007af00

023fd118 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fd118:	b510      	push	{r4, lr}
 23fd11a:	4604      	mov	r4, r0
{
	free(buffer);
 23fd11c:	6800      	ldr	r0, [r0, #0]
 23fd11e:	f7fc ff37 	bl	23f9f90 <free>
}
 23fd122:	4620      	mov	r0, r4
 23fd124:	bd10      	pop	{r4, pc}

023fd126 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fd126:	b510      	push	{r4, lr}
 23fd128:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fd12a:	6800      	ldr	r0, [r0, #0]
 23fd12c:	b108      	cbz	r0, 23fd132 <_ZN6String10invalidateEv+0xc>
 23fd12e:	f7fc ff2f 	bl	23f9f90 <free>
	buffer = NULL;
 23fd132:	2300      	movs	r3, #0
	capacity = len = 0;
 23fd134:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fd138:	6023      	str	r3, [r4, #0]
}
 23fd13a:	bd10      	pop	{r4, pc}

023fd13c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd13c:	b538      	push	{r3, r4, r5, lr}
 23fd13e:	4604      	mov	r4, r0
 23fd140:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd142:	6800      	ldr	r0, [r0, #0]
 23fd144:	3101      	adds	r1, #1
 23fd146:	f7fc ff31 	bl	23f9fac <realloc>
	if (newbuffer) {
 23fd14a:	b110      	cbz	r0, 23fd152 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fd14c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fd150:	2001      	movs	r0, #1
	}
	return 0;
}
 23fd152:	bd38      	pop	{r3, r4, r5, pc}

023fd154 <_ZN6String7reserveEj>:
{
 23fd154:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fd156:	6803      	ldr	r3, [r0, #0]
{
 23fd158:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fd15a:	b123      	cbz	r3, 23fd166 <_ZN6String7reserveEj+0x12>
 23fd15c:	6843      	ldr	r3, [r0, #4]
 23fd15e:	428b      	cmp	r3, r1
 23fd160:	d301      	bcc.n	23fd166 <_ZN6String7reserveEj+0x12>
 23fd162:	2001      	movs	r0, #1
}
 23fd164:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fd166:	4620      	mov	r0, r4
 23fd168:	f7ff ffe8 	bl	23fd13c <_ZN6String12changeBufferEj>
 23fd16c:	2800      	cmp	r0, #0
 23fd16e:	d0f9      	beq.n	23fd164 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fd170:	68a3      	ldr	r3, [r4, #8]
 23fd172:	2b00      	cmp	r3, #0
 23fd174:	d1f5      	bne.n	23fd162 <_ZN6String7reserveEj+0xe>
 23fd176:	6822      	ldr	r2, [r4, #0]
 23fd178:	7013      	strb	r3, [r2, #0]
 23fd17a:	e7f2      	b.n	23fd162 <_ZN6String7reserveEj+0xe>

023fd17c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd17e:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fd180:	4611      	mov	r1, r2
 23fd182:	9201      	str	r2, [sp, #4]
{
 23fd184:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fd186:	f7ff ffe5 	bl	23fd154 <_ZN6String7reserveEj>
 23fd18a:	9a01      	ldr	r2, [sp, #4]
 23fd18c:	b928      	cbnz	r0, 23fd19a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fd18e:	4620      	mov	r0, r4
 23fd190:	f7ff ffc9 	bl	23fd126 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fd194:	4620      	mov	r0, r4
 23fd196:	b003      	add	sp, #12
 23fd198:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fd19a:	4629      	mov	r1, r5
	len = length;
 23fd19c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fd19e:	6820      	ldr	r0, [r4, #0]
 23fd1a0:	f000 fc8b 	bl	23fdaba <memcpy>
	buffer[len] = 0;
 23fd1a4:	2100      	movs	r1, #0
 23fd1a6:	6822      	ldr	r2, [r4, #0]
 23fd1a8:	68a3      	ldr	r3, [r4, #8]
 23fd1aa:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fd1ac:	e7f2      	b.n	23fd194 <_ZN6String4copyEPKcj+0x18>

023fd1ae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fd1ae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fd1b0:	b513      	push	{r0, r1, r4, lr}
 23fd1b2:	4604      	mov	r4, r0
	capacity = 0;
 23fd1b4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd1b8:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd1ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fd1bc:	b141      	cbz	r1, 23fd1d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fd1be:	4608      	mov	r0, r1
 23fd1c0:	9101      	str	r1, [sp, #4]
 23fd1c2:	f7fb fc37 	bl	23f8a34 <strlen>
 23fd1c6:	9901      	ldr	r1, [sp, #4]
 23fd1c8:	4602      	mov	r2, r0
 23fd1ca:	4620      	mov	r0, r4
 23fd1cc:	f7ff ffd6 	bl	23fd17c <_ZN6String4copyEPKcj>
}
 23fd1d0:	4620      	mov	r0, r4
 23fd1d2:	b002      	add	sp, #8
 23fd1d4:	bd10      	pop	{r4, pc}

023fd1d6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd1d6:	b538      	push	{r3, r4, r5, lr}
 23fd1d8:	4605      	mov	r5, r0
	if (buffer) {
 23fd1da:	6800      	ldr	r0, [r0, #0]
{
 23fd1dc:	460c      	mov	r4, r1
	if (buffer) {
 23fd1de:	b168      	cbz	r0, 23fd1fc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23fd1e0:	686a      	ldr	r2, [r5, #4]
 23fd1e2:	688b      	ldr	r3, [r1, #8]
 23fd1e4:	429a      	cmp	r2, r3
 23fd1e6:	d307      	bcc.n	23fd1f8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23fd1e8:	6809      	ldr	r1, [r1, #0]
 23fd1ea:	f000 fcda 	bl	23fdba2 <strcpy>
			len = rhs.len;
 23fd1ee:	68a3      	ldr	r3, [r4, #8]
 23fd1f0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fd1f2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fd1f4:	60a3      	str	r3, [r4, #8]
}
 23fd1f6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fd1f8:	f7fc feca 	bl	23f9f90 <free>
	buffer = rhs.buffer;
 23fd1fc:	6823      	ldr	r3, [r4, #0]
 23fd1fe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fd200:	6863      	ldr	r3, [r4, #4]
 23fd202:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fd204:	68a3      	ldr	r3, [r4, #8]
 23fd206:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fd208:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fd20a:	e9c4 3300 	strd	r3, r3, [r4]
 23fd20e:	e7f1      	b.n	23fd1f4 <_ZN6String4moveERS_+0x1e>

023fd210 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fd210:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd212:	b510      	push	{r4, lr}
 23fd214:	4604      	mov	r4, r0
	capacity = 0;
 23fd216:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd21a:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd21c:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fd21e:	f7ff ffda 	bl	23fd1d6 <_ZN6String4moveERS_>
}
 23fd222:	4620      	mov	r0, r4
 23fd224:	bd10      	pop	{r4, pc}

023fd226 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fd226:	4288      	cmp	r0, r1
{
 23fd228:	b510      	push	{r4, lr}
 23fd22a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fd22c:	d005      	beq.n	23fd23a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fd22e:	680b      	ldr	r3, [r1, #0]
 23fd230:	b12b      	cbz	r3, 23fd23e <_ZN6StringaSERKS_+0x18>
 23fd232:	688a      	ldr	r2, [r1, #8]
 23fd234:	4619      	mov	r1, r3
 23fd236:	f7ff ffa1 	bl	23fd17c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fd23a:	4620      	mov	r0, r4
 23fd23c:	bd10      	pop	{r4, pc}
	else invalidate();
 23fd23e:	f7ff ff72 	bl	23fd126 <_ZN6String10invalidateEv>
 23fd242:	e7fa      	b.n	23fd23a <_ZN6StringaSERKS_+0x14>

023fd244 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fd244:	2300      	movs	r3, #0
String::String(const String &value)
 23fd246:	b510      	push	{r4, lr}
 23fd248:	4604      	mov	r4, r0
	capacity = 0;
 23fd24a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fd24e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fd250:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fd252:	f7ff ffe8 	bl	23fd226 <_ZN6StringaSERKS_>
}
 23fd256:	4620      	mov	r0, r4
 23fd258:	bd10      	pop	{r4, pc}

023fd25a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fd25a:	b570      	push	{r4, r5, r6, lr}
 23fd25c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23fd25e:	460e      	mov	r6, r1
 23fd260:	b909      	cbnz	r1, 23fd266 <_ZN6String6concatEPKcj+0xc>
 23fd262:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23fd264:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23fd266:	b16a      	cbz	r2, 23fd284 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23fd268:	6884      	ldr	r4, [r0, #8]
 23fd26a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23fd26c:	4621      	mov	r1, r4
 23fd26e:	f7ff ff71 	bl	23fd154 <_ZN6String7reserveEj>
 23fd272:	2800      	cmp	r0, #0
 23fd274:	d0f5      	beq.n	23fd262 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23fd276:	6828      	ldr	r0, [r5, #0]
 23fd278:	68ab      	ldr	r3, [r5, #8]
 23fd27a:	4631      	mov	r1, r6
 23fd27c:	4418      	add	r0, r3
 23fd27e:	f000 fc90 	bl	23fdba2 <strcpy>
	len = newlen;
 23fd282:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23fd284:	2001      	movs	r0, #1
 23fd286:	e7ed      	b.n	23fd264 <_ZN6String6concatEPKcj+0xa>

023fd288 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 23fd288:	2300      	movs	r3, #0
{
 23fd28a:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 23fd28c:	2201      	movs	r2, #1
	buf[0] = c;
 23fd28e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 23fd292:	a901      	add	r1, sp, #4
	buf[1] = 0;
 23fd294:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 23fd298:	f7ff ffdf 	bl	23fd25a <_ZN6String6concatEPKcj>
}
 23fd29c:	b003      	add	sp, #12
 23fd29e:	f85d fb04 	ldr.w	pc, [sp], #4

023fd2a2 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
 23fd2a2:	6802      	ldr	r2, [r0, #0]
{
 23fd2a4:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 23fd2a6:	6809      	ldr	r1, [r1, #0]
 23fd2a8:	b162      	cbz	r2, 23fd2c4 <_ZNK6String9compareToERKS_+0x22>
 23fd2aa:	b941      	cbnz	r1, 23fd2be <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 23fd2ac:	6880      	ldr	r0, [r0, #8]
 23fd2ae:	b160      	cbz	r0, 23fd2ca <_ZNK6String9compareToERKS_+0x28>
 23fd2b0:	7810      	ldrb	r0, [r2, #0]
 23fd2b2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23fd2b4:	6898      	ldr	r0, [r3, #8]
 23fd2b6:	b140      	cbz	r0, 23fd2ca <_ZNK6String9compareToERKS_+0x28>
 23fd2b8:	7809      	ldrb	r1, [r1, #0]
 23fd2ba:	4248      	negs	r0, r1
 23fd2bc:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 23fd2be:	4610      	mov	r0, r2
 23fd2c0:	f7fb bbae 	b.w	23f8a20 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23fd2c4:	2900      	cmp	r1, #0
 23fd2c6:	d1f5      	bne.n	23fd2b4 <_ZNK6String9compareToERKS_+0x12>
		return 0;
 23fd2c8:	4608      	mov	r0, r1
}
 23fd2ca:	4770      	bx	lr

023fd2cc <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23fd2cc:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 23fd2ce:	6882      	ldr	r2, [r0, #8]
 23fd2d0:	688b      	ldr	r3, [r1, #8]
 23fd2d2:	429a      	cmp	r2, r3
 23fd2d4:	d105      	bne.n	23fd2e2 <_ZNK6String6equalsERKS_+0x16>
 23fd2d6:	f7ff ffe4 	bl	23fd2a2 <_ZNK6String9compareToERKS_>
 23fd2da:	fab0 f080 	clz	r0, r0
 23fd2de:	0940      	lsrs	r0, r0, #5
}
 23fd2e0:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 23fd2e2:	2000      	movs	r0, #0
 23fd2e4:	e7fc      	b.n	23fd2e0 <_ZNK6String6equalsERKS_+0x14>
	...

023fd2e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd2e8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd2ea:	2000      	movs	r0, #0
 23fd2ec:	4b04      	ldr	r3, [pc, #16]	; (23fd300 <_GLOBAL__sub_I_System+0x18>)
 23fd2ee:	601a      	str	r2, [r3, #0]
 23fd2f0:	4b04      	ldr	r3, [pc, #16]	; (23fd304 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd2f2:	4a05      	ldr	r2, [pc, #20]	; (23fd308 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd2f4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd2f8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd2fa:	f7fc bdf5 	b.w	23f9ee8 <set_system_mode>
 23fd2fe:	bf00      	nop
 23fd300:	1007af14 	.word	0x1007af14
 23fd304:	1007af08 	.word	0x1007af08
 23fd308:	ffff0000 	.word	0xffff0000

023fd30c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd30c:	2200      	movs	r2, #0
 23fd30e:	6840      	ldr	r0, [r0, #4]
 23fd310:	4611      	mov	r1, r2
 23fd312:	f7fc bda3 	b.w	23f9e5c <network_listening>

023fd316 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd316:	2200      	movs	r2, #0
 23fd318:	6840      	ldr	r0, [r0, #4]
 23fd31a:	4611      	mov	r1, r2
 23fd31c:	f7fc bdba 	b.w	23f9e94 <network_get_listen_timeout>

023fd320 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd320:	2200      	movs	r2, #0
 23fd322:	6840      	ldr	r0, [r0, #4]
 23fd324:	f7fc bda8 	b.w	23f9e78 <network_set_listen_timeout>

023fd328 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd328:	2200      	movs	r2, #0
 23fd32a:	6840      	ldr	r0, [r0, #4]
 23fd32c:	f081 0101 	eor.w	r1, r1, #1
 23fd330:	f7fc bd86 	b.w	23f9e40 <network_listen>

023fd334 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd334:	2300      	movs	r3, #0
 23fd336:	6840      	ldr	r0, [r0, #4]
 23fd338:	461a      	mov	r2, r3
 23fd33a:	4619      	mov	r1, r3
 23fd33c:	f7fc bd72 	b.w	23f9e24 <network_off>

023fd340 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd340:	2300      	movs	r3, #0
 23fd342:	6840      	ldr	r0, [r0, #4]
 23fd344:	461a      	mov	r2, r3
 23fd346:	4619      	mov	r1, r3
 23fd348:	f7fc bd5e 	b.w	23f9e08 <network_on>

023fd34c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd34c:	2200      	movs	r2, #0
 23fd34e:	6840      	ldr	r0, [r0, #4]
 23fd350:	4611      	mov	r1, r2
 23fd352:	f7fc bd4b 	b.w	23f9dec <network_ready>

023fd356 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd356:	2200      	movs	r2, #0
 23fd358:	6840      	ldr	r0, [r0, #4]
 23fd35a:	4611      	mov	r1, r2
 23fd35c:	f7fc bd2a 	b.w	23f9db4 <network_connecting>

023fd360 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd360:	2200      	movs	r2, #0
 23fd362:	2102      	movs	r1, #2
 23fd364:	6840      	ldr	r0, [r0, #4]
 23fd366:	f7fc bd33 	b.w	23f9dd0 <network_disconnect>

023fd36a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd36a:	2300      	movs	r3, #0
 23fd36c:	6840      	ldr	r0, [r0, #4]
 23fd36e:	461a      	mov	r2, r3
 23fd370:	f7fc bd12 	b.w	23f9d98 <network_connect>

023fd374 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fd374:	2203      	movs	r2, #3
 23fd376:	4b02      	ldr	r3, [pc, #8]	; (23fd380 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd378:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd37a:	4a02      	ldr	r2, [pc, #8]	; (23fd384 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd37c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd37e:	4770      	bx	lr
 23fd380:	1007af18 	.word	0x1007af18
 23fd384:	023ffc84 	.word	0x023ffc84

023fd388 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd388:	4770      	bx	lr
	...

023fd38c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fd38c:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fd38e:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fd390:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fd392:	462a      	mov	r2, r5
 23fd394:	2100      	movs	r1, #0
 23fd396:	f000 fbb7 	bl	23fdb08 <memset>
 23fd39a:	8025      	strh	r5, [r4, #0]
 23fd39c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd39e:	4907      	ldr	r1, [pc, #28]	; (23fd3bc <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fd3a0:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fd3a2:	8125      	strh	r5, [r4, #8]
 23fd3a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd3a6:	f000 fa4f 	bl	23fd848 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd3aa:	4904      	ldr	r1, [pc, #16]	; (23fd3bc <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fd3ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fd3ae:	4628      	mov	r0, r5
 23fd3b0:	f000 fa4a 	bl	23fd848 <_ZnajRKSt9nothrow_t>
    };
 23fd3b4:	60e0      	str	r0, [r4, #12]
}
 23fd3b6:	4620      	mov	r0, r4
 23fd3b8:	bd38      	pop	{r3, r4, r5, pc}
 23fd3ba:	bf00      	nop
 23fd3bc:	023ffce7 	.word	0x023ffce7

023fd3c0 <__tcf_2>:
 23fd3c0:	4770      	bx	lr

023fd3c2 <__tcf_1>:
 23fd3c2:	4770      	bx	lr

023fd3c4 <_Z20acquireSerial1Bufferv>:
{
 23fd3c4:	b510      	push	{r4, lr}
 23fd3c6:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fd3c8:	f7ff ffe0 	bl	23fd38c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fd3cc:	4620      	mov	r0, r4
 23fd3ce:	bd10      	pop	{r4, pc}

023fd3d0 <_Z20acquireSerial2Bufferv>:
 23fd3d0:	b510      	push	{r4, lr}
 23fd3d2:	4604      	mov	r4, r0
 23fd3d4:	f7ff ffda 	bl	23fd38c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fd3d8:	4620      	mov	r0, r4
 23fd3da:	bd10      	pop	{r4, pc}

023fd3dc <_Z20acquireSerial3Bufferv>:
 23fd3dc:	b510      	push	{r4, lr}
 23fd3de:	4604      	mov	r4, r0
 23fd3e0:	f7ff ffd4 	bl	23fd38c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fd3e4:	4620      	mov	r0, r4
 23fd3e6:	bd10      	pop	{r4, pc}

023fd3e8 <_Z22__fetch_global_Serial1v>:
{
 23fd3e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd3ea:	4d0e      	ldr	r5, [pc, #56]	; (23fd424 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fd3ec:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fd3ee:	e8d5 1f8f 	ldab	r1, [r5]
 23fd3f2:	f011 0401 	ands.w	r4, r1, #1
 23fd3f6:	d111      	bne.n	23fd41c <_Z22__fetch_global_Serial1v+0x34>
 23fd3f8:	4628      	mov	r0, r5
 23fd3fa:	f7fb fb53 	bl	23f8aa4 <__cxa_guard_acquire>
 23fd3fe:	b168      	cbz	r0, 23fd41c <_Z22__fetch_global_Serial1v+0x34>
 23fd400:	a801      	add	r0, sp, #4
 23fd402:	f7ff ffdf 	bl	23fd3c4 <_Z20acquireSerial1Bufferv>
 23fd406:	4621      	mov	r1, r4
 23fd408:	aa01      	add	r2, sp, #4
 23fd40a:	4807      	ldr	r0, [pc, #28]	; (23fd428 <_Z22__fetch_global_Serial1v+0x40>)
 23fd40c:	f7fc ff50 	bl	23fa2b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd410:	4628      	mov	r0, r5
 23fd412:	f7fb fb4c 	bl	23f8aae <__cxa_guard_release>
 23fd416:	4805      	ldr	r0, [pc, #20]	; (23fd42c <_Z22__fetch_global_Serial1v+0x44>)
 23fd418:	f000 fb2e 	bl	23fda78 <atexit>
    return serial1;
}
 23fd41c:	4802      	ldr	r0, [pc, #8]	; (23fd428 <_Z22__fetch_global_Serial1v+0x40>)
 23fd41e:	b007      	add	sp, #28
 23fd420:	bd30      	pop	{r4, r5, pc}
 23fd422:	bf00      	nop
 23fd424:	1007af24 	.word	0x1007af24
 23fd428:	1007af30 	.word	0x1007af30
 23fd42c:	023fd389 	.word	0x023fd389

023fd430 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fd430:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fd432:	4c0d      	ldr	r4, [pc, #52]	; (23fd468 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fd434:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fd436:	e8d4 3f8f 	ldab	r3, [r4]
 23fd43a:	07db      	lsls	r3, r3, #31
 23fd43c:	d411      	bmi.n	23fd462 <_Z22__fetch_global_Serial2v+0x32>
 23fd43e:	4620      	mov	r0, r4
 23fd440:	f7fb fb30 	bl	23f8aa4 <__cxa_guard_acquire>
 23fd444:	b168      	cbz	r0, 23fd462 <_Z22__fetch_global_Serial2v+0x32>
 23fd446:	a801      	add	r0, sp, #4
 23fd448:	f7ff ffc2 	bl	23fd3d0 <_Z20acquireSerial2Bufferv>
 23fd44c:	2101      	movs	r1, #1
 23fd44e:	aa01      	add	r2, sp, #4
 23fd450:	4806      	ldr	r0, [pc, #24]	; (23fd46c <_Z22__fetch_global_Serial2v+0x3c>)
 23fd452:	f7fc ff2d 	bl	23fa2b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd456:	4620      	mov	r0, r4
 23fd458:	f7fb fb29 	bl	23f8aae <__cxa_guard_release>
 23fd45c:	4804      	ldr	r0, [pc, #16]	; (23fd470 <_Z22__fetch_global_Serial2v+0x40>)
 23fd45e:	f000 fb0b 	bl	23fda78 <atexit>
	return serial2;
}
 23fd462:	4802      	ldr	r0, [pc, #8]	; (23fd46c <_Z22__fetch_global_Serial2v+0x3c>)
 23fd464:	b006      	add	sp, #24
 23fd466:	bd10      	pop	{r4, pc}
 23fd468:	1007af28 	.word	0x1007af28
 23fd46c:	1007af44 	.word	0x1007af44
 23fd470:	023fd3c3 	.word	0x023fd3c3

023fd474 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fd474:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fd476:	f7ff ffdb 	bl	23fd430 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fd47a:	4b07      	ldr	r3, [pc, #28]	; (23fd498 <_Z15serialEventRun2v+0x24>)
 23fd47c:	4604      	mov	r4, r0
 23fd47e:	b153      	cbz	r3, 23fd496 <_Z15serialEventRun2v+0x22>
 23fd480:	f7fc ff34 	bl	23fa2ec <_ZN11USARTSerial9isEnabledEv>
 23fd484:	b138      	cbz	r0, 23fd496 <_Z15serialEventRun2v+0x22>
 23fd486:	6823      	ldr	r3, [r4, #0]
 23fd488:	4620      	mov	r0, r4
 23fd48a:	691b      	ldr	r3, [r3, #16]
 23fd48c:	4798      	blx	r3
 23fd48e:	2800      	cmp	r0, #0
 23fd490:	dd01      	ble.n	23fd496 <_Z15serialEventRun2v+0x22>
        handler();
 23fd492:	e000      	b.n	23fd496 <_Z15serialEventRun2v+0x22>
 23fd494:	bf00      	nop
}
 23fd496:	bd10      	pop	{r4, pc}
 23fd498:	00000000 	.word	0x00000000

023fd49c <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fd49c:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fd49e:	4c0d      	ldr	r4, [pc, #52]	; (23fd4d4 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fd4a0:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fd4a2:	e8d4 3f8f 	ldab	r3, [r4]
 23fd4a6:	07db      	lsls	r3, r3, #31
 23fd4a8:	d411      	bmi.n	23fd4ce <_Z22__fetch_global_Serial3v+0x32>
 23fd4aa:	4620      	mov	r0, r4
 23fd4ac:	f7fb fafa 	bl	23f8aa4 <__cxa_guard_acquire>
 23fd4b0:	b168      	cbz	r0, 23fd4ce <_Z22__fetch_global_Serial3v+0x32>
 23fd4b2:	a801      	add	r0, sp, #4
 23fd4b4:	f7ff ff92 	bl	23fd3dc <_Z20acquireSerial3Bufferv>
 23fd4b8:	2102      	movs	r1, #2
 23fd4ba:	aa01      	add	r2, sp, #4
 23fd4bc:	4806      	ldr	r0, [pc, #24]	; (23fd4d8 <_Z22__fetch_global_Serial3v+0x3c>)
 23fd4be:	f7fc fef7 	bl	23fa2b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd4c2:	4620      	mov	r0, r4
 23fd4c4:	f7fb faf3 	bl	23f8aae <__cxa_guard_release>
 23fd4c8:	4804      	ldr	r0, [pc, #16]	; (23fd4dc <_Z22__fetch_global_Serial3v+0x40>)
 23fd4ca:	f000 fad5 	bl	23fda78 <atexit>
	return serial3;
}
 23fd4ce:	4802      	ldr	r0, [pc, #8]	; (23fd4d8 <_Z22__fetch_global_Serial3v+0x3c>)
 23fd4d0:	b006      	add	sp, #24
 23fd4d2:	bd10      	pop	{r4, pc}
 23fd4d4:	1007af2c 	.word	0x1007af2c
 23fd4d8:	1007af58 	.word	0x1007af58
 23fd4dc:	023fd3c1 	.word	0x023fd3c1

023fd4e0 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fd4e0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fd4e2:	f7ff ffdb 	bl	23fd49c <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fd4e6:	4b07      	ldr	r3, [pc, #28]	; (23fd504 <_Z15serialEventRun3v+0x24>)
 23fd4e8:	4604      	mov	r4, r0
 23fd4ea:	b153      	cbz	r3, 23fd502 <_Z15serialEventRun3v+0x22>
 23fd4ec:	f7fc fefe 	bl	23fa2ec <_ZN11USARTSerial9isEnabledEv>
 23fd4f0:	b138      	cbz	r0, 23fd502 <_Z15serialEventRun3v+0x22>
 23fd4f2:	6823      	ldr	r3, [r4, #0]
 23fd4f4:	4620      	mov	r0, r4
 23fd4f6:	691b      	ldr	r3, [r3, #16]
 23fd4f8:	4798      	blx	r3
 23fd4fa:	2800      	cmp	r0, #0
 23fd4fc:	dd01      	ble.n	23fd502 <_Z15serialEventRun3v+0x22>
        handler();
 23fd4fe:	e000      	b.n	23fd502 <_Z15serialEventRun3v+0x22>
 23fd500:	bf00      	nop
}
 23fd502:	bd10      	pop	{r4, pc}
 23fd504:	00000000 	.word	0x00000000

023fd508 <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23fd508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23fd50c:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23fd510:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23fd514:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23fd518:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23fd51c:	4770      	bx	lr
	...

023fd520 <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23fd520:	2801      	cmp	r0, #1
{
 23fd522:	b570      	push	{r4, r5, r6, lr}
 23fd524:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23fd528:	d14a      	bne.n	23fd5c0 <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23fd52a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23fd52e:	009a      	lsls	r2, r3, #2
 23fd530:	d445      	bmi.n	23fd5be <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23fd532:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23fd536:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23fd53a:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23fd53c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23fd540:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23fd544:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23fd548:	4e21      	ldr	r6, [pc, #132]	; (23fd5d0 <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23fd54a:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23fd54e:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23fd552:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23fd554:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23fd558:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23fd55c:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23fd560:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd564:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23fd568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd56c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23fd570:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23fd572:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23fd576:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23fd57a:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd57e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23fd582:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd586:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23fd58a:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23fd58c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23fd590:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23fd592:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23fd596:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23fd59a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23fd59e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23fd5a2:	009b      	lsls	r3, r3, #2
 23fd5a4:	d5fb      	bpl.n	23fd59e <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd5a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23fd5aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd5ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd5b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23fd5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23fd5ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23fd5be:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23fd5c0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23fd5c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23fd5c8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23fd5cc:	e7f5      	b.n	23fd5ba <PLL_I2S_Set+0x9a>
 23fd5ce:	bf00      	nop
 23fd5d0:	1010a949 	.word	0x1010a949

023fd5d4 <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23fd5d4:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23fd5d6:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23fd5da:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23fd5de:	4770      	bx	lr

023fd5e0 <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23fd5e0:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23fd5e2:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23fd5e4:	bf0b      	itete	eq
 23fd5e6:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23fd5ea:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23fd5ee:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23fd5f0:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23fd5f2:	bf0b      	itete	eq
 23fd5f4:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23fd5f6:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23fd5f8:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23fd5fc:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23fd600:	6043      	str	r3, [r0, #4]
	}
}
 23fd602:	4770      	bx	lr

023fd604 <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23fd604:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23fd606:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23fd608:	bf0b      	itete	eq
 23fd60a:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23fd60e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23fd612:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23fd614:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23fd616:	bf0b      	itete	eq
 23fd618:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23fd61a:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23fd61c:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23fd620:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23fd624:	6043      	str	r3, [r0, #4]
	}
}
 23fd626:	4770      	bx	lr

023fd628 <AUDIO_SP_Init>:
{
 23fd628:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23fd62a:	680b      	ldr	r3, [r1, #0]
{
 23fd62c:	4605      	mov	r5, r0
 23fd62e:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23fd630:	b133      	cbz	r3, 23fd640 <AUDIO_SP_Init+0x18>
 23fd632:	3b02      	subs	r3, #2
 23fd634:	2b01      	cmp	r3, #1
 23fd636:	d903      	bls.n	23fd640 <AUDIO_SP_Init+0x18>
 23fd638:	213a      	movs	r1, #58	; 0x3a
 23fd63a:	481f      	ldr	r0, [pc, #124]	; (23fd6b8 <AUDIO_SP_Init+0x90>)
 23fd63c:	f000 fbd4 	bl	23fdde8 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23fd640:	6863      	ldr	r3, [r4, #4]
 23fd642:	2b03      	cmp	r3, #3
 23fd644:	d906      	bls.n	23fd654 <AUDIO_SP_Init+0x2c>
 23fd646:	3b06      	subs	r3, #6
 23fd648:	2b01      	cmp	r3, #1
 23fd64a:	d903      	bls.n	23fd654 <AUDIO_SP_Init+0x2c>
 23fd64c:	213b      	movs	r1, #59	; 0x3b
 23fd64e:	481a      	ldr	r0, [pc, #104]	; (23fd6b8 <AUDIO_SP_Init+0x90>)
 23fd650:	f000 fbca 	bl	23fdde8 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23fd654:	68a3      	ldr	r3, [r4, #8]
 23fd656:	2b01      	cmp	r3, #1
 23fd658:	d903      	bls.n	23fd662 <AUDIO_SP_Init+0x3a>
 23fd65a:	213c      	movs	r1, #60	; 0x3c
 23fd65c:	4816      	ldr	r0, [pc, #88]	; (23fd6b8 <AUDIO_SP_Init+0x90>)
 23fd65e:	f000 fbc3 	bl	23fdde8 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23fd662:	68e3      	ldr	r3, [r4, #12]
 23fd664:	2b03      	cmp	r3, #3
 23fd666:	d903      	bls.n	23fd670 <AUDIO_SP_Init+0x48>
 23fd668:	213d      	movs	r1, #61	; 0x3d
 23fd66a:	4813      	ldr	r0, [pc, #76]	; (23fd6b8 <AUDIO_SP_Init+0x90>)
 23fd66c:	f000 fbbc 	bl	23fdde8 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23fd670:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23fd672:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23fd674:	f043 0301 	orr.w	r3, r3, #1
 23fd678:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23fd67a:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23fd67c:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23fd67e:	f023 0301 	bic.w	r3, r3, #1
 23fd682:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23fd684:	4b0d      	ldr	r3, [pc, #52]	; (23fd6bc <AUDIO_SP_Init+0x94>)
 23fd686:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23fd688:	4b0d      	ldr	r3, [pc, #52]	; (23fd6c0 <AUDIO_SP_Init+0x98>)
 23fd68a:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23fd68c:	4b0d      	ldr	r3, [pc, #52]	; (23fd6c4 <AUDIO_SP_Init+0x9c>)
 23fd68e:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23fd690:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23fd694:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23fd696:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23fd698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23fd69c:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23fd6a0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23fd6a4:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23fd6a6:	68a2      	ldr	r2, [r4, #8]
 23fd6a8:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23fd6ac:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23fd6ae:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23fd6b2:	606b      	str	r3, [r5, #4]
}
 23fd6b4:	bd38      	pop	{r3, r4, r5, pc}
 23fd6b6:	bf00      	nop
 23fd6b8:	023ffcd9 	.word	0x023ffcd9
 23fd6bc:	80100271 	.word	0x80100271
 23fd6c0:	023fd5e1 	.word	0x023fd5e1
 23fd6c4:	023fd605 	.word	0x023fd605

023fd6c8 <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23fd6c8:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23fd6ca:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23fd6cc:	bf0b      	itete	eq
 23fd6ce:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23fd6d2:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23fd6d6:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23fd6d8:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23fd6da:	bf0b      	itete	eq
 23fd6dc:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23fd6de:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23fd6e0:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23fd6e4:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23fd6e8:	60c3      	str	r3, [r0, #12]
	}
}
 23fd6ea:	4770      	bx	lr

023fd6ec <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23fd6ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fd6f0:	461f      	mov	r7, r3
 23fd6f2:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23fd6f6:	230c      	movs	r3, #12
 23fd6f8:	4358      	muls	r0, r3
 23fd6fa:	4b4b      	ldr	r3, [pc, #300]	; (23fd828 <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23fd6fc:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23fd6fe:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23fd702:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23fd706:	b931      	cbnz	r1, 23fd716 <AUDIO_SP_RXGDMA_Init+0x2a>
 23fd708:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23fd70c:	4847      	ldr	r0, [pc, #284]	; (23fd82c <AUDIO_SP_RXGDMA_Init+0x140>)
 23fd70e:	9201      	str	r2, [sp, #4]
 23fd710:	f000 fb6a 	bl	23fdde8 <__io_assert_failed_veneer>
 23fd714:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23fd716:	4639      	mov	r1, r7
 23fd718:	230c      	movs	r3, #12
 23fd71a:	4f45      	ldr	r7, [pc, #276]	; (23fd830 <AUDIO_SP_RXGDMA_Init+0x144>)
 23fd71c:	2000      	movs	r0, #0
 23fd71e:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23fd720:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23fd722:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23fd724:	d07e      	beq.n	23fd824 <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23fd726:	2254      	movs	r2, #84	; 0x54
 23fd728:	2100      	movs	r1, #0
 23fd72a:	4b42      	ldr	r3, [pc, #264]	; (23fd834 <AUDIO_SP_RXGDMA_Init+0x148>)
 23fd72c:	4620      	mov	r0, r4
 23fd72e:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23fd730:	210b      	movs	r1, #11
 23fd732:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23fd734:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23fd738:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23fd73a:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23fd73c:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23fd73e:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23fd740:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23fd742:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23fd746:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23fd74a:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23fd74e:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23fd750:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23fd752:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23fd754:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23fd756:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23fd758:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23fd75a:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23fd75c:	d144      	bne.n	23fd7e8 <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23fd75e:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23fd762:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23fd764:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23fd766:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23fd768:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23fd76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23fd76e:	d904      	bls.n	23fd77a <AUDIO_SP_RXGDMA_Init+0x8e>
 23fd770:	f240 1177 	movw	r1, #375	; 0x177
 23fd774:	482d      	ldr	r0, [pc, #180]	; (23fd82c <AUDIO_SP_RXGDMA_Init+0x140>)
 23fd776:	f000 fb37 	bl	23fdde8 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23fd77a:	4622      	mov	r2, r4
 23fd77c:	4b2e      	ldr	r3, [pc, #184]	; (23fd838 <AUDIO_SP_RXGDMA_Init+0x14c>)
 23fd77e:	7861      	ldrb	r1, [r4, #1]
 23fd780:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23fd782:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23fd784:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23fd786:	4a2d      	ldr	r2, [pc, #180]	; (23fd83c <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23fd788:	462f      	mov	r7, r5
 23fd78a:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23fd78c:	03db      	lsls	r3, r3, #15
 23fd78e:	d522      	bpl.n	23fd7d6 <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23fd790:	1c68      	adds	r0, r5, #1
 23fd792:	d130      	bne.n	23fd7f6 <AUDIO_SP_RXGDMA_Init+0x10a>
 23fd794:	1c71      	adds	r1, r6, #1
 23fd796:	d130      	bne.n	23fd7fa <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23fd798:	2300      	movs	r3, #0
 23fd79a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23fd79e:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23fd7a2:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23fd7a6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23fd7aa:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23fd7ae:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23fd7b2:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23fd7b4:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23fd7b6:	ea03 0705 	and.w	r7, r3, r5
 23fd7ba:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23fd7be:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23fd7c0:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23fd7c4:	d2f9      	bcs.n	23fd7ba <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23fd7c6:	3b20      	subs	r3, #32
 23fd7c8:	f113 0f20 	cmn.w	r3, #32
 23fd7cc:	d1f2      	bne.n	23fd7b4 <AUDIO_SP_RXGDMA_Init+0xc8>
 23fd7ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23fd7d2:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23fd7d6:	7820      	ldrb	r0, [r4, #0]
 23fd7d8:	2201      	movs	r2, #1
 23fd7da:	7861      	ldrb	r1, [r4, #1]
 23fd7dc:	4b18      	ldr	r3, [pc, #96]	; (23fd840 <AUDIO_SP_RXGDMA_Init+0x154>)
 23fd7de:	4798      	blx	r3

	return _TRUE;
 23fd7e0:	2001      	movs	r0, #1
}
 23fd7e2:	b003      	add	sp, #12
 23fd7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23fd7e8:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23fd7ec:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23fd7ee:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23fd7f0:	08b3      	lsrs	r3, r6, #2
 23fd7f2:	8523      	strh	r3, [r4, #40]	; 0x28
 23fd7f4:	e7b8      	b.n	23fd768 <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23fd7f6:	06eb      	lsls	r3, r5, #27
 23fd7f8:	d007      	beq.n	23fd80a <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23fd7fa:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23fd7fe:	4435      	add	r5, r6
 23fd800:	3d01      	subs	r5, #1
 23fd802:	f025 051f 	bic.w	r5, r5, #31
 23fd806:	3520      	adds	r5, #32
 23fd808:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23fd80a:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23fd80c:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23fd810:	4a0a      	ldr	r2, [pc, #40]	; (23fd83c <AUDIO_SP_RXGDMA_Init+0x150>)
 23fd812:	4437      	add	r7, r6
    while (op_size > 0) {
 23fd814:	2d00      	cmp	r5, #0
 23fd816:	eba7 0305 	sub.w	r3, r7, r5
 23fd81a:	ddd8      	ble.n	23fd7ce <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23fd81c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23fd820:	3d20      	subs	r5, #32
 23fd822:	e7f7      	b.n	23fd814 <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23fd824:	2000      	movs	r0, #0
 23fd826:	e7dc      	b.n	23fd7e2 <AUDIO_SP_RXGDMA_Init+0xf6>
 23fd828:	023ffcb8 	.word	0x023ffcb8
 23fd82c:	023ffcc4 	.word	0x023ffcc4
 23fd830:	1010c43d 	.word	0x1010c43d
 23fd834:	10110ea1 	.word	0x10110ea1
 23fd838:	1010bff9 	.word	0x1010bff9
 23fd83c:	e000ed00 	.word	0xe000ed00
 23fd840:	1010bf91 	.word	0x1010bf91

023fd844 <_ZnwjRKSt9nothrow_t>:
 23fd844:	f7fb b91b 	b.w	23f8a7e <_Znwj>

023fd848 <_ZnajRKSt9nothrow_t>:
 23fd848:	f7fb b91b 	b.w	23f8a82 <_Znaj>

023fd84c <_ZSt25__throw_bad_function_callv>:
 23fd84c:	b508      	push	{r3, lr}
 23fd84e:	f7fc fbc9 	bl	23f9fe4 <abort>
	...

023fd854 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fd854:	4901      	ldr	r1, [pc, #4]	; (23fd85c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fd856:	f000 b8f9 	b.w	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd85a:	bf00      	nop
 23fd85c:	023ffd00 	.word	0x023ffd00

023fd860 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fd860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fd862:	2400      	movs	r4, #0
 23fd864:	2310      	movs	r3, #16
 23fd866:	4615      	mov	r5, r2
 23fd868:	6812      	ldr	r2, [r2, #0]
 23fd86a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fd86e:	6803      	ldr	r3, [r0, #0]
 23fd870:	e9cd 4400 	strd	r4, r4, [sp]
 23fd874:	699e      	ldr	r6, [r3, #24]
 23fd876:	466b      	mov	r3, sp
 23fd878:	47b0      	blx	r6
 23fd87a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fd87e:	f003 0306 	and.w	r3, r3, #6
 23fd882:	2b06      	cmp	r3, #6
 23fd884:	bf05      	ittet	eq
 23fd886:	9b00      	ldreq	r3, [sp, #0]
 23fd888:	2001      	moveq	r0, #1
 23fd88a:	4620      	movne	r0, r4
 23fd88c:	602b      	streq	r3, [r5, #0]
 23fd88e:	b004      	add	sp, #16
 23fd890:	bd70      	pop	{r4, r5, r6, pc}

023fd892 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fd892:	9800      	ldr	r0, [sp, #0]
 23fd894:	4290      	cmp	r0, r2
 23fd896:	bf14      	ite	ne
 23fd898:	2001      	movne	r0, #1
 23fd89a:	2006      	moveq	r0, #6
 23fd89c:	4770      	bx	lr
	...

023fd8a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fd8a0:	4b03      	ldr	r3, [pc, #12]	; (23fd8b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fd8a2:	b510      	push	{r4, lr}
 23fd8a4:	4604      	mov	r4, r0
 23fd8a6:	6003      	str	r3, [r0, #0]
 23fd8a8:	f000 f8cd 	bl	23fda46 <_ZNSt9type_infoD1Ev>
 23fd8ac:	4620      	mov	r0, r4
 23fd8ae:	bd10      	pop	{r4, pc}
 23fd8b0:	023ffd40 	.word	0x023ffd40

023fd8b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fd8b4:	b510      	push	{r4, lr}
 23fd8b6:	4604      	mov	r4, r0
 23fd8b8:	f7ff fff2 	bl	23fd8a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fd8bc:	2108      	movs	r1, #8
 23fd8be:	4620      	mov	r0, r4
 23fd8c0:	f7fb f8e1 	bl	23f8a86 <_ZdlPvj>
 23fd8c4:	4620      	mov	r0, r4
 23fd8c6:	bd10      	pop	{r4, pc}

023fd8c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fd8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd8cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fd8d0:	461f      	mov	r7, r3
 23fd8d2:	4606      	mov	r6, r0
 23fd8d4:	4615      	mov	r5, r2
 23fd8d6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fd8da:	4598      	cmp	r8, r3
 23fd8dc:	d107      	bne.n	23fd8ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fd8de:	9907      	ldr	r1, [sp, #28]
 23fd8e0:	f000 f8b4 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd8e4:	b118      	cbz	r0, 23fd8ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fd8e6:	7165      	strb	r5, [r4, #5]
 23fd8e8:	2000      	movs	r0, #0
 23fd8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd8ee:	4639      	mov	r1, r7
 23fd8f0:	4630      	mov	r0, r6
 23fd8f2:	f000 f8ab 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd8f6:	2800      	cmp	r0, #0
 23fd8f8:	d0f6      	beq.n	23fd8e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fd8fa:	2301      	movs	r3, #1
 23fd8fc:	f8c4 8000 	str.w	r8, [r4]
 23fd900:	7125      	strb	r5, [r4, #4]
 23fd902:	71a3      	strb	r3, [r4, #6]
 23fd904:	e7f0      	b.n	23fd8e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fd906 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fd906:	b538      	push	{r3, r4, r5, lr}
 23fd908:	4615      	mov	r5, r2
 23fd90a:	461c      	mov	r4, r3
 23fd90c:	f000 f89e 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd910:	b120      	cbz	r0, 23fd91c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fd912:	2308      	movs	r3, #8
 23fd914:	6025      	str	r5, [r4, #0]
 23fd916:	60e3      	str	r3, [r4, #12]
 23fd918:	2306      	movs	r3, #6
 23fd91a:	7123      	strb	r3, [r4, #4]
 23fd91c:	bd38      	pop	{r3, r4, r5, pc}

023fd91e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fd91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd920:	4605      	mov	r5, r0
 23fd922:	460c      	mov	r4, r1
 23fd924:	461e      	mov	r6, r3
 23fd926:	9201      	str	r2, [sp, #4]
 23fd928:	f000 f890 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd92c:	b950      	cbnz	r0, 23fd944 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fd92e:	2e03      	cmp	r6, #3
 23fd930:	d808      	bhi.n	23fd944 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fd932:	6823      	ldr	r3, [r4, #0]
 23fd934:	4629      	mov	r1, r5
 23fd936:	9a01      	ldr	r2, [sp, #4]
 23fd938:	4620      	mov	r0, r4
 23fd93a:	695b      	ldr	r3, [r3, #20]
 23fd93c:	b002      	add	sp, #8
 23fd93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fd942:	4718      	bx	r3
 23fd944:	b002      	add	sp, #8
 23fd946:	bd70      	pop	{r4, r5, r6, pc}

023fd948 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fd948:	4b03      	ldr	r3, [pc, #12]	; (23fd958 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fd94a:	b510      	push	{r4, lr}
 23fd94c:	4604      	mov	r4, r0
 23fd94e:	6003      	str	r3, [r0, #0]
 23fd950:	f7ff ffa6 	bl	23fd8a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fd954:	4620      	mov	r0, r4
 23fd956:	bd10      	pop	{r4, pc}
 23fd958:	023ffda0 	.word	0x023ffda0

023fd95c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fd95c:	b510      	push	{r4, lr}
 23fd95e:	4604      	mov	r4, r0
 23fd960:	f7ff fff2 	bl	23fd948 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fd964:	210c      	movs	r1, #12
 23fd966:	4620      	mov	r0, r4
 23fd968:	f7fb f88d 	bl	23f8a86 <_ZdlPvj>
 23fd96c:	4620      	mov	r0, r4
 23fd96e:	bd10      	pop	{r4, pc}

023fd970 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fd970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fd972:	9f08      	ldr	r7, [sp, #32]
 23fd974:	4605      	mov	r5, r0
 23fd976:	460e      	mov	r6, r1
 23fd978:	4614      	mov	r4, r2
 23fd97a:	4297      	cmp	r7, r2
 23fd97c:	d00a      	beq.n	23fd994 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fd97e:	68a8      	ldr	r0, [r5, #8]
 23fd980:	4631      	mov	r1, r6
 23fd982:	6802      	ldr	r2, [r0, #0]
 23fd984:	9708      	str	r7, [sp, #32]
 23fd986:	6a15      	ldr	r5, [r2, #32]
 23fd988:	4622      	mov	r2, r4
 23fd98a:	46ac      	mov	ip, r5
 23fd98c:	b003      	add	sp, #12
 23fd98e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd992:	4760      	bx	ip
 23fd994:	4619      	mov	r1, r3
 23fd996:	9301      	str	r3, [sp, #4]
 23fd998:	f000 f858 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd99c:	9b01      	ldr	r3, [sp, #4]
 23fd99e:	2800      	cmp	r0, #0
 23fd9a0:	d0ed      	beq.n	23fd97e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fd9a2:	2006      	movs	r0, #6
 23fd9a4:	b003      	add	sp, #12
 23fd9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd9a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fd9a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd9ac:	460d      	mov	r5, r1
 23fd9ae:	4619      	mov	r1, r3
 23fd9b0:	4681      	mov	r9, r0
 23fd9b2:	4617      	mov	r7, r2
 23fd9b4:	4698      	mov	r8, r3
 23fd9b6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fd9ba:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fd9be:	f000 f845 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd9c2:	b190      	cbz	r0, 23fd9ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fd9c4:	2d00      	cmp	r5, #0
 23fd9c6:	6034      	str	r4, [r6, #0]
 23fd9c8:	7137      	strb	r7, [r6, #4]
 23fd9ca:	db09      	blt.n	23fd9e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fd9cc:	1961      	adds	r1, r4, r5
 23fd9ce:	458a      	cmp	sl, r1
 23fd9d0:	bf0c      	ite	eq
 23fd9d2:	2106      	moveq	r1, #6
 23fd9d4:	2101      	movne	r1, #1
 23fd9d6:	71b1      	strb	r1, [r6, #6]
 23fd9d8:	2000      	movs	r0, #0
 23fd9da:	b001      	add	sp, #4
 23fd9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd9e0:	3502      	adds	r5, #2
 23fd9e2:	d1f9      	bne.n	23fd9d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd9e4:	2301      	movs	r3, #1
 23fd9e6:	71b3      	strb	r3, [r6, #6]
 23fd9e8:	e7f6      	b.n	23fd9d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd9ea:	4554      	cmp	r4, sl
 23fd9ec:	d106      	bne.n	23fd9fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd9ee:	4659      	mov	r1, fp
 23fd9f0:	4648      	mov	r0, r9
 23fd9f2:	f000 f82b 	bl	23fda4c <_ZNKSt9type_infoeqERKS_>
 23fd9f6:	b108      	cbz	r0, 23fd9fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fd9f8:	7177      	strb	r7, [r6, #5]
 23fd9fa:	e7ed      	b.n	23fd9d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fd9fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fda00:	463a      	mov	r2, r7
 23fda02:	4629      	mov	r1, r5
 23fda04:	6803      	ldr	r3, [r0, #0]
 23fda06:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fda0a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fda0e:	69dc      	ldr	r4, [r3, #28]
 23fda10:	4643      	mov	r3, r8
 23fda12:	46a4      	mov	ip, r4
 23fda14:	b001      	add	sp, #4
 23fda16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fda1a:	4760      	bx	ip

023fda1c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fda1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fda20:	4607      	mov	r7, r0
 23fda22:	460c      	mov	r4, r1
 23fda24:	4615      	mov	r5, r2
 23fda26:	461e      	mov	r6, r3
 23fda28:	f7ff ff6d 	bl	23fd906 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fda2c:	b948      	cbnz	r0, 23fda42 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fda2e:	68b8      	ldr	r0, [r7, #8]
 23fda30:	462a      	mov	r2, r5
 23fda32:	4621      	mov	r1, r4
 23fda34:	6803      	ldr	r3, [r0, #0]
 23fda36:	699f      	ldr	r7, [r3, #24]
 23fda38:	4633      	mov	r3, r6
 23fda3a:	46bc      	mov	ip, r7
 23fda3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fda40:	4760      	bx	ip
 23fda42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fda46 <_ZNSt9type_infoD1Ev>:
 23fda46:	4770      	bx	lr

023fda48 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fda48:	2000      	movs	r0, #0
 23fda4a:	4770      	bx	lr

023fda4c <_ZNKSt9type_infoeqERKS_>:
 23fda4c:	4281      	cmp	r1, r0
 23fda4e:	b508      	push	{r3, lr}
 23fda50:	d00e      	beq.n	23fda70 <_ZNKSt9type_infoeqERKS_+0x24>
 23fda52:	6840      	ldr	r0, [r0, #4]
 23fda54:	7803      	ldrb	r3, [r0, #0]
 23fda56:	2b2a      	cmp	r3, #42	; 0x2a
 23fda58:	d00c      	beq.n	23fda74 <_ZNKSt9type_infoeqERKS_+0x28>
 23fda5a:	6849      	ldr	r1, [r1, #4]
 23fda5c:	780b      	ldrb	r3, [r1, #0]
 23fda5e:	2b2a      	cmp	r3, #42	; 0x2a
 23fda60:	bf08      	it	eq
 23fda62:	3101      	addeq	r1, #1
 23fda64:	f7fa ffdc 	bl	23f8a20 <strcmp>
 23fda68:	fab0 f080 	clz	r0, r0
 23fda6c:	0940      	lsrs	r0, r0, #5
 23fda6e:	bd08      	pop	{r3, pc}
 23fda70:	2001      	movs	r0, #1
 23fda72:	e7fc      	b.n	23fda6e <_ZNKSt9type_infoeqERKS_+0x22>
 23fda74:	2000      	movs	r0, #0
 23fda76:	e7fa      	b.n	23fda6e <_ZNKSt9type_infoeqERKS_+0x22>

023fda78 <atexit>:
 23fda78:	2300      	movs	r3, #0
 23fda7a:	4601      	mov	r1, r0
 23fda7c:	461a      	mov	r2, r3
 23fda7e:	4618      	mov	r0, r3
 23fda80:	f000 b94c 	b.w	23fdd1c <__register_exitproc>

023fda84 <isprint>:
 23fda84:	4b02      	ldr	r3, [pc, #8]	; (23fda90 <isprint+0xc>)
 23fda86:	4418      	add	r0, r3
 23fda88:	7840      	ldrb	r0, [r0, #1]
 23fda8a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fda8e:	4770      	bx	lr
 23fda90:	023ffe6d 	.word	0x023ffe6d

023fda94 <__retarget_lock_acquire_recursive>:
 23fda94:	4770      	bx	lr

023fda96 <__retarget_lock_release>:
 23fda96:	4770      	bx	lr

023fda98 <__retarget_lock_release_recursive>:
 23fda98:	4770      	bx	lr

023fda9a <memcmp>:
 23fda9a:	3901      	subs	r1, #1
 23fda9c:	4402      	add	r2, r0
 23fda9e:	b510      	push	{r4, lr}
 23fdaa0:	4290      	cmp	r0, r2
 23fdaa2:	d101      	bne.n	23fdaa8 <memcmp+0xe>
 23fdaa4:	2000      	movs	r0, #0
 23fdaa6:	e005      	b.n	23fdab4 <memcmp+0x1a>
 23fdaa8:	7803      	ldrb	r3, [r0, #0]
 23fdaaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fdaae:	42a3      	cmp	r3, r4
 23fdab0:	d001      	beq.n	23fdab6 <memcmp+0x1c>
 23fdab2:	1b18      	subs	r0, r3, r4
 23fdab4:	bd10      	pop	{r4, pc}
 23fdab6:	3001      	adds	r0, #1
 23fdab8:	e7f2      	b.n	23fdaa0 <memcmp+0x6>

023fdaba <memcpy>:
 23fdaba:	440a      	add	r2, r1
 23fdabc:	1e43      	subs	r3, r0, #1
 23fdabe:	4291      	cmp	r1, r2
 23fdac0:	d100      	bne.n	23fdac4 <memcpy+0xa>
 23fdac2:	4770      	bx	lr
 23fdac4:	b510      	push	{r4, lr}
 23fdac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fdaca:	4291      	cmp	r1, r2
 23fdacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fdad0:	d1f9      	bne.n	23fdac6 <memcpy+0xc>
 23fdad2:	bd10      	pop	{r4, pc}

023fdad4 <memmove>:
 23fdad4:	4288      	cmp	r0, r1
 23fdad6:	b510      	push	{r4, lr}
 23fdad8:	eb01 0402 	add.w	r4, r1, r2
 23fdadc:	d902      	bls.n	23fdae4 <memmove+0x10>
 23fdade:	4284      	cmp	r4, r0
 23fdae0:	4623      	mov	r3, r4
 23fdae2:	d807      	bhi.n	23fdaf4 <memmove+0x20>
 23fdae4:	1e43      	subs	r3, r0, #1
 23fdae6:	42a1      	cmp	r1, r4
 23fdae8:	d008      	beq.n	23fdafc <memmove+0x28>
 23fdaea:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fdaee:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fdaf2:	e7f8      	b.n	23fdae6 <memmove+0x12>
 23fdaf4:	4402      	add	r2, r0
 23fdaf6:	4601      	mov	r1, r0
 23fdaf8:	428a      	cmp	r2, r1
 23fdafa:	d100      	bne.n	23fdafe <memmove+0x2a>
 23fdafc:	bd10      	pop	{r4, pc}
 23fdafe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fdb02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fdb06:	e7f7      	b.n	23fdaf8 <memmove+0x24>

023fdb08 <memset>:
 23fdb08:	4402      	add	r2, r0
 23fdb0a:	4603      	mov	r3, r0
 23fdb0c:	4293      	cmp	r3, r2
 23fdb0e:	d100      	bne.n	23fdb12 <memset+0xa>
 23fdb10:	4770      	bx	lr
 23fdb12:	f803 1b01 	strb.w	r1, [r3], #1
 23fdb16:	e7f9      	b.n	23fdb0c <memset+0x4>

023fdb18 <srand>:
 23fdb18:	b538      	push	{r3, r4, r5, lr}
 23fdb1a:	4b10      	ldr	r3, [pc, #64]	; (23fdb5c <srand+0x44>)
 23fdb1c:	4604      	mov	r4, r0
 23fdb1e:	681d      	ldr	r5, [r3, #0]
 23fdb20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fdb22:	b9b3      	cbnz	r3, 23fdb52 <srand+0x3a>
 23fdb24:	2018      	movs	r0, #24
 23fdb26:	f7fc fa25 	bl	23f9f74 <malloc>
 23fdb2a:	4602      	mov	r2, r0
 23fdb2c:	63a8      	str	r0, [r5, #56]	; 0x38
 23fdb2e:	b920      	cbnz	r0, 23fdb3a <srand+0x22>
 23fdb30:	4b0b      	ldr	r3, [pc, #44]	; (23fdb60 <srand+0x48>)
 23fdb32:	2142      	movs	r1, #66	; 0x42
 23fdb34:	480b      	ldr	r0, [pc, #44]	; (23fdb64 <srand+0x4c>)
 23fdb36:	f7fc fa71 	bl	23fa01c <__assert_func>
 23fdb3a:	490b      	ldr	r1, [pc, #44]	; (23fdb68 <srand+0x50>)
 23fdb3c:	4b0b      	ldr	r3, [pc, #44]	; (23fdb6c <srand+0x54>)
 23fdb3e:	e9c0 1300 	strd	r1, r3, [r0]
 23fdb42:	4b0b      	ldr	r3, [pc, #44]	; (23fdb70 <srand+0x58>)
 23fdb44:	2100      	movs	r1, #0
 23fdb46:	6083      	str	r3, [r0, #8]
 23fdb48:	230b      	movs	r3, #11
 23fdb4a:	8183      	strh	r3, [r0, #12]
 23fdb4c:	2001      	movs	r0, #1
 23fdb4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fdb52:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fdb54:	2200      	movs	r2, #0
 23fdb56:	611c      	str	r4, [r3, #16]
 23fdb58:	615a      	str	r2, [r3, #20]
 23fdb5a:	bd38      	pop	{r3, r4, r5, pc}
 23fdb5c:	1007a080 	.word	0x1007a080
 23fdb60:	023ffdd9 	.word	0x023ffdd9
 23fdb64:	023ffdf0 	.word	0x023ffdf0
 23fdb68:	abcd330e 	.word	0xabcd330e
 23fdb6c:	e66d1234 	.word	0xe66d1234
 23fdb70:	0005deec 	.word	0x0005deec

023fdb74 <strchr>:
 23fdb74:	b2c9      	uxtb	r1, r1
 23fdb76:	4603      	mov	r3, r0
 23fdb78:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fdb7c:	b11a      	cbz	r2, 23fdb86 <strchr+0x12>
 23fdb7e:	428a      	cmp	r2, r1
 23fdb80:	d1f9      	bne.n	23fdb76 <strchr+0x2>
 23fdb82:	4618      	mov	r0, r3
 23fdb84:	4770      	bx	lr
 23fdb86:	2900      	cmp	r1, #0
 23fdb88:	bf18      	it	ne
 23fdb8a:	2300      	movne	r3, #0
 23fdb8c:	e7f9      	b.n	23fdb82 <strchr+0xe>

023fdb8e <strchrnul>:
 23fdb8e:	b510      	push	{r4, lr}
 23fdb90:	4604      	mov	r4, r0
 23fdb92:	f7ff ffef 	bl	23fdb74 <strchr>
 23fdb96:	b918      	cbnz	r0, 23fdba0 <strchrnul+0x12>
 23fdb98:	4620      	mov	r0, r4
 23fdb9a:	f7fa ff4b 	bl	23f8a34 <strlen>
 23fdb9e:	4420      	add	r0, r4
 23fdba0:	bd10      	pop	{r4, pc}

023fdba2 <strcpy>:
 23fdba2:	4603      	mov	r3, r0
 23fdba4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fdba8:	f803 2b01 	strb.w	r2, [r3], #1
 23fdbac:	2a00      	cmp	r2, #0
 23fdbae:	d1f9      	bne.n	23fdba4 <strcpy+0x2>
 23fdbb0:	4770      	bx	lr

023fdbb2 <strncmp>:
 23fdbb2:	b510      	push	{r4, lr}
 23fdbb4:	b17a      	cbz	r2, 23fdbd6 <strncmp+0x24>
 23fdbb6:	4603      	mov	r3, r0
 23fdbb8:	3901      	subs	r1, #1
 23fdbba:	1884      	adds	r4, r0, r2
 23fdbbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdbc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fdbc4:	4290      	cmp	r0, r2
 23fdbc6:	d101      	bne.n	23fdbcc <strncmp+0x1a>
 23fdbc8:	42a3      	cmp	r3, r4
 23fdbca:	d101      	bne.n	23fdbd0 <strncmp+0x1e>
 23fdbcc:	1a80      	subs	r0, r0, r2
 23fdbce:	bd10      	pop	{r4, pc}
 23fdbd0:	2800      	cmp	r0, #0
 23fdbd2:	d1f3      	bne.n	23fdbbc <strncmp+0xa>
 23fdbd4:	e7fa      	b.n	23fdbcc <strncmp+0x1a>
 23fdbd6:	4610      	mov	r0, r2
 23fdbd8:	e7f9      	b.n	23fdbce <strncmp+0x1c>

023fdbda <strrchr>:
 23fdbda:	b538      	push	{r3, r4, r5, lr}
 23fdbdc:	4603      	mov	r3, r0
 23fdbde:	460c      	mov	r4, r1
 23fdbe0:	b969      	cbnz	r1, 23fdbfe <strrchr+0x24>
 23fdbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fdbe6:	f7ff bfc5 	b.w	23fdb74 <strchr>
 23fdbea:	1c43      	adds	r3, r0, #1
 23fdbec:	4605      	mov	r5, r0
 23fdbee:	4621      	mov	r1, r4
 23fdbf0:	4618      	mov	r0, r3
 23fdbf2:	f7ff ffbf 	bl	23fdb74 <strchr>
 23fdbf6:	2800      	cmp	r0, #0
 23fdbf8:	d1f7      	bne.n	23fdbea <strrchr+0x10>
 23fdbfa:	4628      	mov	r0, r5
 23fdbfc:	bd38      	pop	{r3, r4, r5, pc}
 23fdbfe:	2500      	movs	r5, #0
 23fdc00:	e7f5      	b.n	23fdbee <strrchr+0x14>
	...

023fdc04 <_strtol_l.constprop.0>:
 23fdc04:	2b01      	cmp	r3, #1
 23fdc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdc0a:	d001      	beq.n	23fdc10 <_strtol_l.constprop.0+0xc>
 23fdc0c:	2b24      	cmp	r3, #36	; 0x24
 23fdc0e:	d906      	bls.n	23fdc1e <_strtol_l.constprop.0+0x1a>
 23fdc10:	f7fc f9f6 	bl	23fa000 <__errno>
 23fdc14:	2316      	movs	r3, #22
 23fdc16:	6003      	str	r3, [r0, #0]
 23fdc18:	2000      	movs	r0, #0
 23fdc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fdc1e:	460d      	mov	r5, r1
 23fdc20:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fdd04 <_strtol_l.constprop.0+0x100>
 23fdc24:	462e      	mov	r6, r5
 23fdc26:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdc2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fdc2e:	f017 0708 	ands.w	r7, r7, #8
 23fdc32:	d1f7      	bne.n	23fdc24 <_strtol_l.constprop.0+0x20>
 23fdc34:	2c2d      	cmp	r4, #45	; 0x2d
 23fdc36:	d132      	bne.n	23fdc9e <_strtol_l.constprop.0+0x9a>
 23fdc38:	782c      	ldrb	r4, [r5, #0]
 23fdc3a:	2701      	movs	r7, #1
 23fdc3c:	1cb5      	adds	r5, r6, #2
 23fdc3e:	2b00      	cmp	r3, #0
 23fdc40:	d05b      	beq.n	23fdcfa <_strtol_l.constprop.0+0xf6>
 23fdc42:	2b10      	cmp	r3, #16
 23fdc44:	d109      	bne.n	23fdc5a <_strtol_l.constprop.0+0x56>
 23fdc46:	2c30      	cmp	r4, #48	; 0x30
 23fdc48:	d107      	bne.n	23fdc5a <_strtol_l.constprop.0+0x56>
 23fdc4a:	782c      	ldrb	r4, [r5, #0]
 23fdc4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fdc50:	2c58      	cmp	r4, #88	; 0x58
 23fdc52:	d14d      	bne.n	23fdcf0 <_strtol_l.constprop.0+0xec>
 23fdc54:	786c      	ldrb	r4, [r5, #1]
 23fdc56:	2310      	movs	r3, #16
 23fdc58:	3502      	adds	r5, #2
 23fdc5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fdc5e:	f04f 0c00 	mov.w	ip, #0
 23fdc62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fdc66:	4666      	mov	r6, ip
 23fdc68:	fbb8 f9f3 	udiv	r9, r8, r3
 23fdc6c:	fb03 8a19 	mls	sl, r3, r9, r8
 23fdc70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fdc74:	f1be 0f09 	cmp.w	lr, #9
 23fdc78:	d816      	bhi.n	23fdca8 <_strtol_l.constprop.0+0xa4>
 23fdc7a:	4674      	mov	r4, lr
 23fdc7c:	42a3      	cmp	r3, r4
 23fdc7e:	dd24      	ble.n	23fdcca <_strtol_l.constprop.0+0xc6>
 23fdc80:	f1bc 0f00 	cmp.w	ip, #0
 23fdc84:	db1e      	blt.n	23fdcc4 <_strtol_l.constprop.0+0xc0>
 23fdc86:	45b1      	cmp	r9, r6
 23fdc88:	d31c      	bcc.n	23fdcc4 <_strtol_l.constprop.0+0xc0>
 23fdc8a:	d101      	bne.n	23fdc90 <_strtol_l.constprop.0+0x8c>
 23fdc8c:	45a2      	cmp	sl, r4
 23fdc8e:	db19      	blt.n	23fdcc4 <_strtol_l.constprop.0+0xc0>
 23fdc90:	fb06 4603 	mla	r6, r6, r3, r4
 23fdc94:	f04f 0c01 	mov.w	ip, #1
 23fdc98:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fdc9c:	e7e8      	b.n	23fdc70 <_strtol_l.constprop.0+0x6c>
 23fdc9e:	2c2b      	cmp	r4, #43	; 0x2b
 23fdca0:	bf04      	itt	eq
 23fdca2:	782c      	ldrbeq	r4, [r5, #0]
 23fdca4:	1cb5      	addeq	r5, r6, #2
 23fdca6:	e7ca      	b.n	23fdc3e <_strtol_l.constprop.0+0x3a>
 23fdca8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fdcac:	f1be 0f19 	cmp.w	lr, #25
 23fdcb0:	d801      	bhi.n	23fdcb6 <_strtol_l.constprop.0+0xb2>
 23fdcb2:	3c37      	subs	r4, #55	; 0x37
 23fdcb4:	e7e2      	b.n	23fdc7c <_strtol_l.constprop.0+0x78>
 23fdcb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fdcba:	f1be 0f19 	cmp.w	lr, #25
 23fdcbe:	d804      	bhi.n	23fdcca <_strtol_l.constprop.0+0xc6>
 23fdcc0:	3c57      	subs	r4, #87	; 0x57
 23fdcc2:	e7db      	b.n	23fdc7c <_strtol_l.constprop.0+0x78>
 23fdcc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fdcc8:	e7e6      	b.n	23fdc98 <_strtol_l.constprop.0+0x94>
 23fdcca:	f1bc 0f00 	cmp.w	ip, #0
 23fdcce:	da05      	bge.n	23fdcdc <_strtol_l.constprop.0+0xd8>
 23fdcd0:	2322      	movs	r3, #34	; 0x22
 23fdcd2:	4646      	mov	r6, r8
 23fdcd4:	6003      	str	r3, [r0, #0]
 23fdcd6:	b942      	cbnz	r2, 23fdcea <_strtol_l.constprop.0+0xe6>
 23fdcd8:	4630      	mov	r0, r6
 23fdcda:	e79e      	b.n	23fdc1a <_strtol_l.constprop.0+0x16>
 23fdcdc:	b107      	cbz	r7, 23fdce0 <_strtol_l.constprop.0+0xdc>
 23fdcde:	4276      	negs	r6, r6
 23fdce0:	2a00      	cmp	r2, #0
 23fdce2:	d0f9      	beq.n	23fdcd8 <_strtol_l.constprop.0+0xd4>
 23fdce4:	f1bc 0f00 	cmp.w	ip, #0
 23fdce8:	d000      	beq.n	23fdcec <_strtol_l.constprop.0+0xe8>
 23fdcea:	1e69      	subs	r1, r5, #1
 23fdcec:	6011      	str	r1, [r2, #0]
 23fdcee:	e7f3      	b.n	23fdcd8 <_strtol_l.constprop.0+0xd4>
 23fdcf0:	2430      	movs	r4, #48	; 0x30
 23fdcf2:	2b00      	cmp	r3, #0
 23fdcf4:	d1b1      	bne.n	23fdc5a <_strtol_l.constprop.0+0x56>
 23fdcf6:	2308      	movs	r3, #8
 23fdcf8:	e7af      	b.n	23fdc5a <_strtol_l.constprop.0+0x56>
 23fdcfa:	2c30      	cmp	r4, #48	; 0x30
 23fdcfc:	d0a5      	beq.n	23fdc4a <_strtol_l.constprop.0+0x46>
 23fdcfe:	230a      	movs	r3, #10
 23fdd00:	e7ab      	b.n	23fdc5a <_strtol_l.constprop.0+0x56>
 23fdd02:	bf00      	nop
 23fdd04:	023ffe6e 	.word	0x023ffe6e

023fdd08 <strtol>:
 23fdd08:	4613      	mov	r3, r2
 23fdd0a:	460a      	mov	r2, r1
 23fdd0c:	4601      	mov	r1, r0
 23fdd0e:	4802      	ldr	r0, [pc, #8]	; (23fdd18 <strtol+0x10>)
 23fdd10:	6800      	ldr	r0, [r0, #0]
 23fdd12:	f7ff bf77 	b.w	23fdc04 <_strtol_l.constprop.0>
 23fdd16:	bf00      	nop
 23fdd18:	1007a080 	.word	0x1007a080

023fdd1c <__register_exitproc>:
 23fdd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fdd20:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fdde0 <__register_exitproc+0xc4>
 23fdd24:	4606      	mov	r6, r0
 23fdd26:	461f      	mov	r7, r3
 23fdd28:	460d      	mov	r5, r1
 23fdd2a:	f8d8 0000 	ldr.w	r0, [r8]
 23fdd2e:	4691      	mov	r9, r2
 23fdd30:	f7ff feb0 	bl	23fda94 <__retarget_lock_acquire_recursive>
 23fdd34:	4b26      	ldr	r3, [pc, #152]	; (23fddd0 <__register_exitproc+0xb4>)
 23fdd36:	681c      	ldr	r4, [r3, #0]
 23fdd38:	b934      	cbnz	r4, 23fdd48 <__register_exitproc+0x2c>
 23fdd3a:	4c26      	ldr	r4, [pc, #152]	; (23fddd4 <__register_exitproc+0xb8>)
 23fdd3c:	601c      	str	r4, [r3, #0]
 23fdd3e:	4b26      	ldr	r3, [pc, #152]	; (23fddd8 <__register_exitproc+0xbc>)
 23fdd40:	b113      	cbz	r3, 23fdd48 <__register_exitproc+0x2c>
 23fdd42:	681b      	ldr	r3, [r3, #0]
 23fdd44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fdd48:	6863      	ldr	r3, [r4, #4]
 23fdd4a:	2b1f      	cmp	r3, #31
 23fdd4c:	dd07      	ble.n	23fdd5e <__register_exitproc+0x42>
 23fdd4e:	f8d8 0000 	ldr.w	r0, [r8]
 23fdd52:	f7ff fea1 	bl	23fda98 <__retarget_lock_release_recursive>
 23fdd56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fdd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fdd5e:	b35e      	cbz	r6, 23fddb8 <__register_exitproc+0x9c>
 23fdd60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fdd64:	b988      	cbnz	r0, 23fdd8a <__register_exitproc+0x6e>
 23fdd66:	4b1d      	ldr	r3, [pc, #116]	; (23fdddc <__register_exitproc+0xc0>)
 23fdd68:	b923      	cbnz	r3, 23fdd74 <__register_exitproc+0x58>
 23fdd6a:	f8d8 0000 	ldr.w	r0, [r8]
 23fdd6e:	f7ff fe92 	bl	23fda96 <__retarget_lock_release>
 23fdd72:	e7f0      	b.n	23fdd56 <__register_exitproc+0x3a>
 23fdd74:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fdd78:	f7fc f8fc 	bl	23f9f74 <malloc>
 23fdd7c:	2800      	cmp	r0, #0
 23fdd7e:	d0f4      	beq.n	23fdd6a <__register_exitproc+0x4e>
 23fdd80:	2300      	movs	r3, #0
 23fdd82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fdd86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fdd8a:	6863      	ldr	r3, [r4, #4]
 23fdd8c:	2201      	movs	r2, #1
 23fdd8e:	2e02      	cmp	r6, #2
 23fdd90:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fdd94:	fa02 f203 	lsl.w	r2, r2, r3
 23fdd98:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fdd9c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fdda0:	ea43 0302 	orr.w	r3, r3, r2
 23fdda4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fdda8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fddac:	bf02      	ittt	eq
 23fddae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fddb2:	4313      	orreq	r3, r2
 23fddb4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fddb8:	6863      	ldr	r3, [r4, #4]
 23fddba:	f8d8 0000 	ldr.w	r0, [r8]
 23fddbe:	1c5a      	adds	r2, r3, #1
 23fddc0:	3302      	adds	r3, #2
 23fddc2:	6062      	str	r2, [r4, #4]
 23fddc4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fddc8:	f7ff fe66 	bl	23fda98 <__retarget_lock_release_recursive>
 23fddcc:	2000      	movs	r0, #0
 23fddce:	e7c4      	b.n	23fdd5a <__register_exitproc+0x3e>
 23fddd0:	1007affc 	.word	0x1007affc
 23fddd4:	1007af70 	.word	0x1007af70
 23fddd8:	00000000 	.word	0x00000000
 23fdddc:	023f9f75 	.word	0x023f9f75
 23fdde0:	1007a0e4 	.word	0x1007a0e4
 23fdde4:	00000000 	.word	0x00000000

023fdde8 <__io_assert_failed_veneer>:
 23fdde8:	b401      	push	{r0}
 23fddea:	4802      	ldr	r0, [pc, #8]	; (23fddf4 <__io_assert_failed_veneer+0xc>)
 23fddec:	4684      	mov	ip, r0
 23fddee:	bc01      	pop	{r0}
 23fddf0:	4760      	bx	ip
 23fddf2:	bf00      	nop
 23fddf4:	1010a871 	.word	0x1010a871

023fddf8 <__DelayMs_veneer>:
 23fddf8:	b401      	push	{r0}
 23fddfa:	4802      	ldr	r0, [pc, #8]	; (23fde04 <__DelayMs_veneer+0xc>)
 23fddfc:	4684      	mov	ip, r0
 23fddfe:	bc01      	pop	{r0}
 23fde00:	4760      	bx	ip
 23fde02:	bf00      	nop
 23fde04:	1010a995 	.word	0x1010a995

023fde08 <__DelayUs_veneer>:
 23fde08:	b401      	push	{r0}
 23fde0a:	4802      	ldr	r0, [pc, #8]	; (23fde14 <__DelayUs_veneer+0xc>)
 23fde0c:	4684      	mov	ip, r0
 23fde0e:	bc01      	pop	{r0}
 23fde10:	4760      	bx	ip
 23fde12:	bf00      	nop
 23fde14:	1010a949 	.word	0x1010a949

023fde18 <link_const_data_start>:
 23fde18:	00000000 	.word	0x00000000
 23fde1c:	34fb0000 	.word	0x34fb0000
 23fde20:	00805f9b 	.word	0x00805f9b
 23fde24:	10008000 	.word	0x10008000
	...

023fde30 <dynalib_user>:
 23fde30:	023f8a45 023f8a6d 023f8a71 00000000     E.?.m.?.q.?.....
 23fde40:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fde50:	6c617574 67644500 6d492065 736c7570     tual.Edge Impuls
 23fde60:	6e692065 65726566 2065636e 6e6e7572     e inference runn
 23fde70:	66207265 5020726f 69747261 20656c63     er for Particle 
 23fde80:	69766564 0d736563 4450000a 6564204d     devices...PDM de
 23fde90:	65646f63 6e692072 65207469 253d7272     coder init err=%
 23fdea0:	6e490064 65726566 6e69636e 65732067     d.Inferencing se
 23fdeb0:	6e697474 0a3a7367 6e490900 76726574     ttings:...Interv
 23fdec0:	203a6c61 66322e25 2e736d20 4609000a     al: %.2f ms....F
 23fded0:	656d6172 7a697320 25203a65 09000a64     rame size: %d...
 23fdee0:	706d6153 6c20656c 74676e65 25203a68     Sample length: %
 23fdef0:	736d2064 09000a2e 202e6f4e 6320666f     d ms....No. of c
 23fdf00:	7373616c 203a7365 000a6425 6c696146     lasses: %d..Fail
 23fdf10:	74206465 7473206f 20747261 214d4450     ed to start PDM!
 23fdf20:	52524500 6f43203a 20646c75 20746f6e     .ERR: Could not 
 23fdf30:	6f6c6c61 65746163 64756120 62206f69     allocate audio b
 23fdf40:	65666675 73282072 20657a69 2c296425     uffer (size %d),
 23fdf50:	69687420 6f632073 20646c75 64206562      this could be d
 23fdf60:	74206575 6874206f 69772065 776f646e     ue to the window
 23fdf70:	6e656c20 20687467 7920666f 2072756f      length of your 
 23fdf80:	65646f6d 000a0d6c 6e616353 676e696e     model...Scanning
 23fdf90:	0a2e2e2e 20642500 69766564 20736563     .....%d devices 
 23fdfa0:	6e756f66 4d000a64 203a4341 58323025     found..MAC: %02X
 23fdfb0:	3230253a 30253a58 253a5832 3a583230     :%02X:%02X:%02X:
 23fdfc0:	58323025 3230253a 207c2058 49535352     %02X:%02X | RSSI
 23fdfd0:	6425203a 000a6d42 65766441 73697472     : %dBm..Advertis
 23fdfe0:	20676e69 656d616e 7325203a 0000000a     ing name: %s....

023fdff0 <_ZTVN5spark10LogHandlerE>:
	...
 23fe000:	023f8a8d 023f91f5                       ..?...?.

023fe008 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fe010:	023f91f9 023f922d 023fb69d 023fb845     ..?.-.?...?.E.?.

023fe020 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23fe020:	00000001 ffffff80                       ........

023fe028 <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23fe028:	00000001 00000000                       ........

023fe030 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23fe030:	00000001 00000000                       ........

023fe038 <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23fe038:	00000010 00000000 00000000 00000000     ................
	...

023fe07c <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23fe07c:	00000010 00000000 00000000 00000000     ................
	...

023fe0c0 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23fe0c0:	00000001 3b800000                       .......;

023fe0c8 <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23fe0c8:	00000008 00000000 00000000 00000000     ................
	...

023fe0ec <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
 23fe0ec:	00000008 00000000 00000000 00000000     ................
	...

023fe110 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
 23fe110:	00000001 ffffff80                       ........

023fe118 <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
 23fe118:	00000001 ffffff80                       ........

023fe120 <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
 23fe120:	00000001 ffffff80                       ........

023fe128 <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
 23fe128:	00000001 ffffff80                       ........

023fe130 <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
 23fe130:	00000001 ffffff80                       ........

023fe138 <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
 23fe138:	00000001 ffffff80                       ........

023fe140 <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
 23fe140:	00000001 ffffff80                       ........

023fe148 <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
 23fe148:	00000001 ffffff80                       ........

023fe150 <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
 23fe150:	00000001 ffffff80                       ........

023fe158 <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
 23fe158:	00000001 0000003a                       ....:...

023fe160 <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
 23fe160:	00000001 ffffff80                       ........

023fe168 <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23fe168:	00000001 39cc2375                       ....u#.9

023fe170 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23fe170:	00000001 3c348482                       ......4<

023fe178 <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23fe178:	00000010 38efa6de 39193acf 39101135     .......8.:.95..9
 23fe188:	38ea3ca0 394285e0 38d7b35e 3924564b     .<.8..B9^..8KV$9
 23fe198:	38d9919c 38abaaaa 38b3eb00 391a7a88     ...8...8...8.z.9
 23fe1a8:	3934ae76 3932aab8 38a6eef6 38c999a0     v.49..29...8...8
 23fe1b8:	390bd79d                                ...9

023fe1bc <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23fe1bc:	00000010 3bbb2485 3bef4ff5 3be100a0     .....$.;.O.;...;
 23fe1cc:	3bb6ea03 3c17e6dc 3ba87078 3c005470     ...;...<xp.;pT.<
 23fe1dc:	3ba9e5ed 3b860daf 3b8c7f32 3bf1434b     ...;...;2..;KC.;
 23fe1ec:	3c0d17d4 3c0b8517 3b825b79 3b9d6da5     ...<...<y[.;.m.;
 23fe1fc:	3bda6767                                gg.;

023fe200 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23fe200:	00000001 00000001 00000063 00000028     ........c...(...

023fe210 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23fe210:	00000001 00000063 00000001 00000008     ....c...........

023fe220 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23fe220:	00000001 00000001 00000032 00000008     ........2.......

023fe230 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23fe230:	00000001 00000032 00000001 00000010     ....2...........

023fe240 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23fe240:	ffffffff 00000190 00000000 00000000     ................

023fe250 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23fe250:	ffffff09 000002c1 fffffb9f ffffff3b     ............;...
 23fe260:	ffffffca 00000253 fffffec4 fffffc2d     ....S.......-...
 23fe270:	000002eb 00000000 00000000 00000000     ................

023fe280 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
 23fe280:	fcbfe1ec 06f10d0b 0010fff8 d0efb9f4     ................
 23fe290:	0df1e80d 10ee070f 1f230505 e4ecec1e     ..........#.....
 23fe2a0:	03e10e10 050c0e07 fe1f0108 f3fdf60a     ................
 23fe2b0:	fbfe19f8 0ced120c 03201509 e8fbdb02     .......... .....
 23fe2c0:	0af9070d fef10b0e 1517ff0d e205f60e     ................
 23fe2d0:	19fa05ef 0af2021a 21160804 cef0edf0     ...........!....
 23fe2e0:	0af008dc 03e8030a 1814ff15 c7eef4ee     ................
 23fe2f0:	eceef4f1 fee90206 fb14120a caeee0f8     ................
 23fe300:	eae805f8 06b20c04 02210602 b406df00     ..........!.....
 23fe310:	f7eae70f f8de0804 0f2208f7 c207f211     ..........".....
 23fe320:	ec01fe1a 11e41009 0f1a06ff c0040513     ................
 23fe330:	f401050d 0eed16fd 0d110903 c50303fb     ................
 23fe340:	e7f409f4 06ee0e09 fd120d0b be06eaff     ................
 23fe350:	14f9fe08 11da0d0b 30fe1111 bbfcf30d     ...........0....
 23fe360:	0bfb0f14 0df3090d 1ff305fa dc00ed08     ................
 23fe370:	05e608fd 0afd0cf3 150e0806 f4fceef7     ................
 23fe380:	1cec1d0e 07eb0df5 2f120806 d3fad605     .........../....
 23fe390:	10e215f5 fae70b03 1f1bf90f f000f5fd     ................
 23fe3a0:	18ea13ee 04f9071a 170bfb06 eef90bff     ................
 23fe3b0:	03e9fbec 00070212 f81c0ffb e3f4f1e6     ................
 23fe3c0:	f3e2f2f1 02ee0f0f fe221afe c3f8dfee     ..........".....
 23fe3d0:	fedff6f0 00ed110c 03290d0d b1deccf8     ..........).....
 23fe3e0:	eae9f208 10f3170d fd280401 b1f1fb12     ..........(.....
 23fe3f0:	f001031b 14e318fa 09230507 bc11e510     ..........#.....
 23fe400:	e2f6fdfc 0de7fc02 0d29fafa d5f8ebf3     ..........).....
 23fe410:	15b0fdd1 fbaceee8 161cfbd1 01bca5f0     ................
 23fe420:	188118d1 f5b0e7f3 150ff5bb 18bc96f8     ................
 23fe430:	16a72ad5 f2b8efd0 1305e2bc 0ec082df     .*..............
 23fe440:	159d1de6 e0c6f3c2 0407f2d1 18d0b6ef     ................
 23fe450:	13ea1fd9 dadfd4c9 0ddfeedf 19e4b6ec     ................
 23fe460:	0ced21f4 e1e0c1db 0af2f6eb 24e5be07     .!.............$
 23fe470:	0cdb17f2 dad4f4c8 0bfef8e2 06d4caed     ................
 23fe480:	1ae116f5 e2e8d9b4 09e8eee9 10d0b0ea     ................
 23fe490:	0ecc1103 dcd0f1c9 11f6f5f0 13d1b9f8     ................
 23fe4a0:	0d091f07 e1c3f4b8 14e0e5cf 1c050615     ................
 23fe4b0:	10fa1f0e edd8e3b2 14f3e8de 1afcfddb     ................
 23fe4c0:	13b72bd1 d0c7e0e5 11fce7e1 1699a5e6     .+..............
 23fe4d0:	0bb622dd d7ccd9bb 09e3f8cf 08c3b8d4     ."..............
 23fe4e0:	15ae22c5 d1bfdbdf 16f4e7e6 13b49cf6     ."..............
 23fe4f0:	12bd1fed dad5cae7 1400f0e0 11ce9ef7     ................
 23fe500:	0d1b2707 dbe1dfb6 08f6f5dc 1909dbe3     .'..............
 23fe510:	0c060df5 cfd2d4af 0afe03e1 0f10e1e3     ................
 23fe520:	15ff09e6 cbbfdba9 1104fecd 1be6c3f1     ................
 23fe530:	13da20f2 d3d9c9c8 0d02f3e4 12eeadf9     . ..............
 23fe540:	1b061ee1 ddddeccd 1016f6ef 14dab7f7     ................
 23fe550:	17e21df0 d4f3d3c7 0afcf8e6 11e5b401     ................
 23fe560:	0e021700 d3e5ce8c 07fbf5dc 10eedbd6     ................
 23fe570:	13ef17ef cfbdd5ba 14feffe4 15d3cbe6     ................
 23fe580:	07c635fb cebad1b0 1c17eddd 13da9fc1     .5..............
 23fe590:	0ce727d1 cdd3eedd 0a03f2e4 12c9c806     .'..............
 23fe5a0:	040ef5fc 1620de07 0c151806 05070cff     ...... .........
 23fe5b0:	f805f504 0e02dee1 f0ca1704 f8e409e6     ................
 23fe5c0:	dad8e60c 14fbe9e5 febf0318 d2fc13f7     ................
 23fe5d0:	f0f4e813 07f4ebe3 fed30108 eef80d00     ................
 23fe5e0:	02e5d612 0405e4d3 2313020b e00202f5     ...........#....
 23fe5f0:	fef6f70e 00fef7e6 1b0bfb04 db130f04     ................
 23fe600:	00e5e413 0a0100ee 150002fd f7081905     ................
 23fe610:	f0e2f51a 090e0b04 0b1211f9 e7111210     ................
 23fe620:	f8fde6fd 0311030b 100b0423 f8132202     ........#...."..
 23fe630:	f1f6fb14 0a18efe5 eed80b1b f30019fd     ................
 23fe640:	02effc06 0105efe0 14e5040b f3fa07fa     ................
 23fe650:	0cebf702 fdfde80d 14fbfd0f e7f6090a     ................
 23fe660:	fee4c410 0b090104 02fdf414 ea061bf5     ................
 23fe670:	f6fce405 15fcfbed 10070110 d00d16fb     ................
 23fe680:	ddf4df00 010df6e1 15080110 cdff13ff     ................
 23fe690:	08f1d407 0502ee10 3314020a e2fe152a     ...........3*...
 23fe6a0:	05e8e011 18140a0f 25021015 e1160b0c     ...........%....
 23fe6b0:	f4f5e802 090a0fe9 1719181f b80801ff     ................
 23fe6c0:	e8e7ed0a 06e800f1 1cff1509 b118f903     ................
 23fe6d0:	00e9f210 05f6efea 12eefc18 d0040806     ................
 23fe6e0:	efe5eb0e 05f9f4e2 14010601 d7060911     ................
 23fe6f0:	f201e510 01e6fdec 0ff5f90d d211031f     ................
 23fe700:	03e0dee6 06fae4f5 1dff09fe e6fc0c08     ................
 23fe710:	f4d2c2f0 0507e5f0 0af50d05 edf0f800     ................
 23fe720:	07070ad7 150de409 00111d0a e40a0df4     ................
 23fe730:	110d09f9 ea08f2e9 faf2dbfb 23f5f9cb     ...............#
 23fe740:	0f1f03d8 de0defe2 d6f0e4f6 20e1ffc6     ............... 
 23fe750:	0c1a10c3 eb05e90f ebe7e2e4 12e80bed     ................
 23fe760:	111009f6 f311e6f0 e3ea0ff5 10ef0fd5     ................
 23fe770:	0a0d0d10 020d0fe5 f40405f5 08f810da     ................
 23fe780:	fd10fe1a 0dfe10f0 cee1f3f3 f703f5ea     ................
 23fe790:	f106f9f9 fd01dbf4 d5d2fef8 0bf3f5f2     ................
 23fe7a0:	0123f5dd e4ffc5d7 bfea00ff 12e106bd     ..#.............
 23fe7b0:	ff0d12c5 ef05e51c d4f1f7fd 14e7eef0     ................
 23fe7c0:	061c03cf 0213ea10 f300fa04 2dd9f9cf     ...............-
 23fe7d0:	0f0e06d7 0d05f216 dceefbf4 11d103f7     ................
 23fe7e0:	ec150707 fb0cf611 c8f0fcfe 08ed03de     ................
 23fe7f0:	f6240aef f1fcf0e0 a7f6e9ec 09df10d9     ..$.............
 23fe800:	f81311d8 ea0fe8df ade6fbf1 0fdc05ba     ................
 23fe810:	1a1c19d9 df18d5ee d4daeaf9 0fee18bf     ................
 23fe820:	fb221222 f50e06bc c2e2e309 16e526fe     "."..........&..
 23fe830:	f111ff15 ff000abf d2e8f3f3 100517eb     ................
 23fe840:	002e09e8 f20ef8cd cce7f8f4 06f50dbf     ................
 23fe850:	ed05f1c1 f20fe6d8 b3effb02 08e401c1     ................
 23fe860:	fffe00d2 f508eee8 c7ee00f9 0cf1ebb3     ................
 23fe870:	f804ec0c f20beeee d0cdf4ee 0bf609ba     ................
 23fe880:	f517f6ef e90cfaf0 c8fc07f7 15fc18f1     ................
 23fe890:	132b16e7 fc19edec c2faebf7 150d16d4     ..+.............
 23fe8a0:	0b120bda eb1ce4e9 ceefe2f3 1bf1f6e5     ................
 23fe8b0:	0208fbfa f40debfa d4fb08ef 10ff09e0     ................
 23fe8c0:	fa0610ff 0a09090d e40e111b e5f7eded     ................
 23fe8d0:	d2f306e1 0d110a10 bc021315 d8f6f4ed     ................
 23fe8e0:	ebf0f4db 0e0bfb00 e5070e16 ecffddf9     ................
 23fe8f0:	f0eee5f8 0c04fd08 e6fb0717 e6e9fc0b     ................
 23fe900:	dbff12d5 fc05fe0a d00e0d1e eefa05eb     ................
 23fe910:	ddf1fbe0 fd030707 c20e0c17 ece4eae2     ................
 23fe920:	e3f8e1f4 11fb0103 c111060e e6d8e001     ................
 23fe930:	ee0603f7 0cfa040c 0c05090f f4fadd05     ................
 23fe940:	fceadff5 0a040002 f301080f ece4ece0     ................
 23fe950:	f3f40ed7 fefeff08 0ffb0e0e e6edcbe9     ................
 23fe960:	e500fadb fef8f200 f315090b e7e6dbf8     ................
 23fe970:	def1e80c 0706f70d f00e0d12 d720ed22     ............". .
 23fe980:	cc00030d 060b050a fc07fd16 e119de17     ................
 23fe990:	ecf000f6 070f0402 bb030714 03f5f010     ................
 23fe9a0:	e7fb11e7 06fa1209 f11e050e f1e1dbff     ................
 23fe9b0:	cdf102e3 fae70e09 f3050115 dce8ded5     ................
 23fe9c0:	d7edf1d7 ffe408ff dc00fe0b e8e2ede3     ................
 23fe9d0:	e8e8f31b 03fdf806 d6110809 e7fbf4fb     ................
 23fe9e0:	f905ec12 09041413 f60a0a0e ff01f6f8     ................
 23fe9f0:	fdf6f1ef 08f0fd00 ff060007 f2f6f30f     ................
 23fea00:	0bfc03ed 1301f816 1f070c14 ebedeef9     ................
 23fea10:	04d8f5d4 0f06050d fd09071a e4e1e8eb     ................
 23fea20:	f3e6ffe6 05e1f510 f6ff0c0c d9f1e6fb     ................
 23fea30:	f1edf5dd 0ee2ef0e e511161d cef8e3f5     ................
 23fea40:	20fc081e 09162920 f40a1921 da0a1724     ...  )..!...$...
 23fea50:	0bca1805 f3f6eafe 06d9e804 04fdd0fc     ................
 23fea60:	0ee01108 f713ec1c 0ecbf70b 14f6e004     ................
 23fea70:	03f800ff ff09eb0c 0be3e80e 10fbf809     ................
 23fea80:	16d10bfd fd0cf414 1709ddea 1b04e700     ................
 23fea90:	0af816f1 f40fef19 0605f8fb 08f5f506     ................
 23feaa0:	11df23fb ed080210 0bf1ed0f 0df5f0f9     .#..............
 23feab0:	0dfcfe04 070ced02 0af3f50f 15e8ebf0     ................
 23feac0:	0ae8fdf2 f7030a13 0a08f104 0ccaefff     ................
 23fead0:	14dd05ef ec10d90b 0400e7f5 0ff7d9fc     ................
 23feae0:	09dd0c1a f40df512 061bdef7 13fff215     ................
 23feaf0:	10d2fa09 ecf8e4f8 0cfadcea 0ffee805     ................
 23feb00:	0eda03f3 fff6eef9 15fcc9f5 0beff403     ................
 23feb10:	13db1804 edffe002 0fe6e30f 0c04da04     ................
 23feb20:	15f212fc e209c811 0bdfeaf6 11fcecff     ................
 23feb30:	0fe60207 ebf9e700 0ad8dbfa 11f9f510     ................
 23feb40:	0ad10905 fd05e104 13f3d4f9 0d1ce517     ................
 23feb50:	0fea0b07 f005eaef 07efe108 0ee1ebfc     ................
 23feb60:	12d90607 f202ed14 05d9eaf0 11eef1ff     ................
 23feb70:	0efa0b17 f404e0ed 0edccbfa 1304ef0a     ................
 23feb80:	0fe10606 f40bddf8 01d1dc02 16db0200     ................
 23feb90:	11ef0ff2 ee07e2ff fddbe305 1fe8e00b     ................
 23feba0:	18da02fe f406d5fb 01dee5fb 02f9d419     ................
 23febb0:	1ce10617 f20de9e6 14d6dc04 10fbfc07     ................
 23febc0:	0dfbfd07 e6fcddef 15e2e0f6 0f13ea05     ................
 23febd0:	09f3eff1 d4f1e7b5 04e4e5fe 1be3dfed     ................
 23febe0:	0811d4bc dc0addf4 101407eb f9fa1a12     ................
 23febf0:	0d0de0dd d00feff6 1e2c0aeb f5140a08     ..........,.....
 23fec00:	fe1be4d4 f11bf5fe 181211f3 f61403e5     ................
 23fec10:	010cf1ca e10ef7f7 151a1503 f90b0aed     ................
 23fec20:	011ee0d1 f314ebf4 18eb09f8 f724130e     ..............$.
 23fec30:	0d0ce1c9 e00ef1e6 0cf908ff fffafc00     ................
 23fec40:	ff15d2da da0701f1 1712feea fd0ff7f4     ................
 23fec50:	100bfce1 ef12ed07 2407f8eb 000a160a     ...........$....
 23fec60:	fcfaeaed e00cf6e3 fbfd0afe 010305f4     ................
 23fec70:	f30ff2c5 d810e2d2 ecf80f04 f81709d1     ................
 23fec80:	0713ddcf e61fe3d1 09f2170d fe1f0adc     ................
 23fec90:	f517dad1 df19d7e6 09f81ff2 00210cf0     ..............!.
 23feca0:	081fdfc0 cf0eecf3 262206fd 001a01da     .........."&....
 23fecb0:	0208d9cf cb16e3f9 1423edf4 0a0a06f8     ..........#.....
 23fecc0:	fd08e3d4 d502e2e3 07f8ef00 fd030ae7     ................
 23fecd0:	0515e2d4 dd0bea03 fef805fc 01040b03     ................
 23fece0:	ff0aecde ed0ef0f0 01f2fcf7 05030501     ................
 23fecf0:	010cebd0 dc0dede9 fe03f5f8 fe0d18e7     ................
 23fed00:	f71cd7d7 cf0bd9f6 05e30bfd 061b1400     ................
 23fed10:	fa0becdf ec08eddc 04fe04f2 090303ef     ................
 23fed20:	040de1eb ce07f8ee 180af9ee 06231d23     ............#.#.
 23fed30:	fb17efee f30ef2fe 0ce5ebe5 fc0203f3     ................
 23fed40:	f8fefcd7 c808f0df eaea10f4 f81b0ce4     ................
 23fed50:	fa09fcd4 d312e0d1 01ed1004 090914df     ................
 23fed60:	fa16fbd5 c602ecd8 fbe10700 0d0219e8     ................
 23fed70:	061bf506 f80407ea e8fae4eb ff0d2704     .............'..
 23fed80:	fd25f904 f20c15e8 fff8eee4 f52020f9     ..%..........  .
 23fed90:	e726fd02 f60108f4 e501e9fa fc0cf901     ..&.............
 23feda0:	f22f020a f01c07ef f004e2e6 fc021505     ../.............
 23fedb0:	0419f30b f2fb08fb f4f9f4ee f4090508     ................
 23fedc0:	ff1bd502 ff0800f9 ed09f0db fe0d0a07     ................
 23fedd0:	f31c0d0b ef08fdf2 f607e5e6 fe131912     ................
 23fede0:	0222080d f216eff2 04dbebea 0f0f1800     ..".............
 23fedf0:	f922f905 fb15f3e7 eef3f6fe f60d1607     ..".............
 23fee00:	fe26e704 f603f802 f70ae6fc 04091000     ..&.............
 23fee10:	f818f40b f3110212 06ecefef 07170d02     ................
 23fee20:	fe1b00ff fb0dedfc ef08f4ff 0b040c00     ................
 23fee30:	fe0c0b01 f4f1011b 051cf301 fdf40b0b     ................
 23fee40:	0214f115 f90c01fa eb07fcf5 03100403     ................
 23fee50:	eb0cd806 fdfa01f8 cffbfbe2 ec0d0f00     ................
 23fee60:	f628fcfe fa04fa12 d8edf5f3 fd020bf4     ..(.............
 23fee70:	fc1df9fc fb10f312 dcf5f5f0 01030707     ................
 23fee80:	f624fb13 f803f7ff e103f60d f41a15f0     ..$.............
 23fee90:	fd22f602 040509f7 f7fcf5f3 010afe0e     ..".............
 23feea0:	f526fd15 f8140eff ed07f7fd 071a1010     ..&.............
 23feeb0:	0a25120c f41107f0 e5ee05f6 011b100a     ..%.............
 23feec0:	ff1d1706 f70af909 fddaf203 ff1d100f     ................
 23feed0:	fc1ef70d f614f303 eee3e2fa 0012180d     ................
 23feee0:	f514100b 0104e216 f000f2f7 fd111a1f     ................
 23feef0:	f506000b f3050209 ec01f0fa 05fcf4f4     ................
 23fef00:	cce8e432 05dd17f3 f2caf3e3 ea13081b     2...............
 23fef10:	c5d9ee0f 03be12e6 dbcafcd0 d90f0909     ................
 23fef20:	cbf3040f 06b40405 f0d0f1fa cf16f71f     ................
 23fef30:	dbf20311 04d30a00 eefef7f4 ef18f412     ................
 23fef40:	d0fc0416 02cf150a d9d203ef d705e404     ................
 23fef50:	e1fefd19 0bef17ed ecc3eecb e8fbfd0f     ................
 23fef60:	c9f2eb0d 07d619f7 f1e2f1db e50a110f     ................
 23fef70:	e1effe09 04e11603 f5eafbdd ee040807     ................
 23fef80:	d6e1f511 feee1005 e0d5f7da db01f80d     ................
 23fef90:	ddedfc15 03dd0cf5 f0e001da e7fe010f     ................
 23fefa0:	d4d6fc12 06d40f19 d5dffffc e4faf9fc     ................
 23fefb0:	bfebf3fe 03d30b05 d9e1fdfa df01f802     ................
 23fefc0:	c0ebfe12 01befc0a e4d909ee d9fd0609     ................
 23fefd0:	bef6ff0a 08df0b07 e5f5feea d10a0705     ................
 23fefe0:	dbdff516 fdef090a e7ed03ed e70b0a0e     ................
 23feff0:	d8e4ff00 06cd0507 f1dcfeef e505fd0e     ................
 23ff000:	caef010a 0ace0e18 dde2010f dafbf8f3     ................
 23ff010:	cbf1f502 fbd0160b d3cc10f1 d8f7e308     ................
 23ff020:	c5e3f60c 0ced0eeb d1dbfaea ebf4fc02     ................
 23ff030:	b6dcf80f 04d70e10 cfe209eb d204f305     ................
 23ff040:	c7e3ed12 0ed51606 cdd301db c903f000     ................
 23ff050:	bec6000a 0cd816fb c7bd03ca d0ffff0f     ................
 23ff060:	bddaf80f 12dd0efe dee4f8e1 d405f306     ................
 23ff070:	d1e8ee05 16cf0f16 dfdf0de2 c1f6f308     ................
 23ff080:	f6d4f315 09c80be7 ffb401d4 f10cff0a     ................

023ff090 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
 23ff090:	000000c9 00000477 fffff725 000006fc     ....w...%.......
 23ff0a0:	fffffd79 0000012d fffff782 fffff497     y...-...........
 23ff0b0:	ffffec2f fffff0ad fffffd76 00000146     /.......v...F...
 23ff0c0:	fffffed7 ffffedfa fffff6e3 00000dde     ................

023ff0d0 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
 23ff0d0:	f71c5e03 ee9f00b4 e4b946f6 c1c102c3     .^.......F......
 23ff0e0:	e2ec7ffa e394fbb5 bad9aaf6 eccde414     ................
 23ff0f0:	8ff981fd 14f4e319 88f89444 05cfdbfa     ........D.......
 23ff100:	350a1808 dff896d3 49191853 f01a81d9     ...5....S..I....
 23ff110:	00092af3 c8008ae3 a050c717 01c9e761     .*........P.a...
 23ff120:	4735cd09 f6d7f342 c57ffde4 e60be04f     ..5GB.......O...
 23ff130:	ea0ab2f2 102cef0b f12bbdf7 f8280e12     ......,...+...(.
 23ff140:	0d7ffc03 0e132703 3be61693 14c9f3e7     .....'.....;....
 23ff150:	fcbd4381 e59c3b29 3fbc5983 03a117f1     .C..);...Y.?....
 23ff160:	2d73113a 000905e8 e24c030d fcfbfdf0     :.s-......L.....
 23ff170:	477ffbf7 d8c401f0 a3fb52f5 0c7e32fb     ...G.....R...2~.
 23ff180:	1a364303 20711e36 d5e220fd fb7f113f     .C6.6.q . ..?...
 23ff190:	00fece48 5130ff15 0e81c21e 74a8fb1c     H.....0Q.......t
 23ff1a0:	eef6e118 1cd33a0f 6aefc31b e9293885     .....:.....j.8).
 23ff1b0:	ee93d314 f1e4fdc9 7fb3ec07 14cc3efb     .............>..
 23ff1c0:	7faee4ac ff4ffd4d 4ebee29c 1027f928     ....M.O....N(.'.
 23ff1d0:	5c9ee4ae 1f270a0e 39d9eaf6 ee24ed79     ...\..'....9y.$.
 23ff1e0:	0b3bd1f2 f529e77f 2ce1ddf1 f115e720     ..;...)...., ...
 23ff1f0:	17d81df4 ec3ef6fb fcc617f7 e80e06ef     ......>.........
 23ff200:	f97f48fa fe00ed0f 1caf1c2a bcddfe90     .H......*.......
 23ff210:	46c1547f b6c7cd99 517e66f0 d4ecbec2     .T.F.....f~Q....
 23ff220:	1f3050fd bbf506d4 424a7ff6 adfbecc0     .P0.......JB....
 23ff230:	58deee28 afb8d0e4 fc43094c dcbdc4f4     (..X....L.C.....
 23ff240:	db56ee12 d9cbc703 cc7fe5fe e3c6d8e9     ..V.............

023ff250 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23ff250:	00000008 3780c5af 37a12c38 37a4c0f8     .......78,.7...7
 23ff260:	378fc9ae 37ca219f 375cff74 37954a88     ...7.!.7t.\7.J.7
 23ff270:	3786a713                                ...7

023ff274 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
 23ff274:	00000008 3b80c5af 3ba12c38 3ba4c0f8     .......;8,.;...;
 23ff284:	3b8fc9ae 3bca219f 3b5cff74 3b954a88     ...;.!.;t.\;.J.;
 23ff294:	3b86a713                                ...;

023ff298 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
 23ff298:	00000001 3b800000                       .......;

023ff2a0 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
 23ff2a0:	00000001 3ca3ea2a                       ....*..<

023ff2a8 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
 23ff2a8:	00000001 3ca3ea2a                       ....*..<

023ff2b0 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
 23ff2b0:	00000001 3ca3ea2a                       ....*..<

023ff2b8 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
 23ff2b8:	00000001 3ca3ea2a                       ....*..<

023ff2c0 <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
 23ff2c0:	00000001 3d10bfb9                       .......=

023ff2c8 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
 23ff2c8:	00000001 3d10bfb9                       .......=

023ff2d0 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
 23ff2d0:	00000001 3d10bfb9                       .......=

023ff2d8 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
 23ff2d8:	00000001 3d10bfb9                       .......=

023ff2e0 <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
 23ff2e0:	00000001 3f071097                       .......?

023ff2e8 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
 23ff2e8:	00000001 3b800000                       .......;

023ff2f0 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
 23ff2f0:	0000154a 0000234c 00000c17 ffffe1e9     J...L#..........
 23ff300:	000033f4 ffff8ad8 fffff882 ffffa89f     .3..............

023ff310 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
 23ff310:	5116e3fe 23722912 b7efd6db ccbaa4dd     ...Q.)r#........
 23ff320:	10d7afcb 200ffe4b e5151816 490b1825     ....K.. ....%..I
 23ff330:	11524056 fd17fe1c 61d7b8ec 427b1027     V@R........a'.{B
 23ff340:	1e0fcdf8 e701f581 5ddad401 0413220d     ...........]."..
 23ff350:	073707f1 591a3040 2c2d312a e4e02e35     ..7.@0.Y*1-,5...
 23ff360:	3437b811 ff10e945 b6aff6d3 b0be91c3     ..74E...........
 23ff370:	16fa9ea3 02f1e147 0dd2e4f6 effb1cf5     ....G...........
 23ff380:	fe182a35 f4152bf3 4b562dad 5c0a7f31     5*...+...-VK1..\
 23ff390:	d8eff822 e72ce921 2c37ffc4 1d37e70d     "...!.,...7,..7.
 23ff3a0:	e3e0f605 c1f505e7 0ce7d4a9 ba11d7bd     ................
 23ff3b0:	27133803 5454673f e4e8e52e 05dde20c     .8.'?gTT........
 23ff3c0:	f7f5eff7 0a101f0c de0505d4 e3e519ed     ................
 23ff3d0:	e7dae6b1 a909eebe 064a0f13 3b57661d     ..........J..fW;
 23ff3e0:	0cd8fdec e702ee27 f62729e1 260202e2     ....'....)'....&
 23ff3f0:	19e83215 d108d8eb 10c99dc1 f2f8fbf6     .2..............
 23ff400:	e0bb3167 e9d5c2c2 cd04e28d e5a8e90e     g1..............
 23ff410:	1cfbdb49 ecdcee50 9ea0bdd0 02c0c6cf     I...P...........
 23ff420:	cd0b0bba 0b30cffe dae1f173 ca04ede9     ......0.s.......
 23ff430:	bd1fb4d5 d9ec08bc 2c01c6e4 d9c2072c     ...........,,...
 23ff440:	b696e998 02c2bfb2 aebef0b1 f2e7d2ae     ................
 23ff450:	01b7ce41 3d5d3a48 2e1a0f26 3135582b     A...H:]=&...+X51
 23ff460:	29601b3e 450a407f f8f8df27 4b594820     >.`).@.E'... HYK
 23ff470:	094c2a54 6c545043 09472b3b f720f943     T*L.CPTl;+G.C. .
 23ff480:	c3f7ec64 1c5408c7 e3486063 10f6fce0     d.....T.c`H.....
 23ff490:	0d3b1e13 414c257b 02dac7f3 0dcf2f00     ..;.{%LA...../..
 23ff4a0:	e8ffc6cf aef0e609 b4bff044 eb55c488     ........D.....U.
 23ff4b0:	dd22654f 04c1d3d1 0e27d2f6 4f54f54b     Oe".......'.K.TO
 23ff4c0:	e1b0abe7 e62c0c0d 01570c35 d4f91f2f     ......,.5.W./...
 23ff4d0:	ad131507 1b08ef81 e8194e37 e2a0d88e     ........7N......
 23ff4e0:	281fe1d6 f043ce56 d99395bc e5d3f809     ...(V.C.........
 23ff4f0:	c39add6c f1aee3bc 362cfddd 2d16381e     l.........,6.8.-
 23ff500:	e4d7d9ea 0dd3050d 24e5e818 16fbf029     ...........$)...
 23ff510:	ea0812f3 1af3f803 86d3f544 b7dad1c5     ........D.......
 23ff520:	2e39f8f5 feff3500 eff8fae4 23fd270c     ..9..5.......'.#
 23ff530:	fce90923 24e80c04 0a0df8e2 0ce0dff9     #......$........
 23ff540:	bb83d27f d5c1cea5 392feec6 0ff4421e     ........../9.B..
 23ff550:	fbedd7de f9e1121c 00cace22 e0170af9     ........".......
 23ff560:	13dc1d1b eef5ed26 0cca33eb f3c6caeb     ....&....3......
 23ff570:	75053112 2a266b63 0f140ee4 d84709c6     .1.uck&*......G.
 23ff580:	070499f4 51af11d4 fc22d62d f2110ffc     .......Q-.".....
 23ff590:	29f6f1ab f2d0bbeb 1ef8ee02 332e7f5f     ...)........_..3
 23ff5a0:	2152fc22 3b30f70c 18cfe7cc 11d2eb0f     ".R!..0;........
 23ff5b0:	e9dc01f8 d3d05417 e613f425 e2eadbeb     .....T..%.......
 23ff5c0:	5d433f28 3b1a7652 a919dc3f 2df24600     (?C]Rv.;?....F.-
 23ff5d0:	1526abec 4df7c60d c7d3a90f 3cfa0804     ..&....M.......<
 23ff5e0:	e7e72410 cce0e6cf f1d9c2dc 123ffbd5     .$............?.
 23ff5f0:	05507f2b 09ef05df 0c3e0cfc e003df05     +.P.......>.....
 23ff600:	f2a8ae10 e6e602bb ed20eb05 0f0c25ca     .......... ..%..
 23ff610:	15e30905 125c20c6 2e663523 f2e9c2e1     ..... \.#5f.....
 23ff620:	160e3be2 2825e1e3 faadf2d8 f4e0020f     .;....%(........
 23ff630:	b9bbd7f6 d7d0b5a0 c2c30220 ef16dcd5     ........ .......
 23ff640:	ee45274d ed0abbe3 f8e10212 05f814e6     M'E.............
 23ff650:	03cceff4 09d3bdc9 29f1cc24 0eced705     ........$..)....
 23ff660:	0d4bffe3 32f0dd4f f0ed2622 e0bf12e3     ..K.O..2"&......
 23ff670:	12dec809 0c041918 dafd3e58 f6ecf71a     ........X>......
 23ff680:	03b0ace7 2901a7b0 134d3902 1bdf0c48     .......).9M.H...
 23ff690:	db08f10c 030516f0 08d4cbe8 1ee7de07     ................
 23ff6a0:	0229225a 16cd1810 019a81ce fef0aab7     Z").............
 23ff6b0:	3f1e32e9 4c1b2516 f91e1f36 120925ef     .2.?.%.L6....%..
 23ff6c0:	12f30ac8 4e250eea 0be50617 21f3ede1     ......%N.......!

023ff6d0 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23ff6d0:	00000002 00000001 00000f78              ........x...

023ff6dc <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23ff6dc:	00000001 00000004                       ........

023ff6e4 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23ff6e4:	00000001 00000004                       ........

023ff6ec <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23ff6ec:	00000001 00000004                       ........

023ff6f4 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23ff6f4:	00000001 00000004                       ........

023ff6fc <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23ff6fc:	00000001 00000002                       ........

023ff704 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23ff704:	00000001 00000009                       ........

023ff70c <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23ff70c:	00000002 00000009 00000190              ............

023ff718 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23ff718:	00000001 00000010                       ........

023ff720 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23ff720:	00000004 00000010 00000001 00000003     ................
 23ff730:	00000008                                ....

023ff734 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23ff734:	00000001 00000008                       ........

023ff73c <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
 23ff73c:	00000004 00000008 00000001 00000003     ................
 23ff74c:	00000028                                (...

023ff750 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
 23ff750:	00000004 00000001 00000001 00000063     ............c...
 23ff760:	00000028                                (...

023ff764 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
 23ff764:	00000004 00000001 00000001 00000063     ............c...
 23ff774:	00000008                                ....

023ff778 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
 23ff778:	00000004 00000001 00000063 00000001     ........c.......
 23ff788:	00000008                                ....

023ff78c <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
 23ff78c:	00000004 00000001 00000032 00000001     ........2.......
 23ff79c:	00000008                                ....

023ff7a0 <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
 23ff7a0:	00000004 00000001 00000001 00000032     ............2...
 23ff7b0:	00000008                                ....

023ff7b4 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
 23ff7b4:	00000004 00000001 00000001 00000032     ............2...
 23ff7c4:	00000010                                ....

023ff7c8 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
 23ff7c8:	00000004 00000001 00000032 00000001     ........2.......
 23ff7d8:	00000010                                ....

023ff7dc <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
 23ff7dc:	00000004 00000001 00000019 00000001     ................
 23ff7ec:	00000010                                ....

023ff7f0 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
 23ff7f0:	00000002 00000001 00000190              ............

023ff7fc <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
 23ff7fc:	00000002 00000001 00000009              ............

023ff808 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
 23ff808:	00000002 00000001 00000009              ............

023ff814 <_ZN12_GLOBAL__N_1L6quant0E>:
 23ff814:	023fe0c0 023fe020 00000000              ..?. .?.....

023ff820 <_ZN12_GLOBAL__N_1L6quant6E>:
 23ff820:	023fe168 023fe028 00000000              h.?.(.?.....

023ff82c <_ZN12_GLOBAL__N_1L6quant7E>:
 23ff82c:	023fe170 023fe030 00000000              p.?.0.?.....

023ff838 <_ZN12_GLOBAL__N_1L6quant8E>:
 23ff838:	023fe178 023fe038 00000000              x.?.8.?.....

023ff844 <_ZN12_GLOBAL__N_1L6quant9E>:
 23ff844:	023fe1bc 023fe07c 00000000              ..?.|.?.....

023ff850 <_ZN12_GLOBAL__N_1L7quant10E>:
 23ff850:	023ff250 023fe0c8 00000000              P.?...?.....

023ff85c <_ZN12_GLOBAL__N_1L7quant11E>:
 23ff85c:	023ff274 023fe0ec 00000000              t.?...?.....

023ff868 <_ZN12_GLOBAL__N_1L7quant12E>:
 23ff868:	023ff298 023fe110 00000000              ..?...?.....

023ff874 <_ZN12_GLOBAL__N_1L7quant13E>:
 23ff874:	023ff2a0 023fe118 00000000              ..?...?.....

023ff880 <_ZN12_GLOBAL__N_1L7quant14E>:
 23ff880:	023ff2a8 023fe120 00000000              ..?. .?.....

023ff88c <_ZN12_GLOBAL__N_1L7quant15E>:
 23ff88c:	023ff2b0 023fe128 00000000              ..?.(.?.....

023ff898 <_ZN12_GLOBAL__N_1L7quant16E>:
 23ff898:	023ff2b8 023fe130 00000000              ..?.0.?.....

023ff8a4 <_ZN12_GLOBAL__N_1L7quant17E>:
 23ff8a4:	023ff2c0 023fe138 00000000              ..?.8.?.....

023ff8b0 <_ZN12_GLOBAL__N_1L7quant18E>:
 23ff8b0:	023ff2c8 023fe140 00000000              ..?.@.?.....

023ff8bc <_ZN12_GLOBAL__N_1L7quant19E>:
 23ff8bc:	023ff2d0 023fe148 00000000              ..?.H.?.....

023ff8c8 <_ZN12_GLOBAL__N_1L7quant20E>:
 23ff8c8:	023ff2d8 023fe150 00000000              ..?.P.?.....

023ff8d4 <_ZN12_GLOBAL__N_1L7quant21E>:
 23ff8d4:	023ff2e0 023fe158 00000000              ..?.X.?.....

023ff8e0 <_ZN12_GLOBAL__N_1L7quant22E>:
 23ff8e0:	023ff2e8 023fe160 00000000              ..?.`.?.....

023ff8ec <_ZTV18Microphone_PDM_MCU>:
	...
 23ff8f4:	023f9691 023f96a5 023f966d 023f9805     ..?...?.m.?...?.
 23ff904:	023f9671 023f982d 023f97ef 023f983d     q.?.-.?...?.=.?.
 23ff914:	023f984f 023f987d                       O.?.}.?.

023ff91c <_ZTV14Microphone_PDM>:
	...
 23ff924:	023f96b9 023f96cd 023f966d 023f967d     ..?...?.m.?.}.?.
 23ff934:	023f9677 023f9681 023f9685 023f9689     w.?...?...?...?.
 23ff944:	023f968d 023f96e1                       ..?...?.

023ff94c <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ff954:	023f97ed 023f97f7 023f966d 023f9805     ..?...?.m.?...?.
 23ff964:	023f9671 023f982d 023f97ef 023f983d     q.?.-.?...?.=.?.
 23ff974:	023f984f 023f987d                       O.?.}.?.

023ff97c <_ZTVN5spark12NetworkClassE>:
	...
 23ff984:	023fa055 023fa05f 023fa069 023fa073     U.?._.?.i.?.s.?.
 23ff994:	023fa07d 023fa089 023fa095 023fa09d     }.?...?...?...?.
 23ff9a4:	023fa0a5 023fa0b1 023fa0b9 023fa0c3     ..?...?...?...?.
 23ff9b4:	023fa0cd                                ..?.

023ff9b8 <_ZTVN5spark9WiFiClassE>:
	...
 23ff9c0:	023fa217 023fa20d 023fa203 023fa1b9     ..?...?...?...?.
 23ff9d0:	023fa1f7 023fa1eb 023fa095 023fa09d     ..?...?...?...?.
 23ff9e0:	023fa1df 023fa1d7 023fa1cd 023fa1c3     ..?...?...?...?.
 23ff9f0:	023fa0cd                                ..?.

023ff9f4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ff9fc <_ZTV11USARTSerial>:
	...
 23ffa04:	023fa235 023fa2a1 023fa279 023fb9f1     5.?...?.y.?...?.
 23ffa14:	023fa249 023fa265 023fa257 023fa273     I.?.e.?.W.?.s.?.
 23ffa24:	023fa237 023fa23b 75007525 78343025     7.?.;.?.%u.u%04x
 23ffa34:	00000000                                ....

023ffa38 <_ZTV9USBSerial>:
	...
 23ffa40:	023fa6e3 023fa74b 023fa721 023fb9f1     ..?.K.?.!.?...?.
 23ffa50:	023fa713 023fa6e5 023fa6f5 023fa745     ..?...?...?.E.?.
 23ffa60:	023fa705 023fa6dd                       ..?...?.

023ffa68 <_ZTV9IPAddress>:
	...
 23ffa70:	023fa7fd 023fa7ed 023fa7ef 252d5925     ..?...?...?.%Y-%
 23ffa80:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffa90:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ffaa0:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffab0:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffac0:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffad0:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffae0:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffaf0:	0066006d 66006e6c 0074006e 65646f63     m.f.ln.fn.t.code
 23ffb00:	74656400 006c6961                       .detail.

023ffb08 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb10:	023faa71 023faa97 023faa55 023fa321     q.?...?.U.?.!.?.

023ffb20 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb28:	023faf49 023faf61 023fb69d 023fb845     I.?.a.?...?.E.?.

023ffb38 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffb40:	023faf75 023faf89 023fb87d 023faa5d     u.?...?.}.?.].?.

023ffb50 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffb58:	023faa6f 023faaa5 023fb601 023faa5f     o.?...?...?._.?.

023ffb68 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffb70:	023faa6d 023faab3 023fae8d 023faad5     m.?...?...?...?.
 23ffb80:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ffb90:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ffba0:	74530065 20747261 63736964 7265766f     e.Start discover
 23ffbb0:	20676e69 76726573 73656369 ffff002e     ing services....
 23ffbc0:	ffffffff 73734100 69747265 61466e6f     .....AssertionFa
 23ffbd0:	72756c69 61682065 6c625f6c 74735f65     ilure hal_ble_st
 23ffbe0:	5f6b6361 74696e69 6c756e28 7274706c     ack_init(nullptr
 23ffbf0:	3d3d2029 53595320 5f4d4554 4f525245     ) == SYSTEM_ERRO
 23ffc00:	4f4e5f52 4600454e 656c6961 6f742064     R_NONE.Failed to
 23ffc10:	6c6c6120 7461636f 656d2065 79726f6d      allocate memory
 23ffc20:	61460021 64656c69 206f7420 65707061     !.Failed to appe
 23ffc30:	7020646e 20726565 746e6543 206c6172     nd peer Central 
 23ffc40:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
 23ffc50:	69440064 6e6f6373 7463656e 00006465     d.Disconnected..

023ffc60 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc68:	023fba83 023fbaa5 023fc0c1 023fbab3     ..?...?...?...?.
 23ffc78:	023fba85                                ..?.

023ffc7c <_ZTVN5spark13EthernetClassE>:
	...
 23ffc84:	023fd36b 023fd361 023fd357 023fd34d     k.?.a.?.W.?.M.?.
 23ffc94:	023fd341 023fd335 023fa095 023fa09d     A.?.5.?...?...?.
 23ffca4:	023fd329 023fd321 023fd317 023fd30d     ).?.!.?...?...?.
 23ffcb4:	023fa0cd                                ..?.

023ffcb8 <AUDIO_DEV_TABLE>:
 23ffcb8:	40010800 0000000a 0000000b              ...@........

023ffcc4 <__FUNCTION__.0>:
 23ffcc4:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffcd4:	74696e49                                 Init.

023ffcd9 <__FUNCTION__.4>:
 23ffcd9:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffce7 <_ZSt7nothrow>:
	...

023ffce8 <_ZTSSt19_Sp_make_shared_tag>:
 23ffce8:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffcf8:	5f646572 00676174                       red_tag.

023ffd00 <_ZTISt19_Sp_make_shared_tag>:
 23ffd00:	023ffd40 023ffce8                       @.?...?.

023ffd08 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd08:	023ffda0 023ffd14 023ffdc4              ..?...?...?.

023ffd14 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd14:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd24:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd34:	00000045                                E...

023ffd38 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd38:	00000000 023ffd08 023fd8a1 023fd8b5     ......?...?...?.
 23ffd48:	023fda49 023fda49 023fd91f 023fd861     I.?.I.?...?.a.?.
 23ffd58:	023fd907 023fd8c9 023fd893              ..?...?...?.

023ffd64 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffd64:	023ffda0 023ffd70 023ffd08              ..?.p.?...?.

023ffd70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffd70:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffd80:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffd90:	456f666e 00000000                       nfoE....

023ffd98 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffd98:	00000000 023ffd64 023fd949 023fd95d     ....d.?.I.?.].?.
 23ffda8:	023fda49 023fda49 023fd91f 023fd861     I.?.I.?...?.a.?.
 23ffdb8:	023fda1d 023fd9a9 023fd971              ..?...?.q.?.

023ffdc4 <_ZTISt9type_info>:
 23ffdc4:	023ffd40 023ffdcc                       @.?...?.

023ffdcc <_ZTSSt9type_info>:
 23ffdcc:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffddc:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffdec:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffdfc:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe0c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe1c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe2c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe3c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffe4c:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffe5c:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffe6d <_ctype_>:
 23ffe6d:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffe7d:	20202020 20202020 20202020 20202020                     
 23ffe8d:	10108820 10101010 10101010 10101010      ...............
 23ffe9d:	04040410 04040404 10040404 10101010     ................
 23ffead:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffebd:	01010101 01010101 01010101 10101010     ................
 23ffecd:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffedd:	02020202 02020202 02020202 10101010     ................
 23ffeed:	00000020 00000000 00000000 00000000      ...............
	...

023fff70 <__sf_fake_stderr>:
	...

023fff90 <__sf_fake_stdin>:
	...

023fffb0 <__sf_fake_stdout>:
	...

023fffd0 <link_const_data_end>:
 23fffd0:	023f954d 	.word	0x023f954d
 23fffd4:	023f95e1 	.word	0x023f95e1
 23fffd8:	023f98f1 	.word	0x023f98f1
 23fffdc:	023fa1a5 	.word	0x023fa1a5
 23fffe0:	023fa221 	.word	0x023fa221
 23fffe4:	023faa2d 	.word	0x023faa2d
 23fffe8:	023faa41 	.word	0x023faa41
 23fffec:	023fb68d 	.word	0x023fb68d
 23ffff0:	023fd109 	.word	0x023fd109
 23ffff4:	023fd2e9 	.word	0x023fd2e9
 23ffff8:	023fd375 	.word	0x023fd375
