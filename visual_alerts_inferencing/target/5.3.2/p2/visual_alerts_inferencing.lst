
/home/nick/software/visual_alert/visual_alerts_inferencing/target/5.3.2/p2/visual_alerts_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085eb000  085eb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085eb018  085eb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085eb084  085eb084  0000b084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023ec928  085eb090  0000c928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   000136cc  023ec930  085eb098  0000c930  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data_alt     00000000  023ffffc  023ffffc  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffffc  023ffffc  00030000  2**0
                  CONTENTS
  7 .data         00000308  10079990  085fe764  00029990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bdsram.data  00000800  10079ca0  085fea6c  00029ca0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b50  1007a4a0  1007a4a0  0003a4a0  2**5
                  ALLOC
 10 .secure_ram_text 00000000  1007e000  1007e000  00030000  2**0
                  CONTENTS
 11 .backup       00000004  1007b400  085ff26c  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .module_info_suffix_align 00000d48  085ff270  085ff270  0002f270  2**0
                  ALLOC
 13 .module_info_product 00000006  085fffb8  085fffb8  0002f270  2**0
                  ALLOC
 14 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   001dab4b  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00021714  00000000  00000000  0020ab4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003c00  00000000  00000000  0022c25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000368dd  00000000  00000000  0022fe5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0007cdbe  00000000  00000000  0026673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001550cc  00000000  00000000  002e34fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000770f1  00000000  00000000  004385c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00011d78  00000000  00000000  004af6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000bfa0  00000000  00000000  004c1430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085eb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85eb018:	480e      	ldr	r0, [pc, #56]	; (85eb054 <module_user_pre_init+0x3c>)
 85eb01a:	490f      	ldr	r1, [pc, #60]	; (85eb058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85eb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85eb01e:	4288      	cmp	r0, r1
 85eb020:	d005      	beq.n	85eb02e <module_user_pre_init+0x16>
 85eb022:	4a0e      	ldr	r2, [pc, #56]	; (85eb05c <module_user_pre_init+0x44>)
 85eb024:	4282      	cmp	r2, r0
 85eb026:	d002      	beq.n	85eb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85eb028:	4b0d      	ldr	r3, [pc, #52]	; (85eb060 <module_user_pre_init+0x48>)
 85eb02a:	1a12      	subs	r2, r2, r0
 85eb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85eb02e:	480d      	ldr	r0, [pc, #52]	; (85eb064 <module_user_pre_init+0x4c>)
 85eb030:	4a0d      	ldr	r2, [pc, #52]	; (85eb068 <module_user_pre_init+0x50>)
 85eb032:	2100      	movs	r1, #0
 85eb034:	4b0d      	ldr	r3, [pc, #52]	; (85eb06c <module_user_pre_init+0x54>)
 85eb036:	1a12      	subs	r2, r2, r0
 85eb038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85eb03a:	480d      	ldr	r0, [pc, #52]	; (85eb070 <module_user_pre_init+0x58>)
 85eb03c:	490d      	ldr	r1, [pc, #52]	; (85eb074 <module_user_pre_init+0x5c>)
 85eb03e:	4288      	cmp	r0, r1
 85eb040:	d005      	beq.n	85eb04e <module_user_pre_init+0x36>
 85eb042:	4a0d      	ldr	r2, [pc, #52]	; (85eb078 <module_user_pre_init+0x60>)
 85eb044:	4282      	cmp	r2, r0
 85eb046:	d002      	beq.n	85eb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85eb048:	4b05      	ldr	r3, [pc, #20]	; (85eb060 <module_user_pre_init+0x48>)
 85eb04a:	1a12      	subs	r2, r2, r0
 85eb04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85eb04e:	4801      	ldr	r0, [pc, #4]	; (85eb054 <module_user_pre_init+0x3c>)
 85eb050:	bd08      	pop	{r3, pc}
 85eb052:	bf00      	nop
 85eb054:	10079990 	.word	0x10079990
 85eb058:	085fe764 	.word	0x085fe764
 85eb05c:	10079c98 	.word	0x10079c98
 85eb060:	10110d2d 	.word	0x10110d2d
 85eb064:	1007a4a0 	.word	0x1007a4a0
 85eb068:	1007aff0 	.word	0x1007aff0
 85eb06c:	10110ea1 	.word	0x10110ea1
 85eb070:	023ec928 	.word	0x023ec928
 85eb074:	085eb090 	.word	0x085eb090
 85eb078:	023ffffc 	.word	0x023ffffc

085eb07c <dynalib_preinit>:
 85eb07c:	085eb019 00000000                       ..^.....

Disassembly of section .psram_text:

023ec930 <__aeabi_drsub>:
 23ec930:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23ec934:	e002      	b.n	23ec93c <__adddf3>
 23ec936:	bf00      	nop

023ec938 <__aeabi_dsub>:
 23ec938:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023ec93c <__adddf3>:
 23ec93c:	b530      	push	{r4, r5, lr}
 23ec93e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23ec942:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23ec946:	ea94 0f05 	teq	r4, r5
 23ec94a:	bf08      	it	eq
 23ec94c:	ea90 0f02 	teqeq	r0, r2
 23ec950:	bf1f      	itttt	ne
 23ec952:	ea54 0c00 	orrsne.w	ip, r4, r0
 23ec956:	ea55 0c02 	orrsne.w	ip, r5, r2
 23ec95a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23ec95e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23ec962:	f000 80e2 	beq.w	23ecb2a <__adddf3+0x1ee>
 23ec966:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23ec96a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23ec96e:	bfb8      	it	lt
 23ec970:	426d      	neglt	r5, r5
 23ec972:	dd0c      	ble.n	23ec98e <__adddf3+0x52>
 23ec974:	442c      	add	r4, r5
 23ec976:	ea80 0202 	eor.w	r2, r0, r2
 23ec97a:	ea81 0303 	eor.w	r3, r1, r3
 23ec97e:	ea82 0000 	eor.w	r0, r2, r0
 23ec982:	ea83 0101 	eor.w	r1, r3, r1
 23ec986:	ea80 0202 	eor.w	r2, r0, r2
 23ec98a:	ea81 0303 	eor.w	r3, r1, r3
 23ec98e:	2d36      	cmp	r5, #54	; 0x36
 23ec990:	bf88      	it	hi
 23ec992:	bd30      	pophi	{r4, r5, pc}
 23ec994:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23ec998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23ec99c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23ec9a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23ec9a4:	d002      	beq.n	23ec9ac <__adddf3+0x70>
 23ec9a6:	4240      	negs	r0, r0
 23ec9a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ec9ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23ec9b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23ec9b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23ec9b8:	d002      	beq.n	23ec9c0 <__adddf3+0x84>
 23ec9ba:	4252      	negs	r2, r2
 23ec9bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ec9c0:	ea94 0f05 	teq	r4, r5
 23ec9c4:	f000 80a7 	beq.w	23ecb16 <__adddf3+0x1da>
 23ec9c8:	f1a4 0401 	sub.w	r4, r4, #1
 23ec9cc:	f1d5 0e20 	rsbs	lr, r5, #32
 23ec9d0:	db0d      	blt.n	23ec9ee <__adddf3+0xb2>
 23ec9d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23ec9d6:	fa22 f205 	lsr.w	r2, r2, r5
 23ec9da:	1880      	adds	r0, r0, r2
 23ec9dc:	f141 0100 	adc.w	r1, r1, #0
 23ec9e0:	fa03 f20e 	lsl.w	r2, r3, lr
 23ec9e4:	1880      	adds	r0, r0, r2
 23ec9e6:	fa43 f305 	asr.w	r3, r3, r5
 23ec9ea:	4159      	adcs	r1, r3
 23ec9ec:	e00e      	b.n	23eca0c <__adddf3+0xd0>
 23ec9ee:	f1a5 0520 	sub.w	r5, r5, #32
 23ec9f2:	f10e 0e20 	add.w	lr, lr, #32
 23ec9f6:	2a01      	cmp	r2, #1
 23ec9f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23ec9fc:	bf28      	it	cs
 23ec9fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 23eca02:	fa43 f305 	asr.w	r3, r3, r5
 23eca06:	18c0      	adds	r0, r0, r3
 23eca08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23eca0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23eca10:	d507      	bpl.n	23eca22 <__adddf3+0xe6>
 23eca12:	f04f 0e00 	mov.w	lr, #0
 23eca16:	f1dc 0c00 	rsbs	ip, ip, #0
 23eca1a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23eca1e:	eb6e 0101 	sbc.w	r1, lr, r1
 23eca22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23eca26:	d31b      	bcc.n	23eca60 <__adddf3+0x124>
 23eca28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23eca2c:	d30c      	bcc.n	23eca48 <__adddf3+0x10c>
 23eca2e:	0849      	lsrs	r1, r1, #1
 23eca30:	ea5f 0030 	movs.w	r0, r0, rrx
 23eca34:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23eca38:	f104 0401 	add.w	r4, r4, #1
 23eca3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23eca40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23eca44:	f080 809a 	bcs.w	23ecb7c <__adddf3+0x240>
 23eca48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23eca4c:	bf08      	it	eq
 23eca4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23eca52:	f150 0000 	adcs.w	r0, r0, #0
 23eca56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23eca5a:	ea41 0105 	orr.w	r1, r1, r5
 23eca5e:	bd30      	pop	{r4, r5, pc}
 23eca60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23eca64:	4140      	adcs	r0, r0
 23eca66:	eb41 0101 	adc.w	r1, r1, r1
 23eca6a:	3c01      	subs	r4, #1
 23eca6c:	bf28      	it	cs
 23eca6e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23eca72:	d2e9      	bcs.n	23eca48 <__adddf3+0x10c>
 23eca74:	f091 0f00 	teq	r1, #0
 23eca78:	bf04      	itt	eq
 23eca7a:	4601      	moveq	r1, r0
 23eca7c:	2000      	moveq	r0, #0
 23eca7e:	fab1 f381 	clz	r3, r1
 23eca82:	bf08      	it	eq
 23eca84:	3320      	addeq	r3, #32
 23eca86:	f1a3 030b 	sub.w	r3, r3, #11
 23eca8a:	f1b3 0220 	subs.w	r2, r3, #32
 23eca8e:	da0c      	bge.n	23ecaaa <__adddf3+0x16e>
 23eca90:	320c      	adds	r2, #12
 23eca92:	dd08      	ble.n	23ecaa6 <__adddf3+0x16a>
 23eca94:	f102 0c14 	add.w	ip, r2, #20
 23eca98:	f1c2 020c 	rsb	r2, r2, #12
 23eca9c:	fa01 f00c 	lsl.w	r0, r1, ip
 23ecaa0:	fa21 f102 	lsr.w	r1, r1, r2
 23ecaa4:	e00c      	b.n	23ecac0 <__adddf3+0x184>
 23ecaa6:	f102 0214 	add.w	r2, r2, #20
 23ecaaa:	bfd8      	it	le
 23ecaac:	f1c2 0c20 	rsble	ip, r2, #32
 23ecab0:	fa01 f102 	lsl.w	r1, r1, r2
 23ecab4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23ecab8:	bfdc      	itt	le
 23ecaba:	ea41 010c 	orrle.w	r1, r1, ip
 23ecabe:	4090      	lslle	r0, r2
 23ecac0:	1ae4      	subs	r4, r4, r3
 23ecac2:	bfa2      	ittt	ge
 23ecac4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23ecac8:	4329      	orrge	r1, r5
 23ecaca:	bd30      	popge	{r4, r5, pc}
 23ecacc:	ea6f 0404 	mvn.w	r4, r4
 23ecad0:	3c1f      	subs	r4, #31
 23ecad2:	da1c      	bge.n	23ecb0e <__adddf3+0x1d2>
 23ecad4:	340c      	adds	r4, #12
 23ecad6:	dc0e      	bgt.n	23ecaf6 <__adddf3+0x1ba>
 23ecad8:	f104 0414 	add.w	r4, r4, #20
 23ecadc:	f1c4 0220 	rsb	r2, r4, #32
 23ecae0:	fa20 f004 	lsr.w	r0, r0, r4
 23ecae4:	fa01 f302 	lsl.w	r3, r1, r2
 23ecae8:	ea40 0003 	orr.w	r0, r0, r3
 23ecaec:	fa21 f304 	lsr.w	r3, r1, r4
 23ecaf0:	ea45 0103 	orr.w	r1, r5, r3
 23ecaf4:	bd30      	pop	{r4, r5, pc}
 23ecaf6:	f1c4 040c 	rsb	r4, r4, #12
 23ecafa:	f1c4 0220 	rsb	r2, r4, #32
 23ecafe:	fa20 f002 	lsr.w	r0, r0, r2
 23ecb02:	fa01 f304 	lsl.w	r3, r1, r4
 23ecb06:	ea40 0003 	orr.w	r0, r0, r3
 23ecb0a:	4629      	mov	r1, r5
 23ecb0c:	bd30      	pop	{r4, r5, pc}
 23ecb0e:	fa21 f004 	lsr.w	r0, r1, r4
 23ecb12:	4629      	mov	r1, r5
 23ecb14:	bd30      	pop	{r4, r5, pc}
 23ecb16:	f094 0f00 	teq	r4, #0
 23ecb1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23ecb1e:	bf06      	itte	eq
 23ecb20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23ecb24:	3401      	addeq	r4, #1
 23ecb26:	3d01      	subne	r5, #1
 23ecb28:	e74e      	b.n	23ec9c8 <__adddf3+0x8c>
 23ecb2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23ecb2e:	bf18      	it	ne
 23ecb30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23ecb34:	d029      	beq.n	23ecb8a <__adddf3+0x24e>
 23ecb36:	ea94 0f05 	teq	r4, r5
 23ecb3a:	bf08      	it	eq
 23ecb3c:	ea90 0f02 	teqeq	r0, r2
 23ecb40:	d005      	beq.n	23ecb4e <__adddf3+0x212>
 23ecb42:	ea54 0c00 	orrs.w	ip, r4, r0
 23ecb46:	bf04      	itt	eq
 23ecb48:	4619      	moveq	r1, r3
 23ecb4a:	4610      	moveq	r0, r2
 23ecb4c:	bd30      	pop	{r4, r5, pc}
 23ecb4e:	ea91 0f03 	teq	r1, r3
 23ecb52:	bf1e      	ittt	ne
 23ecb54:	2100      	movne	r1, #0
 23ecb56:	2000      	movne	r0, #0
 23ecb58:	bd30      	popne	{r4, r5, pc}
 23ecb5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23ecb5e:	d105      	bne.n	23ecb6c <__adddf3+0x230>
 23ecb60:	0040      	lsls	r0, r0, #1
 23ecb62:	4149      	adcs	r1, r1
 23ecb64:	bf28      	it	cs
 23ecb66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23ecb6a:	bd30      	pop	{r4, r5, pc}
 23ecb6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23ecb70:	bf3c      	itt	cc
 23ecb72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23ecb76:	bd30      	popcc	{r4, r5, pc}
 23ecb78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23ecb7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23ecb80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23ecb84:	f04f 0000 	mov.w	r0, #0
 23ecb88:	bd30      	pop	{r4, r5, pc}
 23ecb8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23ecb8e:	bf1a      	itte	ne
 23ecb90:	4619      	movne	r1, r3
 23ecb92:	4610      	movne	r0, r2
 23ecb94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23ecb98:	bf1c      	itt	ne
 23ecb9a:	460b      	movne	r3, r1
 23ecb9c:	4602      	movne	r2, r0
 23ecb9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23ecba2:	bf06      	itte	eq
 23ecba4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23ecba8:	ea91 0f03 	teqeq	r1, r3
 23ecbac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23ecbb0:	bd30      	pop	{r4, r5, pc}
 23ecbb2:	bf00      	nop

023ecbb4 <__aeabi_ui2d>:
 23ecbb4:	f090 0f00 	teq	r0, #0
 23ecbb8:	bf04      	itt	eq
 23ecbba:	2100      	moveq	r1, #0
 23ecbbc:	4770      	bxeq	lr
 23ecbbe:	b530      	push	{r4, r5, lr}
 23ecbc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23ecbc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23ecbc8:	f04f 0500 	mov.w	r5, #0
 23ecbcc:	f04f 0100 	mov.w	r1, #0
 23ecbd0:	e750      	b.n	23eca74 <__adddf3+0x138>
 23ecbd2:	bf00      	nop

023ecbd4 <__aeabi_i2d>:
 23ecbd4:	f090 0f00 	teq	r0, #0
 23ecbd8:	bf04      	itt	eq
 23ecbda:	2100      	moveq	r1, #0
 23ecbdc:	4770      	bxeq	lr
 23ecbde:	b530      	push	{r4, r5, lr}
 23ecbe0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23ecbe4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23ecbe8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23ecbec:	bf48      	it	mi
 23ecbee:	4240      	negmi	r0, r0
 23ecbf0:	f04f 0100 	mov.w	r1, #0
 23ecbf4:	e73e      	b.n	23eca74 <__adddf3+0x138>
 23ecbf6:	bf00      	nop

023ecbf8 <__aeabi_f2d>:
 23ecbf8:	0042      	lsls	r2, r0, #1
 23ecbfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23ecbfe:	ea4f 0131 	mov.w	r1, r1, rrx
 23ecc02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23ecc06:	bf1f      	itttt	ne
 23ecc08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23ecc0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23ecc10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23ecc14:	4770      	bxne	lr
 23ecc16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23ecc1a:	bf08      	it	eq
 23ecc1c:	4770      	bxeq	lr
 23ecc1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23ecc22:	bf04      	itt	eq
 23ecc24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23ecc28:	4770      	bxeq	lr
 23ecc2a:	b530      	push	{r4, r5, lr}
 23ecc2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23ecc30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23ecc34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ecc38:	e71c      	b.n	23eca74 <__adddf3+0x138>
 23ecc3a:	bf00      	nop

023ecc3c <__aeabi_ul2d>:
 23ecc3c:	ea50 0201 	orrs.w	r2, r0, r1
 23ecc40:	bf08      	it	eq
 23ecc42:	4770      	bxeq	lr
 23ecc44:	b530      	push	{r4, r5, lr}
 23ecc46:	f04f 0500 	mov.w	r5, #0
 23ecc4a:	e00a      	b.n	23ecc62 <__aeabi_l2d+0x16>

023ecc4c <__aeabi_l2d>:
 23ecc4c:	ea50 0201 	orrs.w	r2, r0, r1
 23ecc50:	bf08      	it	eq
 23ecc52:	4770      	bxeq	lr
 23ecc54:	b530      	push	{r4, r5, lr}
 23ecc56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23ecc5a:	d502      	bpl.n	23ecc62 <__aeabi_l2d+0x16>
 23ecc5c:	4240      	negs	r0, r0
 23ecc5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ecc62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23ecc66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23ecc6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23ecc6e:	f43f aed8 	beq.w	23eca22 <__adddf3+0xe6>
 23ecc72:	f04f 0203 	mov.w	r2, #3
 23ecc76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23ecc7a:	bf18      	it	ne
 23ecc7c:	3203      	addne	r2, #3
 23ecc7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23ecc82:	bf18      	it	ne
 23ecc84:	3203      	addne	r2, #3
 23ecc86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23ecc8a:	f1c2 0320 	rsb	r3, r2, #32
 23ecc8e:	fa00 fc03 	lsl.w	ip, r0, r3
 23ecc92:	fa20 f002 	lsr.w	r0, r0, r2
 23ecc96:	fa01 fe03 	lsl.w	lr, r1, r3
 23ecc9a:	ea40 000e 	orr.w	r0, r0, lr
 23ecc9e:	fa21 f102 	lsr.w	r1, r1, r2
 23ecca2:	4414      	add	r4, r2
 23ecca4:	e6bd      	b.n	23eca22 <__adddf3+0xe6>
 23ecca6:	bf00      	nop

023ecca8 <__aeabi_dmul>:
 23ecca8:	b570      	push	{r4, r5, r6, lr}
 23eccaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23eccae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23eccb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23eccb6:	bf1d      	ittte	ne
 23eccb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23eccbc:	ea94 0f0c 	teqne	r4, ip
 23eccc0:	ea95 0f0c 	teqne	r5, ip
 23eccc4:	f000 f8de 	bleq	23ece84 <__aeabi_dmul+0x1dc>
 23eccc8:	442c      	add	r4, r5
 23eccca:	ea81 0603 	eor.w	r6, r1, r3
 23eccce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23eccd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23eccd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23eccda:	bf18      	it	ne
 23eccdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23ecce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ecce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ecce8:	d038      	beq.n	23ecd5c <__aeabi_dmul+0xb4>
 23eccea:	fba0 ce02 	umull	ip, lr, r0, r2
 23eccee:	f04f 0500 	mov.w	r5, #0
 23eccf2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23eccf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23eccfa:	fbe0 e503 	umlal	lr, r5, r0, r3
 23eccfe:	f04f 0600 	mov.w	r6, #0
 23ecd02:	fbe1 5603 	umlal	r5, r6, r1, r3
 23ecd06:	f09c 0f00 	teq	ip, #0
 23ecd0a:	bf18      	it	ne
 23ecd0c:	f04e 0e01 	orrne.w	lr, lr, #1
 23ecd10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23ecd14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23ecd18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23ecd1c:	d204      	bcs.n	23ecd28 <__aeabi_dmul+0x80>
 23ecd1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23ecd22:	416d      	adcs	r5, r5
 23ecd24:	eb46 0606 	adc.w	r6, r6, r6
 23ecd28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23ecd2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23ecd30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23ecd34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23ecd38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23ecd3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23ecd40:	bf88      	it	hi
 23ecd42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23ecd46:	d81e      	bhi.n	23ecd86 <__aeabi_dmul+0xde>
 23ecd48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23ecd4c:	bf08      	it	eq
 23ecd4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23ecd52:	f150 0000 	adcs.w	r0, r0, #0
 23ecd56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23ecd5a:	bd70      	pop	{r4, r5, r6, pc}
 23ecd5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23ecd60:	ea46 0101 	orr.w	r1, r6, r1
 23ecd64:	ea40 0002 	orr.w	r0, r0, r2
 23ecd68:	ea81 0103 	eor.w	r1, r1, r3
 23ecd6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23ecd70:	bfc2      	ittt	gt
 23ecd72:	ebd4 050c 	rsbsgt	r5, r4, ip
 23ecd76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23ecd7a:	bd70      	popgt	{r4, r5, r6, pc}
 23ecd7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ecd80:	f04f 0e00 	mov.w	lr, #0
 23ecd84:	3c01      	subs	r4, #1
 23ecd86:	f300 80ab 	bgt.w	23ecee0 <__aeabi_dmul+0x238>
 23ecd8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23ecd8e:	bfde      	ittt	le
 23ecd90:	2000      	movle	r0, #0
 23ecd92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23ecd96:	bd70      	pople	{r4, r5, r6, pc}
 23ecd98:	f1c4 0400 	rsb	r4, r4, #0
 23ecd9c:	3c20      	subs	r4, #32
 23ecd9e:	da35      	bge.n	23ece0c <__aeabi_dmul+0x164>
 23ecda0:	340c      	adds	r4, #12
 23ecda2:	dc1b      	bgt.n	23ecddc <__aeabi_dmul+0x134>
 23ecda4:	f104 0414 	add.w	r4, r4, #20
 23ecda8:	f1c4 0520 	rsb	r5, r4, #32
 23ecdac:	fa00 f305 	lsl.w	r3, r0, r5
 23ecdb0:	fa20 f004 	lsr.w	r0, r0, r4
 23ecdb4:	fa01 f205 	lsl.w	r2, r1, r5
 23ecdb8:	ea40 0002 	orr.w	r0, r0, r2
 23ecdbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23ecdc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ecdc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23ecdc8:	fa21 f604 	lsr.w	r6, r1, r4
 23ecdcc:	eb42 0106 	adc.w	r1, r2, r6
 23ecdd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23ecdd4:	bf08      	it	eq
 23ecdd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23ecdda:	bd70      	pop	{r4, r5, r6, pc}
 23ecddc:	f1c4 040c 	rsb	r4, r4, #12
 23ecde0:	f1c4 0520 	rsb	r5, r4, #32
 23ecde4:	fa00 f304 	lsl.w	r3, r0, r4
 23ecde8:	fa20 f005 	lsr.w	r0, r0, r5
 23ecdec:	fa01 f204 	lsl.w	r2, r1, r4
 23ecdf0:	ea40 0002 	orr.w	r0, r0, r2
 23ecdf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ecdf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23ecdfc:	f141 0100 	adc.w	r1, r1, #0
 23ece00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23ece04:	bf08      	it	eq
 23ece06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23ece0a:	bd70      	pop	{r4, r5, r6, pc}
 23ece0c:	f1c4 0520 	rsb	r5, r4, #32
 23ece10:	fa00 f205 	lsl.w	r2, r0, r5
 23ece14:	ea4e 0e02 	orr.w	lr, lr, r2
 23ece18:	fa20 f304 	lsr.w	r3, r0, r4
 23ece1c:	fa01 f205 	lsl.w	r2, r1, r5
 23ece20:	ea43 0302 	orr.w	r3, r3, r2
 23ece24:	fa21 f004 	lsr.w	r0, r1, r4
 23ece28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ece2c:	fa21 f204 	lsr.w	r2, r1, r4
 23ece30:	ea20 0002 	bic.w	r0, r0, r2
 23ece34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23ece38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23ece3c:	bf08      	it	eq
 23ece3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23ece42:	bd70      	pop	{r4, r5, r6, pc}
 23ece44:	f094 0f00 	teq	r4, #0
 23ece48:	d10f      	bne.n	23ece6a <__aeabi_dmul+0x1c2>
 23ece4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23ece4e:	0040      	lsls	r0, r0, #1
 23ece50:	eb41 0101 	adc.w	r1, r1, r1
 23ece54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23ece58:	bf08      	it	eq
 23ece5a:	3c01      	subeq	r4, #1
 23ece5c:	d0f7      	beq.n	23ece4e <__aeabi_dmul+0x1a6>
 23ece5e:	ea41 0106 	orr.w	r1, r1, r6
 23ece62:	f095 0f00 	teq	r5, #0
 23ece66:	bf18      	it	ne
 23ece68:	4770      	bxne	lr
 23ece6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23ece6e:	0052      	lsls	r2, r2, #1
 23ece70:	eb43 0303 	adc.w	r3, r3, r3
 23ece74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23ece78:	bf08      	it	eq
 23ece7a:	3d01      	subeq	r5, #1
 23ece7c:	d0f7      	beq.n	23ece6e <__aeabi_dmul+0x1c6>
 23ece7e:	ea43 0306 	orr.w	r3, r3, r6
 23ece82:	4770      	bx	lr
 23ece84:	ea94 0f0c 	teq	r4, ip
 23ece88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23ece8c:	bf18      	it	ne
 23ece8e:	ea95 0f0c 	teqne	r5, ip
 23ece92:	d00c      	beq.n	23eceae <__aeabi_dmul+0x206>
 23ece94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23ece98:	bf18      	it	ne
 23ece9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23ece9e:	d1d1      	bne.n	23ece44 <__aeabi_dmul+0x19c>
 23ecea0:	ea81 0103 	eor.w	r1, r1, r3
 23ecea4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ecea8:	f04f 0000 	mov.w	r0, #0
 23eceac:	bd70      	pop	{r4, r5, r6, pc}
 23eceae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23eceb2:	bf06      	itte	eq
 23eceb4:	4610      	moveq	r0, r2
 23eceb6:	4619      	moveq	r1, r3
 23eceb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23ecebc:	d019      	beq.n	23ecef2 <__aeabi_dmul+0x24a>
 23ecebe:	ea94 0f0c 	teq	r4, ip
 23ecec2:	d102      	bne.n	23ececa <__aeabi_dmul+0x222>
 23ecec4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23ecec8:	d113      	bne.n	23ecef2 <__aeabi_dmul+0x24a>
 23ececa:	ea95 0f0c 	teq	r5, ip
 23ecece:	d105      	bne.n	23ecedc <__aeabi_dmul+0x234>
 23eced0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23eced4:	bf1c      	itt	ne
 23eced6:	4610      	movne	r0, r2
 23eced8:	4619      	movne	r1, r3
 23eceda:	d10a      	bne.n	23ecef2 <__aeabi_dmul+0x24a>
 23ecedc:	ea81 0103 	eor.w	r1, r1, r3
 23ecee0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23ecee4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23ecee8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23eceec:	f04f 0000 	mov.w	r0, #0
 23ecef0:	bd70      	pop	{r4, r5, r6, pc}
 23ecef2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23ecef6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23ecefa:	bd70      	pop	{r4, r5, r6, pc}

023ecefc <__aeabi_ddiv>:
 23ecefc:	b570      	push	{r4, r5, r6, lr}
 23ecefe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23ecf02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23ecf06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23ecf0a:	bf1d      	ittte	ne
 23ecf0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23ecf10:	ea94 0f0c 	teqne	r4, ip
 23ecf14:	ea95 0f0c 	teqne	r5, ip
 23ecf18:	f000 f8a7 	bleq	23ed06a <__aeabi_ddiv+0x16e>
 23ecf1c:	eba4 0405 	sub.w	r4, r4, r5
 23ecf20:	ea81 0e03 	eor.w	lr, r1, r3
 23ecf24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23ecf28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23ecf2c:	f000 8088 	beq.w	23ed040 <__aeabi_ddiv+0x144>
 23ecf30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23ecf34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23ecf38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23ecf3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23ecf40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23ecf44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23ecf48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23ecf4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23ecf50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23ecf54:	429d      	cmp	r5, r3
 23ecf56:	bf08      	it	eq
 23ecf58:	4296      	cmpeq	r6, r2
 23ecf5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23ecf5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23ecf62:	d202      	bcs.n	23ecf6a <__aeabi_ddiv+0x6e>
 23ecf64:	085b      	lsrs	r3, r3, #1
 23ecf66:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecf6a:	1ab6      	subs	r6, r6, r2
 23ecf6c:	eb65 0503 	sbc.w	r5, r5, r3
 23ecf70:	085b      	lsrs	r3, r3, #1
 23ecf72:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecf76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23ecf7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23ecf7e:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecf82:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecf86:	bf22      	ittt	cs
 23ecf88:	1ab6      	subcs	r6, r6, r2
 23ecf8a:	4675      	movcs	r5, lr
 23ecf8c:	ea40 000c 	orrcs.w	r0, r0, ip
 23ecf90:	085b      	lsrs	r3, r3, #1
 23ecf92:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecf96:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecf9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecf9e:	bf22      	ittt	cs
 23ecfa0:	1ab6      	subcs	r6, r6, r2
 23ecfa2:	4675      	movcs	r5, lr
 23ecfa4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23ecfa8:	085b      	lsrs	r3, r3, #1
 23ecfaa:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecfae:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecfb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecfb6:	bf22      	ittt	cs
 23ecfb8:	1ab6      	subcs	r6, r6, r2
 23ecfba:	4675      	movcs	r5, lr
 23ecfbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23ecfc0:	085b      	lsrs	r3, r3, #1
 23ecfc2:	ea4f 0232 	mov.w	r2, r2, rrx
 23ecfc6:	ebb6 0e02 	subs.w	lr, r6, r2
 23ecfca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23ecfce:	bf22      	ittt	cs
 23ecfd0:	1ab6      	subcs	r6, r6, r2
 23ecfd2:	4675      	movcs	r5, lr
 23ecfd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23ecfd8:	ea55 0e06 	orrs.w	lr, r5, r6
 23ecfdc:	d018      	beq.n	23ed010 <__aeabi_ddiv+0x114>
 23ecfde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23ecfe2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23ecfe6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23ecfea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23ecfee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23ecff2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23ecff6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23ecffa:	d1c0      	bne.n	23ecf7e <__aeabi_ddiv+0x82>
 23ecffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23ed000:	d10b      	bne.n	23ed01a <__aeabi_ddiv+0x11e>
 23ed002:	ea41 0100 	orr.w	r1, r1, r0
 23ed006:	f04f 0000 	mov.w	r0, #0
 23ed00a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23ed00e:	e7b6      	b.n	23ecf7e <__aeabi_ddiv+0x82>
 23ed010:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23ed014:	bf04      	itt	eq
 23ed016:	4301      	orreq	r1, r0
 23ed018:	2000      	moveq	r0, #0
 23ed01a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23ed01e:	bf88      	it	hi
 23ed020:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23ed024:	f63f aeaf 	bhi.w	23ecd86 <__aeabi_dmul+0xde>
 23ed028:	ebb5 0c03 	subs.w	ip, r5, r3
 23ed02c:	bf04      	itt	eq
 23ed02e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23ed032:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23ed036:	f150 0000 	adcs.w	r0, r0, #0
 23ed03a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23ed03e:	bd70      	pop	{r4, r5, r6, pc}
 23ed040:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23ed044:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23ed048:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23ed04c:	bfc2      	ittt	gt
 23ed04e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23ed052:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23ed056:	bd70      	popgt	{r4, r5, r6, pc}
 23ed058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ed05c:	f04f 0e00 	mov.w	lr, #0
 23ed060:	3c01      	subs	r4, #1
 23ed062:	e690      	b.n	23ecd86 <__aeabi_dmul+0xde>
 23ed064:	ea45 0e06 	orr.w	lr, r5, r6
 23ed068:	e68d      	b.n	23ecd86 <__aeabi_dmul+0xde>
 23ed06a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23ed06e:	ea94 0f0c 	teq	r4, ip
 23ed072:	bf08      	it	eq
 23ed074:	ea95 0f0c 	teqeq	r5, ip
 23ed078:	f43f af3b 	beq.w	23ecef2 <__aeabi_dmul+0x24a>
 23ed07c:	ea94 0f0c 	teq	r4, ip
 23ed080:	d10a      	bne.n	23ed098 <__aeabi_ddiv+0x19c>
 23ed082:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23ed086:	f47f af34 	bne.w	23ecef2 <__aeabi_dmul+0x24a>
 23ed08a:	ea95 0f0c 	teq	r5, ip
 23ed08e:	f47f af25 	bne.w	23ecedc <__aeabi_dmul+0x234>
 23ed092:	4610      	mov	r0, r2
 23ed094:	4619      	mov	r1, r3
 23ed096:	e72c      	b.n	23ecef2 <__aeabi_dmul+0x24a>
 23ed098:	ea95 0f0c 	teq	r5, ip
 23ed09c:	d106      	bne.n	23ed0ac <__aeabi_ddiv+0x1b0>
 23ed09e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23ed0a2:	f43f aefd 	beq.w	23ecea0 <__aeabi_dmul+0x1f8>
 23ed0a6:	4610      	mov	r0, r2
 23ed0a8:	4619      	mov	r1, r3
 23ed0aa:	e722      	b.n	23ecef2 <__aeabi_dmul+0x24a>
 23ed0ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23ed0b0:	bf18      	it	ne
 23ed0b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23ed0b6:	f47f aec5 	bne.w	23ece44 <__aeabi_dmul+0x19c>
 23ed0ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23ed0be:	f47f af0d 	bne.w	23ecedc <__aeabi_dmul+0x234>
 23ed0c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23ed0c6:	f47f aeeb 	bne.w	23ecea0 <__aeabi_dmul+0x1f8>
 23ed0ca:	e712      	b.n	23ecef2 <__aeabi_dmul+0x24a>

023ed0cc <__gedf2>:
 23ed0cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ed0d0:	e006      	b.n	23ed0e0 <__cmpdf2+0x4>
 23ed0d2:	bf00      	nop

023ed0d4 <__ledf2>:
 23ed0d4:	f04f 0c01 	mov.w	ip, #1
 23ed0d8:	e002      	b.n	23ed0e0 <__cmpdf2+0x4>
 23ed0da:	bf00      	nop

023ed0dc <__cmpdf2>:
 23ed0dc:	f04f 0c01 	mov.w	ip, #1
 23ed0e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23ed0e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23ed0e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ed0ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23ed0f0:	bf18      	it	ne
 23ed0f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23ed0f6:	d01b      	beq.n	23ed130 <__cmpdf2+0x54>
 23ed0f8:	b001      	add	sp, #4
 23ed0fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23ed0fe:	bf0c      	ite	eq
 23ed100:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23ed104:	ea91 0f03 	teqne	r1, r3
 23ed108:	bf02      	ittt	eq
 23ed10a:	ea90 0f02 	teqeq	r0, r2
 23ed10e:	2000      	moveq	r0, #0
 23ed110:	4770      	bxeq	lr
 23ed112:	f110 0f00 	cmn.w	r0, #0
 23ed116:	ea91 0f03 	teq	r1, r3
 23ed11a:	bf58      	it	pl
 23ed11c:	4299      	cmppl	r1, r3
 23ed11e:	bf08      	it	eq
 23ed120:	4290      	cmpeq	r0, r2
 23ed122:	bf2c      	ite	cs
 23ed124:	17d8      	asrcs	r0, r3, #31
 23ed126:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23ed12a:	f040 0001 	orr.w	r0, r0, #1
 23ed12e:	4770      	bx	lr
 23ed130:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23ed134:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ed138:	d102      	bne.n	23ed140 <__cmpdf2+0x64>
 23ed13a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23ed13e:	d107      	bne.n	23ed150 <__cmpdf2+0x74>
 23ed140:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23ed144:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ed148:	d1d6      	bne.n	23ed0f8 <__cmpdf2+0x1c>
 23ed14a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23ed14e:	d0d3      	beq.n	23ed0f8 <__cmpdf2+0x1c>
 23ed150:	f85d 0b04 	ldr.w	r0, [sp], #4
 23ed154:	4770      	bx	lr
 23ed156:	bf00      	nop

023ed158 <__aeabi_cdrcmple>:
 23ed158:	4684      	mov	ip, r0
 23ed15a:	4610      	mov	r0, r2
 23ed15c:	4662      	mov	r2, ip
 23ed15e:	468c      	mov	ip, r1
 23ed160:	4619      	mov	r1, r3
 23ed162:	4663      	mov	r3, ip
 23ed164:	e000      	b.n	23ed168 <__aeabi_cdcmpeq>
 23ed166:	bf00      	nop

023ed168 <__aeabi_cdcmpeq>:
 23ed168:	b501      	push	{r0, lr}
 23ed16a:	f7ff ffb7 	bl	23ed0dc <__cmpdf2>
 23ed16e:	2800      	cmp	r0, #0
 23ed170:	bf48      	it	mi
 23ed172:	f110 0f00 	cmnmi.w	r0, #0
 23ed176:	bd01      	pop	{r0, pc}

023ed178 <__aeabi_dcmpeq>:
 23ed178:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ed17c:	f7ff fff4 	bl	23ed168 <__aeabi_cdcmpeq>
 23ed180:	bf0c      	ite	eq
 23ed182:	2001      	moveq	r0, #1
 23ed184:	2000      	movne	r0, #0
 23ed186:	f85d fb08 	ldr.w	pc, [sp], #8
 23ed18a:	bf00      	nop

023ed18c <__aeabi_dcmplt>:
 23ed18c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ed190:	f7ff ffea 	bl	23ed168 <__aeabi_cdcmpeq>
 23ed194:	bf34      	ite	cc
 23ed196:	2001      	movcc	r0, #1
 23ed198:	2000      	movcs	r0, #0
 23ed19a:	f85d fb08 	ldr.w	pc, [sp], #8
 23ed19e:	bf00      	nop

023ed1a0 <__aeabi_dcmple>:
 23ed1a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ed1a4:	f7ff ffe0 	bl	23ed168 <__aeabi_cdcmpeq>
 23ed1a8:	bf94      	ite	ls
 23ed1aa:	2001      	movls	r0, #1
 23ed1ac:	2000      	movhi	r0, #0
 23ed1ae:	f85d fb08 	ldr.w	pc, [sp], #8
 23ed1b2:	bf00      	nop

023ed1b4 <__aeabi_dcmpge>:
 23ed1b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ed1b8:	f7ff ffce 	bl	23ed158 <__aeabi_cdrcmple>
 23ed1bc:	bf94      	ite	ls
 23ed1be:	2001      	movls	r0, #1
 23ed1c0:	2000      	movhi	r0, #0
 23ed1c2:	f85d fb08 	ldr.w	pc, [sp], #8
 23ed1c6:	bf00      	nop

023ed1c8 <__aeabi_dcmpgt>:
 23ed1c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23ed1cc:	f7ff ffc4 	bl	23ed158 <__aeabi_cdrcmple>
 23ed1d0:	bf34      	ite	cc
 23ed1d2:	2001      	movcc	r0, #1
 23ed1d4:	2000      	movcs	r0, #0
 23ed1d6:	f85d fb08 	ldr.w	pc, [sp], #8
 23ed1da:	bf00      	nop

023ed1dc <__aeabi_dcmpun>:
 23ed1dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23ed1e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ed1e4:	d102      	bne.n	23ed1ec <__aeabi_dcmpun+0x10>
 23ed1e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23ed1ea:	d10a      	bne.n	23ed202 <__aeabi_dcmpun+0x26>
 23ed1ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23ed1f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23ed1f4:	d102      	bne.n	23ed1fc <__aeabi_dcmpun+0x20>
 23ed1f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23ed1fa:	d102      	bne.n	23ed202 <__aeabi_dcmpun+0x26>
 23ed1fc:	f04f 0000 	mov.w	r0, #0
 23ed200:	4770      	bx	lr
 23ed202:	f04f 0001 	mov.w	r0, #1
 23ed206:	4770      	bx	lr

023ed208 <__aeabi_d2iz>:
 23ed208:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23ed20c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23ed210:	d215      	bcs.n	23ed23e <__aeabi_d2iz+0x36>
 23ed212:	d511      	bpl.n	23ed238 <__aeabi_d2iz+0x30>
 23ed214:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23ed218:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23ed21c:	d912      	bls.n	23ed244 <__aeabi_d2iz+0x3c>
 23ed21e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ed222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23ed226:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23ed22a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23ed22e:	fa23 f002 	lsr.w	r0, r3, r2
 23ed232:	bf18      	it	ne
 23ed234:	4240      	negne	r0, r0
 23ed236:	4770      	bx	lr
 23ed238:	f04f 0000 	mov.w	r0, #0
 23ed23c:	4770      	bx	lr
 23ed23e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23ed242:	d105      	bne.n	23ed250 <__aeabi_d2iz+0x48>
 23ed244:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23ed248:	bf08      	it	eq
 23ed24a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23ed24e:	4770      	bx	lr
 23ed250:	f04f 0000 	mov.w	r0, #0
 23ed254:	4770      	bx	lr
 23ed256:	bf00      	nop

023ed258 <__aeabi_d2uiz>:
 23ed258:	004a      	lsls	r2, r1, #1
 23ed25a:	d211      	bcs.n	23ed280 <__aeabi_d2uiz+0x28>
 23ed25c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23ed260:	d211      	bcs.n	23ed286 <__aeabi_d2uiz+0x2e>
 23ed262:	d50d      	bpl.n	23ed280 <__aeabi_d2uiz+0x28>
 23ed264:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23ed268:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23ed26c:	d40e      	bmi.n	23ed28c <__aeabi_d2uiz+0x34>
 23ed26e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ed272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23ed276:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23ed27a:	fa23 f002 	lsr.w	r0, r3, r2
 23ed27e:	4770      	bx	lr
 23ed280:	f04f 0000 	mov.w	r0, #0
 23ed284:	4770      	bx	lr
 23ed286:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23ed28a:	d102      	bne.n	23ed292 <__aeabi_d2uiz+0x3a>
 23ed28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ed290:	4770      	bx	lr
 23ed292:	f04f 0000 	mov.w	r0, #0
 23ed296:	4770      	bx	lr

023ed298 <__aeabi_d2f>:
 23ed298:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23ed29c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23ed2a0:	bf24      	itt	cs
 23ed2a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23ed2a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23ed2aa:	d90d      	bls.n	23ed2c8 <__aeabi_d2f+0x30>
 23ed2ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23ed2b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23ed2b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23ed2b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23ed2bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23ed2c0:	bf08      	it	eq
 23ed2c2:	f020 0001 	biceq.w	r0, r0, #1
 23ed2c6:	4770      	bx	lr
 23ed2c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23ed2cc:	d121      	bne.n	23ed312 <__aeabi_d2f+0x7a>
 23ed2ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23ed2d2:	bfbc      	itt	lt
 23ed2d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23ed2d8:	4770      	bxlt	lr
 23ed2da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ed2de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23ed2e2:	f1c2 0218 	rsb	r2, r2, #24
 23ed2e6:	f1c2 0c20 	rsb	ip, r2, #32
 23ed2ea:	fa10 f30c 	lsls.w	r3, r0, ip
 23ed2ee:	fa20 f002 	lsr.w	r0, r0, r2
 23ed2f2:	bf18      	it	ne
 23ed2f4:	f040 0001 	orrne.w	r0, r0, #1
 23ed2f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ed2fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23ed300:	fa03 fc0c 	lsl.w	ip, r3, ip
 23ed304:	ea40 000c 	orr.w	r0, r0, ip
 23ed308:	fa23 f302 	lsr.w	r3, r3, r2
 23ed30c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ed310:	e7cc      	b.n	23ed2ac <__aeabi_d2f+0x14>
 23ed312:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23ed316:	d107      	bne.n	23ed328 <__aeabi_d2f+0x90>
 23ed318:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23ed31c:	bf1e      	ittt	ne
 23ed31e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23ed322:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23ed326:	4770      	bxne	lr
 23ed328:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23ed32c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23ed330:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23ed334:	4770      	bx	lr
 23ed336:	bf00      	nop

023ed338 <__aeabi_ldivmod>:
 23ed338:	b97b      	cbnz	r3, 23ed35a <__aeabi_ldivmod+0x22>
 23ed33a:	b972      	cbnz	r2, 23ed35a <__aeabi_ldivmod+0x22>
 23ed33c:	2900      	cmp	r1, #0
 23ed33e:	bfbe      	ittt	lt
 23ed340:	2000      	movlt	r0, #0
 23ed342:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23ed346:	e006      	blt.n	23ed356 <__aeabi_ldivmod+0x1e>
 23ed348:	bf08      	it	eq
 23ed34a:	2800      	cmpeq	r0, #0
 23ed34c:	bf1c      	itt	ne
 23ed34e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23ed352:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23ed356:	f000 b9eb 	b.w	23ed730 <__aeabi_idiv0>
 23ed35a:	f1ad 0c08 	sub.w	ip, sp, #8
 23ed35e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23ed362:	2900      	cmp	r1, #0
 23ed364:	db09      	blt.n	23ed37a <__aeabi_ldivmod+0x42>
 23ed366:	2b00      	cmp	r3, #0
 23ed368:	db1a      	blt.n	23ed3a0 <__aeabi_ldivmod+0x68>
 23ed36a:	f000 f86b 	bl	23ed444 <__udivmoddi4>
 23ed36e:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed376:	b004      	add	sp, #16
 23ed378:	4770      	bx	lr
 23ed37a:	4240      	negs	r0, r0
 23ed37c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed380:	2b00      	cmp	r3, #0
 23ed382:	db1b      	blt.n	23ed3bc <__aeabi_ldivmod+0x84>
 23ed384:	f000 f85e 	bl	23ed444 <__udivmoddi4>
 23ed388:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed390:	b004      	add	sp, #16
 23ed392:	4240      	negs	r0, r0
 23ed394:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed398:	4252      	negs	r2, r2
 23ed39a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed39e:	4770      	bx	lr
 23ed3a0:	4252      	negs	r2, r2
 23ed3a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed3a6:	f000 f84d 	bl	23ed444 <__udivmoddi4>
 23ed3aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed3b2:	b004      	add	sp, #16
 23ed3b4:	4240      	negs	r0, r0
 23ed3b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed3ba:	4770      	bx	lr
 23ed3bc:	4252      	negs	r2, r2
 23ed3be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed3c2:	f000 f83f 	bl	23ed444 <__udivmoddi4>
 23ed3c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ed3ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ed3ce:	b004      	add	sp, #16
 23ed3d0:	4252      	negs	r2, r2
 23ed3d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ed3d6:	4770      	bx	lr

023ed3d8 <__aeabi_d2lz>:
 23ed3d8:	b538      	push	{r3, r4, r5, lr}
 23ed3da:	2200      	movs	r2, #0
 23ed3dc:	2300      	movs	r3, #0
 23ed3de:	4604      	mov	r4, r0
 23ed3e0:	460d      	mov	r5, r1
 23ed3e2:	f7ff fed3 	bl	23ed18c <__aeabi_dcmplt>
 23ed3e6:	b928      	cbnz	r0, 23ed3f4 <__aeabi_d2lz+0x1c>
 23ed3e8:	4620      	mov	r0, r4
 23ed3ea:	4629      	mov	r1, r5
 23ed3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ed3f0:	f000 b80a 	b.w	23ed408 <__aeabi_d2ulz>
 23ed3f4:	4620      	mov	r0, r4
 23ed3f6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23ed3fa:	f000 f805 	bl	23ed408 <__aeabi_d2ulz>
 23ed3fe:	4240      	negs	r0, r0
 23ed400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ed404:	bd38      	pop	{r3, r4, r5, pc}
 23ed406:	bf00      	nop

023ed408 <__aeabi_d2ulz>:
 23ed408:	b5d0      	push	{r4, r6, r7, lr}
 23ed40a:	2200      	movs	r2, #0
 23ed40c:	4b0b      	ldr	r3, [pc, #44]	; (23ed43c <__aeabi_d2ulz+0x34>)
 23ed40e:	4606      	mov	r6, r0
 23ed410:	460f      	mov	r7, r1
 23ed412:	f7ff fc49 	bl	23ecca8 <__aeabi_dmul>
 23ed416:	f7ff ff1f 	bl	23ed258 <__aeabi_d2uiz>
 23ed41a:	4604      	mov	r4, r0
 23ed41c:	f7ff fbca 	bl	23ecbb4 <__aeabi_ui2d>
 23ed420:	2200      	movs	r2, #0
 23ed422:	4b07      	ldr	r3, [pc, #28]	; (23ed440 <__aeabi_d2ulz+0x38>)
 23ed424:	f7ff fc40 	bl	23ecca8 <__aeabi_dmul>
 23ed428:	4602      	mov	r2, r0
 23ed42a:	460b      	mov	r3, r1
 23ed42c:	4630      	mov	r0, r6
 23ed42e:	4639      	mov	r1, r7
 23ed430:	f7ff fa82 	bl	23ec938 <__aeabi_dsub>
 23ed434:	f7ff ff10 	bl	23ed258 <__aeabi_d2uiz>
 23ed438:	4621      	mov	r1, r4
 23ed43a:	bdd0      	pop	{r4, r6, r7, pc}
 23ed43c:	3df00000 	.word	0x3df00000
 23ed440:	41f00000 	.word	0x41f00000

023ed444 <__udivmoddi4>:
 23ed444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ed448:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23ed44a:	4604      	mov	r4, r0
 23ed44c:	460f      	mov	r7, r1
 23ed44e:	2b00      	cmp	r3, #0
 23ed450:	d148      	bne.n	23ed4e4 <__udivmoddi4+0xa0>
 23ed452:	428a      	cmp	r2, r1
 23ed454:	4694      	mov	ip, r2
 23ed456:	d961      	bls.n	23ed51c <__udivmoddi4+0xd8>
 23ed458:	fab2 f382 	clz	r3, r2
 23ed45c:	b143      	cbz	r3, 23ed470 <__udivmoddi4+0x2c>
 23ed45e:	f1c3 0120 	rsb	r1, r3, #32
 23ed462:	409f      	lsls	r7, r3
 23ed464:	fa02 fc03 	lsl.w	ip, r2, r3
 23ed468:	409c      	lsls	r4, r3
 23ed46a:	fa20 f101 	lsr.w	r1, r0, r1
 23ed46e:	430f      	orrs	r7, r1
 23ed470:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23ed474:	fa1f fe8c 	uxth.w	lr, ip
 23ed478:	0c22      	lsrs	r2, r4, #16
 23ed47a:	fbb7 f6f1 	udiv	r6, r7, r1
 23ed47e:	fb01 7716 	mls	r7, r1, r6, r7
 23ed482:	fb06 f00e 	mul.w	r0, r6, lr
 23ed486:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23ed48a:	4290      	cmp	r0, r2
 23ed48c:	d908      	bls.n	23ed4a0 <__udivmoddi4+0x5c>
 23ed48e:	eb1c 0202 	adds.w	r2, ip, r2
 23ed492:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23ed496:	d202      	bcs.n	23ed49e <__udivmoddi4+0x5a>
 23ed498:	4290      	cmp	r0, r2
 23ed49a:	f200 8137 	bhi.w	23ed70c <__udivmoddi4+0x2c8>
 23ed49e:	463e      	mov	r6, r7
 23ed4a0:	1a12      	subs	r2, r2, r0
 23ed4a2:	b2a4      	uxth	r4, r4
 23ed4a4:	fbb2 f0f1 	udiv	r0, r2, r1
 23ed4a8:	fb01 2210 	mls	r2, r1, r0, r2
 23ed4ac:	fb00 fe0e 	mul.w	lr, r0, lr
 23ed4b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23ed4b4:	45a6      	cmp	lr, r4
 23ed4b6:	d908      	bls.n	23ed4ca <__udivmoddi4+0x86>
 23ed4b8:	eb1c 0404 	adds.w	r4, ip, r4
 23ed4bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23ed4c0:	d202      	bcs.n	23ed4c8 <__udivmoddi4+0x84>
 23ed4c2:	45a6      	cmp	lr, r4
 23ed4c4:	f200 811c 	bhi.w	23ed700 <__udivmoddi4+0x2bc>
 23ed4c8:	4610      	mov	r0, r2
 23ed4ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23ed4ce:	eba4 040e 	sub.w	r4, r4, lr
 23ed4d2:	2600      	movs	r6, #0
 23ed4d4:	b11d      	cbz	r5, 23ed4de <__udivmoddi4+0x9a>
 23ed4d6:	40dc      	lsrs	r4, r3
 23ed4d8:	2300      	movs	r3, #0
 23ed4da:	e9c5 4300 	strd	r4, r3, [r5]
 23ed4de:	4631      	mov	r1, r6
 23ed4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ed4e4:	428b      	cmp	r3, r1
 23ed4e6:	d909      	bls.n	23ed4fc <__udivmoddi4+0xb8>
 23ed4e8:	2d00      	cmp	r5, #0
 23ed4ea:	f000 80fd 	beq.w	23ed6e8 <__udivmoddi4+0x2a4>
 23ed4ee:	2600      	movs	r6, #0
 23ed4f0:	e9c5 0100 	strd	r0, r1, [r5]
 23ed4f4:	4630      	mov	r0, r6
 23ed4f6:	4631      	mov	r1, r6
 23ed4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ed4fc:	fab3 f683 	clz	r6, r3
 23ed500:	2e00      	cmp	r6, #0
 23ed502:	d14b      	bne.n	23ed59c <__udivmoddi4+0x158>
 23ed504:	428b      	cmp	r3, r1
 23ed506:	f0c0 80f2 	bcc.w	23ed6ee <__udivmoddi4+0x2aa>
 23ed50a:	4282      	cmp	r2, r0
 23ed50c:	f240 80ef 	bls.w	23ed6ee <__udivmoddi4+0x2aa>
 23ed510:	4630      	mov	r0, r6
 23ed512:	2d00      	cmp	r5, #0
 23ed514:	d0e3      	beq.n	23ed4de <__udivmoddi4+0x9a>
 23ed516:	e9c5 4700 	strd	r4, r7, [r5]
 23ed51a:	e7e0      	b.n	23ed4de <__udivmoddi4+0x9a>
 23ed51c:	b902      	cbnz	r2, 23ed520 <__udivmoddi4+0xdc>
 23ed51e:	deff      	udf	#255	; 0xff
 23ed520:	fab2 f382 	clz	r3, r2
 23ed524:	2b00      	cmp	r3, #0
 23ed526:	f040 809d 	bne.w	23ed664 <__udivmoddi4+0x220>
 23ed52a:	1a89      	subs	r1, r1, r2
 23ed52c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23ed530:	b297      	uxth	r7, r2
 23ed532:	2601      	movs	r6, #1
 23ed534:	0c20      	lsrs	r0, r4, #16
 23ed536:	fbb1 f2fe 	udiv	r2, r1, lr
 23ed53a:	fb0e 1112 	mls	r1, lr, r2, r1
 23ed53e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23ed542:	fb07 f002 	mul.w	r0, r7, r2
 23ed546:	4288      	cmp	r0, r1
 23ed548:	d90f      	bls.n	23ed56a <__udivmoddi4+0x126>
 23ed54a:	eb1c 0101 	adds.w	r1, ip, r1
 23ed54e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23ed552:	bf2c      	ite	cs
 23ed554:	f04f 0901 	movcs.w	r9, #1
 23ed558:	f04f 0900 	movcc.w	r9, #0
 23ed55c:	4288      	cmp	r0, r1
 23ed55e:	d903      	bls.n	23ed568 <__udivmoddi4+0x124>
 23ed560:	f1b9 0f00 	cmp.w	r9, #0
 23ed564:	f000 80cf 	beq.w	23ed706 <__udivmoddi4+0x2c2>
 23ed568:	4642      	mov	r2, r8
 23ed56a:	1a09      	subs	r1, r1, r0
 23ed56c:	b2a4      	uxth	r4, r4
 23ed56e:	fbb1 f0fe 	udiv	r0, r1, lr
 23ed572:	fb0e 1110 	mls	r1, lr, r0, r1
 23ed576:	fb00 f707 	mul.w	r7, r0, r7
 23ed57a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23ed57e:	42a7      	cmp	r7, r4
 23ed580:	d908      	bls.n	23ed594 <__udivmoddi4+0x150>
 23ed582:	eb1c 0404 	adds.w	r4, ip, r4
 23ed586:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23ed58a:	d202      	bcs.n	23ed592 <__udivmoddi4+0x14e>
 23ed58c:	42a7      	cmp	r7, r4
 23ed58e:	f200 80b4 	bhi.w	23ed6fa <__udivmoddi4+0x2b6>
 23ed592:	4608      	mov	r0, r1
 23ed594:	1be4      	subs	r4, r4, r7
 23ed596:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23ed59a:	e79b      	b.n	23ed4d4 <__udivmoddi4+0x90>
 23ed59c:	f1c6 0720 	rsb	r7, r6, #32
 23ed5a0:	40b3      	lsls	r3, r6
 23ed5a2:	fa01 f406 	lsl.w	r4, r1, r6
 23ed5a6:	fa22 fc07 	lsr.w	ip, r2, r7
 23ed5aa:	40f9      	lsrs	r1, r7
 23ed5ac:	40b2      	lsls	r2, r6
 23ed5ae:	ea4c 0c03 	orr.w	ip, ip, r3
 23ed5b2:	fa20 f307 	lsr.w	r3, r0, r7
 23ed5b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23ed5ba:	431c      	orrs	r4, r3
 23ed5bc:	fa1f fe8c 	uxth.w	lr, ip
 23ed5c0:	fa00 f306 	lsl.w	r3, r0, r6
 23ed5c4:	0c20      	lsrs	r0, r4, #16
 23ed5c6:	fbb1 f8f9 	udiv	r8, r1, r9
 23ed5ca:	fb09 1118 	mls	r1, r9, r8, r1
 23ed5ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23ed5d2:	fb08 f00e 	mul.w	r0, r8, lr
 23ed5d6:	4288      	cmp	r0, r1
 23ed5d8:	d90f      	bls.n	23ed5fa <__udivmoddi4+0x1b6>
 23ed5da:	eb1c 0101 	adds.w	r1, ip, r1
 23ed5de:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23ed5e2:	bf2c      	ite	cs
 23ed5e4:	f04f 0b01 	movcs.w	fp, #1
 23ed5e8:	f04f 0b00 	movcc.w	fp, #0
 23ed5ec:	4288      	cmp	r0, r1
 23ed5ee:	d903      	bls.n	23ed5f8 <__udivmoddi4+0x1b4>
 23ed5f0:	f1bb 0f00 	cmp.w	fp, #0
 23ed5f4:	f000 808d 	beq.w	23ed712 <__udivmoddi4+0x2ce>
 23ed5f8:	46d0      	mov	r8, sl
 23ed5fa:	1a09      	subs	r1, r1, r0
 23ed5fc:	b2a4      	uxth	r4, r4
 23ed5fe:	fbb1 f0f9 	udiv	r0, r1, r9
 23ed602:	fb09 1110 	mls	r1, r9, r0, r1
 23ed606:	fb00 fe0e 	mul.w	lr, r0, lr
 23ed60a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23ed60e:	458e      	cmp	lr, r1
 23ed610:	d907      	bls.n	23ed622 <__udivmoddi4+0x1de>
 23ed612:	eb1c 0101 	adds.w	r1, ip, r1
 23ed616:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23ed61a:	d201      	bcs.n	23ed620 <__udivmoddi4+0x1dc>
 23ed61c:	458e      	cmp	lr, r1
 23ed61e:	d87f      	bhi.n	23ed720 <__udivmoddi4+0x2dc>
 23ed620:	4620      	mov	r0, r4
 23ed622:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23ed626:	eba1 010e 	sub.w	r1, r1, lr
 23ed62a:	fba0 9802 	umull	r9, r8, r0, r2
 23ed62e:	4541      	cmp	r1, r8
 23ed630:	464c      	mov	r4, r9
 23ed632:	46c6      	mov	lr, r8
 23ed634:	d302      	bcc.n	23ed63c <__udivmoddi4+0x1f8>
 23ed636:	d106      	bne.n	23ed646 <__udivmoddi4+0x202>
 23ed638:	454b      	cmp	r3, r9
 23ed63a:	d204      	bcs.n	23ed646 <__udivmoddi4+0x202>
 23ed63c:	3801      	subs	r0, #1
 23ed63e:	ebb9 0402 	subs.w	r4, r9, r2
 23ed642:	eb68 0e0c 	sbc.w	lr, r8, ip
 23ed646:	2d00      	cmp	r5, #0
 23ed648:	d070      	beq.n	23ed72c <__udivmoddi4+0x2e8>
 23ed64a:	1b1a      	subs	r2, r3, r4
 23ed64c:	eb61 010e 	sbc.w	r1, r1, lr
 23ed650:	fa22 f306 	lsr.w	r3, r2, r6
 23ed654:	fa01 f707 	lsl.w	r7, r1, r7
 23ed658:	40f1      	lsrs	r1, r6
 23ed65a:	2600      	movs	r6, #0
 23ed65c:	431f      	orrs	r7, r3
 23ed65e:	e9c5 7100 	strd	r7, r1, [r5]
 23ed662:	e73c      	b.n	23ed4de <__udivmoddi4+0x9a>
 23ed664:	fa02 fc03 	lsl.w	ip, r2, r3
 23ed668:	f1c3 0020 	rsb	r0, r3, #32
 23ed66c:	fa01 f203 	lsl.w	r2, r1, r3
 23ed670:	fa21 f600 	lsr.w	r6, r1, r0
 23ed674:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23ed678:	fa24 f100 	lsr.w	r1, r4, r0
 23ed67c:	fa1f f78c 	uxth.w	r7, ip
 23ed680:	409c      	lsls	r4, r3
 23ed682:	4311      	orrs	r1, r2
 23ed684:	fbb6 f0fe 	udiv	r0, r6, lr
 23ed688:	0c0a      	lsrs	r2, r1, #16
 23ed68a:	fb0e 6610 	mls	r6, lr, r0, r6
 23ed68e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23ed692:	fb00 f607 	mul.w	r6, r0, r7
 23ed696:	4296      	cmp	r6, r2
 23ed698:	d90e      	bls.n	23ed6b8 <__udivmoddi4+0x274>
 23ed69a:	eb1c 0202 	adds.w	r2, ip, r2
 23ed69e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23ed6a2:	bf2c      	ite	cs
 23ed6a4:	f04f 0901 	movcs.w	r9, #1
 23ed6a8:	f04f 0900 	movcc.w	r9, #0
 23ed6ac:	4296      	cmp	r6, r2
 23ed6ae:	d902      	bls.n	23ed6b6 <__udivmoddi4+0x272>
 23ed6b0:	f1b9 0f00 	cmp.w	r9, #0
 23ed6b4:	d031      	beq.n	23ed71a <__udivmoddi4+0x2d6>
 23ed6b6:	4640      	mov	r0, r8
 23ed6b8:	1b92      	subs	r2, r2, r6
 23ed6ba:	b289      	uxth	r1, r1
 23ed6bc:	fbb2 f6fe 	udiv	r6, r2, lr
 23ed6c0:	fb0e 2216 	mls	r2, lr, r6, r2
 23ed6c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23ed6c8:	fb06 f207 	mul.w	r2, r6, r7
 23ed6cc:	428a      	cmp	r2, r1
 23ed6ce:	d907      	bls.n	23ed6e0 <__udivmoddi4+0x29c>
 23ed6d0:	eb1c 0101 	adds.w	r1, ip, r1
 23ed6d4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23ed6d8:	d201      	bcs.n	23ed6de <__udivmoddi4+0x29a>
 23ed6da:	428a      	cmp	r2, r1
 23ed6dc:	d823      	bhi.n	23ed726 <__udivmoddi4+0x2e2>
 23ed6de:	4646      	mov	r6, r8
 23ed6e0:	1a89      	subs	r1, r1, r2
 23ed6e2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23ed6e6:	e725      	b.n	23ed534 <__udivmoddi4+0xf0>
 23ed6e8:	462e      	mov	r6, r5
 23ed6ea:	4628      	mov	r0, r5
 23ed6ec:	e6f7      	b.n	23ed4de <__udivmoddi4+0x9a>
 23ed6ee:	1a84      	subs	r4, r0, r2
 23ed6f0:	eb61 0303 	sbc.w	r3, r1, r3
 23ed6f4:	2001      	movs	r0, #1
 23ed6f6:	461f      	mov	r7, r3
 23ed6f8:	e70b      	b.n	23ed512 <__udivmoddi4+0xce>
 23ed6fa:	4464      	add	r4, ip
 23ed6fc:	3802      	subs	r0, #2
 23ed6fe:	e749      	b.n	23ed594 <__udivmoddi4+0x150>
 23ed700:	4464      	add	r4, ip
 23ed702:	3802      	subs	r0, #2
 23ed704:	e6e1      	b.n	23ed4ca <__udivmoddi4+0x86>
 23ed706:	3a02      	subs	r2, #2
 23ed708:	4461      	add	r1, ip
 23ed70a:	e72e      	b.n	23ed56a <__udivmoddi4+0x126>
 23ed70c:	3e02      	subs	r6, #2
 23ed70e:	4462      	add	r2, ip
 23ed710:	e6c6      	b.n	23ed4a0 <__udivmoddi4+0x5c>
 23ed712:	f1a8 0802 	sub.w	r8, r8, #2
 23ed716:	4461      	add	r1, ip
 23ed718:	e76f      	b.n	23ed5fa <__udivmoddi4+0x1b6>
 23ed71a:	3802      	subs	r0, #2
 23ed71c:	4462      	add	r2, ip
 23ed71e:	e7cb      	b.n	23ed6b8 <__udivmoddi4+0x274>
 23ed720:	3802      	subs	r0, #2
 23ed722:	4461      	add	r1, ip
 23ed724:	e77d      	b.n	23ed622 <__udivmoddi4+0x1de>
 23ed726:	3e02      	subs	r6, #2
 23ed728:	4461      	add	r1, ip
 23ed72a:	e7d9      	b.n	23ed6e0 <__udivmoddi4+0x29c>
 23ed72c:	462e      	mov	r6, r5
 23ed72e:	e6d6      	b.n	23ed4de <__udivmoddi4+0x9a>

023ed730 <__aeabi_idiv0>:
 23ed730:	4770      	bx	lr
 23ed732:	bf00      	nop

023ed734 <strcmp>:
 23ed734:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ed738:	f811 3b01 	ldrb.w	r3, [r1], #1
 23ed73c:	2a01      	cmp	r2, #1
 23ed73e:	bf28      	it	cs
 23ed740:	429a      	cmpcs	r2, r3
 23ed742:	d0f7      	beq.n	23ed734 <strcmp>
 23ed744:	1ad0      	subs	r0, r2, r3
 23ed746:	4770      	bx	lr

023ed748 <strlen>:
 23ed748:	4603      	mov	r3, r0
 23ed74a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23ed74e:	2a00      	cmp	r2, #0
 23ed750:	d1fb      	bne.n	23ed74a <strlen+0x2>
 23ed752:	1a18      	subs	r0, r3, r0
 23ed754:	3801      	subs	r0, #1
 23ed756:	4770      	bx	lr

023ed758 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23ed758:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23ed75a:	f00a fc5f 	bl	23f801c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23ed75e:	2500      	movs	r5, #0
 23ed760:	4e05      	ldr	r6, [pc, #20]	; (23ed778 <module_user_init+0x20>)
 23ed762:	4c06      	ldr	r4, [pc, #24]	; (23ed77c <module_user_init+0x24>)
 23ed764:	1ba4      	subs	r4, r4, r6
 23ed766:	08a4      	lsrs	r4, r4, #2
 23ed768:	42ac      	cmp	r4, r5
 23ed76a:	d100      	bne.n	23ed76e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23ed76c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23ed76e:	f856 3b04 	ldr.w	r3, [r6], #4
 23ed772:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23ed774:	3501      	adds	r5, #1
 23ed776:	e7f7      	b.n	23ed768 <module_user_init+0x10>
 23ed778:	023fffd0 	.word	0x023fffd0
 23ed77c:	023ffffc 	.word	0x023ffffc

023ed780 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23ed780:	f004 bd70 	b.w	23f2264 <setup>

023ed784 <module_user_loop>:
}

void module_user_loop() {
 23ed784:	b508      	push	{r3, lr}
    loop();
 23ed786:	f005 fbf9 	bl	23f2f7c <loop>
    _post_loop();
}
 23ed78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23ed78e:	f00a bbfd 	b.w	23f7f8c <_post_loop>

023ed792 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23ed792:	f009 bf0b 	b.w	23f75ac <malloc>

023ed796 <_Znaj>:
 23ed796:	f009 bf09 	b.w	23f75ac <malloc>

023ed79a <_ZdaPv>:
 23ed79a:	f009 bf15 	b.w	23f75c8 <free>

023ed79e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23ed79e:	f009 bf13 	b.w	23f75c8 <free>
	...

023ed7a4 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23ed7a4:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23ed7a6:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23ed7a8:	4a02      	ldr	r2, [pc, #8]	; (23ed7b4 <__cxa_pure_virtual+0x10>)
 23ed7aa:	4903      	ldr	r1, [pc, #12]	; (23ed7b8 <__cxa_pure_virtual+0x14>)
 23ed7ac:	f009 fdca 	bl	23f7344 <panic_>
  while (1);
 23ed7b0:	e7fe      	b.n	23ed7b0 <__cxa_pure_virtual+0xc>
 23ed7b2:	bf00      	nop
 23ed7b4:	023f729d 	.word	0x023f729d
 23ed7b8:	023fb9f8 	.word	0x023fb9f8

023ed7bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23ed7bc:	7800      	ldrb	r0, [r0, #0]
 23ed7be:	fab0 f080 	clz	r0, r0
 23ed7c2:	0940      	lsrs	r0, r0, #5
 23ed7c4:	4770      	bx	lr

023ed7c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23ed7c6:	2301      	movs	r3, #1
 23ed7c8:	7003      	strb	r3, [r0, #0]
 23ed7ca:	4770      	bx	lr

023ed7cc <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 23ed7cc:	2810      	cmp	r0, #16
 23ed7ce:	bf9a      	itte	ls
 23ed7d0:	4b02      	ldrls	r3, [pc, #8]	; (23ed7dc <TfLiteTypeGetName+0x10>)
 23ed7d2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 23ed7d6:	4802      	ldrhi	r0, [pc, #8]	; (23ed7e0 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
 23ed7d8:	4770      	bx	lr
 23ed7da:	bf00      	nop
 23ed7dc:	023fba88 	.word	0x023fba88
 23ed7e0:	023fba0d 	.word	0x023fba0d

023ed7e4 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 23ed7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ed7e8:	b09b      	sub	sp, #108	; 0x6c
 23ed7ea:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ed7ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23ed7ee:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ed7f0:	105b      	asrs	r3, r3, #1
 23ed7f2:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
 23ed7f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ed7f6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23ed7f8:	005b      	lsls	r3, r3, #1
 23ed7fa:	9310      	str	r3, [sp, #64]	; 0x40
 23ed7fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
 23ed7fe:	9112      	str	r1, [sp, #72]	; 0x48
 23ed800:	4353      	muls	r3, r2
 23ed802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ed804:	900c      	str	r0, [sp, #48]	; 0x30
 23ed806:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 23ed80a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed80c:	930a      	str	r3, [sp, #40]	; 0x28
 23ed80e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ed810:	2a00      	cmp	r2, #0
 23ed812:	f023 030f 	bic.w	r3, r3, #15
 23ed816:	bfb8      	it	lt
 23ed818:	2300      	movlt	r3, #0
 23ed81a:	9308      	str	r3, [sp, #32]
 23ed81c:	4613      	mov	r3, r2
 23ed81e:	9a08      	ldr	r2, [sp, #32]
 23ed820:	9908      	ldr	r1, [sp, #32]
 23ed822:	1a9b      	subs	r3, r3, r2
 23ed824:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed826:	428a      	cmp	r2, r1
 23ed828:	bfb8      	it	lt
 23ed82a:	2300      	movlt	r3, #0
 23ed82c:	4413      	add	r3, r2
 23ed82e:	9316      	str	r3, [sp, #88]	; 0x58
 23ed830:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ed832:	005b      	lsls	r3, r3, #1
 23ed834:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ed836:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ed838:	9300      	str	r3, [sp, #0]
 23ed83a:	2304      	movs	r3, #4
 23ed83c:	9305      	str	r3, [sp, #20]
 23ed83e:	2300      	movs	r3, #0
 23ed840:	9301      	str	r3, [sp, #4]
 23ed842:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ed844:	3b01      	subs	r3, #1
 23ed846:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ed848:	f1a2 030f 	sub.w	r3, r2, #15
 23ed84c:	9313      	str	r3, [sp, #76]	; 0x4c
 23ed84e:	9a01      	ldr	r2, [sp, #4]
 23ed850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ed852:	4413      	add	r3, r2
 23ed854:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ed856:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ed858:	4293      	cmp	r3, r2
 23ed85a:	f340 82cc 	ble.w	23eddf6 <arm_nn_mat_mult_nt_t_s8+0x612>
 23ed85e:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ed860:	9800      	ldr	r0, [sp, #0]
 23ed862:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
 23ed864:	2300      	movs	r3, #0
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ed866:	f1c0 0001 	rsb	r0, r0, #1
        q31_t lhs_offset_contribution0 = 0;
 23ed86a:	4619      	mov	r1, r3
 23ed86c:	e005      	b.n	23ed87a <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
 23ed86e:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 23ed872:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 23ed874:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 23ed876:	5714      	ldrsb	r4, [r2, r4]
 23ed878:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ed87a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ed87c:	1884      	adds	r4, r0, r2
 23ed87e:	42ac      	cmp	r4, r5
 23ed880:	dbf5      	blt.n	23ed86e <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
 23ed882:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ed884:	434a      	muls	r2, r1
 23ed886:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
 23ed888:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ed88a:	4353      	muls	r3, r2
 23ed88c:	9303      	str	r3, [sp, #12]
        if (bias)
 23ed88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ed890:	b15b      	cbz	r3, 23ed8aa <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 23ed892:	9a01      	ldr	r2, [sp, #4]
 23ed894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ed898:	9a02      	ldr	r2, [sp, #8]
 23ed89a:	441a      	add	r2, r3
 23ed89c:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 23ed89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ed8a0:	9a05      	ldr	r2, [sp, #20]
 23ed8a2:	589b      	ldr	r3, [r3, r2]
 23ed8a4:	9a03      	ldr	r2, [sp, #12]
 23ed8a6:	441a      	add	r2, r3
 23ed8a8:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
 23ed8aa:	9b08      	ldr	r3, [sp, #32]
 23ed8ac:	9a00      	ldr	r2, [sp, #0]
 23ed8ae:	3b01      	subs	r3, #1
 23ed8b0:	18d3      	adds	r3, r2, r3
 23ed8b2:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
 23ed8b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ed8b6:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ed8b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ed8ba:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
 23ed8bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ed8be:	3301      	adds	r3, #1
 23ed8c0:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
 23ed8c2:	9b06      	ldr	r3, [sp, #24]
 23ed8c4:	2b00      	cmp	r3, #0
 23ed8c6:	f000 818e 	beq.w	23edbe6 <arm_nn_mat_mult_nt_t_s8+0x402>
            q31_t res10 = lhs_offset_contribution0;
 23ed8ca:	e9dd b902 	ldrd	fp, r9, [sp, #8]
 23ed8ce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ed8d0:	9b00      	ldr	r3, [sp, #0]
            q31_t res01 = lhs_offset_contribution1;
 23ed8d2:	464f      	mov	r7, r9
 23ed8d4:	189e      	adds	r6, r3, r2
 23ed8d6:	9b04      	ldr	r3, [sp, #16]
 23ed8d8:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
 23ed8da:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
 23ed8dc:	2200      	movs	r2, #0
 23ed8de:	e0a3      	b.n	23eda28 <arm_nn_mat_mult_nt_t_s8+0x244>
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 23ed8e0:	9900      	ldr	r1, [sp, #0]
 23ed8e2:	5888      	ldr	r0, [r1, r2]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed8e4:	9904      	ldr	r1, [sp, #16]
 23ed8e6:	fa2f fe80 	sxtb16	lr, r0
 23ed8ea:	588c      	ldr	r4, [r1, r2]
 23ed8ec:	6831      	ldr	r1, [r6, #0]
 23ed8ee:	fa2f f884 	sxtb16	r8, r4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed8f2:	fa2f f090 	sxtb16	r0, r0, ror #8
 23ed8f6:	fa2f f494 	sxtb16	r4, r4, ror #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed8fa:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed8fe:	fa2f f381 	sxtb16	r3, r1
 23ed902:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed904:	fb24 c300 	smlad	r3, r4, r0, ip
 23ed908:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed90a:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed90e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ed910:	fb28 7701 	smlad	r7, r8, r1, r7
 23ed914:	fb24 740c 	smlad	r4, r4, ip, r7
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 23ed918:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed91a:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed91e:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed922:	fb28 be0e 	smlad	lr, r8, lr, fp
 23ed926:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ed928:	fb28 9101 	smlad	r1, r8, r1, r9
 23ed92c:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
 23ed930:	f8da 8004 	ldr.w	r8, [sl, #4]
 23ed934:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
 23ed938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ed93a:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed93e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 23ed942:	fa2f f788 	sxtb16	r7, r8
 23ed946:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed94a:	fa2f f898 	sxtb16	r8, r8, ror #8
 23ed94e:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ed954:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed958:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed95c:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed960:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed964:	fb2c 440b 	smlad	r4, ip, fp, r4
 23ed968:	fb29 490e 	smlad	r9, r9, lr, r4
 23ed96c:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed96e:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed972:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed976:	fb2c 0007 	smlad	r0, ip, r7, r0
 23ed97a:	fb2c 110b 	smlad	r1, ip, fp, r1
 23ed97e:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
 23ed982:	f8da b008 	ldr.w	fp, [sl, #8]
 23ed986:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
 23ed98a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ed98c:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed990:	6880      	ldr	r0, [r0, #8]
 23ed992:	fa2f f18b 	sxtb16	r1, fp
 23ed996:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed99a:	fa2f fb9b 	sxtb16	fp, fp, ror #8
 23ed99e:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9a2:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed9a6:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9aa:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed9ae:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9b2:	fb24 9907 	smlad	r9, r4, r7, r9
 23ed9b6:	fb20 900c 	smlad	r0, r0, ip, r9
 23ed9ba:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed9be:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed9c2:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9c6:	fb24 8801 	smlad	r8, r4, r1, r8
 23ed9ca:	fb24 e407 	smlad	r4, r4, r7, lr
 23ed9ce:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
 23ed9d2:	f8da e00c 	ldr.w	lr, [sl, #12]
 23ed9d6:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
 23ed9da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23ed9dc:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed9de:	68e7      	ldr	r7, [r4, #12]
 23ed9e0:	fa2f f88e 	sxtb16	r8, lr
 23ed9e4:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed9e8:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 23ed9ec:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9f0:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ed9f4:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ed9f8:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ed9fc:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eda00:	fb2a 0009 	smlad	r0, sl, r9, r0
 23eda04:	fb24 0701 	smlad	r7, r4, r1, r0
 23eda08:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eda0a:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eda0e:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eda12:	fb24 bb08 	smlad	fp, r4, r8, fp
 23eda16:	fb24 cc09 	smlad	ip, r4, r9, ip
 23eda1a:	fb25 bb0e 	smlad	fp, r5, lr, fp
 23eda1e:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eda22:	9d15      	ldr	r5, [sp, #84]	; 0x54
 23eda24:	3210      	adds	r2, #16
 23eda26:	3610      	adds	r6, #16
 23eda28:	9904      	ldr	r1, [sp, #16]
 23eda2a:	4411      	add	r1, r2
 23eda2c:	910d      	str	r1, [sp, #52]	; 0x34
 23eda2e:	9900      	ldr	r1, [sp, #0]
 23eda30:	eb01 0a02 	add.w	sl, r1, r2
 23eda34:	f105 0110 	add.w	r1, r5, #16
 23eda38:	9115      	str	r1, [sp, #84]	; 0x54
 23eda3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23eda3c:	4291      	cmp	r1, r2
 23eda3e:	f73f af4f 	bgt.w	23ed8e0 <arm_nn_mat_mult_nt_t_s8+0xfc>
 23eda42:	9908      	ldr	r1, [sp, #32]
 23eda44:	9a04      	ldr	r2, [sp, #16]
 23eda46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23eda48:	440a      	add	r2, r1
 23eda4a:	4614      	mov	r4, r2
 23eda4c:	1e51      	subs	r1, r2, #1
 23eda4e:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eda50:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23eda52:	42aa      	cmp	r2, r5
 23eda54:	f2c0 80b5 	blt.w	23edbc2 <arm_nn_mat_mult_nt_t_s8+0x3de>
                lhs_value = lhs_ptr[rhs_cols];
 23eda58:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23eda5a:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
 23eda5c:	18a2      	adds	r2, r4, r2
 23eda5e:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23eda60:	9a24      	ldr	r2, [sp, #144]	; 0x90
 23eda62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 23eda66:	920d      	str	r2, [sp, #52]	; 0x34
 23eda68:	9a25      	ldr	r2, [sp, #148]	; 0x94
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eda6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23eda6c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 23eda70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23eda74:	2100      	movs	r1, #0
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eda76:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
 23eda7a:	2d00      	cmp	r5, #0
 23eda7c:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eda80:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eda84:	bfc8      	it	gt
 23eda86:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eda88:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eda8c:	bfd8      	it	le
 23eda8e:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eda90:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 23eda94:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eda96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
 23eda9a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23eda9e:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
 23edaa2:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
 23edaa6:	412a      	asrs	r2, r5
    q31_t threshold = remainder_mask >> 1;
 23edaa8:	bf54      	ite	pl
 23edaaa:	4663      	movpl	r3, ip
        threshold++;
 23edaac:	4463      	addmi	r3, ip
    if (remainder > threshold)
 23edaae:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23edab0:	9905      	ldr	r1, [sp, #20]
 23edab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edab4:	f04f 0000 	mov.w	r0, #0
 23edab8:	585b      	ldr	r3, [r3, r1]
        result++;
 23edaba:	bfc8      	it	gt
 23edabc:	3201      	addgt	r2, #1
 23edabe:	930f      	str	r3, [sp, #60]	; 0x3c
 23edac0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edac2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23edac4:	585c      	ldr	r4, [r3, r1]
 23edac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edaca:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 23edace:	408f      	lsls	r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edad0:	fbc7 3006 	smlal	r3, r0, r7, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edad4:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23edad6:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edada:	bfc8      	it	gt
 23edadc:	2400      	movgt	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23edade:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edae2:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edae6:	bfd8      	it	le
 23edae8:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edaea:	fa00 f604 	lsl.w	r6, r0, r4
 23edaee:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
 23edaf0:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
 23edaf4:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
 23edaf8:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 23edafa:	bf54      	ite	pl
 23edafc:	4638      	movpl	r0, r7
        threshold++;
 23edafe:	1838      	addmi	r0, r7, r0
    if (remainder > threshold)
 23edb00:	4580      	cmp	r8, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edb02:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edb06:	f04f 0800 	mov.w	r8, #0
 23edb0a:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 23edb0e:	980d      	ldr	r0, [sp, #52]	; 0x34
        result++;
 23edb10:	bfc8      	it	gt
 23edb12:	3301      	addgt	r3, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edb14:	fbce b800 	smlal	fp, r8, lr, r0
 23edb18:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
 23edb1a:	0fc0      	lsrs	r0, r0, #31
 23edb1c:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23edb20:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
 23edb24:	4128      	asrs	r0, r5
        threshold++;
 23edb26:	bf48      	it	mi
 23edb28:	f10c 0c01 	addmi.w	ip, ip, #1
    if (remainder > threshold)
 23edb2c:	45e2      	cmp	sl, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edb2e:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 23edb32:	f04f 0c00 	mov.w	ip, #0
 23edb36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edb38:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edb3c:	fbc1 ec05 	smlal	lr, ip, r1, r5
 23edb40:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
 23edb42:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 23edb46:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
 23edb4a:	bfc8      	it	gt
 23edb4c:	3001      	addgt	r0, #1
    if (result < 0)
 23edb4e:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
 23edb52:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
 23edb56:	bf48      	it	mi
 23edb58:	3701      	addmi	r7, #1
            res00 += dst_offset;
 23edb5a:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23edb5c:	42be      	cmp	r6, r7
        result++;
 23edb5e:	bfc8      	it	gt
 23edb60:	3401      	addgt	r4, #1
 23edb62:	440a      	add	r2, r1
            res01 += dst_offset;
 23edb64:	440b      	add	r3, r1
            res10 += dst_offset;
 23edb66:	4408      	add	r0, r1
            res11 += dst_offset;
 23edb68:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
 23edb6a:	992b      	ldr	r1, [sp, #172]	; 0xac
 23edb6c:	428a      	cmp	r2, r1
 23edb6e:	bfb8      	it	lt
 23edb70:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 23edb72:	428b      	cmp	r3, r1
 23edb74:	bfb8      	it	lt
 23edb76:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
 23edb78:	4288      	cmp	r0, r1
 23edb7a:	bfb8      	it	lt
 23edb7c:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
 23edb7e:	428c      	cmp	r4, r1
 23edb80:	bfb8      	it	lt
 23edb82:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
 23edb84:	992c      	ldr	r1, [sp, #176]	; 0xb0
 23edb86:	428a      	cmp	r2, r1
 23edb88:	bfa8      	it	ge
 23edb8a:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 23edb8c:	9907      	ldr	r1, [sp, #28]
 23edb8e:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 23edb90:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23edb92:	4293      	cmp	r3, r2
 23edb94:	bfa8      	it	ge
 23edb96:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 23edb98:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
 23edb9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23edb9c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
 23edb9e:	4298      	cmp	r0, r3
 23edba0:	bfa8      	it	ge
 23edba2:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
 23edba4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23edba6:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
 23edba8:	429c      	cmp	r4, r3
 23edbaa:	bfa8      	it	ge
 23edbac:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
 23edbae:	460b      	mov	r3, r1
 23edbb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23edbb2:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
 23edbb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23edbb6:	4413      	add	r3, r2
 23edbb8:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
 23edbba:	9b06      	ldr	r3, [sp, #24]
 23edbbc:	3b01      	subs	r3, #1
 23edbbe:	9306      	str	r3, [sp, #24]
 23edbc0:	e67f      	b.n	23ed8c2 <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
 23edbc2:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23edbc6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edbc8:	3201      	adds	r2, #1
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23edbca:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
 23edbcc:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
 23edbd0:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
 23edbd4:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
 23edbd8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23edbda:	574d      	ldrsb	r5, [r1, r5]
                res10 += lhs_value * rhs_value0;
 23edbdc:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
 23edbe0:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edbe4:	e734      	b.n	23eda50 <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
 23edbe6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23edbe8:	07d8      	lsls	r0, r3, #31
 23edbea:	d57a      	bpl.n	23edce2 <arm_nn_mat_mult_nt_t_s8+0x4fe>
 23edbec:	9b00      	ldr	r3, [sp, #0]
 23edbee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23edbf0:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
 23edbf2:	9b06      	ldr	r3, [sp, #24]
 23edbf4:	9a04      	ldr	r2, [sp, #16]
 23edbf6:	18d6      	adds	r6, r2, r3
 23edbf8:	9a00      	ldr	r2, [sp, #0]
 23edbfa:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edbfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23edbfe:	429a      	cmp	r2, r3
 23edc00:	dc7d      	bgt.n	23edcfe <arm_nn_mat_mult_nt_t_s8+0x51a>
 23edc02:	9a08      	ldr	r2, [sp, #32]
 23edc04:	9b04      	ldr	r3, [sp, #16]
 23edc06:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edc08:	9a04      	ldr	r2, [sp, #16]
 23edc0a:	4251      	negs	r1, r2
 23edc0c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 23edc0e:	185a      	adds	r2, r3, r1
 23edc10:	4290      	cmp	r0, r2
 23edc12:	f300 80de 	bgt.w	23eddd2 <arm_nn_mat_mult_nt_t_s8+0x5ee>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23edc16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23edc18:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23edc1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc22:	9b02      	ldr	r3, [sp, #8]
 23edc24:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 23edc28:	40a3      	lsls	r3, r4
 23edc2a:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc2c:	2500      	movs	r5, #0
 23edc2e:	9901      	ldr	r1, [sp, #4]
 23edc30:	9b24      	ldr	r3, [sp, #144]	; 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc32:	2a00      	cmp	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23edc38:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 23edc3c:	ea4f 71d0 	mov.w	r1, r0, lsr #31
 23edc40:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edc44:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc48:	bfcc      	ite	gt
 23edc4a:	2100      	movgt	r1, #0
 23edc4c:	4251      	negle	r1, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edc4e:	408b      	lsls	r3, r1
 23edc50:	3b01      	subs	r3, #1
    if (result < 0)
 23edc52:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
 23edc56:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23edc5a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23edc5e:	bf48      	it	mi
 23edc60:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23edc62:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23edc64:	9a05      	ldr	r2, [sp, #20]
 23edc66:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc68:	f04f 0500 	mov.w	r5, #0
 23edc6c:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc6e:	9b03      	ldr	r3, [sp, #12]
 23edc70:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23edc74:	fa03 f300 	lsl.w	r3, r3, r0
 23edc78:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
        result++;
 23edc7c:	bfc8      	it	gt
 23edc7e:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23edc80:	589b      	ldr	r3, [r3, r2]
 23edc82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23edc86:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 23edc8a:	0fd2      	lsrs	r2, r2, #31
 23edc8c:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edc90:	2201      	movs	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edc92:	2c00      	cmp	r4, #0
 23edc94:	bfdc      	itt	le
 23edc96:	4263      	negle	r3, r4
 23edc98:	9306      	strle	r3, [sp, #24]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edc9a:	9b06      	ldr	r3, [sp, #24]
 23edc9c:	fa02 f303 	lsl.w	r3, r2, r3
 23edca0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23edca2:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23edca6:	4113      	asrs	r3, r2
    if (result < 0)
 23edca8:	9a06      	ldr	r2, [sp, #24]
 23edcaa:	4115      	asrs	r5, r2
        threshold++;
 23edcac:	bf48      	it	mi
 23edcae:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23edcb0:	4298      	cmp	r0, r3
            res00 += dst_offset;
 23edcb2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
 23edcb4:	bfc8      	it	gt
 23edcb6:	3501      	addgt	r5, #1
 23edcb8:	4419      	add	r1, r3
            res01 += dst_offset;
 23edcba:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
 23edcbc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23edcbe:	4299      	cmp	r1, r3
 23edcc0:	bfb8      	it	lt
 23edcc2:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
 23edcc4:	429d      	cmp	r5, r3
 23edcc6:	bfb8      	it	lt
 23edcc8:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
 23edcca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23edccc:	4299      	cmp	r1, r3
 23edcce:	bfa8      	it	ge
 23edcd0:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
 23edcd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23edcd4:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
 23edcd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23edcd8:	429d      	cmp	r5, r3
 23edcda:	bfa8      	it	ge
 23edcdc:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
 23edcde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23edce0:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
 23edce2:	9b00      	ldr	r3, [sp, #0]
 23edce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23edce6:	4413      	add	r3, r2
 23edce8:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edcea:	9b01      	ldr	r3, [sp, #4]
 23edcec:	3302      	adds	r3, #2
 23edcee:	9301      	str	r3, [sp, #4]
 23edcf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23edcf2:	3302      	adds	r3, #2
 23edcf4:	930a      	str	r3, [sp, #40]	; 0x28
 23edcf6:	9b05      	ldr	r3, [sp, #20]
 23edcf8:	3308      	adds	r3, #8
 23edcfa:	9305      	str	r3, [sp, #20]
 23edcfc:	e5a7      	b.n	23ed84e <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
 23edcfe:	9a00      	ldr	r2, [sp, #0]
 23edd00:	6801      	ldr	r1, [r0, #0]
 23edd02:	58d7      	ldr	r7, [r2, r3]
 23edd04:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23edd06:	fa2f f887 	sxtb16	r8, r7
 23edd0a:	58d2      	ldr	r2, [r2, r3]
 23edd0c:	fa2f fe81 	sxtb16	lr, r1
 23edd10:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23edd14:	fa2f f797 	sxtb16	r7, r7, ror #8
 23edd18:	fa2f f292 	sxtb16	r2, r2, ror #8
 23edd1c:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edd20:	9c02      	ldr	r4, [sp, #8]
 23edd22:	fb2c 4808 	smlad	r8, ip, r8, r4
 23edd26:	fb22 8707 	smlad	r7, r2, r7, r8
 23edd2a:	9c03      	ldr	r4, [sp, #12]
 23edd2c:	fb2c 4c0e 	smlad	ip, ip, lr, r4
 23edd30:	fb22 c101 	smlad	r1, r2, r1, ip
 23edd34:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
 23edd36:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
 23edd3a:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23edd3c:	fa2f f984 	sxtb16	r9, r4
 23edd40:	fa2f fe82 	sxtb16	lr, r2
 23edd44:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23edd48:	fa2f f494 	sxtb16	r4, r4, ror #8
 23edd4c:	fa2f f292 	sxtb16	r2, r2, ror #8
 23edd50:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edd54:	fb2e 7709 	smlad	r7, lr, r9, r7
 23edd58:	fb22 7404 	smlad	r4, r2, r4, r7
 23edd5c:	fb2e 1108 	smlad	r1, lr, r8, r1
 23edd60:	fb22 120c 	smlad	r2, r2, ip, r1
 23edd64:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
 23edd68:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
 23edd6c:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23edd70:	fa2f f788 	sxtb16	r7, r8
 23edd74:	fa2f f18c 	sxtb16	r1, ip
 23edd78:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23edd7c:	fa2f f898 	sxtb16	r8, r8, ror #8
 23edd80:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 23edd84:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23edd88:	fb21 4407 	smlad	r4, r1, r7, r4
 23edd8c:	fb2c 4808 	smlad	r8, ip, r8, r4
 23edd90:	fb21 2209 	smlad	r2, r1, r9, r2
 23edd94:	fb2c 2e0e 	smlad	lr, ip, lr, r2
 23edd98:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
 23edd9a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
 23edd9e:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23edda0:	fa2f f482 	sxtb16	r4, r2
 23edda4:	fa2f fc85 	sxtb16	ip, r5
 23edda8:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eddac:	fa2f f292 	sxtb16	r2, r2, ror #8
 23eddb0:	fa2f f595 	sxtb16	r5, r5, ror #8
 23eddb4:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eddb8:	fb2c 8804 	smlad	r8, ip, r4, r8
 23eddbc:	fb25 8202 	smlad	r2, r5, r2, r8
 23eddc0:	9202      	str	r2, [sp, #8]
 23eddc2:	fb2c ee01 	smlad	lr, ip, r1, lr
 23eddc6:	fb25 e20a 	smlad	r2, r5, sl, lr
 23eddca:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eddcc:	3310      	adds	r3, #16
 23eddce:	3010      	adds	r0, #16
 23eddd0:	e710      	b.n	23edbf4 <arm_nn_mat_mult_nt_t_s8+0x410>
                res00 += lhs_value * rhs_value0;
 23eddd2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
 23eddd4:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
 23eddd8:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
 23edddc:	940b      	str	r4, [sp, #44]	; 0x2c
 23eddde:	9c02      	ldr	r4, [sp, #8]
 23edde0:	fb12 4000 	smlabb	r0, r2, r0, r4
                res01 += lhs_value * rhs_value1;
 23edde4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
                res00 += lhs_value * rhs_value0;
 23edde6:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
 23edde8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23eddea:	5700      	ldrsb	r0, [r0, r4]
 23eddec:	9c03      	ldr	r4, [sp, #12]
 23eddee:	fb12 4200 	smlabb	r2, r2, r0, r4
 23eddf2:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eddf4:	e70a      	b.n	23edc0c <arm_nn_mat_mult_nt_t_s8+0x428>
 23eddf6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23eddf8:	9810      	ldr	r0, [sp, #64]	; 0x40
 23eddfa:	2b00      	cmp	r3, #0
 23eddfc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 23ede00:	bfac      	ite	ge
 23ede02:	4611      	movge	r1, r2
 23ede04:	2100      	movlt	r1, #0
 23ede06:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ede0a:	bfb8      	it	lt
 23ede0c:	2200      	movlt	r2, #0
 23ede0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ede10:	fb00 3301 	mla	r3, r0, r1, r3
 23ede14:	9300      	str	r3, [sp, #0]
 23ede16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ede18:	4413      	add	r3, r2
 23ede1a:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
 23ede1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ede1e:	07d9      	lsls	r1, r3, #31
 23ede20:	d517      	bpl.n	23ede52 <arm_nn_mat_mult_nt_t_s8+0x66e>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23ede22:	2700      	movs	r7, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ede24:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 23ede28:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ede2a:	f04f 0901 	mov.w	r9, #1
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 23ede2e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 23ede32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ede34:	3c01      	subs	r4, #1
 23ede36:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23ede3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23ede3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23ede40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23ede42:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23ede46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ede48:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23ede4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ede4e:	429f      	cmp	r7, r3
 23ede50:	db03      	blt.n	23ede5a <arm_nn_mat_mult_nt_t_s8+0x676>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
 23ede52:	2000      	movs	r0, #0
 23ede54:	b01b      	add	sp, #108	; 0x6c
 23ede56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
 23ede5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ede5c:	2b00      	cmp	r3, #0
 23ede5e:	d038      	beq.n	23eded2 <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
 23ede60:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
 23ede64:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ede66:	9928      	ldr	r1, [sp, #160]	; 0xa0
 23ede68:	428b      	cmp	r3, r1
 23ede6a:	db34      	blt.n	23eded6 <arm_nn_mat_mult_nt_t_s8+0x6f2>
 23ede6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23ede6e:	6821      	ldr	r1, [r4, #0]
 23ede70:	4473      	add	r3, lr
 23ede72:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ede74:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ede78:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ede7a:	46c2      	mov	sl, r8
 23ede7c:	4663      	mov	r3, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ede7e:	2900      	cmp	r1, #0
 23ede80:	bfc8      	it	gt
 23ede82:	2100      	movgt	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ede84:	6806      	ldr	r6, [r0, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ede86:	bfd8      	it	le
 23ede88:	4249      	negle	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ede8a:	fbc5 3a06 	smlal	r3, sl, r5, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ede8e:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
 23ede92:	0fdb      	lsrs	r3, r3, #31
 23ede94:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ede98:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
 23ede9a:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
 23ede9e:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
 23edea2:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
 23edea6:	bf48      	it	mi
 23edea8:	3501      	addmi	r5, #1
            res00 += dst_offset;
 23edeaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23edeac:	42ae      	cmp	r6, r5
        result++;
 23edeae:	bfc8      	it	gt
 23edeb0:	f10a 0a01 	addgt.w	sl, sl, #1
 23edeb4:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
 23edeb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23edeb8:	3701      	adds	r7, #1
            res00 = MAX(res00, activation_min);
 23edeba:	459a      	cmp	sl, r3
 23edebc:	bfb8      	it	lt
 23edebe:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
 23edec0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23edec2:	459a      	cmp	sl, r3
 23edec4:	bfa8      	it	ge
 23edec6:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
 23edec8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
 23edeca:	f882 a000 	strb.w	sl, [r2]
            dst_ptr += rhs_rows;
 23edece:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23eded0:	e7bc      	b.n	23ede4c <arm_nn_mat_mult_nt_t_s8+0x668>
            q31_t res00 = 0;
 23eded2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23eded4:	e7c6      	b.n	23ede64 <arm_nn_mat_mult_nt_t_s8+0x680>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eded6:	990c      	ldr	r1, [sp, #48]	; 0x30
 23eded8:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 23ededa:	56c9      	ldrsb	r1, [r1, r3]
 23ededc:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
 23edede:	9e00      	ldr	r6, [sp, #0]
 23edee0:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edee2:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
 23edee4:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edee8:	e7bd      	b.n	23ede66 <arm_nn_mat_mult_nt_t_s8+0x682>

023edeea <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 23edeea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23edeee:	b095      	sub	sp, #84	; 0x54
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23edef0:	9c22      	ldr	r4, [sp, #136]	; 0x88
{
 23edef2:	9001      	str	r0, [sp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edef4:	9822      	ldr	r0, [sp, #136]	; 0x88
 23edef6:	2c00      	cmp	r4, #0
 23edef8:	f1c0 0000 	rsb	r0, r0, #0
 23edefc:	bfc8      	it	gt
 23edefe:	2000      	movgt	r0, #0
 23edf00:	9004      	str	r0, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23edf02:	2001      	movs	r0, #1
 23edf04:	9c04      	ldr	r4, [sp, #16]
 23edf06:	9308      	str	r3, [sp, #32]
 23edf08:	40a0      	lsls	r0, r4
 23edf0a:	3801      	subs	r0, #1
 23edf0c:	9005      	str	r0, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23edf0e:	1040      	asrs	r0, r0, #1
 23edf10:	9006      	str	r0, [sp, #24]
        threshold++;
 23edf12:	3001      	adds	r0, #1
 23edf14:	9009      	str	r0, [sp, #36]	; 0x24
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 23edf16:	9823      	ldr	r0, [sp, #140]	; 0x8c
 23edf18:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 23edf1a:	0040      	lsls	r0, r0, #1
 23edf1c:	900a      	str	r0, [sp, #40]	; 0x28
 23edf1e:	9808      	ldr	r0, [sp, #32]
 23edf20:	2c00      	cmp	r4, #0
 23edf22:	f100 0002 	add.w	r0, r0, #2
 23edf26:	9002      	str	r0, [sp, #8]
 23edf28:	9823      	ldr	r0, [sp, #140]	; 0x8c
{
 23edf2a:	910c      	str	r1, [sp, #48]	; 0x30
 23edf2c:	ea4f 1010 	mov.w	r0, r0, lsr #4
 23edf30:	900e      	str	r0, [sp, #56]	; 0x38
 23edf32:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23edf34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23edf36:	f020 000f 	bic.w	r0, r0, #15
 23edf3a:	bfb8      	it	lt
 23edf3c:	2000      	movlt	r0, #0
 23edf3e:	9007      	str	r0, [sp, #28]
 23edf40:	9c07      	ldr	r4, [sp, #28]
 23edf42:	9801      	ldr	r0, [sp, #4]
 23edf44:	b219      	sxth	r1, r3
 23edf46:	4420      	add	r0, r4
 23edf48:	900b      	str	r0, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edf4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23edf4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edf4e:	9003      	str	r0, [sp, #12]
 23edf50:	9824      	ldr	r0, [sp, #144]	; 0x90
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23edf52:	b21b      	sxth	r3, r3
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edf54:	3801      	subs	r0, #1
 23edf56:	900f      	str	r0, [sp, #60]	; 0x3c
 23edf58:	9808      	ldr	r0, [sp, #32]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23edf5a:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edf5e:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 23edf62:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 23edf66:	30fe      	adds	r0, #254	; 0xfe
 23edf68:	9010      	str	r0, [sp, #64]	; 0x40
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edf6a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23edf6c:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edf70:	380f      	subs	r0, #15
 23edf72:	9011      	str	r0, [sp, #68]	; 0x44
 23edf74:	1e60      	subs	r0, r4, #1
 23edf76:	9012      	str	r0, [sp, #72]	; 0x48
 23edf78:	9801      	ldr	r0, [sp, #4]
 23edf7a:	4240      	negs	r0, r0
 23edf7c:	9013      	str	r0, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23edf7e:	9822      	ldr	r0, [sp, #136]	; 0x88
 23edf80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23edf84:	900d      	str	r0, [sp, #52]	; 0x34
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23edf86:	9c02      	ldr	r4, [sp, #8]
 23edf88:	9810      	ldr	r0, [sp, #64]	; 0x40
 23edf8a:	4420      	add	r0, r4
 23edf8c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 23edf8e:	4284      	cmp	r4, r0
 23edf90:	dc67      	bgt.n	23ee062 <arm_nn_vec_mat_mult_t_s8+0x178>
 23edf92:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23edf94:	9824      	ldr	r0, [sp, #144]	; 0x90
 23edf96:	2c00      	cmp	r4, #0
 23edf98:	ea4f 0050 	mov.w	r0, r0, lsr #1
 23edf9c:	bfac      	ite	ge
 23edf9e:	4684      	movge	ip, r0
 23edfa0:	f04f 0c00 	movlt.w	ip, #0
 23edfa4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23edfa8:	bfb8      	it	lt
 23edfaa:	2000      	movlt	r0, #0
 23edfac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23edfae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23edfb0:	fb05 4c0c 	mla	ip, r5, ip, r4
 23edfb4:	9c08      	ldr	r4, [sp, #32]
 23edfb6:	4404      	add	r4, r0
 23edfb8:	4620      	mov	r0, r4
    }

    if (rhs_rows % 2)
 23edfba:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23edfbc:	07e4      	lsls	r4, r4, #31
 23edfbe:	d54c      	bpl.n	23ee05a <arm_nn_vec_mat_mult_t_s8+0x170>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
 23edfc0:	b102      	cbz	r2, 23edfc4 <arm_nn_vec_mat_mult_t_s8+0xda>
        {
            res00 = *bias++;
 23edfc2:	6812      	ldr	r2, [r2, #0]
        q31_t res00 = 0;
 23edfc4:	2500      	movs	r5, #0
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23edfc6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 23edfc8:	f1a4 090f 	sub.w	r9, r4, #15
 23edfcc:	9c01      	ldr	r4, [sp, #4]
 23edfce:	45a9      	cmp	r9, r5
 23edfd0:	eb04 0805 	add.w	r8, r4, r5
 23edfd4:	eb0c 0e05 	add.w	lr, ip, r5
 23edfd8:	f300 814c 	bgt.w	23ee274 <arm_nn_vec_mat_mult_t_s8+0x38a>
 23edfdc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 23edfde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23edfe0:	2900      	cmp	r1, #0
 23edfe2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 23edfe6:	bfb8      	it	lt
 23edfe8:	2300      	movlt	r3, #0
 23edfea:	9907      	ldr	r1, [sp, #28]
 23edfec:	3901      	subs	r1, #1
 23edfee:	448c      	add	ip, r1
 23edff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23edff2:	1a5b      	subs	r3, r3, r1
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23edff4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 23edff6:	18cc      	adds	r4, r1, r3
 23edff8:	42a5      	cmp	r5, r4
 23edffa:	f300 818d 	bgt.w	23ee318 <arm_nn_vec_mat_mult_t_s8+0x42e>
 23edffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ee000:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23ee008:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ee00a:	2300      	movs	r3, #0
 23ee00c:	461c      	mov	r4, r3
 23ee00e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 23ee010:	fbc2 1405 	smlal	r1, r4, r2, r5
    result = (int32_t)(mult.long_long >> 31);
 23ee014:	0fca      	lsrs	r2, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee016:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (int32_t)(mult.long_long >> 31);
 23ee018:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee01c:	4299      	cmp	r1, r3
 23ee01e:	bfd8      	it	le
 23ee020:	460b      	movle	r3, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ee022:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee026:	bfd8      	it	le
 23ee028:	425b      	negle	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ee02a:	4099      	lsls	r1, r3
 23ee02c:	3901      	subs	r1, #1
    if (result < 0)
 23ee02e:	fa52 f303 	asrs.w	r3, r2, r3
    int32_t remainder = remainder_mask & dividend;
 23ee032:	ea02 0401 	and.w	r4, r2, r1
    q31_t threshold = remainder_mask >> 1;
 23ee036:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23ee03a:	bf48      	it	mi
 23ee03c:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 23ee03e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    if (remainder > threshold)
 23ee040:	428c      	cmp	r4, r1
        result++;
 23ee042:	bfc8      	it	gt
 23ee044:	3301      	addgt	r3, #1
 23ee046:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 23ee048:	9a25      	ldr	r2, [sp, #148]	; 0x94
 23ee04a:	4293      	cmp	r3, r2
 23ee04c:	bfb8      	it	lt
 23ee04e:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 23ee050:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23ee052:	4293      	cmp	r3, r2
 23ee054:	bfa8      	it	ge
 23ee056:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 23ee058:	7003      	strb	r3, [r0, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 23ee05a:	2000      	movs	r0, #0
 23ee05c:	b015      	add	sp, #84	; 0x54
 23ee05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
 23ee062:	2a00      	cmp	r2, #0
 23ee064:	d06c      	beq.n	23ee140 <arm_nn_vec_mat_mult_t_s8+0x256>
            res00 = *bias++;
 23ee066:	4615      	mov	r5, r2
 23ee068:	f855 4b08 	ldr.w	r4, [r5], #8
            res01 = *bias++;
 23ee06c:	6850      	ldr	r0, [r2, #4]
 23ee06e:	462a      	mov	r2, r5
        int32_t rhs_cols_idx = 0;
 23ee070:	f04f 0c00 	mov.w	ip, #0
 23ee074:	9d03      	ldr	r5, [sp, #12]
 23ee076:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 23ee078:	19af      	adds	r7, r5, r6
 23ee07a:	9d01      	ldr	r5, [sp, #4]
 23ee07c:	eb05 080c 	add.w	r8, r5, ip
 23ee080:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 23ee082:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ee086:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23ee088:	4565      	cmp	r5, ip
 23ee08a:	dc5c      	bgt.n	23ee146 <arm_nn_vec_mat_mult_t_s8+0x25c>
 23ee08c:	9d03      	ldr	r5, [sp, #12]
 23ee08e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 23ee090:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 23ee094:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ee096:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 23ee098:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 23ee09a:	4475      	add	r5, lr
 23ee09c:	42ae      	cmp	r6, r5
 23ee09e:	f300 80d7 	bgt.w	23ee250 <arm_nn_vec_mat_mult_t_s8+0x366>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee0a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ee0a4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee0a8:	40ac      	lsls	r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ee0aa:	2500      	movs	r5, #0
 23ee0ac:	9f21      	ldr	r7, [sp, #132]	; 0x84
 23ee0ae:	fbc4 6507 	smlal	r6, r5, r4, r7
    result = (int32_t)(mult.long_long >> 31);
 23ee0b2:	0ff4      	lsrs	r4, r6, #31
 23ee0b4:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23ee0b8:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 23ee0ba:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23ee0bc:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23ee0be:	4025      	ands	r5, r4
    q31_t threshold = remainder_mask >> 1;
 23ee0c0:	4134      	asrs	r4, r6
 23ee0c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23ee0c4:	bf58      	it	pl
 23ee0c6:	463e      	movpl	r6, r7
    if (remainder > threshold)
 23ee0c8:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee0ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ee0cc:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ee0ce:	fa00 f605 	lsl.w	r6, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ee0d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ee0d6:	f04f 0500 	mov.w	r5, #0
 23ee0da:	fbc6 0507 	smlal	r0, r5, r6, r7
    result = (int32_t)(mult.long_long >> 31);
 23ee0de:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 23ee0e2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23ee0e6:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 23ee0e8:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23ee0ea:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23ee0ec:	ea00 0505 	and.w	r5, r0, r5
        result++;
 23ee0f0:	bfc8      	it	gt
 23ee0f2:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
 23ee0f4:	4130      	asrs	r0, r6
 23ee0f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23ee0f8:	bf58      	it	pl
 23ee0fa:	463e      	movpl	r6, r7
    if (remainder > threshold)
 23ee0fc:	42b5      	cmp	r5, r6
        res00 += dst_offset;
 23ee0fe:	9d20      	ldr	r5, [sp, #128]	; 0x80
        result++;
 23ee100:	bfc8      	it	gt
 23ee102:	3001      	addgt	r0, #1
 23ee104:	442c      	add	r4, r5
        res01 += dst_offset;
 23ee106:	4428      	add	r0, r5
        res00 = MAX(res00, activation_min);
 23ee108:	9d25      	ldr	r5, [sp, #148]	; 0x94
 23ee10a:	42ac      	cmp	r4, r5
 23ee10c:	bfb8      	it	lt
 23ee10e:	462c      	movlt	r4, r5
        res01 = MAX(res01, activation_min);
 23ee110:	42a8      	cmp	r0, r5
 23ee112:	bfb8      	it	lt
 23ee114:	4628      	movlt	r0, r5
        res00 = MIN(res00, activation_max);
 23ee116:	9d26      	ldr	r5, [sp, #152]	; 0x98
 23ee118:	42ac      	cmp	r4, r5
 23ee11a:	bfa8      	it	ge
 23ee11c:	462c      	movge	r4, r5
        *dst++ = (q7_t)res00;
 23ee11e:	9d02      	ldr	r5, [sp, #8]
 23ee120:	f805 4c02 	strb.w	r4, [r5, #-2]
        res01 = MIN(res01, activation_max);
 23ee124:	9c26      	ldr	r4, [sp, #152]	; 0x98
 23ee126:	42a0      	cmp	r0, r4
 23ee128:	bfa8      	it	ge
 23ee12a:	4620      	movge	r0, r4
        rhs += 2 * rhs_cols;
 23ee12c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        *dst++ = (q7_t)res01;
 23ee12e:	f805 0c01 	strb.w	r0, [r5, #-1]
        rhs += 2 * rhs_cols;
 23ee132:	9803      	ldr	r0, [sp, #12]
 23ee134:	4420      	add	r0, r4
 23ee136:	9003      	str	r0, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ee138:	4628      	mov	r0, r5
 23ee13a:	3002      	adds	r0, #2
 23ee13c:	9002      	str	r0, [sp, #8]
 23ee13e:	e722      	b.n	23edf86 <arm_nn_vec_mat_mult_t_s8+0x9c>
        q31_t res01 = 0;
 23ee140:	4610      	mov	r0, r2
        q31_t res00 = 0;
 23ee142:	4614      	mov	r4, r2
 23ee144:	e794      	b.n	23ee070 <arm_nn_vec_mat_mult_t_s8+0x186>
    memcpy(&val, *in_q7, 4);
 23ee146:	9d01      	ldr	r5, [sp, #4]
 23ee148:	f8de b000 	ldr.w	fp, [lr]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee14c:	f855 500c 	ldr.w	r5, [r5, ip]
 23ee150:	fa23 f68b 	sxtab16	r6, r3, fp
 23ee154:	fa21 fa85 	sxtab16	sl, r1, r5
 23ee158:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee15c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ee160:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee164:	fa23 fb8b 	sxtab16	fp, r3, fp
 23ee168:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee16c:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee170:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee174:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee178:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee17c:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee180:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee184:	fb2a 0006 	smlad	r0, sl, r6, r0
 23ee188:	fb25 0009 	smlad	r0, r5, r9, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee18c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23ee190:	fa23 f68b 	sxtab16	r6, r3, fp
 23ee194:	fa21 fa85 	sxtab16	sl, r1, r5
 23ee198:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee19c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ee1a0:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1a4:	fa23 fb8b 	sxtab16	fp, r3, fp
 23ee1a8:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee1ac:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1b0:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee1b4:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1b8:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee1bc:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1c0:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee1c4:	fb2a 0606 	smlad	r6, sl, r6, r0
 23ee1c8:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 23ee1d0:	fa23 f08b 	sxtab16	r0, r3, fp
 23ee1d4:	fa21 f985 	sxtab16	r9, r1, r5
 23ee1d8:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee1dc:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ee1e0:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1e4:	fa23 fb8b 	sxtab16	fp, r3, fp
 23ee1e8:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee1ec:	fb29 4400 	smlad	r4, r9, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1f0:	fa23 f08a 	sxtab16	r0, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee1f4:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee1f8:	f8de b00c 	ldr.w	fp, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee1fc:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee200:	fa23 fa8a 	sxtab16	sl, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee204:	fb29 6000 	smlad	r0, r9, r0, r6
 23ee208:	fb25 050a 	smlad	r5, r5, sl, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee20c:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 23ee210:	fa23 f68b 	sxtab16	r6, r3, fp
 23ee214:	fa21 fa8e 	sxtab16	sl, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee218:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23ee21c:	f8d7 800c 	ldr.w	r8, [r7, #12]
 23ee220:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee224:	fa23 f98b 	sxtab16	r9, r3, fp
 23ee228:	fa21 fe8e 	sxtab16	lr, r1, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee22c:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee230:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee234:	fb2e 4409 	smlad	r4, lr, r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee238:	ea4f 2038 	mov.w	r0, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee23c:	fa23 f080 	sxtab16	r0, r3, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee240:	fb2a 550b 	smlad	r5, sl, fp, r5
 23ee244:	fb2e 5000 	smlad	r0, lr, r0, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ee248:	f10c 0c10 	add.w	ip, ip, #16
 23ee24c:	3710      	adds	r7, #16
 23ee24e:	e714      	b.n	23ee07a <arm_nn_vec_mat_mult_t_s8+0x190>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23ee250:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 23ee252:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23ee256:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23ee25a:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23ee25c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 23ee25e:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 23ee260:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            res00 += lhs_value * rhs_value0;
 23ee262:	fb05 440c 	mla	r4, r5, ip, r4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 23ee266:	f917 c006 	ldrsb.w	ip, [r7, r6]
 23ee26a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 23ee26c:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
 23ee26e:	fb05 000c 	mla	r0, r5, ip, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ee272:	e710      	b.n	23ee096 <arm_nn_vec_mat_mult_t_s8+0x1ac>
 23ee274:	9c01      	ldr	r4, [sp, #4]
 23ee276:	f85c 7005 	ldr.w	r7, [ip, r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee27a:	5966      	ldr	r6, [r4, r5]
 23ee27c:	fa23 fb87 	sxtab16	fp, r3, r7
 23ee280:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee284:	ea4f 2737 	mov.w	r7, r7, ror #8
 23ee288:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee28c:	fa23 f787 	sxtab16	r7, r3, r7
 23ee290:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee294:	fb2a 220b 	smlad	r2, sl, fp, r2
 23ee298:	fb26 2207 	smlad	r2, r6, r7, r2
 23ee29c:	f8de 4004 	ldr.w	r4, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee2a0:	f8d8 6004 	ldr.w	r6, [r8, #4]
 23ee2a4:	fa23 fb84 	sxtab16	fp, r3, r4
 23ee2a8:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee2ac:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee2b0:	fa23 f784 	sxtab16	r7, r3, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee2b4:	ea4f 2436 	mov.w	r4, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee2b8:	fa21 f484 	sxtab16	r4, r1, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee2bc:	fb2a 220b 	smlad	r2, sl, fp, r2
 23ee2c0:	fb24 2407 	smlad	r4, r4, r7, r2
 23ee2c4:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee2c8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 23ee2cc:	fa23 fb87 	sxtab16	fp, r3, r7
 23ee2d0:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee2d4:	ea4f 2737 	mov.w	r7, r7, ror #8
 23ee2d8:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee2dc:	fa23 f787 	sxtab16	r7, r3, r7
 23ee2e0:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee2e4:	fb2a 440b 	smlad	r4, sl, fp, r4
 23ee2e8:	fb26 4607 	smlad	r6, r6, r7, r4
 23ee2ec:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee2f0:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 23ee2f4:	fa23 f482 	sxtab16	r4, r3, r2
 23ee2f8:	fa21 f78e 	sxtab16	r7, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee2fc:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee300:	fa23 f882 	sxtab16	r8, r3, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee304:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee308:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ee30c:	fb27 6604 	smlad	r6, r7, r4, r6
 23ee310:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ee314:	3510      	adds	r5, #16
 23ee316:	e659      	b.n	23edfcc <arm_nn_vec_mat_mult_t_s8+0xe2>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23ee318:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 23ee31a:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23ee31e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23ee320:	442c      	add	r4, r5
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23ee322:	f911 5b01 	ldrsb.w	r5, [r1], #1
 23ee326:	4435      	add	r5, r6
            res00 += lhs_value * rhs_value0;
 23ee328:	fb05 2204 	mla	r2, r5, r4, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ee32c:	e662      	b.n	23edff4 <arm_nn_vec_mat_mult_t_s8+0x10a>

023ee32e <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 23ee32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 23ee332:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
    while (block_cnt > 0)
 23ee336:	460e      	mov	r6, r1
 23ee338:	f022 0403 	bic.w	r4, r2, #3
    block_cnt = block_size >> 2;
 23ee33c:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
 23ee340:	4404      	add	r4, r0
 23ee342:	42a0      	cmp	r0, r4
 23ee344:	d108      	bne.n	23ee358 <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 23ee346:	f002 0203 	and.w	r2, r2, #3
 23ee34a:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 23ee34e:	4422      	add	r2, r4
 23ee350:	4294      	cmp	r4, r2
 23ee352:	d113      	bne.n	23ee37c <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
 23ee354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ee358:	f850 5b04 	ldr.w	r5, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee35c:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 23ee35e:	ea4f 2735 	mov.w	r7, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23ee362:	fa2c f585 	sxtab16	r5, ip, r5
 23ee366:	fa2c f787 	sxtab16	r7, ip, r7
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 23ee36a:	eac7 4825 	pkhtb	r8, r7, r5, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 23ee36e:	eac5 4507 	pkhbt	r5, r5, r7, lsl #16
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
 23ee372:	f846 8c04 	str.w	r8, [r6, #-4]
 23ee376:	f846 5c08 	str.w	r5, [r6, #-8]
        block_cnt--;
 23ee37a:	e7e2      	b.n	23ee342 <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
 23ee37c:	f914 0b01 	ldrsb.w	r0, [r4], #1
 23ee380:	4418      	add	r0, r3
 23ee382:	f821 0b02 	strh.w	r0, [r1], #2
        block_cnt--;
 23ee386:	e7e3      	b.n	23ee350 <arm_q7_to_q15_with_offset+0x22>

023ee388 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 23ee388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee38c:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ee38e:	2300      	movs	r3, #0
{
 23ee390:	b08f      	sub	sp, #60	; 0x3c
 23ee392:	9008      	str	r0, [sp, #32]
 23ee394:	910b      	str	r1, [sp, #44]	; 0x2c
 23ee396:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ee398:	9300      	str	r3, [sp, #0]
 23ee39a:	9303      	str	r3, [sp, #12]
 23ee39c:	9a00      	ldr	r2, [sp, #0]
 23ee39e:	9b08      	ldr	r3, [sp, #32]
 23ee3a0:	4413      	add	r3, r2
 23ee3a2:	9304      	str	r3, [sp, #16]
 23ee3a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ee3a6:	4413      	add	r3, r2
 23ee3a8:	9307      	str	r3, [sp, #28]
 23ee3aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ee3ac:	9b03      	ldr	r3, [sp, #12]
 23ee3ae:	4293      	cmp	r3, r2
 23ee3b0:	db02      	blt.n	23ee3b8 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
 23ee3b2:	b00f      	add	sp, #60	; 0x3c
 23ee3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
 23ee3b8:	9b08      	ldr	r3, [sp, #32]
 23ee3ba:	9a00      	ldr	r2, [sp, #0]
 23ee3bc:	569b      	ldrsb	r3, [r3, r2]
 23ee3be:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
 23ee3c0:	2301      	movs	r3, #1
 23ee3c2:	9a02      	ldr	r2, [sp, #8]
 23ee3c4:	4293      	cmp	r3, r2
 23ee3c6:	f2c0 8134 	blt.w	23ee632 <arm_softmax_s8+0x2aa>
        int32_t sum = 0;
 23ee3ca:	2300      	movs	r3, #0
        for (col = 0; col < row_size; ++col)
 23ee3cc:	469e      	mov	lr, r3
        mult = 1 - mult;
 23ee3ce:	f8df 8278 	ldr.w	r8, [pc, #632]	; 23ee648 <arm_softmax_s8+0x2c0>
 23ee3d2:	9a02      	ldr	r2, [sp, #8]
 23ee3d4:	4596      	cmp	lr, r2
 23ee3d6:	f2c0 8139 	blt.w	23ee64c <arm_softmax_s8+0x2c4>
  return __builtin_clz(value);
 23ee3da:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 23ee3de:	4093      	lsls	r3, r2
 23ee3e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 23ee3e4:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23ee3e6:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 23ee3ea:	f141 0100 	adc.w	r1, r1, #0
 23ee3ee:	085b      	lsrs	r3, r3, #1
 23ee3f0:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 23ee3f4:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
 23ee3f8:	4a92      	ldr	r2, [pc, #584]	; (23ee644 <arm_softmax_s8+0x2bc>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23ee3fa:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 23ee3fc:	425c      	negs	r4, r3
 23ee3fe:	fb02 4401 	mla	r4, r2, r1, r4
 23ee402:	fba3 2002 	umull	r2, r0, r3, r2
 23ee406:	4404      	add	r4, r0
 23ee408:	488f      	ldr	r0, [pc, #572]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee40a:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
 23ee40c:	f164 0400 	sbc.w	r4, r4, #0
 23ee410:	2c00      	cmp	r4, #0
 23ee412:	da04      	bge.n	23ee41e <arm_softmax_s8+0x96>
 23ee414:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee418:	1812      	adds	r2, r2, r0
 23ee41a:	f144 0400 	adc.w	r4, r4, #0
 23ee41e:	0fd2      	lsrs	r2, r2, #31
 23ee420:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 23ee424:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 23ee428:	fb00 f501 	mul.w	r5, r0, r1
 23ee42c:	17c2      	asrs	r2, r0, #31
 23ee42e:	fb03 5502 	mla	r5, r3, r2, r5
 23ee432:	fba0 4203 	umull	r4, r2, r0, r3
 23ee436:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
 23ee43a:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
 23ee43e:	0fe4      	lsrs	r4, r4, #31
 23ee440:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee444:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
 23ee448:	2c00      	cmp	r4, #0
 23ee44a:	bfac      	ite	ge
 23ee44c:	2500      	movge	r5, #0
 23ee44e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 23ee452:	4a7d      	ldr	r2, [pc, #500]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee454:	bfa8      	it	ge
 23ee456:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee45a:	fbc0 2504 	smlal	r2, r5, r0, r4
 23ee45e:	2d00      	cmp	r5, #0
 23ee460:	da04      	bge.n	23ee46c <arm_softmax_s8+0xe4>
 23ee462:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23ee466:	1912      	adds	r2, r2, r4
 23ee468:	f145 0500 	adc.w	r5, r5, #0
 23ee46c:	0fd2      	lsrs	r2, r2, #31
 23ee46e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee472:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
 23ee476:	2a00      	cmp	r2, #0
 23ee478:	4d73      	ldr	r5, [pc, #460]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee47a:	bfa6      	itte	ge
 23ee47c:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23ee480:	f04f 0c00 	movge.w	ip, #0
 23ee484:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee488:	fb02 f401 	mul.w	r4, r2, r1
 23ee48c:	17d0      	asrs	r0, r2, #31
 23ee48e:	fb03 4400 	mla	r4, r3, r0, r4
 23ee492:	fba2 0e03 	umull	r0, lr, r2, r3
 23ee496:	1940      	adds	r0, r0, r5
 23ee498:	4474      	add	r4, lr
    result = (int32_t)(mult / (1ll << 31));
 23ee49a:	eb44 040c 	adc.w	r4, r4, ip
 23ee49e:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
 23ee4a0:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee4a4:	da04      	bge.n	23ee4b0 <arm_softmax_s8+0x128>
 23ee4a6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 23ee4aa:	1940      	adds	r0, r0, r5
 23ee4ac:	f144 0400 	adc.w	r4, r4, #0
 23ee4b0:	0fc0      	lsrs	r0, r0, #31
 23ee4b2:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee4b6:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
 23ee4ba:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
 23ee4be:	bf0c      	ite	eq
 23ee4c0:	2400      	moveq	r4, #0
 23ee4c2:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 23ee4c6:	4e60      	ldr	r6, [pc, #384]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee4c8:	bf08      	it	eq
 23ee4ca:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee4ce:	fbc2 6400 	smlal	r6, r4, r2, r0
 23ee4d2:	4625      	mov	r5, r4
 23ee4d4:	2d00      	cmp	r5, #0
 23ee4d6:	4634      	mov	r4, r6
 23ee4d8:	da04      	bge.n	23ee4e4 <arm_softmax_s8+0x15c>
 23ee4da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee4de:	1834      	adds	r4, r6, r0
 23ee4e0:	f145 0500 	adc.w	r5, r5, #0
 23ee4e4:	0fe4      	lsrs	r4, r4, #31
 23ee4e6:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee4ea:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 23ee4ee:	bfab      	itete	ge
 23ee4f0:	2000      	movge	r0, #0
 23ee4f2:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 23ee4f6:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 23ee4fa:	2500      	movlt	r5, #0
 23ee4fc:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee500:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee504:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee508:	bfcb      	itete	gt
 23ee50a:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
 23ee50e:	2500      	movle	r5, #0
 23ee510:	2400      	movgt	r4, #0
 23ee512:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
 23ee516:	4028      	ands	r0, r5
 23ee518:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee51a:	4402      	add	r2, r0
        mult = 1 - mult;
 23ee51c:	2a00      	cmp	r2, #0
 23ee51e:	484a      	ldr	r0, [pc, #296]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee520:	bfa6      	itte	ge
 23ee522:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 23ee526:	2500      	movge	r5, #0
 23ee528:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee52c:	4351      	muls	r1, r2
 23ee52e:	17d6      	asrs	r6, r2, #31
 23ee530:	fb03 1106 	mla	r1, r3, r6, r1
 23ee534:	fba2 3603 	umull	r3, r6, r2, r3
 23ee538:	181b      	adds	r3, r3, r0
 23ee53a:	4431      	add	r1, r6
    result = (int32_t)(mult / (1ll << 31));
 23ee53c:	eb41 0105 	adc.w	r1, r1, r5
 23ee540:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
 23ee542:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee546:	da04      	bge.n	23ee552 <arm_softmax_s8+0x1ca>
 23ee548:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee54c:	181b      	adds	r3, r3, r0
 23ee54e:	f141 0100 	adc.w	r1, r1, #0
 23ee552:	0fdb      	lsrs	r3, r3, #31
 23ee554:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee558:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
 23ee55c:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
 23ee560:	bf0c      	ite	eq
 23ee562:	2000      	moveq	r0, #0
 23ee564:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23ee568:	4937      	ldr	r1, [pc, #220]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee56a:	bf08      	it	eq
 23ee56c:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee570:	fbc2 1003 	smlal	r1, r0, r2, r3
 23ee574:	2800      	cmp	r0, #0
 23ee576:	da04      	bge.n	23ee582 <arm_softmax_s8+0x1fa>
 23ee578:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 23ee57c:	18c9      	adds	r1, r1, r3
 23ee57e:	f140 0000 	adc.w	r0, r0, #0
 23ee582:	0fc9      	lsrs	r1, r1, #31
 23ee584:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee588:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 23ee58c:	bfab      	itete	ge
 23ee58e:	2300      	movge	r3, #0
 23ee590:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 23ee594:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23ee598:	2100      	movlt	r1, #0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee59a:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee59e:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee5a2:	bfd4      	ite	le
 23ee5a4:	2000      	movle	r0, #0
 23ee5a6:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee5aa:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee5ae:	bfd4      	ite	le
 23ee5b0:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 23ee5b4:	2100      	movgt	r1, #0
 23ee5b6:	4018      	ands	r0, r3
 23ee5b8:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23ee5ba:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee5bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 23ee5c0:	bfab      	itete	ge
 23ee5c2:	2300      	movge	r3, #0
 23ee5c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 23ee5c8:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23ee5cc:	2100      	movlt	r1, #0
 23ee5ce:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee5d2:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23ee5d6:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23ee5da:	bfcb      	itete	gt
 23ee5dc:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 23ee5e0:	2100      	movle	r1, #0
 23ee5e2:	2200      	movgt	r2, #0
 23ee5e4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 23ee5e8:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
 23ee5ea:	4053      	eors	r3, r2
 23ee5ec:	9309      	str	r3, [sp, #36]	; 0x24
 23ee5ee:	bf55      	itete	pl
 23ee5f0:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 23ee5f4:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
 23ee5f8:	2300      	movpl	r3, #0
 23ee5fa:	4a13      	ldrmi	r2, [pc, #76]	; (23ee648 <arm_softmax_s8+0x2c0>)
 23ee5fc:	f04f 0c00 	mov.w	ip, #0
 23ee600:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ee604:	2301      	movs	r3, #1
 23ee606:	fa03 f30a 	lsl.w	r3, r3, sl
 23ee60a:	3b01      	subs	r3, #1
 23ee60c:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23ee60e:	105b      	asrs	r3, r3, #1
 23ee610:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
 23ee612:	f8df e034 	ldr.w	lr, [pc, #52]	; 23ee648 <arm_softmax_s8+0x2c0>
        threshold++;
 23ee616:	3301      	adds	r3, #1
 23ee618:	930a      	str	r3, [sp, #40]	; 0x28
 23ee61a:	9b02      	ldr	r3, [sp, #8]
 23ee61c:	459c      	cmp	ip, r3
 23ee61e:	f2c0 8183 	blt.w	23ee928 <arm_softmax_s8+0x5a0>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ee622:	9b03      	ldr	r3, [sp, #12]
 23ee624:	9a00      	ldr	r2, [sp, #0]
 23ee626:	3301      	adds	r3, #1
 23ee628:	9303      	str	r3, [sp, #12]
 23ee62a:	9b02      	ldr	r3, [sp, #8]
 23ee62c:	441a      	add	r2, r3
 23ee62e:	9200      	str	r2, [sp, #0]
 23ee630:	e6b4      	b.n	23ee39c <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
 23ee632:	9a04      	ldr	r2, [sp, #16]
 23ee634:	9901      	ldr	r1, [sp, #4]
 23ee636:	56d2      	ldrsb	r2, [r2, r3]
        for (col = 1; col < row_size; ++col)
 23ee638:	3301      	adds	r3, #1
            max = MAX(max, input[col]);
 23ee63a:	4291      	cmp	r1, r2
 23ee63c:	bfb8      	it	lt
 23ee63e:	4611      	movlt	r1, r2
 23ee640:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
 23ee642:	e6be      	b.n	23ee3c2 <arm_softmax_s8+0x3a>
 23ee644:	c3c3c3c4 	.word	0xc3c3c3c4
 23ee648:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
 23ee64c:	9a04      	ldr	r2, [sp, #16]
 23ee64e:	f912 000e 	ldrsb.w	r0, [r2, lr]
 23ee652:	9a01      	ldr	r2, [sp, #4]
 23ee654:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
 23ee656:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ee658:	4282      	cmp	r2, r0
 23ee65a:	f300 8151 	bgt.w	23ee900 <arm_softmax_s8+0x578>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 23ee65e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23ee660:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
 23ee662:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
 23ee664:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
 23ee668:	bf0b      	itete	eq
 23ee66a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 23ee66e:	4641      	movne	r1, r8
 23ee670:	2200      	moveq	r2, #0
 23ee672:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee676:	fbc0 120b 	smlal	r1, r2, r0, fp
 23ee67a:	2a00      	cmp	r2, #0
 23ee67c:	4614      	mov	r4, r2
 23ee67e:	da04      	bge.n	23ee68a <arm_softmax_s8+0x302>
 23ee680:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23ee684:	1889      	adds	r1, r1, r2
 23ee686:	f144 0400 	adc.w	r4, r4, #0
 23ee68a:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee68c:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
 23ee68e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee692:	d104      	bne.n	23ee69e <arm_softmax_s8+0x316>
        result = Q31_MAX;
 23ee694:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 23ee698:	bf08      	it	eq
 23ee69a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23ee69e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee6a2:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23ee6a4:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23ee6a8:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23ee6ac:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 23ee6b0:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23ee6b4:	fbcc 140c 	smlal	r1, r4, ip, ip
 23ee6b8:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23ee6ba:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee6be:	da04      	bge.n	23ee6ca <arm_softmax_s8+0x342>
 23ee6c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee6c4:	1809      	adds	r1, r1, r0
 23ee6c6:	f144 0400 	adc.w	r4, r4, #0
 23ee6ca:	0fc9      	lsrs	r1, r1, #31
 23ee6cc:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee6d0:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23ee6d4:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee6d6:	fb01 fa04 	mul.w	sl, r1, r4
 23ee6da:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee6de:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 23ee6e2:	f1b9 0f00 	cmp.w	r9, #0
 23ee6e6:	da05      	bge.n	23ee6f4 <arm_softmax_s8+0x36c>
 23ee6e8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 23ee6ec:	eb10 000a 	adds.w	r0, r0, sl
 23ee6f0:	f149 0900 	adc.w	r9, r9, #0
 23ee6f4:	0fc0      	lsrs	r0, r0, #31
 23ee6f6:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ee6fa:	f000 0903 	and.w	r9, r0, #3
        threshold++;
 23ee6fe:	1080      	asrs	r0, r0, #2
 23ee700:	bf54      	ite	pl
 23ee702:	f04f 0a01 	movpl.w	sl, #1
 23ee706:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 23ee70a:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 23ee70c:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
 23ee710:	bfc8      	it	gt
 23ee712:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23ee714:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
 23ee718:	bf0b      	itete	eq
 23ee71a:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 23ee71e:	46c1      	movne	r9, r8
 23ee720:	f04f 0a00 	moveq.w	sl, #0
 23ee724:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23ee728:	fb0c f404 	mul.w	r4, ip, r4
 23ee72c:	fb01 4406 	mla	r4, r1, r6, r4
 23ee730:	fbac 6701 	umull	r6, r7, ip, r1
 23ee734:	eb16 0609 	adds.w	r6, r6, r9
 23ee738:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
 23ee73a:	eb44 040a 	adc.w	r4, r4, sl
 23ee73e:	2c00      	cmp	r4, #0
 23ee740:	da05      	bge.n	23ee74e <arm_softmax_s8+0x3c6>
 23ee742:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23ee746:	eb16 0609 	adds.w	r6, r6, r9
 23ee74a:	f144 0400 	adc.w	r4, r4, #0
 23ee74e:	0ff6      	lsrs	r6, r6, #31
 23ee750:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee754:	4430      	add	r0, r6
        mult = 1 - mult;
 23ee756:	2800      	cmp	r0, #0
 23ee758:	bfab      	itete	ge
 23ee75a:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23ee75e:	4644      	movlt	r4, r8
 23ee760:	2600      	movge	r6, #0
 23ee762:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee766:	4f68      	ldr	r7, [pc, #416]	; (23ee908 <arm_softmax_s8+0x580>)
 23ee768:	fbc0 4607 	smlal	r4, r6, r0, r7
 23ee76c:	2e00      	cmp	r6, #0
 23ee76e:	da04      	bge.n	23ee77a <arm_softmax_s8+0x3f2>
 23ee770:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee774:	1824      	adds	r4, r4, r0
 23ee776:	f146 0600 	adc.w	r6, r6, #0
 23ee77a:	0fe4      	lsrs	r4, r4, #31
 23ee77c:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee780:	440c      	add	r4, r1
    if (result < 0)
 23ee782:	1061      	asrs	r1, r4, #1
 23ee784:	d402      	bmi.n	23ee78c <arm_softmax_s8+0x404>
    if (remainder > threshold)
 23ee786:	07e6      	lsls	r6, r4, #31
        result++;
 23ee788:	bf48      	it	mi
 23ee78a:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23ee78c:	448c      	add	ip, r1
        mult = 1 - mult;
 23ee78e:	f1bc 0f00 	cmp.w	ip, #0
 23ee792:	bfab      	itete	ge
 23ee794:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23ee798:	4644      	movlt	r4, r8
 23ee79a:	2100      	movge	r1, #0
 23ee79c:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee7a0:	485a      	ldr	r0, [pc, #360]	; (23ee90c <arm_softmax_s8+0x584>)
 23ee7a2:	fbcc 4100 	smlal	r4, r1, ip, r0
 23ee7a6:	2900      	cmp	r1, #0
 23ee7a8:	da04      	bge.n	23ee7b4 <arm_softmax_s8+0x42c>
 23ee7aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee7ae:	1824      	adds	r4, r4, r0
 23ee7b0:	f141 0100 	adc.w	r1, r1, #0
 23ee7b4:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee7b6:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23ee7b8:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee7bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23ee7c0:	4682      	mov	sl, r0
 23ee7c2:	468c      	mov	ip, r1
    int32_t result = 1895147668 +
 23ee7c4:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23ee7c8:	4f51      	ldr	r7, [pc, #324]	; (23ee910 <arm_softmax_s8+0x588>)
    int32_t result = 1895147668 +
 23ee7ca:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23ee7ce:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23ee7d2:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 23ee7d6:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee7da:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23ee7de:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23ee7e2:	f345 6900 	sbfx	r9, r5, #24, #1
 23ee7e6:	3e01      	subs	r6, #1
 23ee7e8:	ea09 090c 	and.w	r9, r9, ip
 23ee7ec:	4034      	ands	r4, r6
    mult = mult + (q63_t)m1 * m2;
 23ee7ee:	468c      	mov	ip, r1
 23ee7f0:	4606      	mov	r6, r0
 23ee7f2:	4f48      	ldr	r7, [pc, #288]	; (23ee914 <arm_softmax_s8+0x58c>)
    SELECT_IF_NON_ZERO(1672461947)
 23ee7f4:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23ee7f8:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 23ee7fc:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee800:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
 23ee804:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee808:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23ee80c:	ea0a 0a04 	and.w	sl, sl, r4
    mult = mult + (q63_t)m1 * m2;
 23ee810:	460e      	mov	r6, r1
 23ee812:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23ee814:	f345 6940 	sbfx	r9, r5, #25, #1
 23ee818:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
 23ee81c:	4f3e      	ldr	r7, [pc, #248]	; (23ee918 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1302514674)
 23ee81e:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
 23ee822:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
 23ee826:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee82a:	0ff6      	lsrs	r6, r6, #31
 23ee82c:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23ee830:	f345 6c80 	sbfx	ip, r5, #26, #1
 23ee834:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23ee838:	ea0a 0a09 	and.w	sl, sl, r9
 23ee83c:	ea0c 0c06 	and.w	ip, ip, r6
 23ee840:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
 23ee844:	460c      	mov	r4, r1
 23ee846:	4682      	mov	sl, r0
 23ee848:	4e34      	ldr	r6, [pc, #208]	; (23ee91c <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(290630308)
 23ee84a:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23ee84e:	fbcc 4a06 	smlal	r4, sl, ip, r6
    result = (int32_t)(mult / (1ll << 31));
 23ee852:	0fe4      	lsrs	r4, r4, #31
 23ee854:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23ee858:	f345 66c0 	sbfx	r6, r5, #27, #1
 23ee85c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23ee860:	ea09 090c 	and.w	r9, r9, ip
 23ee864:	4026      	ands	r6, r4
 23ee866:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23ee86a:	4682      	mov	sl, r0
 23ee86c:	4689      	mov	r9, r1
 23ee86e:	4c2c      	ldr	r4, [pc, #176]	; (23ee920 <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(39332535)
 23ee870:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23ee874:	fbc6 9a04 	smlal	r9, sl, r6, r4
    result = (int32_t)(mult / (1ll << 31));
 23ee878:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 23ee87c:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23ee880:	f345 7400 	sbfx	r4, r5, #28, #1
 23ee884:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 23ee888:	ea0c 0c06 	and.w	ip, ip, r6
 23ee88c:	ea04 0409 	and.w	r4, r4, r9
 23ee890:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 23ee894:	4682      	mov	sl, r0
 23ee896:	468c      	mov	ip, r1
 23ee898:	f8df 9088 	ldr.w	r9, [pc, #136]	; 23ee924 <arm_softmax_s8+0x59c>
    SELECT_IF_NON_ZERO(720401)
 23ee89c:	f3c5 7640 	ubfx	r6, r5, #29, #1
 23ee8a0:	3e01      	subs	r6, #1
    mult = mult + (q63_t)m1 * m2;
 23ee8a2:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
 23ee8a6:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
 23ee8a8:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23ee8aa:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23ee8ae:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23ee8b2:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23ee8b6:	f345 7940 	sbfx	r9, r5, #29, #1
 23ee8ba:	ea09 0c0c 	and.w	ip, r9, ip
 23ee8be:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
 23ee8c2:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
 23ee8c6:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23ee8ca:	0fc9      	lsrs	r1, r1, #31
 23ee8cc:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23ee8d0:	f345 7580 	sbfx	r5, r5, #30, #1
 23ee8d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23ee8d8:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
 23ee8dc:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23ee8de:	4029      	ands	r1, r5
 23ee8e0:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23ee8e4:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
 23ee8e6:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23ee8e8:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
 23ee8ec:	4001      	ands	r1, r0
 23ee8ee:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
 23ee8f2:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
 23ee8f6:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
 23ee8fa:	bf18      	it	ne
 23ee8fc:	3201      	addne	r2, #1
 23ee8fe:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
 23ee900:	f10e 0e01 	add.w	lr, lr, #1
 23ee904:	e565      	b.n	23ee3d2 <arm_softmax_s8+0x4a>
 23ee906:	bf00      	nop
 23ee908:	2aaaaaab 	.word	0x2aaaaaab
 23ee90c:	70f5a894 	.word	0x70f5a894
 23ee910:	63afbe7b 	.word	0x63afbe7b
 23ee914:	4da2cbf2 	.word	0x4da2cbf2
 23ee918:	2f16ac6c 	.word	0x2f16ac6c
 23ee91c:	1152aaa4 	.word	0x1152aaa4
 23ee920:	02582ab7 	.word	0x02582ab7
 23ee924:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
 23ee928:	9b04      	ldr	r3, [sp, #16]
 23ee92a:	f913 100c 	ldrsb.w	r1, [r3, ip]
 23ee92e:	9b01      	ldr	r3, [sp, #4]
 23ee930:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
 23ee932:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23ee934:	4299      	cmp	r1, r3
 23ee936:	f2c0 816a 	blt.w	23eec0e <arm_softmax_s8+0x886>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 23ee93a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ee93c:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
 23ee93e:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
 23ee940:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
 23ee944:	bf0b      	itete	eq
 23ee946:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 23ee94a:	4673      	movne	r3, lr
 23ee94c:	2200      	moveq	r2, #0
 23ee94e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ee952:	fbc1 320b 	smlal	r3, r2, r1, fp
 23ee956:	2a00      	cmp	r2, #0
 23ee958:	4610      	mov	r0, r2
 23ee95a:	da04      	bge.n	23ee966 <arm_softmax_s8+0x5de>
 23ee95c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23ee960:	189b      	adds	r3, r3, r2
 23ee962:	f140 0000 	adc.w	r0, r0, #0
 23ee966:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee968:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
 23ee96a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23ee96e:	d104      	bne.n	23ee97a <arm_softmax_s8+0x5f2>
        result = Q31_MAX;
 23ee970:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 23ee974:	bf08      	it	eq
 23ee976:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23ee97a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee97e:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23ee980:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23ee984:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23ee986:	0176      	lsls	r6, r6, #5
 23ee988:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23ee98c:	fbc6 1406 	smlal	r1, r4, r6, r6
 23ee990:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23ee992:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23ee996:	da04      	bge.n	23ee9a2 <arm_softmax_s8+0x61a>
 23ee998:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23ee99c:	1809      	adds	r1, r1, r0
 23ee99e:	f144 0400 	adc.w	r4, r4, #0
 23ee9a2:	0fc9      	lsrs	r1, r1, #31
 23ee9a4:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23ee9a8:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23ee9ac:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23ee9ae:	fb01 f904 	mul.w	r9, r1, r4
 23ee9b2:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23ee9b6:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
 23ee9ba:	f1b8 0f00 	cmp.w	r8, #0
 23ee9be:	da05      	bge.n	23ee9cc <arm_softmax_s8+0x644>
 23ee9c0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23ee9c4:	eb10 0009 	adds.w	r0, r0, r9
 23ee9c8:	f148 0800 	adc.w	r8, r8, #0
 23ee9cc:	0fc0      	lsrs	r0, r0, #31
 23ee9ce:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ee9d2:	f000 0803 	and.w	r8, r0, #3
        threshold++;
 23ee9d6:	1080      	asrs	r0, r0, #2
 23ee9d8:	bf54      	ite	pl
 23ee9da:	f04f 0901 	movpl.w	r9, #1
 23ee9de:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
 23ee9e2:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
 23ee9e4:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
 23ee9e8:	bfc8      	it	gt
 23ee9ea:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23ee9ec:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
 23ee9f0:	bf0b      	itete	eq
 23ee9f2:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
 23ee9f6:	46f0      	movne	r8, lr
 23ee9f8:	f04f 0900 	moveq.w	r9, #0
 23ee9fc:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23eea00:	4374      	muls	r4, r6
 23eea02:	fb01 4405 	mla	r4, r1, r5, r4
 23eea06:	fba6 5701 	umull	r5, r7, r6, r1
 23eea0a:	eb15 0508 	adds.w	r5, r5, r8
 23eea0e:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
 23eea10:	eb44 0409 	adc.w	r4, r4, r9
 23eea14:	2c00      	cmp	r4, #0
 23eea16:	da05      	bge.n	23eea24 <arm_softmax_s8+0x69c>
 23eea18:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 23eea1c:	eb15 0508 	adds.w	r5, r5, r8
 23eea20:	f144 0400 	adc.w	r4, r4, #0
 23eea24:	0fed      	lsrs	r5, r5, #31
 23eea26:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eea2a:	4428      	add	r0, r5
        mult = 1 - mult;
 23eea2c:	2800      	cmp	r0, #0
 23eea2e:	bfab      	itete	ge
 23eea30:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23eea34:	4674      	movlt	r4, lr
 23eea36:	2500      	movge	r5, #0
 23eea38:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eea3c:	4f75      	ldr	r7, [pc, #468]	; (23eec14 <arm_softmax_s8+0x88c>)
 23eea3e:	fbc0 4507 	smlal	r4, r5, r0, r7
 23eea42:	2d00      	cmp	r5, #0
 23eea44:	da04      	bge.n	23eea50 <arm_softmax_s8+0x6c8>
 23eea46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eea4a:	1824      	adds	r4, r4, r0
 23eea4c:	f145 0500 	adc.w	r5, r5, #0
 23eea50:	0fe4      	lsrs	r4, r4, #31
 23eea52:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eea56:	440c      	add	r4, r1
    if (result < 0)
 23eea58:	1061      	asrs	r1, r4, #1
 23eea5a:	d402      	bmi.n	23eea62 <arm_softmax_s8+0x6da>
    if (remainder > threshold)
 23eea5c:	07e0      	lsls	r0, r4, #31
        result++;
 23eea5e:	bf48      	it	mi
 23eea60:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eea62:	440e      	add	r6, r1
        mult = 1 - mult;
 23eea64:	2e00      	cmp	r6, #0
 23eea66:	bfab      	itete	ge
 23eea68:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23eea6c:	4674      	movlt	r4, lr
 23eea6e:	2100      	movge	r1, #0
 23eea70:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eea74:	4868      	ldr	r0, [pc, #416]	; (23eec18 <arm_softmax_s8+0x890>)
 23eea76:	fbc6 4100 	smlal	r4, r1, r6, r0
 23eea7a:	2900      	cmp	r1, #0
 23eea7c:	da04      	bge.n	23eea88 <arm_softmax_s8+0x700>
 23eea7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eea82:	1824      	adds	r4, r4, r0
 23eea84:	f141 0100 	adc.w	r1, r1, #0
 23eea88:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23eea8a:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23eea8c:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23eea90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23eea94:	4681      	mov	r9, r0
 23eea96:	460e      	mov	r6, r1
    int32_t result = 1895147668 +
 23eea98:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23eea9c:	4f5f      	ldr	r7, [pc, #380]	; (23eec1c <arm_softmax_s8+0x894>)
    int32_t result = 1895147668 +
 23eea9e:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23eeaa2:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23eeaa6:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 23eeaaa:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23eeaae:	0ff6      	lsrs	r6, r6, #31
 23eeab0:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23eeab4:	f343 6800 	sbfx	r8, r3, #24, #1
 23eeab8:	3d01      	subs	r5, #1
 23eeaba:	ea08 0806 	and.w	r8, r8, r6
 23eeabe:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
 23eeac0:	460e      	mov	r6, r1
 23eeac2:	4605      	mov	r5, r0
 23eeac4:	4f56      	ldr	r7, [pc, #344]	; (23eec20 <arm_softmax_s8+0x898>)
    SELECT_IF_NON_ZERO(1672461947)
 23eeac6:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
 23eeaca:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 23eeace:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23eead2:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(1302514674)
 23eead4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eead8:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23eeadc:	ea09 0904 	and.w	r9, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23eeae0:	460d      	mov	r5, r1
 23eeae2:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23eeae4:	f343 6840 	sbfx	r8, r3, #25, #1
 23eeae8:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
 23eeaec:	4e4d      	ldr	r6, [pc, #308]	; (23eec24 <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1302514674)
 23eeaee:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
 23eeaf2:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
 23eeaf6:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23eeafa:	0fed      	lsrs	r5, r5, #31
 23eeafc:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23eeb00:	f343 6680 	sbfx	r6, r3, #26, #1
 23eeb04:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23eeb08:	ea09 0908 	and.w	r9, r9, r8
 23eeb0c:	402e      	ands	r6, r5
 23eeb0e:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23eeb12:	460c      	mov	r4, r1
 23eeb14:	4681      	mov	r9, r0
 23eeb16:	4d44      	ldr	r5, [pc, #272]	; (23eec28 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(290630308)
 23eeb18:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23eeb1c:	fbc6 4905 	smlal	r4, r9, r6, r5
    result = (int32_t)(mult / (1ll << 31));
 23eeb20:	0fe4      	lsrs	r4, r4, #31
 23eeb22:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23eeb26:	f343 65c0 	sbfx	r5, r3, #27, #1
 23eeb2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23eeb2e:	ea08 0806 	and.w	r8, r8, r6
 23eeb32:	4025      	ands	r5, r4
 23eeb34:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
 23eeb38:	4681      	mov	r9, r0
 23eeb3a:	4688      	mov	r8, r1
 23eeb3c:	4c3b      	ldr	r4, [pc, #236]	; (23eec2c <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(39332535)
 23eeb3e:	f3c3 7600 	ubfx	r6, r3, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23eeb42:	fbc5 8904 	smlal	r8, r9, r5, r4
    result = (int32_t)(mult / (1ll << 31));
 23eeb46:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 23eeb4a:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23eeb4e:	f343 7400 	sbfx	r4, r3, #28, #1
 23eeb52:	3e01      	subs	r6, #1
 23eeb54:	402e      	ands	r6, r5
 23eeb56:	ea04 0408 	and.w	r4, r4, r8
 23eeb5a:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 23eeb5c:	4681      	mov	r9, r0
 23eeb5e:	460e      	mov	r6, r1
 23eeb60:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23eec30 <arm_softmax_s8+0x8a8>
    SELECT_IF_NON_ZERO(720401)
 23eeb64:	f3c3 7540 	ubfx	r5, r3, #29, #1
 23eeb68:	3d01      	subs	r5, #1
    mult = mult + (q63_t)m1 * m2;
 23eeb6a:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
 23eeb6e:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
 23eeb70:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23eeb72:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23eeb76:	0ff6      	lsrs	r6, r6, #31
 23eeb78:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23eeb7c:	f343 7840 	sbfx	r8, r3, #29, #1
 23eeb80:	ea08 0606 	and.w	r6, r8, r6
 23eeb84:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
 23eeb86:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
 23eeb8a:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23eeb8e:	0fc9      	lsrs	r1, r1, #31
 23eeb90:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23eeb94:	f343 7380 	sbfx	r3, r3, #30, #1
 23eeb98:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23eeb9c:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
 23eeb9e:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23eeba0:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23eeba4:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
 23eeba6:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
 23eebaa:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23eebac:	4001      	ands	r1, r0
 23eebae:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
 23eebb2:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
 23eebb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 23eebb6:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 23eebba:	fbc1 3200 	smlal	r3, r2, r1, r0
 23eebbe:	2a00      	cmp	r2, #0
 23eebc0:	4614      	mov	r4, r2
 23eebc2:	da04      	bge.n	23eebce <arm_softmax_s8+0x846>
 23eebc4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23eebc8:	189b      	adds	r3, r3, r2
 23eebca:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
 23eebce:	9a05      	ldr	r2, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
 23eebd0:	0fdb      	lsrs	r3, r3, #31
 23eebd2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23eebd6:	9806      	ldr	r0, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23eebd8:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
 23eebda:	fa53 f30a 	asrs.w	r3, r3, sl
 23eebde:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eebe0:	bf58      	it	pl
 23eebe2:	4601      	movpl	r1, r0
    if (remainder > threshold)
 23eebe4:	428a      	cmp	r2, r1
        result++;
 23eebe6:	bfc8      	it	gt
 23eebe8:	3301      	addgt	r3, #1
                const int32_t res =
 23eebea:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 23eebec:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 23eebf0:	db08      	blt.n	23eec04 <arm_softmax_s8+0x87c>
 23eebf2:	2b7e      	cmp	r3, #126	; 0x7e
 23eebf4:	dc09      	bgt.n	23eec0a <arm_softmax_s8+0x882>
 23eebf6:	b25b      	sxtb	r3, r3
                output[col] = -128;
 23eebf8:	9a07      	ldr	r2, [sp, #28]
 23eebfa:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
 23eebfe:	f10c 0c01 	add.w	ip, ip, #1
 23eec02:	e50a      	b.n	23ee61a <arm_softmax_s8+0x292>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 23eec04:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 23eec08:	e7f6      	b.n	23eebf8 <arm_softmax_s8+0x870>
 23eec0a:	237f      	movs	r3, #127	; 0x7f
 23eec0c:	e7f4      	b.n	23eebf8 <arm_softmax_s8+0x870>
                output[col] = -128;
 23eec0e:	2380      	movs	r3, #128	; 0x80
 23eec10:	e7f2      	b.n	23eebf8 <arm_softmax_s8+0x870>
 23eec12:	bf00      	nop
 23eec14:	2aaaaaab 	.word	0x2aaaaaab
 23eec18:	70f5a894 	.word	0x70f5a894
 23eec1c:	63afbe7b 	.word	0x63afbe7b
 23eec20:	4da2cbf2 	.word	0x4da2cbf2
 23eec24:	2f16ac6c 	.word	0x2f16ac6c
 23eec28:	1152aaa4 	.word	0x1152aaa4
 23eec2c:	02582ab7 	.word	0x02582ab7
 23eec30:	000afe11 	.word	0x000afe11

023eec34 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 23eec34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23eec38:	460c      	mov	r4, r1
 23eec3a:	4616      	mov	r6, r2
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 23eec3c:	681d      	ldr	r5, [r3, #0]
{
 23eec3e:	b08a      	sub	sp, #40	; 0x28
 23eec40:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 23eec44:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c

    while (batch_cnt)
 23eec48:	b91d      	cbnz	r5, 23eec52 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 23eec4a:	4628      	mov	r0, r5
 23eec4c:	b00a      	add	sp, #40	; 0x28
 23eec4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 23eec52:	6923      	ldr	r3, [r4, #16]
 23eec54:	4638      	mov	r0, r7
 23eec56:	9308      	str	r3, [sp, #32]
 23eec58:	68e3      	ldr	r3, [r4, #12]
 23eec5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23eec5c:	9307      	str	r3, [sp, #28]
 23eec5e:	f8da 300c 	ldr.w	r3, [sl, #12]
 23eec62:	9914      	ldr	r1, [sp, #80]	; 0x50
 23eec64:	9306      	str	r3, [sp, #24]
 23eec66:	f8d9 3000 	ldr.w	r3, [r9]
        batch_cnt--;
 23eec6a:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s8(input,
 23eec6c:	9305      	str	r3, [sp, #20]
 23eec6e:	6873      	ldr	r3, [r6, #4]
 23eec70:	9304      	str	r3, [sp, #16]
 23eec72:	6833      	ldr	r3, [r6, #0]
 23eec74:	9303      	str	r3, [sp, #12]
 23eec76:	68a3      	ldr	r3, [r4, #8]
 23eec78:	9302      	str	r3, [sp, #8]
 23eec7a:	6863      	ldr	r3, [r4, #4]
 23eec7c:	9301      	str	r3, [sp, #4]
 23eec7e:	6823      	ldr	r3, [r4, #0]
 23eec80:	9300      	str	r3, [sp, #0]
 23eec82:	4643      	mov	r3, r8
 23eec84:	f7ff f931 	bl	23edeea <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 23eec88:	f8d9 3000 	ldr.w	r3, [r9]
 23eec8c:	441f      	add	r7, r3
        output += output_dims->c;
 23eec8e:	f8da 300c 	ldr.w	r3, [sl, #12]
 23eec92:	4498      	add	r8, r3
        batch_cnt--;
 23eec94:	e7d8      	b.n	23eec48 <arm_fully_connected_s8+0x14>

023eec96 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 23eec96:	2000      	movs	r0, #0
 23eec98:	4770      	bx	lr

023eec9a <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 23eec9a:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 23eec9c:	68d8      	ldr	r0, [r3, #12]
{
 23eec9e:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 23eeca0:	0784      	lsls	r4, r0, #30
 23eeca2:	d128      	bne.n	23eecf6 <arm_convolve_1x1_s8_fast+0x5c>
 23eeca4:	690c      	ldr	r4, [r1, #16]
 23eeca6:	bb34      	cbnz	r4, 23eecf6 <arm_convolve_1x1_s8_fast+0x5c>
 23eeca8:	694c      	ldr	r4, [r1, #20]
 23eecaa:	bb24      	cbnz	r4, 23eecf6 <arm_convolve_1x1_s8_fast+0x5c>
 23eecac:	688d      	ldr	r5, [r1, #8]
 23eecae:	2d01      	cmp	r5, #1
 23eecb0:	d121      	bne.n	23eecf6 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 23eecb2:	68cd      	ldr	r5, [r1, #12]
 23eecb4:	2d01      	cmp	r5, #1
 23eecb6:	d11e      	bne.n	23eecf6 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 23eecb8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 23eecba:	9508      	str	r5, [sp, #32]
 23eecbc:	6a0d      	ldr	r5, [r1, #32]
 23eecbe:	9507      	str	r5, [sp, #28]
 23eecc0:	684d      	ldr	r5, [r1, #4]
 23eecc2:	9506      	str	r5, [sp, #24]
 23eecc4:	6809      	ldr	r1, [r1, #0]
 23eecc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 23eecca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23eeccc:	68c9      	ldr	r1, [r1, #12]
 23eecce:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23eecd0:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 23eecd4:	4341      	muls	r1, r0
 23eecd6:	681b      	ldr	r3, [r3, #0]
    arm_nn_mat_mult_nt_t_s8(input_data,
 23eecd8:	980e      	ldr	r0, [sp, #56]	; 0x38
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23eecda:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
 23eecdc:	9102      	str	r1, [sp, #8]
 23eecde:	6853      	ldr	r3, [r2, #4]
 23eece0:	9910      	ldr	r1, [sp, #64]	; 0x40
 23eece2:	9301      	str	r3, [sp, #4]
 23eece4:	6813      	ldr	r3, [r2, #0]
 23eece6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23eece8:	9300      	str	r3, [sp, #0]
 23eecea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23eecec:	f7fe fd7a 	bl	23ed7e4 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 23eecf0:	4620      	mov	r0, r4
}
 23eecf2:	b00b      	add	sp, #44	; 0x2c
 23eecf4:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
 23eecf6:	f06f 0002 	mvn.w	r0, #2
 23eecfa:	e7fa      	b.n	23eecf2 <arm_convolve_1x1_s8_fast+0x58>

023eecfc <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 23eecfc:	2000      	movs	r0, #0
 23eecfe:	4770      	bx	lr

023eed00 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 23eed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eed04:	468b      	mov	fp, r1
 23eed06:	b097      	sub	sp, #92	; 0x5c
 23eed08:	9303      	str	r3, [sp, #12]
 23eed0a:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 23eed0e:	9207      	str	r2, [sp, #28]
 23eed10:	9304      	str	r3, [sp, #16]
 23eed12:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
 23eed16:	4606      	mov	r6, r0
{
 23eed18:	9305      	str	r3, [sp, #20]
 23eed1a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 23eed1e:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 23eed22:	9301      	str	r3, [sp, #4]
    q7_t *out_1 = out_0 + output_ch;
 23eed24:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23eed26:	900b      	str	r0, [sp, #44]	; 0x2c
    q7_t *out_1 = out_0 + output_ch;
 23eed28:	4413      	add	r3, r2
 23eed2a:	9309      	str	r3, [sp, #36]	; 0x24
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 23eed2c:	9b01      	ldr	r3, [sp, #4]
 23eed2e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23eed32:	9302      	str	r3, [sp, #8]
 23eed34:	9b01      	ldr	r3, [sp, #4]
 23eed36:	f003 0303 	and.w	r3, r3, #3
 23eed3a:	930f      	str	r3, [sp, #60]	; 0x3c
 23eed3c:	9b01      	ldr	r3, [sp, #4]
 23eed3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23eed40:	089b      	lsrs	r3, r3, #2
 23eed42:	009a      	lsls	r2, r3, #2
 23eed44:	9213      	str	r2, [sp, #76]	; 0x4c
 23eed46:	9a01      	ldr	r2, [sp, #4]
 23eed48:	1851      	adds	r1, r2, r1
 23eed4a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23eed4e:	920a      	str	r2, [sp, #40]	; 0x28
 23eed50:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 23eed54:	9206      	str	r2, [sp, #24]
 23eed56:	9a07      	ldr	r2, [sp, #28]
 23eed58:	0852      	lsrs	r2, r2, #1
 23eed5a:	9214      	str	r2, [sp, #80]	; 0x50
 23eed5c:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 23eed60:	920c      	str	r2, [sp, #48]	; 0x30
 23eed62:	9a02      	ldr	r2, [sp, #8]
 23eed64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23eed68:	9308      	str	r3, [sp, #32]
    while (row_count)
 23eed6a:	2201      	movs	r2, #1
 23eed6c:	2300      	movs	r3, #0
 23eed6e:	9914      	ldr	r1, [sp, #80]	; 0x50
 23eed70:	428b      	cmp	r3, r1
 23eed72:	f040 8086 	bne.w	23eee82 <arm_nn_mat_mult_kernel_s8_s16+0x182>
 23eed76:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23eed78:	00dc      	lsls	r4, r3, #3
 23eed7a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 23eed7e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 23eed82:	fb03 2101 	mla	r1, r3, r1, r2
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 23eed86:	9a07      	ldr	r2, [sp, #28]
 23eed88:	ea4f 0843 	mov.w	r8, r3, lsl #1
 23eed8c:	07d2      	lsls	r2, r2, #31
 23eed8e:	d573      	bpl.n	23eee78 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 23eed90:	9a25      	ldr	r2, [sp, #148]	; 0x94
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 23eed92:	460e      	mov	r6, r1
        q31_t ch_0_out_0 = *bias;
 23eed94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;
 23eed98:	4694      	mov	ip, r2
        while (col_count)
 23eed9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23eed9c:	455b      	cmp	r3, fp
 23eed9e:	f040 81b3 	bne.w	23ef108 <arm_nn_mat_mult_kernel_s8_s16+0x408>
 23eeda2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23eeda4:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 23eeda6:	9b01      	ldr	r3, [sp, #4]
 23eeda8:	f003 0303 	and.w	r3, r3, #3
 23eedac:	440b      	add	r3, r1
 23eedae:	428b      	cmp	r3, r1
 23eedb0:	f040 81cc 	bne.w	23ef14c <arm_nn_mat_mult_kernel_s8_s16+0x44c>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eedb4:	2600      	movs	r6, #0
 23eedb6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23eedba:	46b6      	mov	lr, r6

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23eedbc:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_0 += out_offset;
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
 23eedbe:	3001      	adds	r0, #1
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23eedc0:	591f      	ldr	r7, [r3, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eedc2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 23eedc6:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eedc8:	f85a 3004 	ldr.w	r3, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eedcc:	42b7      	cmp	r7, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eedce:	fbc2 1e03 	smlal	r1, lr, r2, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eedd2:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eedd6:	bfd8      	it	le
 23eedd8:	427e      	negle	r6, r7
    result = (int32_t)(mult.long_long >> 31);
 23eedda:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeddc:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
 23eedde:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eede2:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23eede4:	ea0e 0203 	and.w	r2, lr, r3
    if (result < 0)
 23eede8:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
 23eedec:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23eedf0:	bf48      	it	mi
 23eedf2:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23eedf4:	429a      	cmp	r2, r3
        ch_0_out_0 += out_offset;
 23eedf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
 23eedf8:	bfc8      	it	gt
 23eedfa:	f10e 0e01 	addgt.w	lr, lr, #1
 23eedfe:	449e      	add	lr, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 23eee00:	9b04      	ldr	r3, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eee02:	2200      	movs	r2, #0
 23eee04:	459e      	cmp	lr, r3
 23eee06:	bfb8      	it	lt
 23eee08:	469e      	movlt	lr, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 23eee0a:	9b05      	ldr	r3, [sp, #20]
 23eee0c:	4617      	mov	r7, r2
 23eee0e:	459e      	cmp	lr, r3
 23eee10:	bfa8      	it	ge
 23eee12:	469e      	movge	lr, r3
 23eee14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        *out_0++ = (q7_t)ch_0_out_0;
 23eee18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23eee1a:	f803 e008 	strb.w	lr, [r3, r8]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 23eee1e:	9b03      	ldr	r3, [sp, #12]
 23eee20:	591e      	ldr	r6, [r3, r4]
 23eee22:	f85a 4004 	ldr.w	r4, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eee26:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 23eee2a:	fa0c f303 	lsl.w	r3, ip, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eee2e:	fbc3 1704 	smlal	r1, r7, r3, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eee32:	2301      	movs	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eee34:	4296      	cmp	r6, r2
 23eee36:	bfd8      	it	le
 23eee38:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eee3a:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
 23eee3c:	0fc9      	lsrs	r1, r1, #31
 23eee3e:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eee42:	3b01      	subs	r3, #1
    if (result < 0)
 23eee44:	fa51 f202 	asrs.w	r2, r1, r2
    int32_t remainder = remainder_mask & dividend;
 23eee48:	ea01 0403 	and.w	r4, r1, r3
    q31_t threshold = remainder_mask >> 1;
 23eee4c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23eee50:	bf48      	it	mi
 23eee52:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23eee54:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
 23eee56:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
 23eee58:	bfc8      	it	gt
 23eee5a:	3201      	addgt	r2, #1
 23eee5c:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 23eee5e:	9a04      	ldr	r2, [sp, #16]
 23eee60:	429a      	cmp	r2, r3
 23eee62:	bfb8      	it	lt
 23eee64:	461a      	movlt	r2, r3
 23eee66:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 23eee68:	9a05      	ldr	r2, [sp, #20]
 23eee6a:	429a      	cmp	r2, r3
 23eee6c:	bfa8      	it	ge
 23eee6e:	461a      	movge	r2, r3
 23eee70:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 23eee72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23eee74:	f802 3008 	strb.w	r3, [r2, r8]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 23eee78:	9b07      	ldr	r3, [sp, #28]
 23eee7a:	4418      	add	r0, r3
 23eee7c:	b017      	add	sp, #92	; 0x5c
 23eee7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 23eee82:	9901      	ldr	r1, [sp, #4]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 23eee84:	9f02      	ldr	r7, [sp, #8]
 23eee86:	1871      	adds	r1, r6, r1
 23eee88:	910d      	str	r1, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
 23eee8a:	9925      	ldr	r1, [sp, #148]	; 0x94
 23eee8c:	9615      	str	r6, [sp, #84]	; 0x54
 23eee8e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
        q31_t ch_1_out_0 = *bias;
 23eee92:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
        q31_t ch_0_out_1 = *bias++;
 23eee96:	4604      	mov	r4, r0
        q31_t ch_1_out_1 = *bias++;
 23eee98:	46f0      	mov	r8, lr
        const q15_t *ip_b0 = input_b;
 23eee9a:	f8cd b000 	str.w	fp, [sp]
        while (col_count)
 23eee9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 23eeea0:	9d00      	ldr	r5, [sp, #0]
 23eeea2:	42a9      	cmp	r1, r5
 23eeea4:	f040 80d8 	bne.w	23ef058 <arm_nn_mat_mult_kernel_s8_s16+0x358>
 23eeea8:	9906      	ldr	r1, [sp, #24]
 23eeeaa:	9d01      	ldr	r5, [sp, #4]
        while (col_count)
 23eeeac:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23eeeae:	440d      	add	r5, r1
 23eeeb0:	950d      	str	r5, [sp, #52]	; 0x34
 23eeeb2:	9d08      	ldr	r5, [sp, #32]
 23eeeb4:	462f      	mov	r7, r5
 23eeeb6:	460d      	mov	r5, r1
 23eeeb8:	4435      	add	r5, r6
 23eeeba:	9510      	str	r5, [sp, #64]	; 0x40
 23eeebc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23eeebe:	42a9      	cmp	r1, r5
 23eeec0:	f040 8109 	bne.w	23ef0d6 <arm_nn_mat_mult_kernel_s8_s16+0x3d6>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeec4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 23eeec8:	2700      	movs	r7, #0
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23eeeca:	9903      	ldr	r1, [sp, #12]
 23eeecc:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeed0:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
 23eeed4:	4088      	lsls	r0, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeed6:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeeda:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eeedc:	fbc0 5701 	smlal	r5, r7, r0, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeee0:	bfc8      	it	gt
 23eeee2:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeee4:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeee8:	bfd8      	it	le
 23eeeea:	4276      	negle	r6, r6
    result = (int32_t)(mult.long_long >> 31);
 23eeeec:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeeee:	40b1      	lsls	r1, r6
    result = (int32_t)(mult.long_long >> 31);
 23eeef0:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eeef4:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eeef6:	ea07 0001 	and.w	r0, r7, r1
    if (result < 0)
 23eeefa:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
 23eeefc:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eef00:	bf48      	it	mi
 23eef02:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eef04:	4288      	cmp	r0, r1
        ch_0_out_0 += out_offset;
 23eef06:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eef08:	bfc8      	it	gt
 23eef0a:	3701      	addgt	r7, #1
 23eef0c:	440f      	add	r7, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 23eef0e:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eef10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23eef14:	428f      	cmp	r7, r1
 23eef16:	bfb8      	it	lt
 23eef18:	460f      	movlt	r7, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 23eef1a:	9905      	ldr	r1, [sp, #20]
 23eef1c:	2600      	movs	r6, #0
 23eef1e:	428f      	cmp	r7, r1
 23eef20:	bfa8      	it	ge
 23eef22:	460f      	movge	r7, r1
        *out_0++ = (q7_t)ch_0_out_0;
 23eef24:	9926      	ldr	r1, [sp, #152]	; 0x98
 23eef26:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 23eef2a:	9903      	ldr	r1, [sp, #12]
 23eef2c:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eef30:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 23eef34:	408c      	lsls	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eef36:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eef3a:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eef3c:	fbc4 0601 	smlal	r0, r6, r4, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eef40:	bfc8      	it	gt
 23eef42:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eef44:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eef48:	bfd8      	it	le
 23eef4a:	426d      	negle	r5, r5
    result = (int32_t)(mult.long_long >> 31);
 23eef4c:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eef4e:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
 23eef50:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eef54:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eef56:	ea06 0401 	and.w	r4, r6, r1
    if (result < 0)
 23eef5a:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
 23eef5c:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eef60:	bf48      	it	mi
 23eef62:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eef64:	428c      	cmp	r4, r1
        ch_0_out_1 += out_offset;
 23eef66:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eef68:	bfc8      	it	gt
 23eef6a:	3601      	addgt	r6, #1
 23eef6c:	440e      	add	r6, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 23eef6e:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eef70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23eef74:	428e      	cmp	r6, r1
 23eef76:	bfb8      	it	lt
 23eef78:	460e      	movlt	r6, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 23eef7a:	9905      	ldr	r1, [sp, #20]
 23eef7c:	2500      	movs	r5, #0
 23eef7e:	428e      	cmp	r6, r1
 23eef80:	bfa8      	it	ge
 23eef82:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_0_out_1;
 23eef84:	9909      	ldr	r1, [sp, #36]	; 0x24
 23eef86:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 23eef8a:	9903      	ldr	r1, [sp, #12]
 23eef8c:	3301      	adds	r3, #1
 23eef8e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 23eef92:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eef96:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 23eef9a:	2c00      	cmp	r4, #0
 23eef9c:	fa0e fc0c 	lsl.w	ip, lr, ip
 23eefa0:	bfc8      	it	gt
 23eefa2:	2400      	movgt	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eefa4:	fbcc 0501 	smlal	r0, r5, ip, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eefa8:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eefac:	bfd8      	it	le
 23eefae:	4264      	negle	r4, r4
    result = (int32_t)(mult.long_long >> 31);
 23eefb0:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eefb2:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
 23eefb4:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eefb8:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23eefba:	ea05 0601 	and.w	r6, r5, r1
    if (result < 0)
 23eefbe:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
 23eefc0:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eefc4:	bf48      	it	mi
 23eefc6:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23eefc8:	428e      	cmp	r6, r1
        ch_1_out_0 += out_offset;
 23eefca:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23eefcc:	bfc8      	it	gt
 23eefce:	3501      	addgt	r5, #1
 23eefd0:	440d      	add	r5, r1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 23eefd2:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eefd4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 23eefd8:	428d      	cmp	r5, r1
 23eefda:	bfb8      	it	lt
 23eefdc:	460d      	movlt	r5, r1
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 23eefde:	9905      	ldr	r1, [sp, #20]
 23eefe0:	2600      	movs	r6, #0
 23eefe2:	428d      	cmp	r5, r1
 23eefe4:	bfa8      	it	ge
 23eefe6:	460d      	movge	r5, r1
        *out_0++ = (q7_t)ch_1_out_0;
 23eefe8:	9926      	ldr	r1, [sp, #152]	; 0x98
 23eefea:	548d      	strb	r5, [r1, r2]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 23eefec:	9903      	ldr	r1, [sp, #12]
 23eefee:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 23eeff2:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eeff6:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 23eeffa:	2d00      	cmp	r5, #0
 23eeffc:	fa08 f101 	lsl.w	r1, r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef000:	fbc1 4600 	smlal	r4, r6, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ef004:	bfc8      	it	gt
 23ef006:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef008:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ef00c:	bfd8      	it	le
 23ef00e:	426d      	negle	r5, r5
    result = (int32_t)(mult.long_long >> 31);
 23ef010:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef012:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
 23ef014:	ea44 0646 	orr.w	r6, r4, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef018:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23ef01a:	ea06 0001 	and.w	r0, r6, r1
    if (result < 0)
 23ef01e:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
 23ef020:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23ef024:	bf48      	it	mi
 23ef026:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23ef028:	4288      	cmp	r0, r1
        ch_1_out_1 += out_offset;
 23ef02a:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23ef02c:	bfc8      	it	gt
 23ef02e:	3601      	addgt	r6, #1
 23ef030:	440e      	add	r6, r1
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 23ef032:	9904      	ldr	r1, [sp, #16]
 23ef034:	428e      	cmp	r6, r1
 23ef036:	bfb8      	it	lt
 23ef038:	460e      	movlt	r6, r1
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 23ef03a:	9905      	ldr	r1, [sp, #20]
 23ef03c:	428e      	cmp	r6, r1
 23ef03e:	bfa8      	it	ge
 23ef040:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_1_out_1;
 23ef042:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ef044:	548e      	strb	r6, [r1, r2]
        ip_a0 += num_col_a;
 23ef046:	9915      	ldr	r1, [sp, #84]	; 0x54
 23ef048:	980a      	ldr	r0, [sp, #40]	; 0x28
 23ef04a:	3202      	adds	r2, #2
 23ef04c:	4401      	add	r1, r0
 23ef04e:	460e      	mov	r6, r1
        row_count--;
 23ef050:	9906      	ldr	r1, [sp, #24]
 23ef052:	4401      	add	r1, r0
 23ef054:	9106      	str	r1, [sp, #24]
 23ef056:	e68a      	b.n	23eed6e <arm_nn_mat_mult_kernel_s8_s16+0x6e>
    memcpy(&val, *in_q15, 4);
 23ef058:	9900      	ldr	r1, [sp, #0]
 23ef05a:	f856 9b04 	ldr.w	r9, [r6], #4
 23ef05e:	f8d1 c000 	ldr.w	ip, [r1]
 23ef062:	6839      	ldr	r1, [r7, #0]
 23ef064:	910e      	str	r1, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 23ef066:	ea4f 2139 	mov.w	r1, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ef06a:	fa2f f989 	sxtb16	r9, r9
 23ef06e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ef072:	eac1 4529 	pkhtb	r5, r1, r9, asr #16
 23ef076:	9510      	str	r5, [sp, #64]	; 0x40
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ef078:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 23ef07a:	eac9 4901 	pkhbt	r9, r9, r1, lsl #16
    memcpy(&val, *in_q7, 4);
 23ef07e:	f855 1b04 	ldr.w	r1, [r5], #4
 23ef082:	950d      	str	r5, [sp, #52]	; 0x34
  return (op1 >> op2) | (op1 << (32U - op2));
 23ef084:	ea4f 2531 	mov.w	r5, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ef088:	fa2f f585 	sxtb16	r5, r5
 23ef08c:	9511      	str	r5, [sp, #68]	; 0x44
 23ef08e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ef092:	eac5 4521 	pkhtb	r5, r5, r1, asr #16
 23ef096:	9512      	str	r5, [sp, #72]	; 0x48
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ef098:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23ef09a:	eac1 4105 	pkhbt	r1, r1, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ef09e:	fb29 000c 	smlad	r0, r9, ip, r0
 23ef0a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23ef0a4:	fb29 4405 	smlad	r4, r9, r5, r4
 23ef0a8:	fb21 ec0c 	smlad	ip, r1, ip, lr
 23ef0ac:	fb21 8105 	smlad	r1, r1, r5, r8
    memcpy(&val, *in_q15, 4);
 23ef0b0:	9d00      	ldr	r5, [sp, #0]
 23ef0b2:	f8d7 8004 	ldr.w	r8, [r7, #4]
 23ef0b6:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
 23ef0ba:	3508      	adds	r5, #8
 23ef0bc:	9500      	str	r5, [sp, #0]
 23ef0be:	3708      	adds	r7, #8
 23ef0c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23ef0c2:	fb25 0009 	smlad	r0, r5, r9, r0
 23ef0c6:	fb25 4408 	smlad	r4, r5, r8, r4
 23ef0ca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23ef0cc:	fb25 ce09 	smlad	lr, r5, r9, ip
 23ef0d0:	fb25 1808 	smlad	r8, r5, r8, r1
            col_count--;
 23ef0d4:	e6e3      	b.n	23eee9e <arm_nn_mat_mult_kernel_s8_s16+0x19e>
            q15_t b0 = *ip_b0++;
 23ef0d6:	9e00      	ldr	r6, [sp, #0]
            q7_t a0 = *ip_a0++;
 23ef0d8:	f911 9b01 	ldrsb.w	r9, [r1], #1
            q15_t b0 = *ip_b0++;
 23ef0dc:	f936 5b02 	ldrsh.w	r5, [r6], #2
 23ef0e0:	9600      	str	r6, [sp, #0]
 23ef0e2:	462e      	mov	r6, r5
            q7_t a1 = *ip_a1++;
 23ef0e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
            ch_0_out_0 += a0 * b0;
 23ef0e6:	fb16 0009 	smlabb	r0, r6, r9, r0
            q7_t a1 = *ip_a1++;
 23ef0ea:	f915 cb01 	ldrsb.w	ip, [r5], #1
 23ef0ee:	950d      	str	r5, [sp, #52]	; 0x34
            q15_t b1 = *ip_b1++;
 23ef0f0:	f937 5b02 	ldrsh.w	r5, [r7], #2
            ch_1_out_0 += a1 * b0;
 23ef0f4:	fb16 ee0c 	smlabb	lr, r6, ip, lr
            q15_t b1 = *ip_b1++;
 23ef0f8:	950e      	str	r5, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
 23ef0fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23ef0fc:	fb15 4409 	smlabb	r4, r5, r9, r4
            ch_1_out_1 += a1 * b1;
 23ef100:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23ef102:	fb15 880c 	smlabb	r8, r5, ip, r8
            col_count--;
 23ef106:	e6d9      	b.n	23eeebc <arm_nn_mat_mult_kernel_s8_s16+0x1bc>
    memcpy(&val, *in_q7, 4);
 23ef108:	f856 3b04 	ldr.w	r3, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ef10c:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ef110:	fa2f f383 	sxtb16	r3, r3
 23ef114:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ef118:	eace 4723 	pkhtb	r7, lr, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ef11c:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ef120:	f8db e000 	ldr.w	lr, [fp]
 23ef124:	fb23 220e 	smlad	r2, r3, lr, r2
 23ef128:	9d02      	ldr	r5, [sp, #8]
 23ef12a:	f8d5 e000 	ldr.w	lr, [r5]
 23ef12e:	fb23 c30e 	smlad	r3, r3, lr, ip
    memcpy(&val, *in_q15, 4);
 23ef132:	f8d5 c004 	ldr.w	ip, [r5, #4]
 23ef136:	3508      	adds	r5, #8
 23ef138:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
 23ef13c:	9502      	str	r5, [sp, #8]
 23ef13e:	f10b 0b08 	add.w	fp, fp, #8
 23ef142:	fb27 220e 	smlad	r2, r7, lr, r2
 23ef146:	fb27 3c0c 	smlad	ip, r7, ip, r3
            col_count--;
 23ef14a:	e626      	b.n	23eed9a <arm_nn_mat_mult_kernel_s8_s16+0x9a>
            q7_t a0 = *ip_a0++;
 23ef14c:	f911 6b01 	ldrsb.w	r6, [r1], #1
            ch_0_out_0 += a0 * b0;
 23ef150:	f83b 7b02 	ldrh.w	r7, [fp], #2
            ch_0_out_1 += a0 * b1;
 23ef154:	9d08      	ldr	r5, [sp, #32]
            ch_0_out_0 += a0 * b0;
 23ef156:	fb17 2206 	smlabb	r2, r7, r6, r2
            ch_0_out_1 += a0 * b1;
 23ef15a:	f835 7b02 	ldrh.w	r7, [r5], #2
 23ef15e:	fb17 cc06 	smlabb	ip, r7, r6, ip
 23ef162:	9508      	str	r5, [sp, #32]
 23ef164:	e623      	b.n	23eedae <arm_nn_mat_mult_kernel_s8_s16+0xae>

023ef166 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 23ef166:	b410      	push	{r4}
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
 23ef168:	9c06      	ldr	r4, [sp, #24]
 23ef16a:	68a4      	ldr	r4, [r4, #8]
 23ef16c:	07a4      	lsls	r4, r4, #30
 23ef16e:	d103      	bne.n	23ef178 <arm_convolve_1_x_n_s8+0x12>
#endif

out:
    /* Return to application */
    return status;
}
 23ef170:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = arm_convolve_s8(ctx,
 23ef174:	f000 b89a 	b.w	23ef2ac <arm_convolve_s8>
}
 23ef178:	f06f 0002 	mvn.w	r0, #2
 23ef17c:	f85d 4b04 	ldr.w	r4, [sp], #4
 23ef180:	4770      	bx	lr

023ef182 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 23ef182:	688b      	ldr	r3, [r1, #8]
 23ef184:	68c0      	ldr	r0, [r0, #12]
 23ef186:	4358      	muls	r0, r3
 23ef188:	684b      	ldr	r3, [r1, #4]
 23ef18a:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 23ef18c:	0080      	lsls	r0, r0, #2
 23ef18e:	4770      	bx	lr

023ef190 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 23ef190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef194:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 23ef196:	4684      	mov	ip, r0
 23ef198:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
 23ef19c:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	; 0x44
 23ef1a0:	9600      	str	r6, [sp, #0]
 23ef1a2:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 23ef1a6:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23ef1a8:	690f      	ldr	r7, [r1, #16]
{
 23ef1aa:	460c      	mov	r4, r1
 23ef1ac:	4696      	mov	lr, r2
 23ef1ae:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23ef1b0:	b9af      	cbnz	r7, 23ef1de <arm_convolve_wrapper_s8+0x4e>
 23ef1b2:	694f      	ldr	r7, [r1, #20]
 23ef1b4:	b99f      	cbnz	r7, 23ef1de <arm_convolve_wrapper_s8+0x4e>
 23ef1b6:	68df      	ldr	r7, [r3, #12]
 23ef1b8:	07bf      	lsls	r7, r7, #30
 23ef1ba:	d110      	bne.n	23ef1de <arm_convolve_wrapper_s8+0x4e>
 23ef1bc:	688f      	ldr	r7, [r1, #8]
 23ef1be:	2f01      	cmp	r7, #1
 23ef1c0:	d10d      	bne.n	23ef1de <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 23ef1c2:	68cf      	ldr	r7, [r1, #12]
 23ef1c4:	2f01      	cmp	r7, #1
 23ef1c6:	d10a      	bne.n	23ef1de <arm_convolve_wrapper_s8+0x4e>
 23ef1c8:	68b7      	ldr	r7, [r6, #8]
 23ef1ca:	2f01      	cmp	r7, #1
 23ef1cc:	d107      	bne.n	23ef1de <arm_convolve_wrapper_s8+0x4e>
 23ef1ce:	6877      	ldr	r7, [r6, #4]
 23ef1d0:	2f01      	cmp	r7, #1
 23ef1d2:	d104      	bne.n	23ef1de <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 23ef1d4:	b003      	add	sp, #12
 23ef1d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
 23ef1da:	f7ff bd5e 	b.w	23eec9a <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 23ef1de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23ef1e2:	2b01      	cmp	r3, #1
 23ef1e4:	d11e      	bne.n	23ef224 <arm_convolve_wrapper_s8+0x94>
 23ef1e6:	686b      	ldr	r3, [r5, #4]
 23ef1e8:	2b01      	cmp	r3, #1
 23ef1ea:	d11b      	bne.n	23ef224 <arm_convolve_wrapper_s8+0x94>
 23ef1ec:	6873      	ldr	r3, [r6, #4]
 23ef1ee:	2b01      	cmp	r3, #1
 23ef1f0:	d118      	bne.n	23ef224 <arm_convolve_wrapper_s8+0x94>
 23ef1f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23ef1f6:	079b      	lsls	r3, r3, #30
 23ef1f8:	d114      	bne.n	23ef224 <arm_convolve_wrapper_s8+0x94>
 23ef1fa:	682b      	ldr	r3, [r5, #0]
 23ef1fc:	2b01      	cmp	r3, #1
 23ef1fe:	d111      	bne.n	23ef224 <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
 23ef200:	9b01      	ldr	r3, [sp, #4]
 23ef202:	4672      	mov	r2, lr
 23ef204:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 23ef208:	9b00      	ldr	r3, [sp, #0]
 23ef20a:	4621      	mov	r1, r4
 23ef20c:	930c      	str	r3, [sp, #48]	; 0x30
 23ef20e:	4660      	mov	r0, ip
 23ef210:	462b      	mov	r3, r5
 23ef212:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
 23ef216:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 23ef21a:	b003      	add	sp, #12
 23ef21c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
 23ef220:	f7ff bfa1 	b.w	23ef166 <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
 23ef224:	9b01      	ldr	r3, [sp, #4]
 23ef226:	4672      	mov	r2, lr
 23ef228:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 23ef22c:	9b00      	ldr	r3, [sp, #0]
 23ef22e:	4621      	mov	r1, r4
 23ef230:	930c      	str	r3, [sp, #48]	; 0x30
 23ef232:	4660      	mov	r0, ip
 23ef234:	462b      	mov	r3, r5
 23ef236:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
 23ef23a:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 23ef23e:	b003      	add	sp, #12
 23ef240:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
 23ef244:	f000 b832 	b.w	23ef2ac <arm_convolve_s8>

023ef248 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 23ef248:	b410      	push	{r4}
 23ef24a:	4604      	mov	r4, r0
 23ef24c:	4608      	mov	r0, r1
 23ef24e:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23ef250:	6922      	ldr	r2, [r4, #16]
 23ef252:	b9a2      	cbnz	r2, 23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ef254:	6962      	ldr	r2, [r4, #20]
 23ef256:	b992      	cbnz	r2, 23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ef258:	68c2      	ldr	r2, [r0, #12]
 23ef25a:	0792      	lsls	r2, r2, #30
 23ef25c:	d10f      	bne.n	23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ef25e:	68a2      	ldr	r2, [r4, #8]
 23ef260:	2a01      	cmp	r2, #1
 23ef262:	d10c      	bne.n	23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 23ef264:	68e2      	ldr	r2, [r4, #12]
 23ef266:	2a01      	cmp	r2, #1
 23ef268:	d109      	bne.n	23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ef26a:	688a      	ldr	r2, [r1, #8]
 23ef26c:	2a01      	cmp	r2, #1
 23ef26e:	d106      	bne.n	23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ef270:	684a      	ldr	r2, [r1, #4]
 23ef272:	2a01      	cmp	r2, #1
 23ef274:	d103      	bne.n	23ef27e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
 23ef276:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 23ef27a:	f7ff bd3f 	b.w	23eecfc <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 23ef27e:	685a      	ldr	r2, [r3, #4]
 23ef280:	2a01      	cmp	r2, #1
 23ef282:	d10f      	bne.n	23ef2a4 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ef284:	6842      	ldr	r2, [r0, #4]
 23ef286:	2a01      	cmp	r2, #1
 23ef288:	d10c      	bne.n	23ef2a4 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ef28a:	684a      	ldr	r2, [r1, #4]
 23ef28c:	2a01      	cmp	r2, #1
 23ef28e:	d109      	bne.n	23ef2a4 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ef290:	689b      	ldr	r3, [r3, #8]
 23ef292:	079b      	lsls	r3, r3, #30
 23ef294:	d106      	bne.n	23ef2a4 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ef296:	6803      	ldr	r3, [r0, #0]
 23ef298:	2b01      	cmp	r3, #1
 23ef29a:	d103      	bne.n	23ef2a4 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
 23ef29c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 23ef2a0:	f7ff bf6f 	b.w	23ef182 <arm_convolve_1_x_n_s8_get_buffer_size>
}
 23ef2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 23ef2a8:	f000 b985 	b.w	23ef5b6 <arm_convolve_s8_get_buffer_size>

023ef2ac <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 23ef2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef2b0:	ed2d 8b02 	vpush	{d8}
 23ef2b4:	4694      	mov	ip, r2
 23ef2b6:	b0b1      	sub	sp, #196	; 0xc4
 23ef2b8:	9c41      	ldr	r4, [sp, #260]	; 0x104
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ef2ba:	f8d0 b000 	ldr.w	fp, [r0]
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
 23ef2be:	68e7      	ldr	r7, [r4, #12]
    const uint16_t input_batches = input_dims->n;
 23ef2c0:	6818      	ldr	r0, [r3, #0]
    const uint16_t output_ch = output_dims->c;
 23ef2c2:	b2ba      	uxth	r2, r7
 23ef2c4:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
 23ef2c8:	690a      	ldr	r2, [r1, #16]
{
 23ef2ca:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t pad_x = conv_params->padding.w;
 23ef2cc:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t pad_y = conv_params->padding.h;
 23ef2ce:	694a      	ldr	r2, [r1, #20]
    const uint16_t input_ch = input_dims->c;
 23ef2d0:	68dd      	ldr	r5, [r3, #12]
    const uint16_t pad_y = conv_params->padding.h;
 23ef2d2:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_x = conv_params->stride.w;
 23ef2d4:	688a      	ldr	r2, [r1, #8]
    const uint16_t input_batches = input_dims->n;
 23ef2d6:	901f      	str	r0, [sp, #124]	; 0x7c
    const uint16_t stride_x = conv_params->stride.w;
 23ef2d8:	9222      	str	r2, [sp, #136]	; 0x88
    const uint16_t stride_y = conv_params->stride.h;
 23ef2da:	68ca      	ldr	r2, [r1, #12]
    const uint16_t kernel_y = filter_dims->h;
 23ef2dc:	e9d6 6001 	ldrd	r6, r0, [r6, #4]
    const uint16_t stride_y = conv_params->stride.h;
 23ef2e0:	9223      	str	r2, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
 23ef2e2:	684a      	ldr	r2, [r1, #4]
 23ef2e4:	fa1f fa85 	uxth.w	sl, r5
 23ef2e8:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_min = conv_params->activation.min;
 23ef2ea:	6a0a      	ldr	r2, [r1, #32]
 23ef2ec:	9215      	str	r2, [sp, #84]	; 0x54
    const int32_t out_activation_max = conv_params->activation.max;
 23ef2ee:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 23ef2f0:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_mult = quant_params->multiplier;
 23ef2f2:	f8dc 2000 	ldr.w	r2, [ip]
 23ef2f6:	9217      	str	r2, [sp, #92]	; 0x5c
    int32_t *output_shift = quant_params->shift;
 23ef2f8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 23ef2fc:	9218      	str	r2, [sp, #96]	; 0x60

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef2fe:	88a2      	ldrh	r2, [r4, #4]
 23ef300:	9219      	str	r2, [sp, #100]	; 0x64
 23ef302:	891a      	ldrh	r2, [r3, #8]
 23ef304:	920b      	str	r2, [sp, #44]	; 0x2c
 23ef306:	889b      	ldrh	r3, [r3, #4]
 23ef308:	9313      	str	r3, [sp, #76]	; 0x4c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 23ef30a:	4613      	mov	r3, r2
 23ef30c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ef30e:	4353      	muls	r3, r2
 23ef310:	fb0a f303 	mul.w	r3, sl, r3
 23ef314:	9329      	str	r3, [sp, #164]	; 0xa4
 23ef316:	8923      	ldrh	r3, [r4, #8]
 23ef318:	931a      	str	r3, [sp, #104]	; 0x68
 23ef31a:	b2bb      	uxth	r3, r7
 23ef31c:	931b      	str	r3, [sp, #108]	; 0x6c
        output_data += (output_x * output_y * output_ch);
 23ef31e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 23ef322:	4353      	muls	r3, r2
 23ef324:	ee18 2a10 	vmov	r2, s16
 23ef328:	4353      	muls	r3, r2
 23ef32a:	9328      	str	r3, [sp, #160]	; 0xa0
 23ef32c:	b2b3      	uxth	r3, r6
 23ef32e:	931c      	str	r3, [sp, #112]	; 0x70
 23ef330:	b283      	uxth	r3, r0
 23ef332:	9312      	str	r3, [sp, #72]	; 0x48
 23ef334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ef336:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 23ef338:	fb10 f006 	smulbb	r0, r0, r6
 23ef33c:	435a      	muls	r2, r3
 23ef33e:	fb10 f505 	smulbb	r5, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 23ef342:	fb02 f30a 	mul.w	r3, r2, sl
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 23ef346:	b2a8      	uxth	r0, r5
 23ef348:	9026      	str	r0, [sp, #152]	; 0x98
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 23ef34a:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 23ef34e:	9024      	str	r0, [sp, #144]	; 0x90
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 23ef350:	ea4f 004a 	mov.w	r0, sl, lsl #1
 23ef354:	9009      	str	r0, [sp, #36]	; 0x24
 23ef356:	f3c3 038f 	ubfx	r3, r3, #2, #16
 23ef35a:	f005 0003 	and.w	r0, r5, #3
 23ef35e:	901e      	str	r0, [sp, #120]	; 0x78
 23ef360:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23ef364:	901d      	str	r0, [sp, #116]	; 0x74
 23ef366:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23ef368:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23ef36c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 23ef370:	932d      	str	r3, [sp, #180]	; 0xb4
 23ef372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ef374:	902a      	str	r0, [sp, #168]	; 0xa8
 23ef376:	fb0a f303 	mul.w	r3, sl, r3
 23ef37a:	9327      	str	r3, [sp, #156]	; 0x9c
 23ef37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ef37e:	4353      	muls	r3, r2
 23ef380:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ef382:	932b      	str	r3, [sp, #172]	; 0xac
 23ef384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ef386:	4353      	muls	r3, r2
 23ef388:	932c      	str	r3, [sp, #176]	; 0xb0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef38a:	2300      	movs	r3, #0
 23ef38c:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 23ef38e:	f9b1 3000 	ldrsh.w	r3, [r1]
 23ef392:	ee08 3a90 	vmov	s17, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef396:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 23ef39a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23ef39c:	429a      	cmp	r2, r3
 23ef39e:	f2c0 8086 	blt.w	23ef4ae <arm_convolve_s8+0x202>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
 23ef3a2:	2000      	movs	r0, #0
 23ef3a4:	b031      	add	sp, #196	; 0xc4
 23ef3a6:	ecbd 8b02 	vpop	{d8}
 23ef3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ef3ae:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 23ef3b2:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 23ef3b6:	fb09 f303 	mul.w	r3, r9, r3
 23ef3ba:	1a9b      	subs	r3, r3, r2
 23ef3bc:	9311      	str	r3, [sp, #68]	; 0x44
 23ef3be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23ef3c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef3c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 23ef3c4:	189c      	adds	r4, r3, r2
 23ef3c6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 23ef3c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23ef3ca:	fb0a 3304 	mla	r3, sl, r4, r3
 23ef3ce:	930c      	str	r3, [sp, #48]	; 0x30
 23ef3d0:	4633      	mov	r3, r6
 23ef3d2:	4413      	add	r3, r2
 23ef3d4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 23ef3d8:	932f      	str	r3, [sp, #188]	; 0xbc
 23ef3da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 23ef3dc:	42b3      	cmp	r3, r6
 23ef3de:	dc5e      	bgt.n	23ef49e <arm_convolve_s8+0x1f2>
 23ef3e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23ef3e2:	4498      	add	r8, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 23ef3e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23ef3e6:	4543      	cmp	r3, r8
 23ef3e8:	d118      	bne.n	23ef41c <arm_convolve_s8+0x170>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 23ef3ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef3ec:	ee18 2a10 	vmov	r2, s16
 23ef3f0:	9306      	str	r3, [sp, #24]
 23ef3f2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 23ef3f4:	4659      	mov	r1, fp
 23ef3f6:	9305      	str	r3, [sp, #20]
 23ef3f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ef3fa:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23ef3fc:	9304      	str	r3, [sp, #16]
 23ef3fe:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ef402:	46d8      	mov	r8, fp
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 23ef404:	9303      	str	r3, [sp, #12]
 23ef406:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 23ef40a:	9302      	str	r3, [sp, #8]
 23ef40c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ef40e:	9301      	str	r3, [sp, #4]
 23ef410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ef412:	9300      	str	r3, [sp, #0]
 23ef414:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ef416:	f7ff fc73 	bl	23eed00 <arm_nn_mat_mult_kernel_s8_s16>
 23ef41a:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 23ef41c:	f109 0901 	add.w	r9, r9, #1
 23ef420:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ef422:	4599      	cmp	r9, r3
 23ef424:	dbc3      	blt.n	23ef3ae <arm_convolve_s8+0x102>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 23ef426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ef428:	3301      	adds	r3, #1
 23ef42a:	930a      	str	r3, [sp, #40]	; 0x28
 23ef42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ef42e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ef430:	4293      	cmp	r3, r2
 23ef432:	da41      	bge.n	23ef4b8 <arm_convolve_s8+0x20c>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ef436:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 23ef43a:	f04f 0900 	mov.w	r9, #0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef43e:	4353      	muls	r3, r2
 23ef440:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 23ef444:	1a9b      	subs	r3, r3, r2
 23ef446:	9310      	str	r3, [sp, #64]	; 0x40
 23ef448:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23ef44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ef44c:	4353      	muls	r3, r2
 23ef44e:	9325      	str	r3, [sp, #148]	; 0x94
 23ef450:	e7e6      	b.n	23ef420 <arm_convolve_s8+0x174>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 23ef452:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23ef454:	42b3      	cmp	r3, r6
 23ef456:	d904      	bls.n	23ef462 <arm_convolve_s8+0x1b6>
 23ef458:	2d00      	cmp	r5, #0
 23ef45a:	db02      	blt.n	23ef462 <arm_convolve_s8+0x1b6>
 23ef45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ef45e:	429d      	cmp	r5, r3
 23ef460:	db15      	blt.n	23ef48e <arm_convolve_s8+0x1e2>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 23ef462:	2100      	movs	r1, #0
 23ef464:	4638      	mov	r0, r7
 23ef466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ef468:	f00c f894 	bl	23fb594 <memset>
                        two_column_buf += input_ch;
 23ef46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                         i_ker_x++)
 23ef46e:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
 23ef470:	441f      	add	r7, r3
                         i_ker_x++)
 23ef472:	4454      	add	r4, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ef474:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23ef476:	42ab      	cmp	r3, r5
 23ef478:	dceb      	bgt.n	23ef452 <arm_convolve_s8+0x1a6>
 23ef47a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ef47c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ef47e:	3601      	adds	r6, #1
 23ef480:	4413      	add	r3, r2
 23ef482:	930e      	str	r3, [sp, #56]	; 0x38
 23ef484:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23ef486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ef488:	4413      	add	r3, r2
 23ef48a:	930c      	str	r3, [sp, #48]	; 0x30
 23ef48c:	e7a5      	b.n	23ef3da <arm_convolve_s8+0x12e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 23ef48e:	ee18 3a90 	vmov	r3, s17
 23ef492:	4652      	mov	r2, sl
 23ef494:	4639      	mov	r1, r7
 23ef496:	4620      	mov	r0, r4
 23ef498:	f7fe ff49 	bl	23ee32e <arm_q7_to_q15_with_offset>
 23ef49c:	e7e6      	b.n	23ef46c <arm_convolve_s8+0x1c0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ef49e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23ef4a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ef4a2:	462b      	mov	r3, r5
 23ef4a4:	4413      	add	r3, r2
 23ef4a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23ef4a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 23ef4aa:	932e      	str	r3, [sp, #184]	; 0xb8
 23ef4ac:	e7e2      	b.n	23ef474 <arm_convolve_s8+0x1c8>
        q7_t *out = output_data;
 23ef4ae:	9b42      	ldr	r3, [sp, #264]	; 0x108
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ef4b0:	46d8      	mov	r8, fp
        q7_t *out = output_data;
 23ef4b2:	930f      	str	r3, [sp, #60]	; 0x3c
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 23ef4b4:	2300      	movs	r3, #0
 23ef4b6:	e7b8      	b.n	23ef42a <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
 23ef4b8:	45d8      	cmp	r8, fp
 23ef4ba:	d173      	bne.n	23ef5a4 <arm_convolve_s8+0x2f8>
        input_data += (input_x * input_y * input_ch);
 23ef4bc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 23ef4be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ef4c0:	4413      	add	r3, r2
 23ef4c2:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
 23ef4c4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ef4c6:	9b42      	ldr	r3, [sp, #264]	; 0x108
 23ef4c8:	4413      	add	r3, r2
 23ef4ca:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ef4cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef4ce:	3301      	adds	r3, #1
 23ef4d0:	930d      	str	r3, [sp, #52]	; 0x34
 23ef4d2:	e760      	b.n	23ef396 <arm_convolve_s8+0xea>
                if (bias_data)
 23ef4d4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 23ef4d6:	2b00      	cmp	r3, #0
 23ef4d8:	d046      	beq.n	23ef568 <arm_convolve_s8+0x2bc>
                    sum = bias_data[i];
 23ef4da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                while (col_count)
 23ef4de:	465c      	mov	r4, fp
 23ef4e0:	462e      	mov	r6, r5
 23ef4e2:	42b0      	cmp	r0, r6
 23ef4e4:	4603      	mov	r3, r0
 23ef4e6:	d141      	bne.n	23ef56c <arm_convolve_s8+0x2c0>
                while (col_count)
 23ef4e8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 23ef4ea:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 23ef4ec:	4406      	add	r6, r0
 23ef4ee:	42b3      	cmp	r3, r6
 23ef4f0:	d151      	bne.n	23ef596 <arm_convolve_s8+0x2ea>
 23ef4f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef4f4:	464c      	mov	r4, r9
 23ef4f6:	441d      	add	r5, r3
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 23ef4f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ef4fa:	46be      	mov	lr, r7
 23ef4fc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ef500:	2e00      	cmp	r6, #0
 23ef502:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 23ef506:	bfc8      	it	gt
 23ef508:	2600      	movgt	r6, #0
 23ef50a:	fa01 f103 	lsl.w	r1, r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef50e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ef510:	bfd8      	it	le
 23ef512:	4276      	negle	r6, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ef518:	fbc1 4e03 	smlal	r4, lr, r1, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef51c:	fa0c f306 	lsl.w	r3, ip, r6
    result = (int32_t)(mult.long_long >> 31);
 23ef520:	0fe4      	lsrs	r4, r4, #31
 23ef522:	ea44 0e4e 	orr.w	lr, r4, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef526:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23ef528:	ea0e 0103 	and.w	r1, lr, r3
    if (result < 0)
 23ef52c:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
 23ef530:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ef534:	bf48      	it	mi
 23ef536:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ef538:	4299      	cmp	r1, r3
                sum += out_offset;
 23ef53a:	9b14      	ldr	r3, [sp, #80]	; 0x50
        result++;
 23ef53c:	bfc8      	it	gt
 23ef53e:	f10e 0e01 	addgt.w	lr, lr, #1
 23ef542:	449e      	add	lr, r3
                sum = MAX(sum, out_activation_min);
 23ef544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ef546:	459e      	cmp	lr, r3
 23ef548:	bfb8      	it	lt
 23ef54a:	469e      	movlt	lr, r3
                sum = MIN(sum, out_activation_max);
 23ef54c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ef54e:	459e      	cmp	lr, r3
 23ef550:	bfa8      	it	ge
 23ef552:	469e      	movge	lr, r3
                *out++ = (q7_t)sum;
 23ef554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef556:	f803 e002 	strb.w	lr, [r3, r2]
            for (i = 0; i < output_ch; i++)
 23ef55a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 23ef55c:	3201      	adds	r2, #1
 23ef55e:	4418      	add	r0, r3
 23ef560:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23ef562:	429a      	cmp	r2, r3
 23ef564:	d1b6      	bne.n	23ef4d4 <arm_convolve_s8+0x228>
 23ef566:	e7a9      	b.n	23ef4bc <arm_convolve_s8+0x210>
                q31_t sum = 0;
 23ef568:	9940      	ldr	r1, [sp, #256]	; 0x100
 23ef56a:	e7b8      	b.n	23ef4de <arm_convolve_s8+0x232>
    memcpy(&val, *in_q7, 4);
 23ef56c:	f856 eb04 	ldr.w	lr, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ef570:	ea4f 233e 	mov.w	r3, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ef574:	fa2f f883 	sxtb16	r8, r3
 23ef578:	fa2f f38e 	sxtb16	r3, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ef57c:	eac8 4e23 	pkhtb	lr, r8, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ef580:	eac3 4308 	pkhbt	r3, r3, r8, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ef584:	f8d4 8000 	ldr.w	r8, [r4]
 23ef588:	fb23 1308 	smlad	r3, r3, r8, r1
    memcpy(&val, *in_q15, 4);
 23ef58c:	6861      	ldr	r1, [r4, #4]
    *in_q15 += 2;
 23ef58e:	3408      	adds	r4, #8
 23ef590:	fb2e 3101 	smlad	r1, lr, r1, r3
                    col_count--;
 23ef594:	e7a5      	b.n	23ef4e2 <arm_convolve_s8+0x236>
                    sum += ker_a1 * ip_b1;
 23ef596:	f913 eb01 	ldrsb.w	lr, [r3], #1
 23ef59a:	f834 8b02 	ldrh.w	r8, [r4], #2
 23ef59e:	fb18 110e 	smlabb	r1, r8, lr, r1
                    col_count--;
 23ef5a2:	e7a4      	b.n	23ef4ee <arm_convolve_s8+0x242>
            for (i = 0; i < output_ch; i++)
 23ef5a4:	2200      	movs	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ef5a6:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 23ef5aa:	4617      	mov	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ef5ac:	f04f 0c01 	mov.w	ip, #1
 23ef5b0:	982a      	ldr	r0, [sp, #168]	; 0xa8
            const q7_t *ker_a = filter_data;
 23ef5b2:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 23ef5b4:	e7d4      	b.n	23ef560 <arm_convolve_s8+0x2b4>

023ef5b6 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 23ef5b6:	688b      	ldr	r3, [r1, #8]
 23ef5b8:	68c0      	ldr	r0, [r0, #12]
 23ef5ba:	4358      	muls	r0, r3
 23ef5bc:	684b      	ldr	r3, [r1, #4]
 23ef5be:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 23ef5c0:	0080      	lsls	r0, r0, #2
 23ef5c2:	4770      	bx	lr

023ef5c4 <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
 23ef5c4:	0088      	lsls	r0, r1, #2
 23ef5c6:	4770      	bx	lr

023ef5c8 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 23ef5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
 23ef5cc:	6894      	ldr	r4, [r2, #8]
{
 23ef5ce:	b0a3      	sub	sp, #140	; 0x8c
 23ef5d0:	931f      	str	r3, [sp, #124]	; 0x7c
    const int32_t input_x = input_dims->w;
 23ef5d2:	9409      	str	r4, [sp, #36]	; 0x24
{
 23ef5d4:	e9dd 302c 	ldrd	r3, r0, [sp, #176]	; 0xb0
    const int32_t output_y = output_dims->h;
 23ef5d8:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
 23ef5da:	6880      	ldr	r0, [r0, #8]
    const int32_t output_y = output_dims->h;
 23ef5dc:	9413      	str	r4, [sp, #76]	; 0x4c
    const int32_t output_x = output_dims->w;
 23ef5de:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_y = pool_params->stride.h;
 23ef5e0:	6848      	ldr	r0, [r1, #4]
    const int32_t kernel_x = filter_dims->w;
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
    const int32_t channel_in = input_dims->c;
 23ef5e2:	68d4      	ldr	r4, [r2, #12]
    const int32_t stride_y = pool_params->stride.h;
 23ef5e4:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t stride_x = pool_params->stride.w;
 23ef5e6:	6808      	ldr	r0, [r1, #0]
    const int32_t act_max = pool_params->activation.max;
 23ef5e8:	e9d1 9a04 	ldrd	r9, sl, [r1, #16]
    const int32_t stride_x = pool_params->stride.w;
 23ef5ec:	900c      	str	r0, [sp, #48]	; 0x30
    const int32_t kernel_y = filter_dims->h;
 23ef5ee:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
 23ef5f0:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
 23ef5f2:	9017      	str	r0, [sp, #92]	; 0x5c
    const int32_t kernel_x = filter_dims->w;
 23ef5f4:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t pad_x = pool_params->padding.w;
 23ef5f6:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 23ef5fa:	9303      	str	r3, [sp, #12]
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ef5fc:	4259      	negs	r1, r3
 23ef5fe:	6853      	ldr	r3, [r2, #4]
 23ef600:	9a03      	ldr	r2, [sp, #12]
 23ef602:	9101      	str	r1, [sp, #4]
 23ef604:	18d3      	adds	r3, r2, r3
 23ef606:	9311      	str	r3, [sp, #68]	; 0x44
 23ef608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    int32_t cnt = length >> 2;
 23ef60a:	10a1      	asrs	r1, r4, #2
 23ef60c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23ef610:	4363      	muls	r3, r4
 23ef612:	931d      	str	r3, [sp, #116]	; 0x74
 23ef614:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ef618:	009b      	lsls	r3, r3, #2
    const int32_t pad_x = pool_params->padding.w;
 23ef61a:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t cnt = length >> 2;
 23ef61c:	911b      	str	r1, [sp, #108]	; 0x6c
 23ef61e:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ef620:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23ef622:	9304      	str	r3, [sp, #16]
 23ef624:	2300      	movs	r3, #0
 23ef626:	9305      	str	r3, [sp, #20]
 23ef628:	9b05      	ldr	r3, [sp, #20]
 23ef62a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ef62c:	4293      	cmp	r3, r2
 23ef62e:	db17      	blt.n	23ef660 <arm_max_pool_s8+0x98>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 23ef630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    while (cnt > 0l)
 23ef632:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 23ef634:	435a      	muls	r2, r3
 23ef636:	4354      	muls	r4, r2
    int32_t cnt = length >> 2;
 23ef638:	10a1      	asrs	r1, r4, #2
 23ef63a:	4608      	mov	r0, r1
    while (cnt > 0l)
 23ef63c:	2800      	cmp	r0, #0
 23ef63e:	f300 80d7 	bgt.w	23ef7f0 <arm_max_pool_s8+0x228>
 23ef642:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 23ef644:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ef648:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cnt = length & 0x3;
 23ef64c:	f004 0403 	and.w	r4, r4, #3
 23ef650:	441c      	add	r4, r3
    while (cnt > 0l)
 23ef652:	42a3      	cmp	r3, r4
 23ef654:	f040 80fb 	bne.w	23ef84e <arm_max_pool_s8+0x286>

    return ARM_MATH_SUCCESS;
}
 23ef658:	2000      	movs	r0, #0
 23ef65a:	b023      	add	sp, #140	; 0x8c
 23ef65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ef660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef662:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23ef664:	425b      	negs	r3, r3
 23ef666:	9302      	str	r3, [sp, #8]
 23ef668:	9b01      	ldr	r3, [sp, #4]
 23ef66a:	9e04      	ldr	r6, [sp, #16]
 23ef66c:	2b00      	cmp	r3, #0
 23ef66e:	9b03      	ldr	r3, [sp, #12]
 23ef670:	bfc8      	it	gt
 23ef672:	2300      	movgt	r3, #0
 23ef674:	9312      	str	r3, [sp, #72]	; 0x48
 23ef676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef678:	930f      	str	r3, [sp, #60]	; 0x3c
 23ef67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ef67c:	4413      	add	r3, r2
 23ef67e:	9310      	str	r3, [sp, #64]	; 0x40
 23ef680:	9a01      	ldr	r2, [sp, #4]
 23ef682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ef684:	4413      	add	r3, r2
 23ef686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ef688:	4353      	muls	r3, r2
 23ef68a:	931e      	str	r3, [sp, #120]	; 0x78
 23ef68c:	2300      	movs	r3, #0
 23ef68e:	9306      	str	r3, [sp, #24]
 23ef690:	9b06      	ldr	r3, [sp, #24]
 23ef692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ef694:	4293      	cmp	r3, r2
 23ef696:	db11      	blt.n	23ef6bc <arm_max_pool_s8+0xf4>
 23ef698:	9b04      	ldr	r3, [sp, #16]
 23ef69a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 23ef69c:	4413      	add	r3, r2
 23ef69e:	9304      	str	r3, [sp, #16]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ef6a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ef6a2:	9b01      	ldr	r3, [sp, #4]
 23ef6a4:	4413      	add	r3, r2
 23ef6a6:	9301      	str	r3, [sp, #4]
 23ef6a8:	9b05      	ldr	r3, [sp, #20]
 23ef6aa:	3301      	adds	r3, #1
 23ef6ac:	9305      	str	r3, [sp, #20]
 23ef6ae:	9b03      	ldr	r3, [sp, #12]
 23ef6b0:	1a9b      	subs	r3, r3, r2
 23ef6b2:	9303      	str	r3, [sp, #12]
 23ef6b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ef6b6:	1a9b      	subs	r3, r3, r2
 23ef6b8:	9311      	str	r3, [sp, #68]	; 0x44
 23ef6ba:	e7b5      	b.n	23ef628 <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 23ef6bc:	9b02      	ldr	r3, [sp, #8]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ef6be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 23ef6c0:	2b00      	cmp	r3, #0
 23ef6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef6c4:	bfc8      	it	gt
 23ef6c6:	2300      	movgt	r3, #0
 23ef6c8:	9316      	str	r3, [sp, #88]	; 0x58
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ef6ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ef6cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 23ef6ce:	4293      	cmp	r3, r2
 23ef6d0:	bfa8      	it	ge
 23ef6d2:	4613      	movge	r3, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 23ef6d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ef6d6:	9319      	str	r3, [sp, #100]	; 0x64
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 23ef6d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ef6da:	4293      	cmp	r3, r2
 23ef6dc:	bfa8      	it	ge
 23ef6de:	4613      	movge	r3, r2
 23ef6e0:	931a      	str	r3, [sp, #104]	; 0x68
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ef6e4:	18f3      	adds	r3, r6, r3
 23ef6e6:	9314      	str	r3, [sp, #80]	; 0x50
 23ef6e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cnt = length & 0x3;
 23ef6ea:	f004 0303 	and.w	r3, r4, #3
 23ef6ee:	18d3      	adds	r3, r2, r3
 23ef6f0:	931c      	str	r3, [sp, #112]	; 0x70
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef6f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23ef6f4:	9a02      	ldr	r2, [sp, #8]
 23ef6f6:	930e      	str	r3, [sp, #56]	; 0x38
 23ef6f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ef6fa:	440a      	add	r2, r1
 23ef6fc:	9307      	str	r3, [sp, #28]
            int count = 0;
 23ef6fe:	2300      	movs	r3, #0
 23ef700:	9221      	str	r2, [sp, #132]	; 0x84
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef702:	9a07      	ldr	r2, [sp, #28]
 23ef704:	9919      	ldr	r1, [sp, #100]	; 0x64
 23ef706:	428a      	cmp	r2, r1
 23ef708:	da63      	bge.n	23ef7d2 <arm_max_pool_s8+0x20a>
 23ef70a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 23ef70c:	990e      	ldr	r1, [sp, #56]	; 0x38
 23ef70e:	1855      	adds	r5, r2, r1
 23ef710:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23ef712:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 23ef716:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23ef718:	9208      	str	r2, [sp, #32]
 23ef71a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23ef71c:	3a01      	subs	r2, #1
 23ef71e:	9220      	str	r2, [sp, #128]	; 0x80
 23ef720:	e00b      	b.n	23ef73a <arm_max_pool_s8+0x172>
                    if (count == 0)
 23ef722:	2b00      	cmp	r3, #0
 23ef724:	d151      	bne.n	23ef7ca <arm_max_pool_s8+0x202>
                        memcpy(dst, start, channel_in);
 23ef726:	4622      	mov	r2, r4
 23ef728:	4629      	mov	r1, r5
 23ef72a:	4630      	mov	r0, r6
 23ef72c:	f00b ff0b 	bl	23fb546 <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 23ef730:	9b08      	ldr	r3, [sp, #32]
 23ef732:	4425      	add	r5, r4
 23ef734:	3301      	adds	r3, #1
 23ef736:	9308      	str	r3, [sp, #32]
 23ef738:	2301      	movs	r3, #1
 23ef73a:	9a08      	ldr	r2, [sp, #32]
 23ef73c:	991a      	ldr	r1, [sp, #104]	; 0x68
 23ef73e:	428a      	cmp	r2, r1
 23ef740:	dbef      	blt.n	23ef722 <arm_max_pool_s8+0x15a>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ef742:	9a07      	ldr	r2, [sp, #28]
 23ef744:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ef746:	3201      	adds	r2, #1
 23ef748:	9207      	str	r2, [sp, #28]
 23ef74a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ef74c:	440a      	add	r2, r1
 23ef74e:	920e      	str	r2, [sp, #56]	; 0x38
 23ef750:	e7d7      	b.n	23ef702 <arm_max_pool_s8+0x13a>
    memcpy(&val, in_q7, 4);
 23ef752:	6803      	ldr	r3, [r0, #0]
    memcpy(&val, *in_q7, 4);
 23ef754:	f85e 2b04 	ldr.w	r2, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
 23ef758:	fa4f fc83 	sxtb.w	ip, r3
 23ef75c:	fa4f fb82 	sxtb.w	fp, r2
 23ef760:	45dc      	cmp	ip, fp
 23ef762:	bfb8      	it	lt
 23ef764:	46dc      	movlt	ip, fp
 23ef766:	f342 2b07 	sbfx	fp, r2, #8, #8
 23ef76a:	f36c 0807 	bfi	r8, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
 23ef76e:	f343 2c07 	sbfx	ip, r3, #8, #8
 23ef772:	45dc      	cmp	ip, fp
 23ef774:	bfb8      	it	lt
 23ef776:	46dc      	movlt	ip, fp
 23ef778:	f342 4b07 	sbfx	fp, r2, #16, #8
 23ef77c:	f36c 280f 	bfi	r8, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
 23ef780:	f343 4c07 	sbfx	ip, r3, #16, #8
 23ef784:	45dc      	cmp	ip, fp
 23ef786:	ea4f 6323 	mov.w	r3, r3, asr #24
 23ef78a:	ea4f 6222 	mov.w	r2, r2, asr #24
 23ef78e:	bfb8      	it	lt
 23ef790:	46dc      	movlt	ip, fp
 23ef792:	4293      	cmp	r3, r2
 23ef794:	bfb8      	it	lt
 23ef796:	4613      	movlt	r3, r2
 23ef798:	f36c 4817 	bfi	r8, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
 23ef79c:	f363 681f 	bfi	r8, r3, #24, #8
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 23ef7a0:	f840 8b04 	str.w	r8, [r0], #4
        cnt--;
 23ef7a4:	3901      	subs	r1, #1
    while (cnt > 0l)
 23ef7a6:	2900      	cmp	r1, #0
 23ef7a8:	dcd3      	bgt.n	23ef752 <arm_max_pool_s8+0x18a>
    while (cnt > 0l)
 23ef7aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23ef7ac:	18ea      	adds	r2, r5, r3
 23ef7ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ef7b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 23ef7b2:	428b      	cmp	r3, r1
 23ef7b4:	d0bc      	beq.n	23ef730 <arm_max_pool_s8+0x168>
        if (*src > *dst)
 23ef7b6:	f993 0000 	ldrsb.w	r0, [r3]
 23ef7ba:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
        dst++;
 23ef7be:	3301      	adds	r3, #1
        if (*src > *dst)
 23ef7c0:	4288      	cmp	r0, r1
            *dst = *src;
 23ef7c2:	bfb8      	it	lt
 23ef7c4:	f803 1c01 	strblt.w	r1, [r3, #-1]
        cnt--;
 23ef7c8:	e7f2      	b.n	23ef7b0 <arm_max_pool_s8+0x1e8>
    const q7_t *src = target;
 23ef7ca:	46ae      	mov	lr, r5
 23ef7cc:	4630      	mov	r0, r6
    int32_t cnt = length >> 2;
 23ef7ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
 23ef7d0:	e7e9      	b.n	23ef7a6 <arm_max_pool_s8+0x1de>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ef7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23ef7d4:	9b02      	ldr	r3, [sp, #8]
            dst += channel_in;
 23ef7d6:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ef7d8:	4413      	add	r3, r2
 23ef7da:	9302      	str	r3, [sp, #8]
 23ef7dc:	9b06      	ldr	r3, [sp, #24]
 23ef7de:	3301      	adds	r3, #1
 23ef7e0:	9306      	str	r3, [sp, #24]
 23ef7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef7e4:	1a9b      	subs	r3, r3, r2
 23ef7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 23ef7e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ef7ea:	1a9b      	subs	r3, r3, r2
 23ef7ec:	9310      	str	r3, [sp, #64]	; 0x40
 23ef7ee:	e74f      	b.n	23ef690 <arm_max_pool_s8+0xc8>
    memcpy(&val, in_q7, 4);
 23ef7f0:	682b      	ldr	r3, [r5, #0]
        cnt--;
 23ef7f2:	3801      	subs	r0, #1
        in.bytes[0] = MAX(in.bytes[0], act_min);
 23ef7f4:	b25a      	sxtb	r2, r3
 23ef7f6:	454a      	cmp	r2, r9
 23ef7f8:	bfb8      	it	lt
 23ef7fa:	464a      	movlt	r2, r9
        in.bytes[0] = MIN(in.bytes[0], act_max);
 23ef7fc:	b252      	sxtb	r2, r2
 23ef7fe:	4552      	cmp	r2, sl
 23ef800:	bfa8      	it	ge
 23ef802:	4652      	movge	r2, sl
 23ef804:	f362 0707 	bfi	r7, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
 23ef808:	f343 2207 	sbfx	r2, r3, #8, #8
 23ef80c:	454a      	cmp	r2, r9
 23ef80e:	bfb8      	it	lt
 23ef810:	464a      	movlt	r2, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
 23ef812:	b252      	sxtb	r2, r2
 23ef814:	4552      	cmp	r2, sl
 23ef816:	bfa8      	it	ge
 23ef818:	4652      	movge	r2, sl
 23ef81a:	f362 270f 	bfi	r7, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
 23ef81e:	f343 4207 	sbfx	r2, r3, #16, #8
 23ef822:	454a      	cmp	r2, r9
 23ef824:	bfb8      	it	lt
 23ef826:	464a      	movlt	r2, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ef828:	b252      	sxtb	r2, r2
        in.bytes[3] = MAX(in.bytes[3], act_min);
 23ef82a:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ef82c:	4552      	cmp	r2, sl
 23ef82e:	bfa8      	it	ge
 23ef830:	4652      	movge	r2, sl
        in.bytes[3] = MAX(in.bytes[3], act_min);
 23ef832:	454b      	cmp	r3, r9
 23ef834:	bfb8      	it	lt
 23ef836:	464b      	movlt	r3, r9
        in.bytes[3] = MIN(in.bytes[3], act_max);
 23ef838:	b25b      	sxtb	r3, r3
 23ef83a:	4553      	cmp	r3, sl
 23ef83c:	bfa8      	it	ge
 23ef83e:	4653      	movge	r3, sl
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ef840:	f362 4717 	bfi	r7, r2, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
 23ef844:	f363 671f 	bfi	r7, r3, #24, #8
 23ef848:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
 23ef84c:	e6f6      	b.n	23ef63c <arm_max_pool_s8+0x74>
        int32_t comp = *source;
 23ef84e:	f993 2000 	ldrsb.w	r2, [r3]
        comp = MAX(comp, act_min);
 23ef852:	454a      	cmp	r2, r9
 23ef854:	bfb8      	it	lt
 23ef856:	464a      	movlt	r2, r9
        comp = MIN(comp, act_max);
 23ef858:	4552      	cmp	r2, sl
 23ef85a:	bfa8      	it	ge
 23ef85c:	4652      	movge	r2, sl
        *source++ = (int8_t)comp;
 23ef85e:	f803 2b01 	strb.w	r2, [r3], #1
        cnt--;
 23ef862:	e6f6      	b.n	23ef652 <arm_max_pool_s8+0x8a>

023ef864 <arm_q15_to_float>:
  while (blkCnt > 0U)
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ef864:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23ef884 <arm_q15_to_float+0x20>
  while (blkCnt > 0U)
 23ef868:	b902      	cbnz	r2, 23ef86c <arm_q15_to_float+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 23ef86a:	4770      	bx	lr
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ef86c:	f930 3b02 	ldrsh.w	r3, [r0], #2
    blkCnt--;
 23ef870:	3a01      	subs	r2, #1
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ef872:	ee07 3a90 	vmov	s15, r3
 23ef876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ef87a:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ef87e:	ece1 7a01 	vstmia	r1!, {s15}
    blkCnt--;
 23ef882:	e7f1      	b.n	23ef868 <arm_q15_to_float+0x4>
 23ef884:	38000000 	.word	0x38000000

023ef888 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ef888:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 23ef88a:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ef88c:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 23ef88e:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ef890:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 23ef892:	b900      	cbnz	r0, 23ef896 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23ef894:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
 23ef896:	ecf2 7a01 	vldmia	r2!, {s15}
 23ef89a:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
 23ef89e:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
 23ef8a0:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
 23ef8a4:	e7f5      	b.n	23ef892 <arm_mat_scale_f32+0xa>

023ef8a6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 23ef8a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 23ef8a8:	8802      	ldrh	r2, [r0, #0]
 23ef8aa:	684b      	ldr	r3, [r1, #4]
 23ef8ac:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 23ef8ae:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 23ef8b0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 23ef8b4:	00af      	lsls	r7, r5, #2
 23ef8b6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
 23ef8ba:	4619      	mov	r1, r3
      col = nCols;
 23ef8bc:	4628      	mov	r0, r5
      while (col > 0U)
 23ef8be:	4626      	mov	r6, r4
 23ef8c0:	b920      	cbnz	r0, 23ef8cc <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 23ef8c2:	3304      	adds	r3, #4
 23ef8c4:	4293      	cmp	r3, r2
 23ef8c6:	443c      	add	r4, r7
 23ef8c8:	d1f7      	bne.n	23ef8ba <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23ef8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
 23ef8cc:	f856 eb04 	ldr.w	lr, [r6], #4
        col--;
 23ef8d0:	3801      	subs	r0, #1
        *px = *pIn++;
 23ef8d2:	f8c1 e000 	str.w	lr, [r1]
        px += nRows;
 23ef8d6:	4461      	add	r1, ip
        col--;
 23ef8d8:	e7f2      	b.n	23ef8c0 <arm_mat_trans_f32+0x1a>

023ef8da <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 23ef8da:	b510      	push	{r4, lr}

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 23ef8dc:	edd1 7a01 	vldr	s15, [r1, #4]
 23ef8e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
   xBR = pB[0];
 23ef8e4:	edd1 5a00 	vldr	s11, [r1]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 23ef8e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 23ef8ec:	eeb0 7a67 	vmov.f32	s14, s15
 23ef8f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 23ef8f4:	eea5 7a86 	vfma.f32	s14, s11, s12
   *pOut++ = 0.5f * ( t1a - t1b );
 23ef8f8:	eed5 7a86 	vfnms.f32	s15, s11, s12
   *pOut++ = 0.5f * ( t1a + t1b );
 23ef8fc:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( t1a - t1b );
 23ef900:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 23ef904:	8803      	ldrh	r3, [r0, #0]
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 23ef906:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
 23ef908:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
 23ef90a:	f104 0010 	add.w	r0, r4, #16
 23ef90e:	f101 0410 	add.w	r4, r1, #16
 23ef912:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23ef916:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
 23ef91a:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
 23ef91e:	3908      	subs	r1, #8
 23ef920:	3210      	adds	r2, #16
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 23ef922:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR = pB[0];
 23ef926:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
 23ef92a:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI = pA[1];
 23ef92e:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
 23ef932:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 23ef936:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
 23ef93a:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
 23ef93e:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef942:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef946:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef94a:	eea5 7a85 	vfma.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef94e:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef952:	eea4 7a86 	vfma.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef956:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef95a:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef95e:	ee67 7aa6 	vmul.f32	s15, s15, s13


      pA += 2;
      pB -= 2;
      k--;
 23ef962:	3b01      	subs	r3, #1
   } while (k > 0);
 23ef964:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ef966:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ef96a:	ed42 7a01 	vstr	s15, [r2, #-4]
   } while (k > 0);
 23ef96e:	f100 0008 	add.w	r0, r0, #8
 23ef972:	f102 0208 	add.w	r2, r2, #8
 23ef976:	f104 0408 	add.w	r4, r4, #8
 23ef97a:	f1a1 0108 	sub.w	r1, r1, #8
 23ef97e:	dcd0      	bgt.n	23ef922 <stage_rfft_f32+0x48>
}
 23ef980:	bd10      	pop	{r4, pc}

023ef982 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 23ef982:	b510      	push	{r4, lr}
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
 23ef984:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
 23ef988:	ed91 6a01 	vldr	s12, [r1, #4]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
 23ef98c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 23ef990:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
 23ef994:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
 23ef998:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( xAR - xAI );
 23ef99c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 23ef9a0:	8803      	ldrh	r3, [r0, #0]
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 23ef9a2:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
 23ef9a4:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR + xAI );
 23ef9a6:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
 23ef9aa:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
 23ef9ae:	f104 0008 	add.w	r0, r4, #8
 23ef9b2:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
 23ef9b4:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
 23ef9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
 23ef9bc:	2b00      	cmp	r3, #0
 23ef9be:	f102 0208 	add.w	r2, r2, #8
 23ef9c2:	f100 0008 	add.w	r0, r0, #8
 23ef9c6:	f104 0408 	add.w	r4, r4, #8
 23ef9ca:	f1a1 0108 	sub.w	r1, r1, #8
 23ef9ce:	dc00      	bgt.n	23ef9d2 <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 23ef9d0:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
 23ef9d2:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR =   pB[0]    ;
 23ef9d6:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
 23ef9da:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
 23ef9de:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
 23ef9e2:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 23ef9e6:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
 23ef9ea:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
 23ef9ee:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef9f2:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef9f6:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ef9fa:	eea5 7ac5 	vfms.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ef9fe:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23efa02:	eea4 7ac6 	vfms.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23efa06:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23efa0a:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23efa0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23efa12:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23efa16:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
 23efa1a:	3b01      	subs	r3, #1
 23efa1c:	e7ce      	b.n	23ef9bc <merge_rfft_f32+0x3a>

023efa1e <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 23efa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23efa22:	4605      	mov	r5, r0
 23efa24:	460f      	mov	r7, r1
 23efa26:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
 23efa28:	461c      	mov	r4, r3
 23efa2a:	b14b      	cbz	r3, 23efa40 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 23efa2c:	f7ff ffa9 	bl	23ef982 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 23efa30:	4622      	mov	r2, r4
 23efa32:	4631      	mov	r1, r6
 23efa34:	4628      	mov	r0, r5
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 23efa36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 23efa3a:	2301      	movs	r3, #1
 23efa3c:	f000 bd53 	b.w	23f04e6 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 23efa40:	4622      	mov	r2, r4
 23efa42:	2301      	movs	r3, #1
 23efa44:	f000 fd4f 	bl	23f04e6 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 23efa48:	4632      	mov	r2, r6
 23efa4a:	4639      	mov	r1, r7
 23efa4c:	4628      	mov	r0, r5
}
 23efa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
 23efa52:	f7ff bf42 	b.w	23ef8da <stage_rfft_f32>

023efa56 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 23efa56:	b5f0      	push	{r4, r5, r6, r7, lr}
 23efa58:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 23efa5a:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
 23efa5c:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
 23efa5e:	45ac      	cmp	ip, r5
 23efa60:	d800      	bhi.n	23efa64 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
 23efa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
 23efa64:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
 23efa68:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
 23efa6c:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
 23efa6e:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
 23efa70:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
 23efa74:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    i += 2;
 23efa78:	3502      	adds	r5, #2
     pSrc[a] = pSrc[b];
 23efa7a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
 23efa7e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
 23efa82:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
 23efa84:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
 23efa86:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
 23efa8a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 23efa8e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b+1] = tmp;
 23efa92:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
 23efa96:	e7e2      	b.n	23efa5e <arm_bitreversal_32+0x8>

023efa98 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 23efa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23efa9c:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 23efaa0:	eddf 7ab2 	vldr	s15, [pc, #712]	; 23efd6c <arm_radix8_butterfly_f32+0x2d4>
{
 23efaa4:	b08f      	sub	sp, #60	; 0x3c
 23efaa6:	9001      	str	r0, [sp, #4]
 23efaa8:	9103      	str	r1, [sp, #12]
 23efaaa:	920d      	str	r2, [sp, #52]	; 0x34
 23efaac:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
 23efaae:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
 23efab0:	2018      	movs	r0, #24
 23efab2:	9b02      	ldr	r3, [sp, #8]
      i1 = 0;
 23efab4:	f04f 0900 	mov.w	r9, #0
      n2 = n2 >> 3;
 23efab8:	08da      	lsrs	r2, r3, #3
      i1 = 0;
 23efaba:	fb00 f402 	mul.w	r4, r0, r2
 23efabe:	2028      	movs	r0, #40	; 0x28
 23efac0:	940c      	str	r4, [sp, #48]	; 0x30
 23efac2:	fb00 f402 	mul.w	r4, r0, r2
 23efac6:	2030      	movs	r0, #48	; 0x30
 23efac8:	0151      	lsls	r1, r2, #5
 23efaca:	9108      	str	r1, [sp, #32]
 23efacc:	9901      	ldr	r1, [sp, #4]
 23eface:	fb00 fb02 	mul.w	fp, r0, r2
 23efad2:	eb01 1c42 	add.w	ip, r1, r2, lsl #5
 23efad6:	00d1      	lsls	r1, r2, #3
 23efad8:	9107      	str	r1, [sp, #28]
 23efada:	f06f 0117 	mvn.w	r1, #23
 23efade:	2038      	movs	r0, #56	; 0x38
 23efae0:	4351      	muls	r1, r2
 23efae2:	eb0c 0701 	add.w	r7, ip, r1
 23efae6:	eb07 1642 	add.w	r6, r7, r2, lsl #5
 23efaea:	1875      	adds	r5, r6, r1
 23efaec:	9406      	str	r4, [sp, #24]
 23efaee:	0114      	lsls	r4, r2, #4
 23efaf0:	fb00 fa02 	mul.w	sl, r0, r2
 23efaf4:	9405      	str	r4, [sp, #20]
 23efaf6:	9801      	ldr	r0, [sp, #4]
 23efaf8:	eb05 1442 	add.w	r4, r5, r2, lsl #5
 23efafc:	4421      	add	r1, r4
 23efafe:	00db      	lsls	r3, r3, #3
 23efb00:	eb01 1842 	add.w	r8, r1, r2, lsl #5
 23efb04:	f100 0e04 	add.w	lr, r0, #4
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23efb08:	eddc 6a00 	vldr	s13, [ip]
 23efb0c:	ed1e 6a01 	vldr	s12, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23efb10:	edd7 5a00 	vldr	s11, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23efb14:	ee36 7a26 	vadd.f32	s14, s12, s13
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 23efb18:	ee36 6a66 	vsub.f32	s12, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23efb1c:	edd6 6a00 	vldr	s13, [r6]
 23efb20:	ee35 5aa6 	vadd.f32	s10, s11, s13
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 23efb24:	ee35 4ae6 	vsub.f32	s8, s11, s13
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23efb28:	edd5 5a00 	vldr	s11, [r5]
 23efb2c:	edd4 6a00 	vldr	s13, [r4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efb30:	ed91 3a00 	vldr	s6, [r1]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23efb34:	ee75 3aa6 	vadd.f32	s7, s11, s13
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 23efb38:	ee75 6ae6 	vsub.f32	s13, s11, s13
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efb3c:	edd8 5a00 	vldr	s11, [r8]
 23efb40:	ee73 4a25 	vadd.f32	s9, s6, s11
         t1 = r1 - r3;
 23efb44:	ee77 1a63 	vsub.f32	s3, s14, s7
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 23efb48:	ee33 3a65 	vsub.f32	s6, s6, s11
         r1 = r1 + r3;
 23efb4c:	ee37 7a23 	vadd.f32	s14, s14, s7
         r2 = r2 + r4;
 23efb50:	ee75 5a24 	vadd.f32	s11, s10, s9
         r3 = r2 - r4;
 23efb54:	ee35 2a64 	vsub.f32	s4, s10, s9
         pSrc[2 * i1] = r1 + r2;
 23efb58:	ee37 5a25 	vadd.f32	s10, s14, s11
         pSrc[2 * i5] = r1 - r2;
 23efb5c:	ee37 7a65 	vsub.f32	s14, s14, s11
         pSrc[2 * i1] = r1 + r2;
 23efb60:	ed0e 5a01 	vstr	s10, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
 23efb64:	ed8c 7a00 	vstr	s14, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efb68:	ed9c 7a01 	vldr	s14, [ip, #4]
 23efb6c:	ed9e 5a00 	vldr	s10, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efb70:	edd6 4a01 	vldr	s9, [r6, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efb74:	ee75 5a07 	vadd.f32	s11, s10, s14
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 23efb78:	ee35 5a47 	vsub.f32	s10, s10, s14
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efb7c:	ed97 7a01 	vldr	s14, [r7, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efb80:	edd5 3a01 	vldr	s7, [r5, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efb84:	ee77 2a24 	vadd.f32	s5, s14, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 23efb88:	ee37 7a64 	vsub.f32	s14, s14, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efb8c:	edd4 4a01 	vldr	s9, [r4, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23efb90:	ed98 1a01 	vldr	s2, [r8, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efb94:	ee73 0aa4 	vadd.f32	s1, s7, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 23efb98:	ee73 4ae4 	vsub.f32	s9, s7, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23efb9c:	edd1 3a01 	vldr	s7, [r1, #4]
 23efba0:	ee33 0a81 	vadd.f32	s0, s7, s2
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 23efba4:	ee73 3ac1 	vsub.f32	s7, s7, s2
         t2 = r1 - s3;
 23efba8:	ee35 1ae0 	vsub.f32	s2, s11, s1
         r1 = r1 + s3;
 23efbac:	ee75 5aa0 	vadd.f32	s11, s11, s1
         s3 = r2 - r4;
 23efbb0:	ee72 0ac0 	vsub.f32	s1, s5, s0
         r2 = r2 + r4;
 23efbb4:	ee72 2a80 	vadd.f32	s5, s5, s0
         pSrc[2 * i1 + 1] = r1 + r2;
 23efbb8:	ee35 0aa2 	vadd.f32	s0, s11, s5
         pSrc[2 * i5 + 1] = r1 - r2;
 23efbbc:	ee75 5ae2 	vsub.f32	s11, s11, s5
         pSrc[2 * i1 + 1] = r1 + r2;
 23efbc0:	ed8e 0a00 	vstr	s0, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
 23efbc4:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
 23efbc8:	ee71 5aa0 	vadd.f32	s11, s3, s1
         pSrc[2 * i7]     = t1 - s3;
 23efbcc:	ee71 1ae0 	vsub.f32	s3, s3, s1
         pSrc[2 * i3]     = t1 + s3;
 23efbd0:	edc5 5a00 	vstr	s11, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 23efbd4:	ee71 5a42 	vsub.f32	s11, s2, s4
         pSrc[2 * i7 + 1] = t2 + r3;
 23efbd8:	ee32 2a01 	vadd.f32	s4, s4, s2
         pSrc[2 * i7]     = t1 - s3;
 23efbdc:	edc4 1a00 	vstr	s3, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
 23efbe0:	edc5 5a01 	vstr	s11, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 23efbe4:	ed84 2a01 	vstr	s4, [r4, #4]
         r6 = (r6 + r8) * C81;
 23efbe8:	ee74 5a03 	vadd.f32	s11, s8, s6
         r1 = (r6 - r8) * C81;
 23efbec:	ee34 2a43 	vsub.f32	s4, s8, s6
         r5 = r5 + r1;
         r8 = r7 - r6;
 23efbf0:	eeb0 4a66 	vmov.f32	s8, s13
         r2 = (s6 - s8) * C81;
 23efbf4:	ee77 2a63 	vsub.f32	s5, s14, s7
         r8 = r7 - r6;
 23efbf8:	eea5 4ae7 	vfms.f32	s8, s11, s15
         s6 = (s6 + s8) * C81;
 23efbfc:	ee37 7a23 	vadd.f32	s14, s14, s7
         r7 = r7 + r6;
 23efc00:	eee5 6aa7 	vfma.f32	s13, s11, s15
         t2 = s5 - r2;
 23efc04:	eeb0 3a45 	vmov.f32	s6, s10
         s5 = s5 + r2;
 23efc08:	eef0 5a45 	vmov.f32	s11, s10
         s8 = s7 - s6;
         s7 = s7 + s6;
 23efc0c:	eeb0 5a64 	vmov.f32	s10, s9
         t2 = s5 - r2;
 23efc10:	eea2 3ae7 	vfms.f32	s6, s5, s15
         s5 = s5 + r2;
 23efc14:	eee2 5aa7 	vfma.f32	s11, s5, s15
         t1 = r5 - r1;
 23efc18:	eef0 3a46 	vmov.f32	s7, s12
         s7 = s7 + s6;
 23efc1c:	eea7 5a27 	vfma.f32	s10, s14, s15
         r5 = r5 + r1;
 23efc20:	eea2 6a27 	vfma.f32	s12, s4, s15
         s8 = s7 - s6;
 23efc24:	eef0 2a64 	vmov.f32	s5, s9
         t1 = r5 - r1;
 23efc28:	eee2 3a67 	vfms.f32	s7, s4, s15
         s8 = s7 - s6;
 23efc2c:	eee7 2a67 	vfms.f32	s5, s14, s15
         pSrc[2 * i2]     = r5 + s7;
 23efc30:	ee36 7a05 	vadd.f32	s14, s12, s10
         pSrc[2 * i8]     = r5 - s7;
 23efc34:	ee36 6a45 	vsub.f32	s12, s12, s10
         pSrc[2 * i2]     = r5 + s7;
 23efc38:	ed87 7a00 	vstr	s14, [r7]
         pSrc[2 * i6]     = t1 + s8;
 23efc3c:	ee33 7aa2 	vadd.f32	s14, s7, s5
         pSrc[2 * i8]     = r5 - s7;
 23efc40:	ed88 6a00 	vstr	s12, [r8]
         pSrc[2 * i4]     = t1 - s8;
 23efc44:	ee73 3ae2 	vsub.f32	s7, s7, s5
         pSrc[2 * i6]     = t1 + s8;
 23efc48:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 23efc4c:	ee35 7ae6 	vsub.f32	s14, s11, s13
         pSrc[2 * i4]     = t1 - s8;
 23efc50:	edc1 3a00 	vstr	s7, [r1]
         pSrc[2 * i8 + 1] = s5 + r7;
 23efc54:	ee76 6aa5 	vadd.f32	s13, s13, s11
         pSrc[2 * i2 + 1] = s5 - r7;
 23efc58:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 23efc5c:	ee33 7a44 	vsub.f32	s14, s6, s8
         pSrc[2 * i4 + 1] = t2 + r8;
 23efc60:	ee34 4a03 	vadd.f32	s8, s8, s6
         pSrc[2 * i8 + 1] = s5 + r7;
 23efc64:	edc8 6a01 	vstr	s13, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 23efc68:	ed86 7a01 	vstr	s14, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 23efc6c:	ed81 4a01 	vstr	s8, [r1, #4]

         i1 += n1;
 23efc70:	9802      	ldr	r0, [sp, #8]
      } while (i1 < fftLen);
 23efc72:	449c      	add	ip, r3
         i1 += n1;
 23efc74:	4481      	add	r9, r0
      } while (i1 < fftLen);
 23efc76:	9803      	ldr	r0, [sp, #12]
 23efc78:	441f      	add	r7, r3
 23efc7a:	4548      	cmp	r0, r9
 23efc7c:	441e      	add	r6, r3
 23efc7e:	441d      	add	r5, r3
 23efc80:	441c      	add	r4, r3
 23efc82:	4419      	add	r1, r3
 23efc84:	4498      	add	r8, r3
 23efc86:	449e      	add	lr, r3
 23efc88:	f63f af3e 	bhi.w	23efb08 <arm_radix8_butterfly_f32+0x70>

      if (n2 < 8)
 23efc8c:	2a07      	cmp	r2, #7
 23efc8e:	f240 8171 	bls.w	23eff74 <arm_radix8_butterfly_f32+0x4dc>
 23efc92:	9801      	ldr	r0, [sp, #4]
 23efc94:	9908      	ldr	r1, [sp, #32]
         break;

      ia1 = 0;
      j = 1;
 23efc96:	2401      	movs	r4, #1
 23efc98:	4401      	add	r1, r0
 23efc9a:	910b      	str	r1, [sp, #44]	; 0x2c
 23efc9c:	9907      	ldr	r1, [sp, #28]
 23efc9e:	4401      	add	r1, r0
 23efca0:	910a      	str	r1, [sp, #40]	; 0x28
 23efca2:	9906      	ldr	r1, [sp, #24]
 23efca4:	4401      	add	r1, r0
 23efca6:	9109      	str	r1, [sp, #36]	; 0x24
 23efca8:	9905      	ldr	r1, [sp, #20]
 23efcaa:	4401      	add	r1, r0
 23efcac:	9108      	str	r1, [sp, #32]
 23efcae:	eb0b 0100 	add.w	r1, fp, r0
 23efcb2:	9107      	str	r1, [sp, #28]
 23efcb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 23efcb6:	4401      	add	r1, r0
 23efcb8:	9106      	str	r1, [sp, #24]
 23efcba:	eb0a 0100 	add.w	r1, sl, r0
 23efcbe:	9105      	str	r1, [sp, #20]
      ia1 = 0;
 23efcc0:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 23efcc2:	9804      	ldr	r0, [sp, #16]
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 23efcc4:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
 23efcc6:	4401      	add	r1, r0
         co2 = pCoef[2 * ia1];
 23efcc8:	980d      	ldr	r0, [sp, #52]	; 0x34
 23efcca:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 23efcce:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 23efcd2:	ed95 2a00 	vldr	s4, [r5]
         co3 = pCoef[2 * ia2];
 23efcd6:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23efcda:	ed95 0a00 	vldr	s0, [r5]
         co4 = pCoef[2 * ia3];
 23efcde:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23efce2:	ed95 5a00 	vldr	s10, [r5]
         co5 = pCoef[2 * ia4];
 23efce6:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23efcea:	edd5 8a00 	vldr	s17, [r5]
         co6 = pCoef[2 * ia5];
 23efcee:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23efcf2:	ed95 4a00 	vldr	s8, [r5]
         co7 = pCoef[2 * ia6];
 23efcf6:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23efcfa:	ed95 1a00 	vldr	s2, [r5]
         co8 = pCoef[2 * ia7];
 23efcfe:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23efd02:	fb00 5601 	mla	r6, r0, r1, r5
 23efd06:	9801      	ldr	r0, [sp, #4]
         si2 = pCoef[2 * ia1 + 1];
 23efd08:	edd6 1a01 	vldr	s3, [r6, #4]
 23efd0c:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
 23efd10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23efd12:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23efd16:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 23efd1a:	980a      	ldr	r0, [sp, #40]	; 0x28
         si3 = pCoef[2 * ia2 + 1];
 23efd1c:	ed96 8a01 	vldr	s16, [r6, #4]
 23efd20:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
 23efd24:	9809      	ldr	r0, [sp, #36]	; 0x24
 23efd26:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23efd2a:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 23efd2e:	9808      	ldr	r0, [sp, #32]
         si4 = pCoef[2 * ia3 + 1];
 23efd30:	edd6 4a01 	vldr	s9, [r6, #4]
 23efd34:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 23efd38:	9807      	ldr	r0, [sp, #28]
 23efd3a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
         si5 = pCoef[2 * ia4 + 1];
 23efd3e:	ed96 9a01 	vldr	s18, [r6, #4]
 23efd42:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 23efd46:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23efd4a:	9806      	ldr	r0, [sp, #24]
         si6 = pCoef[2 * ia5 + 1];
 23efd4c:	edd6 3a01 	vldr	s7, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
 23efd50:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23efd54:	edd6 0a01 	vldr	s1, [r6, #4]
 23efd58:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 23efd5c:	9805      	ldr	r0, [sp, #20]
         co8 = pCoef[2 * ia7];
 23efd5e:	ed95 3a00 	vldr	s6, [r5]
         si8 = pCoef[2 * ia7 + 1];
 23efd62:	edd5 2a01 	vldr	s5, [r5, #4]
         i1 = j;
 23efd66:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 23efd6a:	e001      	b.n	23efd70 <arm_radix8_butterfly_f32+0x2d8>
 23efd6c:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23efd70:	ed99 7a00 	vldr	s14, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23efd74:	ed9e 6a00 	vldr	s12, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23efd78:	edda 9a00 	vldr	s19, [sl]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23efd7c:	ed98 aa00 	vldr	s20, [r8]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efd80:	ed95 ba00 	vldr	s22, [r5]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23efd84:	eddc aa00 	vldr	s21, [ip]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efd88:	edd6 ba00 	vldr	s23, [r6]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23efd8c:	ee79 6a87 	vadd.f32	s13, s19, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 23efd90:	ee79 9ac7 	vsub.f32	s19, s19, s14
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23efd94:	ee3a 7a06 	vadd.f32	s14, s20, s12
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 23efd98:	ee3a aa46 	vsub.f32	s20, s20, s12
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23efd9c:	ed97 6a00 	vldr	s12, [r7]
 23efda0:	ee7a 5a86 	vadd.f32	s11, s21, s12
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 23efda4:	ee7a aac6 	vsub.f32	s21, s21, s12
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23efda8:	ee3b 6a8b 	vadd.f32	s12, s23, s22
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 23efdac:	ee7b bacb 	vsub.f32	s23, s23, s22
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
 23efdb0:	ee77 da46 	vsub.f32	s27, s14, s12
            t1 = r1 - r3;
 23efdb4:	ee36 bae5 	vsub.f32	s22, s13, s11
            r2 = r2 + r4;
 23efdb8:	ee37 7a06 	vadd.f32	s14, s14, s12
            r1 = r1 + r3;
 23efdbc:	ee76 6aa5 	vadd.f32	s13, s13, s11
            pSrc[2 * i1] = r1 + r2;
 23efdc0:	ee36 6a87 	vadd.f32	s12, s13, s14
 23efdc4:	ed8a 6a00 	vstr	s12, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efdc8:	edda 5a01 	vldr	s11, [sl, #4]
            r2 = r1 - r2;
 23efdcc:	ee76 6ac7 	vsub.f32	s13, s13, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efdd0:	ed99 7a01 	vldr	s14, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efdd4:	ed98 6a01 	vldr	s12, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23efdd8:	ee75 ea87 	vadd.f32	s29, s11, s14
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 23efddc:	ee35 cac7 	vsub.f32	s24, s11, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efde0:	ed9e 7a01 	vldr	s14, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 23efde4:	ee76 ca47 	vsub.f32	s25, s12, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23efde8:	ee76 fa07 	vadd.f32	s31, s12, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efdec:	ed9c 6a01 	vldr	s12, [ip, #4]
 23efdf0:	ed97 7a01 	vldr	s14, [r7, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23efdf4:	ed96 da01 	vldr	s26, [r6, #4]
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23efdf8:	ee36 ea07 	vadd.f32	s28, s12, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 23efdfc:	ee36 7a47 	vsub.f32	s14, s12, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23efe00:	ed95 6a01 	vldr	s12, [r5, #4]
 23efe04:	ee7d 5a06 	vadd.f32	s11, s26, s12
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
            t2 = s1 - s3;
 23efe08:	ee3e face 	vsub.f32	s30, s29, s28
            s1 = s1 + s3;
 23efe0c:	ee3e ea8e 	vadd.f32	s28, s29, s28
            s3 = s2 - s4;
 23efe10:	ee7f eae5 	vsub.f32	s29, s31, s11
            s2 = s2 + s4;
 23efe14:	ee7f 5aa5 	vadd.f32	s11, s31, s11
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 23efe18:	ee3d da46 	vsub.f32	s26, s26, s12
            r1 = t1 + s3;
 23efe1c:	ee3b 6a2e 	vadd.f32	s12, s22, s29
            t1 = t1 - s3;
 23efe20:	ee3b ba6e 	vsub.f32	s22, s22, s29
            pSrc[2 * i1 + 1] = s1 + s2;
 23efe24:	ee7e ea25 	vadd.f32	s29, s28, s11
            s2 = s1 - s2;
 23efe28:	ee3e ea65 	vsub.f32	s28, s28, s11
            s1 = t2 - r3;
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 23efe2c:	ee69 5a0e 	vmul.f32	s11, s18, s28
            pSrc[2 * i1 + 1] = s1 + s2;
 23efe30:	edca ea01 	vstr	s29, [sl, #4]
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 23efe34:	eee8 5aa6 	vfma.f32	s11, s17, s13
            s1 = t2 - r3;
 23efe38:	ee7f ea6d 	vsub.f32	s29, s30, s27
            pSrc[2 * i5]     = p1 + p2;
 23efe3c:	edc9 5a00 	vstr	s11, [r9]
            pSrc[2 * i5 + 1] = p3 - p4;
 23efe40:	ee66 5ac9 	vnmul.f32	s11, s13, s18
            p1 = co3 * r1;
            p2 = si3 * s1;
 23efe44:	ee68 6a2e 	vmul.f32	s13, s16, s29
            t2 = t2 + r3;
 23efe48:	ee7d da8f 	vadd.f32	s27, s27, s30
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 23efe4c:	eee0 6a06 	vfma.f32	s13, s0, s12
            pSrc[2 * i5 + 1] = p3 - p4;
 23efe50:	eee8 5a8e 	vfma.f32	s11, s17, s28
            pSrc[2 * i3 + 1] = p3 - p4;
 23efe54:	ee26 6a48 	vnmul.f32	s12, s12, s16
            pSrc[2 * i5 + 1] = p3 - p4;
 23efe58:	edc9 5a01 	vstr	s11, [r9, #4]
            pSrc[2 * i3]     = p1 + p2;
 23efe5c:	edcc 6a00 	vstr	s13, [ip]
            p1 = co7 * t1;
            p2 = si7 * t2;
 23efe60:	ee60 6aad 	vmul.f32	s13, s1, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 23efe64:	eea0 6a2e 	vfma.f32	s12, s0, s29
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 23efe68:	eee1 6a0b 	vfma.f32	s13, s2, s22
            pSrc[2 * i3 + 1] = p3 - p4;
 23efe6c:	ed8c 6a01 	vstr	s12, [ip, #4]
            pSrc[2 * i7]     = p1 + p2;
 23efe70:	edc7 6a00 	vstr	s13, [r7]
            pSrc[2 * i7 + 1] = p3 - p4;
 23efe74:	ee6b 6a60 	vnmul.f32	s13, s22, s1
 23efe78:	eee1 6a2d 	vfma.f32	s13, s2, s27
            r1 = (r6 - r8) * C81;
 23efe7c:	ee7a 5a6b 	vsub.f32	s11, s20, s23
            pSrc[2 * i7 + 1] = p3 - p4;
 23efe80:	edc7 6a01 	vstr	s13, [r7, #4]
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
 23efe84:	ee3c 6a8d 	vadd.f32	s12, s25, s26
            s1 = (s6 - s8) * C81;
 23efe88:	ee7c 6acd 	vsub.f32	s13, s25, s26
            t1 = r5 - r1;
 23efe8c:	eef0 ca69 	vmov.f32	s25, s19
            r6 = (r6 + r8) * C81;
 23efe90:	ee3a aa2b 	vadd.f32	s20, s20, s23
            r5 = r5 + r1;
 23efe94:	eee5 9aa7 	vfma.f32	s19, s11, s15
            t1 = r5 - r1;
 23efe98:	eee5 cae7 	vfms.f32	s25, s11, s15
            r8 = r7 - r6;
 23efe9c:	eeb0 ba6a 	vmov.f32	s22, s21
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
            s8 = s7 - s6;
 23efea0:	eef0 ba47 	vmov.f32	s23, s14
            s5 = s5 + s1;
 23efea4:	eef0 5a4c 	vmov.f32	s11, s24
            r8 = r7 - r6;
 23efea8:	eeaa ba67 	vfms.f32	s22, s20, s15
            r7 = r7 + r6;
 23efeac:	eeea aa27 	vfma.f32	s21, s20, s15
            s8 = s7 - s6;
 23efeb0:	eee6 ba67 	vfms.f32	s23, s12, s15
            s5 = s5 + s1;
 23efeb4:	eee6 5aa7 	vfma.f32	s11, s13, s15
            s7 = s7 + s6;
 23efeb8:	eea6 7a27 	vfma.f32	s14, s12, s15
            t2 = s5 - s1;
 23efebc:	eeb0 aa4c 	vmov.f32	s20, s24
            r1 = r5 + s7;
 23efec0:	ee39 6a87 	vadd.f32	s12, s19, s14
            t2 = s5 - s1;
 23efec4:	eea6 aae7 	vfms.f32	s20, s13, s15
            r5 = r5 - s7;
 23efec8:	ee39 7ac7 	vsub.f32	s14, s19, s14
            r6 = t1 + s8;
 23efecc:	ee7c 6aab 	vadd.f32	s13, s25, s23
            t1 = t1 - s8;
 23efed0:	ee7c 9aeb 	vsub.f32	s19, s25, s23
            s1 = s5 - r7;
 23efed4:	ee75 baea 	vsub.f32	s23, s11, s21
            s5 = s5 + r7;
 23efed8:	ee7a 5aa5 	vadd.f32	s11, s21, s11
            s6 = t2 - r8;
 23efedc:	ee7a aa4b 	vsub.f32	s21, s20, s22
            t2 = t2 + r8;
 23efee0:	ee3b aa0a 	vadd.f32	s20, s22, s20
            p1 = co2 * r1;
            p2 = si2 * s1;
 23efee4:	ee21 baab 	vmul.f32	s22, s3, s23
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 23efee8:	eea2 ba06 	vfma.f32	s22, s4, s12
            pSrc[2 * i2 + 1] = p3 - p4;
 23efeec:	ee26 6a61 	vnmul.f32	s12, s12, s3
 23efef0:	eea2 6a2b 	vfma.f32	s12, s4, s23
 23efef4:	ed88 6a01 	vstr	s12, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
 23efef8:	ee22 6aa5 	vmul.f32	s12, s5, s11
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 23efefc:	eea3 6a07 	vfma.f32	s12, s6, s14
            pSrc[2 * i2]     = p1 + p2;
 23eff00:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i8]     = p1 + p2;
 23eff04:	ed85 6a00 	vstr	s12, [r5]
            pSrc[2 * i8 + 1] = p3 - p4;
 23eff08:	ee27 6a62 	vnmul.f32	s12, s14, s5
            p1 = co6 * r6;
            p2 = si6 * s6;
 23eff0c:	ee23 7aaa 	vmul.f32	s14, s7, s21
            pSrc[2 * i8 + 1] = p3 - p4;
 23eff10:	eea3 6a25 	vfma.f32	s12, s6, s11
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 23eff14:	eea4 7a26 	vfma.f32	s14, s8, s13
            pSrc[2 * i8 + 1] = p3 - p4;
 23eff18:	ed85 6a01 	vstr	s12, [r5, #4]
            pSrc[2 * i6 + 1] = p3 - p4;
 23eff1c:	ee66 6ae3 	vnmul.f32	s13, s13, s7
            pSrc[2 * i6]     = p1 + p2;
 23eff20:	ed8e 7a00 	vstr	s14, [lr]
            p1 = co4 * t1;
            p2 = si4 * t2;
 23eff24:	ee24 7a8a 	vmul.f32	s14, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 23eff28:	eee4 6a2a 	vfma.f32	s13, s8, s21
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 23eff2c:	eea5 7a29 	vfma.f32	s14, s10, s19
            pSrc[2 * i6 + 1] = p3 - p4;
 23eff30:	edce 6a01 	vstr	s13, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
 23eff34:	ed86 7a00 	vstr	s14, [r6]
            pSrc[2 * i4 + 1] = p3 - p4;
 23eff38:	ee29 7ae4 	vnmul.f32	s14, s19, s9
 23eff3c:	eea5 7a0a 	vfma.f32	s14, s10, s20
 23eff40:	ed86 7a01 	vstr	s14, [r6, #4]

            i1 += n1;
 23eff44:	9802      	ldr	r0, [sp, #8]
         } while (i1 < fftLen);
 23eff46:	449a      	add	sl, r3
            i1 += n1;
 23eff48:	4483      	add	fp, r0
         } while (i1 < fftLen);
 23eff4a:	9803      	ldr	r0, [sp, #12]
 23eff4c:	4499      	add	r9, r3
 23eff4e:	4558      	cmp	r0, fp
 23eff50:	4498      	add	r8, r3
 23eff52:	449e      	add	lr, r3
 23eff54:	449c      	add	ip, r3
 23eff56:	441f      	add	r7, r3
 23eff58:	441e      	add	r6, r3
 23eff5a:	441d      	add	r5, r3
 23eff5c:	f63f af08 	bhi.w	23efd70 <arm_radix8_butterfly_f32+0x2d8>

         j++;
 23eff60:	3401      	adds	r4, #1
      } while (j < n2);
 23eff62:	42a2      	cmp	r2, r4
 23eff64:	f47f aead 	bne.w	23efcc2 <arm_radix8_butterfly_f32+0x22a>

      twidCoefModifier <<= 3;
 23eff68:	9b04      	ldr	r3, [sp, #16]
 23eff6a:	9202      	str	r2, [sp, #8]
 23eff6c:	00db      	lsls	r3, r3, #3
 23eff6e:	b29b      	uxth	r3, r3
 23eff70:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
 23eff72:	e59d      	b.n	23efab0 <arm_radix8_butterfly_f32+0x18>
}
 23eff74:	b00f      	add	sp, #60	; 0x3c
 23eff76:	ecbd 8b10 	vpop	{d8-d15}
 23eff7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23eff7e:	bf00      	nop

023eff80 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 23eff80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23eff84:	4680      	mov	r8, r0
 23eff86:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 23eff88:	f8b8 7000 	ldrh.w	r7, [r8]
{
 23eff8c:	ed2d 8b02 	vpush	{d8}
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 23eff90:	eb01 0987 	add.w	r9, r1, r7, lsl #2
  const float32_t * tw = (float32_t *) S->pTwiddle;
 23eff94:	4605      	mov	r5, r0
 23eff96:	464b      	mov	r3, r9
 23eff98:	f8d8 6004 	ldr.w	r6, [r8, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 23eff9c:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 23eff9e:	08ff      	lsrs	r7, r7, #3
{
 23effa0:	b083      	sub	sp, #12
  pMid1 = p1 + L;
 23effa2:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  pMid2 = p2 + L;
 23effa6:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 23effaa:	eb06 1707 	add.w	r7, r6, r7, lsl #4
  for (l = L >> 2; l > 0; l-- )
 23effae:	42be      	cmp	r6, r7
 23effb0:	f105 0510 	add.w	r5, r5, #16
 23effb4:	f104 0410 	add.w	r4, r4, #16
 23effb8:	f102 0210 	add.w	r2, r2, #16
 23effbc:	f103 0310 	add.w	r3, r3, #16
 23effc0:	d112      	bne.n	23effe8 <arm_cfft_radix8by2_f32+0x68>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 23effc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23effc6:	b289      	uxth	r1, r1
 23effc8:	2302      	movs	r3, #2
 23effca:	9101      	str	r1, [sp, #4]
 23effcc:	f7ff fd64 	bl	23efa98 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 23effd0:	2302      	movs	r3, #2
 23effd2:	4648      	mov	r0, r9
 23effd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23effd8:	9901      	ldr	r1, [sp, #4]
}
 23effda:	b003      	add	sp, #12
 23effdc:	ecbd 8b02 	vpop	{d8}
 23effe0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 23effe4:	f7ff bd58 	b.w	23efa98 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
 23effe8:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
 23effec:	ed15 7a04 	vldr	s14, [r5, #-16]
    t2[1] = p2[1];
 23efff0:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
 23efff4:	ed55 3a03 	vldr	s7, [r5, #-12]
    *p1++ = t1[0] + t2[0];
 23efff8:	ee37 8a00 	vadd.f32	s16, s14, s0
    t4[0] = pMid2[0];
 23efffc:	ed12 4a04 	vldr	s8, [r2, #-16]
    t4[1] = pMid2[1];
 23f0000:	ed52 4a03 	vldr	s9, [r2, #-12]
    t2[2] = p2[2];
 23f0004:	ed53 7a02 	vldr	s15, [r3, #-8]
    t2[3] = p2[3];
 23f0008:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
 23f000c:	ed54 2a03 	vldr	s5, [r4, #-12]
    t3[2] = pMid1[2];
 23f0010:	ed14 3a02 	vldr	s6, [r4, #-8]
    t3[3] = pMid1[3];
 23f0014:	ed54 6a01 	vldr	s13, [r4, #-4]
    t4[2] = pMid2[2];
 23f0018:	ed52 5a02 	vldr	s11, [r2, #-8]
    t4[3] = pMid2[3];
 23f001c:	ed12 6a01 	vldr	s12, [r2, #-4]
    t1[2] = p1[2];
 23f0020:	ed15 1a02 	vldr	s2, [r5, #-8]
    t3[0] = pMid1[0];
 23f0024:	ed14 2a04 	vldr	s4, [r4, #-16]
    *p1++ = t1[0] + t2[0];
 23f0028:	ed05 8a04 	vstr	s16, [r5, #-16]
    *p1++ = t1[1] + t2[1];
 23f002c:	ee33 8aa0 	vadd.f32	s16, s7, s1
    t1[3] = p1[3];
 23f0030:	ed55 1a01 	vldr	s3, [r5, #-4]
    *p1++ = t1[1] + t2[1];
 23f0034:	ed05 8a03 	vstr	s16, [r5, #-12]
    *p1++ = t1[2] + t2[2];
 23f0038:	ee31 8a27 	vadd.f32	s16, s2, s15
 23f003c:	ed05 8a02 	vstr	s16, [r5, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 23f0040:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 23f0044:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
 23f0048:	ee72 1a04 	vadd.f32	s3, s4, s8
    *p1++ = t1[3] + t2[3];    /* col 1 */
 23f004c:	ed05 8a01 	vstr	s16, [r5, #-4]
    *pMid1++ = t3[0] + t4[0];
 23f0050:	ed44 1a04 	vstr	s3, [r4, #-16]
    *pMid1++ = t3[1] + t4[1];
 23f0054:	ee72 1aa4 	vadd.f32	s3, s5, s9
 23f0058:	ed44 1a03 	vstr	s3, [r4, #-12]
    *pMid1++ = t3[2] + t4[2];
 23f005c:	ee73 1a25 	vadd.f32	s3, s6, s11
 23f0060:	ed44 1a02 	vstr	s3, [r4, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 23f0064:	ee76 1a86 	vadd.f32	s3, s13, s12
 23f0068:	ed44 1a01 	vstr	s3, [r4, #-4]
    t4[2] = t4[2] - t3[2];
 23f006c:	ee75 5ac3 	vsub.f32	s11, s11, s6
    t2[1] = t1[1] - t2[1];
 23f0070:	ee73 3ae0 	vsub.f32	s7, s7, s1
    twI = *tw++;
 23f0074:	ed96 3a01 	vldr	s6, [r6, #4]
    t4[1] = t4[1] - t3[1];
 23f0078:	ee74 4ae2 	vsub.f32	s9, s9, s5
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 23f007c:	ee36 6a66 	vsub.f32	s12, s12, s13
    t2[0] = t1[0] - t2[0];
 23f0080:	ee37 7a40 	vsub.f32	s14, s14, s0
    twR = *tw++;
 23f0084:	edd6 6a00 	vldr	s13, [r6]
    m1 = t2[1] * twI;
 23f0088:	ee63 2a83 	vmul.f32	s5, s7, s6
    *p2++ = m0 + m1;
 23f008c:	eee7 2a26 	vfma.f32	s5, s14, s13
    *p2++ = m2 - m3;
 23f0090:	ee23 7a47 	vnmul.f32	s14, s6, s14
    t4[0] = t4[0] - t3[0];
 23f0094:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p2++ = m2 - m3;
 23f0098:	eea3 7aa6 	vfma.f32	s14, s7, s13
 23f009c:	ed03 7a03 	vstr	s14, [r3, #-12]
    m3 = t4[0] * twR;
 23f00a0:	ee24 7a26 	vmul.f32	s14, s8, s13
    *pMid2++ = m0 - m1;
 23f00a4:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *pMid2++ = m2 + m3;
 23f00a8:	eea4 7a83 	vfma.f32	s14, s9, s6
    *pMid2++ = m0 - m1;
 23f00ac:	eee4 6a03 	vfma.f32	s13, s8, s6
    *p2++ = m0 + m1;
 23f00b0:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
 23f00b4:	ed42 6a04 	vstr	s13, [r2, #-16]
    *pMid2++ = m2 + m3;
 23f00b8:	ed02 7a03 	vstr	s14, [r2, #-12]
 23f00bc:	3610      	adds	r6, #16
    twR = *tw++;
 23f00be:	ed16 7a02 	vldr	s14, [r6, #-8]
    twI = *tw++;
 23f00c2:	ed56 6a01 	vldr	s13, [r6, #-4]
    t2[2] = t1[2] - t2[2];
 23f00c6:	ee71 7a67 	vsub.f32	s15, s2, s15
    m1 = t2[3] * twI;
 23f00ca:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
 23f00ce:	eee7 4a87 	vfma.f32	s9, s15, s14
    *p2++ = m2 - m3;
 23f00d2:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 23f00d6:	eee5 7a07 	vfma.f32	s15, s10, s14
    *p2++ = m0 + m1;
 23f00da:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
 23f00de:	ed43 7a01 	vstr	s15, [r3, #-4]
    m3 = t4[2] * twR;
 23f00e2:	ee65 7a87 	vmul.f32	s15, s11, s14
    *pMid2++ = m0 - m1;
 23f00e6:	ee27 7a46 	vnmul.f32	s14, s14, s12
    *pMid2++ = m2 + m3;
 23f00ea:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pMid2++ = m0 - m1;
 23f00ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
    *pMid2++ = m2 + m3;
 23f00f2:	ed42 7a01 	vstr	s15, [r2, #-4]
    *pMid2++ = m0 - m1;
 23f00f6:	ed02 7a02 	vstr	s14, [r2, #-8]
  for (l = L >> 2; l > 0; l-- )
 23f00fa:	e758      	b.n	23effae <arm_cfft_radix8by2_f32+0x2e>

023f00fc <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 23f00fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0100:	ed2d 8b04 	vpush	{d8-d9}
    uint32_t    L  = S->fftLen >> 1;
 23f0104:	8803      	ldrh	r3, [r0, #0]
{
 23f0106:	b08f      	sub	sp, #60	; 0x3c
    uint32_t    L  = S->fftLen >> 1;
 23f0108:	085b      	lsrs	r3, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 23f010a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    float32_t * p3 = p2 + L;
 23f010e:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
{
 23f0112:	9101      	str	r1, [sp, #4]
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 23f0114:	0859      	lsrs	r1, r3, #1
 23f0116:	910a      	str	r1, [sp, #40]	; 0x28
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 23f0118:	9901      	ldr	r1, [sp, #4]
 23f011a:	ed95 7a00 	vldr	s14, [r5]
 23f011e:	edd1 7a00 	vldr	s15, [r1]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 23f0122:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
 23f0126:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
 23f012a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 23f012e:	ed91 7a01 	vldr	s14, [r1, #4]
 23f0132:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
 23f0136:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f013a:	ed96 7a00 	vldr	s14, [r6]
    float32_t * p4 = p3 + L;
 23f013e:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f0142:	edd4 4a00 	vldr	s9, [r4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f0146:	ee37 5a06 	vadd.f32	s10, s14, s12
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 23f014a:	6842      	ldr	r2, [r0, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f014c:	ee35 5a24 	vadd.f32	s10, s10, s9
{
 23f0150:	4683      	mov	fp, r0
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f0152:	4608      	mov	r0, r1
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f0154:	edd6 3a01 	vldr	s7, [r6, #4]
 23f0158:	ed94 4a01 	vldr	s8, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f015c:	ed80 5a00 	vstr	s10, [r0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 23f0160:	ed96 5a01 	vldr	s10, [r6, #4]
 23f0164:	ed94 3a01 	vldr	s6, [r4, #4]
 23f0168:	ee36 5a85 	vadd.f32	s10, s13, s10
 23f016c:	ee35 5a03 	vadd.f32	s10, s10, s6
 23f0170:	ed80 5a01 	vstr	s10, [r0, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f0174:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f0178:	3108      	adds	r1, #8
 23f017a:	9106      	str	r1, [sp, #24]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 23f017c:	4631      	mov	r1, r6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f017e:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p2++ = t2[0];
 23f0182:	3108      	adds	r1, #8
 23f0184:	910b      	str	r1, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 23f0186:	4629      	mov	r1, r5
    *p2++ = t2[0];
 23f0188:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 23f018c:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f0190:	ee35 5ac7 	vsub.f32	s10, s11, s14
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 23f0194:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 23f0198:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 23f019c:	ee37 7a25 	vadd.f32	s14, s14, s11
    *p3++ = t3[0];
 23f01a0:	3108      	adds	r1, #8
 23f01a2:	910c      	str	r1, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
 23f01a4:	4621      	mov	r1, r4
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f01a6:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 23f01aa:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 23f01ae:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 23f01b2:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 23f01b6:	ee37 7a64 	vsub.f32	s14, s14, s9
    *p4++ = t4[0];
 23f01ba:	3108      	adds	r1, #8
 23f01bc:	910d      	str	r1, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 23f01be:	f102 0108 	add.w	r1, r2, #8
 23f01c2:	9107      	str	r1, [sp, #28]
    tw3 += twMod3;
 23f01c4:	f102 0110 	add.w	r1, r2, #16
    tw4 += twMod4;
 23f01c8:	3218      	adds	r2, #24
 23f01ca:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
 23f01cc:	085a      	lsrs	r2, r3, #1
 23f01ce:	3a02      	subs	r2, #2
    *p2++ = t2[1];
 23f01d0:	ed86 5a01 	vstr	s10, [r6, #4]
    tw3 += twMod3;
 23f01d4:	9108      	str	r1, [sp, #32]
    *p3++ = t3[0];
 23f01d6:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
 23f01da:	edc5 6a01 	vstr	s13, [r5, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f01de:	ea4f 0852 	mov.w	r8, r2, lsr #1
    *p4++ = t4[0];
 23f01e2:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 23f01e6:	ed84 7a01 	vstr	s14, [r4, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f01ea:	9a07      	ldr	r2, [sp, #28]
 23f01ec:	f1a4 0904 	sub.w	r9, r4, #4
 23f01f0:	9204      	str	r2, [sp, #16]
 23f01f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f01f4:	9103      	str	r1, [sp, #12]
 23f01f6:	9202      	str	r2, [sp, #8]
 23f01f8:	9a01      	ldr	r2, [sp, #4]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 23f01fa:	f1a6 0a04 	sub.w	sl, r6, #4
 23f01fe:	f102 0e10 	add.w	lr, r2, #16
    pEnd2 = p3 - 1;
 23f0202:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
 23f0204:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 23f0208:	f106 0110 	add.w	r1, r6, #16
 23f020c:	f105 0c10 	add.w	ip, r5, #16
 23f0210:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0214:	f8cd 8014 	str.w	r8, [sp, #20]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 23f0218:	ed1c 7a02 	vldr	s14, [ip, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
 23f021c:	ed5c 3a01 	vldr	s7, [ip, #-4]
      p1ap3_0 = p1[0] + p3[0];
 23f0220:	ed5e 4a02 	vldr	s9, [lr, #-8]
      p1ap3_1 = p1[1] + p3[1];
 23f0224:	ed1e 6a01 	vldr	s12, [lr, #-4]
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f0228:	ed51 5a02 	vldr	s11, [r1, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f022c:	ed51 7a01 	vldr	s15, [r1, #-4]
      p1sp3_0 = p1[0] - p3[0];
 23f0230:	ee74 2ac7 	vsub.f32	s5, s9, s14
      p1sp3_1 = p1[1] - p3[1];
 23f0234:	ee36 5a63 	vsub.f32	s10, s12, s7
      p1ap3_0 = p1[0] + p3[0];
 23f0238:	ee74 4a87 	vadd.f32	s9, s9, s14
      p1ap3_1 = p1[1] + p3[1];
 23f023c:	ee36 6a23 	vadd.f32	s12, s12, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f0240:	ed12 4a02 	vldr	s8, [r2, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f0244:	ed12 2a01 	vldr	s4, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f0248:	ee35 3a65 	vsub.f32	s6, s10, s11
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f024c:	ee77 6aa2 	vadd.f32	s13, s15, s5
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 23f0250:	ee34 7ae5 	vsub.f32	s14, s9, s11
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 23f0254:	ee76 3a67 	vsub.f32	s7, s12, s15
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 23f0258:	ee35 5a85 	vadd.f32	s10, s11, s10
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 23f025c:	ee72 7ae7 	vsub.f32	s15, s5, s15
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f0260:	ee75 5aa4 	vadd.f32	s11, s11, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0264:	9804      	ldr	r0, [sp, #16]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23f0266:	ee76 6ac2 	vsub.f32	s13, s13, s4
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f026a:	3008      	adds	r0, #8
 23f026c:	9004      	str	r0, [sp, #16]
 23f026e:	9803      	ldr	r0, [sp, #12]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23f0270:	ee33 3a04 	vadd.f32	s6, s6, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0274:	3010      	adds	r0, #16
 23f0276:	9003      	str	r0, [sp, #12]
 23f0278:	9802      	ldr	r0, [sp, #8]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 23f027a:	ee37 7a44 	vsub.f32	s14, s14, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f027e:	3018      	adds	r0, #24
 23f0280:	9002      	str	r0, [sp, #8]
 23f0282:	9805      	ldr	r0, [sp, #20]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 23f0284:	ee73 3ac2 	vsub.f32	s7, s7, s4
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 23f0288:	ee77 7a82 	vadd.f32	s15, s15, s4
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 23f028c:	ee35 5a44 	vsub.f32	s10, s10, s8
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f0290:	ee75 5a84 	vadd.f32	s11, s11, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f0294:	f1aa 0a08 	sub.w	sl, sl, #8
 23f0298:	3f08      	subs	r7, #8
 23f029a:	f1a9 0908 	sub.w	r9, r9, #8
 23f029e:	3b08      	subs	r3, #8
 23f02a0:	f10e 0e08 	add.w	lr, lr, #8
 23f02a4:	3108      	adds	r1, #8
 23f02a6:	f10c 0c08 	add.w	ip, ip, #8
 23f02aa:	3208      	adds	r2, #8
 23f02ac:	2800      	cmp	r0, #0
 23f02ae:	d175      	bne.n	23f039c <arm_cfft_radix8by4_f32+0x2a0>
 23f02b0:	9b06      	ldr	r3, [sp, #24]
 23f02b2:	2718      	movs	r7, #24
 23f02b4:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f02b8:	edc2 5a00 	vstr	s11, [r2]
 23f02bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 23f02be:	9b07      	ldr	r3, [sp, #28]
 23f02c0:	fb07 0708 	mla	r7, r7, r8, r0
 23f02c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23f02c6:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 23f02ca:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 23f02ce:	eddc 5a01 	vldr	s11, [ip, #4]
 23f02d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 23f02d4:	9b08      	ldr	r3, [sp, #32]
 23f02d6:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
 23f02da:	980d      	ldr	r0, [sp, #52]	; 0x34
 23f02dc:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 23f02e0:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 23f02e4:	ee36 6a25 	vadd.f32	s12, s12, s11
 23f02e8:	edd8 5a01 	vldr	s11, [r8, #4]
 23f02ec:	ee36 6a25 	vadd.f32	s12, s12, s11
 23f02f0:	ed82 6a01 	vstr	s12, [r2, #4]

    /* COL 2 */
    twR = tw2[0];
    twI = tw2[1];
 23f02f4:	edd1 4a01 	vldr	s9, [r1, #4]
    twR = tw2[0];
 23f02f8:	edd1 5a00 	vldr	s11, [r1]

    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
 23f02fc:	ee24 6a83 	vmul.f32	s12, s9, s6
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 23f0300:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 23f0304:	ee66 6ae4 	vnmul.f32	s13, s13, s9
 23f0308:	eee5 6a83 	vfma.f32	s13, s11, s6
    *p2++ = m0 + m1;
 23f030c:	ed8c 6a00 	vstr	s12, [ip]
    *p2++ = m2 - m3;
 23f0310:	edcc 6a01 	vstr	s13, [ip, #4]
    /* COL 3 */
    twR = tw3[0];
    twI = tw3[1];
 23f0314:	edd3 5a01 	vldr	s11, [r3, #4]
    twR = tw3[0];
 23f0318:	ed93 6a00 	vldr	s12, [r3]

    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
 23f031c:	ee65 6aa3 	vmul.f32	s13, s11, s7
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 23f0320:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 23f0324:	ee27 7a65 	vnmul.f32	s14, s14, s11
 23f0328:	eea6 7a23 	vfma.f32	s14, s12, s7
    *p3++ = m0 + m1;
 23f032c:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
 23f0330:	ed8e 7a01 	vstr	s14, [lr, #4]
    /* COL 4 */
    twR = tw4[0];
    twI = tw4[1];
 23f0334:	ed97 6a01 	vldr	s12, [r7, #4]
    twR = tw4[0];
 23f0338:	edd7 6a00 	vldr	s13, [r7]

    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
 23f033c:	ee26 7a05 	vmul.f32	s14, s12, s10
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 23f0340:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 23f0344:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 23f0348:	eee6 7a85 	vfma.f32	s15, s13, s10
    *p4++ = m0 + m1;
 23f034c:	ed88 7a00 	vstr	s14, [r8]
    *p4++ = m2 - m3;
 23f0350:	edc8 7a01 	vstr	s15, [r8, #4]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 23f0354:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 23f0358:	f8db 2004 	ldr.w	r2, [fp, #4]
 23f035c:	9801      	ldr	r0, [sp, #4]
 23f035e:	2304      	movs	r3, #4
 23f0360:	9102      	str	r1, [sp, #8]
 23f0362:	f7ff fb99 	bl	23efa98 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 23f0366:	9902      	ldr	r1, [sp, #8]
 23f0368:	4630      	mov	r0, r6
 23f036a:	f8db 2004 	ldr.w	r2, [fp, #4]
 23f036e:	2304      	movs	r3, #4
 23f0370:	9101      	str	r1, [sp, #4]
 23f0372:	f7ff fb91 	bl	23efa98 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 23f0376:	4628      	mov	r0, r5
 23f0378:	f8db 2004 	ldr.w	r2, [fp, #4]
 23f037c:	9901      	ldr	r1, [sp, #4]
 23f037e:	2304      	movs	r3, #4
 23f0380:	f7ff fb8a 	bl	23efa98 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 23f0384:	2304      	movs	r3, #4
 23f0386:	4620      	mov	r0, r4
 23f0388:	f8db 2004 	ldr.w	r2, [fp, #4]
 23f038c:	9901      	ldr	r1, [sp, #4]
}
 23f038e:	b00f      	add	sp, #60	; 0x3c
 23f0390:	ecbd 8b04 	vpop	{d8-d9}
 23f0394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 23f0398:	f7ff bb7e 	b.w	23efa98 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23f039c:	ed4e 5a04 	vstr	s11, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 23f03a0:	ed51 5a03 	vldr	s11, [r1, #-12]
 23f03a4:	ee36 6a25 	vadd.f32	s12, s12, s11
 23f03a8:	ed52 5a03 	vldr	s11, [r2, #-12]
 23f03ac:	ee36 6a25 	vadd.f32	s12, s12, s11
 23f03b0:	ed0e 6a03 	vstr	s12, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 23f03b4:	ed99 6a01 	vldr	s12, [r9, #4]
 23f03b8:	edda 2a01 	vldr	s5, [sl, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23f03bc:	edda 4a02 	vldr	s9, [sl, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 23f03c0:	ee72 5a86 	vadd.f32	s11, s5, s12
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 23f03c4:	ee72 2ac6 	vsub.f32	s5, s5, s12
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23f03c8:	ed99 6a02 	vldr	s12, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23f03cc:	ed93 0a02 	vldr	s0, [r3, #8]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23f03d0:	ee74 8a86 	vadd.f32	s17, s9, s12
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 23f03d4:	ee74 4ac6 	vsub.f32	s9, s9, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23f03d8:	ed97 6a02 	vldr	s12, [r7, #8]
 23f03dc:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 23f03e0:	ee78 1ac6 	vsub.f32	s3, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 23f03e4:	ee36 6a28 	vadd.f32	s12, s12, s17
 23f03e8:	ee36 6a00 	vadd.f32	s12, s12, s0
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23f03ec:	ed93 4a01 	vldr	s8, [r3, #4]
 23f03f0:	ed97 8a01 	vldr	s16, [r7, #4]
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 23f03f4:	ed8a 6a02 	vstr	s12, [sl, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23f03f8:	ed97 6a01 	vldr	s12, [r7, #4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 23f03fc:	ee35 2ac8 	vsub.f32	s4, s11, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23f0400:	ee75 5a86 	vadd.f32	s11, s11, s12
 23f0404:	ed93 6a01 	vldr	s12, [r3, #4]
 23f0408:	ee75 5a86 	vadd.f32	s11, s11, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23f040c:	ee34 1ac8 	vsub.f32	s2, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23f0410:	edca 5a01 	vstr	s11, [sl, #4]
      twR = *tw2++;
 23f0414:	9804      	ldr	r0, [sp, #16]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23f0416:	ee31 1a04 	vadd.f32	s2, s2, s8
      twI = *tw2++;
 23f041a:	ed50 5a01 	vldr	s11, [r0, #-4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 23f041e:	ee32 2a44 	vsub.f32	s4, s4, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 23f0422:	ee34 4a48 	vsub.f32	s8, s8, s16
      twR = *tw2++;
 23f0426:	ed10 6a02 	vldr	s12, [r0, #-8]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 23f042a:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
 23f042e:	ee25 4a83 	vmul.f32	s8, s11, s6
      *p2++ = m0 + m1;
 23f0432:	eea6 4a26 	vfma.f32	s8, s12, s13
      *p2++ = m2 - m3;
 23f0436:	ee66 6ae5 	vnmul.f32	s13, s13, s11
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23f043a:	ee79 0a22 	vadd.f32	s1, s18, s5
      *p2++ = m2 - m3;
 23f043e:	eee6 6a03 	vfma.f32	s13, s12, s6
 23f0442:	ed41 6a03 	vstr	s13, [r1, #-12]
      m3 = t2[3] * twR;
 23f0446:	ee61 6a06 	vmul.f32	s13, s2, s12
      *pEnd2-- = m0 - m1;
 23f044a:	ee26 6a60 	vnmul.f32	s12, s12, s1
      *pEnd2-- = m2 + m3;
 23f044e:	eee0 6aa5 	vfma.f32	s13, s1, s11
      *pEnd2-- = m0 - m1;
 23f0452:	eea1 6a25 	vfma.f32	s12, s2, s11
      *p2++ = m0 + m1;
 23f0456:	ed01 4a04 	vstr	s8, [r1, #-16]
      *pEnd2-- = m0 - m1;
 23f045a:	ed87 6a02 	vstr	s12, [r7, #8]
      *pEnd2-- = m2 + m3;
 23f045e:	edc7 6a01 	vstr	s13, [r7, #4]
      twR = tw3[0];
 23f0462:	9803      	ldr	r0, [sp, #12]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 23f0464:	ee71 1ac0 	vsub.f32	s3, s3, s0
      twI = tw3[1];
 23f0468:	ed50 6a03 	vldr	s13, [r0, #-12]
      twR = tw3[0];
 23f046c:	ed10 6a04 	vldr	s12, [r0, #-16]
      m1 = t3[1] * twI;
 23f0470:	ee66 5aa3 	vmul.f32	s11, s13, s7
      *p3++ = m0 + m1;
 23f0474:	eee6 5a07 	vfma.f32	s11, s12, s14
      *p3++ = m2 - m3;
 23f0478:	ee27 7a66 	vnmul.f32	s14, s14, s13
 23f047c:	eea6 7a23 	vfma.f32	s14, s12, s7
 23f0480:	ed0c 7a03 	vstr	s14, [ip, #-12]
      m3 =  t3[3] * twI;
 23f0484:	ee21 7aa6 	vmul.f32	s14, s3, s13
      *pEnd3-- = m0 - m1;
 23f0488:	ee66 6ac2 	vnmul.f32	s13, s13, s4
      *pEnd3-- = m3 - m2;
 23f048c:	eea2 7a46 	vfms.f32	s14, s4, s12
      *pEnd3-- = m0 - m1;
 23f0490:	eee1 6ac6 	vfms.f32	s13, s3, s12
      *p3++ = m0 + m1;
 23f0494:	ed4c 5a04 	vstr	s11, [ip, #-16]
      *pEnd3-- = m0 - m1;
 23f0498:	edc9 6a02 	vstr	s13, [r9, #8]
      *pEnd3-- = m3 - m2;
 23f049c:	ed89 7a01 	vstr	s14, [r9, #4]
      twR = tw4[0];
 23f04a0:	9802      	ldr	r0, [sp, #8]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 23f04a2:	ee79 2a62 	vsub.f32	s5, s18, s5
      twR = tw4[0];
 23f04a6:	ed10 7a06 	vldr	s14, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
 23f04aa:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
      m1 = t4[1] * twI;
 23f04ae:	ee26 6a85 	vmul.f32	s12, s13, s10
      *p4++ = m0 + m1;
 23f04b2:	eea7 6a27 	vfma.f32	s12, s14, s15
      *p4++ = m2 - m3;
 23f04b6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 23f04ba:	eee7 7a05 	vfma.f32	s15, s14, s10
 23f04be:	ed42 7a03 	vstr	s15, [r2, #-12]
      m3 = t4[3] * twR;
 23f04c2:	ee64 7a87 	vmul.f32	s15, s9, s14
      *pEnd4-- = m0 - m1;
 23f04c6:	ee27 7a62 	vnmul.f32	s14, s14, s5
      *pEnd4-- = m2 + m3;
 23f04ca:	eee2 7aa6 	vfma.f32	s15, s5, s13
      *pEnd4-- = m0 - m1;
 23f04ce:	eea4 7aa6 	vfma.f32	s14, s9, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f04d2:	9805      	ldr	r0, [sp, #20]
      *p4++ = m0 + m1;
 23f04d4:	ed02 6a04 	vstr	s12, [r2, #-16]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f04d8:	3801      	subs	r0, #1
      *pEnd4-- = m0 - m1;
 23f04da:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
 23f04de:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23f04e2:	9005      	str	r0, [sp, #20]
 23f04e4:	e698      	b.n	23f0218 <arm_cfft_radix8by4_f32+0x11c>

023f04e6 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 23f04e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 23f04ea:	2a01      	cmp	r2, #1
{
 23f04ec:	4606      	mov	r6, r0
 23f04ee:	460c      	mov	r4, r1
 23f04f0:	4617      	mov	r7, r2
 23f04f2:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 23f04f4:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 23f04f6:	d03e      	beq.n	23f0576 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 23f04f8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 23f04fc:	d049      	beq.n	23f0592 <arm_cfft_f32+0xac>
 23f04fe:	d826      	bhi.n	23f054e <arm_cfft_f32+0x68>
 23f0500:	2d40      	cmp	r5, #64	; 0x40
 23f0502:	d031      	beq.n	23f0568 <arm_cfft_f32+0x82>
 23f0504:	d81c      	bhi.n	23f0540 <arm_cfft_f32+0x5a>
 23f0506:	2d10      	cmp	r5, #16
 23f0508:	d01c      	beq.n	23f0544 <arm_cfft_f32+0x5e>
 23f050a:	2d20      	cmp	r5, #32
 23f050c:	d041      	beq.n	23f0592 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 23f050e:	f1b8 0f00 	cmp.w	r8, #0
 23f0512:	d004      	beq.n	23f051e <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 23f0514:	4620      	mov	r0, r4
 23f0516:	68b2      	ldr	r2, [r6, #8]
 23f0518:	89b1      	ldrh	r1, [r6, #12]
 23f051a:	f7ff fa9c 	bl	23efa56 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 23f051e:	2f01      	cmp	r7, #1
 23f0520:	d10c      	bne.n	23f053c <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
 23f0522:	ee07 5a90 	vmov	s15, r5
 23f0526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 23f052a:	eef8 7a67 	vcvt.f32.u32	s15, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
 23f052e:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
 23f0530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
 23f0534:	42ab      	cmp	r3, r5
 23f0536:	f104 0408 	add.w	r4, r4, #8
 23f053a:	d32f      	bcc.n	23f059c <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 23f053c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 23f0540:	2d80      	cmp	r5, #128	; 0x80
 23f0542:	d1e4      	bne.n	23f050e <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 23f0544:	4621      	mov	r1, r4
 23f0546:	4630      	mov	r0, r6
 23f0548:	f7ff fd1a 	bl	23eff80 <arm_cfft_radix8by2_f32>
    break;
 23f054c:	e7df      	b.n	23f050e <arm_cfft_f32+0x28>
  switch (L)
 23f054e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 23f0552:	d01e      	beq.n	23f0592 <arm_cfft_f32+0xac>
 23f0554:	d805      	bhi.n	23f0562 <arm_cfft_f32+0x7c>
 23f0556:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f055a:	d005      	beq.n	23f0568 <arm_cfft_f32+0x82>
 23f055c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23f0560:	e7ef      	b.n	23f0542 <arm_cfft_f32+0x5c>
 23f0562:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 23f0566:	d1d2      	bne.n	23f050e <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 23f0568:	2301      	movs	r3, #1
 23f056a:	4629      	mov	r1, r5
 23f056c:	4620      	mov	r0, r4
 23f056e:	6872      	ldr	r2, [r6, #4]
 23f0570:	f7ff fa92 	bl	23efa98 <arm_radix8_butterfly_f32>
    break;
 23f0574:	e7cb      	b.n	23f050e <arm_cfft_f32+0x28>
    for (l = 0; l < L; l++)
 23f0576:	2300      	movs	r3, #0
    pSrc = p1 + 1;
 23f0578:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
 23f057a:	42ab      	cmp	r3, r5
 23f057c:	f102 0208 	add.w	r2, r2, #8
 23f0580:	d2ba      	bcs.n	23f04f8 <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
 23f0582:	ed52 7a02 	vldr	s15, [r2, #-8]
 23f0586:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 23f058a:	3301      	adds	r3, #1
      *pSrc = -*pSrc;
 23f058c:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 23f0590:	e7f3      	b.n	23f057a <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 23f0592:	4621      	mov	r1, r4
 23f0594:	4630      	mov	r0, r6
 23f0596:	f7ff fdb1 	bl	23f00fc <arm_cfft_radix8by4_f32>
    break;
 23f059a:	e7b8      	b.n	23f050e <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
 23f059c:	ed54 7a02 	vldr	s15, [r4, #-8]
 23f05a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f05a4:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
 23f05a8:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f05ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
 23f05b0:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 23f05b2:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
 23f05b6:	e7bd      	b.n	23f0534 <arm_cfft_f32+0x4e>

023f05b8 <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 23f05b8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23f0600 <arm_rms_f32+0x48>
{
 23f05bc:	b513      	push	{r0, r1, r4, lr}
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 23f05be:	460b      	mov	r3, r1
{
 23f05c0:	4614      	mov	r4, r2
 23f05c2:	eef0 6a47 	vmov.f32	s13, s14
 23f05c6:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23f05c8:	b983      	cbnz	r3, 23f05ec <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 23f05ca:	eddd 7a01 	vldr	s15, [sp, #4]
 23f05ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f05d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 23f05d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23f05da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f05de:	db0b      	blt.n	23f05f8 <arm_rms_f32+0x40>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 23f05e0:	f009 fcc0 	bl	23f9f64 <sqrtf>
 23f05e4:	ed84 0a00 	vstr	s0, [r4]
}
 23f05e8:	b002      	add	sp, #8
 23f05ea:	bd10      	pop	{r4, pc}
    in = *pSrc++;
 23f05ec:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 23f05f0:	3b01      	subs	r3, #1
    sum += ( in * in);
 23f05f2:	eea7 7aa7 	vfma.f32	s14, s15, s15
    blkCnt--;
 23f05f6:	e7e7      	b.n	23f05c8 <arm_rms_f32+0x10>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 23f05f8:	edc4 6a00 	vstr	s13, [r4]
}
 23f05fc:	e7f4      	b.n	23f05e8 <arm_rms_f32+0x30>
 23f05fe:	bf00      	nop
 23f0600:	00000000 	.word	0x00000000

023f0604 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 23f0604:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 23f0606:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23f060a:	2401      	movs	r4, #1
  outIndex = 0U;
 23f060c:	2500      	movs	r5, #0
  while (blkCnt > 0U)
 23f060e:	42a1      	cmp	r1, r4
 23f0610:	d103      	bne.n	23f061a <arm_max_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 23f0612:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 23f0616:	601d      	str	r5, [r3, #0]
}
 23f0618:	bd30      	pop	{r4, r5, pc}
    maxVal = *pSrc++;
 23f061a:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out < maxVal)
 23f061e:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f0622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0626:	bf54      	ite	pl
 23f0628:	eeb0 7a67 	vmovpl.f32	s14, s15
 23f062c:	4625      	movmi	r5, r4
  outIndex = 0U;
 23f062e:	eef0 7a47 	vmov.f32	s15, s14
 23f0632:	3401      	adds	r4, #1
 23f0634:	e7eb      	b.n	23f060e <arm_max_f32+0xa>

023f0636 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 23f0636:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 23f0638:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23f063c:	2401      	movs	r4, #1
  outIndex = 0U;
 23f063e:	2500      	movs	r5, #0
  while (blkCnt > 0U)
 23f0640:	42a1      	cmp	r1, r4
 23f0642:	d103      	bne.n	23f064c <arm_min_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 23f0644:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 23f0648:	601d      	str	r5, [r3, #0]
}
 23f064a:	bd30      	pop	{r4, r5, pc}
    minVal = *pSrc++;
 23f064c:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out > minVal)
 23f0650:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f0654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0658:	bfd4      	ite	le
 23f065a:	eeb0 7a67 	vmovle.f32	s14, s15
 23f065e:	4625      	movgt	r5, r4
  outIndex = 0U;
 23f0660:	eef0 7a47 	vmov.f32	s15, s14
 23f0664:	3401      	adds	r4, #1
 23f0666:	e7eb      	b.n	23f0640 <arm_min_f32+0xa>

023f0668 <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f0668:	0409      	lsls	r1, r1, #16
 23f066a:	4a06      	ldr	r2, [pc, #24]	; (23f0684 <AUDIO_SI_WriteReg+0x1c>)
 23f066c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23f0670:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f0674:	4b04      	ldr	r3, [pc, #16]	; (23f0688 <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23f0676:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23f0678:	6811      	ldr	r1, [r2, #0]
 23f067a:	07c9      	lsls	r1, r1, #31
 23f067c:	d501      	bpl.n	23f0682 <AUDIO_SI_WriteReg+0x1a>
 23f067e:	3b01      	subs	r3, #1
 23f0680:	d1fa      	bne.n	23f0678 <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23f0682:	4770      	bx	lr
 23f0684:	40010000 	.word	0x40010000
 23f0688:	000186a0 	.word	0x000186a0

023f068c <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23f068c:	4a06      	ldr	r2, [pc, #24]	; (23f06a8 <AUDIO_SI_ReadReg+0x1c>)
 23f068e:	0200      	lsls	r0, r0, #8
 23f0690:	f040 0010 	orr.w	r0, r0, #16
 23f0694:	6010      	str	r0, [r2, #0]
 23f0696:	4805      	ldr	r0, [pc, #20]	; (23f06ac <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23f0698:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23f069a:	06d9      	lsls	r1, r3, #27
 23f069c:	d502      	bpl.n	23f06a4 <AUDIO_SI_ReadReg+0x18>
 23f069e:	3801      	subs	r0, #1
 23f06a0:	d1fa      	bne.n	23f0698 <AUDIO_SI_ReadReg+0xc>
 23f06a2:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23f06a4:	0c18      	lsrs	r0, r3, #16
}
 23f06a6:	4770      	bx	lr
 23f06a8:	40010000 	.word	0x40010000
 23f06ac:	000186a0 	.word	0x000186a0

023f06b0 <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23f06b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f06b4:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f06b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23f06ba:	461d      	mov	r5, r3
 23f06bc:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23f06be:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23f06c2:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23f06c4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23f06c8:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f06ca:	bf4c      	ite	mi
 23f06cc:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23f06d0:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f06d4:	f015 0410 	ands.w	r4, r5, #16
{
 23f06d8:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23f06da:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f06de:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23f06e2:	d059      	beq.n	23f0798 <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23f06e4:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f06e8:	2012      	movs	r0, #18
 23f06ea:	f7ff ffbd 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23f06ee:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23f06f2:	2015      	movs	r0, #21
 23f06f4:	f7ff ffb8 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f06f8:	201b      	movs	r0, #27
 23f06fa:	f7ff ffc7 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23f06fe:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f0702:	b281      	uxth	r1, r0
 23f0704:	201b      	movs	r0, #27
 23f0706:	f7ff ffaf 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f070a:	201b      	movs	r0, #27
 23f070c:	f7ff ffbe 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23f0710:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f0714:	b281      	uxth	r1, r0
 23f0716:	201b      	movs	r0, #27
 23f0718:	f7ff ffa6 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f071c:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f0720:	2018      	movs	r0, #24
 23f0722:	f7ff ffa1 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f0726:	20fb      	movs	r0, #251	; 0xfb
 23f0728:	f7ff ffb0 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23f072c:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23f0730:	b281      	uxth	r1, r0
 23f0732:	20fb      	movs	r0, #251	; 0xfb
 23f0734:	f7ff ff98 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f0738:	2011      	movs	r0, #17
 23f073a:	f7ff ffa7 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23f073e:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f0742:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f0746:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f0748:	2011      	movs	r0, #17
 23f074a:	f7ff ff8d 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f074e:	2014      	movs	r0, #20
 23f0750:	f7ff ff9c 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23f0754:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23f0758:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23f075c:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23f075e:	2014      	movs	r0, #20
 23f0760:	f7ff ff82 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f0764:	2018      	movs	r0, #24
 23f0766:	f7ff ff91 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f076a:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f076e:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f0772:	b281      	uxth	r1, r0
 23f0774:	2018      	movs	r0, #24
 23f0776:	f7ff ff77 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f077a:	2117      	movs	r1, #23
 23f077c:	201b      	movs	r0, #27
 23f077e:	f7ff ff73 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f0782:	4649      	mov	r1, r9
 23f0784:	2017      	movs	r0, #23
 23f0786:	f7ff ff6f 	bl	23f0668 <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23f078a:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f078c:	2010      	movs	r0, #16
}
 23f078e:	b002      	add	sp, #8
 23f0790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f0794:	f7ff bf68 	b.w	23f0668 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23f0798:	2003      	movs	r0, #3
 23f079a:	f7ff ff77 	bl	23f068c <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f079e:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23f07a2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f07a6:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23f07a8:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f07aa:	f7ff ff5d 	bl	23f0668 <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f07ae:	f015 0a08 	ands.w	sl, r5, #8
 23f07b2:	d04a      	beq.n	23f084a <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23f07b4:	2018      	movs	r0, #24
 23f07b6:	f7ff ff69 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23f07ba:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f07be:	b281      	uxth	r1, r0
 23f07c0:	2018      	movs	r0, #24
 23f07c2:	f7ff ff51 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f07c6:	4620      	mov	r0, r4
 23f07c8:	f7ff ff60 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23f07cc:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f07d0:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23f07d4:	f041 0103 	orr.w	r1, r1, #3
 23f07d8:	4620      	mov	r0, r4
 23f07da:	f7ff ff45 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f07de:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23f07e2:	2001      	movs	r0, #1
 23f07e4:	f7ff ff40 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f07e8:	2002      	movs	r0, #2
 23f07ea:	f7ff ff4f 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f07ee:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f07f2:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f07f6:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f07fa:	2002      	movs	r0, #2
 23f07fc:	f7ff ff34 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f0800:	2110      	movs	r1, #16
 23f0802:	200c      	movs	r0, #12
 23f0804:	f7ff ff30 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f0808:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23f080c:	2001      	movs	r0, #1
 23f080e:	f7ff ff2b 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f0812:	2002      	movs	r0, #2
 23f0814:	f7ff ff3a 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23f0818:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f081c:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f0820:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23f0824:	2002      	movs	r0, #2
 23f0826:	f7ff ff1f 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f082a:	4620      	mov	r0, r4
 23f082c:	f7ff ff2e 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23f0830:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f0834:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23f0838:	f041 0103 	orr.w	r1, r1, #3
 23f083c:	4620      	mov	r0, r4
 23f083e:	f7ff ff13 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f0842:	2118      	movs	r1, #24
 23f0844:	200c      	movs	r0, #12
 23f0846:	f7ff ff0f 	bl	23f0668 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f084a:	f015 0405 	ands.w	r4, r5, #5
 23f084e:	d02f      	beq.n	23f08b0 <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23f0850:	2002      	movs	r0, #2
 23f0852:	f7ff ff1b 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f0856:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23f085a:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f085e:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f0860:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f0862:	f7ff ff01 	bl	23f0668 <AUDIO_SI_WriteReg>
		DelayUs(5);
 23f0866:	2005      	movs	r0, #5
 23f0868:	f00b f812 	bl	23fb890 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23f086c:	07ea      	lsls	r2, r5, #31
 23f086e:	d57f      	bpl.n	23f0970 <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23f0870:	200c      	movs	r0, #12
 23f0872:	f7ff ff0b 	bl	23f068c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23f0876:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23f087a:	b281      	uxth	r1, r0
 23f087c:	200c      	movs	r0, #12
 23f087e:	f7ff fef3 	bl	23f0668 <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23f0882:	2002      	movs	r0, #2
 23f0884:	f7ff ff02 	bl	23f068c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23f0888:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f088c:	b281      	uxth	r1, r0
 23f088e:	2002      	movs	r0, #2
 23f0890:	f7ff feea 	bl	23f0668 <AUDIO_SI_WriteReg>
			DelayUs(100);
 23f0894:	2064      	movs	r0, #100	; 0x64
 23f0896:	f00a fffb 	bl	23fb890 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23f089a:	2003      	movs	r0, #3
 23f089c:	f7ff fef6 	bl	23f068c <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f08a0:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23f08a4:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23f08a8:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f08aa:	2003      	movs	r0, #3
 23f08ac:	f7ff fedc 	bl	23f0668 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23f08b0:	f015 0f0d 	tst.w	r5, #13
 23f08b4:	d002      	beq.n	23f08bc <CODEC_Init+0x20c>
		DelayMs(200);
 23f08b6:	20c8      	movs	r0, #200	; 0xc8
 23f08b8:	f00a fff2 	bl	23fb8a0 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23f08bc:	f1ba 0f00 	cmp.w	sl, #0
 23f08c0:	d020      	beq.n	23f0904 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23f08c2:	2000      	movs	r0, #0
 23f08c4:	f7ff fee2 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23f08c8:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f08cc:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23f08d0:	f041 0103 	orr.w	r1, r1, #3
 23f08d4:	2000      	movs	r0, #0
 23f08d6:	f7ff fec7 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23f08da:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23f08de:	2001      	movs	r0, #1
 23f08e0:	f7ff fec2 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23f08e4:	2002      	movs	r0, #2
 23f08e6:	f7ff fed1 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23f08ea:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23f08ee:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23f08f2:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23f08f6:	2002      	movs	r0, #2
 23f08f8:	f7ff feb6 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23f08fc:	2110      	movs	r1, #16
 23f08fe:	200c      	movs	r0, #12
 23f0900:	f7ff feb2 	bl	23f0668 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f0904:	b16c      	cbz	r4, 23f0922 <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23f0906:	2000      	movs	r0, #0
 23f0908:	f7ff fec0 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23f090c:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23f0910:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23f0914:	b281      	uxth	r1, r0
 23f0916:	2000      	movs	r0, #0
 23f0918:	f7ff fea6 	bl	23f0668 <AUDIO_SI_WriteReg>
		DelayUs(50);
 23f091c:	2032      	movs	r0, #50	; 0x32
 23f091e:	f00a ffb7 	bl	23fb890 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23f0922:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23f0926:	2018      	movs	r0, #24
 23f0928:	f7ff fe9e 	bl	23f0668 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23f092c:	f246 3120 	movw	r1, #25376	; 0x6320
 23f0930:	2011      	movs	r0, #17
 23f0932:	f7ff fe99 	bl	23f0668 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23f0936:	f246 3120 	movw	r1, #25376	; 0x6320
 23f093a:	2014      	movs	r0, #20
 23f093c:	f7ff fe94 	bl	23f0668 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23f0940:	b364      	cbz	r4, 23f099c <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f0942:	2012      	movs	r0, #18
 23f0944:	f7ff fea2 	bl	23f068c <AUDIO_SI_ReadReg>
 23f0948:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f094a:	2015      	movs	r0, #21
 23f094c:	f7ff fe9e 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23f0950:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23f0954:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23f0958:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23f095a:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23f095e:	2e09      	cmp	r6, #9
 23f0960:	d80e      	bhi.n	23f0980 <CODEC_Init+0x2d0>
 23f0962:	e8df f006 	tbb	[pc, r6]
 23f0966:	c0bb      	.short	0xc0bb
 23f0968:	0d0db60d 	.word	0x0d0db60d
 23f096c:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23f0970:	2003      	movs	r0, #3
 23f0972:	f7ff fe8b 	bl	23f068c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23f0976:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23f097a:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23f097e:	e794      	b.n	23f08aa <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f0980:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f0984:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f0988:	2012      	movs	r0, #18
 23f098a:	f7ff fe6d 	bl	23f0668 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23f098e:	2015      	movs	r0, #21
 23f0990:	4651      	mov	r1, sl
 23f0992:	f7ff fe69 	bl	23f0668 <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23f0996:	2032      	movs	r0, #50	; 0x32
 23f0998:	f00a ff82 	bl	23fb8a0 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23f099c:	2117      	movs	r1, #23
 23f099e:	201b      	movs	r0, #27
 23f09a0:	f7ff fe62 	bl	23f0668 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23f09a4:	4649      	mov	r1, r9
 23f09a6:	2017      	movs	r0, #23
 23f09a8:	f7ff fe5e 	bl	23f0668 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23f09ac:	20fb      	movs	r0, #251	; 0xfb
 23f09ae:	f7ff fe6d 	bl	23f068c <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23f09b2:	f020 0106 	bic.w	r1, r0, #6
 23f09b6:	f041 0108 	orr.w	r1, r1, #8
 23f09ba:	b289      	uxth	r1, r1
 23f09bc:	20fb      	movs	r0, #251	; 0xfb
 23f09be:	f7ff fe53 	bl	23f0668 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23f09c2:	20fd      	movs	r0, #253	; 0xfd
 23f09c4:	f7ff fe62 	bl	23f068c <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23f09c8:	f020 0106 	bic.w	r1, r0, #6
 23f09cc:	f041 0108 	orr.w	r1, r1, #8
 23f09d0:	b289      	uxth	r1, r1
 23f09d2:	20fd      	movs	r0, #253	; 0xfd
 23f09d4:	f7ff fe48 	bl	23f0668 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23f09d8:	2027      	movs	r0, #39	; 0x27
 23f09da:	f7ff fe57 	bl	23f068c <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23f09de:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23f09e2:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23f09e4:	b90f      	cbnz	r7, 23f09ea <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23f09e6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23f09ea:	2027      	movs	r0, #39	; 0x27
 23f09ec:	f7ff fe3c 	bl	23f0668 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23f09f0:	20fa      	movs	r0, #250	; 0xfa
 23f09f2:	f7ff fe4b 	bl	23f068c <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23f09f6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23f09fa:	0540      	lsls	r0, r0, #21
 23f09fc:	0d40      	lsrs	r0, r0, #21
 23f09fe:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23f0a02:	20fa      	movs	r0, #250	; 0xfa
 23f0a04:	9101      	str	r1, [sp, #4]
 23f0a06:	f7ff fe2f 	bl	23f0668 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23f0a0a:	20fc      	movs	r0, #252	; 0xfc
 23f0a0c:	9901      	ldr	r1, [sp, #4]
 23f0a0e:	f7ff fe2b 	bl	23f0668 <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23f0a12:	07ab      	lsls	r3, r5, #30
 23f0a14:	d540      	bpl.n	23f0a98 <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23f0a16:	2011      	movs	r0, #17
 23f0a18:	f7ff fe38 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23f0a1c:	4c34      	ldr	r4, [pc, #208]	; (23f0af0 <CODEC_Init+0x440>)
 23f0a1e:	4020      	ands	r0, r4
 23f0a20:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f0a24:	f041 0119 	orr.w	r1, r1, #25
 23f0a28:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23f0a2a:	2011      	movs	r0, #17
 23f0a2c:	f7ff fe1c 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23f0a30:	2012      	movs	r0, #18
 23f0a32:	f7ff fe2b 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23f0a36:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23f0a3a:	b281      	uxth	r1, r0
 23f0a3c:	2012      	movs	r0, #18
 23f0a3e:	f7ff fe13 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23f0a42:	2014      	movs	r0, #20
 23f0a44:	f7ff fe22 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23f0a48:	4020      	ands	r0, r4
 23f0a4a:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23f0a4e:	f041 0118 	orr.w	r1, r1, #24
 23f0a52:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23f0a54:	2014      	movs	r0, #20
 23f0a56:	f7ff fe07 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23f0a5a:	2015      	movs	r0, #21
 23f0a5c:	f7ff fe16 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23f0a60:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23f0a64:	b281      	uxth	r1, r0
 23f0a66:	2015      	movs	r0, #21
 23f0a68:	f7ff fdfe 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f0a6c:	2017      	movs	r0, #23
 23f0a6e:	f7ff fe0d 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23f0a72:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23f0a76:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23f0a7a:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f0a7c:	2017      	movs	r0, #23
 23f0a7e:	f7ff fdf3 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23f0a82:	2018      	movs	r0, #24
 23f0a84:	f7ff fe02 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23f0a88:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23f0a8c:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23f0a90:	b281      	uxth	r1, r0
 23f0a92:	2018      	movs	r0, #24
 23f0a94:	f7ff fde8 	bl	23f0668 <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23f0a98:	f026 0608 	bic.w	r6, r6, #8
 23f0a9c:	2e01      	cmp	r6, #1
 23f0a9e:	d113      	bne.n	23f0ac8 <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23f0aa0:	2017      	movs	r0, #23
 23f0aa2:	f7ff fdf3 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23f0aa6:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23f0aaa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23f0aae:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23f0ab0:	2017      	movs	r0, #23
 23f0ab2:	f7ff fdd9 	bl	23f0668 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23f0ab6:	201b      	movs	r0, #27
 23f0ab8:	f7ff fde8 	bl	23f068c <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23f0abc:	f020 000c 	bic.w	r0, r0, #12
 23f0ac0:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23f0ac2:	201b      	movs	r0, #27
 23f0ac4:	f7ff fdd0 	bl	23f0668 <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23f0ac8:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23f0acc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23f0ad0:	e65c      	b.n	23f078c <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f0ad2:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f0ad6:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23f0ada:	e755      	b.n	23f0988 <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f0adc:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f0ae0:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23f0ae4:	e750      	b.n	23f0988 <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23f0ae6:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23f0aea:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23f0aee:	e74b      	b.n	23f0988 <CODEC_Init+0x2d8>
 23f0af0:	ffffdffe 	.word	0xffffdffe

023f0af4 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23f0af4:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f0af6:	4a05      	ldr	r2, [pc, #20]	; (23f0b0c <sp_get_ready_rx_page+0x18>)
 23f0af8:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23f0afc:	434b      	muls	r3, r1
 23f0afe:	18d1      	adds	r1, r2, r3
 23f0b00:	5cd3      	ldrb	r3, [r2, r3]
 23f0b02:	b90b      	cbnz	r3, 23f0b08 <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23f0b04:	6848      	ldr	r0, [r1, #4]
 23f0b06:	4770      	bx	lr
		return NULL;
 23f0b08:	2000      	movs	r0, #0
	}
}
 23f0b0a:	4770      	bx	lr
 23f0b0c:	1007a5a0 	.word	0x1007a5a0

023f0b10 <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23f0b10:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f0b12:	4d0c      	ldr	r5, [pc, #48]	; (23f0b44 <sp_read_rx_page+0x34>)
{
 23f0b14:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23f0b16:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23f0b1a:	b128      	cbz	r0, 23f0b28 <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23f0b1c:	230c      	movs	r3, #12
 23f0b1e:	fb03 5304 	mla	r3, r3, r4, r5
 23f0b22:	6859      	ldr	r1, [r3, #4]
 23f0b24:	f00a fd0f 	bl	23fb546 <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23f0b28:	230c      	movs	r3, #12
 23f0b2a:	2201      	movs	r2, #1
 23f0b2c:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23f0b2e:	4414      	add	r4, r2
 23f0b30:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23f0b32:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23f0b34:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23f0b36:	bf0a      	itet	eq
 23f0b38:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23f0b3a:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23f0b3e:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23f0b42:	bd38      	pop	{r3, r4, r5, pc}
 23f0b44:	1007a5a0 	.word	0x1007a5a0

023f0b48 <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23f0b48:	4a09      	ldr	r2, [pc, #36]	; (23f0b70 <sp_release_rx_page+0x28>)
 23f0b4a:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23f0b4e:	b969      	cbnz	r1, 23f0b6c <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23f0b50:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f0b52:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23f0b56:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23f0b58:	3301      	adds	r3, #1
 23f0b5a:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f0b5c:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23f0b5e:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23f0b60:	d002      	beq.n	23f0b68 <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23f0b62:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23f0b66:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23f0b68:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23f0b6c:	4770      	bx	lr
 23f0b6e:	bf00      	nop
 23f0b70:	1007a5a0 	.word	0x1007a5a0

023f0b74 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23f0b74:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f0b76:	4b08      	ldr	r3, [pc, #32]	; (23f0b98 <sp_get_free_rx_page+0x24>)
 23f0b78:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23f0b7c:	434a      	muls	r2, r1
 23f0b7e:	1899      	adds	r1, r3, r2
 23f0b80:	5c9a      	ldrb	r2, [r3, r2]
 23f0b82:	b122      	cbz	r2, 23f0b8e <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23f0b84:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23f0b86:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23f0b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23f0b8c:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23f0b8e:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23f0b90:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23f0b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23f0b96:	4770      	bx	lr
 23f0b98:	1007a5a0 	.word	0x1007a5a0

023f0b9c <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23f0b9c:	4b06      	ldr	r3, [pc, #24]	; (23f0bb8 <sp_get_free_rx_length+0x1c>)
 23f0b9e:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23f0ba2:	b10a      	cbz	r2, 23f0ba8 <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23f0ba4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23f0ba6:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23f0ba8:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23f0baa:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23f0bae:	fb01 3302 	mla	r3, r1, r2, r3
 23f0bb2:	6898      	ldr	r0, [r3, #8]
	}
}
 23f0bb4:	4770      	bx	lr
 23f0bb6:	bf00      	nop
 23f0bb8:	1007a5a0 	.word	0x1007a5a0

023f0bbc <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23f0bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f0bbe:	4b21      	ldr	r3, [pc, #132]	; (23f0c44 <sp_rx_complete+0x88>)
 23f0bc0:	4604      	mov	r4, r0
 23f0bc2:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f0bc4:	03d8      	lsls	r0, r3, #15
 23f0bc6:	d51a      	bpl.n	23f0bfe <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23f0bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23f0bca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f0bcc:	06d9      	lsls	r1, r3, #27
 23f0bce:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23f0bd2:	d008      	beq.n	23f0be6 <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f0bd4:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f0bd8:	3b01      	subs	r3, #1
 23f0bda:	4413      	add	r3, r2
 23f0bdc:	f023 031f 	bic.w	r3, r3, #31
 23f0be0:	3320      	adds	r3, #32
 23f0be2:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f0be4:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f0be6:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23f0bea:	4816      	ldr	r0, [pc, #88]	; (23f0c44 <sp_rx_complete+0x88>)
 23f0bec:	4413      	add	r3, r2
    while (op_size > 0) {
 23f0bee:	2a00      	cmp	r2, #0
 23f0bf0:	eba3 0102 	sub.w	r1, r3, r2
 23f0bf4:	dc21      	bgt.n	23f0c3a <sp_rx_complete+0x7e>
 23f0bf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f0bfa:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23f0bfe:	7861      	ldrb	r1, [r4, #1]
 23f0c00:	4b11      	ldr	r3, [pc, #68]	; (23f0c48 <sp_rx_complete+0x8c>)
 23f0c02:	7820      	ldrb	r0, [r4, #0]
 23f0c04:	4798      	blx	r3

	sp_release_rx_page();
 23f0c06:	f7ff ff9f 	bl	23f0b48 <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23f0c0a:	f7ff ffb3 	bl	23f0b74 <sp_get_free_rx_page>
 23f0c0e:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23f0c10:	f7ff ffc4 	bl	23f0b9c <sp_get_free_rx_length>
 23f0c14:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23f0c16:	9a01      	ldr	r2, [sp, #4]
 23f0c18:	7861      	ldrb	r1, [r4, #1]
 23f0c1a:	7820      	ldrb	r0, [r4, #0]
 23f0c1c:	4b0b      	ldr	r3, [pc, #44]	; (23f0c4c <sp_rx_complete+0x90>)
 23f0c1e:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23f0c20:	7861      	ldrb	r1, [r4, #1]
 23f0c22:	7820      	ldrb	r0, [r4, #0]
 23f0c24:	08aa      	lsrs	r2, r5, #2
 23f0c26:	4b0a      	ldr	r3, [pc, #40]	; (23f0c50 <sp_rx_complete+0x94>)
 23f0c28:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f0c2a:	2201      	movs	r2, #1
 23f0c2c:	7861      	ldrb	r1, [r4, #1]
 23f0c2e:	7820      	ldrb	r0, [r4, #0]
 23f0c30:	4b08      	ldr	r3, [pc, #32]	; (23f0c54 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23f0c32:	b003      	add	sp, #12
 23f0c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f0c38:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23f0c3a:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f0c3e:	3a20      	subs	r2, #32
 23f0c40:	e7d5      	b.n	23f0bee <sp_rx_complete+0x32>
 23f0c42:	bf00      	nop
 23f0c44:	e000ed00 	.word	0xe000ed00
 23f0c48:	1010bda5 	.word	0x1010bda5
 23f0c4c:	1010c2b9 	.word	0x1010c2b9
 23f0c50:	1010c309 	.word	0x1010c309
 23f0c54:	1010bf91 	.word	0x1010bf91

023f0c58 <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23f0c58:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23f0c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23f0c5e:	d01c      	beq.n	23f0c9a <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23f0c60:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23f0c64:	bf14      	ite	ne
 23f0c66:	2505      	movne	r5, #5
 23f0c68:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f0c6a:	4b37      	ldr	r3, [pc, #220]	; (23f0d48 <dmic_setup+0xf0>)
 23f0c6c:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f0c6e:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23f0c72:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23f0c74:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23f0c78:	2201      	movs	r2, #1
 23f0c7a:	4608      	mov	r0, r1
 23f0c7c:	4f33      	ldr	r7, [pc, #204]	; (23f0d4c <dmic_setup+0xf4>)
 23f0c7e:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23f0c80:	4933      	ldr	r1, [pc, #204]	; (23f0d50 <dmic_setup+0xf8>)
 23f0c82:	2201      	movs	r2, #1
 23f0c84:	4608      	mov	r0, r1
 23f0c86:	47b8      	blx	r7
 23f0c88:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23f0c8a:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23f0c8c:	2b04      	cmp	r3, #4
 23f0c8e:	d807      	bhi.n	23f0ca0 <dmic_setup+0x48>
 23f0c90:	e8df f003 	tbb	[pc, r3]
 23f0c94:	06560605 	.word	0x06560605
 23f0c98:	58          	.byte	0x58
 23f0c99:	00          	.byte	0x00
	switch(sampleRate) {
 23f0c9a:	2507      	movs	r5, #7
 23f0c9c:	e7e5      	b.n	23f0c6a <dmic_setup+0x12>
			div = 12;
 23f0c9e:	260c      	movs	r6, #12
	PLL_Div(div);
 23f0ca0:	4630      	mov	r0, r6
 23f0ca2:	f008 fc97 	bl	23f95d4 <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23f0ca6:	2302      	movs	r3, #2
 23f0ca8:	4622      	mov	r2, r4
 23f0caa:	4628      	mov	r0, r5
 23f0cac:	2100      	movs	r1, #0
 23f0cae:	f7ff fcff 	bl	23f06b0 <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23f0cb2:	4d28      	ldr	r5, [pc, #160]	; (23f0d54 <dmic_setup+0xfc>)
 23f0cb4:	2100      	movs	r1, #0
 23f0cb6:	2021      	movs	r0, #33	; 0x21
 23f0cb8:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23f0cba:	2100      	movs	r1, #0
 23f0cbc:	2022      	movs	r0, #34	; 0x22
 23f0cbe:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23f0cc0:	4d25      	ldr	r5, [pc, #148]	; (23f0d58 <dmic_setup+0x100>)
 23f0cc2:	210c      	movs	r1, #12
 23f0cc4:	2021      	movs	r0, #33	; 0x21
 23f0cc6:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23f0cc8:	210c      	movs	r1, #12
 23f0cca:	2022      	movs	r0, #34	; 0x22
 23f0ccc:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f0cce:	4b23      	ldr	r3, [pc, #140]	; (23f0d5c <dmic_setup+0x104>)
 23f0cd0:	4a23      	ldr	r2, [pc, #140]	; (23f0d60 <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f0cd2:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23f0cd4:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23f0cd6:	2280      	movs	r2, #128	; 0x80
 23f0cd8:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23f0cda:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f0cdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f0ce0:	4920      	ldr	r1, [pc, #128]	; (23f0d64 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23f0ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23f0ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f0ce8:	3201      	adds	r2, #1
 23f0cea:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23f0cec:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23f0cf0:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23f0cf2:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23f0cf6:	f103 030c 	add.w	r3, r3, #12
 23f0cfa:	d1f5      	bne.n	23f0ce8 <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f0cfc:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23f0cfe:	4d1a      	ldr	r5, [pc, #104]	; (23f0d68 <dmic_setup+0x110>)
 23f0d00:	4b1a      	ldr	r3, [pc, #104]	; (23f0d6c <dmic_setup+0x114>)
 23f0d02:	4628      	mov	r0, r5
 23f0d04:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f0d06:	4629      	mov	r1, r5
 23f0d08:	4819      	ldr	r0, [pc, #100]	; (23f0d70 <dmic_setup+0x118>)
 23f0d0a:	4b1a      	ldr	r3, [pc, #104]	; (23f0d74 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23f0d0c:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23f0d0e:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23f0d10:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23f0d12:	2101      	movs	r1, #1
 23f0d14:	4816      	ldr	r0, [pc, #88]	; (23f0d70 <dmic_setup+0x118>)
 23f0d16:	4b18      	ldr	r3, [pc, #96]	; (23f0d78 <dmic_setup+0x120>)
 23f0d18:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23f0d1a:	2101      	movs	r1, #1
 23f0d1c:	4b17      	ldr	r3, [pc, #92]	; (23f0d7c <dmic_setup+0x124>)
 23f0d1e:	4814      	ldr	r0, [pc, #80]	; (23f0d70 <dmic_setup+0x118>)
 23f0d20:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23f0d22:	f7ff ff27 	bl	23f0b74 <sp_get_free_rx_page>
 23f0d26:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23f0d28:	f7ff ff38 	bl	23f0b9c <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23f0d2c:	4a14      	ldr	r2, [pc, #80]	; (23f0d80 <dmic_setup+0x128>)
 23f0d2e:	e9cd 4000 	strd	r4, r0, [sp]
 23f0d32:	4611      	mov	r1, r2
 23f0d34:	4630      	mov	r0, r6
 23f0d36:	4b13      	ldr	r3, [pc, #76]	; (23f0d84 <dmic_setup+0x12c>)
 23f0d38:	4c13      	ldr	r4, [pc, #76]	; (23f0d88 <dmic_setup+0x130>)
 23f0d3a:	47a0      	blx	r4

    // Particle.connect();
}
 23f0d3c:	b003      	add	sp, #12
 23f0d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23f0d40:	2618      	movs	r6, #24
			break;
 23f0d42:	e7ad      	b.n	23f0ca0 <dmic_setup+0x48>
			div = 48;
 23f0d44:	2630      	movs	r6, #48	; 0x30
			break;
 23f0d46:	e7ab      	b.n	23f0ca0 <dmic_setup+0x48>
 23f0d48:	023f95ed 	.word	0x023f95ed
 23f0d4c:	10110039 	.word	0x10110039
 23f0d50:	40080000 	.word	0x40080000
 23f0d54:	1010cf99 	.word	0x1010cf99
 23f0d58:	1010cfb9 	.word	0x1010cfb9
 23f0d5c:	1007a5a0 	.word	0x1007a5a0
 23f0d60:	1007a520 	.word	0x1007a520
 23f0d64:	10079ca0 	.word	0x10079ca0
 23f0d68:	1007a4f4 	.word	0x1007a4f4
 23f0d6c:	023f96a1 	.word	0x023f96a1
 23f0d70:	40010800 	.word	0x40010800
 23f0d74:	023f96f5 	.word	0x023f96f5
 23f0d78:	023f9795 	.word	0x023f9795
 23f0d7c:	023f96d1 	.word	0x023f96d1
 23f0d80:	1007a4a0 	.word	0x1007a4a0
 23f0d84:	023f0bbd 	.word	0x023f0bbd
 23f0d88:	023f97b9 	.word	0x023f97b9

023f0d8c <dmic_flush>:


void dmic_flush() {
 23f0d8c:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23f0d8e:	f7ff feb1 	bl	23f0af4 <sp_get_ready_rx_page>
 23f0d92:	b900      	cbnz	r0, 23f0d96 <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23f0d94:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23f0d96:	2100      	movs	r1, #0
 23f0d98:	4608      	mov	r0, r1
 23f0d9a:	f7ff feb9 	bl	23f0b10 <sp_read_rx_page>
 23f0d9e:	e7f6      	b.n	23f0d8e <dmic_flush+0x2>

023f0da0 <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23f0da0:	f7ff bea8 	b.w	23f0af4 <sp_get_ready_rx_page>

023f0da4 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23f0da4:	f7ff beb4 	b.w	23f0b10 <sp_read_rx_page>

023f0da8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f0da8:	4770      	bx	lr
	...

023f0dac <_ZN2ei5numpy19dequantize_zero_oneEh>:
    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
        return quantized_values_one_zero[value];
 23f0dac:	4b02      	ldr	r3, [pc, #8]	; (23f0db8 <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
 23f0dae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
 23f0db2:	ed90 0a00 	vldr	s0, [r0]
 23f0db6:	4770      	bx	lr
 23f0db8:	023fccb0 	.word	0x023fccb0

023f0dbc <_ZNSt17_Function_handlerIFvPvjEZL27microphone_inference_recordvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23f0dbc:	4770      	bx	lr
	...

023f0dc0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 23f0dc0:	fefb 7a40 	vrintm.f32	s15, s0
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
        if (v > floor(v) && v - floor(v) < 0.001f) {
 23f0dc4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23f0dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0dcc:	dd08      	ble.n	23f0de0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x20>
 23f0dce:	ee30 7a67 	vsub.f32	s14, s0, s15
 23f0dd2:	eddf 6a06 	vldr	s13, [pc, #24]	; 23f0dec <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x2c>
 23f0dd6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 23f0dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0dde:	d401      	bmi.n	23f0de4 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x24>
  { return __builtin_ceilf(__x); }
 23f0de0:	fefa 7a40 	vrintp.f32	s15, s0
        }
        else {
            v = (ceil(v));
        }
        return v;
    }
 23f0de4:	eeb0 0a67 	vmov.f32	s0, s15
 23f0de8:	4770      	bx	lr
 23f0dea:	bf00      	nop
 23f0dec:	3a83126f 	.word	0x3a83126f

023f0df0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
        const float noise = static_cast<float>(noise_floor_db * -1);
 23f0df0:	4249      	negs	r1, r1
 23f0df2:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0df6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
 23f0dfa:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23f0dfe:	e9d9 8900 	ldrd	r8, r9, [r9]
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0e02:	ed2d 8b06 	vpush	{d8-d10}
        const float noise = static_cast<float>(noise_floor_db * -1);
 23f0e06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 23f0e0a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 23f0e0e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 23f0e12:	ee78 7a27 	vadd.f32	s15, s16, s15
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0e16:	4604      	mov	r4, r0
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 23f0e18:	ee89 aaa7 	vdiv.f32	s20, s19, s15
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23f0e1c:	2500      	movs	r5, #0
                f = 1e-30;
 23f0e1e:	ed9f 9a32 	vldr	s18, [pc, #200]	; 23f0ee8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
    {
        int e;
        float f = frexpf(fabsf(a), &e);
        float y = 1.23149591368684f;
        y *= f;
        y += -4.11852516267426f;
 23f0e22:	eddf aa32 	vldr	s21, [pc, #200]	; 23f0eec <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23f0e26:	b082      	sub	sp, #8
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23f0e28:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23f0e2c:	4353      	muls	r3, r2
 23f0e2e:	42ab      	cmp	r3, r5
 23f0e30:	d952      	bls.n	23f0ed8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe8>
            float f = features_matrix->buffer[ix];
 23f0e32:	6826      	ldr	r6, [r4, #0]
 23f0e34:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 23f0e38:	edd6 8a00 	vldr	s17, [r6]
            if (f < 1e-30) {
 23f0e3c:	ee18 0a90 	vmov	r0, s17
 23f0e40:	f7fb feda 	bl	23ecbf8 <__aeabi_f2d>
 23f0e44:	4642      	mov	r2, r8
 23f0e46:	464b      	mov	r3, r9
 23f0e48:	f7fc f9a0 	bl	23ed18c <__aeabi_dcmplt>
                f = 1e-30;
 23f0e4c:	2800      	cmp	r0, #0
 23f0e4e:	fe48 8a89 	vseleq.f32	s17, s17, s18
        float f = frexpf(fabsf(a), &e);
 23f0e52:	eeb0 0ae8 	vabs.f32	s0, s17
 23f0e56:	a801      	add	r0, sp, #4
 23f0e58:	f008 ffde 	bl	23f9e18 <frexpf>
        y += -4.11852516267426f;
 23f0e5c:	eddf 7a24 	vldr	s15, [pc, #144]	; 23f0ef0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
        y *= f;
        y += 6.02197014179219f;
        y *= f;
        y += -3.13396450166353f;
 23f0e60:	ed9f 7a24 	vldr	s14, [pc, #144]	; 23f0ef4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
        y += -4.11852516267426f;
 23f0e64:	eee0 7a2a 	vfma.f32	s15, s0, s21
        y += 6.02197014179219f;
 23f0e68:	eddf 6a23 	vldr	s13, [pc, #140]	; 23f0ef8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
 23f0e6c:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
 23f0e70:	eef0 7a47 	vmov.f32	s15, s14
        y += e;
 23f0e74:	ed9d 7a01 	vldr	s14, [sp, #4]
        y += -3.13396450166353f;
 23f0e78:	eee0 7a26 	vfma.f32	s15, s0, s13
        y += e;
 23f0e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 23f0e80:	ee37 7a27 	vadd.f32	s14, s14, s15
     * @param a Input number
     * @returns Log10 value of a
     */
    __attribute__((always_inline)) static inline float log10(float a)
    {
        return numpy::log2(a) * 0.3010299956639812f;
 23f0e84:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23f0efc <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
 23f0e88:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 23f0e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 23f0e90:	eef0 7a48 	vmov.f32	s15, s16
 23f0e94:	eee7 7a26 	vfma.f32	s15, s14, s13
            # clip to 2**8
            mfe = np.clip(mfe, 0, 255)
            mfe = np.float32(mfe / 2**8)
            */

            f = roundf(f*256)/256;
 23f0e98:	ed9f 7a19 	vldr	s14, [pc, #100]	; 23f0f00 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x110>
            f *= noise_scale;
 23f0e9c:	ee6a 7a27 	vmul.f32	s15, s20, s15
            f = roundf(f*256)/256;
 23f0ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f0ea4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 23f0f04 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x114>
 23f0ea8:	fef8 7a67 	vrinta.f32	s15, s15
 23f0eac:	ee67 7a87 	vmul.f32	s15, s15, s14

            if (f < 0.0f) f = 0.0f;
 23f0eb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f0eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0eb8:	d40b      	bmi.n	23f0ed2 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe2>
            else if (f > 1.0f) f = 1.0f;
 23f0eba:	eef4 7a69 	vcmp.f32	s15, s19
 23f0ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23f0ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0ec6:	fe77 7a27 	vselgt.f32	s15, s14, s15
            features_matrix->buffer[ix] = f;
 23f0eca:	edc6 7a00 	vstr	s15, [r6]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23f0ece:	3501      	adds	r5, #1
 23f0ed0:	e7aa      	b.n	23f0e28 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x38>
            if (f < 0.0f) f = 0.0f;
 23f0ed2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23f0f08 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x118>
 23f0ed6:	e7f8      	b.n	23f0eca <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xda>
        }

        return EIDSP_OK;
    }
 23f0ed8:	2000      	movs	r0, #0
 23f0eda:	b002      	add	sp, #8
 23f0edc:	ecbd 8b06 	vpop	{d8-d10}
 23f0ee0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 23f0ee4:	f3af 8000 	nop.w
 23f0ee8:	0da24260 	.word	0x0da24260
 23f0eec:	3f9da1a8 	.word	0x3f9da1a8
 23f0ef0:	c083caf5 	.word	0xc083caf5
 23f0ef4:	c04892e0 	.word	0xc04892e0
 23f0ef8:	40c0b3fb 	.word	0x40c0b3fb
 23f0efc:	3e9a209b 	.word	0x3e9a209b
 23f0f00:	43800000 	.word	0x43800000
 23f0f04:	3b800000 	.word	0x3b800000
 23f0f08:	00000000 	.word	0x00000000
 23f0f0c:	feebc2a0 	.word	0xfeebc2a0
 23f0f10:	39b4484b 	.word	0x39b4484b

023f0f14 <_ZL32microphone_audio_signal_get_datajjPf>:

/**
 * Get raw audio signal data
 */
static int microphone_audio_signal_get_data(size_t offset, size_t length, float *out_ptr)
{
 23f0f14:	b510      	push	{r4, lr}
 23f0f16:	460c      	mov	r4, r1
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
 23f0f18:	4b04      	ldr	r3, [pc, #16]	; (23f0f2c <_ZL32microphone_audio_signal_get_datajjPf+0x18>)
{
 23f0f1a:	4611      	mov	r1, r2
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
 23f0f1c:	681b      	ldr	r3, [r3, #0]
        arm_q15_to_float((q15_t *)input, output, length);
 23f0f1e:	4622      	mov	r2, r4
 23f0f20:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 23f0f24:	f7fe fc9e 	bl	23ef864 <arm_q15_to_float>

    return 0;
}
 23f0f28:	2000      	movs	r0, #0
 23f0f2a:	bd10      	pop	{r4, pc}
 23f0f2c:	1007a5e8 	.word	0x1007a5e8

023f0f30 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 23f0f30:	b508      	push	{r3, lr}
	assert(ptr);
 23f0f32:	b928      	cbnz	r0, 23f0f40 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
 23f0f34:	215a      	movs	r1, #90	; 0x5a
 23f0f36:	4b06      	ldr	r3, [pc, #24]	; (23f0f50 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
 23f0f38:	4a06      	ldr	r2, [pc, #24]	; (23f0f54 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
 23f0f3a:	4807      	ldr	r0, [pc, #28]	; (23f0f58 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
 23f0f3c:	f006 fb98 	bl	23f7670 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 23f0f40:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
 23f0f44:	1ac0      	subs	r0, r0, r3
}
 23f0f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
 23f0f4a:	f003 b8e2 	b.w	23f4112 <_Z7ei_freePv>
 23f0f4e:	bf00      	nop
 23f0f50:	023ff5ac 	.word	0x023ff5ac
 23f0f54:	023fc4f6 	.word	0x023fc4f6
 23f0f58:	023fc51f 	.word	0x023fc51f

023f0f5c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
 23f0f5c:	1e43      	subs	r3, r0, #1
 23f0f5e:	4203      	tst	r3, r0
{
 23f0f60:	b510      	push	{r4, lr}
 23f0f62:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
 23f0f64:	d005      	beq.n	23f0f72 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
 23f0f66:	2137      	movs	r1, #55	; 0x37
 23f0f68:	4b0c      	ldr	r3, [pc, #48]	; (23f0f9c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
 23f0f6a:	4a0d      	ldr	r2, [pc, #52]	; (23f0fa0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
 23f0f6c:	480d      	ldr	r0, [pc, #52]	; (23f0fa4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
 23f0f6e:	f006 fb7f 	bl	23f7670 <__assert_func>
	if(align && size)
 23f0f72:	b910      	cbnz	r0, 23f0f7a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
 23f0f74:	2400      	movs	r4, #0
}
 23f0f76:	4620      	mov	r0, r4
 23f0f78:	bd10      	pop	{r4, pc}
	if(align && size)
 23f0f7a:	2900      	cmp	r1, #0
 23f0f7c:	d0fa      	beq.n	23f0f74 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
 23f0f7e:	1c48      	adds	r0, r1, #1
 23f0f80:	4420      	add	r0, r4
 23f0f82:	2101      	movs	r1, #1
 23f0f84:	f003 f8c3 	bl	23f410e <_Z9ei_callocjj>
		if(p)
 23f0f88:	2800      	cmp	r0, #0
 23f0f8a:	d0f3      	beq.n	23f0f74 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 23f0f8c:	1c63      	adds	r3, r4, #1
 23f0f8e:	4403      	add	r3, r0
 23f0f90:	4264      	negs	r4, r4
 23f0f92:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 23f0f94:	1a20      	subs	r0, r4, r0
 23f0f96:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
 23f0f9a:	e7ec      	b.n	23f0f76 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
 23f0f9c:	023fc58f 	.word	0x023fc58f
 23f0fa0:	023fc5aa 	.word	0x023fc5aa
 23f0fa4:	023fc51f 	.word	0x023fc51f

023f0fa8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
 23f0fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 23f0faa:	6842      	ldr	r2, [r0, #4]
 23f0fac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23f0fb0:	d217      	bcs.n	23f0fe2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
 23f0fb2:	6883      	ldr	r3, [r0, #8]
 23f0fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 23f0fb8:	d213      	bcs.n	23f0fe2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0fba:	6801      	ldr	r1, [r0, #0]
 23f0fbc:	b292      	uxth	r2, r2
 23f0fbe:	b29b      	uxth	r3, r3
 23f0fc0:	9101      	str	r1, [sp, #4]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0fc2:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23f0fc4:	4668      	mov	r0, sp
 23f0fc6:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0fc8:	f8ad 2000 	strh.w	r2, [sp]
 23f0fcc:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f0fd0:	f8ad 2008 	strh.w	r2, [sp, #8]
 23f0fd4:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23f0fd8:	f7fe fc56 	bl	23ef888 <arm_mat_scale_f32>
    }
 23f0fdc:	b005      	add	sp, #20
 23f0fde:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
 23f0fe2:	4801      	ldr	r0, [pc, #4]	; (23f0fe8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
 23f0fe4:	e7fa      	b.n	23f0fdc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
 23f0fe6:	bf00      	nop
 23f0fe8:	fffffc0c 	.word	0xfffffc0c

023f0fec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
 23f0fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0ff0:	4688      	mov	r8, r1
 23f0ff2:	4617      	mov	r7, r2
 23f0ff4:	461e      	mov	r6, r3
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f0ff6:	6905      	ldr	r5, [r0, #16]
static EI_IMPULSE_ERROR inference_tflite_setup(
 23f0ff8:	4604      	mov	r4, r0

    *ctx_start_us = ei_read_timer_us();
 23f0ffa:	f003 f853 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f0ffe:	e9c8 0100 	strd	r0, r1, [r8]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 23f1002:	4814      	ldr	r0, [pc, #80]	; (23f1054 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x68>)
 23f1004:	686b      	ldr	r3, [r5, #4]
 23f1006:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
 23f1008:	4601      	mov	r1, r0
 23f100a:	b130      	cbz	r0, 23f101a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 23f100c:	4812      	ldr	r0, [pc, #72]	; (23f1058 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x6c>)
 23f100e:	f003 f84f 	bl	23f40b0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 23f1012:	f06f 0005 	mvn.w	r0, #5
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
}
 23f1016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = graph_config->model_input(0, input);
 23f101a:	4639      	mov	r1, r7
 23f101c:	692b      	ldr	r3, [r5, #16]
 23f101e:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23f1020:	b9a8      	cbnz	r0, 23f104e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    status = graph_config->model_output(block_config->output_data_tensor, output);
 23f1022:	4631      	mov	r1, r6
 23f1024:	696b      	ldr	r3, [r5, #20]
 23f1026:	7aa0      	ldrb	r0, [r4, #10]
 23f1028:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23f102a:	b980      	cbnz	r0, 23f104e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 23f102c:	f994 3009 	ldrsb.w	r3, [r4, #9]
 23f1030:	2b01      	cmp	r3, #1
 23f1032:	d001      	beq.n	23f1038 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4c>
    return EI_IMPULSE_OK;
 23f1034:	2000      	movs	r0, #0
 23f1036:	e7ee      	b.n	23f1016 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2a>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 23f1038:	696b      	ldr	r3, [r5, #20]
 23f103a:	9907      	ldr	r1, [sp, #28]
 23f103c:	7b20      	ldrb	r0, [r4, #12]
 23f103e:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23f1040:	b928      	cbnz	r0, 23f104e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 23f1042:	696b      	ldr	r3, [r5, #20]
 23f1044:	9906      	ldr	r1, [sp, #24]
 23f1046:	7ae0      	ldrb	r0, [r4, #11]
 23f1048:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23f104a:	2800      	cmp	r0, #0
 23f104c:	d0f2      	beq.n	23f1034 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x48>
            return EI_IMPULSE_TFLITE_ERROR;
 23f104e:	f06f 0002 	mvn.w	r0, #2
 23f1052:	e7e0      	b.n	23f1016 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2a>
 23f1054:	023f0f5d 	.word	0x023f0f5d
 23f1058:	023fc5df 	.word	0x023fc5df

023f105c <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>:
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f105c:	ee07 1a90 	vmov	s15, r1
 23f1060:	eef8 7a67 	vcvt.f32.u32	s15, s15
        if (version == 1) {
 23f1064:	2a01      	cmp	r2, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f1066:	ee20 0a27 	vmul.f32	s0, s0, s15
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 23f106a:	ee60 0aa7 	vmul.f32	s1, s1, s15
    static int32_t calculate_no_of_stack_frames(
 23f106e:	b507      	push	{r0, r1, r2, lr}
        if (version == 1) {
 23f1070:	d118      	bne.n	23f10a4 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x48>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 23f1072:	feb8 0a40 	vrinta.f32	s0, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f1076:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f107a:	feb8 0a60 	vrinta.f32	s0, s1
 23f107e:	ee17 3a90 	vmov	r3, s15
                floor(static_cast<float>(signal_size - length) / frame_stride));
 23f1082:	1ac0      	subs	r0, r0, r3
 23f1084:	ee07 0a90 	vmov	s15, r0
 23f1088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f108c:	ee87 7a80 	vdiv.f32	s14, s15, s0
  { return __builtin_floorf(__x); }
 23f1090:	fefb 7a47 	vrintm.f32	s15, s14
            numframes = static_cast<int>(
 23f1094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f1098:	edcd 7a01 	vstr	s15, [sp, #4]
        return numframes;
 23f109c:	9801      	ldr	r0, [sp, #4]
    }
 23f109e:	b003      	add	sp, #12
 23f10a0:	f85d fb04 	ldr.w	pc, [sp], #4
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f10a4:	f7ff fe8c 	bl	23f0dc0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 23f10a8:	eeb0 6a40 	vmov.f32	s12, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f10ac:	eeb0 0a60 	vmov.f32	s0, s1
 23f10b0:	f7ff fe86 	bl	23f0dc0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f10b4:	eebd 6ac6 	vcvt.s32.f32	s12, s12
            length = (frame_sample_length - (int)frame_stride);
 23f10b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f10bc:	ee16 2a10 	vmov	r2, s12
 23f10c0:	ee17 3a90 	vmov	r3, s15
 23f10c4:	1ad3      	subs	r3, r2, r3
 23f10c6:	e7dc      	b.n	23f1082 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x26>

023f10c8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 23f10c8:	2a01      	cmp	r2, #1
 23f10ca:	d102      	bne.n	23f10d2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f10cc:	6001      	str	r1, [r0, #0]
      }
 23f10ce:	2000      	movs	r0, #0
 23f10d0:	4770      	bx	lr
	  switch (__op)
 23f10d2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f10d4:	bf04      	itt	eq
 23f10d6:	680b      	ldreq	r3, [r1, #0]
 23f10d8:	6003      	streq	r3, [r0, #0]
	      break;
 23f10da:	e7f8      	b.n	23f10ce <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023f10dc <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f10dc:	2a01      	cmp	r2, #1
 23f10de:	d102      	bne.n	23f10e6 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f10e0:	6001      	str	r1, [r0, #0]
      }
 23f10e2:	2000      	movs	r0, #0
 23f10e4:	4770      	bx	lr
	  switch (__op)
 23f10e6:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f10e8:	bf04      	itt	eq
 23f10ea:	680b      	ldreq	r3, [r1, #0]
 23f10ec:	6003      	streq	r3, [r0, #0]
	      break;
 23f10ee:	e7f8      	b.n	23f10e2 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023f10f0 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f10f0:	b430      	push	{r4, r5}
 23f10f2:	460d      	mov	r5, r1
 23f10f4:	4611      	mov	r1, r2
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f10f6:	6804      	ldr	r4, [r0, #0]
 23f10f8:	681a      	ldr	r2, [r3, #0]
 23f10fa:	6828      	ldr	r0, [r5, #0]
 23f10fc:	4623      	mov	r3, r4
      }
 23f10fe:	bc30      	pop	{r4, r5}
 23f1100:	6809      	ldr	r1, [r1, #0]
 23f1102:	4718      	bx	r3

023f1104 <_ZNSt17_Function_handlerIFvPvjEZL27microphone_inference_recordvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f1104:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f1106:	bf08      	it	eq
 23f1108:	6001      	streq	r1, [r0, #0]
      }
 23f110a:	2000      	movs	r0, #0
 23f110c:	4770      	bx	lr

023f110e <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f110e:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f1110:	bf08      	it	eq
 23f1112:	6001      	streq	r1, [r0, #0]
      }
 23f1114:	2000      	movs	r0, #0
 23f1116:	4770      	bx	lr

023f1118 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f1118:	b510      	push	{r4, lr}
 23f111a:	680c      	ldr	r4, [r1, #0]
        sample_length = Microphone_PDM::instance().getBufferSizeInBytes() / 2;
 23f111c:	f005 fe62 	bl	23f6de4 <_ZN14Microphone_PDM8instanceEv>
	 * 
	 * You can use this with copySamples() to know how big of a buffer you need if you are allocating a
	 * buffer in bytes instead of samples.
	 */
	size_t getBufferSizeInBytes() const {
		return getSampleSizeInBytes() * getNumberOfSamples();
 23f1120:	f005 fe70 	bl	23f6e04 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>
 23f1124:	4b03      	ldr	r3, [pc, #12]	; (23f1134 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x1c>)
 23f1126:	0200      	lsls	r0, r0, #8
 23f1128:	0840      	lsrs	r0, r0, #1
 23f112a:	6018      	str	r0, [r3, #0]
        sptr = (int16_t *)pSamples;
 23f112c:	4b02      	ldr	r3, [pc, #8]	; (23f1138 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x20>)
 23f112e:	601c      	str	r4, [r3, #0]
      }
 23f1130:	bd10      	pop	{r4, pc}
 23f1132:	bf00      	nop
 23f1134:	1007a5e0 	.word	0x1007a5e0
 23f1138:	1007a5e4 	.word	0x1007a5e4

023f113c <_ZN2ei5numpy8linspaceEffmPf.isra.0>:
    static int linspace(float start, float stop, uint32_t number, float *out)
 23f113c:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
 23f113e:	b120      	cbz	r0, 23f114a <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
 23f1140:	b119      	cbz	r1, 23f114a <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
        if (number == 1) {
 23f1142:	2801      	cmp	r0, #1
 23f1144:	d102      	bne.n	23f114c <_ZN2ei5numpy8linspaceEffmPf.isra.0+0x10>
            out[0] = start;
 23f1146:	ed81 0a00 	vstr	s0, [r1]
    }
 23f114a:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
 23f114c:	1e42      	subs	r2, r0, #1
 23f114e:	ee07 2a10 	vmov	s14, r2
 23f1152:	ee70 7ac0 	vsub.f32	s15, s1, s0
 23f1156:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23f115a:	460c      	mov	r4, r1
 23f115c:	eec7 6a87 	vdiv.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23f1160:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
 23f1162:	ee07 3a90 	vmov	s15, r3
 23f1166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23f116a:	eef0 7a40 	vmov.f32	s15, s0
 23f116e:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23f1172:	3301      	adds	r3, #1
 23f1174:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
 23f1176:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23f117a:	d8f2      	bhi.n	23f1162 <_ZN2ei5numpy8linspaceEffmPf.isra.0+0x26>
        out[number - 1] = stop;
 23f117c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23f1180:	ed41 0a01 	vstr	s1, [r1, #-4]
        return EIDSP_OK;
 23f1184:	e7e1      	b.n	23f114a <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
	...

023f1188 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f1188:	b510      	push	{r4, lr}
 23f118a:	4604      	mov	r4, r0
 23f118c:	4b09      	ldr	r3, [pc, #36]	; (23f11b4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f118e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f1190:	f007 f912 	bl	23f83b8 <_ZN5spark10LogManager8instanceEv>
 23f1194:	4621      	mov	r1, r4
 23f1196:	f007 fb5b 	bl	23f8850 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f119a:	f006 fe2d 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f119e:	f006 fe1d 	bl	23f7ddc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f11a2:	4620      	mov	r0, r4
 23f11a4:	4b04      	ldr	r3, [pc, #16]	; (23f11b8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f11a6:	f840 3b04 	str.w	r3, [r0], #4
 23f11aa:	f007 f9ed 	bl	23f8588 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f11ae:	4620      	mov	r0, r4
 23f11b0:	bd10      	pop	{r4, pc}
 23f11b2:	bf00      	nop
 23f11b4:	023fcc68 	.word	0x023fcc68
 23f11b8:	023fcc50 	.word	0x023fcc50

023f11bc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f11bc:	b510      	push	{r4, lr}
 23f11be:	4604      	mov	r4, r0
    }
 23f11c0:	f7ff ffe2 	bl	23f1188 <_ZN5spark16SerialLogHandlerD1Ev>
 23f11c4:	4620      	mov	r0, r4
 23f11c6:	2124      	movs	r1, #36	; 0x24
 23f11c8:	f7fc fae9 	bl	23ed79e <_ZdlPvj>
 23f11cc:	4620      	mov	r0, r4
 23f11ce:	bd10      	pop	{r4, pc}

023f11d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f11d0:	b510      	push	{r4, lr}
      if (_M_manager)
 23f11d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f11d4:	4604      	mov	r4, r0
      if (_M_manager)
 23f11d6:	b113      	cbz	r3, 23f11de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f11d8:	2203      	movs	r2, #3
 23f11da:	4601      	mov	r1, r0
 23f11dc:	4798      	blx	r3
    }
 23f11de:	4620      	mov	r0, r4
 23f11e0:	bd10      	pop	{r4, pc}

023f11e2 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 23f11e2:	b570      	push	{r4, r5, r6, lr}
 23f11e4:	4604      	mov	r4, r0
 23f11e6:	460e      	mov	r6, r1
 23f11e8:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23f11ea:	b133      	cbz	r3, 23f11fa <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
 23f11ec:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
 23f11ee:	2300      	movs	r3, #0
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 23f11f0:	4620      	mov	r0, r4
        cols = n_cols;
 23f11f2:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
 23f11f6:	7323      	strb	r3, [r4, #12]
    }
 23f11f8:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23f11fa:	fb02 f001 	mul.w	r0, r2, r1
 23f11fe:	2101      	movs	r1, #1
 23f1200:	0080      	lsls	r0, r0, #2
 23f1202:	f002 ff84 	bl	23f410e <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f1206:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23f1208:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
 23f120a:	e7f1      	b.n	23f11f0 <_ZN2ei9ei_matrixC1EmmPf+0xe>

023f120c <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 23f120c:	b510      	push	{r4, lr}
 23f120e:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
 23f1210:	6800      	ldr	r0, [r0, #0]
 23f1212:	b118      	cbz	r0, 23f121c <_ZN2ei9ei_matrixD1Ev+0x10>
 23f1214:	7b23      	ldrb	r3, [r4, #12]
 23f1216:	b10b      	cbz	r3, 23f121c <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
 23f1218:	f002 ff7b 	bl	23f4112 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 23f121c:	4620      	mov	r0, r4
 23f121e:	bd10      	pop	{r4, pc}

023f1220 <_ZN2ei5numpy4rollEPfji>:
    static int roll(float *input_array, size_t input_array_size, int shift) {
 23f1220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if (shift < 0) {
 23f1222:	1e14      	subs	r4, r2, #0
            shift = input_array_size + shift;
 23f1224:	bfb8      	it	lt
 23f1226:	1864      	addlt	r4, r4, r1
    static int roll(float *input_array, size_t input_array_size, int shift) {
 23f1228:	4606      	mov	r6, r0
 23f122a:	460d      	mov	r5, r1
        if (shift == 0) {
 23f122c:	b1ec      	cbz	r4, 23f126a <_ZN2ei5numpy4rollEPfji+0x4a>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23f122e:	2300      	movs	r3, #0
 23f1230:	4622      	mov	r2, r4
 23f1232:	2101      	movs	r1, #1
 23f1234:	4668      	mov	r0, sp
 23f1236:	f7ff ffd4 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f123a:	9800      	ldr	r0, [sp, #0]
 23f123c:	b1c0      	cbz	r0, 23f1270 <_ZN2ei5numpy4rollEPfji+0x50>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 23f123e:	1b29      	subs	r1, r5, r4
 23f1240:	00a4      	lsls	r4, r4, #2
 23f1242:	4622      	mov	r2, r4
 23f1244:	008d      	lsls	r5, r1, #2
 23f1246:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 23f124a:	f00a f97c 	bl	23fb546 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 23f124e:	462a      	mov	r2, r5
 23f1250:	4631      	mov	r1, r6
 23f1252:	1930      	adds	r0, r6, r4
 23f1254:	f00a f984 	bl	23fb560 <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 23f1258:	4622      	mov	r2, r4
 23f125a:	4630      	mov	r0, r6
 23f125c:	9900      	ldr	r1, [sp, #0]
 23f125e:	f00a f972 	bl	23fb546 <memcpy>
        return EIDSP_OK;
 23f1262:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23f1264:	4668      	mov	r0, sp
 23f1266:	f7ff ffd1 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
    }
 23f126a:	4620      	mov	r0, r4
 23f126c:	b004      	add	sp, #16
 23f126e:	bd70      	pop	{r4, r5, r6, pc}
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23f1270:	4c00      	ldr	r4, [pc, #0]	; (23f1274 <_ZN2ei5numpy4rollEPfji+0x54>)
 23f1272:	e7f7      	b.n	23f1264 <_ZN2ei5numpy4rollEPfji+0x44>
 23f1274:	fffffc16 	.word	0xfffffc16

023f1278 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23f1278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f127c:	4617      	mov	r7, r2
 23f127e:	4698      	mov	r8, r3
        if (output->cols != input->cols) {
 23f1280:	688a      	ldr	r2, [r1, #8]
 23f1282:	6883      	ldr	r3, [r0, #8]
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23f1284:	4604      	mov	r4, r0
        if (output->cols != input->cols) {
 23f1286:	429a      	cmp	r2, r3
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23f1288:	460e      	mov	r6, r1
        if (output->cols != input->cols) {
 23f128a:	d16a      	bne.n	23f1362 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xea>
        if (output->rows != input->rows + pad_before + pad_after) {
 23f128c:	6842      	ldr	r2, [r0, #4]
 23f128e:	6849      	ldr	r1, [r1, #4]
 23f1290:	eb08 0307 	add.w	r3, r8, r7
 23f1294:	4413      	add	r3, r2
 23f1296:	4299      	cmp	r1, r3
 23f1298:	d163      	bne.n	23f1362 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xea>
        if (input->rows == 0) {
 23f129a:	2a00      	cmp	r2, #0
 23f129c:	d064      	beq.n	23f1368 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf0>
        bool pad_before_direction_up = true;
 23f129e:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
 23f12a2:	2500      	movs	r5, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23f12a4:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 23f12a8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
            memcpy(output->buffer + (input->cols * ix),
 23f12ac:	6830      	ldr	r0, [r6, #0]
 23f12ae:	68a2      	ldr	r2, [r4, #8]
                input->buffer + (pad_before_index * input->cols),
 23f12b0:	6821      	ldr	r1, [r4, #0]
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23f12b2:	d01f      	beq.n	23f12f4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7c>
            memcpy(output->buffer + (input->cols * ix),
 23f12b4:	0092      	lsls	r2, r2, #2
 23f12b6:	fb02 1105 	mla	r1, r2, r5, r1
 23f12ba:	fb02 000b 	mla	r0, r2, fp, r0
 23f12be:	f00a f942 	bl	23fb546 <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
 23f12c2:	b915      	cbnz	r5, 23f12ca <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x52>
 23f12c4:	f1ba 0f00 	cmp.w	sl, #0
 23f12c8:	d011      	beq.n	23f12ee <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x76>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 23f12ca:	6863      	ldr	r3, [r4, #4]
 23f12cc:	3b01      	subs	r3, #1
 23f12ce:	42ab      	cmp	r3, r5
 23f12d0:	d106      	bne.n	23f12e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x68>
 23f12d2:	f1ba 0f00 	cmp.w	sl, #0
 23f12d6:	d100      	bne.n	23f12da <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x62>
                pad_before_index--;
 23f12d8:	3d01      	subs	r5, #1
                pad_before_direction_up = false;
 23f12da:	f04f 0a00 	mov.w	sl, #0
 23f12de:	e003      	b.n	23f12e8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
            else if (pad_before_direction_up) {
 23f12e0:	f1ba 0f00 	cmp.w	sl, #0
 23f12e4:	d0f8      	beq.n	23f12d8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x60>
                pad_before_index++;
 23f12e6:	3501      	adds	r5, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23f12e8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 23f12ec:	e7dc      	b.n	23f12a8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x30>
                pad_before_direction_up = true;
 23f12ee:	f04f 0a01 	mov.w	sl, #1
 23f12f2:	e7f9      	b.n	23f12e8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23f12f4:	f04f 0a00 	mov.w	sl, #0
        bool pad_after_direction_up = false;
 23f12f8:	46d1      	mov	r9, sl
            input->rows * input->cols * sizeof(float));
 23f12fa:	6865      	ldr	r5, [r4, #4]
        memcpy(output->buffer + (input->cols * pad_before),
 23f12fc:	fb02 f307 	mul.w	r3, r2, r7
            input->rows * input->cols * sizeof(float));
 23f1300:	436a      	muls	r2, r5
        memcpy(output->buffer + (input->cols * pad_before),
 23f1302:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23f1306:	0092      	lsls	r2, r2, #2
 23f1308:	f00a f91d 	bl	23fb546 <memcpy>
        int32_t pad_after_index = input->rows - 1;
 23f130c:	6865      	ldr	r5, [r4, #4]
 23f130e:	3d01      	subs	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23f1310:	45d0      	cmp	r8, sl
 23f1312:	dd2b      	ble.n	23f136c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 23f1314:	6863      	ldr	r3, [r4, #4]
 23f1316:	68a2      	ldr	r2, [r4, #8]
 23f1318:	eb0a 0007 	add.w	r0, sl, r7
 23f131c:	4418      	add	r0, r3
                input->buffer + (pad_after_index * input->cols),
 23f131e:	6821      	ldr	r1, [r4, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 23f1320:	6833      	ldr	r3, [r6, #0]
 23f1322:	0092      	lsls	r2, r2, #2
 23f1324:	fb02 1105 	mla	r1, r2, r5, r1
 23f1328:	fb02 3000 	mla	r0, r2, r0, r3
 23f132c:	f00a f90b 	bl	23fb546 <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
 23f1330:	b915      	cbnz	r5, 23f1338 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc0>
 23f1332:	f1b9 0f00 	cmp.w	r9, #0
 23f1336:	d011      	beq.n	23f135c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe4>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 23f1338:	6863      	ldr	r3, [r4, #4]
 23f133a:	3b01      	subs	r3, #1
 23f133c:	42ab      	cmp	r3, r5
 23f133e:	d106      	bne.n	23f134e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd6>
 23f1340:	f1b9 0f00 	cmp.w	r9, #0
 23f1344:	d100      	bne.n	23f1348 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd0>
                pad_after_index--;
 23f1346:	3d01      	subs	r5, #1
                pad_after_direction_up = false;
 23f1348:	f04f 0900 	mov.w	r9, #0
 23f134c:	e003      	b.n	23f1356 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            else if (pad_after_direction_up) {
 23f134e:	f1b9 0f00 	cmp.w	r9, #0
 23f1352:	d0f8      	beq.n	23f1346 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xce>
                pad_after_index++;
 23f1354:	3501      	adds	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23f1356:	f10a 0a01 	add.w	sl, sl, #1
 23f135a:	e7d9      	b.n	23f1310 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x98>
                pad_after_direction_up = true;
 23f135c:	f04f 0901 	mov.w	r9, #1
 23f1360:	e7f9      	b.n	23f1356 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1362:	4803      	ldr	r0, [pc, #12]	; (23f1370 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf8>)
    }
 23f1364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 23f1368:	4802      	ldr	r0, [pc, #8]	; (23f1374 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xfc>)
 23f136a:	e7fb      	b.n	23f1364 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
        return EIDSP_OK;
 23f136c:	2000      	movs	r0, #0
 23f136e:	e7f9      	b.n	23f1364 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
 23f1370:	fffffc14 	.word	0xfffffc14
 23f1374:	fffffc12 	.word	0xfffffc12

023f1378 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f1378:	2300      	movs	r3, #0
 23f137a:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23f137e:	434a      	muls	r2, r1
 23f1380:	429a      	cmp	r2, r3
 23f1382:	d90a      	bls.n	23f139a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
 23f1384:	6802      	ldr	r2, [r0, #0]
 23f1386:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23f138a:	edd2 7a00 	vldr	s15, [r2]
 23f138e:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f1392:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
 23f1394:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f1398:	e7ef      	b.n	23f137a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x2>
    }
 23f139a:	2000      	movs	r0, #0
 23f139c:	4770      	bx	lr
	...

023f13a0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 23f13a0:	b530      	push	{r4, r5, lr}
 23f13a2:	ed2d 8b04 	vpush	{d8-d9}
 23f13a6:	b08f      	sub	sp, #60	; 0x3c
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 23f13a8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23f13ac:	6803      	ldr	r3, [r0, #0]
 23f13ae:	434a      	muls	r2, r1
 23f13b0:	a802      	add	r0, sp, #8
 23f13b2:	2101      	movs	r1, #1
 23f13b4:	f7ff ff15 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 23f13b8:	2201      	movs	r2, #1
 23f13ba:	2300      	movs	r3, #0
 23f13bc:	4611      	mov	r1, r2
 23f13be:	a806      	add	r0, sp, #24
 23f13c0:	f7ff ff0f 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 23f13c4:	9b06      	ldr	r3, [sp, #24]
 23f13c6:	2b00      	cmp	r3, #0
 23f13c8:	d07d      	beq.n	23f14c6 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x126>
        if (input_matrix->rows != output_matrix->rows) {
 23f13ca:	9a03      	ldr	r2, [sp, #12]
 23f13cc:	9b07      	ldr	r3, [sp, #28]
 23f13ce:	429a      	cmp	r2, r3
 23f13d0:	d17b      	bne.n	23f14ca <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        if (output_matrix->cols != 1) {
 23f13d2:	9b08      	ldr	r3, [sp, #32]
 23f13d4:	2b01      	cmp	r3, #1
 23f13d6:	d178      	bne.n	23f14ca <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f13d8:	2400      	movs	r4, #0
 23f13da:	9b03      	ldr	r3, [sp, #12]
 23f13dc:	42a3      	cmp	r3, r4
 23f13de:	d910      	bls.n	23f1402 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x62>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 23f13e0:	9904      	ldr	r1, [sp, #16]
 23f13e2:	9802      	ldr	r0, [sp, #8]
 23f13e4:	fb01 f504 	mul.w	r5, r1, r4
 23f13e8:	ab0a      	add	r3, sp, #40	; 0x28
 23f13ea:	aa01      	add	r2, sp, #4
 23f13ec:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 23f13f0:	f7ff f921 	bl	23f0636 <arm_min_f32>
            output_matrix->buffer[row] = min;
 23f13f4:	9b06      	ldr	r3, [sp, #24]
 23f13f6:	9a01      	ldr	r2, [sp, #4]
 23f13f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f13fc:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f13fe:	3401      	adds	r4, #1
 23f1400:	e7eb      	b.n	23f13da <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
        r = min(&temp_matrix, &min_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        matrix_t max_matrix(1, 1);
 23f1402:	2201      	movs	r2, #1
 23f1404:	2300      	movs	r3, #0
 23f1406:	4611      	mov	r1, r2
 23f1408:	a80a      	add	r0, sp, #40	; 0x28
 23f140a:	f7ff feea 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 23f140e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1410:	2b00      	cmp	r3, #0
 23f1412:	d054      	beq.n	23f14be <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x11e>
        if (input_matrix->rows != output_matrix->rows) {
 23f1414:	9a03      	ldr	r2, [sp, #12]
 23f1416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f1418:	429a      	cmp	r2, r3
 23f141a:	d152      	bne.n	23f14c2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        if (output_matrix->cols != 1) {
 23f141c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f141e:	2b01      	cmp	r3, #1
 23f1420:	d14f      	bne.n	23f14c2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f1422:	2400      	movs	r4, #0
 23f1424:	9b03      	ldr	r3, [sp, #12]
 23f1426:	42a3      	cmp	r3, r4
 23f1428:	d910      	bls.n	23f144c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xac>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 23f142a:	9904      	ldr	r1, [sp, #16]
 23f142c:	9802      	ldr	r0, [sp, #8]
 23f142e:	fb01 f504 	mul.w	r5, r1, r4
 23f1432:	466a      	mov	r2, sp
 23f1434:	ab01      	add	r3, sp, #4
 23f1436:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 23f143a:	f7ff f8e3 	bl	23f0604 <arm_max_f32>
            output_matrix->buffer[row] = max;
 23f143e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1440:	9a00      	ldr	r2, [sp, #0]
 23f1442:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f1446:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23f1448:	3401      	adds	r4, #1
 23f144a:	e7eb      	b.n	23f1424 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x84>
        r = max(&temp_matrix, &max_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 23f144c:	9b06      	ldr	r3, [sp, #24]
 23f144e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 23f1452:	edd3 9a00 	vldr	s19, [r3]
 23f1456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1458:	ed93 8a00 	vldr	s16, [r3]
 23f145c:	ee38 8a69 	vsub.f32	s16, s16, s19
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 23f1460:	ee18 0a10 	vmov	r0, s16
 23f1464:	f7fb fbc8 	bl	23ecbf8 <__aeabi_f2d>
 23f1468:	a31b      	add	r3, pc, #108	; (adr r3, 23f14d8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 23f146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f146e:	f7fb fe8d 	bl	23ed18c <__aeabi_dcmplt>
 23f1472:	bb08      	cbnz	r0, 23f14b8 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x118>
 23f1474:	eec9 8a08 	vdiv.f32	s17, s18, s16

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 23f1478:	eeb0 0a69 	vmov.f32	s0, s19
 23f147c:	a802      	add	r0, sp, #8
 23f147e:	f7ff ff7b 	bl	23f1378 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
        if (r != EIDSP_OK) {
 23f1482:	4604      	mov	r4, r0
 23f1484:	b950      	cbnz	r0, 23f149c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
        if (scale == 1.0f) return EIDSP_OK;
 23f1486:	eef4 8a49 	vcmp.f32	s17, s18
 23f148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f148e:	d005      	beq.n	23f149c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
 23f1490:	eeb0 0a68 	vmov.f32	s0, s17
 23f1494:	a802      	add	r0, sp, #8
 23f1496:	f7ff fd87 	bl	23f0fa8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
 23f149a:	4604      	mov	r4, r0
        matrix_t max_matrix(1, 1);
 23f149c:	a80a      	add	r0, sp, #40	; 0x28
 23f149e:	f7ff feb5 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 23f14a2:	a806      	add	r0, sp, #24
 23f14a4:	f7ff feb2 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 23f14a8:	a802      	add	r0, sp, #8
 23f14aa:	f7ff feaf 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        return EIDSP_OK;
    }
 23f14ae:	4620      	mov	r0, r4
 23f14b0:	b00f      	add	sp, #60	; 0x3c
 23f14b2:	ecbd 8b04 	vpop	{d8-d9}
 23f14b6:	bd30      	pop	{r4, r5, pc}
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 23f14b8:	eef0 8a49 	vmov.f32	s17, s18
 23f14bc:	e7dc      	b.n	23f1478 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xd8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f14be:	4c04      	ldr	r4, [pc, #16]	; (23f14d0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 23f14c0:	e7ec      	b.n	23f149c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f14c2:	4c04      	ldr	r4, [pc, #16]	; (23f14d4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
 23f14c4:	e7ea      	b.n	23f149c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f14c6:	4c02      	ldr	r4, [pc, #8]	; (23f14d0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 23f14c8:	e7eb      	b.n	23f14a2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f14ca:	4c02      	ldr	r4, [pc, #8]	; (23f14d4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
 23f14cc:	e7e9      	b.n	23f14a2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
 23f14ce:	bf00      	nop
 23f14d0:	fffffc16 	.word	0xfffffc16
 23f14d4:	fffffc14 	.word	0xfffffc14
 23f14d8:	d2f1a9fc 	.word	0xd2f1a9fc
 23f14dc:	3f50624d 	.word	0x3f50624d

023f14e0 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23f14e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f14e4:	ed2d 8b02 	vpush	{d8}
 23f14e8:	4607      	mov	r7, r0
 23f14ea:	b089      	sub	sp, #36	; 0x24
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23f14ec:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23f14ee:	460c      	mov	r4, r1
 23f14f0:	4690      	mov	r8, r2
 23f14f2:	461e      	mov	r6, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23f14f4:	f002 fe09 	bl	23f410a <_Z9ei_mallocj>
        if (!fft_output) {
 23f14f8:	4605      	mov	r5, r0
 23f14fa:	b160      	cbz	r0, 23f1516 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 23f14fc:	ab07      	add	r3, sp, #28
 23f14fe:	9300      	str	r3, [sp, #0]
 23f1500:	2300      	movs	r3, #0
 23f1502:	4640      	mov	r0, r8
 23f1504:	461a      	mov	r2, r3
 23f1506:	4619      	mov	r1, r3
 23f1508:	f005 fabe 	bl	23f6a88 <kiss_fftr_alloc>
        if (!cfg) {
 23f150c:	4682      	mov	sl, r0
 23f150e:	b920      	cbnz	r0, 23f151a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23f1510:	4628      	mov	r0, r5
 23f1512:	f002 fdfe 	bl	23f4112 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f1516:	4828      	ldr	r0, [pc, #160]	; (23f15b8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>)
 23f1518:	e048      	b.n	23f15ac <_ZN2ei5numpy13software_rfftEPfS1_jj+0xcc>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 23f151a:	46ab      	mov	fp, r5
 23f151c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 23f15bc <_ZN2ei5numpy13software_rfftEPfS1_jj+0xdc>
 23f1520:	462a      	mov	r2, r5
 23f1522:	4639      	mov	r1, r7
 23f1524:	f005 fb88 	bl	23f6c38 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23f1528:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 23f152c:	9303      	str	r3, [sp, #12]
 23f152e:	9b03      	ldr	r3, [sp, #12]
 23f1530:	429c      	cmp	r4, r3
 23f1532:	d034      	beq.n	23f159e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xbe>
      return pow(__type(__x), __type(__y));
 23f1534:	f8db 0000 	ldr.w	r0, [fp]
 23f1538:	f7fb fb5e 	bl	23ecbf8 <__aeabi_f2d>
 23f153c:	4602      	mov	r2, r0
 23f153e:	460b      	mov	r3, r1
 23f1540:	f8db 0004 	ldr.w	r0, [fp, #4]
 23f1544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f1548:	f7fb fb56 	bl	23ecbf8 <__aeabi_f2d>
 23f154c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23f1550:	4680      	mov	r8, r0
 23f1552:	4689      	mov	r9, r1
 23f1554:	4610      	mov	r0, r2
 23f1556:	4619      	mov	r1, r3
 23f1558:	f7fb fba6 	bl	23ecca8 <__aeabi_dmul>
 23f155c:	4642      	mov	r2, r8
 23f155e:	4606      	mov	r6, r0
 23f1560:	460f      	mov	r7, r1
 23f1562:	464b      	mov	r3, r9
 23f1564:	4640      	mov	r0, r8
 23f1566:	4649      	mov	r1, r9
 23f1568:	f7fb fb9e 	bl	23ecca8 <__aeabi_dmul>
 23f156c:	4602      	mov	r2, r0
 23f156e:	460b      	mov	r3, r1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 23f1570:	4630      	mov	r0, r6
 23f1572:	4639      	mov	r1, r7
 23f1574:	f7fb f9e2 	bl	23ec93c <__adddf3>
 23f1578:	f7fb fe8e 	bl	23ed298 <__aeabi_d2f>
 23f157c:	ee00 0a10 	vmov	s0, r0
    if (in >= 0.0f)
 23f1580:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23f1584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1588:	db06      	blt.n	23f1598 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xb8>
      *pOut = sqrtf(in);
 23f158a:	f008 fceb 	bl	23f9f64 <sqrtf>
 23f158e:	eca4 0a01 	vstmia	r4!, {s0}
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23f1592:	f10b 0b08 	add.w	fp, fp, #8
 23f1596:	e7ca      	b.n	23f152e <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4e>
      *pOut = 0.0f;
 23f1598:	eeb0 0a48 	vmov.f32	s0, s16
 23f159c:	e7f7      	b.n	23f158e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xae>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 23f159e:	4650      	mov	r0, sl
 23f15a0:	f002 fdb7 	bl	23f4112 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23f15a4:	4628      	mov	r0, r5
 23f15a6:	f002 fdb4 	bl	23f4112 <_Z7ei_freePv>

        return EIDSP_OK;
 23f15aa:	2000      	movs	r0, #0
    }
 23f15ac:	b009      	add	sp, #36	; 0x24
 23f15ae:	ecbd 8b02 	vpop	{d8}
 23f15b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f15b6:	bf00      	nop
 23f15b8:	fffffc16 	.word	0xfffffc16
 23f15bc:	00000000 	.word	0x00000000

023f15c0 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23f15c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f15c4:	ed2d 8b02 	vpush	{d8}
 23f15c8:	b091      	sub	sp, #68	; 0x44
 23f15ca:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 23f15cc:	4680      	mov	r8, r0
        size_t n_fft_out_features = (n_fft / 2) + 1;
 23f15ce:	0867      	lsrs	r7, r4, #1
 23f15d0:	3701      	adds	r7, #1
        if (output_size != n_fft_out_features) {
 23f15d2:	429f      	cmp	r7, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23f15d4:	460e      	mov	r6, r1
 23f15d6:	4615      	mov	r5, r2
        if (output_size != n_fft_out_features) {
 23f15d8:	f040 8081 	bne.w	23f16de <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23f15dc:	2300      	movs	r3, #0
 23f15de:	4622      	mov	r2, r4
 23f15e0:	2101      	movs	r1, #1
 23f15e2:	a802      	add	r0, sp, #8
 23f15e4:	f7ff fdfd 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f15e8:	9802      	ldr	r0, [sp, #8]
 23f15ea:	2800      	cmp	r0, #0
 23f15ec:	d04e      	beq.n	23f168c <_ZN2ei5numpy4rfftEPKfjPfjj+0xcc>
 23f15ee:	42a6      	cmp	r6, r4
 23f15f0:	bf28      	it	cs
 23f15f2:	4626      	movcs	r6, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 23f15f4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 23f15f8:	464a      	mov	r2, r9
 23f15fa:	4641      	mov	r1, r8
 23f15fc:	f009 ffa3 	bl	23fb546 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 23f1600:	9802      	ldr	r0, [sp, #8]
 23f1602:	1ba2      	subs	r2, r4, r6
 23f1604:	2100      	movs	r1, #0
 23f1606:	0092      	lsls	r2, r2, #2
 23f1608:	4448      	add	r0, r9
 23f160a:	f009 ffc3 	bl	23fb594 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 23f160e:	2c20      	cmp	r4, #32
 23f1610:	d063      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f1612:	2c40      	cmp	r4, #64	; 0x40
 23f1614:	d061      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f1616:	2c80      	cmp	r4, #128	; 0x80
 23f1618:	d05f      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f161a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 23f161e:	d01b      	beq.n	23f1658 <_ZN2ei5numpy4rfftEPKfjPfjj+0x98>
 23f1620:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 23f1624:	d059      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 23f1626:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 23f162a:	d056      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f162c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 23f1630:	d053      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23f1632:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 23f1636:	d050      	beq.n	23f16da <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 23f1638:	4622      	mov	r2, r4
 23f163a:	463b      	mov	r3, r7
 23f163c:	4629      	mov	r1, r5
 23f163e:	9802      	ldr	r0, [sp, #8]
 23f1640:	f7ff ff4e 	bl	23f14e0 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 23f1644:	4604      	mov	r4, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23f1646:	a802      	add	r0, sp, #8
 23f1648:	f7ff fde0 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
    }
 23f164c:	4620      	mov	r0, r4
 23f164e:	b011      	add	sp, #68	; 0x44
 23f1650:	ecbd 8b02 	vpop	{d8}
 23f1654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
                S->fftLen = 128U;
 23f1658:	2380      	movs	r3, #128	; 0x80
 23f165a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->pTwiddle = NULL;
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23f165e:	4b21      	ldr	r3, [pc, #132]	; (23f16e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x124>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f1660:	2101      	movs	r1, #1
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23f1662:	899a      	ldrh	r2, [r3, #12]
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f1664:	a806      	add	r0, sp, #24
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23f1666:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 23f166a:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 23f166c:	685b      	ldr	r3, [r3, #4]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 23f166e:	920c      	str	r2, [sp, #48]	; 0x30
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 23f1670:	930b      	str	r3, [sp, #44]	; 0x2c
                rfft_instance->fftLenRFFT = 256U;
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 23f1672:	4b1d      	ldr	r3, [pc, #116]	; (23f16e8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x128>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f1674:	4622      	mov	r2, r4
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 23f1676:	930f      	str	r3, [sp, #60]	; 0x3c
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f1678:	2300      	movs	r3, #0
                rfft_instance->fftLenRFFT = 256U;
 23f167a:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f167e:	f7ff fdb0 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f1682:	9a06      	ldr	r2, [sp, #24]
 23f1684:	b922      	cbnz	r2, 23f1690 <_ZN2ei5numpy4rfftEPKfjPfjj+0xd0>
 23f1686:	a806      	add	r0, sp, #24
 23f1688:	f7ff fdc0 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23f168c:	4c17      	ldr	r4, [pc, #92]	; (23f16ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x12c>)
 23f168e:	e7da      	b.n	23f1646 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 23f1690:	2408      	movs	r4, #8
                output[ix] = rms_result * sqrt(2);
 23f1692:	ed9f 8a17 	vldr	s16, [pc, #92]	; 23f16f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x130>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 23f1696:	2300      	movs	r3, #0
 23f1698:	9902      	ldr	r1, [sp, #8]
 23f169a:	a80a      	add	r0, sp, #40	; 0x28
 23f169c:	f7fe f9bf 	bl	23efa1e <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
 23f16a0:	9b06      	ldr	r3, [sp, #24]
 23f16a2:	3504      	adds	r5, #4
 23f16a4:	681a      	ldr	r2, [r3, #0]
 23f16a6:	f845 2c04 	str.w	r2, [r5, #-4]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 23f16aa:	685b      	ldr	r3, [r3, #4]
 23f16ac:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 23f16b0:	9806      	ldr	r0, [sp, #24]
 23f16b2:	2102      	movs	r1, #2
 23f16b4:	4420      	add	r0, r4
 23f16b6:	aa01      	add	r2, sp, #4
 23f16b8:	f7fe ff7e 	bl	23f05b8 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 23f16bc:	eddd 7a01 	vldr	s15, [sp, #4]
 23f16c0:	ee67 7a88 	vmul.f32	s15, s15, s16
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 23f16c4:	3408      	adds	r4, #8
 23f16c6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
                output[ix] = rms_result * sqrt(2);
 23f16ca:	ece5 7a01 	vstmia	r5!, {s15}
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 23f16ce:	d1ef      	bne.n	23f16b0 <_ZN2ei5numpy4rfftEPKfjPfjj+0xf0>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23f16d0:	a806      	add	r0, sp, #24
 23f16d2:	f7ff fd9b 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 23f16d6:	2400      	movs	r4, #0
 23f16d8:	e7b5      	b.n	23f1646 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 23f16da:	4c06      	ldr	r4, [pc, #24]	; (23f16f4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x134>)
 23f16dc:	e7b3      	b.n	23f1646 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 23f16de:	4c06      	ldr	r4, [pc, #24]	; (23f16f8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>)
 23f16e0:	e7b4      	b.n	23f164c <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
 23f16e2:	bf00      	nop
 23f16e4:	023fbacc 	.word	0x023fbacc
 23f16e8:	023fc07c 	.word	0x023fc07c
 23f16ec:	fffffc16 	.word	0xfffffc16
 23f16f0:	3fb504f3 	.word	0x3fb504f3
 23f16f4:	fffffc08 	.word	0xfffffc08
 23f16f8:	fffffc11 	.word	0xfffffc11

023f16fc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
        if (blockSize <= 1U) {
 23f16fc:	2901      	cmp	r1, #1
 23f16fe:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23f17bc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 23f1702:	b570      	push	{r4, r5, r6, lr}
        if (blockSize <= 1U) {
 23f1704:	d802      	bhi.n	23f170c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x10>
            *pResult = 0;
 23f1706:	edc2 7a00 	vstr	s15, [r2]
    }
 23f170a:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
 23f170c:	088d      	lsrs	r5, r1, #2
 23f170e:	4603      	mov	r3, r0
 23f1710:	4604      	mov	r4, r0
 23f1712:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
 23f1714:	3410      	adds	r4, #16
 23f1716:	b18e      	cbz	r6, 23f173c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x40>
            sum += *pInput++;
 23f1718:	ed14 7a04 	vldr	s14, [r4, #-16]
 23f171c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23f1720:	ed14 7a03 	vldr	s14, [r4, #-12]
 23f1724:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23f1728:	ed14 7a02 	vldr	s14, [r4, #-8]
 23f172c:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23f1730:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
 23f1734:	3e01      	subs	r6, #1
            sum += *pInput++;
 23f1736:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23f173a:	e7eb      	b.n	23f1714 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x18>
 23f173c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
 23f1740:	4606      	mov	r6, r0
 23f1742:	f001 0403 	and.w	r4, r1, #3
 23f1746:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        while (blkCnt > 0U) {
 23f174a:	42a6      	cmp	r6, r4
 23f174c:	d004      	beq.n	23f1758 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x5c>
            sum += *pInput++;
 23f174e:	ecb6 7a01 	vldmia	r6!, {s14}
 23f1752:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23f1756:	e7f8      	b.n	23f174a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x4e>
        fMean = sum / (float32_t)blockSize;
 23f1758:	ee07 1a10 	vmov	s14, r1
 23f175c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23f1760:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
 23f1764:	eddf 7a15 	vldr	s15, [pc, #84]	; 23f17bc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
        while (blkCnt > 0U) {
 23f1768:	3310      	adds	r3, #16
 23f176a:	b1cd      	cbz	r5, 23f17a0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
            fValue = *pInput++ - fMean;
 23f176c:	ed13 6a04 	vldr	s12, [r3, #-16]
 23f1770:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f1774:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23f1778:	ed13 6a03 	vldr	s12, [r3, #-12]
 23f177c:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f1780:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23f1784:	ed13 6a02 	vldr	s12, [r3, #-8]
 23f1788:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f178c:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23f1790:	ed13 6a01 	vldr	s12, [r3, #-4]
 23f1794:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
 23f1798:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
 23f179a:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23f179e:	e7e3      	b.n	23f1768 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x6c>
        while (blkCnt > 0U) {
 23f17a0:	42a0      	cmp	r0, r4
 23f17a2:	d006      	beq.n	23f17b2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xb6>
            fValue = *pInput++ - fMean;
 23f17a4:	ecb0 6a01 	vldmia	r0!, {s12}
 23f17a8:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23f17ac:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23f17b0:	e7f6      	b.n	23f17a0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
 23f17b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 23f17b6:	edc2 6a00 	vstr	s13, [r2]
 23f17ba:	e7a6      	b.n	23f170a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe>
 23f17bc:	00000000 	.word	0x00000000

023f17c0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23f17c0:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (input_matrix->cols != output_matrix->rows) {
 23f17c2:	6883      	ldr	r3, [r0, #8]
 23f17c4:	684a      	ldr	r2, [r1, #4]
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23f17c6:	460e      	mov	r6, r1
        if (input_matrix->cols != output_matrix->rows) {
 23f17c8:	4293      	cmp	r3, r2
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23f17ca:	b087      	sub	sp, #28
        if (input_matrix->cols != output_matrix->rows) {
 23f17cc:	d144      	bne.n	23f1858 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        if (output_matrix->cols != 1) {
 23f17ce:	6889      	ldr	r1, [r1, #8]
 23f17d0:	2901      	cmp	r1, #1
 23f17d2:	d141      	bne.n	23f1858 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        arm_in_matrix.numRows = input_matrix->rows;
 23f17d4:	6842      	ldr	r2, [r0, #4]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 23f17d6:	6800      	ldr	r0, [r0, #0]
        arm_in_matrix.numRows = input_matrix->rows;
 23f17d8:	b294      	uxth	r4, r2
        arm_in_matrix.pData = &input_matrix->buffer[0];
 23f17da:	9003      	str	r0, [sp, #12]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23f17dc:	fb02 f003 	mul.w	r0, r2, r3
        arm_in_matrix.numCols = input_matrix->cols;
 23f17e0:	b29d      	uxth	r5, r3
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23f17e2:	0080      	lsls	r0, r0, #2
        arm_in_matrix.numRows = input_matrix->rows;
 23f17e4:	f8ad 4008 	strh.w	r4, [sp, #8]
        arm_in_matrix.numCols = input_matrix->cols;
 23f17e8:	f8ad 500a 	strh.w	r5, [sp, #10]
        arm_transposed_matrix.numRows = input_matrix->cols;
 23f17ec:	f8ad 5010 	strh.w	r5, [sp, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 23f17f0:	f8ad 4012 	strh.w	r4, [sp, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23f17f4:	f002 fc8b 	bl	23f410e <_Z9ei_callocjj>
 23f17f8:	9005      	str	r0, [sp, #20]
        if (arm_transposed_matrix.pData == NULL) {
 23f17fa:	b378      	cbz	r0, 23f185c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x9c>
        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 23f17fc:	a904      	add	r1, sp, #16
 23f17fe:	a802      	add	r0, sp, #8
 23f1800:	f7fe f851 	bl	23ef8a6 <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
 23f1804:	4604      	mov	r4, r0
 23f1806:	bb20      	cbnz	r0, 23f1852 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23f1808:	4605      	mov	r5, r0
 23f180a:	2700      	movs	r7, #0
 23f180c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 23f1810:	9805      	ldr	r0, [sp, #20]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23f1812:	42ab      	cmp	r3, r5
 23f1814:	d91b      	bls.n	23f184e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 23f1816:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 23f181a:	aa01      	add	r2, sp, #4
 23f181c:	fb05 f301 	mul.w	r3, r5, r1
 23f1820:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23f1824:	f7ff ff6a 	bl	23f16fc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 23f1828:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
 23f182c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23f1830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1834:	db08      	blt.n	23f1848 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x88>
      *pOut = sqrtf(in);
 23f1836:	f008 fb95 	bl	23f9f64 <sqrtf>
            output_matrix->buffer[row] = std;
 23f183a:	6833      	ldr	r3, [r6, #0]
 23f183c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23f1840:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23f1844:	3501      	adds	r5, #1
 23f1846:	e7e1      	b.n	23f180c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4c>
      *pOut = 0.0f;
 23f1848:	ee00 7a10 	vmov	s0, r7
 23f184c:	e7f5      	b.n	23f183a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x7a>
        ei_free(arm_transposed_matrix.pData);
 23f184e:	f002 fc60 	bl	23f4112 <_Z7ei_freePv>
    }
 23f1852:	4620      	mov	r0, r4
 23f1854:	b007      	add	sp, #28
 23f1856:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1858:	4c01      	ldr	r4, [pc, #4]	; (23f1860 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa0>)
 23f185a:	e7fa      	b.n	23f1852 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f185c:	4c01      	ldr	r4, [pc, #4]	; (23f1864 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa4>)
 23f185e:	e7f8      	b.n	23f1852 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
 23f1860:	fffffc14 	.word	0xfffffc14
 23f1864:	fffffc16 	.word	0xfffffc16

023f1868 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
    {
 23f1868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f186c:	ed2d 8b02 	vpush	{d8}
 23f1870:	4605      	mov	r5, r0
 23f1872:	4693      	mov	fp, r2
 23f1874:	469a      	mov	sl, r3
        if (win_size == 0) {
 23f1876:	460f      	mov	r7, r1
    {
 23f1878:	b091      	sub	sp, #68	; 0x44
        if (win_size == 0) {
 23f187a:	2900      	cmp	r1, #0
 23f187c:	f000 80fb 	beq.w	23f1a76 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x20e>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f1880:	6840      	ldr	r0, [r0, #4]
        uint16_t pad_size = (win_size - 1) / 2;
 23f1882:	3901      	subs	r1, #1
 23f1884:	104e      	asrs	r6, r1, #1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f1886:	f021 0101 	bic.w	r1, r1, #1
 23f188a:	2300      	movs	r3, #0
 23f188c:	4401      	add	r1, r0
 23f188e:	68aa      	ldr	r2, [r5, #8]
 23f1890:	4668      	mov	r0, sp
 23f1892:	f7ff fca6 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f1896:	9b00      	ldr	r3, [sp, #0]
 23f1898:	2b00      	cmp	r3, #0
 23f189a:	f000 80ea 	beq.w	23f1a72 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x20a>
        uint16_t pad_size = (win_size - 1) / 2;
 23f189e:	b2b6      	uxth	r6, r6
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 23f18a0:	4633      	mov	r3, r6
 23f18a2:	4632      	mov	r2, r6
 23f18a4:	4669      	mov	r1, sp
 23f18a6:	4628      	mov	r0, r5
 23f18a8:	f7ff fce6 	bl	23f1278 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
 23f18ac:	4604      	mov	r4, r0
 23f18ae:	2800      	cmp	r0, #0
 23f18b0:	d174      	bne.n	23f199c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23f18b2:	4603      	mov	r3, r0
 23f18b4:	2201      	movs	r2, #1
 23f18b6:	9902      	ldr	r1, [sp, #8]
 23f18b8:	a804      	add	r0, sp, #16
 23f18ba:	f7ff fc92 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f18be:	9b04      	ldr	r3, [sp, #16]
 23f18c0:	2b00      	cmp	r3, #0
 23f18c2:	f000 80d4 	beq.w	23f1a6e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x206>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23f18c6:	4623      	mov	r3, r4
 23f18c8:	2201      	movs	r2, #1
 23f18ca:	9902      	ldr	r1, [sp, #8]
 23f18cc:	a808      	add	r0, sp, #32
 23f18ce:	f7ff fc88 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f18d2:	9b08      	ldr	r3, [sp, #32]
 23f18d4:	2b00      	cmp	r3, #0
 23f18d6:	f000 80c8 	beq.w	23f1a6a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x202>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f18da:	686b      	ldr	r3, [r5, #4]
 23f18dc:	42a3      	cmp	r3, r4
 23f18de:	d968      	bls.n	23f19b2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x14a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f18e0:	9a02      	ldr	r2, [sp, #8]
 23f18e2:	9b00      	ldr	r3, [sp, #0]
 23f18e4:	fb02 f104 	mul.w	r1, r2, r4
 23f18e8:	a80c      	add	r0, sp, #48	; 0x30
 23f18ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f18ee:	4639      	mov	r1, r7
 23f18f0:	f7ff fc77 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f18f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f18f6:	2b00      	cmp	r3, #0
 23f18f8:	d046      	beq.n	23f1988 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x120>
        if (input_matrix->cols != output_matrix->rows) {
 23f18fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f18fc:	9b05      	ldr	r3, [sp, #20]
 23f18fe:	429a      	cmp	r2, r3
 23f1900:	d155      	bne.n	23f19ae <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x146>
        if (output_matrix->cols != 1) {
 23f1902:	9b06      	ldr	r3, [sp, #24]
 23f1904:	2b01      	cmp	r3, #1
 23f1906:	d152      	bne.n	23f19ae <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x146>
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23f1908:	2300      	movs	r3, #0
 23f190a:	980e      	ldr	r0, [sp, #56]	; 0x38
 23f190c:	4298      	cmp	r0, r3
 23f190e:	d920      	bls.n	23f1952 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xea>
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f1910:	f04f 0c00 	mov.w	ip, #0
            float sum = 0.0f;
 23f1914:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 23f1a88 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>
 23f1918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f191a:	990d      	ldr	r1, [sp, #52]	; 0x34
 23f191c:	0080      	lsls	r0, r0, #2
 23f191e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 23f1922:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23f1926:	4561      	cmp	r1, ip
 23f1928:	d007      	beq.n	23f193a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xd2>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 23f192a:	edd2 7a00 	vldr	s15, [r2]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f192e:	f10c 0c01 	add.w	ip, ip, #1
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 23f1932:	ee37 7a27 	vadd.f32	s14, s14, s15
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23f1936:	4402      	add	r2, r0
 23f1938:	e7f5      	b.n	23f1926 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xbe>
            output_matrix->buffer[col] = sum / input_matrix->rows;
 23f193a:	ee07 1a90 	vmov	s15, r1
 23f193e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f1942:	eec7 6a27 	vdiv.f32	s13, s14, s15
 23f1946:	9a04      	ldr	r2, [sp, #16]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23f1948:	3301      	adds	r3, #1
            output_matrix->buffer[col] = sum / input_matrix->rows;
 23f194a:	4472      	add	r2, lr
 23f194c:	edc2 6a00 	vstr	s13, [r2]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23f1950:	e7db      	b.n	23f190a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23f1952:	2300      	movs	r3, #0
 23f1954:	68a9      	ldr	r1, [r5, #8]
 23f1956:	4299      	cmp	r1, r3
 23f1958:	d911      	bls.n	23f197e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x116>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 23f195a:	fb01 3104 	mla	r1, r1, r4, r3
 23f195e:	682a      	ldr	r2, [r5, #0]
 23f1960:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f1964:	9904      	ldr	r1, [sp, #16]
 23f1966:	edd2 7a00 	vldr	s15, [r2]
 23f196a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 23f196e:	ed91 7a00 	vldr	s14, [r1]
 23f1972:	ee77 7ac7 	vsub.f32	s15, s15, s14
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23f1976:	3301      	adds	r3, #1
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 23f1978:	edc2 7a00 	vstr	s15, [r2]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23f197c:	e7ea      	b.n	23f1954 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xec>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f197e:	a80c      	add	r0, sp, #48	; 0x30
 23f1980:	f7ff fc44 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f1984:	3401      	adds	r4, #1
 23f1986:	e7a8      	b.n	23f18da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x72>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f1988:	4c40      	ldr	r4, [pc, #256]	; (23f1a8c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f198a:	a80c      	add	r0, sp, #48	; 0x30
 23f198c:	f7ff fc3e 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23f1990:	a808      	add	r0, sp, #32
 23f1992:	f7ff fc3b 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23f1996:	a804      	add	r0, sp, #16
 23f1998:	f7ff fc38 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f199c:	4668      	mov	r0, sp
 23f199e:	f7ff fc35 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
    }
 23f19a2:	4620      	mov	r0, r4
 23f19a4:	b011      	add	sp, #68	; 0x44
 23f19a6:	ecbd 8b02 	vpop	{d8}
 23f19aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f19ae:	4c38      	ldr	r4, [pc, #224]	; (23f1a90 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x228>)
 23f19b0:	e7eb      	b.n	23f198a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x122>
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 23f19b2:	4633      	mov	r3, r6
 23f19b4:	4632      	mov	r2, r6
 23f19b6:	4669      	mov	r1, sp
 23f19b8:	4628      	mov	r0, r5
 23f19ba:	f7ff fc5d 	bl	23f1278 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
 23f19be:	4604      	mov	r4, r0
 23f19c0:	2800      	cmp	r0, #0
 23f19c2:	d1e5      	bne.n	23f1990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f19c4:	4680      	mov	r8, r0
 23f19c6:	686b      	ldr	r3, [r5, #4]
 23f19c8:	4543      	cmp	r3, r8
 23f19ca:	d946      	bls.n	23f1a5a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f2>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f19cc:	9a02      	ldr	r2, [sp, #8]
 23f19ce:	9b00      	ldr	r3, [sp, #0]
 23f19d0:	fb02 f108 	mul.w	r1, r2, r8
 23f19d4:	a80c      	add	r0, sp, #48	; 0x30
 23f19d6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f19da:	4639      	mov	r1, r7
 23f19dc:	f7ff fc01 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f19e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f19e2:	b3a3      	cbz	r3, 23f1a4e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e6>
            if (variance_normalization == true) {
 23f19e4:	f1bb 0f00 	cmp.w	fp, #0
 23f19e8:	d02b      	beq.n	23f1a42 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1da>
        return std_axis0_CMSIS(input_matrix, output_matrix);
 23f19ea:	a908      	add	r1, sp, #32
 23f19ec:	a80c      	add	r0, sp, #48	; 0x30
 23f19ee:	f7ff fee7 	bl	23f17c0 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
                if (ret != EIDSP_OK) {
 23f19f2:	4606      	mov	r6, r0
 23f19f4:	bb60      	cbnz	r0, 23f1a50 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e8>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 23f19f6:	9b02      	ldr	r3, [sp, #8]
 23f19f8:	682a      	ldr	r2, [r5, #0]
 23f19fa:	fb03 f308 	mul.w	r3, r3, r8
 23f19fe:	eb02 0983 	add.w	r9, r2, r3, lsl #2
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23f1a02:	9b02      	ldr	r3, [sp, #8]
 23f1a04:	42b3      	cmp	r3, r6
 23f1a06:	d91c      	bls.n	23f1a42 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1da>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f1a08:	f8d9 0000 	ldr.w	r0, [r9]
 23f1a0c:	f7fb f8f4 	bl	23ecbf8 <__aeabi_f2d>
                                             (window_variance.buffer[col] + 1e-10);
 23f1a10:	9b08      	ldr	r3, [sp, #32]
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f1a12:	ec41 0b18 	vmov	d8, r0, r1
                                             (window_variance.buffer[col] + 1e-10);
 23f1a16:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f1a1a:	6818      	ldr	r0, [r3, #0]
 23f1a1c:	f7fb f8ec 	bl	23ecbf8 <__aeabi_f2d>
 23f1a20:	a317      	add	r3, pc, #92	; (adr r3, 23f1a80 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x218>)
 23f1a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1a26:	f7fa ff89 	bl	23ec93c <__adddf3>
 23f1a2a:	4602      	mov	r2, r0
 23f1a2c:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f1a2e:	ec51 0b18 	vmov	r0, r1, d8
 23f1a32:	f7fb fa63 	bl	23ecefc <__aeabi_ddiv>
 23f1a36:	f7fb fc2f 	bl	23ed298 <__aeabi_d2f>
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23f1a3a:	3601      	adds	r6, #1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23f1a3c:	f849 0b04 	str.w	r0, [r9], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23f1a40:	e7df      	b.n	23f1a02 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f1a42:	a80c      	add	r0, sp, #48	; 0x30
 23f1a44:	f7ff fbe2 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23f1a48:	f108 0801 	add.w	r8, r8, #1
 23f1a4c:	e7bb      	b.n	23f19c6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x15e>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23f1a4e:	4e0f      	ldr	r6, [pc, #60]	; (23f1a8c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f1a50:	a80c      	add	r0, sp, #48	; 0x30
 23f1a52:	f7ff fbdb 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f1a56:	4634      	mov	r4, r6
 23f1a58:	e79a      	b.n	23f1990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        if (scale) {
 23f1a5a:	f1ba 0f00 	cmp.w	sl, #0
 23f1a5e:	d097      	beq.n	23f1990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
            ret = numpy::normalize(features_matrix);
 23f1a60:	4628      	mov	r0, r5
 23f1a62:	f7ff fc9d 	bl	23f13a0 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 23f1a66:	4604      	mov	r4, r0
            if (ret != EIDSP_OK) {
 23f1a68:	e792      	b.n	23f1990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23f1a6a:	4c08      	ldr	r4, [pc, #32]	; (23f1a8c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f1a6c:	e790      	b.n	23f1990 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23f1a6e:	4c07      	ldr	r4, [pc, #28]	; (23f1a8c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f1a70:	e791      	b.n	23f1996 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12e>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23f1a72:	4c06      	ldr	r4, [pc, #24]	; (23f1a8c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23f1a74:	e792      	b.n	23f199c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
            return EIDSP_OK;
 23f1a76:	460c      	mov	r4, r1
 23f1a78:	e793      	b.n	23f19a2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x13a>
 23f1a7a:	bf00      	nop
 23f1a7c:	f3af 8000 	nop.w
 23f1a80:	d9d7bdbb 	.word	0xd9d7bdbb
 23f1a84:	3ddb7cdf 	.word	0x3ddb7cdf
 23f1a88:	00000000 	.word	0x00000000
 23f1a8c:	fffffc16 	.word	0xfffffc16
 23f1a90:	fffffc14 	.word	0xfffffc14

023f1a94 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 23f1a94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f1a98:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 23f1a9c:	4614      	mov	r4, r2
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 23f1a9e:	0875      	lsrs	r5, r6, #1
 23f1aa0:	3501      	adds	r5, #1
 23f1aa2:	429d      	cmp	r5, r3
 23f1aa4:	d12c      	bne.n	23f1b00 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x6c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 23f1aa6:	9600      	str	r6, [sp, #0]
 23f1aa8:	f7ff fd8a 	bl	23f15c0 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
 23f1aac:	4680      	mov	r8, r0
 23f1aae:	bb18      	cbnz	r0, 23f1af8 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
            return r;
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23f1ab0:	ee07 6a90 	vmov	s15, r6
 23f1ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f1ab8:	ee17 0a90 	vmov	r0, s15
 23f1abc:	f7fb f89c 	bl	23ecbf8 <__aeabi_f2d>
 23f1ac0:	4602      	mov	r2, r0
 23f1ac2:	460b      	mov	r3, r1
 23f1ac4:	2000      	movs	r0, #0
 23f1ac6:	4910      	ldr	r1, [pc, #64]	; (23f1b08 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x74>)
 23f1ac8:	f7fb fa18 	bl	23ecefc <__aeabi_ddiv>
 23f1acc:	4606      	mov	r6, r0
 23f1ace:	460f      	mov	r7, r1
 23f1ad0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
                (out_buffer[ix] * out_buffer[ix]);
 23f1ad4:	edd4 7a00 	vldr	s15, [r4]
 23f1ad8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 23f1adc:	ee17 0a90 	vmov	r0, s15
 23f1ae0:	f7fb f88a 	bl	23ecbf8 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23f1ae4:	4632      	mov	r2, r6
 23f1ae6:	463b      	mov	r3, r7
 23f1ae8:	f7fb f8de 	bl	23ecca8 <__aeabi_dmul>
 23f1aec:	f7fb fbd4 	bl	23ed298 <__aeabi_d2f>
 23f1af0:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 23f1af4:	42a5      	cmp	r5, r4
 23f1af6:	d1ed      	bne.n	23f1ad4 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x40>
        }

        return EIDSP_OK;
    }
 23f1af8:	4640      	mov	r0, r8
 23f1afa:	b002      	add	sp, #8
 23f1afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1b00:	f8df 8008 	ldr.w	r8, [pc, #8]	; 23f1b0c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x78>
 23f1b04:	e7f8      	b.n	23f1af8 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
 23f1b06:	bf00      	nop
 23f1b08:	3ff00000 	.word	0x3ff00000
 23f1b0c:	fffffc14 	.word	0xfffffc14

023f1b10 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>:
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
    {
        zero_handling(input->buffer, input->rows * input->cols);
 23f1b10:	6881      	ldr	r1, [r0, #8]
 23f1b12:	e9d0 3200 	ldrd	r3, r2, [r0]
 23f1b16:	434a      	muls	r2, r1
                input[ix] = 1e-10;
 23f1b18:	4908      	ldr	r1, [pc, #32]	; (23f1b3c <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0x2c>)
 23f1b1a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
 23f1b1e:	4293      	cmp	r3, r2
 23f1b20:	d00b      	beq.n	23f1b3a <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0x2a>
            if (input[ix] == 0) {
 23f1b22:	edd3 7a00 	vldr	s15, [r3]
 23f1b26:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f1b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
 23f1b2e:	f103 0304 	add.w	r3, r3, #4
 23f1b32:	bf08      	it	eq
 23f1b34:	f843 1c04 	streq.w	r1, [r3, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
 23f1b38:	e7f1      	b.n	23f1b1e <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0xe>
    }
 23f1b3a:	4770      	bx	lr
 23f1b3c:	2edbe6ff 	.word	0x2edbe6ff

023f1b40 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     */
    static float frequency_to_mel(float f) {
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 23f1b40:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23f1ba4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x64>
 23f1b44:	eec0 7a07 	vdiv.f32	s15, s0, s14
 23f1b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        int32_t g = (int32_t) * ((int32_t *)&a);
 23f1b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 23f1b50:	ee17 3a90 	vmov	r3, s15
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 23f1b54:	4a14      	ldr	r2, [pc, #80]	; (23f1ba8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x68>)
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23f1b56:	eddf 7a15 	vldr	s15, [pc, #84]	; 23f1bac <_ZN2ei8speechpy9functions16frequency_to_melEf+0x6c>
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 23f1b5a:	441a      	add	r2, r3
 23f1b5c:	0dd2      	lsrs	r2, r2, #23
 23f1b5e:	05d2      	lsls	r2, r2, #23
        g = g - e;
 23f1b60:	1a9b      	subs	r3, r3, r2
 23f1b62:	ee00 3a10 	vmov	s0, r3
        float f = m - 1.0f;
 23f1b66:	ee30 0a47 	vsub.f32	s0, s0, s14
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23f1b6a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23f1bb0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x70>
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23f1b6e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 23f1bb4 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x74>
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23f1b72:	eea7 7a80 	vfma.f32	s14, s15, s0
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23f1b76:	eddf 7a10 	vldr	s15, [pc, #64]	; 23f1bb8 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x78>
        float s = f * f;
 23f1b7a:	ee60 6a00 	vmul.f32	s13, s0, s0
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23f1b7e:	eee6 7a00 	vfma.f32	s15, s12, s0
        r = fmaf(r, s, t);
 23f1b82:	eee7 7a26 	vfma.f32	s15, s14, s13
        r = fmaf(r, s, f);
 23f1b86:	eea7 0aa6 	vfma.f32	s0, s15, s13
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 23f1b8a:	ee07 2a90 	vmov	s15, r2
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 23f1b8e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23f1bbc <_ZN2ei8speechpy9functions16frequency_to_melEf+0x7c>
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 23f1b92:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 23f1b96:	eea7 0a87 	vfma.f32	s0, s15, s14
#endif
    }
 23f1b9a:	eddf 7a09 	vldr	s15, [pc, #36]	; 23f1bc0 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x80>
 23f1b9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f1ba2:	4770      	bx	lr
 23f1ba4:	442f0000 	.word	0x442f0000
 23f1ba8:	c0d55555 	.word	0xc0d55555
 23f1bac:	3e6c6078 	.word	0x3e6c6078
 23f1bb0:	be8ef46d 	.word	0xbe8ef46d
 23f1bb4:	3ea9e51a 	.word	0x3ea9e51a
 23f1bb8:	beff712d 	.word	0xbeff712d
 23f1bbc:	3f317218 	.word	0x3f317218
 23f1bc0:	448ce000 	.word	0x448ce000

023f1bc4 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
  { return __builtin_expf(__x); }
 23f1bc4:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f1be4 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x20>
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 23f1bc8:	b508      	push	{r3, lr}
 23f1bca:	ee80 0a27 	vdiv.f32	s0, s0, s15
 23f1bce:	f008 f98b 	bl	23f9ee8 <expf>
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 23f1bd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23f1bd6:	ee30 0a67 	vsub.f32	s0, s0, s15
    }
 23f1bda:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f1be8 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x24>
 23f1bde:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f1be2:	bd08      	pop	{r3, pc}
 23f1be4:	448ce000 	.word	0x448ce000
 23f1be8:	442f0000 	.word	0x442f0000

023f1bec <_ZN2ei8speechpy10processing11preemphasisD1Ev>:
        ~preemphasis() {
 23f1bec:	b510      	push	{r4, lr}
 23f1bee:	4604      	mov	r4, r0
            if (_prev_buffer) {
 23f1bf0:	68c0      	ldr	r0, [r0, #12]
 23f1bf2:	b108      	cbz	r0, 23f1bf8 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0xc>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 23f1bf4:	f002 fa8d 	bl	23f4112 <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
 23f1bf8:	6920      	ldr	r0, [r4, #16]
 23f1bfa:	b108      	cbz	r0, 23f1c00 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x14>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 23f1bfc:	f002 fa89 	bl	23f4112 <_Z7ei_freePv>
        }
 23f1c00:	4620      	mov	r0, r4
 23f1c02:	bd10      	pop	{r4, pc}
 23f1c04:	0000      	movs	r0, r0
	...

023f1c08 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 23f1c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1c0c:	ed2d 8b04 	vpush	{d8-d9}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 23f1c10:	1c8e      	adds	r6, r1, #2
    static int filterbanks(
 23f1c12:	b08f      	sub	sp, #60	; 0x3c
 23f1c14:	ee08 3a10 	vmov	s16, r3
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 23f1c18:	ea4f 0986 	mov.w	r9, r6, lsl #2
    static int filterbanks(
 23f1c1c:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 23f1c20:	4604      	mov	r4, r0
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 23f1c22:	4648      	mov	r0, r9
    static int filterbanks(
 23f1c24:	4615      	mov	r5, r2
 23f1c26:	9101      	str	r1, [sp, #4]
 23f1c28:	9303      	str	r3, [sp, #12]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 23f1c2a:	f002 fa6e 	bl	23f410a <_Z9ei_mallocj>
        if (!mels) {
 23f1c2e:	4607      	mov	r7, r0
 23f1c30:	b378      	cbz	r0, 23f1c92 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 23f1c32:	6863      	ldr	r3, [r4, #4]
 23f1c34:	9a01      	ldr	r2, [sp, #4]
 23f1c36:	4293      	cmp	r3, r2
 23f1c38:	f040 818a 	bne.w	23f1f50 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>
 23f1c3c:	68a2      	ldr	r2, [r4, #8]
 23f1c3e:	42aa      	cmp	r2, r5
 23f1c40:	f040 8186 	bne.w	23f1f50 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 23f1c44:	435a      	muls	r2, r3
 23f1c46:	2100      	movs	r1, #0
 23f1c48:	6820      	ldr	r0, [r4, #0]
 23f1c4a:	f009 fca3 	bl	23fb594 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 23f1c4e:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 23f1c52:	eef8 8a67 	vcvt.f32.u32	s17, s15
 23f1c56:	eeb0 0a68 	vmov.f32	s0, s17
 23f1c5a:	f7ff ff71 	bl	23f1b40 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f1c5e:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 23f1c62:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 23f1c66:	eef0 9a40 	vmov.f32	s19, s0
 23f1c6a:	eeb0 0a49 	vmov.f32	s0, s18
 23f1c6e:	f7ff ff67 	bl	23f1b40 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f1c72:	4630      	mov	r0, r6
 23f1c74:	eef0 0a40 	vmov.f32	s1, s0
 23f1c78:	4639      	mov	r1, r7
 23f1c7a:	eeb0 0a69 	vmov.f32	s0, s19
 23f1c7e:	f7ff fa5d 	bl	23f113c <_ZN2ei5numpy8linspaceEffmPf.isra.0>
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 23f1c82:	4648      	mov	r0, r9
 23f1c84:	f002 fa41 	bl	23f410a <_Z9ei_mallocj>
        if (!hertz) {
 23f1c88:	4606      	mov	r6, r0
 23f1c8a:	b920      	cbnz	r0, 23f1c96 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8e>
            ei_dsp_free(mels, mels_mem_size);
 23f1c8c:	4638      	mov	r0, r7
        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
        if (!freq_index) {
            ei_dsp_free(hertz, hertz_mem_size);
 23f1c8e:	f002 fa40 	bl	23f4112 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f1c92:	48b3      	ldr	r0, [pc, #716]	; (23f1f60 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x358>)
 23f1c94:	e157      	b.n	23f1f46 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33e>
 23f1c96:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f1c9a:	9b01      	ldr	r3, [sp, #4]
 23f1c9c:	f103 0801 	add.w	r8, r3, #1
 23f1ca0:	fa1f f38a 	uxth.w	r3, sl
 23f1ca4:	4598      	cmp	r8, r3
 23f1ca6:	db2b      	blt.n	23f1d00 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xf8>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 23f1ca8:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 23f1cac:	ed92 0a00 	vldr	s0, [r2]
 23f1cb0:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 23f1cb4:	9302      	str	r3, [sp, #8]
 23f1cb6:	f7ff ff85 	bl	23f1bc4 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
                hertz[ix] = low_freq;
 23f1cba:	eef4 8a40 	vcmp.f32	s17, s0
 23f1cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1cc2:	fe38 0a80 	vselgt.f32	s0, s17, s0
                hertz[ix] = high_freq;
 23f1cc6:	eeb4 9a40 	vcmp.f32	s18, s0
 23f1cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (ix == num_filter + 2 - 1) {
 23f1cce:	9b02      	ldr	r3, [sp, #8]
                hertz[ix] = high_freq;
 23f1cd0:	bf48      	it	mi
 23f1cd2:	eeb0 0a49 	vmovmi.f32	s0, s18
            if (ix == num_filter + 2 - 1) {
 23f1cd6:	4598      	cmp	r8, r3
 23f1cd8:	d004      	beq.n	23f1ce4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xdc>
 23f1cda:	ed8b 0a00 	vstr	s0, [fp]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f1cde:	f10a 0a01 	add.w	sl, sl, #1
 23f1ce2:	e7dd      	b.n	23f1ca0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x98>
                hertz[ix] -= 0.001;
 23f1ce4:	ee10 0a10 	vmov	r0, s0
 23f1ce8:	f7fa ff86 	bl	23ecbf8 <__aeabi_f2d>
 23f1cec:	a39a      	add	r3, pc, #616	; (adr r3, 23f1f58 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x350>)
 23f1cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1cf2:	f7fa fe21 	bl	23ec938 <__aeabi_dsub>
 23f1cf6:	f7fb facf 	bl	23ed298 <__aeabi_d2f>
 23f1cfa:	f8cb 0000 	str.w	r0, [fp]
 23f1cfe:	e7ee      	b.n	23f1cde <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xd6>
        ei_dsp_free(mels, mels_mem_size);
 23f1d00:	4638      	mov	r0, r7
 23f1d02:	f002 fa06 	bl	23f4112 <_Z7ei_freePv>
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 23f1d06:	4648      	mov	r0, r9
 23f1d08:	f002 f9ff 	bl	23f410a <_Z9ei_mallocj>
        if (!freq_index) {
 23f1d0c:	4607      	mov	r7, r0
 23f1d0e:	b908      	cbnz	r0, 23f1d14 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x10c>
            ei_dsp_free(hertz, hertz_mem_size);
 23f1d10:	4630      	mov	r0, r6
 23f1d12:	e7bc      	b.n	23f1c8e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x86>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 23f1d14:	3501      	adds	r5, #1
 23f1d16:	ee07 5a90 	vmov	s15, r5
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f1d1a:	2300      	movs	r3, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 23f1d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f1d20:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 23f1d24:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 23f1d28:	edd2 6a00 	vldr	s13, [r2]
 23f1d2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 23f1d30:	ee86 7a88 	vdiv.f32	s14, s13, s16
  { return __builtin_floorf(__x); }
 23f1d34:	febb 7a47 	vrintm.f32	s14, s14
 23f1d38:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23f1d3c:	ee17 2a10 	vmov	r2, s14
 23f1d40:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23f1d44:	3301      	adds	r3, #1
 23f1d46:	b29b      	uxth	r3, r3
 23f1d48:	4598      	cmp	r8, r3
 23f1d4a:	daeb      	bge.n	23f1d24 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x11c>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 23f1d4c:	4630      	mov	r0, r6
 23f1d4e:	f002 f9e0 	bl	23f4112 <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 23f1d52:	46b8      	mov	r8, r7
 23f1d54:	2500      	movs	r5, #0
            if (value < quantized_values_one_zero[mid]) {
 23f1d56:	f8df 920c 	ldr.w	r9, [pc, #524]	; 23f1f64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35c>
 23f1d5a:	9b01      	ldr	r3, [sp, #4]
 23f1d5c:	42ab      	cmp	r3, r5
 23f1d5e:	f240 80e7 	bls.w	23f1f30 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x328>
            int left = freq_index[i];
 23f1d62:	f8d8 b000 	ldr.w	fp, [r8]
            int middle = freq_index[i + 1];
 23f1d66:	1c6b      	adds	r3, r5, #1
            int right = freq_index[i + 2];
 23f1d68:	f8d8 6008 	ldr.w	r6, [r8, #8]
            int middle = freq_index[i + 1];
 23f1d6c:	9304      	str	r3, [sp, #16]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1d6e:	eba6 030b 	sub.w	r3, r6, fp
 23f1d72:	1c5a      	adds	r2, r3, #1
 23f1d74:	2101      	movs	r1, #1
 23f1d76:	9302      	str	r3, [sp, #8]
 23f1d78:	a806      	add	r0, sp, #24
 23f1d7a:	2300      	movs	r3, #0
            int middle = freq_index[i + 1];
 23f1d7c:	f108 0804 	add.w	r8, r8, #4
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1d80:	9205      	str	r2, [sp, #20]
            int middle = freq_index[i + 1];
 23f1d82:	ed98 8a00 	vldr	s16, [r8]
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1d86:	f7ff fa2c 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f1d8a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 23f1d8e:	b919      	cbnz	r1, 23f1d98 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x190>
 23f1d90:	a806      	add	r0, sp, #24
 23f1d92:	f7ff fa3b 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f1d96:	e77c      	b.n	23f1c92 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8a>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 23f1d98:	ee07 ba90 	vmov	s15, fp
 23f1d9c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 23f1da0:	ee07 6a90 	vmov	s15, r6
 23f1da4:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23f1da8:	4610      	mov	r0, r2
 23f1daa:	eef0 0a49 	vmov.f32	s1, s18
 23f1dae:	eeb0 0a68 	vmov.f32	s0, s17
 23f1db2:	9205      	str	r2, [sp, #20]
 23f1db4:	f7ff f9c2 	bl	23f113c <_ZN2ei5numpy8linspaceEffmPf.isra.0>
     * @param left Starting index (assigned 0)
     * @param middle Index where 1.0 will be placed
     * @param right Ending index (assigned 0)
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
        EI_DSP_MATRIX(out, 1, x_size);
 23f1db8:	2300      	movs	r3, #0
 23f1dba:	2101      	movs	r1, #1
 23f1dbc:	9a05      	ldr	r2, [sp, #20]
 23f1dbe:	a80a      	add	r0, sp, #40	; 0x28
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 23f1dc0:	f8dd a018 	ldr.w	sl, [sp, #24]
 23f1dc4:	f7ff fa0d 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f1dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1dca:	2b00      	cmp	r3, #0
 23f1dcc:	d045      	beq.n	23f1e5a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x252>

        for (size_t ix = 0; ix < x_size; ix++) {
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1dce:	ee18 2a10 	vmov	r2, s16
 23f1dd2:	46d4      	mov	ip, sl
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1dd4:	2300      	movs	r3, #0
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1dd6:	eba2 0e0b 	sub.w	lr, r2, fp
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 23f1dda:	1ab6      	subs	r6, r6, r2
 23f1ddc:	9a05      	ldr	r2, [sp, #20]
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1dde:	429a      	cmp	r2, r3
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1de0:	990a      	ldr	r1, [sp, #40]	; 0x28
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1de2:	d936      	bls.n	23f1e52 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x24a>
            if (x[ix] > left && x[ix] <= middle) {
 23f1de4:	eddc 7a00 	vldr	s15, [ip]
 23f1de8:	eef4 8ae7 	vcmpe.f32	s17, s15
 23f1dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1df0:	ea4f 0083 	mov.w	r0, r3, lsl #2
 23f1df4:	d511      	bpl.n	23f1e1a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x212>
 23f1df6:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 23f1dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f1dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1e02:	d80a      	bhi.n	23f1e1a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x212>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23f1e04:	ee07 ea10 	vmov	s14, lr
 23f1e08:	ee77 7ae8 	vsub.f32	s15, s15, s17
 23f1e0c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 23f1e10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23f1e14:	4401      	add	r1, r0
 23f1e16:	ed81 7a00 	vstr	s14, [r1]
            if (x[ix] < right && middle <= x[ix]) {
 23f1e1a:	ecfc 7a01 	vldmia	ip!, {s15}
 23f1e1e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23f1e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1e26:	dd12      	ble.n	23f1e4e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x246>
 23f1e28:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 23f1e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f1e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1e34:	db0b      	blt.n	23f1e4e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x246>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 23f1e36:	ee07 6a10 	vmov	s14, r6
 23f1e3a:	ee79 7a67 	vsub.f32	s15, s18, s15
 23f1e3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 23f1e42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23f1e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f1e48:	4401      	add	r1, r0
 23f1e4a:	ed81 7a00 	vstr	s14, [r1]
        for (size_t ix = 0; ix < x_size; ix++) {
 23f1e4e:	3301      	adds	r3, #1
 23f1e50:	e7c5      	b.n	23f1dde <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1d6>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 23f1e52:	4650      	mov	r0, sl
 23f1e54:	0092      	lsls	r2, r2, #2
 23f1e56:	f009 fb76 	bl	23fb546 <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
 23f1e5a:	a80a      	add	r0, sp, #40	; 0x28
 23f1e5c:	f7ff f9d6 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 23f1e60:	2200      	movs	r2, #0
        if (value > quantized_values_one_zero[length - 1]) {
 23f1e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 23f1e66:	9b02      	ldr	r3, [sp, #8]
 23f1e68:	4293      	cmp	r3, r2
 23f1e6a:	db5c      	blt.n	23f1f26 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31e>
                size_t index = (i * filterbanks->cols) + (left + zx);

                if (output_transposed) {
 23f1e6c:	9903      	ldr	r1, [sp, #12]
                size_t index = (i * filterbanks->cols) + (left + zx);
 23f1e6e:	68a3      	ldr	r3, [r4, #8]
 23f1e70:	eb0b 0002 	add.w	r0, fp, r2
                if (output_transposed) {
 23f1e74:	b999      	cbnz	r1, 23f1e9e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x296>
                size_t index = (i * filterbanks->cols) + (left + zx);
 23f1e76:	fb05 0003 	mla	r0, r5, r3, r0
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 23f1e7a:	9b06      	ldr	r3, [sp, #24]
 23f1e7c:	4939      	ldr	r1, [pc, #228]	; (23f1f64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35c>)
 23f1e7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f1e82:	edd3 7a00 	vldr	s15, [r3]
 23f1e86:	6823      	ldr	r3, [r4, #0]
 23f1e88:	4418      	add	r0, r3
        for (size_t ix = 0; ix < length; ix++) {
 23f1e8a:	2300      	movs	r3, #0
            if (quantized_values_one_zero[ix] == value) return ix;
 23f1e8c:	ecb1 7a01 	vldmia	r1!, {s14}
 23f1e90:	eef4 7a47 	vcmp.f32	s15, s14
 23f1e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1e98:	d105      	bne.n	23f1ea6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x29e>
            hi;
 23f1e9a:	b2db      	uxtb	r3, r3
 23f1e9c:	e03c      	b.n	23f1f18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
                    index = ((left + zx) * filterbanks->rows) + i;
 23f1e9e:	6863      	ldr	r3, [r4, #4]
 23f1ea0:	fb03 5000 	mla	r0, r3, r0, r5
 23f1ea4:	e7e9      	b.n	23f1e7a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x272>
        for (size_t ix = 0; ix < length; ix++) {
 23f1ea6:	3301      	adds	r3, #1
 23f1ea8:	2bef      	cmp	r3, #239	; 0xef
 23f1eaa:	d1ef      	bne.n	23f1e8c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x284>
        if (value < quantized_values_one_zero[0]) {
 23f1eac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f1eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1eb4:	d433      	bmi.n	23f1f1e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x316>
        if (value > quantized_values_one_zero[length - 1]) {
 23f1eb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f1eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1ebe:	dc30      	bgt.n	23f1f22 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31a>
        int hi = length - 1;
 23f1ec0:	23ee      	movs	r3, #238	; 0xee
        int lo = 0;
 23f1ec2:	2100      	movs	r1, #0
            int mid = (hi + lo) / 2;
 23f1ec4:	18ce      	adds	r6, r1, r3
 23f1ec6:	1076      	asrs	r6, r6, #1
            if (value < quantized_values_one_zero[mid]) {
 23f1ec8:	eb09 0c86 	add.w	ip, r9, r6, lsl #2
 23f1ecc:	ed9c 7a00 	vldr	s14, [ip]
 23f1ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f1ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1ed8:	d515      	bpl.n	23f1f06 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2fe>
                hi = mid - 1;
 23f1eda:	1e73      	subs	r3, r6, #1
        while (lo <= hi) {
 23f1edc:	428b      	cmp	r3, r1
 23f1ede:	daf1      	bge.n	23f1ec4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2bc>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 23f1ee0:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 23f1ee4:	ed96 7a00 	vldr	s14, [r6]
 23f1ee8:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 23f1eec:	ed96 6a00 	vldr	s12, [r6]
 23f1ef0:	ee37 7a67 	vsub.f32	s14, s14, s15
 23f1ef4:	ee77 7ac6 	vsub.f32	s15, s15, s12
            hi;
 23f1ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f1efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1f00:	d5cb      	bpl.n	23f1e9a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x292>
 23f1f02:	b2cb      	uxtb	r3, r1
 23f1f04:	e008      	b.n	23f1f18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            } else if (value > quantized_values_one_zero[mid]) {
 23f1f06:	dd01      	ble.n	23f1f0c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x304>
                lo = mid + 1;
 23f1f08:	1c71      	adds	r1, r6, #1
 23f1f0a:	e7e7      	b.n	23f1edc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d4>
                return quantized_values_one_zero[mid];
 23f1f0c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 23f1f10:	edcd 7a05 	vstr	s15, [sp, #20]
 23f1f14:	f89d 3014 	ldrb.w	r3, [sp, #20]
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 23f1f18:	7003      	strb	r3, [r0, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 23f1f1a:	3201      	adds	r2, #1
 23f1f1c:	e7a3      	b.n	23f1e66 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x25e>
            return quantized_values_one_zero[0];
 23f1f1e:	2300      	movs	r3, #0
 23f1f20:	e7fa      	b.n	23f1f18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            return quantized_values_one_zero[length - 1];
 23f1f22:	2301      	movs	r3, #1
 23f1f24:	e7f8      	b.n	23f1f18 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23f1f26:	a806      	add	r0, sp, #24
 23f1f28:	f7ff f970 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
 23f1f2c:	9d04      	ldr	r5, [sp, #16]
 23f1f2e:	e714      	b.n	23f1d5a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x152>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 23f1f30:	9b03      	ldr	r3, [sp, #12]
 23f1f32:	b123      	cbz	r3, 23f1f3e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x336>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
 23f1f34:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
 23f1f38:	b29b      	uxth	r3, r3
            filterbanks->rows = filterbanks->cols;
 23f1f3a:	6062      	str	r2, [r4, #4]
            filterbanks->cols = r;
 23f1f3c:	60a3      	str	r3, [r4, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 23f1f3e:	4638      	mov	r0, r7
 23f1f40:	f002 f8e7 	bl	23f4112 <_Z7ei_freePv>

        return EIDSP_OK;
 23f1f44:	2000      	movs	r0, #0
    }
 23f1f46:	b00f      	add	sp, #60	; 0x3c
 23f1f48:	ecbd 8b04 	vpop	{d8-d9}
 23f1f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f1f50:	4805      	ldr	r0, [pc, #20]	; (23f1f68 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x360>)
 23f1f52:	e7f8      	b.n	23f1f46 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33e>
 23f1f54:	f3af 8000 	nop.w
 23f1f58:	d2f1a9fc 	.word	0xd2f1a9fc
 23f1f5c:	3f50624d 	.word	0x3f50624d
 23f1f60:	fffffc16 	.word	0xfffffc16
 23f1f64:	023fccb0 	.word	0x023fccb0
 23f1f68:	fffffc14 	.word	0xfffffc14

023f1f6c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>:
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE

EI_IMPULSE_ERROR fill_input_tensor_from_matrix(
    matrix_t *fmatrix,
    TfLiteTensor *input
) {
 23f1f6c:	b538      	push	{r3, r4, r5, lr}
 23f1f6e:	460b      	mov	r3, r1
    const size_t matrix_els = fmatrix->rows * fmatrix->cols;
 23f1f70:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23f1f74:	434a      	muls	r2, r1

    switch (input->type) {
 23f1f76:	7819      	ldrb	r1, [r3, #0]
 23f1f78:	2903      	cmp	r1, #3
 23f1f7a:	d04a      	beq.n	23f2012 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xa6>
 23f1f7c:	2909      	cmp	r1, #9
 23f1f7e:	d021      	beq.n	23f1fc4 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x58>
 23f1f80:	2901      	cmp	r1, #1
 23f1f82:	d166      	bne.n	23f2052 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xe6>
        case kTfLiteFloat32: {
            if (input->bytes / 4 != matrix_els) {
 23f1f84:	6999      	ldr	r1, [r3, #24]
 23f1f86:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 23f1f8a:	d009      	beq.n	23f1fa0 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x34>
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23f1f8c:	2900      	cmp	r1, #0
 23f1f8e:	bfb8      	it	lt
 23f1f90:	3103      	addlt	r1, #3
 23f1f92:	1089      	asrs	r1, r1, #2
            }
            break;
        }
        case kTfLiteUInt8: {
            if (input->bytes != matrix_els) {
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23f1f94:	4832      	ldr	r0, [pc, #200]	; (23f2060 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf4>)
 23f1f96:	f002 f88b 	bl	23f40b0 <_Z9ei_printfPKcz>
                    (int)input->bytes, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
 23f1f9a:	f06f 0017 	mvn.w	r0, #23
 23f1f9e:	e006      	b.n	23f1fae <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1fa0:	2200      	movs	r2, #0
 23f1fa2:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 23f1fa6:	4361      	muls	r1, r4
 23f1fa8:	4291      	cmp	r1, r2
 23f1faa:	d801      	bhi.n	23f1fb0 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x44>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
 23f1fac:	2000      	movs	r0, #0
}
 23f1fae:	bd38      	pop	{r3, r4, r5, pc}
                input->data.f[ix] = fmatrix->buffer[ix];
 23f1fb0:	6801      	ldr	r1, [r0, #0]
 23f1fb2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23f1fb6:	680c      	ldr	r4, [r1, #0]
 23f1fb8:	6859      	ldr	r1, [r3, #4]
 23f1fba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23f1fbe:	600c      	str	r4, [r1, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1fc0:	3201      	adds	r2, #1
 23f1fc2:	e7ee      	b.n	23f1fa2 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x36>
            if (input->bytes != matrix_els) {
 23f1fc4:	6999      	ldr	r1, [r3, #24]
 23f1fc6:	4291      	cmp	r1, r2
 23f1fc8:	d1e4      	bne.n	23f1f94 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1fca:	2100      	movs	r1, #0
                input->data.int8[ix] = static_cast<int8_t>(
 23f1fcc:	f06f 057f 	mvn.w	r5, #127	; 0x7f
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f1fd0:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23f1fd4:	4362      	muls	r2, r4
 23f1fd6:	428a      	cmp	r2, r1
 23f1fd8:	d9e8      	bls.n	23f1fac <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23f1fda:	6802      	ldr	r2, [r0, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 23f1fdc:	ed93 7a03 	vldr	s14, [r3, #12]
 23f1fe0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f1fe4:	edd2 6a00 	vldr	s13, [r2]
 23f1fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
  { return __builtin_roundf(__x); }
 23f1fec:	fef8 7a67 	vrinta.f32	s15, s15
 23f1ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f1ff4:	ee17 ca90 	vmov	ip, s15
 23f1ff8:	691a      	ldr	r2, [r3, #16]
                input->data.int8[ix] = static_cast<int8_t>(
 23f1ffa:	685c      	ldr	r4, [r3, #4]
 23f1ffc:	4494      	add	ip, r2
 23f1ffe:	4662      	mov	r2, ip
 23f2000:	2a7f      	cmp	r2, #127	; 0x7f
 23f2002:	bfa8      	it	ge
 23f2004:	227f      	movge	r2, #127	; 0x7f
 23f2006:	42aa      	cmp	r2, r5
 23f2008:	bfb8      	it	lt
 23f200a:	462a      	movlt	r2, r5
 23f200c:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f200e:	3101      	adds	r1, #1
 23f2010:	e7de      	b.n	23f1fd0 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x64>
            if (input->bytes != matrix_els) {
 23f2012:	6999      	ldr	r1, [r3, #24]
 23f2014:	4291      	cmp	r1, r2
 23f2016:	d1bd      	bne.n	23f1f94 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f2018:	2100      	movs	r1, #0
 23f201a:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23f201e:	4362      	muls	r2, r4
 23f2020:	428a      	cmp	r2, r1
 23f2022:	d9c3      	bls.n	23f1fac <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23f2024:	6802      	ldr	r2, [r0, #0]
 23f2026:	ed93 7a03 	vldr	s14, [r3, #12]
 23f202a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f202e:	edd2 6a00 	vldr	s13, [r2]
 23f2032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23f2036:	fef8 7a67 	vrinta.f32	s15, s15
 23f203a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f203e:	ee17 5a90 	vmov	r5, s15
 23f2042:	691a      	ldr	r2, [r3, #16]
                input->data.uint8[ix] = static_cast<uint8_t>(
 23f2044:	685c      	ldr	r4, [r3, #4]
 23f2046:	4415      	add	r5, r2
 23f2048:	f385 0208 	usat	r2, #8, r5
 23f204c:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23f204e:	3101      	adds	r1, #1
 23f2050:	e7e3      	b.n	23f201a <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xae>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 23f2052:	4804      	ldr	r0, [pc, #16]	; (23f2064 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf8>)
 23f2054:	f002 f82c 	bl	23f40b0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 23f2058:	f06f 000c 	mvn.w	r0, #12
 23f205c:	e7a7      	b.n	23f1fae <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
 23f205e:	bf00      	nop
 23f2060:	023fc610 	.word	0x023fc610
 23f2064:	023fc651 	.word	0x023fc651

023f2068 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 23f2068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f206c:	ed2d 8b04 	vpush	{d8-d9}

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (impulse->object_detection) {
 23f2070:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
) {
 23f2074:	4607      	mov	r7, r0
 23f2076:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    if (impulse->object_detection) {
 23f207a:	b304      	cbz	r4, 23f20be <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x56>
        switch (impulse->object_detection_last_layer) {
 23f207c:	f990 3044 	ldrsb.w	r3, [r0, #68]	; 0x44
 23f2080:	1e5a      	subs	r2, r3, #1
 23f2082:	2a05      	cmp	r2, #5
 23f2084:	d818      	bhi.n	23f20b8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x50>
 23f2086:	e8df f002 	tbb	[pc, r2]
 23f208a:	7b03      	.short	0x7b03
 23f208c:	7b0c7b0c 	.word	0x7b0c7b0c
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 23f2090:	483d      	ldr	r0, [pc, #244]	; (23f2188 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x120>)
 23f2092:	f002 f80d 	bl	23f40b0 <_Z9ei_printfPKcz>
                        output->data.f,
                        impulse->tflite_output_features_count);
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 23f2096:	f06f 0009 	mvn.w	r0, #9
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
        }
    }

    return fill_res;
}
 23f209a:	ecbd 8b04 	vpop	{d8-d9}
 23f209e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
 23f20a2:	7809      	ldrb	r1, [r1, #0]
 23f20a4:	2909      	cmp	r1, #9
 23f20a6:	d06b      	beq.n	23f2180 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                else if (output->type == kTfLiteFloat32) {
 23f20a8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23f20ac:	2b01      	cmp	r3, #1
 23f20ae:	d067      	beq.n	23f2180 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 23f20b0:	4836      	ldr	r0, [pc, #216]	; (23f218c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x124>)
 23f20b2:	f001 fffd 	bl	23f40b0 <_Z9ei_printfPKcz>
 23f20b6:	e7ee      	b.n	23f2096 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x2e>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 23f20b8:	4619      	mov	r1, r3
 23f20ba:	4835      	ldr	r0, [pc, #212]	; (23f2190 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x128>)
 23f20bc:	e7f9      	b.n	23f20b2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x4a>
        if (int8_output) {
 23f20be:	780b      	ldrb	r3, [r1, #0]
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23f20c0:	f8d1 8004 	ldr.w	r8, [r1, #4]
        if (int8_output) {
 23f20c4:	2b09      	cmp	r3, #9
 23f20c6:	d025      	beq.n	23f2114 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xac>
 23f20c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                                                                       bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
 23f20ca:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 23f2194 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf_float(value);
            ei_printf("\n");
 23f20ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23f2198 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f20d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23f20d6:	42a3      	cmp	r3, r4
 23f20d8:	d92b      	bls.n	23f2132 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xca>
        float value = data[ix];
 23f20da:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
 23f20de:	ea4f 0984 	mov.w	r9, r4, lsl #2
 23f20e2:	b16e      	cbz	r6, 23f2100 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x98>
            ei_printf("%s:\t", impulse->categories[ix]);
 23f20e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23f20e8:	4658      	mov	r0, fp
 23f20ea:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23f20ee:	f001 ffdf 	bl	23f40b0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23f20f2:	eeb0 0a48 	vmov.f32	s0, s16
 23f20f6:	f001 fffb 	bl	23f40f0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 23f20fa:	4650      	mov	r0, sl
 23f20fc:	f001 ffd8 	bl	23f40b0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 23f2100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f2104:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23f2106:	f853 3009 	ldr.w	r3, [r3, r9]
 23f210a:	3508      	adds	r5, #8
 23f210c:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23f210e:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f2112:	e7de      	b.n	23f20d2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x6a>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23f2114:	edd1 7a04 	vldr	s15, [r1, #16]
 23f2118:	ed91 9a03 	vldr	s18, [r1, #12]
 23f211c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f2120:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ei_printf("%s:\t", impulse->categories[ix]);
 23f2122:	f8df b070 	ldr.w	fp, [pc, #112]	; 23f2194 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf("\n");
 23f2126:	f8df 9070 	ldr.w	r9, [pc, #112]	; 23f2198 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f212a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23f212e:	42a3      	cmp	r3, r4
 23f2130:	d801      	bhi.n	23f2136 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xce>
 23f2132:	2000      	movs	r0, #0
 23f2134:	e7b1      	b.n	23f209a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 23f2136:	f918 3004 	ldrsb.w	r3, [r8, r4]
 23f213a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 23f213e:	ee08 3a10 	vmov	s16, r3
 23f2142:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f2146:	ee38 8a68 	vsub.f32	s16, s16, s17
 23f214a:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
 23f214e:	b16e      	cbz	r6, 23f216c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x104>
            ei_printf("%s:\t", impulse->categories[ix]);
 23f2150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23f2154:	4658      	mov	r0, fp
 23f2156:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23f215a:	f001 ffa9 	bl	23f40b0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23f215e:	eeb0 0a48 	vmov.f32	s0, s16
 23f2162:	f001 ffc5 	bl	23f40f0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 23f2166:	4648      	mov	r0, r9
 23f2168:	f001 ffa2 	bl	23f40b0 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
 23f216c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f2170:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23f2172:	f853 300a 	ldr.w	r3, [r3, sl]
 23f2176:	3508      	adds	r5, #8
 23f2178:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23f217a:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f217e:	e7d4      	b.n	23f212a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xc2>
                    fill_res = fill_result_struct_quantized_yolov5(
 23f2180:	f06f 0014 	mvn.w	r0, #20
 23f2184:	e789      	b.n	23f209a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
 23f2186:	bf00      	nop
 23f2188:	023fc675 	.word	0x023fc675
 23f218c:	023fc6ba 	.word	0x023fc6ba
 23f2190:	023fc6ef 	.word	0x023fc6ef
 23f2194:	023fc722 	.word	0x023fc722
 23f2198:	023fc8b8 	.word	0x023fc8b8

023f219c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
 23f219c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f21a0:	4699      	mov	r9, r3
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {

    if(config->model_invoke() != kTfLiteOk) {
 23f21a2:	688b      	ldr	r3, [r1, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
 23f21a4:	4607      	mov	r7, r0
 23f21a6:	460d      	mov	r5, r1
 23f21a8:	4614      	mov	r4, r2
 23f21aa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 23f21ac:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    if(config->model_invoke() != kTfLiteOk) {
 23f21b0:	4798      	blx	r3
 23f21b2:	bb58      	cbnz	r0, 23f220c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x70>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 23f21b4:	f001 ff76 	bl	23f40a4 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23f21b8:	1b00      	subs	r0, r0, r4
 23f21ba:	eb61 0109 	sbc.w	r1, r1, r9
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23f21be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f21c2:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23f21c4:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23f21c8:	f7fb f8b6 	bl	23ed338 <__aeabi_ldivmod>
 23f21cc:	4601      	mov	r1, r0
 23f21ce:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 23f21d2:	f1b8 0f00 	cmp.w	r8, #0
 23f21d6:	d002      	beq.n	23f21de <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x42>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 23f21d8:	480e      	ldr	r0, [pc, #56]	; (23f2214 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
 23f21da:	f001 ff69 	bl	23f40b0 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 23f21de:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 23f21e2:	4638      	mov	r0, r7
 23f21e4:	e9cd 6800 	strd	r6, r8, [sp]
 23f21e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f21ea:	f7ff ff3d 	bl	23f2068 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>
 23f21ee:	4604      	mov	r4, r0
        impulse, output, labels_tensor, scores_tensor, result, debug);

    config->model_reset(ei_aligned_free);
 23f21f0:	68eb      	ldr	r3, [r5, #12]
 23f21f2:	4809      	ldr	r0, [pc, #36]	; (23f2218 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x7c>)
 23f21f4:	4798      	blx	r3

    if (fill_res != EI_IMPULSE_OK) {
 23f21f6:	b92c      	cbnz	r4, 23f2204 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f21f8:	f001 ff52 	bl	23f40a0 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
 23f21fc:	3002      	adds	r0, #2
 23f21fe:	bf08      	it	eq
 23f2200:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
 23f2204:	4620      	mov	r0, r4
 23f2206:	b003      	add	sp, #12
 23f2208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_TFLITE_ERROR;
 23f220c:	f06f 0402 	mvn.w	r4, #2
 23f2210:	e7f8      	b.n	23f2204 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
 23f2212:	bf00      	nop
 23f2214:	023fc727 	.word	0x023fc727
 23f2218:	023f0f31 	.word	0x023f0f31

023f221c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f221c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f2220:	4604      	mov	r4, r0
 23f2222:	4689      	mov	r9, r1
 23f2224:	4692      	mov	sl, r2
 23f2226:	461e      	mov	r6, r3
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f2228:	2500      	movs	r5, #0
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f222a:	270c      	movs	r7, #12
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f222c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23f222e:	42ab      	cmp	r3, r5
 23f2230:	d910      	bls.n	23f2254 <run_inference+0x38>
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f2232:	fb07 f005 	mul.w	r0, r7, r5
 23f2236:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23f2238:	9600      	str	r6, [sp, #0]
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f223a:	eb03 0c00 	add.w	ip, r3, r0
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23f223e:	f853 8000 	ldr.w	r8, [r3, r0]
 23f2242:	4652      	mov	r2, sl
 23f2244:	4649      	mov	r1, r9
 23f2246:	4620      	mov	r0, r4
 23f2248:	f8dc 3004 	ldr.w	r3, [ip, #4]
 23f224c:	47c0      	blx	r8
        if (res != EI_IMPULSE_OK) {
 23f224e:	b930      	cbnz	r0, 23f225e <run_inference+0x42>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f2250:	3501      	adds	r5, #1
 23f2252:	e7eb      	b.n	23f222c <run_inference+0x10>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f2254:	f001 ff24 	bl	23f40a0 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
 23f2258:	1c83      	adds	r3, r0, #2
 23f225a:	bf18      	it	ne
 23f225c:	2000      	movne	r0, #0
}
 23f225e:	b002      	add	sp, #8
 23f2260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f2264 <setup>:
{
 23f2264:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f2266:	2000      	movs	r0, #0
 23f2268:	f005 f842 	bl	23f72f0 <hal_timer_millis>
        while (_while() && !_condition()) {
 23f226c:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23f2270:	4604      	mov	r4, r0
 23f2272:	2000      	movs	r0, #0
 23f2274:	f005 f83c 	bl	23f72f0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f2278:	1b00      	subs	r0, r0, r4
 23f227a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f227e:	42a8      	cmp	r0, r5
 23f2280:	f171 0300 	sbcs.w	r3, r1, #0
 23f2284:	d207      	bcs.n	23f2296 <setup+0x32>
    waitFor(Serial.isConnected, 15000);
 23f2286:	f005 fdb7 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f228a:	f005 fdaa 	bl	23f7de2 <_ZN9USBSerial11isConnectedEv>
 23f228e:	b910      	cbnz	r0, 23f2296 <setup+0x32>
            spark_process();
 23f2290:	f005 f882 	bl	23f7398 <spark_process>
        while (_while() && !_condition()) {
 23f2294:	e7ed      	b.n	23f2272 <setup+0xe>
 23f2296:	f005 fdaf 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f229a:	f005 fda2 	bl	23f7de2 <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23f229e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f22a2:	f005 fef3 	bl	23f808c <delay>
    ei_printf("Edge Impulse inference runner for Particle devices\r\n");
 23f22a6:	4828      	ldr	r0, [pc, #160]	; (23f2348 <setup+0xe4>)
 23f22a8:	f001 ff02 	bl	23f40b0 <_Z9ei_printfPKcz>
    int err = Microphone_PDM::instance()
 23f22ac:	f004 fd9a 	bl	23f6de4 <_ZN14Microphone_PDM8instanceEv>
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23f22b0:	2101      	movs	r1, #1
 23f22b2:	2208      	movs	r2, #8
 23f22b4:	e9c0 1204 	strd	r1, r2, [r0, #16]
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23f22b8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .init();
 23f22bc:	6803      	ldr	r3, [r0, #0]
 23f22be:	60c2      	str	r2, [r0, #12]
 23f22c0:	68db      	ldr	r3, [r3, #12]
 23f22c2:	4798      	blx	r3
    if (err) {
 23f22c4:	4601      	mov	r1, r0
 23f22c6:	b110      	cbz	r0, 23f22ce <setup+0x6a>
        ei_printf("PDM decoder init err=%d", err);
 23f22c8:	4820      	ldr	r0, [pc, #128]	; (23f234c <setup+0xe8>)
 23f22ca:	f001 fef1 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("Inferencing settings:\n");
 23f22ce:	4820      	ldr	r0, [pc, #128]	; (23f2350 <setup+0xec>)
 23f22d0:	f001 feee 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("\tInterval: %.2f ms.\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 23f22d4:	2200      	movs	r2, #0
 23f22d6:	4b1f      	ldr	r3, [pc, #124]	; (23f2354 <setup+0xf0>)
 23f22d8:	481f      	ldr	r0, [pc, #124]	; (23f2358 <setup+0xf4>)
 23f22da:	f001 fee9 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("\tFrame size: %d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 23f22de:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f22e2:	481e      	ldr	r0, [pc, #120]	; (23f235c <setup+0xf8>)
 23f22e4:	f001 fee4 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("\tSample length: %d ms.\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 23f22e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23f22ec:	481c      	ldr	r0, [pc, #112]	; (23f2360 <setup+0xfc>)
 23f22ee:	f001 fedf 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("\tNo. of classes: %d\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 23f22f2:	2109      	movs	r1, #9
 23f22f4:	481b      	ldr	r0, [pc, #108]	; (23f2364 <setup+0x100>)
 23f22f6:	f001 fedb 	bl	23f40b0 <_Z9ei_printfPKcz>
    inference.buffer = (int16_t *)malloc(n_samples * sizeof(int16_t));
 23f22fa:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 23f22fe:	f005 f955 	bl	23f75ac <malloc>
 23f2302:	4c19      	ldr	r4, [pc, #100]	; (23f2368 <setup+0x104>)
 23f2304:	6020      	str	r0, [r4, #0]
    if(inference.buffer == NULL) {
 23f2306:	b1b0      	cbz	r0, 23f2336 <setup+0xd2>
    inference.n_samples  = n_samples;
 23f2308:	2300      	movs	r3, #0
 23f230a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
    inference.buf_ready  = 0;
 23f230e:	7123      	strb	r3, [r4, #4]
    inference.n_samples  = n_samples;
 23f2310:	e9c4 3202 	strd	r3, r2, [r4, #8]
    if (Microphone_PDM::instance().start()) {
 23f2314:	f004 fd66 	bl	23f6de4 <_ZN14Microphone_PDM8instanceEv>
 23f2318:	6803      	ldr	r3, [r0, #0]
 23f231a:	695b      	ldr	r3, [r3, #20]
 23f231c:	4798      	blx	r3
 23f231e:	b188      	cbz	r0, 23f2344 <setup+0xe0>
        ei_printf("Failed to start PDM!");
 23f2320:	4812      	ldr	r0, [pc, #72]	; (23f236c <setup+0x108>)
 23f2322:	f001 fec5 	bl	23f40b0 <_Z9ei_printfPKcz>
/**
 * @brief      Stop PDM and release buffers
 */
static void microphone_inference_end(void)
{
    Microphone_PDM::instance().stop();
 23f2326:	f004 fd5d 	bl	23f6de4 <_ZN14Microphone_PDM8instanceEv>
 23f232a:	6803      	ldr	r3, [r0, #0]
 23f232c:	699b      	ldr	r3, [r3, #24]
 23f232e:	4798      	blx	r3
    free(inference.buffer);
 23f2330:	6820      	ldr	r0, [r4, #0]
 23f2332:	f005 f949 	bl	23f75c8 <free>
}
 23f2336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ei_printf("ERR: Could not allocate audio buffer (size %d), this could be due to the window length of your model\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT);
 23f233a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23f233e:	480c      	ldr	r0, [pc, #48]	; (23f2370 <setup+0x10c>)
 23f2340:	f001 beb6 	b.w	23f40b0 <_Z9ei_printfPKcz>
}
 23f2344:	bd38      	pop	{r3, r4, r5, pc}
 23f2346:	bf00      	nop
 23f2348:	023fc744 	.word	0x023fc744
 23f234c:	023fc779 	.word	0x023fc779
 23f2350:	023fc791 	.word	0x023fc791
 23f2354:	3fb00000 	.word	0x3fb00000
 23f2358:	023fc7a8 	.word	0x023fc7a8
 23f235c:	023fc7bd 	.word	0x023fc7bd
 23f2360:	023fc7ce 	.word	0x023fc7ce
 23f2364:	023fc7e6 	.word	0x023fc7e6
 23f2368:	1007a5e8 	.word	0x1007a5e8
 23f236c:	023fc7fb 	.word	0x023fc7fb
 23f2370:	023fc810 	.word	0x023fc810

023f2374 <_Z22print_inference_result19ei_impulse_result_t>:
void print_inference_result(ei_impulse_result_t result) {
 23f2374:	b084      	sub	sp, #16
 23f2376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f237a:	ac06      	add	r4, sp, #24
 23f237c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
 23f2380:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 23f2384:	993d      	ldr	r1, [sp, #244]	; 0xf4
 23f2386:	4811      	ldr	r0, [pc, #68]	; (23f23cc <_Z22print_inference_result19ei_impulse_result_t+0x58>)
 23f2388:	f001 fe92 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("Predictions:\r\n");
 23f238c:	4810      	ldr	r0, [pc, #64]	; (23f23d0 <_Z22print_inference_result19ei_impulse_result_t+0x5c>)
 23f238e:	4625      	mov	r5, r4
 23f2390:	f001 fe8e 	bl	23f40b0 <_Z9ei_printfPKcz>
 23f2394:	2400      	movs	r4, #0
 23f2396:	4e0f      	ldr	r6, [pc, #60]	; (23f23d4 <_Z22print_inference_result19ei_impulse_result_t+0x60>)
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23f2398:	f8df 8040 	ldr.w	r8, [pc, #64]	; 23f23dc <_Z22print_inference_result19ei_impulse_result_t+0x68>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23f239c:	4f0e      	ldr	r7, [pc, #56]	; (23f23d8 <_Z22print_inference_result19ei_impulse_result_t+0x64>)
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23f239e:	4640      	mov	r0, r8
 23f23a0:	f856 1b04 	ldr.w	r1, [r6], #4
 23f23a4:	f001 fe84 	bl	23f40b0 <_Z9ei_printfPKcz>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23f23a8:	68e8      	ldr	r0, [r5, #12]
 23f23aa:	f7fa fc25 	bl	23ecbf8 <__aeabi_f2d>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23f23ae:	3401      	adds	r4, #1
        ei_printf("%.5f\r\n", result.classification[i].value);
 23f23b0:	4602      	mov	r2, r0
 23f23b2:	460b      	mov	r3, r1
 23f23b4:	4638      	mov	r0, r7
 23f23b6:	f001 fe7b 	bl	23f40b0 <_Z9ei_printfPKcz>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23f23ba:	2c09      	cmp	r4, #9
 23f23bc:	f105 0508 	add.w	r5, r5, #8
 23f23c0:	d1ed      	bne.n	23f239e <_Z22print_inference_result19ei_impulse_result_t+0x2a>
}
 23f23c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23f23c6:	b004      	add	sp, #16
 23f23c8:	4770      	bx	lr
 23f23ca:	bf00      	nop
 23f23cc:	023fc877 	.word	0x023fc877
 23f23d0:	023fc8ab 	.word	0x023fc8ab
 23f23d4:	10079994 	.word	0x10079994
 23f23d8:	023fc8c1 	.word	0x023fc8c1
 23f23dc:	023fc8ba 	.word	0x023fc8ba

023f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f23e0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f23e2:	2614      	movs	r6, #20
 23f23e4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f23e8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f23ea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f23ee:	42ae      	cmp	r6, r5
 23f23f0:	d004      	beq.n	23f23fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f23f2:	4628      	mov	r0, r5
 23f23f4:	f006 ff50 	bl	23f9298 <_ZN6StringD1Ev>
 23f23f8:	3514      	adds	r5, #20
 23f23fa:	e7f8      	b.n	23f23ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f23fc:	6820      	ldr	r0, [r4, #0]
 23f23fe:	f005 f8e3 	bl	23f75c8 <free>
    AllocatorT::free(data_);
}
 23f2402:	4620      	mov	r0, r4
 23f2404:	bd70      	pop	{r4, r5, r6, pc}

023f2406 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 23f2406:	b510      	push	{r4, lr}
 23f2408:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23f240a:	6840      	ldr	r0, [r0, #4]
 23f240c:	b108      	cbz	r0, 23f2412 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
 23f240e:	6823      	ldr	r3, [r4, #0]
 23f2410:	4798      	blx	r3
	__ptr = pointer();
      }
 23f2412:	4620      	mov	r0, r4
 23f2414:	bd10      	pop	{r4, pc}
	...

023f2418 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb>:
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 23f2418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f241c:	b0cb      	sub	sp, #300	; 0x12c
 23f241e:	461c      	mov	r4, r3
 23f2420:	4615      	mov	r5, r2
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f2422:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
 23f2426:	4680      	mov	r8, r0
 23f2428:	4689      	mov	r9, r1
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 23f242a:	f001 fe3b 	bl	23f40a4 <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f242e:	4b1c      	ldr	r3, [pc, #112]	; (23f24a0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x88>)
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f2430:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 23f2434:	9308      	str	r3, [sp, #32]
 23f2436:	2300      	movs	r3, #0
 23f2438:	af2a      	add	r7, sp, #168	; 0xa8
 23f243a:	ae3a      	add	r6, sp, #232	; 0xe8
    uint64_t ctx_start_us = ei_read_timer_us();
 23f243c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 23f2440:	9309      	str	r3, [sp, #36]	; 0x24
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f2442:	4620      	mov	r0, r4
 23f2444:	465b      	mov	r3, fp
 23f2446:	9701      	str	r7, [sp, #4]
 23f2448:	9600      	str	r6, [sp, #0]
 23f244a:	aa0a      	add	r2, sp, #40	; 0x28
 23f244c:	a906      	add	r1, sp, #24
 23f244e:	f7fe fdcd 	bl	23f0fec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23f2452:	4604      	mov	r4, r0
 23f2454:	b9e8      	cbnz	r0, 23f2492 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x7a>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input);
 23f2456:	4648      	mov	r0, r9
 23f2458:	a90a      	add	r1, sp, #40	; 0x28
 23f245a:	f7ff fd87 	bl	23f1f6c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>
    if (input_res != EI_IMPULSE_OK) {
 23f245e:	4604      	mov	r4, r0
 23f2460:	b9b8      	cbnz	r0, 23f2492 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x7a>
        return input_res;
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f2462:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 23f2466:	4651      	mov	r1, sl
 23f2468:	e9cd 5303 	strd	r5, r3, [sp, #12]
 23f246c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f2470:	4640      	mov	r0, r8
 23f2472:	e9cd 6701 	strd	r6, r7, [sp, #4]
 23f2476:	f8cd b000 	str.w	fp, [sp]
 23f247a:	f7ff fe8f 	bl	23f219c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
 23f247e:	4604      	mov	r4, r0
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23f2480:	f001 fe10 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f2484:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23f2488:	1ac0      	subs	r0, r0, r3
 23f248a:	eb61 0102 	sbc.w	r1, r1, r2
 23f248e:	e9c5 013c 	strd	r0, r1, [r5, #240]	; 0xf0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23f2492:	a808      	add	r0, sp, #32
 23f2494:	f7ff ffb7 	bl	23f2406 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
 23f2498:	4620      	mov	r0, r4
 23f249a:	b04b      	add	sp, #300	; 0x12c
 23f249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f24a0:	023f0f31 	.word	0x023f0f31

023f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 23f24a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f24a6:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f24a8:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f24aa:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
 23f24ae:	b90b      	cbnz	r3, 23f24b4 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
 23f24b0:	f007 fa54 	bl	23f995c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f24b4:	68c4      	ldr	r4, [r0, #12]
 23f24b6:	ab01      	add	r3, sp, #4
 23f24b8:	aa02      	add	r2, sp, #8
 23f24ba:	a903      	add	r1, sp, #12
 23f24bc:	47a0      	blx	r4
    }
 23f24be:	b004      	add	sp, #16
 23f24c0:	bd10      	pop	{r4, pc}
	...

023f24c4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
        int get_data(size_t offset, size_t length, float *out_buffer) {
 23f24c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f24c8:	ed2d 8b04 	vpush	{d8-d9}
 23f24cc:	4698      	mov	r8, r3
            if (!_prev_buffer || !_end_of_signal_buffer) {
 23f24ce:	68c3      	ldr	r3, [r0, #12]
        int get_data(size_t offset, size_t length, float *out_buffer) {
 23f24d0:	4604      	mov	r4, r0
 23f24d2:	460e      	mov	r6, r1
 23f24d4:	4617      	mov	r7, r2
 23f24d6:	b085      	sub	sp, #20
            if (!_prev_buffer || !_end_of_signal_buffer) {
 23f24d8:	2b00      	cmp	r3, #0
 23f24da:	d07a      	beq.n	23f25d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
 23f24dc:	6902      	ldr	r2, [r0, #16]
 23f24de:	2a00      	cmp	r2, #0
 23f24e0:	d077      	beq.n	23f25d2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
            if (offset + length > _signal->total_length) {
 23f24e2:	6800      	ldr	r0, [r0, #0]
 23f24e4:	eb01 0a07 	add.w	sl, r1, r7
 23f24e8:	6902      	ldr	r2, [r0, #16]
 23f24ea:	4592      	cmp	sl, r2
 23f24ec:	d873      	bhi.n	23f25d6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x112>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 23f24ee:	6862      	ldr	r2, [r4, #4]
 23f24f0:	1a89      	subs	r1, r1, r2
 23f24f2:	d547      	bpl.n	23f2584 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xc0>
            ret = _signal->get_data(offset, length, out_buffer);
 23f24f4:	4643      	mov	r3, r8
 23f24f6:	463a      	mov	r2, r7
 23f24f8:	4631      	mov	r1, r6
 23f24fa:	6820      	ldr	r0, [r4, #0]
 23f24fc:	f7ff ffd2 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
 23f2500:	4605      	mov	r5, r0
 23f2502:	2800      	cmp	r0, #0
 23f2504:	d143      	bne.n	23f258e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23f2506:	46c3      	mov	fp, r8
            bool all_between_min_1_and_1 = true;
 23f2508:	f04f 0901 	mov.w	r9, #1
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 23f250c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 23f2510:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
            for (size_t ix = 0; ix < length; ix++) {
 23f2514:	45b2      	cmp	sl, r6
 23f2516:	d043      	beq.n	23f25a0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xdc>
                float now = out_buffer[ix];
 23f2518:	ed9b 8a00 	vldr	s16, [fp]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 23f251c:	6863      	ldr	r3, [r4, #4]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23f251e:	ed94 7a02 	vldr	s14, [r4, #8]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 23f2522:	42b3      	cmp	r3, r6
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23f2524:	bf8a      	itet	hi
 23f2526:	6923      	ldrhi	r3, [r4, #16]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 23f2528:	68e3      	ldrls	r3, [r4, #12]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23f252a:	eb03 0386 	addhi.w	r3, r3, r6, lsl #2
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 23f252e:	edd3 6a00 	vldr	s13, [r3]
 23f2532:	eef0 7a48 	vmov.f32	s15, s16
 23f2536:	eee6 7ac7 	vfms.f32	s15, s13, s14
 23f253a:	eceb 7a01 	vstmia	fp!, {s15}
                if (_rescale && all_between_min_1_and_1) {
 23f253e:	7e23      	ldrb	r3, [r4, #24]
 23f2540:	b183      	cbz	r3, 23f2564 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
 23f2542:	f1b9 0f00 	cmp.w	r9, #0
 23f2546:	d00d      	beq.n	23f2564 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 23f2548:	eef4 7ae8 	vcmpe.f32	s15, s17
 23f254c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2550:	d423      	bmi.n	23f259a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd6>
 23f2552:	eef4 7ac9 	vcmpe.f32	s15, s18
 23f2556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f255a:	bfd4      	ite	le
 23f255c:	f04f 0901 	movle.w	r9, #1
 23f2560:	f04f 0900 	movgt.w	r9, #0
                if (_shift != 1) {
 23f2564:	6861      	ldr	r1, [r4, #4]
 23f2566:	2901      	cmp	r1, #1
 23f2568:	d004      	beq.n	23f2574 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xb0>
                    numpy::roll(_prev_buffer, _shift, -1);
 23f256a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f256e:	68e0      	ldr	r0, [r4, #12]
 23f2570:	f7fe fe56 	bl	23f1220 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
 23f2574:	6862      	ldr	r2, [r4, #4]
 23f2576:	68e3      	ldr	r3, [r4, #12]
 23f2578:	3601      	adds	r6, #1
 23f257a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f257e:	ed03 8a01 	vstr	s16, [r3, #-4]
            for (size_t ix = 0; ix < length; ix++) {
 23f2582:	e7c7      	b.n	23f2514 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x50>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 23f2584:	f7ff ff8e 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (ret != 0) {
 23f2588:	4605      	mov	r5, r0
 23f258a:	2800      	cmp	r0, #0
 23f258c:	d0b2      	beq.n	23f24f4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x30>
        }
 23f258e:	4628      	mov	r0, r5
 23f2590:	b005      	add	sp, #20
 23f2592:	ecbd 8b04 	vpop	{d8-d9}
 23f2596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f259a:	f04f 0900 	mov.w	r9, #0
 23f259e:	e7e1      	b.n	23f2564 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
            _next_offset_should_be += length;
 23f25a0:	6963      	ldr	r3, [r4, #20]
 23f25a2:	443b      	add	r3, r7
 23f25a4:	6163      	str	r3, [r4, #20]
            if (_rescale && !all_between_min_1_and_1) {
 23f25a6:	7e23      	ldrb	r3, [r4, #24]
 23f25a8:	2b00      	cmp	r3, #0
 23f25aa:	d0f0      	beq.n	23f258e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23f25ac:	f1b9 0f00 	cmp.w	r9, #0
 23f25b0:	d1ed      	bne.n	23f258e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                matrix_t scale_matrix(length, 1, out_buffer);
 23f25b2:	4643      	mov	r3, r8
 23f25b4:	2201      	movs	r2, #1
 23f25b6:	4639      	mov	r1, r7
 23f25b8:	4668      	mov	r0, sp
 23f25ba:	f7fe fe12 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
        if (scale == 1.0f) return EIDSP_OK;
 23f25be:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23f25dc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x118>
 23f25c2:	4668      	mov	r0, sp
 23f25c4:	f7fe fcf0 	bl	23f0fa8 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
                if (ret != 0) {
 23f25c8:	4605      	mov	r5, r0
                    EIDSP_ERR(ret);
 23f25ca:	4668      	mov	r0, sp
                matrix_t scale_matrix(length, 1, out_buffer);
 23f25cc:	f7fe fe1e 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f25d0:	e7dd      	b.n	23f258e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f25d2:	4d03      	ldr	r5, [pc, #12]	; (23f25e0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11c>)
 23f25d4:	e7db      	b.n	23f258e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 23f25d6:	4d03      	ldr	r5, [pc, #12]	; (23f25e4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x120>)
 23f25d8:	e7d9      	b.n	23f258e <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23f25da:	bf00      	nop
 23f25dc:	38000000 	.word	0x38000000
 23f25e0:	fffffc16 	.word	0xfffffc16
 23f25e4:	fffffc0e 	.word	0xfffffc0e

023f25e8 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 23f25e8:	b508      	push	{r3, lr}
 23f25ea:	4613      	mov	r3, r2
    return preemphasis->get_data(offset, length, out_ptr);
 23f25ec:	460a      	mov	r2, r1
 23f25ee:	4601      	mov	r1, r0
 23f25f0:	4802      	ldr	r0, [pc, #8]	; (23f25fc <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x14>)
 23f25f2:	6800      	ldr	r0, [r0, #0]
 23f25f4:	f7ff ff66 	bl	23f24c4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
}
 23f25f8:	bd08      	pop	{r3, pc}
 23f25fa:	bf00      	nop
 23f25fc:	1007a5f8 	.word	0x1007a5f8

023f2600 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f2600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f2602:	0097      	lsls	r7, r2, #2
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f2604:	4604      	mov	r4, r0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 23f2606:	e9c0 1200 	strd	r1, r2, [r0]
 23f260a:	7603      	strb	r3, [r0, #24]
 23f260c:	ed80 0a02 	vstr	s0, [r0, #8]
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f2610:	460e      	mov	r6, r1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f2612:	4638      	mov	r0, r7
 23f2614:	2101      	movs	r1, #1
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23f2616:	4615      	mov	r5, r2
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f2618:	f001 fd79 	bl	23f410e <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f261c:	2101      	movs	r1, #1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f261e:	60e0      	str	r0, [r4, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f2620:	4638      	mov	r0, r7
 23f2622:	f001 fd74 	bl	23f410e <_Z9ei_callocjj>
            _next_offset_should_be = 0;
 23f2626:	2300      	movs	r3, #0
            if (shift < 0) {
 23f2628:	429d      	cmp	r5, r3
            _next_offset_should_be = 0;
 23f262a:	6163      	str	r3, [r4, #20]
                _shift = signal->total_length + shift;
 23f262c:	bfb8      	it	lt
 23f262e:	6933      	ldrlt	r3, [r6, #16]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23f2630:	6120      	str	r0, [r4, #16]
                _shift = signal->total_length + shift;
 23f2632:	bfbc      	itt	lt
 23f2634:	195b      	addlt	r3, r3, r5
 23f2636:	6063      	strlt	r3, [r4, #4]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 23f2638:	68e3      	ldr	r3, [r4, #12]
 23f263a:	b13b      	cbz	r3, 23f264c <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
 23f263c:	b130      	cbz	r0, 23f264c <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 23f263e:	6931      	ldr	r1, [r6, #16]
 23f2640:	4603      	mov	r3, r0
 23f2642:	462a      	mov	r2, r5
 23f2644:	4630      	mov	r0, r6
 23f2646:	1b49      	subs	r1, r1, r5
 23f2648:	f7ff ff2c 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        }
 23f264c:	4620      	mov	r0, r4
 23f264e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f2650 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f2650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2654:	ed2d 8b02 	vpush	{d8}
 23f2658:	4606      	mov	r6, r0
 23f265a:	460f      	mov	r7, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f265c:	68d0      	ldr	r0, [r2, #12]
 23f265e:	4942      	ldr	r1, [pc, #264]	; (23f2768 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>)
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f2660:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f2662:	f8d2 b008 	ldr.w	fp, [r2, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f2666:	f7fb f865 	bl	23ed734 <strcmp>
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f266a:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f266c:	2800      	cmp	r0, #0
 23f266e:	bf0c      	ite	eq
 23f2670:	f04f 0a01 	moveq.w	sl, #1
 23f2674:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
 23f2678:	4625      	mov	r5, r4

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f267a:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 23f276c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f267e:	eddf 8a3c 	vldr	s17, [pc, #240]	; 23f2770 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>
    size_t bytes_left = signal->total_length;
 23f2682:	f8d6 8010 	ldr.w	r8, [r6, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2686:	6933      	ldr	r3, [r6, #16]
 23f2688:	42a3      	cmp	r3, r4
 23f268a:	d96b      	bls.n	23f2764 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23f268c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f2690:	46c1      	mov	r9, r8
 23f2692:	bf28      	it	cs
 23f2694:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2698:	2300      	movs	r3, #0
 23f269a:	465a      	mov	r2, fp
 23f269c:	4649      	mov	r1, r9
 23f269e:	4668      	mov	r0, sp
 23f26a0:	f7fe fd9f 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23f26a4:	9b00      	ldr	r3, [sp, #0]
 23f26a6:	b943      	cbnz	r3, 23f26ba <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f26a8:	4668      	mov	r0, sp
 23f26aa:	f7fe fdaf 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f26ae:	4831      	ldr	r0, [pc, #196]	; (23f2774 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
 23f26b0:	b005      	add	sp, #20
 23f26b2:	ecbd 8b02 	vpop	{d8}
 23f26b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23f26ba:	464a      	mov	r2, r9
 23f26bc:	4621      	mov	r1, r4
 23f26be:	4630      	mov	r0, r6
 23f26c0:	f7ff fef0 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f26c4:	2200      	movs	r2, #0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f26c6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 23f2778 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
 23f26ca:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 23f277c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f26ce:	454a      	cmp	r2, r9
 23f26d0:	d040      	beq.n	23f2754 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f26d2:	9b00      	ldr	r3, [sp, #0]
            if (channel_count == 3) {
 23f26d4:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f26d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f26dc:	edd3 7a00 	vldr	s15, [r3]
 23f26e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23f26e4:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f26e8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 23f26ec:	ee07 1a90 	vmov	s15, r1
 23f26f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f26f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f26f8:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f26fc:	ee07 1a90 	vmov	s15, r1
 23f2700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f2704:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f2706:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f270a:	ee07 3a90 	vmov	s15, r3
 23f270e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
 23f2712:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f2714:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
 23f2718:	ea4f 0085 	mov.w	r0, r5, lsl #2
 23f271c:	f105 0101 	add.w	r1, r5, #1
 23f2720:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            if (channel_count == 3) {
 23f2724:	d10d      	bne.n	23f2742 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = r;
 23f2726:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
 23f272a:	683b      	ldr	r3, [r7, #0]
                output_matrix->buffer[output_ix++] = b;
 23f272c:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = g;
 23f272e:	4403      	add	r3, r0
 23f2730:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
 23f2734:	683b      	ldr	r3, [r7, #0]
 23f2736:	4403      	add	r3, r0
 23f2738:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f273c:	460d      	mov	r5, r1
 23f273e:	3201      	adds	r2, #1
 23f2740:	e7c5      	b.n	23f26ce <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f2742:	ee27 7a28 	vmul.f32	s14, s14, s17
 23f2746:	eea6 7a25 	vfma.f32	s14, s12, s11
 23f274a:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
 23f274e:	ed83 7a00 	vstr	s14, [r3]
 23f2752:	e7f3      	b.n	23f273c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2754:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
 23f2756:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f275a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f275e:	f7fe fd55 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2762:	e790      	b.n	23f2686 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
 23f2764:	2000      	movs	r0, #0
 23f2766:	e7a3      	b.n	23f26b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
 23f2768:	023fc8c8 	.word	0x023fc8c8
 23f276c:	437f0000 	.word	0x437f0000
 23f2770:	3f1645a2 	.word	0x3f1645a2
 23f2774:	fffffc16 	.word	0xfffffc16
 23f2778:	3e991687 	.word	0x3e991687
 23f277c:	3de978d5 	.word	0x3de978d5

023f2780 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f2780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f2784:	6805      	ldr	r5, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23f2786:	680c      	ldr	r4, [r1, #0]
 23f2788:	f8d3 9000 	ldr.w	r9, [r3]
 23f278c:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 23f2790:	fbb4 f4f0 	udiv	r4, r4, r0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23f2794:	6816      	ldr	r6, [r2, #0]

        size_t out_ptr_ix = 0;
 23f2796:	f04f 0800 	mov.w	r8, #0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23f279a:	fbb6 f6f0 	udiv	r6, r6, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23f279e:	699b      	ldr	r3, [r3, #24]

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23f27a0:	435c      	muls	r4, r3
 23f27a2:	fb03 4606 	mla	r6, r3, r6, r4
 23f27a6:	42a6      	cmp	r6, r4
 23f27a8:	d919      	bls.n	23f27de <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23f27aa:	2700      	movs	r7, #0
 23f27ac:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 23f27b0:	68aa      	ldr	r2, [r5, #8]
 23f27b2:	eb07 0308 	add.w	r3, r7, r8
 23f27b6:	42ba      	cmp	r2, r7
 23f27b8:	d90c      	bls.n	23f27d4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 23f27ba:	686b      	ldr	r3, [r5, #4]
 23f27bc:	2201      	movs	r2, #1
 23f27be:	5dd9      	ldrb	r1, [r3, r7]
 23f27c0:	6828      	ldr	r0, [r5, #0]
 23f27c2:	4653      	mov	r3, sl
 23f27c4:	4421      	add	r1, r4
 23f27c6:	f7ff fe6d 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
 23f27ca:	f10a 0a04 	add.w	sl, sl, #4
 23f27ce:	b938      	cbnz	r0, 23f27e0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23f27d0:	3701      	adds	r7, #1
 23f27d2:	e7ed      	b.n	23f27b0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23f27d4:	68ea      	ldr	r2, [r5, #12]
 23f27d6:	4698      	mov	r8, r3
 23f27d8:	6992      	ldr	r2, [r2, #24]
 23f27da:	4414      	add	r4, r2
 23f27dc:	e7e3      	b.n	23f27a6 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x26>
                    return r;
                }
            }
        }

        return 0;
 23f27de:	2000      	movs	r0, #0
      }
 23f27e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f27e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
 23f27e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f27e8:	ed2d 8b06 	vpush	{d8-d10}
 23f27ec:	461c      	mov	r4, r3
 23f27ee:	4616      	mov	r6, r2
 23f27f0:	b0d7      	sub	sp, #348	; 0x15c
 23f27f2:	f89d 3198 	ldrb.w	r3, [sp, #408]	; 0x198

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    memset(result, 0, sizeof(ei_impulse_result_t));
 23f27f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    bool debug = false) {
 23f27fa:	9309      	str	r3, [sp, #36]	; 0x24
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f27fc:	6923      	ldr	r3, [r4, #16]
    bool debug = false) {
 23f27fe:	4607      	mov	r7, r0
 23f2800:	468a      	mov	sl, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f2802:	4630      	mov	r0, r6
 23f2804:	2100      	movs	r1, #0
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f2806:	ee0a 3a10 	vmov	s20, r3
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f280a:	f008 fec3 	bl	23fb594 <memset>
 23f280e:	4bcf      	ldr	r3, [pc, #828]	; (23f2b4c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>)
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f2810:	4620      	mov	r0, r4
 23f2812:	9310      	str	r3, [sp, #64]	; 0x40
 23f2814:	2300      	movs	r3, #0
 23f2816:	9311      	str	r3, [sp, #68]	; 0x44
 23f2818:	ab36      	add	r3, sp, #216	; 0xd8
 23f281a:	9301      	str	r3, [sp, #4]
 23f281c:	ab46      	add	r3, sp, #280	; 0x118
 23f281e:	9300      	str	r3, [sp, #0]
 23f2820:	aa16      	add	r2, sp, #88	; 0x58
 23f2822:	ab26      	add	r3, sp, #152	; 0x98
 23f2824:	a90e      	add	r1, sp, #56	; 0x38
 23f2826:	f7fe fbe1 	bl	23f0fec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23f282a:	4605      	mov	r5, r0
 23f282c:	2800      	cmp	r0, #0
 23f282e:	d15b      	bne.n	23f28e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
 23f2830:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f2834:	2b09      	cmp	r3, #9
 23f2836:	d002      	beq.n	23f283e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5a>
 23f2838:	2b03      	cmp	r3, #3
 23f283a:	f040 820e 	bne.w	23f2c5a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x476>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 23f283e:	f001 fc31 	bl	23f40a4 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23f2842:	693b      	ldr	r3, [r7, #16]
 23f2844:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    uint64_t dsp_start_us = ei_read_timer_us();
 23f2846:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23f284a:	9307      	str	r3, [sp, #28]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23f284c:	2c00      	cmp	r4, #0
 23f284e:	d154      	bne.n	23f28fa <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23f2850:	4618      	mov	r0, r3
 23f2852:	2101      	movs	r1, #1
 23f2854:	f001 fc5b 	bl	23f410e <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f2858:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23f285a:	4604      	mov	r4, r0
            buffer_managed_by_me = false;
 23f285c:	9308      	str	r3, [sp, #32]

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23f2860:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f2862:	689b      	ldr	r3, [r3, #8]
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23f2864:	f8d2 8008 	ldr.w	r8, [r2, #8]

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f2868:	689a      	ldr	r2, [r3, #8]

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f286a:	68d8      	ldr	r0, [r3, #12]
 23f286c:	49b8      	ldr	r1, [pc, #736]	; (23f2b50 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f286e:	ee0a 2a90 	vmov	s21, r2
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f2872:	f7fa ff5f 	bl	23ed734 <strcmp>
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f2876:	ed9d 8a1a 	vldr	s16, [sp, #104]	; 0x68
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f287a:	f04f 0900 	mov.w	r9, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f287e:	2800      	cmp	r0, #0
 23f2880:	bf0c      	ite	eq
 23f2882:	2301      	moveq	r3, #1
 23f2884:	2303      	movne	r3, #3
 23f2886:	eddd 8a19 	vldr	s17, [sp, #100]	; 0x64
 23f288a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    size_t output_ix = 0;
 23f288e:	464d      	mov	r5, r9
 23f2890:	ed9f 9ab0 	vldr	s18, [pc, #704]	; 23f2b54 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
                        b = (b - torch_mean[2]) / torch_std[2];
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f2894:	eddf 9ab0 	vldr	s19, [pc, #704]	; 23f2b58 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f2898:	930a      	str	r3, [sp, #40]	; 0x28
    size_t bytes_left = signal->total_length;
 23f289a:	f8da 3010 	ldr.w	r3, [sl, #16]
 23f289e:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f28a0:	f8da 3010 	ldr.w	r3, [sl, #16]
 23f28a4:	454b      	cmp	r3, r9
 23f28a6:	f240 817d 	bls.w	23f2ba4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23f28aa:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23f28ac:	ee1a 2a90 	vmov	r2, s21
 23f28b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f28b4:	bf28      	it	cs
 23f28b6:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 23f28ba:	469b      	mov	fp, r3
 23f28bc:	a812      	add	r0, sp, #72	; 0x48
 23f28be:	2300      	movs	r3, #0
 23f28c0:	4659      	mov	r1, fp
 23f28c2:	f7fe fc8e 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23f28c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23f28c8:	b9cb      	cbnz	r3, 23f28fe <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x11a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f28ca:	a812      	add	r0, sp, #72	; 0x48
 23f28cc:	f7fe fc9e 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>

    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23f28d0:	49a2      	ldr	r1, [pc, #648]	; (23f2b5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>)
 23f28d2:	48a3      	ldr	r0, [pc, #652]	; (23f2b60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>)
 23f28d4:	f001 fbec 	bl	23f40b0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 23f28d8:	f06f 0504 	mvn.w	r5, #4
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
 23f28dc:	b124      	cbz	r4, 23f28e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
 23f28de:	9b08      	ldr	r3, [sp, #32]
 23f28e0:	b113      	cbz	r3, 23f28e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
            ei_free(buffer);
 23f28e2:	4620      	mov	r0, r4
 23f28e4:	f001 fc15 	bl	23f4112 <_Z7ei_freePv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23f28e8:	a810      	add	r0, sp, #64	; 0x40
 23f28ea:	f7ff fd8c 	bl	23f2406 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
 23f28ee:	4628      	mov	r0, r5
 23f28f0:	b057      	add	sp, #348	; 0x15c
 23f28f2:	ecbd 8b06 	vpop	{d8-d10}
 23f28f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer_managed_by_me = false;
 23f28fa:	2300      	movs	r3, #0
 23f28fc:	e7ae      	b.n	23f285c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x78>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23f28fe:	4649      	mov	r1, r9
 23f2900:	465a      	mov	r2, fp
 23f2902:	4650      	mov	r0, sl
 23f2904:	f7ff fdce 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f2908:	2100      	movs	r1, #0
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f290a:	eddf 3a96 	vldr	s7, [pc, #600]	; 23f2b64 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x380>
 23f290e:	ed9f 3a96 	vldr	s6, [pc, #600]	; 23f2b68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x384>
                        r /= 255.0f;
 23f2912:	ed9f 6a96 	vldr	s12, [pc, #600]	; 23f2b6c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x388>
                        r = (r - torch_mean[0]) / torch_std[0];
 23f2916:	eddf 5a96 	vldr	s11, [pc, #600]	; 23f2b70 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x38c>
 23f291a:	ed9f 5a96 	vldr	s10, [pc, #600]	; 23f2b74 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
                        g = (g - torch_mean[1]) / torch_std[1];
 23f291e:	eddf 4a96 	vldr	s9, [pc, #600]	; 23f2b78 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
 23f2922:	ed9f 4a96 	vldr	s8, [pc, #600]	; 23f2b7c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f2926:	458b      	cmp	fp, r1
 23f2928:	f000 8132 	beq.w	23f2b90 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ac>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f292c:	9b12      	ldr	r3, [sp, #72]	; 0x48
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f292e:	f105 0e01 	add.w	lr, r5, #1
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f2932:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f2936:	edd3 7a00 	vldr	s15, [r3]
 23f293a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23f293e:	ee17 3a90 	vmov	r3, s15
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 23f2942:	0a1a      	lsrs	r2, r3, #8
 23f2944:	920b      	str	r2, [sp, #44]	; 0x2c
            if (channel_count == 3) {
 23f2946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f2948:	1960      	adds	r0, r4, r5
            if (channel_count == 3) {
 23f294a:	2a03      	cmp	r2, #3
 23f294c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 23f2950:	ee07 2a10 	vmov	s14, r2
 23f2954:	f3c3 2207 	ubfx	r2, r3, #8, #8
 23f2958:	ee07 2a90 	vmov	s15, r2
 23f295c:	b2da      	uxtb	r2, r3
 23f295e:	ee06 2a90 	vmov	s13, r2
 23f2962:	f040 8087 	bne.w	23f2a74 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x290>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f2966:	eef4 8a49 	vcmp.f32	s17, s18
 23f296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f296e:	eb04 0c0e 	add.w	ip, r4, lr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f2972:	f105 0e03 	add.w	lr, r5, #3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f2976:	f105 0502 	add.w	r5, r5, #2
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f297a:	4425      	add	r5, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f297c:	d12a      	bne.n	23f29d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
 23f297e:	eddf 2a80 	vldr	s5, [pc, #512]	; 23f2b80 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
 23f2982:	eeb4 8a62 	vcmp.f32	s16, s5
 23f2986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f298a:	d123      	bne.n	23f29d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
 23f298c:	f1b8 0f00 	cmp.w	r8, #0
 23f2990:	d120      	bne.n	23f29d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f2992:	eddf 2a7c 	vldr	s5, [pc, #496]	; 23f2b84 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
 23f2996:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f299a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f299e:	ee37 7a62 	vsub.f32	s14, s14, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f29a2:	ee77 7ae2 	vsub.f32	s15, s15, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f29a6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f29aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f29ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f29b2:	ee76 6ae2 	vsub.f32	s13, s13, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f29b6:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f29ba:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f29be:	eefd 7ae6 	vcvt.s32.f32	s15, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f29c2:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f29c4:	f88c 2000 	strb.w	r2, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f29c8:	ee17 3a90 	vmov	r3, s15
 23f29cc:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f29ce:	4675      	mov	r5, lr
 23f29d0:	3101      	adds	r1, #1
 23f29d2:	e7a8      	b.n	23f2926 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x142>
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f29d4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                    float b = static_cast<float>(pixel & 0xff);
 23f29d8:	b2db      	uxtb	r3, r3
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f29da:	ee07 2a90 	vmov	s15, r2
 23f29de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float b = static_cast<float>(pixel & 0xff);
 23f29e2:	ee07 3a90 	vmov	s15, r3
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23f29e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float b = static_cast<float>(pixel & 0xff);
 23f29ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f29ee:	f1b8 0f00 	cmp.w	r8, #0
 23f29f2:	d125      	bne.n	23f2a40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x25c>
                        r /= 255.0f;
 23f29f4:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23f29f8:	eec6 6a86 	vdiv.f32	s13, s13, s12
                        b /= 255.0f;
 23f29fc:	eec7 7a86 	vdiv.f32	s15, s15, s12
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23f2a00:	eec7 2a28 	vdiv.f32	s5, s14, s17
 23f2a04:	feb8 7a62 	vrinta.f32	s14, s5
 23f2a08:	ee38 7a07 	vadd.f32	s14, s16, s14
 23f2a0c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23f2a10:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f2a14:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 23f2a18:	feb8 7a47 	vrinta.f32	s14, s14
 23f2a1c:	ee38 7a07 	vadd.f32	s14, s16, s14
 23f2a20:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23f2a24:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f2a26:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f2a2a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23f2a2e:	fef8 7a47 	vrinta.f32	s15, s14
 23f2a32:	ee78 7a27 	vadd.f32	s15, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f2a36:	f88c 3000 	strb.w	r3, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f2a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f2a3e:	e7c3      	b.n	23f29c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1e4>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23f2a40:	f1b8 0f02 	cmp.w	r8, #2
 23f2a44:	d1dc      	bne.n	23f2a00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x21c>
                        r /= 255.0f;
 23f2a46:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23f2a4a:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23f2a4e:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23f2a52:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23f2a56:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23f2a5a:	eec2 6a84 	vdiv.f32	s13, s5, s8
                        b /= 255.0f;
 23f2a5e:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23f2a62:	eddf 7a49 	vldr	s15, [pc, #292]	; 23f2b88 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
 23f2a66:	ed9f 2a49 	vldr	s4, [pc, #292]	; 23f2b8c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
 23f2a6a:	ee72 2ae7 	vsub.f32	s5, s5, s15
 23f2a6e:	eec2 7a82 	vdiv.f32	s15, s5, s4
 23f2a72:	e7c5      	b.n	23f2a00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x21c>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f2a74:	eef4 8a49 	vcmp.f32	s17, s18
 23f2a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2a7c:	d12c      	bne.n	23f2ad8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
 23f2a7e:	eddf 2a40 	vldr	s5, [pc, #256]	; 23f2b80 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
 23f2a82:	eeb4 8a62 	vcmp.f32	s16, s5
 23f2a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2a8a:	d125      	bne.n	23f2ad8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
 23f2a8c:	f1b8 0f00 	cmp.w	r8, #0
 23f2a90:	d122      	bne.n	23f2ad8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 23f2a92:	f249 6245 	movw	r2, #38469	; 0x9645
 23f2a96:	ee17 3a90 	vmov	r3, s15
 23f2a9a:	4353      	muls	r3, r2
 23f2a9c:	ee17 5a10 	vmov	r5, s14
 23f2aa0:	461a      	mov	r2, r3
 23f2aa2:	f644 438b 	movw	r3, #19595	; 0x4c8b
 23f2aa6:	fb03 2205 	mla	r2, r3, r5, r2
 23f2aaa:	f641 532f 	movw	r3, #7471	; 0x1d2f
 23f2aae:	ee16 5a90 	vmov	r5, s13
 23f2ab2:	fb03 2305 	mla	r3, r3, r5, r2
                    gray >>= 16; // scale down to int8_t
 23f2ab6:	141b      	asrs	r3, r3, #16
 23f2ab8:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
 23f2abc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 23f2b84 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
 23f2ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f2ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f2ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f2acc:	ee17 3a90 	vmov	r3, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 23f2ad0:	f303 0307 	ssat	r3, #8, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23f2ad4:	7003      	strb	r3, [r0, #0]
 23f2ad6:	e77a      	b.n	23f29ce <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1ea>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23f2ad8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f2adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float b = static_cast<float>(pixel & 0xff);
 23f2ae0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f2ae4:	f1b8 0f00 	cmp.w	r8, #0
 23f2ae8:	d116      	bne.n	23f2b18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x334>
                        r /= 255.0f;
 23f2aea:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23f2aee:	eec7 7a86 	vdiv.f32	s15, s15, s12
                        b /= 255.0f;
 23f2af2:	eec6 6a86 	vdiv.f32	s13, s13, s12
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f2af6:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23f2afa:	eee7 7a23 	vfma.f32	s15, s14, s7
 23f2afe:	eee6 7a83 	vfma.f32	s15, s13, s6
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23f2b02:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23f2b06:	fef8 7a47 	vrinta.f32	s15, s14
 23f2b0a:	ee78 7a27 	vadd.f32	s15, s16, s15
 23f2b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f2b12:	ee17 3a90 	vmov	r3, s15
 23f2b16:	e7dd      	b.n	23f2ad4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f0>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23f2b18:	f1b8 0f02 	cmp.w	r8, #2
 23f2b1c:	d1eb      	bne.n	23f2af6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
                        r /= 255.0f;
 23f2b1e:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23f2b22:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23f2b26:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23f2b2a:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23f2b2e:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23f2b32:	eec2 7a84 	vdiv.f32	s15, s5, s8
                        b /= 255.0f;
 23f2b36:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23f2b3a:	eddf 6a13 	vldr	s13, [pc, #76]	; 23f2b88 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
 23f2b3e:	ed9f 2a13 	vldr	s4, [pc, #76]	; 23f2b8c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
 23f2b42:	ee72 2ae6 	vsub.f32	s5, s5, s13
 23f2b46:	eec2 6a82 	vdiv.f32	s13, s5, s4
 23f2b4a:	e7d4      	b.n	23f2af6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
 23f2b4c:	023f0f31 	.word	0x023f0f31
 23f2b50:	023fc8c8 	.word	0x023fc8c8
 23f2b54:	3b808081 	.word	0x3b808081
 23f2b58:	3f1645a2 	.word	0x3f1645a2
 23f2b5c:	fffffc16 	.word	0xfffffc16
 23f2b60:	023fc8d2 	.word	0x023fc8d2
 23f2b64:	3e991687 	.word	0x3e991687
 23f2b68:	3de978d5 	.word	0x3de978d5
 23f2b6c:	437f0000 	.word	0x437f0000
 23f2b70:	3ef851ec 	.word	0x3ef851ec
 23f2b74:	3e6a7efa 	.word	0x3e6a7efa
 23f2b78:	3ee978d5 	.word	0x3ee978d5
 23f2b7c:	3e656042 	.word	0x3e656042
 23f2b80:	c3000000 	.word	0xc3000000
 23f2b84:	43000000 	.word	0x43000000
 23f2b88:	3ecfdf3b 	.word	0x3ecfdf3b
 23f2b8c:	3e666666 	.word	0x3e666666
                }
            }
        }

        bytes_left -= elements_to_read;
 23f2b90:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2b92:	a812      	add	r0, sp, #72	; 0x48
        bytes_left -= elements_to_read;
 23f2b94:	eba3 030b 	sub.w	r3, r3, fp
 23f2b98:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2b9a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f2b9e:	f7fe fb35 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f2ba2:	e67d      	b.n	23f28a0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xbc>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f2ba4:	f001 fa7c 	bl	23f40a0 <_Z29ei_run_impulse_check_canceledv>
 23f2ba8:	1c83      	adds	r3, r0, #2
 23f2baa:	4605      	mov	r5, r0
 23f2bac:	f43f ae96 	beq.w	23f28dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2bb0:	f001 fa78 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f2bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2bba:	1ac0      	subs	r0, r0, r3
 23f2bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f2bbe:	eb61 0103 	sbc.w	r1, r1, r3
 23f2bc2:	e9c6 013a 	strd	r0, r1, [r6, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2bc6:	2300      	movs	r3, #0
 23f2bc8:	f7fa fbb6 	bl	23ed338 <__aeabi_ldivmod>
    if (debug) {
 23f2bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2bce:	4601      	mov	r1, r0
 23f2bd0:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
    if (debug) {
 23f2bd4:	b1fb      	cbz	r3, 23f2c16 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x432>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23f2bd6:	4822      	ldr	r0, [pc, #136]	; (23f2c60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x47c>)
 23f2bd8:	f001 fa6a 	bl	23f40b0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2bdc:	9b07      	ldr	r3, [sp, #28]
 23f2bde:	4625      	mov	r5, r4
 23f2be0:	4423      	add	r3, r4
 23f2be2:	4699      	mov	r9, r3
            ei_printf(" ");
 23f2be4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 23f2c68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x484>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2be8:	45a9      	cmp	r9, r5
 23f2bea:	d011      	beq.n	23f2c10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x42c>
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
 23f2bec:	f915 3b01 	ldrsb.w	r3, [r5], #1
 23f2bf0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f2bf2:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 23f2bf6:	1a9b      	subs	r3, r3, r2
 23f2bf8:	ee07 3a90 	vmov	s15, r3
 23f2bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f2c00:	ee27 0a80 	vmul.f32	s0, s15, s0
 23f2c04:	f001 fa74 	bl	23f40f0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 23f2c08:	4640      	mov	r0, r8
 23f2c0a:	f001 fa51 	bl	23f40b0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2c0e:	e7eb      	b.n	23f2be8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
        ei_printf("\n");
 23f2c10:	4814      	ldr	r0, [pc, #80]	; (23f2c64 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x480>)
 23f2c12:	f001 fa4d 	bl	23f40b0 <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
 23f2c16:	f001 fa45 	bl	23f40a4 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f2c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ctx_start_us = ei_read_timer_us();
 23f2c1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f2c20:	e9cd 6303 	strd	r6, r3, [sp, #12]
 23f2c24:	ab36      	add	r3, sp, #216	; 0xd8
 23f2c26:	9302      	str	r3, [sp, #8]
 23f2c28:	ab46      	add	r3, sp, #280	; 0x118
 23f2c2a:	9301      	str	r3, [sp, #4]
 23f2c2c:	ab26      	add	r3, sp, #152	; 0x98
    ctx_start_us = ei_read_timer_us();
 23f2c2e:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f2c30:	9300      	str	r3, [sp, #0]
 23f2c32:	4638      	mov	r0, r7
 23f2c34:	460b      	mov	r3, r1
 23f2c36:	ee1a 1a10 	vmov	r1, s20
 23f2c3a:	f7ff faaf 	bl	23f219c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    if (run_res != EI_IMPULSE_OK) {
 23f2c3e:	4605      	mov	r5, r0
 23f2c40:	2800      	cmp	r0, #0
 23f2c42:	f47f ae4b 	bne.w	23f28dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23f2c46:	f001 fa2d 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f2c4a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 23f2c4e:	1ac0      	subs	r0, r0, r3
 23f2c50:	eb61 0102 	sbc.w	r1, r1, r2
 23f2c54:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    return EI_IMPULSE_OK;
 23f2c58:	e640      	b.n	23f28dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 23f2c5a:	f06f 0508 	mvn.w	r5, #8
 23f2c5e:	e643      	b.n	23f28e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
 23f2c60:	023fc9c9 	.word	0x023fc9c9
 23f2c64:	023fc8b8 	.word	0x023fc8b8
 23f2c68:	023ffbdb 	.word	0x023ffbdb

023f2c6c <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f2c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f2c6e:	4615      	mov	r5, r2
 23f2c70:	4604      	mov	r4, r0
 23f2c72:	461f      	mov	r7, r3
 23f2c74:	460e      	mov	r6, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f2c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f2c7a:	2100      	movs	r1, #0
 23f2c7c:	4628      	mov	r0, r5
 23f2c7e:	f008 fc89 	bl	23fb594 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
 23f2c82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 23f2c84:	9700      	str	r7, [sp, #0]
 23f2c86:	462a      	mov	r2, r5
 23f2c88:	4631      	mov	r1, r6
 23f2c8a:	4620      	mov	r0, r4
 23f2c8c:	685b      	ldr	r3, [r3, #4]
 23f2c8e:	f7ff fda9 	bl	23f27e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
}
 23f2c92:	b003      	add	sp, #12
 23f2c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f2c96 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 23f2c96:	b510      	push	{r4, lr}
 23f2c98:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 23f2c9a:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 23f2c9c:	b108      	cbz	r0, 23f2ca2 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev+0xc>
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 23f2c9e:	f001 fa38 	bl	23f4112 <_Z7ei_freePv>
      }
 23f2ca2:	4620      	mov	r0, r4
 23f2ca4:	bd10      	pop	{r4, pc}
	...

023f2ca8 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 23f2ca8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f2caa:	e9d0 5400 	ldrd	r5, r4, [r0]
 23f2cae:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 23f2cb0:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f2cb4:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
 23f2cb8:	d302      	bcc.n	23f2cc0 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 23f2cba:	4803      	ldr	r0, [pc, #12]	; (23f2cc8 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj+0x20>)
 23f2cbc:	f006 fe32 	bl	23f9924 <_ZSt24__throw_out_of_range_fmtPKcz>
      {
	_M_range_check(__n);
	return (*this)[__n];
      }
 23f2cc0:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 23f2cc4:	bd38      	pop	{r3, r4, r5, pc}
 23f2cc6:	bf00      	nop
 23f2cc8:	023fc8f7 	.word	0x023fc8f7

023f2ccc <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 23f2ccc:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f2cce:	466c      	mov	r4, sp
 23f2cd0:	460b      	mov	r3, r1
 23f2cd2:	4602      	mov	r2, r0
 23f2cd4:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f2cd8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f2cdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f2ce0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f2ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f2ce8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f2cec:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f2cee:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f2cf0:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f2cf2:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f2cf4:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f2cf6:	68d8      	ldr	r0, [r3, #12]
 23f2cf8:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f2cfa:	60d9      	str	r1, [r3, #12]
      }
 23f2cfc:	b002      	add	sp, #8
 23f2cfe:	bd10      	pop	{r4, pc}

023f2d00 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 23f2d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23f2d02:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23f2d06:	6999      	ldr	r1, [r3, #24]
            return this->_original_signal;
 23f2d08:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23f2d0a:	428a      	cmp	r2, r1
 23f2d0c:	d012      	beq.n	23f2d34 <_ZN14SignalWithAxes10get_signalEv+0x34>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23f2d0e:	6923      	ldr	r3, [r4, #16]
        };
 23f2d10:	f100 0410 	add.w	r4, r0, #16
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23f2d14:	fbb3 f3f1 	udiv	r3, r3, r1
 23f2d18:	4353      	muls	r3, r2
 23f2d1a:	6203      	str	r3, [r0, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 23f2d1c:	4b07      	ldr	r3, [pc, #28]	; (23f2d3c <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f2d1e:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f2d20:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f2d22:	4b07      	ldr	r3, [pc, #28]	; (23f2d40 <_ZN14SignalWithAxes10get_signalEv+0x40>)
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f2d24:	4668      	mov	r0, sp
 23f2d26:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
 23f2d28:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f2d2a:	f7ff ffcf 	bl	23f2ccc <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f2d2e:	4668      	mov	r0, sp
 23f2d30:	f7fe fa4e 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
    }
 23f2d34:	4620      	mov	r0, r4
 23f2d36:	b004      	add	sp, #16
 23f2d38:	bd10      	pop	{r4, pc}
 23f2d3a:	bf00      	nop
 23f2d3c:	023f2781 	.word	0x023f2781
 23f2d40:	023f10c9 	.word	0x023f10c9

023f2d44 <process_impulse>:
{
 23f2d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ei_learning_block_t block = impulse->learning_blocks[0];
 23f2d48:	6d46      	ldr	r6, [r0, #84]	; 0x54
{
 23f2d4a:	b097      	sub	sp, #92	; 0x5c
    ei_learning_block_t block = impulse->learning_blocks[0];
 23f2d4c:	e9d6 e800 	ldrd	lr, r8, [r6]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f2d50:	6d86      	ldr	r6, [r0, #88]	; 0x58
{
 23f2d52:	4604      	mov	r4, r0
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f2d54:	3e02      	subs	r6, #2
 23f2d56:	2e09      	cmp	r6, #9
{
 23f2d58:	4615      	mov	r5, r2
 23f2d5a:	461f      	mov	r7, r3
 23f2d5c:	9103      	str	r1, [sp, #12]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f2d5e:	d81c      	bhi.n	23f2d9a <process_impulse+0x56>
 23f2d60:	f240 2c29 	movw	ip, #553	; 0x229
 23f2d64:	fa2c f606 	lsr.w	r6, ip, r6
 23f2d68:	07f6      	lsls	r6, r6, #31
 23f2d6a:	d516      	bpl.n	23f2d9a <process_impulse+0x56>
    if (impulse->has_anomaly == 1){
 23f2d6c:	f890 606c 	ldrb.w	r6, [r0, #108]	; 0x6c
 23f2d70:	b99e      	cbnz	r6, 23f2d9a <process_impulse+0x56>
    if (block_ptr.infer_fn != run_nn_inference) {
 23f2d72:	4e58      	ldr	r6, [pc, #352]	; (23f2ed4 <process_impulse+0x190>)
 23f2d74:	45b6      	cmp	lr, r6
 23f2d76:	d110      	bne.n	23f2d9a <process_impulse+0x56>
    if (block_config->quantized != 1) {
 23f2d78:	f898 600d 	ldrb.w	r6, [r8, #13]
 23f2d7c:	b16e      	cbz	r6, 23f2d9a <process_impulse+0x56>
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 23f2d7e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23f2d80:	2e01      	cmp	r6, #1
 23f2d82:	d10a      	bne.n	23f2d9a <process_impulse+0x56>
 23f2d84:	6b86      	ldr	r6, [r0, #56]	; 0x38
 23f2d86:	f8d6 c004 	ldr.w	ip, [r6, #4]
 23f2d8a:	4e53      	ldr	r6, [pc, #332]	; (23f2ed8 <process_impulse+0x194>)
 23f2d8c:	45b4      	cmp	ip, r6
 23f2d8e:	d104      	bne.n	23f2d9a <process_impulse+0x56>
}
 23f2d90:	b017      	add	sp, #92	; 0x5c
 23f2d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return run_classifier_image_quantized(impulse, signal, result, debug);
 23f2d96:	f7ff bf69 	b.w	23f2c6c <run_classifier_image_quantized>
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f2d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f2d9e:	2100      	movs	r1, #0
 23f2da0:	4628      	mov	r0, r5
 23f2da2:	f008 fbf7 	bl	23fb594 <memset>
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23f2da6:	2300      	movs	r3, #0
 23f2da8:	2101      	movs	r1, #1
 23f2daa:	6922      	ldr	r2, [r4, #16]
 23f2dac:	a805      	add	r0, sp, #20
 23f2dae:	f7fe fa18 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23f2db2:	2600      	movs	r6, #0
    uint64_t dsp_start_us = ei_read_timer_us();
 23f2db4:	f001 f976 	bl	23f40a4 <_Z16ei_read_timer_usv>
    size_t out_features_index = 0;
 23f2db8:	4633      	mov	r3, r6
    uint64_t dsp_start_us = ei_read_timer_us();
 23f2dba:	4683      	mov	fp, r0
 23f2dbc:	468a      	mov	sl, r1
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23f2dbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23f2dc0:	42b2      	cmp	r2, r6
 23f2dc2:	d952      	bls.n	23f2e6a <process_impulse+0x126>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23f2dc4:	2214      	movs	r2, #20
 23f2dc6:	4372      	muls	r2, r6
 23f2dc8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 23f2dca:	1881      	adds	r1, r0, r2
 23f2dcc:	5882      	ldr	r2, [r0, r2]
 23f2dce:	6848      	ldr	r0, [r1, #4]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23f2dd0:	eb03 0802 	add.w	r8, r3, r2
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23f2dd4:	9001      	str	r0, [sp, #4]
 23f2dd6:	e9d1 9002 	ldrd	r9, r0, [r1, #8]
 23f2dda:	6909      	ldr	r1, [r1, #16]
 23f2ddc:	9002      	str	r0, [sp, #8]
 23f2dde:	9100      	str	r1, [sp, #0]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23f2de0:	6921      	ldr	r1, [r4, #16]
 23f2de2:	4588      	cmp	r8, r1
 23f2de4:	d90b      	bls.n	23f2dfe <process_impulse+0xba>
            ei_printf("ERR: Would write outside feature buffer\n");
 23f2de6:	483d      	ldr	r0, [pc, #244]	; (23f2edc <process_impulse+0x198>)
 23f2de8:	f001 f962 	bl	23f40b0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23f2dec:	f06f 0904 	mvn.w	r9, #4
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23f2df0:	a805      	add	r0, sp, #20
 23f2df2:	f7fe fa0b 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
}
 23f2df6:	4648      	mov	r0, r9
 23f2df8:	b017      	add	sp, #92	; 0x5c
 23f2dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23f2dfe:	9905      	ldr	r1, [sp, #20]
 23f2e00:	a809      	add	r0, sp, #36	; 0x24
 23f2e02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23f2e06:	2101      	movs	r1, #1
 23f2e08:	f7fe f9eb 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 23f2e0c:	9b03      	ldr	r3, [sp, #12]
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 23f2e0e:	a80d      	add	r0, sp, #52	; 0x34
 23f2e10:	930d      	str	r3, [sp, #52]	; 0x34
 23f2e12:	9b02      	ldr	r3, [sp, #8]
 23f2e14:	930e      	str	r3, [sp, #56]	; 0x38
 23f2e16:	9b00      	ldr	r3, [sp, #0]
 23f2e18:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
    _Function_base() : _M_manager(nullptr) { }
 23f2e1c:	2300      	movs	r3, #0
 23f2e1e:	9313      	str	r3, [sp, #76]	; 0x4c
 23f2e20:	f7ff ff6e 	bl	23f2d00 <_ZN14SignalWithAxes10get_signalEv>
 23f2e24:	a909      	add	r1, sp, #36	; 0x24
 23f2e26:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 23f2e2a:	464a      	mov	r2, r9
 23f2e2c:	9b01      	ldr	r3, [sp, #4]
 23f2e2e:	4798      	blx	r3
        if (ret != EIDSP_OK) {
 23f2e30:	4601      	mov	r1, r0
 23f2e32:	b158      	cbz	r0, 23f2e4c <process_impulse+0x108>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23f2e34:	482a      	ldr	r0, [pc, #168]	; (23f2ee0 <process_impulse+0x19c>)
 23f2e36:	f001 f93b 	bl	23f40b0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23f2e3a:	f06f 0904 	mvn.w	r9, #4
    class function<_Res(_ArgTypes...)>
 23f2e3e:	a811      	add	r0, sp, #68	; 0x44
 23f2e40:	f7fe f9c6 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
 23f2e44:	a809      	add	r0, sp, #36	; 0x24
 23f2e46:	f7fe f9e1 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f2e4a:	e7d1      	b.n	23f2df0 <process_impulse+0xac>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f2e4c:	f001 f928 	bl	23f40a0 <_Z29ei_run_impulse_check_canceledv>
 23f2e50:	f110 0f02 	cmn.w	r0, #2
 23f2e54:	4681      	mov	r9, r0
 23f2e56:	d0f2      	beq.n	23f2e3e <process_impulse+0xfa>
 23f2e58:	a811      	add	r0, sp, #68	; 0x44
 23f2e5a:	f7fe f9b9 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23f2e5e:	a809      	add	r0, sp, #36	; 0x24
 23f2e60:	f7fe f9d4 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23f2e64:	3601      	adds	r6, #1
 23f2e66:	4643      	mov	r3, r8
 23f2e68:	e7a9      	b.n	23f2dbe <process_impulse+0x7a>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2e6a:	f001 f91b 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f2e6e:	ebb0 000b 	subs.w	r0, r0, fp
 23f2e72:	eb61 010a 	sbc.w	r1, r1, sl
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f2e7a:	2300      	movs	r3, #0
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f2e7c:	e9c5 013a 	strd	r0, r1, [r5, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f2e80:	f7fa fa5a 	bl	23ed338 <__aeabi_ldivmod>
 23f2e84:	4601      	mov	r1, r0
 23f2e86:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
    if (debug) {
 23f2e8a:	b1d7      	cbz	r7, 23f2ec2 <process_impulse+0x17e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23f2e8c:	4815      	ldr	r0, [pc, #84]	; (23f2ee4 <process_impulse+0x1a0>)
 23f2e8e:	f001 f90f 	bl	23f40b0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2e92:	2600      	movs	r6, #0
            ei_printf(" ");
 23f2e94:	f8df 8058 	ldr.w	r8, [pc, #88]	; 23f2ef0 <process_impulse+0x1ac>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2e98:	9b07      	ldr	r3, [sp, #28]
 23f2e9a:	42b3      	cmp	r3, r6
 23f2e9c:	d90b      	bls.n	23f2eb6 <process_impulse+0x172>
            ei_printf_float(features_matrix.buffer[ix]);
 23f2e9e:	9b05      	ldr	r3, [sp, #20]
 23f2ea0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f2ea4:	ed93 0a00 	vldr	s0, [r3]
 23f2ea8:	f001 f922 	bl	23f40f0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 23f2eac:	4640      	mov	r0, r8
 23f2eae:	f001 f8ff 	bl	23f40b0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f2eb2:	3601      	adds	r6, #1
 23f2eb4:	e7f0      	b.n	23f2e98 <process_impulse+0x154>
        ei_printf("\n");
 23f2eb6:	480c      	ldr	r0, [pc, #48]	; (23f2ee8 <process_impulse+0x1a4>)
 23f2eb8:	f001 f8fa 	bl	23f40b0 <_Z9ei_printfPKcz>
        ei_printf("Running impulse...\n");
 23f2ebc:	480b      	ldr	r0, [pc, #44]	; (23f2eec <process_impulse+0x1a8>)
 23f2ebe:	f001 f8f7 	bl	23f40b0 <_Z9ei_printfPKcz>
    return run_inference(impulse, &features_matrix, result, debug);
 23f2ec2:	463b      	mov	r3, r7
 23f2ec4:	462a      	mov	r2, r5
 23f2ec6:	4620      	mov	r0, r4
 23f2ec8:	a905      	add	r1, sp, #20
 23f2eca:	f7ff f9a7 	bl	23f221c <run_inference>
 23f2ece:	4681      	mov	r9, r0
 23f2ed0:	e78e      	b.n	23f2df0 <process_impulse+0xac>
 23f2ed2:	bf00      	nop
 23f2ed4:	023f2419 	.word	0x023f2419
 23f2ed8:	023f2651 	.word	0x023f2651
 23f2edc:	023fc941 	.word	0x023fc941
 23f2ee0:	023fc8d2 	.word	0x023fc8d2
 23f2ee4:	023fc9c9 	.word	0x023fc9c9
 23f2ee8:	023fc8b8 	.word	0x023fc8b8
 23f2eec:	023fc96a 	.word	0x023fc96a
 23f2ef0:	023ffbdb 	.word	0x023ffbdb

023f2ef4 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f2ef4:	b530      	push	{r4, r5, lr}
 23f2ef6:	4604      	mov	r4, r0
 23f2ef8:	460d      	mov	r5, r1
 23f2efa:	b0a5      	sub	sp, #148	; 0x94
 23f2efc:	9201      	str	r2, [sp, #4]
    const ei_impulse_t impulse = ei_default_impulse;
 23f2efe:	4906      	ldr	r1, [pc, #24]	; (23f2f18 <run_classifier+0x24>)
 23f2f00:	2288      	movs	r2, #136	; 0x88
 23f2f02:	a802      	add	r0, sp, #8
 23f2f04:	f008 fb1f 	bl	23fb546 <memcpy>
    return process_impulse(&impulse, signal, result, debug);
 23f2f08:	462a      	mov	r2, r5
 23f2f0a:	4621      	mov	r1, r4
 23f2f0c:	9b01      	ldr	r3, [sp, #4]
 23f2f0e:	a802      	add	r0, sp, #8
 23f2f10:	f7ff ff18 	bl	23f2d44 <process_impulse>
}
 23f2f14:	b025      	add	sp, #148	; 0x94
 23f2f16:	bd30      	pop	{r4, r5, pc}
 23f2f18:	023fb8c0 	.word	0x023fb8c0

023f2f1c <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23f2f1c:	2300      	movs	r3, #0
      operator=(const function& __x)
 23f2f1e:	b530      	push	{r4, r5, lr}
 23f2f20:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23f2f22:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23f2f24:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23f2f26:	4605      	mov	r5, r0
 23f2f28:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23f2f2a:	b133      	cbz	r3, 23f2f3a <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f2f2c:	2202      	movs	r2, #2
 23f2f2e:	4668      	mov	r0, sp
 23f2f30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f2f32:	68e3      	ldr	r3, [r4, #12]
 23f2f34:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f2f36:	68a3      	ldr	r3, [r4, #8]
 23f2f38:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23f2f3a:	4629      	mov	r1, r5
 23f2f3c:	4668      	mov	r0, sp
 23f2f3e:	f7ff fec5 	bl	23f2ccc <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f2f42:	4668      	mov	r0, sp
 23f2f44:	f7fe f944 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
      }
 23f2f48:	b005      	add	sp, #20
 23f2f4a:	bd30      	pop	{r4, r5, pc}

023f2f4c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
 23f2f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f2f4e:	2300      	movs	r3, #0
 23f2f50:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
 23f2f52:	b121      	cbz	r1, 23f2f5e <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
 23f2f54:	4b07      	ldr	r3, [pc, #28]	; (23f2f74 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f2f56:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f2f58:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f2f5a:	4b07      	ldr	r3, [pc, #28]	; (23f2f78 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
 23f2f5c:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f2f5e:	4601      	mov	r1, r0
 23f2f60:	4668      	mov	r0, sp
 23f2f62:	f7ff feb3 	bl	23f2ccc <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f2f66:	4668      	mov	r0, sp
 23f2f68:	f7fe f932 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
	}
 23f2f6c:	b005      	add	sp, #20
 23f2f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 23f2f72:	bf00      	nop
 23f2f74:	023f10f1 	.word	0x023f10f1
 23f2f78:	023f10dd 	.word	0x023f10dd

023f2f7c <loop>:
{
 23f2f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ei_printf("Starting inferencing in 2 seconds...\n");
 23f2f80:	484f      	ldr	r0, [pc, #316]	; (23f30c0 <loop+0x144>)
{
 23f2f82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    ei_printf("Starting inferencing in 2 seconds...\n");
 23f2f86:	f001 f893 	bl	23f40b0 <_Z9ei_printfPKcz>
    delay(2000);
 23f2f8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f2f8e:	f005 f87d 	bl	23f808c <delay>
    ei_printf("Recording...\n");
 23f2f92:	484c      	ldr	r0, [pc, #304]	; (23f30c4 <loop+0x148>)
 23f2f94:	f001 f88c 	bl	23f40b0 <_Z9ei_printfPKcz>
    inference.buf_ready = 0;
 23f2f98:	2300      	movs	r3, #0
 23f2f9a:	4d4b      	ldr	r5, [pc, #300]	; (23f30c8 <loop+0x14c>)
	    _M_invoker = &_My_handler::_M_invoke;
 23f2f9c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 23f30e8 <loop+0x16c>
 23f2fa0:	712b      	strb	r3, [r5, #4]
    inference.buf_count = 0;
 23f2fa2:	60ab      	str	r3, [r5, #8]
    uint64_t sample_start_us = ei_read_timer_us();
 23f2fa4:	f001 f87e 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f2fa8:	4606      	mov	r6, r0
	    _M_manager = &_My_handler::_M_manager;
 23f2faa:	f8df 8140 	ldr.w	r8, [pc, #320]	; 23f30ec <loop+0x170>
	    _M_invoker = &_My_handler::_M_invoke;
 23f2fae:	ac42      	add	r4, sp, #264	; 0x108
    while(Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples){})){};
 23f2fb0:	f003 ff18 	bl	23f6de4 <_ZN14Microphone_PDM8instanceEv>
 23f2fb4:	6803      	ldr	r3, [r0, #0]
 23f2fb6:	4621      	mov	r1, r4
 23f2fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23f2fba:	e9c4 8902 	strd	r8, r9, [r4, #8]
 23f2fbe:	4798      	blx	r3
 23f2fc0:	4607      	mov	r7, r0
    class function<_Res(_ArgTypes...)>
 23f2fc2:	4620      	mov	r0, r4
 23f2fc4:	f7fe f904 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
 23f2fc8:	2f00      	cmp	r7, #0
 23f2fca:	d1f1      	bne.n	23f2fb0 <loop+0x34>
	    _M_invoker = &_My_handler::_M_invoke;
 23f2fcc:	4f3f      	ldr	r7, [pc, #252]	; (23f30cc <loop+0x150>)
	    _M_manager = &_My_handler::_M_manager;
 23f2fce:	f8df 8120 	ldr.w	r8, [pc, #288]	; 23f30f0 <loop+0x174>
    if(sample_length && dma_ready) {
 23f2fd2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 23f30f4 <loop+0x178>
    while(inference.buf_ready == 0) {
 23f2fd6:	792b      	ldrb	r3, [r5, #4]
 23f2fd8:	2b00      	cmp	r3, #0
 23f2fda:	d133      	bne.n	23f3044 <loop+0xc8>
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23f2fdc:	f003 ff02 	bl	23f6de4 <_ZN14Microphone_PDM8instanceEv>
    });
 23f2fe0:	6803      	ldr	r3, [r0, #0]
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23f2fe2:	4621      	mov	r1, r4
    });
 23f2fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2fe6:	e9c4 8702 	strd	r8, r7, [r4, #8]
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23f2fea:	4798      	blx	r3
 23f2fec:	4682      	mov	sl, r0
    class function<_Res(_ArgTypes...)>
 23f2fee:	4620      	mov	r0, r4
 23f2ff0:	f7fe f8ee 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
    if(sample_length && dma_ready) {
 23f2ff4:	f8d9 c000 	ldr.w	ip, [r9]
 23f2ff8:	f1bc 0f00 	cmp.w	ip, #0
 23f2ffc:	d0eb      	beq.n	23f2fd6 <loop+0x5a>
 23f2ffe:	f1ba 0f00 	cmp.w	sl, #0
 23f3002:	d0e8      	beq.n	23f2fd6 <loop+0x5a>
        if (inference.buf_ready == 0) {
 23f3004:	792a      	ldrb	r2, [r5, #4]
 23f3006:	2a00      	cmp	r2, #0
 23f3008:	d1e5      	bne.n	23f2fd6 <loop+0x5a>
                if(inference.buf_count >= inference.n_samples) {
 23f300a:	e9d5 3e02 	ldrd	r3, lr, [r5, #8]
                inference.buffer[inference.buf_count++] = sptr[i];
 23f300e:	4930      	ldr	r1, [pc, #192]	; (23f30d0 <loop+0x154>)
 23f3010:	449c      	add	ip, r3
 23f3012:	6808      	ldr	r0, [r1, #0]
 23f3014:	6829      	ldr	r1, [r5, #0]
 23f3016:	3802      	subs	r0, #2
 23f3018:	eb01 0143 	add.w	r1, r1, r3, lsl #1
            for(int i = 0; i < sample_length; i++) {
 23f301c:	4563      	cmp	r3, ip
 23f301e:	d00b      	beq.n	23f3038 <loop+0xbc>
                inference.buffer[inference.buf_count++] = sptr[i];
 23f3020:	f930 2f02 	ldrsh.w	r2, [r0, #2]!
 23f3024:	3301      	adds	r3, #1
                if(inference.buf_count >= inference.n_samples) {
 23f3026:	4573      	cmp	r3, lr
                inference.buffer[inference.buf_count++] = sptr[i];
 23f3028:	f821 2b02 	strh.w	r2, [r1], #2
                if(inference.buf_count >= inference.n_samples) {
 23f302c:	d308      	bcc.n	23f3040 <loop+0xc4>
                    inference.buf_count = 0;
 23f302e:	2300      	movs	r3, #0
 23f3030:	60ab      	str	r3, [r5, #8]
                    inference.buf_ready = 1;
 23f3032:	2301      	movs	r3, #1
 23f3034:	712b      	strb	r3, [r5, #4]
                    break;
 23f3036:	e7ce      	b.n	23f2fd6 <loop+0x5a>
 23f3038:	2a00      	cmp	r2, #0
 23f303a:	d0cc      	beq.n	23f2fd6 <loop+0x5a>
 23f303c:	60ab      	str	r3, [r5, #8]
 23f303e:	e7ca      	b.n	23f2fd6 <loop+0x5a>
 23f3040:	4652      	mov	r2, sl
 23f3042:	e7eb      	b.n	23f301c <loop+0xa0>
    ei_printf("Sample time: %d\r\n", (int) (ei_read_timer_us() - sample_start_us) / 1000);
 23f3044:	f001 f82e 	bl	23f40a4 <_Z16ei_read_timer_usv>
 23f3048:	1b80      	subs	r0, r0, r6
 23f304a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 23f304e:	fb90 f1f6 	sdiv	r1, r0, r6
 23f3052:	4820      	ldr	r0, [pc, #128]	; (23f30d4 <loop+0x158>)
 23f3054:	f001 f82c 	bl	23f40b0 <_Z9ei_printfPKcz>
    ei_printf("Recording done\n");
 23f3058:	481f      	ldr	r0, [pc, #124]	; (23f30d8 <loop+0x15c>)
 23f305a:	f001 f829 	bl	23f40b0 <_Z9ei_printfPKcz>
    _Function_base() : _M_manager(nullptr) { }
 23f305e:	2500      	movs	r5, #0
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
 23f3060:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    signal.get_data = &microphone_audio_signal_get_data;
 23f3064:	491d      	ldr	r1, [pc, #116]	; (23f30dc <loop+0x160>)
 23f3066:	a83d      	add	r0, sp, #244	; 0xf4
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
 23f3068:	9341      	str	r3, [sp, #260]	; 0x104
 23f306a:	953f      	str	r5, [sp, #252]	; 0xfc
    signal.get_data = &microphone_audio_signal_get_data;
 23f306c:	f7ff ff6e 	bl	23f2f4c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    ei_impulse_result_t result = { 0 };
 23f3070:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f3074:	4629      	mov	r1, r5
 23f3076:	4620      	mov	r0, r4
 23f3078:	f008 fa8c 	bl	23fb594 <memset>
    EI_IMPULSE_ERROR res = run_classifier(&signal, &result, false /* debug */);
 23f307c:	4621      	mov	r1, r4
 23f307e:	462a      	mov	r2, r5
 23f3080:	a83d      	add	r0, sp, #244	; 0xf4
 23f3082:	f7ff ff37 	bl	23f2ef4 <run_classifier>
    if (res != EI_IMPULSE_OK) {
 23f3086:	4601      	mov	r1, r0
 23f3088:	b148      	cbz	r0, 23f309e <loop+0x122>
        ei_printf("ERR: Failed to run classifier (%d)\n", res);
 23f308a:	4815      	ldr	r0, [pc, #84]	; (23f30e0 <loop+0x164>)
 23f308c:	f001 f810 	bl	23f40b0 <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f3090:	a83d      	add	r0, sp, #244	; 0xf4
 23f3092:	f7fe f89d 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
}
 23f3096:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 23f309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ei_printf("run_classifier returned: %d\r\n", res);
 23f309e:	4811      	ldr	r0, [pc, #68]	; (23f30e4 <loop+0x168>)
 23f30a0:	f001 f806 	bl	23f40b0 <_Z9ei_printfPKcz>
    print_inference_result(result);
 23f30a4:	a946      	add	r1, sp, #280	; 0x118
 23f30a6:	22f0      	movs	r2, #240	; 0xf0
 23f30a8:	4668      	mov	r0, sp
 23f30aa:	f008 fa4c 	bl	23fb546 <memcpy>
 23f30ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f30b2:	f7ff f95f 	bl	23f2374 <_Z22print_inference_result19ei_impulse_result_t>
    delay(1000);
 23f30b6:	4630      	mov	r0, r6
 23f30b8:	f004 ffe8 	bl	23f808c <delay>
 23f30bc:	e7e8      	b.n	23f3090 <loop+0x114>
 23f30be:	bf00      	nop
 23f30c0:	023fca15 	.word	0x023fca15
 23f30c4:	023fca3b 	.word	0x023fca3b
 23f30c8:	1007a5e8 	.word	0x1007a5e8
 23f30cc:	023f1119 	.word	0x023f1119
 23f30d0:	1007a5e4 	.word	0x1007a5e4
 23f30d4:	023fca49 	.word	0x023fca49
 23f30d8:	023fca5b 	.word	0x023fca5b
 23f30dc:	023f0f15 	.word	0x023f0f15
 23f30e0:	023fca6b 	.word	0x023fca6b
 23f30e4:	023fca8f 	.word	0x023fca8f
 23f30e8:	023f0dbd 	.word	0x023f0dbd
 23f30ec:	023f1105 	.word	0x023f1105
 23f30f0:	023f110f 	.word	0x023f110f
 23f30f4:	1007a5e0 	.word	0x1007a5e0

023f30f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f30f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f30fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f30fc:	4604      	mov	r4, r0
 23f30fe:	460d      	mov	r5, r1
 23f3100:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f3102:	d916      	bls.n	23f3132 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f3104:	4290      	cmp	r0, r2
 23f3106:	d215      	bcs.n	23f3134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f3108:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f310c:	1a75      	subs	r5, r6, r1
 23f310e:	f1a1 0714 	sub.w	r7, r1, #20
 23f3112:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f3114:	42b7      	cmp	r7, r6
 23f3116:	d01c      	beq.n	23f3152 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f3118:	b12c      	cbz	r4, 23f3126 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f311a:	4631      	mov	r1, r6
 23f311c:	4620      	mov	r0, r4
 23f311e:	f006 f923 	bl	23f9368 <_ZN6StringC1EOS_>
 23f3122:	7c33      	ldrb	r3, [r6, #16]
 23f3124:	7423      	strb	r3, [r4, #16]
 23f3126:	4630      	mov	r0, r6
 23f3128:	f006 f8b6 	bl	23f9298 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f312c:	3e14      	subs	r6, #20
 23f312e:	3c14      	subs	r4, #20
 23f3130:	e7f0      	b.n	23f3114 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f3132:	d00e      	beq.n	23f3152 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f3134:	42b5      	cmp	r5, r6
 23f3136:	d00c      	beq.n	23f3152 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f3138:	b12c      	cbz	r4, 23f3146 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f313a:	4629      	mov	r1, r5
 23f313c:	4620      	mov	r0, r4
 23f313e:	f006 f913 	bl	23f9368 <_ZN6StringC1EOS_>
 23f3142:	7c2b      	ldrb	r3, [r5, #16]
 23f3144:	7423      	strb	r3, [r4, #16]
 23f3146:	4628      	mov	r0, r5
 23f3148:	f006 f8a6 	bl	23f9298 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f314c:	3514      	adds	r5, #20
 23f314e:	3414      	adds	r4, #20
 23f3150:	e7f0      	b.n	23f3134 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f3152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f3154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f3154:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f3156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f315a:	e9c0 3300 	strd	r3, r3, [r0]
 23f315e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f3160:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f3162:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f3164:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f3166:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f3168:	dd24      	ble.n	23f31b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f316a:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f316e:	fb08 f007 	mul.w	r0, r8, r7
 23f3172:	f004 fa1b 	bl	23f75ac <malloc>
            if (!d) {
 23f3176:	4605      	mov	r5, r0
 23f3178:	b1e0      	cbz	r0, 23f31b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f317a:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f317e:	fb08 1202 	mla	r2, r8, r2, r1
 23f3182:	f7ff ffb9 	bl	23f30f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f3186:	6820      	ldr	r0, [r4, #0]
 23f3188:	f004 fa1e 	bl	23f75c8 <free>
        data_ = d;
 23f318c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f318e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f3190:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f3194:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f3198:	45b8      	cmp	r8, r7
 23f319a:	d009      	beq.n	23f31b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f319c:	4639      	mov	r1, r7
 23f319e:	4628      	mov	r0, r5
 23f31a0:	f006 f8fc 	bl	23f939c <_ZN6StringC1ERKS_>
 23f31a4:	7c3b      	ldrb	r3, [r7, #16]
 23f31a6:	3514      	adds	r5, #20
 23f31a8:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f31ac:	3714      	adds	r7, #20
 23f31ae:	e7f3      	b.n	23f3198 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f31b0:	6873      	ldr	r3, [r6, #4]
 23f31b2:	6063      	str	r3, [r4, #4]
}
 23f31b4:	4620      	mov	r0, r4
 23f31b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f31bc <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23f31bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 23f31c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f31c4:	e9d0 9a00 	ldrd	r9, sl, [r0]
 23f31c8:	4693      	mov	fp, r2
 23f31ca:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
 23f31ce:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 23f31d2:	4607      	mov	r7, r0
 23f31d4:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f31d6:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 23f31da:	d102      	bne.n	23f31e2 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23f31dc:	4820      	ldr	r0, [pc, #128]	; (23f3260 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0xa4>)
 23f31de:	f006 fb9e 	bl	23f991e <_ZSt20__throw_length_errorPKc>
 23f31e2:	2c01      	cmp	r4, #1
 23f31e4:	4622      	mov	r2, r4
 23f31e6:	bf38      	it	cc
 23f31e8:	2201      	movcc	r2, #1
 23f31ea:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23f31ec:	eba1 0609 	sub.w	r6, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f31f0:	d216      	bcs.n	23f3220 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x64>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f31f2:	b1bc      	cbz	r4, 23f3224 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x68>
 23f31f4:	429c      	cmp	r4, r3
 23f31f6:	bf28      	it	cs
 23f31f8:	461c      	movcs	r4, r3
        auto ptr = ei_dsp_malloc(bytes);
 23f31fa:	00a0      	lsls	r0, r4, #2
 23f31fc:	f000 ff85 	bl	23f410a <_Z9ei_mallocj>
 23f3200:	4605      	mov	r5, r0
 23f3202:	462a      	mov	r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f3204:	4649      	mov	r1, r9
			       is_constructible<_Tp, _Args...>>>
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 23f3206:	42f5      	cmn	r5, r6
 23f3208:	bf1c      	itt	ne
 23f320a:	f8db 3000 	ldrne.w	r3, [fp]
 23f320e:	51ab      	strne	r3, [r5, r6]
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 23f3210:	4588      	cmp	r8, r1
 23f3212:	d009      	beq.n	23f3228 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x6c>
 23f3214:	b10a      	cbz	r2, 23f321a <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x5e>
 23f3216:	680b      	ldr	r3, [r1, #0]
 23f3218:	6013      	str	r3, [r2, #0]
 23f321a:	3104      	adds	r1, #4
 23f321c:	3204      	adds	r2, #4
 23f321e:	e7f7      	b.n	23f3210 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f3220:	461c      	mov	r4, r3
 23f3222:	e7ea      	b.n	23f31fa <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f3224:	4625      	mov	r5, r4
 23f3226:	e7ec      	b.n	23f3202 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x46>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 23f3228:	3604      	adds	r6, #4
 23f322a:	442e      	add	r6, r5
 23f322c:	4643      	mov	r3, r8
      _ForwardIterator __cur = __result;
 23f322e:	4632      	mov	r2, r6
      for (; __first != __last; ++__first, (void)++__cur)
 23f3230:	459a      	cmp	sl, r3
 23f3232:	d004      	beq.n	23f323e <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x82>
 23f3234:	f853 1b04 	ldr.w	r1, [r3], #4
 23f3238:	f842 1b04 	str.w	r1, [r2], #4
 23f323c:	e7f8      	b.n	23f3230 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x74>
 23f323e:	ebaa 0808 	sub.w	r8, sl, r8
 23f3242:	4446      	add	r6, r8
	if (__p)
 23f3244:	f1b9 0f00 	cmp.w	r9, #0
 23f3248:	d002      	beq.n	23f3250 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x94>
        ei_dsp_free(p,0);
 23f324a:	4648      	mov	r0, r9
 23f324c:	f000 ff61 	bl	23f4112 <_Z7ei_freePv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f3250:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 23f3254:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f3258:	60bc      	str	r4, [r7, #8]
    }
 23f325a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f325e:	bf00      	nop
 23f3260:	023fcaad 	.word	0x023fcaad

023f3264 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
 23f3264:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f3266:	ed2d 8b02 	vpush	{d8}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 23f326a:	6802      	ldr	r2, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
 23f326c:	4604      	mov	r4, r0
 23f326e:	eef0 7a40 	vmov.f32	s15, s0
 23f3272:	b085      	sub	sp, #20
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 23f3274:	2a00      	cmp	r2, #0
 23f3276:	d06d      	beq.n	23f3354 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
 23f3278:	6893      	ldr	r3, [r2, #8]
 23f327a:	2b00      	cmp	r3, #0
 23f327c:	d06a      	beq.n	23f3354 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
 23f327e:	6913      	ldr	r3, [r2, #16]
 23f3280:	2b00      	cmp	r3, #0
 23f3282:	d067      	beq.n	23f3354 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
        if (version == 1) {
 23f3284:	2901      	cmp	r1, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f3286:	ee20 0a20 	vmul.f32	s0, s0, s1
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 23f328a:	ee67 8a81 	vmul.f32	s17, s15, s2
        if (version == 1) {
 23f328e:	d143      	bne.n	23f3318 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb4>
 23f3290:	feb8 0a40 	vrinta.f32	s0, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f3294:	eebd 8ac0 	vcvt.s32.f32	s16, s0
 23f3298:	fef8 8a68 	vrinta.f32	s17, s17
            length = frame_sample_length;
 23f329c:	ee18 1a10 	vmov	r1, s16
                floor(static_cast<float>(length_signal - length) / frame_stride));
 23f32a0:	1a5b      	subs	r3, r3, r1
 23f32a2:	ee07 3a90 	vmov	s15, r3
 23f32a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f32aa:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  { return __builtin_floorf(__x); }
 23f32ae:	fefb 7a47 	vrintm.f32	s15, s14
            numframes = static_cast<int>(
 23f32b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f32b6:	edcd 7a01 	vstr	s15, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 23f32ba:	9b01      	ldr	r3, [sp, #4]
            length = frame_sample_length;
 23f32bc:	2500      	movs	r5, #0
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 23f32be:	3b01      	subs	r3, #1
 23f32c0:	ee07 3a90 	vmov	s15, r3
 23f32c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23f32c8:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 23f32cc:	eee8 7a87 	vfma.f32	s15, s17, s14
            len_sig = static_cast<int>(
 23f32d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            length = frame_sample_length;
 23f32d4:	462e      	mov	r6, r5
            len_sig = static_cast<int>(
 23f32d6:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
 23f32da:	9b02      	ldr	r3, [sp, #8]
        info->frame_ixs.clear();
 23f32dc:	1d27      	adds	r7, r4, #4
            info->signal->total_length = static_cast<size_t>(len_sig);
 23f32de:	6113      	str	r3, [r2, #16]
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 23f32e0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23f32e4:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 23f32e6:	bf18      	it	ne
 23f32e8:	60a3      	strne	r3, [r4, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 23f32ea:	9b02      	ldr	r3, [sp, #8]
 23f32ec:	42ab      	cmp	r3, r5
 23f32ee:	d92a      	bls.n	23f3346 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe2>
            if (++frame_count > numframes) break;
 23f32f0:	9b01      	ldr	r3, [sp, #4]
 23f32f2:	3601      	adds	r6, #1
 23f32f4:	429e      	cmp	r6, r3
 23f32f6:	dc26      	bgt.n	23f3346 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe2>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23f32f8:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f32fc:	4299      	cmp	r1, r3
            info->frame_ixs.push_back(ix);
 23f32fe:	9503      	str	r5, [sp, #12]
 23f3300:	d01c      	beq.n	23f333c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xd8>
 23f3302:	b101      	cbz	r1, 23f3306 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xa2>
 23f3304:	600d      	str	r5, [r1, #0]
	    ++this->_M_impl._M_finish;
 23f3306:	68a3      	ldr	r3, [r4, #8]
 23f3308:	3304      	adds	r3, #4
 23f330a:	60a3      	str	r3, [r4, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 23f330c:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 23f3310:	ee17 3a90 	vmov	r3, s15
 23f3314:	441d      	add	r5, r3
 23f3316:	e7e8      	b.n	23f32ea <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x86>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f3318:	f7fd fd52 	bl	23f0dc0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 23f331c:	eebd 8ac0 	vcvt.s32.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f3320:	eeb0 0a68 	vmov.f32	s0, s17
 23f3324:	f7fd fd4c 	bl	23f0dc0 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            length = (frame_sample_length - (int)frame_stride);
 23f3328:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f332c:	ee18 0a10 	vmov	r0, s16
 23f3330:	ee17 1a90 	vmov	r1, s15
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f3334:	eef0 8a40 	vmov.f32	s17, s0
            length = (frame_sample_length - (int)frame_stride);
 23f3338:	1a41      	subs	r1, r0, r1
 23f333a:	e7b1      	b.n	23f32a0 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x3c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 23f333c:	4638      	mov	r0, r7
 23f333e:	aa03      	add	r2, sp, #12
 23f3340:	f7ff ff3c 	bl	23f31bc <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>
 23f3344:	e7e2      	b.n	23f330c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xa8>
        info->frame_length = frame_sample_length;
 23f3346:	ed84 8a04 	vstr	s16, [r4, #16]
        return EIDSP_OK;
 23f334a:	2000      	movs	r0, #0
    }
 23f334c:	b005      	add	sp, #20
 23f334e:	ecbd 8b02 	vpop	{d8}
 23f3352:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 23f3354:	4800      	ldr	r0, [pc, #0]	; (23f3358 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf4>)
 23f3356:	e7f9      	b.n	23f334c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe8>
 23f3358:	fffffc15 	.word	0xfffffc15

023f335c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe_v3(matrix_t *out_features, matrix_t *out_energies,
 23f335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3360:	b099      	sub	sp, #100	; 0x64
 23f3362:	4699      	mov	r9, r3
 23f3364:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
 23f3368:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 23f336c:	4605      	mov	r5, r0
 23f336e:	460e      	mov	r6, r1
 23f3370:	eeb0 1a60 	vmov.f32	s2, s1
 23f3374:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 23f3378:	9305      	str	r3, [sp, #20]
        uint16_t version
        )
    {
        int ret = 0;

        if (high_frequency == 0) {
 23f337a:	f1bb 0f00 	cmp.w	fp, #0
 23f337e:	d101      	bne.n	23f3384 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x28>
            high_frequency = sampling_frequency / 2;
 23f3380:	ea4f 0b59 	mov.w	fp, r9, lsr #1
        }

        stack_frames_info_t stack_frame_info = { 0 };
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
 23f3384:	ee07 9a90 	vmov	s15, r9
        stack_frames_info_t stack_frame_info = { 0 };
 23f3388:	2300      	movs	r3, #0
        ret = processing::stack_frames(
 23f338a:	eef0 0a40 	vmov.f32	s1, s0
            low_frequency = 300;
 23f338e:	f1ba 0f00 	cmp.w	sl, #0
        ret = processing::stack_frames(
 23f3392:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 23f3396:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 23f339a:	a80e      	add	r0, sp, #56	; 0x38
            low_frequency = 300;
 23f339c:	bf08      	it	eq
 23f339e:	f44f 7a96 	moveq.w	sl, #300	; 0x12c
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f33a2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
        stack_frames_info_t stack_frame_info = { 0 };
 23f33a6:	9312      	str	r3, [sp, #72]	; 0x48
 23f33a8:	9311      	str	r3, [sp, #68]	; 0x44
        stack_frame_info.signal = signal;
 23f33aa:	920e      	str	r2, [sp, #56]	; 0x38
        ret = processing::stack_frames(
 23f33ac:	f7ff ff5a 	bl	23f3264 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 23f33b0:	4604      	mov	r4, r0
 23f33b2:	2800      	cmp	r0, #0
 23f33b4:	f040 80e1 	bne.w	23f357a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f33b8:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 23f33bc:	1a9b      	subs	r3, r3, r2
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 23f33be:	686a      	ldr	r2, [r5, #4]
 23f33c0:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23f33c4:	f040 80eb 	bne.w	23f359e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (num_filters != out_features->cols) {
 23f33c8:	68ab      	ldr	r3, [r5, #8]
 23f33ca:	4598      	cmp	r8, r3
 23f33cc:	f040 80e7 	bne.w	23f359e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (out_energies) {
 23f33d0:	b19e      	cbz	r6, 23f33fa <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x9e>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 23f33d2:	6873      	ldr	r3, [r6, #4]
 23f33d4:	4293      	cmp	r3, r2
 23f33d6:	f040 80e2 	bne.w	23f359e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
 23f33da:	68b3      	ldr	r3, [r6, #8]
 23f33dc:	2b01      	cmp	r3, #1
 23f33de:	f040 80de 	bne.w	23f359e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
            }
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
            *(out_features->buffer + i) = 0;
 23f33e2:	2200      	movs	r2, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f33e4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f33e8:	434b      	muls	r3, r1
 23f33ea:	42a3      	cmp	r3, r4
 23f33ec:	d907      	bls.n	23f33fe <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xa2>
            *(out_features->buffer + i) = 0;
 23f33ee:	682b      	ldr	r3, [r5, #0]
 23f33f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f33f4:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f33f6:	3401      	adds	r4, #1
 23f33f8:	e7f4      	b.n	23f33e4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x88>
 23f33fa:	4634      	mov	r4, r6
 23f33fc:	e7f1      	b.n	23f33e2 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x86>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 23f33fe:	9b05      	ldr	r3, [sp, #20]
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 23f3400:	2101      	movs	r1, #1
 23f3402:	0858      	lsrs	r0, r3, #1
 23f3404:	1c47      	adds	r7, r0, #1
 23f3406:	fb00 8008 	mla	r0, r0, r8, r8
 23f340a:	f000 fe80 	bl	23f410e <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f340e:	2301      	movs	r3, #1
        }
        rows = n_rows;
        cols = n_cols;
        dequantization_fn = a_dequantization_fn;
 23f3410:	4a64      	ldr	r2, [pc, #400]	; (23f35a4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x248>)
        cols = n_cols;
 23f3412:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 23f3416:	9013      	str	r0, [sp, #76]	; 0x4c
            buffer_managed_by_me = true;
 23f3418:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        dequantization_fn = a_dequantization_fn;
 23f341c:	9217      	str	r2, [sp, #92]	; 0x5c

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 23f341e:	2800      	cmp	r0, #0
 23f3420:	f000 80bb 	beq.w	23f359a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x23e>
#endif
        if (!filterbanks.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = feature::filterbanks(
 23f3424:	e9cd b301 	strd	fp, r3, [sp, #4]
 23f3428:	463a      	mov	r2, r7
 23f342a:	464b      	mov	r3, r9
 23f342c:	4641      	mov	r1, r8
 23f342e:	f8cd a000 	str.w	sl, [sp]
 23f3432:	a813      	add	r0, sp, #76	; 0x4c
 23f3434:	f7fe fbe8 	bl	23f1c08 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 23f3438:	4604      	mov	r4, r0
 23f343a:	2800      	cmp	r0, #0
 23f343c:	f040 8096 	bne.w	23f356c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
            EIDSP_ERR(ret);
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f3440:	4680      	mov	r8, r0
                    tmp += row[k] * quantized_values_one_zero[u8];
 23f3442:	f8df b174 	ldr.w	fp, [pc, #372]	; 23f35b8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25c>
 23f3446:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 23f344a:	1a9b      	subs	r3, r3, r2
 23f344c:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
 23f3450:	f080 809f 	bcs.w	23f3592 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x236>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f3454:	2300      	movs	r3, #0
 23f3456:	463a      	mov	r2, r7
 23f3458:	2101      	movs	r1, #1
 23f345a:	a806      	add	r0, sp, #24
 23f345c:	f7fd fec1 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f3460:	9b06      	ldr	r3, [sp, #24]
 23f3462:	2b00      	cmp	r3, #0
 23f3464:	f000 8093 	beq.w	23f358e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x232>
            if (!power_spectrum_frame.buffer) {
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f3468:	2300      	movs	r3, #0
 23f346a:	2101      	movs	r1, #1
 23f346c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f346e:	a80a      	add	r0, sp, #40	; 0x28
 23f3470:	f7fd feb7 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f3474:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 23f3478:	f1b9 0f00 	cmp.w	r9, #0
 23f347c:	d06d      	beq.n	23f355a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fe>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 23f347e:	4641      	mov	r1, r8
 23f3480:	a80f      	add	r0, sp, #60	; 0x3c
 23f3482:	f7ff fc11 	bl	23f2ca8 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 23f3486:	6801      	ldr	r1, [r0, #0]
            size_t signal_length = stack_frame_info.frame_length;
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f3488:	980e      	ldr	r0, [sp, #56]	; 0x38
            size_t signal_length = stack_frame_info.frame_length;
 23f348a:	9a12      	ldr	r2, [sp, #72]	; 0x48
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f348c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 23f3490:	188b      	adds	r3, r1, r2
 23f3492:	4563      	cmp	r3, ip
                signal_length = signal_length -
 23f3494:	bf84      	itt	hi
 23f3496:	eba2 020c 	subhi.w	r2, r2, ip
 23f349a:	18d2      	addhi	r2, r2, r3
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
 23f349c:	464b      	mov	r3, r9
 23f349e:	f7ff f801 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 23f34a2:	4681      	mov	r9, r0
 23f34a4:	2800      	cmp	r0, #0
 23f34a6:	d15a      	bne.n	23f355e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
                EIDSP_ERR(ret);
            }

            ret = numpy::power_spectrum(
 23f34a8:	9b05      	ldr	r3, [sp, #20]
 23f34aa:	9a06      	ldr	r2, [sp, #24]
 23f34ac:	9300      	str	r3, [sp, #0]
 23f34ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 23f34b0:	463b      	mov	r3, r7
 23f34b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f34b4:	f7fe faee 	bl	23f1a94 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 23f34b8:	4681      	mov	r9, r0
 23f34ba:	2800      	cmp	r0, #0
 23f34bc:	d14f      	bne.n	23f355e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
        float res = 0.0f;
 23f34be:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23f35a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>
 23f34c2:	9b06      	ldr	r3, [sp, #24]
            res += input_array[ix];
 23f34c4:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f34c8:	f109 0901 	add.w	r9, r9, #1
 23f34cc:	454f      	cmp	r7, r9
            res += input_array[ix];
 23f34ce:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f34d2:	d8f7      	bhi.n	23f34c4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x168>
                EIDSP_ERR(ret);
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
            if (energy == 0) {
 23f34d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f34d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
 23f34dc:	bf08      	it	eq
 23f34de:	eddf 7a33 	vldreq	s15, [pc, #204]	; 23f35ac <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x250>
            }

            if (out_energies) {
 23f34e2:	b126      	cbz	r6, 23f34ee <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x192>
                out_energies->buffer[ix] = energy;
 23f34e4:	6833      	ldr	r3, [r6, #0]
 23f34e6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 23f34ea:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
 23f34ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
            }

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 23f34f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23f34f4:	429f      	cmp	r7, r3
 23f34f6:	d147      	bne.n	23f3588 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x22c>
 23f34f8:	2000      	movs	r0, #0
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 23f34fa:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 23f34fe:	b283      	uxth	r3, r0
 23f3500:	4563      	cmp	r3, ip
 23f3502:	d221      	bcs.n	23f3548 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ec>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f3504:	2200      	movs	r2, #0
            float tmp = 0.0;
 23f3506:	eddf 7a28 	vldr	s15, [pc, #160]	; 23f35a8 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f350a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f350c:	eb01 0a03 	add.w	sl, r1, r3
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 23f3510:	4297      	cmp	r7, r2
 23f3512:	d910      	bls.n	23f3536 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1da>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f3514:	fb0c f102 	mul.w	r1, ip, r2
 23f3518:	f81a 1001 	ldrb.w	r1, [sl, r1]
                if (u8) { // this matrix appears to be very sparsely populated
 23f351c:	b149      	cbz	r1, 23f3532 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1d6>
                    tmp += row[k] * quantized_values_one_zero[u8];
 23f351e:	eb09 0e82 	add.w	lr, r9, r2, lsl #2
 23f3522:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 23f3526:	edde 6a00 	vldr	s13, [lr]
 23f352a:	ed91 7a00 	vldr	s14, [r1]
 23f352e:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 23f3532:	3201      	adds	r2, #1
 23f3534:	e7ec      	b.n	23f3510 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1b4>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
 23f3536:	fb0c 3c08 	mla	ip, ip, r8, r3
 23f353a:	682b      	ldr	r3, [r5, #0]
 23f353c:	3001      	adds	r0, #1
 23f353e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 23f3542:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 23f3546:	e7d8      	b.n	23f34fa <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x19e>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f3548:	a80a      	add	r0, sp, #40	; 0x28
 23f354a:	f7fd fe5f 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f354e:	a806      	add	r0, sp, #24
 23f3550:	f7fd fe5c 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f3554:	f108 0801 	add.w	r8, r8, #1
 23f3558:	e775      	b.n	23f3446 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xea>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f355a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 23f35b0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>
 23f355e:	a80a      	add	r0, sp, #40	; 0x28
 23f3560:	f7fd fe54 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f3564:	464c      	mov	r4, r9
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f3566:	a806      	add	r0, sp, #24
 23f3568:	f7fd fe50 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
#endif
        }
    }

    ~ei_quantized_matrix() {
        if (buffer && buffer_managed_by_me) {
 23f356c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23f356e:	b120      	cbz	r0, 23f357a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
 23f3570:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f3574:	b10b      	cbz	r3, 23f357a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
            ei_free(buffer);
 23f3576:	f000 fdcc 	bl	23f4112 <_Z7ei_freePv>
      }
 23f357a:	a80f      	add	r0, sp, #60	; 0x3c
 23f357c:	f7ff fb8b 	bl	23f2c96 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
        }

        numpy::zero_handling(out_features);

        return EIDSP_OK;
    }
 23f3580:	4620      	mov	r0, r4
 23f3582:	b019      	add	sp, #100	; 0x64
 23f3584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f3588:	f8df 9028 	ldr.w	r9, [pc, #40]	; 23f35b4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>
 23f358c:	e7e7      	b.n	23f355e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f358e:	4c08      	ldr	r4, [pc, #32]	; (23f35b0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>)
 23f3590:	e7e9      	b.n	23f3566 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20a>
        numpy::zero_handling(out_features);
 23f3592:	4628      	mov	r0, r5
 23f3594:	f7fe fabc 	bl	23f1b10 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
 23f3598:	e7e8      	b.n	23f356c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 23f359a:	4c05      	ldr	r4, [pc, #20]	; (23f35b0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>)
 23f359c:	e7e6      	b.n	23f356c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f359e:	4c05      	ldr	r4, [pc, #20]	; (23f35b4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>)
 23f35a0:	e7eb      	b.n	23f357a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
 23f35a2:	bf00      	nop
 23f35a4:	023f0dad 	.word	0x023f0dad
 23f35a8:	00000000 	.word	0x00000000
 23f35ac:	2edbe6ff 	.word	0x2edbe6ff
 23f35b0:	fffffc16 	.word	0xfffffc16
 23f35b4:	fffffc14 	.word	0xfffffc14
 23f35b8:	023fccb0 	.word	0x023fccb0
 23f35bc:	00000000 	.word	0x00000000

023f35c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 23f35c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f35c4:	ed2d 8b06 	vpush	{d8-d10}
 23f35c8:	b095      	sub	sp, #84	; 0x54
 23f35ca:	460f      	mov	r7, r1
 23f35cc:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 23f35d0:	4604      	mov	r4, r0
 23f35d2:	9103      	str	r1, [sp, #12]
        if (high_frequency == 0) {
 23f35d4:	9927      	ldr	r1, [sp, #156]	; 0x9c
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 23f35d6:	eeb0 1a60 	vmov.f32	s2, s1
 23f35da:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 23f35de:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 23f35e2:	f8bd b0a0 	ldrh.w	fp, [sp, #160]	; 0xa0
        if (high_frequency == 0) {
 23f35e6:	b909      	cbnz	r1, 23f35ec <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c>
            high_frequency = sampling_frequency / 2;
 23f35e8:	0859      	lsrs	r1, r3, #1
 23f35ea:	9127      	str	r1, [sp, #156]	; 0x9c
        if (version<4) {
 23f35ec:	f1bb 0f03 	cmp.w	fp, #3
 23f35f0:	d804      	bhi.n	23f35fc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3c>
                low_frequency = 300;
 23f35f2:	f1b8 0f00 	cmp.w	r8, #0
 23f35f6:	bf08      	it	eq
 23f35f8:	f44f 7896 	moveq.w	r8, #300	; 0x12c
        ret = processing::stack_frames(
 23f35fc:	ee07 3a90 	vmov	s15, r3
        stack_frames_info_t stack_frame_info = { 0 };
 23f3600:	2100      	movs	r1, #0
        ret = processing::stack_frames(
 23f3602:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 23f3606:	eef0 0a40 	vmov.f32	s1, s0
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f360a:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
        stack_frames_info_t stack_frame_info = { 0 };
 23f360e:	9113      	str	r1, [sp, #76]	; 0x4c
 23f3610:	9112      	str	r1, [sp, #72]	; 0x48
        ret = processing::stack_frames(
 23f3612:	eeb0 0a49 	vmov.f32	s0, s18
 23f3616:	4659      	mov	r1, fp
 23f3618:	a80f      	add	r0, sp, #60	; 0x3c
        stack_frame_info.signal = signal;
 23f361a:	920f      	str	r2, [sp, #60]	; 0x3c
        ret = processing::stack_frames(
 23f361c:	f7ff fe22 	bl	23f3264 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
        if (ret != 0) {
 23f3620:	4605      	mov	r5, r0
 23f3622:	bba0      	cbnz	r0, 23f368e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f3624:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f3628:	1a9b      	subs	r3, r3, r2
        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 23f362a:	6862      	ldr	r2, [r4, #4]
 23f362c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23f3630:	f040 8187 	bne.w	23f3942 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
        if (num_filters != out_features->cols) {
 23f3634:	68a3      	ldr	r3, [r4, #8]
 23f3636:	459a      	cmp	sl, r3
 23f3638:	f040 8183 	bne.w	23f3942 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
        if (out_energies) {
 23f363c:	b19f      	cbz	r7, 23f3666 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xa6>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 23f363e:	687b      	ldr	r3, [r7, #4]
 23f3640:	4293      	cmp	r3, r2
 23f3642:	f040 817e 	bne.w	23f3942 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
 23f3646:	68bb      	ldr	r3, [r7, #8]
 23f3648:	2b01      	cmp	r3, #1
 23f364a:	f040 817a 	bne.w	23f3942 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
            *(out_features->buffer + i) = 0;
 23f364e:	2200      	movs	r2, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f3650:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 23f3654:	434b      	muls	r3, r1
 23f3656:	42ab      	cmp	r3, r5
 23f3658:	d907      	bls.n	23f366a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xaa>
            *(out_features->buffer + i) = 0;
 23f365a:	6823      	ldr	r3, [r4, #0]
 23f365c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23f3660:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f3662:	3501      	adds	r5, #1
 23f3664:	e7f4      	b.n	23f3650 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x90>
 23f3666:	463d      	mov	r5, r7
 23f3668:	e7f1      	b.n	23f364e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x8e>
        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 23f366a:	9b03      	ldr	r3, [sp, #12]
        const int MELS_SIZE = num_filters + 2;
 23f366c:	f10a 0602 	add.w	r6, sl, #2
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 23f3670:	2104      	movs	r1, #4
 23f3672:	4630      	mov	r0, r6
        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 23f3674:	ea4f 0953 	mov.w	r9, r3, lsr #1
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 23f3678:	f000 fd49 	bl	23f410e <_Z9ei_callocjj>
 23f367c:	f109 0901 	add.w	r9, r9, #1
        EI_ERR_AND_RETURN_ON_NULL(mels, EIDSP_OUT_OF_MEM);
 23f3680:	4605      	mov	r5, r0
 23f3682:	b968      	cbnz	r0, 23f36a0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xe0>
 23f3684:	48b2      	ldr	r0, [pc, #712]	; (23f3950 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x390>)
 23f3686:	f000 fd13 	bl	23f40b0 <_Z9ei_printfPKcz>
 23f368a:	f2a5 35ea 	subw	r5, r5, #1002	; 0x3ea
      }
 23f368e:	a810      	add	r0, sp, #64	; 0x40
 23f3690:	f7ff fb01 	bl	23f2c96 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
    }
 23f3694:	4628      	mov	r0, r5
 23f3696:	b015      	add	sp, #84	; 0x54
 23f3698:	ecbd 8b06 	vpop	{d8-d10}
 23f369c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        numpy::linspace(
 23f36a0:	ee07 8a90 	vmov	s15, r8
 23f36a4:	eef8 8a67 	vcvt.f32.u32	s17, s15
 23f36a8:	4aaa      	ldr	r2, [pc, #680]	; (23f3954 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x394>)
 23f36aa:	eeb0 0a68 	vmov.f32	s0, s17
 23f36ae:	e9cd 2005 	strd	r2, r0, [sp, #20]
 23f36b2:	f7fe fa45 	bl	23f1b40 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f36b6:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
 23f36ba:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 23f36be:	eef0 9a40 	vmov.f32	s19, s0
 23f36c2:	eeb0 0a48 	vmov.f32	s0, s16
 23f36c6:	f7fe fa3b 	bl	23f1b40 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f36ca:	4630      	mov	r0, r6
 23f36cc:	eef0 0a40 	vmov.f32	s1, s0
 23f36d0:	4629      	mov	r1, r5
 23f36d2:	eeb0 0a69 	vmov.f32	s0, s19
 23f36d6:	f7fd fd31 	bl	23f113c <_ZN2ei5numpy8linspaceEffmPf.isra.0>
        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 23f36da:	9b03      	ldr	r3, [sp, #12]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f36dc:	2600      	movs	r6, #0
        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 23f36de:	f1bb 0f03 	cmp.w	fp, #3
 23f36e2:	bf98      	it	ls
 23f36e4:	464b      	movls	r3, r9
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f36e6:	3301      	adds	r3, #1
 23f36e8:	ee0a 3a10 	vmov	s20, r3
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f36ec:	f06f 0b01 	mvn.w	fp, #1
            mels[ix] = functions::mel_to_frequency(mels[ix]);
 23f36f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23f36f4:	ed98 0a00 	vldr	s0, [r8]
 23f36f8:	f7fe fa64 	bl	23f1bc4 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
                mels[ix] = low_frequency;
 23f36fc:	eef4 8a40 	vcmp.f32	s17, s0
 23f3700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f3704:	fe38 0a80 	vselgt.f32	s0, s17, s0
                mels[ix] = high_frequency;
 23f3708:	eeb4 8a40 	vcmp.f32	s16, s0
 23f370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f3710:	eef8 9aca 	vcvt.f32.s32	s19, s20
                mels[ix] = high_frequency;
 23f3714:	bf48      	it	mi
 23f3716:	eeb0 0a48 	vmovmi.f32	s0, s16
 23f371a:	ed88 0a00 	vstr	s0, [r8]
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f371e:	ee29 0a80 	vmul.f32	s0, s19, s0
 23f3722:	ee80 7a09 	vdiv.f32	s14, s0, s18
 23f3726:	febb 7a47 	vrintm.f32	s14, s14
 23f372a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f372e:	ee17 3a10 	vmov	r3, s14
 23f3732:	fb0b f206 	mul.w	r2, fp, r6
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f3736:	3601      	adds	r6, #1
 23f3738:	b2b6      	uxth	r6, r6
 23f373a:	45b2      	cmp	sl, r6
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f373c:	f828 3002 	strh.w	r3, [r8, r2]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f3740:	dad6      	bge.n	23f36f0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x130>
        mels[MELS_SIZE-1] = functions::mel_to_frequency(mels[MELS_SIZE-1]);
 23f3742:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 23f3746:	3301      	adds	r3, #1
 23f3748:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 23f374c:	ed96 0a00 	vldr	s0, [r6]
 23f3750:	f7fe fa38 	bl	23f1bc4 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
            mels[MELS_SIZE-1] = high_frequency;
 23f3754:	eeb4 8ac0 	vcmpe.f32	s16, s0
 23f3758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        mels[MELS_SIZE-1] -= 0.001;
 23f375c:	bf54      	ite	pl
 23f375e:	ee10 0a10 	vmovpl	r0, s0
 23f3762:	ee18 0a10 	vmovmi	r0, s16
 23f3766:	f7f9 fa47 	bl	23ecbf8 <__aeabi_f2d>
 23f376a:	a377      	add	r3, pc, #476	; (adr r3, 23f3948 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x388>)
 23f376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3770:	f7f9 f8e2 	bl	23ec938 <__aeabi_dsub>
 23f3774:	f7f9 fd90 	bl	23ed298 <__aeabi_d2f>
 23f3778:	ee07 0a90 	vmov	s15, r0
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f377c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23f3780:	ee87 7a89 	vdiv.f32	s14, s15, s18
 23f3784:	fefb 7a47 	vrintm.f32	s15, s14
 23f3788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 23f378c:	ee17 2a90 	vmov	r2, s15
 23f3790:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 23f3794:	3301      	adds	r3, #1
        mels[MELS_SIZE-1] -= 0.001;
 23f3796:	6030      	str	r0, [r6, #0]
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f3798:	2101      	movs	r1, #1
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 23f379a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f379e:	a807      	add	r0, sp, #28
 23f37a0:	2300      	movs	r3, #0
 23f37a2:	464a      	mov	r2, r9
 23f37a4:	f7fd fd1d 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f37a8:	9b07      	ldr	r3, [sp, #28]
 23f37aa:	2b00      	cmp	r3, #0
 23f37ac:	f000 80c7 	beq.w	23f393e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x37e>
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f37b0:	2300      	movs	r3, #0
 23f37b2:	2101      	movs	r1, #1
 23f37b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23f37b6:	a80b      	add	r0, sp, #44	; 0x2c
 23f37b8:	f7fd fd13 	bl	23f11e2 <_ZN2ei9ei_matrixC1EmmPf>
 23f37bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f37be:	2b00      	cmp	r3, #0
 23f37c0:	f000 80ba 	beq.w	23f3938 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x378>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f37c4:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f37c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f37ca:	1a9b      	subs	r3, r3, r2
 23f37cc:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
 23f37d0:	f080 80a2 	bcs.w	23f3918 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x358>
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 23f37d4:	4631      	mov	r1, r6
 23f37d6:	a810      	add	r0, sp, #64	; 0x40
 23f37d8:	f7ff fa66 	bl	23f2ca8 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 23f37dc:	6801      	ldr	r1, [r0, #0]
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f37de:	980f      	ldr	r0, [sp, #60]	; 0x3c
            size_t signal_length = stack_frame_info.frame_length;
 23f37e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f37e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 23f37e6:	188b      	adds	r3, r1, r2
 23f37e8:	4563      	cmp	r3, ip
                signal_length = signal_length -
 23f37ea:	bf84      	itt	hi
 23f37ec:	eba2 020c 	subhi.w	r2, r2, ip
 23f37f0:	18d2      	addhi	r2, r2, r3
            ret = stack_frame_info.signal->get_data(
 23f37f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f37f4:	f7fe fe56 	bl	23f24a4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
 23f37f8:	4680      	mov	r8, r0
 23f37fa:	2800      	cmp	r0, #0
 23f37fc:	f040 8091 	bne.w	23f3922 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
            ret = numpy::power_spectrum(
 23f3800:	9b03      	ldr	r3, [sp, #12]
 23f3802:	9a07      	ldr	r2, [sp, #28]
 23f3804:	9300      	str	r3, [sp, #0]
 23f3806:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f3808:	464b      	mov	r3, r9
 23f380a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23f380c:	f7fe f942 	bl	23f1a94 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
            if (ret != 0) {
 23f3810:	4680      	mov	r8, r0
 23f3812:	2800      	cmp	r0, #0
 23f3814:	f040 8085 	bne.w	23f3922 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
        float res = 0.0f;
 23f3818:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23f3958 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x398>
 23f381c:	9b07      	ldr	r3, [sp, #28]
            res += input_array[ix];
 23f381e:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f3822:	f108 0801 	add.w	r8, r8, #1
 23f3826:	45c1      	cmp	r9, r8
            res += input_array[ix];
 23f3828:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f382c:	d8f7      	bhi.n	23f381e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25e>
            if (energy == 0) {
 23f382e:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f3832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
 23f3836:	bf08      	it	eq
 23f3838:	eddf 7a48 	vldreq	s15, [pc, #288]	; 23f395c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x39c>
            if (out_energies) {
 23f383c:	b127      	cbz	r7, 23f3848 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x288>
                out_energies->buffer[ix] = energy;
 23f383e:	683b      	ldr	r3, [r7, #0]
 23f3840:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f3844:	edc3 7a00 	vstr	s15, [r3]
            for (size_t i = 0; i < num_filters; i++) {
 23f3848:	4629      	mov	r1, r5
 23f384a:	f04f 0c00 	mov.w	ip, #0
 23f384e:	68a3      	ldr	r3, [r4, #8]
 23f3850:	6822      	ldr	r2, [r4, #0]
 23f3852:	4373      	muls	r3, r6
 23f3854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23f3858:	45e2      	cmp	sl, ip
 23f385a:	d95b      	bls.n	23f3914 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x354>
                size_t left = bins[i];
 23f385c:	f8b1 b000 	ldrh.w	fp, [r1]
                size_t middle = bins[i+1];
 23f3860:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 23f3864:	f10c 0c01 	add.w	ip, ip, #1
                size_t right = bins[i+2];
 23f3868:	f8b1 8002 	ldrh.w	r8, [r1, #2]
                assert(right < power_spectrum_frame_size);
 23f386c:	45c1      	cmp	r9, r8
 23f386e:	d806      	bhi.n	23f387e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2be>
 23f3870:	f240 115f 	movw	r1, #351	; 0x15f
 23f3874:	4b3a      	ldr	r3, [pc, #232]	; (23f3960 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a0>)
 23f3876:	4a3b      	ldr	r2, [pc, #236]	; (23f3964 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a4>)
 23f3878:	483b      	ldr	r0, [pc, #236]	; (23f3968 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a8>)
 23f387a:	f003 fef9 	bl	23f7670 <__assert_func>
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 23f387e:	9807      	ldr	r0, [sp, #28]
                for (size_t bin = left+1; bin < right; bin++) {
 23f3880:	f10b 0e01 	add.w	lr, fp, #1
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 23f3884:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 23f3888:	6800      	ldr	r0, [r0, #0]
 23f388a:	f843 0b04 	str.w	r0, [r3], #4
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f388e:	eba2 000b 	sub.w	r0, r2, fp
 23f3892:	ee07 0a10 	vmov	s14, r0
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f3896:	eba8 0002 	sub.w	r0, r8, r2
 23f389a:	ee06 0a90 	vmov	s13, r0
                for (size_t bin = left+1; bin < right; bin++) {
 23f389e:	45c6      	cmp	lr, r8
 23f38a0:	d2da      	bcs.n	23f3858 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x298>
                    if (bin < middle) {
 23f38a2:	4596      	cmp	lr, r2
 23f38a4:	d218      	bcs.n	23f38d8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f38a6:	ee07 ba90 	vmov	s15, fp
 23f38aa:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 23f38ae:	ee07 ea90 	vmov	s15, lr
 23f38b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f38b6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 23f38ba:	eeb8 6a47 	vcvt.f32.u32	s12, s14
                            power_spectrum_frame.buffer[bin];
 23f38be:	9807      	ldr	r0, [sp, #28]
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f38c0:	eec7 5a86 	vdiv.f32	s11, s15, s12
                            power_spectrum_frame.buffer[bin];
 23f38c4:	eb00 008e 	add.w	r0, r0, lr, lsl #2
                        row_ptr[i] +=
 23f38c8:	ed90 6a00 	vldr	s12, [r0]
 23f38cc:	ed53 7a01 	vldr	s15, [r3, #-4]
 23f38d0:	eee5 7a86 	vfma.f32	s15, s11, s12
 23f38d4:	ed43 7a01 	vstr	s15, [r3, #-4]
                    if (bin > middle) {
 23f38d8:	4596      	cmp	lr, r2
 23f38da:	d918      	bls.n	23f390e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x34e>
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f38dc:	ee07 ea90 	vmov	s15, lr
 23f38e0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 23f38e4:	ee07 8a90 	vmov	s15, r8
 23f38e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f38ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 23f38f0:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                            power_spectrum_frame.buffer[bin];
 23f38f4:	9807      	ldr	r0, [sp, #28]
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f38f6:	eec7 5a86 	vdiv.f32	s11, s15, s12
                            power_spectrum_frame.buffer[bin];
 23f38fa:	eb00 008e 	add.w	r0, r0, lr, lsl #2
                        row_ptr[i] +=
 23f38fe:	ed90 6a00 	vldr	s12, [r0]
 23f3902:	ed53 7a01 	vldr	s15, [r3, #-4]
 23f3906:	eee5 7a86 	vfma.f32	s15, s11, s12
 23f390a:	ed43 7a01 	vstr	s15, [r3, #-4]
                for (size_t bin = left+1; bin < right; bin++) {
 23f390e:	f10e 0e01 	add.w	lr, lr, #1
 23f3912:	e7c4      	b.n	23f389e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2de>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f3914:	3601      	adds	r6, #1
 23f3916:	e756      	b.n	23f37c6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x206>
        numpy::zero_handling(out_features);
 23f3918:	4620      	mov	r0, r4
 23f391a:	f7fe f8f9 	bl	23f1b10 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
 23f391e:	f04f 0800 	mov.w	r8, #0
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f3922:	a80b      	add	r0, sp, #44	; 0x2c
 23f3924:	f7fd fc72 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
 23f3928:	4645      	mov	r5, r8
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f392a:	a807      	add	r0, sp, #28
 23f392c:	f7fd fc6e 	bl	23f120c <_ZN2ei9ei_matrixD1Ev>
        ei_unique_ptr_t __ptr__(mels,ei_free);
 23f3930:	a805      	add	r0, sp, #20
 23f3932:	f7fe fd68 	bl	23f2406 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 23f3936:	e6aa      	b.n	23f368e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f3938:	f8df 8030 	ldr.w	r8, [pc, #48]	; 23f396c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ac>
 23f393c:	e7f1      	b.n	23f3922 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f393e:	4d0b      	ldr	r5, [pc, #44]	; (23f396c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ac>)
 23f3940:	e7f3      	b.n	23f392a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x36a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f3942:	4d0b      	ldr	r5, [pc, #44]	; (23f3970 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3b0>)
 23f3944:	e6a3      	b.n	23f368e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
 23f3946:	bf00      	nop
 23f3948:	d2f1a9fc 	.word	0xd2f1a9fc
 23f394c:	3f50624d 	.word	0x3f50624d
 23f3950:	023fcaf4 	.word	0x023fcaf4
 23f3954:	023f4113 	.word	0x023f4113
 23f3958:	00000000 	.word	0x00000000
 23f395c:	2edbe6ff 	.word	0x2edbe6ff
 23f3960:	023fcb07 	.word	0x023fcb07
 23f3964:	023fcb29 	.word	0x023fcb29
 23f3968:	023fcbc6 	.word	0x023fcbc6
 23f396c:	fffffc16 	.word	0xfffffc16
 23f3970:	fffffc14 	.word	0xfffffc14

023f3974 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f3974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3978:	ed2d 8b02 	vpush	{d8}
 23f397c:	b093      	sub	sp, #76	; 0x4c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f397e:	e9d2 7305 	ldrd	r7, r3, [r2, #20]
 23f3982:	9309      	str	r3, [sp, #36]	; 0x24
 23f3984:	69d3      	ldr	r3, [r2, #28]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f3986:	4680      	mov	r8, r0
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f3988:	9307      	str	r3, [sp, #28]
 23f398a:	6a13      	ldr	r3, [r2, #32]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f398c:	460c      	mov	r4, r1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f398e:	9308      	str	r3, [sp, #32]
 23f3990:	6a53      	ldr	r3, [r2, #36]	; 0x24
 23f3992:	ed92 8a03 	vldr	s16, [r2, #12]
 23f3996:	930a      	str	r3, [sp, #40]	; 0x28
    if (config.axes != 1) {
 23f3998:	6893      	ldr	r3, [r2, #8]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f399a:	edd2 8a04 	vldr	s17, [r2, #16]
    if (config.axes != 1) {
 23f399e:	2b01      	cmp	r3, #1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f39a0:	8896      	ldrh	r6, [r2, #4]
 23f39a2:	f8d2 b028 	ldr.w	fp, [r2, #40]	; 0x28
    if (config.axes != 1) {
 23f39a6:	f040 80ab 	bne.w	23f3b00 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
    if (signal->total_length == 0) {
 23f39aa:	6902      	ldr	r2, [r0, #16]
 23f39ac:	2a00      	cmp	r2, #0
 23f39ae:	f000 80a9 	beq.w	23f3b04 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x190>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 23f39b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    _Function_base() : _M_manager(nullptr) { }
 23f39b6:	2100      	movs	r1, #0
    if (config.implementation_version < 3) {
 23f39b8:	2e02      	cmp	r6, #2
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 23f39ba:	ee17 5a90 	vmov	r5, s15
 23f39be:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23f3b2c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
 23f39c2:	910f      	str	r1, [sp, #60]	; 0x3c
    if (config.implementation_version < 3) {
 23f39c4:	d832      	bhi.n	23f3a2c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>
        preemphasis = nullptr;
 23f39c6:	f8ca 1000 	str.w	r1, [sl]
        preemphasized_audio_signal.get_data = signal->get_data;
 23f39ca:	4601      	mov	r1, r0
 23f39cc:	a80d      	add	r0, sp, #52	; 0x34
        preemphasized_audio_signal.total_length = signal->total_length;
 23f39ce:	9211      	str	r2, [sp, #68]	; 0x44
        preemphasized_audio_signal.get_data = signal->get_data;
 23f39d0:	f7ff faa4 	bl	23f2f1c <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>
            config.implementation_version);
 23f39d4:	b2bb      	uxth	r3, r7
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 23f39d6:	4632      	mov	r2, r6
 23f39d8:	4629      	mov	r1, r5
 23f39da:	eef0 0a68 	vmov.f32	s1, s17
 23f39de:	eeb0 0a48 	vmov.f32	s0, s16
 23f39e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 23f39e4:	930b      	str	r3, [sp, #44]	; 0x2c
 23f39e6:	f7fd fb39 	bl	23f105c <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 23f39ea:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 23f39ee:	b2bf      	uxth	r7, r7
 23f39f0:	fb07 f900 	mul.w	r9, r7, r0
 23f39f4:	4680      	mov	r8, r0
 23f39f6:	fb02 f001 	mul.w	r0, r2, r1
 23f39fa:	4581      	cmp	r9, r0
 23f39fc:	f8df a12c 	ldr.w	sl, [pc, #300]	; 23f3b2c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
 23f3a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f3a02:	d92a      	bls.n	23f3a5a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 23f3a04:	4840      	ldr	r0, [pc, #256]	; (23f3b08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x194>)
 23f3a06:	f000 fb53 	bl	23f40b0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 23f3a0a:	463a      	mov	r2, r7
 23f3a0c:	4641      	mov	r1, r8
 23f3a0e:	483f      	ldr	r0, [pc, #252]	; (23f3b0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x198>)
 23f3a10:	f000 fb4e 	bl	23f40b0 <_Z9ei_printfPKcz>
        if (preemphasis) {
 23f3a14:	f8da 4000 	ldr.w	r4, [sl]
 23f3a18:	b134      	cbz	r4, 23f3a28 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb4>
            delete preemphasis;
 23f3a1a:	4620      	mov	r0, r4
 23f3a1c:	f7fe f8e6 	bl	23f1bec <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 23f3a20:	211c      	movs	r1, #28
 23f3a22:	4620      	mov	r0, r4
 23f3a24:	f7f9 febb 	bl	23ed79e <_ZdlPvj>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f3a28:	4d39      	ldr	r5, [pc, #228]	; (23f3b10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
 23f3a2a:	e03e      	b.n	23f3aaa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 23f3a2c:	201c      	movs	r0, #28
 23f3a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 23f3a30:	f7f9 feaf 	bl	23ed792 <_Znwj>
 23f3a34:	4681      	mov	r9, r0
 23f3a36:	b130      	cbz	r0, 23f3a46 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xd2>
 23f3a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f3a3a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 23f3b14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>
 23f3a3e:	461a      	mov	r2, r3
 23f3a40:	4641      	mov	r1, r8
 23f3a42:	f7fe fddd 	bl	23f2600 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
        preemphasized_audio_signal.total_length = signal->total_length;
 23f3a46:	f8d8 3010 	ldr.w	r3, [r8, #16]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 23f3a4a:	4933      	ldr	r1, [pc, #204]	; (23f3b18 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
 23f3a4c:	a80d      	add	r0, sp, #52	; 0x34
        preemphasis = pre;
 23f3a4e:	f8ca 9000 	str.w	r9, [sl]
        preemphasized_audio_signal.total_length = signal->total_length;
 23f3a52:	9311      	str	r3, [sp, #68]	; 0x44
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 23f3a54:	f7ff fa7a 	bl	23f2f4c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
 23f3a58:	e7bc      	b.n	23f39d4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3a5a:	9908      	ldr	r1, [sp, #32]
    output_matrix->cols = out_matrix_size.cols;
 23f3a5c:	e9c4 8701 	strd	r8, r7, [r4, #4]
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3a60:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 23f3a64:	9103      	str	r1, [sp, #12]
 23f3a66:	9907      	ldr	r1, [sp, #28]
    if (config.implementation_version > 2) {
 23f3a68:	2e02      	cmp	r6, #2
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3a6a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 23f3a6e:	9300      	str	r3, [sp, #0]
 23f3a70:	eef0 0a68 	vmov.f32	s1, s17
 23f3a74:	eeb0 0a48 	vmov.f32	s0, s16
 23f3a78:	462b      	mov	r3, r5
 23f3a7a:	f04f 0100 	mov.w	r1, #0
 23f3a7e:	4620      	mov	r0, r4
 23f3a80:	9604      	str	r6, [sp, #16]
 23f3a82:	aa0d      	add	r2, sp, #52	; 0x34
    if (config.implementation_version > 2) {
 23f3a84:	d91a      	bls.n	23f3abc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3a86:	f7ff fd9b 	bl	23f35c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
    if (preemphasis) {
 23f3a8a:	f8da 7000 	ldr.w	r7, [sl]
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3a8e:	4605      	mov	r5, r0
    if (preemphasis) {
 23f3a90:	b137      	cbz	r7, 23f3aa0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        delete preemphasis;
 23f3a92:	4638      	mov	r0, r7
 23f3a94:	f7fe f8aa 	bl	23f1bec <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 23f3a98:	211c      	movs	r1, #28
 23f3a9a:	4638      	mov	r0, r7
 23f3a9c:	f7f9 fe7f 	bl	23ed79e <_ZdlPvj>
    if (ret != EIDSP_OK) {
 23f3aa0:	b17d      	cbz	r5, 23f3ac2 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 23f3aa2:	4629      	mov	r1, r5
 23f3aa4:	481d      	ldr	r0, [pc, #116]	; (23f3b1c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
 23f3aa6:	f000 fb03 	bl	23f40b0 <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f3aaa:	a80d      	add	r0, sp, #52	; 0x34
 23f3aac:	f7fd fb90 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
}
 23f3ab0:	4628      	mov	r0, r5
 23f3ab2:	b013      	add	sp, #76	; 0x4c
 23f3ab4:	ecbd 8b02 	vpop	{d8}
 23f3ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 23f3abc:	f7ff fc4e 	bl	23f335c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 23f3ac0:	e7e3      	b.n	23f3a8a <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x116>
    if (config.implementation_version < 3) {
 23f3ac2:	2e02      	cmp	r6, #2
 23f3ac4:	d80e      	bhi.n	23f3ae4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x170>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 23f3ac6:	2301      	movs	r3, #1
 23f3ac8:	462a      	mov	r2, r5
 23f3aca:	4620      	mov	r0, r4
 23f3acc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 23f3ad0:	f7fd feca 	bl	23f1868 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
        if (ret != EIDSP_OK) {
 23f3ad4:	4606      	mov	r6, r0
 23f3ad6:	b170      	cbz	r0, 23f3af6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 23f3ad8:	4601      	mov	r1, r0
 23f3ada:	4811      	ldr	r0, [pc, #68]	; (23f3b20 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>)
            ei_printf("ERR: normalization failed (%d)\n", ret);
 23f3adc:	f000 fae8 	bl	23f40b0 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 23f3ae0:	4635      	mov	r5, r6
 23f3ae2:	e7e2      	b.n	23f3aaa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
 23f3ae4:	4659      	mov	r1, fp
 23f3ae6:	4620      	mov	r0, r4
 23f3ae8:	f7fd f982 	bl	23f0df0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
 23f3aec:	4606      	mov	r6, r0
 23f3aee:	b110      	cbz	r0, 23f3af6 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 23f3af0:	4601      	mov	r1, r0
 23f3af2:	480c      	ldr	r0, [pc, #48]	; (23f3b24 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
 23f3af4:	e7f2      	b.n	23f3adc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x168>
    output_matrix->rows = 1;
 23f3af6:	2301      	movs	r3, #1
    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 23f3af8:	f8c4 9008 	str.w	r9, [r4, #8]
    output_matrix->rows = 1;
 23f3afc:	6063      	str	r3, [r4, #4]
    return EIDSP_OK;
 23f3afe:	e7d4      	b.n	23f3aaa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f3b00:	4d03      	ldr	r5, [pc, #12]	; (23f3b10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
 23f3b02:	e7d5      	b.n	23f3ab0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 23f3b04:	4d08      	ldr	r5, [pc, #32]	; (23f3b28 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
 23f3b06:	e7d3      	b.n	23f3ab0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
 23f3b08:	023fcac7 	.word	0x023fcac7
 23f3b0c:	023fcadb 	.word	0x023fcadb
 23f3b10:	fffffc14 	.word	0xfffffc14
 23f3b14:	3f7ae148 	.word	0x3f7ae148
 23f3b18:	023f25e9 	.word	0x023f25e9
 23f3b1c:	023fcc30 	.word	0x023fcc30
 23f3b20:	023fc9dd 	.word	0x023fc9dd
 23f3b24:	023fc9f5 	.word	0x023fc9f5
 23f3b28:	fffffc10 	.word	0xfffffc10
 23f3b2c:	1007a5f8 	.word	0x1007a5f8

023f3b30 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
}
 23f3b30:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23f3b32:	2100      	movs	r1, #0
}
 23f3b34:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23f3b36:	2001      	movs	r0, #1
 23f3b38:	f003 fd0e 	bl	23f7558 <system_thread_set_state>
        capacity_(0) {
 23f3b3c:	2300      	movs	r3, #0
 23f3b3e:	e9cd 3300 	strd	r3, r3, [sp]
 23f3b42:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f3b44:	f004 f958 	bl	23f7df8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f3b48:	4c1a      	ldr	r4, [pc, #104]	; (23f3bb4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x84>)
 23f3b4a:	4605      	mov	r5, r0
 23f3b4c:	4626      	mov	r6, r4
 23f3b4e:	4669      	mov	r1, sp
 23f3b50:	a803      	add	r0, sp, #12
 23f3b52:	f7ff faff 	bl	23f3154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f3b56:	a903      	add	r1, sp, #12
 23f3b58:	a806      	add	r0, sp, #24
 23f3b5a:	f7ff fafb 	bl	23f3154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f3b5e:	4b16      	ldr	r3, [pc, #88]	; (23f3bb8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x88>)
 23f3b60:	a906      	add	r1, sp, #24
 23f3b62:	f846 3b04 	str.w	r3, [r6], #4
 23f3b66:	a809      	add	r0, sp, #36	; 0x24
 23f3b68:	f7ff faf4 	bl	23f3154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f3b6c:	aa09      	add	r2, sp, #36	; 0x24
 23f3b6e:	2132      	movs	r1, #50	; 0x32
 23f3b70:	4630      	mov	r0, r6
 23f3b72:	f004 ff4f 	bl	23f8a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f3b76:	a809      	add	r0, sp, #36	; 0x24
 23f3b78:	f7fe fc32 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f3b7c:	a806      	add	r0, sp, #24
 23f3b7e:	f7fe fc2f 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f3b82:	4b0e      	ldr	r3, [pc, #56]	; (23f3bbc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8c>)
 23f3b84:	a803      	add	r0, sp, #12
 23f3b86:	6023      	str	r3, [r4, #0]
 23f3b88:	6225      	str	r5, [r4, #32]
 23f3b8a:	f7fe fc29 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f3b8e:	4b0c      	ldr	r3, [pc, #48]	; (23f3bc0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x90>)
 23f3b90:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f3b92:	f004 f931 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f3b96:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f3b9a:	f004 f91b 	bl	23f7dd4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f3b9e:	f004 fc0b 	bl	23f83b8 <_ZN5spark10LogManager8instanceEv>
 23f3ba2:	4621      	mov	r1, r4
 23f3ba4:	f004 fe0e 	bl	23f87c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23f3ba8:	4668      	mov	r0, sp
 23f3baa:	f7fe fc19 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f3bae:	b00c      	add	sp, #48	; 0x30
 23f3bb0:	bd70      	pop	{r4, r5, r6, pc}
 23f3bb2:	bf00      	nop
 23f3bb4:	1007a600 	.word	0x1007a600
 23f3bb8:	023fcc50 	.word	0x023fcc50
 23f3bbc:	023ffaa4 	.word	0x023ffaa4
 23f3bc0:	023fcc68 	.word	0x023fcc68

023f3bc4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f3bc4:	b530      	push	{r4, r5, lr}
  tensor->type = tensorData[i].type;
 23f3bc6:	2418      	movs	r4, #24
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f3bc8:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
 23f3bca:	4344      	muls	r4, r0
 23f3bcc:	4915      	ldr	r1, [pc, #84]	; (23f3c24 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x60>)
 23f3bce:	190a      	adds	r2, r1, r4
 23f3bd0:	7855      	ldrb	r5, [r2, #1]
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 23f3bd2:	5d0c      	ldrb	r4, [r1, r4]
  tensor->type = tensorData[i].type;
 23f3bd4:	701d      	strb	r5, [r3, #0]
  tensor->is_variable = 0;
 23f3bd6:	2500      	movs	r5, #0
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 23f3bd8:	2c02      	cmp	r4, #2
  tensor->allocation_type = tensorData[i].allocation_type;
 23f3bda:	751c      	strb	r4, [r3, #20]
  tensor->is_variable = 0;
 23f3bdc:	f883 502d 	strb.w	r5, [r3, #45]	; 0x2d
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3be0:	bf08      	it	eq
 23f3be2:	4c11      	ldreq	r4, [pc, #68]	; (23f3c28 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x64>)
  tensor->bytes = tensorData[i].bytes;
 23f3be4:	68d5      	ldr	r5, [r2, #12]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3be6:	bf08      	it	eq
 23f3be8:	6824      	ldreq	r4, [r4, #0]
  tensor->bytes = tensorData[i].bytes;
 23f3bea:	619d      	str	r5, [r3, #24]
  tensor->dims = tensorData[i].dims;
 23f3bec:	6895      	ldr	r5, [r2, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3bee:	6852      	ldr	r2, [r2, #4]
  tensor->dims = tensorData[i].dims;
 23f3bf0:	609d      	str	r5, [r3, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3bf2:	bf08      	it	eq
 23f3bf4:	1912      	addeq	r2, r2, r4

    tensor->data.data =  start;
 23f3bf6:	605a      	str	r2, [r3, #4]
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
 23f3bf8:	2218      	movs	r2, #24
 23f3bfa:	fb02 1200 	mla	r2, r2, r0, r1
 23f3bfe:	6951      	ldr	r1, [r2, #20]
 23f3c00:	6910      	ldr	r0, [r2, #16]
 23f3c02:	f103 0430 	add.w	r4, r3, #48	; 0x30
 23f3c06:	e884 0003 	stmia.w	r4, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 23f3c0a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 23f3c0e:	2901      	cmp	r1, #1
 23f3c10:	d106      	bne.n	23f3c20 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x5c>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 23f3c12:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
 23f3c14:	6811      	ldr	r1, [r2, #0]
 23f3c16:	6849      	ldr	r1, [r1, #4]
 23f3c18:	60d9      	str	r1, [r3, #12]
    tensor->params.zero_point = quant->zero_point->data[0];
 23f3c1a:	6852      	ldr	r2, [r2, #4]
 23f3c1c:	6852      	ldr	r2, [r2, #4]
 23f3c1e:	611a      	str	r2, [r3, #16]
  }

}
 23f3c20:	bd30      	pop	{r4, r5, pc}
 23f3c22:	bf00      	nop
 23f3c24:	100799f8 	.word	0x100799f8
 23f3c28:	1007a624 	.word	0x1007a624

023f3c2c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
 23f3c2c:	4b04      	ldr	r3, [pc, #16]	; (23f3c40 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x14>)
 23f3c2e:	681b      	ldr	r3, [r3, #0]
 23f3c30:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
 23f3c32:	bfa3      	ittte	ge
 23f3c34:	4b03      	ldrge	r3, [pc, #12]	; (23f3c44 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
 23f3c36:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
 23f3c3a:	6848      	ldrge	r0, [r1, #4]
    return NULL;
 23f3c3c:	2000      	movlt	r0, #0
}
 23f3c3e:	4770      	bx	lr
 23f3c40:	1007aa48 	.word	0x1007aa48
 23f3c44:	1007a9f8 	.word	0x1007a9f8

023f3c48 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 23f3c48:	f647 73ff 	movw	r3, #32767	; 0x7fff
 23f3c4c:	4a07      	ldr	r2, [pc, #28]	; (23f3c6c <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x24>)
 23f3c4e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 23f3c52:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23f3c56:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
 23f3c5a:	f8a2 310c 	strh.w	r3, [r2, #268]	; 0x10c
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 23f3c5e:	4a04      	ldr	r2, [pc, #16]	; (23f3c70 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>)
 23f3c60:	8193      	strh	r3, [r2, #12]
 23f3c62:	8393      	strh	r3, [r2, #28]
 23f3c64:	8593      	strh	r3, [r2, #44]	; 0x2c
 23f3c66:	8793      	strh	r3, [r2, #60]	; 0x3c
  }
}
 23f3c68:	4770      	bx	lr
 23f3c6a:	bf00      	nop
 23f3c6c:	1007a8a8 	.word	0x1007a8a8
 23f3c70:	1007a9b8 	.word	0x1007a9b8

023f3c74 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f3c74:	481c      	ldr	r0, [pc, #112]	; (23f3ce8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x74>)
                                       int tensor_idx) {
 23f3c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3c78:	4602      	mov	r2, r0
 23f3c7a:	460b      	mov	r3, r1
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f3c7c:	f647 75ff 	movw	r5, #32767	; 0x7fff
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f3c80:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == tensor_idx) {
 23f3c82:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f3c86:	429c      	cmp	r4, r3
 23f3c88:	d102      	bne.n	23f3c90 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1c>
      return &tflEvalTensors[ix].tensor;
 23f3c8a:	eb02 1001 	add.w	r0, r2, r1, lsl #4
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}
 23f3c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f3c90:	42ac      	cmp	r4, r5
 23f3c92:	d11f      	bne.n	23f3cd4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x60>
  if (i < 0) {
 23f3c94:	2b00      	cmp	r3, #0
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 23f3c96:	ea4f 1401 	mov.w	r4, r1, lsl #4
 23f3c9a:	eb02 1001 	add.w	r0, r2, r1, lsl #4
  if (i < 0) {
 23f3c9e:	da05      	bge.n	23f3cac <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x38>
    tensor->data.data = nullptr;
 23f3ca0:	2100      	movs	r1, #0
 23f3ca2:	5111      	str	r1, [r2, r4]
    tensor->dims = nullptr;
 23f3ca4:	6041      	str	r1, [r0, #4]
      tflEvalTensors[ix].index = tensor_idx;
 23f3ca6:	4422      	add	r2, r4
 23f3ca8:	8193      	strh	r3, [r2, #12]
      return &tflEvalTensors[ix].tensor;
 23f3caa:	e7f0      	b.n	23f3c8e <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1a>
  tensor->type = tensorData[i].type;
 23f3cac:	2118      	movs	r1, #24
 23f3cae:	4359      	muls	r1, r3
 23f3cb0:	4e0e      	ldr	r6, [pc, #56]	; (23f3cec <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x78>)
 23f3cb2:	1875      	adds	r5, r6, r1
  if(allocation_type == kTfLiteArenaRw) {
 23f3cb4:	5c71      	ldrb	r1, [r6, r1]
  tensor->type = tensorData[i].type;
 23f3cb6:	786f      	ldrb	r7, [r5, #1]
  if(allocation_type == kTfLiteArenaRw) {
 23f3cb8:	2902      	cmp	r1, #2
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3cba:	bf08      	it	eq
 23f3cbc:	490c      	ldreq	r1, [pc, #48]	; (23f3cf0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x7c>)
  tensor->type = tensorData[i].type;
 23f3cbe:	7207      	strb	r7, [r0, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3cc0:	bf08      	it	eq
 23f3cc2:	6809      	ldreq	r1, [r1, #0]
  tensor->dims = tensorData[i].dims;
 23f3cc4:	68af      	ldr	r7, [r5, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3cc6:	686d      	ldr	r5, [r5, #4]
  tensor->dims = tensorData[i].dims;
 23f3cc8:	6047      	str	r7, [r0, #4]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f3cca:	bf06      	itte	eq
 23f3ccc:	1949      	addeq	r1, r1, r5
    tensor->data.data =  start;
 23f3cce:	5111      	streq	r1, [r2, r4]
    tensor->data.data = tensorData[i].data;
 23f3cd0:	5115      	strne	r5, [r2, r4]
 23f3cd2:	e7e8      	b.n	23f3ca6 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x32>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f3cd4:	3101      	adds	r1, #1
 23f3cd6:	2904      	cmp	r1, #4
 23f3cd8:	f100 0010 	add.w	r0, r0, #16
 23f3cdc:	d1d1      	bne.n	23f3c82 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xe>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 23f3cde:	4805      	ldr	r0, [pc, #20]	; (23f3cf4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x80>)
 23f3ce0:	f000 f9e6 	bl	23f40b0 <_Z9ei_printfPKcz>
  return nullptr;
 23f3ce4:	2000      	movs	r0, #0
 23f3ce6:	e7d2      	b.n	23f3c8e <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1a>
 23f3ce8:	1007a9b8 	.word	0x1007a9b8
 23f3cec:	100799f8 	.word	0x100799f8
 23f3cf0:	1007a624 	.word	0x1007a624
 23f3cf4:	023fd06c 	.word	0x023fd06c

023f3cf8 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:
                               int tensor_idx) {
 23f3cf8:	b538      	push	{r3, r4, r5, lr}
 23f3cfa:	4b12      	ldr	r3, [pc, #72]	; (23f3d44 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x4c>)
 23f3cfc:	460d      	mov	r5, r1
 23f3cfe:	461c      	mov	r4, r3
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f3d00:	2100      	movs	r1, #0
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f3d02:	f647 70ff 	movw	r0, #32767	; 0x7fff
    if (tflTensors[ix].index == tensor_idx) {
 23f3d06:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 23f3d0a:	42aa      	cmp	r2, r5
 23f3d0c:	d104      	bne.n	23f3d18 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>
      return &tflTensors[ix].tensor;
 23f3d0e:	2344      	movs	r3, #68	; 0x44
 23f3d10:	fb03 4401 	mla	r4, r3, r1, r4
}
 23f3d14:	4620      	mov	r0, r4
 23f3d16:	bd38      	pop	{r3, r4, r5, pc}
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f3d18:	4282      	cmp	r2, r0
 23f3d1a:	d109      	bne.n	23f3d30 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x38>
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 23f3d1c:	2344      	movs	r3, #68	; 0x44
 23f3d1e:	fb03 4401 	mla	r4, r3, r1, r4
 23f3d22:	4628      	mov	r0, r5
 23f3d24:	4621      	mov	r1, r4
 23f3d26:	f7ff ff4d 	bl	23f3bc4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 23f3d2a:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      return &tflTensors[ix].tensor;
 23f3d2e:	e7f1      	b.n	23f3d14 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x1c>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f3d30:	3101      	adds	r1, #1
 23f3d32:	2904      	cmp	r1, #4
 23f3d34:	f103 0344 	add.w	r3, r3, #68	; 0x44
 23f3d38:	d1e5      	bne.n	23f3d06 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0xe>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 23f3d3a:	4803      	ldr	r0, [pc, #12]	; (23f3d48 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x50>)
 23f3d3c:	f000 f9b8 	bl	23f40b0 <_Z9ei_printfPKcz>
  return nullptr;
 23f3d40:	2400      	movs	r4, #0
 23f3d42:	e7e7      	b.n	23f3d14 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x1c>
 23f3d44:	1007a8a8 	.word	0x1007a8a8
 23f3d48:	023fd0a2 	.word	0x023fd0a2

023f3d4c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
 23f3d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (current_location - bytes < tensor_boundary) {
 23f3d4e:	4b16      	ldr	r3, [pc, #88]	; (23f3da8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x5c>)
 23f3d50:	4816      	ldr	r0, [pc, #88]	; (23f3dac <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
 23f3d52:	681c      	ldr	r4, [r3, #0]
 23f3d54:	6800      	ldr	r0, [r0, #0]
 23f3d56:	1a64      	subs	r4, r4, r1
 23f3d58:	4284      	cmp	r4, r0
                                       size_t bytes) {
 23f3d5a:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
 23f3d5c:	d21e      	bcs.n	23f3d9c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 23f3d5e:	4d14      	ldr	r5, [pc, #80]	; (23f3db0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
 23f3d60:	682b      	ldr	r3, [r5, #0]
 23f3d62:	2b09      	cmp	r3, #9
 23f3d64:	d906      	bls.n	23f3d74 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x28>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 23f3d66:	4813      	ldr	r0, [pc, #76]	; (23f3db4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
 23f3d68:	f000 f9a2 	bl	23f40b0 <_Z9ei_printfPKcz>
      return NULL;
 23f3d6c:	2400      	movs	r4, #0
}
 23f3d6e:	4620      	mov	r0, r4
 23f3d70:	b003      	add	sp, #12
 23f3d72:	bd30      	pop	{r4, r5, pc}
    ptr = ei_calloc(bytes, 1);
 23f3d74:	4610      	mov	r0, r2
 23f3d76:	2101      	movs	r1, #1
 23f3d78:	9201      	str	r2, [sp, #4]
 23f3d7a:	f000 f9c8 	bl	23f410e <_Z9ei_callocjj>
    if (ptr == NULL) {
 23f3d7e:	9a01      	ldr	r2, [sp, #4]
 23f3d80:	4604      	mov	r4, r0
 23f3d82:	b920      	cbnz	r0, 23f3d8e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x42>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 23f3d84:	4611      	mov	r1, r2
 23f3d86:	480c      	ldr	r0, [pc, #48]	; (23f3db8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
 23f3d88:	f000 f992 	bl	23f40b0 <_Z9ei_printfPKcz>
      return NULL;
 23f3d8c:	e7ef      	b.n	23f3d6e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
    overflow_buffers[overflow_buffers_ix++] = ptr;
 23f3d8e:	682b      	ldr	r3, [r5, #0]
 23f3d90:	1c5a      	adds	r2, r3, #1
 23f3d92:	602a      	str	r2, [r5, #0]
 23f3d94:	4a09      	ldr	r2, [pc, #36]	; (23f3dbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x70>)
 23f3d96:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return ptr;
 23f3d9a:	e7e8      	b.n	23f3d6e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
  memset(ptr, 0, bytes);
 23f3d9c:	2100      	movs	r1, #0
 23f3d9e:	4620      	mov	r0, r4
  current_location -= bytes;
 23f3da0:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
 23f3da2:	f007 fbf7 	bl	23fb594 <memset>
  return ptr;
 23f3da6:	e7e2      	b.n	23f3d6e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
 23f3da8:	1007aa1c 	.word	0x1007aa1c
 23f3dac:	1007aa18 	.word	0x1007aa18
 23f3db0:	1007aa4c 	.word	0x1007aa4c
 23f3db4:	023fd0da 	.word	0x023fd0da
 23f3db8:	023fd157 	.word	0x023fd157
 23f3dbc:	1007aa20 	.word	0x1007aa20

023f3dc0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
 23f3dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f3dc2:	4e0e      	ldr	r6, [pc, #56]	; (23f3dfc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>)
                                                int* buffer_idx) {
 23f3dc4:	460d      	mov	r5, r1
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f3dc6:	6833      	ldr	r3, [r6, #0]
                                                int* buffer_idx) {
 23f3dc8:	4617      	mov	r7, r2
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f3dca:	2b03      	cmp	r3, #3
 23f3dcc:	d904      	bls.n	23f3dd8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x18>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 23f3dce:	480c      	ldr	r0, [pc, #48]	; (23f3e00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x40>)
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f3dd0:	f000 f96e 	bl	23f40b0 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f3dd4:	2001      	movs	r0, #1
}
 23f3dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 23f3dd8:	f7ff ffb8 	bl	23f3d4c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
 23f3ddc:	b910      	cbnz	r0, 23f3de4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f3dde:	4629      	mov	r1, r5
 23f3de0:	4808      	ldr	r0, [pc, #32]	; (23f3e04 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x44>)
 23f3de2:	e7f5      	b.n	23f3dd0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x10>
  scratch_buffers[scratch_buffers_ix] = b;
 23f3de4:	6833      	ldr	r3, [r6, #0]
 23f3de6:	4c08      	ldr	r4, [pc, #32]	; (23f3e08 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>)
  *buffer_idx = scratch_buffers_ix;
 23f3de8:	603b      	str	r3, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
 23f3dea:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
 23f3dee:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  scratch_buffers_ix++;
 23f3df2:	3301      	adds	r3, #1
  scratch_buffers[scratch_buffers_ix] = b;
 23f3df4:	6060      	str	r0, [r4, #4]
  scratch_buffers_ix++;
 23f3df6:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 23f3df8:	2000      	movs	r0, #0
 23f3dfa:	e7ec      	b.n	23f3dd6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x16>
 23f3dfc:	1007aa48 	.word	0x1007aa48
 23f3e00:	023fd18d 	.word	0x023fd18d
 23f3e04:	023fd1e5 	.word	0x023fd1e5
 23f3e08:	1007a9f8 	.word	0x1007a9f8

023f3e0c <_Z19tflite_learn_5_initPFPvjjE>:

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f3e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3e10:	4603      	mov	r3, r0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f3e12:	f242 3150 	movw	r1, #9040	; 0x2350
 23f3e16:	2010      	movs	r0, #16
TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f3e18:	b099      	sub	sp, #100	; 0x64
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f3e1a:	4798      	blx	r3
 23f3e1c:	4b57      	ldr	r3, [pc, #348]	; (23f3f7c <_Z19tflite_learn_5_initPFPvjjE+0x170>)
 23f3e1e:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
 23f3e20:	b930      	cbnz	r0, 23f3e30 <_Z19tflite_learn_5_initPFPvjjE+0x24>
    ei_printf("ERR: failed to allocate tensor arena\n");
 23f3e22:	4857      	ldr	r0, [pc, #348]	; (23f3f80 <_Z19tflite_learn_5_initPFPvjjE+0x174>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f3e24:	f000 f944 	bl	23f40b0 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f3e28:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
 23f3e2a:	b019      	add	sp, #100	; 0x64
 23f3e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
 23f3e30:	4b54      	ldr	r3, [pc, #336]	; (23f3f84 <_Z19tflite_learn_5_initPFPvjjE+0x178>)
 23f3e32:	f500 540d 	add.w	r4, r0, #9024	; 0x2340
 23f3e36:	3410      	adds	r4, #16
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f3e38:	4a53      	ldr	r2, [pc, #332]	; (23f3f88 <_Z19tflite_learn_5_initPFPvjjE+0x17c>)
  current_location = tensor_arena + kTensorArenaSize;
 23f3e3a:	601c      	str	r4, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f3e3c:	4b53      	ldr	r3, [pc, #332]	; (23f3f8c <_Z19tflite_learn_5_initPFPvjjE+0x180>)
  for (size_t i = 0; i < 23; ++i) {
 23f3e3e:	2600      	movs	r6, #0
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f3e40:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 23f3e42:	4a53      	ldr	r2, [pc, #332]	; (23f3f90 <_Z19tflite_learn_5_initPFPvjjE+0x184>)
  tensor_boundary = tensor_arena;
 23f3e44:	4d53      	ldr	r5, [pc, #332]	; (23f3f94 <_Z19tflite_learn_5_initPFPvjjE+0x188>)
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 23f3e46:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBuffer;
 23f3e48:	4a53      	ldr	r2, [pc, #332]	; (23f3f98 <_Z19tflite_learn_5_initPFPvjjE+0x18c>)
 23f3e4a:	4f54      	ldr	r7, [pc, #336]	; (23f3f9c <_Z19tflite_learn_5_initPFPvjjE+0x190>)
 23f3e4c:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensor;
 23f3e4e:	4a54      	ldr	r2, [pc, #336]	; (23f3fa0 <_Z19tflite_learn_5_initPFPvjjE+0x194>)
  tensor_boundary = tensor_arena;
 23f3e50:	6028      	str	r0, [r5, #0]
  ctx.GetTensor = &GetTensor;
 23f3e52:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensor;
 23f3e54:	4a53      	ldr	r2, [pc, #332]	; (23f3fa4 <_Z19tflite_learn_5_initPFPvjjE+0x198>)
 23f3e56:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.tensors_size = 23;
 23f3e58:	2217      	movs	r2, #23
 23f3e5a:	601a      	str	r2, [r3, #0]
    init_tflite_tensor(i, &tensor);
 23f3e5c:	4630      	mov	r0, r6
 23f3e5e:	a908      	add	r1, sp, #32
 23f3e60:	f7ff feb0 	bl	23f3bc4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 23f3e64:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23f3e68:	2b02      	cmp	r3, #2
 23f3e6a:	d106      	bne.n	23f3e7a <_Z19tflite_learn_5_initPFPvjjE+0x6e>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 23f3e6c:	68fa      	ldr	r2, [r7, #12]
 23f3e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f3e70:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
 23f3e72:	682a      	ldr	r2, [r5, #0]
 23f3e74:	4293      	cmp	r3, r2
        tensor_boundary = data_end_ptr;
 23f3e76:	bf88      	it	hi
 23f3e78:	602b      	strhi	r3, [r5, #0]
  for (size_t i = 0; i < 23; ++i) {
 23f3e7a:	3601      	adds	r6, #1
 23f3e7c:	2e17      	cmp	r6, #23
 23f3e7e:	f107 0718 	add.w	r7, r7, #24
 23f3e82:	d1eb      	bne.n	23f3e5c <_Z19tflite_learn_5_initPFPvjjE+0x50>
  if (tensor_boundary > current_location /* end of arena size */) {
 23f3e84:	682b      	ldr	r3, [r5, #0]
 23f3e86:	429c      	cmp	r4, r3
 23f3e88:	d201      	bcs.n	23f3e8e <_Z19tflite_learn_5_initPFPvjjE+0x82>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f3e8a:	4847      	ldr	r0, [pc, #284]	; (23f3fa8 <_Z19tflite_learn_5_initPFPvjjE+0x19c>)
 23f3e8c:	e7ca      	b.n	23f3e24 <_Z19tflite_learn_5_initPFPvjjE+0x18>
  registrations[OP_RESHAPE] = Register_RESHAPE();
 23f3e8e:	466d      	mov	r5, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f3e90:	466f      	mov	r7, sp
  registrations[OP_RESHAPE] = Register_RESHAPE();
 23f3e92:	4c46      	ldr	r4, [pc, #280]	; (23f3fac <_Z19tflite_learn_5_initPFPvjjE+0x1a0>)
 23f3e94:	4668      	mov	r0, sp
 23f3e96:	f000 fd6f 	bl	23f4978 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 23f3e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f3e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f3e9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f3ea6:	4668      	mov	r0, sp
 23f3ea8:	f001 f948 	bl	23f513c <_ZN6tflite16Register_CONV_2DEv>
 23f3eac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f3eae:	466f      	mov	r7, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f3eb0:	f104 0610 	add.w	r6, r4, #16
 23f3eb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f3eb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3eba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f3ebe:	4668      	mov	r0, sp
 23f3ec0:	f001 fcfc 	bl	23f58bc <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 23f3ec4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f3ec6:	466f      	mov	r7, sp
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f3ec8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23f3ecc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f3ece:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3ed2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f3ed6:	4668      	mov	r0, sp
 23f3ed8:	f104 0650 	add.w	r6, r4, #80	; 0x50
 23f3edc:	f000 fbd8 	bl	23f4690 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 23f3ee0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 23f3ee2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f3ee4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3ee8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 23f3eec:	466e      	mov	r6, sp
 23f3eee:	4668      	mov	r0, sp
 23f3ef0:	f104 0770 	add.w	r7, r4, #112	; 0x70
 23f3ef4:	f001 f9d2 	bl	23f529c <_ZN6tflite16Register_SOFTMAXEv>
 23f3ef8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f3efa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 23f3efc:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 23f3fb0 <_Z19tflite_learn_5_initPFPvjjE+0x1a4>
 23f3f00:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 23f3fb4 <_Z19tflite_learn_5_initPFPvjjE+0x1a8>
 23f3f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f3f08:	260b      	movs	r6, #11
 23f3f0a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 23f3f0e:	4645      	mov	r5, r8
 23f3f10:	464f      	mov	r7, r9
tflNodes[i].custom_initial_data = nullptr;
 23f3f12:	f04f 0a00 	mov.w	sl, #0
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f3f16:	f8df b074 	ldr.w	fp, [pc, #116]	; 23f3f8c <_Z19tflite_learn_5_initPFPvjjE+0x180>
 23f3f1a:	3c10      	subs	r4, #16
    tflNodes[i].inputs = nodeData[i].inputs;
 23f3f1c:	683b      	ldr	r3, [r7, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 23f3f1e:	68b9      	ldr	r1, [r7, #8]
    tflNodes[i].inputs = nodeData[i].inputs;
 23f3f20:	602b      	str	r3, [r5, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 23f3f22:	687b      	ldr	r3, [r7, #4]
tflNodes[i].custom_initial_data = nullptr;
 23f3f24:	e9c5 1a05 	strd	r1, sl, [r5, #20]
    tflNodes[i].outputs = nodeData[i].outputs;
 23f3f28:	606b      	str	r3, [r5, #4]
if (registrations[nodeData[i].used_op_index].init) {
 23f3f2a:	7b3b      	ldrb	r3, [r7, #12]
      tflNodes[i].custom_initial_data_size = 0;
 23f3f2c:	f8c5 a01c 	str.w	sl, [r5, #28]
if (registrations[nodeData[i].used_op_index].init) {
 23f3f30:	015b      	lsls	r3, r3, #5
 23f3f32:	58e3      	ldr	r3, [r4, r3]
 23f3f34:	b11b      	cbz	r3, 23f3f3e <_Z19tflite_learn_5_initPFPvjjE+0x132>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f3f36:	2200      	movs	r2, #0
 23f3f38:	4658      	mov	r0, fp
 23f3f3a:	4798      	blx	r3
 23f3f3c:	6128      	str	r0, [r5, #16]
  for (size_t i = 0; i < 11; ++i) {
 23f3f3e:	3e01      	subs	r6, #1
 23f3f40:	f107 0710 	add.w	r7, r7, #16
 23f3f44:	f105 0524 	add.w	r5, r5, #36	; 0x24
 23f3f48:	d1e8      	bne.n	23f3f1c <_Z19tflite_learn_5_initPFPvjjE+0x110>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f3f4a:	4d10      	ldr	r5, [pc, #64]	; (23f3f8c <_Z19tflite_learn_5_initPFPvjjE+0x180>)
    if (registrations[nodeData[i].used_op_index].prepare) {
 23f3f4c:	f899 300c 	ldrb.w	r3, [r9, #12]
 23f3f50:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 23f3f54:	689f      	ldr	r7, [r3, #8]
 23f3f56:	b947      	cbnz	r7, 23f3f6a <_Z19tflite_learn_5_initPFPvjjE+0x15e>
  for (size_t i = 0; i < 11; ++i) {
 23f3f58:	3601      	adds	r6, #1
 23f3f5a:	2e0b      	cmp	r6, #11
 23f3f5c:	f109 0910 	add.w	r9, r9, #16
 23f3f60:	f108 0824 	add.w	r8, r8, #36	; 0x24
 23f3f64:	d1f2      	bne.n	23f3f4c <_Z19tflite_learn_5_initPFPvjjE+0x140>
  return kTfLiteOk;
 23f3f66:	2000      	movs	r0, #0
 23f3f68:	e75f      	b.n	23f3e2a <_Z19tflite_learn_5_initPFPvjjE+0x1e>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f3f6a:	4641      	mov	r1, r8
 23f3f6c:	4628      	mov	r0, r5
      ResetTensors();
 23f3f6e:	f7ff fe6b 	bl	23f3c48 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f3f72:	47b8      	blx	r7
      if (status != kTfLiteOk) {
 23f3f74:	2800      	cmp	r0, #0
 23f3f76:	d0ef      	beq.n	23f3f58 <_Z19tflite_learn_5_initPFPvjjE+0x14c>
 23f3f78:	e757      	b.n	23f3e2a <_Z19tflite_learn_5_initPFPvjjE+0x1e>
 23f3f7a:	bf00      	nop
 23f3f7c:	1007a624 	.word	0x1007a624
 23f3f80:	023fd218 	.word	0x023fd218
 23f3f84:	1007aa1c 	.word	0x1007aa1c
 23f3f88:	023f3d4d 	.word	0x023f3d4d
 23f3f8c:	1007a6c8 	.word	0x1007a6c8
 23f3f90:	023f3dc1 	.word	0x023f3dc1
 23f3f94:	1007aa18 	.word	0x1007aa18
 23f3f98:	023f3c2d 	.word	0x023f3c2d
 23f3f9c:	100799f8 	.word	0x100799f8
 23f3fa0:	023f3cf9 	.word	0x023f3cf9
 23f3fa4:	023f3c75 	.word	0x023f3c75
 23f3fa8:	023fd23e 	.word	0x023fd23e
 23f3fac:	1007a628 	.word	0x1007a628
 23f3fb0:	023fed28 	.word	0x023fed28
 23f3fb4:	1007a71c 	.word	0x1007a71c

023f3fb8 <_Z20tflite_learn_5_inputiP12TfLiteTensor>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
 23f3fb8:	b508      	push	{r3, lr}
  init_tflite_tensor(inTensorIndices[index], tensor);
 23f3fba:	2000      	movs	r0, #0
 23f3fbc:	f7ff fe02 	bl	23f3bc4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f3fc0:	2000      	movs	r0, #0
 23f3fc2:	bd08      	pop	{r3, pc}

023f3fc4 <_Z21tflite_learn_5_outputiP12TfLiteTensor>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
 23f3fc4:	b508      	push	{r3, lr}
  init_tflite_tensor(outTensorIndices[index], tensor);
 23f3fc6:	2016      	movs	r0, #22
 23f3fc8:	f7ff fdfc 	bl	23f3bc4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f3fcc:	2000      	movs	r0, #0
 23f3fce:	bd08      	pop	{r3, pc}

023f3fd0 <_Z21tflite_learn_5_invokev>:

TfLiteStatus tflite_learn_5_invoke() {
 23f3fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < 11; ++i) {
 23f3fd4:	2400      	movs	r4, #0
 23f3fd6:	4e0c      	ldr	r6, [pc, #48]	; (23f4008 <_Z21tflite_learn_5_invokev+0x38>)
 23f3fd8:	4d0c      	ldr	r5, [pc, #48]	; (23f400c <_Z21tflite_learn_5_invokev+0x3c>)
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 23f3fda:	4f0d      	ldr	r7, [pc, #52]	; (23f4010 <_Z21tflite_learn_5_invokev+0x40>)
 23f3fdc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 23f4014 <_Z21tflite_learn_5_invokev+0x44>
    ResetTensors();
 23f3fe0:	f7ff fe32 	bl	23f3c48 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 23f3fe4:	7b33      	ldrb	r3, [r6, #12]
 23f3fe6:	4629      	mov	r1, r5
 23f3fe8:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 23f3fec:	4640      	mov	r0, r8
 23f3fee:	68db      	ldr	r3, [r3, #12]
 23f3ff0:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 23f3ff2:	b930      	cbnz	r0, 23f4002 <_Z21tflite_learn_5_invokev+0x32>
  for (size_t i = 0; i < 11; ++i) {
 23f3ff4:	3401      	adds	r4, #1
 23f3ff6:	2c0b      	cmp	r4, #11
 23f3ff8:	f106 0610 	add.w	r6, r6, #16
 23f3ffc:	f105 0524 	add.w	r5, r5, #36	; 0x24
 23f4000:	d1ee      	bne.n	23f3fe0 <_Z21tflite_learn_5_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
 23f4002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f4006:	bf00      	nop
 23f4008:	023fed28 	.word	0x023fed28
 23f400c:	1007a71c 	.word	0x1007a71c
 23f4010:	1007a628 	.word	0x1007a628
 23f4014:	1007a6c8 	.word	0x1007a6c8

023f4018 <_Z20tflite_learn_5_resetPFvPvE>:

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 23f4018:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 23f401a:	2400      	movs	r4, #0
  free_fnc(tensor_arena);
 23f401c:	4a09      	ldr	r2, [pc, #36]	; (23f4044 <_Z20tflite_learn_5_resetPFvPvE+0x2c>)
TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 23f401e:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
 23f4020:	6810      	ldr	r0, [r2, #0]
 23f4022:	4798      	blx	r3
  scratch_buffers_ix = 0;
 23f4024:	4b08      	ldr	r3, [pc, #32]	; (23f4048 <_Z20tflite_learn_5_resetPFvPvE+0x30>)
 23f4026:	4e09      	ldr	r6, [pc, #36]	; (23f404c <_Z20tflite_learn_5_resetPFvPvE+0x34>)

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f4028:	4d09      	ldr	r5, [pc, #36]	; (23f4050 <_Z20tflite_learn_5_resetPFvPvE+0x38>)
  scratch_buffers_ix = 0;
 23f402a:	601c      	str	r4, [r3, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f402c:	682b      	ldr	r3, [r5, #0]
 23f402e:	42a3      	cmp	r3, r4
 23f4030:	d905      	bls.n	23f403e <_Z20tflite_learn_5_resetPFvPvE+0x26>
    ei_free(overflow_buffers[ix]);
 23f4032:	f856 0b04 	ldr.w	r0, [r6], #4
 23f4036:	f000 f86c 	bl	23f4112 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f403a:	3401      	adds	r4, #1
 23f403c:	e7f6      	b.n	23f402c <_Z20tflite_learn_5_resetPFvPvE+0x14>
  }
  overflow_buffers_ix = 0;
 23f403e:	2000      	movs	r0, #0
 23f4040:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
 23f4042:	bd70      	pop	{r4, r5, r6, pc}
 23f4044:	1007a624 	.word	0x1007a624
 23f4048:	1007aa48 	.word	0x1007aa48
 23f404c:	1007aa20 	.word	0x1007aa20
 23f4050:	1007aa4c 	.word	0x1007aa4c

023f4054 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f4054:	4b10      	ldr	r3, [pc, #64]	; (23f4098 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x44>)
 23f4056:	681a      	ldr	r2, [r3, #0]
};const NodeInfo_t nodeData[] = {
 23f4058:	4b10      	ldr	r3, [pc, #64]	; (23f409c <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x48>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f405a:	f502 6178 	add.w	r1, r2, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 23f405e:	6059      	str	r1, [r3, #4]
 23f4060:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 23f4064:	f502 7148 	add.w	r1, r2, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 23f4068:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 23f406c:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 23f4070:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 23f4074:	f502 71c8 	add.w	r1, r2, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 23f4078:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 23f407c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 23f4080:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 23f4084:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 23f4088:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 23f408c:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 23f4090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
}
 23f4094:	4770      	bx	lr
 23f4096:	bf00      	nop
 23f4098:	1007a624 	.word	0x1007a624
 23f409c:	100799f8 	.word	0x100799f8

023f40a0 <_Z29ei_run_impulse_check_canceledv>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
 23f40a0:	2000      	movs	r0, #0
 23f40a2:	4770      	bx	lr

023f40a4 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
 23f40a4:	b508      	push	{r3, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f40a6:	f003 f907 	bl	23f72b8 <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
 23f40aa:	2100      	movs	r1, #0
 23f40ac:	bd08      	pop	{r3, pc}
	...

023f40b0 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f40b0:	b40f      	push	{r0, r1, r2, r3}
 23f40b2:	b513      	push	{r0, r1, r4, lr}
 23f40b4:	ab04      	add	r3, sp, #16
 23f40b6:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f40ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f40be:	480b      	ldr	r0, [pc, #44]	; (23f40ec <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f40c0:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f40c2:	f003 fa9d 	bl	23f7600 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f40c6:	2800      	cmp	r0, #0
 23f40c8:	dd0b      	ble.n	23f40e2 <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f40ca:	f003 fe95 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f40ce:	4604      	mov	r4, r0
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 23f40d0:	4806      	ldr	r0, [pc, #24]	; (23f40ec <_Z9ei_printfPKcz+0x3c>)
 23f40d2:	f7f9 fb39 	bl	23ed748 <strlen>
 23f40d6:	6823      	ldr	r3, [r4, #0]
 23f40d8:	4602      	mov	r2, r0
 23f40da:	68db      	ldr	r3, [r3, #12]
 23f40dc:	4620      	mov	r0, r4
 23f40de:	4903      	ldr	r1, [pc, #12]	; (23f40ec <_Z9ei_printfPKcz+0x3c>)
 23f40e0:	4798      	blx	r3
    }
}
 23f40e2:	b002      	add	sp, #8
 23f40e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f40e8:	b004      	add	sp, #16
 23f40ea:	4770      	bx	lr
 23f40ec:	1007aa50 	.word	0x1007aa50

023f40f0 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 23f40f0:	b507      	push	{r0, r1, r2, lr}
 23f40f2:	ed8d 0a01 	vstr	s0, [sp, #4]
    Serial.print(f, 6);
 23f40f6:	f003 fe7f 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f40fa:	2106      	movs	r1, #6
 23f40fc:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 23f4100:	b003      	add	sp, #12
 23f4102:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.print(f, 6);
 23f4106:	f005 b8af 	b.w	23f9268 <_ZN5Print5printEfi>

023f410a <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
 23f410a:	f003 ba4f 	b.w	23f75ac <malloc>

023f410e <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
 23f410e:	f007 ba07 	b.w	23fb520 <calloc>

023f4112 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
 23f4112:	f003 ba59 	b.w	23f75c8 <free>

023f4116 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 23f4116:	3801      	subs	r0, #1
 23f4118:	280f      	cmp	r0, #15
 23f411a:	d815      	bhi.n	23f4148 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
 23f411c:	e8df f000 	tbb	[pc, r0]
 23f4120:	0e100c0c 	.word	0x0e100c0c
 23f4124:	0e081014 	.word	0x0e081014
 23f4128:	120e0810 	.word	0x120e0810
 23f412c:	0c14140e 	.word	0x0c14140e
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 23f4130:	2302      	movs	r3, #2
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 23f4132:	2000      	movs	r0, #0
      *size = sizeof(float);
 23f4134:	600b      	str	r3, [r1, #0]
      break;
 23f4136:	4770      	bx	lr
      *size = sizeof(float);
 23f4138:	2304      	movs	r3, #4
 23f413a:	e7fa      	b.n	23f4132 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
 23f413c:	2308      	movs	r3, #8
 23f413e:	e7f8      	b.n	23f4132 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
 23f4140:	2301      	movs	r3, #1
 23f4142:	e7f6      	b.n	23f4132 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
 23f4144:	2310      	movs	r3, #16
 23f4146:	e7f4      	b.n	23f4132 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  return kTfLiteOk;
 23f4148:	2001      	movs	r0, #1
}
 23f414a:	4770      	bx	lr

023f414c <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 23f414c:	2200      	movs	r2, #0
  int result = 1;
 23f414e:	2301      	movs	r3, #1
int ElementCount(const TfLiteIntArray& dims) {
 23f4150:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
 23f4152:	f850 4b04 	ldr.w	r4, [r0], #4
 23f4156:	4294      	cmp	r4, r2
 23f4158:	dd04      	ble.n	23f4164 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
 23f415a:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
 23f415e:	3201      	adds	r2, #1
    result *= dims.data[i];
 23f4160:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
 23f4162:	e7f8      	b.n	23f4156 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
 23f4164:	4618      	mov	r0, r3
 23f4166:	bd10      	pop	{r4, pc}

023f4168 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 23f4168:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
 23f416a:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
 23f416c:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
 23f416e:	2b05      	cmp	r3, #5
 23f4170:	dd03      	ble.n	23f417a <_ZN6tflite12RuntimeShapeD1Ev+0x12>
 23f4172:	6840      	ldr	r0, [r0, #4]
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 23f4174:	b108      	cbz	r0, 23f417a <_ZN6tflite12RuntimeShapeD1Ev+0x12>
 23f4176:	f7f9 fb10 	bl	23ed79a <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 23f417a:	4620      	mov	r0, r4
 23f417c:	bd10      	pop	{r4, pc}

023f417e <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
 23f417e:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
 23f4180:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 23f4182:	da01      	bge.n	23f4188 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 23f4184:	f003 fa4a 	bl	23f761c <abort>
    TFLITE_DCHECK_LT(i, size_);
 23f4188:	6803      	ldr	r3, [r0, #0]
 23f418a:	428b      	cmp	r3, r1
 23f418c:	ddfa      	ble.n	23f4184 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 23f418e:	2b05      	cmp	r3, #5
 23f4190:	bfcb      	itete	gt
 23f4192:	6843      	ldrgt	r3, [r0, #4]
 23f4194:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
 23f4198:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
 23f419c:	6840      	ldrle	r0, [r0, #4]
  }
 23f419e:	bd08      	pop	{r3, pc}

023f41a0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 23f41a0:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f41a2:	6801      	ldr	r1, [r0, #0]
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 23f41a4:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f41a6:	2905      	cmp	r1, #5
 23f41a8:	bfcc      	ite	gt
 23f41aa:	6843      	ldrgt	r3, [r0, #4]
 23f41ac:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
 23f41ae:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
 23f41b0:	428a      	cmp	r2, r1
 23f41b2:	da04      	bge.n	23f41be <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
 23f41b4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
 23f41b8:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f41ba:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
 23f41bc:	e7f8      	b.n	23f41b0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
 23f41be:	bd10      	pop	{r4, pc}

023f41c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 23f41c0:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 23f41c2:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 23f41c4:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 23f41c6:	2d04      	cmp	r5, #4
 23f41c8:	d001      	beq.n	23f41ce <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
 23f41ca:	f003 fa27 	bl	23f761c <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 23f41ce:	2900      	cmp	r1, #0
 23f41d0:	dbfb      	blt.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f41d2:	6845      	ldr	r5, [r0, #4]
 23f41d4:	428d      	cmp	r5, r1
 23f41d6:	ddf8      	ble.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 23f41d8:	2a00      	cmp	r2, #0
 23f41da:	dbf6      	blt.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f41dc:	6886      	ldr	r6, [r0, #8]
 23f41de:	4296      	cmp	r6, r2
 23f41e0:	ddf3      	ble.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 23f41e2:	2b00      	cmp	r3, #0
 23f41e4:	dbf1      	blt.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f41e6:	68c5      	ldr	r5, [r0, #12]
 23f41e8:	429d      	cmp	r5, r3
 23f41ea:	ddee      	ble.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 23f41ec:	2c00      	cmp	r4, #0
 23f41ee:	dbec      	blt.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f41f0:	6900      	ldr	r0, [r0, #16]
 23f41f2:	42a0      	cmp	r0, r4
 23f41f4:	dde9      	ble.n	23f41ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 23f41f6:	fb01 2206 	mla	r2, r1, r6, r2
 23f41fa:	fb05 3302 	mla	r3, r5, r2, r3
}
 23f41fe:	fb00 4003 	mla	r0, r0, r3, r4
 23f4202:	bd70      	pop	{r4, r5, r6, pc}

023f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 23f4204:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f4206:	b908      	cbnz	r0, 23f420c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f4208:	f003 fa08 	bl	23f761c <abort>
  TFLITE_DCHECK(node != nullptr);
 23f420c:	2900      	cmp	r1, #0
 23f420e:	d0fb      	beq.n	23f4208 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
}
 23f4210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f4214:	6809      	ldr	r1, [r1, #0]
 23f4216:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f4218:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f421c:	6851      	ldr	r1, [r2, #4]
 23f421e:	4718      	bx	r3

023f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 23f4220:	b570      	push	{r4, r5, r6, lr}
 23f4222:	4615      	mov	r5, r2
 23f4224:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f4226:	f7ff ffaa 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f422a:	4631      	mov	r1, r6
 23f422c:	4604      	mov	r4, r0
 23f422e:	4628      	mov	r0, r5
 23f4230:	f7ff ffa5 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f4234:	4284      	cmp	r4, r0
 23f4236:	d001      	beq.n	23f423c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
 23f4238:	f003 f9f0 	bl	23f761c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
 23f423c:	bd70      	pop	{r4, r5, r6, pc}

023f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 23f423e:	b570      	push	{r4, r5, r6, lr}
 23f4240:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 23f4242:	b911      	cbnz	r1, 23f424a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 23f4244:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f4246:	4620      	mov	r0, r4
 23f4248:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
 23f424a:	688d      	ldr	r5, [r1, #8]
 23f424c:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
 23f4250:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
 23f4252:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f4254:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 23f4258:	dc05      	bgt.n	23f4266 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f425a:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f425c:	4632      	mov	r2, r6
 23f425e:	4629      	mov	r1, r5
 23f4260:	f007 f971 	bl	23fb546 <memcpy>
  }
 23f4264:	e7ef      	b.n	23f4246 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
 23f4266:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 23f426a:	4293      	cmp	r3, r2
 23f426c:	bfb4      	ite	lt
 23f426e:	4630      	movlt	r0, r6
 23f4270:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f4274:	f7f9 fa8f 	bl	23ed796 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f4278:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f427a:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f427c:	2b05      	cmp	r3, #5
 23f427e:	dced      	bgt.n	23f425c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
 23f4280:	e7eb      	b.n	23f425a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

023f4282 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableEvalInput(context, node, index);
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 23f4282:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f4284:	b908      	cbnz	r0, 23f428a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f4286:	f003 f9c9 	bl	23f761c <abort>
  TFLITE_DCHECK(node != nullptr);
 23f428a:	2900      	cmp	r1, #0
 23f428c:	d0fb      	beq.n	23f4286 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
}
 23f428e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f4292:	6849      	ldr	r1, [r1, #4]
 23f4294:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f4296:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f429a:	6851      	ldr	r1, [r2, #4]
 23f429c:	4718      	bx	r3

023f429e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 23f429e:	b123      	cbz	r3, 23f42aa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>

  switch (padding) {
 23f42a0:	2801      	cmp	r0, #1
 23f42a2:	d004      	beq.n	23f42ae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
 23f42a4:	2802      	cmp	r0, #2
 23f42a6:	d007      	beq.n	23f42b8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
 23f42a8:	2300      	movs	r3, #0
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
 23f42aa:	4618      	mov	r0, r3
 23f42ac:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
 23f42ae:	4419      	add	r1, r3
 23f42b0:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
 23f42b2:	fb91 f3f3 	sdiv	r3, r1, r3
 23f42b6:	e7f8      	b.n	23f42aa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f42b8:	9800      	ldr	r0, [sp, #0]
 23f42ba:	3a01      	subs	r2, #1
 23f42bc:	4342      	muls	r2, r0
      return (image_size + stride - effective_filter_size) / stride;
 23f42be:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f42c0:	3201      	adds	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
 23f42c2:	1a89      	subs	r1, r1, r2
 23f42c4:	e7f5      	b.n	23f42b2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

023f42c6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f42c6:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f42c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f42ca:	b90b      	cbnz	r3, 23f42d0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f42cc:	f003 f9a6 	bl	23f761c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f42d0:	2124      	movs	r1, #36	; 0x24
}
 23f42d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f42d6:	4718      	bx	r3

023f42d8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f42d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f42dc:	b0b7      	sub	sp, #220	; 0xdc
 23f42de:	e9dd a640 	ldrd	sl, r6, [sp, #256]	; 0x100
 23f42e2:	4607      	mov	r7, r0
 23f42e4:	460c      	mov	r4, r1
  TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                  TfLiteTypeGetName(output->type), output->type);
  return kTfLiteError;
  #endif

  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f42e6:	a824      	add	r0, sp, #144	; 0x90
 23f42e8:	4631      	mov	r1, r6
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f42ea:	4698      	mov	r8, r3
 23f42ec:	4691      	mov	r9, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f42ee:	f001 faf3 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 23f42f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f42f4:	2b02      	cmp	r3, #2
 23f42f6:	d001      	beq.n	23f42fc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24>
 23f42f8:	f003 f990 	bl	23f761c <abort>
  const int batches = output_shape.Dims(0);
 23f42fc:	2100      	movs	r1, #0
 23f42fe:	a824      	add	r0, sp, #144	; 0x90
 23f4300:	f7ff ff3d 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
 23f4304:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
 23f4306:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
 23f4308:	a824      	add	r0, sp, #144	; 0x90
 23f430a:	f7ff ff38 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f430e:	4641      	mov	r1, r8
  const int output_depth = output_shape.Dims(1);
 23f4310:	4683      	mov	fp, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4312:	a82a      	add	r0, sp, #168	; 0xa8
 23f4314:	f001 fae0 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f4318:	992a      	ldr	r1, [sp, #168]	; 0xa8
 23f431a:	a82a      	add	r0, sp, #168	; 0xa8
 23f431c:	3901      	subs	r1, #1
 23f431e:	f7ff ff2e 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f4322:	4649      	mov	r1, r9
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f4324:	9008      	str	r0, [sp, #32]
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f4326:	a830      	add	r0, sp, #192	; 0xc0
 23f4328:	f001 fad6 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
  quant_params.shift = data.reference_op_data.output_shift;

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 23f432c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
 23f432e:	2501      	movs	r5, #1
  bias_dims.h = 1;
  bias_dims.w = 1;
  bias_dims.c = output_depth;

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 23f4330:	e9cd b31a 	strd	fp, r3, [sp, #104]	; 0x68
  input_dims.n = batches;
 23f4334:	930f      	str	r3, [sp, #60]	; 0x3c
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 23f4336:	2300      	movs	r3, #0
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f4338:	6961      	ldr	r1, [r4, #20]
  input_dims.c = accum_depth;
 23f433a:	9a08      	ldr	r2, [sp, #32]
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f433c:	4249      	negs	r1, r1
 23f433e:	911f      	str	r1, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f4340:	69e1      	ldr	r1, [r4, #28]
  input_dims.w = 1;
 23f4342:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f4346:	9121      	str	r1, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 23f4348:	69a1      	ldr	r1, [r4, #24]
  filter_dims.n = accum_depth;
 23f434a:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 23f434e:	4249      	negs	r1, r1
 23f4350:	9120      	str	r1, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f4352:	68a1      	ldr	r1, [r4, #8]
  filter_dims.w = 1;
 23f4354:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f4358:	9122      	str	r1, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f435a:	68e1      	ldr	r1, [r4, #12]
  bias_dims.n = 1;
 23f435c:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f4360:	9123      	str	r1, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 23f4362:	6821      	ldr	r1, [r4, #0]
  bias_dims.w = 1;
 23f4364:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 23f4368:	910b      	str	r1, [sp, #44]	; 0x2c
  quant_params.shift = data.reference_op_data.output_shift;
 23f436a:	6861      	ldr	r1, [r4, #4]
  output_dims.w = 1;
 23f436c:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  quant_params.shift = data.reference_op_data.output_shift;
 23f4370:	910c      	str	r1, [sp, #48]	; 0x30
  output_dims.c = output_depth;
 23f4372:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  ctx.size = 0;
 23f4376:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
 23f437a:	6a21      	ldr	r1, [r4, #32]
 23f437c:	4299      	cmp	r1, r3
 23f437e:	db03      	blt.n	23f4388 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f4380:	4638      	mov	r0, r7
 23f4382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 23f4384:	4798      	blx	r3
 23f4386:	900d      	str	r0, [sp, #52]	; 0x34
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
 23f4388:	f1b9 0f00 	cmp.w	r9, #0
 23f438c:	d0b4      	beq.n	23f42f8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f438e:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
 23f4392:	f1b8 0f00 	cmp.w	r8, #0
 23f4396:	d0af      	beq.n	23f42f8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4398:	f8d8 1000 	ldr.w	r1, [r8]
  TFLITE_DCHECK(tensor != nullptr);
 23f439c:	f1ba 0f00 	cmp.w	sl, #0
 23f43a0:	d0aa      	beq.n	23f42f8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f43a2:	f8da 0000 	ldr.w	r0, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f43a6:	2e00      	cmp	r6, #0
 23f43a8:	d045      	beq.n	23f4436 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15e>
 23f43aa:	6833      	ldr	r3, [r6, #0]
  }

  TF_LITE_ENSURE_EQ(
 23f43ac:	9306      	str	r3, [sp, #24]
 23f43ae:	ab1b      	add	r3, sp, #108	; 0x6c
 23f43b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
 23f43b4:	ab17      	add	r3, sp, #92	; 0x5c
 23f43b6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 23f43ba:	ab13      	add	r3, sp, #76	; 0x4c
 23f43bc:	e9cd 2300 	strd	r2, r3, [sp]
 23f43c0:	a91f      	add	r1, sp, #124	; 0x7c
 23f43c2:	ab0f      	add	r3, sp, #60	; 0x3c
 23f43c4:	aa0b      	add	r2, sp, #44	; 0x2c
 23f43c6:	a80d      	add	r0, sp, #52	; 0x34
 23f43c8:	f7fa fc34 	bl	23eec34 <arm_fully_connected_s8>
 23f43cc:	4604      	mov	r4, r0
 23f43ce:	b328      	cbz	r0, 23f441c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
 23f43d0:	693c      	ldr	r4, [r7, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f43d2:	f8d9 3000 	ldr.w	r3, [r9]
 23f43d6:	f8d8 2000 	ldr.w	r2, [r8]
 23f43da:	f8da 1000 	ldr.w	r1, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f43de:	b106      	cbz	r6, 23f43e2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
 23f43e0:	6836      	ldr	r6, [r6, #0]
 23f43e2:	a81b      	add	r0, sp, #108	; 0x6c
 23f43e4:	e9cd 1004 	strd	r1, r0, [sp, #16]
 23f43e8:	a917      	add	r1, sp, #92	; 0x5c
 23f43ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
 23f43ee:	aa13      	add	r2, sp, #76	; 0x4c
 23f43f0:	e9cd 3200 	strd	r3, r2, [sp]
 23f43f4:	a91f      	add	r1, sp, #124	; 0x7c
 23f43f6:	ab0f      	add	r3, sp, #60	; 0x3c
 23f43f8:	aa0b      	add	r2, sp, #44	; 0x2c
 23f43fa:	9606      	str	r6, [sp, #24]
 23f43fc:	a80d      	add	r0, sp, #52	; 0x34
 23f43fe:	f7fa fc19 	bl	23eec34 <arm_fully_connected_s8>
 23f4402:	2300      	movs	r3, #0
 23f4404:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f4408:	4b0c      	ldr	r3, [pc, #48]	; (23f443c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x164>)
 23f440a:	4638      	mov	r0, r7
 23f440c:	9301      	str	r3, [sp, #4]
 23f440e:	4b0c      	ldr	r3, [pc, #48]	; (23f4440 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x168>)
 23f4410:	4a0c      	ldr	r2, [pc, #48]	; (23f4444 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x16c>)
 23f4412:	9300      	str	r3, [sp, #0]
 23f4414:	490c      	ldr	r1, [pc, #48]	; (23f4448 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x170>)
 23f4416:	23b2      	movs	r3, #178	; 0xb2
 23f4418:	47a0      	blx	r4
 23f441a:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f441c:	a830      	add	r0, sp, #192	; 0xc0
 23f441e:	f7ff fea3 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4422:	a82a      	add	r0, sp, #168	; 0xa8
 23f4424:	f7ff fea0 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f4428:	a824      	add	r0, sp, #144	; 0x90
 23f442a:	f7ff fe9d 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
 23f442e:	4620      	mov	r0, r4
 23f4430:	b037      	add	sp, #220	; 0xdc
 23f4432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f4436:	4633      	mov	r3, r6
 23f4438:	e7b8      	b.n	23f43ac <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xd4>
 23f443a:	bf00      	nop
 23f443c:	023feed1 	.word	0x023feed1
 23f4440:	023feee2 	.word	0x023feee2
 23f4444:	023fee34 	.word	0x023fee34
 23f4448:	023feeb7 	.word	0x023feeb7

023f444c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f444c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f4450:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4454:	4604      	mov	r4, r0
 23f4456:	460d      	mov	r5, r1
 23f4458:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK(node->user_data != nullptr);
 23f445a:	f1b9 0f00 	cmp.w	r9, #0
 23f445e:	d101      	bne.n	23f4464 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 23f4460:	f003 f8dc 	bl	23f761c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f4464:	f8d1 b014 	ldr.w	fp, [r1, #20]
 23f4468:	f1bb 0f00 	cmp.w	fp, #0
 23f446c:	d0f8      	beq.n	23f4460 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
 23f446e:	4b50      	ldr	r3, [pc, #320]	; (23f45b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 23f4470:	681a      	ldr	r2, [r3, #0]
 23f4472:	f001 fbe1 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f4476:	4607      	mov	r7, r0
 23f4478:	b960      	cbnz	r0, 23f4494 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 23f447a:	4b4e      	ldr	r3, [pc, #312]	; (23f45b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 23f447c:	9300      	str	r3, [sp, #0]
 23f447e:	2340      	movs	r3, #64	; 0x40
 23f4480:	6925      	ldr	r5, [r4, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4482:	4620      	mov	r0, r4
 23f4484:	4a4c      	ldr	r2, [pc, #304]	; (23f45b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 23f4486:	494d      	ldr	r1, [pc, #308]	; (23f45bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 23f4488:	47a8      	blx	r5
 23f448a:	2501      	movs	r5, #1
}
 23f448c:	4628      	mov	r0, r5
 23f448e:	b015      	add	sp, #84	; 0x54
 23f4490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
 23f4494:	4b4a      	ldr	r3, [pc, #296]	; (23f45c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 23f4496:	4629      	mov	r1, r5
 23f4498:	4620      	mov	r0, r4
 23f449a:	681a      	ldr	r2, [r3, #0]
 23f449c:	f001 fbcc 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f44a0:	4680      	mov	r8, r0
 23f44a2:	b920      	cbnz	r0, 23f44ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
 23f44a4:	4b47      	ldr	r3, [pc, #284]	; (23f45c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 23f44a6:	9300      	str	r3, [sp, #0]
 23f44a8:	6925      	ldr	r5, [r4, #16]
 23f44aa:	2343      	movs	r3, #67	; 0x43
 23f44ac:	e7e9      	b.n	23f4482 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 23f44ae:	4b46      	ldr	r3, [pc, #280]	; (23f45c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 23f44b0:	4629      	mov	r1, r5
 23f44b2:	681a      	ldr	r2, [r3, #0]
 23f44b4:	4620      	mov	r0, r4
 23f44b6:	f001 fbd1 	bl	23f5c5c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 23f44ba:	4b44      	ldr	r3, [pc, #272]	; (23f45cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 23f44bc:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 23f44be:	4629      	mov	r1, r5
 23f44c0:	4620      	mov	r0, r4
 23f44c2:	681a      	ldr	r2, [r3, #0]
 23f44c4:	f001 fbbb 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f44c8:	4606      	mov	r6, r0
 23f44ca:	b920      	cbnz	r0, 23f44d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 23f44cc:	4b40      	ldr	r3, [pc, #256]	; (23f45d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
 23f44ce:	9300      	str	r3, [sp, #0]
 23f44d0:	6925      	ldr	r5, [r4, #16]
 23f44d2:	2347      	movs	r3, #71	; 0x47
 23f44d4:	e7d5      	b.n	23f4482 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f44d6:	7838      	ldrb	r0, [r7, #0]
 23f44d8:	7833      	ldrb	r3, [r6, #0]
 23f44da:	4283      	cmp	r3, r0
 23f44dc:	d012      	beq.n	23f4504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
 23f44de:	6927      	ldr	r7, [r4, #16]
 23f44e0:	f7f9 f974 	bl	23ed7cc <TfLiteTypeGetName>
 23f44e4:	4605      	mov	r5, r0
 23f44e6:	7830      	ldrb	r0, [r6, #0]
 23f44e8:	f7f9 f970 	bl	23ed7cc <TfLiteTypeGetName>
 23f44ec:	4b39      	ldr	r3, [pc, #228]	; (23f45d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 23f44ee:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f44f2:	9301      	str	r3, [sp, #4]
 23f44f4:	4b38      	ldr	r3, [pc, #224]	; (23f45d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 23f44f6:	4620      	mov	r0, r4
 23f44f8:	9300      	str	r3, [sp, #0]
 23f44fa:	4a2f      	ldr	r2, [pc, #188]	; (23f45b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 23f44fc:	2349      	movs	r3, #73	; 0x49
 23f44fe:	4937      	ldr	r1, [pc, #220]	; (23f45dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
 23f4500:	47b8      	blx	r7
 23f4502:	e7c2      	b.n	23f448a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 23f4504:	f898 2000 	ldrb.w	r2, [r8]
 23f4508:	429a      	cmp	r2, r3
 23f450a:	d004      	beq.n	23f4516 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
 23f450c:	4620      	mov	r0, r4
 23f450e:	6923      	ldr	r3, [r4, #16]
 23f4510:	4933      	ldr	r1, [pc, #204]	; (23f45e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
 23f4512:	4798      	blx	r3
 23f4514:	e7b9      	b.n	23f448a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
 23f4516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f451a:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f451e:	783a      	ldrb	r2, [r7, #0]
 23f4520:	f89b 1000 	ldrb.w	r1, [fp]
 23f4524:	463b      	mov	r3, r7
 23f4526:	4620      	mov	r0, r4
 23f4528:	e9cd 6902 	strd	r6, r9, [sp, #8]
 23f452c:	e9cd 8a00 	strd	r8, sl, [sp]
 23f4530:	f000 f8ce 	bl	23f46d0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 23f4534:	4605      	mov	r5, r0
 23f4536:	2800      	cmp	r0, #0
 23f4538:	d1a8      	bne.n	23f448c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
 23f453a:	783b      	ldrb	r3, [r7, #0]
 23f453c:	2b09      	cmp	r3, #9
 23f453e:	d1a5      	bne.n	23f448c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
 23f4540:	4641      	mov	r1, r8
 23f4542:	a808      	add	r0, sp, #32
 23f4544:	f7ff fe7b 	bl	23f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 23f4548:	4631      	mov	r1, r6
 23f454a:	a80e      	add	r0, sp, #56	; 0x38
 23f454c:	f7ff fe77 	bl	23f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 23f4550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f4552:	2b02      	cmp	r3, #2
 23f4554:	d184      	bne.n	23f4460 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f4556:	9908      	ldr	r1, [sp, #32]
 23f4558:	a808      	add	r0, sp, #32
 23f455a:	3901      	subs	r1, #1
 23f455c:	f7ff fe0f 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
 23f4560:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f4562:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
 23f4564:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
 23f4566:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
 23f456a:	f7ff fe08 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f456e:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 23f4570:	a804      	add	r0, sp, #16
 23f4572:	f7fa fb90 	bl	23eec96 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
 23f4576:	1e01      	subs	r1, r0, #0
 23f4578:	dd0e      	ble.n	23f4598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f457a:	4620      	mov	r0, r4
 23f457c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f457e:	f109 0220 	add.w	r2, r9, #32
 23f4582:	4798      	blx	r3
 23f4584:	4604      	mov	r4, r0
 23f4586:	b158      	cbz	r0, 23f45a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
 23f4588:	a80e      	add	r0, sp, #56	; 0x38
 23f458a:	f7ff fded 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f458e:	a808      	add	r0, sp, #32
 23f4590:	f7ff fdea 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f4594:	4625      	mov	r5, r4
 23f4596:	e779      	b.n	23f448c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
 23f4598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f459c:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
 23f45a0:	a80e      	add	r0, sp, #56	; 0x38
 23f45a2:	f7ff fde1 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
 23f45a6:	a808      	add	r0, sp, #32
 23f45a8:	f7ff fdde 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f45ac:	e76e      	b.n	23f448c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f45ae:	bf00      	nop
 23f45b0:	023ff0d8 	.word	0x023ff0d8
 23f45b4:	023ff01d 	.word	0x023ff01d
 23f45b8:	023fee34 	.word	0x023fee34
 23f45bc:	023ff006 	.word	0x023ff006
 23f45c0:	023ff0e0 	.word	0x023ff0e0
 23f45c4:	023ff02e 	.word	0x023ff02e
 23f45c8:	023ff0d4 	.word	0x023ff0d4
 23f45cc:	023ff0dc 	.word	0x023ff0dc
 23f45d0:	023ff040 	.word	0x023ff040
 23f45d4:	023ff06c 	.word	0x023ff06c
 23f45d8:	023ff079 	.word	0x023ff079
 23f45dc:	023ff052 	.word	0x023ff052
 23f45e0:	023ff085 	.word	0x023ff085

023f45e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f45e6:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f45e8:	4605      	mov	r5, r0
 23f45ea:	460c      	mov	r4, r1
 23f45ec:	b085      	sub	sp, #20
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f45ee:	b90b      	cbnz	r3, 23f45f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10>
 23f45f0:	f003 f814 	bl	23f761c <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f45f4:	4b21      	ldr	r3, [pc, #132]	; (23f467c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>)
  return GetMutableEvalInput(context, node, index);
 23f45f6:	681a      	ldr	r2, [r3, #0]
 23f45f8:	f7ff fe04 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f45fc:	4b20      	ldr	r3, [pc, #128]	; (23f4680 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>)
 23f45fe:	4621      	mov	r1, r4
 23f4600:	681a      	ldr	r2, [r3, #0]
 23f4602:	4606      	mov	r6, r0
 23f4604:	4628      	mov	r0, r5
 23f4606:	f7ff fdfd 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f460a:	4a1e      	ldr	r2, [pc, #120]	; (23f4684 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
 23f460c:	4621      	mov	r1, r4
 23f460e:	6812      	ldr	r2, [r2, #0]
 23f4610:	9003      	str	r0, [sp, #12]
 23f4612:	4628      	mov	r0, r5
 23f4614:	f7ff fdf6 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f4618:	4a1b      	ldr	r2, [pc, #108]	; (23f4688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>)
 23f461a:	4621      	mov	r1, r4
 23f461c:	4607      	mov	r7, r0
 23f461e:	6812      	ldr	r2, [r2, #0]
 23f4620:	4628      	mov	r0, r5
 23f4622:	f7ff fe2e 	bl	23f4282 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
 23f4626:	6921      	ldr	r1, [r4, #16]
 23f4628:	2900      	cmp	r1, #0
 23f462a:	d0e1      	beq.n	23f45f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 23f462c:	7a34      	ldrb	r4, [r6, #8]
 23f462e:	2c03      	cmp	r4, #3
 23f4630:	d018      	beq.n	23f4664 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>
 23f4632:	2c09      	cmp	r4, #9
 23f4634:	9b03      	ldr	r3, [sp, #12]
 23f4636:	d00d      	beq.n	23f4654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 23f4638:	2c01      	cmp	r4, #1
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f463a:	4620      	mov	r0, r4
 23f463c:	692f      	ldr	r7, [r5, #16]
  switch (input->type) {
 23f463e:	d113      	bne.n	23f4668 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4640:	f7f9 f8c4 	bl	23ed7cc <TfLiteTypeGetName>
 23f4644:	7a33      	ldrb	r3, [r6, #8]
 23f4646:	4602      	mov	r2, r0
 23f4648:	4910      	ldr	r1, [pc, #64]	; (23f468c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 23f464a:	4628      	mov	r0, r5
 23f464c:	47b8      	blx	r7
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
}
 23f464e:	4620      	mov	r0, r4
 23f4650:	b005      	add	sp, #20
 23f4652:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 23f4654:	e9cd 7000 	strd	r7, r0, [sp]
 23f4658:	4632      	mov	r2, r6
 23f465a:	4628      	mov	r0, r5
 23f465c:	f7ff fe3c 	bl	23f42d8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
 23f4660:	4604      	mov	r4, r0
                               output);
 23f4662:	e7f4      	b.n	23f464e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4664:	4620      	mov	r0, r4
 23f4666:	692f      	ldr	r7, [r5, #16]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f4668:	f7f9 f8b0 	bl	23ed7cc <TfLiteTypeGetName>
 23f466c:	7a33      	ldrb	r3, [r6, #8]
 23f466e:	4602      	mov	r2, r0
 23f4670:	4906      	ldr	r1, [pc, #24]	; (23f468c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 23f4672:	4628      	mov	r0, r5
 23f4674:	47b8      	blx	r7
      return kTfLiteError;
 23f4676:	2401      	movs	r4, #1
 23f4678:	e7e9      	b.n	23f464e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
 23f467a:	bf00      	nop
 23f467c:	023ff0d8 	.word	0x023ff0d8
 23f4680:	023ff0e0 	.word	0x023ff0e0
 23f4684:	023ff0d4 	.word	0x023ff0d4
 23f4688:	023ff0dc 	.word	0x023ff0dc
 23f468c:	023ff0b6 	.word	0x023ff0b6

023f4690 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 23f4690:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
 23f4692:	4b0b      	ldr	r3, [pc, #44]	; (23f46c0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
 23f4694:	4c0b      	ldr	r4, [pc, #44]	; (23f46c4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
  fully_connected_registration.invoke = Eval;
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
 23f4696:	4605      	mov	r5, r0
  fully_connected_registration.init = Init;
 23f4698:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
 23f469a:	2300      	movs	r3, #0
TfLiteRegistration Register_FULLY_CONNECTED() {
 23f469c:	4606      	mov	r6, r0
  fully_connected_registration.prepare = Prepare;
 23f469e:	4a0a      	ldr	r2, [pc, #40]	; (23f46c8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.free = nullptr;
 23f46a0:	6063      	str	r3, [r4, #4]
  fully_connected_registration.prepare = Prepare;
 23f46a2:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.invoke = Eval;
 23f46a4:	4a09      	ldr	r2, [pc, #36]	; (23f46cc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.custom_name = nullptr;
 23f46a6:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.profiling_string = nullptr;
 23f46aa:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.version = 0;
 23f46ae:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
 23f46b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f46b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f46b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f46b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 23f46bc:	4630      	mov	r0, r6
 23f46be:	bd70      	pop	{r4, r5, r6, pc}
 23f46c0:	023f42c7 	.word	0x023f42c7
 23f46c4:	1007ae50 	.word	0x1007ae50
 23f46c8:	023f444d 	.word	0x023f444d
 23f46cc:	023f45e5 	.word	0x023f45e5

023f46d0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 23f46d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (data_type != kTfLiteFloat32) {
 23f46d4:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 23f46d6:	b085      	sub	sp, #20
 23f46d8:	4606      	mov	r6, r0
 23f46da:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
 23f46de:	460f      	mov	r7, r1
 23f46e0:	461d      	mov	r5, r3
 23f46e2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
 23f46e6:	d027      	beq.n	23f4738 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
 23f46e8:	2200      	movs	r2, #0
 23f46ea:	2300      	movs	r3, #0
 23f46ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f46f0:	ab02      	add	r3, sp, #8
 23f46f2:	e9cd 8300 	strd	r8, r3, [sp]
 23f46f6:	464a      	mov	r2, r9
 23f46f8:	4629      	mov	r1, r5
 23f46fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f46fc:	f001 fae4 	bl	23f5cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f4700:	b9b8      	cbnz	r0, 23f4732 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 23f4702:	4620      	mov	r0, r4
 23f4704:	1d21      	adds	r1, r4, #4
 23f4706:	ed9d 0b02 	vldr	d0, [sp, #8]
 23f470a:	f001 fcc3 	bl	23f6094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 23f470e:	692b      	ldr	r3, [r5, #16]
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;

    return CalculateActivationRangeQuantized(context, activation, output,
 23f4710:	4642      	mov	r2, r8
    data->input_zero_point = input->params.zero_point;
 23f4712:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
 23f4714:	f8d9 3010 	ldr.w	r3, [r9, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f4718:	4639      	mov	r1, r7
    data->filter_zero_point = filter->params.zero_point;
 23f471a:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
 23f471c:	f8d8 3010 	ldr.w	r3, [r8, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f4720:	4630      	mov	r0, r6
    data->output_zero_point = output->params.zero_point;
 23f4722:	61e3      	str	r3, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f4724:	f104 030c 	add.w	r3, r4, #12
 23f4728:	9300      	str	r3, [sp, #0]
 23f472a:	f104 0308 	add.w	r3, r4, #8
 23f472e:	f001 fb21 	bl	23f5d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
 23f4732:	b005      	add	sp, #20
 23f4734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
 23f4738:	2000      	movs	r0, #0
 23f473a:	e7fa      	b.n	23f4732 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

023f473c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f473c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f473e:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
 23f4740:	4605      	mov	r5, r0
 23f4742:	b908      	cbnz	r0, 23f4748 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
 23f4744:	f002 ff6a 	bl	23f761c <abort>
  TFLITE_DCHECK(node != nullptr);
 23f4748:	2900      	cmp	r1, #0
 23f474a:	d0fb      	beq.n	23f4744 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f474c:	680a      	ldr	r2, [r1, #0]
 23f474e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f4750:	6851      	ldr	r1, [r2, #4]
 23f4752:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f4754:	6872      	ldr	r2, [r6, #4]
 23f4756:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f4758:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f475a:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f475c:	4628      	mov	r0, r5
 23f475e:	4798      	blx	r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 23f4760:	a901      	add	r1, sp, #4
 23f4762:	4606      	mov	r6, r0
 23f4764:	7a20      	ldrb	r0, [r4, #8]
 23f4766:	f7ff fcd6 	bl	23f4116 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 23f476a:	4605      	mov	r5, r0
 23f476c:	b998      	cbnz	r0, 23f4796 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
 23f476e:	6860      	ldr	r0, [r4, #4]
 23f4770:	f7ff fcec 	bl	23f414c <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 23f4774:	9b01      	ldr	r3, [sp, #4]
 23f4776:	4358      	muls	r0, r3
 23f4778:	9001      	str	r0, [sp, #4]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 23f477a:	6822      	ldr	r2, [r4, #0]
 23f477c:	6833      	ldr	r3, [r6, #0]
 23f477e:	429a      	cmp	r2, r3
 23f4780:	d009      	beq.n	23f4796 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 23f4782:	462b      	mov	r3, r5
 23f4784:	9a01      	ldr	r2, [sp, #4]
 23f4786:	429a      	cmp	r2, r3
 23f4788:	d905      	bls.n	23f4796 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
 23f478a:	6822      	ldr	r2, [r4, #0]
 23f478c:	5cd1      	ldrb	r1, [r2, r3]
 23f478e:	6832      	ldr	r2, [r6, #0]
 23f4790:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
 23f4792:	3301      	adds	r3, #1
 23f4794:	e7f6      	b.n	23f4784 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
    }
  }
  return kTfLiteOk;
}
 23f4796:	4628      	mov	r0, r5
 23f4798:	b002      	add	sp, #8
 23f479a:	bd70      	pop	{r4, r5, r6, pc}

023f479c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 23f479c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f47a0:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 23f47a2:	4604      	mov	r4, r0
 23f47a4:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f47a6:	f001 fa47 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f47aa:	4607      	mov	r7, r0
 23f47ac:	b958      	cbnz	r0, 23f47c6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
 23f47ae:	4b40      	ldr	r3, [pc, #256]	; (23f48b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>)
 23f47b0:	6925      	ldr	r5, [r4, #16]
 23f47b2:	9300      	str	r3, [sp, #0]
 23f47b4:	2323      	movs	r3, #35	; 0x23
  TF_LITE_ENSURE(context, output != nullptr);
 23f47b6:	4620      	mov	r0, r4
 23f47b8:	4a3e      	ldr	r2, [pc, #248]	; (23f48b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f47ba:	493f      	ldr	r1, [pc, #252]	; (23f48b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
 23f47bc:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f47be:	2001      	movs	r0, #1
}
 23f47c0:	b004      	add	sp, #16
 23f47c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f47c6:	2200      	movs	r2, #0
 23f47c8:	4641      	mov	r1, r8
 23f47ca:	4620      	mov	r0, r4
 23f47cc:	f001 fa37 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f47d0:	4606      	mov	r6, r0
 23f47d2:	b920      	cbnz	r0, 23f47de <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x42>
 23f47d4:	4b39      	ldr	r3, [pc, #228]	; (23f48bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
 23f47d6:	6925      	ldr	r5, [r4, #16]
 23f47d8:	9300      	str	r3, [sp, #0]
 23f47da:	2325      	movs	r3, #37	; 0x25
 23f47dc:	e7eb      	b.n	23f47b6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a>
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
  int64_t count = 1;
  for (int i = 0; i < dims->size; ++i) {
 23f47de:	2200      	movs	r2, #0
  int64_t count = 1;
 23f47e0:	2501      	movs	r5, #1
  for (int i = 0; i < dims->size; ++i) {
 23f47e2:	68bb      	ldr	r3, [r7, #8]
 23f47e4:	f853 0b04 	ldr.w	r0, [r3], #4
 23f47e8:	4290      	cmp	r0, r2
 23f47ea:	dd05      	ble.n	23f47f8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5c>
    count *= dims->data[i];
 23f47ec:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
 23f47f0:	3201      	adds	r2, #1
    count *= dims->data[i];
 23f47f2:	fba5 5101 	umull	r5, r1, r5, r1
  for (int i = 0; i < dims->size; ++i) {
 23f47f6:	e7f7      	b.n	23f47e8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4c>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f47f8:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
 23f47fc:	68b2      	ldr	r2, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
 23f47fe:	681b      	ldr	r3, [r3, #0]
 23f4800:	2b01      	cmp	r3, #1
 23f4802:	d105      	bne.n	23f4810 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 23f4804:	6813      	ldr	r3, [r2, #0]
 23f4806:	2b01      	cmp	r3, #1
 23f4808:	d102      	bne.n	23f4810 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 23f480a:	6853      	ldr	r3, [r2, #4]
 23f480c:	b903      	cbnz	r3, 23f4810 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
    output_shape->size = 0;
 23f480e:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
 23f4810:	4694      	mov	ip, r2
 23f4812:	2000      	movs	r0, #0
  int stretch_dim = -1;
 23f4814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  int num_output_elements = 1;
 23f4818:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
 23f481a:	f85c 8b04 	ldr.w	r8, [ip], #4
 23f481e:	4580      	cmp	r8, r0
 23f4820:	dd1a      	ble.n	23f4858 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbc>
    int value = output_shape->data[i];
 23f4822:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
 23f4826:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 23f482a:	d10f      	bne.n	23f484c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 23f482c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 23f4830:	d010      	beq.n	23f4854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb8>
 23f4832:	4b23      	ldr	r3, [pc, #140]	; (23f48c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
 23f4834:	e9cd 1e02 	strd	r1, lr, [sp, #8]
 23f4838:	9301      	str	r3, [sp, #4]
 23f483a:	4b22      	ldr	r3, [pc, #136]	; (23f48c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
 23f483c:	6925      	ldr	r5, [r4, #16]
 23f483e:	9300      	str	r3, [sp, #0]
 23f4840:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f4842:	4620      	mov	r0, r4
 23f4844:	4a1b      	ldr	r2, [pc, #108]	; (23f48b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f4846:	4920      	ldr	r1, [pc, #128]	; (23f48c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
 23f4848:	47a8      	blx	r5
 23f484a:	e7b8      	b.n	23f47be <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
      num_output_elements *= value;
 23f484c:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
 23f4850:	3001      	adds	r0, #1
 23f4852:	e7e4      	b.n	23f481e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
 23f4854:	4601      	mov	r1, r0
 23f4856:	e7fb      	b.n	23f4850 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
  if (stretch_dim != -1) {
 23f4858:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 23f485a:	bf1f      	itttt	ne
 23f485c:	fb95 f0f3 	sdivne	r0, r5, r3
 23f4860:	eb02 0281 	addne.w	r2, r2, r1, lsl #2
 23f4864:	6050      	strne	r0, [r2, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 23f4866:	4343      	mulne	r3, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f4868:	7832      	ldrb	r2, [r6, #0]
 23f486a:	7838      	ldrb	r0, [r7, #0]
 23f486c:	4282      	cmp	r2, r0
 23f486e:	d012      	beq.n	23f4896 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
 23f4870:	6927      	ldr	r7, [r4, #16]
 23f4872:	f7f8 ffab 	bl	23ed7cc <TfLiteTypeGetName>
 23f4876:	4605      	mov	r5, r0
 23f4878:	7830      	ldrb	r0, [r6, #0]
 23f487a:	f7f8 ffa7 	bl	23ed7cc <TfLiteTypeGetName>
 23f487e:	4b13      	ldr	r3, [pc, #76]	; (23f48cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
 23f4880:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f4884:	9301      	str	r3, [sp, #4]
 23f4886:	4b12      	ldr	r3, [pc, #72]	; (23f48d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
 23f4888:	4620      	mov	r0, r4
 23f488a:	9300      	str	r3, [sp, #0]
 23f488c:	4a09      	ldr	r2, [pc, #36]	; (23f48b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f488e:	2345      	movs	r3, #69	; 0x45
 23f4890:	4910      	ldr	r1, [pc, #64]	; (23f48d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
 23f4892:	47b8      	blx	r7
 23f4894:	e793      	b.n	23f47be <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f4896:	42ab      	cmp	r3, r5
 23f4898:	d008      	beq.n	23f48ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x110>
 23f489a:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f489e:	4b0e      	ldr	r3, [pc, #56]	; (23f48d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
 23f48a0:	6925      	ldr	r5, [r4, #16]
 23f48a2:	9301      	str	r3, [sp, #4]
 23f48a4:	4b0d      	ldr	r3, [pc, #52]	; (23f48dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
 23f48a6:	9300      	str	r3, [sp, #0]
 23f48a8:	2346      	movs	r3, #70	; 0x46
 23f48aa:	e7ca      	b.n	23f4842 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
  return kTfLiteOk;
 23f48ac:	2000      	movs	r0, #0
 23f48ae:	e787      	b.n	23f47c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
 23f48b0:	023ff01d 	.word	0x023ff01d
 23f48b4:	023ff0e4 	.word	0x023ff0e4
 23f48b8:	023ff006 	.word	0x023ff006
 23f48bc:	023ff040 	.word	0x023ff040
 23f48c0:	023ff15f 	.word	0x023ff15f
 23f48c4:	023ff162 	.word	0x023ff162
 23f48c8:	023feeb7 	.word	0x023feeb7
 23f48cc:	023ff06c 	.word	0x023ff06c
 23f48d0:	023ff079 	.word	0x023ff079
 23f48d4:	023ff052 	.word	0x023ff052
 23f48d8:	023ff16e 	.word	0x023ff16e
 23f48dc:	023ff182 	.word	0x023ff182

023f48e0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f48e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f48e2:	680b      	ldr	r3, [r1, #0]
 23f48e4:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f48e6:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f48e8:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f48ea:	3b01      	subs	r3, #1
 23f48ec:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f48ee:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f48f0:	d909      	bls.n	23f4906 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 23f48f2:	4b19      	ldr	r3, [pc, #100]	; (23f4958 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 23f48f4:	4a19      	ldr	r2, [pc, #100]	; (23f495c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f48f6:	9300      	str	r3, [sp, #0]
 23f48f8:	6904      	ldr	r4, [r0, #16]
 23f48fa:	234b      	movs	r3, #75	; 0x4b
 23f48fc:	4918      	ldr	r1, [pc, #96]	; (23f4960 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 23f48fe:	47a0      	blx	r4
 23f4900:	2001      	movs	r0, #1
}
 23f4902:	b005      	add	sp, #20
 23f4904:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 23f4906:	684b      	ldr	r3, [r1, #4]
 23f4908:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f490a:	2e01      	cmp	r6, #1
 23f490c:	d00c      	beq.n	23f4928 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 23f490e:	2401      	movs	r4, #1
 23f4910:	4b14      	ldr	r3, [pc, #80]	; (23f4964 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
 23f4912:	e9cd 6402 	strd	r6, r4, [sp, #8]
 23f4916:	9301      	str	r3, [sp, #4]
 23f4918:	4b13      	ldr	r3, [pc, #76]	; (23f4968 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
 23f491a:	4a10      	ldr	r2, [pc, #64]	; (23f495c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f491c:	9300      	str	r3, [sp, #0]
 23f491e:	6905      	ldr	r5, [r0, #16]
 23f4920:	234c      	movs	r3, #76	; 0x4c
 23f4922:	4912      	ldr	r1, [pc, #72]	; (23f496c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f4924:	47a8      	blx	r5
 23f4926:	e7eb      	b.n	23f4900 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 23f4928:	f7ff ff38 	bl	23f479c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 23f492c:	2800      	cmp	r0, #0
 23f492e:	d0e8      	beq.n	23f4902 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 23f4930:	4621      	mov	r1, r4
 23f4932:	4628      	mov	r0, r5
 23f4934:	692f      	ldr	r7, [r5, #16]
 23f4936:	f7ff ff31 	bl	23f479c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 23f493a:	2300      	movs	r3, #0
 23f493c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f4940:	4b0b      	ldr	r3, [pc, #44]	; (23f4970 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
 23f4942:	4628      	mov	r0, r5
 23f4944:	9301      	str	r3, [sp, #4]
 23f4946:	4b0b      	ldr	r3, [pc, #44]	; (23f4974 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
 23f4948:	4a04      	ldr	r2, [pc, #16]	; (23f495c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f494a:	9300      	str	r3, [sp, #0]
 23f494c:	4907      	ldr	r1, [pc, #28]	; (23f496c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f494e:	234d      	movs	r3, #77	; 0x4d
 23f4950:	47b8      	blx	r7
 23f4952:	4630      	mov	r0, r6
 23f4954:	e7d5      	b.n	23f4902 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 23f4956:	bf00      	nop
 23f4958:	023ff195 	.word	0x023ff195
 23f495c:	023ff0e4 	.word	0x023ff0e4
 23f4960:	023ff006 	.word	0x023ff006
 23f4964:	023ff593 	.word	0x023ff593
 23f4968:	023ff1c2 	.word	0x023ff1c2
 23f496c:	023feeb7 	.word	0x023feeb7
 23f4970:	023ff1d3 	.word	0x023ff1d3
 23f4974:	023ff1dd 	.word	0x023ff1dd

023f4978 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 23f4978:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f497a:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
 23f497c:	4606      	mov	r6, r0
          /*version=*/0};
 23f497e:	4d04      	ldr	r5, [pc, #16]	; (23f4990 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
 23f4980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f4982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4984:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f4988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f498c:	4630      	mov	r0, r6
 23f498e:	bd70      	pop	{r4, r5, r6, pc}
 23f4990:	023fb948 	.word	0x023fb948

023f4994 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f4994:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f4996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f4998:	b90b      	cbnz	r3, 23f499e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f499a:	f002 fe3f 	bl	23f761c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f499e:	2138      	movs	r1, #56	; 0x38
}
 23f49a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f49a4:	4718      	bx	r3
	...

023f49a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 23f49a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f49ac:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 23f49ae:	6943      	ldr	r3, [r0, #20]
    int8_t* output_data) {
 23f49b0:	b0a1      	sub	sp, #132	; 0x84
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 23f49b2:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
 23f49b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8_t* output_data) {
 23f49b8:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_width = params.stride_width;
 23f49bc:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
 23f49be:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8_t* output_data) {
 23f49c2:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
  const int stride_height = params.stride_height;
 23f49c6:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
 23f49c8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8_t* output_data) {
 23f49cc:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
  const int dilation_width_factor = params.dilation_width_factor;
 23f49d0:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
 23f49d2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 23f49d6:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
 23f49d8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 23f49dc:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
 23f49de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 23f49e2:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
 23f49e4:	69c3      	ldr	r3, [r0, #28]
 23f49e6:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 23f49e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 23f49ea:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
 23f49ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f49ee:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 23f49f0:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 23f49f4:	4293      	cmp	r3, r2
 23f49f6:	dd01      	ble.n	23f49fc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
 23f49f8:	f002 fe10 	bl	23f761c <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f49fc:	f8d8 3000 	ldr.w	r3, [r8]
 23f4a00:	2b04      	cmp	r3, #4
 23f4a02:	d1f9      	bne.n	23f49f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 23f4a04:	f8d9 3000 	ldr.w	r3, [r9]
 23f4a08:	2b04      	cmp	r3, #4
 23f4a0a:	d1f5      	bne.n	23f49f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f4a0c:	f8da 3000 	ldr.w	r3, [sl]
 23f4a10:	2b04      	cmp	r3, #4
 23f4a12:	d1f1      	bne.n	23f49f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 23f4a14:	2300      	movs	r3, #0
 23f4a16:	4652      	mov	r2, sl
 23f4a18:	4619      	mov	r1, r3
 23f4a1a:	4640      	mov	r0, r8
 23f4a1c:	f7ff fc00 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4a20:	2303      	movs	r3, #3
 23f4a22:	464a      	mov	r2, r9
 23f4a24:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 23f4a26:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4a28:	4640      	mov	r0, r8
 23f4a2a:	f7ff fbf9 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f4a2e:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4a30:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f4a32:	4652      	mov	r2, sl
 23f4a34:	2100      	movs	r1, #0
 23f4a36:	4648      	mov	r0, r9
 23f4a38:	f7ff fbf2 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 23f4a3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f4a3e:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
 23f4a40:	b12b      	cbz	r3, 23f4a4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 23f4a42:	982d      	ldr	r0, [sp, #180]	; 0xb4
 23f4a44:	f7ff fbac 	bl	23f41a0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 23f4a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f4a4a:	4298      	cmp	r0, r3
 23f4a4c:	d1d4      	bne.n	23f49f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 23f4a4e:	2101      	movs	r1, #1
 23f4a50:	4640      	mov	r0, r8
 23f4a52:	f7ff fb94 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
 23f4a56:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
 23f4a58:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 23f4a5a:	4640      	mov	r0, r8
 23f4a5c:	f7ff fb8f 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
 23f4a60:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
 23f4a62:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
 23f4a64:	4648      	mov	r0, r9
 23f4a66:	f7ff fb8a 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
 23f4a6a:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
 23f4a6c:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
 23f4a6e:	4648      	mov	r0, r9
 23f4a70:	f7ff fb85 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
 23f4a74:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
 23f4a76:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
 23f4a78:	4650      	mov	r0, sl
 23f4a7a:	f7ff fb80 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
 23f4a7e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
 23f4a80:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
 23f4a82:	4650      	mov	r0, sl
 23f4a84:	f7ff fb7b 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
 23f4a88:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
 23f4a8c:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
 23f4a8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23f4a90:	459b      	cmp	fp, r3
 23f4a92:	f280 80d0 	bge.w	23f4c36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
 23f4a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f4a98:	425b      	negs	r3, r3
 23f4a9a:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
 23f4a9c:	2300      	movs	r3, #0
 23f4a9e:	9304      	str	r3, [sp, #16]
 23f4aa0:	9b04      	ldr	r3, [sp, #16]
 23f4aa2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23f4aa4:	4293      	cmp	r3, r2
 23f4aa6:	f280 80c3 	bge.w	23f4c30 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 23f4aaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f4aac:	425b      	negs	r3, r3
 23f4aae:	9308      	str	r3, [sp, #32]
 23f4ab0:	2300      	movs	r3, #0
 23f4ab2:	9305      	str	r3, [sp, #20]
 23f4ab4:	9b05      	ldr	r3, [sp, #20]
 23f4ab6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 23f4ab8:	4293      	cmp	r3, r2
 23f4aba:	f280 80b1 	bge.w	23f4c20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f4abe:	2500      	movs	r5, #0
 23f4ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f4ac2:	429d      	cmp	r5, r3
 23f4ac4:	f280 80a4 	bge.w	23f4c10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x268>
          int32_t acc = 0;
 23f4ac8:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f4aca:	9e09      	ldr	r6, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 23f4acc:	9406      	str	r4, [sp, #24]
 23f4ace:	9b06      	ldr	r3, [sp, #24]
 23f4ad0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f4ad2:	4293      	cmp	r3, r2
 23f4ad4:	da3e      	bge.n	23f4b54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f4ad6:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 23f4ad8:	9f08      	ldr	r7, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f4ada:	9307      	str	r3, [sp, #28]
 23f4adc:	9b07      	ldr	r3, [sp, #28]
 23f4ade:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 23f4ae0:	4293      	cmp	r3, r2
 23f4ae2:	da31      	bge.n	23f4b48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 23f4ae4:	2f00      	cmp	r7, #0
 23f4ae6:	db29      	blt.n	23f4b3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4ae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23f4aea:	42bb      	cmp	r3, r7
 23f4aec:	dd26      	ble.n	23f4b3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4aee:	2e00      	cmp	r6, #0
 23f4af0:	db24      	blt.n	23f4b3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4af2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23f4af4:	42b3      	cmp	r3, r6
 23f4af6:	dd21      	ble.n	23f4b3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f4af8:	2300      	movs	r3, #0
 23f4afa:	9303      	str	r3, [sp, #12]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 23f4afc:	9b03      	ldr	r3, [sp, #12]
 23f4afe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f4b00:	4293      	cmp	r3, r2
 23f4b02:	da1b      	bge.n	23f4b3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 23f4b04:	4632      	mov	r2, r6
 23f4b06:	4659      	mov	r1, fp
 23f4b08:	9300      	str	r3, [sp, #0]
 23f4b0a:	4640      	mov	r0, r8
 23f4b0c:	463b      	mov	r3, r7
 23f4b0e:	f7ff fb57 	bl	23f41c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
 23f4b12:	9b03      	ldr	r3, [sp, #12]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 23f4b14:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
 23f4b16:	9300      	str	r3, [sp, #0]
 23f4b18:	4629      	mov	r1, r5
 23f4b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f4b1e:	4648      	mov	r0, r9
 23f4b20:	f7ff fb4e 	bl	23f41c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
 23f4b24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23f4b26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f4b28:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 23f4b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f4b2c:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 23f4b2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23f4b30:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
 23f4b32:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 23f4b36:	9b03      	ldr	r3, [sp, #12]
 23f4b38:	3301      	adds	r3, #1
 23f4b3a:	e7de      	b.n	23f4afa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f4b3c:	9b07      	ldr	r3, [sp, #28]
 23f4b3e:	3301      	adds	r3, #1
 23f4b40:	9307      	str	r3, [sp, #28]
 23f4b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f4b44:	441f      	add	r7, r3
 23f4b46:	e7c9      	b.n	23f4adc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x134>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 23f4b48:	9b06      	ldr	r3, [sp, #24]
 23f4b4a:	3301      	adds	r3, #1
 23f4b4c:	9306      	str	r3, [sp, #24]
 23f4b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f4b50:	441e      	add	r6, r3
 23f4b52:	e7bc      	b.n	23f4ace <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
              }
            }
          }

          if (bias_data) {
 23f4b54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23f4b56:	b113      	cbz	r3, 23f4b5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
 23f4b58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 23f4b5c:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
 23f4b5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23f4b60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23f4b62:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 23f4b66:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 23f4b6a:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
 23f4b6e:	2e00      	cmp	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 23f4b70:	fa04 f402 	lsl.w	r4, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
 23f4b74:	bfcc      	ite	gt
 23f4b76:	2600      	movgt	r6, #0
 23f4b78:	4276      	negle	r6, r6
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 23f4b7a:	42a3      	cmp	r3, r4
 23f4b7c:	d122      	bne.n	23f4bc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
 23f4b7e:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 23f4b82:	4250      	negs	r0, r2
 23f4b84:	4150      	adcs	r0, r2
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
 23f4b86:	fb84 4203 	smull	r4, r2, r4, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 23f4b8a:	4b2c      	ldr	r3, [pc, #176]	; (23f4c3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>)
 23f4b8c:	2a00      	cmp	r2, #0
 23f4b8e:	bfac      	ite	ge
 23f4b90:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 23f4b94:	4619      	movlt	r1, r3
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 23f4b96:	b9b8      	cbnz	r0, 23f4bc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 23f4b98:	190b      	adds	r3, r1, r4
 23f4b9a:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
 23f4b9e:	2c00      	cmp	r4, #0
 23f4ba0:	da04      	bge.n	23f4bac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x204>
 23f4ba2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23f4ba6:	189b      	adds	r3, r3, r2
 23f4ba8:	f144 0400 	adc.w	r4, r4, #0
 23f4bac:	0fdb      	lsrs	r3, r3, #31
 23f4bae:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
 23f4bb2:	2e1f      	cmp	r6, #31
 23f4bb4:	dd0b      	ble.n	23f4bce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x226>
 23f4bb6:	f240 1167 	movw	r1, #359	; 0x167
 23f4bba:	4b21      	ldr	r3, [pc, #132]	; (23f4c40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x298>)
 23f4bbc:	4a21      	ldr	r2, [pc, #132]	; (23f4c44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29c>)
 23f4bbe:	4822      	ldr	r0, [pc, #136]	; (23f4c48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>)
 23f4bc0:	f002 fd56 	bl	23f7670 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 23f4bc4:	2000      	movs	r0, #0
 23f4bc6:	e7de      	b.n	23f4b86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
 23f4bc8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23f4bcc:	e7f1      	b.n	23f4bb2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 23f4bce:	2701      	movs	r7, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 23f4bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23f4bd4:	40b7      	lsls	r7, r6
 23f4bd6:	3f01      	subs	r7, #1
 23f4bd8:	9500      	str	r5, [sp, #0]
 23f4bda:	4659      	mov	r1, fp
 23f4bdc:	4650      	mov	r0, sl
 23f4bde:	f7ff faef 	bl	23f41c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return a & b;
 23f4be2:	ea07 0304 	and.w	r3, r7, r4
  return a >> offset;
 23f4be6:	107f      	asrs	r7, r7, #1
  return a + b;
 23f4be8:	eb07 77d4 	add.w	r7, r7, r4, lsr #31
  return a >> offset;
 23f4bec:	4134      	asrs	r4, r6
  return a + b;
 23f4bee:	42bb      	cmp	r3, r7
 23f4bf0:	bfc8      	it	gt
 23f4bf2:	3401      	addgt	r4, #1
          acc += output_offset;
 23f4bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f4bf6:	3501      	adds	r5, #1
          acc += output_offset;
 23f4bf8:	441c      	add	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 23f4bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f4bfc:	429c      	cmp	r4, r3
 23f4bfe:	bfb8      	it	lt
 23f4c00:	461c      	movlt	r4, r3
 23f4c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f4c04:	429c      	cmp	r4, r3
 23f4c06:	bfa8      	it	ge
 23f4c08:	461c      	movge	r4, r3
 23f4c0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 23f4c0c:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f4c0e:	e757      	b.n	23f4ac0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x118>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 23f4c10:	9b05      	ldr	r3, [sp, #20]
 23f4c12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23f4c14:	3301      	adds	r3, #1
 23f4c16:	9305      	str	r3, [sp, #20]
 23f4c18:	9b08      	ldr	r3, [sp, #32]
 23f4c1a:	4413      	add	r3, r2
 23f4c1c:	9308      	str	r3, [sp, #32]
 23f4c1e:	e749      	b.n	23f4ab4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 23f4c20:	9b04      	ldr	r3, [sp, #16]
 23f4c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f4c24:	3301      	adds	r3, #1
 23f4c26:	9304      	str	r3, [sp, #16]
 23f4c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f4c2a:	4413      	add	r3, r2
 23f4c2c:	9309      	str	r3, [sp, #36]	; 0x24
 23f4c2e:	e737      	b.n	23f4aa0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
 23f4c30:	f10b 0b01 	add.w	fp, fp, #1
 23f4c34:	e72b      	b.n	23f4a8e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 23f4c36:	b021      	add	sp, #132	; 0x84
 23f4c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f4c3c:	c0000001 	.word	0xc0000001
 23f4c40:	023ff1fa 	.word	0x023ff1fa
 23f4c44:	023ff209 	.word	0x023ff209
 23f4c48:	023ff263 	.word	0x023ff263

023f4c4c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>:
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel(
 23f4c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4c50:	4617      	mov	r7, r2
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 23f4c52:	694a      	ldr	r2, [r1, #20]
TfLiteStatus EvalQuantizedPerChannel(
 23f4c54:	469b      	mov	fp, r3
  conv_params.dilation.w = params.dilation_width_factor;
 23f4c56:	690b      	ldr	r3, [r1, #16]
TfLiteStatus EvalQuantizedPerChannel(
 23f4c58:	b0e1      	sub	sp, #388	; 0x184
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 23f4c5a:	2a01      	cmp	r2, #1
TfLiteStatus EvalQuantizedPerChannel(
 23f4c5c:	4682      	mov	sl, r0
 23f4c5e:	e9dd 856a 	ldrd	r8, r5, [sp, #424]	; 0x1a8
 23f4c62:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  conv_params.dilation.h = params.dilation_height_factor;
 23f4c64:	924f      	str	r2, [sp, #316]	; 0x13c
  conv_params.dilation.w = params.dilation_width_factor;
 23f4c66:	934e      	str	r3, [sp, #312]	; 0x138
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 23f4c68:	ae30      	add	r6, sp, #192	; 0xc0
 23f4c6a:	f040 80bd 	bne.w	23f4de8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
 23f4c6e:	2b01      	cmp	r3, #1
 23f4c70:	f040 80ba 	bne.w	23f4de8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f4c74:	693b      	ldr	r3, [r7, #16]
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4c76:	a81e      	add	r0, sp, #120	; 0x78
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f4c78:	425b      	negs	r3, r3
 23f4c7a:	9348      	str	r3, [sp, #288]	; 0x120
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 23f4c7c:	69bb      	ldr	r3, [r7, #24]
 23f4c7e:	9349      	str	r3, [sp, #292]	; 0x124
    conv_params.stride.h = params.stride_height;
 23f4c80:	688b      	ldr	r3, [r1, #8]
 23f4c82:	934b      	str	r3, [sp, #300]	; 0x12c
    conv_params.stride.w = params.stride_width;
 23f4c84:	684b      	ldr	r3, [r1, #4]
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4c86:	4641      	mov	r1, r8
    conv_params.stride.w = params.stride_width;
 23f4c88:	934a      	str	r3, [sp, #296]	; 0x128
    conv_params.padding.h = data.reference_op_data.padding.height;
 23f4c8a:	687b      	ldr	r3, [r7, #4]
 23f4c8c:	934d      	str	r3, [sp, #308]	; 0x134
    conv_params.padding.w = data.reference_op_data.padding.width;
 23f4c8e:	683b      	ldr	r3, [r7, #0]
 23f4c90:	934c      	str	r3, [sp, #304]	; 0x130
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 23f4c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 23f4c94:	9350      	str	r3, [sp, #320]	; 0x140
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 23f4c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 23f4c98:	9351      	str	r3, [sp, #324]	; 0x144
    quant_params.multiplier = const_cast<int32_t*>(
 23f4c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 23f4c9c:	930a      	str	r3, [sp, #40]	; 0x28
    quant_params.shift =
 23f4c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 23f4ca0:	930b      	str	r3, [sp, #44]	; 0x2c
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4ca2:	f000 fe19 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f4ca6:	4659      	mov	r1, fp
 23f4ca8:	a824      	add	r0, sp, #144	; 0x90
 23f4caa:	f000 fe15 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f4cae:	4621      	mov	r1, r4
 23f4cb0:	a82a      	add	r0, sp, #168	; 0xa8
 23f4cb2:	f000 fe11 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 23f4cb6:	4629      	mov	r1, r5
 23f4cb8:	4630      	mov	r0, r6
 23f4cba:	f000 fe0d 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 23f4cbe:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
 23f4cc2:	429a      	cmp	r2, r3
 23f4cc4:	dd01      	ble.n	23f4cca <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7e>
 23f4cc6:	f002 fca9 	bl	23f761c <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f4cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f4ccc:	2b04      	cmp	r3, #4
 23f4cce:	d1fa      	bne.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 23f4cd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23f4cd2:	2b04      	cmp	r3, #4
 23f4cd4:	d1f7      	bne.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f4cd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f4cd8:	2b04      	cmp	r3, #4
 23f4cda:	d1f4      	bne.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 23f4cdc:	2300      	movs	r3, #0
 23f4cde:	aa2a      	add	r2, sp, #168	; 0xa8
 23f4ce0:	4619      	mov	r1, r3
 23f4ce2:	a824      	add	r0, sp, #144	; 0x90
 23f4ce4:	f7ff fa9c 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4ce8:	2303      	movs	r3, #3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 23f4cea:	9008      	str	r0, [sp, #32]
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4cec:	4619      	mov	r1, r3
 23f4cee:	aa1e      	add	r2, sp, #120	; 0x78
 23f4cf0:	a824      	add	r0, sp, #144	; 0x90
 23f4cf2:	f7ff fa95 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f4cf6:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f4cf8:	9009      	str	r0, [sp, #36]	; 0x24
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f4cfa:	2100      	movs	r1, #0
 23f4cfc:	aa2a      	add	r2, sp, #168	; 0xa8
 23f4cfe:	a81e      	add	r0, sp, #120	; 0x78
 23f4d00:	f7ff fa8e 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f4d04:	4681      	mov	r9, r0
  TFLITE_DCHECK(tensor != nullptr);
 23f4d06:	2d00      	cmp	r5, #0
 23f4d08:	d0dd      	beq.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 23f4d0a:	682b      	ldr	r3, [r5, #0]
 23f4d0c:	b123      	cbz	r3, 23f4d18 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0xcc>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 23f4d0e:	4630      	mov	r0, r6
 23f4d10:	f7ff fa46 	bl	23f41a0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 23f4d14:	4581      	cmp	r9, r0
 23f4d16:	d1d6      	bne.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 23f4d18:	9b08      	ldr	r3, [sp, #32]
    input_dims.h = input_shape.Dims(1);
 23f4d1a:	2101      	movs	r1, #1
 23f4d1c:	a824      	add	r0, sp, #144	; 0x90
    input_dims.n = batch_size;
 23f4d1e:	930e      	str	r3, [sp, #56]	; 0x38
    input_dims.h = input_shape.Dims(1);
 23f4d20:	f7ff fa2d 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
 23f4d24:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
 23f4d26:	900f      	str	r0, [sp, #60]	; 0x3c
    input_dims.w = input_shape.Dims(2);
 23f4d28:	a824      	add	r0, sp, #144	; 0x90
 23f4d2a:	f7ff fa28 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
 23f4d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
    filter_dims.h = filter_shape.Dims(1);
 23f4d30:	2101      	movs	r1, #1
    input_dims.w = input_shape.Dims(2);
 23f4d32:	9010      	str	r0, [sp, #64]	; 0x40
    filter_dims.h = filter_shape.Dims(1);
 23f4d34:	a81e      	add	r0, sp, #120	; 0x78
    input_dims.c = input_depth;
 23f4d36:	9311      	str	r3, [sp, #68]	; 0x44
    filter_dims.n = output_depth;
 23f4d38:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    filter_dims.h = filter_shape.Dims(1);
 23f4d3c:	f7ff fa1f 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
 23f4d40:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
 23f4d42:	9013      	str	r0, [sp, #76]	; 0x4c
    filter_dims.w = filter_shape.Dims(2);
 23f4d44:	a81e      	add	r0, sp, #120	; 0x78
 23f4d46:	f7ff fa1a 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 23f4d4a:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
 23f4d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    filter_dims.w = filter_shape.Dims(2);
 23f4d4e:	9014      	str	r0, [sp, #80]	; 0x50
    filter_dims.c = input_depth;
 23f4d50:	9315      	str	r3, [sp, #84]	; 0x54
    bias_dims.w = 1;
    bias_dims.c = output_depth;

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 23f4d52:	9b08      	ldr	r3, [sp, #32]
    output_dims.h = output_shape.Dims(1);
 23f4d54:	a82a      	add	r0, sp, #168	; 0xa8
    output_dims.n = batch_size;
 23f4d56:	931a      	str	r3, [sp, #104]	; 0x68
    bias_dims.h = 1;
 23f4d58:	e9cd 1116 	strd	r1, r1, [sp, #88]	; 0x58
    bias_dims.c = output_depth;
 23f4d5c:	e9cd 1918 	strd	r1, r9, [sp, #96]	; 0x60
    output_dims.h = output_shape.Dims(1);
 23f4d60:	f7ff fa0d 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
 23f4d64:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
 23f4d66:	901b      	str	r0, [sp, #108]	; 0x6c
    output_dims.w = output_shape.Dims(2);
 23f4d68:	a82a      	add	r0, sp, #168	; 0xa8
 23f4d6a:	f7ff fa08 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.c = output_depth;

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 23f4d6e:	2300      	movs	r3, #0
    ctx.size = 0;

    if (data.buffer_idx > -1) {
 23f4d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
    filter_dims.n = output_depth;
 23f4d72:	ae12      	add	r6, sp, #72	; 0x48
    if (data.buffer_idx > -1) {
 23f4d74:	4299      	cmp	r1, r3
    output_dims.c = output_depth;
 23f4d76:	e9cd 091c 	strd	r0, r9, [sp, #112]	; 0x70
    ctx.size = 0;
 23f4d7a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    if (data.buffer_idx > -1) {
 23f4d7e:	db04      	blt.n	23f4d8a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x13e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f4d80:	4650      	mov	r0, sl
 23f4d82:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 23f4d86:	4798      	blx	r3
 23f4d88:	900c      	str	r0, [sp, #48]	; 0x30
 23f4d8a:	f1bb 0f00 	cmp.w	fp, #0
 23f4d8e:	d09a      	beq.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4d90:	f8db 3000 	ldr.w	r3, [fp]
  TFLITE_DCHECK(tensor != nullptr);
 23f4d94:	f1b8 0f00 	cmp.w	r8, #0
 23f4d98:	d095      	beq.n	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4d9a:	f8d8 2000 	ldr.w	r2, [r8]
 23f4d9e:	6829      	ldr	r1, [r5, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f4da0:	b104      	cbz	r4, 23f4da4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x158>
 23f4da2:	6824      	ldr	r4, [r4, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 23f4da4:	a81a      	add	r0, sp, #104	; 0x68
 23f4da6:	e9cd 1004 	strd	r1, r0, [sp, #16]
 23f4daa:	a916      	add	r1, sp, #88	; 0x58
 23f4dac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 23f4db0:	e9cd 3600 	strd	r3, r6, [sp]
 23f4db4:	9406      	str	r4, [sp, #24]
 23f4db6:	ab0e      	add	r3, sp, #56	; 0x38
 23f4db8:	aa0a      	add	r2, sp, #40	; 0x28
 23f4dba:	a948      	add	r1, sp, #288	; 0x120
 23f4dbc:	a80c      	add	r0, sp, #48	; 0x30
 23f4dbe:	f7fa f9e7 	bl	23ef190 <arm_convolve_wrapper_s8>
 23f4dc2:	2800      	cmp	r0, #0
 23f4dc4:	f47f af7f 	bne.w	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 23f4dc8:	a830      	add	r0, sp, #192	; 0xc0
 23f4dca:	f7ff f9cd 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f4dce:	a82a      	add	r0, sp, #168	; 0xa8
 23f4dd0:	f7ff f9ca 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f4dd4:	a824      	add	r0, sp, #144	; 0x90
 23f4dd6:	f7ff f9c7 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f4dda:	a81e      	add	r0, sp, #120	; 0x78
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
        data.reference_op_data.per_channel_output_multiplier,
        data.reference_op_data.per_channel_output_shift,
        tflite::micro::GetTensorShape(input),
 23f4ddc:	f7ff f9c4 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
 23f4de0:	2000      	movs	r0, #0
 23f4de2:	b061      	add	sp, #388	; 0x184
 23f4de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ConvParamsQuantized(params, data.reference_op_data),
 23f4de8:	a852      	add	r0, sp, #328	; 0x148
 23f4dea:	463a      	mov	r2, r7
 23f4dec:	f000 fa64 	bl	23f52b8 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_shift,
 23f4df0:	e9d7 9a09 	ldrd	r9, sl, [r7, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
 23f4df4:	4659      	mov	r1, fp
 23f4df6:	a842      	add	r0, sp, #264	; 0x108
 23f4df8:	f000 fd6e 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f4dfc:	f1bb 0f00 	cmp.w	fp, #0
 23f4e00:	f43f af61 	beq.w	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4e04:	f8db 3000 	ldr.w	r3, [fp]
        tflite::micro::GetTensorShape(filter),
 23f4e08:	af3c      	add	r7, sp, #240	; 0xf0
 23f4e0a:	4641      	mov	r1, r8
 23f4e0c:	4638      	mov	r0, r7
 23f4e0e:	9308      	str	r3, [sp, #32]
 23f4e10:	f000 fd62 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f4e14:	f1b8 0f00 	cmp.w	r8, #0
 23f4e18:	f43f af55 	beq.w	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4e1c:	f8d8 b000 	ldr.w	fp, [r8]
        tflite::micro::GetTensorShape(bias),
 23f4e20:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 23f4e24:	4629      	mov	r1, r5
 23f4e26:	4640      	mov	r0, r8
 23f4e28:	f000 fd56 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f4e2c:	2d00      	cmp	r5, #0
 23f4e2e:	f43f af4a 	beq.w	23f4cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
        tflite::micro::GetTensorShape(output),
 23f4e32:	4621      	mov	r1, r4
 23f4e34:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f4e36:	682d      	ldr	r5, [r5, #0]
 23f4e38:	f000 fd4e 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f4e3c:	b104      	cbz	r4, 23f4e40 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x1f4>
 23f4e3e:	6824      	ldr	r4, [r4, #0]
    reference_integer_ops::ConvPerChannel(
 23f4e40:	9b08      	ldr	r3, [sp, #32]
 23f4e42:	4652      	mov	r2, sl
 23f4e44:	4649      	mov	r1, r9
 23f4e46:	9300      	str	r3, [sp, #0]
 23f4e48:	a852      	add	r0, sp, #328	; 0x148
 23f4e4a:	ab42      	add	r3, sp, #264	; 0x108
 23f4e4c:	e9cd 6405 	strd	r6, r4, [sp, #20]
 23f4e50:	e9cd 8503 	strd	r8, r5, [sp, #12]
 23f4e54:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 23f4e58:	f7ff fda6 	bl	23f49a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 23f4e5c:	4630      	mov	r0, r6
 23f4e5e:	f7ff f983 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 23f4e62:	4640      	mov	r0, r8
 23f4e64:	f7ff f980 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 23f4e68:	4638      	mov	r0, r7
 23f4e6a:	f7ff f97d 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 23f4e6e:	a842      	add	r0, sp, #264	; 0x108
 23f4e70:	e7b4      	b.n	23f4ddc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x190>
	...

023f4e74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f4e78:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f4e7a:	4604      	mov	r4, r0
 23f4e7c:	460d      	mov	r5, r1
 23f4e7e:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK(node->user_data != nullptr);
 23f4e80:	b90e      	cbnz	r6, 23f4e86 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f4e82:	f002 fbcb 	bl	23f761c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f4e86:	f8d1 8014 	ldr.w	r8, [r1, #20]
 23f4e8a:	f1b8 0f00 	cmp.w	r8, #0
 23f4e8e:	d0f8      	beq.n	23f4e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f4e90:	4b5f      	ldr	r3, [pc, #380]	; (23f5010 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
 23f4e92:	681a      	ldr	r2, [r3, #0]
 23f4e94:	f000 fed0 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f4e98:	4607      	mov	r7, r0
 23f4e9a:	b960      	cbnz	r0, 23f4eb6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 23f4e9c:	4b5d      	ldr	r3, [pc, #372]	; (23f5014 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
 23f4e9e:	6925      	ldr	r5, [r4, #16]
 23f4ea0:	9300      	str	r3, [sp, #0]
 23f4ea2:	233d      	movs	r3, #61	; 0x3d
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4ea4:	4620      	mov	r0, r4
 23f4ea6:	4a5c      	ldr	r2, [pc, #368]	; (23f5018 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
 23f4ea8:	495c      	ldr	r1, [pc, #368]	; (23f501c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
 23f4eaa:	47a8      	blx	r5
 23f4eac:	2501      	movs	r5, #1
}
 23f4eae:	4628      	mov	r0, r5
 23f4eb0:	b02d      	add	sp, #180	; 0xb4
 23f4eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 23f4eb6:	4b5a      	ldr	r3, [pc, #360]	; (23f5020 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
 23f4eb8:	4629      	mov	r1, r5
 23f4eba:	4620      	mov	r0, r4
 23f4ebc:	681a      	ldr	r2, [r3, #0]
 23f4ebe:	f000 febb 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f4ec2:	4682      	mov	sl, r0
 23f4ec4:	b920      	cbnz	r0, 23f4ed0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 23f4ec6:	4b57      	ldr	r3, [pc, #348]	; (23f5024 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
 23f4ec8:	6925      	ldr	r5, [r4, #16]
 23f4eca:	9300      	str	r3, [sp, #0]
 23f4ecc:	233f      	movs	r3, #63	; 0x3f
 23f4ece:	e7e9      	b.n	23f4ea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f4ed0:	4b55      	ldr	r3, [pc, #340]	; (23f5028 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
 23f4ed2:	4629      	mov	r1, r5
 23f4ed4:	4620      	mov	r0, r4
 23f4ed6:	681a      	ldr	r2, [r3, #0]
 23f4ed8:	f000 feb1 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f4edc:	4681      	mov	r9, r0
 23f4ede:	b920      	cbnz	r0, 23f4eea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
 23f4ee0:	4b52      	ldr	r3, [pc, #328]	; (23f502c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
 23f4ee2:	6925      	ldr	r5, [r4, #16]
 23f4ee4:	9300      	str	r3, [sp, #0]
 23f4ee6:	2341      	movs	r3, #65	; 0x41
 23f4ee8:	e7dc      	b.n	23f4ea4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
 23f4eea:	4639      	mov	r1, r7
 23f4eec:	a816      	add	r0, sp, #88	; 0x58
 23f4eee:	f7ff f9a6 	bl	23f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 23f4ef2:	4649      	mov	r1, r9
 23f4ef4:	a81c      	add	r0, sp, #112	; 0x70
 23f4ef6:	f7ff f9a2 	bl	23f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f4efa:	2300      	movs	r3, #0
 23f4efc:	aa1c      	add	r2, sp, #112	; 0x70
 23f4efe:	4619      	mov	r1, r3
 23f4f00:	a816      	add	r0, sp, #88	; 0x58
 23f4f02:	f7ff f98d 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
 23f4f06:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f4f08:	4683      	mov	fp, r0
  input_dims.h = input->dims->data[1];
 23f4f0a:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
 23f4f0c:	68db      	ldr	r3, [r3, #12]
  input_dims.c = input_shape.Dims(3);
 23f4f0e:	2103      	movs	r1, #3
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f4f10:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.c = input_shape.Dims(3);
 23f4f12:	a816      	add	r0, sp, #88	; 0x58
  input_dims.h = input->dims->data[1];
 23f4f14:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.w = input->dims->data[2];
 23f4f16:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
 23f4f18:	f7ff f931 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
 23f4f1c:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
 23f4f1e:	900d      	str	r0, [sp, #52]	; 0x34
 23f4f20:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
 23f4f22:	a81c      	add	r0, sp, #112	; 0x70
 23f4f24:	f7ff f92b 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
 23f4f28:	f8da 2008 	ldr.w	r2, [sl, #8]
  filter_dims.c = input_dims.c;
 23f4f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
 23f4f2e:	6891      	ldr	r1, [r2, #8]
  filter_dims.w = filter->dims->data[2];
 23f4f30:	68d2      	ldr	r2, [r2, #12]
  output_dims.n = input_dims.n;
 23f4f32:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  filter_dims.w = filter->dims->data[2];
 23f4f36:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.h = output->dims->data[1];
 23f4f38:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.n = output_shape.Dims(3);
 23f4f3c:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 23f4f3e:	689a      	ldr	r2, [r3, #8]
  output_dims.w = output->dims->data[2];
 23f4f40:	68db      	ldr	r3, [r3, #12]
  filter_dims.h = filter->dims->data[1];
 23f4f42:	910f      	str	r1, [sp, #60]	; 0x3c
  output_dims.c = output_shape.Dims(3);
 23f4f44:	a81c      	add	r0, sp, #112	; 0x70
 23f4f46:	2103      	movs	r1, #3
  output_dims.h = output->dims->data[1];
 23f4f48:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.w = output->dims->data[2];
 23f4f4a:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
 23f4f4c:	f7ff f917 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f4f50:	4a37      	ldr	r2, [pc, #220]	; (23f5030 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
 23f4f52:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f4f54:	6812      	ldr	r2, [r2, #0]
 23f4f56:	f8da 3008 	ldr.w	r3, [sl, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f4f5a:	4620      	mov	r0, r4
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f4f5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f4f60:	6859      	ldr	r1, [r3, #4]
 23f4f62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f4f64:	0089      	lsls	r1, r1, #2
 23f4f66:	9109      	str	r1, [sp, #36]	; 0x24
 23f4f68:	4798      	blx	r3
  data->reference_op_data.per_channel_output_multiplier =
 23f4f6a:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f4f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f4f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f4f70:	4620      	mov	r0, r4
 23f4f72:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
 23f4f74:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 23f4f76:	9606      	str	r6, [sp, #24]
 23f4f78:	783b      	ldrb	r3, [r7, #0]
 23f4f7a:	4629      	mov	r1, r5
 23f4f7c:	9305      	str	r3, [sp, #20]
 23f4f7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f4f80:	4642      	mov	r2, r8
 23f4f82:	9304      	str	r3, [sp, #16]
 23f4f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f4f86:	4620      	mov	r0, r4
 23f4f88:	9303      	str	r3, [sp, #12]
 23f4f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f4f8c:	9302      	str	r3, [sp, #8]
 23f4f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f4f90:	9301      	str	r3, [sp, #4]
 23f4f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f4f94:	9300      	str	r3, [sp, #0]
 23f4f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f4f98:	f000 f9b6 	bl	23f5308 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 23f4f9c:	4605      	mov	r5, r0
 23f4f9e:	2800      	cmp	r0, #0
 23f4fa0:	d12a      	bne.n	23f4ff8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
  if (input->type == kTfLiteInt8) {
 23f4fa2:	783b      	ldrb	r3, [r7, #0]
 23f4fa4:	2b09      	cmp	r3, #9
 23f4fa6:	d12e      	bne.n	23f5006 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    conv_params.input_offset = -input->params.zero_point;
 23f4fa8:	693b      	ldr	r3, [r7, #16]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4faa:	a90a      	add	r1, sp, #40	; 0x28
    conv_params.input_offset = -input->params.zero_point;
 23f4fac:	425b      	negs	r3, r3
 23f4fae:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
 23f4fb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4fb4:	aa0e      	add	r2, sp, #56	; 0x38
    conv_params.output_offset = output->params.zero_point;
 23f4fb6:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
 23f4fb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4fbc:	a822      	add	r0, sp, #136	; 0x88
    conv_params.stride.h = params.stride_height;
 23f4fbe:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
 23f4fc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f4fc4:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
 23f4fc6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f4fca:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
 23f4fcc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f4fd0:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
 23f4fd2:	6873      	ldr	r3, [r6, #4]
 23f4fd4:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
 23f4fd6:	6833      	ldr	r3, [r6, #0]
 23f4fd8:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 23f4fda:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 23f4fdc:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 23f4fde:	6b33      	ldr	r3, [r6, #48]	; 0x30
 23f4fe0:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f4fe2:	ab12      	add	r3, sp, #72	; 0x48
 23f4fe4:	f7fa f930 	bl	23ef248 <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
 23f4fe8:	1e01      	subs	r1, r0, #0
 23f4fea:	dd0c      	ble.n	23f5006 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f4fec:	4620      	mov	r0, r4
 23f4fee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f4ff0:	f106 0234 	add.w	r2, r6, #52	; 0x34
 23f4ff4:	4798      	blx	r3
 23f4ff6:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
 23f4ff8:	a81c      	add	r0, sp, #112	; 0x70
 23f4ffa:	f7ff f8b5 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 23f4ffe:	a816      	add	r0, sp, #88	; 0x58
 23f5000:	f7ff f8b2 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f5004:	e753      	b.n	23f4eae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
 23f5006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f500a:	6373      	str	r3, [r6, #52]	; 0x34
 23f500c:	e7f4      	b.n	23f4ff8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
 23f500e:	bf00      	nop
 23f5010:	023ff414 	.word	0x023ff414
 23f5014:	023ff01d 	.word	0x023ff01d
 23f5018:	023ff2e1 	.word	0x023ff2e1
 23f501c:	023ff006 	.word	0x023ff006
 23f5020:	023ff41c 	.word	0x023ff41c
 23f5024:	023ff02e 	.word	0x023ff02e
 23f5028:	023ff418 	.word	0x023ff418
 23f502c:	023ff040 	.word	0x023ff040
 23f5030:	023ff420 	.word	0x023ff420

023f5034 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f5034:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 23f5038:	4b36      	ldr	r3, [pc, #216]	; (23f5114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f503a:	460d      	mov	r5, r1
  return GetMutableEvalInput(context, node, index);
 23f503c:	681a      	ldr	r2, [r3, #0]
 23f503e:	4604      	mov	r4, r0
 23f5040:	f7ff f8e0 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 23f5044:	4b34      	ldr	r3, [pc, #208]	; (23f5118 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
 23f5046:	4606      	mov	r6, r0
 23f5048:	681a      	ldr	r2, [r3, #0]
 23f504a:	4629      	mov	r1, r5
 23f504c:	4620      	mov	r0, r4
 23f504e:	f7ff f8d9 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f5052:	682b      	ldr	r3, [r5, #0]
 23f5054:	4607      	mov	r7, r0
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 23f5056:	681b      	ldr	r3, [r3, #0]
 23f5058:	2b03      	cmp	r3, #3
 23f505a:	d109      	bne.n	23f5070 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
 23f505c:	4b2f      	ldr	r3, [pc, #188]	; (23f511c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
 23f505e:	4629      	mov	r1, r5
 23f5060:	4620      	mov	r0, r4
 23f5062:	681a      	ldr	r2, [r3, #0]
 23f5064:	f7ff f8ce 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f5068:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
 23f506a:	b924      	cbnz	r4, 23f5076 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42>
 23f506c:	f002 fad6 	bl	23f761c <abort>
 23f5070:	f04f 0800 	mov.w	r8, #0
 23f5074:	e7f9      	b.n	23f506a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f5076:	4a2a      	ldr	r2, [pc, #168]	; (23f5120 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
 23f5078:	686b      	ldr	r3, [r5, #4]
 23f507a:	6812      	ldr	r2, [r2, #0]
 23f507c:	4620      	mov	r0, r4
 23f507e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f5082:	6859      	ldr	r1, [r3, #4]
 23f5084:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23f5086:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f5088:	6969      	ldr	r1, [r5, #20]
 23f508a:	2900      	cmp	r1, #0
 23f508c:	d0ee      	beq.n	23f506c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 23f508e:	692a      	ldr	r2, [r5, #16]
 23f5090:	2a00      	cmp	r2, #0
 23f5092:	d0eb      	beq.n	23f506c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f5094:	7a35      	ldrb	r5, [r6, #8]
 23f5096:	7a03      	ldrb	r3, [r0, #8]
 23f5098:	429d      	cmp	r5, r3
 23f509a:	d00e      	beq.n	23f50ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 23f509c:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f50a0:	4b20      	ldr	r3, [pc, #128]	; (23f5124 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 23f50a2:	4620      	mov	r0, r4
 23f50a4:	9301      	str	r3, [sp, #4]
 23f50a6:	4b20      	ldr	r3, [pc, #128]	; (23f5128 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 23f50a8:	6925      	ldr	r5, [r4, #16]
 23f50aa:	9300      	str	r3, [sp, #0]
 23f50ac:	4a1f      	ldr	r2, [pc, #124]	; (23f512c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>)
 23f50ae:	f44f 7386 	mov.w	r3, #268	; 0x10c
 23f50b2:	491f      	ldr	r1, [pc, #124]	; (23f5130 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>)
 23f50b4:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 23f50b6:	2501      	movs	r5, #1
 23f50b8:	e01e      	b.n	23f50f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 23f50ba:	7a3b      	ldrb	r3, [r7, #8]
 23f50bc:	42ab      	cmp	r3, r5
 23f50be:	d004      	beq.n	23f50ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
 23f50c0:	4620      	mov	r0, r4
 23f50c2:	6923      	ldr	r3, [r4, #16]
 23f50c4:	491b      	ldr	r1, [pc, #108]	; (23f5134 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 23f50c6:	4798      	blx	r3
 23f50c8:	e7f5      	b.n	23f50b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
  switch (input->type) {  // Already know in/out types are same.
 23f50ca:	2d01      	cmp	r5, #1
 23f50cc:	d00b      	beq.n	23f50e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
 23f50ce:	2d09      	cmp	r5, #9
 23f50d0:	d016      	beq.n	23f5100 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f50d2:	4628      	mov	r0, r5
 23f50d4:	6927      	ldr	r7, [r4, #16]
 23f50d6:	f7f8 fb79 	bl	23ed7cc <TfLiteTypeGetName>
 23f50da:	7a33      	ldrb	r3, [r6, #8]
 23f50dc:	4602      	mov	r2, r0
 23f50de:	4916      	ldr	r1, [pc, #88]	; (23f5138 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 23f50e0:	4620      	mov	r0, r4
 23f50e2:	47b8      	blx	r7
 23f50e4:	e7e7      	b.n	23f50b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f50e6:	4628      	mov	r0, r5
 23f50e8:	6927      	ldr	r7, [r4, #16]
 23f50ea:	f7f8 fb6f 	bl	23ed7cc <TfLiteTypeGetName>
 23f50ee:	7a33      	ldrb	r3, [r6, #8]
 23f50f0:	4602      	mov	r2, r0
 23f50f2:	4911      	ldr	r1, [pc, #68]	; (23f5138 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 23f50f4:	4620      	mov	r0, r4
 23f50f6:	47b8      	blx	r7
  }
  return kTfLiteOk;
}
 23f50f8:	4628      	mov	r0, r5
 23f50fa:	b004      	add	sp, #16
 23f50fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 23f5100:	e9cd 8001 	strd	r8, r0, [sp, #4]
 23f5104:	4633      	mov	r3, r6
 23f5106:	4620      	mov	r0, r4
 23f5108:	9700      	str	r7, [sp, #0]
 23f510a:	f7ff fd9f 	bl	23f4c4c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>
 23f510e:	4605      	mov	r5, r0
                                     bias, output, nullptr);
 23f5110:	e7f2      	b.n	23f50f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
 23f5112:	bf00      	nop
 23f5114:	023ff414 	.word	0x023ff414
 23f5118:	023ff41c 	.word	0x023ff41c
 23f511c:	023ff410 	.word	0x023ff410
 23f5120:	023ff418 	.word	0x023ff418
 23f5124:	023ff06c 	.word	0x023ff06c
 23f5128:	023ff079 	.word	0x023ff079
 23f512c:	023ff2e1 	.word	0x023ff2e1
 23f5130:	023feeb7 	.word	0x023feeb7
 23f5134:	023ff085 	.word	0x023ff085
 23f5138:	023ff0b6 	.word	0x023ff0b6

023f513c <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 23f513c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f513e:	4604      	mov	r4, r0
TfLiteRegistration Register_CONV_2D() {
 23f5140:	4606      	mov	r6, r0
          /*version=*/0};
 23f5142:	4d04      	ldr	r5, [pc, #16]	; (23f5154 <_ZN6tflite16Register_CONV_2DEv+0x18>)
 23f5144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f514c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f5150:	4630      	mov	r0, r6
 23f5152:	bd70      	pop	{r4, r5, r6, pc}
 23f5154:	023fb968 	.word	0x023fb968

023f5158 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f5158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f515c:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
 23f515e:	4604      	mov	r4, r0
 23f5160:	b093      	sub	sp, #76	; 0x4c
 23f5162:	b908      	cbnz	r0, 23f5168 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
 23f5164:	f002 fa5a 	bl	23f761c <abort>
  TFLITE_DCHECK(node != nullptr);
 23f5168:	2900      	cmp	r1, #0
 23f516a:	d0fb      	beq.n	23f5164 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f516c:	680a      	ldr	r2, [r1, #0]
 23f516e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f5170:	6851      	ldr	r1, [r2, #4]
 23f5172:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f5174:	6872      	ldr	r2, [r6, #4]
 23f5176:	6d23      	ldr	r3, [r4, #80]	; 0x50
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f5178:	4605      	mov	r5, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f517a:	6851      	ldr	r1, [r2, #4]
 23f517c:	4620      	mov	r0, r4
 23f517e:	4798      	blx	r3
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f5180:	6933      	ldr	r3, [r6, #16]
 23f5182:	4607      	mov	r7, r0
 23f5184:	2b00      	cmp	r3, #0
 23f5186:	d0ed      	beq.n	23f5164 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);

  switch (input->type) {
 23f5188:	7a2e      	ldrb	r6, [r5, #8]
 23f518a:	1e72      	subs	r2, r6, #1
 23f518c:	2a08      	cmp	r2, #8
 23f518e:	d878      	bhi.n	23f5282 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
 23f5190:	e8df f002 	tbb	[pc, r2]
 23f5194:	77697705 	.word	0x77697705
 23f5198:	77747777 	.word	0x77747777
 23f519c:	12          	.byte	0x12
 23f519d:	00          	.byte	0x00
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f519e:	2001      	movs	r0, #1
 23f51a0:	6927      	ldr	r7, [r4, #16]
 23f51a2:	f7f8 fb13 	bl	23ed7cc <TfLiteTypeGetName>
 23f51a6:	7a2b      	ldrb	r3, [r5, #8]
 23f51a8:	4602      	mov	r2, r0
 23f51aa:	493b      	ldr	r1, [pc, #236]	; (23f5298 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f51ac:	4620      	mov	r0, r4
 23f51ae:	47b8      	blx	r7
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
}
 23f51b0:	4630      	mov	r0, r6
 23f51b2:	b013      	add	sp, #76	; 0x4c
 23f51b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (output->type == kTfLiteInt16) {
 23f51b8:	7a02      	ldrb	r2, [r0, #8]
 23f51ba:	2a07      	cmp	r2, #7
 23f51bc:	d051      	beq.n	23f5262 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  const SoftmaxParams data =
 23f51be:	e9d3 8202 	ldrd	r8, r2, [r3, #8]

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 23f51c2:	2400      	movs	r4, #0
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f51c4:	4629      	mov	r1, r5
 23f51c6:	a806      	add	r0, sp, #24
  const SoftmaxParams data =
 23f51c8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 23f51cc:	9205      	str	r2, [sp, #20]
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f51ce:	f000 fb83 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 23f51d2:	4639      	mov	r1, r7
 23f51d4:	a80c      	add	r0, sp, #48	; 0x30
 23f51d6:	f000 fb7f 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 23f51da:	f8dd b018 	ldr.w	fp, [sp, #24]
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 23f51de:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
  for (int i = 0; i < dims_count; ++i) {
 23f51e2:	45a3      	cmp	fp, r4
 23f51e4:	dd0e      	ble.n	23f5204 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    if (i != skip_dim) {
 23f51e6:	42a6      	cmp	r6, r4
 23f51e8:	d00a      	beq.n	23f5200 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 23f51ea:	4621      	mov	r1, r4
 23f51ec:	a806      	add	r0, sp, #24
 23f51ee:	f7fe ffc6 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f51f2:	4621      	mov	r1, r4
 23f51f4:	4681      	mov	r9, r0
 23f51f6:	a80c      	add	r0, sp, #48	; 0x30
 23f51f8:	f7fe ffc1 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f51fc:	4581      	cmp	r9, r0
 23f51fe:	d1b1      	bne.n	23f5164 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  for (int i = 0; i < dims_count; ++i) {
 23f5200:	3401      	adds	r4, #1
 23f5202:	e7ee      	b.n	23f51e2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 23f5204:	2e00      	cmp	r6, #0
 23f5206:	dbad      	blt.n	23f5164 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  for (int i = 0; i < dims_count; ++i) {
 23f5208:	2300      	movs	r3, #0
  int flat_size = 1;
 23f520a:	2401      	movs	r4, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f520c:	f1bb 0f05 	cmp.w	fp, #5
 23f5210:	bfcc      	ite	gt
 23f5212:	9907      	ldrgt	r1, [sp, #28]
 23f5214:	a907      	addle	r1, sp, #28
  for (int i = 0; i < dims_count; ++i) {
 23f5216:	459b      	cmp	fp, r3
 23f5218:	d007      	beq.n	23f522a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f521a:	429e      	cmp	r6, r3
 23f521c:	bf0c      	ite	eq
 23f521e:	2201      	moveq	r2, #1
 23f5220:	f851 2023 	ldrne.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 23f5224:	3301      	adds	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f5226:	4354      	muls	r4, r2
  for (int i = 0; i < dims_count; ++i) {
 23f5228:	e7f5      	b.n	23f5216 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f522a:	4631      	mov	r1, r6
 23f522c:	a806      	add	r0, sp, #24
 23f522e:	f7fe ffa6 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f5232:	4631      	mov	r1, r6
 23f5234:	4683      	mov	fp, r0
 23f5236:	a80c      	add	r0, sp, #48	; 0x30
 23f5238:	f7fe ffa1 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
 23f523c:	4583      	cmp	fp, r0
 23f523e:	d191      	bne.n	23f5164 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 23f5240:	683b      	ldr	r3, [r7, #0]
 23f5242:	465a      	mov	r2, fp
 23f5244:	e9cd a301 	strd	sl, r3, [sp, #4]
 23f5248:	9b05      	ldr	r3, [sp, #20]
 23f524a:	4621      	mov	r1, r4
 23f524c:	9300      	str	r3, [sp, #0]
 23f524e:	6828      	ldr	r0, [r5, #0]
 23f5250:	4643      	mov	r3, r8
 23f5252:	f7f9 f899 	bl	23ee388 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 23f5256:	a80c      	add	r0, sp, #48	; 0x30
 23f5258:	f7fe ff86 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f525c:	a806      	add	r0, sp, #24
 23f525e:	f7fe ff83 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
 23f5262:	2600      	movs	r6, #0
 23f5264:	e7a4      	b.n	23f51b0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f5266:	2003      	movs	r0, #3
 23f5268:	6926      	ldr	r6, [r4, #16]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f526a:	f7f8 faaf 	bl	23ed7cc <TfLiteTypeGetName>
 23f526e:	7a2b      	ldrb	r3, [r5, #8]
 23f5270:	4602      	mov	r2, r0
 23f5272:	4909      	ldr	r1, [pc, #36]	; (23f5298 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f5274:	4620      	mov	r0, r4
 23f5276:	47b0      	blx	r6
      return kTfLiteError;
 23f5278:	2601      	movs	r6, #1
 23f527a:	e799      	b.n	23f51b0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f527c:	2007      	movs	r0, #7
 23f527e:	6926      	ldr	r6, [r4, #16]
 23f5280:	e7f3      	b.n	23f526a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f5282:	4630      	mov	r0, r6
 23f5284:	6927      	ldr	r7, [r4, #16]
 23f5286:	f7f8 faa1 	bl	23ed7cc <TfLiteTypeGetName>
 23f528a:	7a2b      	ldrb	r3, [r5, #8]
 23f528c:	4602      	mov	r2, r0
 23f528e:	4902      	ldr	r1, [pc, #8]	; (23f5298 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f5290:	4620      	mov	r0, r4
 23f5292:	47b8      	blx	r7
 23f5294:	e7f0      	b.n	23f5278 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x120>
 23f5296:	bf00      	nop
 23f5298:	023ff0b6 	.word	0x023ff0b6

023f529c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 23f529c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f529e:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
 23f52a0:	4606      	mov	r6, r0
          /*version=*/0};
 23f52a2:	4d04      	ldr	r5, [pc, #16]	; (23f52b4 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
 23f52a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f52a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f52a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f52ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f52b0:	4630      	mov	r0, r6
 23f52b2:	bd70      	pop	{r4, r5, r6, pc}
 23f52b4:	023fb988 	.word	0x023fb988

023f52b8 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
}

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 23f52b8:	b570      	push	{r4, r5, r6, lr}
 23f52ba:	4615      	mov	r5, r2
 23f52bc:	4604      	mov	r4, r0
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 23f52be:	6913      	ldr	r3, [r2, #16]
                               const OpDataConv& data) {
 23f52c0:	460e      	mov	r6, r1
  op_params.input_offset = -data.input_zero_point;
 23f52c2:	425b      	negs	r3, r3
 23f52c4:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
 23f52c6:	6953      	ldr	r3, [r2, #20]
 23f52c8:	425b      	negs	r3, r3
 23f52ca:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
 23f52cc:	6993      	ldr	r3, [r2, #24]
 23f52ce:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
 23f52d0:	69d3      	ldr	r3, [r2, #28]
 23f52d2:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
 23f52d4:	6a13      	ldr	r3, [r2, #32]
 23f52d6:	425b      	negs	r3, r3
 23f52d8:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 23f52da:	7808      	ldrb	r0, [r1, #0]
 23f52dc:	f000 fb20 	bl	23f5920 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
 23f52e0:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 23f52e2:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
 23f52e4:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
 23f52e6:	682b      	ldr	r3, [r5, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
 23f52e8:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
 23f52ea:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
 23f52ec:	68b3      	ldr	r3, [r6, #8]
 23f52ee:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
 23f52f0:	6873      	ldr	r3, [r6, #4]
 23f52f2:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 23f52f4:	6973      	ldr	r3, [r6, #20]
 23f52f6:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 23f52f8:	6933      	ldr	r3, [r6, #16]
 23f52fa:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 23f52fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23f52fe:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 23f5300:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23f5302:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 23f5304:	bd70      	pop	{r4, r5, r6, pc}
	...

023f5308 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 23f5308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f530c:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
 23f530e:	680b      	ldr	r3, [r1, #0]
                                 OpDataConv* data) {
 23f5310:	b08f      	sub	sp, #60	; 0x3c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f5312:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
 23f5314:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f5316:	3b02      	subs	r3, #2
 23f5318:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
 23f531a:	4688      	mov	r8, r1
 23f531c:	4617      	mov	r7, r2
 23f531e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f5320:	d90b      	bls.n	23f533a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
 23f5322:	4b5d      	ldr	r3, [pc, #372]	; (23f5498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
 23f5324:	4a5d      	ldr	r2, [pc, #372]	; (23f549c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f5326:	9300      	str	r3, [sp, #0]
 23f5328:	6904      	ldr	r4, [r0, #16]
 23f532a:	2356      	movs	r3, #86	; 0x56
 23f532c:	495c      	ldr	r1, [pc, #368]	; (23f54a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
 23f532e:	47a0      	blx	r4
 23f5330:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
 23f5332:	4620      	mov	r0, r4
 23f5334:	b00f      	add	sp, #60	; 0x3c
 23f5336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 23f533a:	684b      	ldr	r3, [r1, #4]
 23f533c:	681c      	ldr	r4, [r3, #0]
 23f533e:	2c01      	cmp	r4, #1
 23f5340:	d00c      	beq.n	23f535c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
 23f5342:	2601      	movs	r6, #1
 23f5344:	4b57      	ldr	r3, [pc, #348]	; (23f54a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
 23f5346:	e9cd 4602 	strd	r4, r6, [sp, #8]
 23f534a:	9301      	str	r3, [sp, #4]
 23f534c:	4b56      	ldr	r3, [pc, #344]	; (23f54a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
 23f534e:	4a53      	ldr	r2, [pc, #332]	; (23f549c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f5350:	9300      	str	r3, [sp, #0]
 23f5352:	6904      	ldr	r4, [r0, #16]
 23f5354:	2357      	movs	r3, #87	; 0x57
 23f5356:	4955      	ldr	r1, [pc, #340]	; (23f54ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
 23f5358:	47a0      	blx	r4
 23f535a:	e7e9      	b.n	23f5330 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
 23f535c:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
 23f5360:	930a      	str	r3, [sp, #40]	; 0x28
 23f5362:	6953      	ldr	r3, [r2, #20]
  auto padding = params.padding;
 23f5364:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 23f5368:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
 23f536a:	6913      	ldr	r3, [r2, #16]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f536c:	4649      	mov	r1, r9
 23f536e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23f5370:	930c      	str	r3, [sp, #48]	; 0x30
 23f5372:	9300      	str	r3, [sp, #0]
 23f5374:	4658      	mov	r0, fp
 23f5376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f5378:	f7fe ff91 	bl	23f429e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f537c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f537e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f5380:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f5382:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f5384:	9300      	str	r3, [sp, #0]
 23f5386:	4658      	mov	r0, fp
 23f5388:	4653      	mov	r3, sl
 23f538a:	f7fe ff88 	bl	23f429e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f538e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23f5390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f5392:	3b01      	subs	r3, #1
 23f5394:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5396:	3801      	subs	r0, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f5398:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f539a:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
 23f539e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f53a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
 23f53a2:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f53a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  total_padding = total_padding > 0 ? total_padding : 0;
 23f53a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f53ac:	3b01      	subs	r3, #1
 23f53ae:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f53b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f53b2:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f53b4:	1e50      	subs	r0, r2, #1
 23f53b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f53b8:	4641      	mov	r1, r8
 23f53ba:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
 23f53be:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 23f53c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 23f53c6:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 23f53c8:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
 23f53cc:	6032      	str	r2, [r6, #0]
 23f53ce:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
 23f53d0:	ea4f 026a 	mov.w	r2, sl, asr #1
  *offset = total_padding % 2;
 23f53d4:	f00a 0301 	and.w	r3, sl, #1
 23f53d8:	6072      	str	r2, [r6, #4]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f53da:	4628      	mov	r0, r5
 23f53dc:	2200      	movs	r2, #0
      padding, &out_height, &out_width);
 23f53de:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f53e0:	f000 fc2a 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f53e4:	4682      	mov	sl, r0
 23f53e6:	b940      	cbnz	r0, 23f53fa <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
 23f53e8:	4b31      	ldr	r3, [pc, #196]	; (23f54b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
 23f53ea:	692e      	ldr	r6, [r5, #16]
 23f53ec:	9300      	str	r3, [sp, #0]
 23f53ee:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
 23f53f0:	4628      	mov	r0, r5
 23f53f2:	4a2a      	ldr	r2, [pc, #168]	; (23f549c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f53f4:	492a      	ldr	r1, [pc, #168]	; (23f54a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
 23f53f6:	47b0      	blx	r6
 23f53f8:	e79b      	b.n	23f5332 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 23f53fa:	4622      	mov	r2, r4
 23f53fc:	4641      	mov	r1, r8
 23f53fe:	4628      	mov	r0, r5
 23f5400:	f000 fc1a 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f5404:	4681      	mov	r9, r0
 23f5406:	b920      	cbnz	r0, 23f5412 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
 23f5408:	4b2a      	ldr	r3, [pc, #168]	; (23f54b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
 23f540a:	692e      	ldr	r6, [r5, #16]
 23f540c:	9300      	str	r3, [sp, #0]
 23f540e:	2363      	movs	r3, #99	; 0x63
 23f5410:	e7ee      	b.n	23f53f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 23f5412:	4641      	mov	r1, r8
 23f5414:	2202      	movs	r2, #2
 23f5416:	4628      	mov	r0, r5
 23f5418:	f000 fc20 	bl	23f5c5c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f541c:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 23f541e:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f5420:	2200      	movs	r2, #0
 23f5422:	4628      	mov	r0, r5
 23f5424:	f000 fc0b 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f5428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f542a:	4680      	mov	r8, r0
 23f542c:	b920      	cbnz	r0, 23f5438 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
 23f542e:	4b22      	ldr	r3, [pc, #136]	; (23f54b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
 23f5430:	692e      	ldr	r6, [r5, #16]
 23f5432:	9300      	str	r3, [sp, #0]
 23f5434:	2367      	movs	r3, #103	; 0x67
 23f5436:	e7db      	b.n	23f53f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
 23f5438:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 23f543c:	2a01      	cmp	r2, #1
 23f543e:	d10a      	bne.n	23f5456 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
 23f5440:	f8da 3010 	ldr.w	r3, [sl, #16]
  return kTfLiteOk;
 23f5444:	2400      	movs	r4, #0
  data->input_zero_point = input->params.zero_point;
 23f5446:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
 23f5448:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23f544c:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
 23f544e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f5452:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
 23f5454:	e76d      	b.n	23f5332 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 23f5456:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 23f545a:	370c      	adds	r7, #12
 23f545c:	6852      	ldr	r2, [r2, #4]
 23f545e:	4651      	mov	r1, sl
 23f5460:	9208      	str	r2, [sp, #32]
 23f5462:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 23f5464:	9207      	str	r2, [sp, #28]
 23f5466:	6a72      	ldr	r2, [r6, #36]	; 0x24
 23f5468:	e9cd 0700 	strd	r0, r7, [sp]
 23f546c:	9206      	str	r2, [sp, #24]
 23f546e:	f106 0230 	add.w	r2, r6, #48	; 0x30
 23f5472:	9205      	str	r2, [sp, #20]
 23f5474:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 23f5478:	9204      	str	r2, [sp, #16]
 23f547a:	f106 0220 	add.w	r2, r6, #32
 23f547e:	9203      	str	r2, [sp, #12]
 23f5480:	f106 021c 	add.w	r2, r6, #28
 23f5484:	9202      	str	r2, [sp, #8]
 23f5486:	4628      	mov	r0, r5
 23f5488:	464a      	mov	r2, r9
 23f548a:	f000 fcd5 	bl	23f5e38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 23f548e:	4604      	mov	r4, r0
 23f5490:	2800      	cmp	r0, #0
 23f5492:	d0d5      	beq.n	23f5440 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
 23f5494:	e74d      	b.n	23f5332 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
 23f5496:	bf00      	nop
 23f5498:	023ff3d8 	.word	0x023ff3d8
 23f549c:	023ff359 	.word	0x023ff359
 23f54a0:	023ff006 	.word	0x023ff006
 23f54a4:	023ff593 	.word	0x023ff593
 23f54a8:	023ff3fc 	.word	0x023ff3fc
 23f54ac:	023feeb7 	.word	0x023feeb7
 23f54b0:	023ff01d 	.word	0x023ff01d
 23f54b4:	023ff02e 	.word	0x023ff02e
 23f54b8:	023ff040 	.word	0x023ff040

023f54bc <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f54bc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f54be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f54c0:	b90b      	cbnz	r3, 23f54c6 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0xa>
 23f54c2:	f002 f8ab 	bl	23f761c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f54c6:	2124      	movs	r1, #36	; 0x24
}
 23f54c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f54cc:	4718      	bx	r3
	...

023f54d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
 23f54d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f54d4:	ed2d 8b02 	vpush	{d8}
 23f54d8:	ee08 3a90 	vmov	s17, r3
      params->stride_height, params->stride_width,
 23f54dc:	e9d1 8901 	ldrd	r8, r9, [r1, #4]
  return t->dims->data[dim];
 23f54e0:	6893      	ldr	r3, [r2, #8]
                             OpData* data) {
 23f54e2:	4616      	mov	r6, r2
 23f54e4:	68df      	ldr	r7, [r3, #12]
 23f54e6:	689a      	ldr	r2, [r3, #8]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 23f54e8:	690b      	ldr	r3, [r1, #16]
                             OpData* data) {
 23f54ea:	b087      	sub	sp, #28
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 23f54ec:	9303      	str	r3, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f54ee:	2301      	movs	r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
 23f54f0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 23f54f4:	f891 a000 	ldrb.w	sl, [r1]
                             OpData* data) {
 23f54f8:	460d      	mov	r5, r1
 23f54fa:	9204      	str	r2, [sp, #16]
 23f54fc:	4639      	mov	r1, r7
 23f54fe:	465a      	mov	r2, fp
 23f5500:	9300      	str	r3, [sp, #0]
 23f5502:	ee08 0a10 	vmov	s16, r0
 23f5506:	4643      	mov	r3, r8
 23f5508:	4650      	mov	r0, sl
 23f550a:	f7fe fec8 	bl	23f429e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f550e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 23f5512:	2301      	movs	r3, #1
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f5514:	9005      	str	r0, [sp, #20]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f5516:	9300      	str	r3, [sp, #0]
 23f5518:	4650      	mov	r0, sl
 23f551a:	464b      	mov	r3, r9
 23f551c:	f7fe febf 	bl	23f429e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5520:	9b03      	ldr	r3, [sp, #12]
 23f5522:	3801      	subs	r0, #1
 23f5524:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
 23f5528:	9b04      	ldr	r3, [sp, #16]
 23f552a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 23f552c:	eba9 0903 	sub.w	r9, r9, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5530:	9b05      	ldr	r3, [sp, #20]
  total_padding = total_padding > 0 ? total_padding : 0;
 23f5532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f5536:	3b01      	subs	r3, #1
 23f5538:	fb08 b303 	mla	r3, r8, r3, fp
  int total_padding =
 23f553c:	1bdb      	subs	r3, r3, r7
  total_padding = total_padding > 0 ? total_padding : 0;
 23f553e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 23f5542:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 23f5544:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
 23f5548:	6022      	str	r2, [r4, #0]
 23f554a:	60a3      	str	r3, [r4, #8]
  return total_padding / 2;
 23f554c:	ea4f 0269 	mov.w	r2, r9, asr #1
  *offset = total_padding % 2;
 23f5550:	f009 0301 	and.w	r3, r9, #1
 23f5554:	6062      	str	r2, [r4, #4]
 23f5556:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
 23f5558:	7833      	ldrb	r3, [r6, #0]
 23f555a:	7d29      	ldrb	r1, [r5, #20]
 23f555c:	2b01      	cmp	r3, #1
 23f555e:	d11e      	bne.n	23f559e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xce>
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 23f5560:	2901      	cmp	r1, #1
 23f5562:	d103      	bne.n	23f556c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x9c>
    *activation_min = 0;
 23f5564:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 23f5566:	61e3      	str	r3, [r4, #28]
    *activation_max = std::numeric_limits<T>::max();
 23f5568:	4b16      	ldr	r3, [pc, #88]	; (23f55c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xf4>)
 23f556a:	e004      	b.n	23f5576 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
  } else if (activation == kTfLiteActRelu6) {
 23f556c:	2903      	cmp	r1, #3
 23f556e:	d10c      	bne.n	23f558a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xba>
    *activation_min = 0;
 23f5570:	2300      	movs	r3, #0
 23f5572:	61e3      	str	r3, [r4, #28]
    *activation_max = 6;
 23f5574:	4b14      	ldr	r3, [pc, #80]	; (23f55c8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xf8>)
 23f5576:	6223      	str	r3, [r4, #32]
  data->buffer_idx = -1;
 23f5578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  return kTfLiteOk;
 23f557c:	2000      	movs	r0, #0
  data->buffer_idx = -1;
 23f557e:	6123      	str	r3, [r4, #16]
}
 23f5580:	b007      	add	sp, #28
 23f5582:	ecbd 8b02 	vpop	{d8}
 23f5586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (activation == kTfLiteActReluN1To1) {
 23f558a:	2902      	cmp	r1, #2
 23f558c:	d104      	bne.n	23f5598 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc8>
    *activation_min = -1;
 23f558e:	4b0f      	ldr	r3, [pc, #60]	; (23f55cc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xfc>)
 23f5590:	61e3      	str	r3, [r4, #28]
    *activation_max = 1;
 23f5592:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 23f5596:	e7ee      	b.n	23f5576 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
    *activation_min = std::numeric_limits<T>::lowest();
 23f5598:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 23f559c:	e7e3      	b.n	23f5566 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x96>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f559e:	f104 0318 	add.w	r3, r4, #24
 23f55a2:	9300      	str	r3, [sp, #0]
 23f55a4:	ee18 2a90 	vmov	r2, s17
 23f55a8:	ee18 0a10 	vmov	r0, s16
 23f55ac:	f104 0314 	add.w	r3, r4, #20
 23f55b0:	f000 fbe0 	bl	23f5d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 23f55b4:	2800      	cmp	r0, #0
 23f55b6:	d1e3      	bne.n	23f5580 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xb0>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 23f55b8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 23f55bc:	429a      	cmp	r2, r3
 23f55be:	dddb      	ble.n	23f5578 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa8>
 23f55c0:	f002 f82c 	bl	23f761c <abort>
 23f55c4:	7f7fffff 	.word	0x7f7fffff
 23f55c8:	40c00000 	.word	0x40c00000
 23f55cc:	bf800000 	.word	0xbf800000

023f55d0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f55d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f55d4:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f55d8:	4604      	mov	r4, r0
 23f55da:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 23f55dc:	f1b8 0f00 	cmp.w	r8, #0
 23f55e0:	d101      	bne.n	23f55e6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 23f55e2:	f002 f81b 	bl	23f761c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f55e6:	694f      	ldr	r7, [r1, #20]
 23f55e8:	2f00      	cmp	r7, #0
 23f55ea:	d0fa      	beq.n	23f55e2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f55ec:	2200      	movs	r2, #0
 23f55ee:	f000 fb23 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f55f2:	4606      	mov	r6, r0
 23f55f4:	b960      	cbnz	r0, 23f5610 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f55f6:	4b11      	ldr	r3, [pc, #68]	; (23f563c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
 23f55f8:	6925      	ldr	r5, [r4, #16]
 23f55fa:	9300      	str	r3, [sp, #0]
 23f55fc:	f44f 738e 	mov.w	r3, #284	; 0x11c
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 23f5600:	4620      	mov	r0, r4
 23f5602:	4a0f      	ldr	r2, [pc, #60]	; (23f5640 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
 23f5604:	490f      	ldr	r1, [pc, #60]	; (23f5644 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
 23f5606:	47a8      	blx	r5
 23f5608:	2001      	movs	r0, #1

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));

  return kTfLiteOk;
}
 23f560a:	b002      	add	sp, #8
 23f560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f5610:	2200      	movs	r2, #0
 23f5612:	4629      	mov	r1, r5
 23f5614:	4620      	mov	r0, r4
 23f5616:	f000 fb12 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f561a:	4603      	mov	r3, r0
 23f561c:	b928      	cbnz	r0, 23f562a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 23f561e:	4b0a      	ldr	r3, [pc, #40]	; (23f5648 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 23f5620:	6925      	ldr	r5, [r4, #16]
 23f5622:	9300      	str	r3, [sp, #0]
 23f5624:	f44f 738f 	mov.w	r3, #286	; 0x11e
 23f5628:	e7ea      	b.n	23f5600 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f562a:	4632      	mov	r2, r6
 23f562c:	4639      	mov	r1, r7
 23f562e:	4620      	mov	r0, r4
 23f5630:	f8cd 8000 	str.w	r8, [sp]
 23f5634:	f7ff ff4c 	bl	23f54d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 23f5638:	e7e7      	b.n	23f560a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 23f563a:	bf00      	nop
 23f563c:	023ff01d 	.word	0x023ff01d
 23f5640:	023ff424 	.word	0x023ff424
 23f5644:	023ff006 	.word	0x023ff006
 23f5648:	023ff040 	.word	0x023ff040

023f564c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 23f564c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f5650:	690f      	ldr	r7, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 23f5652:	4604      	mov	r4, r0
 23f5654:	460d      	mov	r5, r1
 23f5656:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
 23f5658:	b90f      	cbnz	r7, 23f565e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f565a:	f001 ffdf 	bl	23f761c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f565e:	f8d1 9014 	ldr.w	r9, [r1, #20]
 23f5662:	f1b9 0f00 	cmp.w	r9, #0
 23f5666:	d0f8      	beq.n	23f565a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f5668:	2200      	movs	r2, #0
 23f566a:	f000 fae5 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f566e:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f5670:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f5672:	2200      	movs	r2, #0
 23f5674:	4620      	mov	r0, r4
 23f5676:	f000 fae2 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f567a:	4632      	mov	r2, r6
 23f567c:	4603      	mov	r3, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f567e:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f5680:	4649      	mov	r1, r9
 23f5682:	4620      	mov	r0, r4
 23f5684:	9700      	str	r7, [sp, #0]
 23f5686:	f7ff ff23 	bl	23f54d0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 23f568a:	4605      	mov	r5, r0
 23f568c:	bb70      	cbnz	r0, 23f56ec <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

  if (input->type == kTfLiteInt8) {
 23f568e:	7833      	ldrb	r3, [r6, #0]
 23f5690:	2b09      	cmp	r3, #9
 23f5692:	d12b      	bne.n	23f56ec <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    RuntimeShape input_shape = GetTensorShape(input);
 23f5694:	4631      	mov	r1, r6
 23f5696:	a802      	add	r0, sp, #8
 23f5698:	f7fe fdd1 	bl	23f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f569c:	9b02      	ldr	r3, [sp, #8]
 23f569e:	2b04      	cmp	r3, #4
 23f56a0:	d1db      	bne.n	23f565a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

    RuntimeShape output_shape = GetTensorShape(output);
 23f56a2:	4641      	mov	r1, r8
 23f56a4:	a808      	add	r0, sp, #32
 23f56a6:	f7fe fdca 	bl	23f423e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f56aa:	9b08      	ldr	r3, [sp, #32]
 23f56ac:	2b04      	cmp	r3, #4
 23f56ae:	d1d4      	bne.n	23f565a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f56b0:	2303      	movs	r3, #3
 23f56b2:	aa08      	add	r2, sp, #32
 23f56b4:	4619      	mov	r1, r3
 23f56b6:	a802      	add	r0, sp, #8
 23f56b8:	f7fe fdb2 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f56bc:	4606      	mov	r6, r0
    const int output_width = output_shape.Dims(2);
 23f56be:	2102      	movs	r1, #2
 23f56c0:	a808      	add	r0, sp, #32
 23f56c2:	f7fe fd5c 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 23f56c6:	4631      	mov	r1, r6
 23f56c8:	f7f9 ff7c 	bl	23ef5c4 <arm_avgpool_s8_get_buffer_size>

    if (buffer_size > 0) {
 23f56cc:	1e01      	subs	r1, r0, #0
 23f56ce:	dd11      	ble.n	23f56f4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f56d0:	4620      	mov	r0, r4
 23f56d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f56d4:	f107 0210 	add.w	r2, r7, #16
 23f56d8:	4798      	blx	r3
 23f56da:	4604      	mov	r4, r0
 23f56dc:	b168      	cbz	r0, 23f56fa <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
 23f56de:	a808      	add	r0, sp, #32
 23f56e0:	f7fe fd42 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f56e4:	a802      	add	r0, sp, #8
 23f56e6:	f7fe fd3f 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f56ea:	4625      	mov	r5, r4
    } else {
      data->buffer_idx = -1;
    }
  }
  return kTfLiteOk;
}
 23f56ec:	4628      	mov	r0, r5
 23f56ee:	b00f      	add	sp, #60	; 0x3c
 23f56f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      data->buffer_idx = -1;
 23f56f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f56f8:	613b      	str	r3, [r7, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 23f56fa:	a808      	add	r0, sp, #32
 23f56fc:	f7fe fd34 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
 23f5700:	a802      	add	r0, sp, #8
 23f5702:	f7fe fd31 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
 23f5706:	e7f1      	b.n	23f56ec <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

023f5708 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 23f5708:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f570a:	694b      	ldr	r3, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 23f570c:	4604      	mov	r4, r0
 23f570e:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f5710:	b90b      	cbnz	r3, 23f5716 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
 23f5712:	f001 ff83 	bl	23f761c <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f5716:	690b      	ldr	r3, [r1, #16]
 23f5718:	2b00      	cmp	r3, #0
 23f571a:	d0fa      	beq.n	23f5712 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa>
  return GetMutableEvalInput(context, node, index);
 23f571c:	2200      	movs	r2, #0
 23f571e:	f7fe fd71 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f5722:	4605      	mov	r5, r0
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f5724:	4631      	mov	r1, r6
 23f5726:	2200      	movs	r2, #0
 23f5728:	4620      	mov	r0, r4
 23f572a:	f7fe fdaa 	bl	23f4282 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 23f572e:	7a28      	ldrb	r0, [r5, #8]
 23f5730:	6926      	ldr	r6, [r4, #16]
 23f5732:	2803      	cmp	r0, #3
 23f5734:	d003      	beq.n	23f573e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x36>
 23f5736:	2809      	cmp	r0, #9
 23f5738:	d001      	beq.n	23f573e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x36>
 23f573a:	2801      	cmp	r0, #1
 23f573c:	d108      	bne.n	23f5750 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x48>

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    case kTfLiteInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f573e:	f7f8 f845 	bl	23ed7cc <TfLiteTypeGetName>
 23f5742:	7a2b      	ldrb	r3, [r5, #8]
 23f5744:	4602      	mov	r2, r0
 23f5746:	4906      	ldr	r1, [pc, #24]	; (23f5760 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x58>)
 23f5748:	4620      	mov	r0, r4
 23f574a:	47b0      	blx	r6
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 23f574c:	2001      	movs	r0, #1
 23f574e:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 23f5750:	f7f8 f83c 	bl	23ed7cc <TfLiteTypeGetName>
 23f5754:	4903      	ldr	r1, [pc, #12]	; (23f5764 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 23f5756:	4602      	mov	r2, r0
 23f5758:	4620      	mov	r0, r4
 23f575a:	47b0      	blx	r6
      return kTfLiteError;
 23f575c:	e7f6      	b.n	23f574c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x44>
 23f575e:	bf00      	nop
 23f5760:	023ff0b6 	.word	0x023ff0b6
 23f5764:	023ff49f 	.word	0x023ff49f

023f5768 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f5768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f576c:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f5770:	4605      	mov	r5, r0
 23f5772:	460c      	mov	r4, r1
 23f5774:	b0a4      	sub	sp, #144	; 0x90
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f5776:	f1b9 0f00 	cmp.w	r9, #0
 23f577a:	d101      	bne.n	23f5780 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x18>
 23f577c:	f001 ff4e 	bl	23f761c <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f5780:	f8d1 8010 	ldr.w	r8, [r1, #16]
 23f5784:	f1b8 0f00 	cmp.w	r8, #0
 23f5788:	d0f8      	beq.n	23f577c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14>
 23f578a:	2200      	movs	r2, #0
 23f578c:	f7fe fd3a 	bl	23f4204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f5790:	4607      	mov	r7, r0
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f5792:	4621      	mov	r1, r4
 23f5794:	2200      	movs	r2, #0
 23f5796:	4628      	mov	r0, r5
 23f5798:	f7fe fd73 	bl	23f4282 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  switch (input->type) {
 23f579c:	7a3c      	ldrb	r4, [r7, #8]
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f579e:	4606      	mov	r6, r0
  switch (input->type) {
 23f57a0:	2c03      	cmp	r4, #3
 23f57a2:	d010      	beq.n	23f57c6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 23f57a4:	2c09      	cmp	r4, #9
 23f57a6:	d019      	beq.n	23f57dc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 23f57a8:	2c01      	cmp	r4, #1
      #endif

      MaxEvalInt8(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 23f57aa:	4620      	mov	r0, r4
 23f57ac:	692e      	ldr	r6, [r5, #16]
  switch (input->type) {
 23f57ae:	d17a      	bne.n	23f58a6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x13e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f57b0:	f7f8 f80c 	bl	23ed7cc <TfLiteTypeGetName>
 23f57b4:	7a3b      	ldrb	r3, [r7, #8]
 23f57b6:	4602      	mov	r2, r0
 23f57b8:	493e      	ldr	r1, [pc, #248]	; (23f58b4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f57ba:	4628      	mov	r0, r5
 23f57bc:	47b0      	blx	r6
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 23f57be:	4620      	mov	r0, r4
 23f57c0:	b024      	add	sp, #144	; 0x90
 23f57c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f57c6:	4620      	mov	r0, r4
 23f57c8:	692e      	ldr	r6, [r5, #16]
 23f57ca:	f7f7 ffff 	bl	23ed7cc <TfLiteTypeGetName>
 23f57ce:	7a3b      	ldrb	r3, [r7, #8]
 23f57d0:	4602      	mov	r2, r0
 23f57d2:	4938      	ldr	r1, [pc, #224]	; (23f58b4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f57d4:	4628      	mov	r0, r5
 23f57d6:	47b0      	blx	r6
      return kTfLiteError;
 23f57d8:	2401      	movs	r4, #1
 23f57da:	e7f0      	b.n	23f57be <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f57dc:	4639      	mov	r1, r7
 23f57de:	a812      	add	r0, sp, #72	; 0x48
 23f57e0:	f000 f87a 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f57e4:	4631      	mov	r1, r6
 23f57e6:	a818      	add	r0, sp, #96	; 0x60
 23f57e8:	f000 f876 	bl	23f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f57ec:	2303      	movs	r3, #3
 23f57ee:	aa18      	add	r2, sp, #96	; 0x60
 23f57f0:	4619      	mov	r1, r3
 23f57f2:	a812      	add	r0, sp, #72	; 0x48
 23f57f4:	f7fe fd14 	bl	23f4220 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.n = 1;
 23f57f8:	2401      	movs	r4, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f57fa:	4682      	mov	sl, r0
  input_dims.h = input_shape.Dims(1);
 23f57fc:	4621      	mov	r1, r4
 23f57fe:	a812      	add	r0, sp, #72	; 0x48
  input_dims.n = 1;
 23f5800:	9406      	str	r4, [sp, #24]
  input_dims.h = input_shape.Dims(1);
 23f5802:	f7fe fcbc 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  input_dims.w = input_shape.Dims(2);
 23f5806:	2102      	movs	r1, #2
  input_dims.h = input_shape.Dims(1);
 23f5808:	9007      	str	r0, [sp, #28]
  input_dims.w = input_shape.Dims(2);
 23f580a:	a812      	add	r0, sp, #72	; 0x48
 23f580c:	f7fe fcb7 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.h = output_shape.Dims(1);
 23f5810:	4621      	mov	r1, r4
  input_dims.c = depth;
 23f5812:	e9cd 0a08 	strd	r0, sl, [sp, #32]
  output_dims.h = output_shape.Dims(1);
 23f5816:	a818      	add	r0, sp, #96	; 0x60
  output_dims.n = 1;
 23f5818:	940a      	str	r4, [sp, #40]	; 0x28
  output_dims.h = output_shape.Dims(1);
 23f581a:	f7fe fcb0 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.w = output_shape.Dims(2);
 23f581e:	2102      	movs	r1, #2
  output_dims.h = output_shape.Dims(1);
 23f5820:	900b      	str	r0, [sp, #44]	; 0x2c
  output_dims.w = output_shape.Dims(2);
 23f5822:	a818      	add	r0, sp, #96	; 0x60
 23f5824:	f7fe fcab 	bl	23f417e <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.c = depth;
 23f5828:	e9cd 0a0c 	strd	r0, sl, [sp, #48]	; 0x30
  pool_params.stride.h = params->stride_height;
 23f582c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 23f5830:	931f      	str	r3, [sp, #124]	; 0x7c
  pool_params.stride.w = params->stride_width;
 23f5832:	f8d9 3004 	ldr.w	r3, [r9, #4]
 23f5836:	931e      	str	r3, [sp, #120]	; 0x78
  pool_params.padding.h = data.padding.height;
 23f5838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f583c:	9321      	str	r3, [sp, #132]	; 0x84
  pool_params.padding.w = data.padding.width;
 23f583e:	f8d8 3000 	ldr.w	r3, [r8]
  filter_dims.n = 1;
 23f5842:	940e      	str	r4, [sp, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 23f5844:	9320      	str	r3, [sp, #128]	; 0x80
  pool_params.activation.min = data.activation_min;
 23f5846:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f584a:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.activation.max = data.activation_max;
 23f584c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 23f5850:	9323      	str	r3, [sp, #140]	; 0x8c
  filter_dims.h = params->filter_height;
 23f5852:	f8d9 3010 	ldr.w	r3, [r9, #16]
  if (data.buffer_idx > -1) {
 23f5856:	f8d8 1010 	ldr.w	r1, [r8, #16]
  filter_dims.h = params->filter_height;
 23f585a:	930f      	str	r3, [sp, #60]	; 0x3c
  filter_dims.w = params->filter_width;
 23f585c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  filter_dims.c = 1;
 23f5860:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  ctx.buf = nullptr;
 23f5864:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 23f5866:	4299      	cmp	r1, r3
  ctx.size = 0;
 23f5868:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (data.buffer_idx > -1) {
 23f586c:	db03      	blt.n	23f5876 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f586e:	4628      	mov	r0, r5
 23f5870:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 23f5872:	4798      	blx	r3
 23f5874:	9004      	str	r0, [sp, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f5876:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f5878:	b106      	cbz	r6, 23f587c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x114>
 23f587a:	6836      	ldr	r6, [r6, #0]
  TFLITE_DCHECK_EQ(
 23f587c:	aa0a      	add	r2, sp, #40	; 0x28
 23f587e:	9201      	str	r2, [sp, #4]
 23f5880:	aa0e      	add	r2, sp, #56	; 0x38
 23f5882:	9200      	str	r2, [sp, #0]
 23f5884:	9602      	str	r6, [sp, #8]
 23f5886:	aa06      	add	r2, sp, #24
 23f5888:	a91e      	add	r1, sp, #120	; 0x78
 23f588a:	a804      	add	r0, sp, #16
 23f588c:	f7f9 fe9c 	bl	23ef5c8 <arm_max_pool_s8>
 23f5890:	4604      	mov	r4, r0
 23f5892:	2800      	cmp	r0, #0
 23f5894:	f47f af72 	bne.w	23f577c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f5898:	a818      	add	r0, sp, #96	; 0x60
 23f589a:	f7fe fc65 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f589e:	a812      	add	r0, sp, #72	; 0x48
 23f58a0:	f7fe fc62 	bl	23f4168 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 23f58a4:	e78b      	b.n	23f57be <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 23f58a6:	f7f7 ff91 	bl	23ed7cc <TfLiteTypeGetName>
 23f58aa:	4903      	ldr	r1, [pc, #12]	; (23f58b8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x150>)
 23f58ac:	4602      	mov	r2, r0
 23f58ae:	4628      	mov	r0, r5
 23f58b0:	47b0      	blx	r6
 23f58b2:	e791      	b.n	23f57d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
 23f58b4:	023ff0b6 	.word	0x023ff0b6
 23f58b8:	023ff4c8 	.word	0x023ff4c8

023f58bc <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 23f58bc:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f58be:	4604      	mov	r4, r0
TfLiteRegistration Register_MAX_POOL_2D() {
 23f58c0:	4606      	mov	r6, r0
          /*version=*/0};
 23f58c2:	4d04      	ldr	r5, [pc, #16]	; (23f58d4 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
 23f58c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f58c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f58c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f58cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f58d0:	4630      	mov	r0, r6
 23f58d2:	bd70      	pop	{r4, r5, r6, pc}
 23f58d4:	023fb9c8 	.word	0x023fb9c8

023f58d8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 23f58d8:	b570      	push	{r4, r5, r6, lr}
 23f58da:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 23f58dc:	b109      	cbz	r1, 23f58e2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 23f58de:	684d      	ldr	r5, [r1, #4]
 23f58e0:	b91d      	cbnz	r5, 23f58ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 23f58e2:	2300      	movs	r3, #0
 23f58e4:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f58e6:	4620      	mov	r0, r4
 23f58e8:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
 23f58ea:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
 23f58ee:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
 23f58f0:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f58f2:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 23f58f6:	dc05      	bgt.n	23f5904 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f58f8:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f58fa:	4632      	mov	r2, r6
 23f58fc:	4629      	mov	r1, r5
 23f58fe:	f005 fe22 	bl	23fb546 <memcpy>
  }
 23f5902:	e7f0      	b.n	23f58e6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
 23f5904:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 23f5908:	4293      	cmp	r3, r2
 23f590a:	bfb4      	ite	lt
 23f590c:	4630      	movlt	r0, r6
 23f590e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f5912:	f7f7 ff40 	bl	23ed796 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f5916:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f5918:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f591a:	2b05      	cmp	r3, #5
 23f591c:	dced      	bgt.n	23f58fa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
 23f591e:	e7eb      	b.n	23f58f8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

023f5920 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
 23f5920:	2801      	cmp	r0, #1
 23f5922:	d002      	beq.n	23f592a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 23f5924:	2802      	cmp	r0, #2
 23f5926:	bf18      	it	ne
 23f5928:	2000      	movne	r0, #0
  }
}
 23f592a:	4770      	bx	lr

023f592c <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 23f592c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f592e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f5930:	b90b      	cbnz	r3, 23f5936 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
 23f5932:	f001 fe73 	bl	23f761c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 23f5936:	2138      	movs	r1, #56	; 0x38
}
 23f5938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 23f593c:	4718      	bx	r3
	...

023f5940 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f5940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f5944:	ed2d 8b02 	vpush	{d8}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f5948:	680b      	ldr	r3, [r1, #0]
 23f594a:	4604      	mov	r4, r0
 23f594c:	681e      	ldr	r6, [r3, #0]
 23f594e:	460f      	mov	r7, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f5950:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f5952:	b088      	sub	sp, #32
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f5954:	d011      	beq.n	23f597a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 23f5956:	2501      	movs	r5, #1
 23f5958:	4b8c      	ldr	r3, [pc, #560]	; (23f5b8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f595a:	e9cd 6502 	strd	r6, r5, [sp, #8]
 23f595e:	9301      	str	r3, [sp, #4]
 23f5960:	4b8b      	ldr	r3, [pc, #556]	; (23f5b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 23f5962:	4a8c      	ldr	r2, [pc, #560]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5964:	9300      	str	r3, [sp, #0]
 23f5966:	6904      	ldr	r4, [r0, #16]
 23f5968:	237b      	movs	r3, #123	; 0x7b
 23f596a:	498b      	ldr	r1, [pc, #556]	; (23f5b98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f596c:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
 23f596e:	4628      	mov	r0, r5
 23f5970:	b008      	add	sp, #32
 23f5972:	ecbd 8b02 	vpop	{d8}
 23f5976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 23f597a:	684b      	ldr	r3, [r1, #4]
 23f597c:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f597e:	2d01      	cmp	r5, #1
 23f5980:	d00c      	beq.n	23f599c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 23f5982:	4b82      	ldr	r3, [pc, #520]	; (23f5b8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f5984:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23f5988:	9301      	str	r3, [sp, #4]
 23f598a:	4b84      	ldr	r3, [pc, #528]	; (23f5b9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 23f598c:	4a81      	ldr	r2, [pc, #516]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f598e:	9300      	str	r3, [sp, #0]
 23f5990:	6904      	ldr	r4, [r0, #16]
 23f5992:	237c      	movs	r3, #124	; 0x7c
 23f5994:	4980      	ldr	r1, [pc, #512]	; (23f5b98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f5996:	47a0      	blx	r4
    return kTfLiteError;
 23f5998:	2501      	movs	r5, #1
 23f599a:	e7e8      	b.n	23f596e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
 23f599c:	2200      	movs	r2, #0
 23f599e:	f000 f94b 	bl	23f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f59a2:	4606      	mov	r6, r0
 23f59a4:	b940      	cbnz	r0, 23f59b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
 23f59a6:	4b7e      	ldr	r3, [pc, #504]	; (23f5ba0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 23f59a8:	9300      	str	r3, [sp, #0]
 23f59aa:	237e      	movs	r3, #126	; 0x7e
 23f59ac:	6926      	ldr	r6, [r4, #16]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 23f59ae:	4620      	mov	r0, r4
 23f59b0:	4a78      	ldr	r2, [pc, #480]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f59b2:	497c      	ldr	r1, [pc, #496]	; (23f5ba4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 23f59b4:	47b0      	blx	r6
 23f59b6:	e7da      	b.n	23f596e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 23f59b8:	6883      	ldr	r3, [r0, #8]
 23f59ba:	681b      	ldr	r3, [r3, #0]
 23f59bc:	2b00      	cmp	r3, #0
 23f59be:	dc04      	bgt.n	23f59ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 23f59c0:	4b79      	ldr	r3, [pc, #484]	; (23f5ba8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 23f59c2:	9300      	str	r3, [sp, #0]
 23f59c4:	6926      	ldr	r6, [r4, #16]
 23f59c6:	237f      	movs	r3, #127	; 0x7f
 23f59c8:	e7f1      	b.n	23f59ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
 23f59ca:	2200      	movs	r2, #0
 23f59cc:	4639      	mov	r1, r7
 23f59ce:	4620      	mov	r0, r4
 23f59d0:	f000 f935 	bl	23f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f59d4:	4603      	mov	r3, r0
 23f59d6:	b920      	cbnz	r0, 23f59e2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 23f59d8:	4b74      	ldr	r3, [pc, #464]	; (23f5bac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 23f59da:	9300      	str	r3, [sp, #0]
 23f59dc:	6926      	ldr	r6, [r4, #16]
 23f59de:	2381      	movs	r3, #129	; 0x81
 23f59e0:	e7e5      	b.n	23f59ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 23f59e2:	f8d7 8010 	ldr.w	r8, [r7, #16]
 23f59e6:	f1b8 0f00 	cmp.w	r8, #0
 23f59ea:	d104      	bne.n	23f59f6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
 23f59ec:	4b70      	ldr	r3, [pc, #448]	; (23f5bb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 23f59ee:	9300      	str	r3, [sp, #0]
 23f59f0:	6926      	ldr	r6, [r4, #16]
 23f59f2:	2383      	movs	r3, #131	; 0x83
 23f59f4:	e7db      	b.n	23f59ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
 23f59f6:	7830      	ldrb	r0, [r6, #0]
 23f59f8:	2807      	cmp	r0, #7
 23f59fa:	d108      	bne.n	23f5a0e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f59fc:	6927      	ldr	r7, [r4, #16]
 23f59fe:	f7f7 fee5 	bl	23ed7cc <TfLiteTypeGetName>
 23f5a02:	7833      	ldrb	r3, [r6, #0]
 23f5a04:	4602      	mov	r2, r0
 23f5a06:	496b      	ldr	r1, [pc, #428]	; (23f5bb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 23f5a08:	4620      	mov	r0, r4
 23f5a0a:	47b8      	blx	r7
    return kTfLiteError;
 23f5a0c:	e7af      	b.n	23f596e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  if (output->type == kTfLiteInt16) {
 23f5a0e:	781a      	ldrb	r2, [r3, #0]
 23f5a10:	2a07      	cmp	r2, #7
 23f5a12:	d106      	bne.n	23f5a22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_ENSURE(context,
 23f5a14:	2809      	cmp	r0, #9
 23f5a16:	d014      	beq.n	23f5a42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 23f5a18:	4b67      	ldr	r3, [pc, #412]	; (23f5bb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 23f5a1a:	9300      	str	r3, [sp, #0]
 23f5a1c:	6926      	ldr	r6, [r4, #16]
 23f5a1e:	2399      	movs	r3, #153	; 0x99
 23f5a20:	e7c5      	b.n	23f59ae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f5a22:	4290      	cmp	r0, r2
 23f5a24:	f000 809a 	beq.w	23f5b5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 23f5a28:	4b64      	ldr	r3, [pc, #400]	; (23f5bbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f5a2a:	e9cd 0202 	strd	r0, r2, [sp, #8]
 23f5a2e:	9301      	str	r3, [sp, #4]
 23f5a30:	4b63      	ldr	r3, [pc, #396]	; (23f5bc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 23f5a32:	4620      	mov	r0, r4
 23f5a34:	9300      	str	r3, [sp, #0]
 23f5a36:	6926      	ldr	r6, [r4, #16]
 23f5a38:	239c      	movs	r3, #156	; 0x9c
 23f5a3a:	4a56      	ldr	r2, [pc, #344]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5a3c:	4956      	ldr	r1, [pc, #344]	; (23f5b98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f5a3e:	47b0      	blx	r6
 23f5a40:	e795      	b.n	23f596e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 23f5a42:	691a      	ldr	r2, [r3, #16]
 23f5a44:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 23f5a48:	d00d      	beq.n	23f5a66 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x126>
 23f5a4a:	4b5e      	ldr	r3, [pc, #376]	; (23f5bc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 23f5a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f5a50:	4b5d      	ldr	r3, [pc, #372]	; (23f5bc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 23f5a52:	9301      	str	r3, [sp, #4]
 23f5a54:	4b5d      	ldr	r3, [pc, #372]	; (23f5bcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f5a56:	9300      	str	r3, [sp, #0]
 23f5a58:	2337      	movs	r3, #55	; 0x37
 23f5a5a:	6925      	ldr	r5, [r4, #16]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f5a5c:	4620      	mov	r0, r4
 23f5a5e:	4a4d      	ldr	r2, [pc, #308]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5a60:	494d      	ldr	r1, [pc, #308]	; (23f5b98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f5a62:	47a8      	blx	r5
 23f5a64:	e798      	b.n	23f5998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 23f5a66:	eddf 7a5a 	vldr	s15, [pc, #360]	; 23f5bd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>
 23f5a6a:	ed93 7a03 	vldr	s14, [r3, #12]
 23f5a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f5a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5a76:	eddf 6a57 	vldr	s13, [pc, #348]	; 23f5bd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>
 23f5a7a:	bfcc      	ite	gt
 23f5a7c:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 23f5a80:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 23f5a84:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f5a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5a8c:	dd35      	ble.n	23f5afa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f5a8e:	2200      	movs	r2, #0
 23f5a90:	4b51      	ldr	r3, [pc, #324]	; (23f5bd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 23f5a92:	ee17 0a10 	vmov	r0, s14
 23f5a96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f5a9a:	f7f7 f8ad 	bl	23ecbf8 <__aeabi_f2d>
 23f5a9e:	4b4f      	ldr	r3, [pc, #316]	; (23f5bdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 23f5aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f5aa4:	9301      	str	r3, [sp, #4]
 23f5aa6:	4b4e      	ldr	r3, [pc, #312]	; (23f5be0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 23f5aa8:	4620      	mov	r0, r4
 23f5aaa:	9300      	str	r3, [sp, #0]
 23f5aac:	6925      	ldr	r5, [r4, #16]
 23f5aae:	2338      	movs	r3, #56	; 0x38
 23f5ab0:	4a38      	ldr	r2, [pc, #224]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5ab2:	494c      	ldr	r1, [pc, #304]	; (23f5be4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
 23f5ab4:	47a8      	blx	r5
 23f5ab6:	e76f      	b.n	23f5998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f5ab8:	691a      	ldr	r2, [r3, #16]
 23f5aba:	f112 0f80 	cmn.w	r2, #128	; 0x80
 23f5abe:	d00a      	beq.n	23f5ad6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x196>
 23f5ac0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 23f5ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f5ac8:	4b47      	ldr	r3, [pc, #284]	; (23f5be8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 23f5aca:	9301      	str	r3, [sp, #4]
 23f5acc:	4b3f      	ldr	r3, [pc, #252]	; (23f5bcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f5ace:	9300      	str	r3, [sp, #0]
 23f5ad0:	6925      	ldr	r5, [r4, #16]
 23f5ad2:	233c      	movs	r3, #60	; 0x3c
 23f5ad4:	e7c2      	b.n	23f5a5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 23f5ad6:	ed93 7a03 	vldr	s14, [r3, #12]
 23f5ada:	eddf 7a44 	vldr	s15, [pc, #272]	; 23f5bec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
 23f5ade:	eeb4 7a67 	vcmp.f32	s14, s15
 23f5ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5ae6:	d008      	beq.n	23f5afa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f5ae8:	4b41      	ldr	r3, [pc, #260]	; (23f5bf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 23f5aea:	4620      	mov	r0, r4
 23f5aec:	9300      	str	r3, [sp, #0]
 23f5aee:	6925      	ldr	r5, [r4, #16]
 23f5af0:	233d      	movs	r3, #61	; 0x3d
 23f5af2:	4a28      	ldr	r2, [pc, #160]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5af4:	492b      	ldr	r1, [pc, #172]	; (23f5ba4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 23f5af6:	47a8      	blx	r5
 23f5af8:	e74e      	b.n	23f5998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      tflite::PreprocessSoftmaxScaling(
 23f5afa:	68f0      	ldr	r0, [r6, #12]
 23f5afc:	f7f7 f87c 	bl	23ecbf8 <__aeabi_f2d>
          static_cast<double>(params->beta),
 23f5b00:	697b      	ldr	r3, [r7, #20]
      tflite::PreprocessSoftmaxScaling(
 23f5b02:	ec41 0b18 	vmov	d8, r0, r1
 23f5b06:	6818      	ldr	r0, [r3, #0]
 23f5b08:	f7f7 f876 	bl	23ecbf8 <__aeabi_f2d>
 23f5b0c:	f108 0408 	add.w	r4, r8, #8
 23f5b10:	ec41 0b10 	vmov	d0, r0, r1
 23f5b14:	eeb0 1a48 	vmov.f32	s2, s16
 23f5b18:	eef0 1a68 	vmov.f32	s3, s17
 23f5b1c:	4621      	mov	r1, r4
 23f5b1e:	2005      	movs	r0, #5
 23f5b20:	aa07      	add	r2, sp, #28
 23f5b22:	f000 fb15 	bl	23f6150 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 23f5b26:	9907      	ldr	r1, [sp, #28]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f5b28:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
 23f5b2a:	f8c8 100c 	str.w	r1, [r8, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f5b2e:	2005      	movs	r0, #5
 23f5b30:	f000 fb4a 	bl	23f61c8 <_ZN6tflite20CalculateInputRadiusEiii>
 23f5b34:	f7f7 f84e 	bl	23ecbd4 <__aeabi_i2d>
 23f5b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
 23f5b3c:	4619      	mov	r1, r3
 23f5b3e:	f7f7 fb63 	bl	23ed208 <__aeabi_d2iz>
  return kTfLiteOk;
 23f5b42:	2500      	movs	r5, #0
      op_data->diff_min =
 23f5b44:	f8c8 0018 	str.w	r0, [r8, #24]
  return kTfLiteOk;
 23f5b48:	e711      	b.n	23f596e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f5b4a:	6925      	ldr	r5, [r4, #16]
 23f5b4c:	f7f7 fe3e 	bl	23ed7cc <TfLiteTypeGetName>
 23f5b50:	7833      	ldrb	r3, [r6, #0]
 23f5b52:	4602      	mov	r2, r0
 23f5b54:	4917      	ldr	r1, [pc, #92]	; (23f5bb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 23f5b56:	4620      	mov	r0, r4
 23f5b58:	47a8      	blx	r5
 23f5b5a:	e71d      	b.n	23f5998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 23f5b5c:	2809      	cmp	r0, #9
 23f5b5e:	d1f4      	bne.n	23f5b4a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 23f5b60:	2a09      	cmp	r2, #9
 23f5b62:	d0a9      	beq.n	23f5ab8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>
 23f5b64:	4610      	mov	r0, r2
 23f5b66:	6926      	ldr	r6, [r4, #16]
 23f5b68:	f7f7 fe30 	bl	23ed7cc <TfLiteTypeGetName>
 23f5b6c:	4605      	mov	r5, r0
 23f5b6e:	2009      	movs	r0, #9
 23f5b70:	f7f7 fe2c 	bl	23ed7cc <TfLiteTypeGetName>
 23f5b74:	4b1f      	ldr	r3, [pc, #124]	; (23f5bf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
 23f5b76:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f5b7a:	9301      	str	r3, [sp, #4]
 23f5b7c:	4b0f      	ldr	r3, [pc, #60]	; (23f5bbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f5b7e:	4620      	mov	r0, r4
 23f5b80:	9300      	str	r3, [sp, #0]
 23f5b82:	4a04      	ldr	r2, [pc, #16]	; (23f5b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f5b84:	233b      	movs	r3, #59	; 0x3b
 23f5b86:	491c      	ldr	r1, [pc, #112]	; (23f5bf8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
 23f5b88:	47b0      	blx	r6
 23f5b8a:	e705      	b.n	23f5998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 23f5b8c:	023ff593 	.word	0x023ff593
 23f5b90:	023ff56b 	.word	0x023ff56b
 23f5b94:	023ff4e9 	.word	0x023ff4e9
 23f5b98:	023feeb7 	.word	0x023feeb7
 23f5b9c:	023ff1c2 	.word	0x023ff1c2
 23f5ba0:	023ff01d 	.word	0x023ff01d
 23f5ba4:	023ff006 	.word	0x023ff006
 23f5ba8:	023ff57b 	.word	0x023ff57b
 23f5bac:	023ff040 	.word	0x023ff040
 23f5bb0:	023ff595 	.word	0x023ff595
 23f5bb4:	023ff0b6 	.word	0x023ff0b6
 23f5bb8:	023ff5b0 	.word	0x023ff5b0
 23f5bbc:	023ff06c 	.word	0x023ff06c
 23f5bc0:	023ff079 	.word	0x023ff079
 23f5bc4:	ffff8000 	.word	0xffff8000
 23f5bc8:	023ff5ea 	.word	0x023ff5ea
 23f5bcc:	023ff5f1 	.word	0x023ff5f1
 23f5bd0:	37800000 	.word	0x37800000
 23f5bd4:	3283126f 	.word	0x3283126f
 23f5bd8:	3ef00000 	.word	0x3ef00000
 23f5bdc:	023ff62b 	.word	0x023ff62b
 23f5be0:	023ff637 	.word	0x023ff637
 23f5be4:	023ff60b 	.word	0x023ff60b
 23f5be8:	023ff658 	.word	0x023ff658
 23f5bec:	3b800000 	.word	0x3b800000
 23f5bf0:	023ff65d 	.word	0x023ff65d
 23f5bf4:	023ff64c 	.word	0x023ff64c
 23f5bf8:	023ff052 	.word	0x023ff052

023f5bfc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
  return context->GetTensor(context, tensor_index);
 23f5bfc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 23f5bfe:	4718      	bx	r3

023f5c00 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 23f5c00:	ed90 7a00 	vldr	s14, [r0]
 23f5c04:	eec0 7a07 	vdiv.f32	s15, s0, s14
  { return __builtin_roundf(__x); }
 23f5c08:	fef8 7a67 	vrinta.f32	s15, s15
 23f5c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  };
 23f5c10:	ee17 3a90 	vmov	r3, s15
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 23f5c14:	6840      	ldr	r0, [r0, #4]
  };
 23f5c16:	4403      	add	r3, r0
 23f5c18:	4618      	mov	r0, r3
 23f5c1a:	4770      	bx	lr

023f5c1c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
 23f5c1c:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f5c1e:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
 23f5c22:	db07      	blt.n	23f5c34 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
 23f5c24:	4293      	cmp	r3, r2
 23f5c26:	dd05      	ble.n	23f5c34 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
 23f5c28:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
 23f5c2c:	2900      	cmp	r1, #0
 23f5c2e:	db01      	blt.n	23f5c34 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
 23f5c30:	f7ff bfe4 	b.w	23f5bfc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
 23f5c34:	2000      	movs	r0, #0
 23f5c36:	4770      	bx	lr

023f5c38 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
 23f5c38:	6809      	ldr	r1, [r1, #0]
 23f5c3a:	f7ff bfef 	b.w	23f5c1c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

023f5c3e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
 23f5c3e:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
 23f5c40:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f5c42:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 23f5c46:	db07      	blt.n	23f5c58 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
 23f5c48:	4291      	cmp	r1, r2
 23f5c4a:	dd05      	ble.n	23f5c58 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
 23f5c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 23f5c50:	2900      	cmp	r1, #0
 23f5c52:	db01      	blt.n	23f5c58 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
 23f5c54:	f7ff bfd2 	b.w	23f5bfc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
 23f5c58:	2000      	movs	r0, #0
 23f5c5a:	4770      	bx	lr

023f5c5c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
 23f5c5c:	6809      	ldr	r1, [r1, #0]
 23f5c5e:	f7ff bfdd 	b.w	23f5c1c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>
	...

023f5c64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
 23f5c64:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
 23f5c66:	edd1 7a03 	vldr	s15, [r1, #12]
 23f5c6a:	ed92 7a03 	vldr	s14, [r2, #12]
 23f5c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f5c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f5c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
 23f5c7a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f5c7c:	da0a      	bge.n	23f5c94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 23f5c7e:	4b0f      	ldr	r3, [pc, #60]	; (23f5cbc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 23f5c80:	4a0f      	ldr	r2, [pc, #60]	; (23f5cc0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 23f5c82:	9300      	str	r3, [sp, #0]
 23f5c84:	6904      	ldr	r4, [r0, #16]
 23f5c86:	f240 134d 	movw	r3, #333	; 0x14d
 23f5c8a:	490e      	ldr	r1, [pc, #56]	; (23f5cc4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 23f5c8c:	47a0      	blx	r4
 23f5c8e:	2001      	movs	r0, #1
}
 23f5c90:	b002      	add	sp, #8
 23f5c92:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 23f5c94:	ee17 0a90 	vmov	r0, s15
 23f5c98:	f7f6 ffae 	bl	23ecbf8 <__aeabi_f2d>
 23f5c9c:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f5c9e:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
 23f5ca0:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f5ca2:	f7f6 ffa9 	bl	23ecbf8 <__aeabi_f2d>
 23f5ca6:	460b      	mov	r3, r1
 23f5ca8:	4602      	mov	r2, r0
 23f5caa:	4629      	mov	r1, r5
 23f5cac:	4620      	mov	r0, r4
 23f5cae:	f7f7 f925 	bl	23ecefc <__aeabi_ddiv>
 23f5cb2:	9b06      	ldr	r3, [sp, #24]
 23f5cb4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 23f5cb8:	2000      	movs	r0, #0
 23f5cba:	e7e9      	b.n	23f5c90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 23f5cbc:	023ff6fd 	.word	0x023ff6fd
 23f5cc0:	023ff67f 	.word	0x023ff67f
 23f5cc4:	023ff006 	.word	0x023ff006

023f5cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 23f5cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5ccc:	4604      	mov	r4, r0
 23f5cce:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f5cd2:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
 23f5cd4:	4615      	mov	r5, r2
 23f5cd6:	461e      	mov	r6, r3
 23f5cd8:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f5cda:	f7f6 ff8d 	bl	23ecbf8 <__aeabi_f2d>
 23f5cde:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
 23f5ce0:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f5ce2:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
 23f5ce4:	f7f6 ff88 	bl	23ecbf8 <__aeabi_f2d>
 23f5ce8:	4602      	mov	r2, r0
 23f5cea:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f5cec:	4640      	mov	r0, r8
 23f5cee:	4649      	mov	r1, r9
 23f5cf0:	f7f6 ffda 	bl	23ecca8 <__aeabi_dmul>
 23f5cf4:	4680      	mov	r8, r0
 23f5cf6:	4689      	mov	r9, r1
  if (bias) {
 23f5cf8:	b1d6      	cbz	r6, 23f5d30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
 23f5cfa:	68f0      	ldr	r0, [r6, #12]
 23f5cfc:	f7f6 ff7c 	bl	23ecbf8 <__aeabi_f2d>
 23f5d00:	4602      	mov	r2, r0
 23f5d02:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 23f5d04:	4640      	mov	r0, r8
 23f5d06:	4649      	mov	r1, r9
 23f5d08:	f7f6 fe16 	bl	23ec938 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23f5d0c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
 23f5d0e:	68f8      	ldr	r0, [r7, #12]
 23f5d10:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 23f5d14:	f7f6 ff70 	bl	23ecbf8 <__aeabi_f2d>
 23f5d18:	4602      	mov	r2, r0
 23f5d1a:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f5d1c:	4640      	mov	r0, r8
 23f5d1e:	4649      	mov	r1, r9
 23f5d20:	f7f7 f8ec 	bl	23ecefc <__aeabi_ddiv>
 23f5d24:	a311      	add	r3, pc, #68	; (adr r3, 23f5d6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
 23f5d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5d2a:	f7f7 fa39 	bl	23ed1a0 <__aeabi_dcmple>
 23f5d2e:	b150      	cbz	r0, 23f5d46 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f5d30:	463b      	mov	r3, r7
 23f5d32:	462a      	mov	r2, r5
 23f5d34:	4651      	mov	r1, sl
 23f5d36:	4620      	mov	r0, r4
 23f5d38:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 23f5d3c:	b003      	add	sp, #12
 23f5d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f5d42:	f7ff bf8f 	b.w	23f5c64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f5d46:	4b06      	ldr	r3, [pc, #24]	; (23f5d60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
 23f5d48:	4620      	mov	r0, r4
 23f5d4a:	9300      	str	r3, [sp, #0]
 23f5d4c:	6925      	ldr	r5, [r4, #16]
 23f5d4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 23f5d52:	4a04      	ldr	r2, [pc, #16]	; (23f5d64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
 23f5d54:	4904      	ldr	r1, [pc, #16]	; (23f5d68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
 23f5d56:	47a8      	blx	r5
}
 23f5d58:	2001      	movs	r0, #1
 23f5d5a:	b003      	add	sp, #12
 23f5d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f5d60:	023ff716 	.word	0x023ff716
 23f5d64:	023ff67f 	.word	0x023ff67f
 23f5d68:	023ff006 	.word	0x023ff006
 23f5d6c:	47ae147b 	.word	0x47ae147b
 23f5d70:	3f947ae1 	.word	0x3f947ae1

023f5d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 23f5d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5d76:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 23f5d78:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
 23f5d7a:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
 23f5d7c:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 23f5d7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
 23f5d80:	d00e      	beq.n	23f5da0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 23f5d82:	2b09      	cmp	r3, #9
 23f5d84:	d01f      	beq.n	23f5dc6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 23f5d86:	2b07      	cmp	r3, #7
 23f5d88:	d021      	beq.n	23f5dce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 23f5d8a:	4b26      	ldr	r3, [pc, #152]	; (23f5e24 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb0>)
 23f5d8c:	4a26      	ldr	r2, [pc, #152]	; (23f5e28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>)
 23f5d8e:	9300      	str	r3, [sp, #0]
 23f5d90:	6904      	ldr	r4, [r0, #16]
 23f5d92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 23f5d96:	4925      	ldr	r1, [pc, #148]	; (23f5e2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>)
 23f5d98:	47a0      	blx	r4
 23f5d9a:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
 23f5d9c:	b005      	add	sp, #20
 23f5d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 23f5da0:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 23f5da2:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
 23f5da4:	6913      	ldr	r3, [r2, #16]
  };
 23f5da6:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
 23f5da8:	2901      	cmp	r1, #1
  };
 23f5daa:	9202      	str	r2, [sp, #8]
 23f5dac:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
 23f5dae:	d112      	bne.n	23f5dd6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
 23f5db0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 23f5e30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
 23f5db4:	a802      	add	r0, sp, #8
 23f5db6:	f7ff ff23 	bl	23f5c00 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 23f5dba:	4286      	cmp	r6, r0
 23f5dbc:	bfac      	ite	ge
 23f5dbe:	602e      	strge	r6, [r5, #0]
 23f5dc0:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
 23f5dc2:	603c      	str	r4, [r7, #0]
 23f5dc4:	e01b      	b.n	23f5dfe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
 23f5dc6:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 23f5dc8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 23f5dcc:	e7ea      	b.n	23f5da4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
    qmax = std::numeric_limits<int16_t>::max();
 23f5dce:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
 23f5dd2:	4e18      	ldr	r6, [pc, #96]	; (23f5e34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc0>)
 23f5dd4:	e7e6      	b.n	23f5da4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
 23f5dd6:	2903      	cmp	r1, #3
 23f5dd8:	d113      	bne.n	23f5e02 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
 23f5dda:	ed9f 0a15 	vldr	s0, [pc, #84]	; 23f5e30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
 23f5dde:	a802      	add	r0, sp, #8
 23f5de0:	f7ff ff0e 	bl	23f5c00 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
 23f5de4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
 23f5de8:	4286      	cmp	r6, r0
 23f5dea:	bfac      	ite	ge
 23f5dec:	602e      	strge	r6, [r5, #0]
 23f5dee:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
 23f5df0:	a802      	add	r0, sp, #8
 23f5df2:	f7ff ff05 	bl	23f5c00 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 23f5df6:	4284      	cmp	r4, r0
 23f5df8:	bfd4      	ite	le
 23f5dfa:	603c      	strle	r4, [r7, #0]
 23f5dfc:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
 23f5dfe:	2000      	movs	r0, #0
 23f5e00:	e7cc      	b.n	23f5d9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
 23f5e02:	2902      	cmp	r1, #2
 23f5e04:	d10b      	bne.n	23f5e1e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
 23f5e06:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f5e0a:	a802      	add	r0, sp, #8
 23f5e0c:	f7ff fef8 	bl	23f5c00 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
 23f5e10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
 23f5e14:	4286      	cmp	r6, r0
 23f5e16:	bfac      	ite	ge
 23f5e18:	602e      	strge	r6, [r5, #0]
 23f5e1a:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
 23f5e1c:	e7e8      	b.n	23f5df0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
    *act_min = qmin;
 23f5e1e:	602e      	str	r6, [r5, #0]
 23f5e20:	e7cf      	b.n	23f5dc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
 23f5e22:	bf00      	nop
 23f5e24:	023ff738 	.word	0x023ff738
 23f5e28:	023ff67f 	.word	0x023ff67f
 23f5e2c:	023ff006 	.word	0x023ff006
 23f5e30:	00000000 	.word	0x00000000
 23f5e34:	ffff8000 	.word	0xffff8000

023f5e38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f5e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5e3c:	ed2d 8b06 	vpush	{d8-d10}
 23f5e40:	b093      	sub	sp, #76	; 0x4c
 23f5e42:	ee09 3a10 	vmov	s18, r3
 23f5e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f5e48:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f5e4c:	9306      	str	r3, [sp, #24]
 23f5e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f5e50:	2d01      	cmp	r5, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f5e52:	9308      	str	r3, [sp, #32]
 23f5e54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f5e56:	4604      	mov	r4, r0
 23f5e58:	ee09 3a90 	vmov	s19, r3
 23f5e5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23f5e5e:	468b      	mov	fp, r1
 23f5e60:	9309      	str	r3, [sp, #36]	; 0x24
 23f5e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23f5e64:	4692      	mov	sl, r2
 23f5e66:	ee0a 3a10 	vmov	s20, r3
 23f5e6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23f5e6c:	930a      	str	r3, [sp, #40]	; 0x28
 23f5e6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23f5e70:	930b      	str	r3, [sp, #44]	; 0x2c
 23f5e72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 23f5e74:	930c      	str	r3, [sp, #48]	; 0x30
 23f5e76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f5e78:	9307      	str	r3, [sp, #28]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f5e7a:	d011      	beq.n	23f5ea0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x68>
 23f5e7c:	2601      	movs	r6, #1
 23f5e7e:	4b77      	ldr	r3, [pc, #476]	; (23f605c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
 23f5e80:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23f5e84:	9301      	str	r3, [sp, #4]
 23f5e86:	4b76      	ldr	r3, [pc, #472]	; (23f6060 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x228>)
 23f5e88:	4a76      	ldr	r2, [pc, #472]	; (23f6064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5e8a:	9300      	str	r3, [sp, #0]
 23f5e8c:	6904      	ldr	r4, [r0, #16]
 23f5e8e:	23dc      	movs	r3, #220	; 0xdc
 23f5e90:	4975      	ldr	r1, [pc, #468]	; (23f6068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f5e92:	47a0      	blx	r4
}
 23f5e94:	4630      	mov	r0, r6
 23f5e96:	b013      	add	sp, #76	; 0x4c
 23f5e98:	ecbd 8b06 	vpop	{d8-d10}
 23f5e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 23f5ea0:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
 23f5ea4:	2e01      	cmp	r6, #1
 23f5ea6:	d00c      	beq.n	23f5ec2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x8a>
 23f5ea8:	4b6c      	ldr	r3, [pc, #432]	; (23f605c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
 23f5eaa:	e9cd 6502 	strd	r6, r5, [sp, #8]
 23f5eae:	9301      	str	r3, [sp, #4]
 23f5eb0:	4b6e      	ldr	r3, [pc, #440]	; (23f606c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x234>)
 23f5eb2:	4a6c      	ldr	r2, [pc, #432]	; (23f6064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5eb4:	9300      	str	r3, [sp, #0]
 23f5eb6:	6904      	ldr	r4, [r0, #16]
 23f5eb8:	23de      	movs	r3, #222	; 0xde
 23f5eba:	496b      	ldr	r1, [pc, #428]	; (23f6068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f5ebc:	47a0      	blx	r4
 23f5ebe:	462e      	mov	r6, r5
 23f5ec0:	e7e8      	b.n	23f5e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
  const auto* affine_quantization =
 23f5ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 23f5ec4:	b93a      	cbnz	r2, 23f5ed6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x9e>
 23f5ec6:	4b6a      	ldr	r3, [pc, #424]	; (23f6070 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>)
 23f5ec8:	9300      	str	r3, [sp, #0]
 23f5eca:	23e9      	movs	r3, #233	; 0xe9
 23f5ecc:	6904      	ldr	r4, [r0, #16]
  TF_LITE_ENSURE(context, affine_quantization->scale);
 23f5ece:	4a65      	ldr	r2, [pc, #404]	; (23f6064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5ed0:	4968      	ldr	r1, [pc, #416]	; (23f6074 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>)
 23f5ed2:	47a0      	blx	r4
 23f5ed4:	e7de      	b.n	23f5e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
 23f5ed6:	6817      	ldr	r7, [r2, #0]
 23f5ed8:	b927      	cbnz	r7, 23f5ee4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xac>
 23f5eda:	4b67      	ldr	r3, [pc, #412]	; (23f6078 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x240>)
 23f5edc:	9300      	str	r3, [sp, #0]
 23f5ede:	6904      	ldr	r4, [r0, #16]
 23f5ee0:	23ea      	movs	r3, #234	; 0xea
 23f5ee2:	e7f4      	b.n	23f5ece <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 23f5ee4:	683d      	ldr	r5, [r7, #0]
  if (is_per_channel) {
 23f5ee6:	2d01      	cmp	r5, #1
 23f5ee8:	dd38      	ble.n	23f5f5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
    TF_LITE_ENSURE(context,
 23f5eea:	780b      	ldrb	r3, [r1, #0]
 23f5eec:	2b09      	cmp	r3, #9
 23f5eee:	d006      	beq.n	23f5efe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
 23f5ef0:	2b07      	cmp	r3, #7
 23f5ef2:	d004      	beq.n	23f5efe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
 23f5ef4:	4b61      	ldr	r3, [pc, #388]	; (23f607c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
 23f5ef6:	9300      	str	r3, [sp, #0]
 23f5ef8:	6904      	ldr	r4, [r0, #16]
 23f5efa:	23ee      	movs	r3, #238	; 0xee
 23f5efc:	e7e7      	b.n	23f5ece <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 23f5efe:	f89a 3000 	ldrb.w	r3, [sl]
 23f5f02:	2b09      	cmp	r3, #9
 23f5f04:	d00d      	beq.n	23f5f22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xea>
 23f5f06:	2209      	movs	r2, #9
 23f5f08:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f5f0c:	4b5c      	ldr	r3, [pc, #368]	; (23f6080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
 23f5f0e:	9301      	str	r3, [sp, #4]
 23f5f10:	4b5c      	ldr	r3, [pc, #368]	; (23f6084 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
 23f5f12:	9300      	str	r3, [sp, #0]
 23f5f14:	23f0      	movs	r3, #240	; 0xf0
 23f5f16:	6925      	ldr	r5, [r4, #16]
    TF_LITE_ENSURE_EQ(
 23f5f18:	4620      	mov	r0, r4
 23f5f1a:	4a52      	ldr	r2, [pc, #328]	; (23f6064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f5f1c:	4952      	ldr	r1, [pc, #328]	; (23f6068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f5f1e:	47a8      	blx	r5
 23f5f20:	e7b8      	b.n	23f5e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 23f5f22:	9b07      	ldr	r3, [sp, #28]
 23f5f24:	429d      	cmp	r5, r3
 23f5f26:	d008      	beq.n	23f5f3a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x102>
 23f5f28:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f5f2c:	4b56      	ldr	r3, [pc, #344]	; (23f6088 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
 23f5f2e:	9301      	str	r3, [sp, #4]
 23f5f30:	4b56      	ldr	r3, [pc, #344]	; (23f608c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
 23f5f32:	9300      	str	r3, [sp, #0]
 23f5f34:	6925      	ldr	r5, [r4, #16]
 23f5f36:	23f1      	movs	r3, #241	; 0xf1
 23f5f38:	e7ee      	b.n	23f5f18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
    TF_LITE_ENSURE_EQ(
 23f5f3a:	f8da 3008 	ldr.w	r3, [sl, #8]
 23f5f3e:	6892      	ldr	r2, [r2, #8]
 23f5f40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f5f44:	685b      	ldr	r3, [r3, #4]
 23f5f46:	42ab      	cmp	r3, r5
 23f5f48:	d008      	beq.n	23f5f5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
 23f5f4a:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f5f4e:	4b50      	ldr	r3, [pc, #320]	; (23f6090 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
 23f5f50:	9301      	str	r3, [sp, #4]
 23f5f52:	4b4d      	ldr	r3, [pc, #308]	; (23f6088 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
 23f5f54:	9300      	str	r3, [sp, #0]
 23f5f56:	6925      	ldr	r5, [r4, #16]
 23f5f58:	23f2      	movs	r3, #242	; 0xf2
 23f5f5a:	e7dd      	b.n	23f5f18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
  const float input_scale = input->params.scale;
 23f5f5c:	eddb 7a03 	vldr	s15, [fp, #12]
  const float output_scale = output->params.scale;
 23f5f60:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
 23f5f62:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
 23f5f66:	edd3 7a03 	vldr	s15, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
 23f5f6a:	2600      	movs	r6, #0
  const float output_scale = output->params.scale;
 23f5f6c:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
 23f5f70:	1d3b      	adds	r3, r7, #4
 23f5f72:	9305      	str	r3, [sp, #20]
 23f5f74:	9b07      	ldr	r3, [sp, #28]
 23f5f76:	429e      	cmp	r6, r3
 23f5f78:	da34      	bge.n	23f5fe4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ac>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 23f5f7a:	2d01      	cmp	r5, #1
 23f5f7c:	bfca      	itet	gt
 23f5f7e:	9b05      	ldrgt	r3, [sp, #20]
 23f5f80:	687b      	ldrle	r3, [r7, #4]
 23f5f82:	681b      	ldrgt	r3, [r3, #0]
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5f84:	ee18 0a10 	vmov	r0, s16
 23f5f88:	930d      	str	r3, [sp, #52]	; 0x34
 23f5f8a:	f7f6 fe35 	bl	23ecbf8 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(scale);
 23f5f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5f90:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(scale);
 23f5f92:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5f94:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(scale);
 23f5f96:	f7f6 fe2f 	bl	23ecbf8 <__aeabi_f2d>
 23f5f9a:	4602      	mov	r2, r0
 23f5f9c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5f9e:	4640      	mov	r0, r8
 23f5fa0:	4649      	mov	r1, r9
 23f5fa2:	f7f6 fe81 	bl	23ecca8 <__aeabi_dmul>
 23f5fa6:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
 23f5fa8:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5fac:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
 23f5fae:	f7f6 fe23 	bl	23ecbf8 <__aeabi_f2d>
 23f5fb2:	4602      	mov	r2, r0
 23f5fb4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f5fb6:	4640      	mov	r0, r8
 23f5fb8:	4649      	mov	r1, r9
 23f5fba:	f7f6 ff9f 	bl	23ecefc <__aeabi_ddiv>
 23f5fbe:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 23f5fc2:	a910      	add	r1, sp, #64	; 0x40
 23f5fc4:	a80f      	add	r0, sp, #60	; 0x3c
 23f5fc6:	f000 f865 	bl	23f6094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 23f5fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f5fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f5fce:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
 23f5fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f5fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23f5fd6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
 23f5fda:	9b05      	ldr	r3, [sp, #20]
 23f5fdc:	3601      	adds	r6, #1
 23f5fde:	3304      	adds	r3, #4
 23f5fe0:	9305      	str	r3, [sp, #20]
 23f5fe2:	e7c7      	b.n	23f5f74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
  if (input->type == kTfLiteUInt8) {
 23f5fe4:	f89b 3000 	ldrb.w	r3, [fp]
 23f5fe8:	2b03      	cmp	r3, #3
 23f5fea:	d11d      	bne.n	23f6028 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1f0>
    double real_multiplier = 0.0;
 23f5fec:	2200      	movs	r2, #0
 23f5fee:	2300      	movs	r3, #0
 23f5ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f5ff4:	ab10      	add	r3, sp, #64	; 0x40
 23f5ff6:	9301      	str	r3, [sp, #4]
 23f5ff8:	9b06      	ldr	r3, [sp, #24]
 23f5ffa:	4652      	mov	r2, sl
 23f5ffc:	9300      	str	r3, [sp, #0]
 23f5ffe:	4659      	mov	r1, fp
 23f6000:	ee19 3a10 	vmov	r3, s18
 23f6004:	4620      	mov	r0, r4
 23f6006:	f7ff fe5f 	bl	23f5cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f600a:	4606      	mov	r6, r0
 23f600c:	2800      	cmp	r0, #0
 23f600e:	f47f af41 	bne.w	23f5e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 23f6012:	ee19 0a90 	vmov	r0, s19
 23f6016:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 23f601a:	a90f      	add	r1, sp, #60	; 0x3c
 23f601c:	f000 f83a 	bl	23f6094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 23f6020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f6022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f6024:	425b      	negs	r3, r3
 23f6026:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 23f6028:	f89b 3000 	ldrb.w	r3, [fp]
 23f602c:	2b09      	cmp	r3, #9
 23f602e:	d003      	beq.n	23f6038 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x200>
 23f6030:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 23f6034:	2b03      	cmp	r3, #3
 23f6036:	d10e      	bne.n	23f6056 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x21e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f6038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f603a:	4620      	mov	r0, r4
 23f603c:	9322      	str	r3, [sp, #136]	; 0x88
 23f603e:	ee1a 3a10 	vmov	r3, s20
 23f6042:	9908      	ldr	r1, [sp, #32]
 23f6044:	9a06      	ldr	r2, [sp, #24]
 23f6046:	7809      	ldrb	r1, [r1, #0]
}
 23f6048:	b013      	add	sp, #76	; 0x4c
 23f604a:	ecbd 8b06 	vpop	{d8-d10}
 23f604e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f6052:	f7ff be8f 	b.w	23f5d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  return kTfLiteOk;
 23f6056:	2600      	movs	r6, #0
 23f6058:	e71c      	b.n	23f5e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
 23f605a:	bf00      	nop
 23f605c:	023ff73e 	.word	0x023ff73e
 23f6060:	023ff758 	.word	0x023ff758
 23f6064:	023ff67f 	.word	0x023ff67f
 23f6068:	023feeb7 	.word	0x023feeb7
 23f606c:	023ff771 	.word	0x023ff771
 23f6070:	023ff78b 	.word	0x023ff78b
 23f6074:	023ff006 	.word	0x023ff006
 23f6078:	023ff79f 	.word	0x023ff79f
 23f607c:	023ff5b0 	.word	0x023ff5b0
 23f6080:	023ff64c 	.word	0x023ff64c
 23f6084:	023ff7ba 	.word	0x023ff7ba
 23f6088:	023ff7c7 	.word	0x023ff7c7
 23f608c:	023ff7d4 	.word	0x023ff7d4
 23f6090:	023ff7f5 	.word	0x023ff7f5

023f6094 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 23f6094:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
 23f6096:	2200      	movs	r2, #0
                        int* shift) {
 23f6098:	4606      	mov	r6, r0
 23f609a:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 23f609c:	2300      	movs	r3, #0
 23f609e:	ec51 0b10 	vmov	r0, r1, d0
 23f60a2:	ed8d 0b00 	vstr	d0, [sp]
 23f60a6:	f7f7 f867 	bl	23ed178 <__aeabi_dcmpeq>
 23f60aa:	ed9d 0b00 	vldr	d0, [sp]
 23f60ae:	4605      	mov	r5, r0
 23f60b0:	b120      	cbz	r0, 23f60bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 23f60b2:	2300      	movs	r3, #0
 23f60b4:	6033      	str	r3, [r6, #0]
    *shift = 0;
 23f60b6:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 23f60b8:	b002      	add	sp, #8
 23f60ba:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
 23f60bc:	4620      	mov	r0, r4
 23f60be:	f003 fdcb 	bl	23f9c58 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f60c2:	2200      	movs	r2, #0
 23f60c4:	4b13      	ldr	r3, [pc, #76]	; (23f6114 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
  const double q = std::frexp(double_multiplier, shift);
 23f60c6:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f60ca:	f7f6 fded 	bl	23ecca8 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 23f60ce:	ec41 0b10 	vmov	d0, r0, r1
 23f60d2:	f003 fdf9 	bl	23f9cc8 <round>
 23f60d6:	ec51 0b10 	vmov	r0, r1, d0
 23f60da:	f7f7 f97d 	bl	23ed3d8 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 23f60de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 23f60e2:	4282      	cmp	r2, r0
 23f60e4:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f60e8:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 23f60ea:	da01      	bge.n	23f60f0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
 23f60ec:	f001 fa96 	bl	23f761c <abort>
  if (q_fixed == (1ll << 31)) {
 23f60f0:	42a9      	cmp	r1, r5
 23f60f2:	bf08      	it	eq
 23f60f4:	4290      	cmpeq	r0, r2
    ++*shift;
 23f60f6:	bf02      	ittt	eq
 23f60f8:	6823      	ldreq	r3, [r4, #0]
 23f60fa:	3301      	addeq	r3, #1
 23f60fc:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 23f60fe:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
 23f6100:	bf08      	it	eq
 23f6102:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
 23f6106:	321f      	adds	r2, #31
    *shift = 0;
 23f6108:	bfbc      	itt	lt
 23f610a:	2300      	movlt	r3, #0
 23f610c:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 23f610e:	6033      	str	r3, [r6, #0]
 23f6110:	e7d2      	b.n	23f60b8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
 23f6112:	bf00      	nop
 23f6114:	41e00000 	.word	0x41e00000

023f6118 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 23f6118:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f611a:	4b0c      	ldr	r3, [pc, #48]	; (23f614c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
 23f611c:	4605      	mov	r5, r0
 23f611e:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f6120:	2200      	movs	r2, #0
 23f6122:	ec51 0b10 	vmov	r0, r1, d0
 23f6126:	ed8d 0b00 	vstr	d0, [sp]
 23f612a:	f7f7 f84d 	bl	23ed1c8 <__aeabi_dcmpgt>
 23f612e:	ed9d 0b00 	vldr	d0, [sp]
 23f6132:	b908      	cbnz	r0, 23f6138 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
 23f6134:	f001 fa72 	bl	23f761c <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 23f6138:	4621      	mov	r1, r4
 23f613a:	4628      	mov	r0, r5
 23f613c:	f7ff ffaa 	bl	23f6094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 23f6140:	6823      	ldr	r3, [r4, #0]
 23f6142:	2b00      	cmp	r3, #0
 23f6144:	dbf6      	blt.n	23f6134 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
 23f6146:	b003      	add	sp, #12
 23f6148:	bd30      	pop	{r4, r5, pc}
 23f614a:	bf00      	nop
 23f614c:	3ff00000 	.word	0x3ff00000

023f6150 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 23f6150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f6154:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
 23f6158:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f615c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 23f6160:	ec57 6b10 	vmov	r6, r7, d0
 23f6164:	ec59 8b11 	vmov	r8, r9, d1
 23f6168:	4693      	mov	fp, r2
 23f616a:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f616c:	f7f6 fd32 	bl	23ecbd4 <__aeabi_i2d>
 23f6170:	4642      	mov	r2, r8
 23f6172:	4604      	mov	r4, r0
 23f6174:	460d      	mov	r5, r1
 23f6176:	464b      	mov	r3, r9
 23f6178:	4630      	mov	r0, r6
 23f617a:	4639      	mov	r1, r7
 23f617c:	f7f6 fd94 	bl	23ecca8 <__aeabi_dmul>
 23f6180:	4602      	mov	r2, r0
 23f6182:	460b      	mov	r3, r1
 23f6184:	4620      	mov	r0, r4
 23f6186:	4629      	mov	r1, r5
 23f6188:	f7f6 fd8e 	bl	23ecca8 <__aeabi_dmul>
 23f618c:	4602      	mov	r2, r0
 23f618e:	460b      	mov	r3, r1
 23f6190:	ec43 2b18 	vmov	d8, r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 23f6194:	a30a      	add	r3, pc, #40	; (adr r3, 23f61c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
 23f6196:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f619a:	f7f7 f815 	bl	23ed1c8 <__aeabi_dcmpgt>
 23f619e:	b108      	cbz	r0, 23f61a4 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
 23f61a0:	ed9f 8b07 	vldr	d8, [pc, #28]	; 23f61c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f61a4:	4659      	mov	r1, fp
 23f61a6:	4650      	mov	r0, sl
 23f61a8:	eeb0 0a48 	vmov.f32	s0, s16
 23f61ac:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
 23f61b0:	ecbd 8b02 	vpop	{d8}
 23f61b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f61b8:	f7ff bfae 	b.w	23f6118 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
 23f61bc:	f3af 8000 	nop.w
 23f61c0:	ffc00000 	.word	0xffc00000
 23f61c4:	41dfffff 	.word	0x41dfffff

023f61c8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 23f61c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 23f61cc:	2401      	movs	r4, #1
                         int total_signed_bits) {
 23f61ce:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
 23f61d0:	fa04 f000 	lsl.w	r0, r4, r0
 23f61d4:	3801      	subs	r0, #1
                         int total_signed_bits) {
 23f61d6:	4688      	mov	r8, r1
 23f61d8:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
 23f61da:	f7f6 fcfb 	bl	23ecbd4 <__aeabi_i2d>
 23f61de:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f61e0:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
 23f61e4:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f61e6:	f1c0 0320 	rsb	r3, r0, #32
 23f61ea:	f1a0 0120 	sub.w	r1, r0, #32
 23f61ee:	fa24 f303 	lsr.w	r3, r4, r3
 23f61f2:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f61f6:	fa04 f000 	lsl.w	r0, r4, r0
 23f61fa:	4319      	orrs	r1, r3
 23f61fc:	f7f6 fd26 	bl	23ecc4c <__aeabi_l2d>
 23f6200:	4602      	mov	r2, r0
 23f6202:	460b      	mov	r3, r1
 23f6204:	4630      	mov	r0, r6
 23f6206:	4639      	mov	r1, r7
 23f6208:	f7f6 fd4e 	bl	23ecca8 <__aeabi_dmul>
      (1ll << input_left_shift);
 23f620c:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 23f6210:	460f      	mov	r7, r1
      (1ll << input_left_shift);
 23f6212:	f1a8 0120 	sub.w	r1, r8, #32
 23f6216:	fa24 f303 	lsr.w	r3, r4, r3
 23f621a:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f621e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f6220:	4319      	orrs	r1, r3
 23f6222:	fa04 f008 	lsl.w	r0, r4, r8
 23f6226:	f7f6 fd11 	bl	23ecc4c <__aeabi_l2d>
 23f622a:	4602      	mov	r2, r0
 23f622c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 23f622e:	4630      	mov	r0, r6
 23f6230:	4639      	mov	r1, r7
 23f6232:	f7f6 fe63 	bl	23ecefc <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 23f6236:	ec41 0b10 	vmov	d0, r0, r1
 23f623a:	f003 fc89 	bl	23f9b50 <floor>
 23f623e:	ec51 0b10 	vmov	r0, r1, d0
 23f6242:	f7f6 ffe1 	bl	23ed208 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 23f6246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

023f624c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 23f624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6250:	ed2d 8b08 	vpush	{d8-d11}
 23f6254:	4616      	mov	r6, r2
 23f6256:	b089      	sub	sp, #36	; 0x24
 23f6258:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
 23f625c:	460f      	mov	r7, r1
    kiss_fft_cpx * Fout_beg=Fout;
    const int p=*factors++; /* the radix  */
    const int m=*factors++; /* stage's fft length/p */
 23f625e:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
 23f6262:	6811      	ldr	r1, [r2, #0]
        }
        return;
    }
#endif

    if (m==1) {
 23f6264:	f1ba 0f01 	cmp.w	sl, #1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23f6268:	fb0a f901 	mul.w	r9, sl, r1
    const int p=*factors++; /* the radix  */
 23f626c:	9103      	str	r1, [sp, #12]
        do{
            *Fout = *f;
            f += fstride*in_stride;
 23f626e:	fb06 f103 	mul.w	r1, r6, r3
{
 23f6272:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23f6274:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
 23f6278:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
 23f627c:	d116      	bne.n	23f62ac <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
 23f627e:	4603      	mov	r3, r0
            *Fout = *f;
 23f6280:	e897 0003 	ldmia.w	r7, {r0, r1}
 23f6284:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
 23f6288:	3308      	adds	r3, #8
 23f628a:	4599      	cmp	r9, r3
            f += fstride*in_stride;
 23f628c:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
 23f628e:	d1f7      	bne.n	23f6280 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
 23f6290:	f505 7384 	add.w	r3, r5, #264	; 0x108
 23f6294:	9305      	str	r3, [sp, #20]
 23f6296:	9b03      	ldr	r3, [sp, #12]
 23f6298:	3b02      	subs	r3, #2
 23f629a:	2b03      	cmp	r3, #3
 23f629c:	f200 828a 	bhi.w	23f67b4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x568>
 23f62a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 23f62a4:	0056001b 	.word	0x0056001b
 23f62a8:	019b00fb 	.word	0x019b00fb
    const int m=*factors++; /* stage's fft length/p */
 23f62ac:	3208      	adds	r2, #8
 23f62ae:	9204      	str	r2, [sp, #16]
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23f62b0:	9a03      	ldr	r2, [sp, #12]
            f += fstride*in_stride;
        }while( (Fout += m) != Fout_end );
 23f62b2:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23f62b6:	4372      	muls	r2, r6
 23f62b8:	9904      	ldr	r1, [sp, #16]
 23f62ba:	9501      	str	r5, [sp, #4]
 23f62bc:	9100      	str	r1, [sp, #0]
 23f62be:	4639      	mov	r1, r7
 23f62c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23f62c4:	9005      	str	r0, [sp, #20]
 23f62c6:	f7ff ffc1 	bl	23f624c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
 23f62ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f62ce:	9805      	ldr	r0, [sp, #20]
            f += fstride*in_stride;
 23f62d0:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
 23f62d2:	4458      	add	r0, fp
 23f62d4:	4581      	cmp	r9, r0
 23f62d6:	d1ef      	bne.n	23f62b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
 23f62d8:	e7da      	b.n	23f6290 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
 23f62da:	f10a 0301 	add.w	r3, sl, #1
 23f62de:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
 23f62e2:	00f6      	lsls	r6, r6, #3
 23f62e4:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
 23f62e6:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f62ea:	ed53 5a01 	vldr	s11, [r3, #-4]
 23f62ee:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
 23f62f2:	ed13 6a02 	vldr	s12, [r3, #-8]
 23f62f6:	ee26 7ae5 	vnmul.f32	s14, s13, s11
 23f62fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 23f62fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 23f6302:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
 23f6306:	ed54 6a02 	vldr	s13, [r4, #-8]
 23f630a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 23f630e:	ed43 6a02 	vstr	s13, [r3, #-8]
 23f6312:	ed54 6a01 	vldr	s13, [r4, #-4]
 23f6316:	ee76 6ae7 	vsub.f32	s13, s13, s15
 23f631a:	ed43 6a01 	vstr	s13, [r3, #-4]
        C_ADDTO( *Fout ,  t );
 23f631e:	ed54 6a02 	vldr	s13, [r4, #-8]
 23f6322:	ee36 7a87 	vadd.f32	s14, s13, s14
 23f6326:	ed04 7a02 	vstr	s14, [r4, #-8]
 23f632a:	ed14 7a01 	vldr	s14, [r4, #-4]
 23f632e:	ee77 7a27 	vadd.f32	s15, s14, s15
    }while (--m);
 23f6332:	f1ba 0a01 	subs.w	sl, sl, #1
        C_ADDTO( *Fout ,  t );
 23f6336:	ed44 7a01 	vstr	s15, [r4, #-4]
    }while (--m);
 23f633a:	f103 0308 	add.w	r3, r3, #8
 23f633e:	f104 0408 	add.w	r4, r4, #8
 23f6342:	4435      	add	r5, r6
 23f6344:	d1cf      	bne.n	23f62e6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
        case 4: kf_bfly4(Fout,fstride,st,m); break;
        case 5: kf_bfly5(Fout,fstride,st,m); break;
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    }
}
 23f6346:	b009      	add	sp, #36	; 0x24
 23f6348:	ecbd 8b08 	vpop	{d8-d11}
 23f634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
 23f6350:	fb06 f30a 	mul.w	r3, r6, sl
 23f6354:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 23f6358:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
 23f635c:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
 23f6360:	0133      	lsls	r3, r6, #4
 23f6362:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
 23f6366:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 23f636a:	f104 0608 	add.w	r6, r4, #8
 23f636e:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 23f6370:	4657      	mov	r7, sl
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23f6372:	eef1 9a49 	vneg.f32	s19, s18
         tw2 += fstride*2;
 23f6376:	46aa      	mov	sl, r5
 23f6378:	9303      	str	r3, [sp, #12]
 23f637a:	3404      	adds	r4, #4
         C_MUL(scratch[1],Fout[m] , *tw1);
 23f637c:	edd8 7a01 	vldr	s15, [r8, #4]
 23f6380:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f6384:	ee66 8ae7 	vnmul.f32	s17, s13, s15
 23f6388:	ed14 6a01 	vldr	s12, [r4, #-4]
 23f638c:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
 23f6390:	eeb0 7a68 	vmov.f32	s14, s17
 23f6394:	eea6 7a08 	vfma.f32	s14, s12, s16
 23f6398:	ee28 8a27 	vmul.f32	s16, s16, s15
 23f639c:	eef0 7a48 	vmov.f32	s15, s16
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23f63a0:	edd9 5a01 	vldr	s11, [r9, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
 23f63a4:	eee6 7a26 	vfma.f32	s15, s12, s13
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23f63a8:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
 23f63ac:	ed99 6a00 	vldr	s12, [r9]
 23f63b0:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
 23f63b4:	ee66 8ae5 	vnmul.f32	s17, s13, s11
 23f63b8:	eee6 8a08 	vfma.f32	s17, s12, s16
 23f63bc:	ee28 8a25 	vmul.f32	s16, s16, s11
 23f63c0:	eea6 8a26 	vfma.f32	s16, s12, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23f63c4:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_ADD(scratch[3],scratch[1],scratch[2]);
 23f63c8:	ee37 aa88 	vadd.f32	s20, s15, s16
 23f63cc:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_SUB(scratch[0],scratch[1],scratch[2]);
 23f63d0:	ee37 8ac8 	vsub.f32	s16, s15, s16
 23f63d4:	ee77 8a68 	vsub.f32	s17, s14, s17
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23f63d8:	f7f6 fc0e 	bl	23ecbf8 <__aeabi_f2d>
 23f63dc:	ec41 0b1b 	vmov	d11, r0, r1
 23f63e0:	ee1a 0a90 	vmov	r0, s21
 23f63e4:	f7f6 fc08 	bl	23ecbf8 <__aeabi_f2d>
 23f63e8:	2200      	movs	r2, #0
 23f63ea:	4bf1      	ldr	r3, [pc, #964]	; (23f67b0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23f63ec:	f7f6 fc5c 	bl	23ecca8 <__aeabi_dmul>
 23f63f0:	4602      	mov	r2, r0
 23f63f2:	460b      	mov	r3, r1
 23f63f4:	ec51 0b1b 	vmov	r0, r1, d11
 23f63f8:	f7f6 fa9e 	bl	23ec938 <__aeabi_dsub>
 23f63fc:	f7f6 ff4c 	bl	23ed298 <__aeabi_d2f>
 23f6400:	f844 0c04 	str.w	r0, [r4, #-4]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 23f6404:	f856 0c04 	ldr.w	r0, [r6, #-4]
 23f6408:	f7f6 fbf6 	bl	23ecbf8 <__aeabi_f2d>
 23f640c:	ec41 0b1b 	vmov	d11, r0, r1
 23f6410:	ee1a 0a10 	vmov	r0, s20
 23f6414:	f7f6 fbf0 	bl	23ecbf8 <__aeabi_f2d>
 23f6418:	2200      	movs	r2, #0
 23f641a:	4be5      	ldr	r3, [pc, #916]	; (23f67b0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23f641c:	f7f6 fc44 	bl	23ecca8 <__aeabi_dmul>
 23f6420:	460b      	mov	r3, r1
 23f6422:	4602      	mov	r2, r0
 23f6424:	ec51 0b1b 	vmov	r0, r1, d11
 23f6428:	f7f6 fa86 	bl	23ec938 <__aeabi_dsub>
 23f642c:	f7f6 ff34 	bl	23ed298 <__aeabi_d2f>
 23f6430:	f8c8 0004 	str.w	r0, [r8, #4]
         C_ADDTO(*Fout,scratch[3]);
 23f6434:	ed56 7a02 	vldr	s15, [r6, #-8]
 23f6438:	ee77 7aaa 	vadd.f32	s15, s15, s21
 23f643c:	ed46 7a02 	vstr	s15, [r6, #-8]
 23f6440:	ed56 7a01 	vldr	s15, [r6, #-4]
 23f6444:	ee77 7a8a 	vadd.f32	s15, s15, s20
 23f6448:	ed46 7a01 	vstr	s15, [r6, #-4]
         Fout[m2].r = Fout[m].r + scratch[0].i;
 23f644c:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f6450:	eee9 7a08 	vfma.f32	s15, s18, s16
 23f6454:	edc9 7a00 	vstr	s15, [r9]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23f6458:	edd8 7a01 	vldr	s15, [r8, #4]
 23f645c:	eee9 7aa8 	vfma.f32	s15, s19, s17
 23f6460:	edc9 7a01 	vstr	s15, [r9, #4]
         Fout[m].r -= scratch[0].i;
 23f6464:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f6468:	eee9 7a88 	vfma.f32	s15, s19, s16
 23f646c:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].i += scratch[0].r;
 23f6470:	edd8 7a01 	vldr	s15, [r8, #4]
 23f6474:	eee9 7a28 	vfma.f32	s15, s18, s17
 23f6478:	edc8 7a01 	vstr	s15, [r8, #4]
     }while(--k);
 23f647c:	9b03      	ldr	r3, [sp, #12]
 23f647e:	3f01      	subs	r7, #1
 23f6480:	f106 0608 	add.w	r6, r6, #8
 23f6484:	f108 0808 	add.w	r8, r8, #8
 23f6488:	445d      	add	r5, fp
 23f648a:	f109 0908 	add.w	r9, r9, #8
 23f648e:	449a      	add	sl, r3
 23f6490:	f104 0408 	add.w	r4, r4, #8
 23f6494:	f47f af72 	bne.w	23f637c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
 23f6498:	e755      	b.n	23f6346 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        tw3 += fstride*3;
 23f649a:	2218      	movs	r2, #24
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 23f649c:	4657      	mov	r7, sl
    tw3 = tw2 = tw1 = st->twiddles;
 23f649e:	46a9      	mov	r9, r5
        tw3 += fstride*3;
 23f64a0:	46ae      	mov	lr, r5
 23f64a2:	46a8      	mov	r8, r5
        tw1 += fstride;
 23f64a4:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
        tw2 += fstride*2;
 23f64a8:	ea4f 1a06 	mov.w	sl, r6, lsl #4
        tw3 += fstride*3;
 23f64ac:	4356      	muls	r6, r2
 23f64ae:	eb04 1007 	add.w	r0, r4, r7, lsl #4
 23f64b2:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
 23f64b6:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
 23f64ba:	f104 0c04 	add.w	ip, r4, #4
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f64be:	ed91 7a01 	vldr	s14, [r1, #4]
 23f64c2:	edd9 6a43 	vldr	s13, [r9, #268]	; 0x10c
 23f64c6:	ed91 5a00 	vldr	s10, [r1]
 23f64ca:	edd9 7a42 	vldr	s15, [r9, #264]	; 0x108
 23f64ce:	ee26 6ac7 	vnmul.f32	s12, s13, s14
 23f64d2:	eea5 6a27 	vfma.f32	s12, s10, s15
 23f64d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f64da:	eee5 7a26 	vfma.f32	s15, s10, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f64de:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f64e2:	eeb0 7a67 	vmov.f32	s14, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f64e6:	edd8 7a43 	vldr	s15, [r8, #268]	; 0x10c
 23f64ea:	ed90 5a00 	vldr	s10, [r0]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f64ee:	eef0 5a46 	vmov.f32	s11, s12
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f64f2:	ee67 6ae4 	vnmul.f32	s13, s15, s9
 23f64f6:	ed98 6a42 	vldr	s12, [r8, #264]	; 0x108
 23f64fa:	eee5 6a06 	vfma.f32	s13, s10, s12
 23f64fe:	ee26 6a24 	vmul.f32	s12, s12, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f6502:	edd3 3a01 	vldr	s7, [r3, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f6506:	eea5 6a27 	vfma.f32	s12, s10, s15
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f650a:	ed9e 5a43 	vldr	s10, [lr, #268]	; 0x10c
 23f650e:	edd3 4a00 	vldr	s9, [r3]
 23f6512:	edde 7a42 	vldr	s15, [lr, #264]	; 0x108
 23f6516:	ee25 4a63 	vnmul.f32	s8, s10, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f651a:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f651e:	eea4 4aa7 	vfma.f32	s8, s9, s15
 23f6522:	ee67 7aa3 	vmul.f32	s15, s15, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f6526:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f652a:	eee4 7a85 	vfma.f32	s15, s9, s10
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f652e:	ee73 4a66 	vsub.f32	s9, s6, s13
        C_ADDTO(*Fout, scratch[1]);
 23f6532:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23f6536:	ee35 3a84 	vadd.f32	s6, s11, s8
        C_ADDTO(*Fout, scratch[1]);
 23f653a:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f653e:	ee33 5ac6 	vsub.f32	s10, s7, s12
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f6542:	ee76 6ac3 	vsub.f32	s13, s13, s6
        C_ADDTO(*Fout, scratch[1]);
 23f6546:	ee36 6a23 	vadd.f32	s12, s12, s7
 23f654a:	ed84 6a01 	vstr	s12, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f654e:	edc0 6a00 	vstr	s13, [r0]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23f6552:	ee77 3a27 	vadd.f32	s7, s14, s15
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23f6556:	ee35 6ac4 	vsub.f32	s12, s11, s8
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f655a:	edd4 5a01 	vldr	s11, [r4, #4]
 23f655e:	ee75 5ae3 	vsub.f32	s11, s11, s7
 23f6562:	edc0 5a01 	vstr	s11, [r0, #4]
        C_ADDTO( *Fout , scratch[3] );
 23f6566:	ed5c 6a01 	vldr	s13, [ip, #-4]
 23f656a:	ee76 6a83 	vadd.f32	s13, s13, s6
 23f656e:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23f6572:	ee77 7a67 	vsub.f32	s15, s14, s15
        C_ADDTO( *Fout , scratch[3] );
 23f6576:	ed94 7a01 	vldr	s14, [r4, #4]
 23f657a:	ee37 7a23 	vadd.f32	s14, s14, s7
 23f657e:	ed84 7a01 	vstr	s14, [r4, #4]
        if(st->inverse) {
 23f6582:	686a      	ldr	r2, [r5, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23f6584:	ee74 6aa7 	vadd.f32	s13, s9, s15
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23f6588:	ee35 7a46 	vsub.f32	s14, s10, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
 23f658c:	ee74 7ae7 	vsub.f32	s15, s9, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
 23f6590:	ee35 6a06 	vadd.f32	s12, s10, s12
        if(st->inverse) {
 23f6594:	b1c2      	cbz	r2, 23f65c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x37c>
            Fout[m].r = scratch[5].r - scratch[4].i;
 23f6596:	edc1 7a00 	vstr	s15, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
 23f659a:	ed81 6a01 	vstr	s12, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23f659e:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23f65a2:	ed83 7a01 	vstr	s14, [r3, #4]
    }while(--k);
 23f65a6:	3f01      	subs	r7, #1
        ++Fout;
 23f65a8:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
 23f65ac:	f101 0108 	add.w	r1, r1, #8
 23f65b0:	44d9      	add	r9, fp
 23f65b2:	f100 0008 	add.w	r0, r0, #8
 23f65b6:	44d0      	add	r8, sl
 23f65b8:	f103 0308 	add.w	r3, r3, #8
 23f65bc:	44b6      	add	lr, r6
 23f65be:	f10c 0c08 	add.w	ip, ip, #8
 23f65c2:	f47f af7c 	bne.w	23f64be <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x272>
 23f65c6:	e6be      	b.n	23f6346 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
 23f65c8:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
 23f65cc:	ed81 7a01 	vstr	s14, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 23f65d0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 23f65d4:	ed83 6a01 	vstr	s12, [r3, #4]
 23f65d8:	e7e5      	b.n	23f65a6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x35a>
    ya = twiddles[fstride*m];
 23f65da:	fb0a f306 	mul.w	r3, sl, r6
 23f65de:	9a05      	ldr	r2, [sp, #20]
    Fout4=Fout0+4*m;
 23f65e0:	46ac      	mov	ip, r5
    ya = twiddles[fstride*m];
 23f65e2:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 23f65e6:	ed97 2a01 	vldr	s4, [r7, #4]
 23f65ea:	00f2      	lsls	r2, r6, #3
 23f65ec:	9203      	str	r2, [sp, #12]
 23f65ee:	2218      	movs	r2, #24
    Fout4=Fout0+4*m;
 23f65f0:	46ae      	mov	lr, r5
 23f65f2:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
 23f65f4:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f65f8:	eef1 0a42 	vneg.f32	s1, s4
 23f65fc:	4372      	muls	r2, r6
    ya = twiddles[fstride*m];
 23f65fe:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
 23f6602:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
 23f6606:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
 23f660a:	ed97 1a00 	vldr	s2, [r7]
 23f660e:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
 23f6612:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 23f6616:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
 23f661a:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
 23f661e:	eb03 100a 	add.w	r0, r3, sl, lsl #4
 23f6622:	9204      	str	r2, [sp, #16]
 23f6624:	0176      	lsls	r6, r6, #5
    for ( u=0; u<m; ++u ) {
 23f6626:	45ca      	cmp	sl, r9
 23f6628:	f104 0408 	add.w	r4, r4, #8
 23f662c:	f107 0708 	add.w	r7, r7, #8
 23f6630:	f103 0308 	add.w	r3, r3, #8
 23f6634:	f101 0108 	add.w	r1, r1, #8
 23f6638:	f100 0008 	add.w	r0, r0, #8
 23f663c:	f77f ae83 	ble.w	23f6346 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f6640:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f6644:	ed57 3a01 	vldr	s7, [r7, #-4]
 23f6648:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
 23f664c:	ed17 6a02 	vldr	s12, [r7, #-8]
 23f6650:	ee26 3ae3 	vnmul.f32	s6, s13, s7
 23f6654:	eea6 3a25 	vfma.f32	s6, s12, s11
 23f6658:	ee65 5aa3 	vmul.f32	s11, s11, s7
 23f665c:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f6660:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
 23f6664:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f6668:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f666c:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
 23f6670:	ed13 5a02 	vldr	s10, [r3, #-8]
 23f6674:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23f6678:	ee64 6aa6 	vmul.f32	s13, s9, s13
 23f667c:	eee5 6a25 	vfma.f32	s13, s10, s11
 23f6680:	eea5 6a24 	vfma.f32	s12, s10, s9
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f6684:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f6688:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f668c:	ed51 6a01 	vldr	s13, [r1, #-4]
 23f6690:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
 23f6694:	ed11 4a02 	vldr	s8, [r1, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f6698:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f669c:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23f66a0:	eea4 6a05 	vfma.f32	s12, s8, s10
 23f66a4:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f66a8:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f66ac:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f66b0:	ed50 5a01 	vldr	s11, [r0, #-4]
 23f66b4:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f66b8:	eef0 9a43 	vmov.f32	s19, s6
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f66bc:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f66c0:	ee26 3ae5 	vnmul.f32	s6, s13, s11
 23f66c4:	ed10 6a02 	vldr	s12, [r0, #-8]
 23f66c8:	eea6 3a04 	vfma.f32	s6, s12, s8
 23f66cc:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23f66d0:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23f66d4:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23f66d8:	ee78 9a80 	vadd.f32	s19, s17, s0
        scratch[0] = *Fout0;
 23f66dc:	ed14 7a02 	vldr	s14, [r4, #-8]
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23f66e0:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f66e4:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23f66e8:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
 23f66ec:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23f66f0:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
 23f66f4:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[0] = *Fout0;
 23f66f8:	ed54 7a01 	vldr	s15, [r4, #-4]
        Fout0->r += scratch[7].r + scratch[8].r;
 23f66fc:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
 23f6700:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f6704:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->i += scratch[7].i + scratch[8].i;
 23f6708:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23f670c:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
 23f6710:	ed04 5a01 	vstr	s10, [r4, #-4]
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23f6714:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f6718:	eeb0 5a67 	vmov.f32	s10, s15
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23f671c:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f6720:	eee1 4a8a 	vfma.f32	s9, s3, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23f6724:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f6728:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f672c:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f6730:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23f6734:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23f6738:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f673c:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23f6740:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f6744:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f6748:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23f674c:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23f6750:	ee66 6a42 	vnmul.f32	s13, s12, s4
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23f6754:	eee1 7a09 	vfma.f32	s15, s2, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f6758:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f675c:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f6760:	ee35 0a44 	vsub.f32	s0, s10, s8
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23f6764:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23f6768:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23f676c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 23f6770:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f6774:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f6778:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23f677c:	ed40 4a02 	vstr	s9, [r0, #-8]
 23f6780:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f6784:	ed03 6a02 	vstr	s12, [r3, #-8]
 23f6788:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f678c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 23f6790:	9a03      	ldr	r2, [sp, #12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f6792:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f6796:	4415      	add	r5, r2
 23f6798:	9a04      	ldr	r2, [sp, #16]
 23f679a:	ed01 7a02 	vstr	s14, [r1, #-8]
 23f679e:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
 23f67a2:	f109 0901 	add.w	r9, r9, #1
 23f67a6:	44d8      	add	r8, fp
 23f67a8:	4496      	add	lr, r2
 23f67aa:	44b4      	add	ip, r6
 23f67ac:	e73b      	b.n	23f6626 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3da>
 23f67ae:	bf00      	nop
 23f67b0:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
 23f67b4:	682b      	ldr	r3, [r5, #0]
 23f67b6:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 23f67b8:	9b03      	ldr	r3, [sp, #12]
 23f67ba:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 23f67be:	4658      	mov	r0, fp
 23f67c0:	f7fd fca3 	bl	23f410a <_Z9ei_mallocj>
 23f67c4:	f04f 0c00 	mov.w	ip, #0
 23f67c8:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
 23f67ca:	4665      	mov	r5, ip
 23f67cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23f67d0:	9207      	str	r2, [sp, #28]
 23f67d2:	fb0a f206 	mul.w	r2, sl, r6
 23f67d6:	4483      	add	fp, r0
 23f67d8:	9206      	str	r2, [sp, #24]
 23f67da:	45aa      	cmp	sl, r5
 23f67dc:	dd51      	ble.n	23f6882 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x636>
 23f67de:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f67e0:	2200      	movs	r2, #0
 23f67e2:	9903      	ldr	r1, [sp, #12]
 23f67e4:	4291      	cmp	r1, r2
 23f67e6:	dc38      	bgt.n	23f685a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60e>
 23f67e8:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f67ea:	f04f 0800 	mov.w	r8, #0
 23f67ee:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 23f67f2:	9903      	ldr	r1, [sp, #12]
 23f67f4:	4541      	cmp	r1, r8
 23f67f6:	dd41      	ble.n	23f687c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x630>
            Fout[ k ] = scratch[0];
 23f67f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f67fc:	e882 0003 	stmia.w	r2, {r0, r1}
            int twidx=0;
 23f6800:	2100      	movs	r1, #0
 23f6802:	f103 0008 	add.w	r0, r3, #8
            for (q=1;q<p;++q ) {
 23f6806:	4558      	cmp	r0, fp
 23f6808:	d031      	beq.n	23f686e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x622>
                if (twidx>=Norig) twidx-=Norig;
 23f680a:	9f04      	ldr	r7, [sp, #16]
                twidx += fstride * k;
 23f680c:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
 23f680e:	428f      	cmp	r7, r1
 23f6810:	bfd8      	it	le
 23f6812:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f6814:	9f05      	ldr	r7, [sp, #20]
 23f6816:	ed90 5a01 	vldr	s10, [r0, #4]
 23f681a:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
 23f681e:	ed99 6a01 	vldr	s12, [r9, #4]
 23f6822:	edd0 5a00 	vldr	s11, [r0]
 23f6826:	edd9 7a00 	vldr	s15, [r9]
 23f682a:	ee26 7a45 	vnmul.f32	s14, s12, s10
 23f682e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 23f6832:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
 23f6836:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f683a:	ee67 7a85 	vmul.f32	s15, s15, s10
                C_ADDTO( Fout[ k ] ,t);
 23f683e:	ee37 7a26 	vadd.f32	s14, s14, s13
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f6842:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
 23f6846:	ed82 7a00 	vstr	s14, [r2]
 23f684a:	ed92 7a01 	vldr	s14, [r2, #4]
 23f684e:	ee77 7a27 	vadd.f32	s15, s14, s15
 23f6852:	3008      	adds	r0, #8
 23f6854:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
 23f6858:	e7d5      	b.n	23f6806 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ba>
            scratch[q1] = Fout[ k  ];
 23f685a:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 23f685e:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
 23f6862:	c903      	ldmia	r1, {r0, r1}
            k += m;
 23f6864:	44d6      	add	lr, sl
            scratch[q1] = Fout[ k  ];
 23f6866:	e888 0003 	stmia.w	r8, {r0, r1}
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f686a:	3201      	adds	r2, #1
 23f686c:	e7b9      	b.n	23f67e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x596>
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f686e:	9907      	ldr	r1, [sp, #28]
 23f6870:	f108 0801 	add.w	r8, r8, #1
 23f6874:	440a      	add	r2, r1
 23f6876:	9906      	ldr	r1, [sp, #24]
 23f6878:	448e      	add	lr, r1
 23f687a:	e7ba      	b.n	23f67f2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5a6>
    for ( u=0; u<m; ++u ) {
 23f687c:	3501      	adds	r5, #1
 23f687e:	44b4      	add	ip, r6
 23f6880:	e7ab      	b.n	23f67da <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58e>
    KISS_FFT_TMP_FREE(scratch);
 23f6882:	4618      	mov	r0, r3
}
 23f6884:	b009      	add	sp, #36	; 0x24
 23f6886:	ecbd 8b08 	vpop	{d8-d11}
 23f688a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
 23f688e:	f7fd bc40 	b.w	23f4112 <_Z7ei_freePv>
 23f6892:	bf00      	nop
 23f6894:	0000      	movs	r0, r0
	...

023f6898 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 23f6898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 23f689c:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
 23f68a0:	ed2d 8b02 	vpush	{d8}
 23f68a4:	4604      	mov	r4, r0
 23f68a6:	460e      	mov	r6, r1
 23f68a8:	4615      	mov	r5, r2
 23f68aa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    size_t memneeded = sizeof(struct kiss_fft_state)
 23f68ae:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
 23f68b0:	2b00      	cmp	r3, #0
 23f68b2:	d13d      	bne.n	23f6930 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 23f68b4:	4638      	mov	r0, r7
 23f68b6:	f7fd fc28 	bl	23f410a <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
 23f68ba:	4605      	mov	r5, r0
 23f68bc:	b3d0      	cbz	r0, 23f6934 <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
 23f68be:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
 23f68c2:	f505 7a84 	add.w	sl, r5, #264	; 0x108
 23f68c6:	2e00      	cmp	r6, #0
 23f68c8:	d044      	beq.n	23f6954 <kiss_fft_alloc+0xbc>
 23f68ca:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
 23f68cc:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
 23f68d0:	4620      	mov	r0, r4
 23f68d2:	f7f6 f97f 	bl	23ecbd4 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23f68d6:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
 23f68d8:	4680      	mov	r8, r0
 23f68da:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23f68dc:	f106 0608 	add.w	r6, r6, #8
 23f68e0:	da67      	bge.n	23f69b2 <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
 23f68e2:	4650      	mov	r0, sl
 23f68e4:	f7f6 f976 	bl	23ecbd4 <__aeabi_i2d>
 23f68e8:	a34b      	add	r3, pc, #300	; (adr r3, 23f6a18 <kiss_fft_alloc+0x180>)
 23f68ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f68ee:	f7f6 f9db 	bl	23ecca8 <__aeabi_dmul>
 23f68f2:	4642      	mov	r2, r8
 23f68f4:	464b      	mov	r3, r9
 23f68f6:	f7f6 fb01 	bl	23ecefc <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23f68fa:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
 23f68fe:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23f6902:	f003 f8c5 	bl	23f9a90 <cos>
 23f6906:	ec51 0b10 	vmov	r0, r1, d0
 23f690a:	f7f6 fcc5 	bl	23ed298 <__aeabi_d2f>
 23f690e:	eeb0 0a48 	vmov.f32	s0, s16
 23f6912:	eef0 0a68 	vmov.f32	s1, s17
 23f6916:	f846 0c08 	str.w	r0, [r6, #-8]
 23f691a:	f003 fa29 	bl	23f9d70 <sin>
 23f691e:	ec51 0b10 	vmov	r0, r1, d0
 23f6922:	f7f6 fcb9 	bl	23ed298 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23f6926:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
 23f692a:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
 23f692e:	e7cf      	b.n	23f68d0 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
 23f6930:	b952      	cbnz	r2, 23f6948 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
 23f6932:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
 23f6934:	f1bb 0f00 	cmp.w	fp, #0
 23f6938:	d001      	beq.n	23f693e <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
 23f693a:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
 23f693e:	4628      	mov	r0, r5
 23f6940:	ecbd 8b02 	vpop	{d8}
 23f6944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
 23f6948:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
 23f694a:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
 23f694c:	42ba      	cmp	r2, r7
 23f694e:	d2b6      	bcs.n	23f68be <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
 23f6950:	2500      	movs	r5, #0
 23f6952:	e7ef      	b.n	23f6934 <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
 23f6954:	4620      	mov	r0, r4
 23f6956:	f7f6 f93d 	bl	23ecbd4 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23f695a:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
 23f695c:	4680      	mov	r8, r0
 23f695e:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23f6960:	f10a 0a08 	add.w	sl, sl, #8
 23f6964:	da25      	bge.n	23f69b2 <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
 23f6966:	4630      	mov	r0, r6
 23f6968:	f7f6 f934 	bl	23ecbd4 <__aeabi_i2d>
 23f696c:	a32c      	add	r3, pc, #176	; (adr r3, 23f6a20 <kiss_fft_alloc+0x188>)
 23f696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6972:	f7f6 f999 	bl	23ecca8 <__aeabi_dmul>
 23f6976:	4642      	mov	r2, r8
 23f6978:	464b      	mov	r3, r9
 23f697a:	f7f6 fabf 	bl	23ecefc <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23f697e:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
 23f6982:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23f6986:	f003 f883 	bl	23f9a90 <cos>
 23f698a:	ec51 0b10 	vmov	r0, r1, d0
 23f698e:	f7f6 fc83 	bl	23ed298 <__aeabi_d2f>
 23f6992:	eeb0 0a48 	vmov.f32	s0, s16
 23f6996:	eef0 0a68 	vmov.f32	s1, s17
 23f699a:	f84a 0c08 	str.w	r0, [sl, #-8]
 23f699e:	f003 f9e7 	bl	23f9d70 <sin>
 23f69a2:	ec51 0b10 	vmov	r0, r1, d0
 23f69a6:	f7f6 fc77 	bl	23ed298 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23f69aa:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
 23f69ac:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
 23f69b0:	e7d0      	b.n	23f6954 <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
 23f69b2:	4620      	mov	r0, r4
 23f69b4:	f7f6 f90e 	bl	23ecbd4 <__aeabi_i2d>
 23f69b8:	ec41 0b10 	vmov	d0, r0, r1
 23f69bc:	f003 fa5a 	bl	23f9e74 <sqrt>
 23f69c0:	f003 f8c6 	bl	23f9b50 <floor>
    int p=4;
 23f69c4:	2604      	movs	r6, #4
    floor_sqrt = floor( sqrt((double)n) );
 23f69c6:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
 23f69ca:	f105 0a08 	add.w	sl, r5, #8
        while (n % p) {
 23f69ce:	fb94 f3f6 	sdiv	r3, r4, r6
 23f69d2:	fb06 4213 	mls	r2, r6, r3, r4
 23f69d6:	b1aa      	cbz	r2, 23f6a04 <kiss_fft_alloc+0x16c>
            switch (p) {
 23f69d8:	2e02      	cmp	r6, #2
 23f69da:	d00f      	beq.n	23f69fc <kiss_fft_alloc+0x164>
 23f69dc:	2e04      	cmp	r6, #4
 23f69de:	d00f      	beq.n	23f6a00 <kiss_fft_alloc+0x168>
                default: p += 2; break;
 23f69e0:	3602      	adds	r6, #2
            if (p > floor_sqrt)
 23f69e2:	4630      	mov	r0, r6
 23f69e4:	f7f6 f8f6 	bl	23ecbd4 <__aeabi_i2d>
 23f69e8:	4602      	mov	r2, r0
 23f69ea:	460b      	mov	r3, r1
 23f69ec:	4640      	mov	r0, r8
 23f69ee:	4649      	mov	r1, r9
 23f69f0:	f7f6 fbcc 	bl	23ed18c <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
 23f69f4:	2800      	cmp	r0, #0
 23f69f6:	bf18      	it	ne
 23f69f8:	4626      	movne	r6, r4
 23f69fa:	e7e8      	b.n	23f69ce <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
 23f69fc:	2603      	movs	r6, #3
 23f69fe:	e7f0      	b.n	23f69e2 <kiss_fft_alloc+0x14a>
            switch (p) {
 23f6a00:	2602      	movs	r6, #2
 23f6a02:	e7ee      	b.n	23f69e2 <kiss_fft_alloc+0x14a>
    } while (n > 1);
 23f6a04:	2b01      	cmp	r3, #1
        n /= p;
 23f6a06:	461c      	mov	r4, r3
        *facbuf++ = n;
 23f6a08:	e9ca 6300 	strd	r6, r3, [sl]
    } while (n > 1);
 23f6a0c:	dd92      	ble.n	23f6934 <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
 23f6a0e:	f10a 0a08 	add.w	sl, sl, #8
 23f6a12:	e7dc      	b.n	23f69ce <kiss_fft_alloc+0x136>
 23f6a14:	f3af 8000 	nop.w
 23f6a18:	54442d18 	.word	0x54442d18
 23f6a1c:	401921fb 	.word	0x401921fb
 23f6a20:	54442d18 	.word	0x54442d18
 23f6a24:	c01921fb 	.word	0xc01921fb

023f6a28 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 23f6a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f6a2c:	4604      	mov	r4, r0
    if (fin == fout) {
 23f6a2e:	4291      	cmp	r1, r2
{
 23f6a30:	460d      	mov	r5, r1
 23f6a32:	4610      	mov	r0, r2
 23f6a34:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23f6a36:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
 23f6a3a:	d117      	bne.n	23f6a6c <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 23f6a3c:	6820      	ldr	r0, [r4, #0]
 23f6a3e:	00c0      	lsls	r0, r0, #3
 23f6a40:	f7fd fb63 	bl	23f410a <_Z9ei_mallocj>
 23f6a44:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23f6a46:	463b      	mov	r3, r7
 23f6a48:	4629      	mov	r1, r5
 23f6a4a:	2201      	movs	r2, #1
 23f6a4c:	e9cd 8400 	strd	r8, r4, [sp]
 23f6a50:	f7ff fbfc 	bl	23f624c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 23f6a54:	6822      	ldr	r2, [r4, #0]
 23f6a56:	4631      	mov	r1, r6
 23f6a58:	4628      	mov	r0, r5
 23f6a5a:	00d2      	lsls	r2, r2, #3
 23f6a5c:	f004 fd73 	bl	23fb546 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 23f6a60:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 23f6a62:	b002      	add	sp, #8
 23f6a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
 23f6a68:	f7fd bb53 	b.w	23f4112 <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 23f6a6c:	2201      	movs	r2, #1
 23f6a6e:	e9cd 8400 	strd	r8, r4, [sp]
 23f6a72:	f7ff fbeb 	bl	23f624c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 23f6a76:	b002      	add	sp, #8
 23f6a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f6a7c <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
 23f6a7c:	2301      	movs	r3, #1
 23f6a7e:	f7ff bfd3 	b.w	23f6a28 <kiss_fft_stride>
 23f6a82:	0000      	movs	r0, r0
 23f6a84:	0000      	movs	r0, r0
	...

023f6a88 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 23f6a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6a8c:	ed2d 8b02 	vpush	{d8}
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
 23f6a90:	2500      	movs	r5, #0
{
 23f6a92:	b085      	sub	sp, #20

    if (nfft & 1) {
 23f6a94:	f010 0a01 	ands.w	sl, r0, #1
{
 23f6a98:	468b      	mov	fp, r1
 23f6a9a:	4614      	mov	r4, r2
 23f6a9c:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
 23f6a9e:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
 23f6aa0:	d009      	beq.n	23f6ab6 <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
 23f6aa2:	4863      	ldr	r0, [pc, #396]	; (23f6c30 <kiss_fftr_alloc+0x1a8>)
 23f6aa4:	f7fd fb04 	bl	23f40b0 <_Z9ei_printfPKcz>
        return NULL;
 23f6aa8:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
 23f6aaa:	4620      	mov	r0, r4
 23f6aac:	b005      	add	sp, #20
 23f6aae:	ecbd 8b02 	vpop	{d8}
 23f6ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
 23f6ab6:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 23f6ab8:	ab03      	add	r3, sp, #12
 23f6aba:	4652      	mov	r2, sl
 23f6abc:	4628      	mov	r0, r5
 23f6abe:	f8cd a000 	str.w	sl, [sp]
 23f6ac2:	f7ff fee9 	bl	23f6898 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 23f6ac6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 23f6aca:	9b03      	ldr	r3, [sp, #12]
 23f6acc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 23f6ad0:	1076      	asrs	r6, r6, #1
 23f6ad2:	330c      	adds	r3, #12
 23f6ad4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
 23f6ad8:	2f00      	cmp	r7, #0
 23f6ada:	d158      	bne.n	23f6b8e <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 23f6adc:	4630      	mov	r0, r6
 23f6ade:	f7fd fb14 	bl	23f410a <_Z9ei_mallocj>
 23f6ae2:	4604      	mov	r4, r0
    if (!st)
 23f6ae4:	2c00      	cmp	r4, #0
 23f6ae6:	d0e0      	beq.n	23f6aaa <kiss_fftr_alloc+0x22>
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 23f6ae8:	f104 020c 	add.w	r2, r4, #12
 23f6aec:	6022      	str	r2, [r4, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23f6aee:	9b03      	ldr	r3, [sp, #12]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f6af0:	4659      	mov	r1, fp
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23f6af2:	4413      	add	r3, r2
 23f6af4:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 23f6af6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 23f6afa:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f6afc:	2300      	movs	r3, #0
 23f6afe:	4628      	mov	r0, r5
 23f6b00:	9300      	str	r3, [sp, #0]
        for (i = 0; i < nfft/2; ++i) {
 23f6b02:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f6b06:	ab03      	add	r3, sp, #12
 23f6b08:	f7ff fec6 	bl	23f6898 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
 23f6b0c:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
 23f6b0e:	f1bb 0f00 	cmp.w	fp, #0
 23f6b12:	d042      	beq.n	23f6b9a <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
 23f6b14:	4557      	cmp	r7, sl
 23f6b16:	dd7d      	ble.n	23f6c14 <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23f6b18:	f10a 0a01 	add.w	sl, sl, #1
 23f6b1c:	4650      	mov	r0, sl
 23f6b1e:	f7f6 f859 	bl	23ecbd4 <__aeabi_i2d>
 23f6b22:	4680      	mov	r8, r0
 23f6b24:	4628      	mov	r0, r5
 23f6b26:	4689      	mov	r9, r1
 23f6b28:	f7f6 f854 	bl	23ecbd4 <__aeabi_i2d>
 23f6b2c:	4602      	mov	r2, r0
 23f6b2e:	460b      	mov	r3, r1
 23f6b30:	4640      	mov	r0, r8
 23f6b32:	4649      	mov	r1, r9
 23f6b34:	f7f6 f9e2 	bl	23ecefc <__aeabi_ddiv>
 23f6b38:	2200      	movs	r2, #0
 23f6b3a:	4b3e      	ldr	r3, [pc, #248]	; (23f6c34 <kiss_fftr_alloc+0x1ac>)
 23f6b3c:	f7f5 fefe 	bl	23ec93c <__adddf3>
            double phase =
 23f6b40:	a337      	add	r3, pc, #220	; (adr r3, 23f6c20 <kiss_fftr_alloc+0x198>)
 23f6b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6b46:	f7f6 f8af 	bl	23ecca8 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23f6b4a:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23f6b4e:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23f6b52:	f002 ff9d 	bl	23f9a90 <cos>
 23f6b56:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 23f6b5a:	68a3      	ldr	r3, [r4, #8]
 23f6b5c:	ec51 0b10 	vmov	r0, r1, d0
 23f6b60:	f1a8 0808 	sub.w	r8, r8, #8
 23f6b64:	eb03 0908 	add.w	r9, r3, r8
 23f6b68:	f7f6 fb96 	bl	23ed298 <__aeabi_d2f>
 23f6b6c:	eeb0 0a48 	vmov.f32	s0, s16
 23f6b70:	eef0 0a68 	vmov.f32	s1, s17
 23f6b74:	f8c9 0000 	str.w	r0, [r9]
 23f6b78:	f003 f8fa 	bl	23f9d70 <sin>
 23f6b7c:	68a3      	ldr	r3, [r4, #8]
 23f6b7e:	ec51 0b10 	vmov	r0, r1, d0
 23f6b82:	4498      	add	r8, r3
 23f6b84:	f7f6 fb88 	bl	23ed298 <__aeabi_d2f>
 23f6b88:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23f6b8c:	e7c2      	b.n	23f6b14 <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
 23f6b8e:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
 23f6b90:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
 23f6b92:	42b3      	cmp	r3, r6
 23f6b94:	d2a6      	bcs.n	23f6ae4 <kiss_fftr_alloc+0x5c>
        return NULL;
 23f6b96:	4654      	mov	r4, sl
 23f6b98:	e787      	b.n	23f6aaa <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
 23f6b9a:	455f      	cmp	r7, fp
 23f6b9c:	dd3a      	ble.n	23f6c14 <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23f6b9e:	f10b 0b01 	add.w	fp, fp, #1
 23f6ba2:	4658      	mov	r0, fp
 23f6ba4:	f7f6 f816 	bl	23ecbd4 <__aeabi_i2d>
 23f6ba8:	4680      	mov	r8, r0
 23f6baa:	4628      	mov	r0, r5
 23f6bac:	4689      	mov	r9, r1
 23f6bae:	f7f6 f811 	bl	23ecbd4 <__aeabi_i2d>
 23f6bb2:	4602      	mov	r2, r0
 23f6bb4:	460b      	mov	r3, r1
 23f6bb6:	4640      	mov	r0, r8
 23f6bb8:	4649      	mov	r1, r9
 23f6bba:	f7f6 f99f 	bl	23ecefc <__aeabi_ddiv>
 23f6bbe:	2200      	movs	r2, #0
 23f6bc0:	4b1c      	ldr	r3, [pc, #112]	; (23f6c34 <kiss_fftr_alloc+0x1ac>)
 23f6bc2:	f7f5 febb 	bl	23ec93c <__adddf3>
            double phase =
 23f6bc6:	a318      	add	r3, pc, #96	; (adr r3, 23f6c28 <kiss_fftr_alloc+0x1a0>)
 23f6bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6bcc:	f7f6 f86c 	bl	23ecca8 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23f6bd0:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23f6bd4:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23f6bd8:	f002 ff5a 	bl	23f9a90 <cos>
 23f6bdc:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 23f6be0:	68a3      	ldr	r3, [r4, #8]
 23f6be2:	ec51 0b10 	vmov	r0, r1, d0
 23f6be6:	f1a8 0808 	sub.w	r8, r8, #8
 23f6bea:	eb03 0908 	add.w	r9, r3, r8
 23f6bee:	f7f6 fb53 	bl	23ed298 <__aeabi_d2f>
 23f6bf2:	eeb0 0a48 	vmov.f32	s0, s16
 23f6bf6:	eef0 0a68 	vmov.f32	s1, s17
 23f6bfa:	f8c9 0000 	str.w	r0, [r9]
 23f6bfe:	f003 f8b7 	bl	23f9d70 <sin>
 23f6c02:	68a3      	ldr	r3, [r4, #8]
 23f6c04:	ec51 0b10 	vmov	r0, r1, d0
 23f6c08:	4498      	add	r8, r3
 23f6c0a:	f7f6 fb45 	bl	23ed298 <__aeabi_d2f>
 23f6c0e:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23f6c12:	e7c2      	b.n	23f6b9a <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
 23f6c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f6c16:	2b00      	cmp	r3, #0
 23f6c18:	f43f af47 	beq.w	23f6aaa <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
 23f6c1c:	601e      	str	r6, [r3, #0]
 23f6c1e:	e744      	b.n	23f6aaa <kiss_fftr_alloc+0x22>
 23f6c20:	54442d18 	.word	0x54442d18
 23f6c24:	400921fb 	.word	0x400921fb
 23f6c28:	54442d18 	.word	0x54442d18
 23f6c2c:	c00921fb 	.word	0xc00921fb
 23f6c30:	023ff832 	.word	0x023ff832
 23f6c34:	3fe00000 	.word	0x3fe00000

023f6c38 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 23f6c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 23f6c3a:	6803      	ldr	r3, [r0, #0]
{
 23f6c3c:	4604      	mov	r4, r0
    if ( st->substate->inverse) {
 23f6c3e:	685b      	ldr	r3, [r3, #4]
{
 23f6c40:	4616      	mov	r6, r2
    if ( st->substate->inverse) {
 23f6c42:	b123      	cbz	r3, 23f6c4e <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
 23f6c44:	4836      	ldr	r0, [pc, #216]	; (23f6d20 <kiss_fftr+0xe8>)
 23f6c46:	9101      	str	r1, [sp, #4]
 23f6c48:	f7fd fa32 	bl	23f40b0 <_Z9ei_printfPKcz>
 23f6c4c:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
 23f6c4e:	6820      	ldr	r0, [r4, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23f6c50:	6862      	ldr	r2, [r4, #4]
    ncfft = st->substate->nfft;
 23f6c52:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23f6c54:	f7ff ff12 	bl	23f6a7c <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 23f6c58:	6863      	ldr	r3, [r4, #4]
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 23f6c5a:	2200      	movs	r2, #0
    tdc.r = st->tmpbuf[0].r;
 23f6c5c:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
 23f6c60:	ed93 7a01 	vldr	s14, [r3, #4]
    freqdata[0].r = tdc.r + tdc.i;
 23f6c64:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
 23f6c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f6c6c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
 23f6c70:	edc6 6a00 	vstr	s13, [r6]
    freqdata[ncfft].r = tdc.r - tdc.i;
 23f6c74:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].i = freqdata[0].i = 0;
 23f6c78:	6072      	str	r2, [r6, #4]
 23f6c7a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
        fpk    = st->tmpbuf[k];
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f6c7c:	f06f 0207 	mvn.w	r2, #7
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6c80:	2701      	movs	r7, #1

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f6c82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23f6c8a:	106d      	asrs	r5, r5, #1
 23f6c8c:	f106 0c08 	add.w	ip, r6, #8
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f6c90:	1b92      	subs	r2, r2, r6
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6c92:	42bd      	cmp	r5, r7
 23f6c94:	f10c 0c08 	add.w	ip, ip, #8
 23f6c98:	db3f      	blt.n	23f6d1a <kiss_fftr+0xe2>
        fpk    = st->tmpbuf[k];
 23f6c9a:	6861      	ldr	r1, [r4, #4]
 23f6c9c:	00f8      	lsls	r0, r7, #3
 23f6c9e:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 23f6ca2:	edd6 5a01 	vldr	s11, [r6, #4]
 23f6ca6:	edd6 6a00 	vldr	s13, [r6]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f6caa:	18d6      	adds	r6, r2, r3
 23f6cac:	4431      	add	r1, r6
 23f6cae:	edd1 4a00 	vldr	s9, [r1]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 23f6cb2:	edd1 7a01 	vldr	s15, [r1, #4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23f6cb6:	68a1      	ldr	r1, [r4, #8]
 23f6cb8:	3808      	subs	r0, #8
 23f6cba:	4401      	add	r1, r0
        C_ADD( f1k, fpk , fpnk );
 23f6cbc:	ee34 7aa6 	vadd.f32	s14, s9, s13
 23f6cc0:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
 23f6cc4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 23f6cc8:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23f6ccc:	edd1 4a01 	vldr	s9, [r1, #4]
 23f6cd0:	ed91 4a00 	vldr	s8, [r1]
 23f6cd4:	ee64 5ae7 	vnmul.f32	s11, s9, s15
 23f6cd8:	ee67 7a84 	vmul.f32	s15, s15, s8
 23f6cdc:	eee6 5a84 	vfma.f32	s11, s13, s8
 23f6ce0:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f6ce4:	ee77 6a25 	vadd.f32	s13, s14, s11
 23f6ce8:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f6cec:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f6cf0:	ed4c 6a02 	vstr	s13, [ip, #-8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f6cf4:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f6cf8:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f6cfc:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f6d00:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f6d04:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f6d08:	ed4c 6a01 	vstr	s13, [ip, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6d0c:	3701      	adds	r7, #1
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f6d0e:	ed03 7a02 	vstr	s14, [r3, #-8]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f6d12:	ed43 7a01 	vstr	s15, [r3, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f6d16:	3b08      	subs	r3, #8
 23f6d18:	e7bb      	b.n	23f6c92 <kiss_fftr+0x5a>
    }
}
 23f6d1a:	b003      	add	sp, #12
 23f6d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f6d1e:	bf00      	nop
 23f6d20:	023ff84b 	.word	0x023ff84b

023f6d24 <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23f6d24:	2001      	movs	r0, #1
 23f6d26:	4770      	bx	lr

023f6d28 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23f6d28:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f6d2c:	4770      	bx	lr

023f6d2e <_ZN14Microphone_PDM6uninitEv>:
	}
 23f6d2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f6d32:	4770      	bx	lr

023f6d34 <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23f6d34:	f000 b8c8 	b.w	23f6ec8 <_ZN22Microphone_PDM_RTL872x4initEv>

023f6d38 <_ZN14Microphone_PDM5startEv>:
		return Microphone_PDM_MCU::start();
 23f6d38:	f000 b8da 	b.w	23f6ef0 <_ZN22Microphone_PDM_RTL872x5startEv>

023f6d3c <_ZN14Microphone_PDM4stopEv>:
		return Microphone_PDM_MCU::stop();
 23f6d3c:	f000 b8b9 	b.w	23f6eb2 <_ZN22Microphone_PDM_RTL872x4stopEv>

023f6d40 <_ZNK14Microphone_PDM16samplesAvailableEv>:
		return Microphone_PDM_MCU::samplesAvailable();
 23f6d40:	f000 b8de 	b.w	23f6f00 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023f6d44 <_ZN14Microphone_PDM11copySamplesEPv>:
		return Microphone_PDM_MCU::copySamples(pSamples);
 23f6d44:	f000 b8e5 	b.w	23f6f12 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>

023f6d48 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23f6d48:	b510      	push	{r4, lr}
 23f6d4a:	4604      	mov	r4, r0
 23f6d4c:	4b02      	ldr	r3, [pc, #8]	; (23f6d58 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23f6d4e:	6003      	str	r3, [r0, #0]
 23f6d50:	f000 f8ae 	bl	23f6eb0 <_ZN22Microphone_PDM_RTL872xD1Ev>
 23f6d54:	4620      	mov	r0, r4
 23f6d56:	bd10      	pop	{r4, pc}
 23f6d58:	023ff87c 	.word	0x023ff87c

023f6d5c <_ZN18Microphone_PDM_MCUD0Ev>:
 23f6d5c:	b510      	push	{r4, lr}
 23f6d5e:	4604      	mov	r4, r0
 23f6d60:	f7ff fff2 	bl	23f6d48 <_ZN18Microphone_PDM_MCUD1Ev>
 23f6d64:	4620      	mov	r0, r4
 23f6d66:	2120      	movs	r1, #32
 23f6d68:	f7f6 fd19 	bl	23ed79e <_ZdlPvj>
 23f6d6c:	4620      	mov	r0, r4
 23f6d6e:	bd10      	pop	{r4, pc}

023f6d70 <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM *Microphone_PDM::_instance = NULL;

Microphone_PDM::Microphone_PDM() {
}

Microphone_PDM::~Microphone_PDM() {
 23f6d70:	b510      	push	{r4, lr}
 23f6d72:	4604      	mov	r4, r0
 23f6d74:	4b02      	ldr	r3, [pc, #8]	; (23f6d80 <_ZN14Microphone_PDMD1Ev+0x10>)
 23f6d76:	6003      	str	r3, [r0, #0]
 23f6d78:	f7ff ffe6 	bl	23f6d48 <_ZN18Microphone_PDM_MCUD1Ev>

}
 23f6d7c:	4620      	mov	r0, r4
 23f6d7e:	bd10      	pop	{r4, pc}
 23f6d80:	023ff8ac 	.word	0x023ff8ac

023f6d84 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23f6d84:	b510      	push	{r4, lr}
 23f6d86:	4604      	mov	r4, r0
}
 23f6d88:	f7ff fff2 	bl	23f6d70 <_ZN14Microphone_PDMD1Ev>
 23f6d8c:	4620      	mov	r0, r4
 23f6d8e:	2124      	movs	r1, #36	; 0x24
 23f6d90:	f7f6 fd05 	bl	23ed79e <_ZdlPvj>
 23f6d94:	4620      	mov	r0, r4
 23f6d96:	bd10      	pop	{r4, pc}

023f6d98 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23f6d98:	2300      	movs	r3, #0
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f6d9a:	b530      	push	{r4, r5, lr}
 23f6d9c:	b085      	sub	sp, #20
 23f6d9e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23f6da0:	688b      	ldr	r3, [r1, #8]
 23f6da2:	4605      	mov	r5, r0
 23f6da4:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23f6da6:	b133      	cbz	r3, 23f6db6 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f6da8:	2202      	movs	r2, #2
 23f6daa:	4668      	mov	r0, sp
 23f6dac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f6dae:	68e3      	ldr	r3, [r4, #12]
 23f6db0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f6db2:	68a3      	ldr	r3, [r4, #8]
 23f6db4:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23f6db6:	4669      	mov	r1, sp
 23f6db8:	4628      	mov	r0, r5
 23f6dba:	f000 f8c1 	bl	23f6f40 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23f6dbe:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f6dc0:	4668      	mov	r0, sp
 23f6dc2:	f7fa fa05 	bl	23f11d0 <_ZNSt14_Function_baseD1Ev>
	}
 23f6dc6:	4620      	mov	r0, r4
 23f6dc8:	b005      	add	sp, #20
 23f6dca:	bd30      	pop	{r4, r5, pc}

023f6dcc <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23f6dcc:	b510      	push	{r4, lr}
 23f6dce:	4604      	mov	r4, r0
 23f6dd0:	f000 f8dc 	bl	23f6f8c <_ZN22Microphone_PDM_RTL872xC1Ev>
 23f6dd4:	4b02      	ldr	r3, [pc, #8]	; (23f6de0 <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23f6dd6:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23f6dd8:	6023      	str	r3, [r4, #0]
 23f6dda:	2300      	movs	r3, #0
 23f6ddc:	6223      	str	r3, [r4, #32]
}
 23f6dde:	bd10      	pop	{r4, pc}
 23f6de0:	023ff8ac 	.word	0x023ff8ac

023f6de4 <_ZN14Microphone_PDM8instanceEv>:

// [static] 
Microphone_PDM &Microphone_PDM::instance() {
 23f6de4:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23f6de6:	4d06      	ldr	r5, [pc, #24]	; (23f6e00 <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23f6de8:	682b      	ldr	r3, [r5, #0]
 23f6dea:	b93b      	cbnz	r3, 23f6dfc <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23f6dec:	2024      	movs	r0, #36	; 0x24
 23f6dee:	f7f6 fcd0 	bl	23ed792 <_Znwj>
 23f6df2:	4604      	mov	r4, r0
 23f6df4:	b108      	cbz	r0, 23f6dfa <_ZN14Microphone_PDM8instanceEv+0x16>
 23f6df6:	f7ff ffe9 	bl	23f6dcc <_ZN14Microphone_PDMC1Ev>
 23f6dfa:	602c      	str	r4, [r5, #0]
	}
	return *_instance;
}
 23f6dfc:	6828      	ldr	r0, [r5, #0]
 23f6dfe:	bd38      	pop	{r3, r4, r5, pc}
 23f6e00:	1007ae70 	.word	0x1007ae70

023f6e04 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>:
	}
	sampling = NULL;
}

size_t Microphone_PDM::getSampleSizeInBytes() const {
	switch(outputSize) {
 23f6e04:	6903      	ldr	r3, [r0, #16]
		case OutputSize::UNSIGNED_8:
			return 1;

		default:
			return 2;
 23f6e06:	2b00      	cmp	r3, #0
	}
}
 23f6e08:	bf0c      	ite	eq
 23f6e0a:	2001      	moveq	r0, #1
 23f6e0c:	2002      	movne	r0, #2
 23f6e0e:	4770      	bx	lr

023f6e10 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:


void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f6e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6e12:	4607      	mov	r7, r0
	const int16_t *srcEnd = &src[numSamples];

	size_t increment = copySrcIncrement();
 23f6e14:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23f6e16:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23f6e18:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f6e1a:	460c      	mov	r4, r1
 23f6e1c:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23f6e1e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23f6e22:	4798      	blx	r3

	if (outputSize == OutputSize::UNSIGNED_8) {
 23f6e24:	693b      	ldr	r3, [r7, #16]
 23f6e26:	b9c3      	cbnz	r3, 23f6e5a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>

		// Scale the 16-bit signed values to an appropriate range for unsigned 8-bit values
		int16_t div = (int16_t)(1 << (size_t) range);
 23f6e28:	2201      	movs	r2, #1
			if (val > 127) {
				val = 127;
			}

			// Add 128 to make unsigned 8-bit (offset)
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f6e2a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23f6e2e:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23f6e30:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23f6e32:	409a      	lsls	r2, r3
 23f6e34:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23f6e36:	42b4      	cmp	r4, r6
 23f6e38:	d236      	bcs.n	23f6ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23f6e3a:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f6e3e:	4404      	add	r4, r0
			int16_t val = *src / div;
 23f6e40:	fb93 f3f2 	sdiv	r3, r3, r2
 23f6e44:	b21b      	sxth	r3, r3
			if (val < -128) {
 23f6e46:	2b7f      	cmp	r3, #127	; 0x7f
 23f6e48:	bfa8      	it	ge
 23f6e4a:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f6e4c:	428b      	cmp	r3, r1
 23f6e4e:	bfb8      	it	lt
 23f6e50:	460b      	movlt	r3, r1
 23f6e52:	3b80      	subs	r3, #128	; 0x80
 23f6e54:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23f6e58:	e7ed      	b.n	23f6e36 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
			dst += sizeof(uint8_t);
		}

	}
	else if (outputSize == OutputSize::SIGNED_16) {		
 23f6e5a:	2b01      	cmp	r3, #1
 23f6e5c:	d117      	bne.n	23f6e8e <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f6e5e:	697a      	ldr	r2, [r7, #20]
			// Clip to signed 16-bit
			if (val < -32767) {
				val = -32767;
			}
			if (val > 32768) {
				val = 32868;
 23f6e60:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23f6e64:	4911      	ldr	r1, [pc, #68]	; (23f6eac <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f6e66:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23f6e6a:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23f6e6c:	42b4      	cmp	r4, r6
 23f6e6e:	d21b      	bcs.n	23f6ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23f6e70:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f6e74:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23f6e76:	4093      	lsls	r3, r2
			if (val < -32767) {
 23f6e78:	428b      	cmp	r3, r1
 23f6e7a:	db06      	blt.n	23f6e8a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23f6e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23f6e80:	bfc8      	it	gt
 23f6e82:	463b      	movgt	r3, r7
			}

			*((int16_t *)dst) = (int16_t) val;
 23f6e84:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23f6e88:	e7f0      	b.n	23f6e6c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23f6e8a:	4b08      	ldr	r3, [pc, #32]	; (23f6eac <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23f6e8c:	e7fa      	b.n	23f6e84 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
			dst += sizeof(uint16_t);
		}
	}
	else {
		// OutputSize::RAW_SIGNED_16
		if (src != (int16_t *)dst || increment != 1) {
 23f6e8e:	42ac      	cmp	r4, r5
 23f6e90:	d101      	bne.n	23f6e96 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23f6e92:	2801      	cmp	r0, #1
 23f6e94:	d008      	beq.n	23f6ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			while(src < srcEnd) {
				*((int16_t *)dst) = *src;
				dst += sizeof(int16_t);
				src += increment;
 23f6e96:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23f6e98:	42b4      	cmp	r4, r6
 23f6e9a:	d205      	bcs.n	23f6ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23f6e9c:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23f6ea0:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23f6ea2:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23f6ea6:	e7f7      	b.n	23f6e98 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
			}
		}
	}
}
 23f6ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6eaa:	bf00      	nop
 23f6eac:	ffff8001 	.word	0xffff8001

023f6eb0 <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23f6eb0:	4770      	bx	lr

023f6eb2 <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23f6eb2:	2300      	movs	r3, #0
 23f6eb4:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23f6eb6:	4618      	mov	r0, r3
 23f6eb8:	4770      	bx	lr

023f6eba <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23f6eba:	b510      	push	{r4, lr}
 23f6ebc:	4604      	mov	r4, r0
}
 23f6ebe:	2120      	movs	r1, #32
 23f6ec0:	f7f6 fc6d 	bl	23ed79e <_ZdlPvj>
 23f6ec4:	4620      	mov	r0, r4
 23f6ec6:	bd10      	pop	{r4, pc}

023f6ec8 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23f6ec8:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23f6eca:	68c3      	ldr	r3, [r0, #12]
 23f6ecc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23f6ed0:	d008      	beq.n	23f6ee4 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f6ed2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23f6ed6:	d005      	beq.n	23f6ee4 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f6ed8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23f6edc:	bf1c      	itt	ne
 23f6ede:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23f6ee2:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23f6ee4:	7a01      	ldrb	r1, [r0, #8]
 23f6ee6:	68c0      	ldr	r0, [r0, #12]
 23f6ee8:	f7f9 feb6 	bl	23f0c58 <dmic_setup>
}
 23f6eec:	2000      	movs	r0, #0
 23f6eee:	bd08      	pop	{r3, pc}

023f6ef0 <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23f6ef0:	b510      	push	{r4, lr}
 23f6ef2:	4604      	mov	r4, r0
    dmic_flush();
 23f6ef4:	f7f9 ff4a 	bl	23f0d8c <dmic_flush>
    running = true;
 23f6ef8:	2301      	movs	r3, #1
}
 23f6efa:	2000      	movs	r0, #0
    running = true;
 23f6efc:	7723      	strb	r3, [r4, #28]
}
 23f6efe:	bd10      	pop	{r4, pc}

023f6f00 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23f6f00:	b508      	push	{r3, lr}
    if (!running) {
 23f6f02:	7f00      	ldrb	r0, [r0, #28]
 23f6f04:	b120      	cbz	r0, 23f6f10 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23f6f06:	f7f9 ff4b 	bl	23f0da0 <dmic_ready>
 23f6f0a:	3800      	subs	r0, #0
 23f6f0c:	bf18      	it	ne
 23f6f0e:	2001      	movne	r0, #1
}
 23f6f10:	bd08      	pop	{r3, pc}

023f6f12 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f6f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23f6f14:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f6f16:	4604      	mov	r4, r0
    if (!running) {
 23f6f18:	b91d      	cbnz	r5, 23f6f22 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23f6f1a:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23f6f1c:	4628      	mov	r0, r5
 23f6f1e:	b003      	add	sp, #12
 23f6f20:	bd30      	pop	{r4, r5, pc}
 23f6f22:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23f6f24:	f7f9 ff3c 	bl	23f0da0 <dmic_ready>
	if (src) {
 23f6f28:	4601      	mov	r1, r0
 23f6f2a:	2800      	cmp	r0, #0
 23f6f2c:	d0f5      	beq.n	23f6f1a <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23f6f2e:	4620      	mov	r0, r4
 23f6f30:	9a01      	ldr	r2, [sp, #4]
 23f6f32:	f7ff ff6d 	bl	23f6e10 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23f6f36:	2100      	movs	r1, #0
 23f6f38:	4608      	mov	r0, r1
 23f6f3a:	f7f9 ff33 	bl	23f0da4 <dmic_read>
		return true;
 23f6f3e:	e7ed      	b.n	23f6f1c <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023f6f40 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f6f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23f6f42:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f6f44:	4606      	mov	r6, r0
 23f6f46:	460d      	mov	r5, r1
    if (!running) {
 23f6f48:	b91f      	cbnz	r7, 23f6f52 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23f6f4a:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23f6f4c:	4638      	mov	r0, r7
 23f6f4e:	b003      	add	sp, #12
 23f6f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23f6f52:	f7f9 ff25 	bl	23f0da0 <dmic_ready>
	if (src) {
 23f6f56:	4604      	mov	r4, r0
 23f6f58:	2800      	cmp	r0, #0
 23f6f5a:	d0f6      	beq.n	23f6f4a <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23f6f5c:	4602      	mov	r2, r0
 23f6f5e:	4601      	mov	r1, r0
 23f6f60:	4630      	mov	r0, r6
 23f6f62:	f7ff ff55 	bl	23f6e10 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23f6f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 23f6f6a:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f6f6c:	68ab      	ldr	r3, [r5, #8]
 23f6f6e:	9400      	str	r4, [sp, #0]
 23f6f70:	b90b      	cbnz	r3, 23f6f76 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23f6f72:	f002 fcf3 	bl	23f995c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6f76:	4669      	mov	r1, sp
 23f6f78:	4628      	mov	r0, r5
 23f6f7a:	68eb      	ldr	r3, [r5, #12]
 23f6f7c:	aa01      	add	r2, sp, #4
 23f6f7e:	4798      	blx	r3
        dmic_read(NULL, 0);
 23f6f80:	2100      	movs	r1, #0
 23f6f82:	4608      	mov	r0, r1
 23f6f84:	f7f9 ff0e 	bl	23f0da4 <dmic_read>
		return true;
 23f6f88:	e7e0      	b.n	23f6f4c <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>
	...

023f6f8c <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23f6f8c:	f04f 0c01 	mov.w	ip, #1
 23f6f90:	2104      	movs	r1, #4
 23f6f92:	4a06      	ldr	r2, [pc, #24]	; (23f6fac <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23f6f94:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23f6f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 23f6f9c:	6042      	str	r2, [r0, #4]
 23f6f9e:	2200      	movs	r2, #0
 23f6fa0:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23f6fa2:	4903      	ldr	r1, [pc, #12]	; (23f6fb0 <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23f6fa4:	7202      	strb	r2, [r0, #8]
 23f6fa6:	6001      	str	r1, [r0, #0]
 23f6fa8:	7702      	strb	r2, [r0, #28]
}
 23f6faa:	4770      	bx	lr
 23f6fac:	000c000b 	.word	0x000c000b
 23f6fb0:	023ff8dc 	.word	0x023ff8dc

023f6fb4 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23f6fb4:	2300      	movs	r3, #0
 23f6fb6:	4802      	ldr	r0, [pc, #8]	; (23f6fc0 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23f6fb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23f6fba:	f000 b91b 	b.w	23f71f4 <os_mutex_create>
 23f6fbe:	bf00      	nop
 23f6fc0:	1007ae74 	.word	0x1007ae74

023f6fc4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f6fc4:	b509      	push	{r0, r3, lr}
 23f6fc6:	4804      	ldr	r0, [pc, #16]	; (23f6fd8 <HAL_USB_USART_Init+0x14>)
 23f6fc8:	6800      	ldr	r0, [r0, #0]
 23f6fca:	4b04      	ldr	r3, [pc, #16]	; (23f6fdc <HAL_USB_USART_Init+0x18>)
 23f6fcc:	4403      	add	r3, r0
 23f6fce:	681b      	ldr	r3, [r3, #0]
 23f6fd0:	681b      	ldr	r3, [r3, #0]
 23f6fd2:	9302      	str	r3, [sp, #8]
 23f6fd4:	bd09      	pop	{r0, r3, pc}
 23f6fd6:	0000      	.short	0x0000
 23f6fd8:	10079990 	.word	0x10079990
 23f6fdc:	00000034 	.word	0x00000034

023f6fe0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f6fe0:	b509      	push	{r0, r3, lr}
 23f6fe2:	4804      	ldr	r0, [pc, #16]	; (23f6ff4 <HAL_USB_USART_Begin+0x14>)
 23f6fe4:	6800      	ldr	r0, [r0, #0]
 23f6fe6:	4b04      	ldr	r3, [pc, #16]	; (23f6ff8 <HAL_USB_USART_Begin+0x18>)
 23f6fe8:	4403      	add	r3, r0
 23f6fea:	681b      	ldr	r3, [r3, #0]
 23f6fec:	685b      	ldr	r3, [r3, #4]
 23f6fee:	9302      	str	r3, [sp, #8]
 23f6ff0:	bd09      	pop	{r0, r3, pc}
 23f6ff2:	0000      	.short	0x0000
 23f6ff4:	10079990 	.word	0x10079990
 23f6ff8:	00000034 	.word	0x00000034

023f6ffc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f6ffc:	b509      	push	{r0, r3, lr}
 23f6ffe:	4804      	ldr	r0, [pc, #16]	; (23f7010 <HAL_USB_USART_End+0x14>)
 23f7000:	6800      	ldr	r0, [r0, #0]
 23f7002:	4b04      	ldr	r3, [pc, #16]	; (23f7014 <HAL_USB_USART_End+0x18>)
 23f7004:	4403      	add	r3, r0
 23f7006:	681b      	ldr	r3, [r3, #0]
 23f7008:	689b      	ldr	r3, [r3, #8]
 23f700a:	9302      	str	r3, [sp, #8]
 23f700c:	bd09      	pop	{r0, r3, pc}
 23f700e:	0000      	.short	0x0000
 23f7010:	10079990 	.word	0x10079990
 23f7014:	00000034 	.word	0x00000034

023f7018 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f7018:	b509      	push	{r0, r3, lr}
 23f701a:	4804      	ldr	r0, [pc, #16]	; (23f702c <HAL_USB_USART_Available_Data+0x14>)
 23f701c:	6800      	ldr	r0, [r0, #0]
 23f701e:	4b04      	ldr	r3, [pc, #16]	; (23f7030 <HAL_USB_USART_Available_Data+0x18>)
 23f7020:	4403      	add	r3, r0
 23f7022:	681b      	ldr	r3, [r3, #0]
 23f7024:	691b      	ldr	r3, [r3, #16]
 23f7026:	9302      	str	r3, [sp, #8]
 23f7028:	bd09      	pop	{r0, r3, pc}
 23f702a:	0000      	.short	0x0000
 23f702c:	10079990 	.word	0x10079990
 23f7030:	00000034 	.word	0x00000034

023f7034 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f7034:	b509      	push	{r0, r3, lr}
 23f7036:	4804      	ldr	r0, [pc, #16]	; (23f7048 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f7038:	6800      	ldr	r0, [r0, #0]
 23f703a:	4b04      	ldr	r3, [pc, #16]	; (23f704c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f703c:	4403      	add	r3, r0
 23f703e:	681b      	ldr	r3, [r3, #0]
 23f7040:	695b      	ldr	r3, [r3, #20]
 23f7042:	9302      	str	r3, [sp, #8]
 23f7044:	bd09      	pop	{r0, r3, pc}
 23f7046:	0000      	.short	0x0000
 23f7048:	10079990 	.word	0x10079990
 23f704c:	00000034 	.word	0x00000034

023f7050 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f7050:	b509      	push	{r0, r3, lr}
 23f7052:	4804      	ldr	r0, [pc, #16]	; (23f7064 <HAL_USB_USART_Receive_Data+0x14>)
 23f7054:	6800      	ldr	r0, [r0, #0]
 23f7056:	4b04      	ldr	r3, [pc, #16]	; (23f7068 <HAL_USB_USART_Receive_Data+0x18>)
 23f7058:	4403      	add	r3, r0
 23f705a:	681b      	ldr	r3, [r3, #0]
 23f705c:	699b      	ldr	r3, [r3, #24]
 23f705e:	9302      	str	r3, [sp, #8]
 23f7060:	bd09      	pop	{r0, r3, pc}
 23f7062:	0000      	.short	0x0000
 23f7064:	10079990 	.word	0x10079990
 23f7068:	00000034 	.word	0x00000034

023f706c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f706c:	b509      	push	{r0, r3, lr}
 23f706e:	4804      	ldr	r0, [pc, #16]	; (23f7080 <HAL_USB_USART_Send_Data+0x14>)
 23f7070:	6800      	ldr	r0, [r0, #0]
 23f7072:	4b04      	ldr	r3, [pc, #16]	; (23f7084 <HAL_USB_USART_Send_Data+0x18>)
 23f7074:	4403      	add	r3, r0
 23f7076:	681b      	ldr	r3, [r3, #0]
 23f7078:	69db      	ldr	r3, [r3, #28]
 23f707a:	9302      	str	r3, [sp, #8]
 23f707c:	bd09      	pop	{r0, r3, pc}
 23f707e:	0000      	.short	0x0000
 23f7080:	10079990 	.word	0x10079990
 23f7084:	00000034 	.word	0x00000034

023f7088 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f7088:	b509      	push	{r0, r3, lr}
 23f708a:	4804      	ldr	r0, [pc, #16]	; (23f709c <HAL_USB_USART_Flush_Data+0x14>)
 23f708c:	6800      	ldr	r0, [r0, #0]
 23f708e:	4b04      	ldr	r3, [pc, #16]	; (23f70a0 <HAL_USB_USART_Flush_Data+0x18>)
 23f7090:	4403      	add	r3, r0
 23f7092:	681b      	ldr	r3, [r3, #0]
 23f7094:	6a1b      	ldr	r3, [r3, #32]
 23f7096:	9302      	str	r3, [sp, #8]
 23f7098:	bd09      	pop	{r0, r3, pc}
 23f709a:	0000      	.short	0x0000
 23f709c:	10079990 	.word	0x10079990
 23f70a0:	00000034 	.word	0x00000034

023f70a4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f70a4:	b509      	push	{r0, r3, lr}
 23f70a6:	4804      	ldr	r0, [pc, #16]	; (23f70b8 <HAL_USB_USART_Is_Connected+0x14>)
 23f70a8:	6800      	ldr	r0, [r0, #0]
 23f70aa:	4b04      	ldr	r3, [pc, #16]	; (23f70bc <HAL_USB_USART_Is_Connected+0x18>)
 23f70ac:	4403      	add	r3, r0
 23f70ae:	681b      	ldr	r3, [r3, #0]
 23f70b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f70b2:	9302      	str	r3, [sp, #8]
 23f70b4:	bd09      	pop	{r0, r3, pc}
 23f70b6:	0000      	.short	0x0000
 23f70b8:	10079990 	.word	0x10079990
 23f70bc:	00000034 	.word	0x00000034

023f70c0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f70c0:	b509      	push	{r0, r3, lr}
 23f70c2:	4804      	ldr	r0, [pc, #16]	; (23f70d4 <hal_usart_end+0x14>)
 23f70c4:	6800      	ldr	r0, [r0, #0]
 23f70c6:	4b04      	ldr	r3, [pc, #16]	; (23f70d8 <hal_usart_end+0x18>)
 23f70c8:	4403      	add	r3, r0
 23f70ca:	681b      	ldr	r3, [r3, #0]
 23f70cc:	689b      	ldr	r3, [r3, #8]
 23f70ce:	9302      	str	r3, [sp, #8]
 23f70d0:	bd09      	pop	{r0, r3, pc}
 23f70d2:	0000      	.short	0x0000
 23f70d4:	10079990 	.word	0x10079990
 23f70d8:	00000024 	.word	0x00000024

023f70dc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f70dc:	b509      	push	{r0, r3, lr}
 23f70de:	4804      	ldr	r0, [pc, #16]	; (23f70f0 <hal_usart_write+0x14>)
 23f70e0:	6800      	ldr	r0, [r0, #0]
 23f70e2:	4b04      	ldr	r3, [pc, #16]	; (23f70f4 <hal_usart_write+0x18>)
 23f70e4:	4403      	add	r3, r0
 23f70e6:	681b      	ldr	r3, [r3, #0]
 23f70e8:	68db      	ldr	r3, [r3, #12]
 23f70ea:	9302      	str	r3, [sp, #8]
 23f70ec:	bd09      	pop	{r0, r3, pc}
 23f70ee:	0000      	.short	0x0000
 23f70f0:	10079990 	.word	0x10079990
 23f70f4:	00000024 	.word	0x00000024

023f70f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f70f8:	b509      	push	{r0, r3, lr}
 23f70fa:	4804      	ldr	r0, [pc, #16]	; (23f710c <hal_usart_available+0x14>)
 23f70fc:	6800      	ldr	r0, [r0, #0]
 23f70fe:	4b04      	ldr	r3, [pc, #16]	; (23f7110 <hal_usart_available+0x18>)
 23f7100:	4403      	add	r3, r0
 23f7102:	681b      	ldr	r3, [r3, #0]
 23f7104:	691b      	ldr	r3, [r3, #16]
 23f7106:	9302      	str	r3, [sp, #8]
 23f7108:	bd09      	pop	{r0, r3, pc}
 23f710a:	0000      	.short	0x0000
 23f710c:	10079990 	.word	0x10079990
 23f7110:	00000024 	.word	0x00000024

023f7114 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f7114:	b509      	push	{r0, r3, lr}
 23f7116:	4804      	ldr	r0, [pc, #16]	; (23f7128 <hal_usart_read+0x14>)
 23f7118:	6800      	ldr	r0, [r0, #0]
 23f711a:	4b04      	ldr	r3, [pc, #16]	; (23f712c <hal_usart_read+0x18>)
 23f711c:	4403      	add	r3, r0
 23f711e:	681b      	ldr	r3, [r3, #0]
 23f7120:	695b      	ldr	r3, [r3, #20]
 23f7122:	9302      	str	r3, [sp, #8]
 23f7124:	bd09      	pop	{r0, r3, pc}
 23f7126:	0000      	.short	0x0000
 23f7128:	10079990 	.word	0x10079990
 23f712c:	00000024 	.word	0x00000024

023f7130 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f7130:	b509      	push	{r0, r3, lr}
 23f7132:	4804      	ldr	r0, [pc, #16]	; (23f7144 <hal_usart_peek+0x14>)
 23f7134:	6800      	ldr	r0, [r0, #0]
 23f7136:	4b04      	ldr	r3, [pc, #16]	; (23f7148 <hal_usart_peek+0x18>)
 23f7138:	4403      	add	r3, r0
 23f713a:	681b      	ldr	r3, [r3, #0]
 23f713c:	699b      	ldr	r3, [r3, #24]
 23f713e:	9302      	str	r3, [sp, #8]
 23f7140:	bd09      	pop	{r0, r3, pc}
 23f7142:	0000      	.short	0x0000
 23f7144:	10079990 	.word	0x10079990
 23f7148:	00000024 	.word	0x00000024

023f714c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f714c:	b509      	push	{r0, r3, lr}
 23f714e:	4804      	ldr	r0, [pc, #16]	; (23f7160 <hal_usart_flush+0x14>)
 23f7150:	6800      	ldr	r0, [r0, #0]
 23f7152:	4b04      	ldr	r3, [pc, #16]	; (23f7164 <hal_usart_flush+0x18>)
 23f7154:	4403      	add	r3, r0
 23f7156:	681b      	ldr	r3, [r3, #0]
 23f7158:	69db      	ldr	r3, [r3, #28]
 23f715a:	9302      	str	r3, [sp, #8]
 23f715c:	bd09      	pop	{r0, r3, pc}
 23f715e:	0000      	.short	0x0000
 23f7160:	10079990 	.word	0x10079990
 23f7164:	00000024 	.word	0x00000024

023f7168 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f7168:	b509      	push	{r0, r3, lr}
 23f716a:	4804      	ldr	r0, [pc, #16]	; (23f717c <hal_usart_is_enabled+0x14>)
 23f716c:	6800      	ldr	r0, [r0, #0]
 23f716e:	4b04      	ldr	r3, [pc, #16]	; (23f7180 <hal_usart_is_enabled+0x18>)
 23f7170:	4403      	add	r3, r0
 23f7172:	681b      	ldr	r3, [r3, #0]
 23f7174:	6a1b      	ldr	r3, [r3, #32]
 23f7176:	9302      	str	r3, [sp, #8]
 23f7178:	bd09      	pop	{r0, r3, pc}
 23f717a:	0000      	.short	0x0000
 23f717c:	10079990 	.word	0x10079990
 23f7180:	00000024 	.word	0x00000024

023f7184 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f7184:	b509      	push	{r0, r3, lr}
 23f7186:	4804      	ldr	r0, [pc, #16]	; (23f7198 <hal_usart_available_data_for_write+0x14>)
 23f7188:	6800      	ldr	r0, [r0, #0]
 23f718a:	4b04      	ldr	r3, [pc, #16]	; (23f719c <hal_usart_available_data_for_write+0x18>)
 23f718c:	4403      	add	r3, r0
 23f718e:	681b      	ldr	r3, [r3, #0]
 23f7190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7192:	9302      	str	r3, [sp, #8]
 23f7194:	bd09      	pop	{r0, r3, pc}
 23f7196:	0000      	.short	0x0000
 23f7198:	10079990 	.word	0x10079990
 23f719c:	00000024 	.word	0x00000024

023f71a0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f71a0:	b509      	push	{r0, r3, lr}
 23f71a2:	4804      	ldr	r0, [pc, #16]	; (23f71b4 <hal_usart_begin_config+0x14>)
 23f71a4:	6800      	ldr	r0, [r0, #0]
 23f71a6:	4b04      	ldr	r3, [pc, #16]	; (23f71b8 <hal_usart_begin_config+0x18>)
 23f71a8:	4403      	add	r3, r0
 23f71aa:	681b      	ldr	r3, [r3, #0]
 23f71ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f71ae:	9302      	str	r3, [sp, #8]
 23f71b0:	bd09      	pop	{r0, r3, pc}
 23f71b2:	0000      	.short	0x0000
 23f71b4:	10079990 	.word	0x10079990
 23f71b8:	00000024 	.word	0x00000024

023f71bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f71bc:	b509      	push	{r0, r3, lr}
 23f71be:	4804      	ldr	r0, [pc, #16]	; (23f71d0 <hal_usart_init_ex+0x14>)
 23f71c0:	6800      	ldr	r0, [r0, #0]
 23f71c2:	4b04      	ldr	r3, [pc, #16]	; (23f71d4 <hal_usart_init_ex+0x18>)
 23f71c4:	4403      	add	r3, r0
 23f71c6:	681b      	ldr	r3, [r3, #0]
 23f71c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f71ca:	9302      	str	r3, [sp, #8]
 23f71cc:	bd09      	pop	{r0, r3, pc}
 23f71ce:	0000      	.short	0x0000
 23f71d0:	10079990 	.word	0x10079990
 23f71d4:	00000024 	.word	0x00000024

023f71d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f71d8:	b509      	push	{r0, r3, lr}
 23f71da:	4804      	ldr	r0, [pc, #16]	; (23f71ec <inet_inet_ntop+0x14>)
 23f71dc:	6800      	ldr	r0, [r0, #0]
 23f71de:	4b04      	ldr	r3, [pc, #16]	; (23f71f0 <inet_inet_ntop+0x18>)
 23f71e0:	4403      	add	r3, r0
 23f71e2:	681b      	ldr	r3, [r3, #0]
 23f71e4:	695b      	ldr	r3, [r3, #20]
 23f71e6:	9302      	str	r3, [sp, #8]
 23f71e8:	bd09      	pop	{r0, r3, pc}
 23f71ea:	0000      	.short	0x0000
 23f71ec:	10079990 	.word	0x10079990
 23f71f0:	0000004c 	.word	0x0000004c

023f71f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f71f4:	b509      	push	{r0, r3, lr}
 23f71f6:	4804      	ldr	r0, [pc, #16]	; (23f7208 <os_mutex_create+0x14>)
 23f71f8:	6800      	ldr	r0, [r0, #0]
 23f71fa:	4b04      	ldr	r3, [pc, #16]	; (23f720c <os_mutex_create+0x18>)
 23f71fc:	4403      	add	r3, r0
 23f71fe:	681b      	ldr	r3, [r3, #0]
 23f7200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7202:	9302      	str	r3, [sp, #8]
 23f7204:	bd09      	pop	{r0, r3, pc}
 23f7206:	0000      	.short	0x0000
 23f7208:	10079990 	.word	0x10079990
 23f720c:	00000030 	.word	0x00000030

023f7210 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f7210:	b509      	push	{r0, r3, lr}
 23f7212:	4804      	ldr	r0, [pc, #16]	; (23f7224 <os_mutex_recursive_create+0x14>)
 23f7214:	6800      	ldr	r0, [r0, #0]
 23f7216:	4b04      	ldr	r3, [pc, #16]	; (23f7228 <os_mutex_recursive_create+0x18>)
 23f7218:	4403      	add	r3, r0
 23f721a:	681b      	ldr	r3, [r3, #0]
 23f721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f721e:	9302      	str	r3, [sp, #8]
 23f7220:	bd09      	pop	{r0, r3, pc}
 23f7222:	0000      	.short	0x0000
 23f7224:	10079990 	.word	0x10079990
 23f7228:	00000030 	.word	0x00000030

023f722c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f722c:	b509      	push	{r0, r3, lr}
 23f722e:	4804      	ldr	r0, [pc, #16]	; (23f7240 <os_mutex_recursive_destroy+0x14>)
 23f7230:	6800      	ldr	r0, [r0, #0]
 23f7232:	4b04      	ldr	r3, [pc, #16]	; (23f7244 <os_mutex_recursive_destroy+0x18>)
 23f7234:	4403      	add	r3, r0
 23f7236:	681b      	ldr	r3, [r3, #0]
 23f7238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f723a:	9302      	str	r3, [sp, #8]
 23f723c:	bd09      	pop	{r0, r3, pc}
 23f723e:	0000      	.short	0x0000
 23f7240:	10079990 	.word	0x10079990
 23f7244:	00000030 	.word	0x00000030

023f7248 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f7248:	b509      	push	{r0, r3, lr}
 23f724a:	4804      	ldr	r0, [pc, #16]	; (23f725c <os_mutex_recursive_lock+0x14>)
 23f724c:	6800      	ldr	r0, [r0, #0]
 23f724e:	4b04      	ldr	r3, [pc, #16]	; (23f7260 <os_mutex_recursive_lock+0x18>)
 23f7250:	4403      	add	r3, r0
 23f7252:	681b      	ldr	r3, [r3, #0]
 23f7254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7256:	9302      	str	r3, [sp, #8]
 23f7258:	bd09      	pop	{r0, r3, pc}
 23f725a:	0000      	.short	0x0000
 23f725c:	10079990 	.word	0x10079990
 23f7260:	00000030 	.word	0x00000030

023f7264 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f7264:	b509      	push	{r0, r3, lr}
 23f7266:	4804      	ldr	r0, [pc, #16]	; (23f7278 <os_mutex_recursive_unlock+0x14>)
 23f7268:	6800      	ldr	r0, [r0, #0]
 23f726a:	4b04      	ldr	r3, [pc, #16]	; (23f727c <os_mutex_recursive_unlock+0x18>)
 23f726c:	4403      	add	r3, r0
 23f726e:	681b      	ldr	r3, [r3, #0]
 23f7270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7272:	9302      	str	r3, [sp, #8]
 23f7274:	bd09      	pop	{r0, r3, pc}
 23f7276:	0000      	.short	0x0000
 23f7278:	10079990 	.word	0x10079990
 23f727c:	00000030 	.word	0x00000030

023f7280 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f7280:	b509      	push	{r0, r3, lr}
 23f7282:	4804      	ldr	r0, [pc, #16]	; (23f7294 <HAL_RNG_GetRandomNumber+0x14>)
 23f7284:	6800      	ldr	r0, [r0, #0]
 23f7286:	4b04      	ldr	r3, [pc, #16]	; (23f7298 <HAL_RNG_GetRandomNumber+0x18>)
 23f7288:	4403      	add	r3, r0
 23f728a:	681b      	ldr	r3, [r3, #0]
 23f728c:	685b      	ldr	r3, [r3, #4]
 23f728e:	9302      	str	r3, [sp, #8]
 23f7290:	bd09      	pop	{r0, r3, pc}
 23f7292:	0000      	.short	0x0000
 23f7294:	10079990 	.word	0x10079990
 23f7298:	00000000 	.word	0x00000000

023f729c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f729c:	b509      	push	{r0, r3, lr}
 23f729e:	4804      	ldr	r0, [pc, #16]	; (23f72b0 <HAL_Delay_Microseconds+0x14>)
 23f72a0:	6800      	ldr	r0, [r0, #0]
 23f72a2:	4b04      	ldr	r3, [pc, #16]	; (23f72b4 <HAL_Delay_Microseconds+0x18>)
 23f72a4:	4403      	add	r3, r0
 23f72a6:	681b      	ldr	r3, [r3, #0]
 23f72a8:	68db      	ldr	r3, [r3, #12]
 23f72aa:	9302      	str	r3, [sp, #8]
 23f72ac:	bd09      	pop	{r0, r3, pc}
 23f72ae:	0000      	.short	0x0000
 23f72b0:	10079990 	.word	0x10079990
 23f72b4:	00000000 	.word	0x00000000

023f72b8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23f72b8:	b509      	push	{r0, r3, lr}
 23f72ba:	4804      	ldr	r0, [pc, #16]	; (23f72cc <HAL_Timer_Get_Micro_Seconds+0x14>)
 23f72bc:	6800      	ldr	r0, [r0, #0]
 23f72be:	4b04      	ldr	r3, [pc, #16]	; (23f72d0 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23f72c0:	4403      	add	r3, r0
 23f72c2:	681b      	ldr	r3, [r3, #0]
 23f72c4:	691b      	ldr	r3, [r3, #16]
 23f72c6:	9302      	str	r3, [sp, #8]
 23f72c8:	bd09      	pop	{r0, r3, pc}
 23f72ca:	0000      	.short	0x0000
 23f72cc:	10079990 	.word	0x10079990
 23f72d0:	00000000 	.word	0x00000000

023f72d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f72d4:	b509      	push	{r0, r3, lr}
 23f72d6:	4804      	ldr	r0, [pc, #16]	; (23f72e8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f72d8:	6800      	ldr	r0, [r0, #0]
 23f72da:	4b04      	ldr	r3, [pc, #16]	; (23f72ec <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f72dc:	4403      	add	r3, r0
 23f72de:	681b      	ldr	r3, [r3, #0]
 23f72e0:	695b      	ldr	r3, [r3, #20]
 23f72e2:	9302      	str	r3, [sp, #8]
 23f72e4:	bd09      	pop	{r0, r3, pc}
 23f72e6:	0000      	.short	0x0000
 23f72e8:	10079990 	.word	0x10079990
 23f72ec:	00000000 	.word	0x00000000

023f72f0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f72f0:	b509      	push	{r0, r3, lr}
 23f72f2:	4804      	ldr	r0, [pc, #16]	; (23f7304 <hal_timer_millis+0x14>)
 23f72f4:	6800      	ldr	r0, [r0, #0]
 23f72f6:	4b04      	ldr	r3, [pc, #16]	; (23f7308 <hal_timer_millis+0x18>)
 23f72f8:	4403      	add	r3, r0
 23f72fa:	681b      	ldr	r3, [r3, #0]
 23f72fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f72fe:	9302      	str	r3, [sp, #8]
 23f7300:	bd09      	pop	{r0, r3, pc}
 23f7302:	0000      	.short	0x0000
 23f7304:	10079990 	.word	0x10079990
 23f7308:	00000000 	.word	0x00000000

023f730c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f730c:	b509      	push	{r0, r3, lr}
 23f730e:	4804      	ldr	r0, [pc, #16]	; (23f7320 <netdb_freeaddrinfo+0x14>)
 23f7310:	6800      	ldr	r0, [r0, #0]
 23f7312:	4b04      	ldr	r3, [pc, #16]	; (23f7324 <netdb_freeaddrinfo+0x18>)
 23f7314:	4403      	add	r3, r0
 23f7316:	681b      	ldr	r3, [r3, #0]
 23f7318:	689b      	ldr	r3, [r3, #8]
 23f731a:	9302      	str	r3, [sp, #8]
 23f731c:	bd09      	pop	{r0, r3, pc}
 23f731e:	0000      	.short	0x0000
 23f7320:	10079990 	.word	0x10079990
 23f7324:	00000050 	.word	0x00000050

023f7328 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f7328:	b509      	push	{r0, r3, lr}
 23f732a:	4804      	ldr	r0, [pc, #16]	; (23f733c <netdb_getaddrinfo+0x14>)
 23f732c:	6800      	ldr	r0, [r0, #0]
 23f732e:	4b04      	ldr	r3, [pc, #16]	; (23f7340 <netdb_getaddrinfo+0x18>)
 23f7330:	4403      	add	r3, r0
 23f7332:	681b      	ldr	r3, [r3, #0]
 23f7334:	68db      	ldr	r3, [r3, #12]
 23f7336:	9302      	str	r3, [sp, #8]
 23f7338:	bd09      	pop	{r0, r3, pc}
 23f733a:	0000      	.short	0x0000
 23f733c:	10079990 	.word	0x10079990
 23f7340:	00000050 	.word	0x00000050

023f7344 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f7344:	b509      	push	{r0, r3, lr}
 23f7346:	4804      	ldr	r0, [pc, #16]	; (23f7358 <panic_+0x14>)
 23f7348:	6800      	ldr	r0, [r0, #0]
 23f734a:	4b04      	ldr	r3, [pc, #16]	; (23f735c <panic_+0x18>)
 23f734c:	4403      	add	r3, r0
 23f734e:	681b      	ldr	r3, [r3, #0]
 23f7350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f7352:	9302      	str	r3, [sp, #8]
 23f7354:	bd09      	pop	{r0, r3, pc}
 23f7356:	0000      	.short	0x0000
 23f7358:	10079990 	.word	0x10079990
 23f735c:	00000048 	.word	0x00000048

023f7360 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f7360:	b509      	push	{r0, r3, lr}
 23f7362:	4804      	ldr	r0, [pc, #16]	; (23f7374 <log_level_name+0x14>)
 23f7364:	6800      	ldr	r0, [r0, #0]
 23f7366:	4b04      	ldr	r3, [pc, #16]	; (23f7378 <log_level_name+0x18>)
 23f7368:	4403      	add	r3, r0
 23f736a:	681b      	ldr	r3, [r3, #0]
 23f736c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f736e:	9302      	str	r3, [sp, #8]
 23f7370:	bd09      	pop	{r0, r3, pc}
 23f7372:	0000      	.short	0x0000
 23f7374:	10079990 	.word	0x10079990
 23f7378:	00000048 	.word	0x00000048

023f737c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f737c:	b509      	push	{r0, r3, lr}
 23f737e:	4804      	ldr	r0, [pc, #16]	; (23f7390 <log_set_callbacks+0x14>)
 23f7380:	6800      	ldr	r0, [r0, #0]
 23f7382:	4b04      	ldr	r3, [pc, #16]	; (23f7394 <log_set_callbacks+0x18>)
 23f7384:	4403      	add	r3, r0
 23f7386:	681b      	ldr	r3, [r3, #0]
 23f7388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f738a:	9302      	str	r3, [sp, #8]
 23f738c:	bd09      	pop	{r0, r3, pc}
 23f738e:	0000      	.short	0x0000
 23f7390:	10079990 	.word	0x10079990
 23f7394:	00000048 	.word	0x00000048

023f7398 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f7398:	b509      	push	{r0, r3, lr}
 23f739a:	4804      	ldr	r0, [pc, #16]	; (23f73ac <spark_process+0x14>)
 23f739c:	6800      	ldr	r0, [r0, #0]
 23f739e:	4b04      	ldr	r3, [pc, #16]	; (23f73b0 <spark_process+0x18>)
 23f73a0:	4403      	add	r3, r0
 23f73a2:	681b      	ldr	r3, [r3, #0]
 23f73a4:	689b      	ldr	r3, [r3, #8]
 23f73a6:	9302      	str	r3, [sp, #8]
 23f73a8:	bd09      	pop	{r0, r3, pc}
 23f73aa:	0000      	.short	0x0000
 23f73ac:	10079990 	.word	0x10079990
 23f73b0:	0000002c 	.word	0x0000002c

023f73b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f73b4:	b509      	push	{r0, r3, lr}
 23f73b6:	4804      	ldr	r0, [pc, #16]	; (23f73c8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f73b8:	6800      	ldr	r0, [r0, #0]
 23f73ba:	4b04      	ldr	r3, [pc, #16]	; (23f73cc <spark_set_random_seed_from_cloud_handler+0x18>)
 23f73bc:	4403      	add	r3, r0
 23f73be:	681b      	ldr	r3, [r3, #0]
 23f73c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f73c2:	9302      	str	r3, [sp, #8]
 23f73c4:	bd09      	pop	{r0, r3, pc}
 23f73c6:	0000      	.short	0x0000
 23f73c8:	10079990 	.word	0x10079990
 23f73cc:	0000002c 	.word	0x0000002c

023f73d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f73d0:	b509      	push	{r0, r3, lr}
 23f73d2:	4804      	ldr	r0, [pc, #16]	; (23f73e4 <network_connect+0x14>)
 23f73d4:	6800      	ldr	r0, [r0, #0]
 23f73d6:	4b04      	ldr	r3, [pc, #16]	; (23f73e8 <network_connect+0x18>)
 23f73d8:	4403      	add	r3, r0
 23f73da:	681b      	ldr	r3, [r3, #0]
 23f73dc:	685b      	ldr	r3, [r3, #4]
 23f73de:	9302      	str	r3, [sp, #8]
 23f73e0:	bd09      	pop	{r0, r3, pc}
 23f73e2:	0000      	.short	0x0000
 23f73e4:	10079990 	.word	0x10079990
 23f73e8:	00000028 	.word	0x00000028

023f73ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f73ec:	b509      	push	{r0, r3, lr}
 23f73ee:	4804      	ldr	r0, [pc, #16]	; (23f7400 <network_connecting+0x14>)
 23f73f0:	6800      	ldr	r0, [r0, #0]
 23f73f2:	4b04      	ldr	r3, [pc, #16]	; (23f7404 <network_connecting+0x18>)
 23f73f4:	4403      	add	r3, r0
 23f73f6:	681b      	ldr	r3, [r3, #0]
 23f73f8:	689b      	ldr	r3, [r3, #8]
 23f73fa:	9302      	str	r3, [sp, #8]
 23f73fc:	bd09      	pop	{r0, r3, pc}
 23f73fe:	0000      	.short	0x0000
 23f7400:	10079990 	.word	0x10079990
 23f7404:	00000028 	.word	0x00000028

023f7408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f7408:	b509      	push	{r0, r3, lr}
 23f740a:	4804      	ldr	r0, [pc, #16]	; (23f741c <network_disconnect+0x14>)
 23f740c:	6800      	ldr	r0, [r0, #0]
 23f740e:	4b04      	ldr	r3, [pc, #16]	; (23f7420 <network_disconnect+0x18>)
 23f7410:	4403      	add	r3, r0
 23f7412:	681b      	ldr	r3, [r3, #0]
 23f7414:	68db      	ldr	r3, [r3, #12]
 23f7416:	9302      	str	r3, [sp, #8]
 23f7418:	bd09      	pop	{r0, r3, pc}
 23f741a:	0000      	.short	0x0000
 23f741c:	10079990 	.word	0x10079990
 23f7420:	00000028 	.word	0x00000028

023f7424 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f7424:	b509      	push	{r0, r3, lr}
 23f7426:	4804      	ldr	r0, [pc, #16]	; (23f7438 <network_ready+0x14>)
 23f7428:	6800      	ldr	r0, [r0, #0]
 23f742a:	4b04      	ldr	r3, [pc, #16]	; (23f743c <network_ready+0x18>)
 23f742c:	4403      	add	r3, r0
 23f742e:	681b      	ldr	r3, [r3, #0]
 23f7430:	691b      	ldr	r3, [r3, #16]
 23f7432:	9302      	str	r3, [sp, #8]
 23f7434:	bd09      	pop	{r0, r3, pc}
 23f7436:	0000      	.short	0x0000
 23f7438:	10079990 	.word	0x10079990
 23f743c:	00000028 	.word	0x00000028

023f7440 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7440:	b509      	push	{r0, r3, lr}
 23f7442:	4804      	ldr	r0, [pc, #16]	; (23f7454 <network_on+0x14>)
 23f7444:	6800      	ldr	r0, [r0, #0]
 23f7446:	4b04      	ldr	r3, [pc, #16]	; (23f7458 <network_on+0x18>)
 23f7448:	4403      	add	r3, r0
 23f744a:	681b      	ldr	r3, [r3, #0]
 23f744c:	695b      	ldr	r3, [r3, #20]
 23f744e:	9302      	str	r3, [sp, #8]
 23f7450:	bd09      	pop	{r0, r3, pc}
 23f7452:	0000      	.short	0x0000
 23f7454:	10079990 	.word	0x10079990
 23f7458:	00000028 	.word	0x00000028

023f745c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f745c:	b509      	push	{r0, r3, lr}
 23f745e:	4804      	ldr	r0, [pc, #16]	; (23f7470 <network_off+0x14>)
 23f7460:	6800      	ldr	r0, [r0, #0]
 23f7462:	4b04      	ldr	r3, [pc, #16]	; (23f7474 <network_off+0x18>)
 23f7464:	4403      	add	r3, r0
 23f7466:	681b      	ldr	r3, [r3, #0]
 23f7468:	699b      	ldr	r3, [r3, #24]
 23f746a:	9302      	str	r3, [sp, #8]
 23f746c:	bd09      	pop	{r0, r3, pc}
 23f746e:	0000      	.short	0x0000
 23f7470:	10079990 	.word	0x10079990
 23f7474:	00000028 	.word	0x00000028

023f7478 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f7478:	b509      	push	{r0, r3, lr}
 23f747a:	4804      	ldr	r0, [pc, #16]	; (23f748c <network_listen+0x14>)
 23f747c:	6800      	ldr	r0, [r0, #0]
 23f747e:	4b04      	ldr	r3, [pc, #16]	; (23f7490 <network_listen+0x18>)
 23f7480:	4403      	add	r3, r0
 23f7482:	681b      	ldr	r3, [r3, #0]
 23f7484:	69db      	ldr	r3, [r3, #28]
 23f7486:	9302      	str	r3, [sp, #8]
 23f7488:	bd09      	pop	{r0, r3, pc}
 23f748a:	0000      	.short	0x0000
 23f748c:	10079990 	.word	0x10079990
 23f7490:	00000028 	.word	0x00000028

023f7494 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f7494:	b509      	push	{r0, r3, lr}
 23f7496:	4804      	ldr	r0, [pc, #16]	; (23f74a8 <network_listening+0x14>)
 23f7498:	6800      	ldr	r0, [r0, #0]
 23f749a:	4b04      	ldr	r3, [pc, #16]	; (23f74ac <network_listening+0x18>)
 23f749c:	4403      	add	r3, r0
 23f749e:	681b      	ldr	r3, [r3, #0]
 23f74a0:	6a1b      	ldr	r3, [r3, #32]
 23f74a2:	9302      	str	r3, [sp, #8]
 23f74a4:	bd09      	pop	{r0, r3, pc}
 23f74a6:	0000      	.short	0x0000
 23f74a8:	10079990 	.word	0x10079990
 23f74ac:	00000028 	.word	0x00000028

023f74b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f74b0:	b509      	push	{r0, r3, lr}
 23f74b2:	4804      	ldr	r0, [pc, #16]	; (23f74c4 <network_set_listen_timeout+0x14>)
 23f74b4:	6800      	ldr	r0, [r0, #0]
 23f74b6:	4b04      	ldr	r3, [pc, #16]	; (23f74c8 <network_set_listen_timeout+0x18>)
 23f74b8:	4403      	add	r3, r0
 23f74ba:	681b      	ldr	r3, [r3, #0]
 23f74bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f74be:	9302      	str	r3, [sp, #8]
 23f74c0:	bd09      	pop	{r0, r3, pc}
 23f74c2:	0000      	.short	0x0000
 23f74c4:	10079990 	.word	0x10079990
 23f74c8:	00000028 	.word	0x00000028

023f74cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f74cc:	b509      	push	{r0, r3, lr}
 23f74ce:	4804      	ldr	r0, [pc, #16]	; (23f74e0 <network_get_listen_timeout+0x14>)
 23f74d0:	6800      	ldr	r0, [r0, #0]
 23f74d2:	4b04      	ldr	r3, [pc, #16]	; (23f74e4 <network_get_listen_timeout+0x18>)
 23f74d4:	4403      	add	r3, r0
 23f74d6:	681b      	ldr	r3, [r3, #0]
 23f74d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f74da:	9302      	str	r3, [sp, #8]
 23f74dc:	bd09      	pop	{r0, r3, pc}
 23f74de:	0000      	.short	0x0000
 23f74e0:	10079990 	.word	0x10079990
 23f74e4:	00000028 	.word	0x00000028

023f74e8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f74e8:	b509      	push	{r0, r3, lr}
 23f74ea:	4804      	ldr	r0, [pc, #16]	; (23f74fc <network_is_on+0x14>)
 23f74ec:	6800      	ldr	r0, [r0, #0]
 23f74ee:	4b04      	ldr	r3, [pc, #16]	; (23f7500 <network_is_on+0x18>)
 23f74f0:	4403      	add	r3, r0
 23f74f2:	681b      	ldr	r3, [r3, #0]
 23f74f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f74f6:	9302      	str	r3, [sp, #8]
 23f74f8:	bd09      	pop	{r0, r3, pc}
 23f74fa:	0000      	.short	0x0000
 23f74fc:	10079990 	.word	0x10079990
 23f7500:	00000028 	.word	0x00000028

023f7504 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f7504:	b509      	push	{r0, r3, lr}
 23f7506:	4804      	ldr	r0, [pc, #16]	; (23f7518 <network_is_off+0x14>)
 23f7508:	6800      	ldr	r0, [r0, #0]
 23f750a:	4b04      	ldr	r3, [pc, #16]	; (23f751c <network_is_off+0x18>)
 23f750c:	4403      	add	r3, r0
 23f750e:	681b      	ldr	r3, [r3, #0]
 23f7510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7512:	9302      	str	r3, [sp, #8]
 23f7514:	bd09      	pop	{r0, r3, pc}
 23f7516:	0000      	.short	0x0000
 23f7518:	10079990 	.word	0x10079990
 23f751c:	00000028 	.word	0x00000028

023f7520 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f7520:	b509      	push	{r0, r3, lr}
 23f7522:	4804      	ldr	r0, [pc, #16]	; (23f7534 <set_system_mode+0x14>)
 23f7524:	6800      	ldr	r0, [r0, #0]
 23f7526:	4b04      	ldr	r3, [pc, #16]	; (23f7538 <set_system_mode+0x18>)
 23f7528:	4403      	add	r3, r0
 23f752a:	681b      	ldr	r3, [r3, #0]
 23f752c:	685b      	ldr	r3, [r3, #4]
 23f752e:	9302      	str	r3, [sp, #8]
 23f7530:	bd09      	pop	{r0, r3, pc}
 23f7532:	0000      	.short	0x0000
 23f7534:	10079990 	.word	0x10079990
 23f7538:	00000008 	.word	0x00000008

023f753c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f753c:	b509      	push	{r0, r3, lr}
 23f753e:	4804      	ldr	r0, [pc, #16]	; (23f7550 <system_delay_ms+0x14>)
 23f7540:	6800      	ldr	r0, [r0, #0]
 23f7542:	4b04      	ldr	r3, [pc, #16]	; (23f7554 <system_delay_ms+0x18>)
 23f7544:	4403      	add	r3, r0
 23f7546:	681b      	ldr	r3, [r3, #0]
 23f7548:	695b      	ldr	r3, [r3, #20]
 23f754a:	9302      	str	r3, [sp, #8]
 23f754c:	bd09      	pop	{r0, r3, pc}
 23f754e:	0000      	.short	0x0000
 23f7550:	10079990 	.word	0x10079990
 23f7554:	00000008 	.word	0x00000008

023f7558 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f7558:	b509      	push	{r0, r3, lr}
 23f755a:	4804      	ldr	r0, [pc, #16]	; (23f756c <system_thread_set_state+0x14>)
 23f755c:	6800      	ldr	r0, [r0, #0]
 23f755e:	4b04      	ldr	r3, [pc, #16]	; (23f7570 <system_thread_set_state+0x18>)
 23f7560:	4403      	add	r3, r0
 23f7562:	681b      	ldr	r3, [r3, #0]
 23f7564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7566:	9302      	str	r3, [sp, #8]
 23f7568:	bd09      	pop	{r0, r3, pc}
 23f756a:	0000      	.short	0x0000
 23f756c:	10079990 	.word	0x10079990
 23f7570:	00000008 	.word	0x00000008

023f7574 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f7574:	b509      	push	{r0, r3, lr}
 23f7576:	4804      	ldr	r0, [pc, #16]	; (23f7588 <system_ctrl_set_app_request_handler+0x14>)
 23f7578:	6800      	ldr	r0, [r0, #0]
 23f757a:	4b04      	ldr	r3, [pc, #16]	; (23f758c <system_ctrl_set_app_request_handler+0x18>)
 23f757c:	4403      	add	r3, r0
 23f757e:	681b      	ldr	r3, [r3, #0]
 23f7580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f7584:	9302      	str	r3, [sp, #8]
 23f7586:	bd09      	pop	{r0, r3, pc}
 23f7588:	10079990 	.word	0x10079990
 23f758c:	00000008 	.word	0x00000008

023f7590 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f7590:	b509      	push	{r0, r3, lr}
 23f7592:	4804      	ldr	r0, [pc, #16]	; (23f75a4 <system_ctrl_set_result+0x14>)
 23f7594:	6800      	ldr	r0, [r0, #0]
 23f7596:	4b04      	ldr	r3, [pc, #16]	; (23f75a8 <system_ctrl_set_result+0x18>)
 23f7598:	4403      	add	r3, r0
 23f759a:	681b      	ldr	r3, [r3, #0]
 23f759c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f75a0:	9302      	str	r3, [sp, #8]
 23f75a2:	bd09      	pop	{r0, r3, pc}
 23f75a4:	10079990 	.word	0x10079990
 23f75a8:	00000008 	.word	0x00000008

023f75ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f75ac:	b509      	push	{r0, r3, lr}
 23f75ae:	4804      	ldr	r0, [pc, #16]	; (23f75c0 <malloc+0x14>)
 23f75b0:	6800      	ldr	r0, [r0, #0]
 23f75b2:	4b04      	ldr	r3, [pc, #16]	; (23f75c4 <malloc+0x18>)
 23f75b4:	4403      	add	r3, r0
 23f75b6:	681b      	ldr	r3, [r3, #0]
 23f75b8:	681b      	ldr	r3, [r3, #0]
 23f75ba:	9302      	str	r3, [sp, #8]
 23f75bc:	bd09      	pop	{r0, r3, pc}
 23f75be:	0000      	.short	0x0000
 23f75c0:	10079990 	.word	0x10079990
 23f75c4:	00000004 	.word	0x00000004

023f75c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f75c8:	b509      	push	{r0, r3, lr}
 23f75ca:	4804      	ldr	r0, [pc, #16]	; (23f75dc <free+0x14>)
 23f75cc:	6800      	ldr	r0, [r0, #0]
 23f75ce:	4b04      	ldr	r3, [pc, #16]	; (23f75e0 <free+0x18>)
 23f75d0:	4403      	add	r3, r0
 23f75d2:	681b      	ldr	r3, [r3, #0]
 23f75d4:	685b      	ldr	r3, [r3, #4]
 23f75d6:	9302      	str	r3, [sp, #8]
 23f75d8:	bd09      	pop	{r0, r3, pc}
 23f75da:	0000      	.short	0x0000
 23f75dc:	10079990 	.word	0x10079990
 23f75e0:	00000004 	.word	0x00000004

023f75e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f75e4:	b509      	push	{r0, r3, lr}
 23f75e6:	4804      	ldr	r0, [pc, #16]	; (23f75f8 <realloc+0x14>)
 23f75e8:	6800      	ldr	r0, [r0, #0]
 23f75ea:	4b04      	ldr	r3, [pc, #16]	; (23f75fc <realloc+0x18>)
 23f75ec:	4403      	add	r3, r0
 23f75ee:	681b      	ldr	r3, [r3, #0]
 23f75f0:	689b      	ldr	r3, [r3, #8]
 23f75f2:	9302      	str	r3, [sp, #8]
 23f75f4:	bd09      	pop	{r0, r3, pc}
 23f75f6:	0000      	.short	0x0000
 23f75f8:	10079990 	.word	0x10079990
 23f75fc:	00000004 	.word	0x00000004

023f7600 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f7600:	b509      	push	{r0, r3, lr}
 23f7602:	4804      	ldr	r0, [pc, #16]	; (23f7614 <vsnprintf+0x14>)
 23f7604:	6800      	ldr	r0, [r0, #0]
 23f7606:	4b04      	ldr	r3, [pc, #16]	; (23f7618 <vsnprintf+0x18>)
 23f7608:	4403      	add	r3, r0
 23f760a:	681b      	ldr	r3, [r3, #0]
 23f760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f760e:	9302      	str	r3, [sp, #8]
 23f7610:	bd09      	pop	{r0, r3, pc}
 23f7612:	0000      	.short	0x0000
 23f7614:	10079990 	.word	0x10079990
 23f7618:	00000004 	.word	0x00000004

023f761c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f761c:	b509      	push	{r0, r3, lr}
 23f761e:	4804      	ldr	r0, [pc, #16]	; (23f7630 <abort+0x14>)
 23f7620:	6800      	ldr	r0, [r0, #0]
 23f7622:	4b04      	ldr	r3, [pc, #16]	; (23f7634 <abort+0x18>)
 23f7624:	4403      	add	r3, r0
 23f7626:	681b      	ldr	r3, [r3, #0]
 23f7628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f762a:	9302      	str	r3, [sp, #8]
 23f762c:	bd09      	pop	{r0, r3, pc}
 23f762e:	0000      	.short	0x0000
 23f7630:	10079990 	.word	0x10079990
 23f7634:	00000004 	.word	0x00000004

023f7638 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f7638:	b509      	push	{r0, r3, lr}
 23f763a:	4804      	ldr	r0, [pc, #16]	; (23f764c <_malloc_r+0x14>)
 23f763c:	6800      	ldr	r0, [r0, #0]
 23f763e:	4b04      	ldr	r3, [pc, #16]	; (23f7650 <_malloc_r+0x18>)
 23f7640:	4403      	add	r3, r0
 23f7642:	681b      	ldr	r3, [r3, #0]
 23f7644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7646:	9302      	str	r3, [sp, #8]
 23f7648:	bd09      	pop	{r0, r3, pc}
 23f764a:	0000      	.short	0x0000
 23f764c:	10079990 	.word	0x10079990
 23f7650:	00000004 	.word	0x00000004

023f7654 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f7654:	b509      	push	{r0, r3, lr}
 23f7656:	4804      	ldr	r0, [pc, #16]	; (23f7668 <__errno+0x14>)
 23f7658:	6800      	ldr	r0, [r0, #0]
 23f765a:	4b04      	ldr	r3, [pc, #16]	; (23f766c <__errno+0x18>)
 23f765c:	4403      	add	r3, r0
 23f765e:	681b      	ldr	r3, [r3, #0]
 23f7660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7662:	9302      	str	r3, [sp, #8]
 23f7664:	bd09      	pop	{r0, r3, pc}
 23f7666:	0000      	.short	0x0000
 23f7668:	10079990 	.word	0x10079990
 23f766c:	00000004 	.word	0x00000004

023f7670 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f7670:	b509      	push	{r0, r3, lr}
 23f7672:	4804      	ldr	r0, [pc, #16]	; (23f7684 <__assert_func+0x14>)
 23f7674:	6800      	ldr	r0, [r0, #0]
 23f7676:	4b04      	ldr	r3, [pc, #16]	; (23f7688 <__assert_func+0x18>)
 23f7678:	4403      	add	r3, r0
 23f767a:	681b      	ldr	r3, [r3, #0]
 23f767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f767e:	9302      	str	r3, [sp, #8]
 23f7680:	bd09      	pop	{r0, r3, pc}
 23f7682:	0000      	.short	0x0000
 23f7684:	10079990 	.word	0x10079990
 23f7688:	00000004 	.word	0x00000004

023f768c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f768c:	b509      	push	{r0, r3, lr}
 23f768e:	4804      	ldr	r0, [pc, #16]	; (23f76a0 <newlib_impure_ptr_callback+0x14>)
 23f7690:	6800      	ldr	r0, [r0, #0]
 23f7692:	4b04      	ldr	r3, [pc, #16]	; (23f76a4 <newlib_impure_ptr_callback+0x18>)
 23f7694:	4403      	add	r3, r0
 23f7696:	681b      	ldr	r3, [r3, #0]
 23f7698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f769a:	9302      	str	r3, [sp, #8]
 23f769c:	bd09      	pop	{r0, r3, pc}
 23f769e:	0000      	.short	0x0000
 23f76a0:	10079990 	.word	0x10079990
 23f76a4:	00000004 	.word	0x00000004

023f76a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f76a8:	2300      	movs	r3, #0
 23f76aa:	6840      	ldr	r0, [r0, #4]
 23f76ac:	461a      	mov	r2, r3
 23f76ae:	f7ff be8f 	b.w	23f73d0 <network_connect>

023f76b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f76b2:	2200      	movs	r2, #0
 23f76b4:	2102      	movs	r1, #2
 23f76b6:	6840      	ldr	r0, [r0, #4]
 23f76b8:	f7ff bea6 	b.w	23f7408 <network_disconnect>

023f76bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f76bc:	2200      	movs	r2, #0
 23f76be:	6840      	ldr	r0, [r0, #4]
 23f76c0:	4611      	mov	r1, r2
 23f76c2:	f7ff be93 	b.w	23f73ec <network_connecting>

023f76c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f76c6:	2200      	movs	r2, #0
 23f76c8:	6840      	ldr	r0, [r0, #4]
 23f76ca:	4611      	mov	r1, r2
 23f76cc:	f7ff beaa 	b.w	23f7424 <network_ready>

023f76d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f76d0:	2300      	movs	r3, #0
 23f76d2:	6840      	ldr	r0, [r0, #4]
 23f76d4:	461a      	mov	r2, r3
 23f76d6:	4619      	mov	r1, r3
 23f76d8:	f7ff beb2 	b.w	23f7440 <network_on>

023f76dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f76dc:	2300      	movs	r3, #0
 23f76de:	6840      	ldr	r0, [r0, #4]
 23f76e0:	461a      	mov	r2, r3
 23f76e2:	4619      	mov	r1, r3
 23f76e4:	f7ff beba 	b.w	23f745c <network_off>

023f76e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f76e8:	2100      	movs	r1, #0
 23f76ea:	6840      	ldr	r0, [r0, #4]
 23f76ec:	f7ff befc 	b.w	23f74e8 <network_is_on>

023f76f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f76f0:	2100      	movs	r1, #0
 23f76f2:	6840      	ldr	r0, [r0, #4]
 23f76f4:	f7ff bf06 	b.w	23f7504 <network_is_off>

023f76f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f76f8:	2200      	movs	r2, #0
 23f76fa:	6840      	ldr	r0, [r0, #4]
 23f76fc:	f081 0101 	eor.w	r1, r1, #1
 23f7700:	f7ff beba 	b.w	23f7478 <network_listen>

023f7704 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f7704:	2200      	movs	r2, #0
 23f7706:	6840      	ldr	r0, [r0, #4]
 23f7708:	f7ff bed2 	b.w	23f74b0 <network_set_listen_timeout>

023f770c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f770c:	2200      	movs	r2, #0
 23f770e:	6840      	ldr	r0, [r0, #4]
 23f7710:	4611      	mov	r1, r2
 23f7712:	f7ff bedb 	b.w	23f74cc <network_get_listen_timeout>

023f7716 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f7716:	2200      	movs	r2, #0
 23f7718:	6840      	ldr	r0, [r0, #4]
 23f771a:	4611      	mov	r1, r2
 23f771c:	f7ff beba 	b.w	23f7494 <network_listening>

023f7720 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23f7720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f7724:	b095      	sub	sp, #84	; 0x54
 23f7726:	4614      	mov	r4, r2
 23f7728:	460d      	mov	r5, r1
 23f772a:	4607      	mov	r7, r0
    IPAddress addr;
 23f772c:	f000 fbc2 	bl	23f7eb4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f7730:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23f7732:	221c      	movs	r2, #28
 23f7734:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23f7736:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23f7738:	f003 ff2c 	bl	23fb594 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23f773c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f773e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23f7740:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f7742:	2100      	movs	r1, #0
 23f7744:	466b      	mov	r3, sp
 23f7746:	aa0c      	add	r2, sp, #48	; 0x30
 23f7748:	f7ff fdee 	bl	23f7328 <netdb_getaddrinfo>
    if (!r) {
 23f774c:	4604      	mov	r4, r0
 23f774e:	2800      	cmp	r0, #0
 23f7750:	d14b      	bne.n	23f77ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f7752:	4602      	mov	r2, r0
 23f7754:	2101      	movs	r1, #1
 23f7756:	6868      	ldr	r0, [r5, #4]
 23f7758:	f7ff fe64 	bl	23f7424 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f775c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f775e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f7760:	4622      	mov	r2, r4
 23f7762:	6868      	ldr	r0, [r5, #4]
 23f7764:	f7ff fe5e 	bl	23f7424 <network_ready>
        bool ok = false;
 23f7768:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f776a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f776c:	9e00      	ldr	r6, [sp, #0]
 23f776e:	2e00      	cmp	r6, #0
 23f7770:	d03b      	beq.n	23f77ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23f7772:	2900      	cmp	r1, #0
 23f7774:	d139      	bne.n	23f77ea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f7776:	6873      	ldr	r3, [r6, #4]
 23f7778:	2b02      	cmp	r3, #2
 23f777a:	d003      	beq.n	23f7784 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23f777c:	2b0a      	cmp	r3, #10
 23f777e:	d011      	beq.n	23f77a4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f7780:	69f6      	ldr	r6, [r6, #28]
 23f7782:	e7f4      	b.n	23f776e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23f7784:	f1b8 0f00 	cmp.w	r8, #0
 23f7788:	d0fa      	beq.n	23f7780 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f778a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23f778c:	a806      	add	r0, sp, #24
 23f778e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f7790:	1d3c      	adds	r4, r7, #4
 23f7792:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23f7794:	f000 fbbc 	bl	23f7f10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f7798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f779a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f779c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f779e:	4641      	mov	r1, r8
 23f77a0:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f77a2:	e7ed      	b.n	23f7780 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f77a4:	f1b9 0f00 	cmp.w	r9, #0
 23f77a8:	d0ea      	beq.n	23f7780 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f77aa:	2210      	movs	r2, #16
 23f77ac:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f77ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f77b0:	f003 fef0 	bl	23fb594 <memset>
                    a.v = 6;
 23f77b4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f77b6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23f77b8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f77bc:	f104 0308 	add.w	r3, r4, #8
 23f77c0:	3418      	adds	r4, #24
 23f77c2:	462a      	mov	r2, r5
 23f77c4:	6818      	ldr	r0, [r3, #0]
 23f77c6:	6859      	ldr	r1, [r3, #4]
 23f77c8:	3308      	adds	r3, #8
 23f77ca:	c203      	stmia	r2!, {r0, r1}
 23f77cc:	42a3      	cmp	r3, r4
 23f77ce:	4615      	mov	r5, r2
 23f77d0:	d1f7      	bne.n	23f77c2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23f77d2:	a901      	add	r1, sp, #4
 23f77d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23f77d6:	1d3c      	adds	r4, r7, #4
 23f77d8:	ad07      	add	r5, sp, #28
 23f77da:	f000 fb79 	bl	23f7ed0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f77de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f77e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f77e2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f77e4:	4649      	mov	r1, r9
 23f77e6:	7023      	strb	r3, [r4, #0]
                    break;
 23f77e8:	e7ca      	b.n	23f7780 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f77ea:	9800      	ldr	r0, [sp, #0]
 23f77ec:	f7ff fd8e 	bl	23f730c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f77f0:	4638      	mov	r0, r7
 23f77f2:	b015      	add	sp, #84	; 0x54
 23f77f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023f77f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f77f8:	4b02      	ldr	r3, [pc, #8]	; (23f7804 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f77fa:	4a03      	ldr	r2, [pc, #12]	; (23f7808 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f77fc:	601a      	str	r2, [r3, #0]
 23f77fe:	2200      	movs	r2, #0
 23f7800:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f7802:	4770      	bx	lr
 23f7804:	1007ae78 	.word	0x1007ae78
 23f7808:	023ff90c 	.word	0x023ff90c

023f780c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f780c:	2200      	movs	r2, #0
 23f780e:	6840      	ldr	r0, [r0, #4]
 23f7810:	4611      	mov	r1, r2
 23f7812:	f7ff be07 	b.w	23f7424 <network_ready>

023f7816 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f7816:	2200      	movs	r2, #0
 23f7818:	6840      	ldr	r0, [r0, #4]
 23f781a:	4611      	mov	r1, r2
 23f781c:	f7ff be3a 	b.w	23f7494 <network_listening>

023f7820 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f7820:	2200      	movs	r2, #0
 23f7822:	6840      	ldr	r0, [r0, #4]
 23f7824:	4611      	mov	r1, r2
 23f7826:	f7ff be51 	b.w	23f74cc <network_get_listen_timeout>

023f782a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f782a:	2200      	movs	r2, #0
 23f782c:	6840      	ldr	r0, [r0, #4]
 23f782e:	f7ff be3f 	b.w	23f74b0 <network_set_listen_timeout>

023f7832 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f7832:	2200      	movs	r2, #0
 23f7834:	6840      	ldr	r0, [r0, #4]
 23f7836:	f081 0101 	eor.w	r1, r1, #1
 23f783a:	f7ff be1d 	b.w	23f7478 <network_listen>

023f783e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f783e:	2300      	movs	r3, #0
 23f7840:	6840      	ldr	r0, [r0, #4]
 23f7842:	461a      	mov	r2, r3
 23f7844:	4619      	mov	r1, r3
 23f7846:	f7ff be09 	b.w	23f745c <network_off>

023f784a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f784a:	2300      	movs	r3, #0
 23f784c:	6840      	ldr	r0, [r0, #4]
 23f784e:	461a      	mov	r2, r3
 23f7850:	4619      	mov	r1, r3
 23f7852:	f7ff bdf5 	b.w	23f7440 <network_on>

023f7856 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f7856:	2200      	movs	r2, #0
 23f7858:	6840      	ldr	r0, [r0, #4]
 23f785a:	4611      	mov	r1, r2
 23f785c:	f7ff bdc6 	b.w	23f73ec <network_connecting>

023f7860 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f7860:	2200      	movs	r2, #0
 23f7862:	2102      	movs	r1, #2
 23f7864:	6840      	ldr	r0, [r0, #4]
 23f7866:	f7ff bdcf 	b.w	23f7408 <network_disconnect>

023f786a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f786a:	2300      	movs	r3, #0
 23f786c:	6840      	ldr	r0, [r0, #4]
 23f786e:	461a      	mov	r2, r3
 23f7870:	f7ff bdae 	b.w	23f73d0 <network_connect>

023f7874 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f7874:	2204      	movs	r2, #4
 23f7876:	4b02      	ldr	r3, [pc, #8]	; (23f7880 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f7878:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f787a:	4a02      	ldr	r2, [pc, #8]	; (23f7884 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f787c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f787e:	4770      	bx	lr
 23f7880:	1007ae80 	.word	0x1007ae80
 23f7884:	023ff948 	.word	0x023ff948

023f7888 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f7888:	4770      	bx	lr

023f788a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f788a:	7441      	strb	r1, [r0, #17]
}
 23f788c:	4770      	bx	lr

023f788e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f788e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f7890:	7c00      	ldrb	r0, [r0, #16]
 23f7892:	f7ff fc77 	bl	23f7184 <hal_usart_available_data_for_write>
}
 23f7896:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f789a:	bd08      	pop	{r3, pc}

023f789c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f789c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f789e:	7c00      	ldrb	r0, [r0, #16]
 23f78a0:	f7ff fc2a 	bl	23f70f8 <hal_usart_available>
}
 23f78a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f78a8:	bd08      	pop	{r3, pc}

023f78aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f78aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f78ac:	7c00      	ldrb	r0, [r0, #16]
 23f78ae:	f7ff fc3f 	bl	23f7130 <hal_usart_peek>
}
 23f78b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f78b6:	bd08      	pop	{r3, pc}

023f78b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f78b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f78ba:	7c00      	ldrb	r0, [r0, #16]
 23f78bc:	f7ff fc2a 	bl	23f7114 <hal_usart_read>
}
 23f78c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f78c4:	bd08      	pop	{r3, pc}

023f78c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f78c6:	7c00      	ldrb	r0, [r0, #16]
 23f78c8:	f7ff bc40 	b.w	23f714c <hal_usart_flush>

023f78cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f78cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f78ce:	7c45      	ldrb	r5, [r0, #17]
{
 23f78d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f78d2:	b12d      	cbz	r5, 23f78e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f78d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f78d6:	b003      	add	sp, #12
 23f78d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f78dc:	f7ff bbfe 	b.w	23f70dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f78e0:	7c00      	ldrb	r0, [r0, #16]
 23f78e2:	9101      	str	r1, [sp, #4]
 23f78e4:	f7ff fc4e 	bl	23f7184 <hal_usart_available_data_for_write>
 23f78e8:	2800      	cmp	r0, #0
 23f78ea:	9901      	ldr	r1, [sp, #4]
 23f78ec:	dcf2      	bgt.n	23f78d4 <_ZN11USARTSerial5writeEh+0x8>
}
 23f78ee:	4628      	mov	r0, r5
 23f78f0:	b003      	add	sp, #12
 23f78f2:	bd30      	pop	{r4, r5, pc}

023f78f4 <_ZN11USARTSerialD0Ev>:
 23f78f4:	b510      	push	{r4, lr}
 23f78f6:	4604      	mov	r4, r0
 23f78f8:	2114      	movs	r1, #20
 23f78fa:	f7f5 ff50 	bl	23ed79e <_ZdlPvj>
 23f78fe:	4620      	mov	r0, r4
 23f7900:	bd10      	pop	{r4, pc}
	...

023f7904 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f7904:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f7906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f790a:	4604      	mov	r4, r0
 23f790c:	4608      	mov	r0, r1
 23f790e:	4611      	mov	r1, r2
 23f7910:	2200      	movs	r2, #0
 23f7912:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f7916:	4b04      	ldr	r3, [pc, #16]	; (23f7928 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f7918:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f791a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f791c:	2301      	movs	r3, #1
 23f791e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f7920:	f7ff fc4c 	bl	23f71bc <hal_usart_init_ex>
}
 23f7924:	4620      	mov	r0, r4
 23f7926:	bd10      	pop	{r4, pc}
 23f7928:	023ff984 	.word	0x023ff984

023f792c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23f792c:	2300      	movs	r3, #0
 23f792e:	7c00      	ldrb	r0, [r0, #16]
 23f7930:	f7ff bc36 	b.w	23f71a0 <hal_usart_begin_config>

023f7934 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23f7934:	2200      	movs	r2, #0
 23f7936:	f7ff bff9 	b.w	23f792c <_ZN11USARTSerial5beginEmm>

023f793a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23f793a:	7c00      	ldrb	r0, [r0, #16]
 23f793c:	f7ff bbc0 	b.w	23f70c0 <hal_usart_end>

023f7940 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f7940:	7c00      	ldrb	r0, [r0, #16]
 23f7942:	f7ff bc11 	b.w	23f7168 <hal_usart_is_enabled>

023f7946 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f7946:	2201      	movs	r2, #1
 23f7948:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f794c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f7950:	4618      	mov	r0, r3
 23f7952:	2901      	cmp	r1, #1
 23f7954:	d108      	bne.n	23f7968 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f7956:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f795a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f795e:	3a01      	subs	r2, #1
 23f7960:	f103 0310 	add.w	r3, r3, #16
 23f7964:	d1f2      	bne.n	23f794c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f7966:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f7968:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f796a:	bf04      	itt	eq
 23f796c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f7970:	1852      	addeq	r2, r2, r1
 23f7972:	e7f4      	b.n	23f795e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f7974 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f7974:	b40e      	push	{r1, r2, r3}
 23f7976:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7978:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f797a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f797c:	af00      	add	r7, sp, #0
 23f797e:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f7982:	f855 2b04 	ldr.w	r2, [r5], #4
 23f7986:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f7988:	462b      	mov	r3, r5
 23f798a:	1878      	adds	r0, r7, r1
 23f798c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f798e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f7990:	f7ff fe36 	bl	23f7600 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f7994:	280f      	cmp	r0, #15
 23f7996:	687a      	ldr	r2, [r7, #4]
 23f7998:	d91a      	bls.n	23f79d0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f799a:	f100 0308 	add.w	r3, r0, #8
 23f799e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f79a2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f79a4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f79a8:	1c41      	adds	r1, r0, #1
 23f79aa:	462b      	mov	r3, r5
 23f79ac:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f79ae:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f79b0:	f7ff fe26 	bl	23f7600 <vsnprintf>
        if (n > 0) {
 23f79b4:	1e02      	subs	r2, r0, #0
 23f79b6:	dd04      	ble.n	23f79c2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f79b8:	6823      	ldr	r3, [r4, #0]
 23f79ba:	4669      	mov	r1, sp
 23f79bc:	4620      	mov	r0, r4
 23f79be:	689b      	ldr	r3, [r3, #8]
 23f79c0:	4798      	blx	r3
 23f79c2:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f79c4:	3720      	adds	r7, #32
 23f79c6:	46bd      	mov	sp, r7
 23f79c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f79cc:	b003      	add	sp, #12
 23f79ce:	4770      	bx	lr
    } else if (n > 0) {
 23f79d0:	2800      	cmp	r0, #0
 23f79d2:	d0f7      	beq.n	23f79c4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f79d4:	6823      	ldr	r3, [r4, #0]
 23f79d6:	4602      	mov	r2, r0
 23f79d8:	689b      	ldr	r3, [r3, #8]
 23f79da:	4620      	mov	r0, r4
 23f79dc:	f107 0110 	add.w	r1, r7, #16
 23f79e0:	4798      	blx	r3
}
 23f79e2:	e7ef      	b.n	23f79c4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f79e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23f79e4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f79e6:	6843      	ldr	r3, [r0, #4]
    {
 23f79e8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f79ea:	3b01      	subs	r3, #1
 23f79ec:	6043      	str	r3, [r0, #4]
 23f79ee:	b963      	cbnz	r3, 23f7a0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23f79f0:	6803      	ldr	r3, [r0, #0]
 23f79f2:	689b      	ldr	r3, [r3, #8]
 23f79f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f79f6:	68a3      	ldr	r3, [r4, #8]
 23f79f8:	3b01      	subs	r3, #1
 23f79fa:	60a3      	str	r3, [r4, #8]
 23f79fc:	b92b      	cbnz	r3, 23f7a0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f79fe:	6823      	ldr	r3, [r4, #0]
 23f7a00:	4620      	mov	r0, r4
        }
    }
 23f7a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f7a06:	68db      	ldr	r3, [r3, #12]
 23f7a08:	4718      	bx	r3
    }
 23f7a0a:	bd10      	pop	{r4, pc}

023f7a0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f7a0c:	b538      	push	{r3, r4, r5, lr}
 23f7a0e:	680b      	ldr	r3, [r1, #0]
 23f7a10:	4604      	mov	r4, r0
 23f7a12:	6003      	str	r3, [r0, #0]
 23f7a14:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f7a16:	6843      	ldr	r3, [r0, #4]
 23f7a18:	429d      	cmp	r5, r3
 23f7a1a:	d008      	beq.n	23f7a2e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f7a1c:	b115      	cbz	r5, 23f7a24 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f7a1e:	686b      	ldr	r3, [r5, #4]
 23f7a20:	3301      	adds	r3, #1
 23f7a22:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f7a24:	6860      	ldr	r0, [r4, #4]
 23f7a26:	b108      	cbz	r0, 23f7a2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f7a28:	f7ff ffdc 	bl	23f79e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f7a2c:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f7a2e:	bd38      	pop	{r3, r4, r5, pc}

023f7a30 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f7a30:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f7a32:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f7a34:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f7a38:	2201      	movs	r2, #1
 23f7a3a:	689b      	ldr	r3, [r3, #8]
 23f7a3c:	f10d 0107 	add.w	r1, sp, #7
 23f7a40:	4798      	blx	r3
}
 23f7a42:	b003      	add	sp, #12
 23f7a44:	f85d fb04 	ldr.w	pc, [sp], #4

023f7a48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f7a48:	460b      	mov	r3, r1
 23f7a4a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f7a4c:	2200      	movs	r2, #0
 23f7a4e:	b510      	push	{r4, lr}
 23f7a50:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f7a52:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f7a56:	6083      	str	r3, [r0, #8]
    if (t) {
 23f7a58:	b90b      	cbnz	r3, 23f7a5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f7a5a:	4620      	mov	r0, r4
 23f7a5c:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f7a5e:	f7ff ffd5 	bl	23f7a0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f7a62:	e7fa      	b.n	23f7a5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f7a64 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f7a64:	6883      	ldr	r3, [r0, #8]
 23f7a66:	b1eb      	cbz	r3, 23f7aa4 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f7a68:	781a      	ldrb	r2, [r3, #0]
 23f7a6a:	2a03      	cmp	r2, #3
 23f7a6c:	d81a      	bhi.n	23f7aa4 <_ZNK5spark9JSONValue4typeEv+0x40>
 23f7a6e:	e8df f002 	tbb	[pc, r2]
 23f7a72:	1704      	.short	0x1704
 23f7a74:	1b02      	.short	0x1b02
 23f7a76:	2005      	movs	r0, #5
 23f7a78:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f7a7a:	6802      	ldr	r2, [r0, #0]
 23f7a7c:	685b      	ldr	r3, [r3, #4]
 23f7a7e:	6852      	ldr	r2, [r2, #4]
 23f7a80:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f7a82:	282d      	cmp	r0, #45	; 0x2d
 23f7a84:	d012      	beq.n	23f7aac <_ZNK5spark9JSONValue4typeEv+0x48>
 23f7a86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f7a8a:	2b09      	cmp	r3, #9
 23f7a8c:	d90e      	bls.n	23f7aac <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f7a8e:	2874      	cmp	r0, #116	; 0x74
 23f7a90:	d00e      	beq.n	23f7ab0 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f7a92:	2866      	cmp	r0, #102	; 0x66
 23f7a94:	d00c      	beq.n	23f7ab0 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f7a96:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f7a9a:	4258      	negs	r0, r3
 23f7a9c:	4158      	adcs	r0, r3
 23f7a9e:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f7aa0:	2006      	movs	r0, #6
 23f7aa2:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f7aa4:	2000      	movs	r0, #0
 23f7aa6:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f7aa8:	2004      	movs	r0, #4
 23f7aaa:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f7aac:	2003      	movs	r0, #3
 23f7aae:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f7ab0:	2002      	movs	r0, #2
}
 23f7ab2:	4770      	bx	lr

023f7ab4 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f7ab4:	b510      	push	{r4, lr}
 23f7ab6:	4604      	mov	r4, r0
    switch (type()) {
 23f7ab8:	f7ff ffd4 	bl	23f7a64 <_ZNK5spark9JSONValue4typeEv>
 23f7abc:	2802      	cmp	r0, #2
 23f7abe:	d00e      	beq.n	23f7ade <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f7ac0:	1ec3      	subs	r3, r0, #3
 23f7ac2:	b2db      	uxtb	r3, r3
 23f7ac4:	2b01      	cmp	r3, #1
 23f7ac6:	d814      	bhi.n	23f7af2 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f7ac8:	6822      	ldr	r2, [r4, #0]
 23f7aca:	68a3      	ldr	r3, [r4, #8]
 23f7acc:	6850      	ldr	r0, [r2, #4]
 23f7ace:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f7ad0:	220a      	movs	r2, #10
}
 23f7ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f7ad6:	2100      	movs	r1, #0
 23f7ad8:	4418      	add	r0, r3
 23f7ada:	f003 be6b 	b.w	23fb7b4 <strtol>
        const char* const s = d_->json + t_->start;
 23f7ade:	6822      	ldr	r2, [r4, #0]
 23f7ae0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f7ae2:	6852      	ldr	r2, [r2, #4]
 23f7ae4:	685b      	ldr	r3, [r3, #4]
 23f7ae6:	5cd0      	ldrb	r0, [r2, r3]
 23f7ae8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f7aec:	4258      	negs	r0, r3
 23f7aee:	4158      	adcs	r0, r3
}
 23f7af0:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f7af2:	2000      	movs	r0, #0
 23f7af4:	e7fc      	b.n	23f7af0 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023f7af8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f7af8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f7afa:	2300      	movs	r3, #0
 23f7afc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f7afe:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f7b02:	480e      	ldr	r0, [pc, #56]	; (23f7b3c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f7b04:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f7b08:	b1a9      	cbz	r1, 23f7b36 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f7b0a:	780b      	ldrb	r3, [r1, #0]
 23f7b0c:	2b03      	cmp	r3, #3
 23f7b0e:	d006      	beq.n	23f7b1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f7b10:	b98b      	cbnz	r3, 23f7b36 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f7b12:	6813      	ldr	r3, [r2, #0]
 23f7b14:	6858      	ldr	r0, [r3, #4]
 23f7b16:	684b      	ldr	r3, [r1, #4]
 23f7b18:	5cc3      	ldrb	r3, [r0, r3]
 23f7b1a:	2b6e      	cmp	r3, #110	; 0x6e
 23f7b1c:	d007      	beq.n	23f7b2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f7b1e:	6813      	ldr	r3, [r2, #0]
 23f7b20:	684d      	ldr	r5, [r1, #4]
 23f7b22:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f7b24:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f7b26:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f7b28:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f7b2a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f7b2c:	60e3      	str	r3, [r4, #12]
 23f7b2e:	4611      	mov	r1, r2
 23f7b30:	4620      	mov	r0, r4
 23f7b32:	f7ff ff6b 	bl	23f7a0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f7b36:	4620      	mov	r0, r4
 23f7b38:	bd38      	pop	{r3, r4, r5, pc}
 23f7b3a:	bf00      	nop
 23f7b3c:	023fc726 	.word	0x023fc726

023f7b40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f7b40:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f7b42:	2500      	movs	r5, #0
 23f7b44:	460b      	mov	r3, r1
 23f7b46:	4604      	mov	r4, r0
 23f7b48:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f7b4a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f7b4e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f7b52:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f7b56:	b14b      	cbz	r3, 23f7b6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f7b58:	781a      	ldrb	r2, [r3, #0]
 23f7b5a:	2a01      	cmp	r2, #1
 23f7b5c:	d106      	bne.n	23f7b6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f7b5e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f7b62:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f7b64:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f7b66:	6143      	str	r3, [r0, #20]
 23f7b68:	f7ff ff50 	bl	23f7a0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f7b6c:	4620      	mov	r0, r4
 23f7b6e:	bd38      	pop	{r3, r4, r5, pc}

023f7b70 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f7b70:	b510      	push	{r4, lr}
    if (!n_) {
 23f7b72:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f7b74:	4604      	mov	r4, r0
    if (!n_) {
 23f7b76:	b163      	cbz	r3, 23f7b92 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f7b78:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f7b7a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f7b7c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f7b7e:	3010      	adds	r0, #16
 23f7b80:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f7b82:	6120      	str	r0, [r4, #16]
    --n_;
 23f7b84:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f7b86:	b113      	cbz	r3, 23f7b8e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f7b88:	f7ff fedd 	bl	23f7946 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f7b8c:	60a0      	str	r0, [r4, #8]
    return true;
 23f7b8e:	2001      	movs	r0, #1
 23f7b90:	e000      	b.n	23f7b94 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f7b92:	4618      	mov	r0, r3
}
 23f7b94:	bd10      	pop	{r4, pc}

023f7b96 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f7b96:	b510      	push	{r4, lr}
    write('}');
 23f7b98:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f7b9a:	4604      	mov	r4, r0
    write('}');
 23f7b9c:	f7ff ff48 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f7ba0:	2301      	movs	r3, #1
}
 23f7ba2:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7ba4:	7123      	strb	r3, [r4, #4]
}
 23f7ba6:	bd10      	pop	{r4, pc}

023f7ba8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f7ba8:	b508      	push	{r3, lr}
    switch (state_) {
 23f7baa:	7903      	ldrb	r3, [r0, #4]
 23f7bac:	2b01      	cmp	r3, #1
 23f7bae:	d002      	beq.n	23f7bb6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f7bb0:	2b02      	cmp	r3, #2
 23f7bb2:	d004      	beq.n	23f7bbe <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f7bb4:	bd08      	pop	{r3, pc}
        write(',');
 23f7bb6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f7bb8:	f7ff ff3a 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
}
 23f7bbc:	e7fa      	b.n	23f7bb4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f7bbe:	213a      	movs	r1, #58	; 0x3a
 23f7bc0:	e7fa      	b.n	23f7bb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f7bc2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f7bc2:	b510      	push	{r4, lr}
 23f7bc4:	4604      	mov	r4, r0
    writeSeparator();
 23f7bc6:	f7ff ffef 	bl	23f7ba8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f7bca:	4620      	mov	r0, r4
 23f7bcc:	217b      	movs	r1, #123	; 0x7b
 23f7bce:	f7ff ff2f 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f7bd2:	2300      	movs	r3, #0
}
 23f7bd4:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f7bd6:	7123      	strb	r3, [r4, #4]
}
 23f7bd8:	bd10      	pop	{r4, pc}
	...

023f7bdc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f7bdc:	b513      	push	{r0, r1, r4, lr}
 23f7bde:	4604      	mov	r4, r0
 23f7be0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f7be2:	f7ff ffe1 	bl	23f7ba8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f7be6:	6823      	ldr	r3, [r4, #0]
 23f7be8:	4620      	mov	r0, r4
 23f7bea:	68db      	ldr	r3, [r3, #12]
 23f7bec:	9a01      	ldr	r2, [sp, #4]
 23f7bee:	4903      	ldr	r1, [pc, #12]	; (23f7bfc <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f7bf0:	4798      	blx	r3
    state_ = NEXT;
 23f7bf2:	2301      	movs	r3, #1
}
 23f7bf4:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7bf6:	7123      	strb	r3, [r4, #4]
}
 23f7bf8:	b002      	add	sp, #8
 23f7bfa:	bd10      	pop	{r4, pc}
 23f7bfc:	023fc78e 	.word	0x023fc78e

023f7c00 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f7c00:	b513      	push	{r0, r1, r4, lr}
 23f7c02:	4604      	mov	r4, r0
 23f7c04:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f7c06:	f7ff ffcf 	bl	23f7ba8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f7c0a:	6823      	ldr	r3, [r4, #0]
 23f7c0c:	4620      	mov	r0, r4
 23f7c0e:	68db      	ldr	r3, [r3, #12]
 23f7c10:	9a01      	ldr	r2, [sp, #4]
 23f7c12:	4903      	ldr	r1, [pc, #12]	; (23f7c20 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f7c14:	4798      	blx	r3
    state_ = NEXT;
 23f7c16:	2301      	movs	r3, #1
}
 23f7c18:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7c1a:	7123      	strb	r3, [r4, #4]
}
 23f7c1c:	b002      	add	sp, #8
 23f7c1e:	bd10      	pop	{r4, pc}
 23f7c20:	023ff9ac 	.word	0x023ff9ac

023f7c24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f7c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f7c28:	460d      	mov	r5, r1
 23f7c2a:	4690      	mov	r8, r2
    write('"');
 23f7c2c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f7c2e:	4604      	mov	r4, r0
 23f7c30:	462f      	mov	r7, r5
    write('"');
 23f7c32:	f7ff fefd 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f7c36:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f7cdc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f7c3a:	44a8      	add	r8, r5
    while (s != end) {
 23f7c3c:	4547      	cmp	r7, r8
 23f7c3e:	46ba      	mov	sl, r7
 23f7c40:	d03d      	beq.n	23f7cbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f7c42:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f7c46:	2e22      	cmp	r6, #34	; 0x22
 23f7c48:	d006      	beq.n	23f7c58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f7c4a:	2e5c      	cmp	r6, #92	; 0x5c
 23f7c4c:	d004      	beq.n	23f7c58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f7c4e:	4630      	mov	r0, r6
 23f7c50:	f003 fc6e 	bl	23fb530 <isprint>
 23f7c54:	2800      	cmp	r0, #0
 23f7c56:	d1f1      	bne.n	23f7c3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f7c58:	6823      	ldr	r3, [r4, #0]
 23f7c5a:	4629      	mov	r1, r5
 23f7c5c:	4620      	mov	r0, r4
 23f7c5e:	689b      	ldr	r3, [r3, #8]
 23f7c60:	ebaa 0205 	sub.w	r2, sl, r5
 23f7c64:	4798      	blx	r3
            write('\\');
 23f7c66:	215c      	movs	r1, #92	; 0x5c
 23f7c68:	4620      	mov	r0, r4
 23f7c6a:	f7ff fee1 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f7c6e:	2e0d      	cmp	r6, #13
 23f7c70:	d80a      	bhi.n	23f7c88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f7c72:	2e07      	cmp	r6, #7
 23f7c74:	d91c      	bls.n	23f7cb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f7c76:	f1a6 0308 	sub.w	r3, r6, #8
 23f7c7a:	2b05      	cmp	r3, #5
 23f7c7c:	d818      	bhi.n	23f7cb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f7c7e:	e8df f003 	tbb	[pc, r3]
 23f7c82:	0f0d      	.short	0x0f0d
 23f7c84:	15131711 	.word	0x15131711
 23f7c88:	2e22      	cmp	r6, #34	; 0x22
 23f7c8a:	d001      	beq.n	23f7c90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f7c8c:	2e5c      	cmp	r6, #92	; 0x5c
 23f7c8e:	d10f      	bne.n	23f7cb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f7c90:	4631      	mov	r1, r6
                write('b');
 23f7c92:	4620      	mov	r0, r4
 23f7c94:	f7ff fecc 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f7c98:	463d      	mov	r5, r7
    while (s != end) {
 23f7c9a:	e7cf      	b.n	23f7c3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f7c9c:	2162      	movs	r1, #98	; 0x62
 23f7c9e:	e7f8      	b.n	23f7c92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f7ca0:	2174      	movs	r1, #116	; 0x74
 23f7ca2:	e7f6      	b.n	23f7c92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f7ca4:	216e      	movs	r1, #110	; 0x6e
 23f7ca6:	e7f4      	b.n	23f7c92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f7ca8:	2166      	movs	r1, #102	; 0x66
 23f7caa:	e7f2      	b.n	23f7c92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f7cac:	2172      	movs	r1, #114	; 0x72
 23f7cae:	e7f0      	b.n	23f7c92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f7cb0:	6823      	ldr	r3, [r4, #0]
 23f7cb2:	4632      	mov	r2, r6
 23f7cb4:	4649      	mov	r1, r9
 23f7cb6:	4620      	mov	r0, r4
 23f7cb8:	68db      	ldr	r3, [r3, #12]
 23f7cba:	4798      	blx	r3
                break;
 23f7cbc:	e7ec      	b.n	23f7c98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f7cbe:	42bd      	cmp	r5, r7
 23f7cc0:	d005      	beq.n	23f7cce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f7cc2:	6823      	ldr	r3, [r4, #0]
 23f7cc4:	4629      	mov	r1, r5
 23f7cc6:	4620      	mov	r0, r4
 23f7cc8:	689b      	ldr	r3, [r3, #8]
 23f7cca:	1b7a      	subs	r2, r7, r5
 23f7ccc:	4798      	blx	r3
    }
    write('"');
 23f7cce:	2122      	movs	r1, #34	; 0x22
 23f7cd0:	4620      	mov	r0, r4
 23f7cd2:	f7ff fead 	bl	23f7a30 <_ZN5spark10JSONWriter5writeEc>
}
 23f7cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f7cda:	bf00      	nop
 23f7cdc:	023ff9af 	.word	0x023ff9af

023f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f7ce0:	b513      	push	{r0, r1, r4, lr}
 23f7ce2:	4604      	mov	r4, r0
 23f7ce4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f7ce8:	f7ff ff5e 	bl	23f7ba8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f7cec:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f7cf0:	4620      	mov	r0, r4
 23f7cf2:	f7ff ff97 	bl	23f7c24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f7cf6:	2302      	movs	r3, #2
}
 23f7cf8:	4620      	mov	r0, r4
    state_ = VALUE;
 23f7cfa:	7123      	strb	r3, [r4, #4]
}
 23f7cfc:	b002      	add	sp, #8
 23f7cfe:	bd10      	pop	{r4, pc}

023f7d00 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f7d00:	b513      	push	{r0, r1, r4, lr}
 23f7d02:	4604      	mov	r4, r0
 23f7d04:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f7d08:	f7ff ff4e 	bl	23f7ba8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f7d0c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f7d10:	4620      	mov	r0, r4
 23f7d12:	f7ff ff87 	bl	23f7c24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f7d16:	2301      	movs	r3, #1
}
 23f7d18:	4620      	mov	r0, r4
    state_ = NEXT;
 23f7d1a:	7123      	strb	r3, [r4, #4]
}
 23f7d1c:	b002      	add	sp, #8
 23f7d1e:	bd10      	pop	{r4, pc}

023f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f7d20:	b510      	push	{r4, lr}
 23f7d22:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23f7d24:	6800      	ldr	r0, [r0, #0]
 23f7d26:	b108      	cbz	r0, 23f7d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23f7d28:	f7ff fe5c 	bl	23f79e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23f7d2c:	4620      	mov	r0, r4
 23f7d2e:	bd10      	pop	{r4, pc}

023f7d30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f7d30:	7441      	strb	r1, [r0, #17]
}
 23f7d32:	4770      	bx	lr

023f7d34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f7d34:	4770      	bx	lr

023f7d36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f7d36:	4770      	bx	lr

023f7d38 <_ZN9USBSerial4readEv>:
{
 23f7d38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f7d3a:	2100      	movs	r1, #0
 23f7d3c:	7c00      	ldrb	r0, [r0, #16]
 23f7d3e:	f7ff f987 	bl	23f7050 <HAL_USB_USART_Receive_Data>
}
 23f7d42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f7d46:	bd08      	pop	{r3, pc}

023f7d48 <_ZN9USBSerial4peekEv>:
{
 23f7d48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f7d4a:	2101      	movs	r1, #1
 23f7d4c:	7c00      	ldrb	r0, [r0, #16]
 23f7d4e:	f7ff f97f 	bl	23f7050 <HAL_USB_USART_Receive_Data>
}
 23f7d52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f7d56:	bd08      	pop	{r3, pc}

023f7d58 <_ZN9USBSerial17availableForWriteEv>:
{
 23f7d58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f7d5a:	7c00      	ldrb	r0, [r0, #16]
 23f7d5c:	f7ff f96a 	bl	23f7034 <HAL_USB_USART_Available_Data_For_Write>
}
 23f7d60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f7d64:	bd08      	pop	{r3, pc}

023f7d66 <_ZN9USBSerial9availableEv>:
{
 23f7d66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f7d68:	7c00      	ldrb	r0, [r0, #16]
 23f7d6a:	f7ff f955 	bl	23f7018 <HAL_USB_USART_Available_Data>
}
 23f7d6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f7d72:	bd08      	pop	{r3, pc}

023f7d74 <_ZN9USBSerial5writeEh>:
{
 23f7d74:	b513      	push	{r0, r1, r4, lr}
 23f7d76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f7d78:	7c00      	ldrb	r0, [r0, #16]
{
 23f7d7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f7d7c:	f7ff f95a 	bl	23f7034 <HAL_USB_USART_Available_Data_For_Write>
 23f7d80:	2800      	cmp	r0, #0
 23f7d82:	9901      	ldr	r1, [sp, #4]
 23f7d84:	dc01      	bgt.n	23f7d8a <_ZN9USBSerial5writeEh+0x16>
 23f7d86:	7c60      	ldrb	r0, [r4, #17]
 23f7d88:	b120      	cbz	r0, 23f7d94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f7d8a:	7c20      	ldrb	r0, [r4, #16]
 23f7d8c:	f7ff f96e 	bl	23f706c <HAL_USB_USART_Send_Data>
 23f7d90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f7d94:	b002      	add	sp, #8
 23f7d96:	bd10      	pop	{r4, pc}

023f7d98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f7d98:	7c00      	ldrb	r0, [r0, #16]
 23f7d9a:	f7ff b975 	b.w	23f7088 <HAL_USB_USART_Flush_Data>

023f7d9e <_ZN9USBSerialD0Ev>:
 23f7d9e:	b510      	push	{r4, lr}
 23f7da0:	4604      	mov	r4, r0
 23f7da2:	2114      	movs	r1, #20
 23f7da4:	f7f5 fcfb 	bl	23ed79e <_ZdlPvj>
 23f7da8:	4620      	mov	r0, r4
 23f7daa:	bd10      	pop	{r4, pc}

023f7dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f7dac:	b510      	push	{r4, lr}
 23f7dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f7db2:	4604      	mov	r4, r0
 23f7db4:	4608      	mov	r0, r1
 23f7db6:	2100      	movs	r1, #0
 23f7db8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f7dbc:	4b04      	ldr	r3, [pc, #16]	; (23f7dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f7dbe:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f7dc0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f7dc2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f7dc4:	4611      	mov	r1, r2
  _blocking = true;
 23f7dc6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f7dc8:	f7ff f8fc 	bl	23f6fc4 <HAL_USB_USART_Init>
}
 23f7dcc:	4620      	mov	r0, r4
 23f7dce:	bd10      	pop	{r4, pc}
 23f7dd0:	023ff9c0 	.word	0x023ff9c0

023f7dd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f7dd4:	2200      	movs	r2, #0
 23f7dd6:	7c00      	ldrb	r0, [r0, #16]
 23f7dd8:	f7ff b902 	b.w	23f6fe0 <HAL_USB_USART_Begin>

023f7ddc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23f7ddc:	7c00      	ldrb	r0, [r0, #16]
 23f7dde:	f7ff b90d 	b.w	23f6ffc <HAL_USB_USART_End>

023f7de2 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f7de2:	7c00      	ldrb	r0, [r0, #16]
 23f7de4:	f7ff b95e 	b.w	23f70a4 <HAL_USB_USART_Is_Connected>

023f7de8 <_Z19acquireSerialBufferv>:
{
 23f7de8:	b510      	push	{r4, lr}
 23f7dea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f7dec:	2214      	movs	r2, #20
 23f7dee:	2100      	movs	r1, #0
 23f7df0:	f003 fbd0 	bl	23fb594 <memset>
}
 23f7df4:	4620      	mov	r0, r4
 23f7df6:	bd10      	pop	{r4, pc}

023f7df8 <_Z16_fetch_usbserialv>:
{
 23f7df8:	b510      	push	{r4, lr}
 23f7dfa:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f7dfc:	a803      	add	r0, sp, #12
 23f7dfe:	f7ff fff3 	bl	23f7de8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f7e02:	4c0c      	ldr	r4, [pc, #48]	; (23f7e34 <_Z16_fetch_usbserialv+0x3c>)
 23f7e04:	e8d4 1f8f 	ldab	r1, [r4]
 23f7e08:	f011 0101 	ands.w	r1, r1, #1
 23f7e0c:	d10f      	bne.n	23f7e2e <_Z16_fetch_usbserialv+0x36>
 23f7e0e:	4620      	mov	r0, r4
 23f7e10:	9101      	str	r1, [sp, #4]
 23f7e12:	f7f5 fcd3 	bl	23ed7bc <__cxa_guard_acquire>
 23f7e16:	9901      	ldr	r1, [sp, #4]
 23f7e18:	b148      	cbz	r0, 23f7e2e <_Z16_fetch_usbserialv+0x36>
 23f7e1a:	aa03      	add	r2, sp, #12
 23f7e1c:	4806      	ldr	r0, [pc, #24]	; (23f7e38 <_Z16_fetch_usbserialv+0x40>)
 23f7e1e:	f7ff ffc5 	bl	23f7dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f7e22:	4620      	mov	r0, r4
 23f7e24:	f7f5 fccf 	bl	23ed7c6 <__cxa_guard_release>
 23f7e28:	4804      	ldr	r0, [pc, #16]	; (23f7e3c <_Z16_fetch_usbserialv+0x44>)
 23f7e2a:	f003 fb73 	bl	23fb514 <atexit>
	return _usbserial;
}
 23f7e2e:	4802      	ldr	r0, [pc, #8]	; (23f7e38 <_Z16_fetch_usbserialv+0x40>)
 23f7e30:	b008      	add	sp, #32
 23f7e32:	bd10      	pop	{r4, pc}
 23f7e34:	1007ae88 	.word	0x1007ae88
 23f7e38:	1007ae8c 	.word	0x1007ae8c
 23f7e3c:	023f7d35 	.word	0x023f7d35

023f7e40 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23f7e40:	4770      	bx	lr

023f7e42 <_ZN9IPAddressD0Ev>:
 23f7e42:	b510      	push	{r4, lr}
 23f7e44:	4604      	mov	r4, r0
 23f7e46:	2118      	movs	r1, #24
 23f7e48:	f7f5 fca9 	bl	23ed79e <_ZdlPvj>
 23f7e4c:	4620      	mov	r0, r4
 23f7e4e:	bd10      	pop	{r4, pc}

023f7e50 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f7e50:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f7e52:	7d03      	ldrb	r3, [r0, #20]
{
 23f7e54:	460e      	mov	r6, r1
	if (address.v==6) {
 23f7e56:	2b06      	cmp	r3, #6
 23f7e58:	f04f 0400 	mov.w	r4, #0
{
 23f7e5c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7e5e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f7e62:	d012      	beq.n	23f7e8a <_ZNK9IPAddress7printToER5Print+0x3a>
 23f7e64:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f7e68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f7e6c:	220a      	movs	r2, #10
 23f7e6e:	4630      	mov	r0, r6
 23f7e70:	f001 f913 	bl	23f909a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f7e74:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f7e76:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f7e78:	d019      	beq.n	23f7eae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f7e7a:	2c00      	cmp	r4, #0
 23f7e7c:	d0f4      	beq.n	23f7e68 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f7e7e:	212e      	movs	r1, #46	; 0x2e
 23f7e80:	4630      	mov	r0, r6
 23f7e82:	f001 f907 	bl	23f9094 <_ZN5Print5printEc>
 23f7e86:	4404      	add	r4, r0
 23f7e88:	e7ee      	b.n	23f7e68 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7e8a:	232f      	movs	r3, #47	; 0x2f
 23f7e8c:	466a      	mov	r2, sp
 23f7e8e:	4639      	mov	r1, r7
 23f7e90:	200a      	movs	r0, #10
		buf[0] = 0;
 23f7e92:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7e96:	f7ff f99f 	bl	23f71d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f7e9a:	4668      	mov	r0, sp
 23f7e9c:	f7f5 fc54 	bl	23ed748 <strlen>
 23f7ea0:	6833      	ldr	r3, [r6, #0]
 23f7ea2:	4602      	mov	r2, r0
 23f7ea4:	4669      	mov	r1, sp
 23f7ea6:	4630      	mov	r0, r6
 23f7ea8:	68db      	ldr	r3, [r3, #12]
 23f7eaa:	4798      	blx	r3
 23f7eac:	4604      	mov	r4, r0
    }
    return n;
}
 23f7eae:	4620      	mov	r0, r4
 23f7eb0:	b00d      	add	sp, #52	; 0x34
 23f7eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f7eb4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f7eb4:	b510      	push	{r4, lr}
 23f7eb6:	4604      	mov	r4, r0
 23f7eb8:	4b04      	ldr	r3, [pc, #16]	; (23f7ecc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f7eba:	2211      	movs	r2, #17
 23f7ebc:	2100      	movs	r1, #0
 23f7ebe:	f840 3b04 	str.w	r3, [r0], #4
 23f7ec2:	f003 fb67 	bl	23fb594 <memset>
}
 23f7ec6:	4620      	mov	r0, r4
 23f7ec8:	bd10      	pop	{r4, pc}
 23f7eca:	bf00      	nop
 23f7ecc:	023ff9f0 	.word	0x023ff9f0

023f7ed0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f7ed0:	4603      	mov	r3, r0
 23f7ed2:	4a07      	ldr	r2, [pc, #28]	; (23f7ef0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f7ed4:	b510      	push	{r4, lr}
 23f7ed6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f7eda:	f101 0210 	add.w	r2, r1, #16
 23f7ede:	f851 4b04 	ldr.w	r4, [r1], #4
 23f7ee2:	4291      	cmp	r1, r2
 23f7ee4:	f843 4b04 	str.w	r4, [r3], #4
 23f7ee8:	d1f9      	bne.n	23f7ede <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f7eea:	780a      	ldrb	r2, [r1, #0]
 23f7eec:	701a      	strb	r2, [r3, #0]
}
 23f7eee:	bd10      	pop	{r4, pc}
 23f7ef0:	023ff9f0 	.word	0x023ff9f0

023f7ef4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f7ef4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f7ef6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f7efa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f7efe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f7f02:	2304      	movs	r3, #4
 23f7f04:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f7f08:	6041      	str	r1, [r0, #4]
 23f7f0a:	7503      	strb	r3, [r0, #20]
}
 23f7f0c:	bd10      	pop	{r4, pc}
	...

023f7f10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f7f10:	b507      	push	{r0, r1, r2, lr}
 23f7f12:	4b06      	ldr	r3, [pc, #24]	; (23f7f2c <_ZN9IPAddressC1EPKh+0x1c>)
 23f7f14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f7f16:	78cb      	ldrb	r3, [r1, #3]
 23f7f18:	9300      	str	r3, [sp, #0]
 23f7f1a:	788b      	ldrb	r3, [r1, #2]
 23f7f1c:	784a      	ldrb	r2, [r1, #1]
 23f7f1e:	7809      	ldrb	r1, [r1, #0]
 23f7f20:	f7ff ffe8 	bl	23f7ef4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f7f24:	b003      	add	sp, #12
 23f7f26:	f85d fb04 	ldr.w	pc, [sp], #4
 23f7f2a:	bf00      	nop
 23f7f2c:	023ff9f0 	.word	0x023ff9f0

023f7f30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f7f30:	4b01      	ldr	r3, [pc, #4]	; (23f7f38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f7f32:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f7f34:	4770      	bx	lr
 23f7f36:	bf00      	nop
 23f7f38:	10079c30 	.word	0x10079c30

023f7f3c <serialEventRun>:
{
 23f7f3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f7f3e:	4b0f      	ldr	r3, [pc, #60]	; (23f7f7c <serialEventRun+0x40>)
 23f7f40:	b143      	cbz	r3, 23f7f54 <serialEventRun+0x18>
 23f7f42:	f7ff ff59 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f7f46:	6803      	ldr	r3, [r0, #0]
 23f7f48:	691b      	ldr	r3, [r3, #16]
 23f7f4a:	4798      	blx	r3
 23f7f4c:	2800      	cmp	r0, #0
 23f7f4e:	dd01      	ble.n	23f7f54 <serialEventRun+0x18>
        serialEvent();
 23f7f50:	e000      	b.n	23f7f54 <serialEventRun+0x18>
 23f7f52:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f7f54:	4b0a      	ldr	r3, [pc, #40]	; (23f7f80 <serialEventRun+0x44>)
 23f7f56:	b143      	cbz	r3, 23f7f6a <serialEventRun+0x2e>
 23f7f58:	f001 faac 	bl	23f94b4 <_Z22__fetch_global_Serial1v>
 23f7f5c:	6803      	ldr	r3, [r0, #0]
 23f7f5e:	691b      	ldr	r3, [r3, #16]
 23f7f60:	4798      	blx	r3
 23f7f62:	2800      	cmp	r0, #0
 23f7f64:	dd01      	ble.n	23f7f6a <serialEventRun+0x2e>
        serialEvent1();
 23f7f66:	e000      	b.n	23f7f6a <serialEventRun+0x2e>
 23f7f68:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f7f6a:	4b06      	ldr	r3, [pc, #24]	; (23f7f84 <serialEventRun+0x48>)
 23f7f6c:	b10b      	cbz	r3, 23f7f72 <serialEventRun+0x36>
 23f7f6e:	f001 fae7 	bl	23f9540 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23f7f72:	4b05      	ldr	r3, [pc, #20]	; (23f7f88 <serialEventRun+0x4c>)
 23f7f74:	b10b      	cbz	r3, 23f7f7a <serialEventRun+0x3e>
 23f7f76:	f001 fb19 	bl	23f95ac <_Z15serialEventRun3v>
}
 23f7f7a:	bd08      	pop	{r3, pc}
	...

023f7f8c <_post_loop>:
{
 23f7f8c:	b508      	push	{r3, lr}
	serialEventRun();
 23f7f8e:	f7ff ffd5 	bl	23f7f3c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f7f92:	f7ff f99f 	bl	23f72d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f7f96:	4b01      	ldr	r3, [pc, #4]	; (23f7f9c <_post_loop+0x10>)
 23f7f98:	6018      	str	r0, [r3, #0]
}
 23f7f9a:	bd08      	pop	{r3, pc}
 23f7f9c:	1007af10 	.word	0x1007af10

023f7fa0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f7fa0:	4805      	ldr	r0, [pc, #20]	; (23f7fb8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23f7fa2:	4a06      	ldr	r2, [pc, #24]	; (23f7fbc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f7fa4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f7fa6:	1a12      	subs	r2, r2, r0
 23f7fa8:	4905      	ldr	r1, [pc, #20]	; (23f7fc0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23f7faa:	f003 facc 	bl	23fb546 <memcpy>
    __backup_sram_signature = signature;
 23f7fae:	4b05      	ldr	r3, [pc, #20]	; (23f7fc4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f7fb0:	4a05      	ldr	r2, [pc, #20]	; (23f7fc8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23f7fb2:	601a      	str	r2, [r3, #0]
}
 23f7fb4:	bd08      	pop	{r3, pc}
 23f7fb6:	bf00      	nop
 23f7fb8:	1007b400 	.word	0x1007b400
 23f7fbc:	1007b404 	.word	0x1007b404
 23f7fc0:	085ff26c 	.word	0x085ff26c
 23f7fc4:	1007b400 	.word	0x1007b400
 23f7fc8:	9a271c1e 	.word	0x9a271c1e

023f7fcc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f7fcc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f7fce:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f7fd0:	461a      	mov	r2, r3
 23f7fd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f7fd6:	9300      	str	r3, [sp, #0]
 23f7fd8:	f7ff fada 	bl	23f7590 <system_ctrl_set_result>
}
 23f7fdc:	b003      	add	sp, #12
 23f7fde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f7fe4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f7fe4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f7fe6:	8843      	ldrh	r3, [r0, #2]
 23f7fe8:	2b0a      	cmp	r3, #10
 23f7fea:	d008      	beq.n	23f7ffe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f7fec:	2b50      	cmp	r3, #80	; 0x50
 23f7fee:	d10b      	bne.n	23f8008 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f7ff0:	4b09      	ldr	r3, [pc, #36]	; (23f8018 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f7ff2:	681b      	ldr	r3, [r3, #0]
 23f7ff4:	b14b      	cbz	r3, 23f800a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f7ff6:	b003      	add	sp, #12
 23f7ff8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f7ffc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f7ffe:	f7ff ffe5 	bl	23f7fcc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f8002:	b003      	add	sp, #12
 23f8004:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f8008:	2300      	movs	r3, #0
 23f800a:	461a      	mov	r2, r3
 23f800c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f8010:	9300      	str	r3, [sp, #0]
 23f8012:	f7ff fabd 	bl	23f7590 <system_ctrl_set_result>
}
 23f8016:	e7f4      	b.n	23f8002 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f8018:	1007aea4 	.word	0x1007aea4

023f801c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f801c:	2100      	movs	r1, #0
{
 23f801e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f8020:	4811      	ldr	r0, [pc, #68]	; (23f8068 <module_user_init_hook+0x4c>)
 23f8022:	f7ff fb33 	bl	23f768c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f8026:	4b11      	ldr	r3, [pc, #68]	; (23f806c <module_user_init_hook+0x50>)
 23f8028:	681a      	ldr	r2, [r3, #0]
 23f802a:	4b11      	ldr	r3, [pc, #68]	; (23f8070 <module_user_init_hook+0x54>)
 23f802c:	429a      	cmp	r2, r3
 23f802e:	bf0c      	ite	eq
 23f8030:	2201      	moveq	r2, #1
 23f8032:	2200      	movne	r2, #0
 23f8034:	4b0f      	ldr	r3, [pc, #60]	; (23f8074 <module_user_init_hook+0x58>)
 23f8036:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f8038:	d001      	beq.n	23f803e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f803a:	f7ff ffb1 	bl	23f7fa0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f803e:	f7ff f91f 	bl	23f7280 <HAL_RNG_GetRandomNumber>
 23f8042:	4604      	mov	r4, r0
    srand(seed);
 23f8044:	f003 fabe 	bl	23fb5c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f8048:	4b0b      	ldr	r3, [pc, #44]	; (23f8078 <module_user_init_hook+0x5c>)
 23f804a:	b113      	cbz	r3, 23f8052 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f804c:	4620      	mov	r0, r4
 23f804e:	e000      	b.n	23f8052 <module_user_init_hook+0x36>
 23f8050:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f8052:	2100      	movs	r1, #0
 23f8054:	4808      	ldr	r0, [pc, #32]	; (23f8078 <module_user_init_hook+0x5c>)
 23f8056:	f7ff f9ad 	bl	23f73b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f805a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f805e:	2100      	movs	r1, #0
 23f8060:	4806      	ldr	r0, [pc, #24]	; (23f807c <module_user_init_hook+0x60>)
 23f8062:	f7ff ba87 	b.w	23f7574 <system_ctrl_set_app_request_handler>
 23f8066:	bf00      	nop
 23f8068:	023f7f31 	.word	0x023f7f31
 23f806c:	1007b400 	.word	0x1007b400
 23f8070:	9a271c1e 	.word	0x9a271c1e
 23f8074:	1007aea0 	.word	0x1007aea0
 23f8078:	00000000 	.word	0x00000000
 23f807c:	023f7fe5 	.word	0x023f7fe5

023f8080 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f8080:	2200      	movs	r2, #0
 23f8082:	4b01      	ldr	r3, [pc, #4]	; (23f8088 <_GLOBAL__sub_I_RGB+0x8>)
 23f8084:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f8086:	4770      	bx	lr
 23f8088:	1007aea8 	.word	0x1007aea8

023f808c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f808c:	2100      	movs	r1, #0
 23f808e:	f7ff ba55 	b.w	23f753c <system_delay_ms>
	...

023f8094 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f8094:	4b02      	ldr	r3, [pc, #8]	; (23f80a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f8096:	681a      	ldr	r2, [r3, #0]
 23f8098:	4b02      	ldr	r3, [pc, #8]	; (23f80a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f809a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f809c:	4770      	bx	lr
 23f809e:	bf00      	nop
 23f80a0:	10079c20 	.word	0x10079c20
 23f80a4:	1007aeb8 	.word	0x1007aeb8

023f80a8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23f80a8:	6880      	ldr	r0, [r0, #8]
 23f80aa:	6803      	ldr	r3, [r0, #0]
 23f80ac:	68db      	ldr	r3, [r3, #12]
 23f80ae:	4718      	bx	r3

023f80b0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f80b0:	4770      	bx	lr

023f80b2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f80b2:	4608      	mov	r0, r1
 23f80b4:	b111      	cbz	r1, 23f80bc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f80b6:	680b      	ldr	r3, [r1, #0]
 23f80b8:	685b      	ldr	r3, [r3, #4]
 23f80ba:	4718      	bx	r3
}
 23f80bc:	4770      	bx	lr

023f80be <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f80be:	4770      	bx	lr

023f80c0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f80c0:	4770      	bx	lr

023f80c2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f80c2:	4770      	bx	lr

023f80c4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f80c4:	4770      	bx	lr

023f80c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f80c6:	b538      	push	{r3, r4, r5, lr}
 23f80c8:	4604      	mov	r4, r0
 23f80ca:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f80cc:	6800      	ldr	r0, [r0, #0]
 23f80ce:	212e      	movs	r1, #46	; 0x2e
 23f80d0:	f003 fab3 	bl	23fb63a <strchrnul>
    size = s - category;
 23f80d4:	6823      	ldr	r3, [r4, #0]
 23f80d6:	1ac3      	subs	r3, r0, r3
 23f80d8:	602b      	str	r3, [r5, #0]
    if (size) {
 23f80da:	b123      	cbz	r3, 23f80e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f80dc:	7803      	ldrb	r3, [r0, #0]
 23f80de:	b103      	cbz	r3, 23f80e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f80e0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23f80e2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f80e4:	6020      	str	r0, [r4, #0]
}
 23f80e6:	4618      	mov	r0, r3
 23f80e8:	bd38      	pop	{r3, r4, r5, pc}

023f80ea <_ZN5spark16JSONStreamWriterD0Ev>:
 23f80ea:	b510      	push	{r4, lr}
 23f80ec:	4604      	mov	r4, r0
 23f80ee:	210c      	movs	r1, #12
 23f80f0:	f7f5 fb55 	bl	23ed79e <_ZdlPvj>
 23f80f4:	4620      	mov	r0, r4
 23f80f6:	bd10      	pop	{r4, pc}

023f80f8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f80f8:	b510      	push	{r4, lr}
 23f80fa:	4604      	mov	r4, r0
 23f80fc:	2104      	movs	r1, #4
 23f80fe:	f7f5 fb4e 	bl	23ed79e <_ZdlPvj>
 23f8102:	4620      	mov	r0, r4
 23f8104:	bd10      	pop	{r4, pc}

023f8106 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f8106:	b510      	push	{r4, lr}
 23f8108:	4604      	mov	r4, r0
 23f810a:	2104      	movs	r1, #4
 23f810c:	f7f5 fb47 	bl	23ed79e <_ZdlPvj>
 23f8110:	4620      	mov	r0, r4
 23f8112:	bd10      	pop	{r4, pc}

023f8114 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f8114:	f7ff b898 	b.w	23f7248 <os_mutex_recursive_lock>

023f8118 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f8118:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f811a:	f7f5 fb0b 	bl	23ed734 <strcmp>
}
 23f811e:	fab0 f080 	clz	r0, r0
 23f8122:	0940      	lsrs	r0, r0, #5
 23f8124:	bd08      	pop	{r3, pc}

023f8126 <__tcf_1>:
 23f8126:	4770      	bx	lr

023f8128 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f8128:	b510      	push	{r4, lr}
 23f812a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f812c:	f7ff fe64 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f8130:	4284      	cmp	r4, r0
 23f8132:	d105      	bne.n	23f8140 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f8134:	f7ff fe60 	bl	23f7df8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f8138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f813c:	f7ff be4e 	b.w	23f7ddc <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f8140:	f001 f9b8 	bl	23f94b4 <_Z22__fetch_global_Serial1v>
 23f8144:	4284      	cmp	r4, r0
 23f8146:	d105      	bne.n	23f8154 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f8148:	f001 f9b4 	bl	23f94b4 <_Z22__fetch_global_Serial1v>
}
 23f814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f8150:	f7ff bbf3 	b.w	23f793a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f8154:	b12c      	cbz	r4, 23f8162 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f8156:	6823      	ldr	r3, [r4, #0]
 23f8158:	4620      	mov	r0, r4
}
 23f815a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f815e:	685b      	ldr	r3, [r3, #4]
 23f8160:	4718      	bx	r3
 23f8162:	bd10      	pop	{r4, pc}

023f8164 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f8164:	680b      	ldr	r3, [r1, #0]
 23f8166:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f8168:	684b      	ldr	r3, [r1, #4]
 23f816a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f816c:	b113      	cbz	r3, 23f8174 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f816e:	685a      	ldr	r2, [r3, #4]
 23f8170:	3201      	adds	r2, #1
 23f8172:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f8174:	4770      	bx	lr

023f8176 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f8176:	b513      	push	{r0, r1, r4, lr}
 23f8178:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f817a:	4608      	mov	r0, r1
 23f817c:	9101      	str	r1, [sp, #4]
 23f817e:	f7f5 fae3 	bl	23ed748 <strlen>
 23f8182:	4602      	mov	r2, r0
 23f8184:	4620      	mov	r0, r4
 23f8186:	9901      	ldr	r1, [sp, #4]
}
 23f8188:	b002      	add	sp, #8
 23f818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f818e:	f7ff bdb7 	b.w	23f7d00 <_ZN5spark10JSONWriter5valueEPKcj>

023f8192 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f8192:	b513      	push	{r0, r1, r4, lr}
 23f8194:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f8196:	4608      	mov	r0, r1
 23f8198:	9101      	str	r1, [sp, #4]
 23f819a:	f7f5 fad5 	bl	23ed748 <strlen>
 23f819e:	4602      	mov	r2, r0
 23f81a0:	4620      	mov	r0, r4
 23f81a2:	6823      	ldr	r3, [r4, #0]
 23f81a4:	9901      	ldr	r1, [sp, #4]
 23f81a6:	68db      	ldr	r3, [r3, #12]
}
 23f81a8:	b002      	add	sp, #8
 23f81aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f81ae:	4718      	bx	r3

023f81b0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f81b0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f81b2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f81b4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f81b8:	2201      	movs	r2, #1
 23f81ba:	68db      	ldr	r3, [r3, #12]
 23f81bc:	f10d 0107 	add.w	r1, sp, #7
 23f81c0:	4798      	blx	r3
}
 23f81c2:	b003      	add	sp, #12
 23f81c4:	f85d fb04 	ldr.w	pc, [sp], #4

023f81c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23f81c8:	680a      	ldr	r2, [r1, #0]
 23f81ca:	b510      	push	{r4, lr}
 23f81cc:	6002      	str	r2, [r0, #0]
 23f81ce:	684a      	ldr	r2, [r1, #4]
 23f81d0:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f81d2:	2200      	movs	r2, #0
 23f81d4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f81d8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f81da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f81dc:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f81de:	6084      	str	r4, [r0, #8]
 23f81e0:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f81e2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f81e4:	60c4      	str	r4, [r0, #12]
 23f81e6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23f81e8:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f81ea:	6104      	str	r4, [r0, #16]
 23f81ec:	bd10      	pop	{r4, pc}
	...

023f81f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f81f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f81f4:	f04f 0a14 	mov.w	sl, #20
 23f81f8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f81fc:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23f81fe:	4645      	mov	r5, r8
 23f8200:	fb0a f404 	mul.w	r4, sl, r4
 23f8204:	9300      	str	r3, [sp, #0]
 23f8206:	4b17      	ldr	r3, [pc, #92]	; (23f8264 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f8208:	10a4      	asrs	r4, r4, #2
 23f820a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23f820c:	2c00      	cmp	r4, #0
 23f820e:	dd21      	ble.n	23f8254 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23f8210:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f8212:	fb0a f006 	mul.w	r0, sl, r6
 23f8216:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f821a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f821e:	463a      	mov	r2, r7
 23f8220:	455f      	cmp	r7, fp
 23f8222:	bf28      	it	cs
 23f8224:	465a      	movcs	r2, fp
 23f8226:	5828      	ldr	r0, [r5, r0]
 23f8228:	9101      	str	r1, [sp, #4]
 23f822a:	f003 fa18 	bl	23fb65e <strncmp>
                if (cmp == 0) {
 23f822e:	2800      	cmp	r0, #0
 23f8230:	f04f 0301 	mov.w	r3, #1
 23f8234:	9901      	ldr	r1, [sp, #4]
 23f8236:	d10b      	bne.n	23f8250 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f8238:	455f      	cmp	r7, fp
 23f823a:	d103      	bne.n	23f8244 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f823c:	9a00      	ldr	r2, [sp, #0]
 23f823e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f8240:	4634      	mov	r4, r6
 23f8242:	e7e3      	b.n	23f820c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23f8244:	d9fc      	bls.n	23f8240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23f8246:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f8248:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f824c:	3e01      	subs	r6, #1
 23f824e:	e7f7      	b.n	23f8240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f8250:	dbf9      	blt.n	23f8246 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f8252:	e7f5      	b.n	23f8240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f8254:	eba5 0508 	sub.w	r5, r5, r8
}
 23f8258:	4802      	ldr	r0, [pc, #8]	; (23f8264 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f825a:	10ad      	asrs	r5, r5, #2
 23f825c:	4368      	muls	r0, r5
 23f825e:	b003      	add	sp, #12
 23f8260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8264:	cccccccd 	.word	0xcccccccd

023f8268 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f8268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f826a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f826c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f826e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f8270:	b303      	cbz	r3, 23f82b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f8272:	b1f9      	cbz	r1, 23f82b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f8274:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f8276:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f827a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f827c:	a903      	add	r1, sp, #12
 23f827e:	a801      	add	r0, sp, #4
 23f8280:	f7ff ff21 	bl	23f80c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f8284:	4601      	mov	r1, r0
 23f8286:	b1a8      	cbz	r0, 23f82b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8288:	f10d 030b 	add.w	r3, sp, #11
 23f828c:	4620      	mov	r0, r4
 23f828e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f8290:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8294:	f7ff ffac 	bl	23f81f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23f8298:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f829c:	b153      	cbz	r3, 23f82b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23f829e:	6823      	ldr	r3, [r4, #0]
 23f82a0:	2414      	movs	r4, #20
 23f82a2:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23f82a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23f82aa:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23f82ac:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23f82ae:	bfa8      	it	ge
 23f82b0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23f82b2:	e7e3      	b.n	23f827c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23f82b4:	4628      	mov	r0, r5
 23f82b6:	b004      	add	sp, #16
 23f82b8:	bd70      	pop	{r4, r5, r6, pc}

023f82ba <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23f82ba:	b40e      	push	{r1, r2, r3}
 23f82bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f82be:	b08c      	sub	sp, #48	; 0x30
 23f82c0:	af00      	add	r7, sp, #0
 23f82c2:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23f82c6:	f855 2b04 	ldr.w	r2, [r5], #4
 23f82ca:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f82cc:	462b      	mov	r3, r5
 23f82ce:	2120      	movs	r1, #32
 23f82d0:	f107 0010 	add.w	r0, r7, #16
 23f82d4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f82d6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f82d8:	f7ff f992 	bl	23f7600 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23f82dc:	281f      	cmp	r0, #31
 23f82de:	687a      	ldr	r2, [r7, #4]
 23f82e0:	d91a      	bls.n	23f8318 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23f82e2:	f100 0308 	add.w	r3, r0, #8
 23f82e6:	f023 0307 	bic.w	r3, r3, #7
        }
 23f82ea:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23f82ec:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f82f0:	1c41      	adds	r1, r0, #1
 23f82f2:	462b      	mov	r3, r5
 23f82f4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f82f6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f82f8:	f7ff f982 	bl	23f7600 <vsnprintf>
        if (n > 0) {
 23f82fc:	1e02      	subs	r2, r0, #0
 23f82fe:	dd04      	ble.n	23f830a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23f8300:	6823      	ldr	r3, [r4, #0]
 23f8302:	4669      	mov	r1, sp
 23f8304:	4620      	mov	r0, r4
 23f8306:	68db      	ldr	r3, [r3, #12]
 23f8308:	4798      	blx	r3
 23f830a:	46b5      	mov	sp, r6
}
 23f830c:	3730      	adds	r7, #48	; 0x30
 23f830e:	46bd      	mov	sp, r7
 23f8310:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f8314:	b003      	add	sp, #12
 23f8316:	4770      	bx	lr
    } else if (n > 0) {
 23f8318:	2800      	cmp	r0, #0
 23f831a:	d0f7      	beq.n	23f830c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23f831c:	6823      	ldr	r3, [r4, #0]
 23f831e:	4602      	mov	r2, r0
 23f8320:	68db      	ldr	r3, [r3, #12]
 23f8322:	4620      	mov	r0, r4
 23f8324:	f107 0110 	add.w	r1, r7, #16
 23f8328:	4798      	blx	r3
}
 23f832a:	e7ef      	b.n	23f830c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023f832c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23f832c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23f832e:	4c08      	ldr	r4, [pc, #32]	; (23f8350 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23f8330:	e8d4 3f8f 	ldab	r3, [r4]
 23f8334:	07db      	lsls	r3, r3, #31
 23f8336:	d409      	bmi.n	23f834c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f8338:	4620      	mov	r0, r4
 23f833a:	f7f5 fa3f 	bl	23ed7bc <__cxa_guard_acquire>
 23f833e:	b128      	cbz	r0, 23f834c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f8340:	4620      	mov	r0, r4
 23f8342:	f7f5 fa40 	bl	23ed7c6 <__cxa_guard_release>
 23f8346:	4803      	ldr	r0, [pc, #12]	; (23f8354 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23f8348:	f003 f8e4 	bl	23fb514 <atexit>
}
 23f834c:	4802      	ldr	r0, [pc, #8]	; (23f8358 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23f834e:	bd10      	pop	{r4, pc}
 23f8350:	1007aec0 	.word	0x1007aec0
 23f8354:	023f80bf 	.word	0x023f80bf
 23f8358:	10079c24 	.word	0x10079c24

023f835c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23f835c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23f835e:	4c08      	ldr	r4, [pc, #32]	; (23f8380 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23f8360:	e8d4 3f8f 	ldab	r3, [r4]
 23f8364:	07db      	lsls	r3, r3, #31
 23f8366:	d409      	bmi.n	23f837c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f8368:	4620      	mov	r0, r4
 23f836a:	f7f5 fa27 	bl	23ed7bc <__cxa_guard_acquire>
 23f836e:	b128      	cbz	r0, 23f837c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f8370:	4620      	mov	r0, r4
 23f8372:	f7f5 fa28 	bl	23ed7c6 <__cxa_guard_release>
 23f8376:	4803      	ldr	r0, [pc, #12]	; (23f8384 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23f8378:	f003 f8cc 	bl	23fb514 <atexit>
    return &factory;
}
 23f837c:	4802      	ldr	r0, [pc, #8]	; (23f8388 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23f837e:	bd10      	pop	{r4, pc}
 23f8380:	1007aec4 	.word	0x1007aec4
 23f8384:	023f8127 	.word	0x023f8127
 23f8388:	10079c28 	.word	0x10079c28

023f838c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23f838c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f838e:	2500      	movs	r5, #0
 23f8390:	4604      	mov	r4, r0
 23f8392:	e9c0 5500 	strd	r5, r5, [r0]
 23f8396:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f839a:	6085      	str	r5, [r0, #8]
 23f839c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23f839e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23f83a2:	f7fe ff35 	bl	23f7210 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23f83a6:	f7ff ffc1 	bl	23f832c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23f83aa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f83ac:	f7ff ffd6 	bl	23f835c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23f83b0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f83b2:	6220      	str	r0, [r4, #32]
}
 23f83b4:	4620      	mov	r0, r4
 23f83b6:	bd38      	pop	{r3, r4, r5, pc}

023f83b8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23f83b8:	b510      	push	{r4, lr}
    static LogManager mgr;
 23f83ba:	4c0a      	ldr	r4, [pc, #40]	; (23f83e4 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23f83bc:	e8d4 3f8f 	ldab	r3, [r4]
 23f83c0:	07db      	lsls	r3, r3, #31
 23f83c2:	d40c      	bmi.n	23f83de <_ZN5spark10LogManager8instanceEv+0x26>
 23f83c4:	4620      	mov	r0, r4
 23f83c6:	f7f5 f9f9 	bl	23ed7bc <__cxa_guard_acquire>
 23f83ca:	b140      	cbz	r0, 23f83de <_ZN5spark10LogManager8instanceEv+0x26>
 23f83cc:	4806      	ldr	r0, [pc, #24]	; (23f83e8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f83ce:	f7ff ffdd 	bl	23f838c <_ZN5spark10LogManagerC1Ev>
 23f83d2:	4620      	mov	r0, r4
 23f83d4:	f7f5 f9f7 	bl	23ed7c6 <__cxa_guard_release>
 23f83d8:	4804      	ldr	r0, [pc, #16]	; (23f83ec <_ZN5spark10LogManager8instanceEv+0x34>)
 23f83da:	f003 f89b 	bl	23fb514 <atexit>
    return &mgr;
}
 23f83de:	4802      	ldr	r0, [pc, #8]	; (23f83e8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f83e0:	bd10      	pop	{r4, pc}
 23f83e2:	bf00      	nop
 23f83e4:	1007aebc 	.word	0x1007aebc
 23f83e8:	1007aecc 	.word	0x1007aecc
 23f83ec:	023f892d 	.word	0x023f892d

023f83f0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23f83f0:	2300      	movs	r3, #0
 23f83f2:	4a02      	ldr	r2, [pc, #8]	; (23f83fc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23f83f4:	4902      	ldr	r1, [pc, #8]	; (23f8400 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23f83f6:	4803      	ldr	r0, [pc, #12]	; (23f8404 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23f83f8:	f7fe bfc0 	b.w	23f737c <log_set_callbacks>
 23f83fc:	023f8715 	.word	0x023f8715
 23f8400:	023f86a1 	.word	0x023f86a1
 23f8404:	023f8621 	.word	0x023f8621

023f8408 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23f8408:	2300      	movs	r3, #0
 23f840a:	461a      	mov	r2, r3
 23f840c:	4619      	mov	r1, r3
 23f840e:	4618      	mov	r0, r3
 23f8410:	f7fe bfb4 	b.w	23f737c <log_set_callbacks>

023f8414 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23f8414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8416:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23f8418:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f841a:	4668      	mov	r0, sp
 23f841c:	f7ff fea2 	bl	23f8164 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f8420:	466a      	mov	r2, sp
 23f8422:	4629      	mov	r1, r5
 23f8424:	4620      	mov	r0, r4
 23f8426:	f7ff fb8b 	bl	23f7b40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23f842a:	a801      	add	r0, sp, #4
 23f842c:	f7ff fc78 	bl	23f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8430:	4620      	mov	r0, r4
 23f8432:	b003      	add	sp, #12
 23f8434:	bd30      	pop	{r4, r5, pc}

023f8436 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23f8436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8438:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23f843a:	68cd      	ldr	r5, [r1, #12]
 23f843c:	4668      	mov	r0, sp
 23f843e:	f7ff fe91 	bl	23f8164 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f8442:	466a      	mov	r2, sp
 23f8444:	4629      	mov	r1, r5
 23f8446:	4620      	mov	r0, r4
 23f8448:	f7ff fb56 	bl	23f7af8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f844c:	a801      	add	r0, sp, #4
 23f844e:	f7ff fc67 	bl	23f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8452:	4620      	mov	r0, r4
 23f8454:	b003      	add	sp, #12
 23f8456:	bd30      	pop	{r4, r5, pc}

023f8458 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23f8458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f845a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23f845c:	690d      	ldr	r5, [r1, #16]
 23f845e:	4668      	mov	r0, sp
 23f8460:	f7ff fe80 	bl	23f8164 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f8464:	466a      	mov	r2, sp
 23f8466:	4629      	mov	r1, r5
 23f8468:	4620      	mov	r0, r4
 23f846a:	f7ff faed 	bl	23f7a48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f846e:	a801      	add	r0, sp, #4
 23f8470:	f7ff fc56 	bl	23f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8474:	4620      	mov	r0, r4
 23f8476:	b003      	add	sp, #12
 23f8478:	bd30      	pop	{r4, r5, pc}
	...

023f847c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23f847c:	b570      	push	{r4, r5, r6, lr}
 23f847e:	b08a      	sub	sp, #40	; 0x28
 23f8480:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23f8482:	4601      	mov	r1, r0
 23f8484:	a804      	add	r0, sp, #16
 23f8486:	f7ff ffc5 	bl	23f8414 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23f848a:	4e14      	ldr	r6, [pc, #80]	; (23f84dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23f848c:	a804      	add	r0, sp, #16
 23f848e:	f7ff fb6f 	bl	23f7b70 <_ZN5spark18JSONObjectIterator4nextEv>
 23f8492:	b1e8      	cbz	r0, 23f84d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23f8494:	4668      	mov	r0, sp
 23f8496:	a904      	add	r1, sp, #16
 23f8498:	f7ff ffcd 	bl	23f8436 <_ZNK5spark18JSONObjectIterator4nameEv>
 23f849c:	4631      	mov	r1, r6
 23f849e:	9802      	ldr	r0, [sp, #8]
 23f84a0:	f7ff fe3a 	bl	23f8118 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23f84a4:	4604      	mov	r4, r0
 23f84a6:	b110      	cbz	r0, 23f84ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23f84a8:	1e2c      	subs	r4, r5, #0
 23f84aa:	bf18      	it	ne
 23f84ac:	2401      	movne	r4, #1
 23f84ae:	a801      	add	r0, sp, #4
 23f84b0:	f7ff fc36 	bl	23f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f84b4:	2c00      	cmp	r4, #0
 23f84b6:	d0e9      	beq.n	23f848c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23f84b8:	4668      	mov	r0, sp
 23f84ba:	a904      	add	r1, sp, #16
 23f84bc:	f7ff ffcc 	bl	23f8458 <_ZNK5spark18JSONObjectIterator5valueEv>
 23f84c0:	4668      	mov	r0, sp
 23f84c2:	f7ff faf7 	bl	23f7ab4 <_ZNK5spark9JSONValue5toIntEv>
 23f84c6:	6028      	str	r0, [r5, #0]
 23f84c8:	a801      	add	r0, sp, #4
 23f84ca:	f7ff fc29 	bl	23f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f84ce:	e7dd      	b.n	23f848c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23f84d0:	a805      	add	r0, sp, #20
 23f84d2:	f7ff fc25 	bl	23f7d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f84d6:	b00a      	add	sp, #40	; 0x28
 23f84d8:	bd70      	pop	{r4, r5, r6, pc}
 23f84da:	bf00      	nop
 23f84dc:	023ffa18 	.word	0x023ffa18

023f84e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f84e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f84e2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23f84e4:	4913      	ldr	r1, [pc, #76]	; (23f8534 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23f84e6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f84e8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23f84ea:	f7f5 f923 	bl	23ed734 <strcmp>
 23f84ee:	b950      	cbnz	r0, 23f8506 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23f84f0:	f7ff fc82 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f84f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f84f8:	f7ff fc6c 	bl	23f7dd4 <_ZN9USBSerial5beginEl>
}
 23f84fc:	b003      	add	sp, #12
 23f84fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23f8502:	f7ff bc79 	b.w	23f7df8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23f8506:	4620      	mov	r0, r4
 23f8508:	490b      	ldr	r1, [pc, #44]	; (23f8538 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23f850a:	f7f5 f913 	bl	23ed734 <strcmp>
 23f850e:	b978      	cbnz	r0, 23f8530 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23f8510:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23f8514:	a901      	add	r1, sp, #4
 23f8516:	4628      	mov	r0, r5
        int baud = 9600;
 23f8518:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23f851a:	f7ff ffaf 	bl	23f847c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23f851e:	f000 ffc9 	bl	23f94b4 <_Z22__fetch_global_Serial1v>
 23f8522:	9901      	ldr	r1, [sp, #4]
 23f8524:	f7ff fa06 	bl	23f7934 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23f8528:	f000 ffc4 	bl	23f94b4 <_Z22__fetch_global_Serial1v>
}
 23f852c:	b003      	add	sp, #12
 23f852e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23f8530:	2000      	movs	r0, #0
 23f8532:	e7fb      	b.n	23f852c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23f8534:	023ffa1d 	.word	0x023ffa1d
 23f8538:	023ffa24 	.word	0x023ffa24

023f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f853c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f853e:	2614      	movs	r6, #20
 23f8540:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8544:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8546:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f854a:	42ae      	cmp	r6, r5
 23f854c:	d005      	beq.n	23f855a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23f854e:	f105 0008 	add.w	r0, r5, #8
 23f8552:	f7ff fff3 	bl	23f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f8556:	3514      	adds	r5, #20
 23f8558:	e7f7      	b.n	23f854a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f855a:	6820      	ldr	r0, [r4, #0]
 23f855c:	f7ff f834 	bl	23f75c8 <free>
}
 23f8560:	4620      	mov	r0, r4
 23f8562:	bd70      	pop	{r4, r5, r6, pc}

023f8564 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8564:	b570      	push	{r4, r5, r6, lr}
 23f8566:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8568:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f856c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f8570:	42ae      	cmp	r6, r5
 23f8572:	d004      	beq.n	23f857e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f8574:	4628      	mov	r0, r5
 23f8576:	f000 fe8f 	bl	23f9298 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f857a:	3510      	adds	r5, #16
 23f857c:	e7f8      	b.n	23f8570 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f857e:	6820      	ldr	r0, [r4, #0]
 23f8580:	f7ff f822 	bl	23f75c8 <free>
}
 23f8584:	4620      	mov	r0, r4
 23f8586:	bd70      	pop	{r4, r5, r6, pc}

023f8588 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23f8588:	b510      	push	{r4, lr}
 23f858a:	4604      	mov	r4, r0
 23f858c:	300c      	adds	r0, #12
 23f858e:	f7ff ffd5 	bl	23f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f8592:	4620      	mov	r0, r4
 23f8594:	f7ff ffe6 	bl	23f8564 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f8598:	4620      	mov	r0, r4
 23f859a:	bd10      	pop	{r4, pc}

023f859c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23f859c:	b510      	push	{r4, lr}
 23f859e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23f85a0:	4b03      	ldr	r3, [pc, #12]	; (23f85b0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23f85a2:	f840 3b04 	str.w	r3, [r0], #4
 23f85a6:	f7ff ffef 	bl	23f8588 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23f85aa:	4620      	mov	r0, r4
 23f85ac:	bd10      	pop	{r4, pc}
 23f85ae:	bf00      	nop
 23f85b0:	023fcc50 	.word	0x023fcc50

023f85b4 <_ZN5spark16StreamLogHandlerD0Ev>:
 23f85b4:	b510      	push	{r4, lr}
 23f85b6:	4604      	mov	r4, r0
 23f85b8:	f7ff fff0 	bl	23f859c <_ZN5spark16StreamLogHandlerD1Ev>
 23f85bc:	4620      	mov	r0, r4
 23f85be:	2124      	movs	r1, #36	; 0x24
 23f85c0:	f7f5 f8ed 	bl	23ed79e <_ZdlPvj>
 23f85c4:	4620      	mov	r0, r4
 23f85c6:	bd10      	pop	{r4, pc}

023f85c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23f85c8:	b510      	push	{r4, lr}
 23f85ca:	4604      	mov	r4, r0
 23f85cc:	4b02      	ldr	r3, [pc, #8]	; (23f85d8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23f85ce:	6003      	str	r3, [r0, #0]
 23f85d0:	f7ff ffe4 	bl	23f859c <_ZN5spark16StreamLogHandlerD1Ev>
 23f85d4:	4620      	mov	r0, r4
 23f85d6:	bd10      	pop	{r4, pc}
 23f85d8:	023ffabc 	.word	0x023ffabc

023f85dc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23f85dc:	b510      	push	{r4, lr}
 23f85de:	4604      	mov	r4, r0
 23f85e0:	f7ff fff2 	bl	23f85c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23f85e4:	4620      	mov	r0, r4
 23f85e6:	2124      	movs	r1, #36	; 0x24
 23f85e8:	f7f5 f8d9 	bl	23ed79e <_ZdlPvj>
 23f85ec:	4620      	mov	r0, r4
 23f85ee:	bd10      	pop	{r4, pc}

023f85f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23f85f0:	2200      	movs	r2, #0
 23f85f2:	e9c0 2200 	strd	r2, r2, [r0]
 23f85f6:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f85f8:	b510      	push	{r4, lr}
 23f85fa:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f85fc:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f85fe:	6004      	str	r4, [r0, #0]
 23f8600:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8602:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f8604:	6044      	str	r4, [r0, #4]
 23f8606:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8608:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f860a:	6084      	str	r4, [r0, #8]
}
 23f860c:	bd10      	pop	{r4, pc}

023f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f860e:	b510      	push	{r4, lr}
 23f8610:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23f8612:	6803      	ldr	r3, [r0, #0]
 23f8614:	6818      	ldr	r0, [r3, #0]
 23f8616:	f7fe fe25 	bl	23f7264 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23f861a:	4620      	mov	r0, r4
 23f861c:	bd10      	pop	{r4, pc}
	...

023f8620 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23f8620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8624:	b087      	sub	sp, #28
 23f8626:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23f8628:	4b1c      	ldr	r3, [pc, #112]	; (23f869c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23f862a:	4680      	mov	r8, r0
 23f862c:	685b      	ldr	r3, [r3, #4]
 23f862e:	4689      	mov	r9, r1
 23f8630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f8634:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23f8636:	b96b      	cbnz	r3, 23f8654 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23f8638:	f7ff febe 	bl	23f83b8 <_ZN5spark10LogManager8instanceEv>
 23f863c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f863e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23f8642:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8644:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23f8646:	f7ff fd65 	bl	23f8114 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23f864a:	7b23      	ldrb	r3, [r4, #12]
 23f864c:	b12b      	cbz	r3, 23f865a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23f864e:	a805      	add	r0, sp, #20
 23f8650:	f7ff ffdd 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23f8654:	b007      	add	sp, #28
 23f8656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23f865a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23f865c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23f8660:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23f8662:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f8666:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f866a:	45aa      	cmp	sl, r5
 23f866c:	d012      	beq.n	23f8694 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23f866e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23f8672:	4631      	mov	r1, r6
 23f8674:	1d38      	adds	r0, r7, #4
 23f8676:	f7ff fdf7 	bl	23f8268 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f867a:	4581      	cmp	r9, r0
 23f867c:	d3f5      	bcc.n	23f866a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23f867e:	9a03      	ldr	r2, [sp, #12]
 23f8680:	683b      	ldr	r3, [r7, #0]
 23f8682:	9200      	str	r2, [sp, #0]
 23f8684:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23f8688:	464a      	mov	r2, r9
 23f868a:	4633      	mov	r3, r6
 23f868c:	4641      	mov	r1, r8
 23f868e:	4638      	mov	r0, r7
 23f8690:	47d8      	blx	fp
 23f8692:	e7ea      	b.n	23f866a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23f8694:	2300      	movs	r3, #0
 23f8696:	7323      	strb	r3, [r4, #12]
 23f8698:	e7d9      	b.n	23f864e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23f869a:	bf00      	nop
 23f869c:	e000ed00 	.word	0xe000ed00

023f86a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23f86a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f86a4:	469b      	mov	fp, r3
 23f86a6:	4b1a      	ldr	r3, [pc, #104]	; (23f8710 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23f86a8:	4680      	mov	r8, r0
 23f86aa:	685b      	ldr	r3, [r3, #4]
 23f86ac:	4689      	mov	r9, r1
 23f86ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f86b2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23f86b4:	b96b      	cbnz	r3, 23f86d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23f86b6:	f7ff fe7f 	bl	23f83b8 <_ZN5spark10LogManager8instanceEv>
 23f86ba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f86bc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f86c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f86c2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f86c4:	f7ff fd26 	bl	23f8114 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23f86c8:	7b23      	ldrb	r3, [r4, #12]
 23f86ca:	b12b      	cbz	r3, 23f86d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23f86cc:	a801      	add	r0, sp, #4
 23f86ce:	f7ff ff9e 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f86d2:	b003      	add	sp, #12
 23f86d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23f86d8:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23f86da:	b2f6      	uxtb	r6, r6
 23f86dc:	7323      	strb	r3, [r4, #12]
 23f86de:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f86e2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f86e6:	4555      	cmp	r5, sl
 23f86e8:	d00e      	beq.n	23f8708 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23f86ea:	f855 7b04 	ldr.w	r7, [r5], #4
 23f86ee:	4659      	mov	r1, fp
 23f86f0:	1d38      	adds	r0, r7, #4
 23f86f2:	f7ff fdb9 	bl	23f8268 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f86f6:	4286      	cmp	r6, r0
 23f86f8:	d3f5      	bcc.n	23f86e6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23f86fa:	683b      	ldr	r3, [r7, #0]
 23f86fc:	464a      	mov	r2, r9
 23f86fe:	4641      	mov	r1, r8
 23f8700:	4638      	mov	r0, r7
 23f8702:	68db      	ldr	r3, [r3, #12]
 23f8704:	4798      	blx	r3
 23f8706:	e7ee      	b.n	23f86e6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23f8708:	2300      	movs	r3, #0
 23f870a:	7323      	strb	r3, [r4, #12]
 23f870c:	e7de      	b.n	23f86cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23f870e:	bf00      	nop
 23f8710:	e000ed00 	.word	0xe000ed00

023f8714 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23f8714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f8718:	4b16      	ldr	r3, [pc, #88]	; (23f8774 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23f871a:	4605      	mov	r5, r0
 23f871c:	685b      	ldr	r3, [r3, #4]
 23f871e:	460f      	mov	r7, r1
 23f8720:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23f8724:	bb1b      	cbnz	r3, 23f876e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23f8726:	f7ff fe47 	bl	23f83b8 <_ZN5spark10LogManager8instanceEv>
 23f872a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f872c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f8730:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8732:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f8734:	f7ff fcee 	bl	23f8114 <_ZN14RecursiveMutex4lockEv.isra.0>
 23f8738:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23f873c:	2446      	movs	r4, #70	; 0x46
 23f873e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f8742:	45b0      	cmp	r8, r6
 23f8744:	d109      	bne.n	23f875a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23f8746:	a801      	add	r0, sp, #4
 23f8748:	f7ff ff61 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23f874c:	42a5      	cmp	r5, r4
 23f874e:	bfb4      	ite	lt
 23f8750:	2000      	movlt	r0, #0
 23f8752:	2001      	movge	r0, #1
}
 23f8754:	b002      	add	sp, #8
 23f8756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23f875a:	f856 0b04 	ldr.w	r0, [r6], #4
 23f875e:	4639      	mov	r1, r7
 23f8760:	3004      	adds	r0, #4
 23f8762:	f7ff fd81 	bl	23f8268 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23f8766:	4284      	cmp	r4, r0
 23f8768:	bfa8      	it	ge
 23f876a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23f876c:	e7e9      	b.n	23f8742 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23f876e:	2000      	movs	r0, #0
 23f8770:	e7f0      	b.n	23f8754 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23f8772:	bf00      	nop
 23f8774:	e000ed00 	.word	0xe000ed00

023f8778 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f8778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f877a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23f877e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f8780:	4604      	mov	r4, r0
 23f8782:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8784:	db0d      	blt.n	23f87a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23f8786:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23f8788:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f878a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f878c:	dd04      	ble.n	23f8798 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23f878e:	00b9      	lsls	r1, r7, #2
 23f8790:	f7fe ff28 	bl	23f75e4 <realloc>
            if (!d) {
 23f8794:	b918      	cbnz	r0, 23f879e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23f8796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23f8798:	f7fe ff16 	bl	23f75c8 <free>
        T* d = nullptr;
 23f879c:	2000      	movs	r0, #0
        data_ = d;
 23f879e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f87a0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23f87a2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f87a4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f87a6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23f87aa:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f87ac:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23f87b0:	1d08      	adds	r0, r1, #4
 23f87b2:	f002 fed5 	bl	23fb560 <memmove>
    new(p) T(std::move(value));
 23f87b6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23f87ba:	6863      	ldr	r3, [r4, #4]
    return true;
 23f87bc:	2001      	movs	r0, #1
    ++size_;
 23f87be:	3301      	adds	r3, #1
 23f87c0:	6063      	str	r3, [r4, #4]
    return true;
 23f87c2:	e7e8      	b.n	23f8796 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023f87c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f87c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f87c6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f87c8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f87cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f87ce:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f87d0:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23f87d2:	f7ff fc9f 	bl	23f8114 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23f87d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f87da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23f87de:	4293      	cmp	r3, r2
 23f87e0:	4619      	mov	r1, r3
 23f87e2:	d00a      	beq.n	23f87fa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23f87e4:	6809      	ldr	r1, [r1, #0]
 23f87e6:	3304      	adds	r3, #4
 23f87e8:	42a9      	cmp	r1, r5
 23f87ea:	d1f8      	bne.n	23f87de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23f87ec:	a801      	add	r0, sp, #4
 23f87ee:	f7ff ff0e 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f87f2:	2500      	movs	r5, #0
}
 23f87f4:	4628      	mov	r0, r5
 23f87f6:	b003      	add	sp, #12
 23f87f8:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23f87fa:	4629      	mov	r1, r5
 23f87fc:	4620      	mov	r0, r4
 23f87fe:	f7ff ffbb 	bl	23f8778 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23f8802:	4605      	mov	r5, r0
 23f8804:	2800      	cmp	r0, #0
 23f8806:	d0f1      	beq.n	23f87ec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23f8808:	6863      	ldr	r3, [r4, #4]
 23f880a:	2b01      	cmp	r3, #1
 23f880c:	d101      	bne.n	23f8812 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23f880e:	f7ff fdef 	bl	23f83f0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f8812:	a801      	add	r0, sp, #4
 23f8814:	f7ff fefb 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f8818:	e7ec      	b.n	23f87f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023f881a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f881a:	460b      	mov	r3, r1
 23f881c:	b570      	push	{r4, r5, r6, lr}
 23f881e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23f8820:	e9d0 0200 	ldrd	r0, r2, [r0]
 23f8824:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23f8828:	4282      	cmp	r2, r0
 23f882a:	d00f      	beq.n	23f884c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23f882c:	4601      	mov	r1, r0
            if (*p == value) {
 23f882e:	681d      	ldr	r5, [r3, #0]
 23f8830:	f851 6b04 	ldr.w	r6, [r1], #4
 23f8834:	42ae      	cmp	r6, r5
 23f8836:	d107      	bne.n	23f8848 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f8838:	1a52      	subs	r2, r2, r1
 23f883a:	f002 fe91 	bl	23fb560 <memmove>
    return true;
 23f883e:	2001      	movs	r0, #1
    --size_;
 23f8840:	6863      	ldr	r3, [r4, #4]
 23f8842:	3b01      	subs	r3, #1
 23f8844:	6063      	str	r3, [r4, #4]
}
 23f8846:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23f8848:	4608      	mov	r0, r1
 23f884a:	e7ed      	b.n	23f8828 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23f884c:	2000      	movs	r0, #0
 23f884e:	e7fa      	b.n	23f8846 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023f8850 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f8850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f8852:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f8854:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f8858:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f885a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f885c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23f885e:	f7ff fc59 	bl	23f8114 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23f8862:	4620      	mov	r0, r4
 23f8864:	a901      	add	r1, sp, #4
 23f8866:	f7ff ffd8 	bl	23f881a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23f886a:	b118      	cbz	r0, 23f8874 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23f886c:	6863      	ldr	r3, [r4, #4]
 23f886e:	b90b      	cbnz	r3, 23f8874 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23f8870:	f7ff fdca 	bl	23f8408 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f8874:	a803      	add	r0, sp, #12
 23f8876:	f7ff feca 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f887a:	b004      	add	sp, #16
 23f887c:	bd10      	pop	{r4, pc}

023f887e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23f887e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23f8880:	b570      	push	{r4, r5, r6, lr}
 23f8882:	4604      	mov	r4, r0
 23f8884:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f8888:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23f888c:	42ae      	cmp	r6, r5
 23f888e:	d015      	beq.n	23f88bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23f8890:	4620      	mov	r0, r4
 23f8892:	f105 0110 	add.w	r1, r5, #16
 23f8896:	f7ff ffc0 	bl	23f881a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23f889a:	6863      	ldr	r3, [r4, #4]
 23f889c:	b90b      	cbnz	r3, 23f88a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23f889e:	f7ff fdb3 	bl	23f8408 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23f88a2:	69e0      	ldr	r0, [r4, #28]
 23f88a4:	6929      	ldr	r1, [r5, #16]
 23f88a6:	6803      	ldr	r3, [r0, #0]
 23f88a8:	68db      	ldr	r3, [r3, #12]
 23f88aa:	4798      	blx	r3
        if (h.stream) {
 23f88ac:	6969      	ldr	r1, [r5, #20]
 23f88ae:	b119      	cbz	r1, 23f88b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23f88b0:	6a20      	ldr	r0, [r4, #32]
 23f88b2:	6803      	ldr	r3, [r0, #0]
 23f88b4:	68db      	ldr	r3, [r3, #12]
 23f88b6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23f88b8:	3518      	adds	r5, #24
 23f88ba:	e7e7      	b.n	23f888c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23f88bc:	2618      	movs	r6, #24
 23f88be:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f88c2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f88c6:	42ae      	cmp	r6, r5
 23f88c8:	d004      	beq.n	23f88d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23f88ca:	4628      	mov	r0, r5
 23f88cc:	f000 fce4 	bl	23f9298 <_ZN6StringD1Ev>
 23f88d0:	3518      	adds	r5, #24
 23f88d2:	e7f8      	b.n	23f88c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23f88d4:	2300      	movs	r3, #0
 23f88d6:	6163      	str	r3, [r4, #20]
}
 23f88d8:	bd70      	pop	{r4, r5, r6, pc}

023f88da <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23f88da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f88dc:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23f88de:	f7ff fd93 	bl	23f8408 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f88e2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23f88e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f88e8:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f88ea:	f7ff fc13 	bl	23f8114 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23f88ee:	4620      	mov	r0, r4
 23f88f0:	f7ff ffc5 	bl	23f887e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23f88f4:	a801      	add	r0, sp, #4
 23f88f6:	f7ff fe8a 	bl	23f860e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23f88fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f88fc:	b108      	cbz	r0, 23f8902 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23f88fe:	f7fe fc95 	bl	23f722c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23f8902:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f8906:	2618      	movs	r6, #24
 23f8908:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f890c:	42ae      	cmp	r6, r5
 23f890e:	d004      	beq.n	23f891a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23f8910:	4628      	mov	r0, r5
 23f8912:	f000 fcc1 	bl	23f9298 <_ZN6StringD1Ev>
 23f8916:	3518      	adds	r5, #24
 23f8918:	e7f8      	b.n	23f890c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23f891a:	6920      	ldr	r0, [r4, #16]
 23f891c:	f7fe fe54 	bl	23f75c8 <free>
 23f8920:	6820      	ldr	r0, [r4, #0]
 23f8922:	f7fe fe51 	bl	23f75c8 <free>
}
 23f8926:	4620      	mov	r0, r4
 23f8928:	b002      	add	sp, #8
 23f892a:	bd70      	pop	{r4, r5, r6, pc}

023f892c <__tcf_2>:
    static LogManager mgr;
 23f892c:	4801      	ldr	r0, [pc, #4]	; (23f8934 <__tcf_2+0x8>)
 23f892e:	f7ff bfd4 	b.w	23f88da <_ZN5spark10LogManagerD1Ev>
 23f8932:	bf00      	nop
 23f8934:	1007aecc 	.word	0x1007aecc

023f8938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23f8938:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f893a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f893c:	4604      	mov	r4, r0
 23f893e:	460d      	mov	r5, r1
 23f8940:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f8942:	d915      	bls.n	23f8970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23f8944:	4290      	cmp	r0, r2
 23f8946:	d214      	bcs.n	23f8972 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23f8948:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f894c:	1a75      	subs	r5, r6, r1
 23f894e:	f1a1 0714 	sub.w	r7, r1, #20
 23f8952:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f8954:	42b7      	cmp	r7, r6
 23f8956:	d01a      	beq.n	23f898e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23f8958:	b11c      	cbz	r4, 23f8962 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23f895a:	4631      	mov	r1, r6
 23f895c:	4620      	mov	r0, r4
 23f895e:	f7ff fc33 	bl	23f81c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23f8962:	f106 0008 	add.w	r0, r6, #8
 23f8966:	f7ff fde9 	bl	23f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23f896a:	3e14      	subs	r6, #20
 23f896c:	3c14      	subs	r4, #20
 23f896e:	e7f1      	b.n	23f8954 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23f8970:	d00d      	beq.n	23f898e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23f8972:	42b5      	cmp	r5, r6
 23f8974:	d00b      	beq.n	23f898e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23f8976:	b11c      	cbz	r4, 23f8980 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23f8978:	4629      	mov	r1, r5
 23f897a:	4620      	mov	r0, r4
 23f897c:	f7ff fc24 	bl	23f81c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23f8980:	f105 0008 	add.w	r0, r5, #8
 23f8984:	f7ff fdda 	bl	23f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23f8988:	3514      	adds	r5, #20
 23f898a:	3414      	adds	r4, #20
 23f898c:	e7f1      	b.n	23f8972 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23f898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f8990:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f8992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8994:	4604      	mov	r4, r0
 23f8996:	460d      	mov	r5, r1
 23f8998:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f899a:	d914      	bls.n	23f89c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23f899c:	4290      	cmp	r0, r2
 23f899e:	d213      	bcs.n	23f89c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23f89a0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23f89a4:	1a75      	subs	r5, r6, r1
 23f89a6:	f1a1 0710 	sub.w	r7, r1, #16
 23f89aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f89ac:	42b7      	cmp	r7, r6
 23f89ae:	d018      	beq.n	23f89e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23f89b0:	b11c      	cbz	r4, 23f89ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23f89b2:	4631      	mov	r1, r6
 23f89b4:	4620      	mov	r0, r4
 23f89b6:	f000 fcd7 	bl	23f9368 <_ZN6StringC1EOS_>
                end->~T();
 23f89ba:	4630      	mov	r0, r6
 23f89bc:	f000 fc6c 	bl	23f9298 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f89c0:	3e10      	subs	r6, #16
 23f89c2:	3c10      	subs	r4, #16
 23f89c4:	e7f2      	b.n	23f89ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f89c6:	d00c      	beq.n	23f89e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23f89c8:	42b5      	cmp	r5, r6
 23f89ca:	d00a      	beq.n	23f89e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23f89cc:	b11c      	cbz	r4, 23f89d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23f89ce:	4629      	mov	r1, r5
 23f89d0:	4620      	mov	r0, r4
 23f89d2:	f000 fcc9 	bl	23f9368 <_ZN6StringC1EOS_>
                p->~T();
 23f89d6:	4628      	mov	r0, r5
 23f89d8:	f000 fc5e 	bl	23f9298 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f89dc:	3510      	adds	r5, #16
 23f89de:	3410      	adds	r4, #16
 23f89e0:	e7f2      	b.n	23f89c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23f89e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f89e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f89e4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f89e6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f89e8:	4605      	mov	r5, r0
        if (n > 0) {
 23f89ea:	dd11      	ble.n	23f8a10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f89ec:	0130      	lsls	r0, r6, #4
 23f89ee:	f7fe fddd 	bl	23f75ac <malloc>
            if (!d) {
 23f89f2:	4604      	mov	r4, r0
 23f89f4:	b158      	cbz	r0, 23f8a0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f89f6:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f89fa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23f89fe:	f7ff ffc7 	bl	23f8990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f8a02:	6828      	ldr	r0, [r5, #0]
 23f8a04:	f7fe fde0 	bl	23f75c8 <free>
        return true;
 23f8a08:	2001      	movs	r0, #1
        data_ = d;
 23f8a0a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f8a0c:	60ae      	str	r6, [r5, #8]
    }
 23f8a0e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f8a10:	2400      	movs	r4, #0
 23f8a12:	e7f6      	b.n	23f8a02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023f8a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f8a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8a18:	4690      	mov	r8, r2
        capacity_(0) {
 23f8a1a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f8a1c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f8a1e:	b095      	sub	sp, #84	; 0x54
 23f8a20:	9103      	str	r1, [sp, #12]
    return size_;
 23f8a22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23f8a26:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23f8a28:	4299      	cmp	r1, r3
        capacity_(0) {
 23f8a2a:	e9c0 3300 	strd	r3, r3, [r0]
 23f8a2e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23f8a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f8a36:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f8a3a:	7602      	strb	r2, [r0, #24]
 23f8a3c:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23f8a3e:	dc23      	bgt.n	23f8a88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23f8a40:	e9d8 5700 	ldrd	r5, r7, [r8]
 23f8a44:	2314      	movs	r3, #20
 23f8a46:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23f8a4a:	42af      	cmp	r7, r5
 23f8a4c:	d03b      	beq.n	23f8ac6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23f8a4e:	4629      	mov	r1, r5
 23f8a50:	a80b      	add	r0, sp, #44	; 0x2c
 23f8a52:	f000 fc89 	bl	23f9368 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23f8a56:	a90b      	add	r1, sp, #44	; 0x2c
 23f8a58:	a80f      	add	r0, sp, #60	; 0x3c
 23f8a5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23f8a5c:	f000 fc84 	bl	23f9368 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8a60:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23f8a64:	4299      	cmp	r1, r3
 23f8a66:	da1b      	bge.n	23f8aa0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23f8a68:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23f8a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23f8a6c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23f8a70:	4631      	mov	r1, r6
 23f8a72:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23f8a76:	f106 0010 	add.w	r0, r6, #16
 23f8a7a:	f7ff ff89 	bl	23f8990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23f8a7e:	b9ee      	cbnz	r6, 23f8abc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23f8a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f8a82:	3301      	adds	r3, #1
 23f8a84:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23f8a86:	e011      	b.n	23f8aac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23f8a88:	a808      	add	r0, sp, #32
 23f8a8a:	f7ff ffab 	bl	23f89e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f8a8e:	2800      	cmp	r0, #0
 23f8a90:	d1d6      	bne.n	23f8a40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23f8a92:	a808      	add	r0, sp, #32
 23f8a94:	f7ff fd66 	bl	23f8564 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f8a98:	4620      	mov	r0, r4
 23f8a9a:	b015      	add	sp, #84	; 0x54
 23f8a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8aa0:	3101      	adds	r1, #1
 23f8aa2:	a808      	add	r0, sp, #32
 23f8aa4:	f7ff ff9e 	bl	23f89e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f8aa8:	2800      	cmp	r0, #0
 23f8aaa:	d1dd      	bne.n	23f8a68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23f8aac:	a80f      	add	r0, sp, #60	; 0x3c
 23f8aae:	f000 fbf3 	bl	23f9298 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23f8ab2:	a80b      	add	r0, sp, #44	; 0x2c
 23f8ab4:	f000 fbf0 	bl	23f9298 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23f8ab8:	3514      	adds	r5, #20
 23f8aba:	e7c6      	b.n	23f8a4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23f8abc:	4630      	mov	r0, r6
 23f8abe:	a90f      	add	r1, sp, #60	; 0x3c
 23f8ac0:	f000 fc52 	bl	23f9368 <_ZN6StringC1EOS_>
 23f8ac4:	e7dc      	b.n	23f8a80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23f8ac6:	2600      	movs	r6, #0
 23f8ac8:	f04f 0914 	mov.w	r9, #20
 23f8acc:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23f8ad0:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23f8ad2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23f8ad6:	429e      	cmp	r6, r3
 23f8ad8:	da7c      	bge.n	23f8bd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f8ada:	0133      	lsls	r3, r6, #4
 23f8adc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23f8ade:	9306      	str	r3, [sp, #24]
        if (!category) {
 23f8ae0:	b90b      	cbnz	r3, 23f8ae6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23f8ae2:	3601      	adds	r6, #1
 23f8ae4:	e7f5      	b.n	23f8ad2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23f8ae6:	2300      	movs	r3, #0
 23f8ae8:	9307      	str	r3, [sp, #28]
 23f8aea:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23f8aee:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8af0:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23f8af2:	a907      	add	r1, sp, #28
 23f8af4:	a806      	add	r0, sp, #24
 23f8af6:	f7ff fae6 	bl	23f80c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f8afa:	4682      	mov	sl, r0
 23f8afc:	2800      	cmp	r0, #0
 23f8afe:	d0f0      	beq.n	23f8ae2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23f8b00:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8b04:	4601      	mov	r1, r0
            bool found = false;
 23f8b06:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8b0a:	4628      	mov	r0, r5
 23f8b0c:	9a07      	ldr	r2, [sp, #28]
 23f8b0e:	f10d 0317 	add.w	r3, sp, #23
 23f8b12:	f7ff fb6d 	bl	23f81f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f8b16:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f8b1a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f8b1c:	2f00      	cmp	r7, #0
 23f8b1e:	d14a      	bne.n	23f8bb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23f8b20:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23f8b24:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23f8b28:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23f8b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f8b30:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23f8b34:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23f8b38:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8b3a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23f8b3e:	4293      	cmp	r3, r2
 23f8b40:	db17      	blt.n	23f8b72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23f8b42:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23f8b46:	f1ba 0f00 	cmp.w	sl, #0
 23f8b4a:	dd30      	ble.n	23f8bae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23f8b4c:	fb09 f00a 	mul.w	r0, r9, sl
 23f8b50:	f7fe fd2c 	bl	23f75ac <malloc>
            if (!d) {
 23f8b54:	4683      	mov	fp, r0
 23f8b56:	b360      	cbz	r0, 23f8bb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23f8b58:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f8b5c:	fb09 1202 	mla	r2, r9, r2, r1
 23f8b60:	f7ff feea 	bl	23f8938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23f8b64:	6828      	ldr	r0, [r5, #0]
 23f8b66:	f7fe fd2f 	bl	23f75c8 <free>
        data_ = d;
 23f8b6a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23f8b6e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23f8b72:	682b      	ldr	r3, [r5, #0]
 23f8b74:	9a01      	ldr	r2, [sp, #4]
 23f8b76:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23f8b7a:	686a      	ldr	r2, [r5, #4]
 23f8b7c:	4651      	mov	r1, sl
 23f8b7e:	fb09 3202 	mla	r2, r9, r2, r3
 23f8b82:	f10a 0014 	add.w	r0, sl, #20
 23f8b86:	f7ff fed7 	bl	23f8938 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23f8b8a:	f1ba 0f00 	cmp.w	sl, #0
 23f8b8e:	d003      	beq.n	23f8b98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23f8b90:	4650      	mov	r0, sl
 23f8b92:	a90f      	add	r1, sp, #60	; 0x3c
 23f8b94:	f7ff fb18 	bl	23f81c8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23f8b98:	686b      	ldr	r3, [r5, #4]
 23f8b9a:	3301      	adds	r3, #1
 23f8b9c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23f8b9e:	a811      	add	r0, sp, #68	; 0x44
 23f8ba0:	f7ff fccc 	bl	23f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f8ba4:	b13f      	cbz	r7, 23f8bb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23f8ba6:	a80b      	add	r0, sp, #44	; 0x2c
 23f8ba8:	f7ff fcc8 	bl	23f853c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f8bac:	e771      	b.n	23f8a92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23f8bae:	46bb      	mov	fp, r7
 23f8bb0:	e7d8      	b.n	23f8b64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f8bb2:	2701      	movs	r7, #1
 23f8bb4:	e7f3      	b.n	23f8b9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23f8bb6:	9b01      	ldr	r3, [sp, #4]
 23f8bb8:	682d      	ldr	r5, [r5, #0]
 23f8bba:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23f8bbe:	9b06      	ldr	r3, [sp, #24]
 23f8bc0:	781b      	ldrb	r3, [r3, #0]
 23f8bc2:	b92b      	cbnz	r3, 23f8bd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23f8bc4:	f8d8 3000 	ldr.w	r3, [r8]
 23f8bc8:	9a02      	ldr	r2, [sp, #8]
 23f8bca:	4413      	add	r3, r2
 23f8bcc:	7c1b      	ldrb	r3, [r3, #16]
 23f8bce:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23f8bd0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23f8bd2:	e78e      	b.n	23f8af2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8bd4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f8bd6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8bd8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f8bda:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8bdc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8bde:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23f8be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23f8be2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8be4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f8be6:	60a2      	str	r2, [r4, #8]
 23f8be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23f8bea:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8bec:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f8bee:	60e2      	str	r2, [r4, #12]
 23f8bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23f8bf2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8bf4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8bf6:	6122      	str	r2, [r4, #16]
 23f8bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23f8bfa:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23f8bfc:	9b03      	ldr	r3, [sp, #12]
 23f8bfe:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23f8c00:	6162      	str	r2, [r4, #20]
 23f8c02:	7623      	strb	r3, [r4, #24]
 23f8c04:	e7cf      	b.n	23f8ba6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023f8c08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f8c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8c0a:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f8c0c:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f8c0e:	4617      	mov	r7, r2
 23f8c10:	b087      	sub	sp, #28
 23f8c12:	460d      	mov	r5, r1
        stream_(&stream) {
 23f8c14:	4668      	mov	r0, sp
 23f8c16:	4619      	mov	r1, r3
 23f8c18:	f7fa fa9c 	bl	23f3154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f8c1c:	4b0b      	ldr	r3, [pc, #44]	; (23f8c4c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23f8c1e:	4669      	mov	r1, sp
 23f8c20:	f846 3b04 	str.w	r3, [r6], #4
 23f8c24:	a803      	add	r0, sp, #12
 23f8c26:	f7fa fa95 	bl	23f3154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f8c2a:	4639      	mov	r1, r7
 23f8c2c:	aa03      	add	r2, sp, #12
 23f8c2e:	4630      	mov	r0, r6
 23f8c30:	f7ff fef0 	bl	23f8a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8c34:	a803      	add	r0, sp, #12
 23f8c36:	f7f9 fbd3 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f8c3a:	4668      	mov	r0, sp
 23f8c3c:	f7f9 fbd0 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f8c40:	4620      	mov	r0, r4
        stream_(&stream) {
 23f8c42:	4b03      	ldr	r3, [pc, #12]	; (23f8c50 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23f8c44:	6225      	str	r5, [r4, #32]
 23f8c46:	6023      	str	r3, [r4, #0]
}
 23f8c48:	b007      	add	sp, #28
 23f8c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f8c4c:	023fcc50 	.word	0x023fcc50
 23f8c50:	023ffaa4 	.word	0x023ffaa4

023f8c54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23f8c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8c56:	460f      	mov	r7, r1
 23f8c58:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f8c5a:	4638      	mov	r0, r7
 23f8c5c:	491c      	ldr	r1, [pc, #112]	; (23f8cd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23f8c5e:	4616      	mov	r6, r2
 23f8c60:	461d      	mov	r5, r3
 23f8c62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f8c64:	f7f4 fd66 	bl	23ed734 <strcmp>
 23f8c68:	b9c0      	cbnz	r0, 23f8c9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23f8c6a:	b1a4      	cbz	r4, 23f8c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23f8c6c:	4629      	mov	r1, r5
 23f8c6e:	a801      	add	r0, sp, #4
 23f8c70:	f7ff fcbe 	bl	23f85f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f8c74:	2024      	movs	r0, #36	; 0x24
 23f8c76:	4917      	ldr	r1, [pc, #92]	; (23f8cd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f8c78:	f000 fe4a 	bl	23f9910 <_ZnwjRKSt9nothrow_t>
 23f8c7c:	4605      	mov	r5, r0
 23f8c7e:	b130      	cbz	r0, 23f8c8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23f8c80:	ab01      	add	r3, sp, #4
 23f8c82:	4632      	mov	r2, r6
 23f8c84:	4621      	mov	r1, r4
 23f8c86:	f7ff ffbf 	bl	23f8c08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8c8a:	4b13      	ldr	r3, [pc, #76]	; (23f8cd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23f8c8c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f8c8e:	a801      	add	r0, sp, #4
 23f8c90:	f7f9 fba6 	bl	23f23e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f8c94:	462c      	mov	r4, r5
}
 23f8c96:	4620      	mov	r0, r4
 23f8c98:	b005      	add	sp, #20
 23f8c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23f8c9c:	4638      	mov	r0, r7
 23f8c9e:	490f      	ldr	r1, [pc, #60]	; (23f8cdc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23f8ca0:	f7f4 fd48 	bl	23ed734 <strcmp>
 23f8ca4:	b990      	cbnz	r0, 23f8ccc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23f8ca6:	2c00      	cmp	r4, #0
 23f8ca8:	d0f5      	beq.n	23f8c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f8caa:	4629      	mov	r1, r5
 23f8cac:	a801      	add	r0, sp, #4
 23f8cae:	f7ff fc9f 	bl	23f85f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f8cb2:	2024      	movs	r0, #36	; 0x24
 23f8cb4:	4907      	ldr	r1, [pc, #28]	; (23f8cd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f8cb6:	f000 fe2b 	bl	23f9910 <_ZnwjRKSt9nothrow_t>
 23f8cba:	4605      	mov	r5, r0
 23f8cbc:	2800      	cmp	r0, #0
 23f8cbe:	d0e6      	beq.n	23f8c8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23f8cc0:	4632      	mov	r2, r6
 23f8cc2:	4621      	mov	r1, r4
 23f8cc4:	ab01      	add	r3, sp, #4
 23f8cc6:	f7ff ff9f 	bl	23f8c08 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f8cca:	e7e0      	b.n	23f8c8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23f8ccc:	2400      	movs	r4, #0
 23f8cce:	e7e2      	b.n	23f8c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23f8cd0:	023ffa2c 	.word	0x023ffa2c
 23f8cd4:	023ffb73 	.word	0x023ffb73
 23f8cd8:	023ffabc 	.word	0x023ffabc
 23f8cdc:	023ffa30 	.word	0x023ffa30

023f8ce0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23f8ce0:	4b01      	ldr	r3, [pc, #4]	; (23f8ce8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f8ce2:	4a02      	ldr	r2, [pc, #8]	; (23f8cec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f8ce4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f8ce6:	4770      	bx	lr
 23f8ce8:	1007aec8 	.word	0x1007aec8
 23f8cec:	023ffa41 	.word	0x023ffa41

023f8cf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8cf4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23f8cf6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8cfa:	4604      	mov	r4, r0
 23f8cfc:	460e      	mov	r6, r1
 23f8cfe:	4617      	mov	r7, r2
 23f8d00:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23f8d02:	f7ff f879 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f8d06:	4581      	cmp	r9, r0
 23f8d08:	d04d      	beq.n	23f8da6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23f8d0a:	792b      	ldrb	r3, [r5, #4]
 23f8d0c:	0719      	lsls	r1, r3, #28
 23f8d0e:	d504      	bpl.n	23f8d1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23f8d10:	4620      	mov	r0, r4
 23f8d12:	696a      	ldr	r2, [r5, #20]
 23f8d14:	4954      	ldr	r1, [pc, #336]	; (23f8e68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23f8d16:	f7ff fad0 	bl	23f82ba <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23f8d1a:	f1b8 0f00 	cmp.w	r8, #0
 23f8d1e:	d00d      	beq.n	23f8d3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23f8d20:	215b      	movs	r1, #91	; 0x5b
 23f8d22:	4620      	mov	r0, r4
 23f8d24:	f7ff fa44 	bl	23f81b0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23f8d28:	4641      	mov	r1, r8
 23f8d2a:	4620      	mov	r0, r4
 23f8d2c:	f7ff fa31 	bl	23f8192 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23f8d30:	6823      	ldr	r3, [r4, #0]
 23f8d32:	2202      	movs	r2, #2
 23f8d34:	4620      	mov	r0, r4
 23f8d36:	68db      	ldr	r3, [r3, #12]
 23f8d38:	494c      	ldr	r1, [pc, #304]	; (23f8e6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23f8d3a:	4798      	blx	r3
    if (attr.has_file) {
 23f8d3c:	792b      	ldrb	r3, [r5, #4]
 23f8d3e:	07da      	lsls	r2, r3, #31
 23f8d40:	d524      	bpl.n	23f8d8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23f8d42:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23f8d46:	212f      	movs	r1, #47	; 0x2f
 23f8d48:	4640      	mov	r0, r8
 23f8d4a:	f002 fc9c 	bl	23fb686 <strrchr>
    if (s1) {
 23f8d4e:	b108      	cbz	r0, 23f8d54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23f8d50:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23f8d54:	4641      	mov	r1, r8
 23f8d56:	4620      	mov	r0, r4
 23f8d58:	f7ff fa1b 	bl	23f8192 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23f8d5c:	792b      	ldrb	r3, [r5, #4]
 23f8d5e:	079b      	lsls	r3, r3, #30
 23f8d60:	d508      	bpl.n	23f8d74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23f8d62:	213a      	movs	r1, #58	; 0x3a
 23f8d64:	4620      	mov	r0, r4
 23f8d66:	f7ff fa23 	bl	23f81b0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23f8d6a:	4620      	mov	r0, r4
 23f8d6c:	68ea      	ldr	r2, [r5, #12]
 23f8d6e:	4940      	ldr	r1, [pc, #256]	; (23f8e70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23f8d70:	f7ff faa3 	bl	23f82ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23f8d74:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23f8d76:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23f8d78:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23f8d7c:	4620      	mov	r0, r4
            write(", ", 2);
 23f8d7e:	f04f 0202 	mov.w	r2, #2
 23f8d82:	68db      	ldr	r3, [r3, #12]
 23f8d84:	bf14      	ite	ne
 23f8d86:	493b      	ldrne	r1, [pc, #236]	; (23f8e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23f8d88:	493b      	ldreq	r1, [pc, #236]	; (23f8e78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f8d8a:	4798      	blx	r3
    if (attr.has_function) {
 23f8d8c:	792b      	ldrb	r3, [r5, #4]
 23f8d8e:	0758      	lsls	r0, r3, #29
 23f8d90:	d51d      	bpl.n	23f8dce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f8d92:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f8d94:	460b      	mov	r3, r1
 23f8d96:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23f8d98:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f8d9c:	b160      	cbz	r0, 23f8db8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23f8d9e:	2820      	cmp	r0, #32
 23f8da0:	d108      	bne.n	23f8db4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23f8da2:	4619      	mov	r1, r3
 23f8da4:	e7f7      	b.n	23f8d96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23f8da6:	4835      	ldr	r0, [pc, #212]	; (23f8e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23f8da8:	f7fe fcb5 	bl	23f7716 <_ZN5spark12NetworkClass9listeningEv>
 23f8dac:	2800      	cmp	r0, #0
 23f8dae:	d0ac      	beq.n	23f8d0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23f8db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23f8db4:	2828      	cmp	r0, #40	; 0x28
 23f8db6:	d1ee      	bne.n	23f8d96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23f8db8:	6823      	ldr	r3, [r4, #0]
 23f8dba:	1a52      	subs	r2, r2, r1
 23f8dbc:	4620      	mov	r0, r4
 23f8dbe:	68db      	ldr	r3, [r3, #12]
 23f8dc0:	4798      	blx	r3
        write("(): ", 4);
 23f8dc2:	6823      	ldr	r3, [r4, #0]
 23f8dc4:	2204      	movs	r2, #4
 23f8dc6:	4620      	mov	r0, r4
 23f8dc8:	68db      	ldr	r3, [r3, #12]
 23f8dca:	492d      	ldr	r1, [pc, #180]	; (23f8e80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23f8dcc:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23f8dce:	2100      	movs	r1, #0
 23f8dd0:	4638      	mov	r0, r7
 23f8dd2:	f7fe fac5 	bl	23f7360 <log_level_name>
 23f8dd6:	4601      	mov	r1, r0
    write(s);
 23f8dd8:	4620      	mov	r0, r4
 23f8dda:	f7ff f9da 	bl	23f8192 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23f8dde:	6823      	ldr	r3, [r4, #0]
 23f8de0:	2202      	movs	r2, #2
 23f8de2:	4620      	mov	r0, r4
 23f8de4:	68db      	ldr	r3, [r3, #12]
 23f8de6:	4924      	ldr	r1, [pc, #144]	; (23f8e78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f8de8:	4798      	blx	r3
    if (msg) {
 23f8dea:	b11e      	cbz	r6, 23f8df4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23f8dec:	4631      	mov	r1, r6
 23f8dee:	4620      	mov	r0, r4
 23f8df0:	f7ff f9cf 	bl	23f8192 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23f8df4:	792b      	ldrb	r3, [r5, #4]
 23f8df6:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f8dfa:	d02c      	beq.n	23f8e56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23f8dfc:	6823      	ldr	r3, [r4, #0]
 23f8dfe:	4921      	ldr	r1, [pc, #132]	; (23f8e84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23f8e00:	68db      	ldr	r3, [r3, #12]
 23f8e02:	2202      	movs	r2, #2
 23f8e04:	4620      	mov	r0, r4
 23f8e06:	4798      	blx	r3
        if (attr.has_code) {
 23f8e08:	792b      	ldrb	r3, [r5, #4]
 23f8e0a:	06d9      	lsls	r1, r3, #27
 23f8e0c:	d50a      	bpl.n	23f8e24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23f8e0e:	6823      	ldr	r3, [r4, #0]
 23f8e10:	2207      	movs	r2, #7
 23f8e12:	4620      	mov	r0, r4
 23f8e14:	491c      	ldr	r1, [pc, #112]	; (23f8e88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23f8e16:	68db      	ldr	r3, [r3, #12]
 23f8e18:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23f8e1a:	4620      	mov	r0, r4
 23f8e1c:	69aa      	ldr	r2, [r5, #24]
 23f8e1e:	491b      	ldr	r1, [pc, #108]	; (23f8e8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23f8e20:	f7ff fa4b 	bl	23f82ba <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23f8e24:	792b      	ldrb	r3, [r5, #4]
 23f8e26:	069a      	lsls	r2, r3, #26
 23f8e28:	d511      	bpl.n	23f8e4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23f8e2a:	06db      	lsls	r3, r3, #27
 23f8e2c:	d505      	bpl.n	23f8e3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23f8e2e:	6823      	ldr	r3, [r4, #0]
 23f8e30:	2202      	movs	r2, #2
 23f8e32:	4620      	mov	r0, r4
 23f8e34:	68db      	ldr	r3, [r3, #12]
 23f8e36:	490f      	ldr	r1, [pc, #60]	; (23f8e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23f8e38:	4798      	blx	r3
            write("details = ", 10);
 23f8e3a:	6823      	ldr	r3, [r4, #0]
 23f8e3c:	4620      	mov	r0, r4
 23f8e3e:	4914      	ldr	r1, [pc, #80]	; (23f8e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23f8e40:	220a      	movs	r2, #10
 23f8e42:	68db      	ldr	r3, [r3, #12]
 23f8e44:	4798      	blx	r3
            write(attr.details);
 23f8e46:	4620      	mov	r0, r4
 23f8e48:	69e9      	ldr	r1, [r5, #28]
 23f8e4a:	f7ff f9a2 	bl	23f8192 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23f8e4e:	215d      	movs	r1, #93	; 0x5d
 23f8e50:	4620      	mov	r0, r4
 23f8e52:	f7ff f9ad 	bl	23f81b0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23f8e56:	6823      	ldr	r3, [r4, #0]
 23f8e58:	4620      	mov	r0, r4
}
 23f8e5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23f8e5e:	2202      	movs	r2, #2
 23f8e60:	68db      	ldr	r3, [r3, #12]
 23f8e62:	490c      	ldr	r1, [pc, #48]	; (23f8e94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23f8e64:	4718      	bx	r3
 23f8e66:	bf00      	nop
 23f8e68:	023ffa45 	.word	0x023ffa45
 23f8e6c:	023ffa4c 	.word	0x023ffa4c
 23f8e70:	023fc78e 	.word	0x023fc78e
 23f8e74:	023ffa4f 	.word	0x023ffa4f
 23f8e78:	023ffa54 	.word	0x023ffa54
 23f8e7c:	1007ae78 	.word	0x1007ae78
 23f8e80:	023ffa52 	.word	0x023ffa52
 23f8e84:	023ffa57 	.word	0x023ffa57
 23f8e88:	023ffa5a 	.word	0x023ffa5a
 23f8e8c:	023ffa62 	.word	0x023ffa62
 23f8e90:	023ffa65 	.word	0x023ffa65
 23f8e94:	023fc8b7 	.word	0x023fc8b7

023f8e98 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f8e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8e9c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23f8e9e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f8ea0:	460d      	mov	r5, r1
 23f8ea2:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23f8ea4:	f7fe ffa8 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f8ea8:	4287      	cmp	r7, r0
 23f8eaa:	d007      	beq.n	23f8ebc <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23f8eac:	6a20      	ldr	r0, [r4, #32]
 23f8eae:	4632      	mov	r2, r6
 23f8eb0:	6803      	ldr	r3, [r0, #0]
 23f8eb2:	4629      	mov	r1, r5
}
 23f8eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23f8eb8:	68db      	ldr	r3, [r3, #12]
 23f8eba:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23f8ebc:	4803      	ldr	r0, [pc, #12]	; (23f8ecc <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23f8ebe:	f7fe fc2a 	bl	23f7716 <_ZN5spark12NetworkClass9listeningEv>
 23f8ec2:	2800      	cmp	r0, #0
 23f8ec4:	d0f2      	beq.n	23f8eac <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23f8ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8eca:	bf00      	nop
 23f8ecc:	1007ae78 	.word	0x1007ae78

023f8ed0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f8ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f8ed4:	b085      	sub	sp, #20
    return stream_;
 23f8ed6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23f8eda:	4605      	mov	r5, r0
 23f8edc:	460f      	mov	r7, r1
 23f8ede:	4690      	mov	r8, r2
 23f8ee0:	461e      	mov	r6, r3
 23f8ee2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23f8ee4:	f7fe ff88 	bl	23f7df8 <_Z16_fetch_usbserialv>
 23f8ee8:	4581      	cmp	r9, r0
 23f8eea:	d105      	bne.n	23f8ef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23f8eec:	4849      	ldr	r0, [pc, #292]	; (23f9014 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23f8eee:	f7fe fc12 	bl	23f7716 <_ZN5spark12NetworkClass9listeningEv>
 23f8ef2:	2800      	cmp	r0, #0
 23f8ef4:	f040 808a 	bne.w	23f900c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23f8ef8:	f04f 0900 	mov.w	r9, #0
 23f8efc:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23f8efe:	4a46      	ldr	r2, [pc, #280]	; (23f9018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23f8f00:	a801      	add	r0, sp, #4
 23f8f02:	9201      	str	r2, [sp, #4]
 23f8f04:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23f8f06:	f88d 9008 	strb.w	r9, [sp, #8]
 23f8f0a:	f7fe fe5a 	bl	23f7bc2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23f8f0e:	4649      	mov	r1, r9
 23f8f10:	4640      	mov	r0, r8
 23f8f12:	f7fe fa25 	bl	23f7360 <log_level_name>
 23f8f16:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23f8f18:	4940      	ldr	r1, [pc, #256]	; (23f901c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23f8f1a:	2201      	movs	r2, #1
 23f8f1c:	a801      	add	r0, sp, #4
 23f8f1e:	f7fe fedf 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8f22:	4641      	mov	r1, r8
 23f8f24:	f7ff f927 	bl	23f8176 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23f8f28:	b13f      	cbz	r7, 23f8f3a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23f8f2a:	493d      	ldr	r1, [pc, #244]	; (23f9020 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23f8f2c:	2201      	movs	r2, #1
 23f8f2e:	a801      	add	r0, sp, #4
 23f8f30:	f7fe fed6 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8f34:	4639      	mov	r1, r7
 23f8f36:	f7ff f91e 	bl	23f8176 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23f8f3a:	b13e      	cbz	r6, 23f8f4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23f8f3c:	4939      	ldr	r1, [pc, #228]	; (23f9024 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23f8f3e:	2201      	movs	r2, #1
 23f8f40:	a801      	add	r0, sp, #4
 23f8f42:	f7fe fecd 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8f46:	4631      	mov	r1, r6
 23f8f48:	f7ff f915 	bl	23f8176 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23f8f4c:	7923      	ldrb	r3, [r4, #4]
 23f8f4e:	07df      	lsls	r7, r3, #31
 23f8f50:	d50e      	bpl.n	23f8f70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23f8f52:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23f8f54:	212f      	movs	r1, #47	; 0x2f
 23f8f56:	4630      	mov	r0, r6
 23f8f58:	f002 fb95 	bl	23fb686 <strrchr>
    if (s1) {
 23f8f5c:	b100      	cbz	r0, 23f8f60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23f8f5e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23f8f60:	4931      	ldr	r1, [pc, #196]	; (23f9028 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23f8f62:	2201      	movs	r2, #1
 23f8f64:	a801      	add	r0, sp, #4
 23f8f66:	f7fe febb 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8f6a:	4631      	mov	r1, r6
 23f8f6c:	f7ff f903 	bl	23f8176 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23f8f70:	7923      	ldrb	r3, [r4, #4]
 23f8f72:	079e      	lsls	r6, r3, #30
 23f8f74:	d507      	bpl.n	23f8f86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23f8f76:	492d      	ldr	r1, [pc, #180]	; (23f902c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23f8f78:	2202      	movs	r2, #2
 23f8f7a:	a801      	add	r0, sp, #4
 23f8f7c:	f7fe feb0 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8f80:	68e1      	ldr	r1, [r4, #12]
 23f8f82:	f7fe fe2b 	bl	23f7bdc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23f8f86:	7923      	ldrb	r3, [r4, #4]
 23f8f88:	0758      	lsls	r0, r3, #29
 23f8f8a:	d514      	bpl.n	23f8fb6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f8f8c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f8f8e:	4633      	mov	r3, r6
 23f8f90:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23f8f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f8f96:	b12a      	cbz	r2, 23f8fa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23f8f98:	2a20      	cmp	r2, #32
 23f8f9a:	d101      	bne.n	23f8fa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23f8f9c:	461e      	mov	r6, r3
 23f8f9e:	e7f7      	b.n	23f8f90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23f8fa0:	2a28      	cmp	r2, #40	; 0x28
 23f8fa2:	d1f5      	bne.n	23f8f90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23f8fa4:	2202      	movs	r2, #2
 23f8fa6:	4922      	ldr	r1, [pc, #136]	; (23f9030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23f8fa8:	a801      	add	r0, sp, #4
 23f8faa:	f7fe fe99 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8fae:	4631      	mov	r1, r6
 23f8fb0:	1bba      	subs	r2, r7, r6
 23f8fb2:	f7fe fea5 	bl	23f7d00 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23f8fb6:	7923      	ldrb	r3, [r4, #4]
 23f8fb8:	0719      	lsls	r1, r3, #28
 23f8fba:	d507      	bpl.n	23f8fcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23f8fbc:	491d      	ldr	r1, [pc, #116]	; (23f9034 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23f8fbe:	2201      	movs	r2, #1
 23f8fc0:	a801      	add	r0, sp, #4
 23f8fc2:	f7fe fe8d 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8fc6:	6961      	ldr	r1, [r4, #20]
 23f8fc8:	f7fe fe1a 	bl	23f7c00 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23f8fcc:	7923      	ldrb	r3, [r4, #4]
 23f8fce:	06da      	lsls	r2, r3, #27
 23f8fd0:	d508      	bpl.n	23f8fe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23f8fd2:	2204      	movs	r2, #4
 23f8fd4:	4918      	ldr	r1, [pc, #96]	; (23f9038 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23f8fd6:	eb0d 0002 	add.w	r0, sp, r2
 23f8fda:	f7fe fe81 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8fde:	69a1      	ldr	r1, [r4, #24]
 23f8fe0:	f7fe fdfc 	bl	23f7bdc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23f8fe4:	7923      	ldrb	r3, [r4, #4]
 23f8fe6:	069b      	lsls	r3, r3, #26
 23f8fe8:	d507      	bpl.n	23f8ffa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23f8fea:	4914      	ldr	r1, [pc, #80]	; (23f903c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23f8fec:	2206      	movs	r2, #6
 23f8fee:	a801      	add	r0, sp, #4
 23f8ff0:	f7fe fe76 	bl	23f7ce0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f8ff4:	69e1      	ldr	r1, [r4, #28]
 23f8ff6:	f7ff f8be 	bl	23f8176 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23f8ffa:	a801      	add	r0, sp, #4
 23f8ffc:	f7fe fdcb 	bl	23f7b96 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23f9000:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23f9002:	2202      	movs	r2, #2
 23f9004:	6803      	ldr	r3, [r0, #0]
 23f9006:	490e      	ldr	r1, [pc, #56]	; (23f9040 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23f9008:	68db      	ldr	r3, [r3, #12]
 23f900a:	4798      	blx	r3
}
 23f900c:	b005      	add	sp, #20
 23f900e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f9012:	bf00      	nop
 23f9014:	1007ae78 	.word	0x1007ae78
 23f9018:	023ffa8c 	.word	0x023ffa8c
 23f901c:	023ffa22 	.word	0x023ffa22
 23f9020:	023ff16c 	.word	0x023ff16c
 23f9024:	023ffe6a 	.word	0x023ffe6a
 23f9028:	023ffb02 	.word	0x023ffb02
 23f902c:	023ffa70 	.word	0x023ffa70
 23f9030:	023ffa73 	.word	0x023ffa73
 23f9034:	023ff609 	.word	0x023ff609
 23f9038:	023ffa76 	.word	0x023ffa76
 23f903c:	023ffa7b 	.word	0x023ffa7b
 23f9040:	023fc8b7 	.word	0x023fc8b7

023f9044 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f9044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9046:	4606      	mov	r6, r0
 23f9048:	460d      	mov	r5, r1
  size_t n = 0;
 23f904a:	2400      	movs	r4, #0
 23f904c:	188f      	adds	r7, r1, r2
  while (size--) {
 23f904e:	42bd      	cmp	r5, r7
 23f9050:	d00c      	beq.n	23f906c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f9052:	6833      	ldr	r3, [r6, #0]
 23f9054:	4630      	mov	r0, r6
 23f9056:	689b      	ldr	r3, [r3, #8]
 23f9058:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f905c:	4798      	blx	r3
     if (chunk>=0)
 23f905e:	1e03      	subs	r3, r0, #0
 23f9060:	db01      	blt.n	23f9066 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f9062:	441c      	add	r4, r3
  while (size--) {
 23f9064:	e7f3      	b.n	23f904e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f9066:	2c00      	cmp	r4, #0
 23f9068:	bf08      	it	eq
 23f906a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f906c:	4620      	mov	r0, r4
 23f906e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f9070 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f9070:	b513      	push	{r0, r1, r4, lr}
 23f9072:	4604      	mov	r4, r0
    }
 23f9074:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f9076:	b159      	cbz	r1, 23f9090 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f9078:	9101      	str	r1, [sp, #4]
 23f907a:	f7f4 fb65 	bl	23ed748 <strlen>
 23f907e:	4602      	mov	r2, r0
 23f9080:	4620      	mov	r0, r4
 23f9082:	6823      	ldr	r3, [r4, #0]
 23f9084:	9901      	ldr	r1, [sp, #4]
 23f9086:	68db      	ldr	r3, [r3, #12]
    }
 23f9088:	b002      	add	sp, #8
 23f908a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f908e:	4718      	bx	r3
    }
 23f9090:	b002      	add	sp, #8
 23f9092:	bd10      	pop	{r4, pc}

023f9094 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23f9094:	6803      	ldr	r3, [r0, #0]
 23f9096:	689b      	ldr	r3, [r3, #8]
 23f9098:	4718      	bx	r3

023f909a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f909a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f909c:	2a01      	cmp	r2, #1
 23f909e:	bf98      	it	ls
 23f90a0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f90a2:	b530      	push	{r4, r5, lr}
 23f90a4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f90a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f90aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f90ac:	460d      	mov	r5, r1
 23f90ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f90b2:	fb01 5312 	mls	r3, r1, r2, r5
 23f90b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f90ba:	2b09      	cmp	r3, #9
 23f90bc:	bf94      	ite	ls
 23f90be:	3330      	addls	r3, #48	; 0x30
 23f90c0:	3337      	addhi	r3, #55	; 0x37
 23f90c2:	b2db      	uxtb	r3, r3
  } while(n);
 23f90c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f90c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f90ca:	d9ef      	bls.n	23f90ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f90cc:	4621      	mov	r1, r4
 23f90ce:	f7ff ffcf 	bl	23f9070 <_ZN5Print5writeEPKc>
}
 23f90d2:	b00b      	add	sp, #44	; 0x2c
 23f90d4:	bd30      	pop	{r4, r5, pc}
	...

023f90d8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23f90d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f90dc:	ec55 4b10 	vmov	r4, r5, d0
 23f90e0:	4606      	mov	r6, r0
 23f90e2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23f90e4:	ee10 2a10 	vmov	r2, s0
 23f90e8:	462b      	mov	r3, r5
 23f90ea:	ee10 0a10 	vmov	r0, s0
 23f90ee:	4629      	mov	r1, r5
 23f90f0:	f7f4 f874 	bl	23ed1dc <__aeabi_dcmpun>
 23f90f4:	b140      	cbz	r0, 23f9108 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23f90f6:	4953      	ldr	r1, [pc, #332]	; (23f9244 <_ZN5Print10printFloatEdh+0x16c>)
 23f90f8:	4630      	mov	r0, r6
 23f90fa:	f7ff ffb9 	bl	23f9070 <_ZN5Print5writeEPKc>
 23f90fe:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23f9100:	4650      	mov	r0, sl
 23f9102:	b003      	add	sp, #12
 23f9104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  { return __builtin_isinf(__x); }
 23f9108:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23f910c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f9110:	4620      	mov	r0, r4
 23f9112:	4649      	mov	r1, r9
 23f9114:	4b4c      	ldr	r3, [pc, #304]	; (23f9248 <_ZN5Print10printFloatEdh+0x170>)
 23f9116:	f7f4 f861 	bl	23ed1dc <__aeabi_dcmpun>
 23f911a:	b948      	cbnz	r0, 23f9130 <_ZN5Print10printFloatEdh+0x58>
 23f911c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f9120:	4620      	mov	r0, r4
 23f9122:	4649      	mov	r1, r9
 23f9124:	4b48      	ldr	r3, [pc, #288]	; (23f9248 <_ZN5Print10printFloatEdh+0x170>)
 23f9126:	f7f4 f83b 	bl	23ed1a0 <__aeabi_dcmple>
 23f912a:	b908      	cbnz	r0, 23f9130 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23f912c:	4947      	ldr	r1, [pc, #284]	; (23f924c <_ZN5Print10printFloatEdh+0x174>)
 23f912e:	e7e3      	b.n	23f90f8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23f9130:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f9134:	4620      	mov	r0, r4
 23f9136:	4629      	mov	r1, r5
 23f9138:	4b45      	ldr	r3, [pc, #276]	; (23f9250 <_ZN5Print10printFloatEdh+0x178>)
 23f913a:	f7f4 f845 	bl	23ed1c8 <__aeabi_dcmpgt>
 23f913e:	b108      	cbz	r0, 23f9144 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23f9140:	4944      	ldr	r1, [pc, #272]	; (23f9254 <_ZN5Print10printFloatEdh+0x17c>)
 23f9142:	e7d9      	b.n	23f90f8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23f9144:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f9148:	4620      	mov	r0, r4
 23f914a:	4629      	mov	r1, r5
 23f914c:	4b42      	ldr	r3, [pc, #264]	; (23f9258 <_ZN5Print10printFloatEdh+0x180>)
 23f914e:	f7f4 f81d 	bl	23ed18c <__aeabi_dcmplt>
 23f9152:	2800      	cmp	r0, #0
 23f9154:	d1f4      	bne.n	23f9140 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23f9156:	2200      	movs	r2, #0
 23f9158:	2300      	movs	r3, #0
 23f915a:	4620      	mov	r0, r4
 23f915c:	4629      	mov	r1, r5
 23f915e:	f7f4 f815 	bl	23ed18c <__aeabi_dcmplt>
 23f9162:	b1d0      	cbz	r0, 23f919a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23f9164:	212d      	movs	r1, #45	; 0x2d
 23f9166:	4630      	mov	r0, r6
 23f9168:	f7ff ff94 	bl	23f9094 <_ZN5Print5printEc>
     number = -number;
 23f916c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23f9170:	4682      	mov	sl, r0
     number = -number;
 23f9172:	461d      	mov	r5, r3
  size_t n = 0;
 23f9174:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23f9178:	2000      	movs	r0, #0
    rounding /= 10.0;
 23f917a:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23f917e:	4937      	ldr	r1, [pc, #220]	; (23f925c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23f9180:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23f9264 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23f9184:	fa5f f38b 	uxtb.w	r3, fp
 23f9188:	429f      	cmp	r7, r3
 23f918a:	d908      	bls.n	23f919e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23f918c:	4642      	mov	r2, r8
 23f918e:	464b      	mov	r3, r9
 23f9190:	f7f3 feb4 	bl	23ecefc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23f9194:	f10b 0b01 	add.w	fp, fp, #1
 23f9198:	e7f4      	b.n	23f9184 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23f919a:	4682      	mov	sl, r0
 23f919c:	e7ea      	b.n	23f9174 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23f919e:	4622      	mov	r2, r4
 23f91a0:	462b      	mov	r3, r5
 23f91a2:	f7f3 fbcb 	bl	23ec93c <__adddf3>
 23f91a6:	460d      	mov	r5, r1
 23f91a8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23f91aa:	f7f4 f855 	bl	23ed258 <__aeabi_d2uiz>
 23f91ae:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23f91b0:	f7f3 fd00 	bl	23ecbb4 <__aeabi_ui2d>
 23f91b4:	4602      	mov	r2, r0
 23f91b6:	460b      	mov	r3, r1
 23f91b8:	4620      	mov	r0, r4
 23f91ba:	4629      	mov	r1, r5
 23f91bc:	f7f3 fbbc 	bl	23ec938 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f91c0:	220a      	movs	r2, #10
 23f91c2:	4604      	mov	r4, r0
 23f91c4:	460d      	mov	r5, r1
 23f91c6:	4630      	mov	r0, r6
 23f91c8:	4641      	mov	r1, r8
 23f91ca:	f7ff ff66 	bl	23f909a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23f91ce:	4482      	add	sl, r0
  if (digits > 0) {
 23f91d0:	2f00      	cmp	r7, #0
 23f91d2:	d095      	beq.n	23f9100 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23f91d4:	4630      	mov	r0, r6
 23f91d6:	4922      	ldr	r1, [pc, #136]	; (23f9260 <_ZN5Print10printFloatEdh+0x188>)
 23f91d8:	f7ff ff4a 	bl	23f9070 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23f91dc:	f04f 0800 	mov.w	r8, #0
 23f91e0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23f9264 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23f91e4:	4482      	add	sl, r0
  while (digits-- > 0)
 23f91e6:	2f00      	cmp	r7, #0
 23f91e8:	d08a      	beq.n	23f9100 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23f91ea:	4642      	mov	r2, r8
 23f91ec:	464b      	mov	r3, r9
 23f91ee:	4620      	mov	r0, r4
 23f91f0:	4629      	mov	r1, r5
 23f91f2:	f7f3 fd59 	bl	23ecca8 <__aeabi_dmul>
 23f91f6:	4604      	mov	r4, r0
 23f91f8:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23f91fa:	f7f4 f805 	bl	23ed208 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23f91fe:	f1b0 0b00 	subs.w	fp, r0, #0
 23f9202:	da1c      	bge.n	23f923e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23f9204:	212d      	movs	r1, #45	; 0x2d
 23f9206:	4630      	mov	r0, r6
 23f9208:	f7ff ff44 	bl	23f9094 <_ZN5Print5printEc>
 23f920c:	4603      	mov	r3, r0
            val = -n;
 23f920e:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23f9212:	220a      	movs	r2, #10
 23f9214:	4630      	mov	r0, r6
 23f9216:	9301      	str	r3, [sp, #4]
 23f9218:	f7ff ff3f 	bl	23f909a <_ZN5Print11printNumberEmh>
 23f921c:	9b01      	ldr	r3, [sp, #4]
 23f921e:	3f01      	subs	r7, #1
 23f9220:	4418      	add	r0, r3
    n += print(toPrint);
 23f9222:	4482      	add	sl, r0
    remainder -= toPrint;
 23f9224:	4658      	mov	r0, fp
 23f9226:	f7f3 fcd5 	bl	23ecbd4 <__aeabi_i2d>
 23f922a:	4602      	mov	r2, r0
 23f922c:	460b      	mov	r3, r1
 23f922e:	4620      	mov	r0, r4
 23f9230:	4629      	mov	r1, r5
 23f9232:	f7f3 fb81 	bl	23ec938 <__aeabi_dsub>
 23f9236:	b2ff      	uxtb	r7, r7
 23f9238:	4604      	mov	r4, r0
 23f923a:	460d      	mov	r5, r1
  while (digits-- > 0)
 23f923c:	e7d3      	b.n	23f91e6 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23f923e:	4659      	mov	r1, fp
        size_t t = 0;
 23f9240:	2300      	movs	r3, #0
 23f9242:	e7e6      	b.n	23f9212 <_ZN5Print10printFloatEdh+0x13a>
 23f9244:	023ffafc 	.word	0x023ffafc
 23f9248:	7fefffff 	.word	0x7fefffff
 23f924c:	023ffb00 	.word	0x023ffb00
 23f9250:	41efffff 	.word	0x41efffff
 23f9254:	023ffb04 	.word	0x023ffb04
 23f9258:	c1efffff 	.word	0xc1efffff
 23f925c:	3fe00000 	.word	0x3fe00000
 23f9260:	023ff0d0 	.word	0x023ff0d0
 23f9264:	40240000 	.word	0x40240000

023f9268 <_ZN5Print5printEfi>:
{
 23f9268:	b538      	push	{r3, r4, r5, lr}
 23f926a:	4604      	mov	r4, r0
 23f926c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23f9270:	b2cd      	uxtb	r5, r1
 23f9272:	f7f3 fcc1 	bl	23ecbf8 <__aeabi_f2d>
 23f9276:	ec41 0b10 	vmov	d0, r0, r1
 23f927a:	4629      	mov	r1, r5
 23f927c:	4620      	mov	r0, r4
}
 23f927e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23f9282:	f7ff bf29 	b.w	23f90d8 <_ZN5Print10printFloatEdh>
	...

023f9288 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23f9288:	2300      	movs	r3, #0
 23f928a:	4802      	ldr	r0, [pc, #8]	; (23f9294 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f928c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23f928e:	f7fd bfbf 	b.w	23f7210 <os_mutex_recursive_create>
 23f9292:	bf00      	nop
 23f9294:	1007aef4 	.word	0x1007aef4

023f9298 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23f9298:	b510      	push	{r4, lr}
 23f929a:	4604      	mov	r4, r0
{
	free(buffer);
 23f929c:	6800      	ldr	r0, [r0, #0]
 23f929e:	f7fe f993 	bl	23f75c8 <free>
}
 23f92a2:	4620      	mov	r0, r4
 23f92a4:	bd10      	pop	{r4, pc}

023f92a6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23f92a6:	b510      	push	{r4, lr}
 23f92a8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23f92aa:	6800      	ldr	r0, [r0, #0]
 23f92ac:	b108      	cbz	r0, 23f92b2 <_ZN6String10invalidateEv+0xc>
 23f92ae:	f7fe f98b 	bl	23f75c8 <free>
	buffer = NULL;
 23f92b2:	2300      	movs	r3, #0
	capacity = len = 0;
 23f92b4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23f92b8:	6023      	str	r3, [r4, #0]
}
 23f92ba:	bd10      	pop	{r4, pc}

023f92bc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f92bc:	b538      	push	{r3, r4, r5, lr}
 23f92be:	4604      	mov	r4, r0
 23f92c0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f92c2:	6800      	ldr	r0, [r0, #0]
 23f92c4:	3101      	adds	r1, #1
 23f92c6:	f7fe f98d 	bl	23f75e4 <realloc>
	if (newbuffer) {
 23f92ca:	b110      	cbz	r0, 23f92d2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23f92cc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23f92d0:	2001      	movs	r0, #1
	}
	return 0;
}
 23f92d2:	bd38      	pop	{r3, r4, r5, pc}

023f92d4 <_ZN6String7reserveEj>:
{
 23f92d4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23f92d6:	6803      	ldr	r3, [r0, #0]
{
 23f92d8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23f92da:	b123      	cbz	r3, 23f92e6 <_ZN6String7reserveEj+0x12>
 23f92dc:	6843      	ldr	r3, [r0, #4]
 23f92de:	428b      	cmp	r3, r1
 23f92e0:	d301      	bcc.n	23f92e6 <_ZN6String7reserveEj+0x12>
 23f92e2:	2001      	movs	r0, #1
}
 23f92e4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23f92e6:	4620      	mov	r0, r4
 23f92e8:	f7ff ffe8 	bl	23f92bc <_ZN6String12changeBufferEj>
 23f92ec:	2800      	cmp	r0, #0
 23f92ee:	d0f9      	beq.n	23f92e4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23f92f0:	68a3      	ldr	r3, [r4, #8]
 23f92f2:	2b00      	cmp	r3, #0
 23f92f4:	d1f5      	bne.n	23f92e2 <_ZN6String7reserveEj+0xe>
 23f92f6:	6822      	ldr	r2, [r4, #0]
 23f92f8:	7013      	strb	r3, [r2, #0]
 23f92fa:	e7f2      	b.n	23f92e2 <_ZN6String7reserveEj+0xe>

023f92fc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f92fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f92fe:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23f9300:	4611      	mov	r1, r2
 23f9302:	9201      	str	r2, [sp, #4]
{
 23f9304:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23f9306:	f7ff ffe5 	bl	23f92d4 <_ZN6String7reserveEj>
 23f930a:	9a01      	ldr	r2, [sp, #4]
 23f930c:	b928      	cbnz	r0, 23f931a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23f930e:	4620      	mov	r0, r4
 23f9310:	f7ff ffc9 	bl	23f92a6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23f9314:	4620      	mov	r0, r4
 23f9316:	b003      	add	sp, #12
 23f9318:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23f931a:	4629      	mov	r1, r5
	len = length;
 23f931c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23f931e:	6820      	ldr	r0, [r4, #0]
 23f9320:	f002 f911 	bl	23fb546 <memcpy>
	buffer[len] = 0;
 23f9324:	2100      	movs	r1, #0
 23f9326:	6822      	ldr	r2, [r4, #0]
 23f9328:	68a3      	ldr	r3, [r4, #8]
 23f932a:	54d1      	strb	r1, [r2, r3]
	return *this;
 23f932c:	e7f2      	b.n	23f9314 <_ZN6String4copyEPKcj+0x18>

023f932e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23f932e:	b538      	push	{r3, r4, r5, lr}
 23f9330:	4605      	mov	r5, r0
	if (buffer) {
 23f9332:	6800      	ldr	r0, [r0, #0]
{
 23f9334:	460c      	mov	r4, r1
	if (buffer) {
 23f9336:	b168      	cbz	r0, 23f9354 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23f9338:	686a      	ldr	r2, [r5, #4]
 23f933a:	688b      	ldr	r3, [r1, #8]
 23f933c:	429a      	cmp	r2, r3
 23f933e:	d307      	bcc.n	23f9350 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23f9340:	6809      	ldr	r1, [r1, #0]
 23f9342:	f002 f984 	bl	23fb64e <strcpy>
			len = rhs.len;
 23f9346:	68a3      	ldr	r3, [r4, #8]
 23f9348:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23f934a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23f934c:	60a3      	str	r3, [r4, #8]
}
 23f934e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23f9350:	f7fe f93a 	bl	23f75c8 <free>
	buffer = rhs.buffer;
 23f9354:	6823      	ldr	r3, [r4, #0]
 23f9356:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23f9358:	6863      	ldr	r3, [r4, #4]
 23f935a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23f935c:	68a3      	ldr	r3, [r4, #8]
 23f935e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23f9360:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23f9362:	e9c4 3300 	strd	r3, r3, [r4]
 23f9366:	e7f1      	b.n	23f934c <_ZN6String4moveERS_+0x1e>

023f9368 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23f9368:	2300      	movs	r3, #0
String::String(String &&rval)
 23f936a:	b510      	push	{r4, lr}
 23f936c:	4604      	mov	r4, r0
	capacity = 0;
 23f936e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f9372:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f9374:	7303      	strb	r3, [r0, #12]
	move(rval);
 23f9376:	f7ff ffda 	bl	23f932e <_ZN6String4moveERS_>
}
 23f937a:	4620      	mov	r0, r4
 23f937c:	bd10      	pop	{r4, pc}

023f937e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23f937e:	4288      	cmp	r0, r1
{
 23f9380:	b510      	push	{r4, lr}
 23f9382:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23f9384:	d005      	beq.n	23f9392 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23f9386:	680b      	ldr	r3, [r1, #0]
 23f9388:	b12b      	cbz	r3, 23f9396 <_ZN6StringaSERKS_+0x18>
 23f938a:	688a      	ldr	r2, [r1, #8]
 23f938c:	4619      	mov	r1, r3
 23f938e:	f7ff ffb5 	bl	23f92fc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23f9392:	4620      	mov	r0, r4
 23f9394:	bd10      	pop	{r4, pc}
	else invalidate();
 23f9396:	f7ff ff86 	bl	23f92a6 <_ZN6String10invalidateEv>
 23f939a:	e7fa      	b.n	23f9392 <_ZN6StringaSERKS_+0x14>

023f939c <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23f939c:	2300      	movs	r3, #0
String::String(const String &value)
 23f939e:	b510      	push	{r4, lr}
 23f93a0:	4604      	mov	r4, r0
	capacity = 0;
 23f93a2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f93a6:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f93a8:	7303      	strb	r3, [r0, #12]
	*this = value;
 23f93aa:	f7ff ffe8 	bl	23f937e <_ZN6StringaSERKS_>
}
 23f93ae:	4620      	mov	r0, r4
 23f93b0:	bd10      	pop	{r4, pc}
	...

023f93b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f93b4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f93b6:	2000      	movs	r0, #0
 23f93b8:	4b04      	ldr	r3, [pc, #16]	; (23f93cc <_GLOBAL__sub_I_System+0x18>)
 23f93ba:	601a      	str	r2, [r3, #0]
 23f93bc:	4b04      	ldr	r3, [pc, #16]	; (23f93d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f93be:	4a05      	ldr	r2, [pc, #20]	; (23f93d4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f93c0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f93c4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f93c6:	f7fe b8ab 	b.w	23f7520 <set_system_mode>
 23f93ca:	bf00      	nop
 23f93cc:	1007af04 	.word	0x1007af04
 23f93d0:	1007aef8 	.word	0x1007aef8
 23f93d4:	ffff0000 	.word	0xffff0000

023f93d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f93d8:	2200      	movs	r2, #0
 23f93da:	6840      	ldr	r0, [r0, #4]
 23f93dc:	4611      	mov	r1, r2
 23f93de:	f7fe b859 	b.w	23f7494 <network_listening>

023f93e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f93e2:	2200      	movs	r2, #0
 23f93e4:	6840      	ldr	r0, [r0, #4]
 23f93e6:	4611      	mov	r1, r2
 23f93e8:	f7fe b870 	b.w	23f74cc <network_get_listen_timeout>

023f93ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f93ec:	2200      	movs	r2, #0
 23f93ee:	6840      	ldr	r0, [r0, #4]
 23f93f0:	f7fe b85e 	b.w	23f74b0 <network_set_listen_timeout>

023f93f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f93f4:	2200      	movs	r2, #0
 23f93f6:	6840      	ldr	r0, [r0, #4]
 23f93f8:	f081 0101 	eor.w	r1, r1, #1
 23f93fc:	f7fe b83c 	b.w	23f7478 <network_listen>

023f9400 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9400:	2300      	movs	r3, #0
 23f9402:	6840      	ldr	r0, [r0, #4]
 23f9404:	461a      	mov	r2, r3
 23f9406:	4619      	mov	r1, r3
 23f9408:	f7fe b828 	b.w	23f745c <network_off>

023f940c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f940c:	2300      	movs	r3, #0
 23f940e:	6840      	ldr	r0, [r0, #4]
 23f9410:	461a      	mov	r2, r3
 23f9412:	4619      	mov	r1, r3
 23f9414:	f7fe b814 	b.w	23f7440 <network_on>

023f9418 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f9418:	2200      	movs	r2, #0
 23f941a:	6840      	ldr	r0, [r0, #4]
 23f941c:	4611      	mov	r1, r2
 23f941e:	f7fe b801 	b.w	23f7424 <network_ready>

023f9422 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f9422:	2200      	movs	r2, #0
 23f9424:	6840      	ldr	r0, [r0, #4]
 23f9426:	4611      	mov	r1, r2
 23f9428:	f7fd bfe0 	b.w	23f73ec <network_connecting>

023f942c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f942c:	2200      	movs	r2, #0
 23f942e:	2102      	movs	r1, #2
 23f9430:	6840      	ldr	r0, [r0, #4]
 23f9432:	f7fd bfe9 	b.w	23f7408 <network_disconnect>

023f9436 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9436:	2300      	movs	r3, #0
 23f9438:	6840      	ldr	r0, [r0, #4]
 23f943a:	461a      	mov	r2, r3
 23f943c:	f7fd bfc8 	b.w	23f73d0 <network_connect>

023f9440 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f9440:	2203      	movs	r2, #3
 23f9442:	4b02      	ldr	r3, [pc, #8]	; (23f944c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f9444:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f9446:	4a02      	ldr	r2, [pc, #8]	; (23f9450 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f9448:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f944a:	4770      	bx	lr
 23f944c:	1007af08 	.word	0x1007af08
 23f9450:	023ffb10 	.word	0x023ffb10

023f9454 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9454:	4770      	bx	lr
	...

023f9458 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23f9458:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f945a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23f945c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f945e:	462a      	mov	r2, r5
 23f9460:	2100      	movs	r1, #0
 23f9462:	f002 f897 	bl	23fb594 <memset>
 23f9466:	8025      	strh	r5, [r4, #0]
 23f9468:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f946a:	4907      	ldr	r1, [pc, #28]	; (23f9488 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23f946c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f946e:	8125      	strh	r5, [r4, #8]
 23f9470:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9472:	f000 fa4f 	bl	23f9914 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9476:	4904      	ldr	r1, [pc, #16]	; (23f9488 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23f9478:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f947a:	4628      	mov	r0, r5
 23f947c:	f000 fa4a 	bl	23f9914 <_ZnajRKSt9nothrow_t>
    };
 23f9480:	60e0      	str	r0, [r4, #12]
}
 23f9482:	4620      	mov	r0, r4
 23f9484:	bd38      	pop	{r3, r4, r5, pc}
 23f9486:	bf00      	nop
 23f9488:	023ffb73 	.word	0x023ffb73

023f948c <__tcf_2>:
 23f948c:	4770      	bx	lr

023f948e <__tcf_1>:
 23f948e:	4770      	bx	lr

023f9490 <_Z20acquireSerial1Bufferv>:
{
 23f9490:	b510      	push	{r4, lr}
 23f9492:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23f9494:	f7ff ffe0 	bl	23f9458 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23f9498:	4620      	mov	r0, r4
 23f949a:	bd10      	pop	{r4, pc}

023f949c <_Z20acquireSerial2Bufferv>:
 23f949c:	b510      	push	{r4, lr}
 23f949e:	4604      	mov	r4, r0
 23f94a0:	f7ff ffda 	bl	23f9458 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f94a4:	4620      	mov	r0, r4
 23f94a6:	bd10      	pop	{r4, pc}

023f94a8 <_Z20acquireSerial3Bufferv>:
 23f94a8:	b510      	push	{r4, lr}
 23f94aa:	4604      	mov	r4, r0
 23f94ac:	f7ff ffd4 	bl	23f9458 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f94b0:	4620      	mov	r0, r4
 23f94b2:	bd10      	pop	{r4, pc}

023f94b4 <_Z22__fetch_global_Serial1v>:
{
 23f94b4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f94b6:	4d0e      	ldr	r5, [pc, #56]	; (23f94f0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f94b8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f94ba:	e8d5 1f8f 	ldab	r1, [r5]
 23f94be:	f011 0401 	ands.w	r4, r1, #1
 23f94c2:	d111      	bne.n	23f94e8 <_Z22__fetch_global_Serial1v+0x34>
 23f94c4:	4628      	mov	r0, r5
 23f94c6:	f7f4 f979 	bl	23ed7bc <__cxa_guard_acquire>
 23f94ca:	b168      	cbz	r0, 23f94e8 <_Z22__fetch_global_Serial1v+0x34>
 23f94cc:	a801      	add	r0, sp, #4
 23f94ce:	f7ff ffdf 	bl	23f9490 <_Z20acquireSerial1Bufferv>
 23f94d2:	4621      	mov	r1, r4
 23f94d4:	aa01      	add	r2, sp, #4
 23f94d6:	4807      	ldr	r0, [pc, #28]	; (23f94f4 <_Z22__fetch_global_Serial1v+0x40>)
 23f94d8:	f7fe fa14 	bl	23f7904 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f94dc:	4628      	mov	r0, r5
 23f94de:	f7f4 f972 	bl	23ed7c6 <__cxa_guard_release>
 23f94e2:	4805      	ldr	r0, [pc, #20]	; (23f94f8 <_Z22__fetch_global_Serial1v+0x44>)
 23f94e4:	f002 f816 	bl	23fb514 <atexit>
    return serial1;
}
 23f94e8:	4802      	ldr	r0, [pc, #8]	; (23f94f4 <_Z22__fetch_global_Serial1v+0x40>)
 23f94ea:	b007      	add	sp, #28
 23f94ec:	bd30      	pop	{r4, r5, pc}
 23f94ee:	bf00      	nop
 23f94f0:	1007af14 	.word	0x1007af14
 23f94f4:	1007af20 	.word	0x1007af20
 23f94f8:	023f9455 	.word	0x023f9455

023f94fc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f94fc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f94fe:	4c0d      	ldr	r4, [pc, #52]	; (23f9534 <_Z22__fetch_global_Serial2v+0x38>)
{
 23f9500:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9502:	e8d4 3f8f 	ldab	r3, [r4]
 23f9506:	07db      	lsls	r3, r3, #31
 23f9508:	d411      	bmi.n	23f952e <_Z22__fetch_global_Serial2v+0x32>
 23f950a:	4620      	mov	r0, r4
 23f950c:	f7f4 f956 	bl	23ed7bc <__cxa_guard_acquire>
 23f9510:	b168      	cbz	r0, 23f952e <_Z22__fetch_global_Serial2v+0x32>
 23f9512:	a801      	add	r0, sp, #4
 23f9514:	f7ff ffc2 	bl	23f949c <_Z20acquireSerial2Bufferv>
 23f9518:	2101      	movs	r1, #1
 23f951a:	aa01      	add	r2, sp, #4
 23f951c:	4806      	ldr	r0, [pc, #24]	; (23f9538 <_Z22__fetch_global_Serial2v+0x3c>)
 23f951e:	f7fe f9f1 	bl	23f7904 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9522:	4620      	mov	r0, r4
 23f9524:	f7f4 f94f 	bl	23ed7c6 <__cxa_guard_release>
 23f9528:	4804      	ldr	r0, [pc, #16]	; (23f953c <_Z22__fetch_global_Serial2v+0x40>)
 23f952a:	f001 fff3 	bl	23fb514 <atexit>
	return serial2;
}
 23f952e:	4802      	ldr	r0, [pc, #8]	; (23f9538 <_Z22__fetch_global_Serial2v+0x3c>)
 23f9530:	b006      	add	sp, #24
 23f9532:	bd10      	pop	{r4, pc}
 23f9534:	1007af18 	.word	0x1007af18
 23f9538:	1007af34 	.word	0x1007af34
 23f953c:	023f948f 	.word	0x023f948f

023f9540 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23f9540:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23f9542:	f7ff ffdb 	bl	23f94fc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23f9546:	4b07      	ldr	r3, [pc, #28]	; (23f9564 <_Z15serialEventRun2v+0x24>)
 23f9548:	4604      	mov	r4, r0
 23f954a:	b153      	cbz	r3, 23f9562 <_Z15serialEventRun2v+0x22>
 23f954c:	f7fe f9f8 	bl	23f7940 <_ZN11USARTSerial9isEnabledEv>
 23f9550:	b138      	cbz	r0, 23f9562 <_Z15serialEventRun2v+0x22>
 23f9552:	6823      	ldr	r3, [r4, #0]
 23f9554:	4620      	mov	r0, r4
 23f9556:	691b      	ldr	r3, [r3, #16]
 23f9558:	4798      	blx	r3
 23f955a:	2800      	cmp	r0, #0
 23f955c:	dd01      	ble.n	23f9562 <_Z15serialEventRun2v+0x22>
        handler();
 23f955e:	e000      	b.n	23f9562 <_Z15serialEventRun2v+0x22>
 23f9560:	bf00      	nop
}
 23f9562:	bd10      	pop	{r4, pc}
 23f9564:	00000000 	.word	0x00000000

023f9568 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23f9568:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f956a:	4c0d      	ldr	r4, [pc, #52]	; (23f95a0 <_Z22__fetch_global_Serial3v+0x38>)
{
 23f956c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f956e:	e8d4 3f8f 	ldab	r3, [r4]
 23f9572:	07db      	lsls	r3, r3, #31
 23f9574:	d411      	bmi.n	23f959a <_Z22__fetch_global_Serial3v+0x32>
 23f9576:	4620      	mov	r0, r4
 23f9578:	f7f4 f920 	bl	23ed7bc <__cxa_guard_acquire>
 23f957c:	b168      	cbz	r0, 23f959a <_Z22__fetch_global_Serial3v+0x32>
 23f957e:	a801      	add	r0, sp, #4
 23f9580:	f7ff ff92 	bl	23f94a8 <_Z20acquireSerial3Bufferv>
 23f9584:	2102      	movs	r1, #2
 23f9586:	aa01      	add	r2, sp, #4
 23f9588:	4806      	ldr	r0, [pc, #24]	; (23f95a4 <_Z22__fetch_global_Serial3v+0x3c>)
 23f958a:	f7fe f9bb 	bl	23f7904 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f958e:	4620      	mov	r0, r4
 23f9590:	f7f4 f919 	bl	23ed7c6 <__cxa_guard_release>
 23f9594:	4804      	ldr	r0, [pc, #16]	; (23f95a8 <_Z22__fetch_global_Serial3v+0x40>)
 23f9596:	f001 ffbd 	bl	23fb514 <atexit>
	return serial3;
}
 23f959a:	4802      	ldr	r0, [pc, #8]	; (23f95a4 <_Z22__fetch_global_Serial3v+0x3c>)
 23f959c:	b006      	add	sp, #24
 23f959e:	bd10      	pop	{r4, pc}
 23f95a0:	1007af1c 	.word	0x1007af1c
 23f95a4:	1007af48 	.word	0x1007af48
 23f95a8:	023f948d 	.word	0x023f948d

023f95ac <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23f95ac:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23f95ae:	f7ff ffdb 	bl	23f9568 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23f95b2:	4b07      	ldr	r3, [pc, #28]	; (23f95d0 <_Z15serialEventRun3v+0x24>)
 23f95b4:	4604      	mov	r4, r0
 23f95b6:	b153      	cbz	r3, 23f95ce <_Z15serialEventRun3v+0x22>
 23f95b8:	f7fe f9c2 	bl	23f7940 <_ZN11USARTSerial9isEnabledEv>
 23f95bc:	b138      	cbz	r0, 23f95ce <_Z15serialEventRun3v+0x22>
 23f95be:	6823      	ldr	r3, [r4, #0]
 23f95c0:	4620      	mov	r0, r4
 23f95c2:	691b      	ldr	r3, [r3, #16]
 23f95c4:	4798      	blx	r3
 23f95c6:	2800      	cmp	r0, #0
 23f95c8:	dd01      	ble.n	23f95ce <_Z15serialEventRun3v+0x22>
        handler();
 23f95ca:	e000      	b.n	23f95ce <_Z15serialEventRun3v+0x22>
 23f95cc:	bf00      	nop
}
 23f95ce:	bd10      	pop	{r4, pc}
 23f95d0:	00000000 	.word	0x00000000

023f95d4 <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23f95d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f95d8:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23f95dc:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23f95e0:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23f95e4:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23f95e8:	4770      	bx	lr
	...

023f95ec <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23f95ec:	2801      	cmp	r0, #1
{
 23f95ee:	b570      	push	{r4, r5, r6, lr}
 23f95f0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23f95f4:	d14a      	bne.n	23f968c <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23f95f6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23f95fa:	009a      	lsls	r2, r3, #2
 23f95fc:	d445      	bmi.n	23f968a <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23f95fe:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23f9602:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23f9606:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23f9608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23f960c:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23f9610:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23f9614:	4e21      	ldr	r6, [pc, #132]	; (23f969c <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23f9616:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23f961a:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23f961e:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23f9620:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23f9624:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23f9628:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23f962c:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f9630:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23f9634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f9638:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23f963c:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23f963e:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23f9642:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23f9646:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f964a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23f964e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f9652:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23f9656:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23f9658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23f965c:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23f965e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23f9662:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23f9666:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23f966a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23f966e:	009b      	lsls	r3, r3, #2
 23f9670:	d5fb      	bpl.n	23f966a <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f9672:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23f9676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f967a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f967e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23f9682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f9686:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23f968a:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f968c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23f9690:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23f9694:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23f9698:	e7f5      	b.n	23f9686 <PLL_I2S_Set+0x9a>
 23f969a:	bf00      	nop
 23f969c:	1010a949 	.word	0x1010a949

023f96a0 <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23f96a0:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23f96a2:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23f96a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23f96aa:	4770      	bx	lr

023f96ac <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f96ac:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23f96ae:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f96b0:	bf0b      	itete	eq
 23f96b2:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23f96b6:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f96ba:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23f96bc:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23f96be:	bf0b      	itete	eq
 23f96c0:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23f96c2:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23f96c4:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23f96c8:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23f96cc:	6043      	str	r3, [r0, #4]
	}
}
 23f96ce:	4770      	bx	lr

023f96d0 <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f96d0:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23f96d2:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f96d4:	bf0b      	itete	eq
 23f96d6:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23f96da:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f96de:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23f96e0:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23f96e2:	bf0b      	itete	eq
 23f96e4:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23f96e6:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23f96e8:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23f96ec:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23f96f0:	6043      	str	r3, [r0, #4]
	}
}
 23f96f2:	4770      	bx	lr

023f96f4 <AUDIO_SP_Init>:
{
 23f96f4:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23f96f6:	680b      	ldr	r3, [r1, #0]
{
 23f96f8:	4605      	mov	r5, r0
 23f96fa:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23f96fc:	b133      	cbz	r3, 23f970c <AUDIO_SP_Init+0x18>
 23f96fe:	3b02      	subs	r3, #2
 23f9700:	2b01      	cmp	r3, #1
 23f9702:	d903      	bls.n	23f970c <AUDIO_SP_Init+0x18>
 23f9704:	213a      	movs	r1, #58	; 0x3a
 23f9706:	481f      	ldr	r0, [pc, #124]	; (23f9784 <AUDIO_SP_Init+0x90>)
 23f9708:	f002 f8d2 	bl	23fb8b0 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23f970c:	6863      	ldr	r3, [r4, #4]
 23f970e:	2b03      	cmp	r3, #3
 23f9710:	d906      	bls.n	23f9720 <AUDIO_SP_Init+0x2c>
 23f9712:	3b06      	subs	r3, #6
 23f9714:	2b01      	cmp	r3, #1
 23f9716:	d903      	bls.n	23f9720 <AUDIO_SP_Init+0x2c>
 23f9718:	213b      	movs	r1, #59	; 0x3b
 23f971a:	481a      	ldr	r0, [pc, #104]	; (23f9784 <AUDIO_SP_Init+0x90>)
 23f971c:	f002 f8c8 	bl	23fb8b0 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23f9720:	68a3      	ldr	r3, [r4, #8]
 23f9722:	2b01      	cmp	r3, #1
 23f9724:	d903      	bls.n	23f972e <AUDIO_SP_Init+0x3a>
 23f9726:	213c      	movs	r1, #60	; 0x3c
 23f9728:	4816      	ldr	r0, [pc, #88]	; (23f9784 <AUDIO_SP_Init+0x90>)
 23f972a:	f002 f8c1 	bl	23fb8b0 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23f972e:	68e3      	ldr	r3, [r4, #12]
 23f9730:	2b03      	cmp	r3, #3
 23f9732:	d903      	bls.n	23f973c <AUDIO_SP_Init+0x48>
 23f9734:	213d      	movs	r1, #61	; 0x3d
 23f9736:	4813      	ldr	r0, [pc, #76]	; (23f9784 <AUDIO_SP_Init+0x90>)
 23f9738:	f002 f8ba 	bl	23fb8b0 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23f973c:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f973e:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23f9740:	f043 0301 	orr.w	r3, r3, #1
 23f9744:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23f9746:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f9748:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23f974a:	f023 0301 	bic.w	r3, r3, #1
 23f974e:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23f9750:	4b0d      	ldr	r3, [pc, #52]	; (23f9788 <AUDIO_SP_Init+0x94>)
 23f9752:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f9754:	4b0d      	ldr	r3, [pc, #52]	; (23f978c <AUDIO_SP_Init+0x98>)
 23f9756:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23f9758:	4b0d      	ldr	r3, [pc, #52]	; (23f9790 <AUDIO_SP_Init+0x9c>)
 23f975a:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23f975c:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23f9760:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23f9762:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23f9764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23f9768:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23f976c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23f9770:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23f9772:	68a2      	ldr	r2, [r4, #8]
 23f9774:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23f9778:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23f977a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23f977e:	606b      	str	r3, [r5, #4]
}
 23f9780:	bd38      	pop	{r3, r4, r5, pc}
 23f9782:	bf00      	nop
 23f9784:	023ffb65 	.word	0x023ffb65
 23f9788:	80100271 	.word	0x80100271
 23f978c:	023f96ad 	.word	0x023f96ad
 23f9790:	023f96d1 	.word	0x023f96d1

023f9794 <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f9794:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23f9796:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f9798:	bf0b      	itete	eq
 23f979a:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23f979e:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f97a2:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23f97a4:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23f97a6:	bf0b      	itete	eq
 23f97a8:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23f97aa:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23f97ac:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23f97b0:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23f97b4:	60c3      	str	r3, [r0, #12]
	}
}
 23f97b6:	4770      	bx	lr

023f97b8 <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23f97b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f97bc:	461f      	mov	r7, r3
 23f97be:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23f97c2:	230c      	movs	r3, #12
 23f97c4:	4358      	muls	r0, r3
 23f97c6:	4b4b      	ldr	r3, [pc, #300]	; (23f98f4 <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23f97c8:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23f97ca:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23f97ce:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23f97d2:	b931      	cbnz	r1, 23f97e2 <AUDIO_SP_RXGDMA_Init+0x2a>
 23f97d4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23f97d8:	4847      	ldr	r0, [pc, #284]	; (23f98f8 <AUDIO_SP_RXGDMA_Init+0x140>)
 23f97da:	9201      	str	r2, [sp, #4]
 23f97dc:	f002 f868 	bl	23fb8b0 <__io_assert_failed_veneer>
 23f97e0:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23f97e2:	4639      	mov	r1, r7
 23f97e4:	230c      	movs	r3, #12
 23f97e6:	4f45      	ldr	r7, [pc, #276]	; (23f98fc <AUDIO_SP_RXGDMA_Init+0x144>)
 23f97e8:	2000      	movs	r0, #0
 23f97ea:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23f97ec:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23f97ee:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23f97f0:	d07e      	beq.n	23f98f0 <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23f97f2:	2254      	movs	r2, #84	; 0x54
 23f97f4:	2100      	movs	r1, #0
 23f97f6:	4b42      	ldr	r3, [pc, #264]	; (23f9900 <AUDIO_SP_RXGDMA_Init+0x148>)
 23f97f8:	4620      	mov	r0, r4
 23f97fa:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23f97fc:	210b      	movs	r1, #11
 23f97fe:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23f9800:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23f9804:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23f9806:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23f9808:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23f980a:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23f980c:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23f980e:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23f9812:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23f9816:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23f981a:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23f981c:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23f981e:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23f9820:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23f9822:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23f9824:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23f9826:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23f9828:	d144      	bne.n	23f98b4 <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23f982a:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23f982e:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23f9830:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23f9832:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23f9834:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23f9836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23f983a:	d904      	bls.n	23f9846 <AUDIO_SP_RXGDMA_Init+0x8e>
 23f983c:	f240 1177 	movw	r1, #375	; 0x177
 23f9840:	482d      	ldr	r0, [pc, #180]	; (23f98f8 <AUDIO_SP_RXGDMA_Init+0x140>)
 23f9842:	f002 f835 	bl	23fb8b0 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23f9846:	4622      	mov	r2, r4
 23f9848:	4b2e      	ldr	r3, [pc, #184]	; (23f9904 <AUDIO_SP_RXGDMA_Init+0x14c>)
 23f984a:	7861      	ldrb	r1, [r4, #1]
 23f984c:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23f984e:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23f9850:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f9852:	4a2d      	ldr	r2, [pc, #180]	; (23f9908 <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23f9854:	462f      	mov	r7, r5
 23f9856:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f9858:	03db      	lsls	r3, r3, #15
 23f985a:	d522      	bpl.n	23f98a2 <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23f985c:	1c68      	adds	r0, r5, #1
 23f985e:	d130      	bne.n	23f98c2 <AUDIO_SP_RXGDMA_Init+0x10a>
 23f9860:	1c71      	adds	r1, r6, #1
 23f9862:	d130      	bne.n	23f98c6 <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23f9864:	2300      	movs	r3, #0
 23f9866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f986a:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f986e:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23f9872:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23f9876:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23f987a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23f987e:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23f9880:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f9882:	ea03 0705 	and.w	r7, r3, r5
 23f9886:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23f988a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f988c:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23f9890:	d2f9      	bcs.n	23f9886 <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23f9892:	3b20      	subs	r3, #32
 23f9894:	f113 0f20 	cmn.w	r3, #32
 23f9898:	d1f2      	bne.n	23f9880 <AUDIO_SP_RXGDMA_Init+0xc8>
 23f989a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f989e:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f98a2:	7820      	ldrb	r0, [r4, #0]
 23f98a4:	2201      	movs	r2, #1
 23f98a6:	7861      	ldrb	r1, [r4, #1]
 23f98a8:	4b18      	ldr	r3, [pc, #96]	; (23f990c <AUDIO_SP_RXGDMA_Init+0x154>)
 23f98aa:	4798      	blx	r3

	return _TRUE;
 23f98ac:	2001      	movs	r0, #1
}
 23f98ae:	b003      	add	sp, #12
 23f98b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23f98b4:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23f98b8:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23f98ba:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23f98bc:	08b3      	lsrs	r3, r6, #2
 23f98be:	8523      	strh	r3, [r4, #40]	; 0x28
 23f98c0:	e7b8      	b.n	23f9834 <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f98c2:	06eb      	lsls	r3, r5, #27
 23f98c4:	d007      	beq.n	23f98d6 <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f98c6:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f98ca:	4435      	add	r5, r6
 23f98cc:	3d01      	subs	r5, #1
 23f98ce:	f025 051f 	bic.w	r5, r5, #31
 23f98d2:	3520      	adds	r5, #32
 23f98d4:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23f98d6:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23f98d8:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23f98dc:	4a0a      	ldr	r2, [pc, #40]	; (23f9908 <AUDIO_SP_RXGDMA_Init+0x150>)
 23f98de:	4437      	add	r7, r6
    while (op_size > 0) {
 23f98e0:	2d00      	cmp	r5, #0
 23f98e2:	eba7 0305 	sub.w	r3, r7, r5
 23f98e6:	ddd8      	ble.n	23f989a <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23f98e8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f98ec:	3d20      	subs	r5, #32
 23f98ee:	e7f7      	b.n	23f98e0 <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23f98f0:	2000      	movs	r0, #0
 23f98f2:	e7dc      	b.n	23f98ae <AUDIO_SP_RXGDMA_Init+0xf6>
 23f98f4:	023ffb44 	.word	0x023ffb44
 23f98f8:	023ffb50 	.word	0x023ffb50
 23f98fc:	1010c43d 	.word	0x1010c43d
 23f9900:	10110ea1 	.word	0x10110ea1
 23f9904:	1010bff9 	.word	0x1010bff9
 23f9908:	e000ed00 	.word	0xe000ed00
 23f990c:	1010bf91 	.word	0x1010bf91

023f9910 <_ZnwjRKSt9nothrow_t>:
 23f9910:	f7f3 bf3f 	b.w	23ed792 <_Znwj>

023f9914 <_ZnajRKSt9nothrow_t>:
 23f9914:	f7f3 bf3f 	b.w	23ed796 <_Znaj>

023f9918 <_ZSt19__throw_logic_errorPKc>:
 23f9918:	b508      	push	{r3, lr}
 23f991a:	f7fd fe7f 	bl	23f761c <abort>

023f991e <_ZSt20__throw_length_errorPKc>:
 23f991e:	b508      	push	{r3, lr}
 23f9920:	f7fd fe7c 	bl	23f761c <abort>

023f9924 <_ZSt24__throw_out_of_range_fmtPKcz>:
 23f9924:	b40f      	push	{r0, r1, r2, r3}
 23f9926:	b580      	push	{r7, lr}
 23f9928:	b084      	sub	sp, #16
 23f992a:	af00      	add	r7, sp, #0
 23f992c:	f107 0418 	add.w	r4, r7, #24
 23f9930:	f854 2b04 	ldr.w	r2, [r4], #4
 23f9934:	4610      	mov	r0, r2
 23f9936:	607a      	str	r2, [r7, #4]
 23f9938:	f7f3 ff06 	bl	23ed748 <strlen>
 23f993c:	f200 2307 	addw	r3, r0, #519	; 0x207
 23f9940:	f500 7100 	add.w	r1, r0, #512	; 0x200
 23f9944:	687a      	ldr	r2, [r7, #4]
 23f9946:	f023 0307 	bic.w	r3, r3, #7
 23f994a:	60fc      	str	r4, [r7, #12]
 23f994c:	ebad 0d03 	sub.w	sp, sp, r3
 23f9950:	4623      	mov	r3, r4
 23f9952:	4668      	mov	r0, sp
 23f9954:	f000 f858 	bl	23f9a08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 23f9958:	f7fd fe60 	bl	23f761c <abort>

023f995c <_ZSt25__throw_bad_function_callv>:
 23f995c:	b508      	push	{r3, lr}
 23f995e:	f7fd fe5d 	bl	23f761c <abort>
	...

023f9964 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 23f9964:	b580      	push	{r7, lr}
 23f9966:	b09c      	sub	sp, #112	; 0x70
 23f9968:	4606      	mov	r6, r0
 23f996a:	460c      	mov	r4, r1
 23f996c:	2269      	movs	r2, #105	; 0x69
 23f996e:	af00      	add	r7, sp, #0
 23f9970:	1ba4      	subs	r4, r4, r6
 23f9972:	490e      	ldr	r1, [pc, #56]	; (23f99ac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 23f9974:	1d38      	adds	r0, r7, #4
 23f9976:	f001 fde6 	bl	23fb546 <memcpy>
 23f997a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 23f997e:	2268      	movs	r2, #104	; 0x68
 23f9980:	1d39      	adds	r1, r7, #4
 23f9982:	f023 0307 	bic.w	r3, r3, #7
 23f9986:	ebad 0d03 	sub.w	sp, sp, r3
 23f998a:	466d      	mov	r5, sp
 23f998c:	4628      	mov	r0, r5
 23f998e:	f001 fdda 	bl	23fb546 <memcpy>
 23f9992:	4622      	mov	r2, r4
 23f9994:	4631      	mov	r1, r6
 23f9996:	f105 0068 	add.w	r0, r5, #104	; 0x68
 23f999a:	f001 fdd4 	bl	23fb546 <memcpy>
 23f999e:	442c      	add	r4, r5
 23f99a0:	2300      	movs	r3, #0
 23f99a2:	4628      	mov	r0, r5
 23f99a4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f99a8:	f7ff ffb6 	bl	23f9918 <_ZSt19__throw_logic_errorPKc>
 23f99ac:	023ffb74 	.word	0x023ffb74

023f99b0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 23f99b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f99b4:	af00      	add	r7, sp, #0
 23f99b6:	b084      	sub	sp, #16
 23f99b8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 23f9a04 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 23f99bc:	f04f 0c0a 	mov.w	ip, #10
 23f99c0:	466d      	mov	r5, sp
 23f99c2:	f105 040c 	add.w	r4, r5, #12
 23f99c6:	4623      	mov	r3, r4
 23f99c8:	fbb2 f6fc 	udiv	r6, r2, ip
 23f99cc:	fb0c 2e16 	mls	lr, ip, r6, r2
 23f99d0:	f818 e00e 	ldrb.w	lr, [r8, lr]
 23f99d4:	f803 ed01 	strb.w	lr, [r3, #-1]!
 23f99d8:	4696      	mov	lr, r2
 23f99da:	4632      	mov	r2, r6
 23f99dc:	f1be 0f09 	cmp.w	lr, #9
 23f99e0:	d8f2      	bhi.n	23f99c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 23f99e2:	1ae4      	subs	r4, r4, r3
 23f99e4:	428c      	cmp	r4, r1
 23f99e6:	d809      	bhi.n	23f99fc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 23f99e8:	f1c4 030c 	rsb	r3, r4, #12
 23f99ec:	4622      	mov	r2, r4
 23f99ee:	18e9      	adds	r1, r5, r3
 23f99f0:	f001 fda9 	bl	23fb546 <memcpy>
 23f99f4:	4620      	mov	r0, r4
 23f99f6:	46bd      	mov	sp, r7
 23f99f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f99fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f9a00:	e7f8      	b.n	23f99f4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 23f9a02:	bf00      	nop
 23f9a04:	023ffbdd 	.word	0x023ffbdd

023f9a08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 23f9a08:	3901      	subs	r1, #1
 23f9a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9a0e:	4607      	mov	r7, r0
 23f9a10:	4615      	mov	r5, r2
 23f9a12:	eb00 0801 	add.w	r8, r0, r1
 23f9a16:	4604      	mov	r4, r0
 23f9a18:	782a      	ldrb	r2, [r5, #0]
 23f9a1a:	b392      	cbz	r2, 23f9a82 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 23f9a1c:	4544      	cmp	r4, r8
 23f9a1e:	d22a      	bcs.n	23f9a76 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f9a20:	2a25      	cmp	r2, #37	; 0x25
 23f9a22:	d107      	bne.n	23f9a34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9a24:	786a      	ldrb	r2, [r5, #1]
 23f9a26:	2a73      	cmp	r2, #115	; 0x73
 23f9a28:	d009      	beq.n	23f9a3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 23f9a2a:	2a7a      	cmp	r2, #122	; 0x7a
 23f9a2c:	d012      	beq.n	23f9a54 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 23f9a2e:	2a25      	cmp	r2, #37	; 0x25
 23f9a30:	d100      	bne.n	23f9a34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9a32:	3501      	adds	r5, #1
 23f9a34:	f815 2b01 	ldrb.w	r2, [r5], #1
 23f9a38:	f804 2b01 	strb.w	r2, [r4], #1
 23f9a3c:	e7ec      	b.n	23f9a18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 23f9a42:	3a01      	subs	r2, #1
 23f9a44:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 23f9a48:	b1c9      	cbz	r1, 23f9a7e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 23f9a4a:	4544      	cmp	r4, r8
 23f9a4c:	d013      	beq.n	23f9a76 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f9a4e:	f804 1b01 	strb.w	r1, [r4], #1
 23f9a52:	e7f7      	b.n	23f9a44 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 23f9a54:	78aa      	ldrb	r2, [r5, #2]
 23f9a56:	2a75      	cmp	r2, #117	; 0x75
 23f9a58:	d1ec      	bne.n	23f9a34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9a5a:	461e      	mov	r6, r3
 23f9a5c:	eba8 0104 	sub.w	r1, r8, r4
 23f9a60:	4620      	mov	r0, r4
 23f9a62:	f856 2b04 	ldr.w	r2, [r6], #4
 23f9a66:	f7ff ffa3 	bl	23f99b0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 23f9a6a:	2800      	cmp	r0, #0
 23f9a6c:	dd03      	ble.n	23f9a76 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f9a6e:	4404      	add	r4, r0
 23f9a70:	3503      	adds	r5, #3
 23f9a72:	4633      	mov	r3, r6
 23f9a74:	e7d0      	b.n	23f9a18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9a76:	4621      	mov	r1, r4
 23f9a78:	4638      	mov	r0, r7
 23f9a7a:	f7ff ff73 	bl	23f9964 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 23f9a7e:	3502      	adds	r5, #2
 23f9a80:	e7ca      	b.n	23f9a18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9a82:	1be0      	subs	r0, r4, r7
 23f9a84:	7022      	strb	r2, [r4, #0]
 23f9a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9a8a:	0000      	movs	r0, r0
 23f9a8c:	0000      	movs	r0, r0
	...

023f9a90 <cos>:
 23f9a90:	ec51 0b10 	vmov	r0, r1, d0
 23f9a94:	4a26      	ldr	r2, [pc, #152]	; (23f9b30 <cos+0xa0>)
 23f9a96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9a9a:	4293      	cmp	r3, r2
 23f9a9c:	dd20      	ble.n	23f9ae0 <cos+0x50>
 23f9a9e:	4a25      	ldr	r2, [pc, #148]	; (23f9b34 <cos+0xa4>)
 23f9aa0:	4293      	cmp	r3, r2
 23f9aa2:	b500      	push	{lr}
 23f9aa4:	b085      	sub	sp, #20
 23f9aa6:	dd09      	ble.n	23f9abc <cos+0x2c>
 23f9aa8:	ee10 2a10 	vmov	r2, s0
 23f9aac:	460b      	mov	r3, r1
 23f9aae:	f7f2 ff43 	bl	23ec938 <__aeabi_dsub>
 23f9ab2:	ec41 0b10 	vmov	d0, r0, r1
 23f9ab6:	b005      	add	sp, #20
 23f9ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9abc:	4668      	mov	r0, sp
 23f9abe:	f000 fa7b 	bl	23f9fb8 <__ieee754_rem_pio2>
 23f9ac2:	f000 0003 	and.w	r0, r0, #3
 23f9ac6:	2801      	cmp	r0, #1
 23f9ac8:	d00e      	beq.n	23f9ae8 <cos+0x58>
 23f9aca:	2802      	cmp	r0, #2
 23f9acc:	d022      	beq.n	23f9b14 <cos+0x84>
 23f9ace:	b1d0      	cbz	r0, 23f9b06 <cos+0x76>
 23f9ad0:	2001      	movs	r0, #1
 23f9ad2:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9ad6:	ed9d 0b00 	vldr	d0, [sp]
 23f9ada:	f001 fbb1 	bl	23fb240 <__kernel_sin>
 23f9ade:	e7ea      	b.n	23f9ab6 <cos+0x26>
 23f9ae0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23f9b28 <cos+0x98>
 23f9ae4:	f000 be48 	b.w	23fa778 <__kernel_cos>
 23f9ae8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9aec:	ed9d 0b00 	vldr	d0, [sp]
 23f9af0:	f001 fba6 	bl	23fb240 <__kernel_sin>
 23f9af4:	ec53 2b10 	vmov	r2, r3, d0
 23f9af8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f9afc:	ee00 3a90 	vmov	s1, r3
 23f9b00:	b005      	add	sp, #20
 23f9b02:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9b06:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9b0a:	ed9d 0b00 	vldr	d0, [sp]
 23f9b0e:	f000 fe33 	bl	23fa778 <__kernel_cos>
 23f9b12:	e7d0      	b.n	23f9ab6 <cos+0x26>
 23f9b14:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9b18:	ed9d 0b00 	vldr	d0, [sp]
 23f9b1c:	f000 fe2c 	bl	23fa778 <__kernel_cos>
 23f9b20:	e7e8      	b.n	23f9af4 <cos+0x64>
 23f9b22:	bf00      	nop
 23f9b24:	f3af 8000 	nop.w
	...
 23f9b30:	3fe921fb 	.word	0x3fe921fb
 23f9b34:	7fefffff 	.word	0x7fefffff

023f9b38 <fabs>:
 23f9b38:	ec51 0b10 	vmov	r0, r1, d0
 23f9b3c:	ee10 2a10 	vmov	r2, s0
 23f9b40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9b44:	ec43 2b10 	vmov	d0, r2, r3
 23f9b48:	4770      	bx	lr
 23f9b4a:	bf00      	nop
 23f9b4c:	0000      	movs	r0, r0
	...

023f9b50 <floor>:
 23f9b50:	ec51 0b10 	vmov	r0, r1, d0
 23f9b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9b56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f9b5a:	460c      	mov	r4, r1
 23f9b5c:	ee10 6a10 	vmov	r6, s0
 23f9b60:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23f9b64:	2d13      	cmp	r5, #19
 23f9b66:	dc30      	bgt.n	23f9bca <floor+0x7a>
 23f9b68:	2d00      	cmp	r5, #0
 23f9b6a:	db1e      	blt.n	23f9baa <floor+0x5a>
 23f9b6c:	4f38      	ldr	r7, [pc, #224]	; (23f9c50 <floor+0x100>)
 23f9b6e:	412f      	asrs	r7, r5
 23f9b70:	ea01 0307 	and.w	r3, r1, r7
 23f9b74:	4303      	orrs	r3, r0
 23f9b76:	d02d      	beq.n	23f9bd4 <floor+0x84>
 23f9b78:	a333      	add	r3, pc, #204	; (adr r3, 23f9c48 <floor+0xf8>)
 23f9b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b7e:	f7f2 fedd 	bl	23ec93c <__adddf3>
 23f9b82:	2200      	movs	r2, #0
 23f9b84:	2300      	movs	r3, #0
 23f9b86:	f7f3 fb1f 	bl	23ed1c8 <__aeabi_dcmpgt>
 23f9b8a:	b148      	cbz	r0, 23f9ba0 <floor+0x50>
 23f9b8c:	2c00      	cmp	r4, #0
 23f9b8e:	da04      	bge.n	23f9b9a <floor+0x4a>
 23f9b90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23f9b94:	fa43 f505 	asr.w	r5, r3, r5
 23f9b98:	442c      	add	r4, r5
 23f9b9a:	ea24 0407 	bic.w	r4, r4, r7
 23f9b9e:	2600      	movs	r6, #0
 23f9ba0:	4623      	mov	r3, r4
 23f9ba2:	4632      	mov	r2, r6
 23f9ba4:	ec43 2b10 	vmov	d0, r2, r3
 23f9ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9baa:	a327      	add	r3, pc, #156	; (adr r3, 23f9c48 <floor+0xf8>)
 23f9bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9bb0:	f7f2 fec4 	bl	23ec93c <__adddf3>
 23f9bb4:	2200      	movs	r2, #0
 23f9bb6:	2300      	movs	r3, #0
 23f9bb8:	f7f3 fb06 	bl	23ed1c8 <__aeabi_dcmpgt>
 23f9bbc:	2800      	cmp	r0, #0
 23f9bbe:	d0ef      	beq.n	23f9ba0 <floor+0x50>
 23f9bc0:	2c00      	cmp	r4, #0
 23f9bc2:	db29      	blt.n	23f9c18 <floor+0xc8>
 23f9bc4:	2600      	movs	r6, #0
 23f9bc6:	4634      	mov	r4, r6
 23f9bc8:	e7ea      	b.n	23f9ba0 <floor+0x50>
 23f9bca:	2d33      	cmp	r5, #51	; 0x33
 23f9bcc:	dd05      	ble.n	23f9bda <floor+0x8a>
 23f9bce:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23f9bd2:	d019      	beq.n	23f9c08 <floor+0xb8>
 23f9bd4:	ec41 0b10 	vmov	d0, r0, r1
 23f9bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9bda:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23f9bde:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23f9be2:	40df      	lsrs	r7, r3
 23f9be4:	4207      	tst	r7, r0
 23f9be6:	d0f5      	beq.n	23f9bd4 <floor+0x84>
 23f9be8:	a317      	add	r3, pc, #92	; (adr r3, 23f9c48 <floor+0xf8>)
 23f9bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9bee:	f7f2 fea5 	bl	23ec93c <__adddf3>
 23f9bf2:	2200      	movs	r2, #0
 23f9bf4:	2300      	movs	r3, #0
 23f9bf6:	f7f3 fae7 	bl	23ed1c8 <__aeabi_dcmpgt>
 23f9bfa:	2800      	cmp	r0, #0
 23f9bfc:	d0d0      	beq.n	23f9ba0 <floor+0x50>
 23f9bfe:	2c00      	cmp	r4, #0
 23f9c00:	db13      	blt.n	23f9c2a <floor+0xda>
 23f9c02:	ea26 0607 	bic.w	r6, r6, r7
 23f9c06:	e7cb      	b.n	23f9ba0 <floor+0x50>
 23f9c08:	ee10 2a10 	vmov	r2, s0
 23f9c0c:	460b      	mov	r3, r1
 23f9c0e:	f7f2 fe95 	bl	23ec93c <__adddf3>
 23f9c12:	ec41 0b10 	vmov	d0, r0, r1
 23f9c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9c18:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23f9c1c:	4a0d      	ldr	r2, [pc, #52]	; (23f9c54 <floor+0x104>)
 23f9c1e:	4333      	orrs	r3, r6
 23f9c20:	2600      	movs	r6, #0
 23f9c22:	42b3      	cmp	r3, r6
 23f9c24:	bf18      	it	ne
 23f9c26:	4614      	movne	r4, r2
 23f9c28:	e7ba      	b.n	23f9ba0 <floor+0x50>
 23f9c2a:	2d14      	cmp	r5, #20
 23f9c2c:	d008      	beq.n	23f9c40 <floor+0xf0>
 23f9c2e:	2301      	movs	r3, #1
 23f9c30:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23f9c34:	fa03 f505 	lsl.w	r5, r3, r5
 23f9c38:	19ae      	adds	r6, r5, r6
 23f9c3a:	bf28      	it	cs
 23f9c3c:	18e4      	addcs	r4, r4, r3
 23f9c3e:	e7e0      	b.n	23f9c02 <floor+0xb2>
 23f9c40:	3401      	adds	r4, #1
 23f9c42:	e7de      	b.n	23f9c02 <floor+0xb2>
 23f9c44:	f3af 8000 	nop.w
 23f9c48:	8800759c 	.word	0x8800759c
 23f9c4c:	7e37e43c 	.word	0x7e37e43c
 23f9c50:	000fffff 	.word	0x000fffff
 23f9c54:	bff00000 	.word	0xbff00000

023f9c58 <frexp>:
 23f9c58:	b538      	push	{r3, r4, r5, lr}
 23f9c5a:	ec53 2b10 	vmov	r2, r3, d0
 23f9c5e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23f9c62:	4d15      	ldr	r5, [pc, #84]	; (23f9cb8 <frexp+0x60>)
 23f9c64:	4604      	mov	r4, r0
 23f9c66:	2000      	movs	r0, #0
 23f9c68:	42a9      	cmp	r1, r5
 23f9c6a:	6020      	str	r0, [r4, #0]
 23f9c6c:	dc20      	bgt.n	23f9cb0 <frexp+0x58>
 23f9c6e:	ee10 5a10 	vmov	r5, s0
 23f9c72:	430d      	orrs	r5, r1
 23f9c74:	d01c      	beq.n	23f9cb0 <frexp+0x58>
 23f9c76:	4d11      	ldr	r5, [pc, #68]	; (23f9cbc <frexp+0x64>)
 23f9c78:	469c      	mov	ip, r3
 23f9c7a:	401d      	ands	r5, r3
 23f9c7c:	b965      	cbnz	r5, 23f9c98 <frexp+0x40>
 23f9c7e:	4619      	mov	r1, r3
 23f9c80:	2200      	movs	r2, #0
 23f9c82:	ee10 0a10 	vmov	r0, s0
 23f9c86:	4b0e      	ldr	r3, [pc, #56]	; (23f9cc0 <frexp+0x68>)
 23f9c88:	f7f3 f80e 	bl	23ecca8 <__aeabi_dmul>
 23f9c8c:	4602      	mov	r2, r0
 23f9c8e:	468c      	mov	ip, r1
 23f9c90:	f06f 0035 	mvn.w	r0, #53	; 0x35
 23f9c94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9c98:	1509      	asrs	r1, r1, #20
 23f9c9a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 23f9c9e:	4401      	add	r1, r0
 23f9ca0:	6021      	str	r1, [r4, #0]
 23f9ca2:	4908      	ldr	r1, [pc, #32]	; (23f9cc4 <frexp+0x6c>)
 23f9ca4:	ea0c 0101 	and.w	r1, ip, r1
 23f9ca8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 23f9cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23f9cb0:	ec43 2b10 	vmov	d0, r2, r3
 23f9cb4:	bd38      	pop	{r3, r4, r5, pc}
 23f9cb6:	bf00      	nop
 23f9cb8:	7fefffff 	.word	0x7fefffff
 23f9cbc:	7ff00000 	.word	0x7ff00000
 23f9cc0:	43500000 	.word	0x43500000
 23f9cc4:	800fffff 	.word	0x800fffff

023f9cc8 <round>:
 23f9cc8:	b538      	push	{r3, r4, r5, lr}
 23f9cca:	ec53 2b10 	vmov	r2, r3, d0
 23f9cce:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23f9cd2:	461c      	mov	r4, r3
 23f9cd4:	ee10 0a10 	vmov	r0, s0
 23f9cd8:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23f9cdc:	2913      	cmp	r1, #19
 23f9cde:	dc1c      	bgt.n	23f9d1a <round+0x52>
 23f9ce0:	2900      	cmp	r1, #0
 23f9ce2:	db13      	blt.n	23f9d0c <round+0x44>
 23f9ce4:	4d20      	ldr	r5, [pc, #128]	; (23f9d68 <round+0xa0>)
 23f9ce6:	fa45 fc01 	asr.w	ip, r5, r1
 23f9cea:	ea03 050c 	and.w	r5, r3, ip
 23f9cee:	4328      	orrs	r0, r5
 23f9cf0:	d018      	beq.n	23f9d24 <round+0x5c>
 23f9cf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 23f9cf6:	2000      	movs	r0, #0
 23f9cf8:	fa43 f101 	asr.w	r1, r3, r1
 23f9cfc:	440c      	add	r4, r1
 23f9cfe:	ea24 040c 	bic.w	r4, r4, ip
 23f9d02:	4623      	mov	r3, r4
 23f9d04:	4602      	mov	r2, r0
 23f9d06:	ec43 2b10 	vmov	d0, r2, r3
 23f9d0a:	bd38      	pop	{r3, r4, r5, pc}
 23f9d0c:	3101      	adds	r1, #1
 23f9d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 23f9d12:	d024      	beq.n	23f9d5e <round+0x96>
 23f9d14:	461c      	mov	r4, r3
 23f9d16:	2000      	movs	r0, #0
 23f9d18:	e7f3      	b.n	23f9d02 <round+0x3a>
 23f9d1a:	2933      	cmp	r1, #51	; 0x33
 23f9d1c:	dd05      	ble.n	23f9d2a <round+0x62>
 23f9d1e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23f9d22:	d016      	beq.n	23f9d52 <round+0x8a>
 23f9d24:	ec43 2b10 	vmov	d0, r2, r3
 23f9d28:	bd38      	pop	{r3, r4, r5, pc}
 23f9d2a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23f9d2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23f9d32:	fa25 fc0c 	lsr.w	ip, r5, ip
 23f9d36:	ea12 0f0c 	tst.w	r2, ip
 23f9d3a:	d0f3      	beq.n	23f9d24 <round+0x5c>
 23f9d3c:	2301      	movs	r3, #1
 23f9d3e:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 23f9d42:	fa03 f101 	lsl.w	r1, r3, r1
 23f9d46:	1840      	adds	r0, r0, r1
 23f9d48:	bf28      	it	cs
 23f9d4a:	18e4      	addcs	r4, r4, r3
 23f9d4c:	ea20 000c 	bic.w	r0, r0, ip
 23f9d50:	e7d7      	b.n	23f9d02 <round+0x3a>
 23f9d52:	4619      	mov	r1, r3
 23f9d54:	f7f2 fdf2 	bl	23ec93c <__adddf3>
 23f9d58:	ec41 0b10 	vmov	d0, r0, r1
 23f9d5c:	bd38      	pop	{r3, r4, r5, pc}
 23f9d5e:	4c03      	ldr	r4, [pc, #12]	; (23f9d6c <round+0xa4>)
 23f9d60:	2000      	movs	r0, #0
 23f9d62:	431c      	orrs	r4, r3
 23f9d64:	e7cd      	b.n	23f9d02 <round+0x3a>
 23f9d66:	bf00      	nop
 23f9d68:	000fffff 	.word	0x000fffff
 23f9d6c:	3ff00000 	.word	0x3ff00000

023f9d70 <sin>:
 23f9d70:	ec51 0b10 	vmov	r0, r1, d0
 23f9d74:	4a26      	ldr	r2, [pc, #152]	; (23f9e10 <sin+0xa0>)
 23f9d76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9d7a:	4293      	cmp	r3, r2
 23f9d7c:	dd27      	ble.n	23f9dce <sin+0x5e>
 23f9d7e:	4a25      	ldr	r2, [pc, #148]	; (23f9e14 <sin+0xa4>)
 23f9d80:	4293      	cmp	r3, r2
 23f9d82:	b500      	push	{lr}
 23f9d84:	b085      	sub	sp, #20
 23f9d86:	dd09      	ble.n	23f9d9c <sin+0x2c>
 23f9d88:	ee10 2a10 	vmov	r2, s0
 23f9d8c:	460b      	mov	r3, r1
 23f9d8e:	f7f2 fdd3 	bl	23ec938 <__aeabi_dsub>
 23f9d92:	ec41 0b10 	vmov	d0, r0, r1
 23f9d96:	b005      	add	sp, #20
 23f9d98:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9d9c:	4668      	mov	r0, sp
 23f9d9e:	f000 f90b 	bl	23f9fb8 <__ieee754_rem_pio2>
 23f9da2:	f000 0003 	and.w	r0, r0, #3
 23f9da6:	2801      	cmp	r0, #1
 23f9da8:	d016      	beq.n	23f9dd8 <sin+0x68>
 23f9daa:	2802      	cmp	r0, #2
 23f9dac:	d023      	beq.n	23f9df6 <sin+0x86>
 23f9dae:	b1d0      	cbz	r0, 23f9de6 <sin+0x76>
 23f9db0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9db4:	ed9d 0b00 	vldr	d0, [sp]
 23f9db8:	f000 fcde 	bl	23fa778 <__kernel_cos>
 23f9dbc:	ec53 2b10 	vmov	r2, r3, d0
 23f9dc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f9dc4:	ee00 3a90 	vmov	s1, r3
 23f9dc8:	b005      	add	sp, #20
 23f9dca:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9dce:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23f9e08 <sin+0x98>
 23f9dd2:	2000      	movs	r0, #0
 23f9dd4:	f001 ba34 	b.w	23fb240 <__kernel_sin>
 23f9dd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9ddc:	ed9d 0b00 	vldr	d0, [sp]
 23f9de0:	f000 fcca 	bl	23fa778 <__kernel_cos>
 23f9de4:	e7d7      	b.n	23f9d96 <sin+0x26>
 23f9de6:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9dea:	ed9d 0b00 	vldr	d0, [sp]
 23f9dee:	2001      	movs	r0, #1
 23f9df0:	f001 fa26 	bl	23fb240 <__kernel_sin>
 23f9df4:	e7cf      	b.n	23f9d96 <sin+0x26>
 23f9df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9dfa:	ed9d 0b00 	vldr	d0, [sp]
 23f9dfe:	2001      	movs	r0, #1
 23f9e00:	f001 fa1e 	bl	23fb240 <__kernel_sin>
 23f9e04:	e7da      	b.n	23f9dbc <sin+0x4c>
 23f9e06:	bf00      	nop
	...
 23f9e10:	3fe921fb 	.word	0x3fe921fb
 23f9e14:	7fefffff 	.word	0x7fefffff

023f9e18 <frexpf>:
 23f9e18:	2300      	movs	r3, #0
 23f9e1a:	ee10 2a10 	vmov	r2, s0
 23f9e1e:	ee10 1a10 	vmov	r1, s0
 23f9e22:	6003      	str	r3, [r0, #0]
 23f9e24:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 23f9e28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 23f9e2c:	da1c      	bge.n	23f9e68 <frexpf+0x50>
 23f9e2e:	fab3 fc83 	clz	ip, r3
 23f9e32:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 23f9e36:	b1bb      	cbz	r3, 23f9e68 <frexpf+0x50>
 23f9e38:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 23f9e3c:	d109      	bne.n	23f9e52 <frexpf+0x3a>
 23f9e3e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 23f9e70 <frexpf+0x58>
 23f9e42:	f06f 0c18 	mvn.w	ip, #24
 23f9e46:	ee60 7a27 	vmul.f32	s15, s0, s15
 23f9e4a:	ee17 1a90 	vmov	r1, s15
 23f9e4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9e52:	15db      	asrs	r3, r3, #23
 23f9e54:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 23f9e58:	3b7e      	subs	r3, #126	; 0x7e
 23f9e5a:	f041 527c 	orr.w	r2, r1, #1056964608	; 0x3f000000
 23f9e5e:	4463      	add	r3, ip
 23f9e60:	ee00 2a10 	vmov	s0, r2
 23f9e64:	6003      	str	r3, [r0, #0]
 23f9e66:	4770      	bx	lr
 23f9e68:	ee00 2a10 	vmov	s0, r2
 23f9e6c:	4770      	bx	lr
 23f9e6e:	bf00      	nop
 23f9e70:	4c000000 	.word	0x4c000000

023f9e74 <sqrt>:
 23f9e74:	b538      	push	{r3, r4, r5, lr}
 23f9e76:	ed2d 8b02 	vpush	{d8}
 23f9e7a:	ec55 4b10 	vmov	r4, r5, d0
 23f9e7e:	f000 fac1 	bl	23fa404 <__ieee754_sqrt>
 23f9e82:	4b18      	ldr	r3, [pc, #96]	; (23f9ee4 <sqrt+0x70>)
 23f9e84:	eeb0 8a40 	vmov.f32	s16, s0
 23f9e88:	eef0 8a60 	vmov.f32	s17, s1
 23f9e8c:	f993 3000 	ldrsb.w	r3, [r3]
 23f9e90:	3301      	adds	r3, #1
 23f9e92:	d00d      	beq.n	23f9eb0 <sqrt+0x3c>
 23f9e94:	4622      	mov	r2, r4
 23f9e96:	462b      	mov	r3, r5
 23f9e98:	4620      	mov	r0, r4
 23f9e9a:	4629      	mov	r1, r5
 23f9e9c:	f7f3 f99e 	bl	23ed1dc <__aeabi_dcmpun>
 23f9ea0:	b930      	cbnz	r0, 23f9eb0 <sqrt+0x3c>
 23f9ea2:	2200      	movs	r2, #0
 23f9ea4:	2300      	movs	r3, #0
 23f9ea6:	4620      	mov	r0, r4
 23f9ea8:	4629      	mov	r1, r5
 23f9eaa:	f7f3 f96f 	bl	23ed18c <__aeabi_dcmplt>
 23f9eae:	b930      	cbnz	r0, 23f9ebe <sqrt+0x4a>
 23f9eb0:	eeb0 0a48 	vmov.f32	s0, s16
 23f9eb4:	eef0 0a68 	vmov.f32	s1, s17
 23f9eb8:	ecbd 8b02 	vpop	{d8}
 23f9ebc:	bd38      	pop	{r3, r4, r5, pc}
 23f9ebe:	f7fd fbc9 	bl	23f7654 <__errno>
 23f9ec2:	2200      	movs	r2, #0
 23f9ec4:	2300      	movs	r3, #0
 23f9ec6:	2121      	movs	r1, #33	; 0x21
 23f9ec8:	6001      	str	r1, [r0, #0]
 23f9eca:	4610      	mov	r0, r2
 23f9ecc:	4619      	mov	r1, r3
 23f9ece:	f7f3 f815 	bl	23ecefc <__aeabi_ddiv>
 23f9ed2:	ec41 0b18 	vmov	d8, r0, r1
 23f9ed6:	eeb0 0a48 	vmov.f32	s0, s16
 23f9eda:	eef0 0a68 	vmov.f32	s1, s17
 23f9ede:	ecbd 8b02 	vpop	{d8}
 23f9ee2:	bd38      	pop	{r3, r4, r5, pc}
 23f9ee4:	10079c2c 	.word	0x10079c2c

023f9ee8 <expf>:
 23f9ee8:	b508      	push	{r3, lr}
 23f9eea:	ed2d 8b02 	vpush	{d8}
 23f9eee:	eeb0 8a40 	vmov.f32	s16, s0
 23f9ef2:	f000 fb49 	bl	23fa588 <__ieee754_expf>
 23f9ef6:	4b16      	ldr	r3, [pc, #88]	; (23f9f50 <expf+0x68>)
 23f9ef8:	eef0 8a40 	vmov.f32	s17, s0
 23f9efc:	f993 3000 	ldrsb.w	r3, [r3]
 23f9f00:	3301      	adds	r3, #1
 23f9f02:	d012      	beq.n	23f9f2a <expf+0x42>
 23f9f04:	eeb0 0a48 	vmov.f32	s0, s16
 23f9f08:	f001 faf6 	bl	23fb4f8 <finitef>
 23f9f0c:	b168      	cbz	r0, 23f9f2a <expf+0x42>
 23f9f0e:	eddf 7a11 	vldr	s15, [pc, #68]	; 23f9f54 <expf+0x6c>
 23f9f12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f9f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f1a:	dc12      	bgt.n	23f9f42 <expf+0x5a>
 23f9f1c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23f9f58 <expf+0x70>
 23f9f20:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f9f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f28:	d404      	bmi.n	23f9f34 <expf+0x4c>
 23f9f2a:	eeb0 0a68 	vmov.f32	s0, s17
 23f9f2e:	ecbd 8b02 	vpop	{d8}
 23f9f32:	bd08      	pop	{r3, pc}
 23f9f34:	f7fd fb8e 	bl	23f7654 <__errno>
 23f9f38:	2322      	movs	r3, #34	; 0x22
 23f9f3a:	eddf 8a08 	vldr	s17, [pc, #32]	; 23f9f5c <expf+0x74>
 23f9f3e:	6003      	str	r3, [r0, #0]
 23f9f40:	e7f3      	b.n	23f9f2a <expf+0x42>
 23f9f42:	f7fd fb87 	bl	23f7654 <__errno>
 23f9f46:	2322      	movs	r3, #34	; 0x22
 23f9f48:	eddf 8a05 	vldr	s17, [pc, #20]	; 23f9f60 <expf+0x78>
 23f9f4c:	6003      	str	r3, [r0, #0]
 23f9f4e:	e7ec      	b.n	23f9f2a <expf+0x42>
 23f9f50:	10079c2c 	.word	0x10079c2c
 23f9f54:	42b17180 	.word	0x42b17180
 23f9f58:	c2cff1b5 	.word	0xc2cff1b5
 23f9f5c:	00000000 	.word	0x00000000
 23f9f60:	7f800000 	.word	0x7f800000

023f9f64 <sqrtf>:
 23f9f64:	b508      	push	{r3, lr}
 23f9f66:	ed2d 8b02 	vpush	{d8}
 23f9f6a:	eeb0 8a40 	vmov.f32	s16, s0
 23f9f6e:	f000 fbfd 	bl	23fa76c <__ieee754_sqrtf>
 23f9f72:	4b0e      	ldr	r3, [pc, #56]	; (23f9fac <sqrtf+0x48>)
 23f9f74:	f993 3000 	ldrsb.w	r3, [r3]
 23f9f78:	3301      	adds	r3, #1
 23f9f7a:	d00b      	beq.n	23f9f94 <sqrtf+0x30>
 23f9f7c:	eeb4 8a48 	vcmp.f32	s16, s16
 23f9f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f84:	d606      	bvs.n	23f9f94 <sqrtf+0x30>
 23f9f86:	eddf 8a0a 	vldr	s17, [pc, #40]	; 23f9fb0 <sqrtf+0x4c>
 23f9f8a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23f9f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9f92:	d402      	bmi.n	23f9f9a <sqrtf+0x36>
 23f9f94:	ecbd 8b02 	vpop	{d8}
 23f9f98:	bd08      	pop	{r3, pc}
 23f9f9a:	f7fd fb5b 	bl	23f7654 <__errno>
 23f9f9e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 23f9fa2:	2321      	movs	r3, #33	; 0x21
 23f9fa4:	6003      	str	r3, [r0, #0]
 23f9fa6:	ecbd 8b02 	vpop	{d8}
 23f9faa:	bd08      	pop	{r3, pc}
 23f9fac:	10079c2c 	.word	0x10079c2c
	...

023f9fb8 <__ieee754_rem_pio2>:
 23f9fb8:	ec53 2b10 	vmov	r2, r3, d0
 23f9fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9fc0:	4991      	ldr	r1, [pc, #580]	; (23fa208 <__ieee754_rem_pio2+0x250>)
 23f9fc2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23f9fc6:	4604      	mov	r4, r0
 23f9fc8:	428d      	cmp	r5, r1
 23f9fca:	ed2d 8b06 	vpush	{d8-d10}
 23f9fce:	b08b      	sub	sp, #44	; 0x2c
 23f9fd0:	f340 808c 	ble.w	23fa0ec <__ieee754_rem_pio2+0x134>
 23f9fd4:	498d      	ldr	r1, [pc, #564]	; (23fa20c <__ieee754_rem_pio2+0x254>)
 23f9fd6:	461f      	mov	r7, r3
 23f9fd8:	428d      	cmp	r5, r1
 23f9fda:	dc2b      	bgt.n	23fa034 <__ieee754_rem_pio2+0x7c>
 23f9fdc:	2f00      	cmp	r7, #0
 23f9fde:	4619      	mov	r1, r3
 23f9fe0:	ee10 0a10 	vmov	r0, s0
 23f9fe4:	a37e      	add	r3, pc, #504	; (adr r3, 23fa1e0 <__ieee754_rem_pio2+0x228>)
 23f9fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9fea:	f340 81b8 	ble.w	23fa35e <__ieee754_rem_pio2+0x3a6>
 23f9fee:	f7f2 fca3 	bl	23ec938 <__aeabi_dsub>
 23f9ff2:	4b87      	ldr	r3, [pc, #540]	; (23fa210 <__ieee754_rem_pio2+0x258>)
 23f9ff4:	4680      	mov	r8, r0
 23f9ff6:	4689      	mov	r9, r1
 23f9ff8:	429d      	cmp	r5, r3
 23f9ffa:	f000 808f 	beq.w	23fa11c <__ieee754_rem_pio2+0x164>
 23f9ffe:	2601      	movs	r6, #1
 23fa000:	a379      	add	r3, pc, #484	; (adr r3, 23fa1e8 <__ieee754_rem_pio2+0x230>)
 23fa002:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa006:	f7f2 fc97 	bl	23ec938 <__aeabi_dsub>
 23fa00a:	4602      	mov	r2, r0
 23fa00c:	460b      	mov	r3, r1
 23fa00e:	4640      	mov	r0, r8
 23fa010:	4649      	mov	r1, r9
 23fa012:	e9c4 2300 	strd	r2, r3, [r4]
 23fa016:	f7f2 fc8f 	bl	23ec938 <__aeabi_dsub>
 23fa01a:	a373      	add	r3, pc, #460	; (adr r3, 23fa1e8 <__ieee754_rem_pio2+0x230>)
 23fa01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa020:	f7f2 fc8a 	bl	23ec938 <__aeabi_dsub>
 23fa024:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa028:	4630      	mov	r0, r6
 23fa02a:	b00b      	add	sp, #44	; 0x2c
 23fa02c:	ecbd 8b06 	vpop	{d8-d10}
 23fa030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa034:	4977      	ldr	r1, [pc, #476]	; (23fa214 <__ieee754_rem_pio2+0x25c>)
 23fa036:	428d      	cmp	r5, r1
 23fa038:	f340 8092 	ble.w	23fa160 <__ieee754_rem_pio2+0x1a8>
 23fa03c:	4976      	ldr	r1, [pc, #472]	; (23fa218 <__ieee754_rem_pio2+0x260>)
 23fa03e:	428d      	cmp	r5, r1
 23fa040:	dc61      	bgt.n	23fa106 <__ieee754_rem_pio2+0x14e>
 23fa042:	152e      	asrs	r6, r5, #20
 23fa044:	ee10 0a10 	vmov	r0, s0
 23fa048:	4690      	mov	r8, r2
 23fa04a:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23fa04e:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23fa052:	4689      	mov	r9, r1
 23fa054:	f7f3 f8d8 	bl	23ed208 <__aeabi_d2iz>
 23fa058:	f7f2 fdbc 	bl	23ecbd4 <__aeabi_i2d>
 23fa05c:	4602      	mov	r2, r0
 23fa05e:	460b      	mov	r3, r1
 23fa060:	4640      	mov	r0, r8
 23fa062:	4649      	mov	r1, r9
 23fa064:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fa068:	f7f2 fc66 	bl	23ec938 <__aeabi_dsub>
 23fa06c:	2200      	movs	r2, #0
 23fa06e:	4b6b      	ldr	r3, [pc, #428]	; (23fa21c <__ieee754_rem_pio2+0x264>)
 23fa070:	f7f2 fe1a 	bl	23ecca8 <__aeabi_dmul>
 23fa074:	4689      	mov	r9, r1
 23fa076:	4680      	mov	r8, r0
 23fa078:	f7f3 f8c6 	bl	23ed208 <__aeabi_d2iz>
 23fa07c:	4605      	mov	r5, r0
 23fa07e:	f7f2 fda9 	bl	23ecbd4 <__aeabi_i2d>
 23fa082:	4602      	mov	r2, r0
 23fa084:	460b      	mov	r3, r1
 23fa086:	4640      	mov	r0, r8
 23fa088:	4649      	mov	r1, r9
 23fa08a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fa08e:	f7f2 fc53 	bl	23ec938 <__aeabi_dsub>
 23fa092:	2200      	movs	r2, #0
 23fa094:	4b61      	ldr	r3, [pc, #388]	; (23fa21c <__ieee754_rem_pio2+0x264>)
 23fa096:	f7f2 fe07 	bl	23ecca8 <__aeabi_dmul>
 23fa09a:	4602      	mov	r2, r0
 23fa09c:	460b      	mov	r3, r1
 23fa09e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fa0a2:	2200      	movs	r2, #0
 23fa0a4:	2300      	movs	r3, #0
 23fa0a6:	f7f3 f867 	bl	23ed178 <__aeabi_dcmpeq>
 23fa0aa:	2800      	cmp	r0, #0
 23fa0ac:	f000 8155 	beq.w	23fa35a <__ieee754_rem_pio2+0x3a2>
 23fa0b0:	2d00      	cmp	r5, #0
 23fa0b2:	bf0c      	ite	eq
 23fa0b4:	2301      	moveq	r3, #1
 23fa0b6:	2302      	movne	r3, #2
 23fa0b8:	4959      	ldr	r1, [pc, #356]	; (23fa220 <__ieee754_rem_pio2+0x268>)
 23fa0ba:	4632      	mov	r2, r6
 23fa0bc:	a804      	add	r0, sp, #16
 23fa0be:	9101      	str	r1, [sp, #4]
 23fa0c0:	2102      	movs	r1, #2
 23fa0c2:	9100      	str	r1, [sp, #0]
 23fa0c4:	4621      	mov	r1, r4
 23fa0c6:	f000 fc97 	bl	23fa9f8 <__kernel_rem_pio2>
 23fa0ca:	2f00      	cmp	r7, #0
 23fa0cc:	4606      	mov	r6, r0
 23fa0ce:	daab      	bge.n	23fa028 <__ieee754_rem_pio2+0x70>
 23fa0d0:	6861      	ldr	r1, [r4, #4]
 23fa0d2:	4246      	negs	r6, r0
 23fa0d4:	6822      	ldr	r2, [r4, #0]
 23fa0d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa0da:	68e1      	ldr	r1, [r4, #12]
 23fa0dc:	e9c4 2300 	strd	r2, r3, [r4]
 23fa0e0:	68a2      	ldr	r2, [r4, #8]
 23fa0e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa0e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fa0ea:	e79d      	b.n	23fa028 <__ieee754_rem_pio2+0x70>
 23fa0ec:	2000      	movs	r0, #0
 23fa0ee:	2100      	movs	r1, #0
 23fa0f0:	2600      	movs	r6, #0
 23fa0f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa0f6:	4630      	mov	r0, r6
 23fa0f8:	ed84 0b00 	vstr	d0, [r4]
 23fa0fc:	b00b      	add	sp, #44	; 0x2c
 23fa0fe:	ecbd 8b06 	vpop	{d8-d10}
 23fa102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa106:	ee10 0a10 	vmov	r0, s0
 23fa10a:	4619      	mov	r1, r3
 23fa10c:	f7f2 fc14 	bl	23ec938 <__aeabi_dsub>
 23fa110:	2600      	movs	r6, #0
 23fa112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa116:	e9c4 0100 	strd	r0, r1, [r4]
 23fa11a:	e785      	b.n	23fa028 <__ieee754_rem_pio2+0x70>
 23fa11c:	a334      	add	r3, pc, #208	; (adr r3, 23fa1f0 <__ieee754_rem_pio2+0x238>)
 23fa11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa122:	f7f2 fc09 	bl	23ec938 <__aeabi_dsub>
 23fa126:	4680      	mov	r8, r0
 23fa128:	4689      	mov	r9, r1
 23fa12a:	2601      	movs	r6, #1
 23fa12c:	a332      	add	r3, pc, #200	; (adr r3, 23fa1f8 <__ieee754_rem_pio2+0x240>)
 23fa12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa132:	f7f2 fc01 	bl	23ec938 <__aeabi_dsub>
 23fa136:	4602      	mov	r2, r0
 23fa138:	460b      	mov	r3, r1
 23fa13a:	4640      	mov	r0, r8
 23fa13c:	4649      	mov	r1, r9
 23fa13e:	e9c4 2300 	strd	r2, r3, [r4]
 23fa142:	f7f2 fbf9 	bl	23ec938 <__aeabi_dsub>
 23fa146:	a32c      	add	r3, pc, #176	; (adr r3, 23fa1f8 <__ieee754_rem_pio2+0x240>)
 23fa148:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa14c:	f7f2 fbf4 	bl	23ec938 <__aeabi_dsub>
 23fa150:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa154:	4630      	mov	r0, r6
 23fa156:	b00b      	add	sp, #44	; 0x2c
 23fa158:	ecbd 8b06 	vpop	{d8-d10}
 23fa15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa160:	f7ff fcea 	bl	23f9b38 <fabs>
 23fa164:	ee10 0a10 	vmov	r0, s0
 23fa168:	ec59 8b10 	vmov	r8, r9, d0
 23fa16c:	a324      	add	r3, pc, #144	; (adr r3, 23fa200 <__ieee754_rem_pio2+0x248>)
 23fa16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa172:	4649      	mov	r1, r9
 23fa174:	f7f2 fd98 	bl	23ecca8 <__aeabi_dmul>
 23fa178:	2200      	movs	r2, #0
 23fa17a:	4b2a      	ldr	r3, [pc, #168]	; (23fa224 <__ieee754_rem_pio2+0x26c>)
 23fa17c:	f7f2 fbde 	bl	23ec93c <__adddf3>
 23fa180:	f7f3 f842 	bl	23ed208 <__aeabi_d2iz>
 23fa184:	4606      	mov	r6, r0
 23fa186:	f7f2 fd25 	bl	23ecbd4 <__aeabi_i2d>
 23fa18a:	4602      	mov	r2, r0
 23fa18c:	460b      	mov	r3, r1
 23fa18e:	ec43 2b18 	vmov	d8, r2, r3
 23fa192:	a313      	add	r3, pc, #76	; (adr r3, 23fa1e0 <__ieee754_rem_pio2+0x228>)
 23fa194:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa198:	f7f2 fd86 	bl	23ecca8 <__aeabi_dmul>
 23fa19c:	4602      	mov	r2, r0
 23fa19e:	460b      	mov	r3, r1
 23fa1a0:	4640      	mov	r0, r8
 23fa1a2:	4649      	mov	r1, r9
 23fa1a4:	eeb0 9a48 	vmov.f32	s18, s16
 23fa1a8:	eef0 9a68 	vmov.f32	s19, s17
 23fa1ac:	f7f2 fbc4 	bl	23ec938 <__aeabi_dsub>
 23fa1b0:	4682      	mov	sl, r0
 23fa1b2:	468b      	mov	fp, r1
 23fa1b4:	a30c      	add	r3, pc, #48	; (adr r3, 23fa1e8 <__ieee754_rem_pio2+0x230>)
 23fa1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa1ba:	ec51 0b18 	vmov	r0, r1, d8
 23fa1be:	f7f2 fd73 	bl	23ecca8 <__aeabi_dmul>
 23fa1c2:	2e1f      	cmp	r6, #31
 23fa1c4:	ec41 0b18 	vmov	d8, r0, r1
 23fa1c8:	dc30      	bgt.n	23fa22c <__ieee754_rem_pio2+0x274>
 23fa1ca:	4b17      	ldr	r3, [pc, #92]	; (23fa228 <__ieee754_rem_pio2+0x270>)
 23fa1cc:	1e72      	subs	r2, r6, #1
 23fa1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fa1d2:	42ab      	cmp	r3, r5
 23fa1d4:	d02a      	beq.n	23fa22c <__ieee754_rem_pio2+0x274>
 23fa1d6:	4602      	mov	r2, r0
 23fa1d8:	460b      	mov	r3, r1
 23fa1da:	e09d      	b.n	23fa318 <__ieee754_rem_pio2+0x360>
 23fa1dc:	f3af 8000 	nop.w
 23fa1e0:	54400000 	.word	0x54400000
 23fa1e4:	3ff921fb 	.word	0x3ff921fb
 23fa1e8:	1a626331 	.word	0x1a626331
 23fa1ec:	3dd0b461 	.word	0x3dd0b461
 23fa1f0:	1a600000 	.word	0x1a600000
 23fa1f4:	3dd0b461 	.word	0x3dd0b461
 23fa1f8:	2e037073 	.word	0x2e037073
 23fa1fc:	3ba3198a 	.word	0x3ba3198a
 23fa200:	6dc9c883 	.word	0x6dc9c883
 23fa204:	3fe45f30 	.word	0x3fe45f30
 23fa208:	3fe921fb 	.word	0x3fe921fb
 23fa20c:	4002d97b 	.word	0x4002d97b
 23fa210:	3ff921fb 	.word	0x3ff921fb
 23fa214:	413921fb 	.word	0x413921fb
 23fa218:	7fefffff 	.word	0x7fefffff
 23fa21c:	41700000 	.word	0x41700000
 23fa220:	023ffc68 	.word	0x023ffc68
 23fa224:	3fe00000 	.word	0x3fe00000
 23fa228:	023ffbe8 	.word	0x023ffbe8
 23fa22c:	152b      	asrs	r3, r5, #20
 23fa22e:	4650      	mov	r0, sl
 23fa230:	4659      	mov	r1, fp
 23fa232:	9303      	str	r3, [sp, #12]
 23fa234:	ec53 2b18 	vmov	r2, r3, d8
 23fa238:	f7f2 fb7e 	bl	23ec938 <__aeabi_dsub>
 23fa23c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fa240:	4680      	mov	r8, r0
 23fa242:	4689      	mov	r9, r1
 23fa244:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fa248:	2d10      	cmp	r5, #16
 23fa24a:	dd6b      	ble.n	23fa324 <__ieee754_rem_pio2+0x36c>
 23fa24c:	a364      	add	r3, pc, #400	; (adr r3, 23fa3e0 <__ieee754_rem_pio2+0x428>)
 23fa24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa252:	ec51 0b19 	vmov	r0, r1, d9
 23fa256:	f7f2 fd27 	bl	23ecca8 <__aeabi_dmul>
 23fa25a:	4680      	mov	r8, r0
 23fa25c:	4689      	mov	r9, r1
 23fa25e:	4650      	mov	r0, sl
 23fa260:	4642      	mov	r2, r8
 23fa262:	4659      	mov	r1, fp
 23fa264:	464b      	mov	r3, r9
 23fa266:	f7f2 fb67 	bl	23ec938 <__aeabi_dsub>
 23fa26a:	4602      	mov	r2, r0
 23fa26c:	460b      	mov	r3, r1
 23fa26e:	4650      	mov	r0, sl
 23fa270:	4659      	mov	r1, fp
 23fa272:	4692      	mov	sl, r2
 23fa274:	469b      	mov	fp, r3
 23fa276:	ec43 2b1a 	vmov	d10, r2, r3
 23fa27a:	f7f2 fb5d 	bl	23ec938 <__aeabi_dsub>
 23fa27e:	4642      	mov	r2, r8
 23fa280:	464b      	mov	r3, r9
 23fa282:	f7f2 fb59 	bl	23ec938 <__aeabi_dsub>
 23fa286:	4680      	mov	r8, r0
 23fa288:	4689      	mov	r9, r1
 23fa28a:	a357      	add	r3, pc, #348	; (adr r3, 23fa3e8 <__ieee754_rem_pio2+0x430>)
 23fa28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa290:	ec51 0b19 	vmov	r0, r1, d9
 23fa294:	f7f2 fd08 	bl	23ecca8 <__aeabi_dmul>
 23fa298:	4642      	mov	r2, r8
 23fa29a:	464b      	mov	r3, r9
 23fa29c:	f7f2 fb4c 	bl	23ec938 <__aeabi_dsub>
 23fa2a0:	4602      	mov	r2, r0
 23fa2a2:	460b      	mov	r3, r1
 23fa2a4:	4650      	mov	r0, sl
 23fa2a6:	4659      	mov	r1, fp
 23fa2a8:	ec43 2b18 	vmov	d8, r2, r3
 23fa2ac:	f7f2 fb44 	bl	23ec938 <__aeabi_dsub>
 23fa2b0:	9a03      	ldr	r2, [sp, #12]
 23fa2b2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fa2b6:	4680      	mov	r8, r0
 23fa2b8:	4689      	mov	r9, r1
 23fa2ba:	1ad3      	subs	r3, r2, r3
 23fa2bc:	2b31      	cmp	r3, #49	; 0x31
 23fa2be:	dd31      	ble.n	23fa324 <__ieee754_rem_pio2+0x36c>
 23fa2c0:	a34c      	add	r3, pc, #304	; (adr r3, 23fa3f4 <__ieee754_rem_pio2+0x43c>)
 23fa2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa2c6:	ec51 0b19 	vmov	r0, r1, d9
 23fa2ca:	f7f2 fced 	bl	23ecca8 <__aeabi_dmul>
 23fa2ce:	4680      	mov	r8, r0
 23fa2d0:	4689      	mov	r9, r1
 23fa2d2:	4642      	mov	r2, r8
 23fa2d4:	464b      	mov	r3, r9
 23fa2d6:	ec51 0b1a 	vmov	r0, r1, d10
 23fa2da:	f7f2 fb2d 	bl	23ec938 <__aeabi_dsub>
 23fa2de:	4682      	mov	sl, r0
 23fa2e0:	468b      	mov	fp, r1
 23fa2e2:	4652      	mov	r2, sl
 23fa2e4:	465b      	mov	r3, fp
 23fa2e6:	ec51 0b1a 	vmov	r0, r1, d10
 23fa2ea:	f7f2 fb25 	bl	23ec938 <__aeabi_dsub>
 23fa2ee:	4642      	mov	r2, r8
 23fa2f0:	464b      	mov	r3, r9
 23fa2f2:	f7f2 fb21 	bl	23ec938 <__aeabi_dsub>
 23fa2f6:	4680      	mov	r8, r0
 23fa2f8:	4689      	mov	r9, r1
 23fa2fa:	a340      	add	r3, pc, #256	; (adr r3, 23fa3fc <__ieee754_rem_pio2+0x444>)
 23fa2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa300:	ec51 0b19 	vmov	r0, r1, d9
 23fa304:	f7f2 fcd0 	bl	23ecca8 <__aeabi_dmul>
 23fa308:	4642      	mov	r2, r8
 23fa30a:	464b      	mov	r3, r9
 23fa30c:	f7f2 fb14 	bl	23ec938 <__aeabi_dsub>
 23fa310:	4602      	mov	r2, r0
 23fa312:	460b      	mov	r3, r1
 23fa314:	ec43 2b18 	vmov	d8, r2, r3
 23fa318:	4650      	mov	r0, sl
 23fa31a:	4659      	mov	r1, fp
 23fa31c:	f7f2 fb0c 	bl	23ec938 <__aeabi_dsub>
 23fa320:	4680      	mov	r8, r0
 23fa322:	4689      	mov	r9, r1
 23fa324:	4642      	mov	r2, r8
 23fa326:	464b      	mov	r3, r9
 23fa328:	4650      	mov	r0, sl
 23fa32a:	4659      	mov	r1, fp
 23fa32c:	e9c4 8900 	strd	r8, r9, [r4]
 23fa330:	f7f2 fb02 	bl	23ec938 <__aeabi_dsub>
 23fa334:	ec53 2b18 	vmov	r2, r3, d8
 23fa338:	f7f2 fafe 	bl	23ec938 <__aeabi_dsub>
 23fa33c:	2f00      	cmp	r7, #0
 23fa33e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa342:	f6bf ae71 	bge.w	23fa028 <__ieee754_rem_pio2+0x70>
 23fa346:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fa34a:	4276      	negs	r6, r6
 23fa34c:	e9c4 8300 	strd	r8, r3, [r4]
 23fa350:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa354:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fa358:	e666      	b.n	23fa028 <__ieee754_rem_pio2+0x70>
 23fa35a:	2303      	movs	r3, #3
 23fa35c:	e6ac      	b.n	23fa0b8 <__ieee754_rem_pio2+0x100>
 23fa35e:	f7f2 faed 	bl	23ec93c <__adddf3>
 23fa362:	4b23      	ldr	r3, [pc, #140]	; (23fa3f0 <__ieee754_rem_pio2+0x438>)
 23fa364:	4680      	mov	r8, r0
 23fa366:	4689      	mov	r9, r1
 23fa368:	429d      	cmp	r5, r3
 23fa36a:	d016      	beq.n	23fa39a <__ieee754_rem_pio2+0x3e2>
 23fa36c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fa370:	a319      	add	r3, pc, #100	; (adr r3, 23fa3d8 <__ieee754_rem_pio2+0x420>)
 23fa372:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa376:	f7f2 fae1 	bl	23ec93c <__adddf3>
 23fa37a:	4602      	mov	r2, r0
 23fa37c:	460b      	mov	r3, r1
 23fa37e:	4640      	mov	r0, r8
 23fa380:	4649      	mov	r1, r9
 23fa382:	e9c4 2300 	strd	r2, r3, [r4]
 23fa386:	f7f2 fad7 	bl	23ec938 <__aeabi_dsub>
 23fa38a:	a313      	add	r3, pc, #76	; (adr r3, 23fa3d8 <__ieee754_rem_pio2+0x420>)
 23fa38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa390:	f7f2 fad4 	bl	23ec93c <__adddf3>
 23fa394:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa398:	e646      	b.n	23fa028 <__ieee754_rem_pio2+0x70>
 23fa39a:	a311      	add	r3, pc, #68	; (adr r3, 23fa3e0 <__ieee754_rem_pio2+0x428>)
 23fa39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3a0:	f7f2 facc 	bl	23ec93c <__adddf3>
 23fa3a4:	4680      	mov	r8, r0
 23fa3a6:	4689      	mov	r9, r1
 23fa3a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fa3ac:	a30e      	add	r3, pc, #56	; (adr r3, 23fa3e8 <__ieee754_rem_pio2+0x430>)
 23fa3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3b2:	f7f2 fac3 	bl	23ec93c <__adddf3>
 23fa3b6:	4602      	mov	r2, r0
 23fa3b8:	460b      	mov	r3, r1
 23fa3ba:	4640      	mov	r0, r8
 23fa3bc:	4649      	mov	r1, r9
 23fa3be:	e9c4 2300 	strd	r2, r3, [r4]
 23fa3c2:	f7f2 fab9 	bl	23ec938 <__aeabi_dsub>
 23fa3c6:	a308      	add	r3, pc, #32	; (adr r3, 23fa3e8 <__ieee754_rem_pio2+0x430>)
 23fa3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3cc:	f7f2 fab6 	bl	23ec93c <__adddf3>
 23fa3d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fa3d4:	e628      	b.n	23fa028 <__ieee754_rem_pio2+0x70>
 23fa3d6:	bf00      	nop
 23fa3d8:	1a626331 	.word	0x1a626331
 23fa3dc:	3dd0b461 	.word	0x3dd0b461
 23fa3e0:	1a600000 	.word	0x1a600000
 23fa3e4:	3dd0b461 	.word	0x3dd0b461
 23fa3e8:	2e037073 	.word	0x2e037073
 23fa3ec:	3ba3198a 	.word	0x3ba3198a
 23fa3f0:	3ff921fb 	.word	0x3ff921fb
 23fa3f4:	2e000000 	.word	0x2e000000
 23fa3f8:	3ba3198a 	.word	0x3ba3198a
 23fa3fc:	252049c1 	.word	0x252049c1
 23fa400:	397b839a 	.word	0x397b839a

023fa404 <__ieee754_sqrt>:
 23fa404:	495e      	ldr	r1, [pc, #376]	; (23fa580 <__ieee754_sqrt+0x17c>)
 23fa406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa40a:	ec55 4b10 	vmov	r4, r5, d0
 23fa40e:	43a9      	bics	r1, r5
 23fa410:	f000 8094 	beq.w	23fa53c <__ieee754_sqrt+0x138>
 23fa414:	2d00      	cmp	r5, #0
 23fa416:	462b      	mov	r3, r5
 23fa418:	ee10 2a10 	vmov	r2, s0
 23fa41c:	dd5a      	ble.n	23fa4d4 <__ieee754_sqrt+0xd0>
 23fa41e:	1528      	asrs	r0, r5, #20
 23fa420:	d067      	beq.n	23fa4f2 <__ieee754_sqrt+0xee>
 23fa422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fa426:	07c1      	lsls	r1, r0, #31
 23fa428:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fa42c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fa430:	d403      	bmi.n	23fa43a <__ieee754_sqrt+0x36>
 23fa432:	005b      	lsls	r3, r3, #1
 23fa434:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fa438:	0052      	lsls	r2, r2, #1
 23fa43a:	0fd1      	lsrs	r1, r2, #31
 23fa43c:	2600      	movs	r6, #0
 23fa43e:	107f      	asrs	r7, r7, #1
 23fa440:	f04f 0c16 	mov.w	ip, #22
 23fa444:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fa448:	46b6      	mov	lr, r6
 23fa44a:	0052      	lsls	r2, r2, #1
 23fa44c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fa450:	eb0e 0001 	add.w	r0, lr, r1
 23fa454:	4298      	cmp	r0, r3
 23fa456:	dc03      	bgt.n	23fa460 <__ieee754_sqrt+0x5c>
 23fa458:	1a1b      	subs	r3, r3, r0
 23fa45a:	eb00 0e01 	add.w	lr, r0, r1
 23fa45e:	440e      	add	r6, r1
 23fa460:	005b      	lsls	r3, r3, #1
 23fa462:	f1bc 0c01 	subs.w	ip, ip, #1
 23fa466:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fa46a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fa46e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fa472:	d1ed      	bne.n	23fa450 <__ieee754_sqrt+0x4c>
 23fa474:	4665      	mov	r5, ip
 23fa476:	2420      	movs	r4, #32
 23fa478:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fa47c:	e014      	b.n	23fa4a8 <__ieee754_sqrt+0xa4>
 23fa47e:	d10a      	bne.n	23fa496 <__ieee754_sqrt+0x92>
 23fa480:	4290      	cmp	r0, r2
 23fa482:	d808      	bhi.n	23fa496 <__ieee754_sqrt+0x92>
 23fa484:	2800      	cmp	r0, #0
 23fa486:	eb00 0c01 	add.w	ip, r0, r1
 23fa48a:	db1d      	blt.n	23fa4c8 <__ieee754_sqrt+0xc4>
 23fa48c:	46f0      	mov	r8, lr
 23fa48e:	2300      	movs	r3, #0
 23fa490:	1a12      	subs	r2, r2, r0
 23fa492:	440d      	add	r5, r1
 23fa494:	46c6      	mov	lr, r8
 23fa496:	0fd0      	lsrs	r0, r2, #31
 23fa498:	3c01      	subs	r4, #1
 23fa49a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fa49e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fa4a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fa4a6:	d033      	beq.n	23fa510 <__ieee754_sqrt+0x10c>
 23fa4a8:	4573      	cmp	r3, lr
 23fa4aa:	eb01 000c 	add.w	r0, r1, ip
 23fa4ae:	dde6      	ble.n	23fa47e <__ieee754_sqrt+0x7a>
 23fa4b0:	2800      	cmp	r0, #0
 23fa4b2:	eb00 0c01 	add.w	ip, r0, r1
 23fa4b6:	db07      	blt.n	23fa4c8 <__ieee754_sqrt+0xc4>
 23fa4b8:	46f0      	mov	r8, lr
 23fa4ba:	eba3 030e 	sub.w	r3, r3, lr
 23fa4be:	4290      	cmp	r0, r2
 23fa4c0:	bf88      	it	hi
 23fa4c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fa4c6:	e7e3      	b.n	23fa490 <__ieee754_sqrt+0x8c>
 23fa4c8:	f1bc 0f00 	cmp.w	ip, #0
 23fa4cc:	dbf4      	blt.n	23fa4b8 <__ieee754_sqrt+0xb4>
 23fa4ce:	f10e 0801 	add.w	r8, lr, #1
 23fa4d2:	e7f2      	b.n	23fa4ba <__ieee754_sqrt+0xb6>
 23fa4d4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fa4d8:	4321      	orrs	r1, r4
 23fa4da:	d028      	beq.n	23fa52e <__ieee754_sqrt+0x12a>
 23fa4dc:	2d00      	cmp	r5, #0
 23fa4de:	d13d      	bne.n	23fa55c <__ieee754_sqrt+0x158>
 23fa4e0:	4628      	mov	r0, r5
 23fa4e2:	0ad1      	lsrs	r1, r2, #11
 23fa4e4:	3815      	subs	r0, #21
 23fa4e6:	0552      	lsls	r2, r2, #21
 23fa4e8:	460b      	mov	r3, r1
 23fa4ea:	2900      	cmp	r1, #0
 23fa4ec:	d0f9      	beq.n	23fa4e2 <__ieee754_sqrt+0xde>
 23fa4ee:	02cf      	lsls	r7, r1, #11
 23fa4f0:	d441      	bmi.n	23fa576 <__ieee754_sqrt+0x172>
 23fa4f2:	2400      	movs	r4, #0
 23fa4f4:	005b      	lsls	r3, r3, #1
 23fa4f6:	4625      	mov	r5, r4
 23fa4f8:	3401      	adds	r4, #1
 23fa4fa:	02de      	lsls	r6, r3, #11
 23fa4fc:	d5fa      	bpl.n	23fa4f4 <__ieee754_sqrt+0xf0>
 23fa4fe:	4619      	mov	r1, r3
 23fa500:	4613      	mov	r3, r2
 23fa502:	40a2      	lsls	r2, r4
 23fa504:	f1c4 0420 	rsb	r4, r4, #32
 23fa508:	40e3      	lsrs	r3, r4
 23fa50a:	1b40      	subs	r0, r0, r5
 23fa50c:	430b      	orrs	r3, r1
 23fa50e:	e788      	b.n	23fa422 <__ieee754_sqrt+0x1e>
 23fa510:	4313      	orrs	r3, r2
 23fa512:	d10e      	bne.n	23fa532 <__ieee754_sqrt+0x12e>
 23fa514:	086c      	lsrs	r4, r5, #1
 23fa516:	07f3      	lsls	r3, r6, #31
 23fa518:	491a      	ldr	r1, [pc, #104]	; (23fa584 <__ieee754_sqrt+0x180>)
 23fa51a:	bf48      	it	mi
 23fa51c:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fa520:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fa524:	4622      	mov	r2, r4
 23fa526:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fa52a:	ec43 2b10 	vmov	d0, r2, r3
 23fa52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa532:	1c6a      	adds	r2, r5, #1
 23fa534:	d01d      	beq.n	23fa572 <__ieee754_sqrt+0x16e>
 23fa536:	1c6c      	adds	r4, r5, #1
 23fa538:	0864      	lsrs	r4, r4, #1
 23fa53a:	e7ec      	b.n	23fa516 <__ieee754_sqrt+0x112>
 23fa53c:	ee10 2a10 	vmov	r2, s0
 23fa540:	462b      	mov	r3, r5
 23fa542:	ee10 0a10 	vmov	r0, s0
 23fa546:	4629      	mov	r1, r5
 23fa548:	f7f2 fbae 	bl	23ecca8 <__aeabi_dmul>
 23fa54c:	4622      	mov	r2, r4
 23fa54e:	462b      	mov	r3, r5
 23fa550:	f7f2 f9f4 	bl	23ec93c <__adddf3>
 23fa554:	ec41 0b10 	vmov	d0, r0, r1
 23fa558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa55c:	4620      	mov	r0, r4
 23fa55e:	4629      	mov	r1, r5
 23fa560:	f7f2 f9ea 	bl	23ec938 <__aeabi_dsub>
 23fa564:	4602      	mov	r2, r0
 23fa566:	460b      	mov	r3, r1
 23fa568:	f7f2 fcc8 	bl	23ecefc <__aeabi_ddiv>
 23fa56c:	ec41 0b10 	vmov	d0, r0, r1
 23fa570:	e7dd      	b.n	23fa52e <__ieee754_sqrt+0x12a>
 23fa572:	3601      	adds	r6, #1
 23fa574:	e7cf      	b.n	23fa516 <__ieee754_sqrt+0x112>
 23fa576:	4613      	mov	r3, r2
 23fa578:	2420      	movs	r4, #32
 23fa57a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fa57e:	e7c3      	b.n	23fa508 <__ieee754_sqrt+0x104>
 23fa580:	7ff00000 	.word	0x7ff00000
 23fa584:	3fe00000 	.word	0x3fe00000

023fa588 <__ieee754_expf>:
 23fa588:	ee10 3a10 	vmov	r3, s0
 23fa58c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 23fa590:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 23fa594:	d859      	bhi.n	23fa64a <__ieee754_expf+0xc2>
 23fa596:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 23fa59a:	f000 8093 	beq.w	23fa6c4 <__ieee754_expf+0x13c>
 23fa59e:	4861      	ldr	r0, [pc, #388]	; (23fa724 <__ieee754_expf+0x19c>)
 23fa5a0:	4283      	cmp	r3, r0
 23fa5a2:	dc55      	bgt.n	23fa650 <__ieee754_expf+0xc8>
 23fa5a4:	b129      	cbz	r1, 23fa5b2 <__ieee754_expf+0x2a>
 23fa5a6:	4b60      	ldr	r3, [pc, #384]	; (23fa728 <__ieee754_expf+0x1a0>)
 23fa5a8:	429a      	cmp	r2, r3
 23fa5aa:	d902      	bls.n	23fa5b2 <__ieee754_expf+0x2a>
 23fa5ac:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 23fa72c <__ieee754_expf+0x1a4>
 23fa5b0:	4770      	bx	lr
 23fa5b2:	4b5f      	ldr	r3, [pc, #380]	; (23fa730 <__ieee754_expf+0x1a8>)
 23fa5b4:	429a      	cmp	r2, r3
 23fa5b6:	d950      	bls.n	23fa65a <__ieee754_expf+0xd2>
 23fa5b8:	4b5e      	ldr	r3, [pc, #376]	; (23fa734 <__ieee754_expf+0x1ac>)
 23fa5ba:	429a      	cmp	r2, r3
 23fa5bc:	f200 8094 	bhi.w	23fa6e8 <__ieee754_expf+0x160>
 23fa5c0:	485d      	ldr	r0, [pc, #372]	; (23fa738 <__ieee754_expf+0x1b0>)
 23fa5c2:	f1c1 0301 	rsb	r3, r1, #1
 23fa5c6:	4a5d      	ldr	r2, [pc, #372]	; (23fa73c <__ieee754_expf+0x1b4>)
 23fa5c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fa5cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23fa5d0:	1a59      	subs	r1, r3, r1
 23fa5d2:	ed90 4a00 	vldr	s8, [r0]
 23fa5d6:	ed92 7a00 	vldr	s14, [r2]
 23fa5da:	ee30 4a44 	vsub.f32	s8, s0, s8
 23fa5de:	ee34 0a47 	vsub.f32	s0, s8, s14
 23fa5e2:	eddf 7a57 	vldr	s15, [pc, #348]	; 23fa740 <__ieee754_expf+0x1b8>
 23fa5e6:	eddf 4a57 	vldr	s9, [pc, #348]	; 23fa744 <__ieee754_expf+0x1bc>
 23fa5ea:	ed9f 5a57 	vldr	s10, [pc, #348]	; 23fa748 <__ieee754_expf+0x1c0>
 23fa5ee:	ee60 6a00 	vmul.f32	s13, s0, s0
 23fa5f2:	ed9f 6a56 	vldr	s12, [pc, #344]	; 23fa74c <__ieee754_expf+0x1c4>
 23fa5f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 23fa750 <__ieee754_expf+0x1c8>
 23fa5fa:	eee6 4aa7 	vfma.f32	s9, s13, s15
 23fa5fe:	eea4 5aa6 	vfma.f32	s10, s9, s13
 23fa602:	eea5 6a26 	vfma.f32	s12, s10, s13
 23fa606:	eee6 5a26 	vfma.f32	s11, s12, s13
 23fa60a:	eeb0 6a40 	vmov.f32	s12, s0
 23fa60e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 23fa612:	2900      	cmp	r1, #0
 23fa614:	d047      	beq.n	23fa6a6 <__ieee754_expf+0x11e>
 23fa616:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 23fa61a:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
 23fa61e:	ee60 5a06 	vmul.f32	s11, s0, s12
 23fa622:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23fa626:	ee36 6ac6 	vsub.f32	s12, s13, s12
 23fa62a:	ee85 0a86 	vdiv.f32	s0, s11, s12
 23fa62e:	ee37 0a40 	vsub.f32	s0, s14, s0
 23fa632:	ee30 0a44 	vsub.f32	s0, s0, s8
 23fa636:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23fa63a:	db49      	blt.n	23fa6d0 <__ieee754_expf+0x148>
 23fa63c:	ee10 3a10 	vmov	r3, s0
 23fa640:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23fa644:	ee00 3a10 	vmov	s0, r3
 23fa648:	4770      	bx	lr
 23fa64a:	ee30 0a00 	vadd.f32	s0, s0, s0
 23fa64e:	4770      	bx	lr
 23fa650:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23fa754 <__ieee754_expf+0x1cc>
 23fa654:	ee20 0a00 	vmul.f32	s0, s0, s0
 23fa658:	4770      	bx	lr
 23fa65a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 23fa65e:	d20a      	bcs.n	23fa676 <__ieee754_expf+0xee>
 23fa660:	eddf 7a3c 	vldr	s15, [pc, #240]	; 23fa754 <__ieee754_expf+0x1cc>
 23fa664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23fa668:	ee70 7a27 	vadd.f32	s15, s0, s15
 23fa66c:	eef4 7ac7 	vcmpe.f32	s15, s14
 23fa670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fa674:	dc52      	bgt.n	23fa71c <__ieee754_expf+0x194>
 23fa676:	ee60 7a00 	vmul.f32	s15, s0, s0
 23fa67a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 23fa740 <__ieee754_expf+0x1b8>
 23fa67e:	eddf 5a31 	vldr	s11, [pc, #196]	; 23fa744 <__ieee754_expf+0x1bc>
 23fa682:	ed9f 6a31 	vldr	s12, [pc, #196]	; 23fa748 <__ieee754_expf+0x1c0>
 23fa686:	eee7 5a85 	vfma.f32	s11, s15, s10
 23fa68a:	eddf 6a30 	vldr	s13, [pc, #192]	; 23fa74c <__ieee754_expf+0x1c4>
 23fa68e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 23fa750 <__ieee754_expf+0x1c8>
 23fa692:	eea7 6aa5 	vfma.f32	s12, s15, s11
 23fa696:	eee7 6a86 	vfma.f32	s13, s15, s12
 23fa69a:	eeb0 6a40 	vmov.f32	s12, s0
 23fa69e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 23fa6a2:	eea7 6ac7 	vfms.f32	s12, s15, s14
 23fa6a6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 23fa6aa:	ee60 6a06 	vmul.f32	s13, s0, s12
 23fa6ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23fa6b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 23fa6b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 23fa6ba:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23fa6be:	ee37 0a40 	vsub.f32	s0, s14, s0
 23fa6c2:	4770      	bx	lr
 23fa6c4:	eddf 7a19 	vldr	s15, [pc, #100]	; 23fa72c <__ieee754_expf+0x1a4>
 23fa6c8:	2900      	cmp	r1, #0
 23fa6ca:	fe00 0a27 	vseleq.f32	s0, s0, s15
 23fa6ce:	4770      	bx	lr
 23fa6d0:	3164      	adds	r1, #100	; 0x64
 23fa6d2:	ee10 3a10 	vmov	r3, s0
 23fa6d6:	eddf 7a20 	vldr	s15, [pc, #128]	; 23fa758 <__ieee754_expf+0x1d0>
 23fa6da:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23fa6de:	ee00 3a10 	vmov	s0, r3
 23fa6e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 23fa6e6:	4770      	bx	lr
 23fa6e8:	4b1c      	ldr	r3, [pc, #112]	; (23fa75c <__ieee754_expf+0x1d4>)
 23fa6ea:	eeb0 4a40 	vmov.f32	s8, s0
 23fa6ee:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 23fa760 <__ieee754_expf+0x1d8>
 23fa6f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 23fa6f6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 23fa764 <__ieee754_expf+0x1dc>
 23fa6fa:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23fa768 <__ieee754_expf+0x1e0>
 23fa6fe:	edd1 7a00 	vldr	s15, [r1]
 23fa702:	eee0 7a07 	vfma.f32	s15, s0, s14
 23fa706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23fa70a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23fa70e:	ee17 1a90 	vmov	r1, s15
 23fa712:	eea7 4a46 	vfms.f32	s8, s14, s12
 23fa716:	ee27 7a26 	vmul.f32	s14, s14, s13
 23fa71a:	e760      	b.n	23fa5de <__ieee754_expf+0x56>
 23fa71c:	ee30 0a07 	vadd.f32	s0, s0, s14
 23fa720:	4770      	bx	lr
 23fa722:	bf00      	nop
 23fa724:	42b17217 	.word	0x42b17217
 23fa728:	42cff1b5 	.word	0x42cff1b5
 23fa72c:	00000000 	.word	0x00000000
 23fa730:	3eb17218 	.word	0x3eb17218
 23fa734:	3f851591 	.word	0x3f851591
 23fa738:	023ffd78 	.word	0x023ffd78
 23fa73c:	023ffd80 	.word	0x023ffd80
 23fa740:	3331bb4c 	.word	0x3331bb4c
 23fa744:	b5ddea0e 	.word	0xb5ddea0e
 23fa748:	388ab355 	.word	0x388ab355
 23fa74c:	bb360b61 	.word	0xbb360b61
 23fa750:	3e2aaaab 	.word	0x3e2aaaab
 23fa754:	7149f2ca 	.word	0x7149f2ca
 23fa758:	0d800000 	.word	0x0d800000
 23fa75c:	023ffd70 	.word	0x023ffd70
 23fa760:	3fb8aa3b 	.word	0x3fb8aa3b
 23fa764:	3f317180 	.word	0x3f317180
 23fa768:	3717f7d1 	.word	0x3717f7d1

023fa76c <__ieee754_sqrtf>:
 23fa76c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 23fa770:	4770      	bx	lr
 23fa772:	bf00      	nop
 23fa774:	0000      	movs	r0, r0
	...

023fa778 <__kernel_cos>:
 23fa778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa77c:	ec57 6b10 	vmov	r6, r7, d0
 23fa780:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fa784:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fa788:	ec5b ab11 	vmov	sl, fp, d1
 23fa78c:	ed2d 8b04 	vpush	{d8-d9}
 23fa790:	da71      	bge.n	23fa876 <__kernel_cos+0xfe>
 23fa792:	ee10 0a10 	vmov	r0, s0
 23fa796:	4639      	mov	r1, r7
 23fa798:	f7f2 fd36 	bl	23ed208 <__aeabi_d2iz>
 23fa79c:	2800      	cmp	r0, #0
 23fa79e:	f000 80f6 	beq.w	23fa98e <__kernel_cos+0x216>
 23fa7a2:	4632      	mov	r2, r6
 23fa7a4:	463b      	mov	r3, r7
 23fa7a6:	4630      	mov	r0, r6
 23fa7a8:	4639      	mov	r1, r7
 23fa7aa:	f7f2 fa7d 	bl	23ecca8 <__aeabi_dmul>
 23fa7ae:	4604      	mov	r4, r0
 23fa7b0:	460d      	mov	r5, r1
 23fa7b2:	a37b      	add	r3, pc, #492	; (adr r3, 23fa9a0 <__kernel_cos+0x228>)
 23fa7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7b8:	f7f2 fa76 	bl	23ecca8 <__aeabi_dmul>
 23fa7bc:	a37a      	add	r3, pc, #488	; (adr r3, 23fa9a8 <__kernel_cos+0x230>)
 23fa7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7c2:	f7f2 f8bb 	bl	23ec93c <__adddf3>
 23fa7c6:	4622      	mov	r2, r4
 23fa7c8:	462b      	mov	r3, r5
 23fa7ca:	f7f2 fa6d 	bl	23ecca8 <__aeabi_dmul>
 23fa7ce:	a378      	add	r3, pc, #480	; (adr r3, 23fa9b0 <__kernel_cos+0x238>)
 23fa7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7d4:	f7f2 f8b0 	bl	23ec938 <__aeabi_dsub>
 23fa7d8:	4622      	mov	r2, r4
 23fa7da:	462b      	mov	r3, r5
 23fa7dc:	f7f2 fa64 	bl	23ecca8 <__aeabi_dmul>
 23fa7e0:	a375      	add	r3, pc, #468	; (adr r3, 23fa9b8 <__kernel_cos+0x240>)
 23fa7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7e6:	f7f2 f8a9 	bl	23ec93c <__adddf3>
 23fa7ea:	4622      	mov	r2, r4
 23fa7ec:	462b      	mov	r3, r5
 23fa7ee:	f7f2 fa5b 	bl	23ecca8 <__aeabi_dmul>
 23fa7f2:	a373      	add	r3, pc, #460	; (adr r3, 23fa9c0 <__kernel_cos+0x248>)
 23fa7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa7f8:	f7f2 f89e 	bl	23ec938 <__aeabi_dsub>
 23fa7fc:	4622      	mov	r2, r4
 23fa7fe:	462b      	mov	r3, r5
 23fa800:	f7f2 fa52 	bl	23ecca8 <__aeabi_dmul>
 23fa804:	a370      	add	r3, pc, #448	; (adr r3, 23fa9c8 <__kernel_cos+0x250>)
 23fa806:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa80a:	f7f2 f897 	bl	23ec93c <__adddf3>
 23fa80e:	4622      	mov	r2, r4
 23fa810:	462b      	mov	r3, r5
 23fa812:	f7f2 fa49 	bl	23ecca8 <__aeabi_dmul>
 23fa816:	ec41 0b18 	vmov	d8, r0, r1
 23fa81a:	2200      	movs	r2, #0
 23fa81c:	4b70      	ldr	r3, [pc, #448]	; (23fa9e0 <__kernel_cos+0x268>)
 23fa81e:	4620      	mov	r0, r4
 23fa820:	4629      	mov	r1, r5
 23fa822:	f7f2 fa41 	bl	23ecca8 <__aeabi_dmul>
 23fa826:	4680      	mov	r8, r0
 23fa828:	4689      	mov	r9, r1
 23fa82a:	4620      	mov	r0, r4
 23fa82c:	4629      	mov	r1, r5
 23fa82e:	ec53 2b18 	vmov	r2, r3, d8
 23fa832:	f7f2 fa39 	bl	23ecca8 <__aeabi_dmul>
 23fa836:	4604      	mov	r4, r0
 23fa838:	460d      	mov	r5, r1
 23fa83a:	4652      	mov	r2, sl
 23fa83c:	465b      	mov	r3, fp
 23fa83e:	4630      	mov	r0, r6
 23fa840:	4639      	mov	r1, r7
 23fa842:	f7f2 fa31 	bl	23ecca8 <__aeabi_dmul>
 23fa846:	4602      	mov	r2, r0
 23fa848:	460b      	mov	r3, r1
 23fa84a:	4620      	mov	r0, r4
 23fa84c:	4629      	mov	r1, r5
 23fa84e:	f7f2 f873 	bl	23ec938 <__aeabi_dsub>
 23fa852:	4602      	mov	r2, r0
 23fa854:	460b      	mov	r3, r1
 23fa856:	4640      	mov	r0, r8
 23fa858:	4649      	mov	r1, r9
 23fa85a:	f7f2 f86d 	bl	23ec938 <__aeabi_dsub>
 23fa85e:	4602      	mov	r2, r0
 23fa860:	460b      	mov	r3, r1
 23fa862:	2000      	movs	r0, #0
 23fa864:	495f      	ldr	r1, [pc, #380]	; (23fa9e4 <__kernel_cos+0x26c>)
 23fa866:	f7f2 f867 	bl	23ec938 <__aeabi_dsub>
 23fa86a:	ecbd 8b04 	vpop	{d8-d9}
 23fa86e:	ec41 0b10 	vmov	d0, r0, r1
 23fa872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa876:	ee10 2a10 	vmov	r2, s0
 23fa87a:	ee10 0a10 	vmov	r0, s0
 23fa87e:	463b      	mov	r3, r7
 23fa880:	4639      	mov	r1, r7
 23fa882:	f7f2 fa11 	bl	23ecca8 <__aeabi_dmul>
 23fa886:	4604      	mov	r4, r0
 23fa888:	460d      	mov	r5, r1
 23fa88a:	a345      	add	r3, pc, #276	; (adr r3, 23fa9a0 <__kernel_cos+0x228>)
 23fa88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa890:	f7f2 fa0a 	bl	23ecca8 <__aeabi_dmul>
 23fa894:	a344      	add	r3, pc, #272	; (adr r3, 23fa9a8 <__kernel_cos+0x230>)
 23fa896:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa89a:	f7f2 f84f 	bl	23ec93c <__adddf3>
 23fa89e:	4622      	mov	r2, r4
 23fa8a0:	462b      	mov	r3, r5
 23fa8a2:	f7f2 fa01 	bl	23ecca8 <__aeabi_dmul>
 23fa8a6:	a342      	add	r3, pc, #264	; (adr r3, 23fa9b0 <__kernel_cos+0x238>)
 23fa8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8ac:	f7f2 f844 	bl	23ec938 <__aeabi_dsub>
 23fa8b0:	4622      	mov	r2, r4
 23fa8b2:	462b      	mov	r3, r5
 23fa8b4:	f7f2 f9f8 	bl	23ecca8 <__aeabi_dmul>
 23fa8b8:	a33f      	add	r3, pc, #252	; (adr r3, 23fa9b8 <__kernel_cos+0x240>)
 23fa8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8be:	f7f2 f83d 	bl	23ec93c <__adddf3>
 23fa8c2:	4622      	mov	r2, r4
 23fa8c4:	462b      	mov	r3, r5
 23fa8c6:	f7f2 f9ef 	bl	23ecca8 <__aeabi_dmul>
 23fa8ca:	a33d      	add	r3, pc, #244	; (adr r3, 23fa9c0 <__kernel_cos+0x248>)
 23fa8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8d0:	f7f2 f832 	bl	23ec938 <__aeabi_dsub>
 23fa8d4:	4622      	mov	r2, r4
 23fa8d6:	462b      	mov	r3, r5
 23fa8d8:	f7f2 f9e6 	bl	23ecca8 <__aeabi_dmul>
 23fa8dc:	a33a      	add	r3, pc, #232	; (adr r3, 23fa9c8 <__kernel_cos+0x250>)
 23fa8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8e2:	f7f2 f82b 	bl	23ec93c <__adddf3>
 23fa8e6:	462b      	mov	r3, r5
 23fa8e8:	4622      	mov	r2, r4
 23fa8ea:	f7f2 f9dd 	bl	23ecca8 <__aeabi_dmul>
 23fa8ee:	4b3e      	ldr	r3, [pc, #248]	; (23fa9e8 <__kernel_cos+0x270>)
 23fa8f0:	4599      	cmp	r9, r3
 23fa8f2:	ec41 0b18 	vmov	d8, r0, r1
 23fa8f6:	dd90      	ble.n	23fa81a <__kernel_cos+0xa2>
 23fa8f8:	4b3c      	ldr	r3, [pc, #240]	; (23fa9ec <__kernel_cos+0x274>)
 23fa8fa:	4599      	cmp	r9, r3
 23fa8fc:	dc3c      	bgt.n	23fa978 <__kernel_cos+0x200>
 23fa8fe:	2200      	movs	r2, #0
 23fa900:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fa904:	2000      	movs	r0, #0
 23fa906:	4937      	ldr	r1, [pc, #220]	; (23fa9e4 <__kernel_cos+0x26c>)
 23fa908:	4690      	mov	r8, r2
 23fa90a:	4699      	mov	r9, r3
 23fa90c:	f7f2 f814 	bl	23ec938 <__aeabi_dsub>
 23fa910:	ec41 0b19 	vmov	d9, r0, r1
 23fa914:	2200      	movs	r2, #0
 23fa916:	4b32      	ldr	r3, [pc, #200]	; (23fa9e0 <__kernel_cos+0x268>)
 23fa918:	4620      	mov	r0, r4
 23fa91a:	4629      	mov	r1, r5
 23fa91c:	f7f2 f9c4 	bl	23ecca8 <__aeabi_dmul>
 23fa920:	4642      	mov	r2, r8
 23fa922:	464b      	mov	r3, r9
 23fa924:	f7f2 f808 	bl	23ec938 <__aeabi_dsub>
 23fa928:	4680      	mov	r8, r0
 23fa92a:	4689      	mov	r9, r1
 23fa92c:	4620      	mov	r0, r4
 23fa92e:	4629      	mov	r1, r5
 23fa930:	ec53 2b18 	vmov	r2, r3, d8
 23fa934:	f7f2 f9b8 	bl	23ecca8 <__aeabi_dmul>
 23fa938:	4604      	mov	r4, r0
 23fa93a:	460d      	mov	r5, r1
 23fa93c:	4652      	mov	r2, sl
 23fa93e:	465b      	mov	r3, fp
 23fa940:	4630      	mov	r0, r6
 23fa942:	4639      	mov	r1, r7
 23fa944:	f7f2 f9b0 	bl	23ecca8 <__aeabi_dmul>
 23fa948:	4602      	mov	r2, r0
 23fa94a:	460b      	mov	r3, r1
 23fa94c:	4620      	mov	r0, r4
 23fa94e:	4629      	mov	r1, r5
 23fa950:	f7f1 fff2 	bl	23ec938 <__aeabi_dsub>
 23fa954:	4602      	mov	r2, r0
 23fa956:	460b      	mov	r3, r1
 23fa958:	4640      	mov	r0, r8
 23fa95a:	4649      	mov	r1, r9
 23fa95c:	f7f1 ffec 	bl	23ec938 <__aeabi_dsub>
 23fa960:	4602      	mov	r2, r0
 23fa962:	460b      	mov	r3, r1
 23fa964:	ec51 0b19 	vmov	r0, r1, d9
 23fa968:	f7f1 ffe6 	bl	23ec938 <__aeabi_dsub>
 23fa96c:	ecbd 8b04 	vpop	{d8-d9}
 23fa970:	ec41 0b10 	vmov	d0, r0, r1
 23fa974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa978:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fa9d0 <__kernel_cos+0x258>
 23fa97c:	f04f 0800 	mov.w	r8, #0
 23fa980:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fa9f0 <__kernel_cos+0x278>
 23fa984:	eeb0 9a47 	vmov.f32	s18, s14
 23fa988:	eef0 9a67 	vmov.f32	s19, s15
 23fa98c:	e7c2      	b.n	23fa914 <__kernel_cos+0x19c>
 23fa98e:	ecbd 8b04 	vpop	{d8-d9}
 23fa992:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fa9d8 <__kernel_cos+0x260>
 23fa996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa99a:	bf00      	nop
 23fa99c:	f3af 8000 	nop.w
 23fa9a0:	be8838d4 	.word	0xbe8838d4
 23fa9a4:	bda8fae9 	.word	0xbda8fae9
 23fa9a8:	bdb4b1c4 	.word	0xbdb4b1c4
 23fa9ac:	3e21ee9e 	.word	0x3e21ee9e
 23fa9b0:	809c52ad 	.word	0x809c52ad
 23fa9b4:	3e927e4f 	.word	0x3e927e4f
 23fa9b8:	19cb1590 	.word	0x19cb1590
 23fa9bc:	3efa01a0 	.word	0x3efa01a0
 23fa9c0:	16c15177 	.word	0x16c15177
 23fa9c4:	3f56c16c 	.word	0x3f56c16c
 23fa9c8:	5555554c 	.word	0x5555554c
 23fa9cc:	3fa55555 	.word	0x3fa55555
 23fa9d0:	00000000 	.word	0x00000000
 23fa9d4:	3fe70000 	.word	0x3fe70000
 23fa9d8:	00000000 	.word	0x00000000
 23fa9dc:	3ff00000 	.word	0x3ff00000
 23fa9e0:	3fe00000 	.word	0x3fe00000
 23fa9e4:	3ff00000 	.word	0x3ff00000
 23fa9e8:	3fd33332 	.word	0x3fd33332
 23fa9ec:	3fe90000 	.word	0x3fe90000
 23fa9f0:	3fd20000 	.word	0x3fd20000
 23fa9f4:	00000000 	.word	0x00000000

023fa9f8 <__kernel_rem_pio2>:
 23fa9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa9fc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23faa00:	461c      	mov	r4, r3
 23faa02:	f112 0f14 	cmn.w	r2, #20
 23faa06:	9308      	str	r3, [sp, #32]
 23faa08:	910b      	str	r1, [sp, #44]	; 0x2c
 23faa0a:	4bb6      	ldr	r3, [pc, #728]	; (23face4 <__kernel_rem_pio2+0x2ec>)
 23faa0c:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23faa0e:	9004      	str	r0, [sp, #16]
 23faa10:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23faa14:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23faa18:	9105      	str	r1, [sp, #20]
 23faa1a:	9303      	str	r3, [sp, #12]
 23faa1c:	f2c0 833a 	blt.w	23fb094 <__kernel_rem_pio2+0x69c>
 23faa20:	1ed3      	subs	r3, r2, #3
 23faa22:	49b1      	ldr	r1, [pc, #708]	; (23face8 <__kernel_rem_pio2+0x2f0>)
 23faa24:	fb81 0103 	smull	r0, r1, r1, r3
 23faa28:	17db      	asrs	r3, r3, #31
 23faa2a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23faa2e:	9307      	str	r3, [sp, #28]
 23faa30:	3301      	adds	r3, #1
 23faa32:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23faa36:	00db      	lsls	r3, r3, #3
 23faa38:	18d3      	adds	r3, r2, r3
 23faa3a:	9a07      	ldr	r2, [sp, #28]
 23faa3c:	9306      	str	r3, [sp, #24]
 23faa3e:	9b03      	ldr	r3, [sp, #12]
 23faa40:	1ad4      	subs	r4, r2, r3
 23faa42:	9a05      	ldr	r2, [sp, #20]
 23faa44:	18d6      	adds	r6, r2, r3
 23faa46:	d414      	bmi.n	23faa72 <__kernel_rem_pio2+0x7a>
 23faa48:	3601      	adds	r6, #1
 23faa4a:	ad20      	add	r5, sp, #128	; 0x80
 23faa4c:	f04f 0800 	mov.w	r8, #0
 23faa50:	f04f 0900 	mov.w	r9, #0
 23faa54:	4426      	add	r6, r4
 23faa56:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23faa58:	2c00      	cmp	r4, #0
 23faa5a:	4640      	mov	r0, r8
 23faa5c:	4649      	mov	r1, r9
 23faa5e:	db03      	blt.n	23faa68 <__kernel_rem_pio2+0x70>
 23faa60:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23faa64:	f7f2 f8b6 	bl	23ecbd4 <__aeabi_i2d>
 23faa68:	3401      	adds	r4, #1
 23faa6a:	42b4      	cmp	r4, r6
 23faa6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 23faa70:	d1f2      	bne.n	23faa58 <__kernel_rem_pio2+0x60>
 23faa72:	9b05      	ldr	r3, [sp, #20]
 23faa74:	2b00      	cmp	r3, #0
 23faa76:	f2c0 83c7 	blt.w	23fb208 <__kernel_rem_pio2+0x810>
 23faa7a:	9b08      	ldr	r3, [sp, #32]
 23faa7c:	a920      	add	r1, sp, #128	; 0x80
 23faa7e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23faa82:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23faa86:	00da      	lsls	r2, r3, #3
 23faa88:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23faa8c:	9202      	str	r2, [sp, #8]
 23faa8e:	9a05      	ldr	r2, [sp, #20]
 23faa90:	441a      	add	r2, r3
 23faa92:	9201      	str	r2, [sp, #4]
 23faa94:	9a04      	ldr	r2, [sp, #16]
 23faa96:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23faa9a:	9b03      	ldr	r3, [sp, #12]
 23faa9c:	2b00      	cmp	r3, #0
 23faa9e:	f2c0 81a6 	blt.w	23fadee <__kernel_rem_pio2+0x3f6>
 23faaa2:	4657      	mov	r7, sl
 23faaa4:	9e04      	ldr	r6, [sp, #16]
 23faaa6:	2400      	movs	r4, #0
 23faaa8:	2500      	movs	r5, #0
 23faaaa:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23faaae:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23faab2:	f7f2 f8f9 	bl	23ecca8 <__aeabi_dmul>
 23faab6:	4602      	mov	r2, r0
 23faab8:	460b      	mov	r3, r1
 23faaba:	4620      	mov	r0, r4
 23faabc:	4629      	mov	r1, r5
 23faabe:	f7f1 ff3d 	bl	23ec93c <__adddf3>
 23faac2:	4546      	cmp	r6, r8
 23faac4:	4604      	mov	r4, r0
 23faac6:	460d      	mov	r5, r1
 23faac8:	d1ef      	bne.n	23faaaa <__kernel_rem_pio2+0xb2>
 23faaca:	f109 0901 	add.w	r9, r9, #1
 23faace:	9b01      	ldr	r3, [sp, #4]
 23faad0:	f10a 0a08 	add.w	sl, sl, #8
 23faad4:	4599      	cmp	r9, r3
 23faad6:	e8eb 4502 	strd	r4, r5, [fp], #8
 23faada:	d1de      	bne.n	23faa9a <__kernel_rem_pio2+0xa2>
 23faadc:	9a04      	ldr	r2, [sp, #16]
 23faade:	a90b      	add	r1, sp, #44	; 0x2c
 23faae0:	9b02      	ldr	r3, [sp, #8]
 23faae2:	4413      	add	r3, r2
 23faae4:	469b      	mov	fp, r3
 23faae6:	9b05      	ldr	r3, [sp, #20]
 23faae8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23faaec:	a90c      	add	r1, sp, #48	; 0x30
 23faaee:	920a      	str	r2, [sp, #40]	; 0x28
 23faaf0:	461a      	mov	r2, r3
 23faaf2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23faaf6:	9201      	str	r2, [sp, #4]
 23faaf8:	3b08      	subs	r3, #8
 23faafa:	9309      	str	r3, [sp, #36]	; 0x24
 23faafc:	9a01      	ldr	r2, [sp, #4]
 23faafe:	a998      	add	r1, sp, #608	; 0x260
 23fab00:	2a00      	cmp	r2, #0
 23fab02:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fab06:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fab0a:	dd29      	ble.n	23fab60 <__kernel_rem_pio2+0x168>
 23fab0c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fab10:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fab14:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fab18:	2200      	movs	r2, #0
 23fab1a:	4b74      	ldr	r3, [pc, #464]	; (23facec <__kernel_rem_pio2+0x2f4>)
 23fab1c:	4620      	mov	r0, r4
 23fab1e:	4629      	mov	r1, r5
 23fab20:	f7f2 f8c2 	bl	23ecca8 <__aeabi_dmul>
 23fab24:	f7f2 fb70 	bl	23ed208 <__aeabi_d2iz>
 23fab28:	f7f2 f854 	bl	23ecbd4 <__aeabi_i2d>
 23fab2c:	2200      	movs	r2, #0
 23fab2e:	4b70      	ldr	r3, [pc, #448]	; (23facf0 <__kernel_rem_pio2+0x2f8>)
 23fab30:	4606      	mov	r6, r0
 23fab32:	460f      	mov	r7, r1
 23fab34:	f7f2 f8b8 	bl	23ecca8 <__aeabi_dmul>
 23fab38:	4602      	mov	r2, r0
 23fab3a:	460b      	mov	r3, r1
 23fab3c:	4620      	mov	r0, r4
 23fab3e:	4629      	mov	r1, r5
 23fab40:	f7f1 fefa 	bl	23ec938 <__aeabi_dsub>
 23fab44:	f7f2 fb60 	bl	23ed208 <__aeabi_d2iz>
 23fab48:	4639      	mov	r1, r7
 23fab4a:	f849 0b04 	str.w	r0, [r9], #4
 23fab4e:	4630      	mov	r0, r6
 23fab50:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fab54:	f7f1 fef2 	bl	23ec93c <__adddf3>
 23fab58:	4604      	mov	r4, r0
 23fab5a:	45d0      	cmp	r8, sl
 23fab5c:	460d      	mov	r5, r1
 23fab5e:	d1db      	bne.n	23fab18 <__kernel_rem_pio2+0x120>
 23fab60:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fab64:	ec45 4b10 	vmov	d0, r4, r5
 23fab68:	4648      	mov	r0, r9
 23fab6a:	f000 fc31 	bl	23fb3d0 <scalbn>
 23fab6e:	2200      	movs	r2, #0
 23fab70:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fab74:	ee10 0a10 	vmov	r0, s0
 23fab78:	ec55 4b10 	vmov	r4, r5, d0
 23fab7c:	4629      	mov	r1, r5
 23fab7e:	f7f2 f893 	bl	23ecca8 <__aeabi_dmul>
 23fab82:	ec41 0b10 	vmov	d0, r0, r1
 23fab86:	f7fe ffe3 	bl	23f9b50 <floor>
 23fab8a:	2200      	movs	r2, #0
 23fab8c:	4b59      	ldr	r3, [pc, #356]	; (23facf4 <__kernel_rem_pio2+0x2fc>)
 23fab8e:	ec51 0b10 	vmov	r0, r1, d0
 23fab92:	f7f2 f889 	bl	23ecca8 <__aeabi_dmul>
 23fab96:	4602      	mov	r2, r0
 23fab98:	460b      	mov	r3, r1
 23fab9a:	4620      	mov	r0, r4
 23fab9c:	4629      	mov	r1, r5
 23fab9e:	f7f1 fecb 	bl	23ec938 <__aeabi_dsub>
 23faba2:	460d      	mov	r5, r1
 23faba4:	4604      	mov	r4, r0
 23faba6:	f7f2 fb2f 	bl	23ed208 <__aeabi_d2iz>
 23fabaa:	4680      	mov	r8, r0
 23fabac:	f7f2 f812 	bl	23ecbd4 <__aeabi_i2d>
 23fabb0:	460b      	mov	r3, r1
 23fabb2:	4602      	mov	r2, r0
 23fabb4:	4629      	mov	r1, r5
 23fabb6:	4620      	mov	r0, r4
 23fabb8:	f7f1 febe 	bl	23ec938 <__aeabi_dsub>
 23fabbc:	464b      	mov	r3, r9
 23fabbe:	4606      	mov	r6, r0
 23fabc0:	460f      	mov	r7, r1
 23fabc2:	2b00      	cmp	r3, #0
 23fabc4:	f340 8098 	ble.w	23facf8 <__kernel_rem_pio2+0x300>
 23fabc8:	9a01      	ldr	r2, [sp, #4]
 23fabca:	a90c      	add	r1, sp, #48	; 0x30
 23fabcc:	f1c9 0318 	rsb	r3, r9, #24
 23fabd0:	f1c9 0517 	rsb	r5, r9, #23
 23fabd4:	3a01      	subs	r2, #1
 23fabd6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fabda:	fa41 f003 	asr.w	r0, r1, r3
 23fabde:	fa00 f303 	lsl.w	r3, r0, r3
 23fabe2:	4480      	add	r8, r0
 23fabe4:	1acb      	subs	r3, r1, r3
 23fabe6:	a90c      	add	r1, sp, #48	; 0x30
 23fabe8:	fa43 f505 	asr.w	r5, r3, r5
 23fabec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fabf0:	2d00      	cmp	r5, #0
 23fabf2:	f300 808b 	bgt.w	23fad0c <__kernel_rem_pio2+0x314>
 23fabf6:	2200      	movs	r2, #0
 23fabf8:	2300      	movs	r3, #0
 23fabfa:	4630      	mov	r0, r6
 23fabfc:	4639      	mov	r1, r7
 23fabfe:	f7f2 fabb 	bl	23ed178 <__aeabi_dcmpeq>
 23fac02:	2800      	cmp	r0, #0
 23fac04:	f000 824d 	beq.w	23fb0a2 <__kernel_rem_pio2+0x6aa>
 23fac08:	9a01      	ldr	r2, [sp, #4]
 23fac0a:	9b05      	ldr	r3, [sp, #20]
 23fac0c:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fac10:	4553      	cmp	r3, sl
 23fac12:	dc10      	bgt.n	23fac36 <__kernel_rem_pio2+0x23e>
 23fac14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fac18:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fac1a:	4413      	add	r3, r2
 23fac1c:	aa0c      	add	r2, sp, #48	; 0x30
 23fac1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fac22:	2200      	movs	r2, #0
 23fac24:	f853 1904 	ldr.w	r1, [r3], #-4
 23fac28:	4283      	cmp	r3, r0
 23fac2a:	ea42 0201 	orr.w	r2, r2, r1
 23fac2e:	d1f9      	bne.n	23fac24 <__kernel_rem_pio2+0x22c>
 23fac30:	2a00      	cmp	r2, #0
 23fac32:	f040 80df 	bne.w	23fadf4 <__kernel_rem_pio2+0x3fc>
 23fac36:	9b05      	ldr	r3, [sp, #20]
 23fac38:	aa0c      	add	r2, sp, #48	; 0x30
 23fac3a:	3b01      	subs	r3, #1
 23fac3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fac40:	2b00      	cmp	r3, #0
 23fac42:	f040 80cf 	bne.w	23fade4 <__kernel_rem_pio2+0x3ec>
 23fac46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fac48:	2301      	movs	r3, #1
 23fac4a:	f852 1904 	ldr.w	r1, [r2], #-4
 23fac4e:	3301      	adds	r3, #1
 23fac50:	2900      	cmp	r1, #0
 23fac52:	d0fa      	beq.n	23fac4a <__kernel_rem_pio2+0x252>
 23fac54:	9a01      	ldr	r2, [sp, #4]
 23fac56:	18d3      	adds	r3, r2, r3
 23fac58:	9302      	str	r3, [sp, #8]
 23fac5a:	1c53      	adds	r3, r2, #1
 23fac5c:	4699      	mov	r9, r3
 23fac5e:	9a01      	ldr	r2, [sp, #4]
 23fac60:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fac64:	9908      	ldr	r1, [sp, #32]
 23fac66:	440a      	add	r2, r1
 23fac68:	4690      	mov	r8, r2
 23fac6a:	9a07      	ldr	r2, [sp, #28]
 23fac6c:	441a      	add	r2, r3
 23fac6e:	4492      	add	sl, r2
 23fac70:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fac72:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fac76:	aa20      	add	r2, sp, #128	; 0x80
 23fac78:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fac7c:	aa70      	add	r2, sp, #448	; 0x1c0
 23fac7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fac82:	9301      	str	r3, [sp, #4]
 23fac84:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fac88:	4647      	mov	r7, r8
 23fac8a:	f7f1 ffa3 	bl	23ecbd4 <__aeabi_i2d>
 23fac8e:	460b      	mov	r3, r1
 23fac90:	9903      	ldr	r1, [sp, #12]
 23fac92:	4602      	mov	r2, r0
 23fac94:	f108 0808 	add.w	r8, r8, #8
 23fac98:	2900      	cmp	r1, #0
 23fac9a:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fac9e:	db1e      	blt.n	23facde <__kernel_rem_pio2+0x2e6>
 23faca0:	9e04      	ldr	r6, [sp, #16]
 23faca2:	2400      	movs	r4, #0
 23faca4:	2500      	movs	r5, #0
 23faca6:	e001      	b.n	23facac <__kernel_rem_pio2+0x2b4>
 23faca8:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23facac:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23facb0:	f7f1 fffa 	bl	23ecca8 <__aeabi_dmul>
 23facb4:	4602      	mov	r2, r0
 23facb6:	460b      	mov	r3, r1
 23facb8:	4620      	mov	r0, r4
 23facba:	4629      	mov	r1, r5
 23facbc:	f7f1 fe3e 	bl	23ec93c <__adddf3>
 23facc0:	455e      	cmp	r6, fp
 23facc2:	4604      	mov	r4, r0
 23facc4:	460d      	mov	r5, r1
 23facc6:	d1ef      	bne.n	23faca8 <__kernel_rem_pio2+0x2b0>
 23facc8:	9b01      	ldr	r3, [sp, #4]
 23facca:	f109 0901 	add.w	r9, r9, #1
 23facce:	e8e3 4502 	strd	r4, r5, [r3], #8
 23facd2:	9301      	str	r3, [sp, #4]
 23facd4:	9b02      	ldr	r3, [sp, #8]
 23facd6:	4599      	cmp	r9, r3
 23facd8:	ddd4      	ble.n	23fac84 <__kernel_rem_pio2+0x28c>
 23facda:	9301      	str	r3, [sp, #4]
 23facdc:	e70e      	b.n	23faafc <__kernel_rem_pio2+0x104>
 23facde:	2400      	movs	r4, #0
 23face0:	2500      	movs	r5, #0
 23face2:	e7f1      	b.n	23facc8 <__kernel_rem_pio2+0x2d0>
 23face4:	023ffdc8 	.word	0x023ffdc8
 23face8:	2aaaaaab 	.word	0x2aaaaaab
 23facec:	3e700000 	.word	0x3e700000
 23facf0:	41700000 	.word	0x41700000
 23facf4:	40200000 	.word	0x40200000
 23facf8:	d16b      	bne.n	23fadd2 <__kernel_rem_pio2+0x3da>
 23facfa:	9b01      	ldr	r3, [sp, #4]
 23facfc:	aa0c      	add	r2, sp, #48	; 0x30
 23facfe:	3b01      	subs	r3, #1
 23fad00:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fad04:	15ed      	asrs	r5, r5, #23
 23fad06:	2d00      	cmp	r5, #0
 23fad08:	f77f af75 	ble.w	23fabf6 <__kernel_rem_pio2+0x1fe>
 23fad0c:	9b01      	ldr	r3, [sp, #4]
 23fad0e:	f108 0801 	add.w	r8, r8, #1
 23fad12:	2b00      	cmp	r3, #0
 23fad14:	f340 81c3 	ble.w	23fb09e <__kernel_rem_pio2+0x6a6>
 23fad18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fad1a:	2c00      	cmp	r4, #0
 23fad1c:	d151      	bne.n	23fadc2 <__kernel_rem_pio2+0x3ca>
 23fad1e:	9b01      	ldr	r3, [sp, #4]
 23fad20:	2b01      	cmp	r3, #1
 23fad22:	d020      	beq.n	23fad66 <__kernel_rem_pio2+0x36e>
 23fad24:	ab0c      	add	r3, sp, #48	; 0x30
 23fad26:	2201      	movs	r2, #1
 23fad28:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fad2c:	2c00      	cmp	r4, #0
 23fad2e:	d04b      	beq.n	23fadc8 <__kernel_rem_pio2+0x3d0>
 23fad30:	1c53      	adds	r3, r2, #1
 23fad32:	a90c      	add	r1, sp, #48	; 0x30
 23fad34:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fad38:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fad3c:	9901      	ldr	r1, [sp, #4]
 23fad3e:	4299      	cmp	r1, r3
 23fad40:	dd10      	ble.n	23fad64 <__kernel_rem_pio2+0x36c>
 23fad42:	a80c      	add	r0, sp, #48	; 0x30
 23fad44:	aa0c      	add	r2, sp, #48	; 0x30
 23fad46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fad4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fad4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fad52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fad56:	e000      	b.n	23fad5a <__kernel_rem_pio2+0x362>
 23fad58:	681a      	ldr	r2, [r3, #0]
 23fad5a:	1a8a      	subs	r2, r1, r2
 23fad5c:	f843 2b04 	str.w	r2, [r3], #4
 23fad60:	4283      	cmp	r3, r0
 23fad62:	d1f9      	bne.n	23fad58 <__kernel_rem_pio2+0x360>
 23fad64:	2401      	movs	r4, #1
 23fad66:	9b06      	ldr	r3, [sp, #24]
 23fad68:	2b00      	cmp	r3, #0
 23fad6a:	dd0e      	ble.n	23fad8a <__kernel_rem_pio2+0x392>
 23fad6c:	2b01      	cmp	r3, #1
 23fad6e:	f000 816b 	beq.w	23fb048 <__kernel_rem_pio2+0x650>
 23fad72:	2b02      	cmp	r3, #2
 23fad74:	d109      	bne.n	23fad8a <__kernel_rem_pio2+0x392>
 23fad76:	9b01      	ldr	r3, [sp, #4]
 23fad78:	a90c      	add	r1, sp, #48	; 0x30
 23fad7a:	1e5a      	subs	r2, r3, #1
 23fad7c:	ab0c      	add	r3, sp, #48	; 0x30
 23fad7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fad82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fad86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fad8a:	2d02      	cmp	r5, #2
 23fad8c:	f47f af33 	bne.w	23fabf6 <__kernel_rem_pio2+0x1fe>
 23fad90:	4632      	mov	r2, r6
 23fad92:	463b      	mov	r3, r7
 23fad94:	2000      	movs	r0, #0
 23fad96:	49b6      	ldr	r1, [pc, #728]	; (23fb070 <__kernel_rem_pio2+0x678>)
 23fad98:	f7f1 fdce 	bl	23ec938 <__aeabi_dsub>
 23fad9c:	4606      	mov	r6, r0
 23fad9e:	460f      	mov	r7, r1
 23fada0:	2c00      	cmp	r4, #0
 23fada2:	f43f af28 	beq.w	23fabf6 <__kernel_rem_pio2+0x1fe>
 23fada6:	9806      	ldr	r0, [sp, #24]
 23fada8:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fb060 <__kernel_rem_pio2+0x668>
 23fadac:	f000 fb10 	bl	23fb3d0 <scalbn>
 23fadb0:	4630      	mov	r0, r6
 23fadb2:	4639      	mov	r1, r7
 23fadb4:	ec53 2b10 	vmov	r2, r3, d0
 23fadb8:	f7f1 fdbe 	bl	23ec938 <__aeabi_dsub>
 23fadbc:	4606      	mov	r6, r0
 23fadbe:	460f      	mov	r7, r1
 23fadc0:	e719      	b.n	23fabf6 <__kernel_rem_pio2+0x1fe>
 23fadc2:	2301      	movs	r3, #1
 23fadc4:	2200      	movs	r2, #0
 23fadc6:	e7b4      	b.n	23fad32 <__kernel_rem_pio2+0x33a>
 23fadc8:	3201      	adds	r2, #1
 23fadca:	9901      	ldr	r1, [sp, #4]
 23fadcc:	428a      	cmp	r2, r1
 23fadce:	d1ab      	bne.n	23fad28 <__kernel_rem_pio2+0x330>
 23fadd0:	e7c9      	b.n	23fad66 <__kernel_rem_pio2+0x36e>
 23fadd2:	2200      	movs	r2, #0
 23fadd4:	4ba7      	ldr	r3, [pc, #668]	; (23fb074 <__kernel_rem_pio2+0x67c>)
 23fadd6:	f7f2 f9ed 	bl	23ed1b4 <__aeabi_dcmpge>
 23fadda:	2800      	cmp	r0, #0
 23faddc:	f040 8152 	bne.w	23fb084 <__kernel_rem_pio2+0x68c>
 23fade0:	4605      	mov	r5, r0
 23fade2:	e708      	b.n	23fabf6 <__kernel_rem_pio2+0x1fe>
 23fade4:	9b01      	ldr	r3, [sp, #4]
 23fade6:	3301      	adds	r3, #1
 23fade8:	4699      	mov	r9, r3
 23fadea:	9302      	str	r3, [sp, #8]
 23fadec:	e737      	b.n	23fac5e <__kernel_rem_pio2+0x266>
 23fadee:	2400      	movs	r4, #0
 23fadf0:	2500      	movs	r5, #0
 23fadf2:	e66a      	b.n	23faaca <__kernel_rem_pio2+0xd2>
 23fadf4:	9b06      	ldr	r3, [sp, #24]
 23fadf6:	9503      	str	r5, [sp, #12]
 23fadf8:	f1a3 0218 	sub.w	r2, r3, #24
 23fadfc:	ab0c      	add	r3, sp, #48	; 0x30
 23fadfe:	f8cd 801c 	str.w	r8, [sp, #28]
 23fae02:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fae06:	9206      	str	r2, [sp, #24]
 23fae08:	b973      	cbnz	r3, 23fae28 <__kernel_rem_pio2+0x430>
 23fae0a:	4b9b      	ldr	r3, [pc, #620]	; (23fb078 <__kernel_rem_pio2+0x680>)
 23fae0c:	9901      	ldr	r1, [sp, #4]
 23fae0e:	4419      	add	r1, r3
 23fae10:	460b      	mov	r3, r1
 23fae12:	a90c      	add	r1, sp, #48	; 0x30
 23fae14:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fae18:	f853 1904 	ldr.w	r1, [r3], #-4
 23fae1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fae20:	3a18      	subs	r2, #24
 23fae22:	2900      	cmp	r1, #0
 23fae24:	d0f8      	beq.n	23fae18 <__kernel_rem_pio2+0x420>
 23fae26:	9206      	str	r2, [sp, #24]
 23fae28:	9806      	ldr	r0, [sp, #24]
 23fae2a:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fb060 <__kernel_rem_pio2+0x668>
 23fae2e:	f000 facf 	bl	23fb3d0 <scalbn>
 23fae32:	f1ba 0f00 	cmp.w	sl, #0
 23fae36:	ec55 4b10 	vmov	r4, r5, d0
 23fae3a:	f2c0 81db 	blt.w	23fb1f4 <__kernel_rem_pio2+0x7fc>
 23fae3e:	ab70      	add	r3, sp, #448	; 0x1c0
 23fae40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fae44:	f04f 0800 	mov.w	r8, #0
 23fae48:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fb07c <__kernel_rem_pio2+0x684>
 23fae4c:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fae50:	9204      	str	r2, [sp, #16]
 23fae52:	f10a 0301 	add.w	r3, sl, #1
 23fae56:	aa0c      	add	r2, sp, #48	; 0x30
 23fae58:	f10b 0708 	add.w	r7, fp, #8
 23fae5c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fae60:	9306      	str	r3, [sp, #24]
 23fae62:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fae66:	f7f1 feb5 	bl	23ecbd4 <__aeabi_i2d>
 23fae6a:	4622      	mov	r2, r4
 23fae6c:	462b      	mov	r3, r5
 23fae6e:	f7f1 ff1b 	bl	23ecca8 <__aeabi_dmul>
 23fae72:	464b      	mov	r3, r9
 23fae74:	4642      	mov	r2, r8
 23fae76:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fae7a:	4620      	mov	r0, r4
 23fae7c:	4629      	mov	r1, r5
 23fae7e:	f7f1 ff13 	bl	23ecca8 <__aeabi_dmul>
 23fae82:	ab0c      	add	r3, sp, #48	; 0x30
 23fae84:	4604      	mov	r4, r0
 23fae86:	460d      	mov	r5, r1
 23fae88:	429e      	cmp	r6, r3
 23fae8a:	d1ea      	bne.n	23fae62 <__kernel_rem_pio2+0x46a>
 23fae8c:	ab48      	add	r3, sp, #288	; 0x120
 23fae8e:	f04f 0900 	mov.w	r9, #0
 23fae92:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fae96:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fae9a:	f1ba 0f00 	cmp.w	sl, #0
 23fae9e:	db2c      	blt.n	23faefa <__kernel_rem_pio2+0x502>
 23faea0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fb080 <__kernel_rem_pio2+0x688>
 23faea4:	465f      	mov	r7, fp
 23faea6:	2600      	movs	r6, #0
 23faea8:	2400      	movs	r4, #0
 23faeaa:	2500      	movs	r5, #0
 23faeac:	a36e      	add	r3, pc, #440	; (adr r3, 23fb068 <__kernel_rem_pio2+0x670>)
 23faeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faeb2:	e003      	b.n	23faebc <__kernel_rem_pio2+0x4c4>
 23faeb4:	45b1      	cmp	r9, r6
 23faeb6:	db10      	blt.n	23faeda <__kernel_rem_pio2+0x4e2>
 23faeb8:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23faebc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23faec0:	3601      	adds	r6, #1
 23faec2:	f7f1 fef1 	bl	23ecca8 <__aeabi_dmul>
 23faec6:	4602      	mov	r2, r0
 23faec8:	460b      	mov	r3, r1
 23faeca:	4620      	mov	r0, r4
 23faecc:	4629      	mov	r1, r5
 23faece:	f7f1 fd35 	bl	23ec93c <__adddf3>
 23faed2:	45b2      	cmp	sl, r6
 23faed4:	4604      	mov	r4, r0
 23faed6:	460d      	mov	r5, r1
 23faed8:	daec      	bge.n	23faeb4 <__kernel_rem_pio2+0x4bc>
 23faeda:	9b01      	ldr	r3, [sp, #4]
 23faedc:	f1ab 0b08 	sub.w	fp, fp, #8
 23faee0:	9a02      	ldr	r2, [sp, #8]
 23faee2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23faee6:	454a      	cmp	r2, r9
 23faee8:	e9c3 4500 	strd	r4, r5, [r3]
 23faeec:	f109 0301 	add.w	r3, r9, #1
 23faef0:	d006      	beq.n	23faf00 <__kernel_rem_pio2+0x508>
 23faef2:	f1ba 0f00 	cmp.w	sl, #0
 23faef6:	4699      	mov	r9, r3
 23faef8:	dad2      	bge.n	23faea0 <__kernel_rem_pio2+0x4a8>
 23faefa:	2400      	movs	r4, #0
 23faefc:	2500      	movs	r5, #0
 23faefe:	e7ec      	b.n	23faeda <__kernel_rem_pio2+0x4e2>
 23faf00:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23faf02:	f8dd a008 	ldr.w	sl, [sp, #8]
 23faf06:	2b02      	cmp	r3, #2
 23faf08:	dc1e      	bgt.n	23faf48 <__kernel_rem_pio2+0x550>
 23faf0a:	2b00      	cmp	r3, #0
 23faf0c:	f300 80ff 	bgt.w	23fb10e <__kernel_rem_pio2+0x716>
 23faf10:	d113      	bne.n	23faf3a <__kernel_rem_pio2+0x542>
 23faf12:	9c04      	ldr	r4, [sp, #16]
 23faf14:	2000      	movs	r0, #0
 23faf16:	9d01      	ldr	r5, [sp, #4]
 23faf18:	2100      	movs	r1, #0
 23faf1a:	3408      	adds	r4, #8
 23faf1c:	442c      	add	r4, r5
 23faf1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23faf22:	f7f1 fd0b 	bl	23ec93c <__adddf3>
 23faf26:	42a5      	cmp	r5, r4
 23faf28:	d1f9      	bne.n	23faf1e <__kernel_rem_pio2+0x526>
 23faf2a:	9b03      	ldr	r3, [sp, #12]
 23faf2c:	b113      	cbz	r3, 23faf34 <__kernel_rem_pio2+0x53c>
 23faf2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23faf32:	4619      	mov	r1, r3
 23faf34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23faf36:	e9c3 0100 	strd	r0, r1, [r3]
 23faf3a:	9b07      	ldr	r3, [sp, #28]
 23faf3c:	f003 0007 	and.w	r0, r3, #7
 23faf40:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23faf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faf48:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23faf4a:	2b03      	cmp	r3, #3
 23faf4c:	d1f5      	bne.n	23faf3a <__kernel_rem_pio2+0x542>
 23faf4e:	f1ba 0f00 	cmp.w	sl, #0
 23faf52:	f000 816b 	beq.w	23fb22c <__kernel_rem_pio2+0x834>
 23faf56:	9a01      	ldr	r2, [sp, #4]
 23faf58:	9b04      	ldr	r3, [sp, #16]
 23faf5a:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23faf5e:	18d3      	adds	r3, r2, r3
 23faf60:	e9d3 4500 	ldrd	r4, r5, [r3]
 23faf64:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23faf68:	4620      	mov	r0, r4
 23faf6a:	4629      	mov	r1, r5
 23faf6c:	4632      	mov	r2, r6
 23faf6e:	463b      	mov	r3, r7
 23faf70:	f7f1 fce4 	bl	23ec93c <__adddf3>
 23faf74:	46a0      	mov	r8, r4
 23faf76:	46a9      	mov	r9, r5
 23faf78:	4604      	mov	r4, r0
 23faf7a:	460d      	mov	r5, r1
 23faf7c:	4630      	mov	r0, r6
 23faf7e:	4622      	mov	r2, r4
 23faf80:	4639      	mov	r1, r7
 23faf82:	462b      	mov	r3, r5
 23faf84:	f7f1 fcd8 	bl	23ec938 <__aeabi_dsub>
 23faf88:	464b      	mov	r3, r9
 23faf8a:	4642      	mov	r2, r8
 23faf8c:	f7f1 fcd6 	bl	23ec93c <__adddf3>
 23faf90:	9b01      	ldr	r3, [sp, #4]
 23faf92:	455b      	cmp	r3, fp
 23faf94:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23faf98:	e9cb 4500 	strd	r4, r5, [fp]
 23faf9c:	d1e2      	bne.n	23faf64 <__kernel_rem_pio2+0x56c>
 23faf9e:	f1ba 0f01 	cmp.w	sl, #1
 23fafa2:	f340 8143 	ble.w	23fb22c <__kernel_rem_pio2+0x834>
 23fafa6:	9b04      	ldr	r3, [sp, #16]
 23fafa8:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23fafac:	9901      	ldr	r1, [sp, #4]
 23fafae:	461a      	mov	r2, r3
 23fafb0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23fafb4:	4453      	add	r3, sl
 23fafb6:	440a      	add	r2, r1
 23fafb8:	00db      	lsls	r3, r3, #3
 23fafba:	f103 0a08 	add.w	sl, r3, #8
 23fafbe:	9302      	str	r3, [sp, #8]
 23fafc0:	e9d2 4500 	ldrd	r4, r5, [r2]
 23fafc4:	448a      	add	sl, r1
 23fafc6:	4620      	mov	r0, r4
 23fafc8:	4629      	mov	r1, r5
 23fafca:	46a0      	mov	r8, r4
 23fafcc:	46a9      	mov	r9, r5
 23fafce:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fafd2:	4632      	mov	r2, r6
 23fafd4:	463b      	mov	r3, r7
 23fafd6:	f7f1 fcb1 	bl	23ec93c <__adddf3>
 23fafda:	4604      	mov	r4, r0
 23fafdc:	460d      	mov	r5, r1
 23fafde:	4630      	mov	r0, r6
 23fafe0:	4622      	mov	r2, r4
 23fafe2:	4639      	mov	r1, r7
 23fafe4:	462b      	mov	r3, r5
 23fafe6:	f7f1 fca7 	bl	23ec938 <__aeabi_dsub>
 23fafea:	4642      	mov	r2, r8
 23fafec:	464b      	mov	r3, r9
 23fafee:	f7f1 fca5 	bl	23ec93c <__adddf3>
 23faff2:	45d3      	cmp	fp, sl
 23faff4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23faff8:	e9ca 4500 	strd	r4, r5, [sl]
 23faffc:	d1e3      	bne.n	23fafc6 <__kernel_rem_pio2+0x5ce>
 23faffe:	9c02      	ldr	r4, [sp, #8]
 23fb000:	2000      	movs	r0, #0
 23fb002:	9b01      	ldr	r3, [sp, #4]
 23fb004:	2100      	movs	r1, #0
 23fb006:	3410      	adds	r4, #16
 23fb008:	f103 0510 	add.w	r5, r3, #16
 23fb00c:	441c      	add	r4, r3
 23fb00e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fb012:	f7f1 fc93 	bl	23ec93c <__adddf3>
 23fb016:	42a5      	cmp	r5, r4
 23fb018:	d1f9      	bne.n	23fb00e <__kernel_rem_pio2+0x616>
 23fb01a:	9b03      	ldr	r3, [sp, #12]
 23fb01c:	2b00      	cmp	r3, #0
 23fb01e:	f040 80b4 	bne.w	23fb18a <__kernel_rem_pio2+0x792>
 23fb022:	9d01      	ldr	r5, [sp, #4]
 23fb024:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fb026:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fb02a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fb02e:	e9c4 2300 	strd	r2, r3, [r4]
 23fb032:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fb036:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fb03a:	9b07      	ldr	r3, [sp, #28]
 23fb03c:	f003 0007 	and.w	r0, r3, #7
 23fb040:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fb044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb048:	9b01      	ldr	r3, [sp, #4]
 23fb04a:	a90c      	add	r1, sp, #48	; 0x30
 23fb04c:	1e5a      	subs	r2, r3, #1
 23fb04e:	ab0c      	add	r3, sp, #48	; 0x30
 23fb050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fb054:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fb058:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fb05c:	e695      	b.n	23fad8a <__kernel_rem_pio2+0x392>
 23fb05e:	bf00      	nop
 23fb060:	00000000 	.word	0x00000000
 23fb064:	3ff00000 	.word	0x3ff00000
 23fb068:	40000000 	.word	0x40000000
 23fb06c:	3ff921fb 	.word	0x3ff921fb
 23fb070:	3ff00000 	.word	0x3ff00000
 23fb074:	3fe00000 	.word	0x3fe00000
 23fb078:	3ffffffe 	.word	0x3ffffffe
 23fb07c:	3e700000 	.word	0x3e700000
 23fb080:	023ffd90 	.word	0x023ffd90
 23fb084:	9b01      	ldr	r3, [sp, #4]
 23fb086:	f108 0801 	add.w	r8, r8, #1
 23fb08a:	2b00      	cmp	r3, #0
 23fb08c:	f340 80a8 	ble.w	23fb1e0 <__kernel_rem_pio2+0x7e8>
 23fb090:	2502      	movs	r5, #2
 23fb092:	e641      	b.n	23fad18 <__kernel_rem_pio2+0x320>
 23fb094:	2100      	movs	r1, #0
 23fb096:	f06f 0317 	mvn.w	r3, #23
 23fb09a:	9107      	str	r1, [sp, #28]
 23fb09c:	e4cc      	b.n	23faa38 <__kernel_rem_pio2+0x40>
 23fb09e:	2400      	movs	r4, #0
 23fb0a0:	e661      	b.n	23fad66 <__kernel_rem_pio2+0x36e>
 23fb0a2:	ec47 6b10 	vmov	d0, r6, r7
 23fb0a6:	9e06      	ldr	r6, [sp, #24]
 23fb0a8:	9503      	str	r5, [sp, #12]
 23fb0aa:	4270      	negs	r0, r6
 23fb0ac:	f8cd 801c 	str.w	r8, [sp, #28]
 23fb0b0:	f000 f98e 	bl	23fb3d0 <scalbn>
 23fb0b4:	2200      	movs	r2, #0
 23fb0b6:	4b5f      	ldr	r3, [pc, #380]	; (23fb234 <__kernel_rem_pio2+0x83c>)
 23fb0b8:	ee10 0a10 	vmov	r0, s0
 23fb0bc:	ec55 4b10 	vmov	r4, r5, d0
 23fb0c0:	4629      	mov	r1, r5
 23fb0c2:	f7f2 f877 	bl	23ed1b4 <__aeabi_dcmpge>
 23fb0c6:	2800      	cmp	r0, #0
 23fb0c8:	d055      	beq.n	23fb176 <__kernel_rem_pio2+0x77e>
 23fb0ca:	3618      	adds	r6, #24
 23fb0cc:	2200      	movs	r2, #0
 23fb0ce:	4b5a      	ldr	r3, [pc, #360]	; (23fb238 <__kernel_rem_pio2+0x840>)
 23fb0d0:	4620      	mov	r0, r4
 23fb0d2:	4629      	mov	r1, r5
 23fb0d4:	9606      	str	r6, [sp, #24]
 23fb0d6:	f7f1 fde7 	bl	23ecca8 <__aeabi_dmul>
 23fb0da:	9f01      	ldr	r7, [sp, #4]
 23fb0dc:	f7f2 f894 	bl	23ed208 <__aeabi_d2iz>
 23fb0e0:	4606      	mov	r6, r0
 23fb0e2:	f7f1 fd77 	bl	23ecbd4 <__aeabi_i2d>
 23fb0e6:	2200      	movs	r2, #0
 23fb0e8:	4b52      	ldr	r3, [pc, #328]	; (23fb234 <__kernel_rem_pio2+0x83c>)
 23fb0ea:	f107 0a01 	add.w	sl, r7, #1
 23fb0ee:	f7f1 fddb 	bl	23ecca8 <__aeabi_dmul>
 23fb0f2:	460b      	mov	r3, r1
 23fb0f4:	4602      	mov	r2, r0
 23fb0f6:	4629      	mov	r1, r5
 23fb0f8:	4620      	mov	r0, r4
 23fb0fa:	f7f1 fc1d 	bl	23ec938 <__aeabi_dsub>
 23fb0fe:	f7f2 f883 	bl	23ed208 <__aeabi_d2iz>
 23fb102:	ab0c      	add	r3, sp, #48	; 0x30
 23fb104:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fb108:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fb10c:	e68c      	b.n	23fae28 <__kernel_rem_pio2+0x430>
 23fb10e:	9d01      	ldr	r5, [sp, #4]
 23fb110:	2000      	movs	r0, #0
 23fb112:	9a06      	ldr	r2, [sp, #24]
 23fb114:	2100      	movs	r1, #0
 23fb116:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fb11a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fb11e:	f7f1 fc0d 	bl	23ec93c <__adddf3>
 23fb122:	42a5      	cmp	r5, r4
 23fb124:	d1f9      	bne.n	23fb11a <__kernel_rem_pio2+0x722>
 23fb126:	9b03      	ldr	r3, [sp, #12]
 23fb128:	2b00      	cmp	r3, #0
 23fb12a:	d149      	bne.n	23fb1c0 <__kernel_rem_pio2+0x7c8>
 23fb12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fb12e:	4602      	mov	r2, r0
 23fb130:	e9c3 0100 	strd	r0, r1, [r3]
 23fb134:	460b      	mov	r3, r1
 23fb136:	9901      	ldr	r1, [sp, #4]
 23fb138:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb13c:	f7f1 fbfc 	bl	23ec938 <__aeabi_dsub>
 23fb140:	f1ba 0f00 	cmp.w	sl, #0
 23fb144:	dd0d      	ble.n	23fb162 <__kernel_rem_pio2+0x76a>
 23fb146:	ad4a      	add	r5, sp, #296	; 0x128
 23fb148:	2401      	movs	r4, #1
 23fb14a:	3401      	adds	r4, #1
 23fb14c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fb150:	f7f1 fbf4 	bl	23ec93c <__adddf3>
 23fb154:	45a2      	cmp	sl, r4
 23fb156:	daf8      	bge.n	23fb14a <__kernel_rem_pio2+0x752>
 23fb158:	9b03      	ldr	r3, [sp, #12]
 23fb15a:	b113      	cbz	r3, 23fb162 <__kernel_rem_pio2+0x76a>
 23fb15c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb160:	4619      	mov	r1, r3
 23fb162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fb164:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fb168:	9b07      	ldr	r3, [sp, #28]
 23fb16a:	f003 0007 	and.w	r0, r3, #7
 23fb16e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fb172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb176:	4620      	mov	r0, r4
 23fb178:	4629      	mov	r1, r5
 23fb17a:	f7f2 f845 	bl	23ed208 <__aeabi_d2iz>
 23fb17e:	9b01      	ldr	r3, [sp, #4]
 23fb180:	aa0c      	add	r2, sp, #48	; 0x30
 23fb182:	469a      	mov	sl, r3
 23fb184:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fb188:	e64e      	b.n	23fae28 <__kernel_rem_pio2+0x430>
 23fb18a:	9b01      	ldr	r3, [sp, #4]
 23fb18c:	4602      	mov	r2, r0
 23fb18e:	461e      	mov	r6, r3
 23fb190:	685c      	ldr	r4, [r3, #4]
 23fb192:	68dd      	ldr	r5, [r3, #12]
 23fb194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fb19a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fb19e:	6832      	ldr	r2, [r6, #0]
 23fb1a0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fb1a4:	e9c1 2300 	strd	r2, r3, [r1]
 23fb1a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fb1ac:	68b2      	ldr	r2, [r6, #8]
 23fb1ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fb1b2:	9b07      	ldr	r3, [sp, #28]
 23fb1b4:	f003 0007 	and.w	r0, r3, #7
 23fb1b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fb1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb1c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fb1c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb1c6:	6053      	str	r3, [r2, #4]
 23fb1c8:	460b      	mov	r3, r1
 23fb1ca:	9901      	ldr	r1, [sp, #4]
 23fb1cc:	6010      	str	r0, [r2, #0]
 23fb1ce:	4602      	mov	r2, r0
 23fb1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb1d4:	f7f1 fbb0 	bl	23ec938 <__aeabi_dsub>
 23fb1d8:	f1ba 0f00 	cmp.w	sl, #0
 23fb1dc:	dcb3      	bgt.n	23fb146 <__kernel_rem_pio2+0x74e>
 23fb1de:	e7bd      	b.n	23fb15c <__kernel_rem_pio2+0x764>
 23fb1e0:	4632      	mov	r2, r6
 23fb1e2:	463b      	mov	r3, r7
 23fb1e4:	2000      	movs	r0, #0
 23fb1e6:	4915      	ldr	r1, [pc, #84]	; (23fb23c <__kernel_rem_pio2+0x844>)
 23fb1e8:	f7f1 fba6 	bl	23ec938 <__aeabi_dsub>
 23fb1ec:	2502      	movs	r5, #2
 23fb1ee:	4606      	mov	r6, r0
 23fb1f0:	460f      	mov	r7, r1
 23fb1f2:	e500      	b.n	23fabf6 <__kernel_rem_pio2+0x1fe>
 23fb1f4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fb1f6:	2b02      	cmp	r3, #2
 23fb1f8:	dc0a      	bgt.n	23fb210 <__kernel_rem_pio2+0x818>
 23fb1fa:	2b00      	cmp	r3, #0
 23fb1fc:	dc11      	bgt.n	23fb222 <__kernel_rem_pio2+0x82a>
 23fb1fe:	f47f ae9c 	bne.w	23faf3a <__kernel_rem_pio2+0x542>
 23fb202:	2000      	movs	r0, #0
 23fb204:	2100      	movs	r1, #0
 23fb206:	e690      	b.n	23faf2a <__kernel_rem_pio2+0x532>
 23fb208:	9b08      	ldr	r3, [sp, #32]
 23fb20a:	00db      	lsls	r3, r3, #3
 23fb20c:	9302      	str	r3, [sp, #8]
 23fb20e:	e465      	b.n	23faadc <__kernel_rem_pio2+0xe4>
 23fb210:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fb212:	2b03      	cmp	r3, #3
 23fb214:	f47f ae91 	bne.w	23faf3a <__kernel_rem_pio2+0x542>
 23fb218:	ab48      	add	r3, sp, #288	; 0x120
 23fb21a:	2000      	movs	r0, #0
 23fb21c:	2100      	movs	r1, #0
 23fb21e:	9301      	str	r3, [sp, #4]
 23fb220:	e6fb      	b.n	23fb01a <__kernel_rem_pio2+0x622>
 23fb222:	ab48      	add	r3, sp, #288	; 0x120
 23fb224:	2000      	movs	r0, #0
 23fb226:	2100      	movs	r1, #0
 23fb228:	9301      	str	r3, [sp, #4]
 23fb22a:	e77c      	b.n	23fb126 <__kernel_rem_pio2+0x72e>
 23fb22c:	2000      	movs	r0, #0
 23fb22e:	2100      	movs	r1, #0
 23fb230:	e6f3      	b.n	23fb01a <__kernel_rem_pio2+0x622>
 23fb232:	bf00      	nop
 23fb234:	41700000 	.word	0x41700000
 23fb238:	3e700000 	.word	0x3e700000
 23fb23c:	3ff00000 	.word	0x3ff00000

023fb240 <__kernel_sin>:
 23fb240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb244:	ec5b ab10 	vmov	sl, fp, d0
 23fb248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fb24c:	4680      	mov	r8, r0
 23fb24e:	ed2d 8b02 	vpush	{d8}
 23fb252:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fb256:	b083      	sub	sp, #12
 23fb258:	ed8d 1b00 	vstr	d1, [sp]
 23fb25c:	da07      	bge.n	23fb26e <__kernel_sin+0x2e>
 23fb25e:	ee10 0a10 	vmov	r0, s0
 23fb262:	4659      	mov	r1, fp
 23fb264:	f7f1 ffd0 	bl	23ed208 <__aeabi_d2iz>
 23fb268:	2800      	cmp	r0, #0
 23fb26a:	f000 808e 	beq.w	23fb38a <__kernel_sin+0x14a>
 23fb26e:	4652      	mov	r2, sl
 23fb270:	465b      	mov	r3, fp
 23fb272:	4650      	mov	r0, sl
 23fb274:	4659      	mov	r1, fp
 23fb276:	f7f1 fd17 	bl	23ecca8 <__aeabi_dmul>
 23fb27a:	4604      	mov	r4, r0
 23fb27c:	460d      	mov	r5, r1
 23fb27e:	4650      	mov	r0, sl
 23fb280:	4622      	mov	r2, r4
 23fb282:	4659      	mov	r1, fp
 23fb284:	462b      	mov	r3, r5
 23fb286:	f7f1 fd0f 	bl	23ecca8 <__aeabi_dmul>
 23fb28a:	4606      	mov	r6, r0
 23fb28c:	460f      	mov	r7, r1
 23fb28e:	4620      	mov	r0, r4
 23fb290:	4629      	mov	r1, r5
 23fb292:	a344      	add	r3, pc, #272	; (adr r3, 23fb3a4 <__kernel_sin+0x164>)
 23fb294:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb298:	f7f1 fd06 	bl	23ecca8 <__aeabi_dmul>
 23fb29c:	a343      	add	r3, pc, #268	; (adr r3, 23fb3ac <__kernel_sin+0x16c>)
 23fb29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb2a2:	f7f1 fb49 	bl	23ec938 <__aeabi_dsub>
 23fb2a6:	4622      	mov	r2, r4
 23fb2a8:	462b      	mov	r3, r5
 23fb2aa:	f7f1 fcfd 	bl	23ecca8 <__aeabi_dmul>
 23fb2ae:	a341      	add	r3, pc, #260	; (adr r3, 23fb3b4 <__kernel_sin+0x174>)
 23fb2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb2b4:	f7f1 fb42 	bl	23ec93c <__adddf3>
 23fb2b8:	4622      	mov	r2, r4
 23fb2ba:	462b      	mov	r3, r5
 23fb2bc:	f7f1 fcf4 	bl	23ecca8 <__aeabi_dmul>
 23fb2c0:	a33e      	add	r3, pc, #248	; (adr r3, 23fb3bc <__kernel_sin+0x17c>)
 23fb2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb2c6:	f7f1 fb37 	bl	23ec938 <__aeabi_dsub>
 23fb2ca:	4622      	mov	r2, r4
 23fb2cc:	462b      	mov	r3, r5
 23fb2ce:	f7f1 fceb 	bl	23ecca8 <__aeabi_dmul>
 23fb2d2:	a33c      	add	r3, pc, #240	; (adr r3, 23fb3c4 <__kernel_sin+0x184>)
 23fb2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb2d8:	f7f1 fb30 	bl	23ec93c <__adddf3>
 23fb2dc:	ec41 0b18 	vmov	d8, r0, r1
 23fb2e0:	f1b8 0f00 	cmp.w	r8, #0
 23fb2e4:	d037      	beq.n	23fb356 <__kernel_sin+0x116>
 23fb2e6:	2200      	movs	r2, #0
 23fb2e8:	4b2d      	ldr	r3, [pc, #180]	; (23fb3a0 <__kernel_sin+0x160>)
 23fb2ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fb2ee:	f7f1 fcdb 	bl	23ecca8 <__aeabi_dmul>
 23fb2f2:	4680      	mov	r8, r0
 23fb2f4:	4689      	mov	r9, r1
 23fb2f6:	4630      	mov	r0, r6
 23fb2f8:	4639      	mov	r1, r7
 23fb2fa:	ec53 2b18 	vmov	r2, r3, d8
 23fb2fe:	f7f1 fcd3 	bl	23ecca8 <__aeabi_dmul>
 23fb302:	4602      	mov	r2, r0
 23fb304:	460b      	mov	r3, r1
 23fb306:	4640      	mov	r0, r8
 23fb308:	4649      	mov	r1, r9
 23fb30a:	f7f1 fb15 	bl	23ec938 <__aeabi_dsub>
 23fb30e:	4622      	mov	r2, r4
 23fb310:	462b      	mov	r3, r5
 23fb312:	f7f1 fcc9 	bl	23ecca8 <__aeabi_dmul>
 23fb316:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb31a:	f7f1 fb0d 	bl	23ec938 <__aeabi_dsub>
 23fb31e:	4604      	mov	r4, r0
 23fb320:	460d      	mov	r5, r1
 23fb322:	4630      	mov	r0, r6
 23fb324:	4639      	mov	r1, r7
 23fb326:	a31c      	add	r3, pc, #112	; (adr r3, 23fb398 <__kernel_sin+0x158>)
 23fb328:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb32c:	f7f1 fcbc 	bl	23ecca8 <__aeabi_dmul>
 23fb330:	4602      	mov	r2, r0
 23fb332:	460b      	mov	r3, r1
 23fb334:	4620      	mov	r0, r4
 23fb336:	4629      	mov	r1, r5
 23fb338:	f7f1 fb00 	bl	23ec93c <__adddf3>
 23fb33c:	4602      	mov	r2, r0
 23fb33e:	460b      	mov	r3, r1
 23fb340:	4650      	mov	r0, sl
 23fb342:	4659      	mov	r1, fp
 23fb344:	f7f1 faf8 	bl	23ec938 <__aeabi_dsub>
 23fb348:	ec41 0b10 	vmov	d0, r0, r1
 23fb34c:	b003      	add	sp, #12
 23fb34e:	ecbd 8b02 	vpop	{d8}
 23fb352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb356:	4602      	mov	r2, r0
 23fb358:	460b      	mov	r3, r1
 23fb35a:	4620      	mov	r0, r4
 23fb35c:	4629      	mov	r1, r5
 23fb35e:	f7f1 fca3 	bl	23ecca8 <__aeabi_dmul>
 23fb362:	a30d      	add	r3, pc, #52	; (adr r3, 23fb398 <__kernel_sin+0x158>)
 23fb364:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb368:	f7f1 fae6 	bl	23ec938 <__aeabi_dsub>
 23fb36c:	4632      	mov	r2, r6
 23fb36e:	463b      	mov	r3, r7
 23fb370:	f7f1 fc9a 	bl	23ecca8 <__aeabi_dmul>
 23fb374:	4652      	mov	r2, sl
 23fb376:	465b      	mov	r3, fp
 23fb378:	f7f1 fae0 	bl	23ec93c <__adddf3>
 23fb37c:	ec41 0b10 	vmov	d0, r0, r1
 23fb380:	b003      	add	sp, #12
 23fb382:	ecbd 8b02 	vpop	{d8}
 23fb386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb38a:	ec4b ab10 	vmov	d0, sl, fp
 23fb38e:	b003      	add	sp, #12
 23fb390:	ecbd 8b02 	vpop	{d8}
 23fb394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb398:	55555549 	.word	0x55555549
 23fb39c:	3fc55555 	.word	0x3fc55555
 23fb3a0:	3fe00000 	.word	0x3fe00000
 23fb3a4:	5acfd57c 	.word	0x5acfd57c
 23fb3a8:	3de5d93a 	.word	0x3de5d93a
 23fb3ac:	8a2b9ceb 	.word	0x8a2b9ceb
 23fb3b0:	3e5ae5e6 	.word	0x3e5ae5e6
 23fb3b4:	57b1fe7d 	.word	0x57b1fe7d
 23fb3b8:	3ec71de3 	.word	0x3ec71de3
 23fb3bc:	19c161d5 	.word	0x19c161d5
 23fb3c0:	3f2a01a0 	.word	0x3f2a01a0
 23fb3c4:	1110f8a6 	.word	0x1110f8a6
 23fb3c8:	3f811111 	.word	0x3f811111
 23fb3cc:	00000000 	.word	0x00000000

023fb3d0 <scalbn>:
 23fb3d0:	b538      	push	{r3, r4, r5, lr}
 23fb3d2:	ec53 2b10 	vmov	r2, r3, d0
 23fb3d6:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fb3da:	469c      	mov	ip, r3
 23fb3dc:	4604      	mov	r4, r0
 23fb3de:	bb89      	cbnz	r1, 23fb444 <scalbn+0x74>
 23fb3e0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fb3e4:	ee10 1a10 	vmov	r1, s0
 23fb3e8:	ea5c 0101 	orrs.w	r1, ip, r1
 23fb3ec:	d029      	beq.n	23fb442 <scalbn+0x72>
 23fb3ee:	4d3e      	ldr	r5, [pc, #248]	; (23fb4e8 <scalbn+0x118>)
 23fb3f0:	4619      	mov	r1, r3
 23fb3f2:	2200      	movs	r2, #0
 23fb3f4:	4b3d      	ldr	r3, [pc, #244]	; (23fb4ec <scalbn+0x11c>)
 23fb3f6:	ee10 0a10 	vmov	r0, s0
 23fb3fa:	f7f1 fc55 	bl	23ecca8 <__aeabi_dmul>
 23fb3fe:	42ac      	cmp	r4, r5
 23fb400:	4602      	mov	r2, r0
 23fb402:	460b      	mov	r3, r1
 23fb404:	db16      	blt.n	23fb434 <scalbn+0x64>
 23fb406:	468c      	mov	ip, r1
 23fb408:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fb40c:	3936      	subs	r1, #54	; 0x36
 23fb40e:	4421      	add	r1, r4
 23fb410:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fb414:	4281      	cmp	r1, r0
 23fb416:	dc21      	bgt.n	23fb45c <scalbn+0x8c>
 23fb418:	2900      	cmp	r1, #0
 23fb41a:	dc47      	bgt.n	23fb4ac <scalbn+0xdc>
 23fb41c:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fb420:	da34      	bge.n	23fb48c <scalbn+0xbc>
 23fb422:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fb426:	428c      	cmp	r4, r1
 23fb428:	dc18      	bgt.n	23fb45c <scalbn+0x8c>
 23fb42a:	2b00      	cmp	r3, #0
 23fb42c:	a126      	add	r1, pc, #152	; (adr r1, 23fb4c8 <scalbn+0xf8>)
 23fb42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb432:	db43      	blt.n	23fb4bc <scalbn+0xec>
 23fb434:	a324      	add	r3, pc, #144	; (adr r3, 23fb4c8 <scalbn+0xf8>)
 23fb436:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb43a:	f7f1 fc35 	bl	23ecca8 <__aeabi_dmul>
 23fb43e:	ec41 0b10 	vmov	d0, r0, r1
 23fb442:	bd38      	pop	{r3, r4, r5, pc}
 23fb444:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fb448:	4571      	cmp	r1, lr
 23fb44a:	d1e0      	bne.n	23fb40e <scalbn+0x3e>
 23fb44c:	ee10 0a10 	vmov	r0, s0
 23fb450:	4619      	mov	r1, r3
 23fb452:	f7f1 fa73 	bl	23ec93c <__adddf3>
 23fb456:	ec41 0b10 	vmov	d0, r0, r1
 23fb45a:	bd38      	pop	{r3, r4, r5, pc}
 23fb45c:	2b00      	cmp	r3, #0
 23fb45e:	a11c      	add	r1, pc, #112	; (adr r1, 23fb4d0 <scalbn+0x100>)
 23fb460:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb464:	db07      	blt.n	23fb476 <scalbn+0xa6>
 23fb466:	a31a      	add	r3, pc, #104	; (adr r3, 23fb4d0 <scalbn+0x100>)
 23fb468:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb46c:	f7f1 fc1c 	bl	23ecca8 <__aeabi_dmul>
 23fb470:	ec41 0b10 	vmov	d0, r0, r1
 23fb474:	bd38      	pop	{r3, r4, r5, pc}
 23fb476:	a118      	add	r1, pc, #96	; (adr r1, 23fb4d8 <scalbn+0x108>)
 23fb478:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb47c:	a314      	add	r3, pc, #80	; (adr r3, 23fb4d0 <scalbn+0x100>)
 23fb47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb482:	f7f1 fc11 	bl	23ecca8 <__aeabi_dmul>
 23fb486:	ec41 0b10 	vmov	d0, r0, r1
 23fb48a:	e7f3      	b.n	23fb474 <scalbn+0xa4>
 23fb48c:	4818      	ldr	r0, [pc, #96]	; (23fb4f0 <scalbn+0x120>)
 23fb48e:	3136      	adds	r1, #54	; 0x36
 23fb490:	4614      	mov	r4, r2
 23fb492:	4b18      	ldr	r3, [pc, #96]	; (23fb4f4 <scalbn+0x124>)
 23fb494:	ea0c 0000 	and.w	r0, ip, r0
 23fb498:	2200      	movs	r2, #0
 23fb49a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fb49e:	4620      	mov	r0, r4
 23fb4a0:	4629      	mov	r1, r5
 23fb4a2:	f7f1 fc01 	bl	23ecca8 <__aeabi_dmul>
 23fb4a6:	ec41 0b10 	vmov	d0, r0, r1
 23fb4aa:	bd38      	pop	{r3, r4, r5, pc}
 23fb4ac:	4810      	ldr	r0, [pc, #64]	; (23fb4f0 <scalbn+0x120>)
 23fb4ae:	ea0c 0000 	and.w	r0, ip, r0
 23fb4b2:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fb4b6:	ec43 2b10 	vmov	d0, r2, r3
 23fb4ba:	bd38      	pop	{r3, r4, r5, pc}
 23fb4bc:	a108      	add	r1, pc, #32	; (adr r1, 23fb4e0 <scalbn+0x110>)
 23fb4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb4c2:	e7b7      	b.n	23fb434 <scalbn+0x64>
 23fb4c4:	f3af 8000 	nop.w
 23fb4c8:	c2f8f359 	.word	0xc2f8f359
 23fb4cc:	01a56e1f 	.word	0x01a56e1f
 23fb4d0:	8800759c 	.word	0x8800759c
 23fb4d4:	7e37e43c 	.word	0x7e37e43c
 23fb4d8:	8800759c 	.word	0x8800759c
 23fb4dc:	fe37e43c 	.word	0xfe37e43c
 23fb4e0:	c2f8f359 	.word	0xc2f8f359
 23fb4e4:	81a56e1f 	.word	0x81a56e1f
 23fb4e8:	ffff3cb0 	.word	0xffff3cb0
 23fb4ec:	43500000 	.word	0x43500000
 23fb4f0:	800fffff 	.word	0x800fffff
 23fb4f4:	3c900000 	.word	0x3c900000

023fb4f8 <finitef>:
 23fb4f8:	b082      	sub	sp, #8
 23fb4fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 23fb4fe:	9801      	ldr	r0, [sp, #4]
 23fb500:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fb504:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 23fb508:	bfac      	ite	ge
 23fb50a:	2000      	movge	r0, #0
 23fb50c:	2001      	movlt	r0, #1
 23fb50e:	b002      	add	sp, #8
 23fb510:	4770      	bx	lr
 23fb512:	bf00      	nop

023fb514 <atexit>:
 23fb514:	2300      	movs	r3, #0
 23fb516:	4601      	mov	r1, r0
 23fb518:	461a      	mov	r2, r3
 23fb51a:	4618      	mov	r0, r3
 23fb51c:	f000 b954 	b.w	23fb7c8 <__register_exitproc>

023fb520 <calloc>:
 23fb520:	4b02      	ldr	r3, [pc, #8]	; (23fb52c <calloc+0xc>)
 23fb522:	460a      	mov	r2, r1
 23fb524:	4601      	mov	r1, r0
 23fb526:	6818      	ldr	r0, [r3, #0]
 23fb528:	f000 b83c 	b.w	23fb5a4 <_calloc_r>
 23fb52c:	10079c30 	.word	0x10079c30

023fb530 <isprint>:
 23fb530:	4b02      	ldr	r3, [pc, #8]	; (23fb53c <isprint+0xc>)
 23fb532:	4418      	add	r0, r3
 23fb534:	7840      	ldrb	r0, [r0, #1]
 23fb536:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fb53a:	4770      	bx	lr
 23fb53c:	023ffe6c 	.word	0x023ffe6c

023fb540 <__retarget_lock_acquire_recursive>:
 23fb540:	4770      	bx	lr

023fb542 <__retarget_lock_release>:
 23fb542:	4770      	bx	lr

023fb544 <__retarget_lock_release_recursive>:
 23fb544:	4770      	bx	lr

023fb546 <memcpy>:
 23fb546:	440a      	add	r2, r1
 23fb548:	1e43      	subs	r3, r0, #1
 23fb54a:	4291      	cmp	r1, r2
 23fb54c:	d100      	bne.n	23fb550 <memcpy+0xa>
 23fb54e:	4770      	bx	lr
 23fb550:	b510      	push	{r4, lr}
 23fb552:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fb556:	4291      	cmp	r1, r2
 23fb558:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fb55c:	d1f9      	bne.n	23fb552 <memcpy+0xc>
 23fb55e:	bd10      	pop	{r4, pc}

023fb560 <memmove>:
 23fb560:	4288      	cmp	r0, r1
 23fb562:	b510      	push	{r4, lr}
 23fb564:	eb01 0402 	add.w	r4, r1, r2
 23fb568:	d902      	bls.n	23fb570 <memmove+0x10>
 23fb56a:	4284      	cmp	r4, r0
 23fb56c:	4623      	mov	r3, r4
 23fb56e:	d807      	bhi.n	23fb580 <memmove+0x20>
 23fb570:	1e43      	subs	r3, r0, #1
 23fb572:	42a1      	cmp	r1, r4
 23fb574:	d008      	beq.n	23fb588 <memmove+0x28>
 23fb576:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fb57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fb57e:	e7f8      	b.n	23fb572 <memmove+0x12>
 23fb580:	4402      	add	r2, r0
 23fb582:	4601      	mov	r1, r0
 23fb584:	428a      	cmp	r2, r1
 23fb586:	d100      	bne.n	23fb58a <memmove+0x2a>
 23fb588:	bd10      	pop	{r4, pc}
 23fb58a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fb58e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fb592:	e7f7      	b.n	23fb584 <memmove+0x24>

023fb594 <memset>:
 23fb594:	4402      	add	r2, r0
 23fb596:	4603      	mov	r3, r0
 23fb598:	4293      	cmp	r3, r2
 23fb59a:	d100      	bne.n	23fb59e <memset+0xa>
 23fb59c:	4770      	bx	lr
 23fb59e:	f803 1b01 	strb.w	r1, [r3], #1
 23fb5a2:	e7f9      	b.n	23fb598 <memset+0x4>

023fb5a4 <_calloc_r>:
 23fb5a4:	434a      	muls	r2, r1
 23fb5a6:	b513      	push	{r0, r1, r4, lr}
 23fb5a8:	4611      	mov	r1, r2
 23fb5aa:	9201      	str	r2, [sp, #4]
 23fb5ac:	f7fc f844 	bl	23f7638 <_malloc_r>
 23fb5b0:	4604      	mov	r4, r0
 23fb5b2:	b118      	cbz	r0, 23fb5bc <_calloc_r+0x18>
 23fb5b4:	9a01      	ldr	r2, [sp, #4]
 23fb5b6:	2100      	movs	r1, #0
 23fb5b8:	f7ff ffec 	bl	23fb594 <memset>
 23fb5bc:	4620      	mov	r0, r4
 23fb5be:	b002      	add	sp, #8
 23fb5c0:	bd10      	pop	{r4, pc}
	...

023fb5c4 <srand>:
 23fb5c4:	b538      	push	{r3, r4, r5, lr}
 23fb5c6:	4b10      	ldr	r3, [pc, #64]	; (23fb608 <srand+0x44>)
 23fb5c8:	4604      	mov	r4, r0
 23fb5ca:	681d      	ldr	r5, [r3, #0]
 23fb5cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb5ce:	b9b3      	cbnz	r3, 23fb5fe <srand+0x3a>
 23fb5d0:	2018      	movs	r0, #24
 23fb5d2:	f7fb ffeb 	bl	23f75ac <malloc>
 23fb5d6:	4602      	mov	r2, r0
 23fb5d8:	63a8      	str	r0, [r5, #56]	; 0x38
 23fb5da:	b920      	cbnz	r0, 23fb5e6 <srand+0x22>
 23fb5dc:	4b0b      	ldr	r3, [pc, #44]	; (23fb60c <srand+0x48>)
 23fb5de:	2142      	movs	r1, #66	; 0x42
 23fb5e0:	480b      	ldr	r0, [pc, #44]	; (23fb610 <srand+0x4c>)
 23fb5e2:	f7fc f845 	bl	23f7670 <__assert_func>
 23fb5e6:	490b      	ldr	r1, [pc, #44]	; (23fb614 <srand+0x50>)
 23fb5e8:	4b0b      	ldr	r3, [pc, #44]	; (23fb618 <srand+0x54>)
 23fb5ea:	e9c0 1300 	strd	r1, r3, [r0]
 23fb5ee:	4b0b      	ldr	r3, [pc, #44]	; (23fb61c <srand+0x58>)
 23fb5f0:	2100      	movs	r1, #0
 23fb5f2:	6083      	str	r3, [r0, #8]
 23fb5f4:	230b      	movs	r3, #11
 23fb5f6:	8183      	strh	r3, [r0, #12]
 23fb5f8:	2001      	movs	r0, #1
 23fb5fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fb5fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb600:	2200      	movs	r2, #0
 23fb602:	611c      	str	r4, [r3, #16]
 23fb604:	615a      	str	r2, [r3, #20]
 23fb606:	bd38      	pop	{r3, r4, r5, pc}
 23fb608:	10079c30 	.word	0x10079c30
 23fb60c:	023ffdd8 	.word	0x023ffdd8
 23fb610:	023ffdef 	.word	0x023ffdef
 23fb614:	abcd330e 	.word	0xabcd330e
 23fb618:	e66d1234 	.word	0xe66d1234
 23fb61c:	0005deec 	.word	0x0005deec

023fb620 <strchr>:
 23fb620:	b2c9      	uxtb	r1, r1
 23fb622:	4603      	mov	r3, r0
 23fb624:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb628:	b11a      	cbz	r2, 23fb632 <strchr+0x12>
 23fb62a:	428a      	cmp	r2, r1
 23fb62c:	d1f9      	bne.n	23fb622 <strchr+0x2>
 23fb62e:	4618      	mov	r0, r3
 23fb630:	4770      	bx	lr
 23fb632:	2900      	cmp	r1, #0
 23fb634:	bf18      	it	ne
 23fb636:	2300      	movne	r3, #0
 23fb638:	e7f9      	b.n	23fb62e <strchr+0xe>

023fb63a <strchrnul>:
 23fb63a:	b510      	push	{r4, lr}
 23fb63c:	4604      	mov	r4, r0
 23fb63e:	f7ff ffef 	bl	23fb620 <strchr>
 23fb642:	b918      	cbnz	r0, 23fb64c <strchrnul+0x12>
 23fb644:	4620      	mov	r0, r4
 23fb646:	f7f2 f87f 	bl	23ed748 <strlen>
 23fb64a:	4420      	add	r0, r4
 23fb64c:	bd10      	pop	{r4, pc}

023fb64e <strcpy>:
 23fb64e:	4603      	mov	r3, r0
 23fb650:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fb654:	f803 2b01 	strb.w	r2, [r3], #1
 23fb658:	2a00      	cmp	r2, #0
 23fb65a:	d1f9      	bne.n	23fb650 <strcpy+0x2>
 23fb65c:	4770      	bx	lr

023fb65e <strncmp>:
 23fb65e:	b510      	push	{r4, lr}
 23fb660:	b17a      	cbz	r2, 23fb682 <strncmp+0x24>
 23fb662:	4603      	mov	r3, r0
 23fb664:	3901      	subs	r1, #1
 23fb666:	1884      	adds	r4, r0, r2
 23fb668:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb66c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fb670:	4290      	cmp	r0, r2
 23fb672:	d101      	bne.n	23fb678 <strncmp+0x1a>
 23fb674:	42a3      	cmp	r3, r4
 23fb676:	d101      	bne.n	23fb67c <strncmp+0x1e>
 23fb678:	1a80      	subs	r0, r0, r2
 23fb67a:	bd10      	pop	{r4, pc}
 23fb67c:	2800      	cmp	r0, #0
 23fb67e:	d1f3      	bne.n	23fb668 <strncmp+0xa>
 23fb680:	e7fa      	b.n	23fb678 <strncmp+0x1a>
 23fb682:	4610      	mov	r0, r2
 23fb684:	e7f9      	b.n	23fb67a <strncmp+0x1c>

023fb686 <strrchr>:
 23fb686:	b538      	push	{r3, r4, r5, lr}
 23fb688:	4603      	mov	r3, r0
 23fb68a:	460c      	mov	r4, r1
 23fb68c:	b969      	cbnz	r1, 23fb6aa <strrchr+0x24>
 23fb68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fb692:	f7ff bfc5 	b.w	23fb620 <strchr>
 23fb696:	1c43      	adds	r3, r0, #1
 23fb698:	4605      	mov	r5, r0
 23fb69a:	4621      	mov	r1, r4
 23fb69c:	4618      	mov	r0, r3
 23fb69e:	f7ff ffbf 	bl	23fb620 <strchr>
 23fb6a2:	2800      	cmp	r0, #0
 23fb6a4:	d1f7      	bne.n	23fb696 <strrchr+0x10>
 23fb6a6:	4628      	mov	r0, r5
 23fb6a8:	bd38      	pop	{r3, r4, r5, pc}
 23fb6aa:	2500      	movs	r5, #0
 23fb6ac:	e7f5      	b.n	23fb69a <strrchr+0x14>
	...

023fb6b0 <_strtol_l.constprop.0>:
 23fb6b0:	2b01      	cmp	r3, #1
 23fb6b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb6b6:	d001      	beq.n	23fb6bc <_strtol_l.constprop.0+0xc>
 23fb6b8:	2b24      	cmp	r3, #36	; 0x24
 23fb6ba:	d906      	bls.n	23fb6ca <_strtol_l.constprop.0+0x1a>
 23fb6bc:	f7fb ffca 	bl	23f7654 <__errno>
 23fb6c0:	2316      	movs	r3, #22
 23fb6c2:	6003      	str	r3, [r0, #0]
 23fb6c4:	2000      	movs	r0, #0
 23fb6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fb6ca:	460d      	mov	r5, r1
 23fb6cc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fb7b0 <_strtol_l.constprop.0+0x100>
 23fb6d0:	462e      	mov	r6, r5
 23fb6d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fb6d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fb6da:	f017 0708 	ands.w	r7, r7, #8
 23fb6de:	d1f7      	bne.n	23fb6d0 <_strtol_l.constprop.0+0x20>
 23fb6e0:	2c2d      	cmp	r4, #45	; 0x2d
 23fb6e2:	d132      	bne.n	23fb74a <_strtol_l.constprop.0+0x9a>
 23fb6e4:	782c      	ldrb	r4, [r5, #0]
 23fb6e6:	2701      	movs	r7, #1
 23fb6e8:	1cb5      	adds	r5, r6, #2
 23fb6ea:	2b00      	cmp	r3, #0
 23fb6ec:	d05b      	beq.n	23fb7a6 <_strtol_l.constprop.0+0xf6>
 23fb6ee:	2b10      	cmp	r3, #16
 23fb6f0:	d109      	bne.n	23fb706 <_strtol_l.constprop.0+0x56>
 23fb6f2:	2c30      	cmp	r4, #48	; 0x30
 23fb6f4:	d107      	bne.n	23fb706 <_strtol_l.constprop.0+0x56>
 23fb6f6:	782c      	ldrb	r4, [r5, #0]
 23fb6f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fb6fc:	2c58      	cmp	r4, #88	; 0x58
 23fb6fe:	d14d      	bne.n	23fb79c <_strtol_l.constprop.0+0xec>
 23fb700:	786c      	ldrb	r4, [r5, #1]
 23fb702:	2310      	movs	r3, #16
 23fb704:	3502      	adds	r5, #2
 23fb706:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fb70a:	f04f 0c00 	mov.w	ip, #0
 23fb70e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fb712:	4666      	mov	r6, ip
 23fb714:	fbb8 f9f3 	udiv	r9, r8, r3
 23fb718:	fb03 8a19 	mls	sl, r3, r9, r8
 23fb71c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fb720:	f1be 0f09 	cmp.w	lr, #9
 23fb724:	d816      	bhi.n	23fb754 <_strtol_l.constprop.0+0xa4>
 23fb726:	4674      	mov	r4, lr
 23fb728:	42a3      	cmp	r3, r4
 23fb72a:	dd24      	ble.n	23fb776 <_strtol_l.constprop.0+0xc6>
 23fb72c:	f1bc 0f00 	cmp.w	ip, #0
 23fb730:	db1e      	blt.n	23fb770 <_strtol_l.constprop.0+0xc0>
 23fb732:	45b1      	cmp	r9, r6
 23fb734:	d31c      	bcc.n	23fb770 <_strtol_l.constprop.0+0xc0>
 23fb736:	d101      	bne.n	23fb73c <_strtol_l.constprop.0+0x8c>
 23fb738:	45a2      	cmp	sl, r4
 23fb73a:	db19      	blt.n	23fb770 <_strtol_l.constprop.0+0xc0>
 23fb73c:	fb06 4603 	mla	r6, r6, r3, r4
 23fb740:	f04f 0c01 	mov.w	ip, #1
 23fb744:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fb748:	e7e8      	b.n	23fb71c <_strtol_l.constprop.0+0x6c>
 23fb74a:	2c2b      	cmp	r4, #43	; 0x2b
 23fb74c:	bf04      	itt	eq
 23fb74e:	782c      	ldrbeq	r4, [r5, #0]
 23fb750:	1cb5      	addeq	r5, r6, #2
 23fb752:	e7ca      	b.n	23fb6ea <_strtol_l.constprop.0+0x3a>
 23fb754:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fb758:	f1be 0f19 	cmp.w	lr, #25
 23fb75c:	d801      	bhi.n	23fb762 <_strtol_l.constprop.0+0xb2>
 23fb75e:	3c37      	subs	r4, #55	; 0x37
 23fb760:	e7e2      	b.n	23fb728 <_strtol_l.constprop.0+0x78>
 23fb762:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fb766:	f1be 0f19 	cmp.w	lr, #25
 23fb76a:	d804      	bhi.n	23fb776 <_strtol_l.constprop.0+0xc6>
 23fb76c:	3c57      	subs	r4, #87	; 0x57
 23fb76e:	e7db      	b.n	23fb728 <_strtol_l.constprop.0+0x78>
 23fb770:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb774:	e7e6      	b.n	23fb744 <_strtol_l.constprop.0+0x94>
 23fb776:	f1bc 0f00 	cmp.w	ip, #0
 23fb77a:	da05      	bge.n	23fb788 <_strtol_l.constprop.0+0xd8>
 23fb77c:	2322      	movs	r3, #34	; 0x22
 23fb77e:	4646      	mov	r6, r8
 23fb780:	6003      	str	r3, [r0, #0]
 23fb782:	b942      	cbnz	r2, 23fb796 <_strtol_l.constprop.0+0xe6>
 23fb784:	4630      	mov	r0, r6
 23fb786:	e79e      	b.n	23fb6c6 <_strtol_l.constprop.0+0x16>
 23fb788:	b107      	cbz	r7, 23fb78c <_strtol_l.constprop.0+0xdc>
 23fb78a:	4276      	negs	r6, r6
 23fb78c:	2a00      	cmp	r2, #0
 23fb78e:	d0f9      	beq.n	23fb784 <_strtol_l.constprop.0+0xd4>
 23fb790:	f1bc 0f00 	cmp.w	ip, #0
 23fb794:	d000      	beq.n	23fb798 <_strtol_l.constprop.0+0xe8>
 23fb796:	1e69      	subs	r1, r5, #1
 23fb798:	6011      	str	r1, [r2, #0]
 23fb79a:	e7f3      	b.n	23fb784 <_strtol_l.constprop.0+0xd4>
 23fb79c:	2430      	movs	r4, #48	; 0x30
 23fb79e:	2b00      	cmp	r3, #0
 23fb7a0:	d1b1      	bne.n	23fb706 <_strtol_l.constprop.0+0x56>
 23fb7a2:	2308      	movs	r3, #8
 23fb7a4:	e7af      	b.n	23fb706 <_strtol_l.constprop.0+0x56>
 23fb7a6:	2c30      	cmp	r4, #48	; 0x30
 23fb7a8:	d0a5      	beq.n	23fb6f6 <_strtol_l.constprop.0+0x46>
 23fb7aa:	230a      	movs	r3, #10
 23fb7ac:	e7ab      	b.n	23fb706 <_strtol_l.constprop.0+0x56>
 23fb7ae:	bf00      	nop
 23fb7b0:	023ffe6d 	.word	0x023ffe6d

023fb7b4 <strtol>:
 23fb7b4:	4613      	mov	r3, r2
 23fb7b6:	460a      	mov	r2, r1
 23fb7b8:	4601      	mov	r1, r0
 23fb7ba:	4802      	ldr	r0, [pc, #8]	; (23fb7c4 <strtol+0x10>)
 23fb7bc:	6800      	ldr	r0, [r0, #0]
 23fb7be:	f7ff bf77 	b.w	23fb6b0 <_strtol_l.constprop.0>
 23fb7c2:	bf00      	nop
 23fb7c4:	10079c30 	.word	0x10079c30

023fb7c8 <__register_exitproc>:
 23fb7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fb7cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fb88c <__register_exitproc+0xc4>
 23fb7d0:	4606      	mov	r6, r0
 23fb7d2:	461f      	mov	r7, r3
 23fb7d4:	460d      	mov	r5, r1
 23fb7d6:	f8d8 0000 	ldr.w	r0, [r8]
 23fb7da:	4691      	mov	r9, r2
 23fb7dc:	f7ff feb0 	bl	23fb540 <__retarget_lock_acquire_recursive>
 23fb7e0:	4b26      	ldr	r3, [pc, #152]	; (23fb87c <__register_exitproc+0xb4>)
 23fb7e2:	681c      	ldr	r4, [r3, #0]
 23fb7e4:	b934      	cbnz	r4, 23fb7f4 <__register_exitproc+0x2c>
 23fb7e6:	4c26      	ldr	r4, [pc, #152]	; (23fb880 <__register_exitproc+0xb8>)
 23fb7e8:	601c      	str	r4, [r3, #0]
 23fb7ea:	4b26      	ldr	r3, [pc, #152]	; (23fb884 <__register_exitproc+0xbc>)
 23fb7ec:	b113      	cbz	r3, 23fb7f4 <__register_exitproc+0x2c>
 23fb7ee:	681b      	ldr	r3, [r3, #0]
 23fb7f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fb7f4:	6863      	ldr	r3, [r4, #4]
 23fb7f6:	2b1f      	cmp	r3, #31
 23fb7f8:	dd07      	ble.n	23fb80a <__register_exitproc+0x42>
 23fb7fa:	f8d8 0000 	ldr.w	r0, [r8]
 23fb7fe:	f7ff fea1 	bl	23fb544 <__retarget_lock_release_recursive>
 23fb802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fb806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fb80a:	b35e      	cbz	r6, 23fb864 <__register_exitproc+0x9c>
 23fb80c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fb810:	b988      	cbnz	r0, 23fb836 <__register_exitproc+0x6e>
 23fb812:	4b1d      	ldr	r3, [pc, #116]	; (23fb888 <__register_exitproc+0xc0>)
 23fb814:	b923      	cbnz	r3, 23fb820 <__register_exitproc+0x58>
 23fb816:	f8d8 0000 	ldr.w	r0, [r8]
 23fb81a:	f7ff fe92 	bl	23fb542 <__retarget_lock_release>
 23fb81e:	e7f0      	b.n	23fb802 <__register_exitproc+0x3a>
 23fb820:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fb824:	f7fb fec2 	bl	23f75ac <malloc>
 23fb828:	2800      	cmp	r0, #0
 23fb82a:	d0f4      	beq.n	23fb816 <__register_exitproc+0x4e>
 23fb82c:	2300      	movs	r3, #0
 23fb82e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fb832:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fb836:	6863      	ldr	r3, [r4, #4]
 23fb838:	2201      	movs	r2, #1
 23fb83a:	2e02      	cmp	r6, #2
 23fb83c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fb840:	fa02 f203 	lsl.w	r2, r2, r3
 23fb844:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fb848:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fb84c:	ea43 0302 	orr.w	r3, r3, r2
 23fb850:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fb854:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fb858:	bf02      	ittt	eq
 23fb85a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fb85e:	4313      	orreq	r3, r2
 23fb860:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fb864:	6863      	ldr	r3, [r4, #4]
 23fb866:	f8d8 0000 	ldr.w	r0, [r8]
 23fb86a:	1c5a      	adds	r2, r3, #1
 23fb86c:	3302      	adds	r3, #2
 23fb86e:	6062      	str	r2, [r4, #4]
 23fb870:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fb874:	f7ff fe66 	bl	23fb544 <__retarget_lock_release_recursive>
 23fb878:	2000      	movs	r0, #0
 23fb87a:	e7c4      	b.n	23fb806 <__register_exitproc+0x3e>
 23fb87c:	1007afec 	.word	0x1007afec
 23fb880:	1007af60 	.word	0x1007af60
 23fb884:	00000000 	.word	0x00000000
 23fb888:	023f75ad 	.word	0x023f75ad
 23fb88c:	10079c94 	.word	0x10079c94

023fb890 <__DelayUs_veneer>:
 23fb890:	b401      	push	{r0}
 23fb892:	4802      	ldr	r0, [pc, #8]	; (23fb89c <__DelayUs_veneer+0xc>)
 23fb894:	4684      	mov	ip, r0
 23fb896:	bc01      	pop	{r0}
 23fb898:	4760      	bx	ip
 23fb89a:	bf00      	nop
 23fb89c:	1010a949 	.word	0x1010a949

023fb8a0 <__DelayMs_veneer>:
 23fb8a0:	b401      	push	{r0}
 23fb8a2:	4802      	ldr	r0, [pc, #8]	; (23fb8ac <__DelayMs_veneer+0xc>)
 23fb8a4:	4684      	mov	ip, r0
 23fb8a6:	bc01      	pop	{r0}
 23fb8a8:	4760      	bx	ip
 23fb8aa:	bf00      	nop
 23fb8ac:	1010a995 	.word	0x1010a995

023fb8b0 <__io_assert_failed_veneer>:
 23fb8b0:	b401      	push	{r0}
 23fb8b2:	4802      	ldr	r0, [pc, #8]	; (23fb8bc <__io_assert_failed_veneer+0xc>)
 23fb8b4:	4684      	mov	ip, r0
 23fb8b6:	bc01      	pop	{r0}
 23fb8b8:	4760      	bx	ip
 23fb8ba:	bf00      	nop
 23fb8bc:	1010a871 	.word	0x1010a871

023fb8c0 <link_const_data_start>:
 23fb8c0:	00042783 	.word	0x00042783
 23fb8c4:	023fc47c 	.word	0x023fc47c
 23fb8c8:	023fc486 	.word	0x023fc486
 23fb8cc:	00000001 	.word	0x00000001
 23fb8d0:	00000f78 	.word	0x00000f78
 23fb8d4:	00003e80 	.word	0x00003e80
 23fb8d8:	00000001 	.word	0x00000001
 23fb8dc:	00003e80 	.word	0x00003e80
	...
 23fb8ec:	3d800000 	.word	0x3d800000
 23fb8f0:	467a0000 	.word	0x467a0000
 23fb8f4:	00000001 	.word	0x00000001
 23fb8f8:	100799b8 	.word	0x100799b8
	...
 23fb904:	000000ff 	.word	0x000000ff
 23fb908:	00000000 	.word	0x00000000
 23fb90c:	00000009 	.word	0x00000009
 23fb910:	00000001 	.word	0x00000001
 23fb914:	023fcc78 	.word	0x023fcc78
 23fb918:	00000002 	.word	0x00000002
 23fb91c:	00000001 	.word	0x00000001
 23fb920:	023fc494 	.word	0x023fc494
 23fb924:	00000fa0 	.word	0x00000fa0
 23fb928:	00000004 	.word	0x00000004
 23fb92c:	00090000 	.word	0x00090000
 23fb930:	00000001 	.word	0x00000001
 23fb934:	000003e8 	.word	0x000003e8
 23fb938:	3f4ccccd 	.word	0x3f4ccccd
 23fb93c:	000001f4 	.word	0x000001f4
 23fb940:	00000000 	.word	0x00000000
 23fb944:	10079994 	.word	0x10079994
	...
 23fb950:	023f48e1 	.word	0x023f48e1
 23fb954:	023f473d 	.word	0x023f473d
	...
 23fb968:	023f4995 	.word	0x023f4995
 23fb96c:	00000000 	.word	0x00000000
 23fb970:	023f4e75 	.word	0x023f4e75
 23fb974:	023f5035 	.word	0x023f5035
	...
 23fb988:	023f592d 	.word	0x023f592d
 23fb98c:	00000000 	.word	0x00000000
 23fb990:	023f5941 	.word	0x023f5941
 23fb994:	023f5159 	.word	0x023f5159
	...
 23fb9a8:	023f54bd 	.word	0x023f54bd
 23fb9ac:	00000000 	.word	0x00000000
 23fb9b0:	023f564d 	.word	0x023f564d
 23fb9b4:	023f5709 	.word	0x023f5709
	...
 23fb9c8:	023f54bd 	.word	0x023f54bd
 23fb9cc:	00000000 	.word	0x00000000
 23fb9d0:	023f55d1 	.word	0x023f55d1
 23fb9d4:	023f5769 	.word	0x023f5769
	...

023fb9e8 <dynalib_user>:
 23fb9e8:	023ed759 023ed781 023ed785 00000000     Y.>...>...>.....
 23fb9f8:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fba08:	6c617574 6b6e5500 6e776f6e 70797420     tual.Unknown typ
 23fba18:	4f4e0065 45505954 4f4c4600 32335441     e.NOTYPE.FLOAT32
 23fba28:	4e495500 53003854 4e495254 4f420047     .UINT8.STRING.BO
 23fba38:	49004c4f 3631544e 4d4f4300 58454c50     OL.INT16.COMPLEX
 23fba48:	46003436 54414f4c 46003631 54414f4c     64.FLOAT16.FLOAT
 23fba58:	43003436 4c504d4f 32315845 49550038     64.COMPLEX128.UI
 23fba68:	3436544e 53455200 4352554f 41560045     NT64.RESOURCE.VA
 23fba78:	4e414952 49550054 3233544e 00000000     RIANT.UINT32....

023fba88 <CSWTCH.24>:
 23fba88:	023fba1a 023fba21 023fba7f 023fba29     ..?.!.?...?.).?.
 23fba98:	023fba67 023fba2f 023fba36 023fba3b     g.?./.?.6.?.;.?.
 23fbaa8:	023fba41 023fba2a 023fba4b 023fba53     A.?.*.?.K.?.S.?.
 23fbab8:	023fba5b 023fba66 023fba6d 023fba76     [.?.f.?.m.?.v.?.
 23fbac8:	023fba7e                                ~.?.

023fbacc <arm_cfft_sR_f32_len128>:
 23fbacc:	00000080 023fbc7c 023fbadc 000000d0     ....|.?...?.....

023fbadc <armBitRevIndexTable128>:
 23fbadc:	02000008 00400010 02400018 00800020     ......@...@. ...
 23fbaec:	02800028 00c00030 02c00038 01000040     (...0...8...@...
 23fbafc:	03000048 01400050 03400058 01800060     H...P.@.X.@.`...
 23fbb0c:	03800068 01c00070 03c00078 02000080     h...p...x.......
 23fbb1c:	02080088 03000090 02480098 020800a0     ..........H.....
 23fbb2c:	028800a8 00c800b0 02c800b8 010800c0     ................
 23fbb3c:	030800c8 014800d0 034800d8 018800e0     ......H...H.....
 23fbb4c:	038800e8 01c800f0 03c800f8 02100108     ................
 23fbb5c:	01400110 02500118 03000120 02900128     ..@...P. ...(...
 23fbb6c:	01480130 02d00138 03100148 03500158     0.H.8...H...X.P.
 23fbb7c:	01900160 03900168 01d00170 03d00178     `...h...p...x...
 23fbb8c:	02400180 02180188 03400190 02580198     ..@.......@...X.
 23fbb9c:	024801a0 029801a8 034801b0 02d801b8     ..H.......H.....
 23fbbac:	025001c0 031801c8 035001d0 035801d8     ..P.......P...X.
 23fbbbc:	025801e0 039801e8 035801f0 03d801f8     ..X.......X.....
 23fbbcc:	02200208 02400210 02600218 02a00228     .. ...@...`.(...
 23fbbdc:	02600230 02e00238 03000240 03200248     0.`.8...@...H. .
 23fbbec:	03400250 03600258 03200260 03a00268     P.@.X.`.`. .h...
 23fbbfc:	03600270 03e00278 02a00288 03800290     p.`.x...........
 23fbc0c:	03a00298 038802b0 02e802b8 038002c0     ................
 23fbc1c:	032802c8 039002d0 036802d8 03a002e0     ..(.......h.....
 23fbc2c:	03a802e8 039802f0 03e802f8 03200308     .............. .
 23fbc3c:	03400310 03600318 03880328 03600330     ..@...`.(...0.`.
 23fbc4c:	03980338 03600348 03700358 03b00368     8...H.`.X.p.h...
 23fbc5c:	03f00378 03a00388 03c00390 03e00398     x...............
 23fbc6c:	03c803b0 03e803b8 03e003c8 03f003d8     ................

023fbc7c <twiddleCoef_128>:
 23fbc7c:	3f800000 00000000 3f7fb10f 3d48fb2f     ...?.......?/.H=
 23fbc8c:	3f7ec46d 3dc8bd36 3f7d3aac 3e164083     m.~?6..=.:}?.@.>
 23fbc9c:	3f7b14be 3e47c5c2 3f7853f8 3e78cfcc     ..{?..G>.Sx?..x>
 23fbcac:	3f74fa0b 3e94a031 3f710908 3eac7cd4     ..t?1..>..q?.|.>
 23fbcbc:	3f6c835e 3ec3ef15 3f676bd8 3edae880     ^.l?...>.kg?...>
 23fbccc:	3f61c598 3ef15aea 3f5b941a 3f039c3d     ..a?.Z.>..[?=..?
 23fbcdc:	3f54db31 3f0e39da 3f4d9f02 3f187fc0     1.T?.9.?..M?...?
 23fbcec:	3f45e403 3f226799 3f3daef9 3f2beb4a     ..E?.g"?..=?J.+?
 23fbcfc:	3f3504f3 3f3504f3 3f2beb4a 3f3daef9     ..5?..5?J.+?..=?
 23fbd0c:	3f226799 3f45e403 3f187fc0 3f4d9f02     .g"?..E?...?..M?
 23fbd1c:	3f0e39da 3f54db31 3f039c3d 3f5b941a     .9.?1.T?=..?..[?
 23fbd2c:	3ef15aea 3f61c598 3edae880 3f676bd8     .Z.>..a?...>.kg?
 23fbd3c:	3ec3ef15 3f6c835e 3eac7cd4 3f710908     ...>^.l?.|.>..q?
 23fbd4c:	3e94a031 3f74fa0b 3e78cfcc 3f7853f8     1..>..t?..x>.Sx?
 23fbd5c:	3e47c5c2 3f7b14be 3e164083 3f7d3aac     ..G>..{?.@.>.:}?
 23fbd6c:	3dc8bd36 3f7ec46d 3d48fb2f 3f7fb10f     6..=m.~?/.H=...?
 23fbd7c:	00000000 3f800000 bd48fb2f 3f7fb10f     .......?/.H....?
 23fbd8c:	bdc8bd36 3f7ec46d be164083 3f7d3aac     6...m.~?.@...:}?
 23fbd9c:	be47c5c2 3f7b14be be78cfcc 3f7853f8     ..G...{?..x..Sx?
 23fbdac:	be94a031 3f74fa0b beac7cd4 3f710908     1.....t?.|....q?
 23fbdbc:	bec3ef15 3f6c835e bedae880 3f676bd8     ....^.l?.....kg?
 23fbdcc:	bef15aea 3f61c598 bf039c3d 3f5b941a     .Z....a?=.....[?
 23fbddc:	bf0e39da 3f54db31 bf187fc0 3f4d9f02     .9..1.T?......M?
 23fbdec:	bf226799 3f45e403 bf2beb4a 3f3daef9     .g"...E?J.+...=?
 23fbdfc:	bf3504f3 3f3504f3 bf3daef9 3f2beb4a     ..5...5?..=.J.+?
 23fbe0c:	bf45e403 3f226799 bf4d9f02 3f187fc0     ..E..g"?..M....?
 23fbe1c:	bf54db31 3f0e39da bf5b941a 3f039c3d     1.T..9.?..[.=..?
 23fbe2c:	bf61c598 3ef15aea bf676bd8 3edae880     ..a..Z.>.kg....>
 23fbe3c:	bf6c835e 3ec3ef15 bf710908 3eac7cd4     ^.l....>..q..|.>
 23fbe4c:	bf74fa0b 3e94a031 bf7853f8 3e78cfcc     ..t.1..>.Sx...x>
 23fbe5c:	bf7b14be 3e47c5c2 bf7d3aac 3e164083     ..{...G>.:}..@.>
 23fbe6c:	bf7ec46d 3dc8bd36 bf7fb10f 3d48fb2f     m.~.6..=..../.H=
 23fbe7c:	bf800000 00000000 bf7fb10f bd48fb2f     ............/.H.
 23fbe8c:	bf7ec46d bdc8bd36 bf7d3aac be164083     m.~.6....:}..@..
 23fbe9c:	bf7b14be be47c5c2 bf7853f8 be78cfcc     ..{...G..Sx...x.
 23fbeac:	bf74fa0b be94a031 bf710908 beac7cd4     ..t.1.....q..|..
 23fbebc:	bf6c835e bec3ef15 bf676bd8 bedae880     ^.l......kg.....
 23fbecc:	bf61c598 bef15aea bf5b941a bf039c3d     ..a..Z....[.=...
 23fbedc:	bf54db31 bf0e39da bf4d9f02 bf187fc0     1.T..9....M.....
 23fbeec:	bf45e403 bf226799 bf3daef9 bf2beb4a     ..E..g"...=.J.+.
 23fbefc:	bf3504f3 bf3504f3 bf2beb4a bf3daef9     ..5...5.J.+...=.
 23fbf0c:	bf226799 bf45e403 bf187fc0 bf4d9f02     .g"...E.......M.
 23fbf1c:	bf0e39da bf54db31 bf039c3d bf5b941a     .9..1.T.=.....[.
 23fbf2c:	bef15aea bf61c598 bedae880 bf676bd8     .Z....a......kg.
 23fbf3c:	bec3ef15 bf6c835e beac7cd4 bf710908     ....^.l..|....q.
 23fbf4c:	be94a031 bf74fa0b be78cfcc bf7853f8     1.....t...x..Sx.
 23fbf5c:	be47c5c2 bf7b14be be164083 bf7d3aac     ..G...{..@...:}.
 23fbf6c:	bdc8bd36 bf7ec46d bd48fb2f bf7fb10f     6...m.~./.H.....
 23fbf7c:	80000000 bf800000 3d48fb2f bf7fb10f     ......../.H=....
 23fbf8c:	3dc8bd36 bf7ec46d 3e164083 bf7d3aac     6..=m.~..@.>.:}.
 23fbf9c:	3e47c5c2 bf7b14be 3e78cfcc bf7853f8     ..G>..{...x>.Sx.
 23fbfac:	3e94a031 bf74fa0b 3eac7cd4 bf710908     1..>..t..|.>..q.
 23fbfbc:	3ec3ef15 bf6c835e 3edae880 bf676bd8     ...>^.l....>.kg.
 23fbfcc:	3ef15aea bf61c598 3f039c3d bf5b941a     .Z.>..a.=..?..[.
 23fbfdc:	3f0e39da bf54db31 3f187fc0 bf4d9f02     .9.?1.T....?..M.
 23fbfec:	3f226799 bf45e403 3f2beb4a bf3daef9     .g"?..E.J.+?..=.
 23fbffc:	3f3504f3 bf3504f3 3f3daef9 bf2beb4a     ..5?..5...=?J.+.
 23fc00c:	3f45e403 bf226799 3f4d9f02 bf187fc0     ..E?.g"...M?....
 23fc01c:	3f54db31 bf0e39da 3f5b941a bf039c3d     1.T?.9....[?=...
 23fc02c:	3f61c598 bef15aea 3f676bd8 bedae880     ..a?.Z...kg?....
 23fc03c:	3f6c835e bec3ef15 3f710908 beac7cd4     ^.l?......q?.|..
 23fc04c:	3f74fa0b be94a031 3f7853f8 be78cfcc     ..t?1....Sx?..x.
 23fc05c:	3f7b14be be47c5c2 3f7d3aac be164083     ..{?..G..:}?.@..
 23fc06c:	3f7ec46d bdc8bd36 3f7fb10f bd48fb2f     m.~?6......?/.H.

023fc07c <twiddleCoef_rfft_256>:
 23fc07c:	00000000 3f800000 3cc90ab0 3f7fec43     .......?...<C..?
 23fc08c:	3d48fb2f 3f7fb10f 3d96a905 3f7f4e6d     /.H=...?...=mN.?
 23fc09c:	3dc8bd36 3f7ec46d 3dfab273 3f7e1324     6..=m.~?s..=$.~?
 23fc0ac:	3e164083 3f7d3aac 3e2f10a2 3f7c3b28     .@.>.:}?../>(;|?
 23fc0bc:	3e47c5c2 3f7b14be 3e605c13 3f79c79d     ..G>..{?.\`>..y?
 23fc0cc:	3e78cfcc 3f7853f8 3e888e93 3f76ba07     ..x>.Sx?...>..v?
 23fc0dc:	3e94a031 3f74fa0b 3ea09ae5 3f731447     1..>..t?...>G.s?
 23fc0ec:	3eac7cd4 3f710908 3eb8442a 3f6ed89e     .|.>..q?*D.>..n?
 23fc0fc:	3ec3ef15 3f6c835e 3ecf7bca 3f6a09a7     ...>^.l?.{.>..j?
 23fc10c:	3edae880 3f676bd8 3ee63375 3f64aa59     ...>.kg?u3.>Y.d?
 23fc11c:	3ef15aea 3f61c598 3efc5d27 3f5ebe05     .Z.>..a?'].>..^?
 23fc12c:	3f039c3d 3f5b941a 3f08f59b 3f584853     =..?..[?...?SHX?
 23fc13c:	3f0e39da 3f54db31 3f13682a 3f514d3d     .9.?1.T?*h.?=MQ?
 23fc14c:	3f187fc0 3f4d9f02 3f1d7fd1 3f49d112     ...?..M?...?..I?
 23fc15c:	3f226799 3f45e403 3f273656 3f41d870     .g"?..E?V6'?p.A?
 23fc16c:	3f2beb4a 3f3daef9 3f3085bb 3f396842     J.+?..=?..0?Bh9?
 23fc17c:	3f3504f3 3f3504f3 3f396842 3f3085bb     ..5?..5?Bh9?..0?
 23fc18c:	3f3daef9 3f2beb4a 3f41d870 3f273656     ..=?J.+?p.A?V6'?
 23fc19c:	3f45e403 3f226799 3f49d112 3f1d7fd1     ..E?.g"?..I?...?
 23fc1ac:	3f4d9f02 3f187fc0 3f514d3d 3f13682a     ..M?...?=MQ?*h.?
 23fc1bc:	3f54db31 3f0e39da 3f584853 3f08f59b     1.T?.9.?SHX?...?
 23fc1cc:	3f5b941a 3f039c3d 3f5ebe05 3efc5d27     ..[?=..?..^?'].>
 23fc1dc:	3f61c598 3ef15aea 3f64aa59 3ee63375     ..a?.Z.>Y.d?u3.>
 23fc1ec:	3f676bd8 3edae880 3f6a09a7 3ecf7bca     .kg?...>..j?.{.>
 23fc1fc:	3f6c835e 3ec3ef15 3f6ed89e 3eb8442a     ^.l?...>..n?*D.>
 23fc20c:	3f710908 3eac7cd4 3f731447 3ea09ae5     ..q?.|.>G.s?...>
 23fc21c:	3f74fa0b 3e94a031 3f76ba07 3e888e93     ..t?1..>..v?...>
 23fc22c:	3f7853f8 3e78cfcc 3f79c79d 3e605c13     .Sx?..x>..y?.\`>
 23fc23c:	3f7b14be 3e47c5c2 3f7c3b28 3e2f10a2     ..{?..G>(;|?../>
 23fc24c:	3f7d3aac 3e164083 3f7e1324 3dfab273     .:}?.@.>$.~?s..=
 23fc25c:	3f7ec46d 3dc8bd36 3f7f4e6d 3d96a905     m.~?6..=mN.?...=
 23fc26c:	3f7fb10f 3d48fb2f 3f7fec43 3cc90ab0     ...?/.H=C..?...<
 23fc27c:	3f800000 00000000 3f7fec43 bcc90ab0     ...?....C..?....
 23fc28c:	3f7fb10f bd48fb2f 3f7f4e6d bd96a905     ...?/.H.mN.?....
 23fc29c:	3f7ec46d bdc8bd36 3f7e1324 bdfab273     m.~?6...$.~?s...
 23fc2ac:	3f7d3aac be164083 3f7c3b28 be2f10a2     .:}?.@..(;|?../.
 23fc2bc:	3f7b14be be47c5c2 3f79c79d be605c13     ..{?..G...y?.\`.
 23fc2cc:	3f7853f8 be78cfcc 3f76ba07 be888e93     .Sx?..x...v?....
 23fc2dc:	3f74fa0b be94a031 3f731447 bea09ae5     ..t?1...G.s?....
 23fc2ec:	3f710908 beac7cd4 3f6ed89e beb8442a     ..q?.|....n?*D..
 23fc2fc:	3f6c835e bec3ef15 3f6a09a7 becf7bca     ^.l?......j?.{..
 23fc30c:	3f676bd8 bedae880 3f64aa59 bee63375     .kg?....Y.d?u3..
 23fc31c:	3f61c598 bef15aea 3f5ebe05 befc5d27     ..a?.Z....^?']..
 23fc32c:	3f5b941a bf039c3d 3f584853 bf08f59b     ..[?=...SHX?....
 23fc33c:	3f54db31 bf0e39da 3f514d3d bf13682a     1.T?.9..=MQ?*h..
 23fc34c:	3f4d9f02 bf187fc0 3f49d112 bf1d7fd1     ..M?......I?....
 23fc35c:	3f45e403 bf226799 3f41d870 bf273656     ..E?.g".p.A?V6'.
 23fc36c:	3f3daef9 bf2beb4a 3f396842 bf3085bb     ..=?J.+.Bh9?..0.
 23fc37c:	3f3504f3 bf3504f3 3f3085bb bf396842     ..5?..5...0?Bh9.
 23fc38c:	3f2beb4a bf3daef9 3f273656 bf41d870     J.+?..=.V6'?p.A.
 23fc39c:	3f226799 bf45e403 3f1d7fd1 bf49d112     .g"?..E....?..I.
 23fc3ac:	3f187fc0 bf4d9f02 3f13682a bf514d3d     ...?..M.*h.?=MQ.
 23fc3bc:	3f0e39da bf54db31 3f08f59b bf584853     .9.?1.T....?SHX.
 23fc3cc:	3f039c3d bf5b941a 3efc5d27 bf5ebe05     =..?..[.'].>..^.
 23fc3dc:	3ef15aea bf61c598 3ee63375 bf64aa59     .Z.>..a.u3.>Y.d.
 23fc3ec:	3edae880 bf676bd8 3ecf7bca bf6a09a7     ...>.kg..{.>..j.
 23fc3fc:	3ec3ef15 bf6c835e 3eb8442a bf6ed89e     ...>^.l.*D.>..n.
 23fc40c:	3eac7cd4 bf710908 3ea09ae5 bf731447     .|.>..q....>G.s.
 23fc41c:	3e94a031 bf74fa0b 3e888e93 bf76ba07     1..>..t....>..v.
 23fc42c:	3e78cfcc bf7853f8 3e605c13 bf79c79d     ..x>.Sx..\`>..y.
 23fc43c:	3e47c5c2 bf7b14be 3e2f10a2 bf7c3b28     ..G>..{.../>(;|.
 23fc44c:	3e164083 bf7d3aac 3dfab273 bf7e1324     .@.>.:}.s..=$.~.
 23fc45c:	3dc8bd36 bf7ec46d 3d96a905 bf7f4e6d     6..=m.~....=mN..
 23fc46c:	3d48fb2f bf7fb10f 3cc90ab0 bf7fec43     /.H=.......<C...
 23fc47c:	6b63694e 6c694220 69760064 6c617573     Nick Bild.visual
 23fc48c:	656c615f 00737472 69647561 6c46006f     _alerts.audio.Fl
 23fc49c:	75427461 72656666 2e312073 302e3231     atBuffers 1.12.0
 23fc4ac:	626d6100 6e616c75 62006563 676b6361     .ambulance.backg
 23fc4bc:	6e756f72 61640064 7265676e 72696600     round.danger.fir
 23fc4cc:	69660065 72746572 006b6375 746f6f66     e.firetruck.foot
 23fc4dc:	70657473 61670073 61740073 6e696b6c     steps.gas.talkin
 23fc4ec:	72740067 69666661 6f760063 7b206469     g.traffic.void {
 23fc4fc:	6e6f6e61 756f6d79 3a3a7d73 615f6965     anonymous}::ei_a
 23fc50c:	6e67696c 665f6465 28656572 64696f76     ligned_free(void
 23fc51c:	2f00292a 656d6f68 63696e2f 6f732f6b     *)./home/nick/so
 23fc52c:	61777466 762f6572 61757369 6c615f6c     ftware/visual_al
 23fc53c:	2f747265 75736976 615f6c61 7472656c     ert/visual_alert
 23fc54c:	6e695f73 65726566 6e69636e 732f2f67     s_inferencing//s
 23fc55c:	652f6372 2d656764 75706d69 2d65736c     rc/edge-impulse-
 23fc56c:	2f6b6473 73616c63 69666973 652f7265     sdk/classifier/e
 23fc57c:	6c615f69 656e6769 616d5f64 636f6c6c     i_aligned_malloc
 23fc58c:	2800682e 67696c61 2026206e 696c6128     .h.(align & (ali
 23fc59c:	2d206e67 29293120 203d3d20 6f760030     gn - 1)) == 0.vo
 23fc5ac:	202a6469 6f6e617b 6f6d796e 3a7d7375     id* {anonymous}:
 23fc5bc:	5f69653a 67696c61 5f64656e 6c6c6163     :ei_aligned_call
 23fc5cc:	7328636f 5f657a69 73202c74 5f657a69     oc(size_t, size_
 23fc5dc:	46002974 656c6961 6f742064 6c6c6120     t).Failed to all
 23fc5ec:	7461636f 46542065 6574694c 65726120     ocate TFLite are
 23fc5fc:	2820616e 6f727265 6f632072 25206564     na (error code %
 23fc60c:	000a2964 3a525245 706e6920 74207475     d)..ERR: input t
 23fc61c:	6f736e65 61682072 69732073 2520657a     ensor has size %
 23fc62c:	62202c64 69207475 7475706e 74616d20     d, but input mat
 23fc63c:	20786972 20736168 20736168 657a6973     rix has has size
 23fc64c:	0a642520 52524500 6143203a 746f6e6e      %d..ERR: Cannot
 23fc65c:	6e616820 20656c64 75706e69 79742074      handle input ty
 23fc66c:	28206570 0a296425 52524500 6f4d203a     pe (%d)..ERR: Mo
 23fc67c:	656c6962 2074654e 20445353 6e207369     bileNet SSD is n
 23fc68c:	7320746f 6f707075 64657472 206e6920     ot supported in 
 23fc69c:	204e4f45 5420726f 6f736e65 6f6c4672     EON or TensorFlo
 23fc6ac:	694c2077 4d206574 6f726369 5245000a     w Lite Micro..ER
 23fc6bc:	49203a52 6c61766e 6f206469 75707475     R: Invalid outpu
 23fc6cc:	79742074 28206570 20296425 20726f66     t type (%d) for 
 23fc6dc:	4f4c4f59 6c203576 20747361 6579616c     YOLOv5 last laye
 23fc6ec:	45000a72 203a5252 75736e55 726f7070     r..ERR: Unsuppor
 23fc6fc:	20646574 656a626f 64207463 63657465     ted object detec
 23fc70c:	6e6f6974 73616c20 616c2074 20726579     tion last layer 
 23fc71c:	29642528 7325000a 5000093a 69646572     (%d)..%s:..Predi
 23fc72c:	6f697463 2820736e 656d6974 6425203a     ctions (time: %d
 23fc73c:	2e736d20 000a3a29 65676445 706d4920      ms.):..Edge Imp
 23fc74c:	65736c75 666e6920 6e657265 72206563     ulse inference r
 23fc75c:	656e6e75 6f662072 61502072 63697472     unner for Partic
 23fc76c:	6420656c 63697665 0a0d7365 4d445000     le devices...PDM
 23fc77c:	63656420 7265646f 696e6920 72652074      decoder init er
 23fc78c:	64253d72 666e4900 6e657265 676e6963     r=%d.Inferencing
 23fc79c:	74657320 676e6974 000a3a73 746e4909      settings:...Int
 23fc7ac:	61767265 25203a6c 2066322e 0a2e736d     erval: %.2f ms..
 23fc7bc:	72460900 20656d61 657a6973 6425203a     ..Frame size: %d
 23fc7cc:	5309000a 6c706d61 656c2065 6874676e     ...Sample length
 23fc7dc:	6425203a 2e736d20 4e09000a 6f202e6f     : %d ms....No. o
 23fc7ec:	6c632066 65737361 25203a73 46000a64     f classes: %d..F
 23fc7fc:	656c6961 6f742064 61747320 50207472     ailed to start P
 23fc80c:	00214d44 3a525245 756f4320 6e20646c     DM!.ERR: Could n
 23fc81c:	6120746f 636f6c6c 20657461 69647561     ot allocate audi
 23fc82c:	7562206f 72656666 69732820 2520657a     o buffer (size %
 23fc83c:	202c2964 73696874 756f6320 6220646c     d), this could b
 23fc84c:	75642065 6f742065 65687420 6e697720     e due to the win
 23fc85c:	20776f64 676e656c 6f206874 6f792066     dow length of yo
 23fc86c:	6d207275 6c65646f 54000a0d 6e696d69     ur model...Timin
 23fc87c:	44203a67 25205053 736d2064 6e69202c     g: DSP %d ms, in
 23fc88c:	65726566 2065636e 6d206425 61202c73     ference %d ms, a
 23fc89c:	616d6f6e 2520796c 736d2064 50000a0d     nomaly %d ms...P
 23fc8ac:	69646572 6f697463 0d3a736e 2020000a     redictions:...  
 23fc8bc:	203a7325 352e2500 000a0d66 79617247     %s: .%.5f...Gray
 23fc8cc:	6c616373 52450065 46203a52 656c6961     scale.ERR: Faile
 23fc8dc:	6f742064 6e757220 50534420 6f727020     d to run DSP pro
 23fc8ec:	73736563 64252820 76000a29 6f746365     cess (%d)..vecto
 23fc8fc:	5f3a3a72 61725f4d 5f65676e 63656863     r::_M_range_chec
 23fc90c:	5f203a6b 28206e5f 63696877 73692068     k: __n (which is
 23fc91c:	757a2520 3d3e2029 69687420 733e2d73      %zu) >= this->s
 23fc92c:	28657a69 77282029 68636968 20736920     ize() (which is 
 23fc93c:	29757a25 52524500 6f57203a 20646c75     %zu).ERR: Would 
 23fc94c:	74697277 756f2065 64697374 65662065     write outside fe
 23fc95c:	72757461 75622065 72656666 7552000a     ature buffer..Ru
 23fc96c:	6e696e6e 6d692067 736c7570 2e2e2e65     nning impulse...
 23fc97c:	5245000a 55203a52 6f6e6b6e 65206e77     ..ERR: Unknown e
 23fc98c:	61727478 66207463 74636e75 2c6e6f69     xtract function,
 23fc99c:	6c6e6f20 464d2079 202c4343 2045464d      only MFCC, MFE 
 23fc9ac:	20646e61 63657073 676f7274 206d6172     and spectrogram 
 23fc9bc:	70707573 6574726f 0d000a64 6165460a     supported....Fea
 23fc9cc:	65727574 25282073 736d2064 203a292e     tures (%d ms.): 
 23fc9dc:	52524500 6d63203a 20776e76 6c696166     .ERR: cmvnw fail
 23fc9ec:	28206465 0a296425 52524500 6f6e203a     ed (%d)..ERR: no
 23fc9fc:	6c616d72 74617a69 206e6f69 6c696166     rmalization fail
 23fca0c:	28206465 0a296425 61745300 6e697472     ed (%d)..Startin
 23fca1c:	6e692067 65726566 6e69636e 6e692067     g inferencing in
 23fca2c:	73203220 6e6f6365 2e2e7364 52000a2e      2 seconds.....R
 23fca3c:	726f6365 676e6964 0a2e2e2e 6d615300     ecording.....Sam
 23fca4c:	20656c70 656d6974 6425203a 52000a0d     ple time: %d...R
 23fca5c:	726f6365 676e6964 6e6f6420 45000a65     ecording done..E
 23fca6c:	203a5252 6c696146 74206465 7572206f     RR: Failed to ru
 23fca7c:	6c63206e 69737361 72656966 64252820     n classifier (%d
 23fca8c:	72000a29 635f6e75 7373616c 65696669     )..run_classifie
 23fca9c:	65722072 6e727574 203a6465 0a0d6425     r returned: %d..
 23fcaac:	63657600 3a726f74 5f4d5f3a 6c616572     .vector::_M_real
 23fcabc:	5f636f6c 65736e69 6f007472 6d5f7475     loc_insert.out_m
 23fcacc:	69727461 203d2078 25786425 63000a64     atrix = %dx%d..c
 23fcadc:	75636c61 6574616c 69732064 3d20657a     alculated size =
 23fcaec:	78642520 000a6425 6c6c754e 65686320      %dx%d..Null che
 23fcafc:	66206b63 656c6961 72000a64 74686769     ck failed..right
 23fcb0c:	70203c20 7265776f 6570735f 75727463      < power_spectru
 23fcb1c:	72665f6d 5f656d61 657a6973 61747300     m_frame_size.sta
 23fcb2c:	20636974 20746e69 3a3a6965 65657073     tic int ei::spee
 23fcb3c:	79706863 65663a3a 72757461 6d3a3a65     chpy::feature::m
 23fcb4c:	65286566 6d3a3a69 69727461 2a745f78     fe(ei::matrix_t*
 23fcb5c:	6965202c 616d3a3a 78697274 2c2a745f     , ei::matrix_t*,
 23fcb6c:	3a696520 6769733a 5f6c616e 202c2a74      ei::signal_t*, 
 23fcb7c:	746e6975 745f3233 6c66202c 2c74616f     uint32_t, float,
 23fcb8c:	6f6c6620 202c7461 746e6975 745f3631      float, uint16_t
 23fcb9c:	6975202c 3631746e 202c745f 746e6975     , uint16_t, uint
 23fcbac:	745f3233 6975202c 3233746e 202c745f     32_t, uint32_t, 
 23fcbbc:	746e6975 745f3631 682f0029 2f656d6f     uint16_t)./home/
 23fcbcc:	6b63696e 666f732f 72617774 69762f65     nick/software/vi
 23fcbdc:	6c617573 656c615f 762f7472 61757369     sual_alert/visua
 23fcbec:	6c615f6c 73747265 666e695f 6e657265     l_alerts_inferen
 23fcbfc:	676e6963 72732f2f 64652f63 692d6567     cing//src/edge-i
 23fcc0c:	6c75706d 732d6573 642f6b64 732f7073     mpulse-sdk/dsp/s
 23fcc1c:	63656570 2f797068 74616566 2e657275     peechpy/feature.
 23fcc2c:	00707068 3a525245 45464d20 69616620     hpp.ERR: MFE fai
 23fcc3c:	2064656c 29642528 0000000a              led (%d)....

023fcc48 <_ZTVN5spark10LogHandlerE>:
	...
 23fcc58:	023ed7a5 023f0da9                       ..>...?.

023fcc60 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fcc68:	023f1189 023f11bd 023f8cf1 023f8e99     ..?...?...?...?.

023fcc78 <_ZL18ei_learning_blocks>:
 23fcc78:	023f2419 023fcc9c 00000000              .$?...?.....

023fcc84 <_ZL24ei_config_tflite_graph_5>:
 23fcc84:	00000001 023f3e0d 023f3fd1 023f4019     .....>?..??..@?.
 23fcc94:	023f3fb9 023f3fc5                       .??..??.

023fcc9c <_ZL26ei_learning_block_config_5>:
 23fcc9c:	00000001 00000005 0100ff00 00010102     ................
 23fccac:	023fcc84                                ..?.

023fccb0 <_ZN2eiL25quantized_values_one_zeroE>:
 23fccb0:	00000000 3c23d70a 3ca3d70a 3cf5c28f     ......#<...<...<
 23fccc0:	3d23d70a 3d3a2e8c 3d430c31 3d4ccccd     ..#=..:=1.C=..L=
 23fccd0:	3d579436 3d638e39 3d70f0f1 3d75c28f     6.W=9.c=..p=..u=
 23fcce0:	3d800000 3d888889 3d8f5c29 3d924925     ...=...=)\.=%I.=
 23fccf0:	3d9d89d9 3da3d70a 3daaaaab 3db851ec     ...=...=...=.Q.=
 23fcd00:	3dba2e8c 3dc30c31 3dcccccd 3dd79436     ...=1..=...=6..=
 23fcd10:	3de147ae 3de38e39 3df0f0f1 3df5c28f     .G.=9..=...=...=
 23fcd20:	3e000000 3e051eb8 3e088889 3e0ba2e9     ...>...>...>...>
 23fcd30:	3e0f5c29 3e124925 3e19999a 3e1d89d9     )\.>%I.>...>...>
 23fcd40:	3e21af28 3e23d70a 3e2aaaab 3e2e147b     (.!>..#>..*>{..>
 23fcd50:	3e34b4b5 3e3851ec 3e3a2e8c 3e400000     ..4>.Q8>..:>..@>
 23fcd60:	3e428f5c 3e430c31 3e4ccccd 3e570a3d     \.B>1.C>..L>=.W>
 23fcd70:	3e579436 3e5b6db7 3e6147ae 3e638e39     6.W>.m[>.Ga>9.c>
 23fcd80:	3e68ba2f 3e6b851f 3e6c4ec5 3e70f0f1     /.h>..k>.Nl>..p>
 23fcd90:	3e73cf3d 3e75c28f 3e800000 3e851eb8     =.s>..u>...>...>
 23fcda0:	3e86bca2 3e888889 3e8a3d71 3e8ba2e9     ...>...>q=.>...>
 23fcdb0:	3e8e38e4 3e8f5c29 3e924925 3e947ae1     .8.>)\.>%I.>.z.>
 23fcdc0:	3e969697 3e99999a 3e9d89d9 3e9eb852     ...>...>...>R..>
 23fcdd0:	3ea00000 3ea1af28 3ea2e8ba 3ea3d70a     ...>(..>...>...>
 23fcde0:	3ea8f5c3 3eaaaaab 3eae147b 3eb33333     ...>...>{..>33.>
 23fcdf0:	3eb4b4b5 3eb6db6e 3eb851ec 3eba2e8c     ...>n..>.Q.>...>
 23fce00:	3ebca1af 3ebd70a4 3ec00000 3ec28f5c     ...>.p.>...>\..>
 23fce10:	3ec30c31 3ec4ec4f 3ec71c72 3ec7ae14     1..>O..>r..>...>
 23fce20:	3ecccccd 3ed1745d 3ed1eb85 3ed2d2d3     ...>]t.>...>...>
 23fce30:	3ed55555 3ed70a3d 3ed79436 3edb6db7     UU.>=..>6..>.m.>
 23fce40:	3edc28f6 3ee00000 3ee147ae 3ee38e39     .(.>...>.G.>9..>
 23fce50:	3ee66666 3ee8ba2f 3eeb851f 3eec4ec5     ff.>/..>...>.N.>
 23fce60:	3eeeeeef 3ef0a3d7 3ef0f0f1 3ef286bd     ...>...>...>...>
 23fce70:	3ef3cf3d 3ef5c28f 3efae148 3f000000     =..>...>H..>...?
 23fce80:	3f028f5c 3f051eb8 3f061862 3f06bca2     \..?...?b..?...?
 23fce90:	3f078788 3f07ae14 3f088889 3f09d89e     ...?...?...?...?
 23fcea0:	3f0a3d71 3f0ba2e9 3f0ccccd 3f0e38e4     q=.?...?...?.8.?
 23fceb0:	3f0f5c29 3f100000 3f11eb85 3f124925     )\.?...?...?%I.?
 23fcec0:	3f1435e5 3f147ae1 3f155555 3f169697     .5.?.z.?UU.?...?
 23fced0:	3f170a3d 3f1745d1 3f19999a 3f1c28f6     =..?.E.?...?.(.?
 23fcee0:	3f1c71c7 3f1d89d9 3f1e79e8 3f1eb852     .q.?...?.y.?R..?
 23fcef0:	3f200000 3f2147ae 3f21af28 3f22e8ba     .. ?.G!?(.!?.."?
 23fcf00:	3f23d70a 3f249249 3f25a5a6 3f266666     ..#?I.$?..%?ff&?
 23fcf10:	3f28f5c3 3f2aaaab 3f2b851f 3f2e147b     ..(?..*?..+?{..?
 23fcf20:	3f2e8ba3 3f2f286c 3f300000 3f30a3d7     ...?l(/?..0?..0?
 23fcf30:	3f313b14 3f333333 3f34b4b5 3f35c28f     .;1?333?..4?..5?
 23fcf40:	3f36db6e 3f3851ec 3f38e38e 3f3a2e8c     n.6?.Q8?..8?..:?
 23fcf50:	3f3ae148 3f3bbbbc 3f3ca1af 3f3d70a4     H.:?..;?..<?.p=?
 23fcf60:	3f400000 3f428f5c 3f430c31 3f43c3c4     ..@?\.B?1.C?..C?
 23fcf70:	3f44ec4f 3f451eb8 3f45d174 3f471c72     O.D?..E?t.E?r.G?
 23fcf80:	3f47ae14 3f492492 3f4a1af3 3f4a3d71     ..G?.$I?..J?q=J?
 23fcf90:	3f4ccccd 3f4f3cf4 3f4f5c29 3f500000     ..L?.<O?)\O?..P?
 23fcfa0:	3f51745d 3f51eb85 3f52d2d3 3f547ae1     ]tQ?..Q?..R?.zT?
 23fcfb0:	3f555555 3f570a3d 3f579436 3f589d8a     UUU?=.W?6.W?..X?
 23fcfc0:	3f59999a 3f5b6db7 3f5c28f6 3f5d1746     ..Y?.m[?.(\?F.]?
 23fcfd0:	3f5dddde 3f5eb852 3f600000 3f6147ae     ..]?R.^?..`?.Ga?
 23fcfe0:	3f61e1e2 3f638e39 3f63d70a 3f650d79     ..a?9.c?..c?y.e?
 23fcff0:	3f666666 3f679e7a 3f68ba2f 3f68f5c3     fff?z.g?/.h?..h?
 23fd000:	3f6aaaab 3f6b851f 3f6c4ec5 3f6db6db     ..j?..k?.Nl?..m?
 23fd010:	3f6e147b 3f6eeeef 3f700000 3f70a3d7     {.n?..n?..p?..p?
 23fd020:	3f70f0f1 3f71c71c 3f7286bd 3f733333     ..p?..q?..r?33s?
 23fd030:	3f73cf3d 3f745d17 3f75c28f 3f7851ec     =.s?.]t?..u?.Qx?
 23fd040:	3f7ae148 3f7d70a4 3f800000 3f800000     H.z?.p}?...?...?
 23fd050:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
 23fd060:	3f800000 3f800000 3f800000 3a525245     ...?...?...?ERR:
 23fd070:	74654720 736e6554 6320726f 656c6c61      GetTensor calle
 23fd080:	65622064 646e6f79 58414d20 4c46545f     d beyond MAX_TFL
 23fd090:	4156455f 4f435f4c 20544e55 29642528     _EVAL_COUNT (%d)
 23fd0a0:	5245000a 47203a52 65547465 726f736e     ..ERR: GetTensor
 23fd0b0:	6c616320 2064656c 6f796562 4d20646e      called beyond M
 23fd0c0:	545f5841 545f4c46 4f534e45 4f435f52     AX_TFL_TENSOR_CO
 23fd0d0:	20544e55 29642528 5245000a 46203a52     UNT (%d)..ERR: F
 23fd0e0:	656c6961 6f742064 6c6c6120 7461636f     ailed to allocat
 23fd0f0:	65702065 73697372 746e6574 66756220     e persistent buf
 23fd100:	20726566 7320666f 20657a69 202c6425     fer of size %d, 
 23fd110:	73656f64 746f6e20 74696620 206e6920     does not fit in 
 23fd120:	736e6574 6120726f 616e6572 646e6120     tensor arena and
 23fd130:	61657220 64656863 5f494520 5f58414d      reached EI_MAX_
 23fd140:	5245564f 574f4c46 4655425f 5f524546     OVERFLOW_BUFFER_
 23fd150:	4e554f43 45000a54 203a5252 6c696146     COUNT..ERR: Fail
 23fd160:	74206465 6c61206f 61636f6c 70206574     ed to allocate p
 23fd170:	69737265 6e657473 75622074 72656666     ersistent buffer
 23fd180:	20666f20 657a6973 0a642520 52524500      of size %d..ERR
 23fd190:	6146203a 64656c69 206f7420 6f6c6c61     : Failed to allo
 23fd1a0:	65746163 72637320 68637461 66756220     cate scratch buf
 23fd1b0:	20726566 7320666f 20657a69 202c6425     fer of size %d, 
 23fd1c0:	63616572 20646568 4d5f4945 535f5841     reached EI_MAX_S
 23fd1d0:	54415243 425f4843 45464655 4f435f52     CRATCH_BUFFER_CO
 23fd1e0:	0a544e55 52524500 6146203a 64656c69     UNT..ERR: Failed
 23fd1f0:	206f7420 6f6c6c61 65746163 72637320      to allocate scr
 23fd200:	68637461 66756220 20726566 7320666f     atch buffer of s
 23fd210:	20657a69 000a6425 3a525245 69616620     ize %d..ERR: fai
 23fd220:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
 23fd230:	736e6574 6120726f 616e6572 5245000a     tensor arena..ER
 23fd240:	74203a52 6f736e65 72612072 20616e65     R: tensor arena 
 23fd250:	74207369 73206f6f 6c6c616d 6f64202c     is too small, do
 23fd260:	6e207365 6620746f 6d207469 6c65646f     es not fit model
 23fd270:	65202d20 206e6576 68746977 2074756f      - even without 
 23fd280:	61726373 20686374 66667562 0a737265     scratch buffers.
 23fd290:	00000000                                ....

023fd294 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23fd294:	00000001 ffffff80                       ........

023fd29c <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23fd29c:	00000001 00000000                       ........

023fd2a4 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23fd2a4:	00000001 00000000                       ........

023fd2ac <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23fd2ac:	00000010 00000000 00000000 00000000     ................
	...

023fd2f0 <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23fd2f0:	00000010 00000000 00000000 00000000     ................
	...

023fd334 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23fd334:	00000001 3b800000                       .......;

023fd33c <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23fd33c:	00000008 00000000 00000000 00000000     ................
	...

023fd360 <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
 23fd360:	00000008 00000000 00000000 00000000     ................
	...

023fd384 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
 23fd384:	00000001 ffffff80                       ........

023fd38c <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
 23fd38c:	00000001 ffffff80                       ........

023fd394 <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
 23fd394:	00000001 ffffff80                       ........

023fd39c <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
 23fd39c:	00000001 ffffff80                       ........

023fd3a4 <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
 23fd3a4:	00000001 ffffff80                       ........

023fd3ac <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
 23fd3ac:	00000001 ffffff80                       ........

023fd3b4 <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
 23fd3b4:	00000001 ffffff80                       ........

023fd3bc <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
 23fd3bc:	00000001 ffffff80                       ........

023fd3c4 <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
 23fd3c4:	00000001 ffffff80                       ........

023fd3cc <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
 23fd3cc:	00000001 0000003a                       ....:...

023fd3d4 <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
 23fd3d4:	00000001 ffffff80                       ........

023fd3dc <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23fd3dc:	00000001 39cc2375                       ....u#.9

023fd3e4 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23fd3e4:	00000001 3c348482                       ......4<

023fd3ec <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23fd3ec:	00000010 38efa6de 39193acf 39101135     .......8.:.95..9
 23fd3fc:	38ea3ca0 394285e0 38d7b35e 3924564b     .<.8..B9^..8KV$9
 23fd40c:	38d9919c 38abaaaa 38b3eb00 391a7a88     ...8...8...8.z.9
 23fd41c:	3934ae76 3932aab8 38a6eef6 38c999a0     v.49..29...8...8
 23fd42c:	390bd79d                                ...9

023fd430 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23fd430:	00000010 3bbb2485 3bef4ff5 3be100a0     .....$.;.O.;...;
 23fd440:	3bb6ea03 3c17e6dc 3ba87078 3c005470     ...;...<xp.;pT.<
 23fd450:	3ba9e5ed 3b860daf 3b8c7f32 3bf1434b     ...;...;2..;KC.;
 23fd460:	3c0d17d4 3c0b8517 3b825b79 3b9d6da5     ...<...<y[.;.m.;
 23fd470:	3bda6767 00000000 00000000 00000000     gg.;............

023fd480 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23fd480:	00000001 00000001 00000063 00000028     ........c...(...

023fd490 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23fd490:	00000001 00000063 00000001 00000008     ....c...........

023fd4a0 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23fd4a0:	00000001 00000001 00000032 00000008     ........2.......

023fd4b0 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23fd4b0:	00000001 00000032 00000001 00000010     ....2...........

023fd4c0 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23fd4c0:	ffffffff 00000190 00000000 00000000     ................

023fd4d0 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23fd4d0:	ffffff09 000002c1 fffffb9f ffffff3b     ............;...
 23fd4e0:	ffffffca 00000253 fffffec4 fffffc2d     ....S.......-...
 23fd4f0:	000002eb 00000000 00000000 00000000     ................

023fd500 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
 23fd500:	fcbfe1ec 06f10d0b 0010fff8 d0efb9f4     ................
 23fd510:	0df1e80d 10ee070f 1f230505 e4ecec1e     ..........#.....
 23fd520:	03e10e10 050c0e07 fe1f0108 f3fdf60a     ................
 23fd530:	fbfe19f8 0ced120c 03201509 e8fbdb02     .......... .....
 23fd540:	0af9070d fef10b0e 1517ff0d e205f60e     ................
 23fd550:	19fa05ef 0af2021a 21160804 cef0edf0     ...........!....
 23fd560:	0af008dc 03e8030a 1814ff15 c7eef4ee     ................
 23fd570:	eceef4f1 fee90206 fb14120a caeee0f8     ................
 23fd580:	eae805f8 06b20c04 02210602 b406df00     ..........!.....
 23fd590:	f7eae70f f8de0804 0f2208f7 c207f211     ..........".....
 23fd5a0:	ec01fe1a 11e41009 0f1a06ff c0040513     ................
 23fd5b0:	f401050d 0eed16fd 0d110903 c50303fb     ................
 23fd5c0:	e7f409f4 06ee0e09 fd120d0b be06eaff     ................
 23fd5d0:	14f9fe08 11da0d0b 30fe1111 bbfcf30d     ...........0....
 23fd5e0:	0bfb0f14 0df3090d 1ff305fa dc00ed08     ................
 23fd5f0:	05e608fd 0afd0cf3 150e0806 f4fceef7     ................
 23fd600:	1cec1d0e 07eb0df5 2f120806 d3fad605     .........../....
 23fd610:	10e215f5 fae70b03 1f1bf90f f000f5fd     ................
 23fd620:	18ea13ee 04f9071a 170bfb06 eef90bff     ................
 23fd630:	03e9fbec 00070212 f81c0ffb e3f4f1e6     ................
 23fd640:	f3e2f2f1 02ee0f0f fe221afe c3f8dfee     ..........".....
 23fd650:	fedff6f0 00ed110c 03290d0d b1deccf8     ..........).....
 23fd660:	eae9f208 10f3170d fd280401 b1f1fb12     ..........(.....
 23fd670:	f001031b 14e318fa 09230507 bc11e510     ..........#.....
 23fd680:	e2f6fdfc 0de7fc02 0d29fafa d5f8ebf3     ..........).....
 23fd690:	15b0fdd1 fbaceee8 161cfbd1 01bca5f0     ................
 23fd6a0:	188118d1 f5b0e7f3 150ff5bb 18bc96f8     ................
 23fd6b0:	16a72ad5 f2b8efd0 1305e2bc 0ec082df     .*..............
 23fd6c0:	159d1de6 e0c6f3c2 0407f2d1 18d0b6ef     ................
 23fd6d0:	13ea1fd9 dadfd4c9 0ddfeedf 19e4b6ec     ................
 23fd6e0:	0ced21f4 e1e0c1db 0af2f6eb 24e5be07     .!.............$
 23fd6f0:	0cdb17f2 dad4f4c8 0bfef8e2 06d4caed     ................
 23fd700:	1ae116f5 e2e8d9b4 09e8eee9 10d0b0ea     ................
 23fd710:	0ecc1103 dcd0f1c9 11f6f5f0 13d1b9f8     ................
 23fd720:	0d091f07 e1c3f4b8 14e0e5cf 1c050615     ................
 23fd730:	10fa1f0e edd8e3b2 14f3e8de 1afcfddb     ................
 23fd740:	13b72bd1 d0c7e0e5 11fce7e1 1699a5e6     .+..............
 23fd750:	0bb622dd d7ccd9bb 09e3f8cf 08c3b8d4     ."..............
 23fd760:	15ae22c5 d1bfdbdf 16f4e7e6 13b49cf6     ."..............
 23fd770:	12bd1fed dad5cae7 1400f0e0 11ce9ef7     ................
 23fd780:	0d1b2707 dbe1dfb6 08f6f5dc 1909dbe3     .'..............
 23fd790:	0c060df5 cfd2d4af 0afe03e1 0f10e1e3     ................
 23fd7a0:	15ff09e6 cbbfdba9 1104fecd 1be6c3f1     ................
 23fd7b0:	13da20f2 d3d9c9c8 0d02f3e4 12eeadf9     . ..............
 23fd7c0:	1b061ee1 ddddeccd 1016f6ef 14dab7f7     ................
 23fd7d0:	17e21df0 d4f3d3c7 0afcf8e6 11e5b401     ................
 23fd7e0:	0e021700 d3e5ce8c 07fbf5dc 10eedbd6     ................
 23fd7f0:	13ef17ef cfbdd5ba 14feffe4 15d3cbe6     ................
 23fd800:	07c635fb cebad1b0 1c17eddd 13da9fc1     .5..............
 23fd810:	0ce727d1 cdd3eedd 0a03f2e4 12c9c806     .'..............
 23fd820:	040ef5fc 1620de07 0c151806 05070cff     ...... .........
 23fd830:	f805f504 0e02dee1 f0ca1704 f8e409e6     ................
 23fd840:	dad8e60c 14fbe9e5 febf0318 d2fc13f7     ................
 23fd850:	f0f4e813 07f4ebe3 fed30108 eef80d00     ................
 23fd860:	02e5d612 0405e4d3 2313020b e00202f5     ...........#....
 23fd870:	fef6f70e 00fef7e6 1b0bfb04 db130f04     ................
 23fd880:	00e5e413 0a0100ee 150002fd f7081905     ................
 23fd890:	f0e2f51a 090e0b04 0b1211f9 e7111210     ................
 23fd8a0:	f8fde6fd 0311030b 100b0423 f8132202     ........#...."..
 23fd8b0:	f1f6fb14 0a18efe5 eed80b1b f30019fd     ................
 23fd8c0:	02effc06 0105efe0 14e5040b f3fa07fa     ................
 23fd8d0:	0cebf702 fdfde80d 14fbfd0f e7f6090a     ................
 23fd8e0:	fee4c410 0b090104 02fdf414 ea061bf5     ................
 23fd8f0:	f6fce405 15fcfbed 10070110 d00d16fb     ................
 23fd900:	ddf4df00 010df6e1 15080110 cdff13ff     ................
 23fd910:	08f1d407 0502ee10 3314020a e2fe152a     ...........3*...
 23fd920:	05e8e011 18140a0f 25021015 e1160b0c     ...........%....
 23fd930:	f4f5e802 090a0fe9 1719181f b80801ff     ................
 23fd940:	e8e7ed0a 06e800f1 1cff1509 b118f903     ................
 23fd950:	00e9f210 05f6efea 12eefc18 d0040806     ................
 23fd960:	efe5eb0e 05f9f4e2 14010601 d7060911     ................
 23fd970:	f201e510 01e6fdec 0ff5f90d d211031f     ................
 23fd980:	03e0dee6 06fae4f5 1dff09fe e6fc0c08     ................
 23fd990:	f4d2c2f0 0507e5f0 0af50d05 edf0f800     ................
 23fd9a0:	07070ad7 150de409 00111d0a e40a0df4     ................
 23fd9b0:	110d09f9 ea08f2e9 faf2dbfb 23f5f9cb     ...............#
 23fd9c0:	0f1f03d8 de0defe2 d6f0e4f6 20e1ffc6     ............... 
 23fd9d0:	0c1a10c3 eb05e90f ebe7e2e4 12e80bed     ................
 23fd9e0:	111009f6 f311e6f0 e3ea0ff5 10ef0fd5     ................
 23fd9f0:	0a0d0d10 020d0fe5 f40405f5 08f810da     ................
 23fda00:	fd10fe1a 0dfe10f0 cee1f3f3 f703f5ea     ................
 23fda10:	f106f9f9 fd01dbf4 d5d2fef8 0bf3f5f2     ................
 23fda20:	0123f5dd e4ffc5d7 bfea00ff 12e106bd     ..#.............
 23fda30:	ff0d12c5 ef05e51c d4f1f7fd 14e7eef0     ................
 23fda40:	061c03cf 0213ea10 f300fa04 2dd9f9cf     ...............-
 23fda50:	0f0e06d7 0d05f216 dceefbf4 11d103f7     ................
 23fda60:	ec150707 fb0cf611 c8f0fcfe 08ed03de     ................
 23fda70:	f6240aef f1fcf0e0 a7f6e9ec 09df10d9     ..$.............
 23fda80:	f81311d8 ea0fe8df ade6fbf1 0fdc05ba     ................
 23fda90:	1a1c19d9 df18d5ee d4daeaf9 0fee18bf     ................
 23fdaa0:	fb221222 f50e06bc c2e2e309 16e526fe     "."..........&..
 23fdab0:	f111ff15 ff000abf d2e8f3f3 100517eb     ................
 23fdac0:	002e09e8 f20ef8cd cce7f8f4 06f50dbf     ................
 23fdad0:	ed05f1c1 f20fe6d8 b3effb02 08e401c1     ................
 23fdae0:	fffe00d2 f508eee8 c7ee00f9 0cf1ebb3     ................
 23fdaf0:	f804ec0c f20beeee d0cdf4ee 0bf609ba     ................
 23fdb00:	f517f6ef e90cfaf0 c8fc07f7 15fc18f1     ................
 23fdb10:	132b16e7 fc19edec c2faebf7 150d16d4     ..+.............
 23fdb20:	0b120bda eb1ce4e9 ceefe2f3 1bf1f6e5     ................
 23fdb30:	0208fbfa f40debfa d4fb08ef 10ff09e0     ................
 23fdb40:	fa0610ff 0a09090d e40e111b e5f7eded     ................
 23fdb50:	d2f306e1 0d110a10 bc021315 d8f6f4ed     ................
 23fdb60:	ebf0f4db 0e0bfb00 e5070e16 ecffddf9     ................
 23fdb70:	f0eee5f8 0c04fd08 e6fb0717 e6e9fc0b     ................
 23fdb80:	dbff12d5 fc05fe0a d00e0d1e eefa05eb     ................
 23fdb90:	ddf1fbe0 fd030707 c20e0c17 ece4eae2     ................
 23fdba0:	e3f8e1f4 11fb0103 c111060e e6d8e001     ................
 23fdbb0:	ee0603f7 0cfa040c 0c05090f f4fadd05     ................
 23fdbc0:	fceadff5 0a040002 f301080f ece4ece0     ................
 23fdbd0:	f3f40ed7 fefeff08 0ffb0e0e e6edcbe9     ................
 23fdbe0:	e500fadb fef8f200 f315090b e7e6dbf8     ................
 23fdbf0:	def1e80c 0706f70d f00e0d12 d720ed22     ............". .
 23fdc00:	cc00030d 060b050a fc07fd16 e119de17     ................
 23fdc10:	ecf000f6 070f0402 bb030714 03f5f010     ................
 23fdc20:	e7fb11e7 06fa1209 f11e050e f1e1dbff     ................
 23fdc30:	cdf102e3 fae70e09 f3050115 dce8ded5     ................
 23fdc40:	d7edf1d7 ffe408ff dc00fe0b e8e2ede3     ................
 23fdc50:	e8e8f31b 03fdf806 d6110809 e7fbf4fb     ................
 23fdc60:	f905ec12 09041413 f60a0a0e ff01f6f8     ................
 23fdc70:	fdf6f1ef 08f0fd00 ff060007 f2f6f30f     ................
 23fdc80:	0bfc03ed 1301f816 1f070c14 ebedeef9     ................
 23fdc90:	04d8f5d4 0f06050d fd09071a e4e1e8eb     ................
 23fdca0:	f3e6ffe6 05e1f510 f6ff0c0c d9f1e6fb     ................
 23fdcb0:	f1edf5dd 0ee2ef0e e511161d cef8e3f5     ................
 23fdcc0:	20fc081e 09162920 f40a1921 da0a1724     ...  )..!...$...
 23fdcd0:	0bca1805 f3f6eafe 06d9e804 04fdd0fc     ................
 23fdce0:	0ee01108 f713ec1c 0ecbf70b 14f6e004     ................
 23fdcf0:	03f800ff ff09eb0c 0be3e80e 10fbf809     ................
 23fdd00:	16d10bfd fd0cf414 1709ddea 1b04e700     ................
 23fdd10:	0af816f1 f40fef19 0605f8fb 08f5f506     ................
 23fdd20:	11df23fb ed080210 0bf1ed0f 0df5f0f9     .#..............
 23fdd30:	0dfcfe04 070ced02 0af3f50f 15e8ebf0     ................
 23fdd40:	0ae8fdf2 f7030a13 0a08f104 0ccaefff     ................
 23fdd50:	14dd05ef ec10d90b 0400e7f5 0ff7d9fc     ................
 23fdd60:	09dd0c1a f40df512 061bdef7 13fff215     ................
 23fdd70:	10d2fa09 ecf8e4f8 0cfadcea 0ffee805     ................
 23fdd80:	0eda03f3 fff6eef9 15fcc9f5 0beff403     ................
 23fdd90:	13db1804 edffe002 0fe6e30f 0c04da04     ................
 23fdda0:	15f212fc e209c811 0bdfeaf6 11fcecff     ................
 23fddb0:	0fe60207 ebf9e700 0ad8dbfa 11f9f510     ................
 23fddc0:	0ad10905 fd05e104 13f3d4f9 0d1ce517     ................
 23fddd0:	0fea0b07 f005eaef 07efe108 0ee1ebfc     ................
 23fdde0:	12d90607 f202ed14 05d9eaf0 11eef1ff     ................
 23fddf0:	0efa0b17 f404e0ed 0edccbfa 1304ef0a     ................
 23fde00:	0fe10606 f40bddf8 01d1dc02 16db0200     ................
 23fde10:	11ef0ff2 ee07e2ff fddbe305 1fe8e00b     ................
 23fde20:	18da02fe f406d5fb 01dee5fb 02f9d419     ................
 23fde30:	1ce10617 f20de9e6 14d6dc04 10fbfc07     ................
 23fde40:	0dfbfd07 e6fcddef 15e2e0f6 0f13ea05     ................
 23fde50:	09f3eff1 d4f1e7b5 04e4e5fe 1be3dfed     ................
 23fde60:	0811d4bc dc0addf4 101407eb f9fa1a12     ................
 23fde70:	0d0de0dd d00feff6 1e2c0aeb f5140a08     ..........,.....
 23fde80:	fe1be4d4 f11bf5fe 181211f3 f61403e5     ................
 23fde90:	010cf1ca e10ef7f7 151a1503 f90b0aed     ................
 23fdea0:	011ee0d1 f314ebf4 18eb09f8 f724130e     ..............$.
 23fdeb0:	0d0ce1c9 e00ef1e6 0cf908ff fffafc00     ................
 23fdec0:	ff15d2da da0701f1 1712feea fd0ff7f4     ................
 23fded0:	100bfce1 ef12ed07 2407f8eb 000a160a     ...........$....
 23fdee0:	fcfaeaed e00cf6e3 fbfd0afe 010305f4     ................
 23fdef0:	f30ff2c5 d810e2d2 ecf80f04 f81709d1     ................
 23fdf00:	0713ddcf e61fe3d1 09f2170d fe1f0adc     ................
 23fdf10:	f517dad1 df19d7e6 09f81ff2 00210cf0     ..............!.
 23fdf20:	081fdfc0 cf0eecf3 262206fd 001a01da     .........."&....
 23fdf30:	0208d9cf cb16e3f9 1423edf4 0a0a06f8     ..........#.....
 23fdf40:	fd08e3d4 d502e2e3 07f8ef00 fd030ae7     ................
 23fdf50:	0515e2d4 dd0bea03 fef805fc 01040b03     ................
 23fdf60:	ff0aecde ed0ef0f0 01f2fcf7 05030501     ................
 23fdf70:	010cebd0 dc0dede9 fe03f5f8 fe0d18e7     ................
 23fdf80:	f71cd7d7 cf0bd9f6 05e30bfd 061b1400     ................
 23fdf90:	fa0becdf ec08eddc 04fe04f2 090303ef     ................
 23fdfa0:	040de1eb ce07f8ee 180af9ee 06231d23     ............#.#.
 23fdfb0:	fb17efee f30ef2fe 0ce5ebe5 fc0203f3     ................
 23fdfc0:	f8fefcd7 c808f0df eaea10f4 f81b0ce4     ................
 23fdfd0:	fa09fcd4 d312e0d1 01ed1004 090914df     ................
 23fdfe0:	fa16fbd5 c602ecd8 fbe10700 0d0219e8     ................
 23fdff0:	061bf506 f80407ea e8fae4eb ff0d2704     .............'..
 23fe000:	fd25f904 f20c15e8 fff8eee4 f52020f9     ..%..........  .
 23fe010:	e726fd02 f60108f4 e501e9fa fc0cf901     ..&.............
 23fe020:	f22f020a f01c07ef f004e2e6 fc021505     ../.............
 23fe030:	0419f30b f2fb08fb f4f9f4ee f4090508     ................
 23fe040:	ff1bd502 ff0800f9 ed09f0db fe0d0a07     ................
 23fe050:	f31c0d0b ef08fdf2 f607e5e6 fe131912     ................
 23fe060:	0222080d f216eff2 04dbebea 0f0f1800     ..".............
 23fe070:	f922f905 fb15f3e7 eef3f6fe f60d1607     ..".............
 23fe080:	fe26e704 f603f802 f70ae6fc 04091000     ..&.............
 23fe090:	f818f40b f3110212 06ecefef 07170d02     ................
 23fe0a0:	fe1b00ff fb0dedfc ef08f4ff 0b040c00     ................
 23fe0b0:	fe0c0b01 f4f1011b 051cf301 fdf40b0b     ................
 23fe0c0:	0214f115 f90c01fa eb07fcf5 03100403     ................
 23fe0d0:	eb0cd806 fdfa01f8 cffbfbe2 ec0d0f00     ................
 23fe0e0:	f628fcfe fa04fa12 d8edf5f3 fd020bf4     ..(.............
 23fe0f0:	fc1df9fc fb10f312 dcf5f5f0 01030707     ................
 23fe100:	f624fb13 f803f7ff e103f60d f41a15f0     ..$.............
 23fe110:	fd22f602 040509f7 f7fcf5f3 010afe0e     ..".............
 23fe120:	f526fd15 f8140eff ed07f7fd 071a1010     ..&.............
 23fe130:	0a25120c f41107f0 e5ee05f6 011b100a     ..%.............
 23fe140:	ff1d1706 f70af909 fddaf203 ff1d100f     ................
 23fe150:	fc1ef70d f614f303 eee3e2fa 0012180d     ................
 23fe160:	f514100b 0104e216 f000f2f7 fd111a1f     ................
 23fe170:	f506000b f3050209 ec01f0fa 05fcf4f4     ................
 23fe180:	cce8e432 05dd17f3 f2caf3e3 ea13081b     2...............
 23fe190:	c5d9ee0f 03be12e6 dbcafcd0 d90f0909     ................
 23fe1a0:	cbf3040f 06b40405 f0d0f1fa cf16f71f     ................
 23fe1b0:	dbf20311 04d30a00 eefef7f4 ef18f412     ................
 23fe1c0:	d0fc0416 02cf150a d9d203ef d705e404     ................
 23fe1d0:	e1fefd19 0bef17ed ecc3eecb e8fbfd0f     ................
 23fe1e0:	c9f2eb0d 07d619f7 f1e2f1db e50a110f     ................
 23fe1f0:	e1effe09 04e11603 f5eafbdd ee040807     ................
 23fe200:	d6e1f511 feee1005 e0d5f7da db01f80d     ................
 23fe210:	ddedfc15 03dd0cf5 f0e001da e7fe010f     ................
 23fe220:	d4d6fc12 06d40f19 d5dffffc e4faf9fc     ................
 23fe230:	bfebf3fe 03d30b05 d9e1fdfa df01f802     ................
 23fe240:	c0ebfe12 01befc0a e4d909ee d9fd0609     ................
 23fe250:	bef6ff0a 08df0b07 e5f5feea d10a0705     ................
 23fe260:	dbdff516 fdef090a e7ed03ed e70b0a0e     ................
 23fe270:	d8e4ff00 06cd0507 f1dcfeef e505fd0e     ................
 23fe280:	caef010a 0ace0e18 dde2010f dafbf8f3     ................
 23fe290:	cbf1f502 fbd0160b d3cc10f1 d8f7e308     ................
 23fe2a0:	c5e3f60c 0ced0eeb d1dbfaea ebf4fc02     ................
 23fe2b0:	b6dcf80f 04d70e10 cfe209eb d204f305     ................
 23fe2c0:	c7e3ed12 0ed51606 cdd301db c903f000     ................
 23fe2d0:	bec6000a 0cd816fb c7bd03ca d0ffff0f     ................
 23fe2e0:	bddaf80f 12dd0efe dee4f8e1 d405f306     ................
 23fe2f0:	d1e8ee05 16cf0f16 dfdf0de2 c1f6f308     ................
 23fe300:	f6d4f315 09c80be7 ffb401d4 f10cff0a     ................

023fe310 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
 23fe310:	000000c9 00000477 fffff725 000006fc     ....w...%.......
 23fe320:	fffffd79 0000012d fffff782 fffff497     y...-...........
 23fe330:	ffffec2f fffff0ad fffffd76 00000146     /.......v...F...
 23fe340:	fffffed7 ffffedfa fffff6e3 00000dde     ................

023fe350 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
 23fe350:	f71c5e03 ee9f00b4 e4b946f6 c1c102c3     .^.......F......
 23fe360:	e2ec7ffa e394fbb5 bad9aaf6 eccde414     ................
 23fe370:	8ff981fd 14f4e319 88f89444 05cfdbfa     ........D.......
 23fe380:	350a1808 dff896d3 49191853 f01a81d9     ...5....S..I....
 23fe390:	00092af3 c8008ae3 a050c717 01c9e761     .*........P.a...
 23fe3a0:	4735cd09 f6d7f342 c57ffde4 e60be04f     ..5GB.......O...
 23fe3b0:	ea0ab2f2 102cef0b f12bbdf7 f8280e12     ......,...+...(.
 23fe3c0:	0d7ffc03 0e132703 3be61693 14c9f3e7     .....'.....;....
 23fe3d0:	fcbd4381 e59c3b29 3fbc5983 03a117f1     .C..);...Y.?....
 23fe3e0:	2d73113a 000905e8 e24c030d fcfbfdf0     :.s-......L.....
 23fe3f0:	477ffbf7 d8c401f0 a3fb52f5 0c7e32fb     ...G.....R...2~.
 23fe400:	1a364303 20711e36 d5e220fd fb7f113f     .C6.6.q . ..?...
 23fe410:	00fece48 5130ff15 0e81c21e 74a8fb1c     H.....0Q.......t
 23fe420:	eef6e118 1cd33a0f 6aefc31b e9293885     .....:.....j.8).
 23fe430:	ee93d314 f1e4fdc9 7fb3ec07 14cc3efb     .............>..
 23fe440:	7faee4ac ff4ffd4d 4ebee29c 1027f928     ....M.O....N(.'.
 23fe450:	5c9ee4ae 1f270a0e 39d9eaf6 ee24ed79     ...\..'....9y.$.
 23fe460:	0b3bd1f2 f529e77f 2ce1ddf1 f115e720     ..;...)...., ...
 23fe470:	17d81df4 ec3ef6fb fcc617f7 e80e06ef     ......>.........
 23fe480:	f97f48fa fe00ed0f 1caf1c2a bcddfe90     .H......*.......
 23fe490:	46c1547f b6c7cd99 517e66f0 d4ecbec2     .T.F.....f~Q....
 23fe4a0:	1f3050fd bbf506d4 424a7ff6 adfbecc0     .P0.......JB....
 23fe4b0:	58deee28 afb8d0e4 fc43094c dcbdc4f4     (..X....L.C.....
 23fe4c0:	db56ee12 d9cbc703 cc7fe5fe e3c6d8e9     ..V.............

023fe4d0 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23fe4d0:	00000008 3780c5af 37a12c38 37a4c0f8     .......78,.7...7
 23fe4e0:	378fc9ae 37ca219f 375cff74 37954a88     ...7.!.7t.\7.J.7
 23fe4f0:	3786a713                                ...7

023fe4f4 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
 23fe4f4:	00000008 3b80c5af 3ba12c38 3ba4c0f8     .......;8,.;...;
 23fe504:	3b8fc9ae 3bca219f 3b5cff74 3b954a88     ...;.!.;t.\;.J.;
 23fe514:	3b86a713                                ...;

023fe518 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
 23fe518:	00000001 3b800000                       .......;

023fe520 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
 23fe520:	00000001 3ca3ea2a                       ....*..<

023fe528 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
 23fe528:	00000001 3ca3ea2a                       ....*..<

023fe530 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
 23fe530:	00000001 3ca3ea2a                       ....*..<

023fe538 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
 23fe538:	00000001 3ca3ea2a                       ....*..<

023fe540 <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
 23fe540:	00000001 3d10bfb9                       .......=

023fe548 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
 23fe548:	00000001 3d10bfb9                       .......=

023fe550 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
 23fe550:	00000001 3d10bfb9                       .......=

023fe558 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
 23fe558:	00000001 3d10bfb9                       .......=

023fe560 <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
 23fe560:	00000001 3f071097                       .......?

023fe568 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
 23fe568:	00000001 3b800000                       .......;

023fe570 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
 23fe570:	0000154a 0000234c 00000c17 ffffe1e9     J...L#..........
 23fe580:	000033f4 ffff8ad8 fffff882 ffffa89f     .3..............

023fe590 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
 23fe590:	5116e3fe 23722912 b7efd6db ccbaa4dd     ...Q.)r#........
 23fe5a0:	10d7afcb 200ffe4b e5151816 490b1825     ....K.. ....%..I
 23fe5b0:	11524056 fd17fe1c 61d7b8ec 427b1027     V@R........a'.{B
 23fe5c0:	1e0fcdf8 e701f581 5ddad401 0413220d     ...........]."..
 23fe5d0:	073707f1 591a3040 2c2d312a e4e02e35     ..7.@0.Y*1-,5...
 23fe5e0:	3437b811 ff10e945 b6aff6d3 b0be91c3     ..74E...........
 23fe5f0:	16fa9ea3 02f1e147 0dd2e4f6 effb1cf5     ....G...........
 23fe600:	fe182a35 f4152bf3 4b562dad 5c0a7f31     5*...+...-VK1..\
 23fe610:	d8eff822 e72ce921 2c37ffc4 1d37e70d     "...!.,...7,..7.
 23fe620:	e3e0f605 c1f505e7 0ce7d4a9 ba11d7bd     ................
 23fe630:	27133803 5454673f e4e8e52e 05dde20c     .8.'?gTT........
 23fe640:	f7f5eff7 0a101f0c de0505d4 e3e519ed     ................
 23fe650:	e7dae6b1 a909eebe 064a0f13 3b57661d     ..........J..fW;
 23fe660:	0cd8fdec e702ee27 f62729e1 260202e2     ....'....)'....&
 23fe670:	19e83215 d108d8eb 10c99dc1 f2f8fbf6     .2..............
 23fe680:	e0bb3167 e9d5c2c2 cd04e28d e5a8e90e     g1..............
 23fe690:	1cfbdb49 ecdcee50 9ea0bdd0 02c0c6cf     I...P...........
 23fe6a0:	cd0b0bba 0b30cffe dae1f173 ca04ede9     ......0.s.......
 23fe6b0:	bd1fb4d5 d9ec08bc 2c01c6e4 d9c2072c     ...........,,...
 23fe6c0:	b696e998 02c2bfb2 aebef0b1 f2e7d2ae     ................
 23fe6d0:	01b7ce41 3d5d3a48 2e1a0f26 3135582b     A...H:]=&...+X51
 23fe6e0:	29601b3e 450a407f f8f8df27 4b594820     >.`).@.E'... HYK
 23fe6f0:	094c2a54 6c545043 09472b3b f720f943     T*L.CPTl;+G.C. .
 23fe700:	c3f7ec64 1c5408c7 e3486063 10f6fce0     d.....T.c`H.....
 23fe710:	0d3b1e13 414c257b 02dac7f3 0dcf2f00     ..;.{%LA...../..
 23fe720:	e8ffc6cf aef0e609 b4bff044 eb55c488     ........D.....U.
 23fe730:	dd22654f 04c1d3d1 0e27d2f6 4f54f54b     Oe".......'.K.TO
 23fe740:	e1b0abe7 e62c0c0d 01570c35 d4f91f2f     ......,.5.W./...
 23fe750:	ad131507 1b08ef81 e8194e37 e2a0d88e     ........7N......
 23fe760:	281fe1d6 f043ce56 d99395bc e5d3f809     ...(V.C.........
 23fe770:	c39add6c f1aee3bc 362cfddd 2d16381e     l.........,6.8.-
 23fe780:	e4d7d9ea 0dd3050d 24e5e818 16fbf029     ...........$)...
 23fe790:	ea0812f3 1af3f803 86d3f544 b7dad1c5     ........D.......
 23fe7a0:	2e39f8f5 feff3500 eff8fae4 23fd270c     ..9..5.......'.#
 23fe7b0:	fce90923 24e80c04 0a0df8e2 0ce0dff9     #......$........
 23fe7c0:	bb83d27f d5c1cea5 392feec6 0ff4421e     ........../9.B..
 23fe7d0:	fbedd7de f9e1121c 00cace22 e0170af9     ........".......
 23fe7e0:	13dc1d1b eef5ed26 0cca33eb f3c6caeb     ....&....3......
 23fe7f0:	75053112 2a266b63 0f140ee4 d84709c6     .1.uck&*......G.
 23fe800:	070499f4 51af11d4 fc22d62d f2110ffc     .......Q-.".....
 23fe810:	29f6f1ab f2d0bbeb 1ef8ee02 332e7f5f     ...)........_..3
 23fe820:	2152fc22 3b30f70c 18cfe7cc 11d2eb0f     ".R!..0;........
 23fe830:	e9dc01f8 d3d05417 e613f425 e2eadbeb     .....T..%.......
 23fe840:	5d433f28 3b1a7652 a919dc3f 2df24600     (?C]Rv.;?....F.-
 23fe850:	1526abec 4df7c60d c7d3a90f 3cfa0804     ..&....M.......<
 23fe860:	e7e72410 cce0e6cf f1d9c2dc 123ffbd5     .$............?.
 23fe870:	05507f2b 09ef05df 0c3e0cfc e003df05     +.P.......>.....
 23fe880:	f2a8ae10 e6e602bb ed20eb05 0f0c25ca     .......... ..%..
 23fe890:	15e30905 125c20c6 2e663523 f2e9c2e1     ..... \.#5f.....
 23fe8a0:	160e3be2 2825e1e3 faadf2d8 f4e0020f     .;....%(........
 23fe8b0:	b9bbd7f6 d7d0b5a0 c2c30220 ef16dcd5     ........ .......
 23fe8c0:	ee45274d ed0abbe3 f8e10212 05f814e6     M'E.............
 23fe8d0:	03cceff4 09d3bdc9 29f1cc24 0eced705     ........$..)....
 23fe8e0:	0d4bffe3 32f0dd4f f0ed2622 e0bf12e3     ..K.O..2"&......
 23fe8f0:	12dec809 0c041918 dafd3e58 f6ecf71a     ........X>......
 23fe900:	03b0ace7 2901a7b0 134d3902 1bdf0c48     .......).9M.H...
 23fe910:	db08f10c 030516f0 08d4cbe8 1ee7de07     ................
 23fe920:	0229225a 16cd1810 019a81ce fef0aab7     Z").............
 23fe930:	3f1e32e9 4c1b2516 f91e1f36 120925ef     .2.?.%.L6....%..
 23fe940:	12f30ac8 4e250eea 0be50617 21f3ede1     ......%N.......!

023fe950 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23fe950:	00000002 00000001 00000f78              ........x...

023fe95c <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23fe95c:	00000001 00000004                       ........

023fe964 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23fe964:	00000001 00000004                       ........

023fe96c <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23fe96c:	00000001 00000004                       ........

023fe974 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23fe974:	00000001 00000004                       ........

023fe97c <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23fe97c:	00000001 00000002                       ........

023fe984 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23fe984:	00000001 00000009                       ........

023fe98c <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23fe98c:	00000002 00000009 00000190              ............

023fe998 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23fe998:	00000001 00000010                       ........

023fe9a0 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23fe9a0:	00000004 00000010 00000001 00000003     ................
 23fe9b0:	00000008                                ....

023fe9b4 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23fe9b4:	00000001 00000008                       ........

023fe9bc <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
 23fe9bc:	00000004 00000008 00000001 00000003     ................
 23fe9cc:	00000028                                (...

023fe9d0 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
 23fe9d0:	00000004 00000001 00000001 00000063     ............c...
 23fe9e0:	00000028                                (...

023fe9e4 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
 23fe9e4:	00000004 00000001 00000001 00000063     ............c...
 23fe9f4:	00000008                                ....

023fe9f8 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
 23fe9f8:	00000004 00000001 00000063 00000001     ........c.......
 23fea08:	00000008                                ....

023fea0c <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
 23fea0c:	00000004 00000001 00000032 00000001     ........2.......
 23fea1c:	00000008                                ....

023fea20 <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
 23fea20:	00000004 00000001 00000001 00000032     ............2...
 23fea30:	00000008                                ....

023fea34 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
 23fea34:	00000004 00000001 00000001 00000032     ............2...
 23fea44:	00000010                                ....

023fea48 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
 23fea48:	00000004 00000001 00000032 00000001     ........2.......
 23fea58:	00000010                                ....

023fea5c <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
 23fea5c:	00000004 00000001 00000019 00000001     ................
 23fea6c:	00000010                                ....

023fea70 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
 23fea70:	00000002 00000001 00000190              ............

023fea7c <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
 23fea7c:	00000002 00000001 00000009              ............

023fea88 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
 23fea88:	00000002 00000001 00000009              ............

023fea94 <_ZN12_GLOBAL__N_1L6quant0E>:
 23fea94:	023fd334 023fd294 00000000              4.?...?.....

023feaa0 <_ZN12_GLOBAL__N_1L6quant6E>:
 23feaa0:	023fd3dc 023fd29c 00000000              ..?...?.....

023feaac <_ZN12_GLOBAL__N_1L6quant7E>:
 23feaac:	023fd3e4 023fd2a4 00000000              ..?...?.....

023feab8 <_ZN12_GLOBAL__N_1L6quant8E>:
 23feab8:	023fd3ec 023fd2ac 00000000              ..?...?.....

023feac4 <_ZN12_GLOBAL__N_1L6quant9E>:
 23feac4:	023fd430 023fd2f0 00000000              0.?...?.....

023fead0 <_ZN12_GLOBAL__N_1L7inputs0E>:
 23fead0:	00000002 00000000 00000001              ............

023feadc <_ZN12_GLOBAL__N_1L7inputs1E>:
 23feadc:	00000003 0000000c 0000000b 0000000a     ................

023feaec <_ZN12_GLOBAL__N_1L7inputs2E>:
 23feaec:	00000002 0000000d 00000002              ............

023feaf8 <_ZN12_GLOBAL__N_1L7inputs3E>:
 23feaf8:	00000001 0000000e                       ........

023feb00 <_ZN12_GLOBAL__N_1L7inputs4E>:
 23feb00:	00000002 0000000f 00000003              ............

023feb0c <_ZN12_GLOBAL__N_1L7inputs5E>:
 23feb0c:	00000003 00000010 00000009 00000008     ................

023feb1c <_ZN12_GLOBAL__N_1L7inputs6E>:
 23feb1c:	00000002 00000011 00000004              ............

023feb28 <_ZN12_GLOBAL__N_1L7inputs7E>:
 23feb28:	00000001 00000012                       ........

023feb30 <_ZN12_GLOBAL__N_1L7inputs8E>:
 23feb30:	00000002 00000013 00000005              ............

023feb3c <_ZN12_GLOBAL__N_1L7inputs9E>:
 23feb3c:	00000003 00000014 00000007 00000006     ................

023feb4c <_ZN12_GLOBAL__N_1L7opdata0E>:
	...

023feb70 <_ZN12_GLOBAL__N_1L7opdata1E>:
 23feb70:	00000001 00000001 00000001 00000001     ................
 23feb80:	00000001 00000001                       ........

023feb88 <_ZN12_GLOBAL__N_1L7opdata2E>:
	...

023febac <_ZN12_GLOBAL__N_1L7opdata3E>:
 23febac:	00000001 00000001 00000002 00000001     ................
 23febbc:	00000002 00000000 00000000 00000000     ................
	...

023febd4 <_ZN12_GLOBAL__N_1L7opdata4E>:
	...

023febf8 <_ZN12_GLOBAL__N_1L7opdata5E>:
 23febf8:	00000001 00000001 00000001 00000001     ................
 23fec08:	00000001 00000001                       ........

023fec10 <_ZN12_GLOBAL__N_1L7opdata6E>:
	...

023fec34 <_ZN12_GLOBAL__N_1L7opdata7E>:
 23fec34:	00000001 00000001 00000002 00000001     ................
 23fec44:	00000002 00000000 00000000 00000000     ................
	...

023fec5c <_ZN12_GLOBAL__N_1L7opdata8E>:
	...

023fec80 <_ZN12_GLOBAL__N_1L7opdata9E>:
 23fec80:	00000000                                ....

023fec84 <_ZN12_GLOBAL__N_1L7quant10E>:
 23fec84:	023fe4d0 023fd33c 00000000              ..?.<.?.....

023fec90 <_ZN12_GLOBAL__N_1L7quant11E>:
 23fec90:	023fe4f4 023fd360 00000000              ..?.`.?.....

023fec9c <_ZN12_GLOBAL__N_1L7quant12E>:
 23fec9c:	023fe518 023fd384 00000000              ..?...?.....

023feca8 <_ZN12_GLOBAL__N_1L7quant13E>:
 23feca8:	023fe520 023fd38c 00000000               .?...?.....

023fecb4 <_ZN12_GLOBAL__N_1L7quant14E>:
 23fecb4:	023fe528 023fd394 00000000              (.?...?.....

023fecc0 <_ZN12_GLOBAL__N_1L7quant15E>:
 23fecc0:	023fe530 023fd39c 00000000              0.?...?.....

023feccc <_ZN12_GLOBAL__N_1L7quant16E>:
 23feccc:	023fe538 023fd3a4 00000000              8.?...?.....

023fecd8 <_ZN12_GLOBAL__N_1L7quant17E>:
 23fecd8:	023fe540 023fd3ac 00000000              @.?...?.....

023fece4 <_ZN12_GLOBAL__N_1L7quant18E>:
 23fece4:	023fe548 023fd3b4 00000000              H.?...?.....

023fecf0 <_ZN12_GLOBAL__N_1L7quant19E>:
 23fecf0:	023fe550 023fd3bc 00000000              P.?...?.....

023fecfc <_ZN12_GLOBAL__N_1L7quant20E>:
 23fecfc:	023fe558 023fd3c4 00000000              X.?...?.....

023fed08 <_ZN12_GLOBAL__N_1L7quant21E>:
 23fed08:	023fe560 023fd3cc 00000000              `.?...?.....

023fed14 <_ZN12_GLOBAL__N_1L7quant22E>:
 23fed14:	023fe568 023fd3d4 00000000              h.?...?.....

023fed20 <_ZN12_GLOBAL__N_1L8inputs10E>:
 23fed20:	00000001 00000015                       ........

023fed28 <_ZN12_GLOBAL__N_1L8nodeDataE>:
 23fed28:	023fead0 023feddc 023feb4c 00000000     ..?...?.L.?.....
 23fed38:	023feadc 023fede4 023feb70 00000001     ..?...?.p.?.....
 23fed48:	023feaec 023fedec 023feb88 00000000     ..?...?...?.....
 23fed58:	023feaf8 023fedf4 023febac 00000002     ..?...?...?.....
 23fed68:	023feb00 023fedfc 023febd4 00000000     ..?...?...?.....
 23fed78:	023feb0c 023fee04 023febf8 00000001     ..?...?...?.....
 23fed88:	023feb1c 023fee0c 023fec10 00000000     ..?...?...?.....
 23fed98:	023feb28 023fee14 023fec34 00000002     (.?...?.4.?.....
 23feda8:	023feb30 023fee1c 023fec5c 00000000     0.?...?.\.?.....
 23fedb8:	023feb3c 023fee24 023fec80 00000003     <.?.$.?...?.....
 23fedc8:	023fed20 023fee2c 023fedd8 00000004      .?.,.?...?.....

023fedd8 <_ZN12_GLOBAL__N_1L8opdata10E>:
 23fedd8:	3f800000                                ...?

023feddc <_ZN12_GLOBAL__N_1L8outputs0E>:
 23feddc:	00000001 0000000c                       ........

023fede4 <_ZN12_GLOBAL__N_1L8outputs1E>:
 23fede4:	00000001 0000000d                       ........

023fedec <_ZN12_GLOBAL__N_1L8outputs2E>:
 23fedec:	00000001 0000000e                       ........

023fedf4 <_ZN12_GLOBAL__N_1L8outputs3E>:
 23fedf4:	00000001 0000000f                       ........

023fedfc <_ZN12_GLOBAL__N_1L8outputs4E>:
 23fedfc:	00000001 00000010                       ........

023fee04 <_ZN12_GLOBAL__N_1L8outputs5E>:
 23fee04:	00000001 00000011                       ........

023fee0c <_ZN12_GLOBAL__N_1L8outputs6E>:
 23fee0c:	00000001 00000012                       ........

023fee14 <_ZN12_GLOBAL__N_1L8outputs7E>:
 23fee14:	00000001 00000013                       ........

023fee1c <_ZN12_GLOBAL__N_1L8outputs8E>:
 23fee1c:	00000001 00000014                       ........

023fee24 <_ZN12_GLOBAL__N_1L8outputs9E>:
 23fee24:	00000001 00000015                       ........

023fee2c <_ZN12_GLOBAL__N_1L9outputs10E>:
 23fee2c:	00000001 00000016 6d6f682f 696e2f65     ......../home/ni
 23fee3c:	732f6b63 7774666f 2f657261 75736976     ck/software/visu
 23fee4c:	615f6c61 7472656c 7369762f 5f6c6175     al_alert/visual_
 23fee5c:	72656c61 695f7374 7265666e 69636e65     alerts_inferenci
 23fee6c:	2f2f676e 2f637273 65676465 706d692d     ng//src/edge-imp
 23fee7c:	65736c75 6b64732d 6e65742f 66726f73     ulse-sdk/tensorf
 23fee8c:	2f776f6c 6574696c 63696d2f 6b2f6f72     low/lite/micro/k
 23fee9c:	656e7265 662f736c 796c6c75 6e6f635f     ernels/fully_con
 23feeac:	7463656e 632e6465 25007070 64253a73     nected.cpp.%s:%d
 23feebc:	20732520 25203d21 25282073 3d212064      %s != %s (%d !=
 23feecc:	29642520 4d524100 54414d5f 55535f48      %d).ARM_MATH_SU
 23feedc:	53454343 72610053 75665f6d 5f796c6c     CCESS.arm_fully_
 23feeec:	6e6e6f63 65746365 38735f64 63262028     connected_s8( &c
 23feefc:	202c7874 5f636626 61726170 202c736d     tx, &fc_params, 
 23fef0c:	61757126 705f746e 6d617261 26202c73     &quant_params, &
 23fef1c:	75706e69 69645f74 202c736d 696c6674     input_dims, tfli
 23fef2c:	3a3a6574 7263696d 473a3a6f 65547465     te::micro::GetTe
 23fef3c:	726f736e 61746144 746e693c 3e745f38     nsorData<int8_t>
 23fef4c:	706e6928 2c297475 69662620 7265746c     (input), &filter
 23fef5c:	6d69645f 74202c73 74696c66 6d3a3a65     _dims, tflite::m
 23fef6c:	6f726369 65473a3a 6e655474 44726f73     icro::GetTensorD
 23fef7c:	3c617461 38746e69 283e745f 746c6966     ata<int8_t>(filt
 23fef8c:	2c297265 69622620 645f7361 2c736d69     er), &bias_dims,
 23fef9c:	6c667420 3a657469 63696d3a 3a3a6f72      tflite::micro::
 23fefac:	54746547 6f736e65 74614472 6e693c61     GetTensorData<in
 23fefbc:	5f323374 62283e74 29736169 6f26202c     t32_t>(bias), &o
 23fefcc:	75707475 69645f74 202c736d 696c6674     utput_dims, tfli
 23fefdc:	3a3a6574 7263696d 473a3a6f 65547465     te::micro::GetTe
 23fefec:	726f736e 61746144 746e693c 3e745f38     nsorData<int8_t>
 23feffc:	74756f28 29747570 73250029 2064253a     (output)).%s:%d 
 23ff00c:	77207325 6e207361 7420746f 2e657572     %s was not true.
 23ff01c:	706e6900 21207475 756e203d 74706c6c     .input != nullpt
 23ff02c:	69660072 7265746c 203d2120 6c6c756e     r.filter != null
 23ff03c:	00727470 7074756f 21207475 756e203d     ptr.output != nu
 23ff04c:	74706c6c 73250072 2064253a 21207325     llptr.%s:%d %s !
 23ff05c:	7325203d 73252820 203d2120 00297325     = %s (%s != %s).
 23ff06c:	7074756f 3e2d7475 65707974 706e6900     output->type.inp
 23ff07c:	3e2d7475 65707974 62794800 20646972     ut->type.Hybrid 
 23ff08c:	65646f6d 6120736c 6e206572 7320746f     models are not s
 23ff09c:	6f707075 64657472 206e6f20 694c4654     upported on TFLi
 23ff0ac:	4d206574 6f726369 7954002e 25206570     te Micro..Type %
 23ff0bc:	25282073 6e202964 7320746f 6f707075     s (%d) not suppo
 23ff0cc:	64657472 0000002e                       rted....

023ff0d4 <_ZN6tflite25kFullyConnectedBiasTensorE>:
 23ff0d4:	00000002                                ....

023ff0d8 <_ZN6tflite26kFullyConnectedInputTensorE>:
 23ff0d8:	00000000                                ....

023ff0dc <_ZN6tflite27kFullyConnectedOutputTensorE>:
 23ff0dc:	00000000                                ....

023ff0e0 <_ZN6tflite28kFullyConnectedWeightsTensorE>:
 23ff0e0:	00000001 6d6f682f 696e2f65 732f6b63     ..../home/nick/s
 23ff0f0:	7774666f 2f657261 75736976 615f6c61     oftware/visual_a
 23ff100:	7472656c 7369762f 5f6c6175 72656c61     lert/visual_aler
 23ff110:	695f7374 7265666e 69636e65 2f2f676e     ts_inferencing//
 23ff120:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
 23ff130:	6b64732d 6e65742f 66726f73 2f776f6c     -sdk/tensorflow/
 23ff140:	6574696c 63696d2f 6b2f6f72 656e7265     lite/micro/kerne
 23ff150:	722f736c 61687365 632e6570 2d007070     ls/reshape.cpp.-
 23ff160:	74730031 63746572 69645f68 756e006d     1.stretch_dim.nu
 23ff170:	756f5f6d 74757074 656c655f 746e656d     m_output_element
 23ff180:	756e0073 6e695f6d 5f747570 6d656c65     s.num_input_elem
 23ff190:	73746e65 6d754e00 75706e49 6e287374     ents.NumInputs(n
 23ff1a0:	2965646f 203d3d20 7c7c2031 6d754e20     ode) == 1 || Num
 23ff1b0:	75706e49 6e287374 2965646f 203d3d20     Inputs(node) == 
 23ff1c0:	754e0032 74754f6d 73747570 646f6e28     2.NumOutputs(nod
 23ff1d0:	6b002965 694c6654 6b4f6574 73655200     e).kTfLiteOk.Res
 23ff1e0:	65706168 7074754f 63287475 65746e6f     hapeOutput(conte
 23ff1f0:	202c7478 65646f6e 78650029 656e6f70     xt, node).expone
 23ff200:	3c20746e 3133203d 746e4900 72656765     nt <= 31.Integer
 23ff210:	65707954 6d656720 776f6c6d 523a3a70     Type gemmlowp::R
 23ff220:	646e756f 44676e69 64697669 50794265     oundingDivideByP
 23ff230:	4928544f 6765746e 79547265 202c6570     OT(IntegerType, 
 23ff240:	29746e69 69775b20 49206874 6765746e     int) [with Integ
 23ff250:	79547265 3d206570 6e6f6c20 6e692067     erType = long in
 23ff260:	2f005d74 656d6f68 63696e2f 6f732f6b     t]./home/nick/so
 23ff270:	61777466 762f6572 61757369 6c615f6c     ftware/visual_al
 23ff280:	2f747265 75736976 615f6c61 7472656c     ert/visual_alert
 23ff290:	6e695f73 65726566 6e69636e 732f2f67     s_inferencing//s
 23ff2a0:	652f6372 2d656764 75706d69 2d65736c     rc/edge-impulse-
 23ff2b0:	2f6b6473 72696874 61705f64 2f797472     sdk/third_party/
 23ff2c0:	6d6d6567 70776f6c 7869662f 6f706465     gemmlowp/fixedpo
 23ff2d0:	2f746e69 65786966 696f7064 682e746e     int/fixedpoint.h
 23ff2e0:	6f682f00 6e2f656d 2f6b6369 74666f73     ./home/nick/soft
 23ff2f0:	65726177 7369762f 5f6c6175 72656c61     ware/visual_aler
 23ff300:	69762f74 6c617573 656c615f 5f737472     t/visual_alerts_
 23ff310:	65666e69 636e6572 2f676e69 6372732f     inferencing//src
 23ff320:	6764652f 6d692d65 736c7570 64732d65     /edge-impulse-sd
 23ff330:	65742f6b 726f736e 776f6c66 74696c2f     k/tensorflow/lit
 23ff340:	696d2f65 2f6f7263 6e72656b 2f736c65     e/micro/kernels/
 23ff350:	766e6f63 7070632e 6f682f00 6e2f656d     conv.cpp./home/n
 23ff360:	2f6b6369 74666f73 65726177 7369762f     ick/software/vis
 23ff370:	5f6c6175 72656c61 69762f74 6c617573     ual_alert/visual
 23ff380:	656c615f 5f737472 65666e69 636e6572     _alerts_inferenc
 23ff390:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff3a0:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff3b0:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff3c0:	6e72656b 2f736c65 766e6f63 6d6f635f     kernels/conv_com
 23ff3d0:	2e6e6f6d 00707063 5f736168 73616962     mon.cpp.has_bias
 23ff3e0:	207c7c20 65646f6e 6e693e2d 73747570      || node->inputs
 23ff3f0:	69733e2d 3d20657a 0032203d 65646f6e     ->size == 2.node
 23ff400:	756f3e2d 74757074 733e2d73 00657a69     ->outputs->size.

023ff410 <_ZN6tflite15kConvBiasTensorE>:
 23ff410:	00000002                                ....

023ff414 <_ZN6tflite16kConvInputTensorE>:
 23ff414:	00000000                                ....

023ff418 <_ZN6tflite17kConvOutputTensorE>:
 23ff418:	00000000                                ....

023ff41c <_ZN6tflite18kConvWeightsTensorE>:
 23ff41c:	00000001                                ....

023ff420 <_ZN6tflite23kConvQuantizedDimensionE>:
 23ff420:	00000000 6d6f682f 696e2f65 732f6b63     ..../home/nick/s
 23ff430:	7774666f 2f657261 75736976 615f6c61     oftware/visual_a
 23ff440:	7472656c 7369762f 5f6c6175 72656c61     lert/visual_aler
 23ff450:	695f7374 7265666e 69636e65 2f2f676e     ts_inferencing//
 23ff460:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
 23ff470:	6b64732d 6e65742f 66726f73 2f776f6c     -sdk/tensorflow/
 23ff480:	6574696c 63696d2f 6b2f6f72 656e7265     lite/micro/kerne
 23ff490:	702f736c 696c6f6f 632e676e 49007070     ls/pooling.cpp.I
 23ff4a0:	7475706e 70797420 73252065 20736920     nput type %s is 
 23ff4b0:	20746f6e 72727563 6c746e65 75732079     not currently su
 23ff4c0:	726f7070 00646574 65707954 20732520     pported.Type %s 
 23ff4d0:	20746f6e 72727563 6c746e65 75732079     not currently su
 23ff4e0:	726f7070 2e646574 6f682f00 6e2f656d     pported../home/n
 23ff4f0:	2f6b6369 74666f73 65726177 7369762f     ick/software/vis
 23ff500:	5f6c6175 72656c61 69762f74 6c617573     ual_alert/visual
 23ff510:	656c615f 5f737472 65666e69 636e6572     _alerts_inferenc
 23ff520:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff530:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff540:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff550:	6e72656b 2f736c65 74666f73 5f78616d     kernels/softmax_
 23ff560:	6d6d6f63 632e6e6f 4e007070 6e496d75     common.cpp.NumIn
 23ff570:	73747570 646f6e28 4e002965 69446d75     puts(node).NumDi
 23ff580:	736e656d 736e6f69 706e6928 20297475     mensions(input) 
 23ff590:	31203d3e 646f6e00 753e2d65 5f726573     >= 1.node->user_
 23ff5a0:	61746164 203d2120 6c6c756e 00727470     data != nullptr.
 23ff5b0:	75706e69 743e2d74 20657079 6b203d3d     input->type == k
 23ff5c0:	694c6654 6e496574 7c203874 6e69207c     TfLiteInt8 || in
 23ff5d0:	2d747570 7079743e 3d3d2065 66546b20     put->type == kTf
 23ff5e0:	6574694c 31746e49 332d0036 38363732     LiteInt16.-32768
 23ff5f0:	74756f00 2d747570 7261703e 2e736d61     .output->params.
 23ff600:	6f72657a 696f705f 2500746e 64253a73     zero_point.%s:%d
 23ff610:	20732520 20746f6e 7261656e 20732520      %s not near %s 
 23ff620:	20662528 25203d21 31002966 2f20662e     (%f != %f).1.f /
 23ff630:	35353620 6f003633 75707475 703e2d74      65536.output->p
 23ff640:	6d617261 63732e73 00656c61 4c66546b     arams.scale.kTfL
 23ff650:	49657469 0038746e 3832312d 74756f00     iteInt8.-128.out
 23ff660:	2d747570 7261703e 2e736d61 6c616373     put->params.scal
 23ff670:	3d3d2065 662e3120 32202f20 2f003635     e == 1.f / 256./
 23ff680:	656d6f68 63696e2f 6f732f6b 61777466     home/nick/softwa
 23ff690:	762f6572 61757369 6c615f6c 2f747265     re/visual_alert/
 23ff6a0:	75736976 615f6c61 7472656c 6e695f73     visual_alerts_in
 23ff6b0:	65726566 6e69636e 732f2f67 652f6372     ferencing//src/e
 23ff6c0:	2d656764 75706d69 2d65736c 2f6b6473     dge-impulse-sdk/
 23ff6d0:	736e6574 6c66726f 6c2f776f 2f657469     tensorflow/lite/
 23ff6e0:	6e72656b 2f736c65 6e72656b 755f6c65     kernels/kernel_u
 23ff6f0:	5f6c6974 6574696c 7070632e 706e6900     til_lite.cpp.inp
 23ff700:	705f7475 75646f72 735f7463 656c6163     ut_product_scale
 23ff710:	203d3e20 63730030 5f656c61 66666964      >= 0.scale_diff
 23ff720:	6f202f20 75707475 63735f74 20656c61      / output_scale 
 23ff730:	30203d3c 0032302e 736c6166 546b0065     <= 0.02.false.kT
 23ff740:	74694c66 66664165 51656e69 746e6175     fLiteAffineQuant
 23ff750:	74617a69 006e6f69 75706e69 713e2d74     ization.input->q
 23ff760:	746e6175 74617a69 2e6e6f69 65707974     uantization.type
 23ff770:	6c696600 2d726574 6175713e 7a69746e     .filter->quantiz
 23ff780:	6f697461 79742e6e 61006570 6e696666     ation.type.affin
 23ff790:	75715f65 69746e61 6974617a 61006e6f     e_quantization.a
 23ff7a0:	6e696666 75715f65 69746e61 6974617a     ffine_quantizati
 23ff7b0:	3e2d6e6f 6c616373 69660065 7265746c     on->scale.filter
 23ff7c0:	79743e2d 6e006570 635f6d75 6e6e6168     ->type.num_chann
 23ff7d0:	00736c65 69666661 715f656e 746e6175     els.affine_quant
 23ff7e0:	74617a69 2d6e6f69 6163733e 3e2d656c     ization->scale->
 23ff7f0:	657a6973 6c696600 2d726574 6d69643e     size.filter->dim
 23ff800:	643e2d73 5b617461 69666661 715f656e     s->data[affine_q
 23ff810:	746e6175 74617a69 2d6e6f69 6175713e     uantization->qua
 23ff820:	7a69746e 645f6465 6e656d69 6e6f6973     ntized_dimension
 23ff830:	4646005d 656c2054 6874676e 73756d20     ].FFT length mus
 23ff840:	65622074 65766520 6b000a6e 20737369     t be even..kiss 
 23ff850:	20746666 67617375 72652065 3a726f72     fft usage error:
 23ff860:	706d6920 65706f72 6c612072 0a636f6c      improper alloc.
 23ff870:	00000000                                ....

023ff874 <_ZTV18Microphone_PDM_MCU>:
	...
 23ff87c:	023f6d49 023f6d5d 023f6d25 023f6ec9     Im?.]m?.%m?..n?.
 23ff88c:	023f6d29 023f6ef1 023f6eb3 023f6f01     )m?..n?..n?..o?.
 23ff89c:	023f6f13 023f6f41                       .o?.Ao?.

023ff8a4 <_ZTV14Microphone_PDM>:
	...
 23ff8ac:	023f6d71 023f6d85 023f6d25 023f6d35     qm?..m?.%m?.5m?.
 23ff8bc:	023f6d2f 023f6d39 023f6d3d 023f6d41     /m?.9m?.=m?.Am?.
 23ff8cc:	023f6d45 023f6d99                       Em?..m?.

023ff8d4 <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ff8dc:	023f6eb1 023f6ebb 023f6d25 023f6ec9     .n?..n?.%m?..n?.
 23ff8ec:	023f6d29 023f6ef1 023f6eb3 023f6f01     )m?..n?..n?..o?.
 23ff8fc:	023f6f13 023f6f41                       .o?.Ao?.

023ff904 <_ZTVN5spark12NetworkClassE>:
	...
 23ff90c:	023f76a9 023f76b3 023f76bd 023f76c7     .v?..v?..v?..v?.
 23ff91c:	023f76d1 023f76dd 023f76e9 023f76f1     .v?..v?..v?..v?.
 23ff92c:	023f76f9 023f7705 023f770d 023f7717     .v?..w?..w?..w?.
 23ff93c:	023f7721                                !w?.

023ff940 <_ZTVN5spark9WiFiClassE>:
	...
 23ff948:	023f786b 023f7861 023f7857 023f780d     kx?.ax?.Wx?..x?.
 23ff958:	023f784b 023f783f 023f76e9 023f76f1     Kx?.?x?..v?..v?.
 23ff968:	023f7833 023f782b 023f7821 023f7817     3x?.+x?.!x?..x?.
 23ff978:	023f7721                                !w?.

023ff97c <_ZTV11USARTSerial>:
	...
 23ff984:	023f7889 023f78f5 023f78cd 023f9045     .x?..x?..x?.E.?.
 23ff994:	023f789d 023f78b9 023f78ab 023f78c7     .x?..x?..x?..x?.
 23ff9a4:	023f788b 023f788f 75007525 78343025     .x?..x?.%u.u%04x
 23ff9b4:	00000000                                ....

023ff9b8 <_ZTV9USBSerial>:
	...
 23ff9c0:	023f7d37 023f7d9f 023f7d75 023f9045     7}?..}?.u}?.E.?.
 23ff9d0:	023f7d67 023f7d39 023f7d49 023f7d99     g}?.9}?.I}?..}?.
 23ff9e0:	023f7d59 023f7d31                       Y}?.1}?.

023ff9e8 <_ZTV9IPAddress>:
	...
 23ff9f0:	023f7e51 023f7e41 023f7e43 252d5925     Q~?.A~?.C~?.%Y-%
 23ffa00:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffa10:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ffa20:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffa30:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffa40:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffa50:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffa60:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffa70:	66006e6c 6f63006e 64006564 69617465     ln.fn.code.detai
 23ffa80:	0000006c                                l...

023ffa84 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffa8c:	023f80c5 023f80eb 023f80a9 023f7975     ..?...?...?.uy?.

023ffa9c <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffaa4:	023f859d 023f85b5 023f8cf1 023f8e99     ..?...?...?...?.

023ffab4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffabc:	023f85c9 023f85dd 023f8ed1 023f80b1     ..?...?...?...?.

023ffacc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffad4:	023f80c3 023f80f9 023f8c55 023f80b3     ..?...?.U.?...?.

023ffae4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffaec:	023f80c1 023f8107 023f84e1 023f8129     ..?...?...?.).?.
 23ffafc:	006e616e 00666e69 0066766f              nan.inf.ovf.

023ffb08 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb10:	023f9437 023f942d 023f9423 023f9419     7.?.-.?.#.?...?.
 23ffb20:	023f940d 023f9401 023f76e9 023f76f1     ..?...?..v?..v?.
 23ffb30:	023f93f5 023f93ed 023f93e3 023f93d9     ..?...?...?...?.
 23ffb40:	023f7721                                !w?.

023ffb44 <AUDIO_DEV_TABLE>:
 23ffb44:	40010800 0000000a 0000000b              ...@........

023ffb50 <__FUNCTION__.0>:
 23ffb50:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffb60:	74696e49                                 Init.

023ffb65 <__FUNCTION__.4>:
 23ffb65:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffb73 <_ZSt7nothrow>:
 23ffb73:	746f6e00 6f6e6520 20686775 63617073     .not enough spac
 23ffb83:	6f662065 6f662072 74616d72 70786520     e for format exp
 23ffb93:	69736e61 28206e6f 61656c50 73206573     ansion (Please s
 23ffba3:	696d6275 75662074 62206c6c 72206775     ubmit full bug r
 23ffbb3:	726f7065 74612074 74746820 2f3a7370     eport at https:/
 23ffbc3:	6363672f 756e672e 67726f2e 6775622f     /gcc.gnu.org/bug
 23ffbd3:	3a292f73 2020200a 31300020 35343332     s/):.    .012345
 23ffbe3:	39383736                                 6789.

023ffbe8 <npio2_hw>:
 23ffbe8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffbf8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffc08:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffc18:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffc28:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffc38:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffc48:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffc58:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffc68 <two_over_pi>:
 23ffc68:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffc78:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffc88:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffc98:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffca8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffcb8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffcc8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffcd8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffce8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffcf8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffd08:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffd18:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffd28:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffd38:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffd48:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffd58:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffd68:	0060e27b 00c08c6b                       {.`.k...

023ffd70 <halF>:
 23ffd70:	3f000000 bf000000                       ...?....

023ffd78 <ln2HI>:
 23ffd78:	3f317180 bf317180                       .q1?.q1.

023ffd80 <ln2LO>:
 23ffd80:	3717f7d1 b717f7d1                       ...7....

023ffd88 <PIo2>:
 23ffd88:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffd98:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffda8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffdb8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffdc8 <init_jk>:
 23ffdc8:	00000002 00000003 00000004 00000006     ................
 23ffdd8:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffde8:	64656563 2f006465 2f746e6d 6b726f77     ceeded./mnt/work
 23ffdf8:	63617073 6f772f65 70736b72 2f656361     space/workspace/
 23ffe08:	2d434347 702d3031 6c657069 2f656e69     GCC-10-pipeline/
 23ffe18:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffe28:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffe38:	5f343231 36303631 36303831 732f3134     124_1606180641/s
 23ffe48:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffe58:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
 23ffe68:	00632e64                                d.c.

023ffe6c <_ctype_>:
 23ffe6c:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffe7c:	20202020 20202020 20202020 20202020                     
 23ffe8c:	10108820 10101010 10101010 10101010      ...............
 23ffe9c:	04040410 04040404 10040404 10101010     ................
 23ffeac:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffebc:	01010101 01010101 01010101 10101010     ................
 23ffecc:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffedc:	02020202 02020202 02020202 10101010     ................
 23ffeec:	00000020 00000000 00000000 00000000      ...............
	...

023fff70 <__sf_fake_stderr>:
	...

023fff90 <__sf_fake_stdin>:
	...

023fffb0 <__sf_fake_stdout>:
	...

023fffd0 <link_const_data_end>:
 23fffd0:	023f3b31 	.word	0x023f3b31
 23fffd4:	023f4055 	.word	0x023f4055
 23fffd8:	023f6fb5 	.word	0x023f6fb5
 23fffdc:	023f77f9 	.word	0x023f77f9
 23fffe0:	023f7875 	.word	0x023f7875
 23fffe4:	023f8081 	.word	0x023f8081
 23fffe8:	023f8095 	.word	0x023f8095
 23fffec:	023f8ce1 	.word	0x023f8ce1
 23ffff0:	023f9289 	.word	0x023f9289
 23ffff4:	023f93b5 	.word	0x023f93b5
 23ffff8:	023f9441 	.word	0x023f9441
