
/home/nick/software/visual_alert/visual_alerts_inferencing/target/5.3.1/p2/visual_alerts_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e8000  085e8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085e8018  085e8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e8084  085e8084  00008084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e96c8  085e8090  000096c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   00016924  023e96d0  085e8098  000096d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  7 .data         00000308  10079974  085fe9bc  00029974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bdsram.data  00000800  10079c80  085fecc4  00029c80  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  1007a480  1007a480  0003a480  2**5
                  ALLOC
 10 .secure_ram_text 00000000  1007e000  1007e000  00030000  2**0
                  CONTENTS
 11 .backup       00000004  1007b400  085ff4c4  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .module_info_suffix_align 00000af0  085ff4c8  085ff4c8  0002f4c8  2**0
                  ALLOC
 13 .module_info_product 00000006  085fffb8  085fffb8  0002f4c8  2**0
                  ALLOC
 14 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   00207230  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00023985  00000000  00000000  00237230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000040b8  00000000  00000000  0025abb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00038645  00000000  00000000  0025ec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00082cf8  00000000  00000000  002972b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016016a  00000000  00000000  00319faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0007db3d  00000000  00000000  0047a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00013410  00000000  00000000  004f7c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  0000ce74  00000000  00000000  0050b064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e8018:	480e      	ldr	r0, [pc, #56]	; (85e8054 <module_user_pre_init+0x3c>)
 85e801a:	490f      	ldr	r1, [pc, #60]	; (85e8058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e801e:	4288      	cmp	r0, r1
 85e8020:	d005      	beq.n	85e802e <module_user_pre_init+0x16>
 85e8022:	4a0e      	ldr	r2, [pc, #56]	; (85e805c <module_user_pre_init+0x44>)
 85e8024:	4282      	cmp	r2, r0
 85e8026:	d002      	beq.n	85e802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e8028:	4b0d      	ldr	r3, [pc, #52]	; (85e8060 <module_user_pre_init+0x48>)
 85e802a:	1a12      	subs	r2, r2, r0
 85e802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e802e:	480d      	ldr	r0, [pc, #52]	; (85e8064 <module_user_pre_init+0x4c>)
 85e8030:	4a0d      	ldr	r2, [pc, #52]	; (85e8068 <module_user_pre_init+0x50>)
 85e8032:	2100      	movs	r1, #0
 85e8034:	4b0d      	ldr	r3, [pc, #52]	; (85e806c <module_user_pre_init+0x54>)
 85e8036:	1a12      	subs	r2, r2, r0
 85e8038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e803a:	480d      	ldr	r0, [pc, #52]	; (85e8070 <module_user_pre_init+0x58>)
 85e803c:	490d      	ldr	r1, [pc, #52]	; (85e8074 <module_user_pre_init+0x5c>)
 85e803e:	4288      	cmp	r0, r1
 85e8040:	d005      	beq.n	85e804e <module_user_pre_init+0x36>
 85e8042:	4a0d      	ldr	r2, [pc, #52]	; (85e8078 <module_user_pre_init+0x60>)
 85e8044:	4282      	cmp	r2, r0
 85e8046:	d002      	beq.n	85e804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e8048:	4b05      	ldr	r3, [pc, #20]	; (85e8060 <module_user_pre_init+0x48>)
 85e804a:	1a12      	subs	r2, r2, r0
 85e804c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e804e:	4801      	ldr	r0, [pc, #4]	; (85e8054 <module_user_pre_init+0x3c>)
 85e8050:	bd08      	pop	{r3, pc}
 85e8052:	bf00      	nop
 85e8054:	10079974 	.word	0x10079974
 85e8058:	085fe9bc 	.word	0x085fe9bc
 85e805c:	10079c7c 	.word	0x10079c7c
 85e8060:	10110d2d 	.word	0x10110d2d
 85e8064:	1007a480 	.word	0x1007a480
 85e8068:	1007afe8 	.word	0x1007afe8
 85e806c:	10110ea1 	.word	0x10110ea1
 85e8070:	023e96c8 	.word	0x023e96c8
 85e8074:	085e8090 	.word	0x085e8090
 85e8078:	023ffff4 	.word	0x023ffff4

085e807c <dynalib_preinit>:
 85e807c:	085e8019 00000000                       ..^.....

Disassembly of section .psram_text:

023e96d0 <__aeabi_drsub>:
 23e96d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e96d4:	e002      	b.n	23e96dc <__adddf3>
 23e96d6:	bf00      	nop

023e96d8 <__aeabi_dsub>:
 23e96d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e96dc <__adddf3>:
 23e96dc:	b530      	push	{r4, r5, lr}
 23e96de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e96e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e96e6:	ea94 0f05 	teq	r4, r5
 23e96ea:	bf08      	it	eq
 23e96ec:	ea90 0f02 	teqeq	r0, r2
 23e96f0:	bf1f      	itttt	ne
 23e96f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e96f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e96fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e96fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e9702:	f000 80e2 	beq.w	23e98ca <__adddf3+0x1ee>
 23e9706:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e970a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e970e:	bfb8      	it	lt
 23e9710:	426d      	neglt	r5, r5
 23e9712:	dd0c      	ble.n	23e972e <__adddf3+0x52>
 23e9714:	442c      	add	r4, r5
 23e9716:	ea80 0202 	eor.w	r2, r0, r2
 23e971a:	ea81 0303 	eor.w	r3, r1, r3
 23e971e:	ea82 0000 	eor.w	r0, r2, r0
 23e9722:	ea83 0101 	eor.w	r1, r3, r1
 23e9726:	ea80 0202 	eor.w	r2, r0, r2
 23e972a:	ea81 0303 	eor.w	r3, r1, r3
 23e972e:	2d36      	cmp	r5, #54	; 0x36
 23e9730:	bf88      	it	hi
 23e9732:	bd30      	pophi	{r4, r5, pc}
 23e9734:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e9738:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e973c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e9740:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e9744:	d002      	beq.n	23e974c <__adddf3+0x70>
 23e9746:	4240      	negs	r0, r0
 23e9748:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e974c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e9750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e9754:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e9758:	d002      	beq.n	23e9760 <__adddf3+0x84>
 23e975a:	4252      	negs	r2, r2
 23e975c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e9760:	ea94 0f05 	teq	r4, r5
 23e9764:	f000 80a7 	beq.w	23e98b6 <__adddf3+0x1da>
 23e9768:	f1a4 0401 	sub.w	r4, r4, #1
 23e976c:	f1d5 0e20 	rsbs	lr, r5, #32
 23e9770:	db0d      	blt.n	23e978e <__adddf3+0xb2>
 23e9772:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e9776:	fa22 f205 	lsr.w	r2, r2, r5
 23e977a:	1880      	adds	r0, r0, r2
 23e977c:	f141 0100 	adc.w	r1, r1, #0
 23e9780:	fa03 f20e 	lsl.w	r2, r3, lr
 23e9784:	1880      	adds	r0, r0, r2
 23e9786:	fa43 f305 	asr.w	r3, r3, r5
 23e978a:	4159      	adcs	r1, r3
 23e978c:	e00e      	b.n	23e97ac <__adddf3+0xd0>
 23e978e:	f1a5 0520 	sub.w	r5, r5, #32
 23e9792:	f10e 0e20 	add.w	lr, lr, #32
 23e9796:	2a01      	cmp	r2, #1
 23e9798:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e979c:	bf28      	it	cs
 23e979e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e97a2:	fa43 f305 	asr.w	r3, r3, r5
 23e97a6:	18c0      	adds	r0, r0, r3
 23e97a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e97ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e97b0:	d507      	bpl.n	23e97c2 <__adddf3+0xe6>
 23e97b2:	f04f 0e00 	mov.w	lr, #0
 23e97b6:	f1dc 0c00 	rsbs	ip, ip, #0
 23e97ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e97be:	eb6e 0101 	sbc.w	r1, lr, r1
 23e97c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e97c6:	d31b      	bcc.n	23e9800 <__adddf3+0x124>
 23e97c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e97cc:	d30c      	bcc.n	23e97e8 <__adddf3+0x10c>
 23e97ce:	0849      	lsrs	r1, r1, #1
 23e97d0:	ea5f 0030 	movs.w	r0, r0, rrx
 23e97d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e97d8:	f104 0401 	add.w	r4, r4, #1
 23e97dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e97e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e97e4:	f080 809a 	bcs.w	23e991c <__adddf3+0x240>
 23e97e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e97ec:	bf08      	it	eq
 23e97ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e97f2:	f150 0000 	adcs.w	r0, r0, #0
 23e97f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e97fa:	ea41 0105 	orr.w	r1, r1, r5
 23e97fe:	bd30      	pop	{r4, r5, pc}
 23e9800:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e9804:	4140      	adcs	r0, r0
 23e9806:	eb41 0101 	adc.w	r1, r1, r1
 23e980a:	3c01      	subs	r4, #1
 23e980c:	bf28      	it	cs
 23e980e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e9812:	d2e9      	bcs.n	23e97e8 <__adddf3+0x10c>
 23e9814:	f091 0f00 	teq	r1, #0
 23e9818:	bf04      	itt	eq
 23e981a:	4601      	moveq	r1, r0
 23e981c:	2000      	moveq	r0, #0
 23e981e:	fab1 f381 	clz	r3, r1
 23e9822:	bf08      	it	eq
 23e9824:	3320      	addeq	r3, #32
 23e9826:	f1a3 030b 	sub.w	r3, r3, #11
 23e982a:	f1b3 0220 	subs.w	r2, r3, #32
 23e982e:	da0c      	bge.n	23e984a <__adddf3+0x16e>
 23e9830:	320c      	adds	r2, #12
 23e9832:	dd08      	ble.n	23e9846 <__adddf3+0x16a>
 23e9834:	f102 0c14 	add.w	ip, r2, #20
 23e9838:	f1c2 020c 	rsb	r2, r2, #12
 23e983c:	fa01 f00c 	lsl.w	r0, r1, ip
 23e9840:	fa21 f102 	lsr.w	r1, r1, r2
 23e9844:	e00c      	b.n	23e9860 <__adddf3+0x184>
 23e9846:	f102 0214 	add.w	r2, r2, #20
 23e984a:	bfd8      	it	le
 23e984c:	f1c2 0c20 	rsble	ip, r2, #32
 23e9850:	fa01 f102 	lsl.w	r1, r1, r2
 23e9854:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e9858:	bfdc      	itt	le
 23e985a:	ea41 010c 	orrle.w	r1, r1, ip
 23e985e:	4090      	lslle	r0, r2
 23e9860:	1ae4      	subs	r4, r4, r3
 23e9862:	bfa2      	ittt	ge
 23e9864:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e9868:	4329      	orrge	r1, r5
 23e986a:	bd30      	popge	{r4, r5, pc}
 23e986c:	ea6f 0404 	mvn.w	r4, r4
 23e9870:	3c1f      	subs	r4, #31
 23e9872:	da1c      	bge.n	23e98ae <__adddf3+0x1d2>
 23e9874:	340c      	adds	r4, #12
 23e9876:	dc0e      	bgt.n	23e9896 <__adddf3+0x1ba>
 23e9878:	f104 0414 	add.w	r4, r4, #20
 23e987c:	f1c4 0220 	rsb	r2, r4, #32
 23e9880:	fa20 f004 	lsr.w	r0, r0, r4
 23e9884:	fa01 f302 	lsl.w	r3, r1, r2
 23e9888:	ea40 0003 	orr.w	r0, r0, r3
 23e988c:	fa21 f304 	lsr.w	r3, r1, r4
 23e9890:	ea45 0103 	orr.w	r1, r5, r3
 23e9894:	bd30      	pop	{r4, r5, pc}
 23e9896:	f1c4 040c 	rsb	r4, r4, #12
 23e989a:	f1c4 0220 	rsb	r2, r4, #32
 23e989e:	fa20 f002 	lsr.w	r0, r0, r2
 23e98a2:	fa01 f304 	lsl.w	r3, r1, r4
 23e98a6:	ea40 0003 	orr.w	r0, r0, r3
 23e98aa:	4629      	mov	r1, r5
 23e98ac:	bd30      	pop	{r4, r5, pc}
 23e98ae:	fa21 f004 	lsr.w	r0, r1, r4
 23e98b2:	4629      	mov	r1, r5
 23e98b4:	bd30      	pop	{r4, r5, pc}
 23e98b6:	f094 0f00 	teq	r4, #0
 23e98ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e98be:	bf06      	itte	eq
 23e98c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e98c4:	3401      	addeq	r4, #1
 23e98c6:	3d01      	subne	r5, #1
 23e98c8:	e74e      	b.n	23e9768 <__adddf3+0x8c>
 23e98ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e98ce:	bf18      	it	ne
 23e98d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e98d4:	d029      	beq.n	23e992a <__adddf3+0x24e>
 23e98d6:	ea94 0f05 	teq	r4, r5
 23e98da:	bf08      	it	eq
 23e98dc:	ea90 0f02 	teqeq	r0, r2
 23e98e0:	d005      	beq.n	23e98ee <__adddf3+0x212>
 23e98e2:	ea54 0c00 	orrs.w	ip, r4, r0
 23e98e6:	bf04      	itt	eq
 23e98e8:	4619      	moveq	r1, r3
 23e98ea:	4610      	moveq	r0, r2
 23e98ec:	bd30      	pop	{r4, r5, pc}
 23e98ee:	ea91 0f03 	teq	r1, r3
 23e98f2:	bf1e      	ittt	ne
 23e98f4:	2100      	movne	r1, #0
 23e98f6:	2000      	movne	r0, #0
 23e98f8:	bd30      	popne	{r4, r5, pc}
 23e98fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e98fe:	d105      	bne.n	23e990c <__adddf3+0x230>
 23e9900:	0040      	lsls	r0, r0, #1
 23e9902:	4149      	adcs	r1, r1
 23e9904:	bf28      	it	cs
 23e9906:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e990a:	bd30      	pop	{r4, r5, pc}
 23e990c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e9910:	bf3c      	itt	cc
 23e9912:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e9916:	bd30      	popcc	{r4, r5, pc}
 23e9918:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e991c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e9920:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e9924:	f04f 0000 	mov.w	r0, #0
 23e9928:	bd30      	pop	{r4, r5, pc}
 23e992a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e992e:	bf1a      	itte	ne
 23e9930:	4619      	movne	r1, r3
 23e9932:	4610      	movne	r0, r2
 23e9934:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e9938:	bf1c      	itt	ne
 23e993a:	460b      	movne	r3, r1
 23e993c:	4602      	movne	r2, r0
 23e993e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e9942:	bf06      	itte	eq
 23e9944:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e9948:	ea91 0f03 	teqeq	r1, r3
 23e994c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e9950:	bd30      	pop	{r4, r5, pc}
 23e9952:	bf00      	nop

023e9954 <__aeabi_ui2d>:
 23e9954:	f090 0f00 	teq	r0, #0
 23e9958:	bf04      	itt	eq
 23e995a:	2100      	moveq	r1, #0
 23e995c:	4770      	bxeq	lr
 23e995e:	b530      	push	{r4, r5, lr}
 23e9960:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e9964:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e9968:	f04f 0500 	mov.w	r5, #0
 23e996c:	f04f 0100 	mov.w	r1, #0
 23e9970:	e750      	b.n	23e9814 <__adddf3+0x138>
 23e9972:	bf00      	nop

023e9974 <__aeabi_i2d>:
 23e9974:	f090 0f00 	teq	r0, #0
 23e9978:	bf04      	itt	eq
 23e997a:	2100      	moveq	r1, #0
 23e997c:	4770      	bxeq	lr
 23e997e:	b530      	push	{r4, r5, lr}
 23e9980:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e9984:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e9988:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e998c:	bf48      	it	mi
 23e998e:	4240      	negmi	r0, r0
 23e9990:	f04f 0100 	mov.w	r1, #0
 23e9994:	e73e      	b.n	23e9814 <__adddf3+0x138>
 23e9996:	bf00      	nop

023e9998 <__aeabi_f2d>:
 23e9998:	0042      	lsls	r2, r0, #1
 23e999a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e999e:	ea4f 0131 	mov.w	r1, r1, rrx
 23e99a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e99a6:	bf1f      	itttt	ne
 23e99a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e99ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e99b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e99b4:	4770      	bxne	lr
 23e99b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e99ba:	bf08      	it	eq
 23e99bc:	4770      	bxeq	lr
 23e99be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e99c2:	bf04      	itt	eq
 23e99c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e99c8:	4770      	bxeq	lr
 23e99ca:	b530      	push	{r4, r5, lr}
 23e99cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e99d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e99d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e99d8:	e71c      	b.n	23e9814 <__adddf3+0x138>
 23e99da:	bf00      	nop

023e99dc <__aeabi_ul2d>:
 23e99dc:	ea50 0201 	orrs.w	r2, r0, r1
 23e99e0:	bf08      	it	eq
 23e99e2:	4770      	bxeq	lr
 23e99e4:	b530      	push	{r4, r5, lr}
 23e99e6:	f04f 0500 	mov.w	r5, #0
 23e99ea:	e00a      	b.n	23e9a02 <__aeabi_l2d+0x16>

023e99ec <__aeabi_l2d>:
 23e99ec:	ea50 0201 	orrs.w	r2, r0, r1
 23e99f0:	bf08      	it	eq
 23e99f2:	4770      	bxeq	lr
 23e99f4:	b530      	push	{r4, r5, lr}
 23e99f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e99fa:	d502      	bpl.n	23e9a02 <__aeabi_l2d+0x16>
 23e99fc:	4240      	negs	r0, r0
 23e99fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e9a02:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e9a06:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e9a0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e9a0e:	f43f aed8 	beq.w	23e97c2 <__adddf3+0xe6>
 23e9a12:	f04f 0203 	mov.w	r2, #3
 23e9a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e9a1a:	bf18      	it	ne
 23e9a1c:	3203      	addne	r2, #3
 23e9a1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e9a22:	bf18      	it	ne
 23e9a24:	3203      	addne	r2, #3
 23e9a26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e9a2a:	f1c2 0320 	rsb	r3, r2, #32
 23e9a2e:	fa00 fc03 	lsl.w	ip, r0, r3
 23e9a32:	fa20 f002 	lsr.w	r0, r0, r2
 23e9a36:	fa01 fe03 	lsl.w	lr, r1, r3
 23e9a3a:	ea40 000e 	orr.w	r0, r0, lr
 23e9a3e:	fa21 f102 	lsr.w	r1, r1, r2
 23e9a42:	4414      	add	r4, r2
 23e9a44:	e6bd      	b.n	23e97c2 <__adddf3+0xe6>
 23e9a46:	bf00      	nop

023e9a48 <__aeabi_dmul>:
 23e9a48:	b570      	push	{r4, r5, r6, lr}
 23e9a4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e9a4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e9a52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e9a56:	bf1d      	ittte	ne
 23e9a58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e9a5c:	ea94 0f0c 	teqne	r4, ip
 23e9a60:	ea95 0f0c 	teqne	r5, ip
 23e9a64:	f000 f8de 	bleq	23e9c24 <__aeabi_dmul+0x1dc>
 23e9a68:	442c      	add	r4, r5
 23e9a6a:	ea81 0603 	eor.w	r6, r1, r3
 23e9a6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e9a72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e9a76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e9a7a:	bf18      	it	ne
 23e9a7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e9a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e9a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e9a88:	d038      	beq.n	23e9afc <__aeabi_dmul+0xb4>
 23e9a8a:	fba0 ce02 	umull	ip, lr, r0, r2
 23e9a8e:	f04f 0500 	mov.w	r5, #0
 23e9a92:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e9a96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e9a9a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e9a9e:	f04f 0600 	mov.w	r6, #0
 23e9aa2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e9aa6:	f09c 0f00 	teq	ip, #0
 23e9aaa:	bf18      	it	ne
 23e9aac:	f04e 0e01 	orrne.w	lr, lr, #1
 23e9ab0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e9ab4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e9ab8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e9abc:	d204      	bcs.n	23e9ac8 <__aeabi_dmul+0x80>
 23e9abe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e9ac2:	416d      	adcs	r5, r5
 23e9ac4:	eb46 0606 	adc.w	r6, r6, r6
 23e9ac8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e9acc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e9ad0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e9ad4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e9ad8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e9adc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e9ae0:	bf88      	it	hi
 23e9ae2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e9ae6:	d81e      	bhi.n	23e9b26 <__aeabi_dmul+0xde>
 23e9ae8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e9aec:	bf08      	it	eq
 23e9aee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e9af2:	f150 0000 	adcs.w	r0, r0, #0
 23e9af6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e9afa:	bd70      	pop	{r4, r5, r6, pc}
 23e9afc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e9b00:	ea46 0101 	orr.w	r1, r6, r1
 23e9b04:	ea40 0002 	orr.w	r0, r0, r2
 23e9b08:	ea81 0103 	eor.w	r1, r1, r3
 23e9b0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e9b10:	bfc2      	ittt	gt
 23e9b12:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e9b16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e9b1a:	bd70      	popgt	{r4, r5, r6, pc}
 23e9b1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e9b20:	f04f 0e00 	mov.w	lr, #0
 23e9b24:	3c01      	subs	r4, #1
 23e9b26:	f300 80ab 	bgt.w	23e9c80 <__aeabi_dmul+0x238>
 23e9b2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e9b2e:	bfde      	ittt	le
 23e9b30:	2000      	movle	r0, #0
 23e9b32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e9b36:	bd70      	pople	{r4, r5, r6, pc}
 23e9b38:	f1c4 0400 	rsb	r4, r4, #0
 23e9b3c:	3c20      	subs	r4, #32
 23e9b3e:	da35      	bge.n	23e9bac <__aeabi_dmul+0x164>
 23e9b40:	340c      	adds	r4, #12
 23e9b42:	dc1b      	bgt.n	23e9b7c <__aeabi_dmul+0x134>
 23e9b44:	f104 0414 	add.w	r4, r4, #20
 23e9b48:	f1c4 0520 	rsb	r5, r4, #32
 23e9b4c:	fa00 f305 	lsl.w	r3, r0, r5
 23e9b50:	fa20 f004 	lsr.w	r0, r0, r4
 23e9b54:	fa01 f205 	lsl.w	r2, r1, r5
 23e9b58:	ea40 0002 	orr.w	r0, r0, r2
 23e9b5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e9b60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e9b64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e9b68:	fa21 f604 	lsr.w	r6, r1, r4
 23e9b6c:	eb42 0106 	adc.w	r1, r2, r6
 23e9b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e9b74:	bf08      	it	eq
 23e9b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e9b7a:	bd70      	pop	{r4, r5, r6, pc}
 23e9b7c:	f1c4 040c 	rsb	r4, r4, #12
 23e9b80:	f1c4 0520 	rsb	r5, r4, #32
 23e9b84:	fa00 f304 	lsl.w	r3, r0, r4
 23e9b88:	fa20 f005 	lsr.w	r0, r0, r5
 23e9b8c:	fa01 f204 	lsl.w	r2, r1, r4
 23e9b90:	ea40 0002 	orr.w	r0, r0, r2
 23e9b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e9b98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e9b9c:	f141 0100 	adc.w	r1, r1, #0
 23e9ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e9ba4:	bf08      	it	eq
 23e9ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e9baa:	bd70      	pop	{r4, r5, r6, pc}
 23e9bac:	f1c4 0520 	rsb	r5, r4, #32
 23e9bb0:	fa00 f205 	lsl.w	r2, r0, r5
 23e9bb4:	ea4e 0e02 	orr.w	lr, lr, r2
 23e9bb8:	fa20 f304 	lsr.w	r3, r0, r4
 23e9bbc:	fa01 f205 	lsl.w	r2, r1, r5
 23e9bc0:	ea43 0302 	orr.w	r3, r3, r2
 23e9bc4:	fa21 f004 	lsr.w	r0, r1, r4
 23e9bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e9bcc:	fa21 f204 	lsr.w	r2, r1, r4
 23e9bd0:	ea20 0002 	bic.w	r0, r0, r2
 23e9bd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e9bd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e9bdc:	bf08      	it	eq
 23e9bde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e9be2:	bd70      	pop	{r4, r5, r6, pc}
 23e9be4:	f094 0f00 	teq	r4, #0
 23e9be8:	d10f      	bne.n	23e9c0a <__aeabi_dmul+0x1c2>
 23e9bea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e9bee:	0040      	lsls	r0, r0, #1
 23e9bf0:	eb41 0101 	adc.w	r1, r1, r1
 23e9bf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e9bf8:	bf08      	it	eq
 23e9bfa:	3c01      	subeq	r4, #1
 23e9bfc:	d0f7      	beq.n	23e9bee <__aeabi_dmul+0x1a6>
 23e9bfe:	ea41 0106 	orr.w	r1, r1, r6
 23e9c02:	f095 0f00 	teq	r5, #0
 23e9c06:	bf18      	it	ne
 23e9c08:	4770      	bxne	lr
 23e9c0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e9c0e:	0052      	lsls	r2, r2, #1
 23e9c10:	eb43 0303 	adc.w	r3, r3, r3
 23e9c14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e9c18:	bf08      	it	eq
 23e9c1a:	3d01      	subeq	r5, #1
 23e9c1c:	d0f7      	beq.n	23e9c0e <__aeabi_dmul+0x1c6>
 23e9c1e:	ea43 0306 	orr.w	r3, r3, r6
 23e9c22:	4770      	bx	lr
 23e9c24:	ea94 0f0c 	teq	r4, ip
 23e9c28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e9c2c:	bf18      	it	ne
 23e9c2e:	ea95 0f0c 	teqne	r5, ip
 23e9c32:	d00c      	beq.n	23e9c4e <__aeabi_dmul+0x206>
 23e9c34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e9c38:	bf18      	it	ne
 23e9c3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e9c3e:	d1d1      	bne.n	23e9be4 <__aeabi_dmul+0x19c>
 23e9c40:	ea81 0103 	eor.w	r1, r1, r3
 23e9c44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e9c48:	f04f 0000 	mov.w	r0, #0
 23e9c4c:	bd70      	pop	{r4, r5, r6, pc}
 23e9c4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e9c52:	bf06      	itte	eq
 23e9c54:	4610      	moveq	r0, r2
 23e9c56:	4619      	moveq	r1, r3
 23e9c58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e9c5c:	d019      	beq.n	23e9c92 <__aeabi_dmul+0x24a>
 23e9c5e:	ea94 0f0c 	teq	r4, ip
 23e9c62:	d102      	bne.n	23e9c6a <__aeabi_dmul+0x222>
 23e9c64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e9c68:	d113      	bne.n	23e9c92 <__aeabi_dmul+0x24a>
 23e9c6a:	ea95 0f0c 	teq	r5, ip
 23e9c6e:	d105      	bne.n	23e9c7c <__aeabi_dmul+0x234>
 23e9c70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e9c74:	bf1c      	itt	ne
 23e9c76:	4610      	movne	r0, r2
 23e9c78:	4619      	movne	r1, r3
 23e9c7a:	d10a      	bne.n	23e9c92 <__aeabi_dmul+0x24a>
 23e9c7c:	ea81 0103 	eor.w	r1, r1, r3
 23e9c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e9c84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e9c88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e9c8c:	f04f 0000 	mov.w	r0, #0
 23e9c90:	bd70      	pop	{r4, r5, r6, pc}
 23e9c92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e9c96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e9c9a:	bd70      	pop	{r4, r5, r6, pc}

023e9c9c <__aeabi_ddiv>:
 23e9c9c:	b570      	push	{r4, r5, r6, lr}
 23e9c9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e9ca2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e9ca6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e9caa:	bf1d      	ittte	ne
 23e9cac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e9cb0:	ea94 0f0c 	teqne	r4, ip
 23e9cb4:	ea95 0f0c 	teqne	r5, ip
 23e9cb8:	f000 f8a7 	bleq	23e9e0a <__aeabi_ddiv+0x16e>
 23e9cbc:	eba4 0405 	sub.w	r4, r4, r5
 23e9cc0:	ea81 0e03 	eor.w	lr, r1, r3
 23e9cc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e9cc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e9ccc:	f000 8088 	beq.w	23e9de0 <__aeabi_ddiv+0x144>
 23e9cd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e9cd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e9cd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e9cdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e9ce0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e9ce4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e9ce8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e9cec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e9cf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e9cf4:	429d      	cmp	r5, r3
 23e9cf6:	bf08      	it	eq
 23e9cf8:	4296      	cmpeq	r6, r2
 23e9cfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e9cfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e9d02:	d202      	bcs.n	23e9d0a <__aeabi_ddiv+0x6e>
 23e9d04:	085b      	lsrs	r3, r3, #1
 23e9d06:	ea4f 0232 	mov.w	r2, r2, rrx
 23e9d0a:	1ab6      	subs	r6, r6, r2
 23e9d0c:	eb65 0503 	sbc.w	r5, r5, r3
 23e9d10:	085b      	lsrs	r3, r3, #1
 23e9d12:	ea4f 0232 	mov.w	r2, r2, rrx
 23e9d16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e9d1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e9d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e9d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e9d26:	bf22      	ittt	cs
 23e9d28:	1ab6      	subcs	r6, r6, r2
 23e9d2a:	4675      	movcs	r5, lr
 23e9d2c:	ea40 000c 	orrcs.w	r0, r0, ip
 23e9d30:	085b      	lsrs	r3, r3, #1
 23e9d32:	ea4f 0232 	mov.w	r2, r2, rrx
 23e9d36:	ebb6 0e02 	subs.w	lr, r6, r2
 23e9d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e9d3e:	bf22      	ittt	cs
 23e9d40:	1ab6      	subcs	r6, r6, r2
 23e9d42:	4675      	movcs	r5, lr
 23e9d44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e9d48:	085b      	lsrs	r3, r3, #1
 23e9d4a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e9d4e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e9d52:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e9d56:	bf22      	ittt	cs
 23e9d58:	1ab6      	subcs	r6, r6, r2
 23e9d5a:	4675      	movcs	r5, lr
 23e9d5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e9d60:	085b      	lsrs	r3, r3, #1
 23e9d62:	ea4f 0232 	mov.w	r2, r2, rrx
 23e9d66:	ebb6 0e02 	subs.w	lr, r6, r2
 23e9d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e9d6e:	bf22      	ittt	cs
 23e9d70:	1ab6      	subcs	r6, r6, r2
 23e9d72:	4675      	movcs	r5, lr
 23e9d74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e9d78:	ea55 0e06 	orrs.w	lr, r5, r6
 23e9d7c:	d018      	beq.n	23e9db0 <__aeabi_ddiv+0x114>
 23e9d7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e9d82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e9d86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e9d8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e9d8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e9d92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e9d96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e9d9a:	d1c0      	bne.n	23e9d1e <__aeabi_ddiv+0x82>
 23e9d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e9da0:	d10b      	bne.n	23e9dba <__aeabi_ddiv+0x11e>
 23e9da2:	ea41 0100 	orr.w	r1, r1, r0
 23e9da6:	f04f 0000 	mov.w	r0, #0
 23e9daa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e9dae:	e7b6      	b.n	23e9d1e <__aeabi_ddiv+0x82>
 23e9db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e9db4:	bf04      	itt	eq
 23e9db6:	4301      	orreq	r1, r0
 23e9db8:	2000      	moveq	r0, #0
 23e9dba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e9dbe:	bf88      	it	hi
 23e9dc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e9dc4:	f63f aeaf 	bhi.w	23e9b26 <__aeabi_dmul+0xde>
 23e9dc8:	ebb5 0c03 	subs.w	ip, r5, r3
 23e9dcc:	bf04      	itt	eq
 23e9dce:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e9dd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e9dd6:	f150 0000 	adcs.w	r0, r0, #0
 23e9dda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e9dde:	bd70      	pop	{r4, r5, r6, pc}
 23e9de0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e9de4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e9de8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e9dec:	bfc2      	ittt	gt
 23e9dee:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e9df2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e9df6:	bd70      	popgt	{r4, r5, r6, pc}
 23e9df8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e9dfc:	f04f 0e00 	mov.w	lr, #0
 23e9e00:	3c01      	subs	r4, #1
 23e9e02:	e690      	b.n	23e9b26 <__aeabi_dmul+0xde>
 23e9e04:	ea45 0e06 	orr.w	lr, r5, r6
 23e9e08:	e68d      	b.n	23e9b26 <__aeabi_dmul+0xde>
 23e9e0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e9e0e:	ea94 0f0c 	teq	r4, ip
 23e9e12:	bf08      	it	eq
 23e9e14:	ea95 0f0c 	teqeq	r5, ip
 23e9e18:	f43f af3b 	beq.w	23e9c92 <__aeabi_dmul+0x24a>
 23e9e1c:	ea94 0f0c 	teq	r4, ip
 23e9e20:	d10a      	bne.n	23e9e38 <__aeabi_ddiv+0x19c>
 23e9e22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e9e26:	f47f af34 	bne.w	23e9c92 <__aeabi_dmul+0x24a>
 23e9e2a:	ea95 0f0c 	teq	r5, ip
 23e9e2e:	f47f af25 	bne.w	23e9c7c <__aeabi_dmul+0x234>
 23e9e32:	4610      	mov	r0, r2
 23e9e34:	4619      	mov	r1, r3
 23e9e36:	e72c      	b.n	23e9c92 <__aeabi_dmul+0x24a>
 23e9e38:	ea95 0f0c 	teq	r5, ip
 23e9e3c:	d106      	bne.n	23e9e4c <__aeabi_ddiv+0x1b0>
 23e9e3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e9e42:	f43f aefd 	beq.w	23e9c40 <__aeabi_dmul+0x1f8>
 23e9e46:	4610      	mov	r0, r2
 23e9e48:	4619      	mov	r1, r3
 23e9e4a:	e722      	b.n	23e9c92 <__aeabi_dmul+0x24a>
 23e9e4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e9e50:	bf18      	it	ne
 23e9e52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e9e56:	f47f aec5 	bne.w	23e9be4 <__aeabi_dmul+0x19c>
 23e9e5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e9e5e:	f47f af0d 	bne.w	23e9c7c <__aeabi_dmul+0x234>
 23e9e62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e9e66:	f47f aeeb 	bne.w	23e9c40 <__aeabi_dmul+0x1f8>
 23e9e6a:	e712      	b.n	23e9c92 <__aeabi_dmul+0x24a>

023e9e6c <__gedf2>:
 23e9e6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e9e70:	e006      	b.n	23e9e80 <__cmpdf2+0x4>
 23e9e72:	bf00      	nop

023e9e74 <__ledf2>:
 23e9e74:	f04f 0c01 	mov.w	ip, #1
 23e9e78:	e002      	b.n	23e9e80 <__cmpdf2+0x4>
 23e9e7a:	bf00      	nop

023e9e7c <__cmpdf2>:
 23e9e7c:	f04f 0c01 	mov.w	ip, #1
 23e9e80:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e9e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e9e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e9e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e9e90:	bf18      	it	ne
 23e9e92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e9e96:	d01b      	beq.n	23e9ed0 <__cmpdf2+0x54>
 23e9e98:	b001      	add	sp, #4
 23e9e9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e9e9e:	bf0c      	ite	eq
 23e9ea0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e9ea4:	ea91 0f03 	teqne	r1, r3
 23e9ea8:	bf02      	ittt	eq
 23e9eaa:	ea90 0f02 	teqeq	r0, r2
 23e9eae:	2000      	moveq	r0, #0
 23e9eb0:	4770      	bxeq	lr
 23e9eb2:	f110 0f00 	cmn.w	r0, #0
 23e9eb6:	ea91 0f03 	teq	r1, r3
 23e9eba:	bf58      	it	pl
 23e9ebc:	4299      	cmppl	r1, r3
 23e9ebe:	bf08      	it	eq
 23e9ec0:	4290      	cmpeq	r0, r2
 23e9ec2:	bf2c      	ite	cs
 23e9ec4:	17d8      	asrcs	r0, r3, #31
 23e9ec6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e9eca:	f040 0001 	orr.w	r0, r0, #1
 23e9ece:	4770      	bx	lr
 23e9ed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e9ed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e9ed8:	d102      	bne.n	23e9ee0 <__cmpdf2+0x64>
 23e9eda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e9ede:	d107      	bne.n	23e9ef0 <__cmpdf2+0x74>
 23e9ee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e9ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e9ee8:	d1d6      	bne.n	23e9e98 <__cmpdf2+0x1c>
 23e9eea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e9eee:	d0d3      	beq.n	23e9e98 <__cmpdf2+0x1c>
 23e9ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e9ef4:	4770      	bx	lr
 23e9ef6:	bf00      	nop

023e9ef8 <__aeabi_cdrcmple>:
 23e9ef8:	4684      	mov	ip, r0
 23e9efa:	4610      	mov	r0, r2
 23e9efc:	4662      	mov	r2, ip
 23e9efe:	468c      	mov	ip, r1
 23e9f00:	4619      	mov	r1, r3
 23e9f02:	4663      	mov	r3, ip
 23e9f04:	e000      	b.n	23e9f08 <__aeabi_cdcmpeq>
 23e9f06:	bf00      	nop

023e9f08 <__aeabi_cdcmpeq>:
 23e9f08:	b501      	push	{r0, lr}
 23e9f0a:	f7ff ffb7 	bl	23e9e7c <__cmpdf2>
 23e9f0e:	2800      	cmp	r0, #0
 23e9f10:	bf48      	it	mi
 23e9f12:	f110 0f00 	cmnmi.w	r0, #0
 23e9f16:	bd01      	pop	{r0, pc}

023e9f18 <__aeabi_dcmpeq>:
 23e9f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e9f1c:	f7ff fff4 	bl	23e9f08 <__aeabi_cdcmpeq>
 23e9f20:	bf0c      	ite	eq
 23e9f22:	2001      	moveq	r0, #1
 23e9f24:	2000      	movne	r0, #0
 23e9f26:	f85d fb08 	ldr.w	pc, [sp], #8
 23e9f2a:	bf00      	nop

023e9f2c <__aeabi_dcmplt>:
 23e9f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e9f30:	f7ff ffea 	bl	23e9f08 <__aeabi_cdcmpeq>
 23e9f34:	bf34      	ite	cc
 23e9f36:	2001      	movcc	r0, #1
 23e9f38:	2000      	movcs	r0, #0
 23e9f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e9f3e:	bf00      	nop

023e9f40 <__aeabi_dcmple>:
 23e9f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e9f44:	f7ff ffe0 	bl	23e9f08 <__aeabi_cdcmpeq>
 23e9f48:	bf94      	ite	ls
 23e9f4a:	2001      	movls	r0, #1
 23e9f4c:	2000      	movhi	r0, #0
 23e9f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e9f52:	bf00      	nop

023e9f54 <__aeabi_dcmpge>:
 23e9f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e9f58:	f7ff ffce 	bl	23e9ef8 <__aeabi_cdrcmple>
 23e9f5c:	bf94      	ite	ls
 23e9f5e:	2001      	movls	r0, #1
 23e9f60:	2000      	movhi	r0, #0
 23e9f62:	f85d fb08 	ldr.w	pc, [sp], #8
 23e9f66:	bf00      	nop

023e9f68 <__aeabi_dcmpgt>:
 23e9f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e9f6c:	f7ff ffc4 	bl	23e9ef8 <__aeabi_cdrcmple>
 23e9f70:	bf34      	ite	cc
 23e9f72:	2001      	movcc	r0, #1
 23e9f74:	2000      	movcs	r0, #0
 23e9f76:	f85d fb08 	ldr.w	pc, [sp], #8
 23e9f7a:	bf00      	nop

023e9f7c <__aeabi_dcmpun>:
 23e9f7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e9f80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e9f84:	d102      	bne.n	23e9f8c <__aeabi_dcmpun+0x10>
 23e9f86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e9f8a:	d10a      	bne.n	23e9fa2 <__aeabi_dcmpun+0x26>
 23e9f8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e9f90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e9f94:	d102      	bne.n	23e9f9c <__aeabi_dcmpun+0x20>
 23e9f96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e9f9a:	d102      	bne.n	23e9fa2 <__aeabi_dcmpun+0x26>
 23e9f9c:	f04f 0000 	mov.w	r0, #0
 23e9fa0:	4770      	bx	lr
 23e9fa2:	f04f 0001 	mov.w	r0, #1
 23e9fa6:	4770      	bx	lr

023e9fa8 <__aeabi_d2iz>:
 23e9fa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e9fac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e9fb0:	d215      	bcs.n	23e9fde <__aeabi_d2iz+0x36>
 23e9fb2:	d511      	bpl.n	23e9fd8 <__aeabi_d2iz+0x30>
 23e9fb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e9fb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e9fbc:	d912      	bls.n	23e9fe4 <__aeabi_d2iz+0x3c>
 23e9fbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e9fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e9fc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e9fca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e9fce:	fa23 f002 	lsr.w	r0, r3, r2
 23e9fd2:	bf18      	it	ne
 23e9fd4:	4240      	negne	r0, r0
 23e9fd6:	4770      	bx	lr
 23e9fd8:	f04f 0000 	mov.w	r0, #0
 23e9fdc:	4770      	bx	lr
 23e9fde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e9fe2:	d105      	bne.n	23e9ff0 <__aeabi_d2iz+0x48>
 23e9fe4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e9fe8:	bf08      	it	eq
 23e9fea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e9fee:	4770      	bx	lr
 23e9ff0:	f04f 0000 	mov.w	r0, #0
 23e9ff4:	4770      	bx	lr
 23e9ff6:	bf00      	nop

023e9ff8 <__aeabi_d2uiz>:
 23e9ff8:	004a      	lsls	r2, r1, #1
 23e9ffa:	d211      	bcs.n	23ea020 <__aeabi_d2uiz+0x28>
 23e9ffc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23ea000:	d211      	bcs.n	23ea026 <__aeabi_d2uiz+0x2e>
 23ea002:	d50d      	bpl.n	23ea020 <__aeabi_d2uiz+0x28>
 23ea004:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23ea008:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23ea00c:	d40e      	bmi.n	23ea02c <__aeabi_d2uiz+0x34>
 23ea00e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ea012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23ea016:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23ea01a:	fa23 f002 	lsr.w	r0, r3, r2
 23ea01e:	4770      	bx	lr
 23ea020:	f04f 0000 	mov.w	r0, #0
 23ea024:	4770      	bx	lr
 23ea026:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23ea02a:	d102      	bne.n	23ea032 <__aeabi_d2uiz+0x3a>
 23ea02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ea030:	4770      	bx	lr
 23ea032:	f04f 0000 	mov.w	r0, #0
 23ea036:	4770      	bx	lr

023ea038 <__aeabi_d2f>:
 23ea038:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23ea03c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23ea040:	bf24      	itt	cs
 23ea042:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23ea046:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23ea04a:	d90d      	bls.n	23ea068 <__aeabi_d2f+0x30>
 23ea04c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23ea050:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23ea054:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23ea058:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23ea05c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23ea060:	bf08      	it	eq
 23ea062:	f020 0001 	biceq.w	r0, r0, #1
 23ea066:	4770      	bx	lr
 23ea068:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23ea06c:	d121      	bne.n	23ea0b2 <__aeabi_d2f+0x7a>
 23ea06e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23ea072:	bfbc      	itt	lt
 23ea074:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23ea078:	4770      	bxlt	lr
 23ea07a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23ea07e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23ea082:	f1c2 0218 	rsb	r2, r2, #24
 23ea086:	f1c2 0c20 	rsb	ip, r2, #32
 23ea08a:	fa10 f30c 	lsls.w	r3, r0, ip
 23ea08e:	fa20 f002 	lsr.w	r0, r0, r2
 23ea092:	bf18      	it	ne
 23ea094:	f040 0001 	orrne.w	r0, r0, #1
 23ea098:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23ea09c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23ea0a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 23ea0a4:	ea40 000c 	orr.w	r0, r0, ip
 23ea0a8:	fa23 f302 	lsr.w	r3, r3, r2
 23ea0ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ea0b0:	e7cc      	b.n	23ea04c <__aeabi_d2f+0x14>
 23ea0b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23ea0b6:	d107      	bne.n	23ea0c8 <__aeabi_d2f+0x90>
 23ea0b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23ea0bc:	bf1e      	ittt	ne
 23ea0be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23ea0c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23ea0c6:	4770      	bxne	lr
 23ea0c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23ea0cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23ea0d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23ea0d4:	4770      	bx	lr
 23ea0d6:	bf00      	nop

023ea0d8 <__aeabi_ldivmod>:
 23ea0d8:	b97b      	cbnz	r3, 23ea0fa <__aeabi_ldivmod+0x22>
 23ea0da:	b972      	cbnz	r2, 23ea0fa <__aeabi_ldivmod+0x22>
 23ea0dc:	2900      	cmp	r1, #0
 23ea0de:	bfbe      	ittt	lt
 23ea0e0:	2000      	movlt	r0, #0
 23ea0e2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23ea0e6:	e006      	blt.n	23ea0f6 <__aeabi_ldivmod+0x1e>
 23ea0e8:	bf08      	it	eq
 23ea0ea:	2800      	cmpeq	r0, #0
 23ea0ec:	bf1c      	itt	ne
 23ea0ee:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23ea0f2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23ea0f6:	f000 b9eb 	b.w	23ea4d0 <__aeabi_idiv0>
 23ea0fa:	f1ad 0c08 	sub.w	ip, sp, #8
 23ea0fe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23ea102:	2900      	cmp	r1, #0
 23ea104:	db09      	blt.n	23ea11a <__aeabi_ldivmod+0x42>
 23ea106:	2b00      	cmp	r3, #0
 23ea108:	db1a      	blt.n	23ea140 <__aeabi_ldivmod+0x68>
 23ea10a:	f000 f86b 	bl	23ea1e4 <__udivmoddi4>
 23ea10e:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ea112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ea116:	b004      	add	sp, #16
 23ea118:	4770      	bx	lr
 23ea11a:	4240      	negs	r0, r0
 23ea11c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ea120:	2b00      	cmp	r3, #0
 23ea122:	db1b      	blt.n	23ea15c <__aeabi_ldivmod+0x84>
 23ea124:	f000 f85e 	bl	23ea1e4 <__udivmoddi4>
 23ea128:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ea12c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ea130:	b004      	add	sp, #16
 23ea132:	4240      	negs	r0, r0
 23ea134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ea138:	4252      	negs	r2, r2
 23ea13a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ea13e:	4770      	bx	lr
 23ea140:	4252      	negs	r2, r2
 23ea142:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ea146:	f000 f84d 	bl	23ea1e4 <__udivmoddi4>
 23ea14a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ea14e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ea152:	b004      	add	sp, #16
 23ea154:	4240      	negs	r0, r0
 23ea156:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ea15a:	4770      	bx	lr
 23ea15c:	4252      	negs	r2, r2
 23ea15e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ea162:	f000 f83f 	bl	23ea1e4 <__udivmoddi4>
 23ea166:	f8dd e004 	ldr.w	lr, [sp, #4]
 23ea16a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ea16e:	b004      	add	sp, #16
 23ea170:	4252      	negs	r2, r2
 23ea172:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23ea176:	4770      	bx	lr

023ea178 <__aeabi_d2lz>:
 23ea178:	b538      	push	{r3, r4, r5, lr}
 23ea17a:	2200      	movs	r2, #0
 23ea17c:	2300      	movs	r3, #0
 23ea17e:	4604      	mov	r4, r0
 23ea180:	460d      	mov	r5, r1
 23ea182:	f7ff fed3 	bl	23e9f2c <__aeabi_dcmplt>
 23ea186:	b928      	cbnz	r0, 23ea194 <__aeabi_d2lz+0x1c>
 23ea188:	4620      	mov	r0, r4
 23ea18a:	4629      	mov	r1, r5
 23ea18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ea190:	f000 b80a 	b.w	23ea1a8 <__aeabi_d2ulz>
 23ea194:	4620      	mov	r0, r4
 23ea196:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23ea19a:	f000 f805 	bl	23ea1a8 <__aeabi_d2ulz>
 23ea19e:	4240      	negs	r0, r0
 23ea1a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23ea1a4:	bd38      	pop	{r3, r4, r5, pc}
 23ea1a6:	bf00      	nop

023ea1a8 <__aeabi_d2ulz>:
 23ea1a8:	b5d0      	push	{r4, r6, r7, lr}
 23ea1aa:	2200      	movs	r2, #0
 23ea1ac:	4b0b      	ldr	r3, [pc, #44]	; (23ea1dc <__aeabi_d2ulz+0x34>)
 23ea1ae:	4606      	mov	r6, r0
 23ea1b0:	460f      	mov	r7, r1
 23ea1b2:	f7ff fc49 	bl	23e9a48 <__aeabi_dmul>
 23ea1b6:	f7ff ff1f 	bl	23e9ff8 <__aeabi_d2uiz>
 23ea1ba:	4604      	mov	r4, r0
 23ea1bc:	f7ff fbca 	bl	23e9954 <__aeabi_ui2d>
 23ea1c0:	2200      	movs	r2, #0
 23ea1c2:	4b07      	ldr	r3, [pc, #28]	; (23ea1e0 <__aeabi_d2ulz+0x38>)
 23ea1c4:	f7ff fc40 	bl	23e9a48 <__aeabi_dmul>
 23ea1c8:	4602      	mov	r2, r0
 23ea1ca:	460b      	mov	r3, r1
 23ea1cc:	4630      	mov	r0, r6
 23ea1ce:	4639      	mov	r1, r7
 23ea1d0:	f7ff fa82 	bl	23e96d8 <__aeabi_dsub>
 23ea1d4:	f7ff ff10 	bl	23e9ff8 <__aeabi_d2uiz>
 23ea1d8:	4621      	mov	r1, r4
 23ea1da:	bdd0      	pop	{r4, r6, r7, pc}
 23ea1dc:	3df00000 	.word	0x3df00000
 23ea1e0:	41f00000 	.word	0x41f00000

023ea1e4 <__udivmoddi4>:
 23ea1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ea1e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23ea1ea:	4604      	mov	r4, r0
 23ea1ec:	460f      	mov	r7, r1
 23ea1ee:	2b00      	cmp	r3, #0
 23ea1f0:	d148      	bne.n	23ea284 <__udivmoddi4+0xa0>
 23ea1f2:	428a      	cmp	r2, r1
 23ea1f4:	4694      	mov	ip, r2
 23ea1f6:	d961      	bls.n	23ea2bc <__udivmoddi4+0xd8>
 23ea1f8:	fab2 f382 	clz	r3, r2
 23ea1fc:	b143      	cbz	r3, 23ea210 <__udivmoddi4+0x2c>
 23ea1fe:	f1c3 0120 	rsb	r1, r3, #32
 23ea202:	409f      	lsls	r7, r3
 23ea204:	fa02 fc03 	lsl.w	ip, r2, r3
 23ea208:	409c      	lsls	r4, r3
 23ea20a:	fa20 f101 	lsr.w	r1, r0, r1
 23ea20e:	430f      	orrs	r7, r1
 23ea210:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23ea214:	fa1f fe8c 	uxth.w	lr, ip
 23ea218:	0c22      	lsrs	r2, r4, #16
 23ea21a:	fbb7 f6f1 	udiv	r6, r7, r1
 23ea21e:	fb01 7716 	mls	r7, r1, r6, r7
 23ea222:	fb06 f00e 	mul.w	r0, r6, lr
 23ea226:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23ea22a:	4290      	cmp	r0, r2
 23ea22c:	d908      	bls.n	23ea240 <__udivmoddi4+0x5c>
 23ea22e:	eb1c 0202 	adds.w	r2, ip, r2
 23ea232:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23ea236:	d202      	bcs.n	23ea23e <__udivmoddi4+0x5a>
 23ea238:	4290      	cmp	r0, r2
 23ea23a:	f200 8137 	bhi.w	23ea4ac <__udivmoddi4+0x2c8>
 23ea23e:	463e      	mov	r6, r7
 23ea240:	1a12      	subs	r2, r2, r0
 23ea242:	b2a4      	uxth	r4, r4
 23ea244:	fbb2 f0f1 	udiv	r0, r2, r1
 23ea248:	fb01 2210 	mls	r2, r1, r0, r2
 23ea24c:	fb00 fe0e 	mul.w	lr, r0, lr
 23ea250:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23ea254:	45a6      	cmp	lr, r4
 23ea256:	d908      	bls.n	23ea26a <__udivmoddi4+0x86>
 23ea258:	eb1c 0404 	adds.w	r4, ip, r4
 23ea25c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23ea260:	d202      	bcs.n	23ea268 <__udivmoddi4+0x84>
 23ea262:	45a6      	cmp	lr, r4
 23ea264:	f200 811c 	bhi.w	23ea4a0 <__udivmoddi4+0x2bc>
 23ea268:	4610      	mov	r0, r2
 23ea26a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23ea26e:	eba4 040e 	sub.w	r4, r4, lr
 23ea272:	2600      	movs	r6, #0
 23ea274:	b11d      	cbz	r5, 23ea27e <__udivmoddi4+0x9a>
 23ea276:	40dc      	lsrs	r4, r3
 23ea278:	2300      	movs	r3, #0
 23ea27a:	e9c5 4300 	strd	r4, r3, [r5]
 23ea27e:	4631      	mov	r1, r6
 23ea280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ea284:	428b      	cmp	r3, r1
 23ea286:	d909      	bls.n	23ea29c <__udivmoddi4+0xb8>
 23ea288:	2d00      	cmp	r5, #0
 23ea28a:	f000 80fd 	beq.w	23ea488 <__udivmoddi4+0x2a4>
 23ea28e:	2600      	movs	r6, #0
 23ea290:	e9c5 0100 	strd	r0, r1, [r5]
 23ea294:	4630      	mov	r0, r6
 23ea296:	4631      	mov	r1, r6
 23ea298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ea29c:	fab3 f683 	clz	r6, r3
 23ea2a0:	2e00      	cmp	r6, #0
 23ea2a2:	d14b      	bne.n	23ea33c <__udivmoddi4+0x158>
 23ea2a4:	428b      	cmp	r3, r1
 23ea2a6:	f0c0 80f2 	bcc.w	23ea48e <__udivmoddi4+0x2aa>
 23ea2aa:	4282      	cmp	r2, r0
 23ea2ac:	f240 80ef 	bls.w	23ea48e <__udivmoddi4+0x2aa>
 23ea2b0:	4630      	mov	r0, r6
 23ea2b2:	2d00      	cmp	r5, #0
 23ea2b4:	d0e3      	beq.n	23ea27e <__udivmoddi4+0x9a>
 23ea2b6:	e9c5 4700 	strd	r4, r7, [r5]
 23ea2ba:	e7e0      	b.n	23ea27e <__udivmoddi4+0x9a>
 23ea2bc:	b902      	cbnz	r2, 23ea2c0 <__udivmoddi4+0xdc>
 23ea2be:	deff      	udf	#255	; 0xff
 23ea2c0:	fab2 f382 	clz	r3, r2
 23ea2c4:	2b00      	cmp	r3, #0
 23ea2c6:	f040 809d 	bne.w	23ea404 <__udivmoddi4+0x220>
 23ea2ca:	1a89      	subs	r1, r1, r2
 23ea2cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23ea2d0:	b297      	uxth	r7, r2
 23ea2d2:	2601      	movs	r6, #1
 23ea2d4:	0c20      	lsrs	r0, r4, #16
 23ea2d6:	fbb1 f2fe 	udiv	r2, r1, lr
 23ea2da:	fb0e 1112 	mls	r1, lr, r2, r1
 23ea2de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23ea2e2:	fb07 f002 	mul.w	r0, r7, r2
 23ea2e6:	4288      	cmp	r0, r1
 23ea2e8:	d90f      	bls.n	23ea30a <__udivmoddi4+0x126>
 23ea2ea:	eb1c 0101 	adds.w	r1, ip, r1
 23ea2ee:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23ea2f2:	bf2c      	ite	cs
 23ea2f4:	f04f 0901 	movcs.w	r9, #1
 23ea2f8:	f04f 0900 	movcc.w	r9, #0
 23ea2fc:	4288      	cmp	r0, r1
 23ea2fe:	d903      	bls.n	23ea308 <__udivmoddi4+0x124>
 23ea300:	f1b9 0f00 	cmp.w	r9, #0
 23ea304:	f000 80cf 	beq.w	23ea4a6 <__udivmoddi4+0x2c2>
 23ea308:	4642      	mov	r2, r8
 23ea30a:	1a09      	subs	r1, r1, r0
 23ea30c:	b2a4      	uxth	r4, r4
 23ea30e:	fbb1 f0fe 	udiv	r0, r1, lr
 23ea312:	fb0e 1110 	mls	r1, lr, r0, r1
 23ea316:	fb00 f707 	mul.w	r7, r0, r7
 23ea31a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23ea31e:	42a7      	cmp	r7, r4
 23ea320:	d908      	bls.n	23ea334 <__udivmoddi4+0x150>
 23ea322:	eb1c 0404 	adds.w	r4, ip, r4
 23ea326:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23ea32a:	d202      	bcs.n	23ea332 <__udivmoddi4+0x14e>
 23ea32c:	42a7      	cmp	r7, r4
 23ea32e:	f200 80b4 	bhi.w	23ea49a <__udivmoddi4+0x2b6>
 23ea332:	4608      	mov	r0, r1
 23ea334:	1be4      	subs	r4, r4, r7
 23ea336:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23ea33a:	e79b      	b.n	23ea274 <__udivmoddi4+0x90>
 23ea33c:	f1c6 0720 	rsb	r7, r6, #32
 23ea340:	40b3      	lsls	r3, r6
 23ea342:	fa01 f406 	lsl.w	r4, r1, r6
 23ea346:	fa22 fc07 	lsr.w	ip, r2, r7
 23ea34a:	40f9      	lsrs	r1, r7
 23ea34c:	40b2      	lsls	r2, r6
 23ea34e:	ea4c 0c03 	orr.w	ip, ip, r3
 23ea352:	fa20 f307 	lsr.w	r3, r0, r7
 23ea356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23ea35a:	431c      	orrs	r4, r3
 23ea35c:	fa1f fe8c 	uxth.w	lr, ip
 23ea360:	fa00 f306 	lsl.w	r3, r0, r6
 23ea364:	0c20      	lsrs	r0, r4, #16
 23ea366:	fbb1 f8f9 	udiv	r8, r1, r9
 23ea36a:	fb09 1118 	mls	r1, r9, r8, r1
 23ea36e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23ea372:	fb08 f00e 	mul.w	r0, r8, lr
 23ea376:	4288      	cmp	r0, r1
 23ea378:	d90f      	bls.n	23ea39a <__udivmoddi4+0x1b6>
 23ea37a:	eb1c 0101 	adds.w	r1, ip, r1
 23ea37e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23ea382:	bf2c      	ite	cs
 23ea384:	f04f 0b01 	movcs.w	fp, #1
 23ea388:	f04f 0b00 	movcc.w	fp, #0
 23ea38c:	4288      	cmp	r0, r1
 23ea38e:	d903      	bls.n	23ea398 <__udivmoddi4+0x1b4>
 23ea390:	f1bb 0f00 	cmp.w	fp, #0
 23ea394:	f000 808d 	beq.w	23ea4b2 <__udivmoddi4+0x2ce>
 23ea398:	46d0      	mov	r8, sl
 23ea39a:	1a09      	subs	r1, r1, r0
 23ea39c:	b2a4      	uxth	r4, r4
 23ea39e:	fbb1 f0f9 	udiv	r0, r1, r9
 23ea3a2:	fb09 1110 	mls	r1, r9, r0, r1
 23ea3a6:	fb00 fe0e 	mul.w	lr, r0, lr
 23ea3aa:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23ea3ae:	458e      	cmp	lr, r1
 23ea3b0:	d907      	bls.n	23ea3c2 <__udivmoddi4+0x1de>
 23ea3b2:	eb1c 0101 	adds.w	r1, ip, r1
 23ea3b6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23ea3ba:	d201      	bcs.n	23ea3c0 <__udivmoddi4+0x1dc>
 23ea3bc:	458e      	cmp	lr, r1
 23ea3be:	d87f      	bhi.n	23ea4c0 <__udivmoddi4+0x2dc>
 23ea3c0:	4620      	mov	r0, r4
 23ea3c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23ea3c6:	eba1 010e 	sub.w	r1, r1, lr
 23ea3ca:	fba0 9802 	umull	r9, r8, r0, r2
 23ea3ce:	4541      	cmp	r1, r8
 23ea3d0:	464c      	mov	r4, r9
 23ea3d2:	46c6      	mov	lr, r8
 23ea3d4:	d302      	bcc.n	23ea3dc <__udivmoddi4+0x1f8>
 23ea3d6:	d106      	bne.n	23ea3e6 <__udivmoddi4+0x202>
 23ea3d8:	454b      	cmp	r3, r9
 23ea3da:	d204      	bcs.n	23ea3e6 <__udivmoddi4+0x202>
 23ea3dc:	3801      	subs	r0, #1
 23ea3de:	ebb9 0402 	subs.w	r4, r9, r2
 23ea3e2:	eb68 0e0c 	sbc.w	lr, r8, ip
 23ea3e6:	2d00      	cmp	r5, #0
 23ea3e8:	d070      	beq.n	23ea4cc <__udivmoddi4+0x2e8>
 23ea3ea:	1b1a      	subs	r2, r3, r4
 23ea3ec:	eb61 010e 	sbc.w	r1, r1, lr
 23ea3f0:	fa22 f306 	lsr.w	r3, r2, r6
 23ea3f4:	fa01 f707 	lsl.w	r7, r1, r7
 23ea3f8:	40f1      	lsrs	r1, r6
 23ea3fa:	2600      	movs	r6, #0
 23ea3fc:	431f      	orrs	r7, r3
 23ea3fe:	e9c5 7100 	strd	r7, r1, [r5]
 23ea402:	e73c      	b.n	23ea27e <__udivmoddi4+0x9a>
 23ea404:	fa02 fc03 	lsl.w	ip, r2, r3
 23ea408:	f1c3 0020 	rsb	r0, r3, #32
 23ea40c:	fa01 f203 	lsl.w	r2, r1, r3
 23ea410:	fa21 f600 	lsr.w	r6, r1, r0
 23ea414:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23ea418:	fa24 f100 	lsr.w	r1, r4, r0
 23ea41c:	fa1f f78c 	uxth.w	r7, ip
 23ea420:	409c      	lsls	r4, r3
 23ea422:	4311      	orrs	r1, r2
 23ea424:	fbb6 f0fe 	udiv	r0, r6, lr
 23ea428:	0c0a      	lsrs	r2, r1, #16
 23ea42a:	fb0e 6610 	mls	r6, lr, r0, r6
 23ea42e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23ea432:	fb00 f607 	mul.w	r6, r0, r7
 23ea436:	4296      	cmp	r6, r2
 23ea438:	d90e      	bls.n	23ea458 <__udivmoddi4+0x274>
 23ea43a:	eb1c 0202 	adds.w	r2, ip, r2
 23ea43e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23ea442:	bf2c      	ite	cs
 23ea444:	f04f 0901 	movcs.w	r9, #1
 23ea448:	f04f 0900 	movcc.w	r9, #0
 23ea44c:	4296      	cmp	r6, r2
 23ea44e:	d902      	bls.n	23ea456 <__udivmoddi4+0x272>
 23ea450:	f1b9 0f00 	cmp.w	r9, #0
 23ea454:	d031      	beq.n	23ea4ba <__udivmoddi4+0x2d6>
 23ea456:	4640      	mov	r0, r8
 23ea458:	1b92      	subs	r2, r2, r6
 23ea45a:	b289      	uxth	r1, r1
 23ea45c:	fbb2 f6fe 	udiv	r6, r2, lr
 23ea460:	fb0e 2216 	mls	r2, lr, r6, r2
 23ea464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23ea468:	fb06 f207 	mul.w	r2, r6, r7
 23ea46c:	428a      	cmp	r2, r1
 23ea46e:	d907      	bls.n	23ea480 <__udivmoddi4+0x29c>
 23ea470:	eb1c 0101 	adds.w	r1, ip, r1
 23ea474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23ea478:	d201      	bcs.n	23ea47e <__udivmoddi4+0x29a>
 23ea47a:	428a      	cmp	r2, r1
 23ea47c:	d823      	bhi.n	23ea4c6 <__udivmoddi4+0x2e2>
 23ea47e:	4646      	mov	r6, r8
 23ea480:	1a89      	subs	r1, r1, r2
 23ea482:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23ea486:	e725      	b.n	23ea2d4 <__udivmoddi4+0xf0>
 23ea488:	462e      	mov	r6, r5
 23ea48a:	4628      	mov	r0, r5
 23ea48c:	e6f7      	b.n	23ea27e <__udivmoddi4+0x9a>
 23ea48e:	1a84      	subs	r4, r0, r2
 23ea490:	eb61 0303 	sbc.w	r3, r1, r3
 23ea494:	2001      	movs	r0, #1
 23ea496:	461f      	mov	r7, r3
 23ea498:	e70b      	b.n	23ea2b2 <__udivmoddi4+0xce>
 23ea49a:	4464      	add	r4, ip
 23ea49c:	3802      	subs	r0, #2
 23ea49e:	e749      	b.n	23ea334 <__udivmoddi4+0x150>
 23ea4a0:	4464      	add	r4, ip
 23ea4a2:	3802      	subs	r0, #2
 23ea4a4:	e6e1      	b.n	23ea26a <__udivmoddi4+0x86>
 23ea4a6:	3a02      	subs	r2, #2
 23ea4a8:	4461      	add	r1, ip
 23ea4aa:	e72e      	b.n	23ea30a <__udivmoddi4+0x126>
 23ea4ac:	3e02      	subs	r6, #2
 23ea4ae:	4462      	add	r2, ip
 23ea4b0:	e6c6      	b.n	23ea240 <__udivmoddi4+0x5c>
 23ea4b2:	f1a8 0802 	sub.w	r8, r8, #2
 23ea4b6:	4461      	add	r1, ip
 23ea4b8:	e76f      	b.n	23ea39a <__udivmoddi4+0x1b6>
 23ea4ba:	3802      	subs	r0, #2
 23ea4bc:	4462      	add	r2, ip
 23ea4be:	e7cb      	b.n	23ea458 <__udivmoddi4+0x274>
 23ea4c0:	3802      	subs	r0, #2
 23ea4c2:	4461      	add	r1, ip
 23ea4c4:	e77d      	b.n	23ea3c2 <__udivmoddi4+0x1de>
 23ea4c6:	3e02      	subs	r6, #2
 23ea4c8:	4461      	add	r1, ip
 23ea4ca:	e7d9      	b.n	23ea480 <__udivmoddi4+0x29c>
 23ea4cc:	462e      	mov	r6, r5
 23ea4ce:	e6d6      	b.n	23ea27e <__udivmoddi4+0x9a>

023ea4d0 <__aeabi_idiv0>:
 23ea4d0:	4770      	bx	lr
 23ea4d2:	bf00      	nop

023ea4d4 <strcmp>:
 23ea4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ea4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23ea4dc:	2a01      	cmp	r2, #1
 23ea4de:	bf28      	it	cs
 23ea4e0:	429a      	cmpcs	r2, r3
 23ea4e2:	d0f7      	beq.n	23ea4d4 <strcmp>
 23ea4e4:	1ad0      	subs	r0, r2, r3
 23ea4e6:	4770      	bx	lr

023ea4e8 <strlen>:
 23ea4e8:	4603      	mov	r3, r0
 23ea4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 23ea4ee:	2a00      	cmp	r2, #0
 23ea4f0:	d1fb      	bne.n	23ea4ea <strlen+0x2>
 23ea4f2:	1a18      	subs	r0, r3, r0
 23ea4f4:	3801      	subs	r0, #1
 23ea4f6:	4770      	bx	lr

023ea4f8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23ea4f8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23ea4fa:	f00a fe81 	bl	23f5200 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23ea4fe:	2500      	movs	r5, #0
 23ea500:	4e05      	ldr	r6, [pc, #20]	; (23ea518 <module_user_init+0x20>)
 23ea502:	4c06      	ldr	r4, [pc, #24]	; (23ea51c <module_user_init+0x24>)
 23ea504:	1ba4      	subs	r4, r4, r6
 23ea506:	08a4      	lsrs	r4, r4, #2
 23ea508:	42ac      	cmp	r4, r5
 23ea50a:	d100      	bne.n	23ea50e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23ea50c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23ea50e:	f856 3b04 	ldr.w	r3, [r6], #4
 23ea512:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23ea514:	3501      	adds	r5, #1
 23ea516:	e7f7      	b.n	23ea508 <module_user_init+0x10>
 23ea518:	023fffc8 	.word	0x023fffc8
 23ea51c:	023ffff4 	.word	0x023ffff4

023ea520 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23ea520:	f004 bd70 	b.w	23ef004 <setup>

023ea524 <module_user_loop>:
}

void module_user_loop() {
 23ea524:	b508      	push	{r3, lr}
    loop();
 23ea526:	f005 fc43 	bl	23efdb0 <loop>
    _post_loop();
}
 23ea52a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23ea52e:	f00a be1f 	b.w	23f5170 <_post_loop>

023ea532 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23ea532:	f00a b91b 	b.w	23f476c <malloc>

023ea536 <_Znaj>:
 23ea536:	f00a b919 	b.w	23f476c <malloc>

023ea53a <_ZdaPv>:
 23ea53a:	f00a b925 	b.w	23f4788 <free>

023ea53e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23ea53e:	f00a b923 	b.w	23f4788 <free>
	...

023ea544 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23ea544:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23ea546:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23ea548:	4a02      	ldr	r2, [pc, #8]	; (23ea554 <__cxa_pure_virtual+0x10>)
 23ea54a:	4903      	ldr	r1, [pc, #12]	; (23ea558 <__cxa_pure_virtual+0x14>)
 23ea54c:	f009 ffcc 	bl	23f44e8 <panic_>
  while (1);
 23ea550:	e7fe      	b.n	23ea550 <__cxa_pure_virtual+0xc>
 23ea552:	bf00      	nop
 23ea554:	023f4441 	.word	0x023f4441
 23ea558:	023fb558 	.word	0x023fb558

023ea55c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23ea55c:	7800      	ldrb	r0, [r0, #0]
 23ea55e:	fab0 f080 	clz	r0, r0
 23ea562:	0940      	lsrs	r0, r0, #5
 23ea564:	4770      	bx	lr

023ea566 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23ea566:	2301      	movs	r3, #1
 23ea568:	7003      	strb	r3, [r0, #0]
 23ea56a:	4770      	bx	lr

023ea56c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 23ea56c:	2810      	cmp	r0, #16
 23ea56e:	bf9a      	itte	ls
 23ea570:	4b02      	ldrls	r3, [pc, #8]	; (23ea57c <TfLiteTypeGetName+0x10>)
 23ea572:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 23ea576:	4802      	ldrhi	r0, [pc, #8]	; (23ea580 <TfLiteTypeGetName+0x14>)
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
 23ea578:	4770      	bx	lr
 23ea57a:	bf00      	nop
 23ea57c:	023fb5e8 	.word	0x023fb5e8
 23ea580:	023fb56d 	.word	0x023fb56d

023ea584 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 23ea584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ea588:	b09b      	sub	sp, #108	; 0x6c
 23ea58a:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ea58c:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23ea58e:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ea590:	105b      	asrs	r3, r3, #1
 23ea592:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
 23ea594:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ea596:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23ea598:	005b      	lsls	r3, r3, #1
 23ea59a:	9310      	str	r3, [sp, #64]	; 0x40
 23ea59c:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
 23ea59e:	9112      	str	r1, [sp, #72]	; 0x48
 23ea5a0:	4353      	muls	r3, r2
 23ea5a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ea5a4:	900c      	str	r0, [sp, #48]	; 0x30
 23ea5a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 23ea5aa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ea5ac:	930a      	str	r3, [sp, #40]	; 0x28
 23ea5ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23ea5b0:	2a00      	cmp	r2, #0
 23ea5b2:	f023 030f 	bic.w	r3, r3, #15
 23ea5b6:	bfb8      	it	lt
 23ea5b8:	2300      	movlt	r3, #0
 23ea5ba:	9308      	str	r3, [sp, #32]
 23ea5bc:	4613      	mov	r3, r2
 23ea5be:	9a08      	ldr	r2, [sp, #32]
 23ea5c0:	9908      	ldr	r1, [sp, #32]
 23ea5c2:	1a9b      	subs	r3, r3, r2
 23ea5c4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ea5c6:	428a      	cmp	r2, r1
 23ea5c8:	bfb8      	it	lt
 23ea5ca:	2300      	movlt	r3, #0
 23ea5cc:	4413      	add	r3, r2
 23ea5ce:	9316      	str	r3, [sp, #88]	; 0x58
 23ea5d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ea5d2:	005b      	lsls	r3, r3, #1
 23ea5d4:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ea5d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ea5d8:	9300      	str	r3, [sp, #0]
 23ea5da:	2304      	movs	r3, #4
 23ea5dc:	9305      	str	r3, [sp, #20]
 23ea5de:	2300      	movs	r3, #0
 23ea5e0:	9301      	str	r3, [sp, #4]
 23ea5e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ea5e4:	3b01      	subs	r3, #1
 23ea5e6:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ea5e8:	f1a2 030f 	sub.w	r3, r2, #15
 23ea5ec:	9313      	str	r3, [sp, #76]	; 0x4c
 23ea5ee:	9a01      	ldr	r2, [sp, #4]
 23ea5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ea5f2:	4413      	add	r3, r2
 23ea5f4:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ea5f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ea5f8:	4293      	cmp	r3, r2
 23ea5fa:	f340 82cc 	ble.w	23eab96 <arm_nn_mat_mult_nt_t_s8+0x612>
 23ea5fe:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ea600:	9800      	ldr	r0, [sp, #0]
 23ea602:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
 23ea604:	2300      	movs	r3, #0
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ea606:	f1c0 0001 	rsb	r0, r0, #1
        q31_t lhs_offset_contribution0 = 0;
 23ea60a:	4619      	mov	r1, r3
 23ea60c:	e005      	b.n	23ea61a <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
 23ea60e:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 23ea612:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 23ea614:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 23ea616:	5714      	ldrsb	r4, [r2, r4]
 23ea618:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 23ea61a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ea61c:	1884      	adds	r4, r0, r2
 23ea61e:	42ac      	cmp	r4, r5
 23ea620:	dbf5      	blt.n	23ea60e <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
 23ea622:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ea624:	434a      	muls	r2, r1
 23ea626:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
 23ea628:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ea62a:	4353      	muls	r3, r2
 23ea62c:	9303      	str	r3, [sp, #12]
        if (bias)
 23ea62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ea630:	b15b      	cbz	r3, 23ea64a <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 23ea632:	9a01      	ldr	r2, [sp, #4]
 23ea634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ea638:	9a02      	ldr	r2, [sp, #8]
 23ea63a:	441a      	add	r2, r3
 23ea63c:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 23ea63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ea640:	9a05      	ldr	r2, [sp, #20]
 23ea642:	589b      	ldr	r3, [r3, r2]
 23ea644:	9a03      	ldr	r2, [sp, #12]
 23ea646:	441a      	add	r2, r3
 23ea648:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
 23ea64a:	9b08      	ldr	r3, [sp, #32]
 23ea64c:	9a00      	ldr	r2, [sp, #0]
 23ea64e:	3b01      	subs	r3, #1
 23ea650:	18d3      	adds	r3, r2, r3
 23ea652:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
 23ea654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ea656:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23ea658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ea65a:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
 23ea65c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23ea65e:	3301      	adds	r3, #1
 23ea660:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
 23ea662:	9b06      	ldr	r3, [sp, #24]
 23ea664:	2b00      	cmp	r3, #0
 23ea666:	f000 818e 	beq.w	23ea986 <arm_nn_mat_mult_nt_t_s8+0x402>
            q31_t res10 = lhs_offset_contribution0;
 23ea66a:	e9dd b902 	ldrd	fp, r9, [sp, #8]
 23ea66e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ea670:	9b00      	ldr	r3, [sp, #0]
            q31_t res01 = lhs_offset_contribution1;
 23ea672:	464f      	mov	r7, r9
 23ea674:	189e      	adds	r6, r3, r2
 23ea676:	9b04      	ldr	r3, [sp, #16]
 23ea678:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
 23ea67a:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
 23ea67c:	2200      	movs	r2, #0
 23ea67e:	e0a3      	b.n	23ea7c8 <arm_nn_mat_mult_nt_t_s8+0x244>
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 23ea680:	9900      	ldr	r1, [sp, #0]
 23ea682:	5888      	ldr	r0, [r1, r2]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea684:	9904      	ldr	r1, [sp, #16]
 23ea686:	fa2f fe80 	sxtb16	lr, r0
 23ea68a:	588c      	ldr	r4, [r1, r2]
 23ea68c:	6831      	ldr	r1, [r6, #0]
 23ea68e:	fa2f f884 	sxtb16	r8, r4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea692:	fa2f f090 	sxtb16	r0, r0, ror #8
 23ea696:	fa2f f494 	sxtb16	r4, r4, ror #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea69a:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea69e:	fa2f f381 	sxtb16	r3, r1
 23ea6a2:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea6a4:	fb24 c300 	smlad	r3, r4, r0, ip
 23ea6a8:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea6aa:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea6ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ea6b0:	fb28 7701 	smlad	r7, r8, r1, r7
 23ea6b4:	fb24 740c 	smlad	r4, r4, ip, r7
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 23ea6b8:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea6ba:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea6be:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea6c2:	fb28 be0e 	smlad	lr, r8, lr, fp
 23ea6c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ea6c8:	fb28 9101 	smlad	r1, r8, r1, r9
 23ea6cc:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
 23ea6d0:	f8da 8004 	ldr.w	r8, [sl, #4]
 23ea6d4:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
 23ea6d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ea6da:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea6de:	f8d3 9004 	ldr.w	r9, [r3, #4]
 23ea6e2:	fa2f f788 	sxtb16	r7, r8
 23ea6e6:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea6ea:	fa2f f898 	sxtb16	r8, r8, ror #8
 23ea6ee:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea6f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ea6f4:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea6f8:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea6fc:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea700:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea704:	fb2c 440b 	smlad	r4, ip, fp, r4
 23ea708:	fb29 490e 	smlad	r9, r9, lr, r4
 23ea70c:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea70e:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea712:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea716:	fb2c 0007 	smlad	r0, ip, r7, r0
 23ea71a:	fb2c 110b 	smlad	r1, ip, fp, r1
 23ea71e:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
 23ea722:	f8da b008 	ldr.w	fp, [sl, #8]
 23ea726:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
 23ea72a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ea72c:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea730:	6880      	ldr	r0, [r0, #8]
 23ea732:	fa2f f18b 	sxtb16	r1, fp
 23ea736:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea73a:	fa2f fb9b 	sxtb16	fp, fp, ror #8
 23ea73e:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea742:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea746:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea74a:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea74e:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea752:	fb24 9907 	smlad	r9, r4, r7, r9
 23ea756:	fb20 900c 	smlad	r0, r0, ip, r9
 23ea75a:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea75e:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea762:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea766:	fb24 8801 	smlad	r8, r4, r1, r8
 23ea76a:	fb24 e407 	smlad	r4, r4, r7, lr
 23ea76e:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
 23ea772:	f8da e00c 	ldr.w	lr, [sl, #12]
 23ea776:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
 23ea77a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23ea77c:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea77e:	68e7      	ldr	r7, [r4, #12]
 23ea780:	fa2f f88e 	sxtb16	r8, lr
 23ea784:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea788:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 23ea78c:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea790:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea794:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea798:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea79c:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea7a0:	fb2a 0009 	smlad	r0, sl, r9, r0
 23ea7a4:	fb24 0701 	smlad	r7, r4, r1, r0
 23ea7a8:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ea7aa:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23ea7ae:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ea7b2:	fb24 bb08 	smlad	fp, r4, r8, fp
 23ea7b6:	fb24 cc09 	smlad	ip, r4, r9, ip
 23ea7ba:	fb25 bb0e 	smlad	fp, r5, lr, fp
 23ea7be:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ea7c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 23ea7c4:	3210      	adds	r2, #16
 23ea7c6:	3610      	adds	r6, #16
 23ea7c8:	9904      	ldr	r1, [sp, #16]
 23ea7ca:	4411      	add	r1, r2
 23ea7cc:	910d      	str	r1, [sp, #52]	; 0x34
 23ea7ce:	9900      	ldr	r1, [sp, #0]
 23ea7d0:	eb01 0a02 	add.w	sl, r1, r2
 23ea7d4:	f105 0110 	add.w	r1, r5, #16
 23ea7d8:	9115      	str	r1, [sp, #84]	; 0x54
 23ea7da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23ea7dc:	4291      	cmp	r1, r2
 23ea7de:	f73f af4f 	bgt.w	23ea680 <arm_nn_mat_mult_nt_t_s8+0xfc>
 23ea7e2:	9908      	ldr	r1, [sp, #32]
 23ea7e4:	9a04      	ldr	r2, [sp, #16]
 23ea7e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23ea7e8:	440a      	add	r2, r1
 23ea7ea:	4614      	mov	r4, r2
 23ea7ec:	1e51      	subs	r1, r2, #1
 23ea7ee:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ea7f0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ea7f2:	42aa      	cmp	r2, r5
 23ea7f4:	f2c0 80b5 	blt.w	23ea962 <arm_nn_mat_mult_nt_t_s8+0x3de>
                lhs_value = lhs_ptr[rhs_cols];
 23ea7f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23ea7fa:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
 23ea7fc:	18a2      	adds	r2, r4, r2
 23ea7fe:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23ea800:	9a24      	ldr	r2, [sp, #144]	; 0x90
 23ea802:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 23ea806:	920d      	str	r2, [sp, #52]	; 0x34
 23ea808:	9a25      	ldr	r2, [sp, #148]	; 0x94
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea80a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ea80c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 23ea810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23ea814:	2100      	movs	r1, #0
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea816:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
 23ea81a:	2d00      	cmp	r5, #0
 23ea81c:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea820:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea824:	bfc8      	it	gt
 23ea826:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea828:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea82c:	bfd8      	it	le
 23ea82e:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea830:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 23ea834:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea836:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
 23ea83a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23ea83e:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
 23ea842:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
 23ea846:	412a      	asrs	r2, r5
    q31_t threshold = remainder_mask >> 1;
 23ea848:	bf54      	ite	pl
 23ea84a:	4663      	movpl	r3, ip
        threshold++;
 23ea84c:	4463      	addmi	r3, ip
    if (remainder > threshold)
 23ea84e:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23ea850:	9905      	ldr	r1, [sp, #20]
 23ea852:	9b24      	ldr	r3, [sp, #144]	; 0x90
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea854:	f04f 0000 	mov.w	r0, #0
 23ea858:	585b      	ldr	r3, [r3, r1]
        result++;
 23ea85a:	bfc8      	it	gt
 23ea85c:	3201      	addgt	r2, #1
 23ea85e:	930f      	str	r3, [sp, #60]	; 0x3c
 23ea860:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea862:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23ea864:	585c      	ldr	r4, [r3, r1]
 23ea866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea86a:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 23ea86e:	408f      	lsls	r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea870:	fbc7 3006 	smlal	r3, r0, r7, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea874:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23ea876:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea87a:	bfc8      	it	gt
 23ea87c:	2400      	movgt	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23ea87e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea882:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea886:	bfd8      	it	le
 23ea888:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea88a:	fa00 f604 	lsl.w	r6, r0, r4
 23ea88e:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
 23ea890:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
 23ea894:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
 23ea898:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 23ea89a:	bf54      	ite	pl
 23ea89c:	4638      	movpl	r0, r7
        threshold++;
 23ea89e:	1838      	addmi	r0, r7, r0
    if (remainder > threshold)
 23ea8a0:	4580      	cmp	r8, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea8a2:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea8a6:	f04f 0800 	mov.w	r8, #0
 23ea8aa:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 23ea8ae:	980d      	ldr	r0, [sp, #52]	; 0x34
        result++;
 23ea8b0:	bfc8      	it	gt
 23ea8b2:	3301      	addgt	r3, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea8b4:	fbce b800 	smlal	fp, r8, lr, r0
 23ea8b8:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
 23ea8ba:	0fc0      	lsrs	r0, r0, #31
 23ea8bc:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ea8c0:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
 23ea8c4:	4128      	asrs	r0, r5
        threshold++;
 23ea8c6:	bf48      	it	mi
 23ea8c8:	f10c 0c01 	addmi.w	ip, ip, #1
    if (remainder > threshold)
 23ea8cc:	45e2      	cmp	sl, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea8ce:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 23ea8d2:	f04f 0c00 	mov.w	ip, #0
 23ea8d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea8d8:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea8dc:	fbc1 ec05 	smlal	lr, ip, r1, r5
 23ea8e0:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
 23ea8e2:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 23ea8e6:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
 23ea8ea:	bfc8      	it	gt
 23ea8ec:	3001      	addgt	r0, #1
    if (result < 0)
 23ea8ee:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
 23ea8f2:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
 23ea8f6:	bf48      	it	mi
 23ea8f8:	3701      	addmi	r7, #1
            res00 += dst_offset;
 23ea8fa:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23ea8fc:	42be      	cmp	r6, r7
        result++;
 23ea8fe:	bfc8      	it	gt
 23ea900:	3401      	addgt	r4, #1
 23ea902:	440a      	add	r2, r1
            res01 += dst_offset;
 23ea904:	440b      	add	r3, r1
            res10 += dst_offset;
 23ea906:	4408      	add	r0, r1
            res11 += dst_offset;
 23ea908:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
 23ea90a:	992b      	ldr	r1, [sp, #172]	; 0xac
 23ea90c:	428a      	cmp	r2, r1
 23ea90e:	bfb8      	it	lt
 23ea910:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 23ea912:	428b      	cmp	r3, r1
 23ea914:	bfb8      	it	lt
 23ea916:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
 23ea918:	4288      	cmp	r0, r1
 23ea91a:	bfb8      	it	lt
 23ea91c:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
 23ea91e:	428c      	cmp	r4, r1
 23ea920:	bfb8      	it	lt
 23ea922:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
 23ea924:	992c      	ldr	r1, [sp, #176]	; 0xb0
 23ea926:	428a      	cmp	r2, r1
 23ea928:	bfa8      	it	ge
 23ea92a:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 23ea92c:	9907      	ldr	r1, [sp, #28]
 23ea92e:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 23ea930:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23ea932:	4293      	cmp	r3, r2
 23ea934:	bfa8      	it	ge
 23ea936:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 23ea938:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
 23ea93a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23ea93c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
 23ea93e:	4298      	cmp	r0, r3
 23ea940:	bfa8      	it	ge
 23ea942:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
 23ea944:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23ea946:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
 23ea948:	429c      	cmp	r4, r3
 23ea94a:	bfa8      	it	ge
 23ea94c:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
 23ea94e:	460b      	mov	r3, r1
 23ea950:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ea952:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
 23ea954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23ea956:	4413      	add	r3, r2
 23ea958:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
 23ea95a:	9b06      	ldr	r3, [sp, #24]
 23ea95c:	3b01      	subs	r3, #1
 23ea95e:	9306      	str	r3, [sp, #24]
 23ea960:	e67f      	b.n	23ea662 <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
 23ea962:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23ea966:	9d28      	ldr	r5, [sp, #160]	; 0xa0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ea968:	3201      	adds	r2, #1
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23ea96a:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
 23ea96c:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
 23ea970:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
 23ea974:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
 23ea978:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23ea97a:	574d      	ldrsb	r5, [r1, r5]
                res10 += lhs_value * rhs_value0;
 23ea97c:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
 23ea980:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ea984:	e734      	b.n	23ea7f0 <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
 23ea986:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ea988:	07d8      	lsls	r0, r3, #31
 23ea98a:	d57a      	bpl.n	23eaa82 <arm_nn_mat_mult_nt_t_s8+0x4fe>
 23ea98c:	9b00      	ldr	r3, [sp, #0]
 23ea98e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ea990:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
 23ea992:	9b06      	ldr	r3, [sp, #24]
 23ea994:	9a04      	ldr	r2, [sp, #16]
 23ea996:	18d6      	adds	r6, r2, r3
 23ea998:	9a00      	ldr	r2, [sp, #0]
 23ea99a:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ea99c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ea99e:	429a      	cmp	r2, r3
 23ea9a0:	dc7d      	bgt.n	23eaa9e <arm_nn_mat_mult_nt_t_s8+0x51a>
 23ea9a2:	9a08      	ldr	r2, [sp, #32]
 23ea9a4:	9b04      	ldr	r3, [sp, #16]
 23ea9a6:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ea9a8:	9a04      	ldr	r2, [sp, #16]
 23ea9aa:	4251      	negs	r1, r2
 23ea9ac:	9828      	ldr	r0, [sp, #160]	; 0xa0
 23ea9ae:	185a      	adds	r2, r3, r1
 23ea9b0:	4290      	cmp	r0, r2
 23ea9b2:	f300 80de 	bgt.w	23eab72 <arm_nn_mat_mult_nt_t_s8+0x5ee>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23ea9b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23ea9b8:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea9ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ea9be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea9c2:	9b02      	ldr	r3, [sp, #8]
 23ea9c4:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 23ea9c8:	40a3      	lsls	r3, r4
 23ea9ca:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea9cc:	2500      	movs	r5, #0
 23ea9ce:	9901      	ldr	r1, [sp, #4]
 23ea9d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea9d2:	2a00      	cmp	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea9d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23ea9d8:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 23ea9dc:	ea4f 71d0 	mov.w	r1, r0, lsr #31
 23ea9e0:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea9e4:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea9e8:	bfcc      	ite	gt
 23ea9ea:	2100      	movgt	r1, #0
 23ea9ec:	4251      	negle	r1, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea9ee:	408b      	lsls	r3, r1
 23ea9f0:	3b01      	subs	r3, #1
    if (result < 0)
 23ea9f2:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
 23ea9f6:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23ea9fa:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ea9fe:	bf48      	it	mi
 23eaa00:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23eaa02:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23eaa04:	9a05      	ldr	r2, [sp, #20]
 23eaa06:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eaa08:	f04f 0500 	mov.w	r5, #0
 23eaa0c:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eaa0e:	9b03      	ldr	r3, [sp, #12]
 23eaa10:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23eaa14:	fa03 f300 	lsl.w	r3, r3, r0
 23eaa18:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eaa1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
        result++;
 23eaa1c:	bfc8      	it	gt
 23eaa1e:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eaa20:	589b      	ldr	r3, [r3, r2]
 23eaa22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23eaa26:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 23eaa2a:	0fd2      	lsrs	r2, r2, #31
 23eaa2c:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eaa30:	2201      	movs	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eaa32:	2c00      	cmp	r4, #0
 23eaa34:	bfdc      	itt	le
 23eaa36:	4263      	negle	r3, r4
 23eaa38:	9306      	strle	r3, [sp, #24]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eaa3a:	9b06      	ldr	r3, [sp, #24]
 23eaa3c:	fa02 f303 	lsl.w	r3, r2, r3
 23eaa40:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23eaa42:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23eaa46:	4113      	asrs	r3, r2
    if (result < 0)
 23eaa48:	9a06      	ldr	r2, [sp, #24]
 23eaa4a:	4115      	asrs	r5, r2
        threshold++;
 23eaa4c:	bf48      	it	mi
 23eaa4e:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23eaa50:	4298      	cmp	r0, r3
            res00 += dst_offset;
 23eaa52:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
 23eaa54:	bfc8      	it	gt
 23eaa56:	3501      	addgt	r5, #1
 23eaa58:	4419      	add	r1, r3
            res01 += dst_offset;
 23eaa5a:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
 23eaa5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23eaa5e:	4299      	cmp	r1, r3
 23eaa60:	bfb8      	it	lt
 23eaa62:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
 23eaa64:	429d      	cmp	r5, r3
 23eaa66:	bfb8      	it	lt
 23eaa68:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
 23eaa6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23eaa6c:	4299      	cmp	r1, r3
 23eaa6e:	bfa8      	it	ge
 23eaa70:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
 23eaa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23eaa74:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
 23eaa76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23eaa78:	429d      	cmp	r5, r3
 23eaa7a:	bfa8      	it	ge
 23eaa7c:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
 23eaa7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23eaa80:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
 23eaa82:	9b00      	ldr	r3, [sp, #0]
 23eaa84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23eaa86:	4413      	add	r3, r2
 23eaa88:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eaa8a:	9b01      	ldr	r3, [sp, #4]
 23eaa8c:	3302      	adds	r3, #2
 23eaa8e:	9301      	str	r3, [sp, #4]
 23eaa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23eaa92:	3302      	adds	r3, #2
 23eaa94:	930a      	str	r3, [sp, #40]	; 0x28
 23eaa96:	9b05      	ldr	r3, [sp, #20]
 23eaa98:	3308      	adds	r3, #8
 23eaa9a:	9305      	str	r3, [sp, #20]
 23eaa9c:	e5a7      	b.n	23ea5ee <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
 23eaa9e:	9a00      	ldr	r2, [sp, #0]
 23eaaa0:	6801      	ldr	r1, [r0, #0]
 23eaaa2:	58d7      	ldr	r7, [r2, r3]
 23eaaa4:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eaaa6:	fa2f f887 	sxtb16	r8, r7
 23eaaaa:	58d2      	ldr	r2, [r2, r3]
 23eaaac:	fa2f fe81 	sxtb16	lr, r1
 23eaab0:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eaab4:	fa2f f797 	sxtb16	r7, r7, ror #8
 23eaab8:	fa2f f292 	sxtb16	r2, r2, ror #8
 23eaabc:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaac0:	9c02      	ldr	r4, [sp, #8]
 23eaac2:	fb2c 4808 	smlad	r8, ip, r8, r4
 23eaac6:	fb22 8707 	smlad	r7, r2, r7, r8
 23eaaca:	9c03      	ldr	r4, [sp, #12]
 23eaacc:	fb2c 4c0e 	smlad	ip, ip, lr, r4
 23eaad0:	fb22 c101 	smlad	r1, r2, r1, ip
 23eaad4:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
 23eaad6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
 23eaada:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eaadc:	fa2f f984 	sxtb16	r9, r4
 23eaae0:	fa2f fe82 	sxtb16	lr, r2
 23eaae4:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eaae8:	fa2f f494 	sxtb16	r4, r4, ror #8
 23eaaec:	fa2f f292 	sxtb16	r2, r2, ror #8
 23eaaf0:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaaf4:	fb2e 7709 	smlad	r7, lr, r9, r7
 23eaaf8:	fb22 7404 	smlad	r4, r2, r4, r7
 23eaafc:	fb2e 1108 	smlad	r1, lr, r8, r1
 23eab00:	fb22 120c 	smlad	r2, r2, ip, r1
 23eab04:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
 23eab08:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
 23eab0c:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eab10:	fa2f f788 	sxtb16	r7, r8
 23eab14:	fa2f f18c 	sxtb16	r1, ip
 23eab18:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eab1c:	fa2f f898 	sxtb16	r8, r8, ror #8
 23eab20:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 23eab24:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eab28:	fb21 4407 	smlad	r4, r1, r7, r4
 23eab2c:	fb2c 4808 	smlad	r8, ip, r8, r4
 23eab30:	fb21 2209 	smlad	r2, r1, r9, r2
 23eab34:	fb2c 2e0e 	smlad	lr, ip, lr, r2
 23eab38:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
 23eab3a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
 23eab3e:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23eab40:	fa2f f482 	sxtb16	r4, r2
 23eab44:	fa2f fc85 	sxtb16	ip, r5
 23eab48:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23eab4c:	fa2f f292 	sxtb16	r2, r2, ror #8
 23eab50:	fa2f f595 	sxtb16	r5, r5, ror #8
 23eab54:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eab58:	fb2c 8804 	smlad	r8, ip, r4, r8
 23eab5c:	fb25 8202 	smlad	r2, r5, r2, r8
 23eab60:	9202      	str	r2, [sp, #8]
 23eab62:	fb2c ee01 	smlad	lr, ip, r1, lr
 23eab66:	fb25 e20a 	smlad	r2, r5, sl, lr
 23eab6a:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eab6c:	3310      	adds	r3, #16
 23eab6e:	3010      	adds	r0, #16
 23eab70:	e710      	b.n	23ea994 <arm_nn_mat_mult_nt_t_s8+0x410>
                res00 += lhs_value * rhs_value0;
 23eab72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
 23eab74:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
 23eab78:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
 23eab7c:	940b      	str	r4, [sp, #44]	; 0x2c
 23eab7e:	9c02      	ldr	r4, [sp, #8]
 23eab80:	fb12 4000 	smlabb	r0, r2, r0, r4
                res01 += lhs_value * rhs_value1;
 23eab84:	9c28      	ldr	r4, [sp, #160]	; 0xa0
                res00 += lhs_value * rhs_value0;
 23eab86:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
 23eab88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23eab8a:	5700      	ldrsb	r0, [r0, r4]
 23eab8c:	9c03      	ldr	r4, [sp, #12]
 23eab8e:	fb12 4200 	smlabb	r2, r2, r0, r4
 23eab92:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eab94:	e70a      	b.n	23ea9ac <arm_nn_mat_mult_nt_t_s8+0x428>
 23eab96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23eab98:	9810      	ldr	r0, [sp, #64]	; 0x40
 23eab9a:	2b00      	cmp	r3, #0
 23eab9c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 23eaba0:	bfac      	ite	ge
 23eaba2:	4611      	movge	r1, r2
 23eaba4:	2100      	movlt	r1, #0
 23eaba6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23eabaa:	bfb8      	it	lt
 23eabac:	2200      	movlt	r2, #0
 23eabae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23eabb0:	fb00 3301 	mla	r3, r0, r1, r3
 23eabb4:	9300      	str	r3, [sp, #0]
 23eabb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23eabb8:	4413      	add	r3, r2
 23eabba:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
 23eabbc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23eabbe:	07d9      	lsls	r1, r3, #31
 23eabc0:	d517      	bpl.n	23eabf2 <arm_nn_mat_mult_nt_t_s8+0x66e>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23eabc2:	2700      	movs	r7, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eabc4:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 23eabc8:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eabca:	f04f 0901 	mov.w	r9, #1
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 23eabce:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 23eabd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23eabd4:	3c01      	subs	r4, #1
 23eabd6:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23eabda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23eabdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23eabe0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23eabe2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23eabe6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23eabe8:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23eabec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23eabee:	429f      	cmp	r7, r3
 23eabf0:	db03      	blt.n	23eabfa <arm_nn_mat_mult_nt_t_s8+0x676>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
 23eabf2:	2000      	movs	r0, #0
 23eabf4:	b01b      	add	sp, #108	; 0x6c
 23eabf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
 23eabfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23eabfc:	2b00      	cmp	r3, #0
 23eabfe:	d038      	beq.n	23eac72 <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
 23eac00:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
 23eac04:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eac06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 23eac08:	428b      	cmp	r3, r1
 23eac0a:	db34      	blt.n	23eac76 <arm_nn_mat_mult_nt_t_s8+0x6f2>
 23eac0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23eac0e:	6821      	ldr	r1, [r4, #0]
 23eac10:	4473      	add	r3, lr
 23eac12:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eac14:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23eac18:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eac1a:	46c2      	mov	sl, r8
 23eac1c:	4663      	mov	r3, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eac1e:	2900      	cmp	r1, #0
 23eac20:	bfc8      	it	gt
 23eac22:	2100      	movgt	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eac24:	6806      	ldr	r6, [r0, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eac26:	bfd8      	it	le
 23eac28:	4249      	negle	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eac2a:	fbc5 3a06 	smlal	r3, sl, r5, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eac2e:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
 23eac32:	0fdb      	lsrs	r3, r3, #31
 23eac34:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eac38:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
 23eac3a:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
 23eac3e:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
 23eac42:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
 23eac46:	bf48      	it	mi
 23eac48:	3501      	addmi	r5, #1
            res00 += dst_offset;
 23eac4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23eac4c:	42ae      	cmp	r6, r5
        result++;
 23eac4e:	bfc8      	it	gt
 23eac50:	f10a 0a01 	addgt.w	sl, sl, #1
 23eac54:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
 23eac56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23eac58:	3701      	adds	r7, #1
            res00 = MAX(res00, activation_min);
 23eac5a:	459a      	cmp	sl, r3
 23eac5c:	bfb8      	it	lt
 23eac5e:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
 23eac60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23eac62:	459a      	cmp	sl, r3
 23eac64:	bfa8      	it	ge
 23eac66:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
 23eac68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
 23eac6a:	f882 a000 	strb.w	sl, [r2]
            dst_ptr += rhs_rows;
 23eac6e:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23eac70:	e7bc      	b.n	23eabec <arm_nn_mat_mult_nt_t_s8+0x668>
            q31_t res00 = 0;
 23eac72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23eac74:	e7c6      	b.n	23eac04 <arm_nn_mat_mult_nt_t_s8+0x680>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eac76:	990c      	ldr	r1, [sp, #48]	; 0x30
 23eac78:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 23eac7a:	56c9      	ldrsb	r1, [r1, r3]
 23eac7c:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
 23eac7e:	9e00      	ldr	r6, [sp, #0]
 23eac80:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eac82:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
 23eac84:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eac88:	e7bd      	b.n	23eac06 <arm_nn_mat_mult_nt_t_s8+0x682>

023eac8a <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 23eac8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eac8e:	b095      	sub	sp, #84	; 0x54
#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23eac90:	9c22      	ldr	r4, [sp, #136]	; 0x88
{
 23eac92:	9001      	str	r0, [sp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eac94:	9822      	ldr	r0, [sp, #136]	; 0x88
 23eac96:	2c00      	cmp	r4, #0
 23eac98:	f1c0 0000 	rsb	r0, r0, #0
 23eac9c:	bfc8      	it	gt
 23eac9e:	2000      	movgt	r0, #0
 23eaca0:	9004      	str	r0, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eaca2:	2001      	movs	r0, #1
 23eaca4:	9c04      	ldr	r4, [sp, #16]
 23eaca6:	9308      	str	r3, [sp, #32]
 23eaca8:	40a0      	lsls	r0, r4
 23eacaa:	3801      	subs	r0, #1
 23eacac:	9005      	str	r0, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23eacae:	1040      	asrs	r0, r0, #1
 23eacb0:	9006      	str	r0, [sp, #24]
        threshold++;
 23eacb2:	3001      	adds	r0, #1
 23eacb4:	9009      	str	r0, [sp, #36]	; 0x24
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 23eacb6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 23eacb8:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 23eacba:	0040      	lsls	r0, r0, #1
 23eacbc:	900a      	str	r0, [sp, #40]	; 0x28
 23eacbe:	9808      	ldr	r0, [sp, #32]
 23eacc0:	2c00      	cmp	r4, #0
 23eacc2:	f100 0002 	add.w	r0, r0, #2
 23eacc6:	9002      	str	r0, [sp, #8]
 23eacc8:	9823      	ldr	r0, [sp, #140]	; 0x8c
{
 23eacca:	910c      	str	r1, [sp, #48]	; 0x30
 23eaccc:	ea4f 1010 	mov.w	r0, r0, lsr #4
 23eacd0:	900e      	str	r0, [sp, #56]	; 0x38
 23eacd2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23eacd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23eacd6:	f020 000f 	bic.w	r0, r0, #15
 23eacda:	bfb8      	it	lt
 23eacdc:	2000      	movlt	r0, #0
 23eacde:	9007      	str	r0, [sp, #28]
 23eace0:	9c07      	ldr	r4, [sp, #28]
 23eace2:	9801      	ldr	r0, [sp, #4]
 23eace4:	b219      	sxth	r1, r3
 23eace6:	4420      	add	r0, r4
 23eace8:	900b      	str	r0, [sp, #44]	; 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eacea:	980c      	ldr	r0, [sp, #48]	; 0x30
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23eacec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eacee:	9003      	str	r0, [sp, #12]
 23eacf0:	9824      	ldr	r0, [sp, #144]	; 0x90
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23eacf2:	b21b      	sxth	r3, r3
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eacf4:	3801      	subs	r0, #1
 23eacf6:	900f      	str	r0, [sp, #60]	; 0x3c
 23eacf8:	9808      	ldr	r0, [sp, #32]
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23eacfa:	eac1 4101 	pkhbt	r1, r1, r1, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eacfe:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 23ead02:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 23ead06:	30fe      	adds	r0, #254	; 0xfe
 23ead08:	9010      	str	r0, [sp, #64]	; 0x40
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ead0a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 23ead0c:	eac3 4303 	pkhbt	r3, r3, r3, lsl #16
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ead10:	380f      	subs	r0, #15
 23ead12:	9011      	str	r0, [sp, #68]	; 0x44
 23ead14:	1e60      	subs	r0, r4, #1
 23ead16:	9012      	str	r0, [sp, #72]	; 0x48
 23ead18:	9801      	ldr	r0, [sp, #4]
 23ead1a:	4240      	negs	r0, r0
 23ead1c:	9013      	str	r0, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ead1e:	9822      	ldr	r0, [sp, #136]	; 0x88
 23ead20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ead24:	900d      	str	r0, [sp, #52]	; 0x34
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23ead26:	9c02      	ldr	r4, [sp, #8]
 23ead28:	9810      	ldr	r0, [sp, #64]	; 0x40
 23ead2a:	4420      	add	r0, r4
 23ead2c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 23ead2e:	4284      	cmp	r4, r0
 23ead30:	dc67      	bgt.n	23eae02 <arm_nn_vec_mat_mult_t_s8+0x178>
 23ead32:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23ead34:	9824      	ldr	r0, [sp, #144]	; 0x90
 23ead36:	2c00      	cmp	r4, #0
 23ead38:	ea4f 0050 	mov.w	r0, r0, lsr #1
 23ead3c:	bfac      	ite	ge
 23ead3e:	4684      	movge	ip, r0
 23ead40:	f04f 0c00 	movlt.w	ip, #0
 23ead44:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23ead48:	bfb8      	it	lt
 23ead4a:	2000      	movlt	r0, #0
 23ead4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23ead4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23ead50:	fb05 4c0c 	mla	ip, r5, ip, r4
 23ead54:	9c08      	ldr	r4, [sp, #32]
 23ead56:	4404      	add	r4, r0
 23ead58:	4620      	mov	r0, r4
    }

    if (rhs_rows % 2)
 23ead5a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23ead5c:	07e4      	lsls	r4, r4, #31
 23ead5e:	d54c      	bpl.n	23eadfa <arm_nn_vec_mat_mult_t_s8+0x170>
    {
        const q7_t *lhs_ptr = &lhs[0];
        const q7_t *rhs_ptr = &rhs[0];

        q31_t res00 = 0;
        if (bias)
 23ead60:	b102      	cbz	r2, 23ead64 <arm_nn_vec_mat_mult_t_s8+0xda>
        {
            res00 = *bias++;
 23ead62:	6812      	ldr	r2, [r2, #0]
        q31_t res00 = 0;
 23ead64:	2500      	movs	r5, #0
        }

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23ead66:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 23ead68:	f1a4 090f 	sub.w	r9, r4, #15
 23ead6c:	9c01      	ldr	r4, [sp, #4]
 23ead6e:	45a9      	cmp	r9, r5
 23ead70:	eb04 0805 	add.w	r8, r4, r5
 23ead74:	eb0c 0e05 	add.w	lr, ip, r5
 23ead78:	f300 814c 	bgt.w	23eb014 <arm_nn_vec_mat_mult_t_s8+0x38a>
 23ead7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 23ead7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ead80:	2900      	cmp	r1, #0
 23ead82:	ea4f 1303 	mov.w	r3, r3, lsl #4
 23ead86:	bfb8      	it	lt
 23ead88:	2300      	movlt	r3, #0
 23ead8a:	9907      	ldr	r1, [sp, #28]
 23ead8c:	3901      	subs	r1, #1
 23ead8e:	448c      	add	ip, r1
 23ead90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23ead92:	1a5b      	subs	r3, r3, r1
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23ead94:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 23ead96:	18cc      	adds	r4, r1, r3
 23ead98:	42a5      	cmp	r5, r4
 23ead9a:	f300 818d 	bgt.w	23eb0b8 <arm_nn_vec_mat_mult_t_s8+0x42e>
 23ead9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eada0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eada4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23eada8:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eadaa:	2300      	movs	r3, #0
 23eadac:	461c      	mov	r4, r3
 23eadae:	9d21      	ldr	r5, [sp, #132]	; 0x84
 23eadb0:	fbc2 1405 	smlal	r1, r4, r2, r5
    result = (int32_t)(mult.long_long >> 31);
 23eadb4:	0fca      	lsrs	r2, r1, #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eadb6:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (int32_t)(mult.long_long >> 31);
 23eadb8:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eadbc:	4299      	cmp	r1, r3
 23eadbe:	bfd8      	it	le
 23eadc0:	460b      	movle	r3, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eadc2:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eadc6:	bfd8      	it	le
 23eadc8:	425b      	negle	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eadca:	4099      	lsls	r1, r3
 23eadcc:	3901      	subs	r1, #1
    if (result < 0)
 23eadce:	fa52 f303 	asrs.w	r3, r2, r3
    int32_t remainder = remainder_mask & dividend;
 23eadd2:	ea02 0401 	and.w	r4, r2, r1
    q31_t threshold = remainder_mask >> 1;
 23eadd6:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23eadda:	bf48      	it	mi
 23eaddc:	3101      	addmi	r1, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 23eadde:	9a20      	ldr	r2, [sp, #128]	; 0x80
    if (remainder > threshold)
 23eade0:	428c      	cmp	r4, r1
        result++;
 23eade2:	bfc8      	it	gt
 23eade4:	3301      	addgt	r3, #1
 23eade6:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 23eade8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 23eadea:	4293      	cmp	r3, r2
 23eadec:	bfb8      	it	lt
 23eadee:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 23eadf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23eadf2:	4293      	cmp	r3, r2
 23eadf4:	bfa8      	it	ge
 23eadf6:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 23eadf8:	7003      	strb	r3, [r0, #0]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 23eadfa:	2000      	movs	r0, #0
 23eadfc:	b015      	add	sp, #84	; 0x54
 23eadfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
 23eae02:	2a00      	cmp	r2, #0
 23eae04:	d06c      	beq.n	23eaee0 <arm_nn_vec_mat_mult_t_s8+0x256>
            res00 = *bias++;
 23eae06:	4615      	mov	r5, r2
 23eae08:	f855 4b08 	ldr.w	r4, [r5], #8
            res01 = *bias++;
 23eae0c:	6850      	ldr	r0, [r2, #4]
 23eae0e:	462a      	mov	r2, r5
        int32_t rhs_cols_idx = 0;
 23eae10:	f04f 0c00 	mov.w	ip, #0
 23eae14:	9d03      	ldr	r5, [sp, #12]
 23eae16:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 23eae18:	19af      	adds	r7, r5, r6
 23eae1a:	9d01      	ldr	r5, [sp, #4]
 23eae1c:	eb05 080c 	add.w	r8, r5, ip
 23eae20:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 23eae22:	eba7 0e05 	sub.w	lr, r7, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eae26:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23eae28:	4565      	cmp	r5, ip
 23eae2a:	dc5c      	bgt.n	23eaee6 <arm_nn_vec_mat_mult_t_s8+0x25c>
 23eae2c:	9d03      	ldr	r5, [sp, #12]
 23eae2e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 23eae30:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 23eae34:	19af      	adds	r7, r5, r6
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eae36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 23eae38:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 23eae3a:	4475      	add	r5, lr
 23eae3c:	42ae      	cmp	r6, r5
 23eae3e:	f300 80d7 	bgt.w	23eaff0 <arm_nn_vec_mat_mult_t_s8+0x366>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eae42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eae44:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eae48:	40ac      	lsls	r4, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eae4a:	2500      	movs	r5, #0
 23eae4c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 23eae4e:	fbc4 6507 	smlal	r6, r5, r4, r7
    result = (int32_t)(mult.long_long >> 31);
 23eae52:	0ff4      	lsrs	r4, r6, #31
 23eae54:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23eae58:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 23eae5a:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23eae5c:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23eae5e:	4025      	ands	r5, r4
    q31_t threshold = remainder_mask >> 1;
 23eae60:	4134      	asrs	r4, r6
 23eae62:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23eae64:	bf58      	it	pl
 23eae66:	463e      	movpl	r6, r7
    if (remainder > threshold)
 23eae68:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eae6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eae6c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23eae6e:	fa00 f605 	lsl.w	r6, r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23eae72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23eae76:	f04f 0500 	mov.w	r5, #0
 23eae7a:	fbc6 0507 	smlal	r0, r5, r6, r7
    result = (int32_t)(mult.long_long >> 31);
 23eae7e:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 23eae82:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23eae86:	9e04      	ldr	r6, [sp, #16]
    int32_t remainder = remainder_mask & dividend;
 23eae88:	9d05      	ldr	r5, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23eae8a:	9f06      	ldr	r7, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23eae8c:	ea00 0505 	and.w	r5, r0, r5
        result++;
 23eae90:	bfc8      	it	gt
 23eae92:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
 23eae94:	4130      	asrs	r0, r6
 23eae96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23eae98:	bf58      	it	pl
 23eae9a:	463e      	movpl	r6, r7
    if (remainder > threshold)
 23eae9c:	42b5      	cmp	r5, r6
        res00 += dst_offset;
 23eae9e:	9d20      	ldr	r5, [sp, #128]	; 0x80
        result++;
 23eaea0:	bfc8      	it	gt
 23eaea2:	3001      	addgt	r0, #1
 23eaea4:	442c      	add	r4, r5
        res01 += dst_offset;
 23eaea6:	4428      	add	r0, r5
        res00 = MAX(res00, activation_min);
 23eaea8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 23eaeaa:	42ac      	cmp	r4, r5
 23eaeac:	bfb8      	it	lt
 23eaeae:	462c      	movlt	r4, r5
        res01 = MAX(res01, activation_min);
 23eaeb0:	42a8      	cmp	r0, r5
 23eaeb2:	bfb8      	it	lt
 23eaeb4:	4628      	movlt	r0, r5
        res00 = MIN(res00, activation_max);
 23eaeb6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 23eaeb8:	42ac      	cmp	r4, r5
 23eaeba:	bfa8      	it	ge
 23eaebc:	462c      	movge	r4, r5
        *dst++ = (q7_t)res00;
 23eaebe:	9d02      	ldr	r5, [sp, #8]
 23eaec0:	f805 4c02 	strb.w	r4, [r5, #-2]
        res01 = MIN(res01, activation_max);
 23eaec4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 23eaec6:	42a0      	cmp	r0, r4
 23eaec8:	bfa8      	it	ge
 23eaeca:	4620      	movge	r0, r4
        rhs += 2 * rhs_cols;
 23eaecc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        *dst++ = (q7_t)res01;
 23eaece:	f805 0c01 	strb.w	r0, [r5, #-1]
        rhs += 2 * rhs_cols;
 23eaed2:	9803      	ldr	r0, [sp, #12]
 23eaed4:	4420      	add	r0, r4
 23eaed6:	9003      	str	r0, [sp, #12]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23eaed8:	4628      	mov	r0, r5
 23eaeda:	3002      	adds	r0, #2
 23eaedc:	9002      	str	r0, [sp, #8]
 23eaede:	e722      	b.n	23ead26 <arm_nn_vec_mat_mult_t_s8+0x9c>
        q31_t res01 = 0;
 23eaee0:	4610      	mov	r0, r2
        q31_t res00 = 0;
 23eaee2:	4614      	mov	r4, r2
 23eaee4:	e794      	b.n	23eae10 <arm_nn_vec_mat_mult_t_s8+0x186>
    memcpy(&val, *in_q7, 4);
 23eaee6:	9d01      	ldr	r5, [sp, #4]
 23eaee8:	f8de b000 	ldr.w	fp, [lr]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaeec:	f855 500c 	ldr.w	r5, [r5, ip]
 23eaef0:	fa23 f68b 	sxtab16	r6, r3, fp
 23eaef4:	fa21 fa85 	sxtab16	sl, r1, r5
 23eaef8:	f8d7 9000 	ldr.w	r9, [r7]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eaefc:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23eaf00:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf04:	fa23 fb8b 	sxtab16	fp, r3, fp
 23eaf08:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf0c:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf10:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf14:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf18:	f8de b004 	ldr.w	fp, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eaf1c:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf20:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf24:	fb2a 0006 	smlad	r0, sl, r6, r0
 23eaf28:	fb25 0009 	smlad	r0, r5, r9, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf2c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23eaf30:	fa23 f68b 	sxtab16	r6, r3, fp
 23eaf34:	fa21 fa85 	sxtab16	sl, r1, r5
 23eaf38:	f8d7 9004 	ldr.w	r9, [r7, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eaf3c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23eaf40:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf44:	fa23 fb8b 	sxtab16	fp, r3, fp
 23eaf48:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf4c:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf50:	fa23 f689 	sxtab16	r6, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf54:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf58:	f8de b008 	ldr.w	fp, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eaf5c:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf60:	fa23 f989 	sxtab16	r9, r3, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf64:	fb2a 0606 	smlad	r6, sl, r6, r0
 23eaf68:	fb25 6609 	smlad	r6, r5, r9, r6
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 23eaf70:	fa23 f08b 	sxtab16	r0, r3, fp
 23eaf74:	fa21 f985 	sxtab16	r9, r1, r5
 23eaf78:	f8d7 a008 	ldr.w	sl, [r7, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eaf7c:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23eaf80:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf84:	fa23 fb8b 	sxtab16	fp, r3, fp
 23eaf88:	fa21 f585 	sxtab16	r5, r1, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf8c:	fb29 4400 	smlad	r4, r9, r0, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf90:	fa23 f08a 	sxtab16	r0, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eaf94:	fb25 440b 	smlad	r4, r5, fp, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eaf98:	f8de b00c 	ldr.w	fp, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 23eaf9c:	ea4f 2a3a 	mov.w	sl, sl, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eafa0:	fa23 fa8a 	sxtab16	sl, r3, sl
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eafa4:	fb29 6000 	smlad	r0, r9, r0, r6
 23eafa8:	fb25 050a 	smlad	r5, r5, sl, r0
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eafac:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 23eafb0:	fa23 f68b 	sxtab16	r6, r3, fp
 23eafb4:	fa21 fa8e 	sxtab16	sl, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 23eafb8:	ea4f 2b3b 	mov.w	fp, fp, ror #8
 23eafbc:	f8d7 800c 	ldr.w	r8, [r7, #12]
 23eafc0:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eafc4:	fa23 f98b 	sxtab16	r9, r3, fp
 23eafc8:	fa21 fe8e 	sxtab16	lr, r1, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eafcc:	fb2a 4406 	smlad	r4, sl, r6, r4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eafd0:	fa23 fb88 	sxtab16	fp, r3, r8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eafd4:	fb2e 4409 	smlad	r4, lr, r9, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 23eafd8:	ea4f 2038 	mov.w	r0, r8, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eafdc:	fa23 f080 	sxtab16	r0, r3, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eafe0:	fb2a 550b 	smlad	r5, sl, fp, r5
 23eafe4:	fb2e 5000 	smlad	r0, lr, r0, r5
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eafe8:	f10c 0c10 	add.w	ip, ip, #16
 23eafec:	3710      	adds	r7, #16
 23eafee:	e714      	b.n	23eae1a <arm_nn_vec_mat_mult_t_s8+0x190>
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eaff0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 23eaff2:	f91e 5b01 	ldrsb.w	r5, [lr], #1
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23eaff6:	f917 cf01 	ldrsb.w	ip, [r7, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eaffa:	4435      	add	r5, r6
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23eaffc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 23eaffe:	44b4      	add	ip, r6
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 23eb000:	9e23      	ldr	r6, [sp, #140]	; 0x8c
            res00 += lhs_value * rhs_value0;
 23eb002:	fb05 440c 	mla	r4, r5, ip, r4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 23eb006:	f917 c006 	ldrsb.w	ip, [r7, r6]
 23eb00a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 23eb00c:	44b4      	add	ip, r6
            res01 += lhs_value * rhs_value1;
 23eb00e:	fb05 000c 	mla	r0, r5, ip, r0
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eb012:	e710      	b.n	23eae36 <arm_nn_vec_mat_mult_t_s8+0x1ac>
 23eb014:	9c01      	ldr	r4, [sp, #4]
 23eb016:	f85c 7005 	ldr.w	r7, [ip, r5]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb01a:	5966      	ldr	r6, [r4, r5]
 23eb01c:	fa23 fb87 	sxtab16	fp, r3, r7
 23eb020:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb024:	ea4f 2737 	mov.w	r7, r7, ror #8
 23eb028:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb02c:	fa23 f787 	sxtab16	r7, r3, r7
 23eb030:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eb034:	fb2a 220b 	smlad	r2, sl, fp, r2
 23eb038:	fb26 2207 	smlad	r2, r6, r7, r2
 23eb03c:	f8de 4004 	ldr.w	r4, [lr, #4]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb040:	f8d8 6004 	ldr.w	r6, [r8, #4]
 23eb044:	fa23 fb84 	sxtab16	fp, r3, r4
 23eb048:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb04c:	ea4f 2434 	mov.w	r4, r4, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb050:	fa23 f784 	sxtab16	r7, r3, r4
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb054:	ea4f 2436 	mov.w	r4, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb058:	fa21 f484 	sxtab16	r4, r1, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eb05c:	fb2a 220b 	smlad	r2, sl, fp, r2
 23eb060:	fb24 2407 	smlad	r4, r4, r7, r2
 23eb064:	f8de 7008 	ldr.w	r7, [lr, #8]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb068:	f8d8 6008 	ldr.w	r6, [r8, #8]
 23eb06c:	fa23 fb87 	sxtab16	fp, r3, r7
 23eb070:	fa21 fa86 	sxtab16	sl, r1, r6
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb074:	ea4f 2737 	mov.w	r7, r7, ror #8
 23eb078:	ea4f 2636 	mov.w	r6, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb07c:	fa23 f787 	sxtab16	r7, r3, r7
 23eb080:	fa21 f686 	sxtab16	r6, r1, r6
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eb084:	fb2a 440b 	smlad	r4, sl, fp, r4
 23eb088:	fb26 4607 	smlad	r6, r6, r7, r4
 23eb08c:	f8de 200c 	ldr.w	r2, [lr, #12]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb090:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 23eb094:	fa23 f482 	sxtab16	r4, r3, r2
 23eb098:	fa21 f78e 	sxtab16	r7, r1, lr
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb09c:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb0a0:	fa23 f882 	sxtab16	r8, r3, r2
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb0a4:	ea4f 223e 	mov.w	r2, lr, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb0a8:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23eb0ac:	fb27 6604 	smlad	r6, r7, r4, r6
 23eb0b0:	fb22 6208 	smlad	r2, r2, r8, r6
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23eb0b4:	3510      	adds	r5, #16
 23eb0b6:	e659      	b.n	23ead6c <arm_nn_vec_mat_mult_t_s8+0xe2>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23eb0b8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 23eb0ba:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eb0be:	9e1e      	ldr	r6, [sp, #120]	; 0x78
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 23eb0c0:	442c      	add	r4, r5
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23eb0c2:	f911 5b01 	ldrsb.w	r5, [r1], #1
 23eb0c6:	4435      	add	r5, r6
            res00 += lhs_value * rhs_value0;
 23eb0c8:	fb05 2204 	mla	r2, r5, r4, r2
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23eb0cc:	e662      	b.n	23ead94 <arm_nn_vec_mat_mult_t_s8+0x10a>

023eb0ce <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 23eb0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 23eb0d2:	eac3 4c03 	pkhbt	ip, r3, r3, lsl #16
    while (block_cnt > 0)
 23eb0d6:	460e      	mov	r6, r1
 23eb0d8:	f022 0403 	bic.w	r4, r2, #3
    block_cnt = block_size >> 2;
 23eb0dc:	ea4f 0e92 	mov.w	lr, r2, lsr #2
    while (block_cnt > 0)
 23eb0e0:	4404      	add	r4, r0
 23eb0e2:	42a0      	cmp	r0, r4
 23eb0e4:	d108      	bne.n	23eb0f8 <arm_q7_to_q15_with_offset+0x2a>
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 23eb0e6:	f002 0203 	and.w	r2, r2, #3
 23eb0ea:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 23eb0ee:	4422      	add	r2, r4
 23eb0f0:	4294      	cmp	r4, r2
 23eb0f2:	d113      	bne.n	23eb11c <arm_q7_to_q15_with_offset+0x4e>
        *dst++ = (q15_t)*src++ + offset;

        /* Decrement the loop counter */
        block_cnt--;
    }
}
 23eb0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23eb0f8:	f850 5b04 	ldr.w	r5, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb0fc:	3608      	adds	r6, #8
  return (op1 >> op2) | (op1 << (32U - op2));
 23eb0fe:	ea4f 2735 	mov.w	r7, r5, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23eb102:	fa2c f585 	sxtab16	r5, ip, r5
 23eb106:	fa2c f787 	sxtab16	r7, ip, r7
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 23eb10a:	eac7 4825 	pkhtb	r8, r7, r5, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 23eb10e:	eac5 4507 	pkhbt	r5, r5, r7, lsl #16
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
 23eb112:	f846 8c04 	str.w	r8, [r6, #-4]
 23eb116:	f846 5c08 	str.w	r5, [r6, #-8]
        block_cnt--;
 23eb11a:	e7e2      	b.n	23eb0e2 <arm_q7_to_q15_with_offset+0x14>
        *dst++ = (q15_t)*src++ + offset;
 23eb11c:	f914 0b01 	ldrsb.w	r0, [r4], #1
 23eb120:	4418      	add	r0, r3
 23eb122:	f821 0b02 	strh.w	r0, [r1], #2
        block_cnt--;
 23eb126:	e7e3      	b.n	23eb0f0 <arm_q7_to_q15_with_offset+0x22>

023eb128 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 23eb128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eb12c:	469b      	mov	fp, r3
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23eb12e:	2300      	movs	r3, #0
{
 23eb130:	b08f      	sub	sp, #60	; 0x3c
 23eb132:	9008      	str	r0, [sp, #32]
 23eb134:	910b      	str	r1, [sp, #44]	; 0x2c
 23eb136:	9202      	str	r2, [sp, #8]
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23eb138:	9300      	str	r3, [sp, #0]
 23eb13a:	9303      	str	r3, [sp, #12]
 23eb13c:	9a00      	ldr	r2, [sp, #0]
 23eb13e:	9b08      	ldr	r3, [sp, #32]
 23eb140:	4413      	add	r3, r2
 23eb142:	9304      	str	r3, [sp, #16]
 23eb144:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23eb146:	4413      	add	r3, r2
 23eb148:	9307      	str	r3, [sp, #28]
 23eb14a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23eb14c:	9b03      	ldr	r3, [sp, #12]
 23eb14e:	4293      	cmp	r3, r2
 23eb150:	db02      	blt.n	23eb158 <arm_softmax_s8+0x30>
        input += row_size;
        output += row_size;
    }

#endif
}
 23eb152:	b00f      	add	sp, #60	; 0x3c
 23eb154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
 23eb158:	9b08      	ldr	r3, [sp, #32]
 23eb15a:	9a00      	ldr	r2, [sp, #0]
 23eb15c:	569b      	ldrsb	r3, [r3, r2]
 23eb15e:	9301      	str	r3, [sp, #4]
        for (col = 1; col < row_size; ++col)
 23eb160:	2301      	movs	r3, #1
 23eb162:	9a02      	ldr	r2, [sp, #8]
 23eb164:	4293      	cmp	r3, r2
 23eb166:	f2c0 8134 	blt.w	23eb3d2 <arm_softmax_s8+0x2aa>
        int32_t sum = 0;
 23eb16a:	2300      	movs	r3, #0
        for (col = 0; col < row_size; ++col)
 23eb16c:	469e      	mov	lr, r3
        mult = 1 - mult;
 23eb16e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 23eb3e8 <arm_softmax_s8+0x2c0>
 23eb172:	9a02      	ldr	r2, [sp, #8]
 23eb174:	4596      	cmp	lr, r2
 23eb176:	f2c0 8139 	blt.w	23eb3ec <arm_softmax_s8+0x2c4>
  return __builtin_clz(value);
 23eb17a:	fab3 f283 	clz	r2, r3
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 23eb17e:	4093      	lsls	r3, r2
 23eb180:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 23eb184:	17d9      	asrs	r1, r3, #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23eb186:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 23eb18a:	f141 0100 	adc.w	r1, r1, #0
 23eb18e:	085b      	lsrs	r3, r3, #1
 23eb190:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 23eb194:	f1c2 0a23 	rsb	sl, r2, #35	; 0x23
    mult = mult + (q63_t)m1 * m2;
 23eb198:	4a92      	ldr	r2, [pc, #584]	; (23eb3e4 <arm_softmax_s8+0x2bc>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23eb19a:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 23eb19c:	425c      	negs	r4, r3
 23eb19e:	fb02 4401 	mla	r4, r2, r1, r4
 23eb1a2:	fba3 2002 	umull	r2, r0, r3, r2
 23eb1a6:	4404      	add	r4, r0
 23eb1a8:	488f      	ldr	r0, [pc, #572]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb1aa:	1812      	adds	r2, r2, r0
    result = (int32_t)(mult / (1ll << 31));
 23eb1ac:	f164 0400 	sbc.w	r4, r4, #0
 23eb1b0:	2c00      	cmp	r4, #0
 23eb1b2:	da04      	bge.n	23eb1be <arm_softmax_s8+0x96>
 23eb1b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb1b8:	1812      	adds	r2, r2, r0
 23eb1ba:	f144 0400 	adc.w	r4, r4, #0
 23eb1be:	0fd2      	lsrs	r2, r2, #31
 23eb1c0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 23eb1c4:	f102 305a 	add.w	r0, r2, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 23eb1c8:	fb00 f501 	mul.w	r5, r0, r1
 23eb1cc:	17c2      	asrs	r2, r0, #31
 23eb1ce:	fb03 5502 	mla	r5, r3, r2, r5
 23eb1d2:	fba0 4203 	umull	r4, r2, r0, r3
 23eb1d6:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
 23eb1da:	eb45 0202 	adc.w	r2, r5, r2
    result = (int32_t)(mult / (1ll << 31));
 23eb1de:	0fe4      	lsrs	r4, r4, #31
 23eb1e0:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23eb1e4:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
 23eb1e8:	2c00      	cmp	r4, #0
 23eb1ea:	bfac      	ite	ge
 23eb1ec:	2500      	movge	r5, #0
 23eb1ee:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 23eb1f2:	4a7d      	ldr	r2, [pc, #500]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb1f4:	bfa8      	it	ge
 23eb1f6:	f04f 4280 	movge.w	r2, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb1fa:	fbc0 2504 	smlal	r2, r5, r0, r4
 23eb1fe:	2d00      	cmp	r5, #0
 23eb200:	da04      	bge.n	23eb20c <arm_softmax_s8+0xe4>
 23eb202:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23eb206:	1912      	adds	r2, r2, r4
 23eb208:	f145 0500 	adc.w	r5, r5, #0
 23eb20c:	0fd2      	lsrs	r2, r2, #31
 23eb20e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23eb212:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        mult = 1 - mult;
 23eb216:	2a00      	cmp	r2, #0
 23eb218:	4d73      	ldr	r5, [pc, #460]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb21a:	bfa6      	itte	ge
 23eb21c:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23eb220:	f04f 0c00 	movge.w	ip, #0
 23eb224:	f04f 3cff 	movlt.w	ip, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23eb228:	fb02 f401 	mul.w	r4, r2, r1
 23eb22c:	17d0      	asrs	r0, r2, #31
 23eb22e:	fb03 4400 	mla	r4, r3, r0, r4
 23eb232:	fba2 0e03 	umull	r0, lr, r2, r3
 23eb236:	1940      	adds	r0, r0, r5
 23eb238:	4474      	add	r4, lr
    result = (int32_t)(mult / (1ll << 31));
 23eb23a:	eb44 040c 	adc.w	r4, r4, ip
 23eb23e:	2c00      	cmp	r4, #0
    if ((m1 < 0) ^ (m2 < 0))
 23eb240:	ea4f 76d2 	mov.w	r6, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23eb244:	da04      	bge.n	23eb250 <arm_softmax_s8+0x128>
 23eb246:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 23eb24a:	1940      	adds	r0, r0, r5
 23eb24c:	f144 0400 	adc.w	r4, r4, #0
 23eb250:	0fc0      	lsrs	r0, r0, #31
 23eb252:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23eb256:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
 23eb25a:	ebb6 7fd0 	cmp.w	r6, r0, lsr #31
 23eb25e:	bf0c      	ite	eq
 23eb260:	2400      	moveq	r4, #0
 23eb262:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 23eb266:	4e60      	ldr	r6, [pc, #384]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb268:	bf08      	it	eq
 23eb26a:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb26e:	fbc2 6400 	smlal	r6, r4, r2, r0
 23eb272:	4625      	mov	r5, r4
 23eb274:	2d00      	cmp	r5, #0
 23eb276:	4634      	mov	r4, r6
 23eb278:	da04      	bge.n	23eb284 <arm_softmax_s8+0x15c>
 23eb27a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb27e:	1834      	adds	r4, r6, r0
 23eb280:	f145 0500 	adc.w	r5, r5, #0
 23eb284:	0fe4      	lsrs	r4, r4, #31
 23eb286:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb28a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 23eb28e:	bfab      	itete	ge
 23eb290:	2000      	movge	r0, #0
 23eb292:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 23eb296:	f06f 4500 	mvnge.w	r5, #2147483648	; 0x80000000
 23eb29a:	2500      	movlt	r5, #0
 23eb29c:	ea00 0084 	and.w	r0, r0, r4, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb2a0:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb2a4:	ea80 0005 	eor.w	r0, r0, r5
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb2a8:	bfcb      	itete	gt
 23eb2aa:	f04f 35ff 	movgt.w	r5, #4294967295	; 0xffffffff
 23eb2ae:	2500      	movle	r5, #0
 23eb2b0:	2400      	movgt	r4, #0
 23eb2b2:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
 23eb2b6:	4028      	ands	r0, r5
 23eb2b8:	4060      	eors	r0, r4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23eb2ba:	4402      	add	r2, r0
        mult = 1 - mult;
 23eb2bc:	2a00      	cmp	r2, #0
 23eb2be:	484a      	ldr	r0, [pc, #296]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb2c0:	bfa6      	itte	ge
 23eb2c2:	f04f 4080 	movge.w	r0, #1073741824	; 0x40000000
 23eb2c6:	2500      	movge	r5, #0
 23eb2c8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23eb2cc:	4351      	muls	r1, r2
 23eb2ce:	17d6      	asrs	r6, r2, #31
 23eb2d0:	fb03 1106 	mla	r1, r3, r6, r1
 23eb2d4:	fba2 3603 	umull	r3, r6, r2, r3
 23eb2d8:	181b      	adds	r3, r3, r0
 23eb2da:	4431      	add	r1, r6
    result = (int32_t)(mult / (1ll << 31));
 23eb2dc:	eb41 0105 	adc.w	r1, r1, r5
 23eb2e0:	2900      	cmp	r1, #0
    if ((m1 < 0) ^ (m2 < 0))
 23eb2e2:	ea4f 74d2 	mov.w	r4, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23eb2e6:	da04      	bge.n	23eb2f2 <arm_softmax_s8+0x1ca>
 23eb2e8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb2ec:	181b      	adds	r3, r3, r0
 23eb2ee:	f141 0100 	adc.w	r1, r1, #0
 23eb2f2:	0fdb      	lsrs	r3, r3, #31
 23eb2f4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23eb2f8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
        mult = 1 - mult;
 23eb2fc:	ebb4 7fd3 	cmp.w	r4, r3, lsr #31
 23eb300:	bf0c      	ite	eq
 23eb302:	2000      	moveq	r0, #0
 23eb304:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23eb308:	4937      	ldr	r1, [pc, #220]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb30a:	bf08      	it	eq
 23eb30c:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb310:	fbc2 1003 	smlal	r1, r0, r2, r3
 23eb314:	2800      	cmp	r0, #0
 23eb316:	da04      	bge.n	23eb322 <arm_softmax_s8+0x1fa>
 23eb318:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 23eb31c:	18c9      	adds	r1, r1, r3
 23eb31e:	f140 0000 	adc.w	r0, r0, #0
 23eb322:	0fc9      	lsrs	r1, r1, #31
 23eb324:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb328:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 23eb32c:	bfab      	itete	ge
 23eb32e:	2300      	movge	r3, #0
 23eb330:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 23eb334:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23eb338:	2100      	movlt	r1, #0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb33a:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb33e:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb342:	bfd4      	ite	le
 23eb344:	2000      	movle	r0, #0
 23eb346:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb34a:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb34e:	bfd4      	ite	le
 23eb350:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 23eb354:	2100      	movgt	r1, #0
 23eb356:	4018      	ands	r0, r3
 23eb358:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23eb35a:	4402      	add	r2, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb35c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 23eb360:	bfab      	itete	ge
 23eb362:	2300      	movge	r3, #0
 23eb364:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 23eb368:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23eb36c:	2100      	movlt	r1, #0
 23eb36e:	ea03 0342 	and.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb372:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 23eb376:	ea83 0301 	eor.w	r3, r3, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 23eb37a:	bfcb      	itete	gt
 23eb37c:	f04f 31ff 	movgt.w	r1, #4294967295	; 0xffffffff
 23eb380:	2100      	movle	r1, #0
 23eb382:	2200      	movgt	r2, #0
 23eb384:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 23eb388:	400b      	ands	r3, r1
        for (col = 0; col < row_size; ++col)
 23eb38a:	4053      	eors	r3, r2
 23eb38c:	9309      	str	r3, [sp, #36]	; 0x24
 23eb38e:	bf55      	itete	pl
 23eb390:	f04f 4280 	movpl.w	r2, #1073741824	; 0x40000000
 23eb394:	f04f 33ff 	movmi.w	r3, #4294967295	; 0xffffffff
 23eb398:	2300      	movpl	r3, #0
 23eb39a:	4a13      	ldrmi	r2, [pc, #76]	; (23eb3e8 <arm_softmax_s8+0x2c0>)
 23eb39c:	f04f 0c00 	mov.w	ip, #0
 23eb3a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    const q31_t remainder_mask = (1 << exponent) - 1;
 23eb3a4:	2301      	movs	r3, #1
 23eb3a6:	fa03 f30a 	lsl.w	r3, r3, sl
 23eb3aa:	3b01      	subs	r3, #1
 23eb3ac:	9305      	str	r3, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23eb3ae:	105b      	asrs	r3, r3, #1
 23eb3b0:	9306      	str	r3, [sp, #24]
        mult = 1 - mult;
 23eb3b2:	f8df e034 	ldr.w	lr, [pc, #52]	; 23eb3e8 <arm_softmax_s8+0x2c0>
        threshold++;
 23eb3b6:	3301      	adds	r3, #1
 23eb3b8:	930a      	str	r3, [sp, #40]	; 0x28
 23eb3ba:	9b02      	ldr	r3, [sp, #8]
 23eb3bc:	459c      	cmp	ip, r3
 23eb3be:	f2c0 8183 	blt.w	23eb6c8 <arm_softmax_s8+0x5a0>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23eb3c2:	9b03      	ldr	r3, [sp, #12]
 23eb3c4:	9a00      	ldr	r2, [sp, #0]
 23eb3c6:	3301      	adds	r3, #1
 23eb3c8:	9303      	str	r3, [sp, #12]
 23eb3ca:	9b02      	ldr	r3, [sp, #8]
 23eb3cc:	441a      	add	r2, r3
 23eb3ce:	9200      	str	r2, [sp, #0]
 23eb3d0:	e6b4      	b.n	23eb13c <arm_softmax_s8+0x14>
            max = MAX(max, input[col]);
 23eb3d2:	9a04      	ldr	r2, [sp, #16]
 23eb3d4:	9901      	ldr	r1, [sp, #4]
 23eb3d6:	56d2      	ldrsb	r2, [r2, r3]
        for (col = 1; col < row_size; ++col)
 23eb3d8:	3301      	adds	r3, #1
            max = MAX(max, input[col]);
 23eb3da:	4291      	cmp	r1, r2
 23eb3dc:	bfb8      	it	lt
 23eb3de:	4611      	movlt	r1, r2
 23eb3e0:	9101      	str	r1, [sp, #4]
        for (col = 1; col < row_size; ++col)
 23eb3e2:	e6be      	b.n	23eb162 <arm_softmax_s8+0x3a>
 23eb3e4:	c3c3c3c4 	.word	0xc3c3c3c4
 23eb3e8:	c0000001 	.word	0xc0000001
            diff = input[col] - max;
 23eb3ec:	9a04      	ldr	r2, [sp, #16]
 23eb3ee:	f912 000e 	ldrsb.w	r0, [r2, lr]
 23eb3f2:	9a01      	ldr	r2, [sp, #4]
 23eb3f4:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
 23eb3f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23eb3f8:	4282      	cmp	r2, r0
 23eb3fa:	f300 8151 	bgt.w	23eb6a0 <arm_softmax_s8+0x578>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 23eb3fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23eb400:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
 23eb402:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
 23eb404:	ebb2 7fdb 	cmp.w	r2, fp, lsr #31
 23eb408:	bf0b      	itete	eq
 23eb40a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 23eb40e:	4641      	movne	r1, r8
 23eb410:	2200      	moveq	r2, #0
 23eb412:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb416:	fbc0 120b 	smlal	r1, r2, r0, fp
 23eb41a:	2a00      	cmp	r2, #0
 23eb41c:	4614      	mov	r4, r2
 23eb41e:	da04      	bge.n	23eb42a <arm_softmax_s8+0x302>
 23eb420:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23eb424:	1889      	adds	r1, r1, r2
 23eb426:	f144 0400 	adc.w	r4, r4, #0
 23eb42a:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23eb42c:	4558      	cmp	r0, fp
    result = (int32_t)(mult / (1ll << 31));
 23eb42e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23eb432:	d104      	bne.n	23eb43e <arm_softmax_s8+0x316>
        result = Q31_MAX;
 23eb434:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 23eb438:	bf08      	it	eq
 23eb43a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23eb43e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb442:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23eb444:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23eb448:	ebac 0502 	sub.w	r5, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23eb44c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 23eb450:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23eb454:	fbcc 140c 	smlal	r1, r4, ip, ip
 23eb458:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23eb45a:	ea4f 76ec 	mov.w	r6, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23eb45e:	da04      	bge.n	23eb46a <arm_softmax_s8+0x342>
 23eb460:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb464:	1809      	adds	r1, r1, r0
 23eb466:	f144 0400 	adc.w	r4, r4, #0
 23eb46a:	0fc9      	lsrs	r1, r1, #31
 23eb46c:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23eb470:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23eb474:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23eb476:	fb01 fa04 	mul.w	sl, r1, r4
 23eb47a:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb47e:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 23eb482:	f1b9 0f00 	cmp.w	r9, #0
 23eb486:	da05      	bge.n	23eb494 <arm_softmax_s8+0x36c>
 23eb488:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 23eb48c:	eb10 000a 	adds.w	r0, r0, sl
 23eb490:	f149 0900 	adc.w	r9, r9, #0
 23eb494:	0fc0      	lsrs	r0, r0, #31
 23eb496:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23eb49a:	f000 0903 	and.w	r9, r0, #3
        threshold++;
 23eb49e:	1080      	asrs	r0, r0, #2
 23eb4a0:	bf54      	ite	pl
 23eb4a2:	f04f 0a01 	movpl.w	sl, #1
 23eb4a6:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 23eb4aa:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 23eb4ac:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
 23eb4b0:	bfc8      	it	gt
 23eb4b2:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23eb4b4:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
 23eb4b8:	bf0b      	itete	eq
 23eb4ba:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 23eb4be:	46c1      	movne	r9, r8
 23eb4c0:	f04f 0a00 	moveq.w	sl, #0
 23eb4c4:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23eb4c8:	fb0c f404 	mul.w	r4, ip, r4
 23eb4cc:	fb01 4406 	mla	r4, r1, r6, r4
 23eb4d0:	fbac 6701 	umull	r6, r7, ip, r1
 23eb4d4:	eb16 0609 	adds.w	r6, r6, r9
 23eb4d8:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
 23eb4da:	eb44 040a 	adc.w	r4, r4, sl
 23eb4de:	2c00      	cmp	r4, #0
 23eb4e0:	da05      	bge.n	23eb4ee <arm_softmax_s8+0x3c6>
 23eb4e2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23eb4e6:	eb16 0609 	adds.w	r6, r6, r9
 23eb4ea:	f144 0400 	adc.w	r4, r4, #0
 23eb4ee:	0ff6      	lsrs	r6, r6, #31
 23eb4f0:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eb4f4:	4430      	add	r0, r6
        mult = 1 - mult;
 23eb4f6:	2800      	cmp	r0, #0
 23eb4f8:	bfab      	itete	ge
 23eb4fa:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23eb4fe:	4644      	movlt	r4, r8
 23eb500:	2600      	movge	r6, #0
 23eb502:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb506:	4f68      	ldr	r7, [pc, #416]	; (23eb6a8 <arm_softmax_s8+0x580>)
 23eb508:	fbc0 4607 	smlal	r4, r6, r0, r7
 23eb50c:	2e00      	cmp	r6, #0
 23eb50e:	da04      	bge.n	23eb51a <arm_softmax_s8+0x3f2>
 23eb510:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb514:	1824      	adds	r4, r4, r0
 23eb516:	f146 0600 	adc.w	r6, r6, #0
 23eb51a:	0fe4      	lsrs	r4, r4, #31
 23eb51c:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eb520:	440c      	add	r4, r1
    if (result < 0)
 23eb522:	1061      	asrs	r1, r4, #1
 23eb524:	d402      	bmi.n	23eb52c <arm_softmax_s8+0x404>
    if (remainder > threshold)
 23eb526:	07e6      	lsls	r6, r4, #31
        result++;
 23eb528:	bf48      	it	mi
 23eb52a:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eb52c:	448c      	add	ip, r1
        mult = 1 - mult;
 23eb52e:	f1bc 0f00 	cmp.w	ip, #0
 23eb532:	bfab      	itete	ge
 23eb534:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23eb538:	4644      	movlt	r4, r8
 23eb53a:	2100      	movge	r1, #0
 23eb53c:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb540:	485a      	ldr	r0, [pc, #360]	; (23eb6ac <arm_softmax_s8+0x584>)
 23eb542:	fbcc 4100 	smlal	r4, r1, ip, r0
 23eb546:	2900      	cmp	r1, #0
 23eb548:	da04      	bge.n	23eb554 <arm_softmax_s8+0x42c>
 23eb54a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb54e:	1824      	adds	r4, r4, r0
 23eb550:	f141 0100 	adc.w	r1, r1, #0
 23eb554:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23eb556:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23eb558:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23eb55c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23eb560:	4682      	mov	sl, r0
 23eb562:	468c      	mov	ip, r1
    int32_t result = 1895147668 +
 23eb564:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23eb568:	4f51      	ldr	r7, [pc, #324]	; (23eb6b0 <arm_softmax_s8+0x588>)
    int32_t result = 1895147668 +
 23eb56a:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23eb56e:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23eb572:	fbc4 ca07 	smlal	ip, sl, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 23eb576:	f3c5 6600 	ubfx	r6, r5, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb57a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23eb57e:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23eb582:	f345 6900 	sbfx	r9, r5, #24, #1
 23eb586:	3e01      	subs	r6, #1
 23eb588:	ea09 090c 	and.w	r9, r9, ip
 23eb58c:	4034      	ands	r4, r6
    mult = mult + (q63_t)m1 * m2;
 23eb58e:	468c      	mov	ip, r1
 23eb590:	4606      	mov	r6, r0
 23eb592:	4f48      	ldr	r7, [pc, #288]	; (23eb6b4 <arm_softmax_s8+0x58c>)
    SELECT_IF_NON_ZERO(1672461947)
 23eb594:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23eb598:	fbc4 c607 	smlal	ip, r6, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 23eb59c:	f3c5 6a40 	ubfx	sl, r5, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb5a0:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
 23eb5a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb5a8:	ea4c 0c46 	orr.w	ip, ip, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23eb5ac:	ea0a 0a04 	and.w	sl, sl, r4
    mult = mult + (q63_t)m1 * m2;
 23eb5b0:	460e      	mov	r6, r1
 23eb5b2:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23eb5b4:	f345 6940 	sbfx	r9, r5, #25, #1
 23eb5b8:	ea09 090c 	and.w	r9, r9, ip
    mult = mult + (q63_t)m1 * m2;
 23eb5bc:	4f3e      	ldr	r7, [pc, #248]	; (23eb6b8 <arm_softmax_s8+0x590>)
    SELECT_IF_NON_ZERO(1302514674)
 23eb5be:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
 23eb5c2:	fbc9 6407 	smlal	r6, r4, r9, r7
    SELECT_IF_NON_ZERO(790015084)
 23eb5c6:	f3c5 6a80 	ubfx	sl, r5, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb5ca:	0ff6      	lsrs	r6, r6, #31
 23eb5cc:	ea46 0644 	orr.w	r6, r6, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23eb5d0:	f345 6c80 	sbfx	ip, r5, #26, #1
 23eb5d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23eb5d8:	ea0a 0a09 	and.w	sl, sl, r9
 23eb5dc:	ea0c 0c06 	and.w	ip, ip, r6
 23eb5e0:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
 23eb5e4:	460c      	mov	r4, r1
 23eb5e6:	4682      	mov	sl, r0
 23eb5e8:	4e34      	ldr	r6, [pc, #208]	; (23eb6bc <arm_softmax_s8+0x594>)
    SELECT_IF_NON_ZERO(290630308)
 23eb5ea:	f3c5 69c0 	ubfx	r9, r5, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23eb5ee:	fbcc 4a06 	smlal	r4, sl, ip, r6
    result = (int32_t)(mult / (1ll << 31));
 23eb5f2:	0fe4      	lsrs	r4, r4, #31
 23eb5f4:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23eb5f8:	f345 66c0 	sbfx	r6, r5, #27, #1
 23eb5fc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23eb600:	ea09 090c 	and.w	r9, r9, ip
 23eb604:	4026      	ands	r6, r4
 23eb606:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23eb60a:	4682      	mov	sl, r0
 23eb60c:	4689      	mov	r9, r1
 23eb60e:	4c2c      	ldr	r4, [pc, #176]	; (23eb6c0 <arm_softmax_s8+0x598>)
    SELECT_IF_NON_ZERO(39332535)
 23eb610:	f3c5 7c00 	ubfx	ip, r5, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23eb614:	fbc6 9a04 	smlal	r9, sl, r6, r4
    result = (int32_t)(mult / (1ll << 31));
 23eb618:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 23eb61c:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23eb620:	f345 7400 	sbfx	r4, r5, #28, #1
 23eb624:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 23eb628:	ea0c 0c06 	and.w	ip, ip, r6
 23eb62c:	ea04 0409 	and.w	r4, r4, r9
 23eb630:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 23eb634:	4682      	mov	sl, r0
 23eb636:	468c      	mov	ip, r1
 23eb638:	f8df 9088 	ldr.w	r9, [pc, #136]	; 23eb6c4 <arm_softmax_s8+0x59c>
    SELECT_IF_NON_ZERO(720401)
 23eb63c:	f3c5 7640 	ubfx	r6, r5, #29, #1
 23eb640:	3e01      	subs	r6, #1
    mult = mult + (q63_t)m1 * m2;
 23eb642:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
 23eb646:	4026      	ands	r6, r4
    mult = mult + (q63_t)m1 * m2;
 23eb648:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23eb64a:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23eb64e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23eb652:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23eb656:	f345 7940 	sbfx	r9, r5, #29, #1
 23eb65a:	ea09 0c0c 	and.w	ip, r9, ip
 23eb65e:	ea8c 0c06 	eor.w	ip, ip, r6
    mult = mult + (q63_t)m1 * m2;
 23eb662:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
 23eb666:	f3c5 7a80 	ubfx	sl, r5, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb66a:	0fc9      	lsrs	r1, r1, #31
 23eb66c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23eb670:	f345 7580 	sbfx	r5, r5, #30, #1
 23eb674:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23eb678:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
 23eb67c:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23eb67e:	4029      	ands	r1, r5
 23eb680:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23eb684:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
 23eb686:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23eb688:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
 23eb68c:	4001      	ands	r1, r0
 23eb68e:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
 23eb692:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
 23eb696:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
 23eb69a:	bf18      	it	ne
 23eb69c:	3201      	addne	r2, #1
 23eb69e:	4413      	add	r3, r2
        for (col = 0; col < row_size; ++col)
 23eb6a0:	f10e 0e01 	add.w	lr, lr, #1
 23eb6a4:	e565      	b.n	23eb172 <arm_softmax_s8+0x4a>
 23eb6a6:	bf00      	nop
 23eb6a8:	2aaaaaab 	.word	0x2aaaaaab
 23eb6ac:	70f5a894 	.word	0x70f5a894
 23eb6b0:	63afbe7b 	.word	0x63afbe7b
 23eb6b4:	4da2cbf2 	.word	0x4da2cbf2
 23eb6b8:	2f16ac6c 	.word	0x2f16ac6c
 23eb6bc:	1152aaa4 	.word	0x1152aaa4
 23eb6c0:	02582ab7 	.word	0x02582ab7
 23eb6c4:	000afe11 	.word	0x000afe11
            diff = input[col] - max;
 23eb6c8:	9b04      	ldr	r3, [sp, #16]
 23eb6ca:	f913 100c 	ldrsb.w	r1, [r3, ip]
 23eb6ce:	9b01      	ldr	r3, [sp, #4]
 23eb6d0:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
 23eb6d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23eb6d4:	4299      	cmp	r1, r3
 23eb6d6:	f2c0 816a 	blt.w	23eb9ae <arm_softmax_s8+0x886>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 23eb6da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23eb6dc:	4099      	lsls	r1, r3
    if ((m1 < 0) ^ (m2 < 0))
 23eb6de:	0fcb      	lsrs	r3, r1, #31
        mult = 1 - mult;
 23eb6e0:	ebb3 7fdb 	cmp.w	r3, fp, lsr #31
 23eb6e4:	bf0b      	itete	eq
 23eb6e6:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 23eb6ea:	4673      	movne	r3, lr
 23eb6ec:	2200      	moveq	r2, #0
 23eb6ee:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb6f2:	fbc1 320b 	smlal	r3, r2, r1, fp
 23eb6f6:	2a00      	cmp	r2, #0
 23eb6f8:	4610      	mov	r0, r2
 23eb6fa:	da04      	bge.n	23eb706 <arm_softmax_s8+0x5de>
 23eb6fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23eb700:	189b      	adds	r3, r3, r2
 23eb702:	f140 0000 	adc.w	r0, r0, #0
 23eb706:	0fda      	lsrs	r2, r3, #31
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23eb708:	4559      	cmp	r1, fp
    result = (int32_t)(mult / (1ll << 31));
 23eb70a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 23eb70e:	d104      	bne.n	23eb71a <arm_softmax_s8+0x5f2>
        result = Q31_MAX;
 23eb710:	f1bb 4f00 	cmp.w	fp, #2147483648	; 0x80000000
 23eb714:	bf08      	it	eq
 23eb716:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23eb71a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb71e:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23eb720:	f042 467f 	orr.w	r6, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23eb724:	1ab3      	subs	r3, r6, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23eb726:	0176      	lsls	r6, r6, #5
 23eb728:	f106 5680 	add.w	r6, r6, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23eb72c:	fbc6 1406 	smlal	r1, r4, r6, r6
 23eb730:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23eb732:	ea4f 75e6 	mov.w	r5, r6, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23eb736:	da04      	bge.n	23eb742 <arm_softmax_s8+0x61a>
 23eb738:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb73c:	1809      	adds	r1, r1, r0
 23eb73e:	f144 0400 	adc.w	r4, r4, #0
 23eb742:	0fc9      	lsrs	r1, r1, #31
 23eb744:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23eb748:	fba1 0801 	umull	r0, r8, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23eb74c:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23eb74e:	fb01 f904 	mul.w	r9, r1, r4
 23eb752:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23eb756:	eb48 0849 	adc.w	r8, r8, r9, lsl #1
 23eb75a:	f1b8 0f00 	cmp.w	r8, #0
 23eb75e:	da05      	bge.n	23eb76c <arm_softmax_s8+0x644>
 23eb760:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23eb764:	eb10 0009 	adds.w	r0, r0, r9
 23eb768:	f148 0800 	adc.w	r8, r8, #0
 23eb76c:	0fc0      	lsrs	r0, r0, #31
 23eb76e:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23eb772:	f000 0803 	and.w	r8, r0, #3
        threshold++;
 23eb776:	1080      	asrs	r0, r0, #2
 23eb778:	bf54      	ite	pl
 23eb77a:	f04f 0901 	movpl.w	r9, #1
 23eb77e:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
 23eb782:	45c8      	cmp	r8, r9
    if ((m1 < 0) ^ (m2 < 0))
 23eb784:	ea4f 78d1 	mov.w	r8, r1, lsr #31
        result++;
 23eb788:	bfc8      	it	gt
 23eb78a:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23eb78c:	ebb8 7fd6 	cmp.w	r8, r6, lsr #31
 23eb790:	bf0b      	itete	eq
 23eb792:	f04f 4880 	moveq.w	r8, #1073741824	; 0x40000000
 23eb796:	46f0      	movne	r8, lr
 23eb798:	f04f 0900 	moveq.w	r9, #0
 23eb79c:	f04f 39ff 	movne.w	r9, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23eb7a0:	4374      	muls	r4, r6
 23eb7a2:	fb01 4405 	mla	r4, r1, r5, r4
 23eb7a6:	fba6 5701 	umull	r5, r7, r6, r1
 23eb7aa:	eb15 0508 	adds.w	r5, r5, r8
 23eb7ae:	443c      	add	r4, r7
    result = (int32_t)(mult / (1ll << 31));
 23eb7b0:	eb44 0409 	adc.w	r4, r4, r9
 23eb7b4:	2c00      	cmp	r4, #0
 23eb7b6:	da05      	bge.n	23eb7c4 <arm_softmax_s8+0x69c>
 23eb7b8:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 23eb7bc:	eb15 0508 	adds.w	r5, r5, r8
 23eb7c0:	f144 0400 	adc.w	r4, r4, #0
 23eb7c4:	0fed      	lsrs	r5, r5, #31
 23eb7c6:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eb7ca:	4428      	add	r0, r5
        mult = 1 - mult;
 23eb7cc:	2800      	cmp	r0, #0
 23eb7ce:	bfab      	itete	ge
 23eb7d0:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23eb7d4:	4674      	movlt	r4, lr
 23eb7d6:	2500      	movge	r5, #0
 23eb7d8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb7dc:	4f75      	ldr	r7, [pc, #468]	; (23eb9b4 <arm_softmax_s8+0x88c>)
 23eb7de:	fbc0 4507 	smlal	r4, r5, r0, r7
 23eb7e2:	2d00      	cmp	r5, #0
 23eb7e4:	da04      	bge.n	23eb7f0 <arm_softmax_s8+0x6c8>
 23eb7e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb7ea:	1824      	adds	r4, r4, r0
 23eb7ec:	f145 0500 	adc.w	r5, r5, #0
 23eb7f0:	0fe4      	lsrs	r4, r4, #31
 23eb7f2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eb7f6:	440c      	add	r4, r1
    if (result < 0)
 23eb7f8:	1061      	asrs	r1, r4, #1
 23eb7fa:	d402      	bmi.n	23eb802 <arm_softmax_s8+0x6da>
    if (remainder > threshold)
 23eb7fc:	07e0      	lsls	r0, r4, #31
        result++;
 23eb7fe:	bf48      	it	mi
 23eb800:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23eb802:	440e      	add	r6, r1
        mult = 1 - mult;
 23eb804:	2e00      	cmp	r6, #0
 23eb806:	bfab      	itete	ge
 23eb808:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23eb80c:	4674      	movlt	r4, lr
 23eb80e:	2100      	movge	r1, #0
 23eb810:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb814:	4868      	ldr	r0, [pc, #416]	; (23eb9b8 <arm_softmax_s8+0x890>)
 23eb816:	fbc6 4100 	smlal	r4, r1, r6, r0
 23eb81a:	2900      	cmp	r1, #0
 23eb81c:	da04      	bge.n	23eb828 <arm_softmax_s8+0x700>
 23eb81e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23eb822:	1824      	adds	r4, r4, r0
 23eb824:	f141 0100 	adc.w	r1, r1, #0
 23eb828:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23eb82a:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23eb82c:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23eb830:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23eb834:	4681      	mov	r9, r0
 23eb836:	460e      	mov	r6, r1
    int32_t result = 1895147668 +
 23eb838:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23eb83c:	4f5f      	ldr	r7, [pc, #380]	; (23eb9bc <arm_softmax_s8+0x894>)
    int32_t result = 1895147668 +
 23eb83e:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23eb842:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23eb846:	fbc4 6907 	smlal	r6, r9, r4, r7
    SELECT_IF_NON_ZERO(1672461947)
 23eb84a:	f3c3 6500 	ubfx	r5, r3, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb84e:	0ff6      	lsrs	r6, r6, #31
 23eb850:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23eb854:	f343 6800 	sbfx	r8, r3, #24, #1
 23eb858:	3d01      	subs	r5, #1
 23eb85a:	ea08 0806 	and.w	r8, r8, r6
 23eb85e:	402c      	ands	r4, r5
    mult = mult + (q63_t)m1 * m2;
 23eb860:	460e      	mov	r6, r1
 23eb862:	4605      	mov	r5, r0
 23eb864:	4f56      	ldr	r7, [pc, #344]	; (23eb9c0 <arm_softmax_s8+0x898>)
    SELECT_IF_NON_ZERO(1672461947)
 23eb866:	ea88 0404 	eor.w	r4, r8, r4
    mult = mult + (q63_t)m1 * m2;
 23eb86a:	fbc4 6507 	smlal	r6, r5, r4, r7
    SELECT_IF_NON_ZERO(1302514674)
 23eb86e:	f3c3 6940 	ubfx	r9, r3, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb872:	0ff6      	lsrs	r6, r6, #31
    SELECT_IF_NON_ZERO(1302514674)
 23eb874:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23eb878:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23eb87c:	ea09 0904 	and.w	r9, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23eb880:	460d      	mov	r5, r1
 23eb882:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23eb884:	f343 6840 	sbfx	r8, r3, #25, #1
 23eb888:	ea08 0806 	and.w	r8, r8, r6
    mult = mult + (q63_t)m1 * m2;
 23eb88c:	4e4d      	ldr	r6, [pc, #308]	; (23eb9c4 <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1302514674)
 23eb88e:	ea88 0809 	eor.w	r8, r8, r9
    mult = mult + (q63_t)m1 * m2;
 23eb892:	fbc8 5406 	smlal	r5, r4, r8, r6
    SELECT_IF_NON_ZERO(790015084)
 23eb896:	f3c3 6980 	ubfx	r9, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb89a:	0fed      	lsrs	r5, r5, #31
 23eb89c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23eb8a0:	f343 6680 	sbfx	r6, r3, #26, #1
 23eb8a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23eb8a8:	ea09 0908 	and.w	r9, r9, r8
 23eb8ac:	402e      	ands	r6, r5
 23eb8ae:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23eb8b2:	460c      	mov	r4, r1
 23eb8b4:	4681      	mov	r9, r0
 23eb8b6:	4d44      	ldr	r5, [pc, #272]	; (23eb9c8 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(290630308)
 23eb8b8:	f3c3 68c0 	ubfx	r8, r3, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23eb8bc:	fbc6 4905 	smlal	r4, r9, r6, r5
    result = (int32_t)(mult / (1ll << 31));
 23eb8c0:	0fe4      	lsrs	r4, r4, #31
 23eb8c2:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23eb8c6:	f343 65c0 	sbfx	r5, r3, #27, #1
 23eb8ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23eb8ce:	ea08 0806 	and.w	r8, r8, r6
 23eb8d2:	4025      	ands	r5, r4
 23eb8d4:	ea85 0508 	eor.w	r5, r5, r8
    mult = mult + (q63_t)m1 * m2;
 23eb8d8:	4681      	mov	r9, r0
 23eb8da:	4688      	mov	r8, r1
 23eb8dc:	4c3b      	ldr	r4, [pc, #236]	; (23eb9cc <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(39332535)
 23eb8de:	f3c3 7600 	ubfx	r6, r3, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23eb8e2:	fbc5 8904 	smlal	r8, r9, r5, r4
    result = (int32_t)(mult / (1ll << 31));
 23eb8e6:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 23eb8ea:	ea48 0849 	orr.w	r8, r8, r9, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23eb8ee:	f343 7400 	sbfx	r4, r3, #28, #1
 23eb8f2:	3e01      	subs	r6, #1
 23eb8f4:	402e      	ands	r6, r5
 23eb8f6:	ea04 0408 	and.w	r4, r4, r8
 23eb8fa:	4074      	eors	r4, r6
    mult = mult + (q63_t)m1 * m2;
 23eb8fc:	4681      	mov	r9, r0
 23eb8fe:	460e      	mov	r6, r1
 23eb900:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23eb9d0 <arm_softmax_s8+0x8a8>
    SELECT_IF_NON_ZERO(720401)
 23eb904:	f3c3 7540 	ubfx	r5, r3, #29, #1
 23eb908:	3d01      	subs	r5, #1
    mult = mult + (q63_t)m1 * m2;
 23eb90a:	fbc4 6908 	smlal	r6, r9, r4, r8
    SELECT_IF_NON_ZERO(720401)
 23eb90e:	4025      	ands	r5, r4
    mult = mult + (q63_t)m1 * m2;
 23eb910:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23eb912:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23eb916:	0ff6      	lsrs	r6, r6, #31
 23eb918:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23eb91c:	f343 7840 	sbfx	r8, r3, #29, #1
 23eb920:	ea08 0606 	and.w	r6, r8, r6
 23eb924:	406e      	eors	r6, r5
    mult = mult + (q63_t)m1 * m2;
 23eb926:	fbc6 1004 	smlal	r1, r0, r6, r4
    SELECT_IF_NON_ZERO(242)
 23eb92a:	f3c3 7980 	ubfx	r9, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23eb92e:	0fc9      	lsrs	r1, r1, #31
 23eb930:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23eb934:	f343 7380 	sbfx	r3, r3, #30, #1
 23eb938:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23eb93c:	4019      	ands	r1, r3
    mask = MASK_IF_ZERO(val);
 23eb93e:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23eb940:	ea09 0906 	and.w	r9, r9, r6
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23eb944:	1e50      	subs	r0, r2, #1
    SELECT_IF_NON_ZERO(242)
 23eb946:	ea81 0109 	eor.w	r1, r1, r9
    mask = MASK_IF_ZERO(val);
 23eb94a:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 23eb94c:	4001      	ands	r1, r0
 23eb94e:	f022 4000 	bic.w	r0, r2, #2147483648	; 0x80000000
 23eb952:	4048      	eors	r0, r1
    result = (int32_t)(mult / (1ll << 31));
 23eb954:	9909      	ldr	r1, [sp, #36]	; 0x24
 23eb956:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 23eb95a:	fbc1 3200 	smlal	r3, r2, r1, r0
 23eb95e:	2a00      	cmp	r2, #0
 23eb960:	4614      	mov	r4, r2
 23eb962:	da04      	bge.n	23eb96e <arm_softmax_s8+0x846>
 23eb964:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23eb968:	189b      	adds	r3, r3, r2
 23eb96a:	f144 0400 	adc.w	r4, r4, #0
    int32_t remainder = remainder_mask & dividend;
 23eb96e:	9a05      	ldr	r2, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
 23eb970:	0fdb      	lsrs	r3, r3, #31
 23eb972:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23eb976:	9806      	ldr	r0, [sp, #24]
    int32_t remainder = remainder_mask & dividend;
 23eb978:	401a      	ands	r2, r3
    q31_t threshold = remainder_mask >> 1;
 23eb97a:	fa53 f30a 	asrs.w	r3, r3, sl
 23eb97e:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eb980:	bf58      	it	pl
 23eb982:	4601      	movpl	r1, r0
    if (remainder > threshold)
 23eb984:	428a      	cmp	r2, r1
        result++;
 23eb986:	bfc8      	it	gt
 23eb988:	3301      	addgt	r3, #1
                const int32_t res =
 23eb98a:	3b80      	subs	r3, #128	; 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 23eb98c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 23eb990:	db08      	blt.n	23eb9a4 <arm_softmax_s8+0x87c>
 23eb992:	2b7e      	cmp	r3, #126	; 0x7e
 23eb994:	dc09      	bgt.n	23eb9aa <arm_softmax_s8+0x882>
 23eb996:	b25b      	sxtb	r3, r3
                output[col] = -128;
 23eb998:	9a07      	ldr	r2, [sp, #28]
 23eb99a:	f802 300c 	strb.w	r3, [r2, ip]
        for (col = 0; col < row_size; ++col)
 23eb99e:	f10c 0c01 	add.w	ip, ip, #1
 23eb9a2:	e50a      	b.n	23eb3ba <arm_softmax_s8+0x292>
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 23eb9a4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 23eb9a8:	e7f6      	b.n	23eb998 <arm_softmax_s8+0x870>
 23eb9aa:	237f      	movs	r3, #127	; 0x7f
 23eb9ac:	e7f4      	b.n	23eb998 <arm_softmax_s8+0x870>
                output[col] = -128;
 23eb9ae:	2380      	movs	r3, #128	; 0x80
 23eb9b0:	e7f2      	b.n	23eb998 <arm_softmax_s8+0x870>
 23eb9b2:	bf00      	nop
 23eb9b4:	2aaaaaab 	.word	0x2aaaaaab
 23eb9b8:	70f5a894 	.word	0x70f5a894
 23eb9bc:	63afbe7b 	.word	0x63afbe7b
 23eb9c0:	4da2cbf2 	.word	0x4da2cbf2
 23eb9c4:	2f16ac6c 	.word	0x2f16ac6c
 23eb9c8:	1152aaa4 	.word	0x1152aaa4
 23eb9cc:	02582ab7 	.word	0x02582ab7
 23eb9d0:	000afe11 	.word	0x000afe11

023eb9d4 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 23eb9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23eb9d8:	460c      	mov	r4, r1
 23eb9da:	4616      	mov	r6, r2
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 23eb9dc:	681d      	ldr	r5, [r3, #0]
{
 23eb9de:	b08a      	sub	sp, #40	; 0x28
 23eb9e0:	e9dd 7912 	ldrd	r7, r9, [sp, #72]	; 0x48
 23eb9e4:	e9dd a817 	ldrd	sl, r8, [sp, #92]	; 0x5c

    while (batch_cnt)
 23eb9e8:	b91d      	cbnz	r5, 23eb9f2 <arm_fully_connected_s8+0x1e>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 23eb9ea:	4628      	mov	r0, r5
 23eb9ec:	b00a      	add	sp, #40	; 0x28
 23eb9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 23eb9f2:	6923      	ldr	r3, [r4, #16]
 23eb9f4:	4638      	mov	r0, r7
 23eb9f6:	9308      	str	r3, [sp, #32]
 23eb9f8:	68e3      	ldr	r3, [r4, #12]
 23eb9fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23eb9fc:	9307      	str	r3, [sp, #28]
 23eb9fe:	f8da 300c 	ldr.w	r3, [sl, #12]
 23eba02:	9914      	ldr	r1, [sp, #80]	; 0x50
 23eba04:	9306      	str	r3, [sp, #24]
 23eba06:	f8d9 3000 	ldr.w	r3, [r9]
        batch_cnt--;
 23eba0a:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s8(input,
 23eba0c:	9305      	str	r3, [sp, #20]
 23eba0e:	6873      	ldr	r3, [r6, #4]
 23eba10:	9304      	str	r3, [sp, #16]
 23eba12:	6833      	ldr	r3, [r6, #0]
 23eba14:	9303      	str	r3, [sp, #12]
 23eba16:	68a3      	ldr	r3, [r4, #8]
 23eba18:	9302      	str	r3, [sp, #8]
 23eba1a:	6863      	ldr	r3, [r4, #4]
 23eba1c:	9301      	str	r3, [sp, #4]
 23eba1e:	6823      	ldr	r3, [r4, #0]
 23eba20:	9300      	str	r3, [sp, #0]
 23eba22:	4643      	mov	r3, r8
 23eba24:	f7ff f931 	bl	23eac8a <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 23eba28:	f8d9 3000 	ldr.w	r3, [r9]
 23eba2c:	441f      	add	r7, r3
        output += output_dims->c;
 23eba2e:	f8da 300c 	ldr.w	r3, [sl, #12]
 23eba32:	4498      	add	r8, r3
        batch_cnt--;
 23eba34:	e7d8      	b.n	23eb9e8 <arm_fully_connected_s8+0x14>

023eba36 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 23eba36:	2000      	movs	r0, #0
 23eba38:	4770      	bx	lr

023eba3a <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 23eba3a:	b530      	push	{r4, r5, lr}
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 23eba3c:	68d8      	ldr	r0, [r3, #12]
{
 23eba3e:	b08b      	sub	sp, #44	; 0x2c
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 23eba40:	0784      	lsls	r4, r0, #30
 23eba42:	d128      	bne.n	23eba96 <arm_convolve_1x1_s8_fast+0x5c>
 23eba44:	690c      	ldr	r4, [r1, #16]
 23eba46:	bb34      	cbnz	r4, 23eba96 <arm_convolve_1x1_s8_fast+0x5c>
 23eba48:	694c      	ldr	r4, [r1, #20]
 23eba4a:	bb24      	cbnz	r4, 23eba96 <arm_convolve_1x1_s8_fast+0x5c>
 23eba4c:	688d      	ldr	r5, [r1, #8]
 23eba4e:	2d01      	cmp	r5, #1
 23eba50:	d121      	bne.n	23eba96 <arm_convolve_1x1_s8_fast+0x5c>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 23eba52:	68cd      	ldr	r5, [r1, #12]
 23eba54:	2d01      	cmp	r5, #1
 23eba56:	d11e      	bne.n	23eba96 <arm_convolve_1x1_s8_fast+0x5c>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 23eba58:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 23eba5a:	9508      	str	r5, [sp, #32]
 23eba5c:	6a0d      	ldr	r5, [r1, #32]
 23eba5e:	9507      	str	r5, [sp, #28]
 23eba60:	684d      	ldr	r5, [r1, #4]
 23eba62:	9506      	str	r5, [sp, #24]
 23eba64:	6809      	ldr	r1, [r1, #0]
 23eba66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 23eba6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23eba6c:	68c9      	ldr	r1, [r1, #12]
 23eba6e:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23eba70:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 23eba74:	4341      	muls	r1, r0
 23eba76:	681b      	ldr	r3, [r3, #0]
    arm_nn_mat_mult_nt_t_s8(input_data,
 23eba78:	980e      	ldr	r0, [sp, #56]	; 0x38
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23eba7a:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
 23eba7c:	9102      	str	r1, [sp, #8]
 23eba7e:	6853      	ldr	r3, [r2, #4]
 23eba80:	9910      	ldr	r1, [sp, #64]	; 0x40
 23eba82:	9301      	str	r3, [sp, #4]
 23eba84:	6813      	ldr	r3, [r2, #0]
 23eba86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23eba88:	9300      	str	r3, [sp, #0]
 23eba8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23eba8c:	f7fe fd7a 	bl	23ea584 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 23eba90:	4620      	mov	r0, r4
}
 23eba92:	b00b      	add	sp, #44	; 0x2c
 23eba94:	bd30      	pop	{r4, r5, pc}
        return ARM_MATH_SIZE_MISMATCH;
 23eba96:	f06f 0002 	mvn.w	r0, #2
 23eba9a:	e7fa      	b.n	23eba92 <arm_convolve_1x1_s8_fast+0x58>

023eba9c <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 23eba9c:	2000      	movs	r0, #0
 23eba9e:	4770      	bx	lr

023ebaa0 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 23ebaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ebaa4:	468b      	mov	fp, r1
 23ebaa6:	b097      	sub	sp, #92	; 0x5c
 23ebaa8:	9303      	str	r3, [sp, #12]
 23ebaaa:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 23ebaae:	9207      	str	r2, [sp, #28]
 23ebab0:	9304      	str	r3, [sp, #16]
 23ebab2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
 23ebab6:	4606      	mov	r6, r0
{
 23ebab8:	9305      	str	r3, [sp, #20]
 23ebaba:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 23ebabe:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 23ebac2:	9301      	str	r3, [sp, #4]
    q7_t *out_1 = out_0 + output_ch;
 23ebac4:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23ebac6:	900b      	str	r0, [sp, #44]	; 0x2c
    q7_t *out_1 = out_0 + output_ch;
 23ebac8:	4413      	add	r3, r2
 23ebaca:	9309      	str	r3, [sp, #36]	; 0x24
    /* this loop over rows in A */
    while (row_count)
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 23ebacc:	9b01      	ldr	r3, [sp, #4]
 23ebace:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23ebad2:	9302      	str	r3, [sp, #8]
 23ebad4:	9b01      	ldr	r3, [sp, #4]
 23ebad6:	f003 0303 	and.w	r3, r3, #3
 23ebada:	930f      	str	r3, [sp, #60]	; 0x3c
 23ebadc:	9b01      	ldr	r3, [sp, #4]
 23ebade:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ebae0:	089b      	lsrs	r3, r3, #2
 23ebae2:	009a      	lsls	r2, r3, #2
 23ebae4:	9213      	str	r2, [sp, #76]	; 0x4c
 23ebae6:	9a01      	ldr	r2, [sp, #4]
 23ebae8:	1851      	adds	r1, r2, r1
 23ebaea:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23ebaee:	920a      	str	r2, [sp, #40]	; 0x28
 23ebaf0:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 23ebaf4:	9206      	str	r2, [sp, #24]
 23ebaf6:	9a07      	ldr	r2, [sp, #28]
 23ebaf8:	0852      	lsrs	r2, r2, #1
 23ebafa:	9214      	str	r2, [sp, #80]	; 0x50
 23ebafc:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 23ebb00:	920c      	str	r2, [sp, #48]	; 0x30
 23ebb02:	9a02      	ldr	r2, [sp, #8]
 23ebb04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23ebb08:	9308      	str	r3, [sp, #32]
    while (row_count)
 23ebb0a:	2201      	movs	r2, #1
 23ebb0c:	2300      	movs	r3, #0
 23ebb0e:	9914      	ldr	r1, [sp, #80]	; 0x50
 23ebb10:	428b      	cmp	r3, r1
 23ebb12:	f040 8086 	bne.w	23ebc22 <arm_nn_mat_mult_kernel_s8_s16+0x182>
 23ebb16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23ebb18:	00dc      	lsls	r4, r3, #3
 23ebb1a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 23ebb1e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 23ebb22:	fb03 2101 	mla	r1, r3, r1, r2
        ip_a0 += num_col_a;
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 23ebb26:	9a07      	ldr	r2, [sp, #28]
 23ebb28:	ea4f 0843 	mov.w	r8, r3, lsl #1
 23ebb2c:	07d2      	lsls	r2, r2, #31
 23ebb2e:	d573      	bpl.n	23ebc18 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 23ebb30:	9a25      	ldr	r2, [sp, #148]	; 0x94
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 23ebb32:	460e      	mov	r6, r1
        q31_t ch_0_out_0 = *bias;
 23ebb34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
        q31_t ch_0_out_1 = *bias++;
 23ebb38:	4694      	mov	ip, r2
        while (col_count)
 23ebb3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ebb3c:	455b      	cmp	r3, fp
 23ebb3e:	f040 81b3 	bne.w	23ebea8 <arm_nn_mat_mult_kernel_s8_s16+0x408>
 23ebb42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23ebb44:	4419      	add	r1, r3
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 23ebb46:	9b01      	ldr	r3, [sp, #4]
 23ebb48:	f003 0303 	and.w	r3, r3, #3
 23ebb4c:	440b      	add	r3, r1
 23ebb4e:	428b      	cmp	r3, r1
 23ebb50:	f040 81cc 	bne.w	23ebeec <arm_nn_mat_mult_kernel_s8_s16+0x44c>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebb54:	2600      	movs	r6, #0
 23ebb56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23ebb5a:	46b6      	mov	lr, r6

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23ebb5c:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_0 += out_offset;
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q7_t)ch_0_out_0;
 23ebb5e:	3001      	adds	r0, #1
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23ebb60:	591f      	ldr	r7, [r3, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebb62:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 23ebb66:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebb68:	f85a 3004 	ldr.w	r3, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebb6c:	42b7      	cmp	r7, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebb6e:	fbc2 1e03 	smlal	r1, lr, r2, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebb72:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebb76:	bfd8      	it	le
 23ebb78:	427e      	negle	r6, r7
    result = (int32_t)(mult.long_long >> 31);
 23ebb7a:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebb7c:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
 23ebb7e:	ea41 0e4e 	orr.w	lr, r1, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebb82:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23ebb84:	ea0e 0203 	and.w	r2, lr, r3
    if (result < 0)
 23ebb88:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
 23ebb8c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ebb90:	bf48      	it	mi
 23ebb92:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ebb94:	429a      	cmp	r2, r3
        ch_0_out_0 += out_offset;
 23ebb96:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
 23ebb98:	bfc8      	it	gt
 23ebb9a:	f10e 0e01 	addgt.w	lr, lr, #1
 23ebb9e:	449e      	add	lr, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 23ebba0:	9b04      	ldr	r3, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebba2:	2200      	movs	r2, #0
 23ebba4:	459e      	cmp	lr, r3
 23ebba6:	bfb8      	it	lt
 23ebba8:	469e      	movlt	lr, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 23ebbaa:	9b05      	ldr	r3, [sp, #20]
 23ebbac:	4617      	mov	r7, r2
 23ebbae:	459e      	cmp	lr, r3
 23ebbb0:	bfa8      	it	ge
 23ebbb2:	469e      	movge	lr, r3
 23ebbb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        *out_0++ = (q7_t)ch_0_out_0;
 23ebbb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ebbba:	f803 e008 	strb.w	lr, [r3, r8]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 23ebbbe:	9b03      	ldr	r3, [sp, #12]
 23ebbc0:	591e      	ldr	r6, [r3, r4]
 23ebbc2:	f85a 4004 	ldr.w	r4, [sl, r4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebbc6:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 23ebbca:	fa0c f303 	lsl.w	r3, ip, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebbce:	fbc3 1704 	smlal	r1, r7, r3, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebbd2:	2301      	movs	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebbd4:	4296      	cmp	r6, r2
 23ebbd6:	bfd8      	it	le
 23ebbd8:	4272      	negle	r2, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebbda:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
 23ebbdc:	0fc9      	lsrs	r1, r1, #31
 23ebbde:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebbe2:	3b01      	subs	r3, #1
    if (result < 0)
 23ebbe4:	fa51 f202 	asrs.w	r2, r1, r2
    int32_t remainder = remainder_mask & dividend;
 23ebbe8:	ea01 0403 	and.w	r4, r1, r3
    q31_t threshold = remainder_mask >> 1;
 23ebbec:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ebbf0:	bf48      	it	mi
 23ebbf2:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ebbf4:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
 23ebbf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
        result++;
 23ebbf8:	bfc8      	it	gt
 23ebbfa:	3201      	addgt	r2, #1
 23ebbfc:	4413      	add	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 23ebbfe:	9a04      	ldr	r2, [sp, #16]
 23ebc00:	429a      	cmp	r2, r3
 23ebc02:	bfb8      	it	lt
 23ebc04:	461a      	movlt	r2, r3
 23ebc06:	4613      	mov	r3, r2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 23ebc08:	9a05      	ldr	r2, [sp, #20]
 23ebc0a:	429a      	cmp	r2, r3
 23ebc0c:	bfa8      	it	ge
 23ebc0e:	461a      	movge	r2, r3
 23ebc10:	4613      	mov	r3, r2
        *out_1++ = (q7_t)ch_0_out_1;
 23ebc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ebc14:	f802 3008 	strb.w	r3, [r2, r8]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 23ebc18:	9b07      	ldr	r3, [sp, #28]
 23ebc1a:	4418      	add	r0, r3
 23ebc1c:	b017      	add	sp, #92	; 0x5c
 23ebc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 23ebc22:	9901      	ldr	r1, [sp, #4]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 23ebc24:	9f02      	ldr	r7, [sp, #8]
 23ebc26:	1871      	adds	r1, r6, r1
 23ebc28:	910d      	str	r1, [sp, #52]	; 0x34
        q31_t ch_0_out_0 = *bias;
 23ebc2a:	9925      	ldr	r1, [sp, #148]	; 0x94
 23ebc2c:	9615      	str	r6, [sp, #84]	; 0x54
 23ebc2e:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
        q31_t ch_1_out_0 = *bias;
 23ebc32:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
        q31_t ch_0_out_1 = *bias++;
 23ebc36:	4604      	mov	r4, r0
        q31_t ch_1_out_1 = *bias++;
 23ebc38:	46f0      	mov	r8, lr
        const q15_t *ip_b0 = input_b;
 23ebc3a:	f8cd b000 	str.w	fp, [sp]
        while (col_count)
 23ebc3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 23ebc40:	9d00      	ldr	r5, [sp, #0]
 23ebc42:	42a9      	cmp	r1, r5
 23ebc44:	f040 80d8 	bne.w	23ebdf8 <arm_nn_mat_mult_kernel_s8_s16+0x358>
 23ebc48:	9906      	ldr	r1, [sp, #24]
 23ebc4a:	9d01      	ldr	r5, [sp, #4]
        while (col_count)
 23ebc4c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23ebc4e:	440d      	add	r5, r1
 23ebc50:	950d      	str	r5, [sp, #52]	; 0x34
 23ebc52:	9d08      	ldr	r5, [sp, #32]
 23ebc54:	462f      	mov	r7, r5
 23ebc56:	460d      	mov	r5, r1
 23ebc58:	4435      	add	r5, r6
 23ebc5a:	9510      	str	r5, [sp, #64]	; 0x40
 23ebc5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23ebc5e:	42a9      	cmp	r1, r5
 23ebc60:	f040 8109 	bne.w	23ebe76 <arm_nn_mat_mult_kernel_s8_s16+0x3d6>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebc64:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 23ebc68:	2700      	movs	r7, #0
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 23ebc6a:	9903      	ldr	r1, [sp, #12]
 23ebc6c:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebc70:	ea26 71e6 	bic.w	r1, r6, r6, asr #31
 23ebc74:	4088      	lsls	r0, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebc76:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebc7a:	2e00      	cmp	r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebc7c:	fbc0 5701 	smlal	r5, r7, r0, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebc80:	bfc8      	it	gt
 23ebc82:	2600      	movgt	r6, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebc84:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebc88:	bfd8      	it	le
 23ebc8a:	4276      	negle	r6, r6
    result = (int32_t)(mult.long_long >> 31);
 23ebc8c:	0fed      	lsrs	r5, r5, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebc8e:	40b1      	lsls	r1, r6
    result = (int32_t)(mult.long_long >> 31);
 23ebc90:	ea45 0747 	orr.w	r7, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebc94:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23ebc96:	ea07 0001 	and.w	r0, r7, r1
    if (result < 0)
 23ebc9a:	4137      	asrs	r7, r6
    q31_t threshold = remainder_mask >> 1;
 23ebc9c:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23ebca0:	bf48      	it	mi
 23ebca2:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23ebca4:	4288      	cmp	r0, r1
        ch_0_out_0 += out_offset;
 23ebca6:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23ebca8:	bfc8      	it	gt
 23ebcaa:	3701      	addgt	r7, #1
 23ebcac:	440f      	add	r7, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 23ebcae:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebcb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ebcb4:	428f      	cmp	r7, r1
 23ebcb6:	bfb8      	it	lt
 23ebcb8:	460f      	movlt	r7, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 23ebcba:	9905      	ldr	r1, [sp, #20]
 23ebcbc:	2600      	movs	r6, #0
 23ebcbe:	428f      	cmp	r7, r1
 23ebcc0:	bfa8      	it	ge
 23ebcc2:	460f      	movge	r7, r1
        *out_0++ = (q7_t)ch_0_out_0;
 23ebcc4:	9926      	ldr	r1, [sp, #152]	; 0x98
 23ebcc6:	f801 7013 	strb.w	r7, [r1, r3, lsl #1]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 23ebcca:	9903      	ldr	r1, [sp, #12]
 23ebccc:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebcd0:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 23ebcd4:	408c      	lsls	r4, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebcd6:	f85a 1033 	ldr.w	r1, [sl, r3, lsl #3]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebcda:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebcdc:	fbc4 0601 	smlal	r0, r6, r4, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebce0:	bfc8      	it	gt
 23ebce2:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebce4:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebce8:	bfd8      	it	le
 23ebcea:	426d      	negle	r5, r5
    result = (int32_t)(mult.long_long >> 31);
 23ebcec:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebcee:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
 23ebcf0:	ea40 0646 	orr.w	r6, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebcf4:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23ebcf6:	ea06 0401 	and.w	r4, r6, r1
    if (result < 0)
 23ebcfa:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
 23ebcfc:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23ebd00:	bf48      	it	mi
 23ebd02:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23ebd04:	428c      	cmp	r4, r1
        ch_0_out_1 += out_offset;
 23ebd06:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23ebd08:	bfc8      	it	gt
 23ebd0a:	3601      	addgt	r6, #1
 23ebd0c:	440e      	add	r6, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 23ebd0e:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebd10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ebd14:	428e      	cmp	r6, r1
 23ebd16:	bfb8      	it	lt
 23ebd18:	460e      	movlt	r6, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 23ebd1a:	9905      	ldr	r1, [sp, #20]
 23ebd1c:	2500      	movs	r5, #0
 23ebd1e:	428e      	cmp	r6, r1
 23ebd20:	bfa8      	it	ge
 23ebd22:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_0_out_1;
 23ebd24:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ebd26:	f801 6013 	strb.w	r6, [r1, r3, lsl #1]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 23ebd2a:	9903      	ldr	r1, [sp, #12]
 23ebd2c:	3301      	adds	r3, #1
 23ebd2e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 23ebd32:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebd36:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 23ebd3a:	2c00      	cmp	r4, #0
 23ebd3c:	fa0e fc0c 	lsl.w	ip, lr, ip
 23ebd40:	bfc8      	it	gt
 23ebd42:	2400      	movgt	r4, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebd44:	fbcc 0501 	smlal	r0, r5, ip, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebd48:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebd4c:	bfd8      	it	le
 23ebd4e:	4264      	negle	r4, r4
    result = (int32_t)(mult.long_long >> 31);
 23ebd50:	0fc0      	lsrs	r0, r0, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebd52:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
 23ebd54:	ea40 0545 	orr.w	r5, r0, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebd58:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23ebd5a:	ea05 0601 	and.w	r6, r5, r1
    if (result < 0)
 23ebd5e:	4125      	asrs	r5, r4
    q31_t threshold = remainder_mask >> 1;
 23ebd60:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23ebd64:	bf48      	it	mi
 23ebd66:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23ebd68:	428e      	cmp	r6, r1
        ch_1_out_0 += out_offset;
 23ebd6a:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23ebd6c:	bfc8      	it	gt
 23ebd6e:	3501      	addgt	r5, #1
 23ebd70:	440d      	add	r5, r1
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 23ebd72:	9904      	ldr	r1, [sp, #16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebd74:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 23ebd78:	428d      	cmp	r5, r1
 23ebd7a:	bfb8      	it	lt
 23ebd7c:	460d      	movlt	r5, r1
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 23ebd7e:	9905      	ldr	r1, [sp, #20]
 23ebd80:	2600      	movs	r6, #0
 23ebd82:	428d      	cmp	r5, r1
 23ebd84:	bfa8      	it	ge
 23ebd86:	460d      	movge	r5, r1
        *out_0++ = (q7_t)ch_1_out_0;
 23ebd88:	9926      	ldr	r1, [sp, #152]	; 0x98
 23ebd8a:	548d      	strb	r5, [r1, r2]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 23ebd8c:	9903      	ldr	r1, [sp, #12]
 23ebd8e:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 23ebd92:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebd96:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
 23ebd9a:	2d00      	cmp	r5, #0
 23ebd9c:	fa08 f101 	lsl.w	r1, r8, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ebda0:	fbc1 4600 	smlal	r4, r6, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebda4:	bfc8      	it	gt
 23ebda6:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebda8:	f04f 0101 	mov.w	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ebdac:	bfd8      	it	le
 23ebdae:	426d      	negle	r5, r5
    result = (int32_t)(mult.long_long >> 31);
 23ebdb0:	0fe4      	lsrs	r4, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebdb2:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
 23ebdb4:	ea44 0646 	orr.w	r6, r4, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ebdb8:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 23ebdba:	ea06 0001 	and.w	r0, r6, r1
    if (result < 0)
 23ebdbe:	412e      	asrs	r6, r5
    q31_t threshold = remainder_mask >> 1;
 23ebdc0:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 23ebdc4:	bf48      	it	mi
 23ebdc6:	3101      	addmi	r1, #1
    if (remainder > threshold)
 23ebdc8:	4288      	cmp	r0, r1
        ch_1_out_1 += out_offset;
 23ebdca:	9921      	ldr	r1, [sp, #132]	; 0x84
        result++;
 23ebdcc:	bfc8      	it	gt
 23ebdce:	3601      	addgt	r6, #1
 23ebdd0:	440e      	add	r6, r1
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 23ebdd2:	9904      	ldr	r1, [sp, #16]
 23ebdd4:	428e      	cmp	r6, r1
 23ebdd6:	bfb8      	it	lt
 23ebdd8:	460e      	movlt	r6, r1
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 23ebdda:	9905      	ldr	r1, [sp, #20]
 23ebddc:	428e      	cmp	r6, r1
 23ebdde:	bfa8      	it	ge
 23ebde0:	460e      	movge	r6, r1
        *out_1++ = (q7_t)ch_1_out_1;
 23ebde2:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ebde4:	548e      	strb	r6, [r1, r2]
        ip_a0 += num_col_a;
 23ebde6:	9915      	ldr	r1, [sp, #84]	; 0x54
 23ebde8:	980a      	ldr	r0, [sp, #40]	; 0x28
 23ebdea:	3202      	adds	r2, #2
 23ebdec:	4401      	add	r1, r0
 23ebdee:	460e      	mov	r6, r1
        row_count--;
 23ebdf0:	9906      	ldr	r1, [sp, #24]
 23ebdf2:	4401      	add	r1, r0
 23ebdf4:	9106      	str	r1, [sp, #24]
 23ebdf6:	e68a      	b.n	23ebb0e <arm_nn_mat_mult_kernel_s8_s16+0x6e>
    memcpy(&val, *in_q15, 4);
 23ebdf8:	9900      	ldr	r1, [sp, #0]
 23ebdfa:	f856 9b04 	ldr.w	r9, [r6], #4
 23ebdfe:	f8d1 c000 	ldr.w	ip, [r1]
 23ebe02:	6839      	ldr	r1, [r7, #0]
 23ebe04:	910e      	str	r1, [sp, #56]	; 0x38
  return (op1 >> op2) | (op1 << (32U - op2));
 23ebe06:	ea4f 2139 	mov.w	r1, r9, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ebe0a:	fa2f f989 	sxtb16	r9, r9
 23ebe0e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ebe12:	eac1 4529 	pkhtb	r5, r1, r9, asr #16
 23ebe16:	9510      	str	r5, [sp, #64]	; 0x40
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ebe18:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 23ebe1a:	eac9 4901 	pkhbt	r9, r9, r1, lsl #16
    memcpy(&val, *in_q7, 4);
 23ebe1e:	f855 1b04 	ldr.w	r1, [r5], #4
 23ebe22:	950d      	str	r5, [sp, #52]	; 0x34
  return (op1 >> op2) | (op1 << (32U - op2));
 23ebe24:	ea4f 2531 	mov.w	r5, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ebe28:	fa2f f585 	sxtb16	r5, r5
 23ebe2c:	9511      	str	r5, [sp, #68]	; 0x44
 23ebe2e:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ebe32:	eac5 4521 	pkhtb	r5, r5, r1, asr #16
 23ebe36:	9512      	str	r5, [sp, #72]	; 0x48
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ebe38:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23ebe3a:	eac1 4105 	pkhbt	r1, r1, r5, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ebe3e:	fb29 000c 	smlad	r0, r9, ip, r0
 23ebe42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23ebe44:	fb29 4405 	smlad	r4, r9, r5, r4
 23ebe48:	fb21 ec0c 	smlad	ip, r1, ip, lr
 23ebe4c:	fb21 8105 	smlad	r1, r1, r5, r8
    memcpy(&val, *in_q15, 4);
 23ebe50:	9d00      	ldr	r5, [sp, #0]
 23ebe52:	f8d7 8004 	ldr.w	r8, [r7, #4]
 23ebe56:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
 23ebe5a:	3508      	adds	r5, #8
 23ebe5c:	9500      	str	r5, [sp, #0]
 23ebe5e:	3708      	adds	r7, #8
 23ebe60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23ebe62:	fb25 0009 	smlad	r0, r5, r9, r0
 23ebe66:	fb25 4408 	smlad	r4, r5, r8, r4
 23ebe6a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23ebe6c:	fb25 ce09 	smlad	lr, r5, r9, ip
 23ebe70:	fb25 1808 	smlad	r8, r5, r8, r1
            col_count--;
 23ebe74:	e6e3      	b.n	23ebc3e <arm_nn_mat_mult_kernel_s8_s16+0x19e>
            q15_t b0 = *ip_b0++;
 23ebe76:	9e00      	ldr	r6, [sp, #0]
            q7_t a0 = *ip_a0++;
 23ebe78:	f911 9b01 	ldrsb.w	r9, [r1], #1
            q15_t b0 = *ip_b0++;
 23ebe7c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 23ebe80:	9600      	str	r6, [sp, #0]
 23ebe82:	462e      	mov	r6, r5
            q7_t a1 = *ip_a1++;
 23ebe84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
            ch_0_out_0 += a0 * b0;
 23ebe86:	fb16 0009 	smlabb	r0, r6, r9, r0
            q7_t a1 = *ip_a1++;
 23ebe8a:	f915 cb01 	ldrsb.w	ip, [r5], #1
 23ebe8e:	950d      	str	r5, [sp, #52]	; 0x34
            q15_t b1 = *ip_b1++;
 23ebe90:	f937 5b02 	ldrsh.w	r5, [r7], #2
            ch_1_out_0 += a1 * b0;
 23ebe94:	fb16 ee0c 	smlabb	lr, r6, ip, lr
            q15_t b1 = *ip_b1++;
 23ebe98:	950e      	str	r5, [sp, #56]	; 0x38
            ch_0_out_1 += a0 * b1;
 23ebe9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23ebe9c:	fb15 4409 	smlabb	r4, r5, r9, r4
            ch_1_out_1 += a1 * b1;
 23ebea0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 23ebea2:	fb15 880c 	smlabb	r8, r5, ip, r8
            col_count--;
 23ebea6:	e6d9      	b.n	23ebc5c <arm_nn_mat_mult_kernel_s8_s16+0x1bc>
    memcpy(&val, *in_q7, 4);
 23ebea8:	f856 3b04 	ldr.w	r3, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ebeac:	ea4f 2e33 	mov.w	lr, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ebeb0:	fa2f f383 	sxtb16	r3, r3
 23ebeb4:	fa2f fe8e 	sxtb16	lr, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ebeb8:	eace 4723 	pkhtb	r7, lr, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ebebc:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ebec0:	f8db e000 	ldr.w	lr, [fp]
 23ebec4:	fb23 220e 	smlad	r2, r3, lr, r2
 23ebec8:	9d02      	ldr	r5, [sp, #8]
 23ebeca:	f8d5 e000 	ldr.w	lr, [r5]
 23ebece:	fb23 c30e 	smlad	r3, r3, lr, ip
    memcpy(&val, *in_q15, 4);
 23ebed2:	f8d5 c004 	ldr.w	ip, [r5, #4]
 23ebed6:	3508      	adds	r5, #8
 23ebed8:	f8db e004 	ldr.w	lr, [fp, #4]
    *in_q15 += 2;
 23ebedc:	9502      	str	r5, [sp, #8]
 23ebede:	f10b 0b08 	add.w	fp, fp, #8
 23ebee2:	fb27 220e 	smlad	r2, r7, lr, r2
 23ebee6:	fb27 3c0c 	smlad	ip, r7, ip, r3
            col_count--;
 23ebeea:	e626      	b.n	23ebb3a <arm_nn_mat_mult_kernel_s8_s16+0x9a>
            q7_t a0 = *ip_a0++;
 23ebeec:	f911 6b01 	ldrsb.w	r6, [r1], #1
            ch_0_out_0 += a0 * b0;
 23ebef0:	f83b 7b02 	ldrh.w	r7, [fp], #2
            ch_0_out_1 += a0 * b1;
 23ebef4:	9d08      	ldr	r5, [sp, #32]
            ch_0_out_0 += a0 * b0;
 23ebef6:	fb17 2206 	smlabb	r2, r7, r6, r2
            ch_0_out_1 += a0 * b1;
 23ebefa:	f835 7b02 	ldrh.w	r7, [r5], #2
 23ebefe:	fb17 cc06 	smlabb	ip, r7, r6, ip
 23ebf02:	9508      	str	r5, [sp, #32]
 23ebf04:	e623      	b.n	23ebb4e <arm_nn_mat_mult_kernel_s8_s16+0xae>

023ebf06 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 23ebf06:	b410      	push	{r4}
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
 23ebf08:	9c06      	ldr	r4, [sp, #24]
 23ebf0a:	68a4      	ldr	r4, [r4, #8]
 23ebf0c:	07a4      	lsls	r4, r4, #30
 23ebf0e:	d103      	bne.n	23ebf18 <arm_convolve_1_x_n_s8+0x12>
#endif

out:
    /* Return to application */
    return status;
}
 23ebf10:	f85d 4b04 	ldr.w	r4, [sp], #4
    status = arm_convolve_s8(ctx,
 23ebf14:	f000 b89a 	b.w	23ec04c <arm_convolve_s8>
}
 23ebf18:	f06f 0002 	mvn.w	r0, #2
 23ebf1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 23ebf20:	4770      	bx	lr

023ebf22 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 23ebf22:	688b      	ldr	r3, [r1, #8]
 23ebf24:	68c0      	ldr	r0, [r0, #12]
 23ebf26:	4358      	muls	r0, r3
 23ebf28:	684b      	ldr	r3, [r1, #4]
 23ebf2a:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 23ebf2c:	0080      	lsls	r0, r0, #2
 23ebf2e:	4770      	bx	lr

023ebf30 <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 23ebf30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ebf34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 23ebf36:	4684      	mov	ip, r0
 23ebf38:	e9dd ba0f 	ldrd	fp, sl, [sp, #60]	; 0x3c
 23ebf3c:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	; 0x44
 23ebf40:	9600      	str	r6, [sp, #0]
 23ebf42:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 23ebf46:	9701      	str	r7, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23ebf48:	690f      	ldr	r7, [r1, #16]
{
 23ebf4a:	460c      	mov	r4, r1
 23ebf4c:	4696      	mov	lr, r2
 23ebf4e:	461d      	mov	r5, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23ebf50:	b9af      	cbnz	r7, 23ebf7e <arm_convolve_wrapper_s8+0x4e>
 23ebf52:	694f      	ldr	r7, [r1, #20]
 23ebf54:	b99f      	cbnz	r7, 23ebf7e <arm_convolve_wrapper_s8+0x4e>
 23ebf56:	68df      	ldr	r7, [r3, #12]
 23ebf58:	07bf      	lsls	r7, r7, #30
 23ebf5a:	d110      	bne.n	23ebf7e <arm_convolve_wrapper_s8+0x4e>
 23ebf5c:	688f      	ldr	r7, [r1, #8]
 23ebf5e:	2f01      	cmp	r7, #1
 23ebf60:	d10d      	bne.n	23ebf7e <arm_convolve_wrapper_s8+0x4e>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 23ebf62:	68cf      	ldr	r7, [r1, #12]
 23ebf64:	2f01      	cmp	r7, #1
 23ebf66:	d10a      	bne.n	23ebf7e <arm_convolve_wrapper_s8+0x4e>
 23ebf68:	68b7      	ldr	r7, [r6, #8]
 23ebf6a:	2f01      	cmp	r7, #1
 23ebf6c:	d107      	bne.n	23ebf7e <arm_convolve_wrapper_s8+0x4e>
 23ebf6e:	6877      	ldr	r7, [r6, #4]
 23ebf70:	2f01      	cmp	r7, #1
 23ebf72:	d104      	bne.n	23ebf7e <arm_convolve_wrapper_s8+0x4e>
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 23ebf74:	b003      	add	sp, #12
 23ebf76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
 23ebf7a:	f7ff bd5e 	b.w	23eba3a <arm_convolve_1x1_s8_fast>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 23ebf7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23ebf82:	2b01      	cmp	r3, #1
 23ebf84:	d11e      	bne.n	23ebfc4 <arm_convolve_wrapper_s8+0x94>
 23ebf86:	686b      	ldr	r3, [r5, #4]
 23ebf88:	2b01      	cmp	r3, #1
 23ebf8a:	d11b      	bne.n	23ebfc4 <arm_convolve_wrapper_s8+0x94>
 23ebf8c:	6873      	ldr	r3, [r6, #4]
 23ebf8e:	2b01      	cmp	r3, #1
 23ebf90:	d118      	bne.n	23ebfc4 <arm_convolve_wrapper_s8+0x94>
 23ebf92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23ebf96:	079b      	lsls	r3, r3, #30
 23ebf98:	d114      	bne.n	23ebfc4 <arm_convolve_wrapper_s8+0x94>
 23ebf9a:	682b      	ldr	r3, [r5, #0]
 23ebf9c:	2b01      	cmp	r3, #1
 23ebf9e:	d111      	bne.n	23ebfc4 <arm_convolve_wrapper_s8+0x94>
        return arm_convolve_1_x_n_s8(ctx,
 23ebfa0:	9b01      	ldr	r3, [sp, #4]
 23ebfa2:	4672      	mov	r2, lr
 23ebfa4:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 23ebfa8:	9b00      	ldr	r3, [sp, #0]
 23ebfaa:	4621      	mov	r1, r4
 23ebfac:	930c      	str	r3, [sp, #48]	; 0x30
 23ebfae:	4660      	mov	r0, ip
 23ebfb0:	462b      	mov	r3, r5
 23ebfb2:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
 23ebfb6:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 23ebfba:	b003      	add	sp, #12
 23ebfbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
 23ebfc0:	f7ff bfa1 	b.w	23ebf06 <arm_convolve_1_x_n_s8>
        return arm_convolve_s8(ctx,
 23ebfc4:	9b01      	ldr	r3, [sp, #4]
 23ebfc6:	4672      	mov	r2, lr
 23ebfc8:	e9cd 630d 	strd	r6, r3, [sp, #52]	; 0x34
 23ebfcc:	9b00      	ldr	r3, [sp, #0]
 23ebfce:	4621      	mov	r1, r4
 23ebfd0:	930c      	str	r3, [sp, #48]	; 0x30
 23ebfd2:	4660      	mov	r0, ip
 23ebfd4:	462b      	mov	r3, r5
 23ebfd6:	e9cd 8911 	strd	r8, r9, [sp, #68]	; 0x44
 23ebfda:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
}
 23ebfde:	b003      	add	sp, #12
 23ebfe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
 23ebfe4:	f000 b832 	b.w	23ec04c <arm_convolve_s8>

023ebfe8 <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 23ebfe8:	b410      	push	{r4}
 23ebfea:	4604      	mov	r4, r0
 23ebfec:	4608      	mov	r0, r1
 23ebfee:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 23ebff0:	6922      	ldr	r2, [r4, #16]
 23ebff2:	b9a2      	cbnz	r2, 23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ebff4:	6962      	ldr	r2, [r4, #20]
 23ebff6:	b992      	cbnz	r2, 23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ebff8:	68c2      	ldr	r2, [r0, #12]
 23ebffa:	0792      	lsls	r2, r2, #30
 23ebffc:	d10f      	bne.n	23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ebffe:	68a2      	ldr	r2, [r4, #8]
 23ec000:	2a01      	cmp	r2, #1
 23ec002:	d10c      	bne.n	23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 23ec004:	68e2      	ldr	r2, [r4, #12]
 23ec006:	2a01      	cmp	r2, #1
 23ec008:	d109      	bne.n	23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ec00a:	688a      	ldr	r2, [r1, #8]
 23ec00c:	2a01      	cmp	r2, #1
 23ec00e:	d106      	bne.n	23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
 23ec010:	684a      	ldr	r2, [r1, #4]
 23ec012:	2a01      	cmp	r2, #1
 23ec014:	d103      	bne.n	23ec01e <arm_convolve_wrapper_s8_get_buffer_size+0x36>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
    }
}
 23ec016:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 23ec01a:	f7ff bd3f 	b.w	23eba9c <arm_convolve_1x1_s8_fast_get_buffer_size>
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 23ec01e:	685a      	ldr	r2, [r3, #4]
 23ec020:	2a01      	cmp	r2, #1
 23ec022:	d10f      	bne.n	23ec044 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ec024:	6842      	ldr	r2, [r0, #4]
 23ec026:	2a01      	cmp	r2, #1
 23ec028:	d10c      	bne.n	23ec044 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ec02a:	684a      	ldr	r2, [r1, #4]
 23ec02c:	2a01      	cmp	r2, #1
 23ec02e:	d109      	bne.n	23ec044 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ec030:	689b      	ldr	r3, [r3, #8]
 23ec032:	079b      	lsls	r3, r3, #30
 23ec034:	d106      	bne.n	23ec044 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
 23ec036:	6803      	ldr	r3, [r0, #0]
 23ec038:	2b01      	cmp	r3, #1
 23ec03a:	d103      	bne.n	23ec044 <arm_convolve_wrapper_s8_get_buffer_size+0x5c>
}
 23ec03c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 23ec040:	f7ff bf6f 	b.w	23ebf22 <arm_convolve_1_x_n_s8_get_buffer_size>
}
 23ec044:	f85d 4b04 	ldr.w	r4, [sp], #4
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 23ec048:	f000 b985 	b.w	23ec356 <arm_convolve_s8_get_buffer_size>

023ec04c <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 23ec04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ec050:	ed2d 8b02 	vpush	{d8}
 23ec054:	4694      	mov	ip, r2
 23ec056:	b0b1      	sub	sp, #196	; 0xc4
 23ec058:	9c41      	ldr	r4, [sp, #260]	; 0x104
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ec05a:	f8d0 b000 	ldr.w	fp, [r0]
    const uint16_t input_ch = input_dims->c;
    const uint16_t kernel_x = filter_dims->w;
    const uint16_t kernel_y = filter_dims->h;
    const uint16_t output_x = output_dims->w;
    const uint16_t output_y = output_dims->h;
    const uint16_t output_ch = output_dims->c;
 23ec05e:	68e7      	ldr	r7, [r4, #12]
    const uint16_t input_batches = input_dims->n;
 23ec060:	6818      	ldr	r0, [r3, #0]
    const uint16_t output_ch = output_dims->c;
 23ec062:	b2ba      	uxth	r2, r7
 23ec064:	ee08 2a10 	vmov	s16, r2

    const uint16_t pad_x = conv_params->padding.w;
 23ec068:	690a      	ldr	r2, [r1, #16]
{
 23ec06a:	9e3d      	ldr	r6, [sp, #244]	; 0xf4
    const uint16_t pad_x = conv_params->padding.w;
 23ec06c:	9220      	str	r2, [sp, #128]	; 0x80
    const uint16_t pad_y = conv_params->padding.h;
 23ec06e:	694a      	ldr	r2, [r1, #20]
    const uint16_t input_ch = input_dims->c;
 23ec070:	68dd      	ldr	r5, [r3, #12]
    const uint16_t pad_y = conv_params->padding.h;
 23ec072:	9221      	str	r2, [sp, #132]	; 0x84
    const uint16_t stride_x = conv_params->stride.w;
 23ec074:	688a      	ldr	r2, [r1, #8]
    const uint16_t input_batches = input_dims->n;
 23ec076:	901f      	str	r0, [sp, #124]	; 0x7c
    const uint16_t stride_x = conv_params->stride.w;
 23ec078:	9222      	str	r2, [sp, #136]	; 0x88
    const uint16_t stride_y = conv_params->stride.h;
 23ec07a:	68ca      	ldr	r2, [r1, #12]
    const uint16_t kernel_y = filter_dims->h;
 23ec07c:	e9d6 6001 	ldrd	r6, r0, [r6, #4]
    const uint16_t stride_y = conv_params->stride.h;
 23ec080:	9223      	str	r2, [sp, #140]	; 0x8c

    const int32_t input_offset = conv_params->input_offset;
    const int32_t out_offset = conv_params->output_offset;
 23ec082:	684a      	ldr	r2, [r1, #4]
 23ec084:	fa1f fa85 	uxth.w	sl, r5
 23ec088:	9214      	str	r2, [sp, #80]	; 0x50
    const int32_t out_activation_min = conv_params->activation.min;
 23ec08a:	6a0a      	ldr	r2, [r1, #32]
 23ec08c:	9215      	str	r2, [sp, #84]	; 0x54
    const int32_t out_activation_max = conv_params->activation.max;
 23ec08e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 23ec090:	9216      	str	r2, [sp, #88]	; 0x58
    int32_t *output_mult = quant_params->multiplier;
 23ec092:	f8dc 2000 	ldr.w	r2, [ip]
 23ec096:	9217      	str	r2, [sp, #92]	; 0x5c
    int32_t *output_shift = quant_params->shift;
 23ec098:	f8dc 2004 	ldr.w	r2, [ip, #4]
 23ec09c:	9218      	str	r2, [sp, #96]	; 0x60

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ec09e:	88a2      	ldrh	r2, [r4, #4]
 23ec0a0:	9219      	str	r2, [sp, #100]	; 0x64
 23ec0a2:	891a      	ldrh	r2, [r3, #8]
 23ec0a4:	920b      	str	r2, [sp, #44]	; 0x2c
 23ec0a6:	889b      	ldrh	r3, [r3, #4]
 23ec0a8:	9313      	str	r3, [sp, #76]	; 0x4c
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 23ec0aa:	4613      	mov	r3, r2
 23ec0ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ec0ae:	4353      	muls	r3, r2
 23ec0b0:	fb0a f303 	mul.w	r3, sl, r3
 23ec0b4:	9329      	str	r3, [sp, #164]	; 0xa4
 23ec0b6:	8923      	ldrh	r3, [r4, #8]
 23ec0b8:	931a      	str	r3, [sp, #104]	; 0x68
 23ec0ba:	b2bb      	uxth	r3, r7
 23ec0bc:	931b      	str	r3, [sp, #108]	; 0x6c
        output_data += (output_x * output_y * output_ch);
 23ec0be:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 23ec0c2:	4353      	muls	r3, r2
 23ec0c4:	ee18 2a10 	vmov	r2, s16
 23ec0c8:	4353      	muls	r3, r2
 23ec0ca:	9328      	str	r3, [sp, #160]	; 0xa0
 23ec0cc:	b2b3      	uxth	r3, r6
 23ec0ce:	931c      	str	r3, [sp, #112]	; 0x70
 23ec0d0:	b283      	uxth	r3, r0
 23ec0d2:	9312      	str	r3, [sp, #72]	; 0x48
 23ec0d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ec0d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 23ec0d8:	fb10 f006 	smulbb	r0, r0, r6
 23ec0dc:	435a      	muls	r2, r3
 23ec0de:	fb10 f505 	smulbb	r5, r0, r5
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 23ec0e2:	fb02 f30a 	mul.w	r3, r2, sl
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 23ec0e6:	b2a8      	uxth	r0, r5
 23ec0e8:	9026      	str	r0, [sp, #152]	; 0x98
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 23ec0ea:	eb0b 0083 	add.w	r0, fp, r3, lsl #2
 23ec0ee:	9024      	str	r0, [sp, #144]	; 0x90
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 23ec0f0:	ea4f 004a 	mov.w	r0, sl, lsl #1
 23ec0f4:	9009      	str	r0, [sp, #36]	; 0x24
 23ec0f6:	f3c3 038f 	ubfx	r3, r3, #2, #16
 23ec0fa:	f005 0003 	and.w	r0, r5, #3
 23ec0fe:	901e      	str	r0, [sp, #120]	; 0x78
 23ec100:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23ec104:	901d      	str	r0, [sp, #116]	; 0x74
 23ec106:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23ec108:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23ec10c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 23ec110:	932d      	str	r3, [sp, #180]	; 0xb4
 23ec112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ec114:	902a      	str	r0, [sp, #168]	; 0xa8
 23ec116:	fb0a f303 	mul.w	r3, sl, r3
 23ec11a:	9327      	str	r3, [sp, #156]	; 0x9c
 23ec11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ec11e:	4353      	muls	r3, r2
 23ec120:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ec122:	932b      	str	r3, [sp, #172]	; 0xac
 23ec124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ec126:	4353      	muls	r3, r2
 23ec128:	932c      	str	r3, [sp, #176]	; 0xb0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ec12a:	2300      	movs	r3, #0
 23ec12c:	930d      	str	r3, [sp, #52]	; 0x34
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 23ec12e:	f9b1 3000 	ldrsh.w	r3, [r1]
 23ec132:	ee08 3a90 	vmov	s17, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ec136:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 23ec13a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23ec13c:	429a      	cmp	r2, r3
 23ec13e:	f2c0 8086 	blt.w	23ec24e <arm_convolve_s8+0x202>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
 23ec142:	2000      	movs	r0, #0
 23ec144:	b031      	add	sp, #196	; 0xc4
 23ec146:	ecbd 8b02 	vpop	{d8}
 23ec14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ec14e:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 23ec152:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 23ec156:	fb09 f303 	mul.w	r3, r9, r3
 23ec15a:	1a9b      	subs	r3, r3, r2
 23ec15c:	9311      	str	r3, [sp, #68]	; 0x44
 23ec15e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23ec160:	9b25      	ldr	r3, [sp, #148]	; 0x94
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ec162:	9e10      	ldr	r6, [sp, #64]	; 0x40
 23ec164:	189c      	adds	r4, r3, r2
 23ec166:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 23ec168:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23ec16a:	fb0a 3304 	mla	r3, sl, r4, r3
 23ec16e:	930c      	str	r3, [sp, #48]	; 0x30
 23ec170:	4633      	mov	r3, r6
 23ec172:	4413      	add	r3, r2
 23ec174:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 23ec178:	932f      	str	r3, [sp, #188]	; 0xbc
 23ec17a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 23ec17c:	42b3      	cmp	r3, r6
 23ec17e:	dc5e      	bgt.n	23ec23e <arm_convolve_s8+0x1f2>
 23ec180:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23ec182:	4498      	add	r8, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 23ec184:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23ec186:	4543      	cmp	r3, r8
 23ec188:	d118      	bne.n	23ec1bc <arm_convolve_s8+0x170>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 23ec18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec18c:	ee18 2a10 	vmov	r2, s16
 23ec190:	9306      	str	r3, [sp, #24]
 23ec192:	9b40      	ldr	r3, [sp, #256]	; 0x100
 23ec194:	4659      	mov	r1, fp
 23ec196:	9305      	str	r3, [sp, #20]
 23ec198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23ec19a:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23ec19c:	9304      	str	r3, [sp, #16]
 23ec19e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ec1a2:	46d8      	mov	r8, fp
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 23ec1a4:	9303      	str	r3, [sp, #12]
 23ec1a6:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 23ec1aa:	9302      	str	r3, [sp, #8]
 23ec1ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ec1ae:	9301      	str	r3, [sp, #4]
 23ec1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ec1b2:	9300      	str	r3, [sp, #0]
 23ec1b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ec1b6:	f7ff fc73 	bl	23ebaa0 <arm_nn_mat_mult_kernel_s8_s16>
 23ec1ba:	900f      	str	r0, [sp, #60]	; 0x3c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 23ec1bc:	f109 0901 	add.w	r9, r9, #1
 23ec1c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ec1c2:	4599      	cmp	r9, r3
 23ec1c4:	dbc3      	blt.n	23ec14e <arm_convolve_s8+0x102>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 23ec1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ec1c8:	3301      	adds	r3, #1
 23ec1ca:	930a      	str	r3, [sp, #40]	; 0x28
 23ec1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ec1ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ec1d0:	4293      	cmp	r3, r2
 23ec1d2:	da41      	bge.n	23ec258 <arm_convolve_s8+0x20c>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ec1d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ec1d6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 23ec1da:	f04f 0900 	mov.w	r9, #0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ec1de:	4353      	muls	r3, r2
 23ec1e0:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 23ec1e4:	1a9b      	subs	r3, r3, r2
 23ec1e6:	9310      	str	r3, [sp, #64]	; 0x40
 23ec1e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23ec1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ec1ec:	4353      	muls	r3, r2
 23ec1ee:	9325      	str	r3, [sp, #148]	; 0x94
 23ec1f0:	e7e6      	b.n	23ec1c0 <arm_convolve_s8+0x174>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 23ec1f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23ec1f4:	42b3      	cmp	r3, r6
 23ec1f6:	d904      	bls.n	23ec202 <arm_convolve_s8+0x1b6>
 23ec1f8:	2d00      	cmp	r5, #0
 23ec1fa:	db02      	blt.n	23ec202 <arm_convolve_s8+0x1b6>
 23ec1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ec1fe:	429d      	cmp	r5, r3
 23ec200:	db15      	blt.n	23ec22e <arm_convolve_s8+0x1e2>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 23ec202:	2100      	movs	r1, #0
 23ec204:	4638      	mov	r0, r7
 23ec206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ec208:	f00e ff5c 	bl	23fb0c4 <memset>
                        two_column_buf += input_ch;
 23ec20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                         i_ker_x++)
 23ec20e:	3501      	adds	r5, #1
                        two_column_buf += input_ch;
 23ec210:	441f      	add	r7, r3
                         i_ker_x++)
 23ec212:	4454      	add	r4, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ec214:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23ec216:	42ab      	cmp	r3, r5
 23ec218:	dceb      	bgt.n	23ec1f2 <arm_convolve_s8+0x1a6>
 23ec21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23ec21c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 23ec21e:	3601      	adds	r6, #1
 23ec220:	4413      	add	r3, r2
 23ec222:	930e      	str	r3, [sp, #56]	; 0x38
 23ec224:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23ec226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ec228:	4413      	add	r3, r2
 23ec22a:	930c      	str	r3, [sp, #48]	; 0x30
 23ec22c:	e7a5      	b.n	23ec17a <arm_convolve_s8+0x12e>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 23ec22e:	ee18 3a90 	vmov	r3, s17
 23ec232:	4652      	mov	r2, sl
 23ec234:	4639      	mov	r1, r7
 23ec236:	4620      	mov	r0, r4
 23ec238:	f7fe ff49 	bl	23eb0ce <arm_q7_to_q15_with_offset>
 23ec23c:	e7e6      	b.n	23ec20c <arm_convolve_s8+0x1c0>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
 23ec23e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 23ec240:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23ec242:	462b      	mov	r3, r5
 23ec244:	4413      	add	r3, r2
 23ec246:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23ec248:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 23ec24a:	932e      	str	r3, [sp, #184]	; 0xb8
 23ec24c:	e7e2      	b.n	23ec214 <arm_convolve_s8+0x1c8>
        q7_t *out = output_data;
 23ec24e:	9b42      	ldr	r3, [sp, #264]	; 0x108
    q15_t *buffer_a = (q15_t *)ctx->buf;
 23ec250:	46d8      	mov	r8, fp
        q7_t *out = output_data;
 23ec252:	930f      	str	r3, [sp, #60]	; 0x3c
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 23ec254:	2300      	movs	r3, #0
 23ec256:	e7b8      	b.n	23ec1ca <arm_convolve_s8+0x17e>
        if (two_column_buf != buffer_a)
 23ec258:	45d8      	cmp	r8, fp
 23ec25a:	d173      	bne.n	23ec344 <arm_convolve_s8+0x2f8>
        input_data += (input_x * input_y * input_ch);
 23ec25c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 23ec25e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23ec260:	4413      	add	r3, r2
 23ec262:	933c      	str	r3, [sp, #240]	; 0xf0
        output_data += (output_x * output_y * output_ch);
 23ec264:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23ec266:	9b42      	ldr	r3, [sp, #264]	; 0x108
 23ec268:	4413      	add	r3, r2
 23ec26a:	9342      	str	r3, [sp, #264]	; 0x108
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 23ec26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ec26e:	3301      	adds	r3, #1
 23ec270:	930d      	str	r3, [sp, #52]	; 0x34
 23ec272:	e760      	b.n	23ec136 <arm_convolve_s8+0xea>
                if (bias_data)
 23ec274:	9b40      	ldr	r3, [sp, #256]	; 0x100
 23ec276:	2b00      	cmp	r3, #0
 23ec278:	d046      	beq.n	23ec308 <arm_convolve_s8+0x2bc>
                    sum = bias_data[i];
 23ec27a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
                while (col_count)
 23ec27e:	465c      	mov	r4, fp
 23ec280:	462e      	mov	r6, r5
 23ec282:	42b0      	cmp	r0, r6
 23ec284:	4603      	mov	r3, r0
 23ec286:	d141      	bne.n	23ec30c <arm_convolve_s8+0x2c0>
                while (col_count)
 23ec288:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 23ec28a:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 23ec28c:	4406      	add	r6, r0
 23ec28e:	42b3      	cmp	r3, r6
 23ec290:	d151      	bne.n	23ec336 <arm_convolve_s8+0x2ea>
 23ec292:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ec294:	464c      	mov	r4, r9
 23ec296:	441d      	add	r5, r3
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 23ec298:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ec29a:	46be      	mov	lr, r7
 23ec29c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ec2a0:	2e00      	cmp	r6, #0
 23ec2a2:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 23ec2a6:	bfc8      	it	gt
 23ec2a8:	2600      	movgt	r6, #0
 23ec2aa:	fa01 f103 	lsl.w	r1, r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ec2ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ec2b0:	bfd8      	it	le
 23ec2b2:	4276      	negle	r6, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ec2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ec2b8:	fbc1 4e03 	smlal	r4, lr, r1, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ec2bc:	fa0c f306 	lsl.w	r3, ip, r6
    result = (int32_t)(mult.long_long >> 31);
 23ec2c0:	0fe4      	lsrs	r4, r4, #31
 23ec2c2:	ea44 0e4e 	orr.w	lr, r4, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ec2c6:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23ec2c8:	ea0e 0103 	and.w	r1, lr, r3
    if (result < 0)
 23ec2cc:	fa5e fe06 	asrs.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
 23ec2d0:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23ec2d4:	bf48      	it	mi
 23ec2d6:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23ec2d8:	4299      	cmp	r1, r3
                sum += out_offset;
 23ec2da:	9b14      	ldr	r3, [sp, #80]	; 0x50
        result++;
 23ec2dc:	bfc8      	it	gt
 23ec2de:	f10e 0e01 	addgt.w	lr, lr, #1
 23ec2e2:	449e      	add	lr, r3
                sum = MAX(sum, out_activation_min);
 23ec2e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ec2e6:	459e      	cmp	lr, r3
 23ec2e8:	bfb8      	it	lt
 23ec2ea:	469e      	movlt	lr, r3
                sum = MIN(sum, out_activation_max);
 23ec2ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ec2ee:	459e      	cmp	lr, r3
 23ec2f0:	bfa8      	it	ge
 23ec2f2:	469e      	movge	lr, r3
                *out++ = (q7_t)sum;
 23ec2f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec2f6:	f803 e002 	strb.w	lr, [r3, r2]
            for (i = 0; i < output_ch; i++)
 23ec2fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 23ec2fc:	3201      	adds	r2, #1
 23ec2fe:	4418      	add	r0, r3
 23ec300:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23ec302:	429a      	cmp	r2, r3
 23ec304:	d1b6      	bne.n	23ec274 <arm_convolve_s8+0x228>
 23ec306:	e7a9      	b.n	23ec25c <arm_convolve_s8+0x210>
                q31_t sum = 0;
 23ec308:	9940      	ldr	r1, [sp, #256]	; 0x100
 23ec30a:	e7b8      	b.n	23ec27e <arm_convolve_s8+0x232>
    memcpy(&val, *in_q7, 4);
 23ec30c:	f856 eb04 	ldr.w	lr, [r6], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 23ec310:	ea4f 233e 	mov.w	r3, lr, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23ec314:	fa2f f883 	sxtb16	r8, r3
 23ec318:	fa2f f38e 	sxtb16	r3, lr
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23ec31c:	eac8 4e23 	pkhtb	lr, r8, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23ec320:	eac3 4308 	pkhbt	r3, r3, r8, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23ec324:	f8d4 8000 	ldr.w	r8, [r4]
 23ec328:	fb23 1308 	smlad	r3, r3, r8, r1
    memcpy(&val, *in_q15, 4);
 23ec32c:	6861      	ldr	r1, [r4, #4]
    *in_q15 += 2;
 23ec32e:	3408      	adds	r4, #8
 23ec330:	fb2e 3101 	smlad	r1, lr, r1, r3
                    col_count--;
 23ec334:	e7a5      	b.n	23ec282 <arm_convolve_s8+0x236>
                    sum += ker_a1 * ip_b1;
 23ec336:	f913 eb01 	ldrsb.w	lr, [r3], #1
 23ec33a:	f834 8b02 	ldrh.w	r8, [r4], #2
 23ec33e:	fb18 110e 	smlabb	r1, r8, lr, r1
                    col_count--;
 23ec342:	e7a4      	b.n	23ec28e <arm_convolve_s8+0x242>
            for (i = 0; i < output_ch; i++)
 23ec344:	2200      	movs	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ec346:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 23ec34a:	4617      	mov	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ec34c:	f04f 0c01 	mov.w	ip, #1
 23ec350:	982a      	ldr	r0, [sp, #168]	; 0xa8
            const q7_t *ker_a = filter_data;
 23ec352:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 23ec354:	e7d4      	b.n	23ec300 <arm_convolve_s8+0x2b4>

023ec356 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 23ec356:	688b      	ldr	r3, [r1, #8]
 23ec358:	68c0      	ldr	r0, [r0, #12]
 23ec35a:	4358      	muls	r0, r3
 23ec35c:	684b      	ldr	r3, [r1, #4]
 23ec35e:	4358      	muls	r0, r3
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 23ec360:	0080      	lsls	r0, r0, #2
 23ec362:	4770      	bx	lr

023ec364 <arm_avgpool_s8_get_buffer_size>:
    return (ch_src * sizeof(int32_t));
#else
    (void)ch_src;
    return 0;
#endif
}
 23ec364:	0088      	lsls	r0, r1, #2
 23ec366:	4770      	bx	lr

023ec368 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 23ec368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
 23ec36c:	6894      	ldr	r4, [r2, #8]
{
 23ec36e:	b0a3      	sub	sp, #140	; 0x8c
 23ec370:	931f      	str	r3, [sp, #124]	; 0x7c
    const int32_t input_x = input_dims->w;
 23ec372:	9409      	str	r4, [sp, #36]	; 0x24
{
 23ec374:	e9dd 302c 	ldrd	r3, r0, [sp, #176]	; 0xb0
    const int32_t output_y = output_dims->h;
 23ec378:	6844      	ldr	r4, [r0, #4]
    const int32_t output_x = output_dims->w;
 23ec37a:	6880      	ldr	r0, [r0, #8]
    const int32_t output_y = output_dims->h;
 23ec37c:	9413      	str	r4, [sp, #76]	; 0x4c
    const int32_t output_x = output_dims->w;
 23ec37e:	900a      	str	r0, [sp, #40]	; 0x28
    const int32_t stride_y = pool_params->stride.h;
 23ec380:	6848      	ldr	r0, [r1, #4]
    const int32_t kernel_x = filter_dims->w;
    const int32_t pad_y = pool_params->padding.h;
    const int32_t pad_x = pool_params->padding.w;
    const int32_t act_min = pool_params->activation.min;
    const int32_t act_max = pool_params->activation.max;
    const int32_t channel_in = input_dims->c;
 23ec382:	68d4      	ldr	r4, [r2, #12]
    const int32_t stride_y = pool_params->stride.h;
 23ec384:	900b      	str	r0, [sp, #44]	; 0x2c
    const int32_t stride_x = pool_params->stride.w;
 23ec386:	6808      	ldr	r0, [r1, #0]
    const int32_t act_max = pool_params->activation.max;
 23ec388:	e9d1 9a04 	ldrd	r9, sl, [r1, #16]
    const int32_t stride_x = pool_params->stride.w;
 23ec38c:	900c      	str	r0, [sp, #48]	; 0x30
    const int32_t kernel_y = filter_dims->h;
 23ec38e:	6858      	ldr	r0, [r3, #4]
    const int32_t kernel_x = filter_dims->w;
 23ec390:	689b      	ldr	r3, [r3, #8]
    const int32_t kernel_y = filter_dims->h;
 23ec392:	9017      	str	r0, [sp, #92]	; 0x5c
    const int32_t kernel_x = filter_dims->w;
 23ec394:	9318      	str	r3, [sp, #96]	; 0x60
    const int32_t pad_x = pool_params->padding.w;
 23ec396:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
 23ec39a:	9303      	str	r3, [sp, #12]
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ec39c:	4259      	negs	r1, r3
 23ec39e:	6853      	ldr	r3, [r2, #4]
 23ec3a0:	9a03      	ldr	r2, [sp, #12]
 23ec3a2:	9101      	str	r1, [sp, #4]
 23ec3a4:	18d3      	adds	r3, r2, r3
 23ec3a6:	9311      	str	r3, [sp, #68]	; 0x44
 23ec3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    int32_t cnt = length >> 2;
 23ec3aa:	10a1      	asrs	r1, r4, #2
 23ec3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23ec3b0:	4363      	muls	r3, r4
 23ec3b2:	931d      	str	r3, [sp, #116]	; 0x74
 23ec3b4:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ec3b8:	009b      	lsls	r3, r3, #2
    const int32_t pad_x = pool_params->padding.w;
 23ec3ba:	900d      	str	r0, [sp, #52]	; 0x34
    int32_t cnt = length >> 2;
 23ec3bc:	911b      	str	r1, [sp, #108]	; 0x6c
 23ec3be:	9315      	str	r3, [sp, #84]	; 0x54
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ec3c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23ec3c2:	9304      	str	r3, [sp, #16]
 23ec3c4:	2300      	movs	r3, #0
 23ec3c6:	9305      	str	r3, [sp, #20]
 23ec3c8:	9b05      	ldr	r3, [sp, #20]
 23ec3ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23ec3cc:	4293      	cmp	r3, r2
 23ec3ce:	db17      	blt.n	23ec400 <arm_max_pool_s8+0x98>
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 23ec3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    while (cnt > 0l)
 23ec3d2:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 23ec3d4:	435a      	muls	r2, r3
 23ec3d6:	4354      	muls	r4, r2
    int32_t cnt = length >> 2;
 23ec3d8:	10a1      	asrs	r1, r4, #2
 23ec3da:	4608      	mov	r0, r1
    while (cnt > 0l)
 23ec3dc:	2800      	cmp	r0, #0
 23ec3de:	f300 80d7 	bgt.w	23ec590 <arm_max_pool_s8+0x228>
 23ec3e2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 23ec3e4:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23ec3e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cnt = length & 0x3;
 23ec3ec:	f004 0403 	and.w	r4, r4, #3
 23ec3f0:	441c      	add	r4, r3
    while (cnt > 0l)
 23ec3f2:	42a3      	cmp	r3, r4
 23ec3f4:	f040 80fb 	bne.w	23ec5ee <arm_max_pool_s8+0x286>

    return ARM_MATH_SUCCESS;
}
 23ec3f8:	2000      	movs	r0, #0
 23ec3fa:	b023      	add	sp, #140	; 0x8c
 23ec3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ec400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ec402:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23ec404:	425b      	negs	r3, r3
 23ec406:	9302      	str	r3, [sp, #8]
 23ec408:	9b01      	ldr	r3, [sp, #4]
 23ec40a:	9e04      	ldr	r6, [sp, #16]
 23ec40c:	2b00      	cmp	r3, #0
 23ec40e:	9b03      	ldr	r3, [sp, #12]
 23ec410:	bfc8      	it	gt
 23ec412:	2300      	movgt	r3, #0
 23ec414:	9312      	str	r3, [sp, #72]	; 0x48
 23ec416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ec418:	930f      	str	r3, [sp, #60]	; 0x3c
 23ec41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ec41c:	4413      	add	r3, r2
 23ec41e:	9310      	str	r3, [sp, #64]	; 0x40
 23ec420:	9a01      	ldr	r2, [sp, #4]
 23ec422:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ec424:	4413      	add	r3, r2
 23ec426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ec428:	4353      	muls	r3, r2
 23ec42a:	931e      	str	r3, [sp, #120]	; 0x78
 23ec42c:	2300      	movs	r3, #0
 23ec42e:	9306      	str	r3, [sp, #24]
 23ec430:	9b06      	ldr	r3, [sp, #24]
 23ec432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ec434:	4293      	cmp	r3, r2
 23ec436:	db11      	blt.n	23ec45c <arm_max_pool_s8+0xf4>
 23ec438:	9b04      	ldr	r3, [sp, #16]
 23ec43a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 23ec43c:	4413      	add	r3, r2
 23ec43e:	9304      	str	r3, [sp, #16]
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 23ec440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ec442:	9b01      	ldr	r3, [sp, #4]
 23ec444:	4413      	add	r3, r2
 23ec446:	9301      	str	r3, [sp, #4]
 23ec448:	9b05      	ldr	r3, [sp, #20]
 23ec44a:	3301      	adds	r3, #1
 23ec44c:	9305      	str	r3, [sp, #20]
 23ec44e:	9b03      	ldr	r3, [sp, #12]
 23ec450:	1a9b      	subs	r3, r3, r2
 23ec452:	9303      	str	r3, [sp, #12]
 23ec454:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ec456:	1a9b      	subs	r3, r3, r2
 23ec458:	9311      	str	r3, [sp, #68]	; 0x44
 23ec45a:	e7b5      	b.n	23ec3c8 <arm_max_pool_s8+0x60>
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 23ec45c:	9b02      	ldr	r3, [sp, #8]
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ec45e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 23ec460:	2b00      	cmp	r3, #0
 23ec462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec464:	bfc8      	it	gt
 23ec466:	2300      	movgt	r3, #0
 23ec468:	9316      	str	r3, [sp, #88]	; 0x58
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ec46a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ec46c:	9916      	ldr	r1, [sp, #88]	; 0x58
 23ec46e:	4293      	cmp	r3, r2
 23ec470:	bfa8      	it	ge
 23ec472:	4613      	movge	r3, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 23ec474:	9a18      	ldr	r2, [sp, #96]	; 0x60
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 23ec476:	9319      	str	r3, [sp, #100]	; 0x64
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 23ec478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ec47a:	4293      	cmp	r3, r2
 23ec47c:	bfa8      	it	ge
 23ec47e:	4613      	movge	r3, r2
 23ec480:	931a      	str	r3, [sp, #104]	; 0x68
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ec482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ec484:	18f3      	adds	r3, r6, r3
 23ec486:	9314      	str	r3, [sp, #80]	; 0x50
 23ec488:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cnt = length & 0x3;
 23ec48a:	f004 0303 	and.w	r3, r4, #3
 23ec48e:	18d3      	adds	r3, r2, r3
 23ec490:	931c      	str	r3, [sp, #112]	; 0x70
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ec492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23ec494:	9a02      	ldr	r2, [sp, #8]
 23ec496:	930e      	str	r3, [sp, #56]	; 0x38
 23ec498:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ec49a:	440a      	add	r2, r1
 23ec49c:	9307      	str	r3, [sp, #28]
            int count = 0;
 23ec49e:	2300      	movs	r3, #0
 23ec4a0:	9221      	str	r2, [sp, #132]	; 0x84
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ec4a2:	9a07      	ldr	r2, [sp, #28]
 23ec4a4:	9919      	ldr	r1, [sp, #100]	; 0x64
 23ec4a6:	428a      	cmp	r2, r1
 23ec4a8:	da63      	bge.n	23ec572 <arm_max_pool_s8+0x20a>
 23ec4aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 23ec4ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 23ec4ae:	1855      	adds	r5, r2, r1
 23ec4b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23ec4b2:	fb04 2505 	mla	r5, r4, r5, r2
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 23ec4b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23ec4b8:	9208      	str	r2, [sp, #32]
 23ec4ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23ec4bc:	3a01      	subs	r2, #1
 23ec4be:	9220      	str	r2, [sp, #128]	; 0x80
 23ec4c0:	e00b      	b.n	23ec4da <arm_max_pool_s8+0x172>
                    if (count == 0)
 23ec4c2:	2b00      	cmp	r3, #0
 23ec4c4:	d151      	bne.n	23ec56a <arm_max_pool_s8+0x202>
                        memcpy(dst, start, channel_in);
 23ec4c6:	4622      	mov	r2, r4
 23ec4c8:	4629      	mov	r1, r5
 23ec4ca:	4630      	mov	r0, r6
 23ec4cc:	f00e fdd3 	bl	23fb076 <memcpy>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 23ec4d0:	9b08      	ldr	r3, [sp, #32]
 23ec4d2:	4425      	add	r5, r4
 23ec4d4:	3301      	adds	r3, #1
 23ec4d6:	9308      	str	r3, [sp, #32]
 23ec4d8:	2301      	movs	r3, #1
 23ec4da:	9a08      	ldr	r2, [sp, #32]
 23ec4dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 23ec4de:	428a      	cmp	r2, r1
 23ec4e0:	dbef      	blt.n	23ec4c2 <arm_max_pool_s8+0x15a>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 23ec4e2:	9a07      	ldr	r2, [sp, #28]
 23ec4e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ec4e6:	3201      	adds	r2, #1
 23ec4e8:	9207      	str	r2, [sp, #28]
 23ec4ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ec4ec:	440a      	add	r2, r1
 23ec4ee:	920e      	str	r2, [sp, #56]	; 0x38
 23ec4f0:	e7d7      	b.n	23ec4a2 <arm_max_pool_s8+0x13a>
    memcpy(&val, in_q7, 4);
 23ec4f2:	6803      	ldr	r3, [r0, #0]
    memcpy(&val, *in_q7, 4);
 23ec4f4:	f85e 2b04 	ldr.w	r2, [lr], #4
        if (comp_max.bytes[0] > ref_max.bytes[0])
 23ec4f8:	fa4f fc83 	sxtb.w	ip, r3
 23ec4fc:	fa4f fb82 	sxtb.w	fp, r2
 23ec500:	45dc      	cmp	ip, fp
 23ec502:	bfb8      	it	lt
 23ec504:	46dc      	movlt	ip, fp
 23ec506:	f342 2b07 	sbfx	fp, r2, #8, #8
 23ec50a:	f36c 0807 	bfi	r8, ip, #0, #8
        if (comp_max.bytes[1] > ref_max.bytes[1])
 23ec50e:	f343 2c07 	sbfx	ip, r3, #8, #8
 23ec512:	45dc      	cmp	ip, fp
 23ec514:	bfb8      	it	lt
 23ec516:	46dc      	movlt	ip, fp
 23ec518:	f342 4b07 	sbfx	fp, r2, #16, #8
 23ec51c:	f36c 280f 	bfi	r8, ip, #8, #8
        if (comp_max.bytes[2] > ref_max.bytes[2])
 23ec520:	f343 4c07 	sbfx	ip, r3, #16, #8
 23ec524:	45dc      	cmp	ip, fp
 23ec526:	ea4f 6323 	mov.w	r3, r3, asr #24
 23ec52a:	ea4f 6222 	mov.w	r2, r2, asr #24
 23ec52e:	bfb8      	it	lt
 23ec530:	46dc      	movlt	ip, fp
 23ec532:	4293      	cmp	r3, r2
 23ec534:	bfb8      	it	lt
 23ec536:	4613      	movlt	r3, r2
 23ec538:	f36c 4817 	bfi	r8, ip, #16, #8
        if (comp_max.bytes[3] > ref_max.bytes[3])
 23ec53c:	f363 681f 	bfi	r8, r3, #24, #8
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 23ec540:	f840 8b04 	str.w	r8, [r0], #4
        cnt--;
 23ec544:	3901      	subs	r1, #1
    while (cnt > 0l)
 23ec546:	2900      	cmp	r1, #0
 23ec548:	dcd3      	bgt.n	23ec4f2 <arm_max_pool_s8+0x18a>
    while (cnt > 0l)
 23ec54a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23ec54c:	18ea      	adds	r2, r5, r3
 23ec54e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ec550:	991c      	ldr	r1, [sp, #112]	; 0x70
 23ec552:	428b      	cmp	r3, r1
 23ec554:	d0bc      	beq.n	23ec4d0 <arm_max_pool_s8+0x168>
        if (*src > *dst)
 23ec556:	f993 0000 	ldrsb.w	r0, [r3]
 23ec55a:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
        dst++;
 23ec55e:	3301      	adds	r3, #1
        if (*src > *dst)
 23ec560:	4288      	cmp	r0, r1
            *dst = *src;
 23ec562:	bfb8      	it	lt
 23ec564:	f803 1c01 	strblt.w	r1, [r3, #-1]
        cnt--;
 23ec568:	e7f2      	b.n	23ec550 <arm_max_pool_s8+0x1e8>
    const q7_t *src = target;
 23ec56a:	46ae      	mov	lr, r5
 23ec56c:	4630      	mov	r0, r6
    int32_t cnt = length >> 2;
 23ec56e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 23ec570:	e7e9      	b.n	23ec546 <arm_max_pool_s8+0x1de>
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ec572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23ec574:	9b02      	ldr	r3, [sp, #8]
            dst += channel_in;
 23ec576:	4426      	add	r6, r4
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 23ec578:	4413      	add	r3, r2
 23ec57a:	9302      	str	r3, [sp, #8]
 23ec57c:	9b06      	ldr	r3, [sp, #24]
 23ec57e:	3301      	adds	r3, #1
 23ec580:	9306      	str	r3, [sp, #24]
 23ec582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec584:	1a9b      	subs	r3, r3, r2
 23ec586:	930f      	str	r3, [sp, #60]	; 0x3c
 23ec588:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ec58a:	1a9b      	subs	r3, r3, r2
 23ec58c:	9310      	str	r3, [sp, #64]	; 0x40
 23ec58e:	e74f      	b.n	23ec430 <arm_max_pool_s8+0xc8>
    memcpy(&val, in_q7, 4);
 23ec590:	682b      	ldr	r3, [r5, #0]
        cnt--;
 23ec592:	3801      	subs	r0, #1
        in.bytes[0] = MAX(in.bytes[0], act_min);
 23ec594:	b25a      	sxtb	r2, r3
 23ec596:	454a      	cmp	r2, r9
 23ec598:	bfb8      	it	lt
 23ec59a:	464a      	movlt	r2, r9
        in.bytes[0] = MIN(in.bytes[0], act_max);
 23ec59c:	b252      	sxtb	r2, r2
 23ec59e:	4552      	cmp	r2, sl
 23ec5a0:	bfa8      	it	ge
 23ec5a2:	4652      	movge	r2, sl
 23ec5a4:	f362 0707 	bfi	r7, r2, #0, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
 23ec5a8:	f343 2207 	sbfx	r2, r3, #8, #8
 23ec5ac:	454a      	cmp	r2, r9
 23ec5ae:	bfb8      	it	lt
 23ec5b0:	464a      	movlt	r2, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
 23ec5b2:	b252      	sxtb	r2, r2
 23ec5b4:	4552      	cmp	r2, sl
 23ec5b6:	bfa8      	it	ge
 23ec5b8:	4652      	movge	r2, sl
 23ec5ba:	f362 270f 	bfi	r7, r2, #8, #8
        in.bytes[2] = MAX(in.bytes[2], act_min);
 23ec5be:	f343 4207 	sbfx	r2, r3, #16, #8
 23ec5c2:	454a      	cmp	r2, r9
 23ec5c4:	bfb8      	it	lt
 23ec5c6:	464a      	movlt	r2, r9
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ec5c8:	b252      	sxtb	r2, r2
        in.bytes[3] = MAX(in.bytes[3], act_min);
 23ec5ca:	161b      	asrs	r3, r3, #24
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ec5cc:	4552      	cmp	r2, sl
 23ec5ce:	bfa8      	it	ge
 23ec5d0:	4652      	movge	r2, sl
        in.bytes[3] = MAX(in.bytes[3], act_min);
 23ec5d2:	454b      	cmp	r3, r9
 23ec5d4:	bfb8      	it	lt
 23ec5d6:	464b      	movlt	r3, r9
        in.bytes[3] = MIN(in.bytes[3], act_max);
 23ec5d8:	b25b      	sxtb	r3, r3
 23ec5da:	4553      	cmp	r3, sl
 23ec5dc:	bfa8      	it	ge
 23ec5de:	4653      	movge	r3, sl
        in.bytes[2] = MIN(in.bytes[2], act_max);
 23ec5e0:	f362 4717 	bfi	r7, r2, #16, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
 23ec5e4:	f363 671f 	bfi	r7, r3, #24, #8
 23ec5e8:	f845 7b04 	str.w	r7, [r5], #4
        cnt--;
 23ec5ec:	e6f6      	b.n	23ec3dc <arm_max_pool_s8+0x74>
        int32_t comp = *source;
 23ec5ee:	f993 2000 	ldrsb.w	r2, [r3]
        comp = MAX(comp, act_min);
 23ec5f2:	454a      	cmp	r2, r9
 23ec5f4:	bfb8      	it	lt
 23ec5f6:	464a      	movlt	r2, r9
        comp = MIN(comp, act_max);
 23ec5f8:	4552      	cmp	r2, sl
 23ec5fa:	bfa8      	it	ge
 23ec5fc:	4652      	movge	r2, sl
        *source++ = (int8_t)comp;
 23ec5fe:	f803 2b01 	strb.w	r2, [r3], #1
        cnt--;
 23ec602:	e6f6      	b.n	23ec3f2 <arm_max_pool_s8+0x8a>

023ec604 <arm_q15_to_float>:
  while (blkCnt > 0U)
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ec604:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23ec624 <arm_q15_to_float+0x20>
  while (blkCnt > 0U)
 23ec608:	b902      	cbnz	r2, 23ec60c <arm_q15_to_float+0x8>

    /* Decrement loop counter */
    blkCnt--;
  }

}
 23ec60a:	4770      	bx	lr
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ec60c:	f930 3b02 	ldrsh.w	r3, [r0], #2
    blkCnt--;
 23ec610:	3a01      	subs	r2, #1
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 23ec612:	ee07 3a90 	vmov	s15, r3
 23ec616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ec61a:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ec61e:	ece1 7a01 	vstmia	r1!, {s15}
    blkCnt--;
 23ec622:	e7f1      	b.n	23ec608 <arm_q15_to_float+0x4>
 23ec624:	38000000 	.word	0x38000000

023ec628 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ec628:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 23ec62a:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ec62c:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 23ec62e:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23ec630:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 23ec632:	b900      	cbnz	r0, 23ec636 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23ec634:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
 23ec636:	ecf2 7a01 	vldmia	r2!, {s15}
 23ec63a:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
 23ec63e:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
 23ec640:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
 23ec644:	e7f5      	b.n	23ec632 <arm_mat_scale_f32+0xa>

023ec646 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 23ec646:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 23ec648:	8802      	ldrh	r2, [r0, #0]
 23ec64a:	684b      	ldr	r3, [r1, #4]
 23ec64c:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 23ec64e:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 23ec650:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 23ec654:	00af      	lsls	r7, r5, #2
 23ec656:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
 23ec65a:	4619      	mov	r1, r3
      col = nCols;
 23ec65c:	4628      	mov	r0, r5
      while (col > 0U)
 23ec65e:	4626      	mov	r6, r4
 23ec660:	b920      	cbnz	r0, 23ec66c <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 23ec662:	3304      	adds	r3, #4
 23ec664:	4293      	cmp	r3, r2
 23ec666:	443c      	add	r4, r7
 23ec668:	d1f7      	bne.n	23ec65a <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23ec66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
 23ec66c:	f856 eb04 	ldr.w	lr, [r6], #4
        col--;
 23ec670:	3801      	subs	r0, #1
        *px = *pIn++;
 23ec672:	f8c1 e000 	str.w	lr, [r1]
        px += nRows;
 23ec676:	4461      	add	r1, ip
        col--;
 23ec678:	e7f2      	b.n	23ec660 <arm_mat_trans_f32+0x1a>

023ec67a <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 23ec67a:	b510      	push	{r4, lr}

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 23ec67c:	edd1 7a01 	vldr	s15, [r1, #4]
 23ec680:	ee77 7aa7 	vadd.f32	s15, s15, s15
   xBR = pB[0];
 23ec684:	edd1 5a00 	vldr	s11, [r1]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 23ec688:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 23ec68c:	eeb0 7a67 	vmov.f32	s14, s15
 23ec690:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 23ec694:	eea5 7a86 	vfma.f32	s14, s11, s12
   *pOut++ = 0.5f * ( t1a - t1b );
 23ec698:	eed5 7a86 	vfnms.f32	s15, s11, s12
   *pOut++ = 0.5f * ( t1a + t1b );
 23ec69c:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( t1a - t1b );
 23ec6a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 23ec6a4:	8803      	ldrh	r3, [r0, #0]
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 23ec6a6:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
 23ec6a8:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( t1a + t1b );
 23ec6aa:	f104 0010 	add.w	r0, r4, #16
 23ec6ae:	f101 0410 	add.w	r4, r1, #16
 23ec6b2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23ec6b6:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( t1a - t1b );
 23ec6ba:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
   pA += 2;
 23ec6be:	3908      	subs	r1, #8
 23ec6c0:	3210      	adds	r2, #16
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 23ec6c2:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR = pB[0];
 23ec6c6:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR = pA[0];
 23ec6ca:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI = pA[1];
 23ec6ce:	ed54 7a01 	vldr	s15, [r4, #-4]

      twR = *pCoeff++;
 23ec6d2:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 23ec6d6:	ed50 4a01 	vldr	s9, [r0, #-4]

      t1a = xBR - xAR ;
 23ec6da:	ee37 5a63 	vsub.f32	s10, s14, s7
      t1b = xBI + xAI ;
 23ec6de:	ee34 6a27 	vadd.f32	s12, s8, s15
      p0 = twR * t1a;
      p1 = twI * t1a;
      p2 = twR * t1b;
      p3 = twI * t1b;

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ec6e2:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ec6e6:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ec6ea:	eea5 7a85 	vfma.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ec6ee:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ec6f2:	eea4 7a86 	vfma.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ec6f6:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ec6fa:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ec6fe:	ee67 7aa6 	vmul.f32	s15, s15, s13


      pA += 2;
      pB -= 2;
      k--;
 23ec702:	3b01      	subs	r3, #1
   } while (k > 0);
 23ec704:	2b00      	cmp	r3, #0
      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 23ec706:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 23ec70a:	ed42 7a01 	vstr	s15, [r2, #-4]
   } while (k > 0);
 23ec70e:	f100 0008 	add.w	r0, r0, #8
 23ec712:	f102 0208 	add.w	r2, r2, #8
 23ec716:	f104 0408 	add.w	r4, r4, #8
 23ec71a:	f1a1 0108 	sub.w	r1, r1, #8
 23ec71e:	dcd0      	bgt.n	23ec6c2 <stage_rfft_f32+0x48>
}
 23ec720:	bd10      	pop	{r4, pc}

023ec722 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 23ec722:	b510      	push	{r4, lr}
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;

   xAR = pA[0];
 23ec724:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
 23ec728:	ed91 6a01 	vldr	s12, [r1, #4]

   pCoeff += 2 ;

   *pOut++ = 0.5f * ( xAR + xAI );
 23ec72c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 23ec730:	ee37 7a86 	vadd.f32	s14, s15, s12
   *pOut++ = 0.5f * ( xAR - xAI );
 23ec734:	ee77 7ac6 	vsub.f32	s15, s15, s12
   *pOut++ = 0.5f * ( xAR + xAI );
 23ec738:	ee27 7a26 	vmul.f32	s14, s14, s13
   *pOut++ = 0.5f * ( xAR - xAI );
 23ec73c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   k = (S->Sint).fftLen - 1;
 23ec740:	8803      	ldrh	r3, [r0, #0]
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 23ec742:	6944      	ldr	r4, [r0, #20]
   k = (S->Sint).fftLen - 1;
 23ec744:	3b01      	subs	r3, #1
   *pOut++ = 0.5f * ( xAR + xAI );
 23ec746:	ed82 7a00 	vstr	s14, [r2]
   *pOut++ = 0.5f * ( xAR - xAI );
 23ec74a:	edc2 7a01 	vstr	s15, [r2, #4]
   pCoeff += 2 ;
 23ec74e:	f104 0008 	add.w	r0, r4, #8
 23ec752:	3208      	adds	r2, #8

   pB  =  p + 2*k ;
   pA +=  2	   ;
 23ec754:	f101 0408 	add.w	r4, r1, #8
   pB  =  p + 2*k ;
 23ec758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3

   while (k > 0)
 23ec75c:	2b00      	cmp	r3, #0
 23ec75e:	f102 0208 	add.w	r2, r2, #8
 23ec762:	f100 0008 	add.w	r0, r0, #8
 23ec766:	f104 0408 	add.w	r4, r4, #8
 23ec76a:	f1a1 0108 	sub.w	r1, r1, #8
 23ec76e:	dc00      	bgt.n	23ec772 <merge_rfft_f32+0x50>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 23ec770:	bd10      	pop	{r4, pc}
      xBI =   pB[1]    ;
 23ec772:	ed91 4a03 	vldr	s8, [r1, #12]
      xBR =   pB[0]    ;
 23ec776:	ed91 7a02 	vldr	s14, [r1, #8]
      xAR =  pA[0];
 23ec77a:	ed54 3a02 	vldr	s7, [r4, #-8]
      xAI =  pA[1];
 23ec77e:	ed54 7a01 	vldr	s15, [r4, #-4]
      twR = *pCoeff++;
 23ec782:	ed50 5a02 	vldr	s11, [r0, #-8]
      twI = *pCoeff++;
 23ec786:	ed50 4a01 	vldr	s9, [r0, #-4]
      t1a = xAR - xBR ;
 23ec78a:	ee33 5ac7 	vsub.f32	s10, s7, s14
      t1b = xAI + xBI ;
 23ec78e:	ee34 6a27 	vadd.f32	s12, s8, s15
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ec792:	ee37 7a23 	vadd.f32	s14, s14, s7
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ec796:	ee77 7ac4 	vsub.f32	s15, s15, s8
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ec79a:	eea5 7ac5 	vfms.f32	s14, s11, s10
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ec79e:	eee4 7a85 	vfma.f32	s15, s9, s10
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ec7a2:	eea4 7ac6 	vfms.f32	s14, s9, s12
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ec7a6:	eee5 7ac6 	vfms.f32	s15, s11, s12
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ec7aa:	ee27 7a26 	vmul.f32	s14, s14, s13
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ec7ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 23ec7b2:	ed02 7a02 	vstr	s14, [r2, #-8]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 23ec7b6:	ed42 7a01 	vstr	s15, [r2, #-4]
      k--;
 23ec7ba:	3b01      	subs	r3, #1
 23ec7bc:	e7ce      	b.n	23ec75c <merge_rfft_f32+0x3a>

023ec7be <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 23ec7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ec7c2:	4605      	mov	r5, r0
 23ec7c4:	460f      	mov	r7, r1
 23ec7c6:	4616      	mov	r6, r2
   const arm_cfft_instance_f32 * Sint = &(S->Sint);

   /* Calculation of Real FFT */
   if (ifftFlag)
 23ec7c8:	461c      	mov	r4, r3
 23ec7ca:	b14b      	cbz	r3, 23ec7e0 <arm_rfft_fast_f32+0x22>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 23ec7cc:	f7ff ffa9 	bl	23ec722 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 23ec7d0:	4622      	mov	r2, r4
 23ec7d2:	4631      	mov	r1, r6
 23ec7d4:	4628      	mov	r0, r5
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 23ec7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 23ec7da:	2301      	movs	r3, #1
 23ec7dc:	f000 bd53 	b.w	23ed286 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 23ec7e0:	4622      	mov	r2, r4
 23ec7e2:	2301      	movs	r3, #1
 23ec7e4:	f000 fd4f 	bl	23ed286 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 23ec7e8:	4632      	mov	r2, r6
 23ec7ea:	4639      	mov	r1, r7
 23ec7ec:	4628      	mov	r0, r5
}
 23ec7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      stage_rfft_f32(S, p, pOut);
 23ec7f2:	f7ff bf42 	b.w	23ec67a <stage_rfft_f32>

023ec7f6 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 23ec7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ec7f8:	468c      	mov	ip, r1
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 23ec7fa:	2500      	movs	r5, #0
  {
     a = pBitRevTab[i    ] >> 2;
     b = pBitRevTab[i + 1] >> 2;
 23ec7fc:	1c96      	adds	r6, r2, #2
  for (i = 0; i < bitRevLen; )
 23ec7fe:	45ac      	cmp	ip, r5
 23ec800:	d800      	bhi.n	23ec804 <arm_bitreversal_32+0xe>
     pSrc[a+1] = pSrc[b+1];
     pSrc[b+1] = tmp;

    i += 2;
  }
}
 23ec802:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a = pBitRevTab[i    ] >> 2;
 23ec804:	f832 4015 	ldrh.w	r4, [r2, r5, lsl #1]
     b = pBitRevTab[i + 1] >> 2;
 23ec808:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
     a = pBitRevTab[i    ] >> 2;
 23ec80c:	08a4      	lsrs	r4, r4, #2
     b = pBitRevTab[i + 1] >> 2;
 23ec80e:	089b      	lsrs	r3, r3, #2
     tmp = pSrc[a];
 23ec810:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a] = pSrc[b];
 23ec814:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    i += 2;
 23ec818:	3502      	adds	r5, #2
     pSrc[a] = pSrc[b];
 23ec81a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b] = tmp;
 23ec81e:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
     tmp = pSrc[a+1];
 23ec822:	3401      	adds	r4, #1
     pSrc[a+1] = pSrc[b+1];
 23ec824:	3301      	adds	r3, #1
     tmp = pSrc[a+1];
 23ec826:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
     pSrc[a+1] = pSrc[b+1];
 23ec82a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 23ec82e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
     pSrc[b+1] = tmp;
 23ec832:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    i += 2;
 23ec836:	e7e2      	b.n	23ec7fe <arm_bitreversal_32+0x8>

023ec838 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 23ec838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ec83c:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 23ec840:	eddf 7ab2 	vldr	s15, [pc, #712]	; 23ecb0c <arm_radix8_butterfly_f32+0x2d4>
{
 23ec844:	b08f      	sub	sp, #60	; 0x3c
 23ec846:	9001      	str	r0, [sp, #4]
 23ec848:	9103      	str	r1, [sp, #12]
 23ec84a:	920d      	str	r2, [sp, #52]	; 0x34
 23ec84c:	9304      	str	r3, [sp, #16]
   n2 = fftLen;
 23ec84e:	9102      	str	r1, [sp, #8]
      n2 = n2 >> 3;
 23ec850:	2018      	movs	r0, #24
 23ec852:	9b02      	ldr	r3, [sp, #8]
      i1 = 0;
 23ec854:	f04f 0900 	mov.w	r9, #0
      n2 = n2 >> 3;
 23ec858:	08da      	lsrs	r2, r3, #3
      i1 = 0;
 23ec85a:	fb00 f402 	mul.w	r4, r0, r2
 23ec85e:	2028      	movs	r0, #40	; 0x28
 23ec860:	940c      	str	r4, [sp, #48]	; 0x30
 23ec862:	fb00 f402 	mul.w	r4, r0, r2
 23ec866:	2030      	movs	r0, #48	; 0x30
 23ec868:	0151      	lsls	r1, r2, #5
 23ec86a:	9108      	str	r1, [sp, #32]
 23ec86c:	9901      	ldr	r1, [sp, #4]
 23ec86e:	fb00 fb02 	mul.w	fp, r0, r2
 23ec872:	eb01 1c42 	add.w	ip, r1, r2, lsl #5
 23ec876:	00d1      	lsls	r1, r2, #3
 23ec878:	9107      	str	r1, [sp, #28]
 23ec87a:	f06f 0117 	mvn.w	r1, #23
 23ec87e:	2038      	movs	r0, #56	; 0x38
 23ec880:	4351      	muls	r1, r2
 23ec882:	eb0c 0701 	add.w	r7, ip, r1
 23ec886:	eb07 1642 	add.w	r6, r7, r2, lsl #5
 23ec88a:	1875      	adds	r5, r6, r1
 23ec88c:	9406      	str	r4, [sp, #24]
 23ec88e:	0114      	lsls	r4, r2, #4
 23ec890:	fb00 fa02 	mul.w	sl, r0, r2
 23ec894:	9405      	str	r4, [sp, #20]
 23ec896:	9801      	ldr	r0, [sp, #4]
 23ec898:	eb05 1442 	add.w	r4, r5, r2, lsl #5
 23ec89c:	4421      	add	r1, r4
 23ec89e:	00db      	lsls	r3, r3, #3
 23ec8a0:	eb01 1842 	add.w	r8, r1, r2, lsl #5
 23ec8a4:	f100 0e04 	add.w	lr, r0, #4
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ec8a8:	eddc 6a00 	vldr	s13, [ip]
 23ec8ac:	ed1e 6a01 	vldr	s12, [lr, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ec8b0:	edd7 5a00 	vldr	s11, [r7]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ec8b4:	ee36 7a26 	vadd.f32	s14, s12, s13
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 23ec8b8:	ee36 6a66 	vsub.f32	s12, s12, s13
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ec8bc:	edd6 6a00 	vldr	s13, [r6]
 23ec8c0:	ee35 5aa6 	vadd.f32	s10, s11, s13
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 23ec8c4:	ee35 4ae6 	vsub.f32	s8, s11, s13
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23ec8c8:	edd5 5a00 	vldr	s11, [r5]
 23ec8cc:	edd4 6a00 	vldr	s13, [r4]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ec8d0:	ed91 3a00 	vldr	s6, [r1]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23ec8d4:	ee75 3aa6 	vadd.f32	s7, s11, s13
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 23ec8d8:	ee75 6ae6 	vsub.f32	s13, s11, s13
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ec8dc:	edd8 5a00 	vldr	s11, [r8]
 23ec8e0:	ee73 4a25 	vadd.f32	s9, s6, s11
         t1 = r1 - r3;
 23ec8e4:	ee77 1a63 	vsub.f32	s3, s14, s7
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 23ec8e8:	ee33 3a65 	vsub.f32	s6, s6, s11
         r1 = r1 + r3;
 23ec8ec:	ee37 7a23 	vadd.f32	s14, s14, s7
         r2 = r2 + r4;
 23ec8f0:	ee75 5a24 	vadd.f32	s11, s10, s9
         r3 = r2 - r4;
 23ec8f4:	ee35 2a64 	vsub.f32	s4, s10, s9
         pSrc[2 * i1] = r1 + r2;
 23ec8f8:	ee37 5a25 	vadd.f32	s10, s14, s11
         pSrc[2 * i5] = r1 - r2;
 23ec8fc:	ee37 7a65 	vsub.f32	s14, s14, s11
         pSrc[2 * i1] = r1 + r2;
 23ec900:	ed0e 5a01 	vstr	s10, [lr, #-4]
         pSrc[2 * i5] = r1 - r2;
 23ec904:	ed8c 7a00 	vstr	s14, [ip]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ec908:	ed9c 7a01 	vldr	s14, [ip, #4]
 23ec90c:	ed9e 5a00 	vldr	s10, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ec910:	edd6 4a01 	vldr	s9, [r6, #4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ec914:	ee75 5a07 	vadd.f32	s11, s10, s14
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 23ec918:	ee35 5a47 	vsub.f32	s10, s10, s14
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ec91c:	ed97 7a01 	vldr	s14, [r7, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ec920:	edd5 3a01 	vldr	s7, [r5, #4]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ec924:	ee77 2a24 	vadd.f32	s5, s14, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 23ec928:	ee37 7a64 	vsub.f32	s14, s14, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ec92c:	edd4 4a01 	vldr	s9, [r4, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23ec930:	ed98 1a01 	vldr	s2, [r8, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ec934:	ee73 0aa4 	vadd.f32	s1, s7, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 23ec938:	ee73 4ae4 	vsub.f32	s9, s7, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23ec93c:	edd1 3a01 	vldr	s7, [r1, #4]
 23ec940:	ee33 0a81 	vadd.f32	s0, s7, s2
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 23ec944:	ee73 3ac1 	vsub.f32	s7, s7, s2
         t2 = r1 - s3;
 23ec948:	ee35 1ae0 	vsub.f32	s2, s11, s1
         r1 = r1 + s3;
 23ec94c:	ee75 5aa0 	vadd.f32	s11, s11, s1
         s3 = r2 - r4;
 23ec950:	ee72 0ac0 	vsub.f32	s1, s5, s0
         r2 = r2 + r4;
 23ec954:	ee72 2a80 	vadd.f32	s5, s5, s0
         pSrc[2 * i1 + 1] = r1 + r2;
 23ec958:	ee35 0aa2 	vadd.f32	s0, s11, s5
         pSrc[2 * i5 + 1] = r1 - r2;
 23ec95c:	ee75 5ae2 	vsub.f32	s11, s11, s5
         pSrc[2 * i1 + 1] = r1 + r2;
 23ec960:	ed8e 0a00 	vstr	s0, [lr]
         pSrc[2 * i5 + 1] = r1 - r2;
 23ec964:	edcc 5a01 	vstr	s11, [ip, #4]
         pSrc[2 * i3]     = t1 + s3;
 23ec968:	ee71 5aa0 	vadd.f32	s11, s3, s1
         pSrc[2 * i7]     = t1 - s3;
 23ec96c:	ee71 1ae0 	vsub.f32	s3, s3, s1
         pSrc[2 * i3]     = t1 + s3;
 23ec970:	edc5 5a00 	vstr	s11, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 23ec974:	ee71 5a42 	vsub.f32	s11, s2, s4
         pSrc[2 * i7 + 1] = t2 + r3;
 23ec978:	ee32 2a01 	vadd.f32	s4, s4, s2
         pSrc[2 * i7]     = t1 - s3;
 23ec97c:	edc4 1a00 	vstr	s3, [r4]
         pSrc[2 * i3 + 1] = t2 - r3;
 23ec980:	edc5 5a01 	vstr	s11, [r5, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 23ec984:	ed84 2a01 	vstr	s4, [r4, #4]
         r6 = (r6 + r8) * C81;
 23ec988:	ee74 5a03 	vadd.f32	s11, s8, s6
         r1 = (r6 - r8) * C81;
 23ec98c:	ee34 2a43 	vsub.f32	s4, s8, s6
         r5 = r5 + r1;
         r8 = r7 - r6;
 23ec990:	eeb0 4a66 	vmov.f32	s8, s13
         r2 = (s6 - s8) * C81;
 23ec994:	ee77 2a63 	vsub.f32	s5, s14, s7
         r8 = r7 - r6;
 23ec998:	eea5 4ae7 	vfms.f32	s8, s11, s15
         s6 = (s6 + s8) * C81;
 23ec99c:	ee37 7a23 	vadd.f32	s14, s14, s7
         r7 = r7 + r6;
 23ec9a0:	eee5 6aa7 	vfma.f32	s13, s11, s15
         t2 = s5 - r2;
 23ec9a4:	eeb0 3a45 	vmov.f32	s6, s10
         s5 = s5 + r2;
 23ec9a8:	eef0 5a45 	vmov.f32	s11, s10
         s8 = s7 - s6;
         s7 = s7 + s6;
 23ec9ac:	eeb0 5a64 	vmov.f32	s10, s9
         t2 = s5 - r2;
 23ec9b0:	eea2 3ae7 	vfms.f32	s6, s5, s15
         s5 = s5 + r2;
 23ec9b4:	eee2 5aa7 	vfma.f32	s11, s5, s15
         t1 = r5 - r1;
 23ec9b8:	eef0 3a46 	vmov.f32	s7, s12
         s7 = s7 + s6;
 23ec9bc:	eea7 5a27 	vfma.f32	s10, s14, s15
         r5 = r5 + r1;
 23ec9c0:	eea2 6a27 	vfma.f32	s12, s4, s15
         s8 = s7 - s6;
 23ec9c4:	eef0 2a64 	vmov.f32	s5, s9
         t1 = r5 - r1;
 23ec9c8:	eee2 3a67 	vfms.f32	s7, s4, s15
         s8 = s7 - s6;
 23ec9cc:	eee7 2a67 	vfms.f32	s5, s14, s15
         pSrc[2 * i2]     = r5 + s7;
 23ec9d0:	ee36 7a05 	vadd.f32	s14, s12, s10
         pSrc[2 * i8]     = r5 - s7;
 23ec9d4:	ee36 6a45 	vsub.f32	s12, s12, s10
         pSrc[2 * i2]     = r5 + s7;
 23ec9d8:	ed87 7a00 	vstr	s14, [r7]
         pSrc[2 * i6]     = t1 + s8;
 23ec9dc:	ee33 7aa2 	vadd.f32	s14, s7, s5
         pSrc[2 * i8]     = r5 - s7;
 23ec9e0:	ed88 6a00 	vstr	s12, [r8]
         pSrc[2 * i4]     = t1 - s8;
 23ec9e4:	ee73 3ae2 	vsub.f32	s7, s7, s5
         pSrc[2 * i6]     = t1 + s8;
 23ec9e8:	ed86 7a00 	vstr	s14, [r6]
         pSrc[2 * i2 + 1] = s5 - r7;
 23ec9ec:	ee35 7ae6 	vsub.f32	s14, s11, s13
         pSrc[2 * i4]     = t1 - s8;
 23ec9f0:	edc1 3a00 	vstr	s7, [r1]
         pSrc[2 * i8 + 1] = s5 + r7;
 23ec9f4:	ee76 6aa5 	vadd.f32	s13, s13, s11
         pSrc[2 * i2 + 1] = s5 - r7;
 23ec9f8:	ed87 7a01 	vstr	s14, [r7, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 23ec9fc:	ee33 7a44 	vsub.f32	s14, s6, s8
         pSrc[2 * i4 + 1] = t2 + r8;
 23eca00:	ee34 4a03 	vadd.f32	s8, s8, s6
         pSrc[2 * i8 + 1] = s5 + r7;
 23eca04:	edc8 6a01 	vstr	s13, [r8, #4]
         pSrc[2 * i6 + 1] = t2 - r8;
 23eca08:	ed86 7a01 	vstr	s14, [r6, #4]
         pSrc[2 * i4 + 1] = t2 + r8;
 23eca0c:	ed81 4a01 	vstr	s8, [r1, #4]

         i1 += n1;
 23eca10:	9802      	ldr	r0, [sp, #8]
      } while (i1 < fftLen);
 23eca12:	449c      	add	ip, r3
         i1 += n1;
 23eca14:	4481      	add	r9, r0
      } while (i1 < fftLen);
 23eca16:	9803      	ldr	r0, [sp, #12]
 23eca18:	441f      	add	r7, r3
 23eca1a:	4548      	cmp	r0, r9
 23eca1c:	441e      	add	r6, r3
 23eca1e:	441d      	add	r5, r3
 23eca20:	441c      	add	r4, r3
 23eca22:	4419      	add	r1, r3
 23eca24:	4498      	add	r8, r3
 23eca26:	449e      	add	lr, r3
 23eca28:	f63f af3e 	bhi.w	23ec8a8 <arm_radix8_butterfly_f32+0x70>

      if (n2 < 8)
 23eca2c:	2a07      	cmp	r2, #7
 23eca2e:	f240 8171 	bls.w	23ecd14 <arm_radix8_butterfly_f32+0x4dc>
 23eca32:	9801      	ldr	r0, [sp, #4]
 23eca34:	9908      	ldr	r1, [sp, #32]
         break;

      ia1 = 0;
      j = 1;
 23eca36:	2401      	movs	r4, #1
 23eca38:	4401      	add	r1, r0
 23eca3a:	910b      	str	r1, [sp, #44]	; 0x2c
 23eca3c:	9907      	ldr	r1, [sp, #28]
 23eca3e:	4401      	add	r1, r0
 23eca40:	910a      	str	r1, [sp, #40]	; 0x28
 23eca42:	9906      	ldr	r1, [sp, #24]
 23eca44:	4401      	add	r1, r0
 23eca46:	9109      	str	r1, [sp, #36]	; 0x24
 23eca48:	9905      	ldr	r1, [sp, #20]
 23eca4a:	4401      	add	r1, r0
 23eca4c:	9108      	str	r1, [sp, #32]
 23eca4e:	eb0b 0100 	add.w	r1, fp, r0
 23eca52:	9107      	str	r1, [sp, #28]
 23eca54:	990c      	ldr	r1, [sp, #48]	; 0x30
 23eca56:	4401      	add	r1, r0
 23eca58:	9106      	str	r1, [sp, #24]
 23eca5a:	eb0a 0100 	add.w	r1, sl, r0
 23eca5e:	9105      	str	r1, [sp, #20]
      ia1 = 0;
 23eca60:	2100      	movs	r1, #0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 23eca62:	9804      	ldr	r0, [sp, #16]
         si5 = pCoef[2 * ia4 + 1];
         si6 = pCoef[2 * ia5 + 1];
         si7 = pCoef[2 * ia6 + 1];
         si8 = pCoef[2 * ia7 + 1];

         i1 = j;
 23eca64:	46a3      	mov	fp, r4
         id  = ia1 + twidCoefModifier;
 23eca66:	4401      	add	r1, r0
         co2 = pCoef[2 * ia1];
 23eca68:	980d      	ldr	r0, [sp, #52]	; 0x34
 23eca6a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 23eca6e:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 23eca72:	ed95 2a00 	vldr	s4, [r5]
         co3 = pCoef[2 * ia2];
 23eca76:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23eca7a:	ed95 0a00 	vldr	s0, [r5]
         co4 = pCoef[2 * ia3];
 23eca7e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23eca82:	ed95 5a00 	vldr	s10, [r5]
         co5 = pCoef[2 * ia4];
 23eca86:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23eca8a:	edd5 8a00 	vldr	s17, [r5]
         co6 = pCoef[2 * ia5];
 23eca8e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23eca92:	ed95 4a00 	vldr	s8, [r5]
         co7 = pCoef[2 * ia6];
 23eca96:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23eca9a:	ed95 1a00 	vldr	s2, [r5]
         co8 = pCoef[2 * ia7];
 23eca9e:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
 23ecaa2:	fb00 5601 	mla	r6, r0, r1, r5
 23ecaa6:	9801      	ldr	r0, [sp, #4]
         si2 = pCoef[2 * ia1 + 1];
 23ecaa8:	edd6 1a01 	vldr	s3, [r6, #4]
 23ecaac:	eb00 0ac4 	add.w	sl, r0, r4, lsl #3
 23ecab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23ecab2:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ecab6:	eb00 09c4 	add.w	r9, r0, r4, lsl #3
 23ecaba:	980a      	ldr	r0, [sp, #40]	; 0x28
         si3 = pCoef[2 * ia2 + 1];
 23ecabc:	ed96 8a01 	vldr	s16, [r6, #4]
 23ecac0:	eb00 08c4 	add.w	r8, r0, r4, lsl #3
 23ecac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 23ecac6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ecaca:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 23ecace:	9808      	ldr	r0, [sp, #32]
         si4 = pCoef[2 * ia3 + 1];
 23ecad0:	edd6 4a01 	vldr	s9, [r6, #4]
 23ecad4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 23ecad8:	9807      	ldr	r0, [sp, #28]
 23ecada:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
         si5 = pCoef[2 * ia4 + 1];
 23ecade:	ed96 9a01 	vldr	s18, [r6, #4]
 23ecae2:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 23ecae6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ecaea:	9806      	ldr	r0, [sp, #24]
         si6 = pCoef[2 * ia5 + 1];
 23ecaec:	edd6 3a01 	vldr	s7, [r6, #4]
         si7 = pCoef[2 * ia6 + 1];
 23ecaf0:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
 23ecaf4:	edd6 0a01 	vldr	s1, [r6, #4]
 23ecaf8:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 23ecafc:	9805      	ldr	r0, [sp, #20]
         co8 = pCoef[2 * ia7];
 23ecafe:	ed95 3a00 	vldr	s6, [r5]
         si8 = pCoef[2 * ia7 + 1];
 23ecb02:	edd5 2a01 	vldr	s5, [r5, #4]
         i1 = j;
 23ecb06:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 23ecb0a:	e001      	b.n	23ecb10 <arm_radix8_butterfly_f32+0x2d8>
 23ecb0c:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ecb10:	ed99 7a00 	vldr	s14, [r9]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ecb14:	ed9e 6a00 	vldr	s12, [lr]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ecb18:	edda 9a00 	vldr	s19, [sl]
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ecb1c:	ed98 aa00 	vldr	s20, [r8]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ecb20:	ed95 ba00 	vldr	s22, [r5]
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23ecb24:	eddc aa00 	vldr	s21, [ip]
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ecb28:	edd6 ba00 	vldr	s23, [r6]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 23ecb2c:	ee79 6a87 	vadd.f32	s13, s19, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 23ecb30:	ee79 9ac7 	vsub.f32	s19, s19, s14
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 23ecb34:	ee3a 7a06 	vadd.f32	s14, s20, s12
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 23ecb38:	ee3a aa46 	vsub.f32	s20, s20, s12
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 23ecb3c:	ed97 6a00 	vldr	s12, [r7]
 23ecb40:	ee7a 5a86 	vadd.f32	s11, s21, s12
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 23ecb44:	ee7a aac6 	vsub.f32	s21, s21, s12
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 23ecb48:	ee3b 6a8b 	vadd.f32	s12, s23, s22
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 23ecb4c:	ee7b bacb 	vsub.f32	s23, s23, s22
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
 23ecb50:	ee77 da46 	vsub.f32	s27, s14, s12
            t1 = r1 - r3;
 23ecb54:	ee36 bae5 	vsub.f32	s22, s13, s11
            r2 = r2 + r4;
 23ecb58:	ee37 7a06 	vadd.f32	s14, s14, s12
            r1 = r1 + r3;
 23ecb5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
            pSrc[2 * i1] = r1 + r2;
 23ecb60:	ee36 6a87 	vadd.f32	s12, s13, s14
 23ecb64:	ed8a 6a00 	vstr	s12, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ecb68:	edda 5a01 	vldr	s11, [sl, #4]
            r2 = r1 - r2;
 23ecb6c:	ee76 6ac7 	vsub.f32	s13, s13, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ecb70:	ed99 7a01 	vldr	s14, [r9, #4]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ecb74:	ed98 6a01 	vldr	s12, [r8, #4]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 23ecb78:	ee75 ea87 	vadd.f32	s29, s11, s14
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 23ecb7c:	ee35 cac7 	vsub.f32	s24, s11, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ecb80:	ed9e 7a01 	vldr	s14, [lr, #4]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 23ecb84:	ee76 ca47 	vsub.f32	s25, s12, s14
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 23ecb88:	ee76 fa07 	vadd.f32	s31, s12, s14
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ecb8c:	ed9c 6a01 	vldr	s12, [ip, #4]
 23ecb90:	ed97 7a01 	vldr	s14, [r7, #4]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23ecb94:	ed96 da01 	vldr	s26, [r6, #4]
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 23ecb98:	ee36 ea07 	vadd.f32	s28, s12, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 23ecb9c:	ee36 7a47 	vsub.f32	s14, s12, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 23ecba0:	ed95 6a01 	vldr	s12, [r5, #4]
 23ecba4:	ee7d 5a06 	vadd.f32	s11, s26, s12
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
            t2 = s1 - s3;
 23ecba8:	ee3e face 	vsub.f32	s30, s29, s28
            s1 = s1 + s3;
 23ecbac:	ee3e ea8e 	vadd.f32	s28, s29, s28
            s3 = s2 - s4;
 23ecbb0:	ee7f eae5 	vsub.f32	s29, s31, s11
            s2 = s2 + s4;
 23ecbb4:	ee7f 5aa5 	vadd.f32	s11, s31, s11
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 23ecbb8:	ee3d da46 	vsub.f32	s26, s26, s12
            r1 = t1 + s3;
 23ecbbc:	ee3b 6a2e 	vadd.f32	s12, s22, s29
            t1 = t1 - s3;
 23ecbc0:	ee3b ba6e 	vsub.f32	s22, s22, s29
            pSrc[2 * i1 + 1] = s1 + s2;
 23ecbc4:	ee7e ea25 	vadd.f32	s29, s28, s11
            s2 = s1 - s2;
 23ecbc8:	ee3e ea65 	vsub.f32	s28, s28, s11
            s1 = t2 - r3;
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 23ecbcc:	ee69 5a0e 	vmul.f32	s11, s18, s28
            pSrc[2 * i1 + 1] = s1 + s2;
 23ecbd0:	edca ea01 	vstr	s29, [sl, #4]
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 23ecbd4:	eee8 5aa6 	vfma.f32	s11, s17, s13
            s1 = t2 - r3;
 23ecbd8:	ee7f ea6d 	vsub.f32	s29, s30, s27
            pSrc[2 * i5]     = p1 + p2;
 23ecbdc:	edc9 5a00 	vstr	s11, [r9]
            pSrc[2 * i5 + 1] = p3 - p4;
 23ecbe0:	ee66 5ac9 	vnmul.f32	s11, s13, s18
            p1 = co3 * r1;
            p2 = si3 * s1;
 23ecbe4:	ee68 6a2e 	vmul.f32	s13, s16, s29
            t2 = t2 + r3;
 23ecbe8:	ee7d da8f 	vadd.f32	s27, s27, s30
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 23ecbec:	eee0 6a06 	vfma.f32	s13, s0, s12
            pSrc[2 * i5 + 1] = p3 - p4;
 23ecbf0:	eee8 5a8e 	vfma.f32	s11, s17, s28
            pSrc[2 * i3 + 1] = p3 - p4;
 23ecbf4:	ee26 6a48 	vnmul.f32	s12, s12, s16
            pSrc[2 * i5 + 1] = p3 - p4;
 23ecbf8:	edc9 5a01 	vstr	s11, [r9, #4]
            pSrc[2 * i3]     = p1 + p2;
 23ecbfc:	edcc 6a00 	vstr	s13, [ip]
            p1 = co7 * t1;
            p2 = si7 * t2;
 23ecc00:	ee60 6aad 	vmul.f32	s13, s1, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 23ecc04:	eea0 6a2e 	vfma.f32	s12, s0, s29
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 23ecc08:	eee1 6a0b 	vfma.f32	s13, s2, s22
            pSrc[2 * i3 + 1] = p3 - p4;
 23ecc0c:	ed8c 6a01 	vstr	s12, [ip, #4]
            pSrc[2 * i7]     = p1 + p2;
 23ecc10:	edc7 6a00 	vstr	s13, [r7]
            pSrc[2 * i7 + 1] = p3 - p4;
 23ecc14:	ee6b 6a60 	vnmul.f32	s13, s22, s1
 23ecc18:	eee1 6a2d 	vfma.f32	s13, s2, s27
            r1 = (r6 - r8) * C81;
 23ecc1c:	ee7a 5a6b 	vsub.f32	s11, s20, s23
            pSrc[2 * i7 + 1] = p3 - p4;
 23ecc20:	edc7 6a01 	vstr	s13, [r7, #4]
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
 23ecc24:	ee3c 6a8d 	vadd.f32	s12, s25, s26
            s1 = (s6 - s8) * C81;
 23ecc28:	ee7c 6acd 	vsub.f32	s13, s25, s26
            t1 = r5 - r1;
 23ecc2c:	eef0 ca69 	vmov.f32	s25, s19
            r6 = (r6 + r8) * C81;
 23ecc30:	ee3a aa2b 	vadd.f32	s20, s20, s23
            r5 = r5 + r1;
 23ecc34:	eee5 9aa7 	vfma.f32	s19, s11, s15
            t1 = r5 - r1;
 23ecc38:	eee5 cae7 	vfms.f32	s25, s11, s15
            r8 = r7 - r6;
 23ecc3c:	eeb0 ba6a 	vmov.f32	s22, s21
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
            s8 = s7 - s6;
 23ecc40:	eef0 ba47 	vmov.f32	s23, s14
            s5 = s5 + s1;
 23ecc44:	eef0 5a4c 	vmov.f32	s11, s24
            r8 = r7 - r6;
 23ecc48:	eeaa ba67 	vfms.f32	s22, s20, s15
            r7 = r7 + r6;
 23ecc4c:	eeea aa27 	vfma.f32	s21, s20, s15
            s8 = s7 - s6;
 23ecc50:	eee6 ba67 	vfms.f32	s23, s12, s15
            s5 = s5 + s1;
 23ecc54:	eee6 5aa7 	vfma.f32	s11, s13, s15
            s7 = s7 + s6;
 23ecc58:	eea6 7a27 	vfma.f32	s14, s12, s15
            t2 = s5 - s1;
 23ecc5c:	eeb0 aa4c 	vmov.f32	s20, s24
            r1 = r5 + s7;
 23ecc60:	ee39 6a87 	vadd.f32	s12, s19, s14
            t2 = s5 - s1;
 23ecc64:	eea6 aae7 	vfms.f32	s20, s13, s15
            r5 = r5 - s7;
 23ecc68:	ee39 7ac7 	vsub.f32	s14, s19, s14
            r6 = t1 + s8;
 23ecc6c:	ee7c 6aab 	vadd.f32	s13, s25, s23
            t1 = t1 - s8;
 23ecc70:	ee7c 9aeb 	vsub.f32	s19, s25, s23
            s1 = s5 - r7;
 23ecc74:	ee75 baea 	vsub.f32	s23, s11, s21
            s5 = s5 + r7;
 23ecc78:	ee7a 5aa5 	vadd.f32	s11, s21, s11
            s6 = t2 - r8;
 23ecc7c:	ee7a aa4b 	vsub.f32	s21, s20, s22
            t2 = t2 + r8;
 23ecc80:	ee3b aa0a 	vadd.f32	s20, s22, s20
            p1 = co2 * r1;
            p2 = si2 * s1;
 23ecc84:	ee21 baab 	vmul.f32	s22, s3, s23
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 23ecc88:	eea2 ba06 	vfma.f32	s22, s4, s12
            pSrc[2 * i2 + 1] = p3 - p4;
 23ecc8c:	ee26 6a61 	vnmul.f32	s12, s12, s3
 23ecc90:	eea2 6a2b 	vfma.f32	s12, s4, s23
 23ecc94:	ed88 6a01 	vstr	s12, [r8, #4]
            p1 = co8 * r5;
            p2 = si8 * s5;
 23ecc98:	ee22 6aa5 	vmul.f32	s12, s5, s11
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 23ecc9c:	eea3 6a07 	vfma.f32	s12, s6, s14
            pSrc[2 * i2]     = p1 + p2;
 23ecca0:	ed88 ba00 	vstr	s22, [r8]
            pSrc[2 * i8]     = p1 + p2;
 23ecca4:	ed85 6a00 	vstr	s12, [r5]
            pSrc[2 * i8 + 1] = p3 - p4;
 23ecca8:	ee27 6a62 	vnmul.f32	s12, s14, s5
            p1 = co6 * r6;
            p2 = si6 * s6;
 23eccac:	ee23 7aaa 	vmul.f32	s14, s7, s21
            pSrc[2 * i8 + 1] = p3 - p4;
 23eccb0:	eea3 6a25 	vfma.f32	s12, s6, s11
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 23eccb4:	eea4 7a26 	vfma.f32	s14, s8, s13
            pSrc[2 * i8 + 1] = p3 - p4;
 23eccb8:	ed85 6a01 	vstr	s12, [r5, #4]
            pSrc[2 * i6 + 1] = p3 - p4;
 23eccbc:	ee66 6ae3 	vnmul.f32	s13, s13, s7
            pSrc[2 * i6]     = p1 + p2;
 23eccc0:	ed8e 7a00 	vstr	s14, [lr]
            p1 = co4 * t1;
            p2 = si4 * t2;
 23eccc4:	ee24 7a8a 	vmul.f32	s14, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 23eccc8:	eee4 6a2a 	vfma.f32	s13, s8, s21
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 23ecccc:	eea5 7a29 	vfma.f32	s14, s10, s19
            pSrc[2 * i6 + 1] = p3 - p4;
 23eccd0:	edce 6a01 	vstr	s13, [lr, #4]
            pSrc[2 * i4]     = p1 + p2;
 23eccd4:	ed86 7a00 	vstr	s14, [r6]
            pSrc[2 * i4 + 1] = p3 - p4;
 23eccd8:	ee29 7ae4 	vnmul.f32	s14, s19, s9
 23eccdc:	eea5 7a0a 	vfma.f32	s14, s10, s20
 23ecce0:	ed86 7a01 	vstr	s14, [r6, #4]

            i1 += n1;
 23ecce4:	9802      	ldr	r0, [sp, #8]
         } while (i1 < fftLen);
 23ecce6:	449a      	add	sl, r3
            i1 += n1;
 23ecce8:	4483      	add	fp, r0
         } while (i1 < fftLen);
 23eccea:	9803      	ldr	r0, [sp, #12]
 23eccec:	4499      	add	r9, r3
 23eccee:	4558      	cmp	r0, fp
 23eccf0:	4498      	add	r8, r3
 23eccf2:	449e      	add	lr, r3
 23eccf4:	449c      	add	ip, r3
 23eccf6:	441f      	add	r7, r3
 23eccf8:	441e      	add	r6, r3
 23eccfa:	441d      	add	r5, r3
 23eccfc:	f63f af08 	bhi.w	23ecb10 <arm_radix8_butterfly_f32+0x2d8>

         j++;
 23ecd00:	3401      	adds	r4, #1
      } while (j < n2);
 23ecd02:	42a2      	cmp	r2, r4
 23ecd04:	f47f aead 	bne.w	23eca62 <arm_radix8_butterfly_f32+0x22a>

      twidCoefModifier <<= 3;
 23ecd08:	9b04      	ldr	r3, [sp, #16]
 23ecd0a:	9202      	str	r2, [sp, #8]
 23ecd0c:	00db      	lsls	r3, r3, #3
 23ecd0e:	b29b      	uxth	r3, r3
 23ecd10:	9304      	str	r3, [sp, #16]
   } while (n2 > 7);
 23ecd12:	e59d      	b.n	23ec850 <arm_radix8_butterfly_f32+0x18>
}
 23ecd14:	b00f      	add	sp, #60	; 0x3c
 23ecd16:	ecbd 8b10 	vpop	{d8-d15}
 23ecd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ecd1e:	bf00      	nop

023ecd20 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 23ecd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ecd24:	4680      	mov	r8, r0
 23ecd26:	4608      	mov	r0, r1
  uint32_t    L  = S->fftLen;
 23ecd28:	f8b8 7000 	ldrh.w	r7, [r8]
{
 23ecd2c:	ed2d 8b02 	vpush	{d8}
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 23ecd30:	eb01 0987 	add.w	r9, r1, r7, lsl #2
  const float32_t * tw = (float32_t *) S->pTwiddle;
 23ecd34:	4605      	mov	r5, r0
 23ecd36:	464b      	mov	r3, r9
 23ecd38:	f8d8 6004 	ldr.w	r6, [r8, #4]

  pCol1 = p1;
  pCol2 = p2;

  /* Define new length */
  L >>= 1;
 23ecd3c:	0879      	lsrs	r1, r7, #1
  /* Initialize mid pointers */
  pMid1 = p1 + L;
  pMid2 = p2 + L;

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 23ecd3e:	08ff      	lsrs	r7, r7, #3
{
 23ecd40:	b083      	sub	sp, #12
  pMid1 = p1 + L;
 23ecd42:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  pMid2 = p2 + L;
 23ecd46:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 23ecd4a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
  for (l = L >> 2; l > 0; l-- )
 23ecd4e:	42be      	cmp	r6, r7
 23ecd50:	f105 0510 	add.w	r5, r5, #16
 23ecd54:	f104 0410 	add.w	r4, r4, #16
 23ecd58:	f102 0210 	add.w	r2, r2, #16
 23ecd5c:	f103 0310 	add.w	r3, r3, #16
 23ecd60:	d112      	bne.n	23ecd88 <arm_cfft_radix8by2_f32+0x68>
    *pMid2++ = m0 - m1;
    *pMid2++ = m2 + m3;
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 23ecd62:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23ecd66:	b289      	uxth	r1, r1
 23ecd68:	2302      	movs	r3, #2
 23ecd6a:	9101      	str	r1, [sp, #4]
 23ecd6c:	f7ff fd64 	bl	23ec838 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 23ecd70:	2302      	movs	r3, #2
 23ecd72:	4648      	mov	r0, r9
 23ecd74:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23ecd78:	9901      	ldr	r1, [sp, #4]
}
 23ecd7a:	b003      	add	sp, #12
 23ecd7c:	ecbd 8b02 	vpop	{d8}
 23ecd80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 23ecd84:	f7ff bd58 	b.w	23ec838 <arm_radix8_butterfly_f32>
    t2[0] = p2[0];
 23ecd88:	ed13 0a04 	vldr	s0, [r3, #-16]
    t1[0] = p1[0];
 23ecd8c:	ed15 7a04 	vldr	s14, [r5, #-16]
    t2[1] = p2[1];
 23ecd90:	ed53 0a03 	vldr	s1, [r3, #-12]
    t1[1] = p1[1];
 23ecd94:	ed55 3a03 	vldr	s7, [r5, #-12]
    *p1++ = t1[0] + t2[0];
 23ecd98:	ee37 8a00 	vadd.f32	s16, s14, s0
    t4[0] = pMid2[0];
 23ecd9c:	ed12 4a04 	vldr	s8, [r2, #-16]
    t4[1] = pMid2[1];
 23ecda0:	ed52 4a03 	vldr	s9, [r2, #-12]
    t2[2] = p2[2];
 23ecda4:	ed53 7a02 	vldr	s15, [r3, #-8]
    t2[3] = p2[3];
 23ecda8:	ed13 5a01 	vldr	s10, [r3, #-4]
    t3[1] = pMid1[1];
 23ecdac:	ed54 2a03 	vldr	s5, [r4, #-12]
    t3[2] = pMid1[2];
 23ecdb0:	ed14 3a02 	vldr	s6, [r4, #-8]
    t3[3] = pMid1[3];
 23ecdb4:	ed54 6a01 	vldr	s13, [r4, #-4]
    t4[2] = pMid2[2];
 23ecdb8:	ed52 5a02 	vldr	s11, [r2, #-8]
    t4[3] = pMid2[3];
 23ecdbc:	ed12 6a01 	vldr	s12, [r2, #-4]
    t1[2] = p1[2];
 23ecdc0:	ed15 1a02 	vldr	s2, [r5, #-8]
    t3[0] = pMid1[0];
 23ecdc4:	ed14 2a04 	vldr	s4, [r4, #-16]
    *p1++ = t1[0] + t2[0];
 23ecdc8:	ed05 8a04 	vstr	s16, [r5, #-16]
    *p1++ = t1[1] + t2[1];
 23ecdcc:	ee33 8aa0 	vadd.f32	s16, s7, s1
    t1[3] = p1[3];
 23ecdd0:	ed55 1a01 	vldr	s3, [r5, #-4]
    *p1++ = t1[1] + t2[1];
 23ecdd4:	ed05 8a03 	vstr	s16, [r5, #-12]
    *p1++ = t1[2] + t2[2];
 23ecdd8:	ee31 8a27 	vadd.f32	s16, s2, s15
 23ecddc:	ed05 8a02 	vstr	s16, [r5, #-8]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 23ecde0:	ee31 8a85 	vadd.f32	s16, s3, s10
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 23ecde4:	ee31 5ac5 	vsub.f32	s10, s3, s10
    *pMid1++ = t3[0] + t4[0];
 23ecde8:	ee72 1a04 	vadd.f32	s3, s4, s8
    *p1++ = t1[3] + t2[3];    /* col 1 */
 23ecdec:	ed05 8a01 	vstr	s16, [r5, #-4]
    *pMid1++ = t3[0] + t4[0];
 23ecdf0:	ed44 1a04 	vstr	s3, [r4, #-16]
    *pMid1++ = t3[1] + t4[1];
 23ecdf4:	ee72 1aa4 	vadd.f32	s3, s5, s9
 23ecdf8:	ed44 1a03 	vstr	s3, [r4, #-12]
    *pMid1++ = t3[2] + t4[2];
 23ecdfc:	ee73 1a25 	vadd.f32	s3, s6, s11
 23ece00:	ed44 1a02 	vstr	s3, [r4, #-8]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 23ece04:	ee76 1a86 	vadd.f32	s3, s13, s12
 23ece08:	ed44 1a01 	vstr	s3, [r4, #-4]
    t4[2] = t4[2] - t3[2];
 23ece0c:	ee75 5ac3 	vsub.f32	s11, s11, s6
    t2[1] = t1[1] - t2[1];
 23ece10:	ee73 3ae0 	vsub.f32	s7, s7, s1
    twI = *tw++;
 23ece14:	ed96 3a01 	vldr	s6, [r6, #4]
    t4[1] = t4[1] - t3[1];
 23ece18:	ee74 4ae2 	vsub.f32	s9, s9, s5
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 23ece1c:	ee36 6a66 	vsub.f32	s12, s12, s13
    t2[0] = t1[0] - t2[0];
 23ece20:	ee37 7a40 	vsub.f32	s14, s14, s0
    twR = *tw++;
 23ece24:	edd6 6a00 	vldr	s13, [r6]
    m1 = t2[1] * twI;
 23ece28:	ee63 2a83 	vmul.f32	s5, s7, s6
    *p2++ = m0 + m1;
 23ece2c:	eee7 2a26 	vfma.f32	s5, s14, s13
    *p2++ = m2 - m3;
 23ece30:	ee23 7a47 	vnmul.f32	s14, s6, s14
    t4[0] = t4[0] - t3[0];
 23ece34:	ee34 4a42 	vsub.f32	s8, s8, s4
    *p2++ = m2 - m3;
 23ece38:	eea3 7aa6 	vfma.f32	s14, s7, s13
 23ece3c:	ed03 7a03 	vstr	s14, [r3, #-12]
    m3 = t4[0] * twR;
 23ece40:	ee24 7a26 	vmul.f32	s14, s8, s13
    *pMid2++ = m0 - m1;
 23ece44:	ee66 6ae4 	vnmul.f32	s13, s13, s9
    *pMid2++ = m2 + m3;
 23ece48:	eea4 7a83 	vfma.f32	s14, s9, s6
    *pMid2++ = m0 - m1;
 23ece4c:	eee4 6a03 	vfma.f32	s13, s8, s6
    *p2++ = m0 + m1;
 23ece50:	ed43 2a04 	vstr	s5, [r3, #-16]
    *pMid2++ = m0 - m1;
 23ece54:	ed42 6a04 	vstr	s13, [r2, #-16]
    *pMid2++ = m2 + m3;
 23ece58:	ed02 7a03 	vstr	s14, [r2, #-12]
 23ece5c:	3610      	adds	r6, #16
    twR = *tw++;
 23ece5e:	ed16 7a02 	vldr	s14, [r6, #-8]
    twI = *tw++;
 23ece62:	ed56 6a01 	vldr	s13, [r6, #-4]
    t2[2] = t1[2] - t2[2];
 23ece66:	ee71 7a67 	vsub.f32	s15, s2, s15
    m1 = t2[3] * twI;
 23ece6a:	ee65 4a26 	vmul.f32	s9, s10, s13
    *p2++ = m0 + m1;
 23ece6e:	eee7 4a87 	vfma.f32	s9, s15, s14
    *p2++ = m2 - m3;
 23ece72:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 23ece76:	eee5 7a07 	vfma.f32	s15, s10, s14
    *p2++ = m0 + m1;
 23ece7a:	ed43 4a02 	vstr	s9, [r3, #-8]
    *p2++ = m2 - m3;
 23ece7e:	ed43 7a01 	vstr	s15, [r3, #-4]
    m3 = t4[2] * twR;
 23ece82:	ee65 7a87 	vmul.f32	s15, s11, s14
    *pMid2++ = m0 - m1;
 23ece86:	ee27 7a46 	vnmul.f32	s14, s14, s12
    *pMid2++ = m2 + m3;
 23ece8a:	eee6 7a26 	vfma.f32	s15, s12, s13
    *pMid2++ = m0 - m1;
 23ece8e:	eea5 7aa6 	vfma.f32	s14, s11, s13
    *pMid2++ = m2 + m3;
 23ece92:	ed42 7a01 	vstr	s15, [r2, #-4]
    *pMid2++ = m0 - m1;
 23ece96:	ed02 7a02 	vstr	s14, [r2, #-8]
  for (l = L >> 2; l > 0; l-- )
 23ece9a:	e758      	b.n	23ecd4e <arm_cfft_radix8by2_f32+0x2e>

023ece9c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 23ece9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ecea0:	ed2d 8b04 	vpush	{d8-d9}
    uint32_t    L  = S->fftLen >> 1;
 23ecea4:	8803      	ldrh	r3, [r0, #0]
{
 23ecea6:	b08f      	sub	sp, #60	; 0x3c
    uint32_t    L  = S->fftLen >> 1;
 23ecea8:	085b      	lsrs	r3, r3, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 23eceaa:	eb01 0683 	add.w	r6, r1, r3, lsl #2
    float32_t * p3 = p2 + L;
 23eceae:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
{
 23eceb2:	9101      	str	r1, [sp, #4]
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 23eceb4:	0859      	lsrs	r1, r3, #1
 23eceb6:	910a      	str	r1, [sp, #40]	; 0x28
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 23eceb8:	9901      	ldr	r1, [sp, #4]
 23eceba:	ed95 7a00 	vldr	s14, [r5]
 23ecebe:	edd1 7a00 	vldr	s15, [r1]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 23ecec2:	edd5 5a01 	vldr	s11, [r5, #4]
    p1ap3_0 = p1[0] + p3[0];
 23ecec6:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1sp3_0 = p1[0] - p3[0];
 23ececa:	ee77 7ac7 	vsub.f32	s15, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 23ecece:	ed91 7a01 	vldr	s14, [r1, #4]
 23eced2:	ee77 6a25 	vadd.f32	s13, s14, s11
    p1sp3_1 = p1[1] - p3[1];
 23eced6:	ee77 5a65 	vsub.f32	s11, s14, s11

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23eceda:	ed96 7a00 	vldr	s14, [r6]
    float32_t * p4 = p3 + L;
 23ecede:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ecee2:	edd4 4a00 	vldr	s9, [r4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ecee6:	ee37 5a06 	vadd.f32	s10, s14, s12
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 23eceea:	6842      	ldr	r2, [r0, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23eceec:	ee35 5a24 	vadd.f32	s10, s10, s9
{
 23ecef0:	4683      	mov	fp, r0
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ecef2:	4608      	mov	r0, r1
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ecef4:	edd6 3a01 	vldr	s7, [r6, #4]
 23ecef8:	ed94 4a01 	vldr	s8, [r4, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ecefc:	ed80 5a00 	vstr	s10, [r0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 23ecf00:	ed96 5a01 	vldr	s10, [r6, #4]
 23ecf04:	ed94 3a01 	vldr	s6, [r4, #4]
 23ecf08:	ee36 5a85 	vadd.f32	s10, s13, s10
 23ecf0c:	ee35 5a03 	vadd.f32	s10, s10, s6
 23ecf10:	ed80 5a01 	vstr	s10, [r0, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ecf14:	ee33 5aa7 	vadd.f32	s10, s7, s15
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ecf18:	3108      	adds	r1, #8
 23ecf1a:	9106      	str	r1, [sp, #24]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 23ecf1c:	4631      	mov	r1, r6
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ecf1e:	ee35 5a44 	vsub.f32	s10, s10, s8
    *p2++ = t2[0];
 23ecf22:	3108      	adds	r1, #8
 23ecf24:	910b      	str	r1, [sp, #44]	; 0x2c
    *p2++ = t2[1];
    *p3++ = t3[0];
 23ecf26:	4629      	mov	r1, r5
    *p2++ = t2[0];
 23ecf28:	ed86 5a00 	vstr	s10, [r6]
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 23ecf2c:	ee36 6a47 	vsub.f32	s12, s12, s14
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ecf30:	ee35 5ac7 	vsub.f32	s10, s11, s14
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 23ecf34:	ee76 6ae3 	vsub.f32	s13, s13, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 23ecf38:	ee77 7ae3 	vsub.f32	s15, s15, s7
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 23ecf3c:	ee37 7a25 	vadd.f32	s14, s14, s11
    *p3++ = t3[0];
 23ecf40:	3108      	adds	r1, #8
 23ecf42:	910c      	str	r1, [sp, #48]	; 0x30
    *p3++ = t3[1];
    *p4++ = t4[0];
 23ecf44:	4621      	mov	r1, r4
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ecf46:	ee35 5a24 	vadd.f32	s10, s10, s9
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 23ecf4a:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 23ecf4e:	ee76 6ac4 	vsub.f32	s13, s13, s8
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 23ecf52:	ee77 7a84 	vadd.f32	s15, s15, s8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 23ecf56:	ee37 7a64 	vsub.f32	s14, s14, s9
    *p4++ = t4[0];
 23ecf5a:	3108      	adds	r1, #8
 23ecf5c:	910d      	str	r1, [sp, #52]	; 0x34
    *p4++ = t4[1];

    tw2 += twMod2;
 23ecf5e:	f102 0108 	add.w	r1, r2, #8
 23ecf62:	9107      	str	r1, [sp, #28]
    tw3 += twMod3;
 23ecf64:	f102 0110 	add.w	r1, r2, #16
    tw4 += twMod4;
 23ecf68:	3218      	adds	r2, #24
 23ecf6a:	9209      	str	r2, [sp, #36]	; 0x24

    for (l = (L - 2) >> 1; l > 0; l-- )
 23ecf6c:	085a      	lsrs	r2, r3, #1
 23ecf6e:	3a02      	subs	r2, #2
    *p2++ = t2[1];
 23ecf70:	ed86 5a01 	vstr	s10, [r6, #4]
    tw3 += twMod3;
 23ecf74:	9108      	str	r1, [sp, #32]
    *p3++ = t3[0];
 23ecf76:	ed85 6a00 	vstr	s12, [r5]
    *p3++ = t3[1];
 23ecf7a:	edc5 6a01 	vstr	s13, [r5, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ecf7e:	ea4f 0852 	mov.w	r8, r2, lsr #1
    *p4++ = t4[0];
 23ecf82:	edc4 7a00 	vstr	s15, [r4]
    *p4++ = t4[1];
 23ecf86:	ed84 7a01 	vstr	s14, [r4, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ecf8a:	9a07      	ldr	r2, [sp, #28]
 23ecf8c:	f1a4 0904 	sub.w	r9, r4, #4
 23ecf90:	9204      	str	r2, [sp, #16]
 23ecf92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ecf94:	9103      	str	r1, [sp, #12]
 23ecf96:	9202      	str	r2, [sp, #8]
 23ecf98:	9a01      	ldr	r2, [sp, #4]
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 23ecf9a:	f1a6 0a04 	sub.w	sl, r6, #4
 23ecf9e:	f102 0e10 	add.w	lr, r2, #16
    pEnd2 = p3 - 1;
 23ecfa2:	1f2f      	subs	r7, r5, #4
    pEnd4 = pEnd3 + L;
 23ecfa4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 23ecfa8:	f106 0110 	add.w	r1, r6, #16
 23ecfac:	f105 0c10 	add.w	ip, r5, #16
 23ecfb0:	f104 0210 	add.w	r2, r4, #16
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ecfb4:	f8cd 8014 	str.w	r8, [sp, #20]
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 23ecfb8:	ed1c 7a02 	vldr	s14, [ip, #-8]
      p1sp3_0 = p1[0] - p3[0];
      p1ap3_1 = p1[1] + p3[1];
 23ecfbc:	ed5c 3a01 	vldr	s7, [ip, #-4]
      p1ap3_0 = p1[0] + p3[0];
 23ecfc0:	ed5e 4a02 	vldr	s9, [lr, #-8]
      p1ap3_1 = p1[1] + p3[1];
 23ecfc4:	ed1e 6a01 	vldr	s12, [lr, #-4]
      p1sp3_1 = p1[1] - p3[1];
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ecfc8:	ed51 5a02 	vldr	s11, [r1, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ecfcc:	ed51 7a01 	vldr	s15, [r1, #-4]
      p1sp3_0 = p1[0] - p3[0];
 23ecfd0:	ee74 2ac7 	vsub.f32	s5, s9, s14
      p1sp3_1 = p1[1] - p3[1];
 23ecfd4:	ee36 5a63 	vsub.f32	s10, s12, s7
      p1ap3_0 = p1[0] + p3[0];
 23ecfd8:	ee74 4a87 	vadd.f32	s9, s9, s14
      p1ap3_1 = p1[1] + p3[1];
 23ecfdc:	ee36 6a23 	vadd.f32	s12, s12, s7
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ecfe0:	ed12 4a02 	vldr	s8, [r2, #-8]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ecfe4:	ed12 2a01 	vldr	s4, [r2, #-4]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ecfe8:	ee35 3a65 	vsub.f32	s6, s10, s11
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ecfec:	ee77 6aa2 	vadd.f32	s13, s15, s5
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 23ecff0:	ee34 7ae5 	vsub.f32	s14, s9, s11
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 23ecff4:	ee76 3a67 	vsub.f32	s7, s12, s15
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 23ecff8:	ee35 5a85 	vadd.f32	s10, s11, s10
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 23ecffc:	ee72 7ae7 	vsub.f32	s15, s5, s15
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ed000:	ee75 5aa4 	vadd.f32	s11, s11, s9
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed004:	9804      	ldr	r0, [sp, #16]
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 23ed006:	ee76 6ac2 	vsub.f32	s13, s13, s4
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed00a:	3008      	adds	r0, #8
 23ed00c:	9004      	str	r0, [sp, #16]
 23ed00e:	9803      	ldr	r0, [sp, #12]
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 23ed010:	ee33 3a04 	vadd.f32	s6, s6, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed014:	3010      	adds	r0, #16
 23ed016:	9003      	str	r0, [sp, #12]
 23ed018:	9802      	ldr	r0, [sp, #8]
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 23ed01a:	ee37 7a44 	vsub.f32	s14, s14, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed01e:	3018      	adds	r0, #24
 23ed020:	9002      	str	r0, [sp, #8]
 23ed022:	9805      	ldr	r0, [sp, #20]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 23ed024:	ee73 3ac2 	vsub.f32	s7, s7, s4
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 23ed028:	ee77 7a82 	vadd.f32	s15, s15, s4
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 23ed02c:	ee35 5a44 	vsub.f32	s10, s10, s8
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ed030:	ee75 5a84 	vadd.f32	s11, s11, s8
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed034:	f1aa 0a08 	sub.w	sl, sl, #8
 23ed038:	3f08      	subs	r7, #8
 23ed03a:	f1a9 0908 	sub.w	r9, r9, #8
 23ed03e:	3b08      	subs	r3, #8
 23ed040:	f10e 0e08 	add.w	lr, lr, #8
 23ed044:	3108      	adds	r1, #8
 23ed046:	f10c 0c08 	add.w	ip, ip, #8
 23ed04a:	3208      	adds	r2, #8
 23ed04c:	2800      	cmp	r0, #0
 23ed04e:	d175      	bne.n	23ed13c <arm_cfft_radix8by4_f32+0x2a0>
 23ed050:	9b06      	ldr	r3, [sp, #24]
 23ed052:	2718      	movs	r7, #24
 23ed054:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ed058:	edc2 5a00 	vstr	s11, [r2]
 23ed05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 23ed05e:	9b07      	ldr	r3, [sp, #28]
 23ed060:	fb07 0708 	mla	r7, r7, r8, r0
 23ed064:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23ed066:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 23ed06a:	eb00 0cc8 	add.w	ip, r0, r8, lsl #3
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 23ed06e:	eddc 5a01 	vldr	s11, [ip, #4]
 23ed072:	980c      	ldr	r0, [sp, #48]	; 0x30
 23ed074:	9b08      	ldr	r3, [sp, #32]
 23ed076:	eb00 0ec8 	add.w	lr, r0, r8, lsl #3
 23ed07a:	980d      	ldr	r0, [sp, #52]	; 0x34
 23ed07c:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 23ed080:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 23ed084:	ee36 6a25 	vadd.f32	s12, s12, s11
 23ed088:	edd8 5a01 	vldr	s11, [r8, #4]
 23ed08c:	ee36 6a25 	vadd.f32	s12, s12, s11
 23ed090:	ed82 6a01 	vstr	s12, [r2, #4]

    /* COL 2 */
    twR = tw2[0];
    twI = tw2[1];
 23ed094:	edd1 4a01 	vldr	s9, [r1, #4]
    twR = tw2[0];
 23ed098:	edd1 5a00 	vldr	s11, [r1]

    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
 23ed09c:	ee24 6a83 	vmul.f32	s12, s9, s6
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 23ed0a0:	eea5 6aa6 	vfma.f32	s12, s11, s13
    *p2++ = m2 - m3;
 23ed0a4:	ee66 6ae4 	vnmul.f32	s13, s13, s9
 23ed0a8:	eee5 6a83 	vfma.f32	s13, s11, s6
    *p2++ = m0 + m1;
 23ed0ac:	ed8c 6a00 	vstr	s12, [ip]
    *p2++ = m2 - m3;
 23ed0b0:	edcc 6a01 	vstr	s13, [ip, #4]
    /* COL 3 */
    twR = tw3[0];
    twI = tw3[1];
 23ed0b4:	edd3 5a01 	vldr	s11, [r3, #4]
    twR = tw3[0];
 23ed0b8:	ed93 6a00 	vldr	s12, [r3]

    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
 23ed0bc:	ee65 6aa3 	vmul.f32	s13, s11, s7
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 23ed0c0:	eee6 6a07 	vfma.f32	s13, s12, s14
    *p3++ = m2 - m3;
 23ed0c4:	ee27 7a65 	vnmul.f32	s14, s14, s11
 23ed0c8:	eea6 7a23 	vfma.f32	s14, s12, s7
    *p3++ = m0 + m1;
 23ed0cc:	edce 6a00 	vstr	s13, [lr]
    *p3++ = m2 - m3;
 23ed0d0:	ed8e 7a01 	vstr	s14, [lr, #4]
    /* COL 4 */
    twR = tw4[0];
    twI = tw4[1];
 23ed0d4:	ed97 6a01 	vldr	s12, [r7, #4]
    twR = tw4[0];
 23ed0d8:	edd7 6a00 	vldr	s13, [r7]

    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
 23ed0dc:	ee26 7a05 	vmul.f32	s14, s12, s10
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 23ed0e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
    *p4++ = m2 - m3;
 23ed0e4:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 23ed0e8:	eee6 7a85 	vfma.f32	s15, s13, s10
    *p4++ = m0 + m1;
 23ed0ec:	ed88 7a00 	vstr	s14, [r8]
    *p4++ = m2 - m3;
 23ed0f0:	edc8 7a01 	vstr	s15, [r8, #4]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 23ed0f4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 23ed0f8:	f8db 2004 	ldr.w	r2, [fp, #4]
 23ed0fc:	9801      	ldr	r0, [sp, #4]
 23ed0fe:	2304      	movs	r3, #4
 23ed100:	9102      	str	r1, [sp, #8]
 23ed102:	f7ff fb99 	bl	23ec838 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 23ed106:	9902      	ldr	r1, [sp, #8]
 23ed108:	4630      	mov	r0, r6
 23ed10a:	f8db 2004 	ldr.w	r2, [fp, #4]
 23ed10e:	2304      	movs	r3, #4
 23ed110:	9101      	str	r1, [sp, #4]
 23ed112:	f7ff fb91 	bl	23ec838 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 23ed116:	4628      	mov	r0, r5
 23ed118:	f8db 2004 	ldr.w	r2, [fp, #4]
 23ed11c:	9901      	ldr	r1, [sp, #4]
 23ed11e:	2304      	movs	r3, #4
 23ed120:	f7ff fb8a 	bl	23ec838 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 23ed124:	2304      	movs	r3, #4
 23ed126:	4620      	mov	r0, r4
 23ed128:	f8db 2004 	ldr.w	r2, [fp, #4]
 23ed12c:	9901      	ldr	r1, [sp, #4]
}
 23ed12e:	b00f      	add	sp, #60	; 0x3c
 23ed130:	ecbd 8b04 	vpop	{d8-d9}
 23ed134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 23ed138:	f7ff bb7e 	b.w	23ec838 <arm_radix8_butterfly_f32>
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 23ed13c:	ed4e 5a04 	vstr	s11, [lr, #-16]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 23ed140:	ed51 5a03 	vldr	s11, [r1, #-12]
 23ed144:	ee36 6a25 	vadd.f32	s12, s12, s11
 23ed148:	ed52 5a03 	vldr	s11, [r2, #-12]
 23ed14c:	ee36 6a25 	vadd.f32	s12, s12, s11
 23ed150:	ed0e 6a03 	vstr	s12, [lr, #-12]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 23ed154:	ed99 6a01 	vldr	s12, [r9, #4]
 23ed158:	edda 2a01 	vldr	s5, [sl, #4]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23ed15c:	edda 4a02 	vldr	s9, [sl, #8]
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 23ed160:	ee72 5a86 	vadd.f32	s11, s5, s12
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 23ed164:	ee72 2ac6 	vsub.f32	s5, s5, s12
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23ed168:	ed99 6a02 	vldr	s12, [r9, #8]
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23ed16c:	ed93 0a02 	vldr	s0, [r3, #8]
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 23ed170:	ee74 8a86 	vadd.f32	s17, s9, s12
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 23ed174:	ee74 4ac6 	vsub.f32	s9, s9, s12
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23ed178:	ed97 6a02 	vldr	s12, [r7, #8]
 23ed17c:	ee36 9a40 	vsub.f32	s18, s12, s0
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 23ed180:	ee78 1ac6 	vsub.f32	s3, s17, s12
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 23ed184:	ee36 6a28 	vadd.f32	s12, s12, s17
 23ed188:	ee36 6a00 	vadd.f32	s12, s12, s0
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23ed18c:	ed93 4a01 	vldr	s8, [r3, #4]
 23ed190:	ed97 8a01 	vldr	s16, [r7, #4]
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 23ed194:	ed8a 6a02 	vstr	s12, [sl, #8]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23ed198:	ed97 6a01 	vldr	s12, [r7, #4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 23ed19c:	ee35 2ac8 	vsub.f32	s4, s11, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23ed1a0:	ee75 5a86 	vadd.f32	s11, s11, s12
 23ed1a4:	ed93 6a01 	vldr	s12, [r3, #4]
 23ed1a8:	ee75 5a86 	vadd.f32	s11, s11, s12
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23ed1ac:	ee34 1ac8 	vsub.f32	s2, s9, s16
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 23ed1b0:	edca 5a01 	vstr	s11, [sl, #4]
      twR = *tw2++;
 23ed1b4:	9804      	ldr	r0, [sp, #16]
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 23ed1b6:	ee31 1a04 	vadd.f32	s2, s2, s8
      twI = *tw2++;
 23ed1ba:	ed50 5a01 	vldr	s11, [r0, #-4]
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 23ed1be:	ee32 2a44 	vsub.f32	s4, s4, s8
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 23ed1c2:	ee34 4a48 	vsub.f32	s8, s8, s16
      twR = *tw2++;
 23ed1c6:	ed10 6a02 	vldr	s12, [r0, #-8]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 23ed1ca:	ee74 4a64 	vsub.f32	s9, s8, s9
      m1 = t2[1] * twI;
 23ed1ce:	ee25 4a83 	vmul.f32	s8, s11, s6
      *p2++ = m0 + m1;
 23ed1d2:	eea6 4a26 	vfma.f32	s8, s12, s13
      *p2++ = m2 - m3;
 23ed1d6:	ee66 6ae5 	vnmul.f32	s13, s13, s11
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 23ed1da:	ee79 0a22 	vadd.f32	s1, s18, s5
      *p2++ = m2 - m3;
 23ed1de:	eee6 6a03 	vfma.f32	s13, s12, s6
 23ed1e2:	ed41 6a03 	vstr	s13, [r1, #-12]
      m3 = t2[3] * twR;
 23ed1e6:	ee61 6a06 	vmul.f32	s13, s2, s12
      *pEnd2-- = m0 - m1;
 23ed1ea:	ee26 6a60 	vnmul.f32	s12, s12, s1
      *pEnd2-- = m2 + m3;
 23ed1ee:	eee0 6aa5 	vfma.f32	s13, s1, s11
      *pEnd2-- = m0 - m1;
 23ed1f2:	eea1 6a25 	vfma.f32	s12, s2, s11
      *p2++ = m0 + m1;
 23ed1f6:	ed01 4a04 	vstr	s8, [r1, #-16]
      *pEnd2-- = m0 - m1;
 23ed1fa:	ed87 6a02 	vstr	s12, [r7, #8]
      *pEnd2-- = m2 + m3;
 23ed1fe:	edc7 6a01 	vstr	s13, [r7, #4]
      twR = tw3[0];
 23ed202:	9803      	ldr	r0, [sp, #12]
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 23ed204:	ee71 1ac0 	vsub.f32	s3, s3, s0
      twI = tw3[1];
 23ed208:	ed50 6a03 	vldr	s13, [r0, #-12]
      twR = tw3[0];
 23ed20c:	ed10 6a04 	vldr	s12, [r0, #-16]
      m1 = t3[1] * twI;
 23ed210:	ee66 5aa3 	vmul.f32	s11, s13, s7
      *p3++ = m0 + m1;
 23ed214:	eee6 5a07 	vfma.f32	s11, s12, s14
      *p3++ = m2 - m3;
 23ed218:	ee27 7a66 	vnmul.f32	s14, s14, s13
 23ed21c:	eea6 7a23 	vfma.f32	s14, s12, s7
 23ed220:	ed0c 7a03 	vstr	s14, [ip, #-12]
      m3 =  t3[3] * twI;
 23ed224:	ee21 7aa6 	vmul.f32	s14, s3, s13
      *pEnd3-- = m0 - m1;
 23ed228:	ee66 6ac2 	vnmul.f32	s13, s13, s4
      *pEnd3-- = m3 - m2;
 23ed22c:	eea2 7a46 	vfms.f32	s14, s4, s12
      *pEnd3-- = m0 - m1;
 23ed230:	eee1 6ac6 	vfms.f32	s13, s3, s12
      *p3++ = m0 + m1;
 23ed234:	ed4c 5a04 	vstr	s11, [ip, #-16]
      *pEnd3-- = m0 - m1;
 23ed238:	edc9 6a02 	vstr	s13, [r9, #8]
      *pEnd3-- = m3 - m2;
 23ed23c:	ed89 7a01 	vstr	s14, [r9, #4]
      twR = tw4[0];
 23ed240:	9802      	ldr	r0, [sp, #8]
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 23ed242:	ee79 2a62 	vsub.f32	s5, s18, s5
      twR = tw4[0];
 23ed246:	ed10 7a06 	vldr	s14, [r0, #-24]	; 0xffffffe8
      twI = tw4[1];
 23ed24a:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
      m1 = t4[1] * twI;
 23ed24e:	ee26 6a85 	vmul.f32	s12, s13, s10
      *p4++ = m0 + m1;
 23ed252:	eea7 6a27 	vfma.f32	s12, s14, s15
      *p4++ = m2 - m3;
 23ed256:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 23ed25a:	eee7 7a05 	vfma.f32	s15, s14, s10
 23ed25e:	ed42 7a03 	vstr	s15, [r2, #-12]
      m3 = t4[3] * twR;
 23ed262:	ee64 7a87 	vmul.f32	s15, s9, s14
      *pEnd4-- = m0 - m1;
 23ed266:	ee27 7a62 	vnmul.f32	s14, s14, s5
      *pEnd4-- = m2 + m3;
 23ed26a:	eee2 7aa6 	vfma.f32	s15, s5, s13
      *pEnd4-- = m0 - m1;
 23ed26e:	eea4 7aa6 	vfma.f32	s14, s9, s13
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed272:	9805      	ldr	r0, [sp, #20]
      *p4++ = m0 + m1;
 23ed274:	ed02 6a04 	vstr	s12, [r2, #-16]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed278:	3801      	subs	r0, #1
      *pEnd4-- = m0 - m1;
 23ed27a:	ed83 7a02 	vstr	s14, [r3, #8]
      *pEnd4-- = m2 + m3;
 23ed27e:	edc3 7a01 	vstr	s15, [r3, #4]
    for (l = (L - 2) >> 1; l > 0; l-- )
 23ed282:	9005      	str	r0, [sp, #20]
 23ed284:	e698      	b.n	23ecfb8 <arm_cfft_radix8by4_f32+0x11c>

023ed286 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 23ed286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t  L = S->fftLen, l;
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 23ed28a:	2a01      	cmp	r2, #1
{
 23ed28c:	4606      	mov	r6, r0
 23ed28e:	460c      	mov	r4, r1
 23ed290:	4617      	mov	r7, r2
 23ed292:	4698      	mov	r8, r3
  uint32_t  L = S->fftLen, l;
 23ed294:	8805      	ldrh	r5, [r0, #0]
  if (ifftFlag == 1U)
 23ed296:	d03e      	beq.n	23ed316 <arm_cfft_f32+0x90>
      *pSrc = -*pSrc;
      pSrc += 2;
    }
  }

  switch (L)
 23ed298:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 23ed29c:	d049      	beq.n	23ed332 <arm_cfft_f32+0xac>
 23ed29e:	d826      	bhi.n	23ed2ee <arm_cfft_f32+0x68>
 23ed2a0:	2d40      	cmp	r5, #64	; 0x40
 23ed2a2:	d031      	beq.n	23ed308 <arm_cfft_f32+0x82>
 23ed2a4:	d81c      	bhi.n	23ed2e0 <arm_cfft_f32+0x5a>
 23ed2a6:	2d10      	cmp	r5, #16
 23ed2a8:	d01c      	beq.n	23ed2e4 <arm_cfft_f32+0x5e>
 23ed2aa:	2d20      	cmp	r5, #32
 23ed2ac:	d041      	beq.n	23ed332 <arm_cfft_f32+0xac>
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
    break;
  }

  if ( bitReverseFlag )
 23ed2ae:	f1b8 0f00 	cmp.w	r8, #0
 23ed2b2:	d004      	beq.n	23ed2be <arm_cfft_f32+0x38>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 23ed2b4:	4620      	mov	r0, r4
 23ed2b6:	68b2      	ldr	r2, [r6, #8]
 23ed2b8:	89b1      	ldrh	r1, [r6, #12]
 23ed2ba:	f7ff fa9c 	bl	23ec7f6 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 23ed2be:	2f01      	cmp	r7, #1
 23ed2c0:	d10c      	bne.n	23ed2dc <arm_cfft_f32+0x56>
  {
    invL = 1.0f / (float32_t)L;
 23ed2c2:	ee07 5a90 	vmov	s15, r5
 23ed2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 23ed2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15

    /* Conjugate and scale output data */
    pSrc = p1;
    for (l= 0; l < L; l++)
 23ed2ce:	2300      	movs	r3, #0
    invL = 1.0f / (float32_t)L;
 23ed2d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (l= 0; l < L; l++)
 23ed2d4:	42ab      	cmp	r3, r5
 23ed2d6:	f104 0408 	add.w	r4, r4, #8
 23ed2da:	d32f      	bcc.n	23ed33c <arm_cfft_f32+0xb6>
      *pSrc++ *=   invL ;
      *pSrc    = -(*pSrc) * invL;
      pSrc++;
    }
  }
}
 23ed2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (L)
 23ed2e0:	2d80      	cmp	r5, #128	; 0x80
 23ed2e2:	d1e4      	bne.n	23ed2ae <arm_cfft_f32+0x28>
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 23ed2e4:	4621      	mov	r1, r4
 23ed2e6:	4630      	mov	r0, r6
 23ed2e8:	f7ff fd1a 	bl	23ecd20 <arm_cfft_radix8by2_f32>
    break;
 23ed2ec:	e7df      	b.n	23ed2ae <arm_cfft_f32+0x28>
  switch (L)
 23ed2ee:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 23ed2f2:	d01e      	beq.n	23ed332 <arm_cfft_f32+0xac>
 23ed2f4:	d805      	bhi.n	23ed302 <arm_cfft_f32+0x7c>
 23ed2f6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23ed2fa:	d005      	beq.n	23ed308 <arm_cfft_f32+0x82>
 23ed2fc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23ed300:	e7ef      	b.n	23ed2e2 <arm_cfft_f32+0x5c>
 23ed302:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 23ed306:	d1d2      	bne.n	23ed2ae <arm_cfft_f32+0x28>
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 23ed308:	2301      	movs	r3, #1
 23ed30a:	4629      	mov	r1, r5
 23ed30c:	4620      	mov	r0, r4
 23ed30e:	6872      	ldr	r2, [r6, #4]
 23ed310:	f7ff fa92 	bl	23ec838 <arm_radix8_butterfly_f32>
    break;
 23ed314:	e7cb      	b.n	23ed2ae <arm_cfft_f32+0x28>
    for (l = 0; l < L; l++)
 23ed316:	2300      	movs	r3, #0
    pSrc = p1 + 1;
 23ed318:	1d0a      	adds	r2, r1, #4
    for (l = 0; l < L; l++)
 23ed31a:	42ab      	cmp	r3, r5
 23ed31c:	f102 0208 	add.w	r2, r2, #8
 23ed320:	d2ba      	bcs.n	23ed298 <arm_cfft_f32+0x12>
      *pSrc = -*pSrc;
 23ed322:	ed52 7a02 	vldr	s15, [r2, #-8]
 23ed326:	eef1 7a67 	vneg.f32	s15, s15
    for (l = 0; l < L; l++)
 23ed32a:	3301      	adds	r3, #1
      *pSrc = -*pSrc;
 23ed32c:	ed42 7a02 	vstr	s15, [r2, #-8]
    for (l = 0; l < L; l++)
 23ed330:	e7f3      	b.n	23ed31a <arm_cfft_f32+0x94>
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 23ed332:	4621      	mov	r1, r4
 23ed334:	4630      	mov	r0, r6
 23ed336:	f7ff fdb1 	bl	23ece9c <arm_cfft_radix8by4_f32>
    break;
 23ed33a:	e7b8      	b.n	23ed2ae <arm_cfft_f32+0x28>
      *pSrc++ *=   invL ;
 23ed33c:	ed54 7a02 	vldr	s15, [r4, #-8]
 23ed340:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ed344:	ed44 7a02 	vstr	s15, [r4, #-8]
      *pSrc    = -(*pSrc) * invL;
 23ed348:	ed54 7a01 	vldr	s15, [r4, #-4]
 23ed34c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    for (l= 0; l < L; l++)
 23ed350:	3301      	adds	r3, #1
      *pSrc    = -(*pSrc) * invL;
 23ed352:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (l= 0; l < L; l++)
 23ed356:	e7bd      	b.n	23ed2d4 <arm_cfft_f32+0x4e>

023ed358 <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 23ed358:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23ed3a0 <arm_rms_f32+0x48>
{
 23ed35c:	b513      	push	{r0, r1, r4, lr}
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 23ed35e:	460b      	mov	r3, r1
{
 23ed360:	4614      	mov	r4, r2
 23ed362:	eef0 6a47 	vmov.f32	s13, s14
 23ed366:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23ed368:	b983      	cbnz	r3, 23ed38c <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 23ed36a:	eddd 7a01 	vldr	s15, [sp, #4]
 23ed36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ed372:	ee87 0a27 	vdiv.f32	s0, s14, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 23ed376:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ed37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed37e:	db0b      	blt.n	23ed398 <arm_rms_f32+0x40>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 23ed380:	f00c fb78 	bl	23f9a74 <sqrtf>
 23ed384:	ed84 0a00 	vstr	s0, [r4]
}
 23ed388:	b002      	add	sp, #8
 23ed38a:	bd10      	pop	{r4, pc}
    in = *pSrc++;
 23ed38c:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 23ed390:	3b01      	subs	r3, #1
    sum += ( in * in);
 23ed392:	eea7 7aa7 	vfma.f32	s14, s15, s15
    blkCnt--;
 23ed396:	e7e7      	b.n	23ed368 <arm_rms_f32+0x10>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 23ed398:	edc4 6a00 	vstr	s13, [r4]
}
 23ed39c:	e7f4      	b.n	23ed388 <arm_rms_f32+0x30>
 23ed39e:	bf00      	nop
 23ed3a0:	00000000 	.word	0x00000000

023ed3a4 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 23ed3a4:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 23ed3a6:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23ed3aa:	2401      	movs	r4, #1
  outIndex = 0U;
 23ed3ac:	2500      	movs	r5, #0
  while (blkCnt > 0U)
 23ed3ae:	42a1      	cmp	r1, r4
 23ed3b0:	d103      	bne.n	23ed3ba <arm_max_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 23ed3b2:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 23ed3b6:	601d      	str	r5, [r3, #0]
}
 23ed3b8:	bd30      	pop	{r4, r5, pc}
    maxVal = *pSrc++;
 23ed3ba:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out < maxVal)
 23ed3be:	eef4 7ac7 	vcmpe.f32	s15, s14
 23ed3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3c6:	bf54      	ite	pl
 23ed3c8:	eeb0 7a67 	vmovpl.f32	s14, s15
 23ed3cc:	4625      	movmi	r5, r4
  outIndex = 0U;
 23ed3ce:	eef0 7a47 	vmov.f32	s15, s14
 23ed3d2:	3401      	adds	r4, #1
 23ed3d4:	e7eb      	b.n	23ed3ae <arm_max_f32+0xa>

023ed3d6 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 23ed3d6:	b530      	push	{r4, r5, lr}

  /* Initialise index value to zero. */
  outIndex = 0U;

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 23ed3d8:	ecf0 7a01 	vldmia	r0!, {s15}
  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23ed3dc:	2401      	movs	r4, #1
  outIndex = 0U;
 23ed3de:	2500      	movs	r5, #0
  while (blkCnt > 0U)
 23ed3e0:	42a1      	cmp	r1, r4
 23ed3e2:	d103      	bne.n	23ed3ec <arm_min_f32+0x16>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 23ed3e4:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 23ed3e8:	601d      	str	r5, [r3, #0]
}
 23ed3ea:	bd30      	pop	{r4, r5, pc}
    minVal = *pSrc++;
 23ed3ec:	ecb0 7a01 	vldmia	r0!, {s14}
    if (out > minVal)
 23ed3f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 23ed3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3f8:	bfd4      	ite	le
 23ed3fa:	eeb0 7a67 	vmovle.f32	s14, s15
 23ed3fe:	4625      	movgt	r5, r4
  outIndex = 0U;
 23ed400:	eef0 7a47 	vmov.f32	s15, s14
 23ed404:	3401      	adds	r4, #1
 23ed406:	e7eb      	b.n	23ed3e0 <arm_min_f32+0xa>

023ed408 <AUDIO_SI_WriteReg>:
void AUDIO_SI_WriteReg(u32 address, u32 data)
{
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23ed408:	0409      	lsls	r1, r1, #16
 23ed40a:	4a06      	ldr	r2, [pc, #24]	; (23ed424 <AUDIO_SI_WriteReg+0x1c>)
 23ed40c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 23ed410:	f040 0001 	orr.w	r0, r0, #1

	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23ed414:	4b04      	ldr	r3, [pc, #16]	; (23ed428 <AUDIO_SI_WriteReg+0x20>)
	SIx->SI_CTRLR = (address << 8) | (data << 16) | BIT_CTRLR_SI_WR_START;
 23ed416:	6010      	str	r0, [r2, #0]
	while ((SIx->SI_CTRLR & BIT_CTRLR_SI_WR_START) && (++cnt) < 100000);
 23ed418:	6811      	ldr	r1, [r2, #0]
 23ed41a:	07c9      	lsls	r1, r1, #31
 23ed41c:	d501      	bpl.n	23ed422 <AUDIO_SI_WriteReg+0x1a>
 23ed41e:	3b01      	subs	r3, #1
 23ed420:	d1fa      	bne.n	23ed418 <AUDIO_SI_WriteReg+0x10>

	if (cnt == 100000) {
		DBG_8195A("write codec reg fail!!\n");
	}
}
 23ed422:	4770      	bx	lr
 23ed424:	40010000 	.word	0x40010000
 23ed428:	000186a0 	.word	0x000186a0

023ed42c <AUDIO_SI_ReadReg>:
	u32 reg_value = 0;
	u32 cnt = 0;
	AUDIO_SI_TypeDef *SIx = AUDIO_SI_DEV;

	/* Configure Read command */
	SIx->SI_CTRLR = (address << 8) | BIT_CTRLR_SI_RD_START;
 23ed42c:	4a06      	ldr	r2, [pc, #24]	; (23ed448 <AUDIO_SI_ReadReg+0x1c>)
 23ed42e:	0200      	lsls	r0, r0, #8
 23ed430:	f040 0010 	orr.w	r0, r0, #16
 23ed434:	6010      	str	r0, [r2, #0]
 23ed436:	4805      	ldr	r0, [pc, #20]	; (23ed44c <AUDIO_SI_ReadReg+0x20>)

	do {
		reg_value = SIx->SI_CTRLR;
 23ed438:	6813      	ldr	r3, [r2, #0]
		/* waiting for read done */
	} while ((reg_value & BIT_CTRLR_SI_RD_START) && (++cnt) < 100000);
 23ed43a:	06d9      	lsls	r1, r3, #27
 23ed43c:	d502      	bpl.n	23ed444 <AUDIO_SI_ReadReg+0x18>
 23ed43e:	3801      	subs	r0, #1
 23ed440:	d1fa      	bne.n	23ed438 <AUDIO_SI_ReadReg+0xc>
 23ed442:	4770      	bx	lr
	if (cnt == 100000) {
		DBG_8195A("read codec reg fail!!\n");
		return 0;
	}

	return ((reg_value & BIT_CTRLR_SI_DATA) >> 16);
 23ed444:	0c18      	lsrs	r0, r3, #16
}
 23ed446:	4770      	bx	lr
 23ed448:	40010000 	.word	0x40010000
 23ed44c:	000186a0 	.word	0x000186a0

023ed450 <CODEC_Init>:
  *            @arg APP_LINE_OUT: line out
  *            @arg APP_DAAD_LPBK: loopback
  * @return  None
  */
void CODEC_Init(u32 sample_rate, u32 word_len, u32 mono_stereo, u32 application)
{
 23ed450:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23ed454:	4617      	mov	r7, r2
	uint32_t reg_value = 0, reg_value2 = 0, reg_value3 = 0;

	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23ed456:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
{
 23ed45a:	461d      	mov	r5, r3
 23ed45c:	4688      	mov	r8, r1
	reg_value = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL);
 23ed45e:	f8d2 3344 	ldr.w	r3, [r2, #836]	; 0x344
#define AUTO_CAL_MAX_ERROR				0x007

static inline u32
is_power_supply18(void)
{
	u32 temp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_AON_LDO_CTRL0);
 23ed462:	6911      	ldr	r1, [r2, #16]
	reg_value &= ~(BIT_LSYS_MASK_AC_LDO_REG << BIT_LSYS_SHIFT_AC_LDO_REG);
 23ed464:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

	if (temp & BIT_AON_V1833_SEL)
 23ed468:	0149      	lsls	r1, r1, #5
	//restore the pad power
	if (is_power_supply18()) {
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
	} else {
		reg_value |= ((u32)0x2A) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23ed46a:	bf4c      	ite	mi
 23ed46c:	f043 0354 	orrmi.w	r3, r3, #84	; 0x54
		reg_value |= ((u32)0x68) << BIT_LSYS_SHIFT_AC_LDO_REG;
 23ed470:	f043 03d0 	orrpl.w	r3, r3, #208	; 0xd0
	}
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);

	/* ================= CODEC initialize ======================== */

	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23ed474:	f015 0410 	ands.w	r4, r5, #16
{
 23ed478:	4606      	mov	r6, r0
	HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_AUDIO_SHARE_PAD_CTRL, reg_value);
 23ed47a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344

		reg_value3 = (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL | 1 << BIT_ASRC_EN);
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
		reg_value3 = 0;

		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23ed47e:	ea40 1900 	orr.w	r9, r0, r0, lsl #4
	if ((application & APP_DAAD_LPBK) == APP_DAAD_LPBK) {
 23ed482:	d059      	beq.n	23ed538 <CODEC_Init+0xe8>
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value3);
 23ed484:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23ed488:	2012      	movs	r0, #18
 23ed48a:	f7ff ffbd 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value3);
 23ed48e:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 23ed492:	2015      	movs	r0, #21
 23ed494:	f7ff ffb8 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23ed498:	201b      	movs	r0, #27
 23ed49a:	f7ff ffc7 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 | 1 << BIT_ASRC_FTK_LOOP_EN | 1 << BIT_ASRC_256FS_SYS_SEL);
 23ed49e:	f040 0007 	orr.w	r0, r0, #7
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23ed4a2:	b281      	uxth	r1, r0
 23ed4a4:	201b      	movs	r0, #27
 23ed4a6:	f7ff ffaf 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23ed4aa:	201b      	movs	r0, #27
 23ed4ac:	f7ff ffbe 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_EN);
 23ed4b0:	f040 0010 	orr.w	r0, r0, #16
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23ed4b4:	b281      	uxth	r1, r0
 23ed4b6:	201b      	movs	r0, #27
 23ed4b8:	f7ff ffa6 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23ed4bc:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23ed4c0:	2018      	movs	r0, #24
 23ed4c2:	f7ff ffa1 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23ed4c6:	20fb      	movs	r0, #251	; 0xfb
 23ed4c8:	f7ff ffb0 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAAD_LPBK_EN);
 23ed4cc:	f040 0002 	orr.w	r0, r0, #2
		AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value);
 23ed4d0:	b281      	uxth	r1, r0
 23ed4d2:	20fb      	movs	r0, #251	; 0xfb
 23ed4d4:	f7ff ff98 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23ed4d8:	2011      	movs	r0, #17
 23ed4da:	f7ff ffa7 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_AD_MIX_MUTE);
 23ed4de:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23ed4e2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23ed4e6:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23ed4e8:	2011      	movs	r0, #17
 23ed4ea:	f7ff ff8d 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23ed4ee:	2014      	movs	r0, #20
 23ed4f0:	f7ff ff9c 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_AD_MIX_MUTE);
 23ed4f4:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
 23ed4f8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 23ed4fc:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);
 23ed4fe:	2014      	movs	r0, #20
 23ed500:	f7ff ff82 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23ed504:	2018      	movs	r0, #24
 23ed506:	f7ff ff91 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23ed50a:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23ed50e:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23ed512:	b281      	uxth	r1, r0
 23ed514:	2018      	movs	r0, #24
 23ed516:	f7ff ff77 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23ed51a:	2117      	movs	r1, #23
 23ed51c:	201b      	movs	r0, #27
 23ed51e:	f7ff ff73 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23ed522:	4649      	mov	r1, r9
 23ed524:	2017      	movs	r0, #23
 23ed526:	f7ff ff6f 	bl	23ed408 <AUDIO_SI_WriteReg>

		reg_value3 = (1 << BIT_I2S_RST_N_REG);
		AUDIO_SI_WriteReg(I2S_CTRL, reg_value3);
 23ed52a:	2180      	movs	r1, #128	; 0x80
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
	}

	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23ed52c:	2010      	movs	r0, #16
}
 23ed52e:	b002      	add	sp, #8
 23ed530:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23ed534:	f7ff bf68 	b.w	23ed408 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//VREF voltage selection
 23ed538:	2003      	movs	r0, #3
 23ed53a:	f7ff ff77 	bl	23ed42c <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23ed53e:	f420 6140 	bic.w	r1, r0, #3072	; 0xc00
 23ed542:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23ed546:	2003      	movs	r0, #3
	reg_value |= (2 << BIT_VREF_VREFSEL);
 23ed548:	b289      	uxth	r1, r1
	AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23ed54a:	f7ff ff5d 	bl	23ed408 <AUDIO_SI_WriteReg>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23ed54e:	f015 0a08 	ands.w	sl, r5, #8
 23ed552:	d04a      	beq.n	23ed5ea <CODEC_Init+0x19a>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL); 	//dac modulation/filter/fifo on
 23ed554:	2018      	movs	r0, #24
 23ed556:	f7ff ff69 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DA_L_EN | 1 << BIT_DA_R_EN | 1 << BIT_MOD_L_EN | 1 << BIT_MOD_R_EN | 1 << BIT_DA_ANA_CLK_EN | 1 << BIT_DA_FIFO_EN);
 23ed55a:	f040 003f 	orr.w	r0, r0, #63	; 0x3f
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23ed55e:	b281      	uxth	r1, r0
 23ed560:	2018      	movs	r0, #24
 23ed562:	f7ff ff51 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23ed566:	4620      	mov	r0, r4
 23ed568:	f7ff ff60 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_POW | 1 << BIT_DTSDM_CKXEN);
 23ed56c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23ed570:	f440 7146 	orr.w	r1, r0, #792	; 0x318
 23ed574:	f041 0103 	orr.w	r1, r1, #3
 23ed578:	4620      	mov	r0, r4
 23ed57a:	f7ff ff45 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23ed57e:	f240 71fc 	movw	r1, #2044	; 0x7fc
 23ed582:	2001      	movs	r0, #1
 23ed584:	f7ff ff40 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23ed588:	2002      	movs	r0, #2
 23ed58a:	f7ff ff4f 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23ed58e:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23ed592:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23ed596:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23ed59a:	2002      	movs	r0, #2
 23ed59c:	f7ff ff34 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23ed5a0:	2110      	movs	r1, #16
 23ed5a2:	200c      	movs	r0, #12
 23ed5a4:	f7ff ff30 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23ed5a8:	f649 71fc 	movw	r1, #40956	; 0x9ffc
 23ed5ac:	2001      	movs	r0, #1
 23ed5ae:	f7ff ff2b 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23ed5b2:	2002      	movs	r0, #2
 23ed5b4:	f7ff ff3a 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 1 << BIT_HPO_OPPDPR | 1 << BIT_HPO_R_POW | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 <<
 23ed5b8:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23ed5bc:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23ed5c0:	f041 01fa 	orr.w	r1, r1, #250	; 0xfa
 23ed5c4:	2002      	movs	r0, #2
 23ed5c6:	f7ff ff1f 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23ed5ca:	4620      	mov	r0, r4
 23ed5cc:	f7ff ff2e 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DPRAMP_ENRAMP | 1 << BIT_DPRAMP_POW | 1 <<
 23ed5d0:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23ed5d4:	f440 7166 	orr.w	r1, r0, #920	; 0x398
 23ed5d8:	f041 0103 	orr.w	r1, r1, #3
 23ed5dc:	4620      	mov	r0, r4
 23ed5de:	f7ff ff13 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23ed5e2:	2118      	movs	r1, #24
 23ed5e4:	200c      	movs	r0, #12
 23ed5e6:	f7ff ff0f 	bl	23ed408 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23ed5ea:	f015 0405 	ands.w	r4, r5, #5
 23ed5ee:	d02f      	beq.n	23ed650 <CODEC_Init+0x200>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//vref power on
 23ed5f0:	2002      	movs	r0, #2
 23ed5f2:	f7ff ff1b 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23ed5f6:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
 23ed5fa:	f441 4101 	orr.w	r1, r1, #33024	; 0x8100
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23ed5fe:	2002      	movs	r0, #2
		reg_value |= (1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23ed600:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23ed602:	f7ff ff01 	bl	23ed408 <AUDIO_SI_WriteReg>
		DelayUs(5);
 23ed606:	2005      	movs	r0, #5
 23ed608:	f00d fee6 	bl	23fb3d8 <__DelayUs_veneer>
		if ((application & APP_AMIC_IN) == APP_AMIC_IN) {
 23ed60c:	07ea      	lsls	r2, r5, #31
 23ed60e:	d57f      	bpl.n	23ed710 <CODEC_Init+0x2c0>
			reg_value = AUDIO_SI_ReadReg(CK_DEPOP_MICBIAS);		//micbias chopper clock enable
 23ed610:	200c      	movs	r0, #12
 23ed612:	f7ff ff0b 	bl	23ed42c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_CKX_MICBIAS_EN);
 23ed616:	f040 0010 	orr.w	r0, r0, #16
			AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value);
 23ed61a:	b281      	uxth	r1, r0
 23ed61c:	200c      	movs	r0, #12
 23ed61e:	f7ff fef3 	bl	23ed408 <AUDIO_SI_WriteReg>
			reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);		//release micbias chopper clock gate and mic_bias on
 23ed622:	2002      	movs	r0, #2
 23ed624:	f7ff ff02 	bl	23ed42c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBIAS_ENCHX | 1 << BIT_MICBIAS_POW);
 23ed628:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
			AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23ed62c:	b281      	uxth	r1, r0
 23ed62e:	2002      	movs	r0, #2
 23ed630:	f7ff feea 	bl	23ed408 <AUDIO_SI_WriteReg>
			DelayUs(100);
 23ed634:	2064      	movs	r0, #100	; 0x64
 23ed636:	f00d fecf 	bl	23fb3d8 <__DelayUs_veneer>
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute mic
 23ed63a:	2003      	movs	r0, #3
 23ed63c:	f7ff fef6 	bl	23ed42c <AUDIO_SI_ReadReg>
			reg_value |= (2 << BIT_MICBST_MUTE_L | 2 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23ed640:	f020 01f0 	bic.w	r1, r0, #240	; 0xf0
 23ed644:	f441 7168 	orr.w	r1, r1, #928	; 0x3a0
 23ed648:	b289      	uxth	r1, r1
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23ed64a:	2003      	movs	r0, #3
 23ed64c:	f7ff fedc 	bl	23ed408 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN) || ((application & APP_LINE_OUT) == APP_LINE_OUT)) {
 23ed650:	f015 0f0d 	tst.w	r5, #13
 23ed654:	d002      	beq.n	23ed65c <CODEC_Init+0x20c>
		DelayMs(200);
 23ed656:	20c8      	movs	r0, #200	; 0xc8
 23ed658:	f00d fece 	bl	23fb3f8 <__DelayMs_veneer>
	if ((application & APP_LINE_OUT) == APP_LINE_OUT) {
 23ed65c:	f1ba 0f00 	cmp.w	sl, #0
 23ed660:	d020      	beq.n	23ed6a4 <CODEC_Init+0x254>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);
 23ed662:	2000      	movs	r0, #0
 23ed664:	f7ff fee2 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DAC_CKXEN | 1 << BIT_DAC_L_POW | 1 << BIT_DAC_R_POW | 1 << BIT_DTSDM_CKXEN);
 23ed668:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23ed66c:	f440 7106 	orr.w	r1, r0, #536	; 0x218
 23ed670:	f041 0103 	orr.w	r1, r1, #3
 23ed674:	2000      	movs	r0, #0
 23ed676:	f7ff fec7 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(HPO_CTRL, reg_value3);
 23ed67a:	f240 41fc 	movw	r1, #1276	; 0x4fc
 23ed67e:	2001      	movs	r0, #1
 23ed680:	f7ff fec2 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(HPO_MIC_CTRL);
 23ed684:	2002      	movs	r0, #2
 23ed686:	f7ff fed1 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (2 << BIT_HPO_ML | 2 << BIT_HPO_MR | 2 << BIT_HPO_OPPDPR | 1 << BIT_HPO_SEL | 1 << BIT_HPO_SER | 1 << BIT_MBIAS_POW | 1 << BIT_VREF_POW);
 23ed68a:	f400 50e0 	and.w	r0, r0, #7168	; 0x1c00
		AUDIO_SI_WriteReg(HPO_MIC_CTRL, reg_value);
 23ed68e:	f440 4101 	orr.w	r1, r0, #33024	; 0x8100
 23ed692:	f041 01ea 	orr.w	r1, r1, #234	; 0xea
 23ed696:	2002      	movs	r0, #2
 23ed698:	f7ff feb6 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(CK_DEPOP_MICBIAS, reg_value3);
 23ed69c:	2110      	movs	r1, #16
 23ed69e:	200c      	movs	r0, #12
 23ed6a0:	f7ff feb2 	bl	23ed408 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23ed6a4:	b16c      	cbz	r4, 23ed6c2 <CODEC_Init+0x272>
		reg_value = AUDIO_SI_ReadReg(GEN_CTRL);		//adc on
 23ed6a6:	2000      	movs	r0, #0
 23ed6a8:	f7ff fec0 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DAC_ADDACK_POW | 1 << BIT_DTSDM_CKXEN | 1 << BIT_DTSDM_POW_L | 1 << BIT_DTSDM_POW_R);
 23ed6ac:	f440 6060 	orr.w	r0, r0, #3584	; 0xe00
 23ed6b0:	f040 0001 	orr.w	r0, r0, #1
		AUDIO_SI_WriteReg(GEN_CTRL, reg_value);
 23ed6b4:	b281      	uxth	r1, r0
 23ed6b6:	2000      	movs	r0, #0
 23ed6b8:	f7ff fea6 	bl	23ed408 <AUDIO_SI_WriteReg>
		DelayUs(50);
 23ed6bc:	2032      	movs	r0, #50	; 0x32
 23ed6be:	f00d fe8b 	bl	23fb3d8 <__DelayUs_veneer>
	AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value3);
 23ed6c2:	f641 71bf 	movw	r1, #8127	; 0x1fbf
 23ed6c6:	2018      	movs	r0, #24
 23ed6c8:	f7ff fe9e 	bl	23ed408 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value3);
 23ed6cc:	f246 3120 	movw	r1, #25376	; 0x6320
 23ed6d0:	2011      	movs	r0, #17
 23ed6d2:	f7ff fe99 	bl	23ed408 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value3);
 23ed6d6:	f246 3120 	movw	r1, #25376	; 0x6320
 23ed6da:	2014      	movs	r0, #20
 23ed6dc:	f7ff fe94 	bl	23ed408 <AUDIO_SI_WriteReg>
	if (((application & APP_AMIC_IN) == APP_AMIC_IN) || ((application & APP_LINE_IN) == APP_LINE_IN)) {
 23ed6e0:	b364      	cbz	r4, 23ed73c <CODEC_Init+0x2ec>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23ed6e2:	2012      	movs	r0, #18
 23ed6e4:	f7ff fea2 	bl	23ed42c <AUDIO_SI_ReadReg>
 23ed6e8:	4604      	mov	r4, r0
		reg_value2 = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23ed6ea:	2015      	movs	r0, #21
 23ed6ec:	f7ff fe9e 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(7 << BIT_ADC_L_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_L_AD_ZDET_FUNC)));
 23ed6f0:	f424 64c7 	bic.w	r4, r4, #1592	; 0x638
 23ed6f4:	f420 6ac7 	bic.w	sl, r0, #1592	; 0x638
 23ed6f8:	b2a4      	uxth	r4, r4
		reg_value2 &= (0xffff & (~(7 << BIT_ADC_R_ADJ_HPF_COEF_SEL | 3 << BIT_ADC_R_AD_ZDET_FUNC)));
 23ed6fa:	fa1f fa8a 	uxth.w	sl, sl
		switch (sample_rate) {
 23ed6fe:	2e09      	cmp	r6, #9
 23ed700:	d80e      	bhi.n	23ed720 <CODEC_Init+0x2d0>
 23ed702:	e8df f006 	tbb	[pc, r6]
 23ed706:	c0bb      	.short	0xc0bb
 23ed708:	0d0db60d 	.word	0x0d0db60d
 23ed70c:	c0bb0d0d 	.word	0xc0bb0d0d
			reg_value = AUDIO_SI_ReadReg(MICBST_CTRL);		//PGA on and unmute line-in
 23ed710:	2003      	movs	r0, #3
 23ed712:	f7ff fe8b 	bl	23ed42c <AUDIO_SI_ReadReg>
			reg_value |= (1 << BIT_MICBST_MUTE_L | 1 << BIT_MICBST_MUTE_R | 3 << BIT_MICBST_POW);
 23ed716:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
			AUDIO_SI_WriteReg(MICBST_CTRL, reg_value);
 23ed71a:	f440 7154 	orr.w	r1, r0, #848	; 0x350
 23ed71e:	e794      	b.n	23ed64a <CODEC_Init+0x1fa>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23ed720:	f044 0104 	orr.w	r1, r4, #4
		reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23ed724:	f04a 0a04 	orr.w	sl, sl, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23ed728:	2012      	movs	r0, #18
 23ed72a:	f7ff fe6d 	bl	23ed408 <AUDIO_SI_WriteReg>
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value2);
 23ed72e:	2015      	movs	r0, #21
 23ed730:	4651      	mov	r1, sl
 23ed732:	f7ff fe69 	bl	23ed408 <AUDIO_SI_WriteReg>
		DelayMs(50);		//maybe need fine tune per board
 23ed736:	2032      	movs	r0, #50	; 0x32
 23ed738:	f00d fe5e 	bl	23fb3f8 <__DelayMs_veneer>
	AUDIO_SI_WriteReg(ASRC_CTRL, reg_value3);
 23ed73c:	2117      	movs	r1, #23
 23ed73e:	201b      	movs	r0, #27
 23ed740:	f7ff fe62 	bl	23ed408 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, (sample_rate << 4) | sample_rate);
 23ed744:	4649      	mov	r1, r9
 23ed746:	2017      	movs	r0, #23
 23ed748:	f7ff fe5e 	bl	23ed408 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_MUTE_CTRL);
 23ed74c:	20fb      	movs	r0, #251	; 0xfb
 23ed74e:	f7ff fe6d 	bl	23ed42c <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_L_MUTE_CTRL, reg_value & 0xfff9);
 23ed752:	f020 0106 	bic.w	r1, r0, #6
 23ed756:	f041 0108 	orr.w	r1, r1, #8
 23ed75a:	b289      	uxth	r1, r1
 23ed75c:	20fb      	movs	r0, #251	; 0xfb
 23ed75e:	f7ff fe53 	bl	23ed408 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_R_MUTE_CTRL);
 23ed762:	20fd      	movs	r0, #253	; 0xfd
 23ed764:	f7ff fe62 	bl	23ed42c <AUDIO_SI_ReadReg>
	AUDIO_SI_WriteReg(DAC_R_MUTE_CTRL, reg_value & 0xfff9);
 23ed768:	f020 0106 	bic.w	r1, r0, #6
 23ed76c:	f041 0108 	orr.w	r1, r1, #8
 23ed770:	b289      	uxth	r1, r1
 23ed772:	20fd      	movs	r0, #253	; 0xfd
 23ed774:	f7ff fe48 	bl	23ed408 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(ALC_MIN_GAIN);
 23ed778:	2027      	movs	r0, #39	; 0x27
 23ed77a:	f7ff fe57 	bl	23ed42c <AUDIO_SI_ReadReg>
	reg_value &= (0xffff & (~(1 << BIT_DA_STEREO_MODE_EN)));
 23ed77e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 23ed782:	b281      	uxth	r1, r0
	if (mono_stereo == CH_STEREO) {
 23ed784:	b90f      	cbnz	r7, 23ed78a <CODEC_Init+0x33a>
		reg_value |= BIT8;
 23ed786:	f441 7180 	orr.w	r1, r1, #256	; 0x100
	AUDIO_SI_WriteReg(ALC_MIN_GAIN, reg_value);
 23ed78a:	2027      	movs	r0, #39	; 0x27
 23ed78c:	f7ff fe3c 	bl	23ed408 <AUDIO_SI_WriteReg>
	reg_value = AUDIO_SI_ReadReg(DAC_L_CTRL);
 23ed790:	20fa      	movs	r0, #250	; 0xfa
 23ed792:	f7ff fe4b 	bl	23ed42c <AUDIO_SI_ReadReg>
	reg_value |= (2 << BIT_DAC_L_DA_ZDET_FUNC);
 23ed796:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 23ed79a:	0540      	lsls	r0, r0, #21
 23ed79c:	0d40      	lsrs	r0, r0, #21
 23ed79e:	f440 5180 	orr.w	r1, r0, #4096	; 0x1000
	AUDIO_SI_WriteReg(DAC_L_CTRL, reg_value);
 23ed7a2:	20fa      	movs	r0, #250	; 0xfa
 23ed7a4:	9101      	str	r1, [sp, #4]
 23ed7a6:	f7ff fe2f 	bl	23ed408 <AUDIO_SI_WriteReg>
	AUDIO_SI_WriteReg(DAC_R_CTRL, reg_value);
 23ed7aa:	20fc      	movs	r0, #252	; 0xfc
 23ed7ac:	9901      	ldr	r1, [sp, #4]
 23ed7ae:	f7ff fe2b 	bl	23ed408 <AUDIO_SI_WriteReg>
	if ((application & APP_DMIC_IN) == APP_DMIC_IN) {
 23ed7b2:	07ab      	lsls	r3, r5, #30
 23ed7b4:	d540      	bpl.n	23ed838 <CODEC_Init+0x3e8>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_L_FILTER_CTRL);
 23ed7b6:	2011      	movs	r0, #17
 23ed7b8:	f7ff fe38 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_RI_FA_SEL | 1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 <<
 23ed7bc:	4c34      	ldr	r4, [pc, #208]	; (23ed890 <CODEC_Init+0x440>)
 23ed7be:	4020      	ands	r0, r4
 23ed7c0:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23ed7c4:	f041 0119 	orr.w	r1, r1, #25
 23ed7c8:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_L_FILTER_CTRL, reg_value);
 23ed7ca:	2011      	movs	r0, #17
 23ed7cc:	f7ff fe1c 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_L_CTRL);
 23ed7d0:	2012      	movs	r0, #18
 23ed7d2:	f7ff fe2b 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_ADJ_HPF_2ND_EN);
 23ed7d6:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_L_CTRL, reg_value);
 23ed7da:	b281      	uxth	r1, r0
 23ed7dc:	2012      	movs	r0, #18
 23ed7de:	f7ff fe13 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_DMIC_R_FILTER_CTRL);
 23ed7e2:	2014      	movs	r0, #20
 23ed7e4:	f7ff fe22 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_L_DMIC_LPF2ND_EN | 1 << BIT_ADC_L_DMIC_LPF1ST_EN | 1 << BIT_ADC_L_AD_MIX_MUTE | 1 << BIT_ADC_L_AD_DCHPF_EN);
 23ed7e8:	4020      	ands	r0, r4
 23ed7ea:	f440 41a0 	orr.w	r1, r0, #20480	; 0x5000
 23ed7ee:	f041 0118 	orr.w	r1, r1, #24
 23ed7f2:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(ADC_DMIC_R_FILTER_CTRL, reg_value);	//bit0: 0 means latching rising edge, whereas 1 means falling edge.
 23ed7f4:	2014      	movs	r0, #20
 23ed7f6:	f7ff fe07 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ADC_R_ADJ_D);
 23ed7fa:	2015      	movs	r0, #21
 23ed7fc:	f7ff fe16 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ADC_R_ADJ_HPF_2ND_EN);
 23ed800:	f040 0004 	orr.w	r0, r0, #4
		AUDIO_SI_WriteReg(ADC_R_ADJ_D, reg_value);
 23ed804:	b281      	uxth	r1, r0
 23ed806:	2015      	movs	r0, #21
 23ed808:	f7ff fdfe 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23ed80c:	2017      	movs	r0, #23
 23ed80e:	f7ff fe0d 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_CLK_SEL);
 23ed812:	f420 61e0 	bic.w	r1, r0, #1792	; 0x700
 23ed816:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 23ed81a:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23ed81c:	2017      	movs	r0, #23
 23ed81e:	f7ff fdf3 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_MIC_CLK_CTRL);
 23ed822:	2018      	movs	r0, #24
 23ed824:	f7ff fe02 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_DMIC_L_EN | 1 << BIT_DMIC_R_EN | 1 << BIT_DMIC_CLK_EN);
 23ed828:	ea6f 40c0 	mvn.w	r0, r0, lsl #19
 23ed82c:	ea6f 40d0 	mvn.w	r0, r0, lsr #19
		AUDIO_SI_WriteReg(DAC_ADC_MIC_CLK_CTRL, reg_value);
 23ed830:	b281      	uxth	r1, r0
 23ed832:	2018      	movs	r0, #24
 23ed834:	f7ff fde8 	bl	23ed408 <AUDIO_SI_WriteReg>
	if ((sample_rate == SR_96K) || (sample_rate == SR_88P2K)) {
 23ed838:	f026 0608 	bic.w	r6, r6, #8
 23ed83c:	2e01      	cmp	r6, #1
 23ed83e:	d113      	bne.n	23ed868 <CODEC_Init+0x418>
		reg_value = AUDIO_SI_ReadReg(DAC_ADC_SR_CTRL);
 23ed840:	2017      	movs	r0, #23
 23ed842:	f7ff fdf3 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value |= (1 << BIT_ASRC_FSI_RATE_MANUAL);
 23ed846:	f420 41f0 	bic.w	r1, r0, #30720	; 0x7800
 23ed84a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 23ed84e:	b289      	uxth	r1, r1
		AUDIO_SI_WriteReg(DAC_ADC_SR_CTRL, reg_value);
 23ed850:	2017      	movs	r0, #23
 23ed852:	f7ff fdd9 	bl	23ed408 <AUDIO_SI_WriteReg>
		reg_value = AUDIO_SI_ReadReg(ASRC_CTRL);
 23ed856:	201b      	movs	r0, #27
 23ed858:	f7ff fde8 	bl	23ed42c <AUDIO_SI_ReadReg>
		reg_value &= (0xffff & (~(3 << BIT_ASRC_256FS_SYS_SEL)));
 23ed85c:	f020 000c 	bic.w	r0, r0, #12
 23ed860:	b281      	uxth	r1, r0
		AUDIO_SI_WriteReg(ASRC_CTRL, reg_value);
 23ed862:	201b      	movs	r0, #27
 23ed864:	f7ff fdd0 	bl	23ed408 <AUDIO_SI_WriteReg>
	reg_value = ((word_len << 4) | mono_stereo | 0x0080);
 23ed868:	ea47 1108 	orr.w	r1, r7, r8, lsl #4
	AUDIO_SI_WriteReg(I2S_CTRL, reg_value);
 23ed86c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 23ed870:	e65c      	b.n	23ed52c <CODEC_Init+0xdc>
			reg_value |= (1 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23ed872:	f044 010c 	orr.w	r1, r4, #12
			reg_value2 |= (1 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23ed876:	f04a 0a0c 	orr.w	sl, sl, #12
			break;
 23ed87a:	e755      	b.n	23ed728 <CODEC_Init+0x2d8>
			reg_value |= (2 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23ed87c:	f044 0114 	orr.w	r1, r4, #20
			reg_value2 |= (2 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23ed880:	f04a 0a14 	orr.w	sl, sl, #20
			break;
 23ed884:	e750      	b.n	23ed728 <CODEC_Init+0x2d8>
			reg_value |= (3 << BIT_ADC_L_ADJ_HPF_COEF_SEL);
 23ed886:	f044 011c 	orr.w	r1, r4, #28
			reg_value2 |= (3 << BIT_ADC_R_ADJ_HPF_COEF_SEL);
 23ed88a:	f04a 0a1c 	orr.w	sl, sl, #28
			break;
 23ed88e:	e74b      	b.n	23ed728 <CODEC_Init+0x2d8>
 23ed890:	ffffdffe 	.word	0xffffdffe

023ed894 <sp_get_ready_rx_page>:

u8 *sp_get_ready_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
	
	if (prx_block->rx_gdma_own)
 23ed894:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23ed896:	4a05      	ldr	r2, [pc, #20]	; (23ed8ac <sp_get_ready_rx_page+0x18>)
 23ed898:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
	if (prx_block->rx_gdma_own)
 23ed89c:	434b      	muls	r3, r1
 23ed89e:	18d1      	adds	r1, r2, r3
 23ed8a0:	5cd3      	ldrb	r3, [r2, r3]
 23ed8a2:	b90b      	cbnz	r3, 23ed8a8 <sp_get_ready_rx_page+0x14>
		return NULL;
	else{
		return (u8*)prx_block->rx_addr;
 23ed8a4:	6848      	ldr	r0, [r1, #4]
 23ed8a6:	4770      	bx	lr
		return NULL;
 23ed8a8:	2000      	movs	r0, #0
	}
}
 23ed8aa:	4770      	bx	lr
 23ed8ac:	1007a580 	.word	0x1007a580

023ed8b0 <sp_read_rx_page>:

void sp_read_rx_page(u8 *dst, u32 length)
{
 23ed8b0:	b538      	push	{r3, r4, r5, lr}
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23ed8b2:	4d0c      	ldr	r5, [pc, #48]	; (23ed8e4 <sp_read_rx_page+0x34>)
{
 23ed8b4:	460a      	mov	r2, r1
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_usr_cnt]);
 23ed8b6:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
	
	if (dst) {
 23ed8ba:	b128      	cbz	r0, 23ed8c8 <sp_read_rx_page+0x18>
		memcpy(dst, (void const*)prx_block->rx_addr, length);
 23ed8bc:	230c      	movs	r3, #12
 23ed8be:	fb03 5304 	mla	r3, r3, r4, r5
 23ed8c2:	6859      	ldr	r1, [r3, #4]
 23ed8c4:	f00d fbd7 	bl	23fb076 <memcpy>
	}
	prx_block->rx_gdma_own = 1;
 23ed8c8:	230c      	movs	r3, #12
 23ed8ca:	2201      	movs	r2, #1
 23ed8cc:	4363      	muls	r3, r4
	sp_rx_info.rx_usr_cnt++;
 23ed8ce:	4414      	add	r4, r2
 23ed8d0:	b2e4      	uxtb	r4, r4
	if (sp_rx_info.rx_usr_cnt == SP_DMA_PAGE_NUM){
 23ed8d2:	2c04      	cmp	r4, #4
	prx_block->rx_gdma_own = 1;
 23ed8d4:	54ea      	strb	r2, [r5, r3]
		sp_rx_info.rx_usr_cnt = 0;
 23ed8d6:	bf0a      	itet	eq
 23ed8d8:	2300      	moveq	r3, #0
	sp_rx_info.rx_usr_cnt++;
 23ed8da:	f885 403d 	strbne.w	r4, [r5, #61]	; 0x3d
		sp_rx_info.rx_usr_cnt = 0;
 23ed8de:	f885 303d 	strbeq.w	r3, [r5, #61]	; 0x3d
	}
}
 23ed8e2:	bd38      	pop	{r3, r4, r5, pc}
 23ed8e4:	1007a580 	.word	0x1007a580

023ed8e8 <sp_release_rx_page>:

void sp_release_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (sp_rx_info.rx_full_flag){
 23ed8e8:	4a09      	ldr	r2, [pc, #36]	; (23ed910 <sp_release_rx_page+0x28>)
 23ed8ea:	f892 103e 	ldrb.w	r1, [r2, #62]	; 0x3e
 23ed8ee:	b969      	cbnz	r1, 23ed90c <sp_release_rx_page+0x24>
	}
	else{
		prx_block->rx_gdma_own = 0;
 23ed8f0:	200c      	movs	r0, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23ed8f2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
		prx_block->rx_gdma_own = 0;
 23ed8f6:	4358      	muls	r0, r3
		sp_rx_info.rx_gdma_cnt++;
 23ed8f8:	3301      	adds	r3, #1
 23ed8fa:	b2db      	uxtb	r3, r3
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23ed8fc:	2b04      	cmp	r3, #4
		prx_block->rx_gdma_own = 0;
 23ed8fe:	5411      	strb	r1, [r2, r0]
		if (sp_rx_info.rx_gdma_cnt == SP_DMA_PAGE_NUM){
 23ed900:	d002      	beq.n	23ed908 <sp_release_rx_page+0x20>
		sp_rx_info.rx_gdma_cnt++;
 23ed902:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 23ed906:	4770      	bx	lr
			sp_rx_info.rx_gdma_cnt = 0;
 23ed908:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
		}
	}
}
 23ed90c:	4770      	bx	lr
 23ed90e:	bf00      	nop
 23ed910:	1007a580 	.word	0x1007a580

023ed914 <sp_get_free_rx_page>:

u8 *sp_get_free_rx_page(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
	
	if (prx_block->rx_gdma_own){
 23ed914:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23ed916:	4b08      	ldr	r3, [pc, #32]	; (23ed938 <sp_get_free_rx_page+0x24>)
 23ed918:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	if (prx_block->rx_gdma_own){
 23ed91c:	434a      	muls	r2, r1
 23ed91e:	1899      	adds	r1, r3, r2
 23ed920:	5c9a      	ldrb	r2, [r3, r2]
 23ed922:	b122      	cbz	r2, 23ed92e <sp_get_free_rx_page+0x1a>
		sp_rx_info.rx_full_flag = 0;
 23ed924:	2200      	movs	r2, #0
		return (u8*)prx_block->rx_addr;
 23ed926:	6848      	ldr	r0, [r1, #4]
		sp_rx_info.rx_full_flag = 0;
 23ed928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		return (u8*)prx_block->rx_addr;
 23ed92c:	4770      	bx	lr
	}
	else{
		sp_rx_info.rx_full_flag = 1;
 23ed92e:	2201      	movs	r2, #1
		return (u8*)sp_rx_info.rx_full_block.rx_addr;	//for audio buffer full case
 23ed930:	6b58      	ldr	r0, [r3, #52]	; 0x34
		sp_rx_info.rx_full_flag = 1;
 23ed932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
}
 23ed936:	4770      	bx	lr
 23ed938:	1007a580 	.word	0x1007a580

023ed93c <sp_get_free_rx_length>:

u32 sp_get_free_rx_length(void)
{
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);

	if (sp_rx_info.rx_full_flag){
 23ed93c:	4b06      	ldr	r3, [pc, #24]	; (23ed958 <sp_get_free_rx_length+0x1c>)
 23ed93e:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 23ed942:	b10a      	cbz	r2, 23ed948 <sp_get_free_rx_length+0xc>
		return sp_rx_info.rx_full_block.rx_length;
 23ed944:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23ed946:	4770      	bx	lr
	}
	else{
		return prx_block->rx_length;
 23ed948:	210c      	movs	r1, #12
	pRX_BLOCK prx_block = &(sp_rx_info.rx_block[sp_rx_info.rx_gdma_cnt]);
 23ed94a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		return prx_block->rx_length;
 23ed94e:	fb01 3302 	mla	r3, r1, r2, r3
 23ed952:	6898      	ldr	r0, [r3, #8]
	}
}
 23ed954:	4770      	bx	lr
 23ed956:	bf00      	nop
 23ed958:	1007a580 	.word	0x1007a580

023ed95c <sp_rx_complete>:


void sp_rx_complete(void *Data)
{
 23ed95c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23ed95e:	4b21      	ldr	r3, [pc, #132]	; (23ed9e4 <sp_rx_complete+0x88>)
 23ed960:	4604      	mov	r4, r0
 23ed962:	695b      	ldr	r3, [r3, #20]
__STATIC_INLINE
void DCache_Invalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23ed964:	03d8      	lsls	r0, r3, #15
 23ed966:	d51a      	bpl.n	23ed99e <sp_rx_complete+0x42>
	PGDMA_InitTypeDef GDMA_InitStruct;
	u32 rx_addr;
	u32 rx_length;
	
	GDMA_InitStruct = &(gs->SpRxGdmaInitStruct);
	DCache_Invalidate(GDMA_InitStruct->GDMA_DstAddr, GDMA_InitStruct->GDMA_BlockSize<<2);
 23ed968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23ed96a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
		SCB_InvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23ed96c:	06d9      	lsls	r1, r3, #27
 23ed96e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 23ed972:	d008      	beq.n	23ed986 <sp_rx_complete+0x2a>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23ed974:	f023 011f 	bic.w	r1, r3, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23ed978:	3b01      	subs	r3, #1
 23ed97a:	4413      	add	r3, r2
 23ed97c:	f023 031f 	bic.w	r3, r3, #31
 23ed980:	3320      	adds	r3, #32
 23ed982:	1a5a      	subs	r2, r3, r1
			addr = (Address >> 5) << 5;   //32-byte aligned
 23ed984:	460b      	mov	r3, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23ed986:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCIMVAC = op_addr;
 23ed98a:	4816      	ldr	r0, [pc, #88]	; (23ed9e4 <sp_rx_complete+0x88>)
 23ed98c:	4413      	add	r3, r2
    while (op_size > 0) {
 23ed98e:	2a00      	cmp	r2, #0
 23ed990:	eba3 0102 	sub.w	r1, r3, r2
 23ed994:	dc21      	bgt.n	23ed9da <sp_rx_complete+0x7e>
 23ed996:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23ed99a:	f3bf 8f6f 	isb	sy
	/* Clear Pending ISR */
	GDMA_ClearINT(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum);
 23ed99e:	7861      	ldrb	r1, [r4, #1]
 23ed9a0:	4b11      	ldr	r3, [pc, #68]	; (23ed9e8 <sp_rx_complete+0x8c>)
 23ed9a2:	7820      	ldrb	r0, [r4, #0]
 23ed9a4:	4798      	blx	r3

	sp_release_rx_page();
 23ed9a6:	f7ff ff9f 	bl	23ed8e8 <sp_release_rx_page>
	rx_addr = (u32)sp_get_free_rx_page();
 23ed9aa:	f7ff ffb3 	bl	23ed914 <sp_get_free_rx_page>
 23ed9ae:	9001      	str	r0, [sp, #4]
	rx_length = sp_get_free_rx_length();
 23ed9b0:	f7ff ffc4 	bl	23ed93c <sp_get_free_rx_length>
 23ed9b4:	4605      	mov	r5, r0
	GDMA_SetDstAddr(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr);
 23ed9b6:	9a01      	ldr	r2, [sp, #4]
 23ed9b8:	7861      	ldrb	r1, [r4, #1]
 23ed9ba:	7820      	ldrb	r0, [r4, #0]
 23ed9bc:	4b0b      	ldr	r3, [pc, #44]	; (23ed9ec <sp_rx_complete+0x90>)
 23ed9be:	4798      	blx	r3
	GDMA_SetBlkSize(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_length>>2);	
 23ed9c0:	7861      	ldrb	r1, [r4, #1]
 23ed9c2:	7820      	ldrb	r0, [r4, #0]
 23ed9c4:	08aa      	lsrs	r2, r5, #2
 23ed9c6:	4b0a      	ldr	r3, [pc, #40]	; (23ed9f0 <sp_rx_complete+0x94>)
 23ed9c8:	4798      	blx	r3
	
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23ed9ca:	2201      	movs	r2, #1
 23ed9cc:	7861      	ldrb	r1, [r4, #1]
 23ed9ce:	7820      	ldrb	r0, [r4, #0]
 23ed9d0:	4b08      	ldr	r3, [pc, #32]	; (23ed9f4 <sp_rx_complete+0x98>)
	//AUDIO_SP_RXGDMA_Restart(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, rx_addr, rx_length);
}
 23ed9d2:	b003      	add	sp, #12
 23ed9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23ed9d8:	4718      	bx	r3
      SCB->DCIMVAC = op_addr;
 23ed9da:	f8c0 125c 	str.w	r1, [r0, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23ed9de:	3a20      	subs	r2, #32
 23ed9e0:	e7d5      	b.n	23ed98e <sp_rx_complete+0x32>
 23ed9e2:	bf00      	nop
 23ed9e4:	e000ed00 	.word	0xe000ed00
 23ed9e8:	1010bda5 	.word	0x1010bda5
 23ed9ec:	1010c2b9 	.word	0x1010c2b9
 23ed9f0:	1010c309 	.word	0x1010c309
 23ed9f4:	1010bf91 	.word	0x1010bf91

023ed9f8 <dmic_setup>:
//

void dmic_setup(int sampleRate, bool stereoMode) {
    SP_OBJ sp_obj;

	switch(sampleRate) {
 23ed9f8:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
void dmic_setup(int sampleRate, bool stereoMode) {
 23ed9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch(sampleRate) {
 23ed9fe:	d01c      	beq.n	23eda3a <dmic_setup+0x42>
		case 8000:
			sp_obj.sample_rate = SR_8K;
			break;

		case 32000:
			sp_obj.sample_rate = SR_32K;
 23eda00:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 23eda04:	bf14      	ite	ne
 23eda06:	2505      	movne	r5, #5
 23eda08:	2503      	moveq	r5, #3
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23eda0a:	4b37      	ldr	r3, [pc, #220]	; (23edae8 <dmic_setup+0xf0>)
 23eda0c:	2001      	movs	r0, #1
			sp_obj.sample_rate = SR_16K;
			break;
	}

	sp_obj.word_len = WL_16;
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23eda0e:	fab1 f481 	clz	r4, r1
	PLL_I2S_Set(ENABLE);		//enable 98.304MHz PLL. needed if fs=8k/16k/32k/48k/96k
 23eda12:	4798      	blx	r3
	RCC_PeriphClockCmd(APBPeriph_AUDIOC, APBPeriph_AUDIOC_CLOCK, ENABLE);
 23eda14:	f04f 4141 	mov.w	r1, #3238002688	; 0xc1000000
 23eda18:	2201      	movs	r2, #1
 23eda1a:	4608      	mov	r0, r1
 23eda1c:	4f33      	ldr	r7, [pc, #204]	; (23edaec <dmic_setup+0xf4>)
 23eda1e:	47b8      	blx	r7
	RCC_PeriphClockCmd(APBPeriph_SPORT, APBPeriph_SPORT_CLOCK, ENABLE);	
 23eda20:	4933      	ldr	r1, [pc, #204]	; (23edaf0 <dmic_setup+0xf8>)
 23eda22:	2201      	movs	r2, #1
 23eda24:	4608      	mov	r0, r1
 23eda26:	47b8      	blx	r7
 23eda28:	1eeb      	subs	r3, r5, #3
	sp_obj.mono_stereo = stereoMode ? CH_STEREO : CH_MONO;
 23eda2a:	0964      	lsrs	r4, r4, #5
	switch(psp_obj->sample_rate){
 23eda2c:	2b04      	cmp	r3, #4
 23eda2e:	d807      	bhi.n	23eda40 <dmic_setup+0x48>
 23eda30:	e8df f003 	tbb	[pc, r3]
 23eda34:	06560605 	.word	0x06560605
 23eda38:	58          	.byte	0x58
 23eda39:	00          	.byte	0x00
	switch(sampleRate) {
 23eda3a:	2507      	movs	r5, #7
 23eda3c:	e7e5      	b.n	23eda0a <dmic_setup+0x12>
			div = 12;
 23eda3e:	260c      	movs	r6, #12
	PLL_Div(div);
 23eda40:	4630      	mov	r0, r6
 23eda42:	f00b fa3f 	bl	23f8ec4 <PLL_Div>
	CODEC_Init(psp_obj->sample_rate, psp_obj->word_len, psp_obj->mono_stereo, psp_obj->direction);
 23eda46:	2302      	movs	r3, #2
 23eda48:	4622      	mov	r2, r4
 23eda4a:	4628      	mov	r0, r5
 23eda4c:	2100      	movs	r1, #0
 23eda4e:	f7ff fcff 	bl	23ed450 <CODEC_Init>
	PAD_CMD(_PB_1, DISABLE);
 23eda52:	4d28      	ldr	r5, [pc, #160]	; (23edaf4 <dmic_setup+0xfc>)
 23eda54:	2100      	movs	r1, #0
 23eda56:	2021      	movs	r0, #33	; 0x21
 23eda58:	47a8      	blx	r5
	PAD_CMD(_PB_2, DISABLE);
 23eda5a:	2100      	movs	r1, #0
 23eda5c:	2022      	movs	r0, #34	; 0x22
 23eda5e:	47a8      	blx	r5
	Pinmux_Config(_PB_1, PINMUX_FUNCTION_DMIC); // DMIC_CLK - A0
 23eda60:	4d25      	ldr	r5, [pc, #148]	; (23edaf8 <dmic_setup+0x100>)
 23eda62:	210c      	movs	r1, #12
 23eda64:	2021      	movs	r0, #33	; 0x21
 23eda66:	47a8      	blx	r5
	Pinmux_Config(_PB_2, PINMUX_FUNCTION_DMIC);	// DMIC_DATA - A1
 23eda68:	210c      	movs	r1, #12
 23eda6a:	2022      	movs	r0, #34	; 0x22
 23eda6c:	47a8      	blx	r5
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23eda6e:	4b23      	ldr	r3, [pc, #140]	; (23edafc <dmic_setup+0x104>)
 23eda70:	4a23      	ldr	r2, [pc, #140]	; (23edb00 <dmic_setup+0x108>)
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23eda72:	2501      	movs	r5, #1
	sp_rx_info.rx_full_block.rx_addr = (u32)sp_full_buf;
 23eda74:	635a      	str	r2, [r3, #52]	; 0x34
	sp_rx_info.rx_full_block.rx_length = (u32)SP_FULL_BUF_SIZE;
 23eda76:	2280      	movs	r2, #128	; 0x80
 23eda78:	639a      	str	r2, [r3, #56]	; 0x38
	sp_rx_info.rx_gdma_cnt = 0;
 23eda7a:	2200      	movs	r2, #0
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23eda7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 23eda80:	4920      	ldr	r1, [pc, #128]	; (23edb04 <dmic_setup+0x10c>)
	sp_rx_info.rx_gdma_cnt = 0;
 23eda82:	879a      	strh	r2, [r3, #60]	; 0x3c
	sp_rx_info.rx_full_flag = 0;
 23eda84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23eda88:	3201      	adds	r2, #1
 23eda8a:	2a04      	cmp	r2, #4
		sp_rx_info.rx_block[i].rx_length = SP_DMA_PAGE_SIZE;
 23eda8c:	e9c3 1001 	strd	r1, r0, [r3, #4]
		sp_rx_info.rx_block[i].rx_gdma_own = 1;
 23eda90:	701d      	strb	r5, [r3, #0]
	for(i=0; i<SP_DMA_PAGE_NUM; i++){
 23eda92:	f501 7100 	add.w	r1, r1, #512	; 0x200
 23eda96:	f103 030c 	add.w	r3, r3, #12
 23eda9a:	d1f5      	bne.n	23eda88 <dmic_setup+0x90>
	sp_init_rx_variables();

	/*configure Sport according to the parameters*/
	AUDIO_SP_StructInit(&SP_InitStruct);
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23eda9c:	2600      	movs	r6, #0
	AUDIO_SP_StructInit(&SP_InitStruct);
 23eda9e:	4d1a      	ldr	r5, [pc, #104]	; (23edb08 <dmic_setup+0x110>)
 23edaa0:	4b1a      	ldr	r3, [pc, #104]	; (23edb0c <dmic_setup+0x114>)
 23edaa2:	4628      	mov	r0, r5
 23edaa4:	4798      	blx	r3

	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23edaa6:	4629      	mov	r1, r5
 23edaa8:	4819      	ldr	r0, [pc, #100]	; (23edb10 <dmic_setup+0x118>)
 23edaaa:	4b1a      	ldr	r3, [pc, #104]	; (23edb14 <dmic_setup+0x11c>)
	SP_InitStruct.SP_MonoStereo= psp_obj->mono_stereo;
 23edaac:	60ac      	str	r4, [r5, #8]
	SP_InitStruct.SP_WordLen = psp_obj->word_len;
 23edaae:	602e      	str	r6, [r5, #0]
	AUDIO_SP_Init(AUDIO_SPORT_DEV, &SP_InitStruct);
 23edab0:	4798      	blx	r3
	
	AUDIO_SP_RdmaCmd(AUDIO_SPORT_DEV, ENABLE);
 23edab2:	2101      	movs	r1, #1
 23edab4:	4816      	ldr	r0, [pc, #88]	; (23edb10 <dmic_setup+0x118>)
 23edab6:	4b18      	ldr	r3, [pc, #96]	; (23edb18 <dmic_setup+0x120>)
 23edab8:	4798      	blx	r3
	AUDIO_SP_RxStart(AUDIO_SPORT_DEV, ENABLE);	
 23edaba:	2101      	movs	r1, #1
 23edabc:	4b17      	ldr	r3, [pc, #92]	; (23edb1c <dmic_setup+0x124>)
 23edabe:	4814      	ldr	r0, [pc, #80]	; (23edb10 <dmic_setup+0x118>)
 23edac0:	4798      	blx	r3

	rx_addr = (u32)sp_get_free_rx_page();
 23edac2:	f7ff ff27 	bl	23ed914 <sp_get_free_rx_page>
 23edac6:	4604      	mov	r4, r0
	rx_length = sp_get_free_rx_length();
 23edac8:	f7ff ff38 	bl	23ed93c <sp_get_free_rx_length>
	AUDIO_SP_RXGDMA_Init(0, &SPGdmaStruct.SpRxGdmaInitStruct, &SPGdmaStruct, (IRQ_FUN)sp_rx_complete, (u8*)rx_addr, rx_length);	
 23edacc:	4a14      	ldr	r2, [pc, #80]	; (23edb20 <dmic_setup+0x128>)
 23edace:	e9cd 4000 	strd	r4, r0, [sp]
 23edad2:	4611      	mov	r1, r2
 23edad4:	4630      	mov	r0, r6
 23edad6:	4b13      	ldr	r3, [pc, #76]	; (23edb24 <dmic_setup+0x12c>)
 23edad8:	4c13      	ldr	r4, [pc, #76]	; (23edb28 <dmic_setup+0x130>)
 23edada:	47a0      	blx	r4

    // Particle.connect();
}
 23edadc:	b003      	add	sp, #12
 23edade:	bdf0      	pop	{r4, r5, r6, r7, pc}
			div = 24;
 23edae0:	2618      	movs	r6, #24
			break;
 23edae2:	e7ad      	b.n	23eda40 <dmic_setup+0x48>
			div = 48;
 23edae4:	2630      	movs	r6, #48	; 0x30
			break;
 23edae6:	e7ab      	b.n	23eda40 <dmic_setup+0x48>
 23edae8:	023f8edd 	.word	0x023f8edd
 23edaec:	10110039 	.word	0x10110039
 23edaf0:	40080000 	.word	0x40080000
 23edaf4:	1010cf99 	.word	0x1010cf99
 23edaf8:	1010cfb9 	.word	0x1010cfb9
 23edafc:	1007a580 	.word	0x1007a580
 23edb00:	1007a500 	.word	0x1007a500
 23edb04:	10079c80 	.word	0x10079c80
 23edb08:	1007a4d4 	.word	0x1007a4d4
 23edb0c:	023f8f91 	.word	0x023f8f91
 23edb10:	40010800 	.word	0x40010800
 23edb14:	023f8fe5 	.word	0x023f8fe5
 23edb18:	023f9085 	.word	0x023f9085
 23edb1c:	023f8fc1 	.word	0x023f8fc1
 23edb20:	1007a480 	.word	0x1007a480
 23edb24:	023ed95d 	.word	0x023ed95d
 23edb28:	023f90a9 	.word	0x023f90a9

023edb2c <dmic_flush>:


void dmic_flush() {
 23edb2c:	b508      	push	{r3, lr}
	while(sp_get_ready_rx_page() != NULL) {
 23edb2e:	f7ff feb1 	bl	23ed894 <sp_get_ready_rx_page>
 23edb32:	b900      	cbnz	r0, 23edb36 <dmic_flush+0xa>
        sp_read_rx_page(NULL, 0);
    }  
}
 23edb34:	bd08      	pop	{r3, pc}
        sp_read_rx_page(NULL, 0);
 23edb36:	2100      	movs	r1, #0
 23edb38:	4608      	mov	r0, r1
 23edb3a:	f7ff feb9 	bl	23ed8b0 <sp_read_rx_page>
 23edb3e:	e7f6      	b.n	23edb2e <dmic_flush+0x2>

023edb40 <dmic_ready>:

unsigned char *dmic_ready() {
	return sp_get_ready_rx_page();
 23edb40:	f7ff bea8 	b.w	23ed894 <sp_get_ready_rx_page>

023edb44 <dmic_read>:
}

void dmic_read(unsigned char *buf, size_t len) {
	sp_read_rx_page(buf, len);
 23edb44:	f7ff beb4 	b.w	23ed8b0 <sp_read_rx_page>

023edb48 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23edb48:	4770      	bx	lr
	...

023edb4c <_ZN2ei5numpy19dequantize_zero_oneEh>:
    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
        return quantized_values_one_zero[value];
 23edb4c:	4b02      	ldr	r3, [pc, #8]	; (23edb58 <_ZN2ei5numpy19dequantize_zero_oneEh+0xc>)
 23edb4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
 23edb52:	ed90 0a00 	vldr	s0, [r0]
 23edb56:	4770      	bx	lr
 23edb58:	023fc964 	.word	0x023fc964

023edb5c <_ZNSt17_Function_handlerIFvPvjEZL27microphone_inference_recordvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23edb5c:	4770      	bx	lr
	...

023edb60 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 23edb60:	fefb 7a40 	vrintm.f32	s15, s0
     * frame_length is a float and can thus be off by a little bit, e.g.
     * frame_length = 0.018f actually can yield 0.018000011f
     * thus screwing up our frame calculations here...
     */
    static float ceil_unless_very_close_to_floor(float v) {
        if (v > floor(v) && v - floor(v) < 0.001f) {
 23edb64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23edb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edb6c:	dd08      	ble.n	23edb80 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x20>
 23edb6e:	ee30 7a67 	vsub.f32	s14, s0, s15
 23edb72:	eddf 6a06 	vldr	s13, [pc, #24]	; 23edb8c <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x2c>
 23edb76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 23edb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edb7e:	d401      	bmi.n	23edb84 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf+0x24>
  { return __builtin_ceilf(__x); }
 23edb80:	fefa 7a40 	vrintp.f32	s15, s0
        }
        else {
            v = (ceil(v));
        }
        return v;
    }
 23edb84:	eeb0 0a67 	vmov.f32	s0, s15
 23edb88:	4770      	bx	lr
 23edb8a:	bf00      	nop
 23edb8c:	3a83126f 	.word	0x3a83126f

023edb90 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>:
     * Perform normalization for MFE frames, this converts the signal to dB,
     * then add a hard filter, and quantize / dequantize the output
     * @param features_matrix input feature matrix, will be modified in place
     */
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
        const float noise = static_cast<float>(noise_floor_db * -1);
 23edb90:	4249      	negs	r1, r1
 23edb92:	ee07 1a90 	vmov	s15, r1
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23edb96:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);

        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
            float f = features_matrix->buffer[ix];
            if (f < 1e-30) {
 23edb9a:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23edb9e:	e9d9 8900 	ldrd	r8, r9, [r9]
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23edba2:	ed2d 8b06 	vpush	{d8-d10}
        const float noise = static_cast<float>(noise_floor_db * -1);
 23edba6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 23edbaa:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 23edbae:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 23edbb2:	ee78 7a27 	vadd.f32	s15, s16, s15
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23edbb6:	4604      	mov	r4, r0
        const float noise_scale = 1.0f / (static_cast<float>(noise_floor_db * -1) + 12.0f);
 23edbb8:	ee89 aaa7 	vdiv.f32	s20, s19, s15
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23edbbc:	2500      	movs	r5, #0
                f = 1e-30;
 23edbbe:	ed9f 9a32 	vldr	s18, [pc, #200]	; 23edc88 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xf8>
    {
        int e;
        float f = frexpf(fabsf(a), &e);
        float y = 1.23149591368684f;
        y *= f;
        y += -4.11852516267426f;
 23edbc2:	eddf aa32 	vldr	s21, [pc, #200]	; 23edc8c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xfc>
    static int mfe_normalization(matrix_t *features_matrix, int noise_floor_db) {
 23edbc6:	b082      	sub	sp, #8
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23edbc8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23edbcc:	4353      	muls	r3, r2
 23edbce:	42ab      	cmp	r3, r5
 23edbd0:	d952      	bls.n	23edc78 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe8>
            float f = features_matrix->buffer[ix];
 23edbd2:	6826      	ldr	r6, [r4, #0]
 23edbd4:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 23edbd8:	edd6 8a00 	vldr	s17, [r6]
            if (f < 1e-30) {
 23edbdc:	ee18 0a90 	vmov	r0, s17
 23edbe0:	f7fb feda 	bl	23e9998 <__aeabi_f2d>
 23edbe4:	4642      	mov	r2, r8
 23edbe6:	464b      	mov	r3, r9
 23edbe8:	f7fc f9a0 	bl	23e9f2c <__aeabi_dcmplt>
                f = 1e-30;
 23edbec:	2800      	cmp	r0, #0
 23edbee:	fe48 8a89 	vseleq.f32	s17, s17, s18
        float f = frexpf(fabsf(a), &e);
 23edbf2:	eeb0 0ae8 	vabs.f32	s0, s17
 23edbf6:	a801      	add	r0, sp, #4
 23edbf8:	f00b fe96 	bl	23f9928 <frexpf>
        y += -4.11852516267426f;
 23edbfc:	eddf 7a24 	vldr	s15, [pc, #144]	; 23edc90 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x100>
        y *= f;
        y += 6.02197014179219f;
        y *= f;
        y += -3.13396450166353f;
 23edc00:	ed9f 7a24 	vldr	s14, [pc, #144]	; 23edc94 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x104>
        y += -4.11852516267426f;
 23edc04:	eee0 7a2a 	vfma.f32	s15, s0, s21
        y += 6.02197014179219f;
 23edc08:	eddf 6a23 	vldr	s13, [pc, #140]	; 23edc98 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x108>
 23edc0c:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
 23edc10:	eef0 7a47 	vmov.f32	s15, s14
        y += e;
 23edc14:	ed9d 7a01 	vldr	s14, [sp, #4]
        y += -3.13396450166353f;
 23edc18:	eee0 7a26 	vfma.f32	s15, s0, s13
        y += e;
 23edc1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 23edc20:	ee37 7a27 	vadd.f32	s14, s14, s15
     * @param a Input number
     * @returns Log10 value of a
     */
    __attribute__((always_inline)) static inline float log10(float a)
    {
        return numpy::log2(a) * 0.3010299956639812f;
 23edc24:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23edc9c <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x10c>
            }
            f = numpy::log10(f);
            f *= 10.0f; // scale by 10
            f += noise;
 23edc28:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 23edc2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 23edc30:	eef0 7a48 	vmov.f32	s15, s16
 23edc34:	eee7 7a26 	vfma.f32	s15, s14, s13
            # clip to 2**8
            mfe = np.clip(mfe, 0, 255)
            mfe = np.float32(mfe / 2**8)
            */

            f = roundf(f*256)/256;
 23edc38:	ed9f 7a19 	vldr	s14, [pc, #100]	; 23edca0 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x110>
            f *= noise_scale;
 23edc3c:	ee6a 7a27 	vmul.f32	s15, s20, s15
            f = roundf(f*256)/256;
 23edc40:	ee67 7a87 	vmul.f32	s15, s15, s14
 23edc44:	ed9f 7a17 	vldr	s14, [pc, #92]	; 23edca4 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x114>
 23edc48:	fef8 7a67 	vrinta.f32	s15, s15
 23edc4c:	ee67 7a87 	vmul.f32	s15, s15, s14

            if (f < 0.0f) f = 0.0f;
 23edc50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23edc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc58:	d40b      	bmi.n	23edc72 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xe2>
            else if (f > 1.0f) f = 1.0f;
 23edc5a:	eef4 7a69 	vcmp.f32	s15, s19
 23edc5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23edc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc66:	fe77 7a27 	vselgt.f32	s15, s14, s15
            features_matrix->buffer[ix] = f;
 23edc6a:	edc6 7a00 	vstr	s15, [r6]
        for (size_t ix = 0; ix < features_matrix->rows * features_matrix->cols; ix++) {
 23edc6e:	3501      	adds	r5, #1
 23edc70:	e7aa      	b.n	23edbc8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x38>
            if (f < 0.0f) f = 0.0f;
 23edc72:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23edca8 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0x118>
 23edc76:	e7f8      	b.n	23edc6a <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi+0xda>
        }

        return EIDSP_OK;
    }
 23edc78:	2000      	movs	r0, #0
 23edc7a:	b002      	add	sp, #8
 23edc7c:	ecbd 8b06 	vpop	{d8-d10}
 23edc80:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 23edc84:	f3af 8000 	nop.w
 23edc88:	0da24260 	.word	0x0da24260
 23edc8c:	3f9da1a8 	.word	0x3f9da1a8
 23edc90:	c083caf5 	.word	0xc083caf5
 23edc94:	c04892e0 	.word	0xc04892e0
 23edc98:	40c0b3fb 	.word	0x40c0b3fb
 23edc9c:	3e9a209b 	.word	0x3e9a209b
 23edca0:	43800000 	.word	0x43800000
 23edca4:	3b800000 	.word	0x3b800000
 23edca8:	00000000 	.word	0x00000000
 23edcac:	feebc2a0 	.word	0xfeebc2a0
 23edcb0:	39b4484b 	.word	0x39b4484b

023edcb4 <_ZL32microphone_audio_signal_get_datajjPf>:

/**
 * Get raw audio signal data
 */
static int microphone_audio_signal_get_data(size_t offset, size_t length, float *out_ptr)
{
 23edcb4:	b510      	push	{r4, lr}
 23edcb6:	460c      	mov	r4, r1
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
 23edcb8:	4b04      	ldr	r3, [pc, #16]	; (23edccc <_ZL32microphone_audio_signal_get_datajjPf+0x18>)
{
 23edcba:	4611      	mov	r1, r2
    numpy::int16_to_float(&inference.buffer[offset], out_ptr, length);
 23edcbc:	681b      	ldr	r3, [r3, #0]
        arm_q15_to_float((q15_t *)input, output, length);
 23edcbe:	4622      	mov	r2, r4
 23edcc0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 23edcc4:	f7fe fc9e 	bl	23ec604 <arm_q15_to_float>

    return 0;
}
 23edcc8:	2000      	movs	r0, #0
 23edcca:	bd10      	pop	{r4, pc}
 23edccc:	1007a5c8 	.word	0x1007a5c8

023edcd0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 23edcd0:	b508      	push	{r3, lr}
	assert(ptr);
 23edcd2:	b928      	cbnz	r0, 23edce0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
 23edcd4:	215a      	movs	r1, #90	; 0x5a
 23edcd6:	4b06      	ldr	r3, [pc, #24]	; (23edcf0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
 23edcd8:	4a06      	ldr	r2, [pc, #24]	; (23edcf4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
 23edcda:	4807      	ldr	r0, [pc, #28]	; (23edcf8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
 23edcdc:	f006 fda8 	bl	23f4830 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 23edce0:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
 23edce4:	1ac0      	subs	r0, r0, r3
}
 23edce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
 23edcea:	f003 ba10 	b.w	23f110e <_Z7ei_freePv>
 23edcee:	bf00      	nop
 23edcf0:	023ff25c 	.word	0x023ff25c
 23edcf4:	023fc056 	.word	0x023fc056
 23edcf8:	023fc07f 	.word	0x023fc07f

023edcfc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
 23edcfc:	1e43      	subs	r3, r0, #1
 23edcfe:	4203      	tst	r3, r0
{
 23edd00:	b510      	push	{r4, lr}
 23edd02:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
 23edd04:	d005      	beq.n	23edd12 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
 23edd06:	2137      	movs	r1, #55	; 0x37
 23edd08:	4b0c      	ldr	r3, [pc, #48]	; (23edd3c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
 23edd0a:	4a0d      	ldr	r2, [pc, #52]	; (23edd40 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
 23edd0c:	480d      	ldr	r0, [pc, #52]	; (23edd44 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
 23edd0e:	f006 fd8f 	bl	23f4830 <__assert_func>
	if(align && size)
 23edd12:	b910      	cbnz	r0, 23edd1a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
 23edd14:	2400      	movs	r4, #0
}
 23edd16:	4620      	mov	r0, r4
 23edd18:	bd10      	pop	{r4, pc}
	if(align && size)
 23edd1a:	2900      	cmp	r1, #0
 23edd1c:	d0fa      	beq.n	23edd14 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
 23edd1e:	1c48      	adds	r0, r1, #1
 23edd20:	4420      	add	r0, r4
 23edd22:	2101      	movs	r1, #1
 23edd24:	f003 f9f1 	bl	23f110a <_Z9ei_callocjj>
		if(p)
 23edd28:	2800      	cmp	r0, #0
 23edd2a:	d0f3      	beq.n	23edd14 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 23edd2c:	1c63      	adds	r3, r4, #1
 23edd2e:	4403      	add	r3, r0
 23edd30:	4264      	negs	r4, r4
 23edd32:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 23edd34:	1a20      	subs	r0, r4, r0
 23edd36:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
 23edd3a:	e7ec      	b.n	23edd16 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
 23edd3c:	023fc0ef 	.word	0x023fc0ef
 23edd40:	023fc10a 	.word	0x023fc10a
 23edd44:	023fc07f 	.word	0x023fc07f

023edd48 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
    static int scale(matrix_t *matrix, float scale) {
 23edd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 23edd4a:	6842      	ldr	r2, [r0, #4]
 23edd4c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23edd50:	d217      	bcs.n	23edd82 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
 23edd52:	6883      	ldr	r3, [r0, #8]
 23edd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 23edd58:	d213      	bcs.n	23edd82 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23edd5a:	6801      	ldr	r1, [r0, #0]
 23edd5c:	b292      	uxth	r2, r2
 23edd5e:	b29b      	uxth	r3, r3
 23edd60:	9101      	str	r1, [sp, #4]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23edd62:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23edd64:	4668      	mov	r0, sp
 23edd66:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23edd68:	f8ad 2000 	strh.w	r2, [sp]
 23edd6c:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23edd70:	f8ad 2008 	strh.w	r2, [sp, #8]
 23edd74:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23edd78:	f7fe fc56 	bl	23ec628 <arm_mat_scale_f32>
    }
 23edd7c:	b005      	add	sp, #20
 23edd7e:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
 23edd82:	4801      	ldr	r0, [pc, #4]	; (23edd88 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
 23edd84:	e7fa      	b.n	23edd7c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
 23edd86:	bf00      	nop
 23edd88:	fffffc0c 	.word	0xfffffc0c

023edd8c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
 23edd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23edd90:	4688      	mov	r8, r1
 23edd92:	4617      	mov	r7, r2
 23edd94:	461e      	mov	r6, r3
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23edd96:	6905      	ldr	r5, [r0, #16]
static EI_IMPULSE_ERROR inference_tflite_setup(
 23edd98:	4604      	mov	r4, r0

    *ctx_start_us = ei_read_timer_us();
 23edd9a:	f003 f981 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23edd9e:	e9c8 0100 	strd	r0, r1, [r8]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 23edda2:	4814      	ldr	r0, [pc, #80]	; (23eddf4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x68>)
 23edda4:	686b      	ldr	r3, [r5, #4]
 23edda6:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
 23edda8:	4601      	mov	r1, r0
 23eddaa:	b130      	cbz	r0, 23eddba <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 23eddac:	4812      	ldr	r0, [pc, #72]	; (23eddf8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x6c>)
 23eddae:	f003 f97d 	bl	23f10ac <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 23eddb2:	f06f 0005 	mvn.w	r0, #5
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
}
 23eddb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = graph_config->model_input(0, input);
 23eddba:	4639      	mov	r1, r7
 23eddbc:	692b      	ldr	r3, [r5, #16]
 23eddbe:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23eddc0:	b9a8      	cbnz	r0, 23eddee <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    status = graph_config->model_output(block_config->output_data_tensor, output);
 23eddc2:	4631      	mov	r1, r6
 23eddc4:	696b      	ldr	r3, [r5, #20]
 23eddc6:	7aa0      	ldrb	r0, [r4, #10]
 23eddc8:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23eddca:	b980      	cbnz	r0, 23eddee <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 23eddcc:	f994 3009 	ldrsb.w	r3, [r4, #9]
 23eddd0:	2b01      	cmp	r3, #1
 23eddd2:	d001      	beq.n	23eddd8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x4c>
    return EI_IMPULSE_OK;
 23eddd4:	2000      	movs	r0, #0
 23eddd6:	e7ee      	b.n	23eddb6 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2a>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 23eddd8:	696b      	ldr	r3, [r5, #20]
 23eddda:	9907      	ldr	r1, [sp, #28]
 23edddc:	7b20      	ldrb	r0, [r4, #12]
 23eddde:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23edde0:	b928      	cbnz	r0, 23eddee <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x62>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 23edde2:	696b      	ldr	r3, [r5, #20]
 23edde4:	9906      	ldr	r1, [sp, #24]
 23edde6:	7ae0      	ldrb	r0, [r4, #11]
 23edde8:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23eddea:	2800      	cmp	r0, #0
 23eddec:	d0f2      	beq.n	23eddd4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x48>
            return EI_IMPULSE_TFLITE_ERROR;
 23eddee:	f06f 0002 	mvn.w	r0, #2
 23eddf2:	e7e0      	b.n	23eddb6 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0+0x2a>
 23eddf4:	023edcfd 	.word	0x023edcfd
 23eddf8:	023fc13f 	.word	0x023fc13f

023eddfc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>:
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23eddfc:	ee07 1a90 	vmov	s15, r1
 23ede00:	eef8 7a67 	vcvt.f32.u32	s15, s15
        if (version == 1) {
 23ede04:	2a01      	cmp	r2, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23ede06:	ee20 0a27 	vmul.f32	s0, s0, s15
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 23ede0a:	ee60 0aa7 	vmul.f32	s1, s1, s15
    static int32_t calculate_no_of_stack_frames(
 23ede0e:	b507      	push	{r0, r1, r2, lr}
        if (version == 1) {
 23ede10:	d118      	bne.n	23ede44 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x48>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 23ede12:	feb8 0a40 	vrinta.f32	s0, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23ede16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23ede1a:	feb8 0a60 	vrinta.f32	s0, s1
 23ede1e:	ee17 3a90 	vmov	r3, s15
                floor(static_cast<float>(signal_size - length) / frame_stride));
 23ede22:	1ac0      	subs	r0, r0, r3
 23ede24:	ee07 0a90 	vmov	s15, r0
 23ede28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ede2c:	ee87 7a80 	vdiv.f32	s14, s15, s0
  { return __builtin_floorf(__x); }
 23ede30:	fefb 7a47 	vrintm.f32	s15, s14
            numframes = static_cast<int>(
 23ede34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ede38:	edcd 7a01 	vstr	s15, [sp, #4]
        return numframes;
 23ede3c:	9801      	ldr	r0, [sp, #4]
    }
 23ede3e:	b003      	add	sp, #12
 23ede40:	f85d fb04 	ldr.w	pc, [sp], #4
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23ede44:	f7ff fe8c 	bl	23edb60 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 23ede48:	eeb0 6a40 	vmov.f32	s12, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23ede4c:	eeb0 0a60 	vmov.f32	s0, s1
 23ede50:	f7ff fe86 	bl	23edb60 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23ede54:	eebd 6ac6 	vcvt.s32.f32	s12, s12
            length = (frame_sample_length - (int)frame_stride);
 23ede58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23ede5c:	ee16 2a10 	vmov	r2, s12
 23ede60:	ee17 3a90 	vmov	r3, s15
 23ede64:	1ad3      	subs	r3, r2, r3
 23ede66:	e7dc      	b.n	23ede22 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0+0x26>

023ede68 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
 23ede68:	2a01      	cmp	r2, #1
 23ede6a:	d102      	bne.n	23ede72 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23ede6c:	6001      	str	r1, [r0, #0]
      }
 23ede6e:	2000      	movs	r0, #0
 23ede70:	4770      	bx	lr
	  switch (__op)
 23ede72:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23ede74:	bf04      	itt	eq
 23ede76:	680b      	ldreq	r3, [r1, #0]
 23ede78:	6003      	streq	r3, [r0, #0]
	      break;
 23ede7a:	e7f8      	b.n	23ede6e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023ede7c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23ede7c:	2a01      	cmp	r2, #1
 23ede7e:	d102      	bne.n	23ede86 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23ede80:	6001      	str	r1, [r0, #0]
      }
 23ede82:	2000      	movs	r0, #0
 23ede84:	4770      	bx	lr
	  switch (__op)
 23ede86:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23ede88:	bf04      	itt	eq
 23ede8a:	680b      	ldreq	r3, [r1, #0]
 23ede8c:	6003      	streq	r3, [r0, #0]
	      break;
 23ede8e:	e7f8      	b.n	23ede82 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023ede90 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23ede90:	b430      	push	{r4, r5}
 23ede92:	460d      	mov	r5, r1
 23ede94:	4611      	mov	r1, r2
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23ede96:	6804      	ldr	r4, [r0, #0]
 23ede98:	681a      	ldr	r2, [r3, #0]
 23ede9a:	6828      	ldr	r0, [r5, #0]
 23ede9c:	4623      	mov	r3, r4
      }
 23ede9e:	bc30      	pop	{r4, r5}
 23edea0:	6809      	ldr	r1, [r1, #0]
 23edea2:	4718      	bx	r3

023edea4 <_ZNSt17_Function_handlerIFvPvjEZL27microphone_inference_recordvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23edea4:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23edea6:	bf08      	it	eq
 23edea8:	6001      	streq	r1, [r0, #0]
      }
 23edeaa:	2000      	movs	r0, #0
 23edeac:	4770      	bx	lr

023edeae <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23edeae:	2a01      	cmp	r2, #1
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23edeb0:	bf08      	it	eq
 23edeb2:	6001      	streq	r1, [r0, #0]
      }
 23edeb4:	2000      	movs	r0, #0
 23edeb6:	4770      	bx	lr

023edeb8 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23edeb8:	b510      	push	{r4, lr}
 23edeba:	680c      	ldr	r4, [r1, #0]
        sample_length = Microphone_PDM::instance().getBufferSizeInBytes() / 2;
 23edebc:	f005 ff92 	bl	23f3de4 <_ZN14Microphone_PDM8instanceEv>
	 * 
	 * You can use this with copySamples() to know how big of a buffer you need if you are allocating a
	 * buffer in bytes instead of samples.
	 */
	size_t getBufferSizeInBytes() const {
		return getSampleSizeInBytes() * getNumberOfSamples();
 23edec0:	f005 ffa0 	bl	23f3e04 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>
 23edec4:	4b03      	ldr	r3, [pc, #12]	; (23eded4 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x1c>)
 23edec6:	0200      	lsls	r0, r0, #8
 23edec8:	0840      	lsrs	r0, r0, #1
 23edeca:	6018      	str	r0, [r3, #0]
        sptr = (int16_t *)pSamples;
 23edecc:	4b02      	ldr	r3, [pc, #8]	; (23eded8 <_ZNSt17_Function_handlerIFvPvjEZL33pdm_data_ready_inference_callbackvEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x20>)
 23edece:	601c      	str	r4, [r3, #0]
      }
 23eded0:	bd10      	pop	{r4, pc}
 23eded2:	bf00      	nop
 23eded4:	1007a5c0 	.word	0x1007a5c0
 23eded8:	1007a5c4 	.word	0x1007a5c4

023ededc <_ZN2ei5numpy8linspaceEffmPf.isra.0>:
    static int linspace(float start, float stop, uint32_t number, float *out)
 23ededc:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
 23edede:	b120      	cbz	r0, 23edeea <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
 23edee0:	b119      	cbz	r1, 23edeea <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
        if (number == 1) {
 23edee2:	2801      	cmp	r0, #1
 23edee4:	d102      	bne.n	23edeec <_ZN2ei5numpy8linspaceEffmPf.isra.0+0x10>
            out[0] = start;
 23edee6:	ed81 0a00 	vstr	s0, [r1]
    }
 23edeea:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
 23edeec:	1e42      	subs	r2, r0, #1
 23edeee:	ee07 2a10 	vmov	s14, r2
 23edef2:	ee70 7ac0 	vsub.f32	s15, s1, s0
 23edef6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23edefa:	460c      	mov	r4, r1
 23edefc:	eec7 6a87 	vdiv.f32	s13, s15, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23edf00:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
 23edf02:	ee07 3a90 	vmov	s15, r3
 23edf06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23edf0a:	eef0 7a40 	vmov.f32	s15, s0
 23edf0e:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23edf12:	3301      	adds	r3, #1
 23edf14:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
 23edf16:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23edf1a:	d8f2      	bhi.n	23edf02 <_ZN2ei5numpy8linspaceEffmPf.isra.0+0x26>
        out[number - 1] = stop;
 23edf1c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23edf20:	ed41 0a01 	vstr	s1, [r1, #-4]
        return EIDSP_OK;
 23edf24:	e7e1      	b.n	23edeea <_ZN2ei5numpy8linspaceEffmPf.isra.0+0xe>
	...

023edf28 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23edf28:	b510      	push	{r4, lr}
 23edf2a:	4604      	mov	r4, r0
 23edf2c:	4b09      	ldr	r3, [pc, #36]	; (23edf54 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23edf2e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23edf30:	f007 fb34 	bl	23f559c <_ZN5spark10LogManager8instanceEv>
 23edf34:	4621      	mov	r1, r4
 23edf36:	f007 fd7d 	bl	23f5a34 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23edf3a:	f007 f83d 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23edf3e:	f007 f82d 	bl	23f4f9c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23edf42:	4620      	mov	r0, r4
 23edf44:	4b04      	ldr	r3, [pc, #16]	; (23edf58 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23edf46:	f840 3b04 	str.w	r3, [r0], #4
 23edf4a:	f007 fc0f 	bl	23f576c <_ZN5spark6detail9LogFilterD1Ev>
    }
 23edf4e:	4620      	mov	r0, r4
 23edf50:	bd10      	pop	{r4, pc}
 23edf52:	bf00      	nop
 23edf54:	023fc91c 	.word	0x023fc91c
 23edf58:	023fc904 	.word	0x023fc904

023edf5c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23edf5c:	b510      	push	{r4, lr}
 23edf5e:	4604      	mov	r4, r0
    }
 23edf60:	f7ff ffe2 	bl	23edf28 <_ZN5spark16SerialLogHandlerD1Ev>
 23edf64:	4620      	mov	r0, r4
 23edf66:	2124      	movs	r1, #36	; 0x24
 23edf68:	f7fc fae9 	bl	23ea53e <_ZdlPvj>
 23edf6c:	4620      	mov	r0, r4
 23edf6e:	bd10      	pop	{r4, pc}

023edf70 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23edf70:	b510      	push	{r4, lr}
      if (_M_manager)
 23edf72:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23edf74:	4604      	mov	r4, r0
      if (_M_manager)
 23edf76:	b113      	cbz	r3, 23edf7e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23edf78:	2203      	movs	r2, #3
 23edf7a:	4601      	mov	r1, r0
 23edf7c:	4798      	blx	r3
    }
 23edf7e:	4620      	mov	r0, r4
 23edf80:	bd10      	pop	{r4, pc}

023edf82 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 23edf82:	b570      	push	{r4, r5, r6, lr}
 23edf84:	4604      	mov	r4, r0
 23edf86:	460e      	mov	r6, r1
 23edf88:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23edf8a:	b133      	cbz	r3, 23edf9a <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
 23edf8c:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
 23edf8e:	2300      	movs	r3, #0
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 23edf90:	4620      	mov	r0, r4
        cols = n_cols;
 23edf92:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
 23edf96:	7323      	strb	r3, [r4, #12]
    }
 23edf98:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23edf9a:	fb02 f001 	mul.w	r0, r2, r1
 23edf9e:	2101      	movs	r1, #1
 23edfa0:	0080      	lsls	r0, r0, #2
 23edfa2:	f003 f8b2 	bl	23f110a <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23edfa6:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23edfa8:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
 23edfaa:	e7f1      	b.n	23edf90 <_ZN2ei9ei_matrixC1EmmPf+0xe>

023edfac <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 23edfac:	b510      	push	{r4, lr}
 23edfae:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
 23edfb0:	6800      	ldr	r0, [r0, #0]
 23edfb2:	b118      	cbz	r0, 23edfbc <_ZN2ei9ei_matrixD1Ev+0x10>
 23edfb4:	7b23      	ldrb	r3, [r4, #12]
 23edfb6:	b10b      	cbz	r3, 23edfbc <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
 23edfb8:	f003 f8a9 	bl	23f110e <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 23edfbc:	4620      	mov	r0, r4
 23edfbe:	bd10      	pop	{r4, pc}

023edfc0 <_ZN2ei5numpy4rollEPfji>:
    static int roll(float *input_array, size_t input_array_size, int shift) {
 23edfc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        if (shift < 0) {
 23edfc2:	1e14      	subs	r4, r2, #0
            shift = input_array_size + shift;
 23edfc4:	bfb8      	it	lt
 23edfc6:	1864      	addlt	r4, r4, r1
    static int roll(float *input_array, size_t input_array_size, int shift) {
 23edfc8:	4606      	mov	r6, r0
 23edfca:	460d      	mov	r5, r1
        if (shift == 0) {
 23edfcc:	b1ec      	cbz	r4, 23ee00a <_ZN2ei5numpy4rollEPfji+0x4a>
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23edfce:	2300      	movs	r3, #0
 23edfd0:	4622      	mov	r2, r4
 23edfd2:	2101      	movs	r1, #1
 23edfd4:	4668      	mov	r0, sp
 23edfd6:	f7ff ffd4 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23edfda:	9800      	ldr	r0, [sp, #0]
 23edfdc:	b1c0      	cbz	r0, 23ee010 <_ZN2ei5numpy4rollEPfji+0x50>
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 23edfde:	1b29      	subs	r1, r5, r4
 23edfe0:	00a4      	lsls	r4, r4, #2
 23edfe2:	4622      	mov	r2, r4
 23edfe4:	008d      	lsls	r5, r1, #2
 23edfe6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 23edfea:	f00d f844 	bl	23fb076 <memcpy>
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 23edfee:	462a      	mov	r2, r5
 23edff0:	4631      	mov	r1, r6
 23edff2:	1930      	adds	r0, r6, r4
 23edff4:	f00d f84c 	bl	23fb090 <memmove>
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 23edff8:	4622      	mov	r2, r4
 23edffa:	4630      	mov	r0, r6
 23edffc:	9900      	ldr	r1, [sp, #0]
 23edffe:	f00d f83a 	bl	23fb076 <memcpy>
        return EIDSP_OK;
 23ee002:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23ee004:	4668      	mov	r0, sp
 23ee006:	f7ff ffd1 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
    }
 23ee00a:	4620      	mov	r0, r4
 23ee00c:	b004      	add	sp, #16
 23ee00e:	bd70      	pop	{r4, r5, r6, pc}
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 23ee010:	4c00      	ldr	r4, [pc, #0]	; (23ee014 <_ZN2ei5numpy4rollEPfji+0x54>)
 23ee012:	e7f7      	b.n	23ee004 <_ZN2ei5numpy4rollEPfji+0x44>
 23ee014:	fffffc16 	.word	0xfffffc16

023ee018 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23ee018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee01c:	4617      	mov	r7, r2
 23ee01e:	4698      	mov	r8, r3
        if (output->cols != input->cols) {
 23ee020:	688a      	ldr	r2, [r1, #8]
 23ee022:	6883      	ldr	r3, [r0, #8]
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23ee024:	4604      	mov	r4, r0
        if (output->cols != input->cols) {
 23ee026:	429a      	cmp	r2, r3
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 23ee028:	460e      	mov	r6, r1
        if (output->cols != input->cols) {
 23ee02a:	d16a      	bne.n	23ee102 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xea>
        if (output->rows != input->rows + pad_before + pad_after) {
 23ee02c:	6842      	ldr	r2, [r0, #4]
 23ee02e:	6849      	ldr	r1, [r1, #4]
 23ee030:	eb08 0307 	add.w	r3, r8, r7
 23ee034:	4413      	add	r3, r2
 23ee036:	4299      	cmp	r1, r3
 23ee038:	d163      	bne.n	23ee102 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xea>
        if (input->rows == 0) {
 23ee03a:	2a00      	cmp	r2, #0
 23ee03c:	d064      	beq.n	23ee108 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf0>
        bool pad_before_direction_up = true;
 23ee03e:	f04f 0a01 	mov.w	sl, #1
        uint32_t pad_before_index = 0;
 23ee042:	2500      	movs	r5, #0
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23ee044:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 23ee048:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
            memcpy(output->buffer + (input->cols * ix),
 23ee04c:	6830      	ldr	r0, [r6, #0]
 23ee04e:	68a2      	ldr	r2, [r4, #8]
                input->buffer + (pad_before_index * input->cols),
 23ee050:	6821      	ldr	r1, [r4, #0]
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23ee052:	d01f      	beq.n	23ee094 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x7c>
            memcpy(output->buffer + (input->cols * ix),
 23ee054:	0092      	lsls	r2, r2, #2
 23ee056:	fb02 1105 	mla	r1, r2, r5, r1
 23ee05a:	fb02 000b 	mla	r0, r2, fp, r0
 23ee05e:	f00d f80a 	bl	23fb076 <memcpy>
            if (pad_before_index == 0 && !pad_before_direction_up) {
 23ee062:	b915      	cbnz	r5, 23ee06a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x52>
 23ee064:	f1ba 0f00 	cmp.w	sl, #0
 23ee068:	d011      	beq.n	23ee08e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x76>
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 23ee06a:	6863      	ldr	r3, [r4, #4]
 23ee06c:	3b01      	subs	r3, #1
 23ee06e:	42ab      	cmp	r3, r5
 23ee070:	d106      	bne.n	23ee080 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x68>
 23ee072:	f1ba 0f00 	cmp.w	sl, #0
 23ee076:	d100      	bne.n	23ee07a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x62>
                pad_before_index--;
 23ee078:	3d01      	subs	r5, #1
                pad_before_direction_up = false;
 23ee07a:	f04f 0a00 	mov.w	sl, #0
 23ee07e:	e003      	b.n	23ee088 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
            else if (pad_before_direction_up) {
 23ee080:	f1ba 0f00 	cmp.w	sl, #0
 23ee084:	d0f8      	beq.n	23ee078 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x60>
                pad_before_index++;
 23ee086:	3501      	adds	r5, #1
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 23ee088:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 23ee08c:	e7dc      	b.n	23ee048 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x30>
                pad_before_direction_up = true;
 23ee08e:	f04f 0a01 	mov.w	sl, #1
 23ee092:	e7f9      	b.n	23ee088 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x70>
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23ee094:	f04f 0a00 	mov.w	sl, #0
        bool pad_after_direction_up = false;
 23ee098:	46d1      	mov	r9, sl
            input->rows * input->cols * sizeof(float));
 23ee09a:	6865      	ldr	r5, [r4, #4]
        memcpy(output->buffer + (input->cols * pad_before),
 23ee09c:	fb02 f307 	mul.w	r3, r2, r7
            input->rows * input->cols * sizeof(float));
 23ee0a0:	436a      	muls	r2, r5
        memcpy(output->buffer + (input->cols * pad_before),
 23ee0a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23ee0a6:	0092      	lsls	r2, r2, #2
 23ee0a8:	f00c ffe5 	bl	23fb076 <memcpy>
        int32_t pad_after_index = input->rows - 1;
 23ee0ac:	6865      	ldr	r5, [r4, #4]
 23ee0ae:	3d01      	subs	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23ee0b0:	45d0      	cmp	r8, sl
 23ee0b2:	dd2b      	ble.n	23ee10c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf4>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 23ee0b4:	6863      	ldr	r3, [r4, #4]
 23ee0b6:	68a2      	ldr	r2, [r4, #8]
 23ee0b8:	eb0a 0007 	add.w	r0, sl, r7
 23ee0bc:	4418      	add	r0, r3
                input->buffer + (pad_after_index * input->cols),
 23ee0be:	6821      	ldr	r1, [r4, #0]
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 23ee0c0:	6833      	ldr	r3, [r6, #0]
 23ee0c2:	0092      	lsls	r2, r2, #2
 23ee0c4:	fb02 1105 	mla	r1, r2, r5, r1
 23ee0c8:	fb02 3000 	mla	r0, r2, r0, r3
 23ee0cc:	f00c ffd3 	bl	23fb076 <memcpy>
            if (pad_after_index == 0 && !pad_after_direction_up) {
 23ee0d0:	b915      	cbnz	r5, 23ee0d8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xc0>
 23ee0d2:	f1b9 0f00 	cmp.w	r9, #0
 23ee0d6:	d011      	beq.n	23ee0fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe4>
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 23ee0d8:	6863      	ldr	r3, [r4, #4]
 23ee0da:	3b01      	subs	r3, #1
 23ee0dc:	42ab      	cmp	r3, r5
 23ee0de:	d106      	bne.n	23ee0ee <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd6>
 23ee0e0:	f1b9 0f00 	cmp.w	r9, #0
 23ee0e4:	d100      	bne.n	23ee0e8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xd0>
                pad_after_index--;
 23ee0e6:	3d01      	subs	r5, #1
                pad_after_direction_up = false;
 23ee0e8:	f04f 0900 	mov.w	r9, #0
 23ee0ec:	e003      	b.n	23ee0f6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            else if (pad_after_direction_up) {
 23ee0ee:	f1b9 0f00 	cmp.w	r9, #0
 23ee0f2:	d0f8      	beq.n	23ee0e6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xce>
                pad_after_index++;
 23ee0f4:	3501      	adds	r5, #1
        for (int32_t ix = 0; ix < pad_after; ix++) {
 23ee0f6:	f10a 0a01 	add.w	sl, sl, #1
 23ee0fa:	e7d9      	b.n	23ee0b0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x98>
                pad_after_direction_up = true;
 23ee0fc:	f04f 0901 	mov.w	r9, #1
 23ee100:	e7f9      	b.n	23ee0f6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xde>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ee102:	4803      	ldr	r0, [pc, #12]	; (23ee110 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xf8>)
    }
 23ee104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 23ee108:	4802      	ldr	r0, [pc, #8]	; (23ee114 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xfc>)
 23ee10a:	e7fb      	b.n	23ee104 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
        return EIDSP_OK;
 23ee10c:	2000      	movs	r0, #0
 23ee10e:	e7f9      	b.n	23ee104 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xec>
 23ee110:	fffffc14 	.word	0xfffffc14
 23ee114:	fffffc12 	.word	0xfffffc12

023ee118 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23ee118:	2300      	movs	r3, #0
 23ee11a:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23ee11e:	434a      	muls	r2, r1
 23ee120:	429a      	cmp	r2, r3
 23ee122:	d90a      	bls.n	23ee13a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
 23ee124:	6802      	ldr	r2, [r0, #0]
 23ee126:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23ee12a:	edd2 7a00 	vldr	s15, [r2]
 23ee12e:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23ee132:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
 23ee134:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23ee138:	e7ef      	b.n	23ee11a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x2>
    }
 23ee13a:	2000      	movs	r0, #0
 23ee13c:	4770      	bx	lr
	...

023ee140 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>:
    /**
     * Normalize a matrix to 0..1. Does an in-place replacement.
     * Normalization done per row.
     * @param matrix
     */
    static int normalize(matrix_t *matrix) {
 23ee140:	b530      	push	{r4, r5, lr}
 23ee142:	ed2d 8b04 	vpush	{d8-d9}
 23ee146:	b08f      	sub	sp, #60	; 0x3c
        // Python implementation:
        //  matrix = (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))
        int r;

        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 23ee148:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23ee14c:	6803      	ldr	r3, [r0, #0]
 23ee14e:	434a      	muls	r2, r1
 23ee150:	a802      	add	r0, sp, #8
 23ee152:	2101      	movs	r1, #1
 23ee154:	f7ff ff15 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>

        matrix_t min_matrix(1, 1);
 23ee158:	2201      	movs	r2, #1
 23ee15a:	2300      	movs	r3, #0
 23ee15c:	4611      	mov	r1, r2
 23ee15e:	a806      	add	r0, sp, #24
 23ee160:	f7ff ff0f 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
        if (!min_matrix.buffer) {
 23ee164:	9b06      	ldr	r3, [sp, #24]
 23ee166:	2b00      	cmp	r3, #0
 23ee168:	d07d      	beq.n	23ee266 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x126>
        if (input_matrix->rows != output_matrix->rows) {
 23ee16a:	9a03      	ldr	r2, [sp, #12]
 23ee16c:	9b07      	ldr	r3, [sp, #28]
 23ee16e:	429a      	cmp	r2, r3
 23ee170:	d17b      	bne.n	23ee26a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        if (output_matrix->cols != 1) {
 23ee172:	9b08      	ldr	r3, [sp, #32]
 23ee174:	2b01      	cmp	r3, #1
 23ee176:	d178      	bne.n	23ee26a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee178:	2400      	movs	r4, #0
 23ee17a:	9b03      	ldr	r3, [sp, #12]
 23ee17c:	42a3      	cmp	r3, r4
 23ee17e:	d910      	bls.n	23ee1a2 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x62>
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 23ee180:	9904      	ldr	r1, [sp, #16]
 23ee182:	9802      	ldr	r0, [sp, #8]
 23ee184:	fb01 f504 	mul.w	r5, r1, r4
 23ee188:	ab0a      	add	r3, sp, #40	; 0x28
 23ee18a:	aa01      	add	r2, sp, #4
 23ee18c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 23ee190:	f7ff f921 	bl	23ed3d6 <arm_min_f32>
            output_matrix->buffer[row] = min;
 23ee194:	9b06      	ldr	r3, [sp, #24]
 23ee196:	9a01      	ldr	r2, [sp, #4]
 23ee198:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23ee19c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee19e:	3401      	adds	r4, #1
 23ee1a0:	e7eb      	b.n	23ee17a <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x3a>
        r = min(&temp_matrix, &min_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        matrix_t max_matrix(1, 1);
 23ee1a2:	2201      	movs	r2, #1
 23ee1a4:	2300      	movs	r3, #0
 23ee1a6:	4611      	mov	r1, r2
 23ee1a8:	a80a      	add	r0, sp, #40	; 0x28
 23ee1aa:	f7ff feea 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
        if (!max_matrix.buffer) {
 23ee1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ee1b0:	2b00      	cmp	r3, #0
 23ee1b2:	d054      	beq.n	23ee25e <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x11e>
        if (input_matrix->rows != output_matrix->rows) {
 23ee1b4:	9a03      	ldr	r2, [sp, #12]
 23ee1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ee1b8:	429a      	cmp	r2, r3
 23ee1ba:	d152      	bne.n	23ee262 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        if (output_matrix->cols != 1) {
 23ee1bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ee1be:	2b01      	cmp	r3, #1
 23ee1c0:	d14f      	bne.n	23ee262 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x122>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee1c2:	2400      	movs	r4, #0
 23ee1c4:	9b03      	ldr	r3, [sp, #12]
 23ee1c6:	42a3      	cmp	r3, r4
 23ee1c8:	d910      	bls.n	23ee1ec <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xac>
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 23ee1ca:	9904      	ldr	r1, [sp, #16]
 23ee1cc:	9802      	ldr	r0, [sp, #8]
 23ee1ce:	fb01 f504 	mul.w	r5, r1, r4
 23ee1d2:	466a      	mov	r2, sp
 23ee1d4:	ab01      	add	r3, sp, #4
 23ee1d6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 23ee1da:	f7ff f8e3 	bl	23ed3a4 <arm_max_f32>
            output_matrix->buffer[row] = max;
 23ee1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ee1e0:	9a00      	ldr	r2, [sp, #0]
 23ee1e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23ee1e6:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee1e8:	3401      	adds	r4, #1
 23ee1ea:	e7eb      	b.n	23ee1c4 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x84>
        r = max(&temp_matrix, &max_matrix);
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        float min_max_diff = (max_matrix.buffer[0] - min_matrix.buffer[0]);
 23ee1ec:	9b06      	ldr	r3, [sp, #24]
 23ee1ee:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 23ee1f2:	edd3 9a00 	vldr	s19, [r3]
 23ee1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ee1f8:	ed93 8a00 	vldr	s16, [r3]
 23ee1fc:	ee38 8a69 	vsub.f32	s16, s16, s19
        /* Prevent divide by 0 by setting minimum value for divider */
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 23ee200:	ee18 0a10 	vmov	r0, s16
 23ee204:	f7fb fbc8 	bl	23e9998 <__aeabi_f2d>
 23ee208:	a31b      	add	r3, pc, #108	; (adr r3, 23ee278 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x138>)
 23ee20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ee20e:	f7fb fe8d 	bl	23e9f2c <__aeabi_dcmplt>
 23ee212:	bb08      	cbnz	r0, 23ee258 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x118>
 23ee214:	eec9 8a08 	vdiv.f32	s17, s18, s16

        r = subtract(&temp_matrix, min_matrix.buffer[0]);
 23ee218:	eeb0 0a69 	vmov.f32	s0, s19
 23ee21c:	a802      	add	r0, sp, #8
 23ee21e:	f7ff ff7b 	bl	23ee118 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
        if (r != EIDSP_OK) {
 23ee222:	4604      	mov	r4, r0
 23ee224:	b950      	cbnz	r0, 23ee23c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
        if (scale == 1.0f) return EIDSP_OK;
 23ee226:	eef4 8a49 	vcmp.f32	s17, s18
 23ee22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee22e:	d005      	beq.n	23ee23c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
 23ee230:	eeb0 0a68 	vmov.f32	s0, s17
 23ee234:	a802      	add	r0, sp, #8
 23ee236:	f7ff fd87 	bl	23edd48 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
 23ee23a:	4604      	mov	r4, r0
        matrix_t max_matrix(1, 1);
 23ee23c:	a80a      	add	r0, sp, #40	; 0x28
 23ee23e:	f7ff feb5 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        matrix_t min_matrix(1, 1);
 23ee242:	a806      	add	r0, sp, #24
 23ee244:	f7ff feb2 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        matrix_t temp_matrix(1, matrix->rows * matrix->cols, matrix->buffer);
 23ee248:	a802      	add	r0, sp, #8
 23ee24a:	f7ff feaf 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        if (r != EIDSP_OK) {
            EIDSP_ERR(r);
        }

        return EIDSP_OK;
    }
 23ee24e:	4620      	mov	r0, r4
 23ee250:	b00f      	add	sp, #60	; 0x3c
 23ee252:	ecbd 8b04 	vpop	{d8-d9}
 23ee256:	bd30      	pop	{r4, r5, pc}
        float row_scale = min_max_diff < 0.001 ? 1.0f : 1.0f / min_max_diff;
 23ee258:	eef0 8a49 	vmov.f32	s17, s18
 23ee25c:	e7dc      	b.n	23ee218 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xd8>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ee25e:	4c04      	ldr	r4, [pc, #16]	; (23ee270 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 23ee260:	e7ec      	b.n	23ee23c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ee262:	4c04      	ldr	r4, [pc, #16]	; (23ee274 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
 23ee264:	e7ea      	b.n	23ee23c <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0xfc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ee266:	4c02      	ldr	r4, [pc, #8]	; (23ee270 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x130>)
 23ee268:	e7eb      	b.n	23ee242 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ee26a:	4c02      	ldr	r4, [pc, #8]	; (23ee274 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x134>)
 23ee26c:	e7e9      	b.n	23ee242 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE+0x102>
 23ee26e:	bf00      	nop
 23ee270:	fffffc16 	.word	0xfffffc16
 23ee274:	fffffc14 	.word	0xfffffc14
 23ee278:	d2f1a9fc 	.word	0xd2f1a9fc
 23ee27c:	3f50624d 	.word	0x3f50624d

023ee280 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23ee280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee284:	ed2d 8b02 	vpush	{d8}
 23ee288:	4607      	mov	r7, r0
 23ee28a:	b089      	sub	sp, #36	; 0x24
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23ee28c:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23ee28e:	460c      	mov	r4, r1
 23ee290:	4690      	mov	r8, r2
 23ee292:	461e      	mov	r6, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23ee294:	f002 ff37 	bl	23f1106 <_Z9ei_mallocj>
        if (!fft_output) {
 23ee298:	4605      	mov	r5, r0
 23ee29a:	b160      	cbz	r0, 23ee2b6 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 23ee29c:	ab07      	add	r3, sp, #28
 23ee29e:	9300      	str	r3, [sp, #0]
 23ee2a0:	2300      	movs	r3, #0
 23ee2a2:	4640      	mov	r0, r8
 23ee2a4:	461a      	mov	r2, r3
 23ee2a6:	4619      	mov	r1, r3
 23ee2a8:	f005 fbee 	bl	23f3a88 <kiss_fftr_alloc>
        if (!cfg) {
 23ee2ac:	4682      	mov	sl, r0
 23ee2ae:	b920      	cbnz	r0, 23ee2ba <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23ee2b0:	4628      	mov	r0, r5
 23ee2b2:	f002 ff2c 	bl	23f110e <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ee2b6:	4828      	ldr	r0, [pc, #160]	; (23ee358 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>)
 23ee2b8:	e048      	b.n	23ee34c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xcc>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 23ee2ba:	46ab      	mov	fp, r5
 23ee2bc:	ed9f 8a27 	vldr	s16, [pc, #156]	; 23ee35c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xdc>
 23ee2c0:	462a      	mov	r2, r5
 23ee2c2:	4639      	mov	r1, r7
 23ee2c4:	f005 fcb8 	bl	23f3c38 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23ee2c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 23ee2cc:	9303      	str	r3, [sp, #12]
 23ee2ce:	9b03      	ldr	r3, [sp, #12]
 23ee2d0:	429c      	cmp	r4, r3
 23ee2d2:	d034      	beq.n	23ee33e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xbe>
      return pow(__type(__x), __type(__y));
 23ee2d4:	f8db 0000 	ldr.w	r0, [fp]
 23ee2d8:	f7fb fb5e 	bl	23e9998 <__aeabi_f2d>
 23ee2dc:	4602      	mov	r2, r0
 23ee2de:	460b      	mov	r3, r1
 23ee2e0:	f8db 0004 	ldr.w	r0, [fp, #4]
 23ee2e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23ee2e8:	f7fb fb56 	bl	23e9998 <__aeabi_f2d>
 23ee2ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23ee2f0:	4680      	mov	r8, r0
 23ee2f2:	4689      	mov	r9, r1
 23ee2f4:	4610      	mov	r0, r2
 23ee2f6:	4619      	mov	r1, r3
 23ee2f8:	f7fb fba6 	bl	23e9a48 <__aeabi_dmul>
 23ee2fc:	4642      	mov	r2, r8
 23ee2fe:	4606      	mov	r6, r0
 23ee300:	460f      	mov	r7, r1
 23ee302:	464b      	mov	r3, r9
 23ee304:	4640      	mov	r0, r8
 23ee306:	4649      	mov	r1, r9
 23ee308:	f7fb fb9e 	bl	23e9a48 <__aeabi_dmul>
 23ee30c:	4602      	mov	r2, r0
 23ee30e:	460b      	mov	r3, r1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 23ee310:	4630      	mov	r0, r6
 23ee312:	4639      	mov	r1, r7
 23ee314:	f7fb f9e2 	bl	23e96dc <__adddf3>
 23ee318:	f7fb fe8e 	bl	23ea038 <__aeabi_d2f>
 23ee31c:	ee00 0a10 	vmov	s0, r0
    if (in >= 0.0f)
 23ee320:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ee324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee328:	db06      	blt.n	23ee338 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xb8>
      *pOut = sqrtf(in);
 23ee32a:	f00b fba3 	bl	23f9a74 <sqrtf>
 23ee32e:	eca4 0a01 	vstmia	r4!, {s0}
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23ee332:	f10b 0b08 	add.w	fp, fp, #8
 23ee336:	e7ca      	b.n	23ee2ce <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4e>
      *pOut = 0.0f;
 23ee338:	eeb0 0a48 	vmov.f32	s0, s16
 23ee33c:	e7f7      	b.n	23ee32e <_ZN2ei5numpy13software_rfftEPfS1_jj+0xae>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 23ee33e:	4650      	mov	r0, sl
 23ee340:	f002 fee5 	bl	23f110e <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23ee344:	4628      	mov	r0, r5
 23ee346:	f002 fee2 	bl	23f110e <_Z7ei_freePv>

        return EIDSP_OK;
 23ee34a:	2000      	movs	r0, #0
    }
 23ee34c:	b009      	add	sp, #36	; 0x24
 23ee34e:	ecbd 8b02 	vpop	{d8}
 23ee352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ee356:	bf00      	nop
 23ee358:	fffffc16 	.word	0xfffffc16
 23ee35c:	00000000 	.word	0x00000000

023ee360 <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23ee360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ee364:	ed2d 8b02 	vpush	{d8}
 23ee368:	b091      	sub	sp, #68	; 0x44
 23ee36a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 23ee36c:	4680      	mov	r8, r0
        size_t n_fft_out_features = (n_fft / 2) + 1;
 23ee36e:	0867      	lsrs	r7, r4, #1
 23ee370:	3701      	adds	r7, #1
        if (output_size != n_fft_out_features) {
 23ee372:	429f      	cmp	r7, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23ee374:	460e      	mov	r6, r1
 23ee376:	4615      	mov	r5, r2
        if (output_size != n_fft_out_features) {
 23ee378:	f040 8081 	bne.w	23ee47e <_ZN2ei5numpy4rfftEPKfjPfjj+0x11e>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23ee37c:	2300      	movs	r3, #0
 23ee37e:	4622      	mov	r2, r4
 23ee380:	2101      	movs	r1, #1
 23ee382:	a802      	add	r0, sp, #8
 23ee384:	f7ff fdfd 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee388:	9802      	ldr	r0, [sp, #8]
 23ee38a:	2800      	cmp	r0, #0
 23ee38c:	d04e      	beq.n	23ee42c <_ZN2ei5numpy4rfftEPKfjPfjj+0xcc>
 23ee38e:	42a6      	cmp	r6, r4
 23ee390:	bf28      	it	cs
 23ee392:	4626      	movcs	r6, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 23ee394:	ea4f 0986 	mov.w	r9, r6, lsl #2
 23ee398:	464a      	mov	r2, r9
 23ee39a:	4641      	mov	r1, r8
 23ee39c:	f00c fe6b 	bl	23fb076 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 23ee3a0:	9802      	ldr	r0, [sp, #8]
 23ee3a2:	1ba2      	subs	r2, r4, r6
 23ee3a4:	2100      	movs	r1, #0
 23ee3a6:	0092      	lsls	r2, r2, #2
 23ee3a8:	4448      	add	r0, r9
 23ee3aa:	f00c fe8b 	bl	23fb0c4 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 23ee3ae:	2c20      	cmp	r4, #32
 23ee3b0:	d063      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23ee3b2:	2c40      	cmp	r4, #64	; 0x40
 23ee3b4:	d061      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23ee3b6:	2c80      	cmp	r4, #128	; 0x80
 23ee3b8:	d05f      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23ee3ba:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 23ee3be:	d01b      	beq.n	23ee3f8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x98>
 23ee3c0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 23ee3c4:	d059      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 23ee3c6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 23ee3ca:	d056      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23ee3cc:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 23ee3d0:	d053      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 23ee3d2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 23ee3d6:	d050      	beq.n	23ee47a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 23ee3d8:	4622      	mov	r2, r4
 23ee3da:	463b      	mov	r3, r7
 23ee3dc:	4629      	mov	r1, r5
 23ee3de:	9802      	ldr	r0, [sp, #8]
 23ee3e0:	f7ff ff4e 	bl	23ee280 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 23ee3e4:	4604      	mov	r4, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23ee3e6:	a802      	add	r0, sp, #8
 23ee3e8:	f7ff fde0 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
    }
 23ee3ec:	4620      	mov	r0, r4
 23ee3ee:	b011      	add	sp, #68	; 0x44
 23ee3f0:	ecbd 8b02 	vpop	{d8}
 23ee3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_256 == 1
            case 256: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
                S->fftLen = 128U;
 23ee3f8:	2380      	movs	r3, #128	; 0x80
 23ee3fa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
                S->pTwiddle = NULL;
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23ee3fe:	4b21      	ldr	r3, [pc, #132]	; (23ee484 <_ZN2ei5numpy4rfftEPKfjPfjj+0x124>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23ee400:	2101      	movs	r1, #1
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23ee402:	899a      	ldrh	r2, [r3, #12]
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23ee404:	a806      	add	r0, sp, #24
                S->bitRevLength = arm_cfft_sR_f32_len128.bitRevLength;
 23ee406:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 23ee40a:	689a      	ldr	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 23ee40c:	685b      	ldr	r3, [r3, #4]
                S->pBitRevTable = arm_cfft_sR_f32_len128.pBitRevTable;
 23ee40e:	920c      	str	r2, [sp, #48]	; 0x30
                S->pTwiddle = arm_cfft_sR_f32_len128.pTwiddle;
 23ee410:	930b      	str	r3, [sp, #44]	; 0x2c
                rfft_instance->fftLenRFFT = 256U;
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 23ee412:	4b1d      	ldr	r3, [pc, #116]	; (23ee488 <_ZN2ei5numpy4rfftEPKfjPfjj+0x128>)
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23ee414:	4622      	mov	r2, r4
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_256;
 23ee416:	930f      	str	r3, [sp, #60]	; 0x3c
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23ee418:	2300      	movs	r3, #0
                rfft_instance->fftLenRFFT = 256U;
 23ee41a:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23ee41e:	f7ff fdb0 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee422:	9a06      	ldr	r2, [sp, #24]
 23ee424:	b922      	cbnz	r2, 23ee430 <_ZN2ei5numpy4rfftEPKfjPfjj+0xd0>
 23ee426:	a806      	add	r0, sp, #24
 23ee428:	f7ff fdc0 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23ee42c:	4c17      	ldr	r4, [pc, #92]	; (23ee48c <_ZN2ei5numpy4rfftEPKfjPfjj+0x12c>)
 23ee42e:	e7da      	b.n	23ee3e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 23ee430:	2408      	movs	r4, #8
                output[ix] = rms_result * sqrt(2);
 23ee432:	ed9f 8a17 	vldr	s16, [pc, #92]	; 23ee490 <_ZN2ei5numpy4rfftEPKfjPfjj+0x130>
            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 23ee436:	2300      	movs	r3, #0
 23ee438:	9902      	ldr	r1, [sp, #8]
 23ee43a:	a80a      	add	r0, sp, #40	; 0x28
 23ee43c:	f7fe f9bf 	bl	23ec7be <arm_rfft_fast_f32>
            output[0] = fft_output.buffer[0];
 23ee440:	9b06      	ldr	r3, [sp, #24]
 23ee442:	3504      	adds	r5, #4
 23ee444:	681a      	ldr	r2, [r3, #0]
 23ee446:	f845 2c04 	str.w	r2, [r5, #-4]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 23ee44a:	685b      	ldr	r3, [r3, #4]
 23ee44c:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 23ee450:	9806      	ldr	r0, [sp, #24]
 23ee452:	2102      	movs	r1, #2
 23ee454:	4420      	add	r0, r4
 23ee456:	aa01      	add	r2, sp, #4
 23ee458:	f7fe ff7e 	bl	23ed358 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 23ee45c:	eddd 7a01 	vldr	s15, [sp, #4]
 23ee460:	ee67 7a88 	vmul.f32	s15, s15, s16
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 23ee464:	3408      	adds	r4, #8
 23ee466:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
                output[ix] = rms_result * sqrt(2);
 23ee46a:	ece5 7a01 	vstmia	r5!, {s15}
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 23ee46e:	d1ef      	bne.n	23ee450 <_ZN2ei5numpy4rfftEPKfjPfjj+0xf0>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 23ee470:	a806      	add	r0, sp, #24
 23ee472:	f7ff fd9b 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 23ee476:	2400      	movs	r4, #0
 23ee478:	e7b5      	b.n	23ee3e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 23ee47a:	4c06      	ldr	r4, [pc, #24]	; (23ee494 <_ZN2ei5numpy4rfftEPKfjPfjj+0x134>)
 23ee47c:	e7b3      	b.n	23ee3e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x86>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 23ee47e:	4c06      	ldr	r4, [pc, #24]	; (23ee498 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>)
 23ee480:	e7b4      	b.n	23ee3ec <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
 23ee482:	bf00      	nop
 23ee484:	023fb62c 	.word	0x023fb62c
 23ee488:	023fbbdc 	.word	0x023fbbdc
 23ee48c:	fffffc16 	.word	0xfffffc16
 23ee490:	3fb504f3 	.word	0x3fb504f3
 23ee494:	fffffc08 	.word	0xfffffc08
 23ee498:	fffffc11 	.word	0xfffffc11

023ee49c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
        if (blockSize <= 1U) {
 23ee49c:	2901      	cmp	r1, #1
 23ee49e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23ee55c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 23ee4a2:	b570      	push	{r4, r5, r6, lr}
        if (blockSize <= 1U) {
 23ee4a4:	d802      	bhi.n	23ee4ac <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x10>
            *pResult = 0;
 23ee4a6:	edc2 7a00 	vstr	s15, [r2]
    }
 23ee4aa:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
 23ee4ac:	088d      	lsrs	r5, r1, #2
 23ee4ae:	4603      	mov	r3, r0
 23ee4b0:	4604      	mov	r4, r0
 23ee4b2:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
 23ee4b4:	3410      	adds	r4, #16
 23ee4b6:	b18e      	cbz	r6, 23ee4dc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x40>
            sum += *pInput++;
 23ee4b8:	ed14 7a04 	vldr	s14, [r4, #-16]
 23ee4bc:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23ee4c0:	ed14 7a03 	vldr	s14, [r4, #-12]
 23ee4c4:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23ee4c8:	ed14 7a02 	vldr	s14, [r4, #-8]
 23ee4cc:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23ee4d0:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
 23ee4d4:	3e01      	subs	r6, #1
            sum += *pInput++;
 23ee4d6:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23ee4da:	e7eb      	b.n	23ee4b4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x18>
 23ee4dc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
 23ee4e0:	4606      	mov	r6, r0
 23ee4e2:	f001 0403 	and.w	r4, r1, #3
 23ee4e6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        while (blkCnt > 0U) {
 23ee4ea:	42a6      	cmp	r6, r4
 23ee4ec:	d004      	beq.n	23ee4f8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x5c>
            sum += *pInput++;
 23ee4ee:	ecb6 7a01 	vldmia	r6!, {s14}
 23ee4f2:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23ee4f6:	e7f8      	b.n	23ee4ea <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x4e>
        fMean = sum / (float32_t)blockSize;
 23ee4f8:	ee07 1a10 	vmov	s14, r1
 23ee4fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23ee500:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
 23ee504:	eddf 7a15 	vldr	s15, [pc, #84]	; 23ee55c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
        while (blkCnt > 0U) {
 23ee508:	3310      	adds	r3, #16
 23ee50a:	b1cd      	cbz	r5, 23ee540 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
            fValue = *pInput++ - fMean;
 23ee50c:	ed13 6a04 	vldr	s12, [r3, #-16]
 23ee510:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23ee514:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23ee518:	ed13 6a03 	vldr	s12, [r3, #-12]
 23ee51c:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23ee520:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23ee524:	ed13 6a02 	vldr	s12, [r3, #-8]
 23ee528:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23ee52c:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23ee530:	ed13 6a01 	vldr	s12, [r3, #-4]
 23ee534:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
 23ee538:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
 23ee53a:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23ee53e:	e7e3      	b.n	23ee508 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x6c>
        while (blkCnt > 0U) {
 23ee540:	42a0      	cmp	r0, r4
 23ee542:	d006      	beq.n	23ee552 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xb6>
            fValue = *pInput++ - fMean;
 23ee544:	ecb0 6a01 	vldmia	r0!, {s12}
 23ee548:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23ee54c:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23ee550:	e7f6      	b.n	23ee540 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
 23ee552:	eec7 6a87 	vdiv.f32	s13, s15, s14
 23ee556:	edc2 6a00 	vstr	s13, [r2]
 23ee55a:	e7a6      	b.n	23ee4aa <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe>
 23ee55c:	00000000 	.word	0x00000000

023ee560 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23ee560:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (input_matrix->cols != output_matrix->rows) {
 23ee562:	6883      	ldr	r3, [r0, #8]
 23ee564:	684a      	ldr	r2, [r1, #4]
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23ee566:	460e      	mov	r6, r1
        if (input_matrix->cols != output_matrix->rows) {
 23ee568:	4293      	cmp	r3, r2
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 23ee56a:	b087      	sub	sp, #28
        if (input_matrix->cols != output_matrix->rows) {
 23ee56c:	d144      	bne.n	23ee5f8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        if (output_matrix->cols != 1) {
 23ee56e:	6889      	ldr	r1, [r1, #8]
 23ee570:	2901      	cmp	r1, #1
 23ee572:	d141      	bne.n	23ee5f8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x98>
        arm_in_matrix.numRows = input_matrix->rows;
 23ee574:	6842      	ldr	r2, [r0, #4]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 23ee576:	6800      	ldr	r0, [r0, #0]
        arm_in_matrix.numRows = input_matrix->rows;
 23ee578:	b294      	uxth	r4, r2
        arm_in_matrix.pData = &input_matrix->buffer[0];
 23ee57a:	9003      	str	r0, [sp, #12]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23ee57c:	fb02 f003 	mul.w	r0, r2, r3
        arm_in_matrix.numCols = input_matrix->cols;
 23ee580:	b29d      	uxth	r5, r3
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23ee582:	0080      	lsls	r0, r0, #2
        arm_in_matrix.numRows = input_matrix->rows;
 23ee584:	f8ad 4008 	strh.w	r4, [sp, #8]
        arm_in_matrix.numCols = input_matrix->cols;
 23ee588:	f8ad 500a 	strh.w	r5, [sp, #10]
        arm_transposed_matrix.numRows = input_matrix->cols;
 23ee58c:	f8ad 5010 	strh.w	r5, [sp, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 23ee590:	f8ad 4012 	strh.w	r4, [sp, #18]
        arm_transposed_matrix.pData = (float *)ei_calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 23ee594:	f002 fdb9 	bl	23f110a <_Z9ei_callocjj>
 23ee598:	9005      	str	r0, [sp, #20]
        if (arm_transposed_matrix.pData == NULL) {
 23ee59a:	b378      	cbz	r0, 23ee5fc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x9c>
        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 23ee59c:	a904      	add	r1, sp, #16
 23ee59e:	a802      	add	r0, sp, #8
 23ee5a0:	f7fe f851 	bl	23ec646 <arm_mat_trans_f32>
        if (ret != EIDSP_OK) {
 23ee5a4:	4604      	mov	r4, r0
 23ee5a6:	bb20      	cbnz	r0, 23ee5f2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23ee5a8:	4605      	mov	r5, r0
 23ee5aa:	2700      	movs	r7, #0
 23ee5ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 23ee5b0:	9805      	ldr	r0, [sp, #20]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23ee5b2:	42ab      	cmp	r3, r5
 23ee5b4:	d91b      	bls.n	23ee5ee <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x8e>
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 23ee5b6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 23ee5ba:	aa01      	add	r2, sp, #4
 23ee5bc:	fb05 f301 	mul.w	r3, r5, r1
 23ee5c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 23ee5c4:	f7ff ff6a 	bl	23ee49c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 23ee5c8:	ed9d 0a01 	vldr	s0, [sp, #4]
    if (in >= 0.0f)
 23ee5cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ee5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee5d4:	db08      	blt.n	23ee5e8 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x88>
      *pOut = sqrtf(in);
 23ee5d6:	f00b fa4d 	bl	23f9a74 <sqrtf>
            output_matrix->buffer[row] = std;
 23ee5da:	6833      	ldr	r3, [r6, #0]
 23ee5dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23ee5e0:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 23ee5e4:	3501      	adds	r5, #1
 23ee5e6:	e7e1      	b.n	23ee5ac <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4c>
      *pOut = 0.0f;
 23ee5e8:	ee00 7a10 	vmov	s0, r7
 23ee5ec:	e7f5      	b.n	23ee5da <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x7a>
        ei_free(arm_transposed_matrix.pData);
 23ee5ee:	f002 fd8e 	bl	23f110e <_Z7ei_freePv>
    }
 23ee5f2:	4620      	mov	r0, r4
 23ee5f4:	b007      	add	sp, #28
 23ee5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ee5f8:	4c01      	ldr	r4, [pc, #4]	; (23ee600 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa0>)
 23ee5fa:	e7fa      	b.n	23ee5f2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ee5fc:	4c01      	ldr	r4, [pc, #4]	; (23ee604 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xa4>)
 23ee5fe:	e7f8      	b.n	23ee5f2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x92>
 23ee600:	fffffc14 	.word	0xfffffc14
 23ee604:	fffffc16 	.word	0xfffffc16

023ee608 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>:
    {
 23ee608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee60c:	ed2d 8b02 	vpush	{d8}
 23ee610:	4605      	mov	r5, r0
 23ee612:	4693      	mov	fp, r2
 23ee614:	469a      	mov	sl, r3
        if (win_size == 0) {
 23ee616:	460f      	mov	r7, r1
    {
 23ee618:	b091      	sub	sp, #68	; 0x44
        if (win_size == 0) {
 23ee61a:	2900      	cmp	r1, #0
 23ee61c:	f000 80fb 	beq.w	23ee816 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x20e>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23ee620:	6840      	ldr	r0, [r0, #4]
        uint16_t pad_size = (win_size - 1) / 2;
 23ee622:	3901      	subs	r1, #1
 23ee624:	104e      	asrs	r6, r1, #1
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23ee626:	f021 0101 	bic.w	r1, r1, #1
 23ee62a:	2300      	movs	r3, #0
 23ee62c:	4401      	add	r1, r0
 23ee62e:	68aa      	ldr	r2, [r5, #8]
 23ee630:	4668      	mov	r0, sp
 23ee632:	f7ff fca6 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee636:	9b00      	ldr	r3, [sp, #0]
 23ee638:	2b00      	cmp	r3, #0
 23ee63a:	f000 80ea 	beq.w	23ee812 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x20a>
        uint16_t pad_size = (win_size - 1) / 2;
 23ee63e:	b2b6      	uxth	r6, r6
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 23ee640:	4633      	mov	r3, r6
 23ee642:	4632      	mov	r2, r6
 23ee644:	4669      	mov	r1, sp
 23ee646:	4628      	mov	r0, r5
 23ee648:	f7ff fce6 	bl	23ee018 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
 23ee64c:	4604      	mov	r4, r0
 23ee64e:	2800      	cmp	r0, #0
 23ee650:	d174      	bne.n	23ee73c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23ee652:	4603      	mov	r3, r0
 23ee654:	2201      	movs	r2, #1
 23ee656:	9902      	ldr	r1, [sp, #8]
 23ee658:	a804      	add	r0, sp, #16
 23ee65a:	f7ff fc92 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee65e:	9b04      	ldr	r3, [sp, #16]
 23ee660:	2b00      	cmp	r3, #0
 23ee662:	f000 80d4 	beq.w	23ee80e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x206>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23ee666:	4623      	mov	r3, r4
 23ee668:	2201      	movs	r2, #1
 23ee66a:	9902      	ldr	r1, [sp, #8]
 23ee66c:	a808      	add	r0, sp, #32
 23ee66e:	f7ff fc88 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee672:	9b08      	ldr	r3, [sp, #32]
 23ee674:	2b00      	cmp	r3, #0
 23ee676:	f000 80c8 	beq.w	23ee80a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x202>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23ee67a:	686b      	ldr	r3, [r5, #4]
 23ee67c:	42a3      	cmp	r3, r4
 23ee67e:	d968      	bls.n	23ee752 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x14a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23ee680:	9a02      	ldr	r2, [sp, #8]
 23ee682:	9b00      	ldr	r3, [sp, #0]
 23ee684:	fb02 f104 	mul.w	r1, r2, r4
 23ee688:	a80c      	add	r0, sp, #48	; 0x30
 23ee68a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23ee68e:	4639      	mov	r1, r7
 23ee690:	f7ff fc77 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ee696:	2b00      	cmp	r3, #0
 23ee698:	d046      	beq.n	23ee728 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x120>
        if (input_matrix->cols != output_matrix->rows) {
 23ee69a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ee69c:	9b05      	ldr	r3, [sp, #20]
 23ee69e:	429a      	cmp	r2, r3
 23ee6a0:	d155      	bne.n	23ee74e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x146>
        if (output_matrix->cols != 1) {
 23ee6a2:	9b06      	ldr	r3, [sp, #24]
 23ee6a4:	2b01      	cmp	r3, #1
 23ee6a6:	d152      	bne.n	23ee74e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x146>
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23ee6a8:	2300      	movs	r3, #0
 23ee6aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 23ee6ac:	4298      	cmp	r0, r3
 23ee6ae:	d920      	bls.n	23ee6f2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xea>
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee6b0:	f04f 0c00 	mov.w	ip, #0
            float sum = 0.0f;
 23ee6b4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 23ee828 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x220>
 23ee6b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee6ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 23ee6bc:	0080      	lsls	r0, r0, #2
 23ee6be:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 23ee6c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23ee6c6:	4561      	cmp	r1, ip
 23ee6c8:	d007      	beq.n	23ee6da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xd2>
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 23ee6ca:	edd2 7a00 	vldr	s15, [r2]
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee6ce:	f10c 0c01 	add.w	ip, ip, #1
                sum += input_matrix->buffer[( row * input_matrix->cols ) + col];
 23ee6d2:	ee37 7a27 	vadd.f32	s14, s14, s15
            for (size_t row = 0; row < input_matrix->rows; row++) {
 23ee6d6:	4402      	add	r2, r0
 23ee6d8:	e7f5      	b.n	23ee6c6 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xbe>
            output_matrix->buffer[col] = sum / input_matrix->rows;
 23ee6da:	ee07 1a90 	vmov	s15, r1
 23ee6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ee6e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 23ee6e6:	9a04      	ldr	r2, [sp, #16]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23ee6e8:	3301      	adds	r3, #1
            output_matrix->buffer[col] = sum / input_matrix->rows;
 23ee6ea:	4472      	add	r2, lr
 23ee6ec:	edc2 6a00 	vstr	s13, [r2]
        for (size_t col = 0; col < input_matrix->cols; col++) {
 23ee6f0:	e7db      	b.n	23ee6aa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xa2>
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23ee6f2:	2300      	movs	r3, #0
 23ee6f4:	68a9      	ldr	r1, [r5, #8]
 23ee6f6:	4299      	cmp	r1, r3
 23ee6f8:	d911      	bls.n	23ee71e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x116>
                    features_matrix->buffer[(ix * features_matrix->cols) + fm_col] - mean_matrix.buffer[fm_col];
 23ee6fa:	fb01 3104 	mla	r1, r1, r4, r3
 23ee6fe:	682a      	ldr	r2, [r5, #0]
 23ee700:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23ee704:	9904      	ldr	r1, [sp, #16]
 23ee706:	edd2 7a00 	vldr	s15, [r2]
 23ee70a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 23ee70e:	ed91 7a00 	vldr	s14, [r1]
 23ee712:	ee77 7ac7 	vsub.f32	s15, s15, s14
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23ee716:	3301      	adds	r3, #1
                features_matrix->buffer[(ix * features_matrix->cols) + fm_col] =
 23ee718:	edc2 7a00 	vstr	s15, [r2]
            for (size_t fm_col = 0; fm_col < features_matrix->cols; fm_col++) {
 23ee71c:	e7ea      	b.n	23ee6f4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0xec>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23ee71e:	a80c      	add	r0, sp, #48	; 0x30
 23ee720:	f7ff fc44 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23ee724:	3401      	adds	r4, #1
 23ee726:	e7a8      	b.n	23ee67a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x72>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23ee728:	4c40      	ldr	r4, [pc, #256]	; (23ee82c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23ee72a:	a80c      	add	r0, sp, #48	; 0x30
 23ee72c:	f7ff fc3e 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23ee730:	a808      	add	r0, sp, #32
 23ee732:	f7ff fc3b 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23ee736:	a804      	add	r0, sp, #16
 23ee738:	f7ff fc38 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23ee73c:	4668      	mov	r0, sp
 23ee73e:	f7ff fc35 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
    }
 23ee742:	4620      	mov	r0, r4
 23ee744:	b011      	add	sp, #68	; 0x44
 23ee746:	ecbd 8b02 	vpop	{d8}
 23ee74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ee74e:	4c38      	ldr	r4, [pc, #224]	; (23ee830 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x228>)
 23ee750:	e7eb      	b.n	23ee72a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x122>
        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 23ee752:	4633      	mov	r3, r6
 23ee754:	4632      	mov	r2, r6
 23ee756:	4669      	mov	r1, sp
 23ee758:	4628      	mov	r0, r5
 23ee75a:	f7ff fc5d 	bl	23ee018 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
        if (ret != EIDSP_OK) {
 23ee75e:	4604      	mov	r4, r0
 23ee760:	2800      	cmp	r0, #0
 23ee762:	d1e5      	bne.n	23ee730 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23ee764:	4680      	mov	r8, r0
 23ee766:	686b      	ldr	r3, [r5, #4]
 23ee768:	4543      	cmp	r3, r8
 23ee76a:	d946      	bls.n	23ee7fa <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1f2>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23ee76c:	9a02      	ldr	r2, [sp, #8]
 23ee76e:	9b00      	ldr	r3, [sp, #0]
 23ee770:	fb02 f108 	mul.w	r1, r2, r8
 23ee774:	a80c      	add	r0, sp, #48	; 0x30
 23ee776:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23ee77a:	4639      	mov	r1, r7
 23ee77c:	f7ff fc01 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23ee780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ee782:	b3a3      	cbz	r3, 23ee7ee <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e6>
            if (variance_normalization == true) {
 23ee784:	f1bb 0f00 	cmp.w	fp, #0
 23ee788:	d02b      	beq.n	23ee7e2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1da>
        return std_axis0_CMSIS(input_matrix, output_matrix);
 23ee78a:	a908      	add	r1, sp, #32
 23ee78c:	a80c      	add	r0, sp, #48	; 0x30
 23ee78e:	f7ff fee7 	bl	23ee560 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
                if (ret != EIDSP_OK) {
 23ee792:	4606      	mov	r6, r0
 23ee794:	bb60      	cbnz	r0, 23ee7f0 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1e8>
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 23ee796:	9b02      	ldr	r3, [sp, #8]
 23ee798:	682a      	ldr	r2, [r5, #0]
 23ee79a:	fb03 f308 	mul.w	r3, r3, r8
 23ee79e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23ee7a2:	9b02      	ldr	r3, [sp, #8]
 23ee7a4:	42b3      	cmp	r3, r6
 23ee7a6:	d91c      	bls.n	23ee7e2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x1da>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23ee7a8:	f8d9 0000 	ldr.w	r0, [r9]
 23ee7ac:	f7fb f8f4 	bl	23e9998 <__aeabi_f2d>
                                             (window_variance.buffer[col] + 1e-10);
 23ee7b0:	9b08      	ldr	r3, [sp, #32]
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23ee7b2:	ec41 0b18 	vmov	d8, r0, r1
                                             (window_variance.buffer[col] + 1e-10);
 23ee7b6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23ee7ba:	6818      	ldr	r0, [r3, #0]
 23ee7bc:	f7fb f8ec 	bl	23e9998 <__aeabi_f2d>
 23ee7c0:	a317      	add	r3, pc, #92	; (adr r3, 23ee820 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x218>)
 23ee7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ee7c6:	f7fa ff89 	bl	23e96dc <__adddf3>
 23ee7ca:	4602      	mov	r2, r0
 23ee7cc:	460b      	mov	r3, r1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23ee7ce:	ec51 0b18 	vmov	r0, r1, d8
 23ee7d2:	f7fb fa63 	bl	23e9c9c <__aeabi_ddiv>
 23ee7d6:	f7fb fc2f 	bl	23ea038 <__aeabi_d2f>
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23ee7da:	3601      	adds	r6, #1
                    *(features_buffer_ptr) = (*(features_buffer_ptr)) /
 23ee7dc:	f849 0b04 	str.w	r0, [r9], #4
                for (size_t col = 0; col < vec_pad.cols; col++) {
 23ee7e0:	e7df      	b.n	23ee7a2 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x19a>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23ee7e2:	a80c      	add	r0, sp, #48	; 0x30
 23ee7e4:	f7ff fbe2 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 23ee7e8:	f108 0801 	add.w	r8, r8, #1
 23ee7ec:	e7bb      	b.n	23ee766 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x15e>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 23ee7ee:	4e0f      	ldr	r6, [pc, #60]	; (23ee82c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23ee7f0:	a80c      	add	r0, sp, #48	; 0x30
 23ee7f2:	f7ff fbdb 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23ee7f6:	4634      	mov	r4, r6
 23ee7f8:	e79a      	b.n	23ee730 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        if (scale) {
 23ee7fa:	f1ba 0f00 	cmp.w	sl, #0
 23ee7fe:	d097      	beq.n	23ee730 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
            ret = numpy::normalize(features_matrix);
 23ee800:	4628      	mov	r0, r5
 23ee802:	f7ff fc9d 	bl	23ee140 <_ZN2ei5numpy9normalizeEPNS_9ei_matrixE>
 23ee806:	4604      	mov	r4, r0
            if (ret != EIDSP_OK) {
 23ee808:	e792      	b.n	23ee730 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 23ee80a:	4c08      	ldr	r4, [pc, #32]	; (23ee82c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23ee80c:	e790      	b.n	23ee730 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x128>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 23ee80e:	4c07      	ldr	r4, [pc, #28]	; (23ee82c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23ee810:	e791      	b.n	23ee736 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x12e>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 23ee812:	4c06      	ldr	r4, [pc, #24]	; (23ee82c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x224>)
 23ee814:	e792      	b.n	23ee73c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x134>
            return EIDSP_OK;
 23ee816:	460c      	mov	r4, r1
 23ee818:	e793      	b.n	23ee742 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb+0x13a>
 23ee81a:	bf00      	nop
 23ee81c:	f3af 8000 	nop.w
 23ee820:	d9d7bdbb 	.word	0xd9d7bdbb
 23ee824:	3ddb7cdf 	.word	0x3ddb7cdf
 23ee828:	00000000 	.word	0x00000000
 23ee82c:	fffffc16 	.word	0xfffffc16
 23ee830:	fffffc14 	.word	0xfffffc14

023ee834 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 23ee834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23ee838:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 23ee83c:	4614      	mov	r4, r2
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 23ee83e:	0875      	lsrs	r5, r6, #1
 23ee840:	3501      	adds	r5, #1
 23ee842:	429d      	cmp	r5, r3
 23ee844:	d12c      	bne.n	23ee8a0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x6c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 23ee846:	9600      	str	r6, [sp, #0]
 23ee848:	f7ff fd8a 	bl	23ee360 <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
 23ee84c:	4680      	mov	r8, r0
 23ee84e:	bb18      	cbnz	r0, 23ee898 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
            return r;
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23ee850:	ee07 6a90 	vmov	s15, r6
 23ee854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ee858:	ee17 0a90 	vmov	r0, s15
 23ee85c:	f7fb f89c 	bl	23e9998 <__aeabi_f2d>
 23ee860:	4602      	mov	r2, r0
 23ee862:	460b      	mov	r3, r1
 23ee864:	2000      	movs	r0, #0
 23ee866:	4910      	ldr	r1, [pc, #64]	; (23ee8a8 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x74>)
 23ee868:	f7fb fa18 	bl	23e9c9c <__aeabi_ddiv>
 23ee86c:	4606      	mov	r6, r0
 23ee86e:	460f      	mov	r7, r1
 23ee870:	eb04 0585 	add.w	r5, r4, r5, lsl #2
                (out_buffer[ix] * out_buffer[ix]);
 23ee874:	edd4 7a00 	vldr	s15, [r4]
 23ee878:	ee67 7aa7 	vmul.f32	s15, s15, s15
 23ee87c:	ee17 0a90 	vmov	r0, s15
 23ee880:	f7fb f88a 	bl	23e9998 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23ee884:	4632      	mov	r2, r6
 23ee886:	463b      	mov	r3, r7
 23ee888:	f7fb f8de 	bl	23e9a48 <__aeabi_dmul>
 23ee88c:	f7fb fbd4 	bl	23ea038 <__aeabi_d2f>
 23ee890:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 23ee894:	42a5      	cmp	r5, r4
 23ee896:	d1ed      	bne.n	23ee874 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x40>
        }

        return EIDSP_OK;
    }
 23ee898:	4640      	mov	r0, r8
 23ee89a:	b002      	add	sp, #8
 23ee89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ee8a0:	f8df 8008 	ldr.w	r8, [pc, #8]	; 23ee8ac <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x78>
 23ee8a4:	e7f8      	b.n	23ee898 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
 23ee8a6:	bf00      	nop
 23ee8a8:	3ff00000 	.word	0x3ff00000
 23ee8ac:	fffffc14 	.word	0xfffffc14

023ee8b0 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>:
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input)
    {
        zero_handling(input->buffer, input->rows * input->cols);
 23ee8b0:	6881      	ldr	r1, [r0, #8]
 23ee8b2:	e9d0 3200 	ldrd	r3, r2, [r0]
 23ee8b6:	434a      	muls	r2, r1
                input[ix] = 1e-10;
 23ee8b8:	4908      	ldr	r1, [pc, #32]	; (23ee8dc <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0x2c>)
 23ee8ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
 23ee8be:	4293      	cmp	r3, r2
 23ee8c0:	d00b      	beq.n	23ee8da <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0x2a>
            if (input[ix] == 0) {
 23ee8c2:	edd3 7a00 	vldr	s15, [r3]
 23ee8c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 23ee8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
 23ee8ce:	f103 0304 	add.w	r3, r3, #4
 23ee8d2:	bf08      	it	eq
 23ee8d4:	f843 1c04 	streq.w	r1, [r3, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
 23ee8d8:	e7f1      	b.n	23ee8be <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE+0xe>
    }
 23ee8da:	4770      	bx	lr
 23ee8dc:	2edbe6ff 	.word	0x2edbe6ff

023ee8e0 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     */
    static float frequency_to_mel(float f) {
#if EI_PORTING_RENESASRA65 == 1
        return 1127.0 * log(1.0 + f / 700.0f);
#else
        return 1127.0 * numpy::log((1.0 + f / 700.0f));
 23ee8e0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23ee944 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x64>
 23ee8e4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 23ee8e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        int32_t g = (int32_t) * ((int32_t *)&a);
 23ee8ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 23ee8f0:	ee17 3a90 	vmov	r3, s15
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 23ee8f4:	4a14      	ldr	r2, [pc, #80]	; (23ee948 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x68>)
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23ee8f6:	eddf 7a15 	vldr	s15, [pc, #84]	; 23ee94c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x6c>
        int32_t e = (g - 0x3f2aaaab) & 0xff800000;
 23ee8fa:	441a      	add	r2, r3
 23ee8fc:	0dd2      	lsrs	r2, r2, #23
 23ee8fe:	05d2      	lsls	r2, r2, #23
        g = g - e;
 23ee900:	1a9b      	subs	r3, r3, r2
 23ee902:	ee00 3a10 	vmov	s0, r3
        float f = m - 1.0f;
 23ee906:	ee30 0a47 	vsub.f32	s0, s0, s14
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23ee90a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23ee950 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x70>
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23ee90e:	ed9f 6a11 	vldr	s12, [pc, #68]	; 23ee954 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x74>
        float r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 23ee912:	eea7 7a80 	vfma.f32	s14, s15, s0
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23ee916:	eddf 7a10 	vldr	s15, [pc, #64]	; 23ee958 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x78>
        float s = f * f;
 23ee91a:	ee60 6a00 	vmul.f32	s13, s0, s0
        float t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 23ee91e:	eee6 7a00 	vfma.f32	s15, s12, s0
        r = fmaf(r, s, t);
 23ee922:	eee7 7a26 	vfma.f32	s15, s14, s13
        r = fmaf(r, s, f);
 23ee926:	eea7 0aa6 	vfma.f32	s0, s15, s13
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 23ee92a:	ee07 2a90 	vmov	s15, r2
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 23ee92e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23ee95c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x7c>
        float i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 23ee932:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 23ee936:	eea7 0a87 	vfma.f32	s0, s15, s14
#endif
    }
 23ee93a:	eddf 7a09 	vldr	s15, [pc, #36]	; 23ee960 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x80>
 23ee93e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23ee942:	4770      	bx	lr
 23ee944:	442f0000 	.word	0x442f0000
 23ee948:	c0d55555 	.word	0xc0d55555
 23ee94c:	3e6c6078 	.word	0x3e6c6078
 23ee950:	be8ef46d 	.word	0xbe8ef46d
 23ee954:	3ea9e51a 	.word	0x3ea9e51a
 23ee958:	beff712d 	.word	0xbeff712d
 23ee95c:	3f317218 	.word	0x3f317218
 23ee960:	448ce000 	.word	0x448ce000

023ee964 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
  { return __builtin_expf(__x); }
 23ee964:	eddf 7a07 	vldr	s15, [pc, #28]	; 23ee984 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x20>
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 23ee968:	b508      	push	{r3, lr}
 23ee96a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 23ee96e:	f00b f843 	bl	23f99f8 <expf>
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 23ee972:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23ee976:	ee30 0a67 	vsub.f32	s0, s0, s15
    }
 23ee97a:	eddf 7a03 	vldr	s15, [pc, #12]	; 23ee988 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x24>
 23ee97e:	ee20 0a27 	vmul.f32	s0, s0, s15
 23ee982:	bd08      	pop	{r3, pc}
 23ee984:	448ce000 	.word	0x448ce000
 23ee988:	442f0000 	.word	0x442f0000

023ee98c <_ZN2ei8speechpy10processing11preemphasisD1Ev>:
        ~preemphasis() {
 23ee98c:	b510      	push	{r4, lr}
 23ee98e:	4604      	mov	r4, r0
            if (_prev_buffer) {
 23ee990:	68c0      	ldr	r0, [r0, #12]
 23ee992:	b108      	cbz	r0, 23ee998 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0xc>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 23ee994:	f002 fbbb 	bl	23f110e <_Z7ei_freePv>
            if (_end_of_signal_buffer) {
 23ee998:	6920      	ldr	r0, [r4, #16]
 23ee99a:	b108      	cbz	r0, 23ee9a0 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x14>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 23ee99c:	f002 fbb7 	bl	23f110e <_Z7ei_freePv>
        }
 23ee9a0:	4620      	mov	r0, r4
 23ee9a2:	bd10      	pop	{r4, pc}
 23ee9a4:	0000      	movs	r0, r0
	...

023ee9a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 23ee9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee9ac:	ed2d 8b04 	vpush	{d8-d9}
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 23ee9b0:	1c8e      	adds	r6, r1, #2
    static int filterbanks(
 23ee9b2:	b08f      	sub	sp, #60	; 0x3c
 23ee9b4:	ee08 3a10 	vmov	s16, r3
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 23ee9b8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    static int filterbanks(
 23ee9bc:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 23ee9c0:	4604      	mov	r4, r0
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 23ee9c2:	4648      	mov	r0, r9
    static int filterbanks(
 23ee9c4:	4615      	mov	r5, r2
 23ee9c6:	9101      	str	r1, [sp, #4]
 23ee9c8:	9303      	str	r3, [sp, #12]
        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 23ee9ca:	f002 fb9c 	bl	23f1106 <_Z9ei_mallocj>
        if (!mels) {
 23ee9ce:	4607      	mov	r7, r0
 23ee9d0:	b378      	cbz	r0, 23eea32 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 23ee9d2:	6863      	ldr	r3, [r4, #4]
 23ee9d4:	9a01      	ldr	r2, [sp, #4]
 23ee9d6:	4293      	cmp	r3, r2
 23ee9d8:	f040 818a 	bne.w	23eecf0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>
 23ee9dc:	68a2      	ldr	r2, [r4, #8]
 23ee9de:	42aa      	cmp	r2, r5
 23ee9e0:	f040 8186 	bne.w	23eecf0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 23ee9e4:	435a      	muls	r2, r3
 23ee9e6:	2100      	movs	r1, #0
 23ee9e8:	6820      	ldr	r0, [r4, #0]
 23ee9ea:	f00c fb6b 	bl	23fb0c4 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 23ee9ee:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 23ee9f2:	eef8 8a67 	vcvt.f32.u32	s17, s15
 23ee9f6:	eeb0 0a68 	vmov.f32	s0, s17
 23ee9fa:	f7ff ff71 	bl	23ee8e0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23ee9fe:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 23eea02:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 23eea06:	eef0 9a40 	vmov.f32	s19, s0
 23eea0a:	eeb0 0a49 	vmov.f32	s0, s18
 23eea0e:	f7ff ff67 	bl	23ee8e0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23eea12:	4630      	mov	r0, r6
 23eea14:	eef0 0a40 	vmov.f32	s1, s0
 23eea18:	4639      	mov	r1, r7
 23eea1a:	eeb0 0a69 	vmov.f32	s0, s19
 23eea1e:	f7ff fa5d 	bl	23ededc <_ZN2ei5numpy8linspaceEffmPf.isra.0>
            num_filter + 2,
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 23eea22:	4648      	mov	r0, r9
 23eea24:	f002 fb6f 	bl	23f1106 <_Z9ei_mallocj>
        if (!hertz) {
 23eea28:	4606      	mov	r6, r0
 23eea2a:	b920      	cbnz	r0, 23eea36 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8e>
            ei_dsp_free(mels, mels_mem_size);
 23eea2c:	4638      	mov	r0, r7
        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
        if (!freq_index) {
            ei_dsp_free(hertz, hertz_mem_size);
 23eea2e:	f002 fb6e 	bl	23f110e <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23eea32:	48b3      	ldr	r0, [pc, #716]	; (23eed00 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x358>)
 23eea34:	e157      	b.n	23eece6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33e>
 23eea36:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23eea3a:	9b01      	ldr	r3, [sp, #4]
 23eea3c:	f103 0801 	add.w	r8, r3, #1
 23eea40:	fa1f f38a 	uxth.w	r3, sl
 23eea44:	4598      	cmp	r8, r3
 23eea46:	db2b      	blt.n	23eeaa0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xf8>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 23eea48:	eb07 0283 	add.w	r2, r7, r3, lsl #2
 23eea4c:	ed92 0a00 	vldr	s0, [r2]
 23eea50:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 23eea54:	9302      	str	r3, [sp, #8]
 23eea56:	f7ff ff85 	bl	23ee964 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
                hertz[ix] = low_freq;
 23eea5a:	eef4 8a40 	vcmp.f32	s17, s0
 23eea5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eea62:	fe38 0a80 	vselgt.f32	s0, s17, s0
                hertz[ix] = high_freq;
 23eea66:	eeb4 9a40 	vcmp.f32	s18, s0
 23eea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (ix == num_filter + 2 - 1) {
 23eea6e:	9b02      	ldr	r3, [sp, #8]
                hertz[ix] = high_freq;
 23eea70:	bf48      	it	mi
 23eea72:	eeb0 0a49 	vmovmi.f32	s0, s18
            if (ix == num_filter + 2 - 1) {
 23eea76:	4598      	cmp	r8, r3
 23eea78:	d004      	beq.n	23eea84 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xdc>
 23eea7a:	ed8b 0a00 	vstr	s0, [fp]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23eea7e:	f10a 0a01 	add.w	sl, sl, #1
 23eea82:	e7dd      	b.n	23eea40 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x98>
                hertz[ix] -= 0.001;
 23eea84:	ee10 0a10 	vmov	r0, s0
 23eea88:	f7fa ff86 	bl	23e9998 <__aeabi_f2d>
 23eea8c:	a39a      	add	r3, pc, #616	; (adr r3, 23eecf8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x350>)
 23eea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eea92:	f7fa fe21 	bl	23e96d8 <__aeabi_dsub>
 23eea96:	f7fb facf 	bl	23ea038 <__aeabi_d2f>
 23eea9a:	f8cb 0000 	str.w	r0, [fp]
 23eea9e:	e7ee      	b.n	23eea7e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0xd6>
        ei_dsp_free(mels, mels_mem_size);
 23eeaa0:	4638      	mov	r0, r7
 23eeaa2:	f002 fb34 	bl	23f110e <_Z7ei_freePv>
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 23eeaa6:	4648      	mov	r0, r9
 23eeaa8:	f002 fb2d 	bl	23f1106 <_Z9ei_mallocj>
        if (!freq_index) {
 23eeaac:	4607      	mov	r7, r0
 23eeaae:	b908      	cbnz	r0, 23eeab4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x10c>
            ei_dsp_free(hertz, hertz_mem_size);
 23eeab0:	4630      	mov	r0, r6
 23eeab2:	e7bc      	b.n	23eea2e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x86>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 23eeab4:	3501      	adds	r5, #1
 23eeab6:	ee07 5a90 	vmov	s15, r5
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23eeaba:	2300      	movs	r3, #0
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 23eeabc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23eeac0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 23eeac4:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 23eeac8:	edd2 6a00 	vldr	s13, [r2]
 23eeacc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 23eead0:	ee86 7a88 	vdiv.f32	s14, s13, s16
  { return __builtin_floorf(__x); }
 23eead4:	febb 7a47 	vrintm.f32	s14, s14
 23eead8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23eeadc:	ee17 2a10 	vmov	r2, s14
 23eeae0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 23eeae4:	3301      	adds	r3, #1
 23eeae6:	b29b      	uxth	r3, r3
 23eeae8:	4598      	cmp	r8, r3
 23eeaea:	daeb      	bge.n	23eeac4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x11c>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 23eeaec:	4630      	mov	r0, r6
 23eeaee:	f002 fb0e 	bl	23f110e <_Z7ei_freePv>

        for (size_t i = 0; i < num_filter; i++) {
 23eeaf2:	46b8      	mov	r8, r7
 23eeaf4:	2500      	movs	r5, #0
            if (value < quantized_values_one_zero[mid]) {
 23eeaf6:	f8df 920c 	ldr.w	r9, [pc, #524]	; 23eed04 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35c>
 23eeafa:	9b01      	ldr	r3, [sp, #4]
 23eeafc:	42ab      	cmp	r3, r5
 23eeafe:	f240 80e7 	bls.w	23eecd0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x328>
            int left = freq_index[i];
 23eeb02:	f8d8 b000 	ldr.w	fp, [r8]
            int middle = freq_index[i + 1];
 23eeb06:	1c6b      	adds	r3, r5, #1
            int right = freq_index[i + 2];
 23eeb08:	f8d8 6008 	ldr.w	r6, [r8, #8]
            int middle = freq_index[i + 1];
 23eeb0c:	9304      	str	r3, [sp, #16]

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23eeb0e:	eba6 030b 	sub.w	r3, r6, fp
 23eeb12:	1c5a      	adds	r2, r3, #1
 23eeb14:	2101      	movs	r1, #1
 23eeb16:	9302      	str	r3, [sp, #8]
 23eeb18:	a806      	add	r0, sp, #24
 23eeb1a:	2300      	movs	r3, #0
            int middle = freq_index[i + 1];
 23eeb1c:	f108 0804 	add.w	r8, r8, #4
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23eeb20:	9205      	str	r2, [sp, #20]
            int middle = freq_index[i + 1];
 23eeb22:	ed98 8a00 	vldr	s16, [r8]
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23eeb26:	f7ff fa2c 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23eeb2a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 23eeb2e:	b919      	cbnz	r1, 23eeb38 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x190>
 23eeb30:	a806      	add	r0, sp, #24
 23eeb32:	f7ff fa3b 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23eeb36:	e77c      	b.n	23eea32 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x8a>
            if (!z.buffer) {
                ei_dsp_free(freq_index, freq_index_mem_size);
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 23eeb38:	ee07 ba90 	vmov	s15, fp
 23eeb3c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 23eeb40:	ee07 6a90 	vmov	s15, r6
 23eeb44:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 23eeb48:	4610      	mov	r0, r2
 23eeb4a:	eef0 0a49 	vmov.f32	s1, s18
 23eeb4e:	eeb0 0a68 	vmov.f32	s0, s17
 23eeb52:	9205      	str	r2, [sp, #20]
 23eeb54:	f7ff f9c2 	bl	23ededc <_ZN2ei5numpy8linspaceEffmPf.isra.0>
     * @param left Starting index (assigned 0)
     * @param middle Index where 1.0 will be placed
     * @param right Ending index (assigned 0)
     */
    static int triangle(float *x, size_t x_size, int left, int middle, int right) {
        EI_DSP_MATRIX(out, 1, x_size);
 23eeb58:	2300      	movs	r3, #0
 23eeb5a:	2101      	movs	r1, #1
 23eeb5c:	9a05      	ldr	r2, [sp, #20]
 23eeb5e:	a80a      	add	r0, sp, #40	; 0x28
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 23eeb60:	f8dd a018 	ldr.w	sl, [sp, #24]
 23eeb64:	f7ff fa0d 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23eeb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23eeb6a:	2b00      	cmp	r3, #0
 23eeb6c:	d045      	beq.n	23eebfa <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x252>

        for (size_t ix = 0; ix < x_size; ix++) {
            if (x[ix] > left && x[ix] <= middle) {
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23eeb6e:	ee18 2a10 	vmov	r2, s16
 23eeb72:	46d4      	mov	ip, sl
        for (size_t ix = 0; ix < x_size; ix++) {
 23eeb74:	2300      	movs	r3, #0
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23eeb76:	eba2 0e0b 	sub.w	lr, r2, fp
            }

            if (x[ix] < right && middle <= x[ix]) {
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 23eeb7a:	1ab6      	subs	r6, r6, r2
 23eeb7c:	9a05      	ldr	r2, [sp, #20]
        for (size_t ix = 0; ix < x_size; ix++) {
 23eeb7e:	429a      	cmp	r2, r3
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23eeb80:	990a      	ldr	r1, [sp, #40]	; 0x28
        for (size_t ix = 0; ix < x_size; ix++) {
 23eeb82:	d936      	bls.n	23eebf2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x24a>
            if (x[ix] > left && x[ix] <= middle) {
 23eeb84:	eddc 7a00 	vldr	s15, [ip]
 23eeb88:	eef4 8ae7 	vcmpe.f32	s17, s15
 23eeb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eeb90:	ea4f 0083 	mov.w	r0, r3, lsl #2
 23eeb94:	d511      	bpl.n	23eebba <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x212>
 23eeb96:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 23eeb9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eeb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eeba2:	d80a      	bhi.n	23eebba <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x212>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 23eeba4:	ee07 ea10 	vmov	s14, lr
 23eeba8:	ee77 7ae8 	vsub.f32	s15, s15, s17
 23eebac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 23eebb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23eebb4:	4401      	add	r1, r0
 23eebb6:	ed81 7a00 	vstr	s14, [r1]
            if (x[ix] < right && middle <= x[ix]) {
 23eebba:	ecfc 7a01 	vldmia	ip!, {s15}
 23eebbe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23eebc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eebc6:	dd12      	ble.n	23eebee <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x246>
 23eebc8:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 23eebcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eebd4:	db0b      	blt.n	23eebee <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x246>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 23eebd6:	ee07 6a10 	vmov	s14, r6
 23eebda:	ee79 7a67 	vsub.f32	s15, s18, s15
 23eebde:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 23eebe2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23eebe6:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eebe8:	4401      	add	r1, r0
 23eebea:	ed81 7a00 	vstr	s14, [r1]
        for (size_t ix = 0; ix < x_size; ix++) {
 23eebee:	3301      	adds	r3, #1
 23eebf0:	e7c5      	b.n	23eeb7e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1d6>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 23eebf2:	4650      	mov	r0, sl
 23eebf4:	0092      	lsls	r2, r2, #2
 23eebf6:	f00c fa3e 	bl	23fb076 <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
 23eebfa:	a80a      	add	r0, sp, #40	; 0x28
 23eebfc:	f7ff f9d6 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 23eec00:	2200      	movs	r2, #0
        if (value > quantized_values_one_zero[length - 1]) {
 23eec02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 23eec06:	9b02      	ldr	r3, [sp, #8]
 23eec08:	4293      	cmp	r3, r2
 23eec0a:	db5c      	blt.n	23eecc6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31e>
                size_t index = (i * filterbanks->cols) + (left + zx);

                if (output_transposed) {
 23eec0c:	9903      	ldr	r1, [sp, #12]
                size_t index = (i * filterbanks->cols) + (left + zx);
 23eec0e:	68a3      	ldr	r3, [r4, #8]
 23eec10:	eb0b 0002 	add.w	r0, fp, r2
                if (output_transposed) {
 23eec14:	b999      	cbnz	r1, 23eec3e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x296>
                size_t index = (i * filterbanks->cols) + (left + zx);
 23eec16:	fb05 0003 	mla	r0, r5, r3, r0
                    index = ((left + zx) * filterbanks->rows) + i;
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 23eec1a:	9b06      	ldr	r3, [sp, #24]
 23eec1c:	4939      	ldr	r1, [pc, #228]	; (23eed04 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x35c>)
 23eec1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23eec22:	edd3 7a00 	vldr	s15, [r3]
 23eec26:	6823      	ldr	r3, [r4, #0]
 23eec28:	4418      	add	r0, r3
        for (size_t ix = 0; ix < length; ix++) {
 23eec2a:	2300      	movs	r3, #0
            if (quantized_values_one_zero[ix] == value) return ix;
 23eec2c:	ecb1 7a01 	vldmia	r1!, {s14}
 23eec30:	eef4 7a47 	vcmp.f32	s15, s14
 23eec34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eec38:	d105      	bne.n	23eec46 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x29e>
            hi;
 23eec3a:	b2db      	uxtb	r3, r3
 23eec3c:	e03c      	b.n	23eecb8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
                    index = ((left + zx) * filterbanks->rows) + i;
 23eec3e:	6863      	ldr	r3, [r4, #4]
 23eec40:	fb03 5000 	mla	r0, r3, r0, r5
 23eec44:	e7e9      	b.n	23eec1a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x272>
        for (size_t ix = 0; ix < length; ix++) {
 23eec46:	3301      	adds	r3, #1
 23eec48:	2bef      	cmp	r3, #239	; 0xef
 23eec4a:	d1ef      	bne.n	23eec2c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x284>
        if (value < quantized_values_one_zero[0]) {
 23eec4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23eec50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eec54:	d433      	bmi.n	23eecbe <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x316>
        if (value > quantized_values_one_zero[length - 1]) {
 23eec56:	eef4 7ae6 	vcmpe.f32	s15, s13
 23eec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eec5e:	dc30      	bgt.n	23eecc2 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x31a>
        int hi = length - 1;
 23eec60:	23ee      	movs	r3, #238	; 0xee
        int lo = 0;
 23eec62:	2100      	movs	r1, #0
            int mid = (hi + lo) / 2;
 23eec64:	18ce      	adds	r6, r1, r3
 23eec66:	1076      	asrs	r6, r6, #1
            if (value < quantized_values_one_zero[mid]) {
 23eec68:	eb09 0c86 	add.w	ip, r9, r6, lsl #2
 23eec6c:	ed9c 7a00 	vldr	s14, [ip]
 23eec70:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eec74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eec78:	d515      	bpl.n	23eeca6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2fe>
                hi = mid - 1;
 23eec7a:	1e73      	subs	r3, r6, #1
        while (lo <= hi) {
 23eec7c:	428b      	cmp	r3, r1
 23eec7e:	daf1      	bge.n	23eec64 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2bc>
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 23eec80:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 23eec84:	ed96 7a00 	vldr	s14, [r6]
 23eec88:	eb09 0683 	add.w	r6, r9, r3, lsl #2
 23eec8c:	ed96 6a00 	vldr	s12, [r6]
 23eec90:	ee37 7a67 	vsub.f32	s14, s14, s15
 23eec94:	ee77 7ac6 	vsub.f32	s15, s15, s12
            hi;
 23eec98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23eec9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eeca0:	d5cb      	bpl.n	23eec3a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x292>
 23eeca2:	b2cb      	uxtb	r3, r1
 23eeca4:	e008      	b.n	23eecb8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            } else if (value > quantized_values_one_zero[mid]) {
 23eeca6:	dd01      	ble.n	23eecac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x304>
                lo = mid + 1;
 23eeca8:	1c71      	adds	r1, r6, #1
 23eecaa:	e7e7      	b.n	23eec7c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2d4>
                return quantized_values_one_zero[mid];
 23eecac:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 23eecb0:	edcd 7a05 	vstr	s15, [sp, #20]
 23eecb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 23eecb8:	7003      	strb	r3, [r0, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 23eecba:	3201      	adds	r2, #1
 23eecbc:	e7a3      	b.n	23eec06 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x25e>
            return quantized_values_one_zero[0];
 23eecbe:	2300      	movs	r3, #0
 23eecc0:	e7fa      	b.n	23eecb8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            return quantized_values_one_zero[length - 1];
 23eecc2:	2301      	movs	r3, #1
 23eecc4:	e7f8      	b.n	23eecb8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x310>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 23eecc6:	a806      	add	r0, sp, #24
 23eecc8:	f7ff f970 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
 23eeccc:	9d04      	ldr	r5, [sp, #16]
 23eecce:	e714      	b.n	23eeafa <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x152>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 23eecd0:	9b03      	ldr	r3, [sp, #12]
 23eecd2:	b123      	cbz	r3, 23eecde <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x336>
            uint16_t r = filterbanks->rows;
            filterbanks->rows = filterbanks->cols;
 23eecd4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
            filterbanks->cols = r;
 23eecd8:	b29b      	uxth	r3, r3
            filterbanks->rows = filterbanks->cols;
 23eecda:	6062      	str	r2, [r4, #4]
            filterbanks->cols = r;
 23eecdc:	60a3      	str	r3, [r4, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 23eecde:	4638      	mov	r0, r7
 23eece0:	f002 fa15 	bl	23f110e <_Z7ei_freePv>

        return EIDSP_OK;
 23eece4:	2000      	movs	r0, #0
    }
 23eece6:	b00f      	add	sp, #60	; 0x3c
 23eece8:	ecbd 8b04 	vpop	{d8-d9}
 23eecec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eecf0:	4805      	ldr	r0, [pc, #20]	; (23eed08 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x360>)
 23eecf2:	e7f8      	b.n	23eece6 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33e>
 23eecf4:	f3af 8000 	nop.w
 23eecf8:	d2f1a9fc 	.word	0xd2f1a9fc
 23eecfc:	3f50624d 	.word	0x3f50624d
 23eed00:	fffffc16 	.word	0xfffffc16
 23eed04:	023fc964 	.word	0x023fc964
 23eed08:	fffffc14 	.word	0xfffffc14

023eed0c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>:
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE

EI_IMPULSE_ERROR fill_input_tensor_from_matrix(
    matrix_t *fmatrix,
    TfLiteTensor *input
) {
 23eed0c:	b538      	push	{r3, r4, r5, lr}
 23eed0e:	460b      	mov	r3, r1
    const size_t matrix_els = fmatrix->rows * fmatrix->cols;
 23eed10:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23eed14:	434a      	muls	r2, r1

    switch (input->type) {
 23eed16:	7819      	ldrb	r1, [r3, #0]
 23eed18:	2903      	cmp	r1, #3
 23eed1a:	d04a      	beq.n	23eedb2 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xa6>
 23eed1c:	2909      	cmp	r1, #9
 23eed1e:	d021      	beq.n	23eed64 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x58>
 23eed20:	2901      	cmp	r1, #1
 23eed22:	d166      	bne.n	23eedf2 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xe6>
        case kTfLiteFloat32: {
            if (input->bytes / 4 != matrix_els) {
 23eed24:	6999      	ldr	r1, [r3, #24]
 23eed26:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 23eed2a:	d009      	beq.n	23eed40 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x34>
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23eed2c:	2900      	cmp	r1, #0
 23eed2e:	bfb8      	it	lt
 23eed30:	3103      	addlt	r1, #3
 23eed32:	1089      	asrs	r1, r1, #2
            }
            break;
        }
        case kTfLiteUInt8: {
            if (input->bytes != matrix_els) {
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23eed34:	4832      	ldr	r0, [pc, #200]	; (23eee00 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf4>)
 23eed36:	f002 f9b9 	bl	23f10ac <_Z9ei_printfPKcz>
                    (int)input->bytes, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
 23eed3a:	f06f 0017 	mvn.w	r0, #23
 23eed3e:	e006      	b.n	23eed4e <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eed40:	2200      	movs	r2, #0
 23eed42:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 23eed46:	4361      	muls	r1, r4
 23eed48:	4291      	cmp	r1, r2
 23eed4a:	d801      	bhi.n	23eed50 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x44>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
 23eed4c:	2000      	movs	r0, #0
}
 23eed4e:	bd38      	pop	{r3, r4, r5, pc}
                input->data.f[ix] = fmatrix->buffer[ix];
 23eed50:	6801      	ldr	r1, [r0, #0]
 23eed52:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23eed56:	680c      	ldr	r4, [r1, #0]
 23eed58:	6859      	ldr	r1, [r3, #4]
 23eed5a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23eed5e:	600c      	str	r4, [r1, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eed60:	3201      	adds	r2, #1
 23eed62:	e7ee      	b.n	23eed42 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x36>
            if (input->bytes != matrix_els) {
 23eed64:	6999      	ldr	r1, [r3, #24]
 23eed66:	4291      	cmp	r1, r2
 23eed68:	d1e4      	bne.n	23eed34 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eed6a:	2100      	movs	r1, #0
                input->data.int8[ix] = static_cast<int8_t>(
 23eed6c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eed70:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23eed74:	4362      	muls	r2, r4
 23eed76:	428a      	cmp	r2, r1
 23eed78:	d9e8      	bls.n	23eed4c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23eed7a:	6802      	ldr	r2, [r0, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 23eed7c:	ed93 7a03 	vldr	s14, [r3, #12]
 23eed80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23eed84:	edd2 6a00 	vldr	s13, [r2]
 23eed88:	eec6 7a87 	vdiv.f32	s15, s13, s14
  { return __builtin_roundf(__x); }
 23eed8c:	fef8 7a67 	vrinta.f32	s15, s15
 23eed90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eed94:	ee17 ca90 	vmov	ip, s15
 23eed98:	691a      	ldr	r2, [r3, #16]
                input->data.int8[ix] = static_cast<int8_t>(
 23eed9a:	685c      	ldr	r4, [r3, #4]
 23eed9c:	4494      	add	ip, r2
 23eed9e:	4662      	mov	r2, ip
 23eeda0:	2a7f      	cmp	r2, #127	; 0x7f
 23eeda2:	bfa8      	it	ge
 23eeda4:	227f      	movge	r2, #127	; 0x7f
 23eeda6:	42aa      	cmp	r2, r5
 23eeda8:	bfb8      	it	lt
 23eedaa:	462a      	movlt	r2, r5
 23eedac:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eedae:	3101      	adds	r1, #1
 23eedb0:	e7de      	b.n	23eed70 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x64>
            if (input->bytes != matrix_els) {
 23eedb2:	6999      	ldr	r1, [r3, #24]
 23eedb4:	4291      	cmp	r1, r2
 23eedb6:	d1bd      	bne.n	23eed34 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eedb8:	2100      	movs	r1, #0
 23eedba:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23eedbe:	4362      	muls	r2, r4
 23eedc0:	428a      	cmp	r2, r1
 23eedc2:	d9c3      	bls.n	23eed4c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23eedc4:	6802      	ldr	r2, [r0, #0]
 23eedc6:	ed93 7a03 	vldr	s14, [r3, #12]
 23eedca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23eedce:	edd2 6a00 	vldr	s13, [r2]
 23eedd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23eedd6:	fef8 7a67 	vrinta.f32	s15, s15
 23eedda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eedde:	ee17 5a90 	vmov	r5, s15
 23eede2:	691a      	ldr	r2, [r3, #16]
                input->data.uint8[ix] = static_cast<uint8_t>(
 23eede4:	685c      	ldr	r4, [r3, #4]
 23eede6:	4415      	add	r5, r2
 23eede8:	f385 0208 	usat	r2, #8, r5
 23eedec:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23eedee:	3101      	adds	r1, #1
 23eedf0:	e7e3      	b.n	23eedba <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xae>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 23eedf2:	4804      	ldr	r0, [pc, #16]	; (23eee04 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf8>)
 23eedf4:	f002 f95a 	bl	23f10ac <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 23eedf8:	f06f 000c 	mvn.w	r0, #12
 23eedfc:	e7a7      	b.n	23eed4e <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
 23eedfe:	bf00      	nop
 23eee00:	023fc170 	.word	0x023fc170
 23eee04:	023fc1b1 	.word	0x023fc1b1

023eee08 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 23eee08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eee0c:	ed2d 8b04 	vpush	{d8-d9}

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (impulse->object_detection) {
 23eee10:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
) {
 23eee14:	4607      	mov	r7, r0
 23eee16:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    if (impulse->object_detection) {
 23eee1a:	b304      	cbz	r4, 23eee5e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x56>
        switch (impulse->object_detection_last_layer) {
 23eee1c:	f990 3044 	ldrsb.w	r3, [r0, #68]	; 0x44
 23eee20:	1e5a      	subs	r2, r3, #1
 23eee22:	2a05      	cmp	r2, #5
 23eee24:	d818      	bhi.n	23eee58 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x50>
 23eee26:	e8df f002 	tbb	[pc, r2]
 23eee2a:	7b03      	.short	0x7b03
 23eee2c:	7b0c7b0c 	.word	0x7b0c7b0c
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 23eee30:	483d      	ldr	r0, [pc, #244]	; (23eef28 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x120>)
 23eee32:	f002 f93b 	bl	23f10ac <_Z9ei_printfPKcz>
                        output->data.f,
                        impulse->tflite_output_features_count);
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 23eee36:	f06f 0009 	mvn.w	r0, #9
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
        }
    }

    return fill_res;
}
 23eee3a:	ecbd 8b04 	vpop	{d8-d9}
 23eee3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
 23eee42:	7809      	ldrb	r1, [r1, #0]
 23eee44:	2909      	cmp	r1, #9
 23eee46:	d06b      	beq.n	23eef20 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                else if (output->type == kTfLiteFloat32) {
 23eee48:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23eee4c:	2b01      	cmp	r3, #1
 23eee4e:	d067      	beq.n	23eef20 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 23eee50:	4836      	ldr	r0, [pc, #216]	; (23eef2c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x124>)
 23eee52:	f002 f92b 	bl	23f10ac <_Z9ei_printfPKcz>
 23eee56:	e7ee      	b.n	23eee36 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x2e>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 23eee58:	4619      	mov	r1, r3
 23eee5a:	4835      	ldr	r0, [pc, #212]	; (23eef30 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x128>)
 23eee5c:	e7f9      	b.n	23eee52 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x4a>
        if (int8_output) {
 23eee5e:	780b      	ldrb	r3, [r1, #0]
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23eee60:	f8d1 8004 	ldr.w	r8, [r1, #4]
        if (int8_output) {
 23eee64:	2b09      	cmp	r3, #9
 23eee66:	d025      	beq.n	23eeeb4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xac>
 23eee68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                                                                       bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
 23eee6a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 23eef34 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf_float(value);
            ei_printf("\n");
 23eee6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23eef38 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eee72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23eee76:	42a3      	cmp	r3, r4
 23eee78:	d92b      	bls.n	23eeed2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xca>
        float value = data[ix];
 23eee7a:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
 23eee7e:	ea4f 0984 	mov.w	r9, r4, lsl #2
 23eee82:	b16e      	cbz	r6, 23eeea0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x98>
            ei_printf("%s:\t", impulse->categories[ix]);
 23eee84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23eee88:	4658      	mov	r0, fp
 23eee8a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23eee8e:	f002 f90d 	bl	23f10ac <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23eee92:	eeb0 0a48 	vmov.f32	s0, s16
 23eee96:	f002 f929 	bl	23f10ec <_Z15ei_printf_floatf>
            ei_printf("\n");
 23eee9a:	4650      	mov	r0, sl
 23eee9c:	f002 f906 	bl	23f10ac <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 23eeea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eeea4:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23eeea6:	f853 3009 	ldr.w	r3, [r3, r9]
 23eeeaa:	3508      	adds	r5, #8
 23eeeac:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23eeeae:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eeeb2:	e7de      	b.n	23eee72 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x6a>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23eeeb4:	edd1 7a04 	vldr	s15, [r1, #16]
 23eeeb8:	ed91 9a03 	vldr	s18, [r1, #12]
 23eeebc:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eeec0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ei_printf("%s:\t", impulse->categories[ix]);
 23eeec2:	f8df b070 	ldr.w	fp, [pc, #112]	; 23eef34 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf("\n");
 23eeec6:	f8df 9070 	ldr.w	r9, [pc, #112]	; 23eef38 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eeeca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23eeece:	42a3      	cmp	r3, r4
 23eeed0:	d801      	bhi.n	23eeed6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xce>
 23eeed2:	2000      	movs	r0, #0
 23eeed4:	e7b1      	b.n	23eee3a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 23eeed6:	f918 3004 	ldrsb.w	r3, [r8, r4]
 23eeeda:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 23eeede:	ee08 3a10 	vmov	s16, r3
 23eeee2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23eeee6:	ee38 8a68 	vsub.f32	s16, s16, s17
 23eeeea:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
 23eeeee:	b16e      	cbz	r6, 23eef0c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x104>
            ei_printf("%s:\t", impulse->categories[ix]);
 23eeef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23eeef4:	4658      	mov	r0, fp
 23eeef6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23eeefa:	f002 f8d7 	bl	23f10ac <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23eeefe:	eeb0 0a48 	vmov.f32	s0, s16
 23eef02:	f002 f8f3 	bl	23f10ec <_Z15ei_printf_floatf>
            ei_printf("\n");
 23eef06:	4648      	mov	r0, r9
 23eef08:	f002 f8d0 	bl	23f10ac <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
 23eef0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eef10:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23eef12:	f853 300a 	ldr.w	r3, [r3, sl]
 23eef16:	3508      	adds	r5, #8
 23eef18:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23eef1a:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23eef1e:	e7d4      	b.n	23eeeca <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xc2>
                    fill_res = fill_result_struct_quantized_yolov5(
 23eef20:	f06f 0014 	mvn.w	r0, #20
 23eef24:	e789      	b.n	23eee3a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
 23eef26:	bf00      	nop
 23eef28:	023fc1d5 	.word	0x023fc1d5
 23eef2c:	023fc21a 	.word	0x023fc21a
 23eef30:	023fc24f 	.word	0x023fc24f
 23eef34:	023fc282 	.word	0x023fc282
 23eef38:	023fc418 	.word	0x023fc418

023eef3c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
 23eef3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23eef40:	4699      	mov	r9, r3
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {

    if(config->model_invoke() != kTfLiteOk) {
 23eef42:	688b      	ldr	r3, [r1, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
 23eef44:	4607      	mov	r7, r0
 23eef46:	460d      	mov	r5, r1
 23eef48:	4614      	mov	r4, r2
 23eef4a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 23eef4c:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    if(config->model_invoke() != kTfLiteOk) {
 23eef50:	4798      	blx	r3
 23eef52:	bb58      	cbnz	r0, 23eefac <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x70>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 23eef54:	f002 f8a4 	bl	23f10a0 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23eef58:	1b00      	subs	r0, r0, r4
 23eef5a:	eb61 0109 	sbc.w	r1, r1, r9
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23eef5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eef62:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23eef64:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23eef68:	f7fb f8b6 	bl	23ea0d8 <__aeabi_ldivmod>
 23eef6c:	4601      	mov	r1, r0
 23eef6e:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 23eef72:	f1b8 0f00 	cmp.w	r8, #0
 23eef76:	d002      	beq.n	23eef7e <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x42>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 23eef78:	480e      	ldr	r0, [pc, #56]	; (23eefb4 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
 23eef7a:	f002 f897 	bl	23f10ac <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 23eef7e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 23eef82:	4638      	mov	r0, r7
 23eef84:	e9cd 6800 	strd	r6, r8, [sp]
 23eef88:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eef8a:	f7ff ff3d 	bl	23eee08 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>
 23eef8e:	4604      	mov	r4, r0
        impulse, output, labels_tensor, scores_tensor, result, debug);

    config->model_reset(ei_aligned_free);
 23eef90:	68eb      	ldr	r3, [r5, #12]
 23eef92:	4809      	ldr	r0, [pc, #36]	; (23eefb8 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x7c>)
 23eef94:	4798      	blx	r3

    if (fill_res != EI_IMPULSE_OK) {
 23eef96:	b92c      	cbnz	r4, 23eefa4 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23eef98:	f002 f880 	bl	23f109c <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
 23eef9c:	3002      	adds	r0, #2
 23eef9e:	bf08      	it	eq
 23eefa0:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
 23eefa4:	4620      	mov	r0, r4
 23eefa6:	b003      	add	sp, #12
 23eefa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_TFLITE_ERROR;
 23eefac:	f06f 0402 	mvn.w	r4, #2
 23eefb0:	e7f8      	b.n	23eefa4 <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
 23eefb2:	bf00      	nop
 23eefb4:	023fc287 	.word	0x023fc287
 23eefb8:	023edcd1 	.word	0x023edcd1

023eefbc <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23eefbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23eefc0:	4604      	mov	r4, r0
 23eefc2:	4689      	mov	r9, r1
 23eefc4:	4692      	mov	sl, r2
 23eefc6:	461e      	mov	r6, r3
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23eefc8:	2500      	movs	r5, #0
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23eefca:	270c      	movs	r7, #12
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23eefcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23eefce:	42ab      	cmp	r3, r5
 23eefd0:	d910      	bls.n	23eeff4 <run_inference+0x38>
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23eefd2:	fb07 f005 	mul.w	r0, r7, r5
 23eefd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23eefd8:	9600      	str	r6, [sp, #0]
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23eefda:	eb03 0c00 	add.w	ip, r3, r0
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23eefde:	f853 8000 	ldr.w	r8, [r3, r0]
 23eefe2:	4652      	mov	r2, sl
 23eefe4:	4649      	mov	r1, r9
 23eefe6:	4620      	mov	r0, r4
 23eefe8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 23eefec:	47c0      	blx	r8
        if (res != EI_IMPULSE_OK) {
 23eefee:	b930      	cbnz	r0, 23eeffe <run_inference+0x42>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23eeff0:	3501      	adds	r5, #1
 23eeff2:	e7eb      	b.n	23eefcc <run_inference+0x10>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23eeff4:	f002 f852 	bl	23f109c <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
 23eeff8:	1c83      	adds	r3, r0, #2
 23eeffa:	bf18      	it	ne
 23eeffc:	2000      	movne	r0, #0
}
 23eeffe:	b002      	add	sp, #8
 23ef000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023ef004 <setup>:
{
 23ef004:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23ef006:	2000      	movs	r0, #0
 23ef008:	f005 fa44 	bl	23f4494 <hal_timer_millis>
        while (_while() && !_condition()) {
 23ef00c:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23ef010:	4604      	mov	r4, r0
 23ef012:	2000      	movs	r0, #0
 23ef014:	f005 fa3e 	bl	23f4494 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23ef018:	1b00      	subs	r0, r0, r4
 23ef01a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23ef01e:	42a8      	cmp	r0, r5
 23ef020:	f171 0300 	sbcs.w	r3, r1, #0
 23ef024:	d207      	bcs.n	23ef036 <setup+0x32>
    waitFor(Serial.isConnected, 15000);
 23ef026:	f005 ffc7 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23ef02a:	f005 ffba 	bl	23f4fa2 <_ZN9USBSerial11isConnectedEv>
 23ef02e:	b910      	cbnz	r0, 23ef036 <setup+0x32>
            spark_process();
 23ef030:	f005 fa92 	bl	23f4558 <spark_process>
        while (_while() && !_condition()) {
 23ef034:	e7ed      	b.n	23ef012 <setup+0xe>
 23ef036:	f005 ffbf 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23ef03a:	f005 ffb2 	bl	23f4fa2 <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23ef03e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ef042:	f006 f915 	bl	23f5270 <delay>
    ei_printf("Edge Impulse inference runner for Particle devices\r\n");
 23ef046:	4828      	ldr	r0, [pc, #160]	; (23ef0e8 <setup+0xe4>)
 23ef048:	f002 f830 	bl	23f10ac <_Z9ei_printfPKcz>
    int err = Microphone_PDM::instance()
 23ef04c:	f004 feca 	bl	23f3de4 <_ZN14Microphone_PDM8instanceEv>
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
 23ef050:	2101      	movs	r1, #1
 23ef052:	2208      	movs	r2, #8
 23ef054:	e9c0 1204 	strd	r1, r2, [r0, #16]
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
 23ef058:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
        .init();
 23ef05c:	6803      	ldr	r3, [r0, #0]
 23ef05e:	60c2      	str	r2, [r0, #12]
 23ef060:	68db      	ldr	r3, [r3, #12]
 23ef062:	4798      	blx	r3
    if (err) {
 23ef064:	4601      	mov	r1, r0
 23ef066:	b110      	cbz	r0, 23ef06e <setup+0x6a>
        ei_printf("PDM decoder init err=%d", err);
 23ef068:	4820      	ldr	r0, [pc, #128]	; (23ef0ec <setup+0xe8>)
 23ef06a:	f002 f81f 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("Inferencing settings:\n");
 23ef06e:	4820      	ldr	r0, [pc, #128]	; (23ef0f0 <setup+0xec>)
 23ef070:	f002 f81c 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("\tInterval: %.2f ms.\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 23ef074:	2200      	movs	r2, #0
 23ef076:	4b1f      	ldr	r3, [pc, #124]	; (23ef0f4 <setup+0xf0>)
 23ef078:	481f      	ldr	r0, [pc, #124]	; (23ef0f8 <setup+0xf4>)
 23ef07a:	f002 f817 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("\tFrame size: %d\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 23ef07e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23ef082:	481e      	ldr	r0, [pc, #120]	; (23ef0fc <setup+0xf8>)
 23ef084:	f002 f812 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("\tSample length: %d ms.\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 23ef088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23ef08c:	481c      	ldr	r0, [pc, #112]	; (23ef100 <setup+0xfc>)
 23ef08e:	f002 f80d 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("\tNo. of classes: %d\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 23ef092:	2109      	movs	r1, #9
 23ef094:	481b      	ldr	r0, [pc, #108]	; (23ef104 <setup+0x100>)
 23ef096:	f002 f809 	bl	23f10ac <_Z9ei_printfPKcz>
    inference.buffer = (int16_t *)malloc(n_samples * sizeof(int16_t));
 23ef09a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 23ef09e:	f005 fb65 	bl	23f476c <malloc>
 23ef0a2:	4c19      	ldr	r4, [pc, #100]	; (23ef108 <setup+0x104>)
 23ef0a4:	6020      	str	r0, [r4, #0]
    if(inference.buffer == NULL) {
 23ef0a6:	b1b0      	cbz	r0, 23ef0d6 <setup+0xd2>
    inference.n_samples  = n_samples;
 23ef0a8:	2300      	movs	r3, #0
 23ef0aa:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
    inference.buf_ready  = 0;
 23ef0ae:	7123      	strb	r3, [r4, #4]
    inference.n_samples  = n_samples;
 23ef0b0:	e9c4 3202 	strd	r3, r2, [r4, #8]
    if (Microphone_PDM::instance().start()) {
 23ef0b4:	f004 fe96 	bl	23f3de4 <_ZN14Microphone_PDM8instanceEv>
 23ef0b8:	6803      	ldr	r3, [r0, #0]
 23ef0ba:	695b      	ldr	r3, [r3, #20]
 23ef0bc:	4798      	blx	r3
 23ef0be:	b188      	cbz	r0, 23ef0e4 <setup+0xe0>
        ei_printf("Failed to start PDM!");
 23ef0c0:	4812      	ldr	r0, [pc, #72]	; (23ef10c <setup+0x108>)
 23ef0c2:	f001 fff3 	bl	23f10ac <_Z9ei_printfPKcz>
/**
 * @brief      Stop PDM and release buffers
 */
static void microphone_inference_end(void)
{
    Microphone_PDM::instance().stop();
 23ef0c6:	f004 fe8d 	bl	23f3de4 <_ZN14Microphone_PDM8instanceEv>
 23ef0ca:	6803      	ldr	r3, [r0, #0]
 23ef0cc:	699b      	ldr	r3, [r3, #24]
 23ef0ce:	4798      	blx	r3
    free(inference.buffer);
 23ef0d0:	6820      	ldr	r0, [r4, #0]
 23ef0d2:	f005 fb59 	bl	23f4788 <free>
}
 23ef0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ei_printf("ERR: Could not allocate audio buffer (size %d), this could be due to the window length of your model\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT);
 23ef0da:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 23ef0de:	480c      	ldr	r0, [pc, #48]	; (23ef110 <setup+0x10c>)
 23ef0e0:	f001 bfe4 	b.w	23f10ac <_Z9ei_printfPKcz>
}
 23ef0e4:	bd38      	pop	{r3, r4, r5, pc}
 23ef0e6:	bf00      	nop
 23ef0e8:	023fc2a4 	.word	0x023fc2a4
 23ef0ec:	023fc2d9 	.word	0x023fc2d9
 23ef0f0:	023fc2f1 	.word	0x023fc2f1
 23ef0f4:	3fb00000 	.word	0x3fb00000
 23ef0f8:	023fc308 	.word	0x023fc308
 23ef0fc:	023fc31d 	.word	0x023fc31d
 23ef100:	023fc32e 	.word	0x023fc32e
 23ef104:	023fc346 	.word	0x023fc346
 23ef108:	1007a5c8 	.word	0x1007a5c8
 23ef10c:	023fc35b 	.word	0x023fc35b
 23ef110:	023fc370 	.word	0x023fc370
 23ef114:	00000000 	.word	0x00000000

023ef118 <_Z22print_inference_result19ei_impulse_result_t>:
void print_inference_result(ei_impulse_result_t result) {
 23ef118:	b084      	sub	sp, #16
 23ef11a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if (result.classification[i].value > 0.7) {
 23ef11e:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 23ef122:	e9d9 8900 	ldrd	r8, r9, [r9]
void print_inference_result(ei_impulse_result_t result) {
 23ef126:	ac0a      	add	r4, sp, #40	; 0x28
 23ef128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
 23ef12c:	e9dd 2342 	ldrd	r2, r3, [sp, #264]	; 0x108
 23ef130:	9941      	ldr	r1, [sp, #260]	; 0x104
 23ef132:	4829      	ldr	r0, [pc, #164]	; (23ef1d8 <_Z22print_inference_result19ei_impulse_result_t+0xc0>)
 23ef134:	f001 ffba 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("Predictions:\r\n");
 23ef138:	4828      	ldr	r0, [pc, #160]	; (23ef1dc <_Z22print_inference_result19ei_impulse_result_t+0xc4>)
 23ef13a:	f001 ffb7 	bl	23f10ac <_Z9ei_printfPKcz>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23ef13e:	4627      	mov	r7, r4
    ei_printf("Predictions:\r\n");
 23ef140:	2600      	movs	r6, #0
 23ef142:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23ef20c <_Z22print_inference_result19ei_impulse_result_t+0xf4>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23ef146:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 23ef210 <_Z22print_inference_result19ei_impulse_result_t+0xf8>
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23ef14a:	f85a 1b04 	ldr.w	r1, [sl], #4
 23ef14e:	4824      	ldr	r0, [pc, #144]	; (23ef1e0 <_Z22print_inference_result19ei_impulse_result_t+0xc8>)
 23ef150:	f001 ffac 	bl	23f10ac <_Z9ei_printfPKcz>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23ef154:	68f8      	ldr	r0, [r7, #12]
 23ef156:	f7fa fc1f 	bl	23e9998 <__aeabi_f2d>
 23ef15a:	4604      	mov	r4, r0
 23ef15c:	460d      	mov	r5, r1
 23ef15e:	4602      	mov	r2, r0
 23ef160:	460b      	mov	r3, r1
 23ef162:	4658      	mov	r0, fp
 23ef164:	f001 ffa2 	bl	23f10ac <_Z9ei_printfPKcz>
        if (result.classification[i].value > 0.7) {
 23ef168:	4642      	mov	r2, r8
 23ef16a:	464b      	mov	r3, r9
 23ef16c:	4620      	mov	r0, r4
 23ef16e:	4629      	mov	r1, r5
 23ef170:	f7fa fefa 	bl	23e9f68 <__aeabi_dcmpgt>
 23ef174:	b338      	cbz	r0, 23ef1c6 <_Z22print_inference_result19ei_impulse_result_t+0xae>
            if (peer.connected()) {
 23ef176:	481b      	ldr	r0, [pc, #108]	; (23ef1e4 <_Z22print_inference_result19ei_impulse_result_t+0xcc>)
 23ef178:	f007 fe4a 	bl	23f6e10 <_ZNK8particle13BlePeerDevice9connectedEv>
 23ef17c:	b318      	cbz	r0, 23ef1c6 <_Z22print_inference_result19ei_impulse_result_t+0xae>
                rx_characteristic.setValue("\x01");
 23ef17e:	2200      	movs	r2, #0
 23ef180:	4919      	ldr	r1, [pc, #100]	; (23ef1e8 <_Z22print_inference_result19ei_impulse_result_t+0xd0>)
 23ef182:	481a      	ldr	r0, [pc, #104]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef184:	f007 fdb8 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
                rx_characteristic.setValue("import display\n");
 23ef188:	2200      	movs	r2, #0
 23ef18a:	4919      	ldr	r1, [pc, #100]	; (23ef1f0 <_Z22print_inference_result19ei_impulse_result_t+0xd8>)
 23ef18c:	4817      	ldr	r0, [pc, #92]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef18e:	f007 fdb3 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
                rx_characteristic.setValue("tt = display.Text(\"");
 23ef192:	2200      	movs	r2, #0
 23ef194:	4917      	ldr	r1, [pc, #92]	; (23ef1f4 <_Z22print_inference_result19ei_impulse_result_t+0xdc>)
 23ef196:	4815      	ldr	r0, [pc, #84]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef198:	f007 fdae 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
                rx_characteristic.setValue(ei_classifier_inferencing_categories[i]);
 23ef19c:	2200      	movs	r2, #0
 23ef19e:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 23ef1a2:	4812      	ldr	r0, [pc, #72]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef1a4:	f007 fda8 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
                rx_characteristic.setValue("\", 250, 150, 0xffffff)\n");
 23ef1a8:	2200      	movs	r2, #0
 23ef1aa:	4913      	ldr	r1, [pc, #76]	; (23ef1f8 <_Z22print_inference_result19ei_impulse_result_t+0xe0>)
 23ef1ac:	480f      	ldr	r0, [pc, #60]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef1ae:	f007 fda3 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
                rx_characteristic.setValue("display.show(tt)\n");
 23ef1b2:	2200      	movs	r2, #0
 23ef1b4:	4911      	ldr	r1, [pc, #68]	; (23ef1fc <_Z22print_inference_result19ei_impulse_result_t+0xe4>)
 23ef1b6:	480d      	ldr	r0, [pc, #52]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef1b8:	f007 fd9e 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
                rx_characteristic.setValue("\x04");
 23ef1bc:	2200      	movs	r2, #0
 23ef1be:	4910      	ldr	r1, [pc, #64]	; (23ef200 <_Z22print_inference_result19ei_impulse_result_t+0xe8>)
 23ef1c0:	480a      	ldr	r0, [pc, #40]	; (23ef1ec <_Z22print_inference_result19ei_impulse_result_t+0xd4>)
 23ef1c2:	f007 fd99 	bl	23f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23ef1c6:	3601      	adds	r6, #1
 23ef1c8:	2e09      	cmp	r6, #9
 23ef1ca:	f107 0708 	add.w	r7, r7, #8
 23ef1ce:	d1bc      	bne.n	23ef14a <_Z22print_inference_result19ei_impulse_result_t+0x32>
}
 23ef1d0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef1d4:	b004      	add	sp, #16
 23ef1d6:	4770      	bx	lr
 23ef1d8:	023fc3d7 	.word	0x023fc3d7
 23ef1dc:	023fc40b 	.word	0x023fc40b
 23ef1e0:	023fc41a 	.word	0x023fc41a
 23ef1e4:	1007a604 	.word	0x1007a604
 23ef1e8:	023fc428 	.word	0x023fc428
 23ef1ec:	1007a60c 	.word	0x1007a60c
 23ef1f0:	023fc42a 	.word	0x023fc42a
 23ef1f4:	023fc43a 	.word	0x023fc43a
 23ef1f8:	023fc44e 	.word	0x023fc44e
 23ef1fc:	023fc466 	.word	0x023fc466
 23ef200:	023fc478 	.word	0x023fc478
 23ef204:	66666666 	.word	0x66666666
 23ef208:	3fe66666 	.word	0x3fe66666
 23ef20c:	10079978 	.word	0x10079978
 23ef210:	023fc421 	.word	0x023fc421

023ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23ef214:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23ef216:	2614      	movs	r6, #20
 23ef218:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23ef21c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23ef21e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23ef222:	42ae      	cmp	r6, r5
 23ef224:	d004      	beq.n	23ef230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23ef226:	4628      	mov	r0, r5
 23ef228:	f009 fc42 	bl	23f8ab0 <_ZN6StringD1Ev>
 23ef22c:	3514      	adds	r5, #20
 23ef22e:	e7f8      	b.n	23ef222 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23ef230:	6820      	ldr	r0, [r4, #0]
 23ef232:	f005 faa9 	bl	23f4788 <free>
    AllocatorT::free(data_);
}
 23ef236:	4620      	mov	r0, r4
 23ef238:	bd70      	pop	{r4, r5, r6, pc}

023ef23a <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 23ef23a:	b510      	push	{r4, lr}
 23ef23c:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23ef23e:	6840      	ldr	r0, [r0, #4]
 23ef240:	b108      	cbz	r0, 23ef246 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
 23ef242:	6823      	ldr	r3, [r4, #0]
 23ef244:	4798      	blx	r3
	__ptr = pointer();
      }
 23ef246:	4620      	mov	r0, r4
 23ef248:	bd10      	pop	{r4, pc}
	...

023ef24c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb>:
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 23ef24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef250:	b0cb      	sub	sp, #300	; 0x12c
 23ef252:	461c      	mov	r4, r3
 23ef254:	4615      	mov	r5, r2
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23ef256:	f8d3 a010 	ldr.w	sl, [r3, #16]
{
 23ef25a:	4680      	mov	r8, r0
 23ef25c:	4689      	mov	r9, r1
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 23ef25e:	f001 ff1f 	bl	23f10a0 <_Z16ei_read_timer_usv>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23ef262:	4b1c      	ldr	r3, [pc, #112]	; (23ef2d4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x88>)
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23ef264:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 23ef268:	9308      	str	r3, [sp, #32]
 23ef26a:	2300      	movs	r3, #0
 23ef26c:	af2a      	add	r7, sp, #168	; 0xa8
 23ef26e:	ae3a      	add	r6, sp, #232	; 0xe8
    uint64_t ctx_start_us = ei_read_timer_us();
 23ef270:	e9cd 0106 	strd	r0, r1, [sp, #24]
 23ef274:	9309      	str	r3, [sp, #36]	; 0x24
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23ef276:	4620      	mov	r0, r4
 23ef278:	465b      	mov	r3, fp
 23ef27a:	9701      	str	r7, [sp, #4]
 23ef27c:	9600      	str	r6, [sp, #0]
 23ef27e:	aa0a      	add	r2, sp, #40	; 0x28
 23ef280:	a906      	add	r1, sp, #24
 23ef282:	f7fe fd83 	bl	23edd8c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23ef286:	4604      	mov	r4, r0
 23ef288:	b9e8      	cbnz	r0, 23ef2c6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x7a>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input);
 23ef28a:	4648      	mov	r0, r9
 23ef28c:	a90a      	add	r1, sp, #40	; 0x28
 23ef28e:	f7ff fd3d 	bl	23eed0c <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>
    if (input_res != EI_IMPULSE_OK) {
 23ef292:	4604      	mov	r4, r0
 23ef294:	b9b8      	cbnz	r0, 23ef2c6 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x7a>
        return input_res;
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23ef296:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 23ef29a:	4651      	mov	r1, sl
 23ef29c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 23ef2a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23ef2a4:	4640      	mov	r0, r8
 23ef2a6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 23ef2aa:	f8cd b000 	str.w	fp, [sp]
 23ef2ae:	f7ff fe45 	bl	23eef3c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
 23ef2b2:	4604      	mov	r4, r0
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23ef2b4:	f001 fef4 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23ef2b8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23ef2bc:	1ac0      	subs	r0, r0, r3
 23ef2be:	eb61 0102 	sbc.w	r1, r1, r2
 23ef2c2:	e9c5 013c 	strd	r0, r1, [r5, #240]	; 0xf0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23ef2c6:	a808      	add	r0, sp, #32
 23ef2c8:	f7ff ffb7 	bl	23ef23a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
 23ef2cc:	4620      	mov	r0, r4
 23ef2ce:	b04b      	add	sp, #300	; 0x12c
 23ef2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ef2d4:	023edcd1 	.word	0x023edcd1

023ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 23ef2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23ef2da:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23ef2dc:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23ef2de:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
 23ef2e2:	b90b      	cbnz	r3, 23ef2e8 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
 23ef2e4:	f009 ffb2 	bl	23f924c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23ef2e8:	68c4      	ldr	r4, [r0, #12]
 23ef2ea:	ab01      	add	r3, sp, #4
 23ef2ec:	aa02      	add	r2, sp, #8
 23ef2ee:	a903      	add	r1, sp, #12
 23ef2f0:	47a0      	blx	r4
    }
 23ef2f2:	b004      	add	sp, #16
 23ef2f4:	bd10      	pop	{r4, pc}
	...

023ef2f8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
        int get_data(size_t offset, size_t length, float *out_buffer) {
 23ef2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef2fc:	ed2d 8b04 	vpush	{d8-d9}
 23ef300:	4698      	mov	r8, r3
            if (!_prev_buffer || !_end_of_signal_buffer) {
 23ef302:	68c3      	ldr	r3, [r0, #12]
        int get_data(size_t offset, size_t length, float *out_buffer) {
 23ef304:	4604      	mov	r4, r0
 23ef306:	460e      	mov	r6, r1
 23ef308:	4617      	mov	r7, r2
 23ef30a:	b085      	sub	sp, #20
            if (!_prev_buffer || !_end_of_signal_buffer) {
 23ef30c:	2b00      	cmp	r3, #0
 23ef30e:	d07a      	beq.n	23ef406 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
 23ef310:	6902      	ldr	r2, [r0, #16]
 23ef312:	2a00      	cmp	r2, #0
 23ef314:	d077      	beq.n	23ef406 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x10e>
            if (offset + length > _signal->total_length) {
 23ef316:	6800      	ldr	r0, [r0, #0]
 23ef318:	eb01 0a07 	add.w	sl, r1, r7
 23ef31c:	6902      	ldr	r2, [r0, #16]
 23ef31e:	4592      	cmp	sl, r2
 23ef320:	d873      	bhi.n	23ef40a <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x112>
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 23ef322:	6862      	ldr	r2, [r4, #4]
 23ef324:	1a89      	subs	r1, r1, r2
 23ef326:	d547      	bpl.n	23ef3b8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xc0>
            ret = _signal->get_data(offset, length, out_buffer);
 23ef328:	4643      	mov	r3, r8
 23ef32a:	463a      	mov	r2, r7
 23ef32c:	4631      	mov	r1, r6
 23ef32e:	6820      	ldr	r0, [r4, #0]
 23ef330:	f7ff ffd2 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
 23ef334:	4605      	mov	r5, r0
 23ef336:	2800      	cmp	r0, #0
 23ef338:	d143      	bne.n	23ef3c2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23ef33a:	46c3      	mov	fp, r8
            bool all_between_min_1_and_1 = true;
 23ef33c:	f04f 0901 	mov.w	r9, #1
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 23ef340:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 23ef344:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
            for (size_t ix = 0; ix < length; ix++) {
 23ef348:	45b2      	cmp	sl, r6
 23ef34a:	d043      	beq.n	23ef3d4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xdc>
                float now = out_buffer[ix];
 23ef34c:	ed9b 8a00 	vldr	s16, [fp]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 23ef350:	6863      	ldr	r3, [r4, #4]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23ef352:	ed94 7a02 	vldr	s14, [r4, #8]
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 23ef356:	42b3      	cmp	r3, r6
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23ef358:	bf8a      	itet	hi
 23ef35a:	6923      	ldrhi	r3, [r4, #16]
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 23ef35c:	68e3      	ldrls	r3, [r4, #12]
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 23ef35e:	eb03 0386 	addhi.w	r3, r3, r6, lsl #2
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 23ef362:	edd3 6a00 	vldr	s13, [r3]
 23ef366:	eef0 7a48 	vmov.f32	s15, s16
 23ef36a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 23ef36e:	eceb 7a01 	vstmia	fp!, {s15}
                if (_rescale && all_between_min_1_and_1) {
 23ef372:	7e23      	ldrb	r3, [r4, #24]
 23ef374:	b183      	cbz	r3, 23ef398 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
 23ef376:	f1b9 0f00 	cmp.w	r9, #0
 23ef37a:	d00d      	beq.n	23ef398 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
                    if (out_buffer[ix] < -1.0f || out_buffer[ix] > 1.0f) {
 23ef37c:	eef4 7ae8 	vcmpe.f32	s15, s17
 23ef380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ef384:	d423      	bmi.n	23ef3ce <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd6>
 23ef386:	eef4 7ac9 	vcmpe.f32	s15, s18
 23ef38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ef38e:	bfd4      	ite	le
 23ef390:	f04f 0901 	movle.w	r9, #1
 23ef394:	f04f 0900 	movgt.w	r9, #0
                if (_shift != 1) {
 23ef398:	6861      	ldr	r1, [r4, #4]
 23ef39a:	2901      	cmp	r1, #1
 23ef39c:	d004      	beq.n	23ef3a8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xb0>
                    numpy::roll(_prev_buffer, _shift, -1);
 23ef39e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ef3a2:	68e0      	ldr	r0, [r4, #12]
 23ef3a4:	f7fe fe0c 	bl	23edfc0 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
 23ef3a8:	6862      	ldr	r2, [r4, #4]
 23ef3aa:	68e3      	ldr	r3, [r4, #12]
 23ef3ac:	3601      	adds	r6, #1
 23ef3ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23ef3b2:	ed03 8a01 	vstr	s16, [r3, #-4]
            for (size_t ix = 0; ix < length; ix++) {
 23ef3b6:	e7c7      	b.n	23ef348 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x50>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 23ef3b8:	f7ff ff8e 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (ret != 0) {
 23ef3bc:	4605      	mov	r5, r0
 23ef3be:	2800      	cmp	r0, #0
 23ef3c0:	d0b2      	beq.n	23ef328 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x30>
        }
 23ef3c2:	4628      	mov	r0, r5
 23ef3c4:	b005      	add	sp, #20
 23ef3c6:	ecbd 8b04 	vpop	{d8-d9}
 23ef3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ef3ce:	f04f 0900 	mov.w	r9, #0
 23ef3d2:	e7e1      	b.n	23ef398 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa0>
            _next_offset_should_be += length;
 23ef3d4:	6963      	ldr	r3, [r4, #20]
 23ef3d6:	443b      	add	r3, r7
 23ef3d8:	6163      	str	r3, [r4, #20]
            if (_rescale && !all_between_min_1_and_1) {
 23ef3da:	7e23      	ldrb	r3, [r4, #24]
 23ef3dc:	2b00      	cmp	r3, #0
 23ef3de:	d0f0      	beq.n	23ef3c2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23ef3e0:	f1b9 0f00 	cmp.w	r9, #0
 23ef3e4:	d1ed      	bne.n	23ef3c2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                matrix_t scale_matrix(length, 1, out_buffer);
 23ef3e6:	4643      	mov	r3, r8
 23ef3e8:	2201      	movs	r2, #1
 23ef3ea:	4639      	mov	r1, r7
 23ef3ec:	4668      	mov	r0, sp
 23ef3ee:	f7fe fdc8 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
        if (scale == 1.0f) return EIDSP_OK;
 23ef3f2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23ef410 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x118>
 23ef3f6:	4668      	mov	r0, sp
 23ef3f8:	f7fe fca6 	bl	23edd48 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
                if (ret != 0) {
 23ef3fc:	4605      	mov	r5, r0
                    EIDSP_ERR(ret);
 23ef3fe:	4668      	mov	r0, sp
                matrix_t scale_matrix(length, 1, out_buffer);
 23ef400:	f7fe fdd4 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23ef404:	e7dd      	b.n	23ef3c2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ef406:	4d03      	ldr	r5, [pc, #12]	; (23ef414 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x11c>)
 23ef408:	e7db      	b.n	23ef3c2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 23ef40a:	4d03      	ldr	r5, [pc, #12]	; (23ef418 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x120>)
 23ef40c:	e7d9      	b.n	23ef3c2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xca>
 23ef40e:	bf00      	nop
 23ef410:	38000000 	.word	0x38000000
 23ef414:	fffffc16 	.word	0xfffffc16
 23ef418:	fffffc0e 	.word	0xfffffc0e

023ef41c <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 23ef41c:	b508      	push	{r3, lr}
 23ef41e:	4613      	mov	r3, r2
    return preemphasis->get_data(offset, length, out_ptr);
 23ef420:	460a      	mov	r2, r1
 23ef422:	4601      	mov	r1, r0
 23ef424:	4802      	ldr	r0, [pc, #8]	; (23ef430 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x14>)
 23ef426:	6800      	ldr	r0, [r0, #0]
 23ef428:	f7ff ff66 	bl	23ef2f8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
}
 23ef42c:	bd08      	pop	{r3, pc}
 23ef42e:	bf00      	nop
 23ef430:	1007a5d8 	.word	0x1007a5d8

023ef434 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>:
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23ef434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef436:	0097      	lsls	r7, r2, #2
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23ef438:	4604      	mov	r4, r0
            : _signal(signal), _shift(shift), _cof(cof), _rescale(rescale)
 23ef43a:	e9c0 1200 	strd	r1, r2, [r0]
 23ef43e:	7603      	strb	r3, [r0, #24]
 23ef440:	ed80 0a02 	vstr	s0, [r0, #8]
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23ef444:	460e      	mov	r6, r1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef446:	4638      	mov	r0, r7
 23ef448:	2101      	movs	r1, #1
        preemphasis(ei_signal_t *signal, int shift, float cof, bool rescale)
 23ef44a:	4615      	mov	r5, r2
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef44c:	f001 fe5d 	bl	23f110a <_Z9ei_callocjj>
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef450:	2101      	movs	r1, #1
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef452:	60e0      	str	r0, [r4, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef454:	4638      	mov	r0, r7
 23ef456:	f001 fe58 	bl	23f110a <_Z9ei_callocjj>
            _next_offset_should_be = 0;
 23ef45a:	2300      	movs	r3, #0
            if (shift < 0) {
 23ef45c:	429d      	cmp	r5, r3
            _next_offset_should_be = 0;
 23ef45e:	6163      	str	r3, [r4, #20]
                _shift = signal->total_length + shift;
 23ef460:	bfb8      	it	lt
 23ef462:	6933      	ldrlt	r3, [r6, #16]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 23ef464:	6120      	str	r0, [r4, #16]
                _shift = signal->total_length + shift;
 23ef466:	bfbc      	itt	lt
 23ef468:	195b      	addlt	r3, r3, r5
 23ef46a:	6063      	strlt	r3, [r4, #4]
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 23ef46c:	68e3      	ldr	r3, [r4, #12]
 23ef46e:	b13b      	cbz	r3, 23ef480 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
 23ef470:	b130      	cbz	r0, 23ef480 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb+0x4c>
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 23ef472:	6931      	ldr	r1, [r6, #16]
 23ef474:	4603      	mov	r3, r0
 23ef476:	462a      	mov	r2, r5
 23ef478:	4630      	mov	r0, r6
 23ef47a:	1b49      	subs	r1, r1, r5
 23ef47c:	f7ff ff2c 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        }
 23ef480:	4620      	mov	r0, r4
 23ef482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ef484 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23ef484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef488:	ed2d 8b02 	vpush	{d8}
 23ef48c:	4606      	mov	r6, r0
 23ef48e:	460f      	mov	r7, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef490:	68d0      	ldr	r0, [r2, #12]
 23ef492:	4942      	ldr	r1, [pc, #264]	; (23ef59c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>)
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23ef494:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23ef496:	f8d2 b008 	ldr.w	fp, [r2, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef49a:	f7fb f81b 	bl	23ea4d4 <strcmp>
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef49e:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef4a0:	2800      	cmp	r0, #0
 23ef4a2:	bf0c      	ite	eq
 23ef4a4:	f04f 0a01 	moveq.w	sl, #1
 23ef4a8:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
 23ef4ac:	4625      	mov	r5, r4

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23ef4ae:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 23ef5a0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ef4b2:	eddf 8a3c 	vldr	s17, [pc, #240]	; 23ef5a4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>
    size_t bytes_left = signal->total_length;
 23ef4b6:	f8d6 8010 	ldr.w	r8, [r6, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef4ba:	6933      	ldr	r3, [r6, #16]
 23ef4bc:	42a3      	cmp	r3, r4
 23ef4be:	d96b      	bls.n	23ef598 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23ef4c0:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23ef4c4:	46c1      	mov	r9, r8
 23ef4c6:	bf28      	it	cs
 23ef4c8:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23ef4cc:	2300      	movs	r3, #0
 23ef4ce:	465a      	mov	r2, fp
 23ef4d0:	4649      	mov	r1, r9
 23ef4d2:	4668      	mov	r0, sp
 23ef4d4:	f7fe fd55 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23ef4d8:	9b00      	ldr	r3, [sp, #0]
 23ef4da:	b943      	cbnz	r3, 23ef4ee <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ef4dc:	4668      	mov	r0, sp
 23ef4de:	f7fe fd65 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23ef4e2:	4831      	ldr	r0, [pc, #196]	; (23ef5a8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
 23ef4e4:	b005      	add	sp, #20
 23ef4e6:	ecbd 8b02 	vpop	{d8}
 23ef4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23ef4ee:	464a      	mov	r2, r9
 23ef4f0:	4621      	mov	r1, r4
 23ef4f2:	4630      	mov	r0, r6
 23ef4f4:	f7ff fef0 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ef4f8:	2200      	movs	r2, #0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ef4fa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 23ef5ac <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
 23ef4fe:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 23ef5b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ef502:	454a      	cmp	r2, r9
 23ef504:	d040      	beq.n	23ef588 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ef506:	9b00      	ldr	r3, [sp, #0]
            if (channel_count == 3) {
 23ef508:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ef50c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23ef510:	edd3 7a00 	vldr	s15, [r3]
 23ef514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ef518:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23ef51c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 23ef520:	ee07 1a90 	vmov	s15, r1
 23ef524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23ef528:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23ef52c:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23ef530:	ee07 1a90 	vmov	s15, r1
 23ef534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23ef538:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23ef53a:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23ef53e:	ee07 3a90 	vmov	s15, r3
 23ef542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
 23ef546:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23ef548:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
 23ef54c:	ea4f 0085 	mov.w	r0, r5, lsl #2
 23ef550:	f105 0101 	add.w	r1, r5, #1
 23ef554:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            if (channel_count == 3) {
 23ef558:	d10d      	bne.n	23ef576 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = r;
 23ef55a:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
 23ef55e:	683b      	ldr	r3, [r7, #0]
                output_matrix->buffer[output_ix++] = b;
 23ef560:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = g;
 23ef562:	4403      	add	r3, r0
 23ef564:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
 23ef568:	683b      	ldr	r3, [r7, #0]
 23ef56a:	4403      	add	r3, r0
 23ef56c:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ef570:	460d      	mov	r5, r1
 23ef572:	3201      	adds	r2, #1
 23ef574:	e7c5      	b.n	23ef502 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ef576:	ee27 7a28 	vmul.f32	s14, s14, s17
 23ef57a:	eea6 7a25 	vfma.f32	s14, s12, s11
 23ef57e:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
 23ef582:	ed83 7a00 	vstr	s14, [r3]
 23ef586:	e7f3      	b.n	23ef570 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
 23ef588:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
 23ef58a:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef58e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23ef592:	f7fe fd0b 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef596:	e790      	b.n	23ef4ba <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
 23ef598:	2000      	movs	r0, #0
 23ef59a:	e7a3      	b.n	23ef4e4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
 23ef59c:	023fc47a 	.word	0x023fc47a
 23ef5a0:	437f0000 	.word	0x437f0000
 23ef5a4:	3f1645a2 	.word	0x3f1645a2
 23ef5a8:	fffffc16 	.word	0xfffffc16
 23ef5ac:	3e991687 	.word	0x3e991687
 23ef5b0:	3de978d5 	.word	0x3de978d5

023ef5b4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23ef5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ef5b8:	6805      	ldr	r5, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23ef5ba:	680c      	ldr	r4, [r1, #0]
 23ef5bc:	f8d3 9000 	ldr.w	r9, [r3]
 23ef5c0:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 23ef5c4:	fbb4 f4f0 	udiv	r4, r4, r0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23ef5c8:	6816      	ldr	r6, [r2, #0]

        size_t out_ptr_ix = 0;
 23ef5ca:	f04f 0800 	mov.w	r8, #0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23ef5ce:	fbb6 f6f0 	udiv	r6, r6, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23ef5d2:	699b      	ldr	r3, [r3, #24]

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23ef5d4:	435c      	muls	r4, r3
 23ef5d6:	fb03 4606 	mla	r6, r3, r6, r4
 23ef5da:	42a6      	cmp	r6, r4
 23ef5dc:	d919      	bls.n	23ef612 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23ef5de:	2700      	movs	r7, #0
 23ef5e0:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 23ef5e4:	68aa      	ldr	r2, [r5, #8]
 23ef5e6:	eb07 0308 	add.w	r3, r7, r8
 23ef5ea:	42ba      	cmp	r2, r7
 23ef5ec:	d90c      	bls.n	23ef608 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 23ef5ee:	686b      	ldr	r3, [r5, #4]
 23ef5f0:	2201      	movs	r2, #1
 23ef5f2:	5dd9      	ldrb	r1, [r3, r7]
 23ef5f4:	6828      	ldr	r0, [r5, #0]
 23ef5f6:	4653      	mov	r3, sl
 23ef5f8:	4421      	add	r1, r4
 23ef5fa:	f7ff fe6d 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
 23ef5fe:	f10a 0a04 	add.w	sl, sl, #4
 23ef602:	b938      	cbnz	r0, 23ef614 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23ef604:	3701      	adds	r7, #1
 23ef606:	e7ed      	b.n	23ef5e4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23ef608:	68ea      	ldr	r2, [r5, #12]
 23ef60a:	4698      	mov	r8, r3
 23ef60c:	6992      	ldr	r2, [r2, #24]
 23ef60e:	4414      	add	r4, r2
 23ef610:	e7e3      	b.n	23ef5da <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x26>
                    return r;
                }
            }
        }

        return 0;
 23ef612:	2000      	movs	r0, #0
      }
 23ef614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023ef618 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
 23ef618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef61c:	ed2d 8b06 	vpush	{d8-d10}
 23ef620:	461c      	mov	r4, r3
 23ef622:	4616      	mov	r6, r2
 23ef624:	b0d7      	sub	sp, #348	; 0x15c
 23ef626:	f89d 3198 	ldrb.w	r3, [sp, #408]	; 0x198

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    memset(result, 0, sizeof(ei_impulse_result_t));
 23ef62a:	f44f 7280 	mov.w	r2, #256	; 0x100
    bool debug = false) {
 23ef62e:	9309      	str	r3, [sp, #36]	; 0x24
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23ef630:	6923      	ldr	r3, [r4, #16]
    bool debug = false) {
 23ef632:	4607      	mov	r7, r0
 23ef634:	468a      	mov	sl, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23ef636:	4630      	mov	r0, r6
 23ef638:	2100      	movs	r1, #0
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23ef63a:	ee0a 3a10 	vmov	s20, r3
    memset(result, 0, sizeof(ei_impulse_result_t));
 23ef63e:	f00b fd41 	bl	23fb0c4 <memset>
 23ef642:	4bcf      	ldr	r3, [pc, #828]	; (23ef980 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>)
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23ef644:	4620      	mov	r0, r4
 23ef646:	9310      	str	r3, [sp, #64]	; 0x40
 23ef648:	2300      	movs	r3, #0
 23ef64a:	9311      	str	r3, [sp, #68]	; 0x44
 23ef64c:	ab36      	add	r3, sp, #216	; 0xd8
 23ef64e:	9301      	str	r3, [sp, #4]
 23ef650:	ab46      	add	r3, sp, #280	; 0x118
 23ef652:	9300      	str	r3, [sp, #0]
 23ef654:	aa16      	add	r2, sp, #88	; 0x58
 23ef656:	ab26      	add	r3, sp, #152	; 0x98
 23ef658:	a90e      	add	r1, sp, #56	; 0x38
 23ef65a:	f7fe fb97 	bl	23edd8c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23ef65e:	4605      	mov	r5, r0
 23ef660:	2800      	cmp	r0, #0
 23ef662:	d15b      	bne.n	23ef71c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
 23ef664:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23ef668:	2b09      	cmp	r3, #9
 23ef66a:	d002      	beq.n	23ef672 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5a>
 23ef66c:	2b03      	cmp	r3, #3
 23ef66e:	f040 820e 	bne.w	23efa8e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x476>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 23ef672:	f001 fd15 	bl	23f10a0 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23ef676:	693b      	ldr	r3, [r7, #16]
 23ef678:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    uint64_t dsp_start_us = ei_read_timer_us();
 23ef67a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23ef67e:	9307      	str	r3, [sp, #28]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23ef680:	2c00      	cmp	r4, #0
 23ef682:	d154      	bne.n	23ef72e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23ef684:	4618      	mov	r0, r3
 23ef686:	2101      	movs	r1, #1
 23ef688:	f001 fd3f 	bl	23f110a <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23ef68c:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23ef68e:	4604      	mov	r4, r0
            buffer_managed_by_me = false;
 23ef690:	9308      	str	r3, [sp, #32]

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23ef692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23ef694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23ef696:	689b      	ldr	r3, [r3, #8]
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23ef698:	f8d2 8008 	ldr.w	r8, [r2, #8]

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23ef69c:	689a      	ldr	r2, [r3, #8]

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef69e:	68d8      	ldr	r0, [r3, #12]
 23ef6a0:	49b8      	ldr	r1, [pc, #736]	; (23ef984 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23ef6a2:	ee0a 2a90 	vmov	s21, r2
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef6a6:	f7fa ff15 	bl	23ea4d4 <strcmp>
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23ef6aa:	ed9d 8a1a 	vldr	s16, [sp, #104]	; 0x68
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef6ae:	f04f 0900 	mov.w	r9, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef6b2:	2800      	cmp	r0, #0
 23ef6b4:	bf0c      	ite	eq
 23ef6b6:	2301      	moveq	r3, #1
 23ef6b8:	2303      	movne	r3, #3
 23ef6ba:	eddd 8a19 	vldr	s17, [sp, #100]	; 0x64
 23ef6be:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    size_t output_ix = 0;
 23ef6c2:	464d      	mov	r5, r9
 23ef6c4:	ed9f 9ab0 	vldr	s18, [pc, #704]	; 23ef988 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
                        b = (b - torch_mean[2]) / torch_std[2];
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ef6c8:	eddf 9ab0 	vldr	s19, [pc, #704]	; 23ef98c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ef6cc:	930a      	str	r3, [sp, #40]	; 0x28
    size_t bytes_left = signal->total_length;
 23ef6ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 23ef6d2:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef6d4:	f8da 3010 	ldr.w	r3, [sl, #16]
 23ef6d8:	454b      	cmp	r3, r9
 23ef6da:	f240 817d 	bls.w	23ef9d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23ef6de:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23ef6e0:	ee1a 2a90 	vmov	r2, s21
 23ef6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23ef6e8:	bf28      	it	cs
 23ef6ea:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 23ef6ee:	469b      	mov	fp, r3
 23ef6f0:	a812      	add	r0, sp, #72	; 0x48
 23ef6f2:	2300      	movs	r3, #0
 23ef6f4:	4659      	mov	r1, fp
 23ef6f6:	f7fe fc44 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23ef6fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ef6fc:	b9cb      	cbnz	r3, 23ef732 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x11a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ef6fe:	a812      	add	r0, sp, #72	; 0x48
 23ef700:	f7fe fc54 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>

    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23ef704:	49a2      	ldr	r1, [pc, #648]	; (23ef990 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>)
 23ef706:	48a3      	ldr	r0, [pc, #652]	; (23ef994 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>)
 23ef708:	f001 fcd0 	bl	23f10ac <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 23ef70c:	f06f 0504 	mvn.w	r5, #4
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
 23ef710:	b124      	cbz	r4, 23ef71c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
 23ef712:	9b08      	ldr	r3, [sp, #32]
 23ef714:	b113      	cbz	r3, 23ef71c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
            ei_free(buffer);
 23ef716:	4620      	mov	r0, r4
 23ef718:	f001 fcf9 	bl	23f110e <_Z7ei_freePv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23ef71c:	a810      	add	r0, sp, #64	; 0x40
 23ef71e:	f7ff fd8c 	bl	23ef23a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
 23ef722:	4628      	mov	r0, r5
 23ef724:	b057      	add	sp, #348	; 0x15c
 23ef726:	ecbd 8b06 	vpop	{d8-d10}
 23ef72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer_managed_by_me = false;
 23ef72e:	2300      	movs	r3, #0
 23ef730:	e7ae      	b.n	23ef690 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x78>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23ef732:	4649      	mov	r1, r9
 23ef734:	465a      	mov	r2, fp
 23ef736:	4650      	mov	r0, sl
 23ef738:	f7ff fdce 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ef73c:	2100      	movs	r1, #0
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ef73e:	eddf 3a96 	vldr	s7, [pc, #600]	; 23ef998 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x380>
 23ef742:	ed9f 3a96 	vldr	s6, [pc, #600]	; 23ef99c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x384>
                        r /= 255.0f;
 23ef746:	ed9f 6a96 	vldr	s12, [pc, #600]	; 23ef9a0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x388>
                        r = (r - torch_mean[0]) / torch_std[0];
 23ef74a:	eddf 5a96 	vldr	s11, [pc, #600]	; 23ef9a4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x38c>
 23ef74e:	ed9f 5a96 	vldr	s10, [pc, #600]	; 23ef9a8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
                        g = (g - torch_mean[1]) / torch_std[1];
 23ef752:	eddf 4a96 	vldr	s9, [pc, #600]	; 23ef9ac <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
 23ef756:	ed9f 4a96 	vldr	s8, [pc, #600]	; 23ef9b0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ef75a:	458b      	cmp	fp, r1
 23ef75c:	f000 8132 	beq.w	23ef9c4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ac>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ef760:	9b12      	ldr	r3, [sp, #72]	; 0x48
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef762:	f105 0e01 	add.w	lr, r5, #1
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ef766:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23ef76a:	edd3 7a00 	vldr	s15, [r3]
 23ef76e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ef772:	ee17 3a90 	vmov	r3, s15
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 23ef776:	0a1a      	lsrs	r2, r3, #8
 23ef778:	920b      	str	r2, [sp, #44]	; 0x2c
            if (channel_count == 3) {
 23ef77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef77c:	1960      	adds	r0, r4, r5
            if (channel_count == 3) {
 23ef77e:	2a03      	cmp	r2, #3
 23ef780:	f3c3 4207 	ubfx	r2, r3, #16, #8
 23ef784:	ee07 2a10 	vmov	s14, r2
 23ef788:	f3c3 2207 	ubfx	r2, r3, #8, #8
 23ef78c:	ee07 2a90 	vmov	s15, r2
 23ef790:	b2da      	uxtb	r2, r3
 23ef792:	ee06 2a90 	vmov	s13, r2
 23ef796:	f040 8087 	bne.w	23ef8a8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x290>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ef79a:	eef4 8a49 	vcmp.f32	s17, s18
 23ef79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7a2:	eb04 0c0e 	add.w	ip, r4, lr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ef7a6:	f105 0e03 	add.w	lr, r5, #3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7aa:	f105 0502 	add.w	r5, r5, #2
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ef7ae:	4425      	add	r5, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ef7b0:	d12a      	bne.n	23ef808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
 23ef7b2:	eddf 2a80 	vldr	s5, [pc, #512]	; 23ef9b4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
 23ef7b6:	eeb4 8a62 	vcmp.f32	s16, s5
 23ef7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ef7be:	d123      	bne.n	23ef808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
 23ef7c0:	f1b8 0f00 	cmp.w	r8, #0
 23ef7c4:	d120      	bne.n	23ef808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef7c6:	eddf 2a7c 	vldr	s5, [pc, #496]	; 23ef9b8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
 23ef7ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef7d2:	ee37 7a62 	vsub.f32	s14, s14, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7d6:	ee77 7ae2 	vsub.f32	s15, s15, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ef7da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef7e2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ef7e6:	ee76 6ae2 	vsub.f32	s13, s13, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7ea:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef7ee:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ef7f2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ef7f6:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ef7f8:	f88c 2000 	strb.w	r2, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23ef7fc:	ee17 3a90 	vmov	r3, s15
 23ef800:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ef802:	4675      	mov	r5, lr
 23ef804:	3101      	adds	r1, #1
 23ef806:	e7a8      	b.n	23ef75a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x142>
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23ef808:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                    float b = static_cast<float>(pixel & 0xff);
 23ef80c:	b2db      	uxtb	r3, r3
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23ef80e:	ee07 2a90 	vmov	s15, r2
 23ef812:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float b = static_cast<float>(pixel & 0xff);
 23ef816:	ee07 3a90 	vmov	s15, r3
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23ef81a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float b = static_cast<float>(pixel & 0xff);
 23ef81e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ef822:	f1b8 0f00 	cmp.w	r8, #0
 23ef826:	d125      	bne.n	23ef874 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x25c>
                        r /= 255.0f;
 23ef828:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23ef82c:	eec6 6a86 	vdiv.f32	s13, s13, s12
                        b /= 255.0f;
 23ef830:	eec7 7a86 	vdiv.f32	s15, s15, s12
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23ef834:	eec7 2a28 	vdiv.f32	s5, s14, s17
 23ef838:	feb8 7a62 	vrinta.f32	s14, s5
 23ef83c:	ee38 7a07 	vadd.f32	s14, s16, s14
 23ef840:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23ef844:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23ef848:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 23ef84c:	feb8 7a47 	vrinta.f32	s14, s14
 23ef850:	ee38 7a07 	vadd.f32	s14, s16, s14
 23ef854:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23ef858:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23ef85a:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23ef85e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23ef862:	fef8 7a47 	vrinta.f32	s15, s14
 23ef866:	ee78 7a27 	vadd.f32	s15, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23ef86a:	f88c 3000 	strb.w	r3, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23ef86e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ef872:	e7c3      	b.n	23ef7fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1e4>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23ef874:	f1b8 0f02 	cmp.w	r8, #2
 23ef878:	d1dc      	bne.n	23ef834 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x21c>
                        r /= 255.0f;
 23ef87a:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23ef87e:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23ef882:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23ef886:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23ef88a:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23ef88e:	eec2 6a84 	vdiv.f32	s13, s5, s8
                        b /= 255.0f;
 23ef892:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23ef896:	eddf 7a49 	vldr	s15, [pc, #292]	; 23ef9bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
 23ef89a:	ed9f 2a49 	vldr	s4, [pc, #292]	; 23ef9c0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
 23ef89e:	ee72 2ae7 	vsub.f32	s5, s5, s15
 23ef8a2:	eec2 7a82 	vdiv.f32	s15, s5, s4
 23ef8a6:	e7c5      	b.n	23ef834 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x21c>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ef8a8:	eef4 8a49 	vcmp.f32	s17, s18
 23ef8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ef8b0:	d12c      	bne.n	23ef90c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
 23ef8b2:	eddf 2a40 	vldr	s5, [pc, #256]	; 23ef9b4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
 23ef8b6:	eeb4 8a62 	vcmp.f32	s16, s5
 23ef8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ef8be:	d125      	bne.n	23ef90c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
 23ef8c0:	f1b8 0f00 	cmp.w	r8, #0
 23ef8c4:	d122      	bne.n	23ef90c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f4>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 23ef8c6:	f249 6245 	movw	r2, #38469	; 0x9645
 23ef8ca:	ee17 3a90 	vmov	r3, s15
 23ef8ce:	4353      	muls	r3, r2
 23ef8d0:	ee17 5a10 	vmov	r5, s14
 23ef8d4:	461a      	mov	r2, r3
 23ef8d6:	f644 438b 	movw	r3, #19595	; 0x4c8b
 23ef8da:	fb03 2205 	mla	r2, r3, r5, r2
 23ef8de:	f641 532f 	movw	r3, #7471	; 0x1d2f
 23ef8e2:	ee16 5a90 	vmov	r5, s13
 23ef8e6:	fb03 2305 	mla	r3, r3, r5, r2
                    gray >>= 16; // scale down to int8_t
 23ef8ea:	141b      	asrs	r3, r3, #16
 23ef8ec:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
 23ef8f0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 23ef9b8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
 23ef8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ef8f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23ef8fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ef900:	ee17 3a90 	vmov	r3, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 23ef904:	f303 0307 	ssat	r3, #8, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23ef908:	7003      	strb	r3, [r0, #0]
 23ef90a:	e77a      	b.n	23ef802 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1ea>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23ef90c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23ef910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float b = static_cast<float>(pixel & 0xff);
 23ef914:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ef918:	f1b8 0f00 	cmp.w	r8, #0
 23ef91c:	d116      	bne.n	23ef94c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x334>
                        r /= 255.0f;
 23ef91e:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23ef922:	eec7 7a86 	vdiv.f32	s15, s15, s12
                        b /= 255.0f;
 23ef926:	eec6 6a86 	vdiv.f32	s13, s13, s12
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ef92a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23ef92e:	eee7 7a23 	vfma.f32	s15, s14, s7
 23ef932:	eee6 7a83 	vfma.f32	s15, s13, s6
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23ef936:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23ef93a:	fef8 7a47 	vrinta.f32	s15, s14
 23ef93e:	ee78 7a27 	vadd.f32	s15, s16, s15
 23ef942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ef946:	ee17 3a90 	vmov	r3, s15
 23ef94a:	e7dd      	b.n	23ef908 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f0>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23ef94c:	f1b8 0f02 	cmp.w	r8, #2
 23ef950:	d1eb      	bne.n	23ef92a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
                        r /= 255.0f;
 23ef952:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23ef956:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23ef95a:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23ef95e:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23ef962:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23ef966:	eec2 7a84 	vdiv.f32	s15, s5, s8
                        b /= 255.0f;
 23ef96a:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23ef96e:	eddf 6a13 	vldr	s13, [pc, #76]	; 23ef9bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
 23ef972:	ed9f 2a13 	vldr	s4, [pc, #76]	; 23ef9c0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
 23ef976:	ee72 2ae6 	vsub.f32	s5, s5, s13
 23ef97a:	eec2 6a82 	vdiv.f32	s13, s5, s4
 23ef97e:	e7d4      	b.n	23ef92a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
 23ef980:	023edcd1 	.word	0x023edcd1
 23ef984:	023fc47a 	.word	0x023fc47a
 23ef988:	3b808081 	.word	0x3b808081
 23ef98c:	3f1645a2 	.word	0x3f1645a2
 23ef990:	fffffc16 	.word	0xfffffc16
 23ef994:	023fc484 	.word	0x023fc484
 23ef998:	3e991687 	.word	0x3e991687
 23ef99c:	3de978d5 	.word	0x3de978d5
 23ef9a0:	437f0000 	.word	0x437f0000
 23ef9a4:	3ef851ec 	.word	0x3ef851ec
 23ef9a8:	3e6a7efa 	.word	0x3e6a7efa
 23ef9ac:	3ee978d5 	.word	0x3ee978d5
 23ef9b0:	3e656042 	.word	0x3e656042
 23ef9b4:	c3000000 	.word	0xc3000000
 23ef9b8:	43000000 	.word	0x43000000
 23ef9bc:	3ecfdf3b 	.word	0x3ecfdf3b
 23ef9c0:	3e666666 	.word	0x3e666666
                }
            }
        }

        bytes_left -= elements_to_read;
 23ef9c4:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23ef9c6:	a812      	add	r0, sp, #72	; 0x48
        bytes_left -= elements_to_read;
 23ef9c8:	eba3 030b 	sub.w	r3, r3, fp
 23ef9cc:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef9ce:	f509 6980 	add.w	r9, r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23ef9d2:	f7fe faeb 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ef9d6:	e67d      	b.n	23ef6d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xbc>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23ef9d8:	f001 fb60 	bl	23f109c <_Z29ei_run_impulse_check_canceledv>
 23ef9dc:	1c83      	adds	r3, r0, #2
 23ef9de:	4605      	mov	r5, r0
 23ef9e0:	f43f ae96 	beq.w	23ef710 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23ef9e4:	f001 fb5c 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23ef9e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ef9ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23ef9ee:	1ac0      	subs	r0, r0, r3
 23ef9f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ef9f2:	eb61 0103 	sbc.w	r1, r1, r3
 23ef9f6:	e9c6 013a 	strd	r0, r1, [r6, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ef9fa:	2300      	movs	r3, #0
 23ef9fc:	f7fa fb6c 	bl	23ea0d8 <__aeabi_ldivmod>
    if (debug) {
 23efa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23efa02:	4601      	mov	r1, r0
 23efa04:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
    if (debug) {
 23efa08:	b1fb      	cbz	r3, 23efa4a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x432>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23efa0a:	4822      	ldr	r0, [pc, #136]	; (23efa94 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x47c>)
 23efa0c:	f001 fb4e 	bl	23f10ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23efa10:	9b07      	ldr	r3, [sp, #28]
 23efa12:	4625      	mov	r5, r4
 23efa14:	4423      	add	r3, r4
 23efa16:	4699      	mov	r9, r3
            ei_printf(" ");
 23efa18:	f8df 8080 	ldr.w	r8, [pc, #128]	; 23efa9c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x484>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23efa1c:	45a9      	cmp	r9, r5
 23efa1e:	d011      	beq.n	23efa44 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x42c>
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
 23efa20:	f915 3b01 	ldrsb.w	r3, [r5], #1
 23efa24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23efa26:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 23efa2a:	1a9b      	subs	r3, r3, r2
 23efa2c:	ee07 3a90 	vmov	s15, r3
 23efa30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23efa34:	ee27 0a80 	vmul.f32	s0, s15, s0
 23efa38:	f001 fb58 	bl	23f10ec <_Z15ei_printf_floatf>
            ei_printf(" ");
 23efa3c:	4640      	mov	r0, r8
 23efa3e:	f001 fb35 	bl	23f10ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23efa42:	e7eb      	b.n	23efa1c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
        ei_printf("\n");
 23efa44:	4814      	ldr	r0, [pc, #80]	; (23efa98 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x480>)
 23efa46:	f001 fb31 	bl	23f10ac <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
 23efa4a:	f001 fb29 	bl	23f10a0 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23efa4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ctx_start_us = ei_read_timer_us();
 23efa50:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23efa54:	e9cd 6303 	strd	r6, r3, [sp, #12]
 23efa58:	ab36      	add	r3, sp, #216	; 0xd8
 23efa5a:	9302      	str	r3, [sp, #8]
 23efa5c:	ab46      	add	r3, sp, #280	; 0x118
 23efa5e:	9301      	str	r3, [sp, #4]
 23efa60:	ab26      	add	r3, sp, #152	; 0x98
    ctx_start_us = ei_read_timer_us();
 23efa62:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23efa64:	9300      	str	r3, [sp, #0]
 23efa66:	4638      	mov	r0, r7
 23efa68:	460b      	mov	r3, r1
 23efa6a:	ee1a 1a10 	vmov	r1, s20
 23efa6e:	f7ff fa65 	bl	23eef3c <_ZL20inference_tflite_runPK10ei_impulseP28ei_config_tflite_eon_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    if (run_res != EI_IMPULSE_OK) {
 23efa72:	4605      	mov	r5, r0
 23efa74:	2800      	cmp	r0, #0
 23efa76:	f47f ae4b 	bne.w	23ef710 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23efa7a:	f001 fb11 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23efa7e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 23efa82:	1ac0      	subs	r0, r0, r3
 23efa84:	eb61 0102 	sbc.w	r1, r1, r2
 23efa88:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    return EI_IMPULSE_OK;
 23efa8c:	e640      	b.n	23ef710 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xf8>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 23efa8e:	f06f 0508 	mvn.w	r5, #8
 23efa92:	e643      	b.n	23ef71c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x104>
 23efa94:	023fc57b 	.word	0x023fc57b
 23efa98:	023fc418 	.word	0x023fc418
 23efa9c:	023ffaff 	.word	0x023ffaff

023efaa0 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23efaa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23efaa2:	4615      	mov	r5, r2
 23efaa4:	4604      	mov	r4, r0
 23efaa6:	461f      	mov	r7, r3
 23efaa8:	460e      	mov	r6, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23efaaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 23efaae:	2100      	movs	r1, #0
 23efab0:	4628      	mov	r0, r5
 23efab2:	f00b fb07 	bl	23fb0c4 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
 23efab6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 23efab8:	9700      	str	r7, [sp, #0]
 23efaba:	462a      	mov	r2, r5
 23efabc:	4631      	mov	r1, r6
 23efabe:	4620      	mov	r0, r4
 23efac0:	685b      	ldr	r3, [r3, #4]
 23efac2:	f7ff fda9 	bl	23ef618 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
}
 23efac6:	b003      	add	sp, #12
 23efac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

023efaca <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 23efaca:	b510      	push	{r4, lr}
 23efacc:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 23eface:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 23efad0:	b108      	cbz	r0, 23efad6 <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev+0xc>
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 23efad2:	f001 fb1c 	bl	23f110e <_Z7ei_freePv>
      }
 23efad6:	4620      	mov	r0, r4
 23efad8:	bd10      	pop	{r4, pc}
	...

023efadc <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>:
       *  This function provides for safer data access.  The parameter
       *  is first checked that it is in the range of the vector.  The
       *  function throws out_of_range if the check fails.
       */
      reference
      at(size_type __n)
 23efadc:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23efade:	e9d0 5400 	ldrd	r5, r4, [r0]
 23efae2:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 23efae4:	ebb1 0fa4 	cmp.w	r1, r4, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23efae8:	ea4f 02a4 	mov.w	r2, r4, asr #2
	if (__n >= this->size())
 23efaec:	d302      	bcc.n	23efaf4 <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 23efaee:	4803      	ldr	r0, [pc, #12]	; (23efafc <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj+0x20>)
 23efaf0:	f009 fb90 	bl	23f9214 <_ZSt24__throw_out_of_range_fmtPKcz>
      {
	_M_range_check(__n);
	return (*this)[__n];
      }
 23efaf4:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 23efaf8:	bd38      	pop	{r3, r4, r5, pc}
 23efafa:	bf00      	nop
 23efafc:	023fc4a9 	.word	0x023fc4a9

023efb00 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 23efb00:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23efb02:	466c      	mov	r4, sp
 23efb04:	460b      	mov	r3, r1
 23efb06:	4602      	mov	r2, r0
 23efb08:	e9d0 0100 	ldrd	r0, r1, [r0]
 23efb0c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23efb10:	e893 0003 	ldmia.w	r3, {r0, r1}
 23efb14:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23efb18:	e894 0003 	ldmia.w	r4, {r0, r1}
 23efb1c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23efb20:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23efb22:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 23efb24:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23efb26:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23efb28:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 23efb2a:	68d8      	ldr	r0, [r3, #12]
 23efb2c:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23efb2e:	60d9      	str	r1, [r3, #12]
      }
 23efb30:	b002      	add	sp, #8
 23efb32:	bd10      	pop	{r4, pc}

023efb34 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 23efb34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23efb36:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23efb3a:	6999      	ldr	r1, [r3, #24]
            return this->_original_signal;
 23efb3c:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23efb3e:	428a      	cmp	r2, r1
 23efb40:	d012      	beq.n	23efb68 <_ZN14SignalWithAxes10get_signalEv+0x34>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23efb42:	6923      	ldr	r3, [r4, #16]
        };
 23efb44:	f100 0410 	add.w	r4, r0, #16
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23efb48:	fbb3 f3f1 	udiv	r3, r3, r1
 23efb4c:	4353      	muls	r3, r2
 23efb4e:	6203      	str	r3, [r0, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 23efb50:	4b07      	ldr	r3, [pc, #28]	; (23efb70 <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23efb52:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23efb54:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23efb56:	4b07      	ldr	r3, [pc, #28]	; (23efb74 <_ZN14SignalWithAxes10get_signalEv+0x40>)
	  function(std::forward<_Functor>(__f)).swap(*this);
 23efb58:	4668      	mov	r0, sp
 23efb5a:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
 23efb5c:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23efb5e:	f7ff ffcf 	bl	23efb00 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23efb62:	4668      	mov	r0, sp
 23efb64:	f7fe fa04 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
    }
 23efb68:	4620      	mov	r0, r4
 23efb6a:	b004      	add	sp, #16
 23efb6c:	bd10      	pop	{r4, pc}
 23efb6e:	bf00      	nop
 23efb70:	023ef5b5 	.word	0x023ef5b5
 23efb74:	023ede69 	.word	0x023ede69

023efb78 <process_impulse>:
{
 23efb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ei_learning_block_t block = impulse->learning_blocks[0];
 23efb7c:	6d46      	ldr	r6, [r0, #84]	; 0x54
{
 23efb7e:	b097      	sub	sp, #92	; 0x5c
    ei_learning_block_t block = impulse->learning_blocks[0];
 23efb80:	e9d6 e800 	ldrd	lr, r8, [r6]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23efb84:	6d86      	ldr	r6, [r0, #88]	; 0x58
{
 23efb86:	4604      	mov	r4, r0
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23efb88:	3e02      	subs	r6, #2
 23efb8a:	2e09      	cmp	r6, #9
{
 23efb8c:	4615      	mov	r5, r2
 23efb8e:	461f      	mov	r7, r3
 23efb90:	9103      	str	r1, [sp, #12]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23efb92:	d81c      	bhi.n	23efbce <process_impulse+0x56>
 23efb94:	f240 2c29 	movw	ip, #553	; 0x229
 23efb98:	fa2c f606 	lsr.w	r6, ip, r6
 23efb9c:	07f6      	lsls	r6, r6, #31
 23efb9e:	d516      	bpl.n	23efbce <process_impulse+0x56>
    if (impulse->has_anomaly == 1){
 23efba0:	f890 606c 	ldrb.w	r6, [r0, #108]	; 0x6c
 23efba4:	b99e      	cbnz	r6, 23efbce <process_impulse+0x56>
    if (block_ptr.infer_fn != run_nn_inference) {
 23efba6:	4e58      	ldr	r6, [pc, #352]	; (23efd08 <process_impulse+0x190>)
 23efba8:	45b6      	cmp	lr, r6
 23efbaa:	d110      	bne.n	23efbce <process_impulse+0x56>
    if (block_config->quantized != 1) {
 23efbac:	f898 600d 	ldrb.w	r6, [r8, #13]
 23efbb0:	b16e      	cbz	r6, 23efbce <process_impulse+0x56>
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 23efbb2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23efbb4:	2e01      	cmp	r6, #1
 23efbb6:	d10a      	bne.n	23efbce <process_impulse+0x56>
 23efbb8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 23efbba:	f8d6 c004 	ldr.w	ip, [r6, #4]
 23efbbe:	4e53      	ldr	r6, [pc, #332]	; (23efd0c <process_impulse+0x194>)
 23efbc0:	45b4      	cmp	ip, r6
 23efbc2:	d104      	bne.n	23efbce <process_impulse+0x56>
}
 23efbc4:	b017      	add	sp, #92	; 0x5c
 23efbc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return run_classifier_image_quantized(impulse, signal, result, debug);
 23efbca:	f7ff bf69 	b.w	23efaa0 <run_classifier_image_quantized>
    memset(result, 0, sizeof(ei_impulse_result_t));
 23efbce:	f44f 7280 	mov.w	r2, #256	; 0x100
 23efbd2:	2100      	movs	r1, #0
 23efbd4:	4628      	mov	r0, r5
 23efbd6:	f00b fa75 	bl	23fb0c4 <memset>
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23efbda:	2300      	movs	r3, #0
 23efbdc:	2101      	movs	r1, #1
 23efbde:	6922      	ldr	r2, [r4, #16]
 23efbe0:	a805      	add	r0, sp, #20
 23efbe2:	f7fe f9ce 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23efbe6:	2600      	movs	r6, #0
    uint64_t dsp_start_us = ei_read_timer_us();
 23efbe8:	f001 fa5a 	bl	23f10a0 <_Z16ei_read_timer_usv>
    size_t out_features_index = 0;
 23efbec:	4633      	mov	r3, r6
    uint64_t dsp_start_us = ei_read_timer_us();
 23efbee:	4683      	mov	fp, r0
 23efbf0:	468a      	mov	sl, r1
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23efbf2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23efbf4:	42b2      	cmp	r2, r6
 23efbf6:	d952      	bls.n	23efc9e <process_impulse+0x126>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23efbf8:	2214      	movs	r2, #20
 23efbfa:	4372      	muls	r2, r6
 23efbfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 23efbfe:	1881      	adds	r1, r0, r2
 23efc00:	5882      	ldr	r2, [r0, r2]
 23efc02:	6848      	ldr	r0, [r1, #4]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23efc04:	eb03 0802 	add.w	r8, r3, r2
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23efc08:	9001      	str	r0, [sp, #4]
 23efc0a:	e9d1 9002 	ldrd	r9, r0, [r1, #8]
 23efc0e:	6909      	ldr	r1, [r1, #16]
 23efc10:	9002      	str	r0, [sp, #8]
 23efc12:	9100      	str	r1, [sp, #0]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23efc14:	6921      	ldr	r1, [r4, #16]
 23efc16:	4588      	cmp	r8, r1
 23efc18:	d90b      	bls.n	23efc32 <process_impulse+0xba>
            ei_printf("ERR: Would write outside feature buffer\n");
 23efc1a:	483d      	ldr	r0, [pc, #244]	; (23efd10 <process_impulse+0x198>)
 23efc1c:	f001 fa46 	bl	23f10ac <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23efc20:	f06f 0904 	mvn.w	r9, #4
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23efc24:	a805      	add	r0, sp, #20
 23efc26:	f7fe f9c1 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
}
 23efc2a:	4648      	mov	r0, r9
 23efc2c:	b017      	add	sp, #92	; 0x5c
 23efc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23efc32:	9905      	ldr	r1, [sp, #20]
 23efc34:	a809      	add	r0, sp, #36	; 0x24
 23efc36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23efc3a:	2101      	movs	r1, #1
 23efc3c:	f7fe f9a1 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 23efc40:	9b03      	ldr	r3, [sp, #12]
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 23efc42:	a80d      	add	r0, sp, #52	; 0x34
 23efc44:	930d      	str	r3, [sp, #52]	; 0x34
 23efc46:	9b02      	ldr	r3, [sp, #8]
 23efc48:	930e      	str	r3, [sp, #56]	; 0x38
 23efc4a:	9b00      	ldr	r3, [sp, #0]
 23efc4c:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
    _Function_base() : _M_manager(nullptr) { }
 23efc50:	2300      	movs	r3, #0
 23efc52:	9313      	str	r3, [sp, #76]	; 0x4c
 23efc54:	f7ff ff6e 	bl	23efb34 <_ZN14SignalWithAxes10get_signalEv>
 23efc58:	a909      	add	r1, sp, #36	; 0x24
 23efc5a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 23efc5e:	464a      	mov	r2, r9
 23efc60:	9b01      	ldr	r3, [sp, #4]
 23efc62:	4798      	blx	r3
        if (ret != EIDSP_OK) {
 23efc64:	4601      	mov	r1, r0
 23efc66:	b158      	cbz	r0, 23efc80 <process_impulse+0x108>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23efc68:	482a      	ldr	r0, [pc, #168]	; (23efd14 <process_impulse+0x19c>)
 23efc6a:	f001 fa1f 	bl	23f10ac <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23efc6e:	f06f 0904 	mvn.w	r9, #4
    class function<_Res(_ArgTypes...)>
 23efc72:	a811      	add	r0, sp, #68	; 0x44
 23efc74:	f7fe f97c 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23efc78:	a809      	add	r0, sp, #36	; 0x24
 23efc7a:	f7fe f997 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23efc7e:	e7d1      	b.n	23efc24 <process_impulse+0xac>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23efc80:	f001 fa0c 	bl	23f109c <_Z29ei_run_impulse_check_canceledv>
 23efc84:	f110 0f02 	cmn.w	r0, #2
 23efc88:	4681      	mov	r9, r0
 23efc8a:	d0f2      	beq.n	23efc72 <process_impulse+0xfa>
 23efc8c:	a811      	add	r0, sp, #68	; 0x44
 23efc8e:	f7fe f96f 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23efc92:	a809      	add	r0, sp, #36	; 0x24
 23efc94:	f7fe f98a 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23efc98:	3601      	adds	r6, #1
 23efc9a:	4643      	mov	r3, r8
 23efc9c:	e7a9      	b.n	23efbf2 <process_impulse+0x7a>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23efc9e:	f001 f9ff 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23efca2:	ebb0 000b 	subs.w	r0, r0, fp
 23efca6:	eb61 010a 	sbc.w	r1, r1, sl
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23efcaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23efcae:	2300      	movs	r3, #0
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23efcb0:	e9c5 013a 	strd	r0, r1, [r5, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23efcb4:	f7fa fa10 	bl	23ea0d8 <__aeabi_ldivmod>
 23efcb8:	4601      	mov	r1, r0
 23efcba:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
    if (debug) {
 23efcbe:	b1d7      	cbz	r7, 23efcf6 <process_impulse+0x17e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23efcc0:	4815      	ldr	r0, [pc, #84]	; (23efd18 <process_impulse+0x1a0>)
 23efcc2:	f001 f9f3 	bl	23f10ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23efcc6:	2600      	movs	r6, #0
            ei_printf(" ");
 23efcc8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 23efd24 <process_impulse+0x1ac>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23efccc:	9b07      	ldr	r3, [sp, #28]
 23efcce:	42b3      	cmp	r3, r6
 23efcd0:	d90b      	bls.n	23efcea <process_impulse+0x172>
            ei_printf_float(features_matrix.buffer[ix]);
 23efcd2:	9b05      	ldr	r3, [sp, #20]
 23efcd4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23efcd8:	ed93 0a00 	vldr	s0, [r3]
 23efcdc:	f001 fa06 	bl	23f10ec <_Z15ei_printf_floatf>
            ei_printf(" ");
 23efce0:	4640      	mov	r0, r8
 23efce2:	f001 f9e3 	bl	23f10ac <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23efce6:	3601      	adds	r6, #1
 23efce8:	e7f0      	b.n	23efccc <process_impulse+0x154>
        ei_printf("\n");
 23efcea:	480c      	ldr	r0, [pc, #48]	; (23efd1c <process_impulse+0x1a4>)
 23efcec:	f001 f9de 	bl	23f10ac <_Z9ei_printfPKcz>
        ei_printf("Running impulse...\n");
 23efcf0:	480b      	ldr	r0, [pc, #44]	; (23efd20 <process_impulse+0x1a8>)
 23efcf2:	f001 f9db 	bl	23f10ac <_Z9ei_printfPKcz>
    return run_inference(impulse, &features_matrix, result, debug);
 23efcf6:	463b      	mov	r3, r7
 23efcf8:	462a      	mov	r2, r5
 23efcfa:	4620      	mov	r0, r4
 23efcfc:	a905      	add	r1, sp, #20
 23efcfe:	f7ff f95d 	bl	23eefbc <run_inference>
 23efd02:	4681      	mov	r9, r0
 23efd04:	e78e      	b.n	23efc24 <process_impulse+0xac>
 23efd06:	bf00      	nop
 23efd08:	023ef24d 	.word	0x023ef24d
 23efd0c:	023ef485 	.word	0x023ef485
 23efd10:	023fc4f3 	.word	0x023fc4f3
 23efd14:	023fc484 	.word	0x023fc484
 23efd18:	023fc57b 	.word	0x023fc57b
 23efd1c:	023fc418 	.word	0x023fc418
 23efd20:	023fc51c 	.word	0x023fc51c
 23efd24:	023ffaff 	.word	0x023ffaff

023efd28 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23efd28:	b530      	push	{r4, r5, lr}
 23efd2a:	4604      	mov	r4, r0
 23efd2c:	460d      	mov	r5, r1
 23efd2e:	b0a5      	sub	sp, #148	; 0x94
 23efd30:	9201      	str	r2, [sp, #4]
    const ei_impulse_t impulse = ei_default_impulse;
 23efd32:	4906      	ldr	r1, [pc, #24]	; (23efd4c <run_classifier+0x24>)
 23efd34:	2288      	movs	r2, #136	; 0x88
 23efd36:	a802      	add	r0, sp, #8
 23efd38:	f00b f99d 	bl	23fb076 <memcpy>
    return process_impulse(&impulse, signal, result, debug);
 23efd3c:	462a      	mov	r2, r5
 23efd3e:	4621      	mov	r1, r4
 23efd40:	9b01      	ldr	r3, [sp, #4]
 23efd42:	a802      	add	r0, sp, #8
 23efd44:	f7ff ff18 	bl	23efb78 <process_impulse>
}
 23efd48:	b025      	add	sp, #148	; 0x94
 23efd4a:	bd30      	pop	{r4, r5, pc}
 23efd4c:	023fb408 	.word	0x023fb408

023efd50 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23efd50:	2300      	movs	r3, #0
      operator=(const function& __x)
 23efd52:	b530      	push	{r4, r5, lr}
 23efd54:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23efd56:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23efd58:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23efd5a:	4605      	mov	r5, r0
 23efd5c:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23efd5e:	b133      	cbz	r3, 23efd6e <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23efd60:	2202      	movs	r2, #2
 23efd62:	4668      	mov	r0, sp
 23efd64:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23efd66:	68e3      	ldr	r3, [r4, #12]
 23efd68:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23efd6a:	68a3      	ldr	r3, [r4, #8]
 23efd6c:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23efd6e:	4629      	mov	r1, r5
 23efd70:	4668      	mov	r0, sp
 23efd72:	f7ff fec5 	bl	23efb00 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23efd76:	4668      	mov	r0, sp
 23efd78:	f7fe f8fa 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
      }
 23efd7c:	b005      	add	sp, #20
 23efd7e:	bd30      	pop	{r4, r5, pc}

023efd80 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
 23efd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
 23efd82:	2300      	movs	r3, #0
 23efd84:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
 23efd86:	b121      	cbz	r1, 23efd92 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
 23efd88:	4b07      	ldr	r3, [pc, #28]	; (23efda8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23efd8a:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23efd8c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23efd8e:	4b07      	ldr	r3, [pc, #28]	; (23efdac <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
 23efd90:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23efd92:	4601      	mov	r1, r0
 23efd94:	4668      	mov	r0, sp
 23efd96:	f7ff feb3 	bl	23efb00 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23efd9a:	4668      	mov	r0, sp
 23efd9c:	f7fe f8e8 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
	}
 23efda0:	b005      	add	sp, #20
 23efda2:	f85d fb04 	ldr.w	pc, [sp], #4
 23efda6:	bf00      	nop
 23efda8:	023ede91 	.word	0x023ede91
 23efdac:	023ede7d 	.word	0x023ede7d

023efdb0 <loop>:
{
 23efdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!peer.connected()) {
 23efdb4:	48b1      	ldr	r0, [pc, #708]	; (23f007c <loop+0x2cc>)
{
 23efdb6:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    if (!peer.connected()) {
 23efdba:	f007 f829 	bl	23f6e10 <_ZNK8particle13BlePeerDevice9connectedEv>
 23efdbe:	4605      	mov	r5, r0
 23efdc0:	2800      	cmp	r0, #0
 23efdc2:	f040 80bd 	bne.w	23eff40 <loop+0x190>
        Vector<BleScanResult> scanResults = BLE.scan();
 23efdc6:	f007 f8b9 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23efdca:	4601      	mov	r1, r0
 23efdcc:	a83e      	add	r0, sp, #248	; 0xf8
 23efdce:	f008 fd4b 	bl	23f8868 <_ZNK8particle14BleLocalDevice4scanEv>
    return true;
}

template<typename T, typename AllocatorT>
inline int spark::Vector<T, AllocatorT>::size() const {
    return size_;
 23efdd2:	993f      	ldr	r1, [sp, #252]	; 0xfc
        if (scanResults.size()) {
 23efdd4:	2900      	cmp	r1, #0
 23efdd6:	f000 80a1 	beq.w	23eff1c <loop+0x16c>
            ei_printf("%d BLE devices found", scanResults.size());
 23efdda:	48a9      	ldr	r0, [pc, #676]	; (23f0080 <loop+0x2d0>)
 23efddc:	f001 f966 	bl	23f10ac <_Z9ei_printfPKcz>
                ei_printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm",
 23efde0:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 23f00cc <loop+0x31c>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23efde4:	4ea5      	ldr	r6, [pc, #660]	; (23f007c <loop+0x2cc>)
            for (int ii = 0; ii < scanResults.size(); ii++) {
 23efde6:	e9dd 033e 	ldrd	r0, r3, [sp, #248]	; 0xf8
 23efdea:	429d      	cmp	r5, r3
 23efdec:	f280 8096 	bge.w	23eff1c <loop+0x16c>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::operator[](int i) {
 23efdf0:	2424      	movs	r4, #36	; 0x24
 23efdf2:	436c      	muls	r4, r5
                        scanResults[ii].address()[0], scanResults[ii].address()[1], scanResults[ii].address()[2],
 23efdf4:	2100      	movs	r1, #0
 23efdf6:	4420      	add	r0, r4
 23efdf8:	f006 fc46 	bl	23f6688 <_ZNK8particle10BleAddressixEh>
 23efdfc:	4607      	mov	r7, r0
    return data_[i];
 23efdfe:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23efe00:	2101      	movs	r1, #1
 23efe02:	4420      	add	r0, r4
 23efe04:	f006 fc40 	bl	23f6688 <_ZNK8particle10BleAddressixEh>
 23efe08:	903d      	str	r0, [sp, #244]	; 0xf4
 23efe0a:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23efe0c:	2102      	movs	r1, #2
 23efe0e:	4420      	add	r0, r4
 23efe10:	f006 fc3a 	bl	23f6688 <_ZNK8particle10BleAddressixEh>
 23efe14:	903c      	str	r0, [sp, #240]	; 0xf0
 23efe16:	983e      	ldr	r0, [sp, #248]	; 0xf8
                        scanResults[ii].address()[3], scanResults[ii].address()[4], scanResults[ii].address()[5], scanResults[ii].rssi());
 23efe18:	2103      	movs	r1, #3
 23efe1a:	4420      	add	r0, r4
 23efe1c:	f006 fc34 	bl	23f6688 <_ZNK8particle10BleAddressixEh>
 23efe20:	4681      	mov	r9, r0
 23efe22:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23efe24:	2104      	movs	r1, #4
 23efe26:	4420      	add	r0, r4
 23efe28:	f006 fc2e 	bl	23f6688 <_ZNK8particle10BleAddressixEh>
 23efe2c:	4682      	mov	sl, r0
 23efe2e:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23efe30:	2105      	movs	r1, #5
 23efe32:	4420      	add	r0, r4
 23efe34:	f006 fc28 	bl	23f6688 <_ZNK8particle10BleAddressixEh>
                ei_printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X | RSSI: %dBm",
 23efe38:	e9dd 323c 	ldrd	r3, r2, [sp, #240]	; 0xf0
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
 23efe3c:	993e      	ldr	r1, [sp, #248]	; 0xf8
 23efe3e:	4421      	add	r1, r4
 23efe40:	f991 1020 	ldrsb.w	r1, [r1, #32]
 23efe44:	e9cd 9a00 	strd	r9, sl, [sp]
 23efe48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23efe4c:	4639      	mov	r1, r7
 23efe4e:	4640      	mov	r0, r8
 23efe50:	f001 f92c 	bl	23f10ac <_Z9ei_printfPKcz>
 23efe54:	993e      	ldr	r1, [sp, #248]	; 0xf8
                String name = scanResults[ii].advertisingData().deviceName();
 23efe56:	a841      	add	r0, sp, #260	; 0x104
 23efe58:	4421      	add	r1, r4
 23efe5a:	3108      	adds	r1, #8
 23efe5c:	f006 fe56 	bl	23f6b0c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
                if (name.length() > 0) {
 23efe60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 23efe62:	2b00      	cmp	r3, #0
 23efe64:	d051      	beq.n	23eff0a <loop+0x15a>
                    ei_printf("Advertising name: %s", name.c_str());
 23efe66:	9941      	ldr	r1, [sp, #260]	; 0x104
 23efe68:	4886      	ldr	r0, [pc, #536]	; (23f0084 <loop+0x2d4>)
 23efe6a:	f001 f91f 	bl	23f10ac <_Z9ei_printfPKcz>
                    if (strcmp(name, "monocle") == 0) {
 23efe6e:	4986      	ldr	r1, [pc, #536]	; (23f0088 <loop+0x2d8>)
 23efe70:	9841      	ldr	r0, [sp, #260]	; 0x104
 23efe72:	f7fa fb2f 	bl	23ea4d4 <strcmp>
 23efe76:	2800      	cmp	r0, #0
 23efe78:	d147      	bne.n	23eff0a <loop+0x15a>
                        ei_printf("Trying connection...%s\n", name);
 23efe7a:	a941      	add	r1, sp, #260	; 0x104
 23efe7c:	a846      	add	r0, sp, #280	; 0x118
 23efe7e:	f008 fead 	bl	23f8bdc <_ZN6StringC1ERKS_>
 23efe82:	a946      	add	r1, sp, #280	; 0x118
 23efe84:	4881      	ldr	r0, [pc, #516]	; (23f008c <loop+0x2dc>)
 23efe86:	f001 f911 	bl	23f10ac <_Z9ei_printfPKcz>
 23efe8a:	a846      	add	r0, sp, #280	; 0x118
 23efe8c:	f008 fe10 	bl	23f8ab0 <_ZN6StringD1Ev>
                        peer = BLE.connect(scanResults[ii].address());
 23efe90:	f007 f854 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23efe94:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 23efe96:	4601      	mov	r1, r0
 23efe98:	2301      	movs	r3, #1
 23efe9a:	4422      	add	r2, r4
 23efe9c:	a846      	add	r0, sp, #280	; 0x118
 23efe9e:	f008 fb63 	bl	23f8568 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
 23efea2:	9b46      	ldr	r3, [sp, #280]	; 0x118
 23efea4:	9f47      	ldr	r7, [sp, #284]	; 0x11c
 23efea6:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
 23efea8:	6873      	ldr	r3, [r6, #4]
 23efeaa:	429f      	cmp	r7, r3
 23efeac:	d016      	beq.n	23efedc <loop+0x12c>
	    if (__tmp != 0)
 23efeae:	b117      	cbz	r7, 23efeb6 <loop+0x106>
    { ++_M_use_count; }
 23efeb0:	687b      	ldr	r3, [r7, #4]
 23efeb2:	3301      	adds	r3, #1
 23efeb4:	607b      	str	r3, [r7, #4]
	    if (_M_pi != 0)
 23efeb6:	6874      	ldr	r4, [r6, #4]
 23efeb8:	b17c      	cbz	r4, 23efeda <loop+0x12a>
      if (--_M_use_count == 0)
 23efeba:	6863      	ldr	r3, [r4, #4]
 23efebc:	3b01      	subs	r3, #1
 23efebe:	6063      	str	r3, [r4, #4]
 23efec0:	b95b      	cbnz	r3, 23efeda <loop+0x12a>
          _M_dispose();
 23efec2:	6823      	ldr	r3, [r4, #0]
 23efec4:	4620      	mov	r0, r4
 23efec6:	689b      	ldr	r3, [r3, #8]
 23efec8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23efeca:	68a3      	ldr	r3, [r4, #8]
 23efecc:	3b01      	subs	r3, #1
 23efece:	60a3      	str	r3, [r4, #8]
 23efed0:	b91b      	cbnz	r3, 23efeda <loop+0x12a>
            _M_destroy();
 23efed2:	6823      	ldr	r3, [r4, #0]
 23efed4:	4620      	mov	r0, r4
 23efed6:	68db      	ldr	r3, [r3, #12]
 23efed8:	4798      	blx	r3
	    _M_pi = __tmp;
 23efeda:	6077      	str	r7, [r6, #4]
 23efedc:	a846      	add	r0, sp, #280	; 0x118
 23efede:	f007 f90b 	bl	23f70f8 <_ZN8particle13BlePeerDeviceD1Ev>
                        if (peer.connected()) {
 23efee2:	4630      	mov	r0, r6
 23efee4:	f006 ff94 	bl	23f6e10 <_ZNK8particle13BlePeerDevice9connectedEv>
 23efee8:	b1b0      	cbz	r0, 23eff18 <loop+0x168>
                            ei_printf("Successfully connected!\n");
 23efeea:	4869      	ldr	r0, [pc, #420]	; (23f0090 <loop+0x2e0>)
 23efeec:	f001 f8de 	bl	23f10ac <_Z9ei_printfPKcz>
                            bool bResult = peer.getCharacteristicByUUID(rx_characteristic, BleUuid("6e400002-b5a3-f393-e0a9-e50e24dcca9e"));
 23efef0:	4968      	ldr	r1, [pc, #416]	; (23f0094 <loop+0x2e4>)
 23efef2:	a846      	add	r0, sp, #280	; 0x118
 23efef4:	f006 fd4a 	bl	23f698c <_ZN8particle7BleUuidC1EPKc>
 23efef8:	4630      	mov	r0, r6
 23efefa:	4967      	ldr	r1, [pc, #412]	; (23f0098 <loop+0x2e8>)
 23efefc:	aa46      	add	r2, sp, #280	; 0x118
 23efefe:	f007 ffd6 	bl	23f7eae <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                            if (bResult) {
 23eff02:	b138      	cbz	r0, 23eff14 <loop+0x164>
                                ei_printf("Characteristic found.\n");
 23eff04:	4865      	ldr	r0, [pc, #404]	; (23f009c <loop+0x2ec>)
                            ei_printf("Monocle connection failed.\n");
 23eff06:	f001 f8d1 	bl	23f10ac <_Z9ei_printfPKcz>
                String name = scanResults[ii].advertisingData().deviceName();
 23eff0a:	a841      	add	r0, sp, #260	; 0x104
 23eff0c:	f008 fdd0 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (int ii = 0; ii < scanResults.size(); ii++) {
 23eff10:	3501      	adds	r5, #1
 23eff12:	e768      	b.n	23efde6 <loop+0x36>
                                ei_printf("ERROR: characteristic NOT found\n");
 23eff14:	4862      	ldr	r0, [pc, #392]	; (23f00a0 <loop+0x2f0>)
 23eff16:	e7f6      	b.n	23eff06 <loop+0x156>
                            ei_printf("Monocle connection failed.\n");
 23eff18:	4862      	ldr	r0, [pc, #392]	; (23f00a4 <loop+0x2f4>)
 23eff1a:	e7f4      	b.n	23eff06 <loop+0x156>
    destruct(data_, data_ + size_);
 23eff1c:	2524      	movs	r5, #36	; 0x24
 23eff1e:	e9dd 433e 	ldrd	r4, r3, [sp, #248]	; 0xf8
 23eff22:	fb05 4503 	mla	r5, r5, r3, r4
        for (; p != end; ++p) {
 23eff26:	42a5      	cmp	r5, r4
 23eff28:	d007      	beq.n	23eff3a <loop+0x18a>
    ::free(ptr);
 23eff2a:	6960      	ldr	r0, [r4, #20]
 23eff2c:	f004 fc2c 	bl	23f4788 <free>
 23eff30:	68a0      	ldr	r0, [r4, #8]
 23eff32:	f004 fc29 	bl	23f4788 <free>
        for (; p != end; ++p) {
 23eff36:	3424      	adds	r4, #36	; 0x24
 23eff38:	e7f5      	b.n	23eff26 <loop+0x176>
    ::free(ptr);
 23eff3a:	983e      	ldr	r0, [sp, #248]	; 0xf8
 23eff3c:	f004 fc24 	bl	23f4788 <free>
    ei_printf("Starting inferencing soon...\n");
 23eff40:	4859      	ldr	r0, [pc, #356]	; (23f00a8 <loop+0x2f8>)
 23eff42:	f001 f8b3 	bl	23f10ac <_Z9ei_printfPKcz>
    delay(500);
 23eff46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23eff4a:	f005 f991 	bl	23f5270 <delay>
    ei_printf("Recording...\n");
 23eff4e:	4857      	ldr	r0, [pc, #348]	; (23f00ac <loop+0x2fc>)
 23eff50:	f001 f8ac 	bl	23f10ac <_Z9ei_printfPKcz>
    inference.buf_ready = 0;
 23eff54:	2300      	movs	r3, #0
 23eff56:	4d56      	ldr	r5, [pc, #344]	; (23f00b0 <loop+0x300>)
	    _M_invoker = &_My_handler::_M_invoke;
 23eff58:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23f00d0 <loop+0x320>
 23eff5c:	712b      	strb	r3, [r5, #4]
    inference.buf_count = 0;
 23eff5e:	60ab      	str	r3, [r5, #8]
    uint64_t sample_start_us = ei_read_timer_us();
 23eff60:	f001 f89e 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23eff64:	4607      	mov	r7, r0
	    _M_manager = &_My_handler::_M_manager;
 23eff66:	f8df 816c 	ldr.w	r8, [pc, #364]	; 23f00d4 <loop+0x324>
	    _M_invoker = &_My_handler::_M_invoke;
 23eff6a:	ac46      	add	r4, sp, #280	; 0x118
    while(Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples){})){};
 23eff6c:	f003 ff3a 	bl	23f3de4 <_ZN14Microphone_PDM8instanceEv>
 23eff70:	6803      	ldr	r3, [r0, #0]
 23eff72:	4621      	mov	r1, r4
 23eff74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23eff76:	e9c4 8902 	strd	r8, r9, [r4, #8]
 23eff7a:	4798      	blx	r3
 23eff7c:	4606      	mov	r6, r0
    class function<_Res(_ArgTypes...)>
 23eff7e:	4620      	mov	r0, r4
 23eff80:	f7fd fff6 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23eff84:	2e00      	cmp	r6, #0
 23eff86:	d1f1      	bne.n	23eff6c <loop+0x1bc>
	    _M_invoker = &_My_handler::_M_invoke;
 23eff88:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23f00d8 <loop+0x328>
	    _M_manager = &_My_handler::_M_manager;
 23eff8c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 23f00dc <loop+0x32c>
    if(sample_length && dma_ready) {
 23eff90:	f8df a14c 	ldr.w	sl, [pc, #332]	; 23f00e0 <loop+0x330>
    while(inference.buf_ready == 0) {
 23eff94:	792b      	ldrb	r3, [r5, #4]
 23eff96:	2b00      	cmp	r3, #0
 23eff98:	d132      	bne.n	23f0000 <loop+0x250>
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23eff9a:	f003 ff23 	bl	23f3de4 <_ZN14Microphone_PDM8instanceEv>
    });
 23eff9e:	6803      	ldr	r3, [r0, #0]
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23effa0:	4621      	mov	r1, r4
    });
 23effa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23effa4:	e9c4 9802 	strd	r9, r8, [r4, #8]
    bool dma_ready = Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples) {
 23effa8:	4798      	blx	r3
 23effaa:	4683      	mov	fp, r0
    class function<_Res(_ArgTypes...)>
 23effac:	4620      	mov	r0, r4
 23effae:	f7fd ffdf 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
    if(sample_length && dma_ready) {
 23effb2:	f8da 2000 	ldr.w	r2, [sl]
 23effb6:	2a00      	cmp	r2, #0
 23effb8:	d0ec      	beq.n	23eff94 <loop+0x1e4>
 23effba:	f1bb 0f00 	cmp.w	fp, #0
 23effbe:	d0e9      	beq.n	23eff94 <loop+0x1e4>
        if (inference.buf_ready == 0) {
 23effc0:	792e      	ldrb	r6, [r5, #4]
 23effc2:	2e00      	cmp	r6, #0
 23effc4:	d1e6      	bne.n	23eff94 <loop+0x1e4>
                if(inference.buf_count >= inference.n_samples) {
 23effc6:	e9d5 3c02 	ldrd	r3, ip, [r5, #8]
                inference.buffer[inference.buf_count++] = sptr[i];
 23effca:	493a      	ldr	r1, [pc, #232]	; (23f00b4 <loop+0x304>)
 23effcc:	441a      	add	r2, r3
 23effce:	6808      	ldr	r0, [r1, #0]
 23effd0:	6829      	ldr	r1, [r5, #0]
 23effd2:	3802      	subs	r0, #2
 23effd4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
            for(int i = 0; i < sample_length; i++) {
 23effd8:	429a      	cmp	r2, r3
 23effda:	d00b      	beq.n	23efff4 <loop+0x244>
                inference.buffer[inference.buf_count++] = sptr[i];
 23effdc:	f930 6f02 	ldrsh.w	r6, [r0, #2]!
 23effe0:	3301      	adds	r3, #1
                if(inference.buf_count >= inference.n_samples) {
 23effe2:	4563      	cmp	r3, ip
                inference.buffer[inference.buf_count++] = sptr[i];
 23effe4:	f821 6b02 	strh.w	r6, [r1], #2
                if(inference.buf_count >= inference.n_samples) {
 23effe8:	d308      	bcc.n	23efffc <loop+0x24c>
                    inference.buf_count = 0;
 23effea:	2300      	movs	r3, #0
 23effec:	60ab      	str	r3, [r5, #8]
                    inference.buf_ready = 1;
 23effee:	2301      	movs	r3, #1
 23efff0:	712b      	strb	r3, [r5, #4]
                    break;
 23efff2:	e7cf      	b.n	23eff94 <loop+0x1e4>
 23efff4:	2e00      	cmp	r6, #0
 23efff6:	d0cd      	beq.n	23eff94 <loop+0x1e4>
 23efff8:	60aa      	str	r2, [r5, #8]
 23efffa:	e7cb      	b.n	23eff94 <loop+0x1e4>
 23efffc:	465e      	mov	r6, fp
 23efffe:	e7eb      	b.n	23effd8 <loop+0x228>
    ei_printf("Sample time: %d\r\n", (int) (ei_read_timer_us() - sample_start_us) / 1000);
 23f0000:	f001 f84e 	bl	23f10a0 <_Z16ei_read_timer_usv>
 23f0004:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 23f0008:	1bc0      	subs	r0, r0, r7
 23f000a:	fb90 f1f6 	sdiv	r1, r0, r6
 23f000e:	482a      	ldr	r0, [pc, #168]	; (23f00b8 <loop+0x308>)
 23f0010:	f001 f84c 	bl	23f10ac <_Z9ei_printfPKcz>
    ei_printf("Recording done\n");
 23f0014:	4829      	ldr	r0, [pc, #164]	; (23f00bc <loop+0x30c>)
 23f0016:	f001 f849 	bl	23f10ac <_Z9ei_printfPKcz>
    _Function_base() : _M_manager(nullptr) { }
 23f001a:	2500      	movs	r5, #0
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
 23f001c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    signal.get_data = &microphone_audio_signal_get_data;
 23f0020:	4927      	ldr	r1, [pc, #156]	; (23f00c0 <loop+0x310>)
 23f0022:	a841      	add	r0, sp, #260	; 0x104
    signal.total_length = EI_CLASSIFIER_RAW_SAMPLE_COUNT;
 23f0024:	9345      	str	r3, [sp, #276]	; 0x114
 23f0026:	9543      	str	r5, [sp, #268]	; 0x10c
    signal.get_data = &microphone_audio_signal_get_data;
 23f0028:	f7ff feaa 	bl	23efd80 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    ei_impulse_result_t result = { 0 };
 23f002c:	f44f 7280 	mov.w	r2, #256	; 0x100
 23f0030:	4629      	mov	r1, r5
 23f0032:	4620      	mov	r0, r4
 23f0034:	f00b f846 	bl	23fb0c4 <memset>
    EI_IMPULSE_ERROR res = run_classifier(&signal, &result, false /* debug */);
 23f0038:	4621      	mov	r1, r4
 23f003a:	462a      	mov	r2, r5
 23f003c:	a841      	add	r0, sp, #260	; 0x104
 23f003e:	f7ff fe73 	bl	23efd28 <run_classifier>
    if (res != EI_IMPULSE_OK) {
 23f0042:	4601      	mov	r1, r0
 23f0044:	b148      	cbz	r0, 23f005a <loop+0x2aa>
        ei_printf("ERR: Failed to run classifier (%d)\n", res);
 23f0046:	481f      	ldr	r0, [pc, #124]	; (23f00c4 <loop+0x314>)
 23f0048:	f001 f830 	bl	23f10ac <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f004c:	a841      	add	r0, sp, #260	; 0x104
 23f004e:	f7fd ff8f 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
}
 23f0052:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 23f0056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ei_printf("run_classifier returned: %d\r\n", res);
 23f005a:	481b      	ldr	r0, [pc, #108]	; (23f00c8 <loop+0x318>)
 23f005c:	f001 f826 	bl	23f10ac <_Z9ei_printfPKcz>
    print_inference_result(result);
 23f0060:	a94a      	add	r1, sp, #296	; 0x128
 23f0062:	22f0      	movs	r2, #240	; 0xf0
 23f0064:	4668      	mov	r0, sp
 23f0066:	f00b f806 	bl	23fb076 <memcpy>
 23f006a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f006e:	f7ff f853 	bl	23ef118 <_Z22print_inference_result19ei_impulse_result_t>
    delay(1000);
 23f0072:	4630      	mov	r0, r6
 23f0074:	f005 f8fc 	bl	23f5270 <delay>
 23f0078:	e7e8      	b.n	23f004c <loop+0x29c>
 23f007a:	bf00      	nop
 23f007c:	1007a604 	.word	0x1007a604
 23f0080:	023fc5c7 	.word	0x023fc5c7
 23f0084:	023fc60c 	.word	0x023fc60c
 23f0088:	023fc621 	.word	0x023fc621
 23f008c:	023fc629 	.word	0x023fc629
 23f0090:	023fc641 	.word	0x023fc641
 23f0094:	023fc65a 	.word	0x023fc65a
 23f0098:	1007a60c 	.word	0x1007a60c
 23f009c:	023fc67f 	.word	0x023fc67f
 23f00a0:	023fc696 	.word	0x023fc696
 23f00a4:	023fc6b7 	.word	0x023fc6b7
 23f00a8:	023fc6d3 	.word	0x023fc6d3
 23f00ac:	023fc6f1 	.word	0x023fc6f1
 23f00b0:	1007a5c8 	.word	0x1007a5c8
 23f00b4:	1007a5c4 	.word	0x1007a5c4
 23f00b8:	023fc6ff 	.word	0x023fc6ff
 23f00bc:	023fc711 	.word	0x023fc711
 23f00c0:	023edcb5 	.word	0x023edcb5
 23f00c4:	023fc721 	.word	0x023fc721
 23f00c8:	023fc745 	.word	0x023fc745
 23f00cc:	023fc5dc 	.word	0x023fc5dc
 23f00d0:	023edb5d 	.word	0x023edb5d
 23f00d4:	023edea5 	.word	0x023edea5
 23f00d8:	023edeb9 	.word	0x023edeb9
 23f00dc:	023edeaf 	.word	0x023edeaf
 23f00e0:	1007a5c0 	.word	0x1007a5c0

023f00e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f00e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f00e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f00e8:	4604      	mov	r4, r0
 23f00ea:	460d      	mov	r5, r1
 23f00ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f00ee:	d916      	bls.n	23f011e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f00f0:	4290      	cmp	r0, r2
 23f00f2:	d215      	bcs.n	23f0120 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f00f4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f00f8:	1a75      	subs	r5, r6, r1
 23f00fa:	f1a1 0714 	sub.w	r7, r1, #20
 23f00fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f0100:	42b7      	cmp	r7, r6
 23f0102:	d01c      	beq.n	23f013e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f0104:	b12c      	cbz	r4, 23f0112 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f0106:	4631      	mov	r1, r6
 23f0108:	4620      	mov	r0, r4
 23f010a:	f008 fd4d 	bl	23f8ba8 <_ZN6StringC1EOS_>
 23f010e:	7c33      	ldrb	r3, [r6, #16]
 23f0110:	7423      	strb	r3, [r4, #16]
 23f0112:	4630      	mov	r0, r6
 23f0114:	f008 fccc 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f0118:	3e14      	subs	r6, #20
 23f011a:	3c14      	subs	r4, #20
 23f011c:	e7f0      	b.n	23f0100 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f011e:	d00e      	beq.n	23f013e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f0120:	42b5      	cmp	r5, r6
 23f0122:	d00c      	beq.n	23f013e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f0124:	b12c      	cbz	r4, 23f0132 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f0126:	4629      	mov	r1, r5
 23f0128:	4620      	mov	r0, r4
 23f012a:	f008 fd3d 	bl	23f8ba8 <_ZN6StringC1EOS_>
 23f012e:	7c2b      	ldrb	r3, [r5, #16]
 23f0130:	7423      	strb	r3, [r4, #16]
 23f0132:	4628      	mov	r0, r5
 23f0134:	f008 fcbc 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f0138:	3514      	adds	r5, #20
 23f013a:	3414      	adds	r4, #20
 23f013c:	e7f0      	b.n	23f0120 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f013e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f0140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f0140:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f0142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f0146:	e9c0 3300 	strd	r3, r3, [r0]
 23f014a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f014c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f014e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f0150:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f0152:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f0154:	dd24      	ble.n	23f01a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f0156:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f015a:	fb08 f007 	mul.w	r0, r8, r7
 23f015e:	f004 fb05 	bl	23f476c <malloc>
            if (!d) {
 23f0162:	4605      	mov	r5, r0
 23f0164:	b1e0      	cbz	r0, 23f01a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f0166:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f016a:	fb08 1202 	mla	r2, r8, r2, r1
 23f016e:	f7ff ffb9 	bl	23f00e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f0172:	6820      	ldr	r0, [r4, #0]
 23f0174:	f004 fb08 	bl	23f4788 <free>
        data_ = d;
 23f0178:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f017a:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f017c:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f0180:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f0184:	45b8      	cmp	r8, r7
 23f0186:	d009      	beq.n	23f019c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f0188:	4639      	mov	r1, r7
 23f018a:	4628      	mov	r0, r5
 23f018c:	f008 fd26 	bl	23f8bdc <_ZN6StringC1ERKS_>
 23f0190:	7c3b      	ldrb	r3, [r7, #16]
 23f0192:	3514      	adds	r5, #20
 23f0194:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f0198:	3714      	adds	r7, #20
 23f019a:	e7f3      	b.n	23f0184 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f019c:	6873      	ldr	r3, [r6, #4]
 23f019e:	6063      	str	r3, [r4, #4]
}
 23f01a0:	4620      	mov	r0, r4
 23f01a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f01a8 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23f01a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 23f01ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f01b0:	e9d0 9a00 	ldrd	r9, sl, [r0]
 23f01b4:	4693      	mov	fp, r2
 23f01b6:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
 23f01ba:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 23f01be:	4607      	mov	r7, r0
 23f01c0:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f01c2:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 23f01c6:	d102      	bne.n	23f01ce <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23f01c8:	4820      	ldr	r0, [pc, #128]	; (23f024c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0xa4>)
 23f01ca:	f009 f820 	bl	23f920e <_ZSt20__throw_length_errorPKc>
 23f01ce:	2c01      	cmp	r4, #1
 23f01d0:	4622      	mov	r2, r4
 23f01d2:	bf38      	it	cc
 23f01d4:	2201      	movcc	r2, #1
 23f01d6:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23f01d8:	eba1 0609 	sub.w	r6, r1, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f01dc:	d216      	bcs.n	23f020c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x64>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f01de:	b1bc      	cbz	r4, 23f0210 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x68>
 23f01e0:	429c      	cmp	r4, r3
 23f01e2:	bf28      	it	cs
 23f01e4:	461c      	movcs	r4, r3
        auto ptr = ei_dsp_malloc(bytes);
 23f01e6:	00a0      	lsls	r0, r4, #2
 23f01e8:	f000 ff8d 	bl	23f1106 <_Z9ei_mallocj>
 23f01ec:	4605      	mov	r5, r0
 23f01ee:	462a      	mov	r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f01f0:	4649      	mov	r1, r9
			       is_constructible<_Tp, _Args...>>>
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 23f01f2:	42f5      	cmn	r5, r6
 23f01f4:	bf1c      	itt	ne
 23f01f6:	f8db 3000 	ldrne.w	r3, [fp]
 23f01fa:	51ab      	strne	r3, [r5, r6]
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 23f01fc:	4588      	cmp	r8, r1
 23f01fe:	d009      	beq.n	23f0214 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x6c>
 23f0200:	b10a      	cbz	r2, 23f0206 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x5e>
 23f0202:	680b      	ldr	r3, [r1, #0]
 23f0204:	6013      	str	r3, [r2, #0]
 23f0206:	3104      	adds	r1, #4
 23f0208:	3204      	adds	r2, #4
 23f020a:	e7f7      	b.n	23f01fc <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f020c:	461c      	mov	r4, r3
 23f020e:	e7ea      	b.n	23f01e6 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f0210:	4625      	mov	r5, r4
 23f0212:	e7ec      	b.n	23f01ee <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x46>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 23f0214:	3604      	adds	r6, #4
 23f0216:	442e      	add	r6, r5
 23f0218:	4643      	mov	r3, r8
      _ForwardIterator __cur = __result;
 23f021a:	4632      	mov	r2, r6
      for (; __first != __last; ++__first, (void)++__cur)
 23f021c:	459a      	cmp	sl, r3
 23f021e:	d004      	beq.n	23f022a <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x82>
 23f0220:	f853 1b04 	ldr.w	r1, [r3], #4
 23f0224:	f842 1b04 	str.w	r1, [r2], #4
 23f0228:	e7f8      	b.n	23f021c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x74>
 23f022a:	ebaa 0808 	sub.w	r8, sl, r8
 23f022e:	4446      	add	r6, r8
	if (__p)
 23f0230:	f1b9 0f00 	cmp.w	r9, #0
 23f0234:	d002      	beq.n	23f023c <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_+0x94>
        ei_dsp_free(p,0);
 23f0236:	4648      	mov	r0, r9
 23f0238:	f000 ff69 	bl	23f110e <_Z7ei_freePv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f023c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 23f0240:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f0244:	60bc      	str	r4, [r7, #8]
    }
 23f0246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f024a:	bf00      	nop
 23f024c:	023fc763 	.word	0x023fc763

023f0250 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>:
    static int stack_frames(stack_frames_info_t *info,
 23f0250:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f0252:	ed2d 8b02 	vpush	{d8}
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 23f0256:	6802      	ldr	r2, [r0, #0]
    static int stack_frames(stack_frames_info_t *info,
 23f0258:	4604      	mov	r4, r0
 23f025a:	eef0 7a40 	vmov.f32	s15, s0
 23f025e:	b085      	sub	sp, #20
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 23f0260:	2a00      	cmp	r2, #0
 23f0262:	d06d      	beq.n	23f0340 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
 23f0264:	6893      	ldr	r3, [r2, #8]
 23f0266:	2b00      	cmp	r3, #0
 23f0268:	d06a      	beq.n	23f0340 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
 23f026a:	6913      	ldr	r3, [r2, #16]
 23f026c:	2b00      	cmp	r3, #0
 23f026e:	d067      	beq.n	23f0340 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf0>
        if (version == 1) {
 23f0270:	2901      	cmp	r1, #1
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f0272:	ee20 0a20 	vmul.f32	s0, s0, s1
            frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 23f0276:	ee67 8a81 	vmul.f32	s17, s15, s2
        if (version == 1) {
 23f027a:	d143      	bne.n	23f0304 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xb4>
 23f027c:	feb8 0a40 	vrinta.f32	s0, s0
            frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 23f0280:	eebd 8ac0 	vcvt.s32.f32	s16, s0
 23f0284:	fef8 8a68 	vrinta.f32	s17, s17
            length = frame_sample_length;
 23f0288:	ee18 1a10 	vmov	r1, s16
                floor(static_cast<float>(length_signal - length) / frame_stride));
 23f028c:	1a5b      	subs	r3, r3, r1
 23f028e:	ee07 3a90 	vmov	s15, r3
 23f0292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f0296:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  { return __builtin_floorf(__x); }
 23f029a:	fefb 7a47 	vrintm.f32	s15, s14
            numframes = static_cast<int>(
 23f029e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f02a2:	edcd 7a01 	vstr	s15, [sp, #4]
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 23f02a6:	9b01      	ldr	r3, [sp, #4]
            length = frame_sample_length;
 23f02a8:	2500      	movs	r5, #0
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 23f02aa:	3b01      	subs	r3, #1
 23f02ac:	ee07 3a90 	vmov	s15, r3
 23f02b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23f02b4:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 23f02b8:	eee8 7a87 	vfma.f32	s15, s17, s14
            len_sig = static_cast<int>(
 23f02bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            length = frame_sample_length;
 23f02c0:	462e      	mov	r6, r5
            len_sig = static_cast<int>(
 23f02c2:	edcd 7a02 	vstr	s15, [sp, #8]
            info->signal->total_length = static_cast<size_t>(len_sig);
 23f02c6:	9b02      	ldr	r3, [sp, #8]
        info->frame_ixs.clear();
 23f02c8:	1d27      	adds	r7, r4, #4
            info->signal->total_length = static_cast<size_t>(len_sig);
 23f02ca:	6113      	str	r3, [r2, #16]
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 23f02cc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23f02d0:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 23f02d2:	bf18      	it	ne
 23f02d4:	60a3      	strne	r3, [r4, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 23f02d6:	9b02      	ldr	r3, [sp, #8]
 23f02d8:	42ab      	cmp	r3, r5
 23f02da:	d92a      	bls.n	23f0332 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe2>
            if (++frame_count > numframes) break;
 23f02dc:	9b01      	ldr	r3, [sp, #4]
 23f02de:	3601      	adds	r6, #1
 23f02e0:	429e      	cmp	r6, r3
 23f02e2:	dc26      	bgt.n	23f0332 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe2>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23f02e4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f02e8:	4299      	cmp	r1, r3
            info->frame_ixs.push_back(ix);
 23f02ea:	9503      	str	r5, [sp, #12]
 23f02ec:	d01c      	beq.n	23f0328 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xd8>
 23f02ee:	b101      	cbz	r1, 23f02f2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xa2>
 23f02f0:	600d      	str	r5, [r1, #0]
	    ++this->_M_impl._M_finish;
 23f02f2:	68a3      	ldr	r3, [r4, #8]
 23f02f4:	3304      	adds	r3, #4
 23f02f6:	60a3      	str	r3, [r4, #8]
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 23f02f8:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 23f02fc:	ee17 3a90 	vmov	r3, s15
 23f0300:	441d      	add	r5, r3
 23f0302:	e7e8      	b.n	23f02d6 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x86>
            frame_sample_length = static_cast<int>(ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_length));
 23f0304:	f7fd fc2c 	bl	23edb60 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
 23f0308:	eebd 8ac0 	vcvt.s32.f32	s16, s0
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f030c:	eeb0 0a68 	vmov.f32	s0, s17
 23f0310:	f7fd fc26 	bl	23edb60 <_ZN2ei8speechpy10processingL31ceil_unless_very_close_to_floorEf>
            length = (frame_sample_length - (int)frame_stride);
 23f0314:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23f0318:	ee18 0a10 	vmov	r0, s16
 23f031c:	ee17 1a90 	vmov	r1, s15
            frame_stride = ceil_unless_very_close_to_floor(static_cast<float>(sampling_frequency) * frame_stride_arg);
 23f0320:	eef0 8a40 	vmov.f32	s17, s0
            length = (frame_sample_length - (int)frame_stride);
 23f0324:	1a41      	subs	r1, r0, r1
 23f0326:	e7b1      	b.n	23f028c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0x3c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 23f0328:	4638      	mov	r0, r7
 23f032a:	aa03      	add	r2, sp, #12
 23f032c:	f7ff ff3c 	bl	23f01a8 <_ZNSt6vectorImN2ei7EiAllocImEEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS3_EEDpOT_>
 23f0330:	e7e2      	b.n	23f02f8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xa8>
        info->frame_length = frame_sample_length;
 23f0332:	ed84 8a04 	vstr	s16, [r4, #16]
        return EIDSP_OK;
 23f0336:	2000      	movs	r0, #0
    }
 23f0338:	b005      	add	sp, #20
 23f033a:	ecbd 8b02 	vpop	{d8}
 23f033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 23f0340:	4800      	ldr	r0, [pc, #0]	; (23f0344 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xf4>)
 23f0342:	e7f9      	b.n	23f0338 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0+0xe8>
 23f0344:	fffffc15 	.word	0xfffffc15

023f0348 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe_v3(matrix_t *out_features, matrix_t *out_energies,
 23f0348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f034c:	b099      	sub	sp, #100	; 0x64
 23f034e:	4699      	mov	r9, r3
 23f0350:	e9dd ab24 	ldrd	sl, fp, [sp, #144]	; 0x90
 23f0354:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 23f0358:	4605      	mov	r5, r0
 23f035a:	460e      	mov	r6, r1
 23f035c:	eeb0 1a60 	vmov.f32	s2, s1
 23f0360:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 23f0364:	9305      	str	r3, [sp, #20]
        uint16_t version
        )
    {
        int ret = 0;

        if (high_frequency == 0) {
 23f0366:	f1bb 0f00 	cmp.w	fp, #0
 23f036a:	d101      	bne.n	23f0370 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x28>
            high_frequency = sampling_frequency / 2;
 23f036c:	ea4f 0b59 	mov.w	fp, r9, lsr #1
        }

        stack_frames_info_t stack_frame_info = { 0 };
        stack_frame_info.signal = signal;

        ret = processing::stack_frames(
 23f0370:	ee07 9a90 	vmov	s15, r9
        stack_frames_info_t stack_frame_info = { 0 };
 23f0374:	2300      	movs	r3, #0
        ret = processing::stack_frames(
 23f0376:	eef0 0a40 	vmov.f32	s1, s0
            low_frequency = 300;
 23f037a:	f1ba 0f00 	cmp.w	sl, #0
        ret = processing::stack_frames(
 23f037e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 23f0382:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 23f0386:	a80e      	add	r0, sp, #56	; 0x38
            low_frequency = 300;
 23f0388:	bf08      	it	eq
 23f038a:	f44f 7a96 	moveq.w	sl, #300	; 0x12c
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f038e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
        stack_frames_info_t stack_frame_info = { 0 };
 23f0392:	9312      	str	r3, [sp, #72]	; 0x48
 23f0394:	9311      	str	r3, [sp, #68]	; 0x44
        stack_frame_info.signal = signal;
 23f0396:	920e      	str	r2, [sp, #56]	; 0x38
        ret = processing::stack_frames(
 23f0398:	f7ff ff5a 	bl	23f0250 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
            frame_length,
            frame_stride,
            false,
            version
        );
        if (ret != 0) {
 23f039c:	4604      	mov	r4, r0
 23f039e:	2800      	cmp	r0, #0
 23f03a0:	f040 80e1 	bne.w	23f0566 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f03a4:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 23f03a8:	1a9b      	subs	r3, r3, r2
            EIDSP_ERR(ret);
        }

        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 23f03aa:	686a      	ldr	r2, [r5, #4]
 23f03ac:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23f03b0:	f040 80eb 	bne.w	23f058a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (num_filters != out_features->cols) {
 23f03b4:	68ab      	ldr	r3, [r5, #8]
 23f03b6:	4598      	cmp	r8, r3
 23f03b8:	f040 80e7 	bne.w	23f058a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (out_energies) {
 23f03bc:	b19e      	cbz	r6, 23f03e6 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x9e>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 23f03be:	6873      	ldr	r3, [r6, #4]
 23f03c0:	4293      	cmp	r3, r2
 23f03c2:	f040 80e2 	bne.w	23f058a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
 23f03c6:	68b3      	ldr	r3, [r6, #8]
 23f03c8:	2b01      	cmp	r3, #1
 23f03ca:	f040 80de 	bne.w	23f058a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x242>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
            }
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
            *(out_features->buffer + i) = 0;
 23f03ce:	2200      	movs	r2, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f03d0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f03d4:	434b      	muls	r3, r1
 23f03d6:	42a3      	cmp	r3, r4
 23f03d8:	d907      	bls.n	23f03ea <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xa2>
            *(out_features->buffer + i) = 0;
 23f03da:	682b      	ldr	r3, [r5, #0]
 23f03dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23f03e0:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f03e2:	3401      	adds	r4, #1
 23f03e4:	e7f4      	b.n	23f03d0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x88>
 23f03e6:	4634      	mov	r4, r6
 23f03e8:	e7f1      	b.n	23f03ce <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x86>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 23f03ea:	9b05      	ldr	r3, [sp, #20]
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 23f03ec:	2101      	movs	r1, #1
 23f03ee:	0858      	lsrs	r0, r3, #1
 23f03f0:	1c47      	adds	r7, r0, #1
 23f03f2:	fb00 8008 	mla	r0, r0, r8, r8
 23f03f6:	f000 fe88 	bl	23f110a <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f03fa:	2301      	movs	r3, #1
        }
        rows = n_rows;
        cols = n_cols;
        dequantization_fn = a_dequantization_fn;
 23f03fc:	4a64      	ldr	r2, [pc, #400]	; (23f0590 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x248>)
        cols = n_cols;
 23f03fe:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
            buffer = (uint8_t*)ei_calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 23f0402:	9013      	str	r0, [sp, #76]	; 0x4c
            buffer_managed_by_me = true;
 23f0404:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
        dequantization_fn = a_dequantization_fn;
 23f0408:	9217      	str	r2, [sp, #92]	; 0x5c

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 23f040a:	2800      	cmp	r0, #0
 23f040c:	f000 80bb 	beq.w	23f0586 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x23e>
#endif
        if (!filterbanks.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        ret = feature::filterbanks(
 23f0410:	e9cd b301 	strd	fp, r3, [sp, #4]
 23f0414:	463a      	mov	r2, r7
 23f0416:	464b      	mov	r3, r9
 23f0418:	4641      	mov	r1, r8
 23f041a:	f8cd a000 	str.w	sl, [sp]
 23f041e:	a813      	add	r0, sp, #76	; 0x4c
 23f0420:	f7fe fac2 	bl	23ee9a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 23f0424:	4604      	mov	r4, r0
 23f0426:	2800      	cmp	r0, #0
 23f0428:	f040 8096 	bne.w	23f0558 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
            EIDSP_ERR(ret);
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f042c:	4680      	mov	r8, r0
                    tmp += row[k] * quantized_values_one_zero[u8];
 23f042e:	f8df b174 	ldr.w	fp, [pc, #372]	; 23f05a4 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25c>
 23f0432:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 23f0436:	1a9b      	subs	r3, r3, r2
 23f0438:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
 23f043c:	f080 809f 	bcs.w	23f057e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x236>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f0440:	2300      	movs	r3, #0
 23f0442:	463a      	mov	r2, r7
 23f0444:	2101      	movs	r1, #1
 23f0446:	a806      	add	r0, sp, #24
 23f0448:	f7fd fd9b 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23f044c:	9b06      	ldr	r3, [sp, #24]
 23f044e:	2b00      	cmp	r3, #0
 23f0450:	f000 8093 	beq.w	23f057a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x232>
            if (!power_spectrum_frame.buffer) {
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f0454:	2300      	movs	r3, #0
 23f0456:	2101      	movs	r1, #1
 23f0458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f045a:	a80a      	add	r0, sp, #40	; 0x28
 23f045c:	f7fd fd91 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23f0460:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 23f0464:	f1b9 0f00 	cmp.w	r9, #0
 23f0468:	d06d      	beq.n	23f0546 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1fe>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 23f046a:	4641      	mov	r1, r8
 23f046c:	a80f      	add	r0, sp, #60	; 0x3c
 23f046e:	f7ff fb35 	bl	23efadc <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 23f0472:	6801      	ldr	r1, [r0, #0]
            size_t signal_length = stack_frame_info.frame_length;
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f0474:	980e      	ldr	r0, [sp, #56]	; 0x38
            size_t signal_length = stack_frame_info.frame_length;
 23f0476:	9a12      	ldr	r2, [sp, #72]	; 0x48
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f0478:	f8d0 c010 	ldr.w	ip, [r0, #16]
 23f047c:	188b      	adds	r3, r1, r2
 23f047e:	4563      	cmp	r3, ip
                signal_length = signal_length -
 23f0480:	bf84      	itt	hi
 23f0482:	eba2 020c 	subhi.w	r2, r2, ip
 23f0486:	18d2      	addhi	r2, r2, r3
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
            }

            ret = stack_frame_info.signal->get_data(
 23f0488:	464b      	mov	r3, r9
 23f048a:	f7fe ff25 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 23f048e:	4681      	mov	r9, r0
 23f0490:	2800      	cmp	r0, #0
 23f0492:	d15a      	bne.n	23f054a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
                EIDSP_ERR(ret);
            }

            ret = numpy::power_spectrum(
 23f0494:	9b05      	ldr	r3, [sp, #20]
 23f0496:	9a06      	ldr	r2, [sp, #24]
 23f0498:	9300      	str	r3, [sp, #0]
 23f049a:	9912      	ldr	r1, [sp, #72]	; 0x48
 23f049c:	463b      	mov	r3, r7
 23f049e:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f04a0:	f7fe f9c8 	bl	23ee834 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 23f04a4:	4681      	mov	r9, r0
 23f04a6:	2800      	cmp	r0, #0
 23f04a8:	d14f      	bne.n	23f054a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
        float res = 0.0f;
 23f04aa:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23f0594 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>
 23f04ae:	9b06      	ldr	r3, [sp, #24]
            res += input_array[ix];
 23f04b0:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f04b4:	f109 0901 	add.w	r9, r9, #1
 23f04b8:	454f      	cmp	r7, r9
            res += input_array[ix];
 23f04ba:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f04be:	d8f7      	bhi.n	23f04b0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x168>
                EIDSP_ERR(ret);
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
            if (energy == 0) {
 23f04c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f04c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
 23f04c8:	bf08      	it	eq
 23f04ca:	eddf 7a33 	vldreq	s15, [pc, #204]	; 23f0598 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x250>
            }

            if (out_energies) {
 23f04ce:	b126      	cbz	r6, 23f04da <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x192>
                out_energies->buffer[ix] = energy;
 23f04d0:	6833      	ldr	r3, [r6, #0]
 23f04d2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 23f04d6:	edc3 7a00 	vstr	s15, [r3]
        if (matrix1_cols != matrix2->rows) {
 23f04da:	9b14      	ldr	r3, [sp, #80]	; 0x50
            }

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 23f04dc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23f04e0:	429f      	cmp	r7, r3
 23f04e2:	d147      	bne.n	23f0574 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x22c>
 23f04e4:	2000      	movs	r0, #0
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 23f04e6:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
 23f04ea:	b283      	uxth	r3, r0
 23f04ec:	4563      	cmp	r3, ip
 23f04ee:	d221      	bcs.n	23f0534 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1ec>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f04f0:	2200      	movs	r2, #0
            float tmp = 0.0;
 23f04f2:	eddf 7a28 	vldr	s15, [pc, #160]	; 23f0594 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x24c>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f04f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f04f8:	eb01 0a03 	add.w	sl, r1, r3
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 23f04fc:	4297      	cmp	r7, r2
 23f04fe:	d910      	bls.n	23f0522 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1da>
                uint8_t u8 = matrix2->buffer[k * matrix2->cols + j];
 23f0500:	fb0c f102 	mul.w	r1, ip, r2
 23f0504:	f81a 1001 	ldrb.w	r1, [sl, r1]
                if (u8) { // this matrix appears to be very sparsely populated
 23f0508:	b149      	cbz	r1, 23f051e <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1d6>
                    tmp += row[k] * quantized_values_one_zero[u8];
 23f050a:	eb09 0e82 	add.w	lr, r9, r2, lsl #2
 23f050e:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 23f0512:	edde 6a00 	vldr	s13, [lr]
 23f0516:	ed91 7a00 	vldr	s14, [r1]
 23f051a:	eee6 7a87 	vfma.f32	s15, s13, s14
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 23f051e:	3201      	adds	r2, #1
 23f0520:	e7ec      	b.n	23f04fc <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x1b4>
            out_matrix->buffer[i * matrix2->cols + j] = tmp;
 23f0522:	fb0c 3c08 	mla	ip, ip, r8, r3
 23f0526:	682b      	ldr	r3, [r5, #0]
 23f0528:	3001      	adds	r0, #1
 23f052a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 23f052e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 23f0532:	e7d8      	b.n	23f04e6 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x19e>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f0534:	a80a      	add	r0, sp, #40	; 0x28
 23f0536:	f7fd fd39 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f053a:	a806      	add	r0, sp, #24
 23f053c:	f7fd fd36 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f0540:	f108 0801 	add.w	r8, r8, #1
 23f0544:	e775      	b.n	23f0432 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xea>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f0546:	f8df 9054 	ldr.w	r9, [pc, #84]	; 23f059c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>
 23f054a:	a80a      	add	r0, sp, #40	; 0x28
 23f054c:	f7fd fd2e 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23f0550:	464c      	mov	r4, r9
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f0552:	a806      	add	r0, sp, #24
 23f0554:	f7fd fd2a 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
#endif
        }
    }

    ~ei_quantized_matrix() {
        if (buffer && buffer_managed_by_me) {
 23f0558:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23f055a:	b120      	cbz	r0, 23f0566 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
 23f055c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f0560:	b10b      	cbz	r3, 23f0566 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
            ei_free(buffer);
 23f0562:	f000 fdd4 	bl	23f110e <_Z7ei_freePv>
      }
 23f0566:	a80f      	add	r0, sp, #60	; 0x3c
 23f0568:	f7ff faaf 	bl	23efaca <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
        }

        numpy::zero_handling(out_features);

        return EIDSP_OK;
    }
 23f056c:	4620      	mov	r0, r4
 23f056e:	b019      	add	sp, #100	; 0x64
 23f0570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f0574:	f8df 9028 	ldr.w	r9, [pc, #40]	; 23f05a0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>
 23f0578:	e7e7      	b.n	23f054a <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x202>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f057a:	4c08      	ldr	r4, [pc, #32]	; (23f059c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>)
 23f057c:	e7e9      	b.n	23f0552 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x20a>
        numpy::zero_handling(out_features);
 23f057e:	4628      	mov	r0, r5
 23f0580:	f7fe f996 	bl	23ee8b0 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
 23f0584:	e7e8      	b.n	23f0558 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 23f0586:	4c05      	ldr	r4, [pc, #20]	; (23f059c <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x254>)
 23f0588:	e7e6      	b.n	23f0558 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x210>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f058a:	4c05      	ldr	r4, [pc, #20]	; (23f05a0 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x258>)
 23f058c:	e7eb      	b.n	23f0566 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x21e>
 23f058e:	bf00      	nop
 23f0590:	023edb4d 	.word	0x023edb4d
 23f0594:	00000000 	.word	0x00000000
 23f0598:	2edbe6ff 	.word	0x2edbe6ff
 23f059c:	fffffc16 	.word	0xfffffc16
 23f05a0:	fffffc14 	.word	0xfffffc14
 23f05a4:	023fc964 	.word	0x023fc964

023f05a8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>:
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 23f05a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f05ac:	ed2d 8b06 	vpush	{d8-d10}
 23f05b0:	b095      	sub	sp, #84	; 0x54
 23f05b2:	460f      	mov	r7, r1
 23f05b4:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 23f05b8:	4604      	mov	r4, r0
 23f05ba:	9103      	str	r1, [sp, #12]
        if (high_frequency == 0) {
 23f05bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 23f05be:	eeb0 1a60 	vmov.f32	s2, s1
 23f05c2:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 23f05c6:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 23f05ca:	f8bd b0a0 	ldrh.w	fp, [sp, #160]	; 0xa0
        if (high_frequency == 0) {
 23f05ce:	b909      	cbnz	r1, 23f05d4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2c>
            high_frequency = sampling_frequency / 2;
 23f05d0:	0859      	lsrs	r1, r3, #1
 23f05d2:	9127      	str	r1, [sp, #156]	; 0x9c
        if (version<4) {
 23f05d4:	f1bb 0f03 	cmp.w	fp, #3
 23f05d8:	d804      	bhi.n	23f05e4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3c>
                low_frequency = 300;
 23f05da:	f1b8 0f00 	cmp.w	r8, #0
 23f05de:	bf08      	it	eq
 23f05e0:	f44f 7896 	moveq.w	r8, #300	; 0x12c
        ret = processing::stack_frames(
 23f05e4:	ee07 3a90 	vmov	s15, r3
        stack_frames_info_t stack_frame_info = { 0 };
 23f05e8:	2100      	movs	r1, #0
        ret = processing::stack_frames(
 23f05ea:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 23f05ee:	eef0 0a40 	vmov.f32	s1, s0
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f05f2:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
        stack_frames_info_t stack_frame_info = { 0 };
 23f05f6:	9113      	str	r1, [sp, #76]	; 0x4c
 23f05f8:	9112      	str	r1, [sp, #72]	; 0x48
        ret = processing::stack_frames(
 23f05fa:	eeb0 0a49 	vmov.f32	s0, s18
 23f05fe:	4659      	mov	r1, fp
 23f0600:	a80f      	add	r0, sp, #60	; 0x3c
        stack_frame_info.signal = signal;
 23f0602:	920f      	str	r2, [sp, #60]	; 0x3c
        ret = processing::stack_frames(
 23f0604:	f7ff fe24 	bl	23f0250 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEfffbt.constprop.0>
        if (ret != 0) {
 23f0608:	4605      	mov	r5, r0
 23f060a:	bba0      	cbnz	r0, 23f0676 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f060c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f0610:	1a9b      	subs	r3, r3, r2
        if (stack_frame_info.frame_ixs.size() != out_features->rows) {
 23f0612:	6862      	ldr	r2, [r4, #4]
 23f0614:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23f0618:	f040 8187 	bne.w	23f092a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
        if (num_filters != out_features->cols) {
 23f061c:	68a3      	ldr	r3, [r4, #8]
 23f061e:	459a      	cmp	sl, r3
 23f0620:	f040 8183 	bne.w	23f092a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
        if (out_energies) {
 23f0624:	b19f      	cbz	r7, 23f064e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xa6>
            if (stack_frame_info.frame_ixs.size() != out_energies->rows || out_energies->cols != 1) {
 23f0626:	687b      	ldr	r3, [r7, #4]
 23f0628:	4293      	cmp	r3, r2
 23f062a:	f040 817e 	bne.w	23f092a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
 23f062e:	68bb      	ldr	r3, [r7, #8]
 23f0630:	2b01      	cmp	r3, #1
 23f0632:	f040 817a 	bne.w	23f092a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x382>
            *(out_features->buffer + i) = 0;
 23f0636:	2200      	movs	r2, #0
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f0638:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 23f063c:	434b      	muls	r3, r1
 23f063e:	42ab      	cmp	r3, r5
 23f0640:	d907      	bls.n	23f0652 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xaa>
            *(out_features->buffer + i) = 0;
 23f0642:	6823      	ldr	r3, [r4, #0]
 23f0644:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23f0648:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 23f064a:	3501      	adds	r5, #1
 23f064c:	e7f4      	b.n	23f0638 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x90>
 23f064e:	463d      	mov	r5, r7
 23f0650:	e7f1      	b.n	23f0636 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x8e>
        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 23f0652:	9b03      	ldr	r3, [sp, #12]
        const int MELS_SIZE = num_filters + 2;
 23f0654:	f10a 0602 	add.w	r6, sl, #2
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 23f0658:	2104      	movs	r1, #4
 23f065a:	4630      	mov	r0, r6
        const size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 23f065c:	ea4f 0953 	mov.w	r9, r3, lsr #1
        mels = (float*)ei_calloc(MELS_SIZE, sizeof(float));
 23f0660:	f000 fd53 	bl	23f110a <_Z9ei_callocjj>
 23f0664:	f109 0901 	add.w	r9, r9, #1
        EI_ERR_AND_RETURN_ON_NULL(mels, EIDSP_OUT_OF_MEM);
 23f0668:	4605      	mov	r5, r0
 23f066a:	b968      	cbnz	r0, 23f0688 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xe0>
 23f066c:	48b2      	ldr	r0, [pc, #712]	; (23f0938 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x390>)
 23f066e:	f000 fd1d 	bl	23f10ac <_Z9ei_printfPKcz>
 23f0672:	f2a5 35ea 	subw	r5, r5, #1002	; 0x3ea
      }
 23f0676:	a810      	add	r0, sp, #64	; 0x40
 23f0678:	f7ff fa27 	bl	23efaca <_ZNSt12_Vector_baseImN2ei7EiAllocImEEED1Ev>
    }
 23f067c:	4628      	mov	r0, r5
 23f067e:	b015      	add	sp, #84	; 0x54
 23f0680:	ecbd 8b06 	vpop	{d8-d10}
 23f0684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        numpy::linspace(
 23f0688:	ee07 8a90 	vmov	s15, r8
 23f068c:	eef8 8a67 	vcvt.f32.u32	s17, s15
 23f0690:	4aaa      	ldr	r2, [pc, #680]	; (23f093c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x394>)
 23f0692:	eeb0 0a68 	vmov.f32	s0, s17
 23f0696:	e9cd 2005 	strd	r2, r0, [sp, #20]
 23f069a:	f7fe f921 	bl	23ee8e0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f069e:	eddd 7a27 	vldr	s15, [sp, #156]	; 0x9c
 23f06a2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 23f06a6:	eef0 9a40 	vmov.f32	s19, s0
 23f06aa:	eeb0 0a48 	vmov.f32	s0, s16
 23f06ae:	f7fe f917 	bl	23ee8e0 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 23f06b2:	4630      	mov	r0, r6
 23f06b4:	eef0 0a40 	vmov.f32	s1, s0
 23f06b8:	4629      	mov	r1, r5
 23f06ba:	eeb0 0a69 	vmov.f32	s0, s19
 23f06be:	f7fd fc0d 	bl	23ededc <_ZN2ei5numpy8linspaceEffmPf.isra.0>
        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 23f06c2:	9b03      	ldr	r3, [sp, #12]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f06c4:	2600      	movs	r6, #0
        uint16_t max_bin = version >= 4 ? fft_length : power_spectrum_frame_size; // preserve a bug in v<4
 23f06c6:	f1bb 0f03 	cmp.w	fp, #3
 23f06ca:	bf98      	it	ls
 23f06cc:	464b      	movls	r3, r9
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f06ce:	3301      	adds	r3, #1
 23f06d0:	ee0a 3a10 	vmov	s20, r3
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f06d4:	f06f 0b01 	mvn.w	fp, #1
            mels[ix] = functions::mel_to_frequency(mels[ix]);
 23f06d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23f06dc:	ed98 0a00 	vldr	s0, [r8]
 23f06e0:	f7fe f940 	bl	23ee964 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
                mels[ix] = low_frequency;
 23f06e4:	eef4 8a40 	vcmp.f32	s17, s0
 23f06e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f06ec:	fe38 0a80 	vselgt.f32	s0, s17, s0
                mels[ix] = high_frequency;
 23f06f0:	eeb4 8a40 	vcmp.f32	s16, s0
 23f06f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f06f8:	eef8 9aca 	vcvt.f32.s32	s19, s20
                mels[ix] = high_frequency;
 23f06fc:	bf48      	it	mi
 23f06fe:	eeb0 0a48 	vmovmi.f32	s0, s16
 23f0702:	ed88 0a00 	vstr	s0, [r8]
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f0706:	ee29 0a80 	vmul.f32	s0, s19, s0
 23f070a:	ee80 7a09 	vdiv.f32	s14, s0, s18
 23f070e:	febb 7a47 	vrintm.f32	s14, s14
 23f0712:	eebd 7ac7 	vcvt.s32.f32	s14, s14
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f0716:	ee17 3a10 	vmov	r3, s14
 23f071a:	fb0b f206 	mul.w	r2, fp, r6
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f071e:	3601      	adds	r6, #1
 23f0720:	b2b6      	uxth	r6, r6
 23f0722:	45b2      	cmp	sl, r6
            bins[ix] = get_fft_bin_from_hertz(max_bin, mels[ix], sampling_frequency);
 23f0724:	f828 3002 	strh.w	r3, [r8, r2]
        for (uint16_t ix = 0; ix < MELS_SIZE-1; ix++) {
 23f0728:	dad6      	bge.n	23f06d8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x130>
        mels[MELS_SIZE-1] = functions::mel_to_frequency(mels[MELS_SIZE-1]);
 23f072a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 23f072e:	3301      	adds	r3, #1
 23f0730:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 23f0734:	ed96 0a00 	vldr	s0, [r6]
 23f0738:	f7fe f914 	bl	23ee964 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
            mels[MELS_SIZE-1] = high_frequency;
 23f073c:	eeb4 8ac0 	vcmpe.f32	s16, s0
 23f0740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        mels[MELS_SIZE-1] -= 0.001;
 23f0744:	bf54      	ite	pl
 23f0746:	ee10 0a10 	vmovpl	r0, s0
 23f074a:	ee18 0a10 	vmovmi	r0, s16
 23f074e:	f7f9 f923 	bl	23e9998 <__aeabi_f2d>
 23f0752:	a377      	add	r3, pc, #476	; (adr r3, 23f0930 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x388>)
 23f0754:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0758:	f7f8 ffbe 	bl	23e96d8 <__aeabi_dsub>
 23f075c:	f7f9 fc6c 	bl	23ea038 <__aeabi_d2f>
 23f0760:	ee07 0a90 	vmov	s15, r0
        return static_cast<int>(floor((fft_size + 1) * hertz / sampling_freq));
 23f0764:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23f0768:	ee87 7a89 	vdiv.f32	s14, s15, s18
 23f076c:	fefb 7a47 	vrintm.f32	s15, s14
 23f0770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 23f0774:	ee17 2a90 	vmov	r2, s15
 23f0778:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 23f077c:	3301      	adds	r3, #1
        mels[MELS_SIZE-1] -= 0.001;
 23f077e:	6030      	str	r0, [r6, #0]
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f0780:	2101      	movs	r1, #1
        bins[MELS_SIZE-1] = get_fft_bin_from_hertz(max_bin, mels[MELS_SIZE-1], sampling_frequency);
 23f0782:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f0786:	a807      	add	r0, sp, #28
 23f0788:	2300      	movs	r3, #0
 23f078a:	464a      	mov	r2, r9
 23f078c:	f7fd fbf9 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23f0790:	9b07      	ldr	r3, [sp, #28]
 23f0792:	2b00      	cmp	r3, #0
 23f0794:	f000 80c7 	beq.w	23f0926 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x37e>
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f0798:	2300      	movs	r3, #0
 23f079a:	2101      	movs	r1, #1
 23f079c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23f079e:	a80b      	add	r0, sp, #44	; 0x2c
 23f07a0:	f7fd fbef 	bl	23edf82 <_ZN2ei9ei_matrixC1EmmPf>
 23f07a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f07a6:	2b00      	cmp	r3, #0
 23f07a8:	f000 80ba 	beq.w	23f0920 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x378>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f07ac:	2600      	movs	r6, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f07ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f07b2:	1a9b      	subs	r3, r3, r2
 23f07b4:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
 23f07b8:	f080 80a2 	bcs.w	23f0900 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x358>
            size_t signal_offset = stack_frame_info.frame_ixs.at(ix);
 23f07bc:	4631      	mov	r1, r6
 23f07be:	a810      	add	r0, sp, #64	; 0x40
 23f07c0:	f7ff f98c 	bl	23efadc <_ZNSt6vectorImN2ei7EiAllocImEEE2atEj>
 23f07c4:	6801      	ldr	r1, [r0, #0]
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f07c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
            size_t signal_length = stack_frame_info.frame_length;
 23f07c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 23f07ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 23f07ce:	188b      	adds	r3, r1, r2
 23f07d0:	4563      	cmp	r3, ip
                signal_length = signal_length -
 23f07d2:	bf84      	itt	hi
 23f07d4:	eba2 020c 	subhi.w	r2, r2, ip
 23f07d8:	18d2      	addhi	r2, r2, r3
            ret = stack_frame_info.signal->get_data(
 23f07da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f07dc:	f7fe fd7c 	bl	23ef2d8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
            if (ret != 0) {
 23f07e0:	4680      	mov	r8, r0
 23f07e2:	2800      	cmp	r0, #0
 23f07e4:	f040 8091 	bne.w	23f090a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
            ret = numpy::power_spectrum(
 23f07e8:	9b03      	ldr	r3, [sp, #12]
 23f07ea:	9a07      	ldr	r2, [sp, #28]
 23f07ec:	9300      	str	r3, [sp, #0]
 23f07ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23f07f0:	464b      	mov	r3, r9
 23f07f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23f07f4:	f7fe f81e 	bl	23ee834 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
            if (ret != 0) {
 23f07f8:	4680      	mov	r8, r0
 23f07fa:	2800      	cmp	r0, #0
 23f07fc:	f040 8085 	bne.w	23f090a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
        float res = 0.0f;
 23f0800:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23f0940 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x398>
 23f0804:	9b07      	ldr	r3, [sp, #28]
            res += input_array[ix];
 23f0806:	ecb3 7a01 	vldmia	r3!, {s14}
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f080a:	f108 0801 	add.w	r8, r8, #1
 23f080e:	45c1      	cmp	r9, r8
            res += input_array[ix];
 23f0810:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23f0814:	d8f7      	bhi.n	23f0806 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x25e>
            if (energy == 0) {
 23f0816:	eef5 7a40 	vcmp.f32	s15, #0.0
 23f081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                energy = 1e-10;
 23f081e:	bf08      	it	eq
 23f0820:	eddf 7a48 	vldreq	s15, [pc, #288]	; 23f0944 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x39c>
            if (out_energies) {
 23f0824:	b127      	cbz	r7, 23f0830 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x288>
                out_energies->buffer[ix] = energy;
 23f0826:	683b      	ldr	r3, [r7, #0]
 23f0828:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23f082c:	edc3 7a00 	vstr	s15, [r3]
            for (size_t i = 0; i < num_filters; i++) {
 23f0830:	4629      	mov	r1, r5
 23f0832:	f04f 0c00 	mov.w	ip, #0
 23f0836:	68a3      	ldr	r3, [r4, #8]
 23f0838:	6822      	ldr	r2, [r4, #0]
 23f083a:	4373      	muls	r3, r6
 23f083c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23f0840:	45e2      	cmp	sl, ip
 23f0842:	d95b      	bls.n	23f08fc <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x354>
                size_t left = bins[i];
 23f0844:	f8b1 b000 	ldrh.w	fp, [r1]
                size_t middle = bins[i+1];
 23f0848:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 23f084c:	f10c 0c01 	add.w	ip, ip, #1
                size_t right = bins[i+2];
 23f0850:	f8b1 8002 	ldrh.w	r8, [r1, #2]
                assert(right < power_spectrum_frame_size);
 23f0854:	45c1      	cmp	r9, r8
 23f0856:	d806      	bhi.n	23f0866 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2be>
 23f0858:	f240 115f 	movw	r1, #351	; 0x15f
 23f085c:	4b3a      	ldr	r3, [pc, #232]	; (23f0948 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a0>)
 23f085e:	4a3b      	ldr	r2, [pc, #236]	; (23f094c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a4>)
 23f0860:	483b      	ldr	r0, [pc, #236]	; (23f0950 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3a8>)
 23f0862:	f003 ffe5 	bl	23f4830 <__assert_func>
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 23f0866:	9807      	ldr	r0, [sp, #28]
                for (size_t bin = left+1; bin < right; bin++) {
 23f0868:	f10b 0e01 	add.w	lr, fp, #1
                row_ptr[i] = power_spectrum_frame.buffer[middle];
 23f086c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 23f0870:	6800      	ldr	r0, [r0, #0]
 23f0872:	f843 0b04 	str.w	r0, [r3], #4
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f0876:	eba2 000b 	sub.w	r0, r2, fp
 23f087a:	ee07 0a10 	vmov	s14, r0
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f087e:	eba8 0002 	sub.w	r0, r8, r2
 23f0882:	ee06 0a90 	vmov	s13, r0
                for (size_t bin = left+1; bin < right; bin++) {
 23f0886:	45c6      	cmp	lr, r8
 23f0888:	d2da      	bcs.n	23f0840 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x298>
                    if (bin < middle) {
 23f088a:	4596      	cmp	lr, r2
 23f088c:	d218      	bcs.n	23f08c0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x318>
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f088e:	ee07 ba90 	vmov	s15, fp
 23f0892:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 23f0896:	ee07 ea90 	vmov	s15, lr
 23f089a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f089e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 23f08a2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
                            power_spectrum_frame.buffer[bin];
 23f08a6:	9807      	ldr	r0, [sp, #28]
                            ((static_cast<float>(bin) - left) / (middle - left)) * // weight *
 23f08a8:	eec7 5a86 	vdiv.f32	s11, s15, s12
                            power_spectrum_frame.buffer[bin];
 23f08ac:	eb00 008e 	add.w	r0, r0, lr, lsl #2
                        row_ptr[i] +=
 23f08b0:	ed90 6a00 	vldr	s12, [r0]
 23f08b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 23f08b8:	eee5 7a86 	vfma.f32	s15, s11, s12
 23f08bc:	ed43 7a01 	vstr	s15, [r3, #-4]
                    if (bin > middle) {
 23f08c0:	4596      	cmp	lr, r2
 23f08c2:	d918      	bls.n	23f08f6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x34e>
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f08c4:	ee07 ea90 	vmov	s15, lr
 23f08c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 23f08cc:	ee07 8a90 	vmov	s15, r8
 23f08d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f08d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 23f08d8:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                            power_spectrum_frame.buffer[bin];
 23f08dc:	9807      	ldr	r0, [sp, #28]
                            ((right - static_cast<float>(bin)) / (right - middle)) * // weight *
 23f08de:	eec7 5a86 	vdiv.f32	s11, s15, s12
                            power_spectrum_frame.buffer[bin];
 23f08e2:	eb00 008e 	add.w	r0, r0, lr, lsl #2
                        row_ptr[i] +=
 23f08e6:	ed90 6a00 	vldr	s12, [r0]
 23f08ea:	ed53 7a01 	vldr	s15, [r3, #-4]
 23f08ee:	eee5 7a86 	vfma.f32	s15, s11, s12
 23f08f2:	ed43 7a01 	vstr	s15, [r3, #-4]
                for (size_t bin = left+1; bin < right; bin++) {
 23f08f6:	f10e 0e01 	add.w	lr, lr, #1
 23f08fa:	e7c4      	b.n	23f0886 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x2de>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs.size(); ix++) {
 23f08fc:	3601      	adds	r6, #1
 23f08fe:	e756      	b.n	23f07ae <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x206>
        numpy::zero_handling(out_features);
 23f0900:	4620      	mov	r0, r4
 23f0902:	f7fd ffd5 	bl	23ee8b0 <_ZN2ei5numpy13zero_handlingEPNS_9ei_matrixE>
        return EIDSP_OK;
 23f0906:	f04f 0800 	mov.w	r8, #0
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f090a:	a80b      	add	r0, sp, #44	; 0x2c
 23f090c:	f7fd fb4e 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
 23f0910:	4645      	mov	r5, r8
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f0912:	a807      	add	r0, sp, #28
 23f0914:	f7fd fb4a 	bl	23edfac <_ZN2ei9ei_matrixD1Ev>
        ei_unique_ptr_t __ptr__(mels,ei_free);
 23f0918:	a805      	add	r0, sp, #20
 23f091a:	f7fe fc8e 	bl	23ef23a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 23f091e:	e6aa      	b.n	23f0676 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
        EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 23f0920:	f8df 8030 	ldr.w	r8, [pc, #48]	; 23f0954 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ac>
 23f0924:	e7f1      	b.n	23f090a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x362>
        EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 23f0926:	4d0b      	ldr	r5, [pc, #44]	; (23f0954 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3ac>)
 23f0928:	e7f3      	b.n	23f0912 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x36a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f092a:	4d0b      	ldr	r5, [pc, #44]	; (23f0958 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0x3b0>)
 23f092c:	e6a3      	b.n	23f0676 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt+0xce>
 23f092e:	bf00      	nop
 23f0930:	d2f1a9fc 	.word	0xd2f1a9fc
 23f0934:	3f50624d 	.word	0x3f50624d
 23f0938:	023fc7aa 	.word	0x023fc7aa
 23f093c:	023f110f 	.word	0x023f110f
 23f0940:	00000000 	.word	0x00000000
 23f0944:	2edbe6ff 	.word	0x2edbe6ff
 23f0948:	023fc7bd 	.word	0x023fc7bd
 23f094c:	023fc7df 	.word	0x023fc7df
 23f0950:	023fc87c 	.word	0x023fc87c
 23f0954:	fffffc16 	.word	0xfffffc16
 23f0958:	fffffc14 	.word	0xfffffc14

023f095c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0960:	ed2d 8b02 	vpush	{d8}
 23f0964:	b093      	sub	sp, #76	; 0x4c
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f0966:	e9d2 7305 	ldrd	r7, r3, [r2, #20]
 23f096a:	9309      	str	r3, [sp, #36]	; 0x24
 23f096c:	69d3      	ldr	r3, [r2, #28]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f096e:	4680      	mov	r8, r0
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f0970:	9307      	str	r3, [sp, #28]
 23f0972:	6a13      	ldr	r3, [r2, #32]
__attribute__((unused)) int extract_mfe_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float sampling_frequency) {
 23f0974:	460c      	mov	r4, r1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f0976:	9308      	str	r3, [sp, #32]
 23f0978:	6a53      	ldr	r3, [r2, #36]	; 0x24
 23f097a:	ed92 8a03 	vldr	s16, [r2, #12]
 23f097e:	930a      	str	r3, [sp, #40]	; 0x28
    if (config.axes != 1) {
 23f0980:	6893      	ldr	r3, [r2, #8]
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f0982:	edd2 8a04 	vldr	s17, [r2, #16]
    if (config.axes != 1) {
 23f0986:	2b01      	cmp	r3, #1
    ei_dsp_config_mfe_t config = *((ei_dsp_config_mfe_t*)config_ptr);
 23f0988:	8896      	ldrh	r6, [r2, #4]
 23f098a:	f8d2 b028 	ldr.w	fp, [r2, #40]	; 0x28
    if (config.axes != 1) {
 23f098e:	f040 80ab 	bne.w	23f0ae8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
    if (signal->total_length == 0) {
 23f0992:	6902      	ldr	r2, [r0, #16]
 23f0994:	2a00      	cmp	r2, #0
 23f0996:	f000 80a9 	beq.w	23f0aec <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x190>
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 23f099a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    _Function_base() : _M_manager(nullptr) { }
 23f099e:	2100      	movs	r1, #0
    if (config.implementation_version < 3) {
 23f09a0:	2e02      	cmp	r6, #2
    const uint32_t frequency = static_cast<uint32_t>(sampling_frequency);
 23f09a2:	ee17 5a90 	vmov	r5, s15
 23f09a6:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23f0b14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
 23f09aa:	910f      	str	r1, [sp, #60]	; 0x3c
    if (config.implementation_version < 3) {
 23f09ac:	d832      	bhi.n	23f0a14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>
        preemphasis = nullptr;
 23f09ae:	f8ca 1000 	str.w	r1, [sl]
        preemphasized_audio_signal.get_data = signal->get_data;
 23f09b2:	4601      	mov	r1, r0
 23f09b4:	a80d      	add	r0, sp, #52	; 0x34
        preemphasized_audio_signal.total_length = signal->total_length;
 23f09b6:	9211      	str	r2, [sp, #68]	; 0x44
        preemphasized_audio_signal.get_data = signal->get_data;
 23f09b8:	f7ff f9ca 	bl	23efd50 <_ZNSt8functionIFijjPfEEaSERKS2_.isra.0>
            config.implementation_version);
 23f09bc:	b2bb      	uxth	r3, r7
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length, float frame_stride, uint16_t num_filters,
        uint16_t version)
    {
        int32_t rows = processing::calculate_no_of_stack_frames(
 23f09be:	4632      	mov	r2, r6
 23f09c0:	4629      	mov	r1, r5
 23f09c2:	eef0 0a68 	vmov.f32	s1, s17
 23f09c6:	eeb0 0a48 	vmov.f32	s0, s16
 23f09ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 23f09cc:	930b      	str	r3, [sp, #44]	; 0x2c
 23f09ce:	f7fd fa15 	bl	23eddfc <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffbt.constprop.0>
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 23f09d2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 23f09d6:	b2bf      	uxth	r7, r7
 23f09d8:	fb07 f900 	mul.w	r9, r7, r0
 23f09dc:	4680      	mov	r8, r0
 23f09de:	fb02 f001 	mul.w	r0, r2, r1
 23f09e2:	4581      	cmp	r9, r0
 23f09e4:	f8df a12c 	ldr.w	sl, [pc, #300]	; 23f0b14 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
 23f09e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f09ea:	d92a      	bls.n	23f0a42 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        ei_printf("out_matrix = %dx%d\n", (int)output_matrix->rows, (int)output_matrix->cols);
 23f09ec:	4840      	ldr	r0, [pc, #256]	; (23f0af0 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x194>)
 23f09ee:	f000 fb5d 	bl	23f10ac <_Z9ei_printfPKcz>
        ei_printf("calculated size = %dx%d\n", (int)out_matrix_size.rows, (int)out_matrix_size.cols);
 23f09f2:	463a      	mov	r2, r7
 23f09f4:	4641      	mov	r1, r8
 23f09f6:	483f      	ldr	r0, [pc, #252]	; (23f0af4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x198>)
 23f09f8:	f000 fb58 	bl	23f10ac <_Z9ei_printfPKcz>
        if (preemphasis) {
 23f09fc:	f8da 4000 	ldr.w	r4, [sl]
 23f0a00:	b134      	cbz	r4, 23f0a10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb4>
            delete preemphasis;
 23f0a02:	4620      	mov	r0, r4
 23f0a04:	f7fd ffc2 	bl	23ee98c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 23f0a08:	211c      	movs	r1, #28
 23f0a0a:	4620      	mov	r0, r4
 23f0a0c:	f7f9 fd97 	bl	23ea53e <_ZdlPvj>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f0a10:	4d39      	ldr	r5, [pc, #228]	; (23f0af8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
 23f0a12:	e03e      	b.n	23f0a92 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        class speechpy::processing::preemphasis *pre = new class speechpy::processing::preemphasis(signal, 1, 0.98f, true);
 23f0a14:	201c      	movs	r0, #28
 23f0a16:	930b      	str	r3, [sp, #44]	; 0x2c
 23f0a18:	f7f9 fd8b 	bl	23ea532 <_Znwj>
 23f0a1c:	4681      	mov	r9, r0
 23f0a1e:	b130      	cbz	r0, 23f0a2e <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xd2>
 23f0a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f0a22:	ed9f 0a36 	vldr	s0, [pc, #216]	; 23f0afc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a0>
 23f0a26:	461a      	mov	r2, r3
 23f0a28:	4641      	mov	r1, r8
 23f0a2a:	f7fe fd03 	bl	23ef434 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEifb>
        preemphasized_audio_signal.total_length = signal->total_length;
 23f0a2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 23f0a32:	4933      	ldr	r1, [pc, #204]	; (23f0b00 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a4>)
 23f0a34:	a80d      	add	r0, sp, #52	; 0x34
        preemphasis = pre;
 23f0a36:	f8ca 9000 	str.w	r9, [sl]
        preemphasized_audio_signal.total_length = signal->total_length;
 23f0a3a:	9311      	str	r3, [sp, #68]	; 0x44
        preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 23f0a3c:	f7ff f9a0 	bl	23efd80 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
 23f0a40:	e7bc      	b.n	23f09bc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f0a42:	9908      	ldr	r1, [sp, #32]
    output_matrix->cols = out_matrix_size.cols;
 23f0a44:	e9c4 8701 	strd	r8, r7, [r4, #4]
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f0a48:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 23f0a4c:	9103      	str	r1, [sp, #12]
 23f0a4e:	9907      	ldr	r1, [sp, #28]
    if (config.implementation_version > 2) {
 23f0a50:	2e02      	cmp	r6, #2
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f0a52:	e9cd 2101 	strd	r2, r1, [sp, #4]
 23f0a56:	9300      	str	r3, [sp, #0]
 23f0a58:	eef0 0a68 	vmov.f32	s1, s17
 23f0a5c:	eeb0 0a48 	vmov.f32	s0, s16
 23f0a60:	462b      	mov	r3, r5
 23f0a62:	f04f 0100 	mov.w	r1, #0
 23f0a66:	4620      	mov	r0, r4
 23f0a68:	9604      	str	r6, [sp, #16]
 23f0a6a:	aa0d      	add	r2, sp, #52	; 0x34
    if (config.implementation_version > 2) {
 23f0a6c:	d91a      	bls.n	23f0aa4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
        ret = speechpy::feature::mfe(output_matrix, nullptr, &preemphasized_audio_signal,
 23f0a6e:	f7ff fd9b 	bl	23f05a8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
    if (preemphasis) {
 23f0a72:	f8da 7000 	ldr.w	r7, [sl]
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 23f0a76:	4605      	mov	r5, r0
    if (preemphasis) {
 23f0a78:	b137      	cbz	r7, 23f0a88 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        delete preemphasis;
 23f0a7a:	4638      	mov	r0, r7
 23f0a7c:	f7fd ff86 	bl	23ee98c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
 23f0a80:	211c      	movs	r1, #28
 23f0a82:	4638      	mov	r0, r7
 23f0a84:	f7f9 fd5b 	bl	23ea53e <_ZdlPvj>
    if (ret != EIDSP_OK) {
 23f0a88:	b17d      	cbz	r5, 23f0aaa <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
        ei_printf("ERR: MFE failed (%d)\n", ret);
 23f0a8a:	4629      	mov	r1, r5
 23f0a8c:	481d      	ldr	r0, [pc, #116]	; (23f0b04 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a8>)
 23f0a8e:	f000 fb0d 	bl	23f10ac <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f0a92:	a80d      	add	r0, sp, #52	; 0x34
 23f0a94:	f7fd fa6c 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
}
 23f0a98:	4628      	mov	r0, r5
 23f0a9a:	b013      	add	sp, #76	; 0x4c
 23f0a9c:	ecbd 8b02 	vpop	{d8}
 23f0aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = speechpy::feature::mfe_v3(output_matrix, nullptr, &preemphasized_audio_signal,
 23f0aa4:	f7ff fc50 	bl	23f0348 <_ZN2ei8speechpy7feature6mfe_v3EPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmmt>
 23f0aa8:	e7e3      	b.n	23f0a72 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x116>
    if (config.implementation_version < 3) {
 23f0aaa:	2e02      	cmp	r6, #2
 23f0aac:	d80e      	bhi.n	23f0acc <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x170>
        ret = speechpy::processing::cmvnw(output_matrix, config.win_size, false, true);
 23f0aae:	2301      	movs	r3, #1
 23f0ab0:	462a      	mov	r2, r5
 23f0ab2:	4620      	mov	r0, r4
 23f0ab4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 23f0ab8:	f7fd fda6 	bl	23ee608 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtbb>
        if (ret != EIDSP_OK) {
 23f0abc:	4606      	mov	r6, r0
 23f0abe:	b170      	cbz	r0, 23f0ade <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            ei_printf("ERR: cmvnw failed (%d)\n", ret);
 23f0ac0:	4601      	mov	r1, r0
 23f0ac2:	4811      	ldr	r0, [pc, #68]	; (23f0b08 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ac>)
            ei_printf("ERR: normalization failed (%d)\n", ret);
 23f0ac4:	f000 faf2 	bl	23f10ac <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 23f0ac8:	4635      	mov	r5, r6
 23f0aca:	e7e2      	b.n	23f0a92 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        ret = speechpy::processing::mfe_normalization(output_matrix, config.noise_floor_db);
 23f0acc:	4659      	mov	r1, fp
 23f0ace:	4620      	mov	r0, r4
 23f0ad0:	f7fd f85e 	bl	23edb90 <_ZN2ei8speechpy10processingL17mfe_normalizationEPNS_9ei_matrixEi>
        if (ret != EIDSP_OK) {
 23f0ad4:	4606      	mov	r6, r0
 23f0ad6:	b110      	cbz	r0, 23f0ade <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            ei_printf("ERR: normalization failed (%d)\n", ret);
 23f0ad8:	4601      	mov	r1, r0
 23f0ada:	480c      	ldr	r0, [pc, #48]	; (23f0b0c <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>)
 23f0adc:	e7f2      	b.n	23f0ac4 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x168>
    output_matrix->rows = 1;
 23f0ade:	2301      	movs	r3, #1
    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 23f0ae0:	f8c4 9008 	str.w	r9, [r4, #8]
    output_matrix->rows = 1;
 23f0ae4:	6063      	str	r3, [r4, #4]
    return EIDSP_OK;
 23f0ae6:	e7d4      	b.n	23f0a92 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23f0ae8:	4d03      	ldr	r5, [pc, #12]	; (23f0af8 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x19c>)
 23f0aea:	e7d5      	b.n	23f0a98 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 23f0aec:	4d08      	ldr	r5, [pc, #32]	; (23f0b10 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b4>)
 23f0aee:	e7d3      	b.n	23f0a98 <_ZN12_GLOBAL__N_120extract_mfe_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>
 23f0af0:	023fc77d 	.word	0x023fc77d
 23f0af4:	023fc791 	.word	0x023fc791
 23f0af8:	fffffc14 	.word	0xfffffc14
 23f0afc:	3f7ae148 	.word	0x3f7ae148
 23f0b00:	023ef41d 	.word	0x023ef41d
 23f0b04:	023fc8e6 	.word	0x023fc8e6
 23f0b08:	023fc58f 	.word	0x023fc58f
 23f0b0c:	023fc5a7 	.word	0x023fc5a7
 23f0b10:	fffffc10 	.word	0xfffffc10
 23f0b14:	1007a5d8 	.word	0x1007a5d8

023f0b18 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
}
 23f0b18:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23f0b1a:	2100      	movs	r1, #0
}
 23f0b1c:	b08c      	sub	sp, #48	; 0x30
SYSTEM_THREAD(ENABLED);
 23f0b1e:	2001      	movs	r0, #1
 23f0b20:	f003 fdfa 	bl	23f4718 <system_thread_set_state>
        capacity_(0) {
 23f0b24:	2300      	movs	r3, #0
 23f0b26:	e9cd 3300 	strd	r3, r3, [sp]
 23f0b2a:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f0b2c:	f004 fa44 	bl	23f4fb8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f0b30:	4c1d      	ldr	r4, [pc, #116]	; (23f0ba8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x90>)
 23f0b32:	4605      	mov	r5, r0
 23f0b34:	4626      	mov	r6, r4
 23f0b36:	4669      	mov	r1, sp
 23f0b38:	a803      	add	r0, sp, #12
 23f0b3a:	f7ff fb01 	bl	23f0140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f0b3e:	a903      	add	r1, sp, #12
 23f0b40:	a806      	add	r0, sp, #24
 23f0b42:	f7ff fafd 	bl	23f0140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f0b46:	4b19      	ldr	r3, [pc, #100]	; (23f0bac <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x94>)
 23f0b48:	a906      	add	r1, sp, #24
 23f0b4a:	f846 3b04 	str.w	r3, [r6], #4
 23f0b4e:	a809      	add	r0, sp, #36	; 0x24
 23f0b50:	f7ff faf6 	bl	23f0140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f0b54:	aa09      	add	r2, sp, #36	; 0x24
 23f0b56:	2132      	movs	r1, #50	; 0x32
 23f0b58:	4630      	mov	r0, r6
 23f0b5a:	f005 f84d 	bl	23f5bf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f0b5e:	a809      	add	r0, sp, #36	; 0x24
 23f0b60:	f7fe fb58 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f0b64:	a806      	add	r0, sp, #24
 23f0b66:	f7fe fb55 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f0b6a:	4b11      	ldr	r3, [pc, #68]	; (23f0bb0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>)
 23f0b6c:	a803      	add	r0, sp, #12
 23f0b6e:	6023      	str	r3, [r4, #0]
 23f0b70:	6225      	str	r5, [r4, #32]
 23f0b72:	f7fe fb4f 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f0b76:	4b0f      	ldr	r3, [pc, #60]	; (23f0bb4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9c>)
 23f0b78:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f0b7a:	f004 fa1d 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f0b7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f0b82:	f004 fa07 	bl	23f4f94 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f0b86:	f004 fd09 	bl	23f559c <_ZN5spark10LogManager8instanceEv>
 23f0b8a:	4621      	mov	r1, r4
 23f0b8c:	f004 ff0c 	bl	23f59a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23f0b90:	4668      	mov	r0, sp
 23f0b92:	f7fe fb3f 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BlePeerDevice peer;
 23f0b96:	4808      	ldr	r0, [pc, #32]	; (23f0bb8 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>)
 23f0b98:	f006 f916 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
BleCharacteristic rx_characteristic;
 23f0b9c:	4807      	ldr	r0, [pc, #28]	; (23f0bbc <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa4>)
}
 23f0b9e:	b00c      	add	sp, #48	; 0x30
 23f0ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BleCharacteristic rx_characteristic;
 23f0ba4:	f006 b822 	b.w	23f6bec <_ZN8particle17BleCharacteristicC1Ev>
 23f0ba8:	1007a5e0 	.word	0x1007a5e0
 23f0bac:	023fc904 	.word	0x023fc904
 23f0bb0:	023ff754 	.word	0x023ff754
 23f0bb4:	023fc91c 	.word	0x023fc91c
 23f0bb8:	1007a604 	.word	0x1007a604
 23f0bbc:	1007a60c 	.word	0x1007a60c

023f0bc0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f0bc0:	b530      	push	{r4, r5, lr}
  tensor->type = tensorData[i].type;
 23f0bc2:	2418      	movs	r4, #24
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f0bc4:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
 23f0bc6:	4344      	muls	r4, r0
 23f0bc8:	4915      	ldr	r1, [pc, #84]	; (23f0c20 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x60>)
 23f0bca:	190a      	adds	r2, r1, r4
 23f0bcc:	7855      	ldrb	r5, [r2, #1]
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 23f0bce:	5d0c      	ldrb	r4, [r1, r4]
  tensor->type = tensorData[i].type;
 23f0bd0:	701d      	strb	r5, [r3, #0]
  tensor->is_variable = 0;
 23f0bd2:	2500      	movs	r5, #0
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 23f0bd4:	2c02      	cmp	r4, #2
  tensor->allocation_type = tensorData[i].allocation_type;
 23f0bd6:	751c      	strb	r4, [r3, #20]
  tensor->is_variable = 0;
 23f0bd8:	f883 502d 	strb.w	r5, [r3, #45]	; 0x2d
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0bdc:	bf08      	it	eq
 23f0bde:	4c11      	ldreq	r4, [pc, #68]	; (23f0c24 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x64>)
  tensor->bytes = tensorData[i].bytes;
 23f0be0:	68d5      	ldr	r5, [r2, #12]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0be2:	bf08      	it	eq
 23f0be4:	6824      	ldreq	r4, [r4, #0]
  tensor->bytes = tensorData[i].bytes;
 23f0be6:	619d      	str	r5, [r3, #24]
  tensor->dims = tensorData[i].dims;
 23f0be8:	6895      	ldr	r5, [r2, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0bea:	6852      	ldr	r2, [r2, #4]
  tensor->dims = tensorData[i].dims;
 23f0bec:	609d      	str	r5, [r3, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0bee:	bf08      	it	eq
 23f0bf0:	1912      	addeq	r2, r2, r4

    tensor->data.data =  start;
 23f0bf2:	605a      	str	r2, [r3, #4]
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
 23f0bf4:	2218      	movs	r2, #24
 23f0bf6:	fb02 1200 	mla	r2, r2, r0, r1
 23f0bfa:	6951      	ldr	r1, [r2, #20]
 23f0bfc:	6910      	ldr	r0, [r2, #16]
 23f0bfe:	f103 0430 	add.w	r4, r3, #48	; 0x30
 23f0c02:	e884 0003 	stmia.w	r4, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 23f0c06:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 23f0c0a:	2901      	cmp	r1, #1
 23f0c0c:	d106      	bne.n	23f0c1c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x5c>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 23f0c0e:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
 23f0c10:	6811      	ldr	r1, [r2, #0]
 23f0c12:	6849      	ldr	r1, [r1, #4]
 23f0c14:	60d9      	str	r1, [r3, #12]
    tensor->params.zero_point = quant->zero_point->data[0];
 23f0c16:	6852      	ldr	r2, [r2, #4]
 23f0c18:	6852      	ldr	r2, [r2, #4]
 23f0c1a:	611a      	str	r2, [r3, #16]
  }

}
 23f0c1c:	bd30      	pop	{r4, r5, pc}
 23f0c1e:	bf00      	nop
 23f0c20:	100799dc 	.word	0x100799dc
 23f0c24:	1007a614 	.word	0x1007a614

023f0c28 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
 23f0c28:	4b04      	ldr	r3, [pc, #16]	; (23f0c3c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x14>)
 23f0c2a:	681b      	ldr	r3, [r3, #0]
 23f0c2c:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
 23f0c2e:	bfa3      	ittte	ge
 23f0c30:	4b03      	ldrge	r3, [pc, #12]	; (23f0c40 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x18>)
 23f0c32:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
 23f0c36:	6848      	ldrge	r0, [r1, #4]
    return NULL;
 23f0c38:	2000      	movlt	r0, #0
}
 23f0c3a:	4770      	bx	lr
 23f0c3c:	1007aa38 	.word	0x1007aa38
 23f0c40:	1007a9e8 	.word	0x1007a9e8

023f0c44 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 23f0c44:	f647 73ff 	movw	r3, #32767	; 0x7fff
 23f0c48:	4a07      	ldr	r2, [pc, #28]	; (23f0c68 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x24>)
 23f0c4a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 23f0c4e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23f0c52:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
 23f0c56:	f8a2 310c 	strh.w	r3, [r2, #268]	; 0x10c
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 23f0c5a:	4a04      	ldr	r2, [pc, #16]	; (23f0c6c <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>)
 23f0c5c:	8193      	strh	r3, [r2, #12]
 23f0c5e:	8393      	strh	r3, [r2, #28]
 23f0c60:	8593      	strh	r3, [r2, #44]	; 0x2c
 23f0c62:	8793      	strh	r3, [r2, #60]	; 0x3c
  }
}
 23f0c64:	4770      	bx	lr
 23f0c66:	bf00      	nop
 23f0c68:	1007a898 	.word	0x1007a898
 23f0c6c:	1007a9a8 	.word	0x1007a9a8

023f0c70 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f0c70:	481c      	ldr	r0, [pc, #112]	; (23f0ce4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x74>)
                                       int tensor_idx) {
 23f0c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f0c74:	4602      	mov	r2, r0
 23f0c76:	460b      	mov	r3, r1
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f0c78:	f647 75ff 	movw	r5, #32767	; 0x7fff
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f0c7c:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == tensor_idx) {
 23f0c7e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f0c82:	429c      	cmp	r4, r3
 23f0c84:	d102      	bne.n	23f0c8c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1c>
      return &tflEvalTensors[ix].tensor;
 23f0c86:	eb02 1001 	add.w	r0, r2, r1, lsl #4
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}
 23f0c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f0c8c:	42ac      	cmp	r4, r5
 23f0c8e:	d11f      	bne.n	23f0cd0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x60>
  if (i < 0) {
 23f0c90:	2b00      	cmp	r3, #0
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 23f0c92:	ea4f 1401 	mov.w	r4, r1, lsl #4
 23f0c96:	eb02 1001 	add.w	r0, r2, r1, lsl #4
  if (i < 0) {
 23f0c9a:	da05      	bge.n	23f0ca8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x38>
    tensor->data.data = nullptr;
 23f0c9c:	2100      	movs	r1, #0
 23f0c9e:	5111      	str	r1, [r2, r4]
    tensor->dims = nullptr;
 23f0ca0:	6041      	str	r1, [r0, #4]
      tflEvalTensors[ix].index = tensor_idx;
 23f0ca2:	4422      	add	r2, r4
 23f0ca4:	8193      	strh	r3, [r2, #12]
      return &tflEvalTensors[ix].tensor;
 23f0ca6:	e7f0      	b.n	23f0c8a <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1a>
  tensor->type = tensorData[i].type;
 23f0ca8:	2118      	movs	r1, #24
 23f0caa:	4359      	muls	r1, r3
 23f0cac:	4e0e      	ldr	r6, [pc, #56]	; (23f0ce8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x78>)
 23f0cae:	1875      	adds	r5, r6, r1
  if(allocation_type == kTfLiteArenaRw) {
 23f0cb0:	5c71      	ldrb	r1, [r6, r1]
  tensor->type = tensorData[i].type;
 23f0cb2:	786f      	ldrb	r7, [r5, #1]
  if(allocation_type == kTfLiteArenaRw) {
 23f0cb4:	2902      	cmp	r1, #2
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0cb6:	bf08      	it	eq
 23f0cb8:	490c      	ldreq	r1, [pc, #48]	; (23f0cec <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x7c>)
  tensor->type = tensorData[i].type;
 23f0cba:	7207      	strb	r7, [r0, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0cbc:	bf08      	it	eq
 23f0cbe:	6809      	ldreq	r1, [r1, #0]
  tensor->dims = tensorData[i].dims;
 23f0cc0:	68af      	ldr	r7, [r5, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0cc2:	686d      	ldr	r5, [r5, #4]
  tensor->dims = tensorData[i].dims;
 23f0cc4:	6047      	str	r7, [r0, #4]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f0cc6:	bf06      	itte	eq
 23f0cc8:	1949      	addeq	r1, r1, r5
    tensor->data.data =  start;
 23f0cca:	5111      	streq	r1, [r2, r4]
    tensor->data.data = tensorData[i].data;
 23f0ccc:	5115      	strne	r5, [r2, r4]
 23f0cce:	e7e8      	b.n	23f0ca2 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x32>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f0cd0:	3101      	adds	r1, #1
 23f0cd2:	2904      	cmp	r1, #4
 23f0cd4:	f100 0010 	add.w	r0, r0, #16
 23f0cd8:	d1d1      	bne.n	23f0c7e <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0xe>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 23f0cda:	4805      	ldr	r0, [pc, #20]	; (23f0cf0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x80>)
 23f0cdc:	f000 f9e6 	bl	23f10ac <_Z9ei_printfPKcz>
  return nullptr;
 23f0ce0:	2000      	movs	r0, #0
 23f0ce2:	e7d2      	b.n	23f0c8a <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x1a>
 23f0ce4:	1007a9a8 	.word	0x1007a9a8
 23f0ce8:	100799dc 	.word	0x100799dc
 23f0cec:	1007a614 	.word	0x1007a614
 23f0cf0:	023fcd20 	.word	0x023fcd20

023f0cf4 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:
                               int tensor_idx) {
 23f0cf4:	b538      	push	{r3, r4, r5, lr}
 23f0cf6:	4b12      	ldr	r3, [pc, #72]	; (23f0d40 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x4c>)
 23f0cf8:	460d      	mov	r5, r1
 23f0cfa:	461c      	mov	r4, r3
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f0cfc:	2100      	movs	r1, #0
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f0cfe:	f647 70ff 	movw	r0, #32767	; 0x7fff
    if (tflTensors[ix].index == tensor_idx) {
 23f0d02:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 23f0d06:	42aa      	cmp	r2, r5
 23f0d08:	d104      	bne.n	23f0d14 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>
      return &tflTensors[ix].tensor;
 23f0d0a:	2344      	movs	r3, #68	; 0x44
 23f0d0c:	fb03 4401 	mla	r4, r3, r1, r4
}
 23f0d10:	4620      	mov	r0, r4
 23f0d12:	bd38      	pop	{r3, r4, r5, pc}
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f0d14:	4282      	cmp	r2, r0
 23f0d16:	d109      	bne.n	23f0d2c <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x38>
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 23f0d18:	2344      	movs	r3, #68	; 0x44
 23f0d1a:	fb03 4401 	mla	r4, r3, r1, r4
 23f0d1e:	4628      	mov	r0, r5
 23f0d20:	4621      	mov	r1, r4
 23f0d22:	f7ff ff4d 	bl	23f0bc0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 23f0d26:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      return &tflTensors[ix].tensor;
 23f0d2a:	e7f1      	b.n	23f0d10 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x1c>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f0d2c:	3101      	adds	r1, #1
 23f0d2e:	2904      	cmp	r1, #4
 23f0d30:	f103 0344 	add.w	r3, r3, #68	; 0x44
 23f0d34:	d1e5      	bne.n	23f0d02 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0xe>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 23f0d36:	4803      	ldr	r0, [pc, #12]	; (23f0d44 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x50>)
 23f0d38:	f000 f9b8 	bl	23f10ac <_Z9ei_printfPKcz>
  return nullptr;
 23f0d3c:	2400      	movs	r4, #0
 23f0d3e:	e7e7      	b.n	23f0d10 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x1c>
 23f0d40:	1007a898 	.word	0x1007a898
 23f0d44:	023fcd56 	.word	0x023fcd56

023f0d48 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
                                       size_t bytes) {
 23f0d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (current_location - bytes < tensor_boundary) {
 23f0d4a:	4b16      	ldr	r3, [pc, #88]	; (23f0da4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x5c>)
 23f0d4c:	4816      	ldr	r0, [pc, #88]	; (23f0da8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x60>)
 23f0d4e:	681c      	ldr	r4, [r3, #0]
 23f0d50:	6800      	ldr	r0, [r0, #0]
 23f0d52:	1a64      	subs	r4, r4, r1
 23f0d54:	4284      	cmp	r4, r0
                                       size_t bytes) {
 23f0d56:	460a      	mov	r2, r1
  if (current_location - bytes < tensor_boundary) {
 23f0d58:	d21e      	bcs.n	23f0d98 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 23f0d5a:	4d14      	ldr	r5, [pc, #80]	; (23f0dac <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x64>)
 23f0d5c:	682b      	ldr	r3, [r5, #0]
 23f0d5e:	2b09      	cmp	r3, #9
 23f0d60:	d906      	bls.n	23f0d70 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x28>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 23f0d62:	4813      	ldr	r0, [pc, #76]	; (23f0db0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x68>)
 23f0d64:	f000 f9a2 	bl	23f10ac <_Z9ei_printfPKcz>
      return NULL;
 23f0d68:	2400      	movs	r4, #0
}
 23f0d6a:	4620      	mov	r0, r4
 23f0d6c:	b003      	add	sp, #12
 23f0d6e:	bd30      	pop	{r4, r5, pc}
    ptr = ei_calloc(bytes, 1);
 23f0d70:	4610      	mov	r0, r2
 23f0d72:	2101      	movs	r1, #1
 23f0d74:	9201      	str	r2, [sp, #4]
 23f0d76:	f000 f9c8 	bl	23f110a <_Z9ei_callocjj>
    if (ptr == NULL) {
 23f0d7a:	9a01      	ldr	r2, [sp, #4]
 23f0d7c:	4604      	mov	r4, r0
 23f0d7e:	b920      	cbnz	r0, 23f0d8a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x42>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 23f0d80:	4611      	mov	r1, r2
 23f0d82:	480c      	ldr	r0, [pc, #48]	; (23f0db4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6c>)
 23f0d84:	f000 f992 	bl	23f10ac <_Z9ei_printfPKcz>
      return NULL;
 23f0d88:	e7ef      	b.n	23f0d6a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
    overflow_buffers[overflow_buffers_ix++] = ptr;
 23f0d8a:	682b      	ldr	r3, [r5, #0]
 23f0d8c:	1c5a      	adds	r2, r3, #1
 23f0d8e:	602a      	str	r2, [r5, #0]
 23f0d90:	4a09      	ldr	r2, [pc, #36]	; (23f0db8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x70>)
 23f0d92:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return ptr;
 23f0d96:	e7e8      	b.n	23f0d6a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
  memset(ptr, 0, bytes);
 23f0d98:	2100      	movs	r1, #0
 23f0d9a:	4620      	mov	r0, r4
  current_location -= bytes;
 23f0d9c:	601c      	str	r4, [r3, #0]
  memset(ptr, 0, bytes);
 23f0d9e:	f00a f991 	bl	23fb0c4 <memset>
  return ptr;
 23f0da2:	e7e2      	b.n	23f0d6a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x22>
 23f0da4:	1007aa0c 	.word	0x1007aa0c
 23f0da8:	1007aa08 	.word	0x1007aa08
 23f0dac:	1007aa3c 	.word	0x1007aa3c
 23f0db0:	023fcd8e 	.word	0x023fcd8e
 23f0db4:	023fce0b 	.word	0x023fce0b
 23f0db8:	1007aa10 	.word	0x1007aa10

023f0dbc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
 23f0dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f0dbe:	4e0e      	ldr	r6, [pc, #56]	; (23f0df8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x3c>)
                                                int* buffer_idx) {
 23f0dc0:	460d      	mov	r5, r1
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f0dc2:	6833      	ldr	r3, [r6, #0]
                                                int* buffer_idx) {
 23f0dc4:	4617      	mov	r7, r2
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f0dc6:	2b03      	cmp	r3, #3
 23f0dc8:	d904      	bls.n	23f0dd4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x18>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 23f0dca:	480c      	ldr	r0, [pc, #48]	; (23f0dfc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x40>)
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f0dcc:	f000 f96e 	bl	23f10ac <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f0dd0:	2001      	movs	r0, #1
}
 23f0dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 23f0dd4:	f7ff ffb8 	bl	23f0d48 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
  if (!b.ptr) {
 23f0dd8:	b910      	cbnz	r0, 23f0de0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x24>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f0dda:	4629      	mov	r1, r5
 23f0ddc:	4808      	ldr	r0, [pc, #32]	; (23f0e00 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x44>)
 23f0dde:	e7f5      	b.n	23f0dcc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x10>
  scratch_buffers[scratch_buffers_ix] = b;
 23f0de0:	6833      	ldr	r3, [r6, #0]
 23f0de2:	4c08      	ldr	r4, [pc, #32]	; (23f0e04 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>)
  *buffer_idx = scratch_buffers_ix;
 23f0de4:	603b      	str	r3, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
 23f0de6:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
 23f0dea:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  scratch_buffers_ix++;
 23f0dee:	3301      	adds	r3, #1
  scratch_buffers[scratch_buffers_ix] = b;
 23f0df0:	6060      	str	r0, [r4, #4]
  scratch_buffers_ix++;
 23f0df2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 23f0df4:	2000      	movs	r0, #0
 23f0df6:	e7ec      	b.n	23f0dd2 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x16>
 23f0df8:	1007aa38 	.word	0x1007aa38
 23f0dfc:	023fce41 	.word	0x023fce41
 23f0e00:	023fce99 	.word	0x023fce99
 23f0e04:	1007a9e8 	.word	0x1007a9e8

023f0e08 <_Z19tflite_learn_5_initPFPvjjE>:

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f0e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0e0c:	4603      	mov	r3, r0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f0e0e:	f242 3150 	movw	r1, #9040	; 0x2350
 23f0e12:	2010      	movs	r0, #16
TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f0e14:	b099      	sub	sp, #100	; 0x64
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f0e16:	4798      	blx	r3
 23f0e18:	4b57      	ldr	r3, [pc, #348]	; (23f0f78 <_Z19tflite_learn_5_initPFPvjjE+0x170>)
 23f0e1a:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
 23f0e1c:	b930      	cbnz	r0, 23f0e2c <_Z19tflite_learn_5_initPFPvjjE+0x24>
    ei_printf("ERR: failed to allocate tensor arena\n");
 23f0e1e:	4857      	ldr	r0, [pc, #348]	; (23f0f7c <_Z19tflite_learn_5_initPFPvjjE+0x174>)
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f0e20:	f000 f944 	bl	23f10ac <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f0e24:	2001      	movs	r0, #1
        return status;
      }
    }
  }
  return kTfLiteOk;
}
 23f0e26:	b019      	add	sp, #100	; 0x64
 23f0e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_location = tensor_arena + kTensorArenaSize;
 23f0e2c:	4b54      	ldr	r3, [pc, #336]	; (23f0f80 <_Z19tflite_learn_5_initPFPvjjE+0x178>)
 23f0e2e:	f500 540d 	add.w	r4, r0, #9024	; 0x2340
 23f0e32:	3410      	adds	r4, #16
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f0e34:	4a53      	ldr	r2, [pc, #332]	; (23f0f84 <_Z19tflite_learn_5_initPFPvjjE+0x17c>)
  current_location = tensor_arena + kTensorArenaSize;
 23f0e36:	601c      	str	r4, [r3, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f0e38:	4b53      	ldr	r3, [pc, #332]	; (23f0f88 <_Z19tflite_learn_5_initPFPvjjE+0x180>)
  for (size_t i = 0; i < 23; ++i) {
 23f0e3a:	2600      	movs	r6, #0
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 23f0e3c:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 23f0e3e:	4a53      	ldr	r2, [pc, #332]	; (23f0f8c <_Z19tflite_learn_5_initPFPvjjE+0x184>)
  tensor_boundary = tensor_arena;
 23f0e40:	4d53      	ldr	r5, [pc, #332]	; (23f0f90 <_Z19tflite_learn_5_initPFPvjjE+0x188>)
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 23f0e42:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBuffer;
 23f0e44:	4a53      	ldr	r2, [pc, #332]	; (23f0f94 <_Z19tflite_learn_5_initPFPvjjE+0x18c>)
 23f0e46:	4f54      	ldr	r7, [pc, #336]	; (23f0f98 <_Z19tflite_learn_5_initPFPvjjE+0x190>)
 23f0e48:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensor;
 23f0e4a:	4a54      	ldr	r2, [pc, #336]	; (23f0f9c <_Z19tflite_learn_5_initPFPvjjE+0x194>)
  tensor_boundary = tensor_arena;
 23f0e4c:	6028      	str	r0, [r5, #0]
  ctx.GetTensor = &GetTensor;
 23f0e4e:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensor;
 23f0e50:	4a53      	ldr	r2, [pc, #332]	; (23f0fa0 <_Z19tflite_learn_5_initPFPvjjE+0x198>)
 23f0e52:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.tensors_size = 23;
 23f0e54:	2217      	movs	r2, #23
 23f0e56:	601a      	str	r2, [r3, #0]
    init_tflite_tensor(i, &tensor);
 23f0e58:	4630      	mov	r0, r6
 23f0e5a:	a908      	add	r1, sp, #32
 23f0e5c:	f7ff feb0 	bl	23f0bc0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 23f0e60:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23f0e64:	2b02      	cmp	r3, #2
 23f0e66:	d106      	bne.n	23f0e76 <_Z19tflite_learn_5_initPFPvjjE+0x6e>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 23f0e68:	68fa      	ldr	r2, [r7, #12]
 23f0e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f0e6c:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
 23f0e6e:	682a      	ldr	r2, [r5, #0]
 23f0e70:	4293      	cmp	r3, r2
        tensor_boundary = data_end_ptr;
 23f0e72:	bf88      	it	hi
 23f0e74:	602b      	strhi	r3, [r5, #0]
  for (size_t i = 0; i < 23; ++i) {
 23f0e76:	3601      	adds	r6, #1
 23f0e78:	2e17      	cmp	r6, #23
 23f0e7a:	f107 0718 	add.w	r7, r7, #24
 23f0e7e:	d1eb      	bne.n	23f0e58 <_Z19tflite_learn_5_initPFPvjjE+0x50>
  if (tensor_boundary > current_location /* end of arena size */) {
 23f0e80:	682b      	ldr	r3, [r5, #0]
 23f0e82:	429c      	cmp	r4, r3
 23f0e84:	d201      	bcs.n	23f0e8a <_Z19tflite_learn_5_initPFPvjjE+0x82>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f0e86:	4847      	ldr	r0, [pc, #284]	; (23f0fa4 <_Z19tflite_learn_5_initPFPvjjE+0x19c>)
 23f0e88:	e7ca      	b.n	23f0e20 <_Z19tflite_learn_5_initPFPvjjE+0x18>
  registrations[OP_RESHAPE] = Register_RESHAPE();
 23f0e8a:	466d      	mov	r5, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f0e8c:	466f      	mov	r7, sp
  registrations[OP_RESHAPE] = Register_RESHAPE();
 23f0e8e:	4c46      	ldr	r4, [pc, #280]	; (23f0fa8 <_Z19tflite_learn_5_initPFPvjjE+0x1a0>)
 23f0e90:	4668      	mov	r0, sp
 23f0e92:	f000 fd6f 	bl	23f1974 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 23f0e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f0e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f0e9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f0e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f0ea2:	4668      	mov	r0, sp
 23f0ea4:	f001 f948 	bl	23f2138 <_ZN6tflite16Register_CONV_2DEv>
 23f0ea8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f0eaa:	466f      	mov	r7, sp
  registrations[OP_CONV_2D] = Register_CONV_2D();
 23f0eac:	f104 0610 	add.w	r6, r4, #16
 23f0eb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f0eb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f0eb6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f0eba:	4668      	mov	r0, sp
 23f0ebc:	f001 fcfc 	bl	23f28b8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 23f0ec0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f0ec2:	466f      	mov	r7, sp
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
 23f0ec4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23f0ec8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f0eca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f0ece:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f0ed2:	4668      	mov	r0, sp
 23f0ed4:	f104 0650 	add.w	r6, r4, #80	; 0x50
 23f0ed8:	f000 fbd8 	bl	23f168c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 23f0edc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 23f0ede:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23f0ee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f0ee4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 23f0ee8:	466e      	mov	r6, sp
 23f0eea:	4668      	mov	r0, sp
 23f0eec:	f104 0770 	add.w	r7, r4, #112	; 0x70
 23f0ef0:	f001 f9d2 	bl	23f2298 <_ZN6tflite16Register_SOFTMAXEv>
 23f0ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f0ef6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 23f0ef8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 23f0fac <_Z19tflite_learn_5_initPFPvjjE+0x1a4>
 23f0efc:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 23f0fb0 <_Z19tflite_learn_5_initPFPvjjE+0x1a8>
 23f0f00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f0f04:	260b      	movs	r6, #11
 23f0f06:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 23f0f0a:	4645      	mov	r5, r8
 23f0f0c:	464f      	mov	r7, r9
tflNodes[i].custom_initial_data = nullptr;
 23f0f0e:	f04f 0a00 	mov.w	sl, #0
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f0f12:	f8df b074 	ldr.w	fp, [pc, #116]	; 23f0f88 <_Z19tflite_learn_5_initPFPvjjE+0x180>
 23f0f16:	3c10      	subs	r4, #16
    tflNodes[i].inputs = nodeData[i].inputs;
 23f0f18:	683b      	ldr	r3, [r7, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 23f0f1a:	68b9      	ldr	r1, [r7, #8]
    tflNodes[i].inputs = nodeData[i].inputs;
 23f0f1c:	602b      	str	r3, [r5, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 23f0f1e:	687b      	ldr	r3, [r7, #4]
tflNodes[i].custom_initial_data = nullptr;
 23f0f20:	e9c5 1a05 	strd	r1, sl, [r5, #20]
    tflNodes[i].outputs = nodeData[i].outputs;
 23f0f24:	606b      	str	r3, [r5, #4]
if (registrations[nodeData[i].used_op_index].init) {
 23f0f26:	7b3b      	ldrb	r3, [r7, #12]
      tflNodes[i].custom_initial_data_size = 0;
 23f0f28:	f8c5 a01c 	str.w	sl, [r5, #28]
if (registrations[nodeData[i].used_op_index].init) {
 23f0f2c:	015b      	lsls	r3, r3, #5
 23f0f2e:	58e3      	ldr	r3, [r4, r3]
 23f0f30:	b11b      	cbz	r3, 23f0f3a <_Z19tflite_learn_5_initPFPvjjE+0x132>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f0f32:	2200      	movs	r2, #0
 23f0f34:	4658      	mov	r0, fp
 23f0f36:	4798      	blx	r3
 23f0f38:	6128      	str	r0, [r5, #16]
  for (size_t i = 0; i < 11; ++i) {
 23f0f3a:	3e01      	subs	r6, #1
 23f0f3c:	f107 0710 	add.w	r7, r7, #16
 23f0f40:	f105 0524 	add.w	r5, r5, #36	; 0x24
 23f0f44:	d1e8      	bne.n	23f0f18 <_Z19tflite_learn_5_initPFPvjjE+0x110>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f0f46:	4d10      	ldr	r5, [pc, #64]	; (23f0f88 <_Z19tflite_learn_5_initPFPvjjE+0x180>)
    if (registrations[nodeData[i].used_op_index].prepare) {
 23f0f48:	f899 300c 	ldrb.w	r3, [r9, #12]
 23f0f4c:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 23f0f50:	689f      	ldr	r7, [r3, #8]
 23f0f52:	b947      	cbnz	r7, 23f0f66 <_Z19tflite_learn_5_initPFPvjjE+0x15e>
  for (size_t i = 0; i < 11; ++i) {
 23f0f54:	3601      	adds	r6, #1
 23f0f56:	2e0b      	cmp	r6, #11
 23f0f58:	f109 0910 	add.w	r9, r9, #16
 23f0f5c:	f108 0824 	add.w	r8, r8, #36	; 0x24
 23f0f60:	d1f2      	bne.n	23f0f48 <_Z19tflite_learn_5_initPFPvjjE+0x140>
  return kTfLiteOk;
 23f0f62:	2000      	movs	r0, #0
 23f0f64:	e75f      	b.n	23f0e26 <_Z19tflite_learn_5_initPFPvjjE+0x1e>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f0f66:	4641      	mov	r1, r8
 23f0f68:	4628      	mov	r0, r5
      ResetTensors();
 23f0f6a:	f7ff fe6b 	bl	23f0c44 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 23f0f6e:	47b8      	blx	r7
      if (status != kTfLiteOk) {
 23f0f70:	2800      	cmp	r0, #0
 23f0f72:	d0ef      	beq.n	23f0f54 <_Z19tflite_learn_5_initPFPvjjE+0x14c>
 23f0f74:	e757      	b.n	23f0e26 <_Z19tflite_learn_5_initPFPvjjE+0x1e>
 23f0f76:	bf00      	nop
 23f0f78:	1007a614 	.word	0x1007a614
 23f0f7c:	023fcecc 	.word	0x023fcecc
 23f0f80:	1007aa0c 	.word	0x1007aa0c
 23f0f84:	023f0d49 	.word	0x023f0d49
 23f0f88:	1007a6b8 	.word	0x1007a6b8
 23f0f8c:	023f0dbd 	.word	0x023f0dbd
 23f0f90:	1007aa08 	.word	0x1007aa08
 23f0f94:	023f0c29 	.word	0x023f0c29
 23f0f98:	100799dc 	.word	0x100799dc
 23f0f9c:	023f0cf5 	.word	0x023f0cf5
 23f0fa0:	023f0c71 	.word	0x023f0c71
 23f0fa4:	023fcef2 	.word	0x023fcef2
 23f0fa8:	1007a618 	.word	0x1007a618
 23f0fac:	023fe9d8 	.word	0x023fe9d8
 23f0fb0:	1007a70c 	.word	0x1007a70c

023f0fb4 <_Z20tflite_learn_5_inputiP12TfLiteTensor>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
 23f0fb4:	b508      	push	{r3, lr}
  init_tflite_tensor(inTensorIndices[index], tensor);
 23f0fb6:	2000      	movs	r0, #0
 23f0fb8:	f7ff fe02 	bl	23f0bc0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f0fbc:	2000      	movs	r0, #0
 23f0fbe:	bd08      	pop	{r3, pc}

023f0fc0 <_Z21tflite_learn_5_outputiP12TfLiteTensor>:

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
 23f0fc0:	b508      	push	{r3, lr}
  init_tflite_tensor(outTensorIndices[index], tensor);
 23f0fc2:	2016      	movs	r0, #22
 23f0fc4:	f7ff fdfc 	bl	23f0bc0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f0fc8:	2000      	movs	r0, #0
 23f0fca:	bd08      	pop	{r3, pc}

023f0fcc <_Z21tflite_learn_5_invokev>:

TfLiteStatus tflite_learn_5_invoke() {
 23f0fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < 11; ++i) {
 23f0fd0:	2400      	movs	r4, #0
 23f0fd2:	4e0c      	ldr	r6, [pc, #48]	; (23f1004 <_Z21tflite_learn_5_invokev+0x38>)
 23f0fd4:	4d0c      	ldr	r5, [pc, #48]	; (23f1008 <_Z21tflite_learn_5_invokev+0x3c>)
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 23f0fd6:	4f0d      	ldr	r7, [pc, #52]	; (23f100c <_Z21tflite_learn_5_invokev+0x40>)
 23f0fd8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 23f1010 <_Z21tflite_learn_5_invokev+0x44>
    ResetTensors();
 23f0fdc:	f7ff fe32 	bl	23f0c44 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 23f0fe0:	7b33      	ldrb	r3, [r6, #12]
 23f0fe2:	4629      	mov	r1, r5
 23f0fe4:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 23f0fe8:	4640      	mov	r0, r8
 23f0fea:	68db      	ldr	r3, [r3, #12]
 23f0fec:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 23f0fee:	b930      	cbnz	r0, 23f0ffe <_Z21tflite_learn_5_invokev+0x32>
  for (size_t i = 0; i < 11; ++i) {
 23f0ff0:	3401      	adds	r4, #1
 23f0ff2:	2c0b      	cmp	r4, #11
 23f0ff4:	f106 0610 	add.w	r6, r6, #16
 23f0ff8:	f105 0524 	add.w	r5, r5, #36	; 0x24
 23f0ffc:	d1ee      	bne.n	23f0fdc <_Z21tflite_learn_5_invokev+0x10>
      return status;
    }
  }
  return kTfLiteOk;
}
 23f0ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f1002:	bf00      	nop
 23f1004:	023fe9d8 	.word	0x023fe9d8
 23f1008:	1007a70c 	.word	0x1007a70c
 23f100c:	1007a618 	.word	0x1007a618
 23f1010:	1007a6b8 	.word	0x1007a6b8

023f1014 <_Z20tflite_learn_5_resetPFvPvE>:

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 23f1014:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 23f1016:	2400      	movs	r4, #0
  free_fnc(tensor_arena);
 23f1018:	4a09      	ldr	r2, [pc, #36]	; (23f1040 <_Z20tflite_learn_5_resetPFvPvE+0x2c>)
TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
 23f101a:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
 23f101c:	6810      	ldr	r0, [r2, #0]
 23f101e:	4798      	blx	r3
  scratch_buffers_ix = 0;
 23f1020:	4b08      	ldr	r3, [pc, #32]	; (23f1044 <_Z20tflite_learn_5_resetPFvPvE+0x30>)
 23f1022:	4e09      	ldr	r6, [pc, #36]	; (23f1048 <_Z20tflite_learn_5_resetPFvPvE+0x34>)

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f1024:	4d09      	ldr	r5, [pc, #36]	; (23f104c <_Z20tflite_learn_5_resetPFvPvE+0x38>)
  scratch_buffers_ix = 0;
 23f1026:	601c      	str	r4, [r3, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f1028:	682b      	ldr	r3, [r5, #0]
 23f102a:	42a3      	cmp	r3, r4
 23f102c:	d905      	bls.n	23f103a <_Z20tflite_learn_5_resetPFvPvE+0x26>
    ei_free(overflow_buffers[ix]);
 23f102e:	f856 0b04 	ldr.w	r0, [r6], #4
 23f1032:	f000 f86c 	bl	23f110e <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f1036:	3401      	adds	r4, #1
 23f1038:	e7f6      	b.n	23f1028 <_Z20tflite_learn_5_resetPFvPvE+0x14>
  }
  overflow_buffers_ix = 0;
 23f103a:	2000      	movs	r0, #0
 23f103c:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
 23f103e:	bd70      	pop	{r4, r5, r6, pc}
 23f1040:	1007a614 	.word	0x1007a614
 23f1044:	1007aa38 	.word	0x1007aa38
 23f1048:	1007aa10 	.word	0x1007aa10
 23f104c:	1007aa3c 	.word	0x1007aa3c

023f1050 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE>:
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f1050:	4b10      	ldr	r3, [pc, #64]	; (23f1094 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x44>)
 23f1052:	681a      	ldr	r2, [r3, #0]
};const NodeInfo_t nodeData[] = {
 23f1054:	4b10      	ldr	r3, [pc, #64]	; (23f1098 <_GLOBAL__sub_I__Z19tflite_learn_5_initPFPvjjE+0x48>)
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 23f1056:	f502 6178 	add.w	r1, r2, #3968	; 0xf80
};const NodeInfo_t nodeData[] = {
 23f105a:	6059      	str	r1, [r3, #4]
 23f105c:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
 23f1060:	f502 7148 	add.w	r1, r2, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 23f1064:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 23f1068:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 23f106c:	f8c3 11cc 	str.w	r1, [r3, #460]	; 0x1cc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
 23f1070:	f502 71c8 	add.w	r1, r2, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 23f1074:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 23f1078:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 23f107c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 23f1080:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 23f1084:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 23f1088:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 23f108c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
}
 23f1090:	4770      	bx	lr
 23f1092:	bf00      	nop
 23f1094:	1007a614 	.word	0x1007a614
 23f1098:	100799dc 	.word	0x100799dc

023f109c <_Z29ei_run_impulse_check_canceledv>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
 23f109c:	2000      	movs	r0, #0
 23f109e:	4770      	bx	lr

023f10a0 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
 23f10a0:	b508      	push	{r3, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f10a2:	f003 f9db 	bl	23f445c <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
 23f10a6:	2100      	movs	r1, #0
 23f10a8:	bd08      	pop	{r3, pc}
	...

023f10ac <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f10ac:	b40f      	push	{r0, r1, r2, r3}
 23f10ae:	b513      	push	{r0, r1, r4, lr}
 23f10b0:	ab04      	add	r3, sp, #16
 23f10b2:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f10b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f10ba:	480b      	ldr	r0, [pc, #44]	; (23f10e8 <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f10bc:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f10be:	f003 fb7f 	bl	23f47c0 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f10c2:	2800      	cmp	r0, #0
 23f10c4:	dd0b      	ble.n	23f10de <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f10c6:	f003 ff77 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f10ca:	4604      	mov	r4, r0
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 23f10cc:	4806      	ldr	r0, [pc, #24]	; (23f10e8 <_Z9ei_printfPKcz+0x3c>)
 23f10ce:	f7f9 fa0b 	bl	23ea4e8 <strlen>
 23f10d2:	6823      	ldr	r3, [r4, #0]
 23f10d4:	4602      	mov	r2, r0
 23f10d6:	68db      	ldr	r3, [r3, #12]
 23f10d8:	4620      	mov	r0, r4
 23f10da:	4903      	ldr	r1, [pc, #12]	; (23f10e8 <_Z9ei_printfPKcz+0x3c>)
 23f10dc:	4798      	blx	r3
    }
}
 23f10de:	b002      	add	sp, #8
 23f10e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f10e4:	b004      	add	sp, #16
 23f10e6:	4770      	bx	lr
 23f10e8:	1007aa40 	.word	0x1007aa40

023f10ec <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 23f10ec:	b507      	push	{r0, r1, r2, lr}
 23f10ee:	ed8d 0a01 	vstr	s0, [sp, #4]
    Serial.print(f, 6);
 23f10f2:	f003 ff61 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f10f6:	2106      	movs	r1, #6
 23f10f8:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 23f10fc:	b003      	add	sp, #12
 23f10fe:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.print(f, 6);
 23f1102:	f005 b9a3 	b.w	23f644c <_ZN5Print5printEfi>

023f1106 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
 23f1106:	f003 bb31 	b.w	23f476c <malloc>

023f110a <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
 23f110a:	f009 bf91 	b.w	23fb030 <calloc>

023f110e <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
 23f110e:	f003 bb3b 	b.w	23f4788 <free>

023f1112 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  return aligned_size;
}

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 23f1112:	3801      	subs	r0, #1
 23f1114:	280f      	cmp	r0, #15
 23f1116:	d815      	bhi.n	23f1144 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x32>
 23f1118:	e8df f000 	tbb	[pc, r0]
 23f111c:	0e100c0c 	.word	0x0e100c0c
 23f1120:	0e081014 	.word	0x0e081014
 23f1124:	120e0810 	.word	0x120e0810
 23f1128:	0c14140e 	.word	0x0c14140e
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 23f112c:	2302      	movs	r3, #2
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 23f112e:	2000      	movs	r0, #0
      *size = sizeof(float);
 23f1130:	600b      	str	r3, [r1, #0]
      break;
 23f1132:	4770      	bx	lr
      *size = sizeof(float);
 23f1134:	2304      	movs	r3, #4
 23f1136:	e7fa      	b.n	23f112e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double);
 23f1138:	2308      	movs	r3, #8
 23f113a:	e7f8      	b.n	23f112e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(uint8_t);
 23f113c:	2301      	movs	r3, #1
 23f113e:	e7f6      	b.n	23f112e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
      *size = sizeof(double) * 2;
 23f1140:	2310      	movs	r3, #16
 23f1142:	e7f4      	b.n	23f112e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>
  return kTfLiteOk;
 23f1144:	2001      	movs	r0, #1
}
 23f1146:	4770      	bx	lr

023f1148 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 23f1148:	2200      	movs	r2, #0
  int result = 1;
 23f114a:	2301      	movs	r3, #1
int ElementCount(const TfLiteIntArray& dims) {
 23f114c:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
 23f114e:	f850 4b04 	ldr.w	r4, [r0], #4
 23f1152:	4294      	cmp	r4, r2
 23f1154:	dd04      	ble.n	23f1160 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
 23f1156:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
 23f115a:	3201      	adds	r2, #1
    result *= dims.data[i];
 23f115c:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
 23f115e:	e7f8      	b.n	23f1152 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
 23f1160:	4618      	mov	r0, r3
 23f1162:	bd10      	pop	{r4, pc}

023f1164 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 23f1164:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
 23f1166:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
 23f1168:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
 23f116a:	2b05      	cmp	r3, #5
 23f116c:	dd03      	ble.n	23f1176 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
 23f116e:	6840      	ldr	r0, [r0, #4]
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 23f1170:	b108      	cbz	r0, 23f1176 <_ZN6tflite12RuntimeShapeD1Ev+0x12>
 23f1172:	f7f9 f9e2 	bl	23ea53a <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 23f1176:	4620      	mov	r0, r4
 23f1178:	bd10      	pop	{r4, pc}

023f117a <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
 23f117a:	2900      	cmp	r1, #0
  inline int32_t Dims(int i) const {
 23f117c:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 23f117e:	da01      	bge.n	23f1184 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 23f1180:	f003 fb2c 	bl	23f47dc <abort>
    TFLITE_DCHECK_LT(i, size_);
 23f1184:	6803      	ldr	r3, [r0, #0]
 23f1186:	428b      	cmp	r3, r1
 23f1188:	ddfa      	ble.n	23f1180 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 23f118a:	2b05      	cmp	r3, #5
 23f118c:	bfcb      	itete	gt
 23f118e:	6843      	ldrgt	r3, [r0, #4]
 23f1190:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
 23f1194:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
 23f1198:	6840      	ldrle	r0, [r0, #4]
  }
 23f119a:	bd08      	pop	{r3, pc}

023f119c <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 23f119c:	b510      	push	{r4, lr}
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f119e:	6801      	ldr	r1, [r0, #0]
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 23f11a0:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f11a2:	2905      	cmp	r1, #5
 23f11a4:	bfcc      	ite	gt
 23f11a6:	6843      	ldrgt	r3, [r0, #4]
 23f11a8:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
 23f11aa:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
 23f11ac:	428a      	cmp	r2, r1
 23f11ae:	da04      	bge.n	23f11ba <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
 23f11b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
 23f11b4:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f11b6:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
 23f11b8:	e7f8      	b.n	23f11ac <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
 23f11ba:	bd10      	pop	{r4, pc}

023f11bc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 23f11bc:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 23f11be:	6805      	ldr	r5, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 23f11c0:	9c04      	ldr	r4, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 23f11c2:	2d04      	cmp	r5, #4
 23f11c4:	d001      	beq.n	23f11ca <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
 23f11c6:	f003 fb09 	bl	23f47dc <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 23f11ca:	2900      	cmp	r1, #0
 23f11cc:	dbfb      	blt.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f11ce:	6845      	ldr	r5, [r0, #4]
 23f11d0:	428d      	cmp	r5, r1
 23f11d2:	ddf8      	ble.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 23f11d4:	2a00      	cmp	r2, #0
 23f11d6:	dbf6      	blt.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f11d8:	6886      	ldr	r6, [r0, #8]
 23f11da:	4296      	cmp	r6, r2
 23f11dc:	ddf3      	ble.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 23f11de:	2b00      	cmp	r3, #0
 23f11e0:	dbf1      	blt.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f11e2:	68c5      	ldr	r5, [r0, #12]
 23f11e4:	429d      	cmp	r5, r3
 23f11e6:	ddee      	ble.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 23f11e8:	2c00      	cmp	r4, #0
 23f11ea:	dbec      	blt.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
 23f11ec:	6900      	ldr	r0, [r0, #16]
 23f11ee:	42a0      	cmp	r0, r4
 23f11f0:	dde9      	ble.n	23f11c6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 23f11f2:	fb01 2206 	mla	r2, r1, r6, r2
 23f11f6:	fb05 3302 	mla	r3, r5, r2, r3
}
 23f11fa:	fb00 4003 	mla	r0, r0, r3, r4
 23f11fe:	bd70      	pop	{r4, r5, r6, pc}

023f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 23f1200:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f1202:	b908      	cbnz	r0, 23f1208 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f1204:	f003 faea 	bl	23f47dc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f1208:	2900      	cmp	r1, #0
 23f120a:	d0fb      	beq.n	23f1204 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
}
 23f120c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f1210:	6809      	ldr	r1, [r1, #0]
 23f1212:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f1214:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f1218:	6851      	ldr	r1, [r2, #4]
 23f121a:	4718      	bx	r3

023f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 23f121c:	b570      	push	{r4, r5, r6, lr}
 23f121e:	4615      	mov	r5, r2
 23f1220:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f1222:	f7ff ffaa 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f1226:	4631      	mov	r1, r6
 23f1228:	4604      	mov	r4, r0
 23f122a:	4628      	mov	r0, r5
 23f122c:	f7ff ffa5 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f1230:	4284      	cmp	r4, r0
 23f1232:	d001      	beq.n	23f1238 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
 23f1234:	f003 fad2 	bl	23f47dc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
 23f1238:	bd70      	pop	{r4, r5, r6, pc}

023f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 23f123a:	b570      	push	{r4, r5, r6, lr}
 23f123c:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 23f123e:	b911      	cbnz	r1, 23f1246 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 23f1240:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f1242:	4620      	mov	r0, r4
 23f1244:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
 23f1246:	688d      	ldr	r5, [r1, #8]
 23f1248:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
 23f124c:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
 23f124e:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f1250:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 23f1254:	dc05      	bgt.n	23f1262 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f1256:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f1258:	4632      	mov	r2, r6
 23f125a:	4629      	mov	r1, r5
 23f125c:	f009 ff0b 	bl	23fb076 <memcpy>
  }
 23f1260:	e7ef      	b.n	23f1242 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32_t[dimensions_count];
 23f1262:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 23f1266:	4293      	cmp	r3, r2
 23f1268:	bfb4      	ite	lt
 23f126a:	4630      	movlt	r0, r6
 23f126c:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f1270:	f7f9 f961 	bl	23ea536 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f1274:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f1276:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f1278:	2b05      	cmp	r3, #5
 23f127a:	dced      	bgt.n	23f1258 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
 23f127c:	e7eb      	b.n	23f1256 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

023f127e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableEvalInput(context, node, index);
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 23f127e:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f1280:	b908      	cbnz	r0, 23f1286 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f1282:	f003 faab 	bl	23f47dc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f1286:	2900      	cmp	r1, #0
 23f1288:	d0fb      	beq.n	23f1282 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
}
 23f128a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f128e:	6849      	ldr	r1, [r1, #4]
 23f1290:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f1292:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f1296:	6851      	ldr	r1, [r2, #4]
 23f1298:	4718      	bx	r3

023f129a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
 23f129a:	b123      	cbz	r3, 23f12a6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>

  switch (padding) {
 23f129c:	2801      	cmp	r0, #1
 23f129e:	d004      	beq.n	23f12aa <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>
 23f12a0:	2802      	cmp	r0, #2
 23f12a2:	d007      	beq.n	23f12b4 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x1a>
 23f12a4:	2300      	movs	r3, #0
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
 23f12a6:	4618      	mov	r0, r3
 23f12a8:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
 23f12aa:	4419      	add	r1, r3
 23f12ac:	3901      	subs	r1, #1
      return (image_size + stride - effective_filter_size) / stride;
 23f12ae:	fb91 f3f3 	sdiv	r3, r1, r3
 23f12b2:	e7f8      	b.n	23f12a6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f12b4:	9800      	ldr	r0, [sp, #0]
 23f12b6:	3a01      	subs	r2, #1
 23f12b8:	4342      	muls	r2, r0
      return (image_size + stride - effective_filter_size) / stride;
 23f12ba:	4419      	add	r1, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f12bc:	3201      	adds	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
 23f12be:	1a89      	subs	r1, r1, r2
 23f12c0:	e7f5      	b.n	23f12ae <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x14>

023f12c2 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f12c2:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f12c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f12c6:	b90b      	cbnz	r3, 23f12cc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f12c8:	f003 fa88 	bl	23f47dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f12cc:	2124      	movs	r1, #36	; 0x24
}
 23f12ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f12d2:	4718      	bx	r3

023f12d4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f12d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f12d8:	b0b7      	sub	sp, #220	; 0xdc
 23f12da:	e9dd a640 	ldrd	sl, r6, [sp, #256]	; 0x100
 23f12de:	4607      	mov	r7, r0
 23f12e0:	460c      	mov	r4, r1
  TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                  TfLiteTypeGetName(output->type), output->type);
  return kTfLiteError;
  #endif

  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f12e2:	a824      	add	r0, sp, #144	; 0x90
 23f12e4:	4631      	mov	r1, r6
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f12e6:	4698      	mov	r8, r3
 23f12e8:	4691      	mov	r9, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f12ea:	f001 faf3 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 23f12ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f12f0:	2b02      	cmp	r3, #2
 23f12f2:	d001      	beq.n	23f12f8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x24>
 23f12f4:	f003 fa72 	bl	23f47dc <abort>
  const int batches = output_shape.Dims(0);
 23f12f8:	2100      	movs	r1, #0
 23f12fa:	a824      	add	r0, sp, #144	; 0x90
 23f12fc:	f7ff ff3d 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
 23f1300:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
 23f1302:	9009      	str	r0, [sp, #36]	; 0x24
  const int output_depth = output_shape.Dims(1);
 23f1304:	a824      	add	r0, sp, #144	; 0x90
 23f1306:	f7ff ff38 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f130a:	4641      	mov	r1, r8
  const int output_depth = output_shape.Dims(1);
 23f130c:	4683      	mov	fp, r0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f130e:	a82a      	add	r0, sp, #168	; 0xa8
 23f1310:	f001 fae0 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f1314:	992a      	ldr	r1, [sp, #168]	; 0xa8
 23f1316:	a82a      	add	r0, sp, #168	; 0xa8
 23f1318:	3901      	subs	r1, #1
 23f131a:	f7ff ff2e 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f131e:	4649      	mov	r1, r9
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f1320:	9008      	str	r0, [sp, #32]
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f1322:	a830      	add	r0, sp, #192	; 0xc0
 23f1324:	f001 fad6 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
  quant_params.shift = data.reference_op_data.output_shift;

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 23f1328:	9b09      	ldr	r3, [sp, #36]	; 0x24
  input_dims.h = 1;
 23f132a:	2501      	movs	r5, #1
  bias_dims.h = 1;
  bias_dims.w = 1;
  bias_dims.c = output_depth;

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 23f132c:	e9cd b31a 	strd	fp, r3, [sp, #104]	; 0x68
  input_dims.n = batches;
 23f1330:	930f      	str	r3, [sp, #60]	; 0x3c
  output_dims.h = 1;
  output_dims.w = 1;
  output_dims.c = output_depth;

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 23f1332:	2300      	movs	r3, #0
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f1334:	6961      	ldr	r1, [r4, #20]
  input_dims.c = accum_depth;
 23f1336:	9a08      	ldr	r2, [sp, #32]
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f1338:	4249      	negs	r1, r1
 23f133a:	911f      	str	r1, [sp, #124]	; 0x7c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f133c:	69e1      	ldr	r1, [r4, #28]
  input_dims.w = 1;
 23f133e:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f1342:	9121      	str	r1, [sp, #132]	; 0x84
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 23f1344:	69a1      	ldr	r1, [r4, #24]
  filter_dims.n = accum_depth;
 23f1346:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 23f134a:	4249      	negs	r1, r1
 23f134c:	9120      	str	r1, [sp, #128]	; 0x80
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f134e:	68a1      	ldr	r1, [r4, #8]
  filter_dims.w = 1;
 23f1350:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f1354:	9122      	str	r1, [sp, #136]	; 0x88
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f1356:	68e1      	ldr	r1, [r4, #12]
  bias_dims.n = 1;
 23f1358:	e9cd b516 	strd	fp, r5, [sp, #88]	; 0x58
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f135c:	9123      	str	r1, [sp, #140]	; 0x8c
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 23f135e:	6821      	ldr	r1, [r4, #0]
  bias_dims.w = 1;
 23f1360:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 23f1364:	910b      	str	r1, [sp, #44]	; 0x2c
  quant_params.shift = data.reference_op_data.output_shift;
 23f1366:	6861      	ldr	r1, [r4, #4]
  output_dims.w = 1;
 23f1368:	e9cd 551c 	strd	r5, r5, [sp, #112]	; 0x70
  quant_params.shift = data.reference_op_data.output_shift;
 23f136c:	910c      	str	r1, [sp, #48]	; 0x30
  output_dims.c = output_depth;
 23f136e:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
  ctx.size = 0;
 23f1372:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34

  if (data.buffer_idx > -1) {
 23f1376:	6a21      	ldr	r1, [r4, #32]
 23f1378:	4299      	cmp	r1, r3
 23f137a:	db03      	blt.n	23f1384 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xb0>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f137c:	4638      	mov	r0, r7
 23f137e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 23f1380:	4798      	blx	r3
 23f1382:	900d      	str	r0, [sp, #52]	; 0x34
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
 23f1384:	f1b9 0f00 	cmp.w	r9, #0
 23f1388:	d0b4      	beq.n	23f12f4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f138a:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
 23f138e:	f1b8 0f00 	cmp.w	r8, #0
 23f1392:	d0af      	beq.n	23f12f4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f1394:	f8d8 1000 	ldr.w	r1, [r8]
  TFLITE_DCHECK(tensor != nullptr);
 23f1398:	f1ba 0f00 	cmp.w	sl, #0
 23f139c:	d0aa      	beq.n	23f12f4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x20>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f139e:	f8da 0000 	ldr.w	r0, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f13a2:	2e00      	cmp	r6, #0
 23f13a4:	d045      	beq.n	23f1432 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x15e>
 23f13a6:	6833      	ldr	r3, [r6, #0]
  }

  TF_LITE_ENSURE_EQ(
 23f13a8:	9306      	str	r3, [sp, #24]
 23f13aa:	ab1b      	add	r3, sp, #108	; 0x6c
 23f13ac:	e9cd 0304 	strd	r0, r3, [sp, #16]
 23f13b0:	ab17      	add	r3, sp, #92	; 0x5c
 23f13b2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 23f13b6:	ab13      	add	r3, sp, #76	; 0x4c
 23f13b8:	e9cd 2300 	strd	r2, r3, [sp]
 23f13bc:	a91f      	add	r1, sp, #124	; 0x7c
 23f13be:	ab0f      	add	r3, sp, #60	; 0x3c
 23f13c0:	aa0b      	add	r2, sp, #44	; 0x2c
 23f13c2:	a80d      	add	r0, sp, #52	; 0x34
 23f13c4:	f7fa fb06 	bl	23eb9d4 <arm_fully_connected_s8>
 23f13c8:	4604      	mov	r4, r0
 23f13ca:	b328      	cbz	r0, 23f1418 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
 23f13cc:	693c      	ldr	r4, [r7, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f13ce:	f8d9 3000 	ldr.w	r3, [r9]
 23f13d2:	f8d8 2000 	ldr.w	r2, [r8]
 23f13d6:	f8da 1000 	ldr.w	r1, [sl]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f13da:	b106      	cbz	r6, 23f13de <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10a>
 23f13dc:	6836      	ldr	r6, [r6, #0]
 23f13de:	a81b      	add	r0, sp, #108	; 0x6c
 23f13e0:	e9cd 1004 	strd	r1, r0, [sp, #16]
 23f13e4:	a917      	add	r1, sp, #92	; 0x5c
 23f13e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 23f13ea:	aa13      	add	r2, sp, #76	; 0x4c
 23f13ec:	e9cd 3200 	strd	r3, r2, [sp]
 23f13f0:	a91f      	add	r1, sp, #124	; 0x7c
 23f13f2:	ab0f      	add	r3, sp, #60	; 0x3c
 23f13f4:	aa0b      	add	r2, sp, #44	; 0x2c
 23f13f6:	9606      	str	r6, [sp, #24]
 23f13f8:	a80d      	add	r0, sp, #52	; 0x34
 23f13fa:	f7fa faeb 	bl	23eb9d4 <arm_fully_connected_s8>
 23f13fe:	2300      	movs	r3, #0
 23f1400:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f1404:	4b0c      	ldr	r3, [pc, #48]	; (23f1438 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x164>)
 23f1406:	4638      	mov	r0, r7
 23f1408:	9301      	str	r3, [sp, #4]
 23f140a:	4b0c      	ldr	r3, [pc, #48]	; (23f143c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x168>)
 23f140c:	4a0c      	ldr	r2, [pc, #48]	; (23f1440 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x16c>)
 23f140e:	9300      	str	r3, [sp, #0]
 23f1410:	490c      	ldr	r1, [pc, #48]	; (23f1444 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x170>)
 23f1412:	23b2      	movs	r3, #178	; 0xb2
 23f1414:	47a0      	blx	r4
 23f1416:	2401      	movs	r4, #1
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f1418:	a830      	add	r0, sp, #192	; 0xc0
 23f141a:	f7ff fea3 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f141e:	a82a      	add	r0, sp, #168	; 0xa8
 23f1420:	f7ff fea0 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f1424:	a824      	add	r0, sp, #144	; 0x90
 23f1426:	f7ff fe9d 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
}
 23f142a:	4620      	mov	r0, r4
 23f142c:	b037      	add	sp, #220	; 0xdc
 23f142e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f1432:	4633      	mov	r3, r6
 23f1434:	e7b8      	b.n	23f13a8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xd4>
 23f1436:	bf00      	nop
 23f1438:	023feb81 	.word	0x023feb81
 23f143c:	023feb92 	.word	0x023feb92
 23f1440:	023feae4 	.word	0x023feae4
 23f1444:	023feb67 	.word	0x023feb67

023f1448 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f1448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f144c:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f1450:	4604      	mov	r4, r0
 23f1452:	460d      	mov	r5, r1
 23f1454:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK(node->user_data != nullptr);
 23f1456:	f1b9 0f00 	cmp.w	r9, #0
 23f145a:	d101      	bne.n	23f1460 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 23f145c:	f003 f9be 	bl	23f47dc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f1460:	f8d1 b014 	ldr.w	fp, [r1, #20]
 23f1464:	f1bb 0f00 	cmp.w	fp, #0
 23f1468:	d0f8      	beq.n	23f145c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
      GetInput(context, node, kFullyConnectedInputTensor);
 23f146a:	4b50      	ldr	r3, [pc, #320]	; (23f15ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 23f146c:	681a      	ldr	r2, [r3, #0]
 23f146e:	f001 fbe1 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f1472:	4607      	mov	r7, r0
 23f1474:	b960      	cbnz	r0, 23f1490 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 23f1476:	4b4e      	ldr	r3, [pc, #312]	; (23f15b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
 23f1478:	9300      	str	r3, [sp, #0]
 23f147a:	2340      	movs	r3, #64	; 0x40
 23f147c:	6925      	ldr	r5, [r4, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 23f147e:	4620      	mov	r0, r4
 23f1480:	4a4c      	ldr	r2, [pc, #304]	; (23f15b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 23f1482:	494d      	ldr	r1, [pc, #308]	; (23f15b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
 23f1484:	47a8      	blx	r5
 23f1486:	2501      	movs	r5, #1
}
 23f1488:	4628      	mov	r0, r5
 23f148a:	b015      	add	sp, #84	; 0x54
 23f148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GetInput(context, node, kFullyConnectedWeightsTensor);
 23f1490:	4b4a      	ldr	r3, [pc, #296]	; (23f15bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
 23f1492:	4629      	mov	r1, r5
 23f1494:	4620      	mov	r0, r4
 23f1496:	681a      	ldr	r2, [r3, #0]
 23f1498:	f001 fbcc 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f149c:	4680      	mov	r8, r0
 23f149e:	b920      	cbnz	r0, 23f14aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
 23f14a0:	4b47      	ldr	r3, [pc, #284]	; (23f15c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
 23f14a2:	9300      	str	r3, [sp, #0]
 23f14a4:	6925      	ldr	r5, [r4, #16]
 23f14a6:	2343      	movs	r3, #67	; 0x43
 23f14a8:	e7e9      	b.n	23f147e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 23f14aa:	4b46      	ldr	r3, [pc, #280]	; (23f15c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
 23f14ac:	4629      	mov	r1, r5
 23f14ae:	681a      	ldr	r2, [r3, #0]
 23f14b0:	4620      	mov	r0, r4
 23f14b2:	f001 fbd1 	bl	23f2c58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 23f14b6:	4b44      	ldr	r3, [pc, #272]	; (23f15c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 23f14b8:	4682      	mov	sl, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 23f14ba:	4629      	mov	r1, r5
 23f14bc:	4620      	mov	r0, r4
 23f14be:	681a      	ldr	r2, [r3, #0]
 23f14c0:	f001 fbbb 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f14c4:	4606      	mov	r6, r0
 23f14c6:	b920      	cbnz	r0, 23f14d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 23f14c8:	4b40      	ldr	r3, [pc, #256]	; (23f15cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
 23f14ca:	9300      	str	r3, [sp, #0]
 23f14cc:	6925      	ldr	r5, [r4, #16]
 23f14ce:	2347      	movs	r3, #71	; 0x47
 23f14d0:	e7d5      	b.n	23f147e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f14d2:	7838      	ldrb	r0, [r7, #0]
 23f14d4:	7833      	ldrb	r3, [r6, #0]
 23f14d6:	4283      	cmp	r3, r0
 23f14d8:	d012      	beq.n	23f1500 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
 23f14da:	6927      	ldr	r7, [r4, #16]
 23f14dc:	f7f9 f846 	bl	23ea56c <TfLiteTypeGetName>
 23f14e0:	4605      	mov	r5, r0
 23f14e2:	7830      	ldrb	r0, [r6, #0]
 23f14e4:	f7f9 f842 	bl	23ea56c <TfLiteTypeGetName>
 23f14e8:	4b39      	ldr	r3, [pc, #228]	; (23f15d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
 23f14ea:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f14ee:	9301      	str	r3, [sp, #4]
 23f14f0:	4b38      	ldr	r3, [pc, #224]	; (23f15d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
 23f14f2:	4620      	mov	r0, r4
 23f14f4:	9300      	str	r3, [sp, #0]
 23f14f6:	4a2f      	ldr	r2, [pc, #188]	; (23f15b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
 23f14f8:	2349      	movs	r3, #73	; 0x49
 23f14fa:	4937      	ldr	r1, [pc, #220]	; (23f15d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
 23f14fc:	47b8      	blx	r7
 23f14fe:	e7c2      	b.n	23f1486 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 23f1500:	f898 2000 	ldrb.w	r2, [r8]
 23f1504:	429a      	cmp	r2, r3
 23f1506:	d004      	beq.n	23f1512 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xca>
 23f1508:	4620      	mov	r0, r4
 23f150a:	6923      	ldr	r3, [r4, #16]
 23f150c:	4933      	ldr	r1, [pc, #204]	; (23f15dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
 23f150e:	4798      	blx	r3
 23f1510:	e7b9      	b.n	23f1486 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  data->buffer_idx = -1;
 23f1512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f1516:	f8c9 3020 	str.w	r3, [r9, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f151a:	783a      	ldrb	r2, [r7, #0]
 23f151c:	f89b 1000 	ldrb.w	r1, [fp]
 23f1520:	463b      	mov	r3, r7
 23f1522:	4620      	mov	r0, r4
 23f1524:	e9cd 6902 	strd	r6, r9, [sp, #8]
 23f1528:	e9cd 8a00 	strd	r8, sl, [sp]
 23f152c:	f000 f8ce 	bl	23f16cc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 23f1530:	4605      	mov	r5, r0
 23f1532:	2800      	cmp	r0, #0
 23f1534:	d1a8      	bne.n	23f1488 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
  if (input->type == kTfLiteInt8) {
 23f1536:	783b      	ldrb	r3, [r7, #0]
 23f1538:	2b09      	cmp	r3, #9
 23f153a:	d1a5      	bne.n	23f1488 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
    RuntimeShape filter_shape = GetTensorShape(filter);
 23f153c:	4641      	mov	r1, r8
 23f153e:	a808      	add	r0, sp, #32
 23f1540:	f7ff fe7b 	bl	23f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 23f1544:	4631      	mov	r1, r6
 23f1546:	a80e      	add	r0, sp, #56	; 0x38
 23f1548:	f7ff fe77 	bl	23f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 23f154c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f154e:	2b02      	cmp	r3, #2
 23f1550:	d184      	bne.n	23f145c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f1552:	9908      	ldr	r1, [sp, #32]
 23f1554:	a808      	add	r0, sp, #32
 23f1556:	3901      	subs	r1, #1
 23f1558:	f7ff fe0f 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.h = 1;
 23f155c:	2101      	movs	r1, #1
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f155e:	9004      	str	r0, [sp, #16]
    filter_dims.c = output_shape.Dims(1);
 23f1560:	a80e      	add	r0, sp, #56	; 0x38
    filter_dims.w = 1;
 23f1562:	e9cd 1105 	strd	r1, r1, [sp, #20]
    filter_dims.c = output_shape.Dims(1);
 23f1566:	f7ff fe08 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f156a:	9007      	str	r0, [sp, #28]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 23f156c:	a804      	add	r0, sp, #16
 23f156e:	f7fa fa62 	bl	23eba36 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
 23f1572:	1e01      	subs	r1, r0, #0
 23f1574:	dd0e      	ble.n	23f1594 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f1576:	4620      	mov	r0, r4
 23f1578:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f157a:	f109 0220 	add.w	r2, r9, #32
 23f157e:	4798      	blx	r3
 23f1580:	4604      	mov	r4, r0
 23f1582:	b158      	cbz	r0, 23f159c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>
 23f1584:	a80e      	add	r0, sp, #56	; 0x38
 23f1586:	f7ff fded 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f158a:	a808      	add	r0, sp, #32
 23f158c:	f7ff fdea 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f1590:	4625      	mov	r5, r4
 23f1592:	e779      	b.n	23f1488 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
      data->buffer_idx = -1;
 23f1594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f1598:	f8c9 3020 	str.w	r3, [r9, #32]
    RuntimeShape output_shape = GetTensorShape(output);
 23f159c:	a80e      	add	r0, sp, #56	; 0x38
 23f159e:	f7ff fde1 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = GetTensorShape(filter);
 23f15a2:	a808      	add	r0, sp, #32
 23f15a4:	f7ff fdde 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f15a8:	e76e      	b.n	23f1488 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f15aa:	bf00      	nop
 23f15ac:	023fed88 	.word	0x023fed88
 23f15b0:	023feccd 	.word	0x023feccd
 23f15b4:	023feae4 	.word	0x023feae4
 23f15b8:	023fecb6 	.word	0x023fecb6
 23f15bc:	023fed90 	.word	0x023fed90
 23f15c0:	023fecde 	.word	0x023fecde
 23f15c4:	023fed84 	.word	0x023fed84
 23f15c8:	023fed8c 	.word	0x023fed8c
 23f15cc:	023fecf0 	.word	0x023fecf0
 23f15d0:	023fed1c 	.word	0x023fed1c
 23f15d4:	023fed29 	.word	0x023fed29
 23f15d8:	023fed02 	.word	0x023fed02
 23f15dc:	023fed35 	.word	0x023fed35

023f15e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f15e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f15e2:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f15e4:	4605      	mov	r5, r0
 23f15e6:	460c      	mov	r4, r1
 23f15e8:	b085      	sub	sp, #20
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f15ea:	b90b      	cbnz	r3, 23f15f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10>
 23f15ec:	f003 f8f6 	bl	23f47dc <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f15f0:	4b21      	ldr	r3, [pc, #132]	; (23f1678 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>)
  return GetMutableEvalInput(context, node, index);
 23f15f2:	681a      	ldr	r2, [r3, #0]
 23f15f4:	f7ff fe04 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f15f8:	4b20      	ldr	r3, [pc, #128]	; (23f167c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>)
 23f15fa:	4621      	mov	r1, r4
 23f15fc:	681a      	ldr	r2, [r3, #0]
 23f15fe:	4606      	mov	r6, r0
 23f1600:	4628      	mov	r0, r5
 23f1602:	f7ff fdfd 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f1606:	4a1e      	ldr	r2, [pc, #120]	; (23f1680 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
 23f1608:	4621      	mov	r1, r4
 23f160a:	6812      	ldr	r2, [r2, #0]
 23f160c:	9003      	str	r0, [sp, #12]
 23f160e:	4628      	mov	r0, r5
 23f1610:	f7ff fdf6 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f1614:	4a1b      	ldr	r2, [pc, #108]	; (23f1684 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>)
 23f1616:	4621      	mov	r1, r4
 23f1618:	4607      	mov	r7, r0
 23f161a:	6812      	ldr	r2, [r2, #0]
 23f161c:	4628      	mov	r0, r5
 23f161e:	f7ff fe2e 	bl	23f127e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
 23f1622:	6921      	ldr	r1, [r4, #16]
 23f1624:	2900      	cmp	r1, #0
 23f1626:	d0e1      	beq.n	23f15ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 23f1628:	7a34      	ldrb	r4, [r6, #8]
 23f162a:	2c03      	cmp	r4, #3
 23f162c:	d018      	beq.n	23f1660 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>
 23f162e:	2c09      	cmp	r4, #9
 23f1630:	9b03      	ldr	r3, [sp, #12]
 23f1632:	d00d      	beq.n	23f1650 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x70>
 23f1634:	2c01      	cmp	r4, #1
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f1636:	4620      	mov	r0, r4
 23f1638:	692f      	ldr	r7, [r5, #16]
  switch (input->type) {
 23f163a:	d113      	bne.n	23f1664 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f163c:	f7f8 ff96 	bl	23ea56c <TfLiteTypeGetName>
 23f1640:	7a33      	ldrb	r3, [r6, #8]
 23f1642:	4602      	mov	r2, r0
 23f1644:	4910      	ldr	r1, [pc, #64]	; (23f1688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 23f1646:	4628      	mov	r0, r5
 23f1648:	47b8      	blx	r7
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
}
 23f164a:	4620      	mov	r0, r4
 23f164c:	b005      	add	sp, #20
 23f164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 23f1650:	e9cd 7000 	strd	r7, r0, [sp]
 23f1654:	4632      	mov	r2, r6
 23f1656:	4628      	mov	r0, r5
 23f1658:	f7ff fe3c 	bl	23f12d4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
 23f165c:	4604      	mov	r4, r0
                               output);
 23f165e:	e7f4      	b.n	23f164a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f1660:	4620      	mov	r0, r4
 23f1662:	692f      	ldr	r7, [r5, #16]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f1664:	f7f8 ff82 	bl	23ea56c <TfLiteTypeGetName>
 23f1668:	7a33      	ldrb	r3, [r6, #8]
 23f166a:	4602      	mov	r2, r0
 23f166c:	4906      	ldr	r1, [pc, #24]	; (23f1688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>)
 23f166e:	4628      	mov	r0, r5
 23f1670:	47b8      	blx	r7
      return kTfLiteError;
 23f1672:	2401      	movs	r4, #1
 23f1674:	e7e9      	b.n	23f164a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
 23f1676:	bf00      	nop
 23f1678:	023fed88 	.word	0x023fed88
 23f167c:	023fed90 	.word	0x023fed90
 23f1680:	023fed84 	.word	0x023fed84
 23f1684:	023fed8c 	.word	0x023fed8c
 23f1688:	023fed66 	.word	0x023fed66

023f168c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 23f168c:	b570      	push	{r4, r5, r6, lr}
  fully_connected_registration.init = Init;
 23f168e:	4b0b      	ldr	r3, [pc, #44]	; (23f16bc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x30>)
 23f1690:	4c0b      	ldr	r4, [pc, #44]	; (23f16c0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x34>)
  fully_connected_registration.invoke = Eval;
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
 23f1692:	4605      	mov	r5, r0
  fully_connected_registration.init = Init;
 23f1694:	6023      	str	r3, [r4, #0]
  fully_connected_registration.free = nullptr;
 23f1696:	2300      	movs	r3, #0
TfLiteRegistration Register_FULLY_CONNECTED() {
 23f1698:	4606      	mov	r6, r0
  fully_connected_registration.prepare = Prepare;
 23f169a:	4a0a      	ldr	r2, [pc, #40]	; (23f16c4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
  fully_connected_registration.free = nullptr;
 23f169c:	6063      	str	r3, [r4, #4]
  fully_connected_registration.prepare = Prepare;
 23f169e:	60a2      	str	r2, [r4, #8]
  fully_connected_registration.invoke = Eval;
 23f16a0:	4a09      	ldr	r2, [pc, #36]	; (23f16c8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.custom_name = nullptr;
 23f16a2:	e9c4 3305 	strd	r3, r3, [r4, #20]
  fully_connected_registration.profiling_string = nullptr;
 23f16a6:	e9c4 2303 	strd	r2, r3, [r4, #12]
  fully_connected_registration.version = 0;
 23f16aa:	61e3      	str	r3, [r4, #28]
  return fully_connected_registration;
 23f16ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f16ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f16b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f16b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 23f16b8:	4630      	mov	r0, r6
 23f16ba:	bd70      	pop	{r4, r5, r6, pc}
 23f16bc:	023f12c3 	.word	0x023f12c3
 23f16c0:	1007ae40 	.word	0x1007ae40
 23f16c4:	023f1449 	.word	0x023f1449
 23f16c8:	023f15e1 	.word	0x023f15e1

023f16cc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 23f16cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (data_type != kTfLiteFloat32) {
 23f16d0:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 23f16d2:	b085      	sub	sp, #20
 23f16d4:	4606      	mov	r6, r0
 23f16d6:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
 23f16da:	460f      	mov	r7, r1
 23f16dc:	461d      	mov	r5, r3
 23f16de:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
 23f16e2:	d027      	beq.n	23f1734 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
 23f16e4:	2200      	movs	r2, #0
 23f16e6:	2300      	movs	r3, #0
 23f16e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f16ec:	ab02      	add	r3, sp, #8
 23f16ee:	e9cd 8300 	strd	r8, r3, [sp]
 23f16f2:	464a      	mov	r2, r9
 23f16f4:	4629      	mov	r1, r5
 23f16f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f16f8:	f001 fae6 	bl	23f2cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f16fc:	b9b8      	cbnz	r0, 23f172e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 23f16fe:	4620      	mov	r0, r4
 23f1700:	1d21      	adds	r1, r4, #4
 23f1702:	ed9d 0b02 	vldr	d0, [sp, #8]
 23f1706:	f001 fcc5 	bl	23f3094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 23f170a:	692b      	ldr	r3, [r5, #16]
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;

    return CalculateActivationRangeQuantized(context, activation, output,
 23f170c:	4642      	mov	r2, r8
    data->input_zero_point = input->params.zero_point;
 23f170e:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
 23f1710:	f8d9 3010 	ldr.w	r3, [r9, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f1714:	4639      	mov	r1, r7
    data->filter_zero_point = filter->params.zero_point;
 23f1716:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
 23f1718:	f8d8 3010 	ldr.w	r3, [r8, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f171c:	4630      	mov	r0, r6
    data->output_zero_point = output->params.zero_point;
 23f171e:	61e3      	str	r3, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f1720:	f104 030c 	add.w	r3, r4, #12
 23f1724:	9300      	str	r3, [sp, #0]
 23f1726:	f104 0308 	add.w	r3, r4, #8
 23f172a:	f001 fb23 	bl	23f2d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
 23f172e:	b005      	add	sp, #20
 23f1730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
 23f1734:	2000      	movs	r0, #0
 23f1736:	e7fa      	b.n	23f172e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

023f1738 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f1738:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f173a:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
 23f173c:	4605      	mov	r5, r0
 23f173e:	b908      	cbnz	r0, 23f1744 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0xc>
 23f1740:	f003 f84c 	bl	23f47dc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f1744:	2900      	cmp	r1, #0
 23f1746:	d0fb      	beq.n	23f1740 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f1748:	680a      	ldr	r2, [r1, #0]
 23f174a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f174c:	6851      	ldr	r1, [r2, #4]
 23f174e:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f1750:	6872      	ldr	r2, [r6, #4]
 23f1752:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f1754:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f1756:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f1758:	4628      	mov	r0, r5
 23f175a:	4798      	blx	r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 23f175c:	a901      	add	r1, sp, #4
 23f175e:	4606      	mov	r6, r0
 23f1760:	7a20      	ldrb	r0, [r4, #8]
 23f1762:	f7ff fcd6 	bl	23f1112 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 23f1766:	4605      	mov	r5, r0
 23f1768:	b998      	cbnz	r0, 23f1792 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  input_bytes *= ElementCount(*input->dims);
 23f176a:	6860      	ldr	r0, [r4, #4]
 23f176c:	f7ff fcec 	bl	23f1148 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 23f1770:	9b01      	ldr	r3, [sp, #4]
 23f1772:	4358      	muls	r0, r3
 23f1774:	9001      	str	r0, [sp, #4]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 23f1776:	6822      	ldr	r2, [r4, #0]
 23f1778:	6833      	ldr	r3, [r6, #0]
 23f177a:	429a      	cmp	r2, r3
 23f177c:	d009      	beq.n	23f1792 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 23f177e:	462b      	mov	r3, r5
 23f1780:	9a01      	ldr	r2, [sp, #4]
 23f1782:	429a      	cmp	r2, r3
 23f1784:	d905      	bls.n	23f1792 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      output->data.raw[i] = input->data.raw[i];
 23f1786:	6822      	ldr	r2, [r4, #0]
 23f1788:	5cd1      	ldrb	r1, [r2, r3]
 23f178a:	6832      	ldr	r2, [r6, #0]
 23f178c:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
 23f178e:	3301      	adds	r3, #1
 23f1790:	e7f6      	b.n	23f1780 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
    }
  }
  return kTfLiteOk;
}
 23f1792:	4628      	mov	r0, r5
 23f1794:	b002      	add	sp, #8
 23f1796:	bd70      	pop	{r4, r5, r6, pc}

023f1798 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 23f1798:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f179c:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 23f179e:	4604      	mov	r4, r0
 23f17a0:	4688      	mov	r8, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f17a2:	f001 fa47 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f17a6:	4607      	mov	r7, r0
 23f17a8:	b958      	cbnz	r0, 23f17c2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
 23f17aa:	4b40      	ldr	r3, [pc, #256]	; (23f18ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x114>)
 23f17ac:	6925      	ldr	r5, [r4, #16]
 23f17ae:	9300      	str	r3, [sp, #0]
 23f17b0:	2323      	movs	r3, #35	; 0x23
  TF_LITE_ENSURE(context, output != nullptr);
 23f17b2:	4620      	mov	r0, r4
 23f17b4:	4a3e      	ldr	r2, [pc, #248]	; (23f18b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f17b6:	493f      	ldr	r1, [pc, #252]	; (23f18b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
 23f17b8:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f17ba:	2001      	movs	r0, #1
}
 23f17bc:	b004      	add	sp, #16
 23f17be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f17c2:	2200      	movs	r2, #0
 23f17c4:	4641      	mov	r1, r8
 23f17c6:	4620      	mov	r0, r4
 23f17c8:	f001 fa37 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f17cc:	4606      	mov	r6, r0
 23f17ce:	b920      	cbnz	r0, 23f17da <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x42>
 23f17d0:	4b39      	ldr	r3, [pc, #228]	; (23f18b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
 23f17d2:	6925      	ldr	r5, [r4, #16]
 23f17d4:	9300      	str	r3, [sp, #0]
 23f17d6:	2325      	movs	r3, #37	; 0x25
 23f17d8:	e7eb      	b.n	23f17b2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a>
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
  int64_t count = 1;
  for (int i = 0; i < dims->size; ++i) {
 23f17da:	2200      	movs	r2, #0
  int64_t count = 1;
 23f17dc:	2501      	movs	r5, #1
  for (int i = 0; i < dims->size; ++i) {
 23f17de:	68bb      	ldr	r3, [r7, #8]
 23f17e0:	f853 0b04 	ldr.w	r0, [r3], #4
 23f17e4:	4290      	cmp	r0, r2
 23f17e6:	dd05      	ble.n	23f17f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5c>
    count *= dims->data[i];
 23f17e8:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0; i < dims->size; ++i) {
 23f17ec:	3201      	adds	r2, #1
    count *= dims->data[i];
 23f17ee:	fba5 5101 	umull	r5, r1, r5, r1
  for (int i = 0; i < dims->size; ++i) {
 23f17f2:	e7f7      	b.n	23f17e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4c>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f17f4:	f8d8 3000 	ldr.w	r3, [r8]
  TfLiteIntArray* output_shape = output->dims;
 23f17f8:	68b2      	ldr	r2, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
 23f17fa:	681b      	ldr	r3, [r3, #0]
 23f17fc:	2b01      	cmp	r3, #1
 23f17fe:	d105      	bne.n	23f180c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 23f1800:	6813      	ldr	r3, [r2, #0]
 23f1802:	2b01      	cmp	r3, #1
 23f1804:	d102      	bne.n	23f180c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 23f1806:	6853      	ldr	r3, [r2, #4]
 23f1808:	b903      	cbnz	r3, 23f180c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x74>
    output_shape->size = 0;
 23f180a:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < output_shape->size; ++i) {
 23f180c:	4694      	mov	ip, r2
 23f180e:	2000      	movs	r0, #0
  int stretch_dim = -1;
 23f1810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  int num_output_elements = 1;
 23f1814:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
 23f1816:	f85c 8b04 	ldr.w	r8, [ip], #4
 23f181a:	4580      	cmp	r8, r0
 23f181c:	dd1a      	ble.n	23f1854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xbc>
    int value = output_shape->data[i];
 23f181e:	f85c eb04 	ldr.w	lr, [ip], #4
    if (value == -1) {
 23f1822:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 23f1826:	d10f      	bne.n	23f1848 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 23f1828:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 23f182c:	d010      	beq.n	23f1850 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb8>
 23f182e:	4b23      	ldr	r3, [pc, #140]	; (23f18bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
 23f1830:	e9cd 1e02 	strd	r1, lr, [sp, #8]
 23f1834:	9301      	str	r3, [sp, #4]
 23f1836:	4b22      	ldr	r3, [pc, #136]	; (23f18c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
 23f1838:	6925      	ldr	r5, [r4, #16]
 23f183a:	9300      	str	r3, [sp, #0]
 23f183c:	233a      	movs	r3, #58	; 0x3a
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f183e:	4620      	mov	r0, r4
 23f1840:	4a1b      	ldr	r2, [pc, #108]	; (23f18b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f1842:	4920      	ldr	r1, [pc, #128]	; (23f18c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
 23f1844:	47a8      	blx	r5
 23f1846:	e7b8      	b.n	23f17ba <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
      num_output_elements *= value;
 23f1848:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
 23f184c:	3001      	adds	r0, #1
 23f184e:	e7e4      	b.n	23f181a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
 23f1850:	4601      	mov	r1, r0
 23f1852:	e7fb      	b.n	23f184c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb4>
  if (stretch_dim != -1) {
 23f1854:	1c48      	adds	r0, r1, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 23f1856:	bf1f      	itttt	ne
 23f1858:	fb95 f0f3 	sdivne	r0, r5, r3
 23f185c:	eb02 0281 	addne.w	r2, r2, r1, lsl #2
 23f1860:	6050      	strne	r0, [r2, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 23f1862:	4343      	mulne	r3, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f1864:	7832      	ldrb	r2, [r6, #0]
 23f1866:	7838      	ldrb	r0, [r7, #0]
 23f1868:	4282      	cmp	r2, r0
 23f186a:	d012      	beq.n	23f1892 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
 23f186c:	6927      	ldr	r7, [r4, #16]
 23f186e:	f7f8 fe7d 	bl	23ea56c <TfLiteTypeGetName>
 23f1872:	4605      	mov	r5, r0
 23f1874:	7830      	ldrb	r0, [r6, #0]
 23f1876:	f7f8 fe79 	bl	23ea56c <TfLiteTypeGetName>
 23f187a:	4b13      	ldr	r3, [pc, #76]	; (23f18c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
 23f187c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f1880:	9301      	str	r3, [sp, #4]
 23f1882:	4b12      	ldr	r3, [pc, #72]	; (23f18cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
 23f1884:	4620      	mov	r0, r4
 23f1886:	9300      	str	r3, [sp, #0]
 23f1888:	4a09      	ldr	r2, [pc, #36]	; (23f18b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
 23f188a:	2345      	movs	r3, #69	; 0x45
 23f188c:	4910      	ldr	r1, [pc, #64]	; (23f18d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
 23f188e:	47b8      	blx	r7
 23f1890:	e793      	b.n	23f17ba <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 23f1892:	42ab      	cmp	r3, r5
 23f1894:	d008      	beq.n	23f18a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x110>
 23f1896:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f189a:	4b0e      	ldr	r3, [pc, #56]	; (23f18d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13c>)
 23f189c:	6925      	ldr	r5, [r4, #16]
 23f189e:	9301      	str	r3, [sp, #4]
 23f18a0:	4b0d      	ldr	r3, [pc, #52]	; (23f18d8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>)
 23f18a2:	9300      	str	r3, [sp, #0]
 23f18a4:	2346      	movs	r3, #70	; 0x46
 23f18a6:	e7ca      	b.n	23f183e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
  return kTfLiteOk;
 23f18a8:	2000      	movs	r0, #0
 23f18aa:	e787      	b.n	23f17bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x24>
 23f18ac:	023feccd 	.word	0x023feccd
 23f18b0:	023fed94 	.word	0x023fed94
 23f18b4:	023fecb6 	.word	0x023fecb6
 23f18b8:	023fecf0 	.word	0x023fecf0
 23f18bc:	023fee0f 	.word	0x023fee0f
 23f18c0:	023fee12 	.word	0x023fee12
 23f18c4:	023feb67 	.word	0x023feb67
 23f18c8:	023fed1c 	.word	0x023fed1c
 23f18cc:	023fed29 	.word	0x023fed29
 23f18d0:	023fed02 	.word	0x023fed02
 23f18d4:	023fee1e 	.word	0x023fee1e
 23f18d8:	023fee32 	.word	0x023fee32

023f18dc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f18dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f18de:	680b      	ldr	r3, [r1, #0]
 23f18e0:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f18e2:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f18e4:	460c      	mov	r4, r1
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f18e6:	3b01      	subs	r3, #1
 23f18e8:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f18ea:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 23f18ec:	d909      	bls.n	23f1902 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 23f18ee:	4b19      	ldr	r3, [pc, #100]	; (23f1954 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 23f18f0:	4a19      	ldr	r2, [pc, #100]	; (23f1958 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f18f2:	9300      	str	r3, [sp, #0]
 23f18f4:	6904      	ldr	r4, [r0, #16]
 23f18f6:	234b      	movs	r3, #75	; 0x4b
 23f18f8:	4918      	ldr	r1, [pc, #96]	; (23f195c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 23f18fa:	47a0      	blx	r4
 23f18fc:	2001      	movs	r0, #1
}
 23f18fe:	b005      	add	sp, #20
 23f1900:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 23f1902:	684b      	ldr	r3, [r1, #4]
 23f1904:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f1906:	2e01      	cmp	r6, #1
 23f1908:	d00c      	beq.n	23f1924 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 23f190a:	2401      	movs	r4, #1
 23f190c:	4b14      	ldr	r3, [pc, #80]	; (23f1960 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
 23f190e:	e9cd 6402 	strd	r6, r4, [sp, #8]
 23f1912:	9301      	str	r3, [sp, #4]
 23f1914:	4b13      	ldr	r3, [pc, #76]	; (23f1964 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
 23f1916:	4a10      	ldr	r2, [pc, #64]	; (23f1958 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f1918:	9300      	str	r3, [sp, #0]
 23f191a:	6905      	ldr	r5, [r0, #16]
 23f191c:	234c      	movs	r3, #76	; 0x4c
 23f191e:	4912      	ldr	r1, [pc, #72]	; (23f1968 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f1920:	47a8      	blx	r5
 23f1922:	e7eb      	b.n	23f18fc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 23f1924:	f7ff ff38 	bl	23f1798 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 23f1928:	2800      	cmp	r0, #0
 23f192a:	d0e8      	beq.n	23f18fe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 23f192c:	4621      	mov	r1, r4
 23f192e:	4628      	mov	r0, r5
 23f1930:	692f      	ldr	r7, [r5, #16]
 23f1932:	f7ff ff31 	bl	23f1798 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 23f1936:	2300      	movs	r3, #0
 23f1938:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f193c:	4b0b      	ldr	r3, [pc, #44]	; (23f196c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
 23f193e:	4628      	mov	r0, r5
 23f1940:	9301      	str	r3, [sp, #4]
 23f1942:	4b0b      	ldr	r3, [pc, #44]	; (23f1970 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
 23f1944:	4a04      	ldr	r2, [pc, #16]	; (23f1958 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 23f1946:	9300      	str	r3, [sp, #0]
 23f1948:	4907      	ldr	r1, [pc, #28]	; (23f1968 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f194a:	234d      	movs	r3, #77	; 0x4d
 23f194c:	47b8      	blx	r7
 23f194e:	4630      	mov	r0, r6
 23f1950:	e7d5      	b.n	23f18fe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 23f1952:	bf00      	nop
 23f1954:	023fee45 	.word	0x023fee45
 23f1958:	023fed94 	.word	0x023fed94
 23f195c:	023fecb6 	.word	0x023fecb6
 23f1960:	023ff243 	.word	0x023ff243
 23f1964:	023fee72 	.word	0x023fee72
 23f1968:	023feb67 	.word	0x023feb67
 23f196c:	023fee83 	.word	0x023fee83
 23f1970:	023fee8d 	.word	0x023fee8d

023f1974 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 23f1974:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f1976:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
 23f1978:	4606      	mov	r6, r0
          /*version=*/0};
 23f197a:	4d04      	ldr	r5, [pc, #16]	; (23f198c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
 23f197c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f197e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f1980:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f1984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f1988:	4630      	mov	r0, r6
 23f198a:	bd70      	pop	{r4, r5, r6, pc}
 23f198c:	023fb490 	.word	0x023fb490

023f1990 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f1990:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f1992:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f1994:	b90b      	cbnz	r3, 23f199a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f1996:	f002 ff21 	bl	23f47dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f199a:	2138      	movs	r1, #56	; 0x38
}
 23f199c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f19a0:	4718      	bx	r3
	...

023f19a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 23f19a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f19a8:	4698      	mov	r8, r3
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 23f19aa:	6943      	ldr	r3, [r0, #20]
    int8_t* output_data) {
 23f19ac:	b0a1      	sub	sp, #132	; 0x84
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 23f19ae:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
 23f19b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8_t* output_data) {
 23f19b4:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_width = params.stride_width;
 23f19b8:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
 23f19ba:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8_t* output_data) {
 23f19be:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
  const int stride_height = params.stride_height;
 23f19c2:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
 23f19c4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8_t* output_data) {
 23f19c8:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
  const int dilation_width_factor = params.dilation_width_factor;
 23f19cc:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
 23f19ce:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 23f19d2:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
 23f19d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 23f19d8:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
 23f19da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 23f19de:	9314      	str	r3, [sp, #80]	; 0x50
  const int32_t output_offset = params.output_offset;
 23f19e0:	69c3      	ldr	r3, [r0, #28]
 23f19e2:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 23f19e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 23f19e6:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_activation_max = params.quantized_activation_max;
 23f19e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f19ea:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 23f19ec:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 23f19f0:	4293      	cmp	r3, r2
 23f19f2:	dd01      	ble.n	23f19f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x54>
 23f19f4:	f002 fef2 	bl	23f47dc <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f19f8:	f8d8 3000 	ldr.w	r3, [r8]
 23f19fc:	2b04      	cmp	r3, #4
 23f19fe:	d1f9      	bne.n	23f19f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 23f1a00:	f8d9 3000 	ldr.w	r3, [r9]
 23f1a04:	2b04      	cmp	r3, #4
 23f1a06:	d1f5      	bne.n	23f19f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f1a08:	f8da 3000 	ldr.w	r3, [sl]
 23f1a0c:	2b04      	cmp	r3, #4
 23f1a0e:	d1f1      	bne.n	23f19f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 23f1a10:	2300      	movs	r3, #0
 23f1a12:	4652      	mov	r2, sl
 23f1a14:	4619      	mov	r1, r3
 23f1a16:	4640      	mov	r0, r8
 23f1a18:	f7ff fc00 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f1a1c:	2303      	movs	r3, #3
 23f1a1e:	464a      	mov	r2, r9
 23f1a20:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 23f1a22:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f1a24:	4640      	mov	r0, r8
 23f1a26:	f7ff fbf9 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f1a2a:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f1a2c:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f1a2e:	4652      	mov	r2, sl
 23f1a30:	2100      	movs	r1, #0
 23f1a32:	4648      	mov	r0, r9
 23f1a34:	f7ff fbf2 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
 23f1a38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f1a3a:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
 23f1a3c:	b12b      	cbz	r3, 23f1a4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 23f1a3e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 23f1a40:	f7ff fbac 	bl	23f119c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 23f1a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f1a46:	4298      	cmp	r0, r3
 23f1a48:	d1d4      	bne.n	23f19f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 23f1a4a:	2101      	movs	r1, #1
 23f1a4c:	4640      	mov	r0, r8
 23f1a4e:	f7ff fb94 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
 23f1a52:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
 23f1a54:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 23f1a56:	4640      	mov	r0, r8
 23f1a58:	f7ff fb8f 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
 23f1a5c:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
 23f1a5e:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
 23f1a60:	4648      	mov	r0, r9
 23f1a62:	f7ff fb8a 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
 23f1a66:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
 23f1a68:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
 23f1a6a:	4648      	mov	r0, r9
 23f1a6c:	f7ff fb85 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
 23f1a70:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
 23f1a72:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
 23f1a74:	4650      	mov	r0, sl
 23f1a76:	f7ff fb80 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
 23f1a7a:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
 23f1a7c:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
 23f1a7e:	4650      	mov	r0, sl
 23f1a80:	f7ff fb7b 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
 23f1a84:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
 23f1a88:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
 23f1a8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23f1a8c:	459b      	cmp	fp, r3
 23f1a8e:	f280 80d0 	bge.w	23f1c32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
 23f1a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f1a94:	425b      	negs	r3, r3
 23f1a96:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
 23f1a98:	2300      	movs	r3, #0
 23f1a9a:	9304      	str	r3, [sp, #16]
 23f1a9c:	9b04      	ldr	r3, [sp, #16]
 23f1a9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23f1aa0:	4293      	cmp	r3, r2
 23f1aa2:	f280 80c3 	bge.w	23f1c2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 23f1aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f1aa8:	425b      	negs	r3, r3
 23f1aaa:	9308      	str	r3, [sp, #32]
 23f1aac:	2300      	movs	r3, #0
 23f1aae:	9305      	str	r3, [sp, #20]
 23f1ab0:	9b05      	ldr	r3, [sp, #20]
 23f1ab2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 23f1ab4:	4293      	cmp	r3, r2
 23f1ab6:	f280 80b1 	bge.w	23f1c1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f1aba:	2500      	movs	r5, #0
 23f1abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f1abe:	429d      	cmp	r5, r3
 23f1ac0:	f280 80a4 	bge.w	23f1c0c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x268>
          int32_t acc = 0;
 23f1ac4:	2400      	movs	r4, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f1ac6:	9e09      	ldr	r6, [sp, #36]	; 0x24
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 23f1ac8:	9406      	str	r4, [sp, #24]
 23f1aca:	9b06      	ldr	r3, [sp, #24]
 23f1acc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f1ace:	4293      	cmp	r3, r2
 23f1ad0:	da3e      	bge.n	23f1b50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ac>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f1ad2:	2300      	movs	r3, #0
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 23f1ad4:	9f08      	ldr	r7, [sp, #32]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f1ad6:	9307      	str	r3, [sp, #28]
 23f1ad8:	9b07      	ldr	r3, [sp, #28]
 23f1ada:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 23f1adc:	4293      	cmp	r3, r2
 23f1ade:	da31      	bge.n	23f1b44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a0>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 23f1ae0:	2f00      	cmp	r7, #0
 23f1ae2:	db29      	blt.n	23f1b38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f1ae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23f1ae6:	42bb      	cmp	r3, r7
 23f1ae8:	dd26      	ble.n	23f1b38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f1aea:	2e00      	cmp	r6, #0
 23f1aec:	db24      	blt.n	23f1b38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f1aee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23f1af0:	42b3      	cmp	r3, r6
 23f1af2:	dd21      	ble.n	23f1b38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
 23f1af4:	2300      	movs	r3, #0
 23f1af6:	9303      	str	r3, [sp, #12]

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 23f1af8:	9b03      	ldr	r3, [sp, #12]
 23f1afa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f1afc:	4293      	cmp	r3, r2
 23f1afe:	da1b      	bge.n	23f1b38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x194>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 23f1b00:	4632      	mov	r2, r6
 23f1b02:	4659      	mov	r1, fp
 23f1b04:	9300      	str	r3, [sp, #0]
 23f1b06:	4640      	mov	r0, r8
 23f1b08:	463b      	mov	r3, r7
 23f1b0a:	f7ff fb57 	bl	23f11bc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
 23f1b0e:	9b03      	ldr	r3, [sp, #12]
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 23f1b10:	9011      	str	r0, [sp, #68]	; 0x44
                int32_t filter_val = filter_data[Offset(
 23f1b12:	9300      	str	r3, [sp, #0]
 23f1b14:	4629      	mov	r1, r5
 23f1b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f1b1a:	4648      	mov	r0, r9
 23f1b1c:	f7ff fb4e 	bl	23f11bc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
 23f1b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23f1b22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f1b24:	569b      	ldrsb	r3, [r3, r2]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 23f1b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f1b28:	4413      	add	r3, r2
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 23f1b2a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23f1b2c:	5612      	ldrsb	r2, [r2, r0]
                acc += filter_val * (input_val + input_offset);
 23f1b2e:	fb02 4403 	mla	r4, r2, r3, r4
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 23f1b32:	9b03      	ldr	r3, [sp, #12]
 23f1b34:	3301      	adds	r3, #1
 23f1b36:	e7de      	b.n	23f1af6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 23f1b38:	9b07      	ldr	r3, [sp, #28]
 23f1b3a:	3301      	adds	r3, #1
 23f1b3c:	9307      	str	r3, [sp, #28]
 23f1b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f1b40:	441f      	add	r7, r3
 23f1b42:	e7c9      	b.n	23f1ad8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x134>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 23f1b44:	9b06      	ldr	r3, [sp, #24]
 23f1b46:	3301      	adds	r3, #1
 23f1b48:	9306      	str	r3, [sp, #24]
 23f1b4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f1b4c:	441e      	add	r6, r3
 23f1b4e:	e7bc      	b.n	23f1aca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
              }
            }
          }

          if (bias_data) {
 23f1b50:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 23f1b52:	b113      	cbz	r3, 23f1b5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
            acc += bias_data[out_channel];
 23f1b54:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 23f1b58:	441c      	add	r4, r3
          }
          acc = MultiplyByQuantizedMultiplier(
 23f1b5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23f1b5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23f1b5e:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 23f1b62:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 23f1b66:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
 23f1b6a:	2e00      	cmp	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 23f1b6c:	fa04 f402 	lsl.w	r4, r4, r2
  int right_shift = shift > 0 ? 0 : -shift;
 23f1b70:	bfcc      	ite	gt
 23f1b72:	2600      	movgt	r6, #0
 23f1b74:	4276      	negle	r6, r6
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 23f1b76:	42a3      	cmp	r3, r4
 23f1b78:	d122      	bne.n	23f1bc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21c>
 23f1b7a:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 23f1b7e:	4250      	negs	r0, r2
 23f1b80:	4150      	adcs	r0, r2
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
 23f1b82:	fb84 4203 	smull	r4, r2, r4, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 23f1b86:	4b2c      	ldr	r3, [pc, #176]	; (23f1c38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x294>)
 23f1b88:	2a00      	cmp	r2, #0
 23f1b8a:	bfac      	ite	ge
 23f1b8c:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 23f1b90:	4619      	movlt	r1, r3
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 23f1b92:	b9b8      	cbnz	r0, 23f1bc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 23f1b94:	190b      	adds	r3, r1, r4
 23f1b96:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
 23f1b9a:	2c00      	cmp	r4, #0
 23f1b9c:	da04      	bge.n	23f1ba8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x204>
 23f1b9e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23f1ba2:	189b      	adds	r3, r3, r2
 23f1ba4:	f144 0400 	adc.w	r4, r4, #0
 23f1ba8:	0fdb      	lsrs	r3, r3, #31
 23f1baa:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
 23f1bae:	2e1f      	cmp	r6, #31
 23f1bb0:	dd0b      	ble.n	23f1bca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x226>
 23f1bb2:	f240 1167 	movw	r1, #359	; 0x167
 23f1bb6:	4b21      	ldr	r3, [pc, #132]	; (23f1c3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x298>)
 23f1bb8:	4a21      	ldr	r2, [pc, #132]	; (23f1c40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29c>)
 23f1bba:	4822      	ldr	r0, [pc, #136]	; (23f1c44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a0>)
 23f1bbc:	f002 fe38 	bl	23f4830 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 23f1bc0:	2000      	movs	r0, #0
 23f1bc2:	e7de      	b.n	23f1b82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
 23f1bc4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23f1bc8:	e7f1      	b.n	23f1bae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 23f1bca:	2701      	movs	r7, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 23f1bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23f1bd0:	40b7      	lsls	r7, r6
 23f1bd2:	3f01      	subs	r7, #1
 23f1bd4:	9500      	str	r5, [sp, #0]
 23f1bd6:	4659      	mov	r1, fp
 23f1bd8:	4650      	mov	r0, sl
 23f1bda:	f7ff faef 	bl	23f11bc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return a & b;
 23f1bde:	ea07 0304 	and.w	r3, r7, r4
  return a >> offset;
 23f1be2:	107f      	asrs	r7, r7, #1
  return a + b;
 23f1be4:	eb07 77d4 	add.w	r7, r7, r4, lsr #31
  return a >> offset;
 23f1be8:	4134      	asrs	r4, r6
  return a + b;
 23f1bea:	42bb      	cmp	r3, r7
 23f1bec:	bfc8      	it	gt
 23f1bee:	3401      	addgt	r4, #1
          acc += output_offset;
 23f1bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f1bf2:	3501      	adds	r5, #1
          acc += output_offset;
 23f1bf4:	441c      	add	r4, r3
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 23f1bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1bf8:	429c      	cmp	r4, r3
 23f1bfa:	bfb8      	it	lt
 23f1bfc:	461c      	movlt	r4, r3
 23f1bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f1c00:	429c      	cmp	r4, r3
 23f1c02:	bfa8      	it	ge
 23f1c04:	461c      	movge	r4, r3
 23f1c06:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 23f1c08:	541c      	strb	r4, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 23f1c0a:	e757      	b.n	23f1abc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x118>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 23f1c0c:	9b05      	ldr	r3, [sp, #20]
 23f1c0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23f1c10:	3301      	adds	r3, #1
 23f1c12:	9305      	str	r3, [sp, #20]
 23f1c14:	9b08      	ldr	r3, [sp, #32]
 23f1c16:	4413      	add	r3, r2
 23f1c18:	9308      	str	r3, [sp, #32]
 23f1c1a:	e749      	b.n	23f1ab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 23f1c1c:	9b04      	ldr	r3, [sp, #16]
 23f1c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f1c20:	3301      	adds	r3, #1
 23f1c22:	9304      	str	r3, [sp, #16]
 23f1c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f1c26:	4413      	add	r3, r2
 23f1c28:	9309      	str	r3, [sp, #36]	; 0x24
 23f1c2a:	e737      	b.n	23f1a9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
 23f1c2c:	f10b 0b01 	add.w	fp, fp, #1
 23f1c30:	e72b      	b.n	23f1a8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 23f1c32:	b021      	add	sp, #132	; 0x84
 23f1c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f1c38:	c0000001 	.word	0xc0000001
 23f1c3c:	023feeaa 	.word	0x023feeaa
 23f1c40:	023feeb9 	.word	0x023feeb9
 23f1c44:	023fef13 	.word	0x023fef13

023f1c48 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>:
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel(
 23f1c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1c4c:	4617      	mov	r7, r2
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 23f1c4e:	694a      	ldr	r2, [r1, #20]
TfLiteStatus EvalQuantizedPerChannel(
 23f1c50:	469b      	mov	fp, r3
  conv_params.dilation.w = params.dilation_width_factor;
 23f1c52:	690b      	ldr	r3, [r1, #16]
TfLiteStatus EvalQuantizedPerChannel(
 23f1c54:	b0e1      	sub	sp, #388	; 0x184
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 23f1c56:	2a01      	cmp	r2, #1
TfLiteStatus EvalQuantizedPerChannel(
 23f1c58:	4682      	mov	sl, r0
 23f1c5a:	e9dd 856a 	ldrd	r8, r5, [sp, #424]	; 0x1a8
 23f1c5e:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  conv_params.dilation.h = params.dilation_height_factor;
 23f1c60:	924f      	str	r2, [sp, #316]	; 0x13c
  conv_params.dilation.w = params.dilation_width_factor;
 23f1c62:	934e      	str	r3, [sp, #312]	; 0x138
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 23f1c64:	ae30      	add	r6, sp, #192	; 0xc0
 23f1c66:	f040 80bd 	bne.w	23f1de4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
 23f1c6a:	2b01      	cmp	r3, #1
 23f1c6c:	f040 80ba 	bne.w	23f1de4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x19c>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f1c70:	693b      	ldr	r3, [r7, #16]
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f1c72:	a81e      	add	r0, sp, #120	; 0x78
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f1c74:	425b      	negs	r3, r3
 23f1c76:	9348      	str	r3, [sp, #288]	; 0x120
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 23f1c78:	69bb      	ldr	r3, [r7, #24]
 23f1c7a:	9349      	str	r3, [sp, #292]	; 0x124
    conv_params.stride.h = params.stride_height;
 23f1c7c:	688b      	ldr	r3, [r1, #8]
 23f1c7e:	934b      	str	r3, [sp, #300]	; 0x12c
    conv_params.stride.w = params.stride_width;
 23f1c80:	684b      	ldr	r3, [r1, #4]
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f1c82:	4641      	mov	r1, r8
    conv_params.stride.w = params.stride_width;
 23f1c84:	934a      	str	r3, [sp, #296]	; 0x128
    conv_params.padding.h = data.reference_op_data.padding.height;
 23f1c86:	687b      	ldr	r3, [r7, #4]
 23f1c88:	934d      	str	r3, [sp, #308]	; 0x134
    conv_params.padding.w = data.reference_op_data.padding.width;
 23f1c8a:	683b      	ldr	r3, [r7, #0]
 23f1c8c:	934c      	str	r3, [sp, #304]	; 0x130
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 23f1c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 23f1c90:	9350      	str	r3, [sp, #320]	; 0x140
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 23f1c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 23f1c94:	9351      	str	r3, [sp, #324]	; 0x144
    quant_params.multiplier = const_cast<int32_t*>(
 23f1c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 23f1c98:	930a      	str	r3, [sp, #40]	; 0x28
    quant_params.shift =
 23f1c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 23f1c9c:	930b      	str	r3, [sp, #44]	; 0x2c
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f1c9e:	f000 fe19 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f1ca2:	4659      	mov	r1, fp
 23f1ca4:	a824      	add	r0, sp, #144	; 0x90
 23f1ca6:	f000 fe15 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f1caa:	4621      	mov	r1, r4
 23f1cac:	a82a      	add	r0, sp, #168	; 0xa8
 23f1cae:	f000 fe11 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 23f1cb2:	4629      	mov	r1, r5
 23f1cb4:	4630      	mov	r0, r6
 23f1cb6:	f000 fe0d 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 23f1cba:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	; 0x140
 23f1cbe:	429a      	cmp	r2, r3
 23f1cc0:	dd01      	ble.n	23f1cc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7e>
 23f1cc2:	f002 fd8b 	bl	23f47dc <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f1cc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f1cc8:	2b04      	cmp	r3, #4
 23f1cca:	d1fa      	bne.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 23f1ccc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 23f1cce:	2b04      	cmp	r3, #4
 23f1cd0:	d1f7      	bne.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f1cd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f1cd4:	2b04      	cmp	r3, #4
 23f1cd6:	d1f4      	bne.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 23f1cd8:	2300      	movs	r3, #0
 23f1cda:	aa2a      	add	r2, sp, #168	; 0xa8
 23f1cdc:	4619      	mov	r1, r3
 23f1cde:	a824      	add	r0, sp, #144	; 0x90
 23f1ce0:	f7ff fa9c 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f1ce4:	2303      	movs	r3, #3
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 23f1ce6:	9008      	str	r0, [sp, #32]
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f1ce8:	4619      	mov	r1, r3
 23f1cea:	aa1e      	add	r2, sp, #120	; 0x78
 23f1cec:	a824      	add	r0, sp, #144	; 0x90
 23f1cee:	f7ff fa95 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f1cf2:	2303      	movs	r3, #3
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 23f1cf4:	9009      	str	r0, [sp, #36]	; 0x24
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 23f1cf6:	2100      	movs	r1, #0
 23f1cf8:	aa2a      	add	r2, sp, #168	; 0xa8
 23f1cfa:	a81e      	add	r0, sp, #120	; 0x78
 23f1cfc:	f7ff fa8e 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f1d00:	4681      	mov	r9, r0
  TFLITE_DCHECK(tensor != nullptr);
 23f1d02:	2d00      	cmp	r5, #0
 23f1d04:	d0dd      	beq.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 23f1d06:	682b      	ldr	r3, [r5, #0]
 23f1d08:	b123      	cbz	r3, 23f1d14 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0xcc>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 23f1d0a:	4630      	mov	r0, r6
 23f1d0c:	f7ff fa46 	bl	23f119c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 23f1d10:	4581      	cmp	r9, r0
 23f1d12:	d1d6      	bne.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 23f1d14:	9b08      	ldr	r3, [sp, #32]
    input_dims.h = input_shape.Dims(1);
 23f1d16:	2101      	movs	r1, #1
 23f1d18:	a824      	add	r0, sp, #144	; 0x90
    input_dims.n = batch_size;
 23f1d1a:	930e      	str	r3, [sp, #56]	; 0x38
    input_dims.h = input_shape.Dims(1);
 23f1d1c:	f7ff fa2d 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.w = input_shape.Dims(2);
 23f1d20:	2102      	movs	r1, #2
    input_dims.h = input_shape.Dims(1);
 23f1d22:	900f      	str	r0, [sp, #60]	; 0x3c
    input_dims.w = input_shape.Dims(2);
 23f1d24:	a824      	add	r0, sp, #144	; 0x90
 23f1d26:	f7ff fa28 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    input_dims.c = input_depth;
 23f1d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
    filter_dims.h = filter_shape.Dims(1);
 23f1d2c:	2101      	movs	r1, #1
    input_dims.w = input_shape.Dims(2);
 23f1d2e:	9010      	str	r0, [sp, #64]	; 0x40
    filter_dims.h = filter_shape.Dims(1);
 23f1d30:	a81e      	add	r0, sp, #120	; 0x78
    input_dims.c = input_depth;
 23f1d32:	9311      	str	r3, [sp, #68]	; 0x44
    filter_dims.n = output_depth;
 23f1d34:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    filter_dims.h = filter_shape.Dims(1);
 23f1d38:	f7ff fa1f 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.w = filter_shape.Dims(2);
 23f1d3c:	2102      	movs	r1, #2
    filter_dims.h = filter_shape.Dims(1);
 23f1d3e:	9013      	str	r0, [sp, #76]	; 0x4c
    filter_dims.w = filter_shape.Dims(2);
 23f1d40:	a81e      	add	r0, sp, #120	; 0x78
 23f1d42:	f7ff fa1a 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    filter_dims.c = input_depth;

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 23f1d46:	2101      	movs	r1, #1
    filter_dims.c = input_depth;
 23f1d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    filter_dims.w = filter_shape.Dims(2);
 23f1d4a:	9014      	str	r0, [sp, #80]	; 0x50
    filter_dims.c = input_depth;
 23f1d4c:	9315      	str	r3, [sp, #84]	; 0x54
    bias_dims.w = 1;
    bias_dims.c = output_depth;

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 23f1d4e:	9b08      	ldr	r3, [sp, #32]
    output_dims.h = output_shape.Dims(1);
 23f1d50:	a82a      	add	r0, sp, #168	; 0xa8
    output_dims.n = batch_size;
 23f1d52:	931a      	str	r3, [sp, #104]	; 0x68
    bias_dims.h = 1;
 23f1d54:	e9cd 1116 	strd	r1, r1, [sp, #88]	; 0x58
    bias_dims.c = output_depth;
 23f1d58:	e9cd 1918 	strd	r1, r9, [sp, #96]	; 0x60
    output_dims.h = output_shape.Dims(1);
 23f1d5c:	f7ff fa0d 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.w = output_shape.Dims(2);
 23f1d60:	2102      	movs	r1, #2
    output_dims.h = output_shape.Dims(1);
 23f1d62:	901b      	str	r0, [sp, #108]	; 0x6c
    output_dims.w = output_shape.Dims(2);
 23f1d64:	a82a      	add	r0, sp, #168	; 0xa8
 23f1d66:	f7ff fa08 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
    output_dims.c = output_depth;

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 23f1d6a:	2300      	movs	r3, #0
    ctx.size = 0;

    if (data.buffer_idx > -1) {
 23f1d6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    filter_dims.n = output_depth;
 23f1d6e:	ae12      	add	r6, sp, #72	; 0x48
    if (data.buffer_idx > -1) {
 23f1d70:	4299      	cmp	r1, r3
    output_dims.c = output_depth;
 23f1d72:	e9cd 091c 	strd	r0, r9, [sp, #112]	; 0x70
    ctx.size = 0;
 23f1d76:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    if (data.buffer_idx > -1) {
 23f1d7a:	db04      	blt.n	23f1d86 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x13e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f1d7c:	4650      	mov	r0, sl
 23f1d7e:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 23f1d82:	4798      	blx	r3
 23f1d84:	900c      	str	r0, [sp, #48]	; 0x30
 23f1d86:	f1bb 0f00 	cmp.w	fp, #0
 23f1d8a:	d09a      	beq.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f1d8c:	f8db 3000 	ldr.w	r3, [fp]
  TFLITE_DCHECK(tensor != nullptr);
 23f1d90:	f1b8 0f00 	cmp.w	r8, #0
 23f1d94:	d095      	beq.n	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f1d96:	f8d8 2000 	ldr.w	r2, [r8]
 23f1d9a:	6829      	ldr	r1, [r5, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f1d9c:	b104      	cbz	r4, 23f1da0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x158>
 23f1d9e:	6824      	ldr	r4, [r4, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 23f1da0:	a81a      	add	r0, sp, #104	; 0x68
 23f1da2:	e9cd 1004 	strd	r1, r0, [sp, #16]
 23f1da6:	a916      	add	r1, sp, #88	; 0x58
 23f1da8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 23f1dac:	e9cd 3600 	strd	r3, r6, [sp]
 23f1db0:	9406      	str	r4, [sp, #24]
 23f1db2:	ab0e      	add	r3, sp, #56	; 0x38
 23f1db4:	aa0a      	add	r2, sp, #40	; 0x28
 23f1db6:	a948      	add	r1, sp, #288	; 0x120
 23f1db8:	a80c      	add	r0, sp, #48	; 0x30
 23f1dba:	f7fa f8b9 	bl	23ebf30 <arm_convolve_wrapper_s8>
 23f1dbe:	2800      	cmp	r0, #0
 23f1dc0:	f47f af7f 	bne.w	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 23f1dc4:	a830      	add	r0, sp, #192	; 0xc0
 23f1dc6:	f7ff f9cd 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f1dca:	a82a      	add	r0, sp, #168	; 0xa8
 23f1dcc:	f7ff f9ca 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f1dd0:	a824      	add	r0, sp, #144	; 0x90
 23f1dd2:	f7ff f9c7 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 23f1dd6:	a81e      	add	r0, sp, #120	; 0x78
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
        data.reference_op_data.per_channel_output_multiplier,
        data.reference_op_data.per_channel_output_shift,
        tflite::micro::GetTensorShape(input),
 23f1dd8:	f7ff f9c4 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
 23f1ddc:	2000      	movs	r0, #0
 23f1dde:	b061      	add	sp, #388	; 0x184
 23f1de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ConvParamsQuantized(params, data.reference_op_data),
 23f1de4:	a852      	add	r0, sp, #328	; 0x148
 23f1de6:	463a      	mov	r2, r7
 23f1de8:	f000 fa64 	bl	23f22b4 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_shift,
 23f1dec:	e9d7 9a09 	ldrd	r9, sl, [r7, #36]	; 0x24
        tflite::micro::GetTensorShape(input),
 23f1df0:	4659      	mov	r1, fp
 23f1df2:	a842      	add	r0, sp, #264	; 0x108
 23f1df4:	f000 fd6e 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f1df8:	f1bb 0f00 	cmp.w	fp, #0
 23f1dfc:	f43f af61 	beq.w	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f1e00:	f8db 3000 	ldr.w	r3, [fp]
        tflite::micro::GetTensorShape(filter),
 23f1e04:	af3c      	add	r7, sp, #240	; 0xf0
 23f1e06:	4641      	mov	r1, r8
 23f1e08:	4638      	mov	r0, r7
 23f1e0a:	9308      	str	r3, [sp, #32]
 23f1e0c:	f000 fd62 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f1e10:	f1b8 0f00 	cmp.w	r8, #0
 23f1e14:	f43f af55 	beq.w	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f1e18:	f8d8 b000 	ldr.w	fp, [r8]
        tflite::micro::GetTensorShape(bias),
 23f1e1c:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 23f1e20:	4629      	mov	r1, r5
 23f1e22:	4640      	mov	r0, r8
 23f1e24:	f000 fd56 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f1e28:	2d00      	cmp	r5, #0
 23f1e2a:	f43f af4a 	beq.w	23f1cc2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x7a>
        tflite::micro::GetTensorShape(output),
 23f1e2e:	4621      	mov	r1, r4
 23f1e30:	4630      	mov	r0, r6
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f1e32:	682d      	ldr	r5, [r5, #0]
 23f1e34:	f000 fd4e 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f1e38:	b104      	cbz	r4, 23f1e3c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x1f4>
 23f1e3a:	6824      	ldr	r4, [r4, #0]
    reference_integer_ops::ConvPerChannel(
 23f1e3c:	9b08      	ldr	r3, [sp, #32]
 23f1e3e:	4652      	mov	r2, sl
 23f1e40:	4649      	mov	r1, r9
 23f1e42:	9300      	str	r3, [sp, #0]
 23f1e44:	a852      	add	r0, sp, #328	; 0x148
 23f1e46:	ab42      	add	r3, sp, #264	; 0x108
 23f1e48:	e9cd 6405 	strd	r6, r4, [sp, #20]
 23f1e4c:	e9cd 8503 	strd	r8, r5, [sp, #12]
 23f1e50:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 23f1e54:	f7ff fda6 	bl	23f19a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 23f1e58:	4630      	mov	r0, r6
 23f1e5a:	f7ff f983 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 23f1e5e:	4640      	mov	r0, r8
 23f1e60:	f7ff f980 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 23f1e64:	4638      	mov	r0, r7
 23f1e66:	f7ff f97d 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 23f1e6a:	a842      	add	r0, sp, #264	; 0x108
 23f1e6c:	e7b4      	b.n	23f1dd8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0+0x190>
	...

023f1e70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f1e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f1e74:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f1e76:	4604      	mov	r4, r0
 23f1e78:	460d      	mov	r5, r1
 23f1e7a:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK(node->user_data != nullptr);
 23f1e7c:	b90e      	cbnz	r6, 23f1e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f1e7e:	f002 fcad 	bl	23f47dc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f1e82:	f8d1 8014 	ldr.w	r8, [r1, #20]
 23f1e86:	f1b8 0f00 	cmp.w	r8, #0
 23f1e8a:	d0f8      	beq.n	23f1e7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f1e8c:	4b5f      	ldr	r3, [pc, #380]	; (23f200c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
 23f1e8e:	681a      	ldr	r2, [r3, #0]
 23f1e90:	f000 fed0 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f1e94:	4607      	mov	r7, r0
 23f1e96:	b960      	cbnz	r0, 23f1eb2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 23f1e98:	4b5d      	ldr	r3, [pc, #372]	; (23f2010 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
 23f1e9a:	6925      	ldr	r5, [r4, #16]
 23f1e9c:	9300      	str	r3, [sp, #0]
 23f1e9e:	233d      	movs	r3, #61	; 0x3d
  TF_LITE_ENSURE(context, filter != nullptr);
 23f1ea0:	4620      	mov	r0, r4
 23f1ea2:	4a5c      	ldr	r2, [pc, #368]	; (23f2014 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
 23f1ea4:	495c      	ldr	r1, [pc, #368]	; (23f2018 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
 23f1ea6:	47a8      	blx	r5
 23f1ea8:	2501      	movs	r5, #1
}
 23f1eaa:	4628      	mov	r0, r5
 23f1eac:	b02d      	add	sp, #180	; 0xb4
 23f1eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 23f1eb2:	4b5a      	ldr	r3, [pc, #360]	; (23f201c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
 23f1eb4:	4629      	mov	r1, r5
 23f1eb6:	4620      	mov	r0, r4
 23f1eb8:	681a      	ldr	r2, [r3, #0]
 23f1eba:	f000 febb 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f1ebe:	4682      	mov	sl, r0
 23f1ec0:	b920      	cbnz	r0, 23f1ecc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 23f1ec2:	4b57      	ldr	r3, [pc, #348]	; (23f2020 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
 23f1ec4:	6925      	ldr	r5, [r4, #16]
 23f1ec6:	9300      	str	r3, [sp, #0]
 23f1ec8:	233f      	movs	r3, #63	; 0x3f
 23f1eca:	e7e9      	b.n	23f1ea0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f1ecc:	4b55      	ldr	r3, [pc, #340]	; (23f2024 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>)
 23f1ece:	4629      	mov	r1, r5
 23f1ed0:	4620      	mov	r0, r4
 23f1ed2:	681a      	ldr	r2, [r3, #0]
 23f1ed4:	f000 feb1 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f1ed8:	4681      	mov	r9, r0
 23f1eda:	b920      	cbnz	r0, 23f1ee6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
 23f1edc:	4b52      	ldr	r3, [pc, #328]	; (23f2028 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b8>)
 23f1ede:	6925      	ldr	r5, [r4, #16]
 23f1ee0:	9300      	str	r3, [sp, #0]
 23f1ee2:	2341      	movs	r3, #65	; 0x41
 23f1ee4:	e7dc      	b.n	23f1ea0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  RuntimeShape input_shape = GetTensorShape(input);
 23f1ee6:	4639      	mov	r1, r7
 23f1ee8:	a816      	add	r0, sp, #88	; 0x58
 23f1eea:	f7ff f9a6 	bl	23f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 23f1eee:	4649      	mov	r1, r9
 23f1ef0:	a81c      	add	r0, sp, #112	; 0x70
 23f1ef2:	f7ff f9a2 	bl	23f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f1ef6:	2300      	movs	r3, #0
 23f1ef8:	aa1c      	add	r2, sp, #112	; 0x70
 23f1efa:	4619      	mov	r1, r3
 23f1efc:	a816      	add	r0, sp, #88	; 0x58
 23f1efe:	f7ff f98d 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.h = input->dims->data[1];
 23f1f02:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f1f04:	4683      	mov	fp, r0
  input_dims.h = input->dims->data[1];
 23f1f06:	689a      	ldr	r2, [r3, #8]
  input_dims.w = input->dims->data[2];
 23f1f08:	68db      	ldr	r3, [r3, #12]
  input_dims.c = input_shape.Dims(3);
 23f1f0a:	2103      	movs	r1, #3
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 23f1f0c:	900a      	str	r0, [sp, #40]	; 0x28
  input_dims.c = input_shape.Dims(3);
 23f1f0e:	a816      	add	r0, sp, #88	; 0x58
  input_dims.h = input->dims->data[1];
 23f1f10:	920b      	str	r2, [sp, #44]	; 0x2c
  input_dims.w = input->dims->data[2];
 23f1f12:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims.c = input_shape.Dims(3);
 23f1f14:	f7ff f931 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.n = output_shape.Dims(3);
 23f1f18:	2103      	movs	r1, #3
  input_dims.c = input_shape.Dims(3);
 23f1f1a:	900d      	str	r0, [sp, #52]	; 0x34
 23f1f1c:	9009      	str	r0, [sp, #36]	; 0x24
  filter_dims.n = output_shape.Dims(3);
 23f1f1e:	a81c      	add	r0, sp, #112	; 0x70
 23f1f20:	f7ff f92b 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = filter->dims->data[1];
 23f1f24:	f8da 2008 	ldr.w	r2, [sl, #8]
  filter_dims.c = input_dims.c;
 23f1f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
  filter_dims.h = filter->dims->data[1];
 23f1f2a:	6891      	ldr	r1, [r2, #8]
  filter_dims.w = filter->dims->data[2];
 23f1f2c:	68d2      	ldr	r2, [r2, #12]
  output_dims.n = input_dims.n;
 23f1f2e:	e9cd 3b11 	strd	r3, fp, [sp, #68]	; 0x44
  filter_dims.w = filter->dims->data[2];
 23f1f32:	9210      	str	r2, [sp, #64]	; 0x40
  output_dims.h = output->dims->data[1];
 23f1f34:	f8d9 3008 	ldr.w	r3, [r9, #8]
  filter_dims.n = output_shape.Dims(3);
 23f1f38:	900e      	str	r0, [sp, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 23f1f3a:	689a      	ldr	r2, [r3, #8]
  output_dims.w = output->dims->data[2];
 23f1f3c:	68db      	ldr	r3, [r3, #12]
  filter_dims.h = filter->dims->data[1];
 23f1f3e:	910f      	str	r1, [sp, #60]	; 0x3c
  output_dims.c = output_shape.Dims(3);
 23f1f40:	a81c      	add	r0, sp, #112	; 0x70
 23f1f42:	2103      	movs	r1, #3
  output_dims.h = output->dims->data[1];
 23f1f44:	9213      	str	r2, [sp, #76]	; 0x4c
  output_dims.w = output->dims->data[2];
 23f1f46:	9314      	str	r3, [sp, #80]	; 0x50
  output_dims.c = output_shape.Dims(3);
 23f1f48:	f7ff f917 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f1f4c:	4a37      	ldr	r2, [pc, #220]	; (23f202c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>)
  output_dims.c = output_shape.Dims(3);
 23f1f4e:	9015      	str	r0, [sp, #84]	; 0x54
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f1f50:	6812      	ldr	r2, [r2, #0]
 23f1f52:	f8da 3008 	ldr.w	r3, [sl, #8]
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f1f56:	4620      	mov	r0, r4
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 23f1f58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f1f5c:	6859      	ldr	r1, [r3, #4]
 23f1f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f1f60:	0089      	lsls	r1, r1, #2
 23f1f62:	9109      	str	r1, [sp, #36]	; 0x24
 23f1f64:	4798      	blx	r3
  data->reference_op_data.per_channel_output_multiplier =
 23f1f66:	6270      	str	r0, [r6, #36]	; 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f1f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f1f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f1f6c:	4620      	mov	r0, r4
 23f1f6e:	4798      	blx	r3
  data->reference_op_data.per_channel_output_shift =
 23f1f70:	62b0      	str	r0, [r6, #40]	; 0x28
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 23f1f72:	9606      	str	r6, [sp, #24]
 23f1f74:	783b      	ldrb	r3, [r7, #0]
 23f1f76:	4629      	mov	r1, r5
 23f1f78:	9305      	str	r3, [sp, #20]
 23f1f7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f1f7c:	4642      	mov	r2, r8
 23f1f7e:	9304      	str	r3, [sp, #16]
 23f1f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f1f82:	4620      	mov	r0, r4
 23f1f84:	9303      	str	r3, [sp, #12]
 23f1f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f1f88:	9302      	str	r3, [sp, #8]
 23f1f8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f1f8c:	9301      	str	r3, [sp, #4]
 23f1f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f1f90:	9300      	str	r3, [sp, #0]
 23f1f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f1f94:	f000 f9b6 	bl	23f2304 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 23f1f98:	4605      	mov	r5, r0
 23f1f9a:	2800      	cmp	r0, #0
 23f1f9c:	d12a      	bne.n	23f1ff4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
  if (input->type == kTfLiteInt8) {
 23f1f9e:	783b      	ldrb	r3, [r7, #0]
 23f1fa0:	2b09      	cmp	r3, #9
 23f1fa2:	d12e      	bne.n	23f2002 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    conv_params.input_offset = -input->params.zero_point;
 23f1fa4:	693b      	ldr	r3, [r7, #16]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f1fa6:	a90a      	add	r1, sp, #40	; 0x28
    conv_params.input_offset = -input->params.zero_point;
 23f1fa8:	425b      	negs	r3, r3
 23f1faa:	9322      	str	r3, [sp, #136]	; 0x88
    conv_params.output_offset = output->params.zero_point;
 23f1fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f1fb0:	aa0e      	add	r2, sp, #56	; 0x38
    conv_params.output_offset = output->params.zero_point;
 23f1fb2:	9323      	str	r3, [sp, #140]	; 0x8c
    conv_params.stride.h = params.stride_height;
 23f1fb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f1fb8:	a822      	add	r0, sp, #136	; 0x88
    conv_params.stride.h = params.stride_height;
 23f1fba:	9325      	str	r3, [sp, #148]	; 0x94
    conv_params.stride.w = params.stride_width;
 23f1fbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f1fc0:	9324      	str	r3, [sp, #144]	; 0x90
    conv_params.dilation.h = params.dilation_height_factor;
 23f1fc2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f1fc6:	9329      	str	r3, [sp, #164]	; 0xa4
    conv_params.dilation.w = params.dilation_width_factor;
 23f1fc8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f1fcc:	9328      	str	r3, [sp, #160]	; 0xa0
    conv_params.padding.h = data->reference_op_data.padding.height;
 23f1fce:	6873      	ldr	r3, [r6, #4]
 23f1fd0:	9327      	str	r3, [sp, #156]	; 0x9c
    conv_params.padding.w = data->reference_op_data.padding.width;
 23f1fd2:	6833      	ldr	r3, [r6, #0]
 23f1fd4:	9326      	str	r3, [sp, #152]	; 0x98
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 23f1fd6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 23f1fd8:	932a      	str	r3, [sp, #168]	; 0xa8
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 23f1fda:	6b33      	ldr	r3, [r6, #48]	; 0x30
 23f1fdc:	932b      	str	r3, [sp, #172]	; 0xac
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 23f1fde:	ab12      	add	r3, sp, #72	; 0x48
 23f1fe0:	f7fa f802 	bl	23ebfe8 <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
 23f1fe4:	1e01      	subs	r1, r0, #0
 23f1fe6:	dd0c      	ble.n	23f2002 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x192>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f1fe8:	4620      	mov	r0, r4
 23f1fea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f1fec:	f106 0234 	add.w	r2, r6, #52	; 0x34
 23f1ff0:	4798      	blx	r3
 23f1ff2:	4605      	mov	r5, r0
  RuntimeShape output_shape = GetTensorShape(output);
 23f1ff4:	a81c      	add	r0, sp, #112	; 0x70
 23f1ff6:	f7ff f8b5 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 23f1ffa:	a816      	add	r0, sp, #88	; 0x58
 23f1ffc:	f7ff f8b2 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f2000:	e753      	b.n	23f1eaa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
    data->buffer_idx = -1;
 23f2002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f2006:	6373      	str	r3, [r6, #52]	; 0x34
 23f2008:	e7f4      	b.n	23f1ff4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
 23f200a:	bf00      	nop
 23f200c:	023ff0c4 	.word	0x023ff0c4
 23f2010:	023feccd 	.word	0x023feccd
 23f2014:	023fef91 	.word	0x023fef91
 23f2018:	023fecb6 	.word	0x023fecb6
 23f201c:	023ff0cc 	.word	0x023ff0cc
 23f2020:	023fecde 	.word	0x023fecde
 23f2024:	023ff0c8 	.word	0x023ff0c8
 23f2028:	023fecf0 	.word	0x023fecf0
 23f202c:	023ff0d0 	.word	0x023ff0d0

023f2030 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f2030:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 23f2034:	4b36      	ldr	r3, [pc, #216]	; (23f2110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f2036:	460d      	mov	r5, r1
  return GetMutableEvalInput(context, node, index);
 23f2038:	681a      	ldr	r2, [r3, #0]
 23f203a:	4604      	mov	r4, r0
 23f203c:	f7ff f8e0 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 23f2040:	4b34      	ldr	r3, [pc, #208]	; (23f2114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
 23f2042:	4606      	mov	r6, r0
 23f2044:	681a      	ldr	r2, [r3, #0]
 23f2046:	4629      	mov	r1, r5
 23f2048:	4620      	mov	r0, r4
 23f204a:	f7ff f8d9 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f204e:	682b      	ldr	r3, [r5, #0]
 23f2050:	4607      	mov	r7, r0
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 23f2052:	681b      	ldr	r3, [r3, #0]
 23f2054:	2b03      	cmp	r3, #3
 23f2056:	d109      	bne.n	23f206c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
 23f2058:	4b2f      	ldr	r3, [pc, #188]	; (23f2118 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
 23f205a:	4629      	mov	r1, r5
 23f205c:	4620      	mov	r0, r4
 23f205e:	681a      	ldr	r2, [r3, #0]
 23f2060:	f7ff f8ce 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f2064:	4680      	mov	r8, r0
  TFLITE_DCHECK(context != nullptr);
 23f2066:	b924      	cbnz	r4, 23f2072 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42>
 23f2068:	f002 fbb8 	bl	23f47dc <abort>
 23f206c:	f04f 0800 	mov.w	r8, #0
 23f2070:	e7f9      	b.n	23f2066 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f2072:	4a2a      	ldr	r2, [pc, #168]	; (23f211c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
 23f2074:	686b      	ldr	r3, [r5, #4]
 23f2076:	6812      	ldr	r2, [r2, #0]
 23f2078:	4620      	mov	r0, r4
 23f207a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f207e:	6859      	ldr	r1, [r3, #4]
 23f2080:	6d22      	ldr	r2, [r4, #80]	; 0x50
 23f2082:	4790      	blx	r2
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f2084:	6969      	ldr	r1, [r5, #20]
 23f2086:	2900      	cmp	r1, #0
 23f2088:	d0ee      	beq.n	23f2068 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
 23f208a:	692a      	ldr	r2, [r5, #16]
 23f208c:	2a00      	cmp	r2, #0
 23f208e:	d0eb      	beq.n	23f2068 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f2090:	7a35      	ldrb	r5, [r6, #8]
 23f2092:	7a03      	ldrb	r3, [r0, #8]
 23f2094:	429d      	cmp	r5, r3
 23f2096:	d00e      	beq.n	23f20b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 23f2098:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f209c:	4b20      	ldr	r3, [pc, #128]	; (23f2120 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 23f209e:	4620      	mov	r0, r4
 23f20a0:	9301      	str	r3, [sp, #4]
 23f20a2:	4b20      	ldr	r3, [pc, #128]	; (23f2124 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 23f20a4:	6925      	ldr	r5, [r4, #16]
 23f20a6:	9300      	str	r3, [sp, #0]
 23f20a8:	4a1f      	ldr	r2, [pc, #124]	; (23f2128 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf8>)
 23f20aa:	f44f 7386 	mov.w	r3, #268	; 0x10c
 23f20ae:	491f      	ldr	r1, [pc, #124]	; (23f212c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc>)
 23f20b0:	47a8      	blx	r5
                                     bias, output, nullptr);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 23f20b2:	2501      	movs	r5, #1
 23f20b4:	e01e      	b.n	23f20f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 23f20b6:	7a3b      	ldrb	r3, [r7, #8]
 23f20b8:	42ab      	cmp	r3, r5
 23f20ba:	d004      	beq.n	23f20c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
 23f20bc:	4620      	mov	r0, r4
 23f20be:	6923      	ldr	r3, [r4, #16]
 23f20c0:	491b      	ldr	r1, [pc, #108]	; (23f2130 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 23f20c2:	4798      	blx	r3
 23f20c4:	e7f5      	b.n	23f20b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
  switch (input->type) {  // Already know in/out types are same.
 23f20c6:	2d01      	cmp	r5, #1
 23f20c8:	d00b      	beq.n	23f20e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
 23f20ca:	2d09      	cmp	r5, #9
 23f20cc:	d016      	beq.n	23f20fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f20ce:	4628      	mov	r0, r5
 23f20d0:	6927      	ldr	r7, [r4, #16]
 23f20d2:	f7f8 fa4b 	bl	23ea56c <TfLiteTypeGetName>
 23f20d6:	7a33      	ldrb	r3, [r6, #8]
 23f20d8:	4602      	mov	r2, r0
 23f20da:	4916      	ldr	r1, [pc, #88]	; (23f2134 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 23f20dc:	4620      	mov	r0, r4
 23f20de:	47b8      	blx	r7
 23f20e0:	e7e7      	b.n	23f20b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x82>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f20e2:	4628      	mov	r0, r5
 23f20e4:	6927      	ldr	r7, [r4, #16]
 23f20e6:	f7f8 fa41 	bl	23ea56c <TfLiteTypeGetName>
 23f20ea:	7a33      	ldrb	r3, [r6, #8]
 23f20ec:	4602      	mov	r2, r0
 23f20ee:	4911      	ldr	r1, [pc, #68]	; (23f2134 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>)
 23f20f0:	4620      	mov	r0, r4
 23f20f2:	47b8      	blx	r7
  }
  return kTfLiteOk;
}
 23f20f4:	4628      	mov	r0, r5
 23f20f6:	b004      	add	sp, #16
 23f20f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 23f20fc:	e9cd 8001 	strd	r8, r0, [sp, #4]
 23f2100:	4633      	mov	r3, r6
 23f2102:	4620      	mov	r0, r4
 23f2104:	9700      	str	r7, [sp, #0]
 23f2106:	f7ff fd9f 	bl	23f1c48 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_.constprop.0>
 23f210a:	4605      	mov	r5, r0
                                     bias, output, nullptr);
 23f210c:	e7f2      	b.n	23f20f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
 23f210e:	bf00      	nop
 23f2110:	023ff0c4 	.word	0x023ff0c4
 23f2114:	023ff0cc 	.word	0x023ff0cc
 23f2118:	023ff0c0 	.word	0x023ff0c0
 23f211c:	023ff0c8 	.word	0x023ff0c8
 23f2120:	023fed1c 	.word	0x023fed1c
 23f2124:	023fed29 	.word	0x023fed29
 23f2128:	023fef91 	.word	0x023fef91
 23f212c:	023feb67 	.word	0x023feb67
 23f2130:	023fed35 	.word	0x023fed35
 23f2134:	023fed66 	.word	0x023fed66

023f2138 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 23f2138:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f213a:	4604      	mov	r4, r0
TfLiteRegistration Register_CONV_2D() {
 23f213c:	4606      	mov	r6, r0
          /*version=*/0};
 23f213e:	4d04      	ldr	r5, [pc, #16]	; (23f2150 <_ZN6tflite16Register_CONV_2DEv+0x18>)
 23f2140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f2142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f2144:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f2148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f214c:	4630      	mov	r0, r6
 23f214e:	bd70      	pop	{r4, r5, r6, pc}
 23f2150:	023fb4b0 	.word	0x023fb4b0

023f2154 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f2154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2158:	460e      	mov	r6, r1
  TFLITE_DCHECK(context != nullptr);
 23f215a:	4604      	mov	r4, r0
 23f215c:	b093      	sub	sp, #76	; 0x4c
 23f215e:	b908      	cbnz	r0, 23f2164 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10>
 23f2160:	f002 fb3c 	bl	23f47dc <abort>
  TFLITE_DCHECK(node != nullptr);
 23f2164:	2900      	cmp	r1, #0
 23f2166:	d0fb      	beq.n	23f2160 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f2168:	680a      	ldr	r2, [r1, #0]
 23f216a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f216c:	6851      	ldr	r1, [r2, #4]
 23f216e:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f2170:	6872      	ldr	r2, [r6, #4]
 23f2172:	6d23      	ldr	r3, [r4, #80]	; 0x50
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f2174:	4605      	mov	r5, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f2176:	6851      	ldr	r1, [r2, #4]
 23f2178:	4620      	mov	r0, r4
 23f217a:	4798      	blx	r3
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f217c:	6933      	ldr	r3, [r6, #16]
 23f217e:	4607      	mov	r7, r0
 23f2180:	2b00      	cmp	r3, #0
 23f2182:	d0ed      	beq.n	23f2160 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);

  switch (input->type) {
 23f2184:	7a2e      	ldrb	r6, [r5, #8]
 23f2186:	1e72      	subs	r2, r6, #1
 23f2188:	2a08      	cmp	r2, #8
 23f218a:	d878      	bhi.n	23f227e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
 23f218c:	e8df f002 	tbb	[pc, r2]
 23f2190:	77697705 	.word	0x77697705
 23f2194:	77747777 	.word	0x77747777
 23f2198:	12          	.byte	0x12
 23f2199:	00          	.byte	0x00
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f219a:	2001      	movs	r0, #1
 23f219c:	6927      	ldr	r7, [r4, #16]
 23f219e:	f7f8 f9e5 	bl	23ea56c <TfLiteTypeGetName>
 23f21a2:	7a2b      	ldrb	r3, [r5, #8]
 23f21a4:	4602      	mov	r2, r0
 23f21a6:	493b      	ldr	r1, [pc, #236]	; (23f2294 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f21a8:	4620      	mov	r0, r4
 23f21aa:	47b8      	blx	r7
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
}
 23f21ac:	4630      	mov	r0, r6
 23f21ae:	b013      	add	sp, #76	; 0x4c
 23f21b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (output->type == kTfLiteInt16) {
 23f21b4:	7a02      	ldrb	r2, [r0, #8]
 23f21b6:	2a07      	cmp	r2, #7
 23f21b8:	d051      	beq.n	23f225e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
  const SoftmaxParams data =
 23f21ba:	e9d3 8202 	ldrd	r8, r2, [r3, #8]

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 23f21be:	2400      	movs	r4, #0
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f21c0:	4629      	mov	r1, r5
 23f21c2:	a806      	add	r0, sp, #24
  const SoftmaxParams data =
 23f21c4:	f8d3 a018 	ldr.w	sl, [r3, #24]
 23f21c8:	9205      	str	r2, [sp, #20]
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f21ca:	f000 fb83 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 23f21ce:	4639      	mov	r1, r7
 23f21d0:	a80c      	add	r0, sp, #48	; 0x30
 23f21d2:	f000 fb7f 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 23f21d6:	f8dd b018 	ldr.w	fp, [sp, #24]
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 23f21da:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
  for (int i = 0; i < dims_count; ++i) {
 23f21de:	45a3      	cmp	fp, r4
 23f21e0:	dd0e      	ble.n	23f2200 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    if (i != skip_dim) {
 23f21e2:	42a6      	cmp	r6, r4
 23f21e4:	d00a      	beq.n	23f21fc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 23f21e6:	4621      	mov	r1, r4
 23f21e8:	a806      	add	r0, sp, #24
 23f21ea:	f7fe ffc6 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f21ee:	4621      	mov	r1, r4
 23f21f0:	4681      	mov	r9, r0
 23f21f2:	a80c      	add	r0, sp, #48	; 0x30
 23f21f4:	f7fe ffc1 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f21f8:	4581      	cmp	r9, r0
 23f21fa:	d1b1      	bne.n	23f2160 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  for (int i = 0; i < dims_count; ++i) {
 23f21fc:	3401      	adds	r4, #1
 23f21fe:	e7ee      	b.n	23f21de <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 23f2200:	2e00      	cmp	r6, #0
 23f2202:	dbad      	blt.n	23f2160 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
  for (int i = 0; i < dims_count; ++i) {
 23f2204:	2300      	movs	r3, #0
  int flat_size = 1;
 23f2206:	2401      	movs	r4, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f2208:	f1bb 0f05 	cmp.w	fp, #5
 23f220c:	bfcc      	ite	gt
 23f220e:	9907      	ldrgt	r1, [sp, #28]
 23f2210:	a907      	addle	r1, sp, #28
  for (int i = 0; i < dims_count; ++i) {
 23f2212:	459b      	cmp	fp, r3
 23f2214:	d007      	beq.n	23f2226 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd2>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f2216:	429e      	cmp	r6, r3
 23f2218:	bf0c      	ite	eq
 23f221a:	2201      	moveq	r2, #1
 23f221c:	f851 2023 	ldrne.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 23f2220:	3301      	adds	r3, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f2222:	4354      	muls	r4, r2
  for (int i = 0; i < dims_count; ++i) {
 23f2224:	e7f5      	b.n	23f2212 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f2226:	4631      	mov	r1, r6
 23f2228:	a806      	add	r0, sp, #24
 23f222a:	f7fe ffa6 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f222e:	4631      	mov	r1, r6
 23f2230:	4683      	mov	fp, r0
 23f2232:	a80c      	add	r0, sp, #48	; 0x30
 23f2234:	f7fe ffa1 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
 23f2238:	4583      	cmp	fp, r0
 23f223a:	d191      	bne.n	23f2160 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 23f223c:	683b      	ldr	r3, [r7, #0]
 23f223e:	465a      	mov	r2, fp
 23f2240:	e9cd a301 	strd	sl, r3, [sp, #4]
 23f2244:	9b05      	ldr	r3, [sp, #20]
 23f2246:	4621      	mov	r1, r4
 23f2248:	9300      	str	r3, [sp, #0]
 23f224a:	6828      	ldr	r0, [r5, #0]
 23f224c:	4643      	mov	r3, r8
 23f224e:	f7f8 ff6b 	bl	23eb128 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 23f2252:	a80c      	add	r0, sp, #48	; 0x30
 23f2254:	f7fe ff86 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 23f2258:	a806      	add	r0, sp, #24
 23f225a:	f7fe ff83 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
 23f225e:	2600      	movs	r6, #0
 23f2260:	e7a4      	b.n	23f21ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f2262:	2003      	movs	r0, #3
 23f2264:	6926      	ldr	r6, [r4, #16]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f2266:	f7f8 f981 	bl	23ea56c <TfLiteTypeGetName>
 23f226a:	7a2b      	ldrb	r3, [r5, #8]
 23f226c:	4602      	mov	r2, r0
 23f226e:	4909      	ldr	r1, [pc, #36]	; (23f2294 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f2270:	4620      	mov	r0, r4
 23f2272:	47b0      	blx	r6
      return kTfLiteError;
 23f2274:	2601      	movs	r6, #1
 23f2276:	e799      	b.n	23f21ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f2278:	2007      	movs	r0, #7
 23f227a:	6926      	ldr	r6, [r4, #16]
 23f227c:	e7f3      	b.n	23f2266 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x112>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f227e:	4630      	mov	r0, r6
 23f2280:	6927      	ldr	r7, [r4, #16]
 23f2282:	f7f8 f973 	bl	23ea56c <TfLiteTypeGetName>
 23f2286:	7a2b      	ldrb	r3, [r5, #8]
 23f2288:	4602      	mov	r2, r0
 23f228a:	4902      	ldr	r1, [pc, #8]	; (23f2294 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>)
 23f228c:	4620      	mov	r0, r4
 23f228e:	47b8      	blx	r7
 23f2290:	e7f0      	b.n	23f2274 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x120>
 23f2292:	bf00      	nop
 23f2294:	023fed66 	.word	0x023fed66

023f2298 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 23f2298:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f229a:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
 23f229c:	4606      	mov	r6, r0
          /*version=*/0};
 23f229e:	4d04      	ldr	r5, [pc, #16]	; (23f22b0 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
 23f22a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f22a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f22a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f22a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f22ac:	4630      	mov	r0, r6
 23f22ae:	bd70      	pop	{r4, r5, r6, pc}
 23f22b0:	023fb4d0 	.word	0x023fb4d0

023f22b4 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
}

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 23f22b4:	b570      	push	{r4, r5, r6, lr}
 23f22b6:	4615      	mov	r5, r2
 23f22b8:	4604      	mov	r4, r0
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 23f22ba:	6913      	ldr	r3, [r2, #16]
                               const OpDataConv& data) {
 23f22bc:	460e      	mov	r6, r1
  op_params.input_offset = -data.input_zero_point;
 23f22be:	425b      	negs	r3, r3
 23f22c0:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
 23f22c2:	6953      	ldr	r3, [r2, #20]
 23f22c4:	425b      	negs	r3, r3
 23f22c6:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
 23f22c8:	6993      	ldr	r3, [r2, #24]
 23f22ca:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
 23f22cc:	69d3      	ldr	r3, [r2, #28]
 23f22ce:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
 23f22d0:	6a13      	ldr	r3, [r2, #32]
 23f22d2:	425b      	negs	r3, r3
 23f22d4:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 23f22d6:	7808      	ldrb	r0, [r1, #0]
 23f22d8:	f000 fb20 	bl	23f291c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  op_params.padding_values.height = data.padding.height;
 23f22dc:	686b      	ldr	r3, [r5, #4]
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 23f22de:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
 23f22e0:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
 23f22e2:	682b      	ldr	r3, [r5, #0]
  op_params.dilation_height_factor = params.dilation_height_factor;
  op_params.dilation_width_factor = params.dilation_width_factor;
  op_params.quantized_activation_min = data.output_activation_min;
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
 23f22e4:	4620      	mov	r0, r4
  op_params.padding_values.width = data.padding.width;
 23f22e6:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
 23f22e8:	68b3      	ldr	r3, [r6, #8]
 23f22ea:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
 23f22ec:	6873      	ldr	r3, [r6, #4]
 23f22ee:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 23f22f0:	6973      	ldr	r3, [r6, #20]
 23f22f2:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 23f22f4:	6933      	ldr	r3, [r6, #16]
 23f22f6:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 23f22f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23f22fa:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 23f22fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23f22fe:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 23f2300:	bd70      	pop	{r4, r5, r6, pc}
	...

023f2304 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 23f2304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2308:	4699      	mov	r9, r3
  bool has_bias = node->inputs->size == 3;
 23f230a:	680b      	ldr	r3, [r1, #0]
                                 OpDataConv* data) {
 23f230c:	b08f      	sub	sp, #60	; 0x3c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f230e:	681b      	ldr	r3, [r3, #0]
                                 OpDataConv* data) {
 23f2310:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f2312:	3b02      	subs	r3, #2
 23f2314:	2b01      	cmp	r3, #1
                                 OpDataConv* data) {
 23f2316:	4688      	mov	r8, r1
 23f2318:	4617      	mov	r7, r2
 23f231a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 23f231c:	d90b      	bls.n	23f2336 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x32>
 23f231e:	4b5d      	ldr	r3, [pc, #372]	; (23f2494 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x190>)
 23f2320:	4a5d      	ldr	r2, [pc, #372]	; (23f2498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f2322:	9300      	str	r3, [sp, #0]
 23f2324:	6904      	ldr	r4, [r0, #16]
 23f2326:	2356      	movs	r3, #86	; 0x56
 23f2328:	495c      	ldr	r1, [pc, #368]	; (23f249c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
 23f232a:	47a0      	blx	r4
 23f232c:	2401      	movs	r4, #1
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
 23f232e:	4620      	mov	r0, r4
 23f2330:	b00f      	add	sp, #60	; 0x3c
 23f2332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 23f2336:	684b      	ldr	r3, [r1, #4]
 23f2338:	681c      	ldr	r4, [r3, #0]
 23f233a:	2c01      	cmp	r4, #1
 23f233c:	d00c      	beq.n	23f2358 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
 23f233e:	2601      	movs	r6, #1
 23f2340:	4b57      	ldr	r3, [pc, #348]	; (23f24a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x19c>)
 23f2342:	e9cd 4602 	strd	r4, r6, [sp, #8]
 23f2346:	9301      	str	r3, [sp, #4]
 23f2348:	4b56      	ldr	r3, [pc, #344]	; (23f24a4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>)
 23f234a:	4a53      	ldr	r2, [pc, #332]	; (23f2498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f234c:	9300      	str	r3, [sp, #0]
 23f234e:	6904      	ldr	r4, [r0, #16]
 23f2350:	2357      	movs	r3, #87	; 0x57
 23f2352:	4955      	ldr	r1, [pc, #340]	; (23f24a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a4>)
 23f2354:	47a0      	blx	r4
 23f2356:	e7e9      	b.n	23f232c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x28>
      params.stride_height, params.stride_width, params.dilation_height_factor,
 23f2358:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
 23f235c:	930a      	str	r3, [sp, #40]	; 0x28
 23f235e:	6953      	ldr	r3, [r2, #20]
  auto padding = params.padding;
 23f2360:	f892 b000 	ldrb.w	fp, [r2]
      params.stride_height, params.stride_width, params.dilation_height_factor,
 23f2364:	930b      	str	r3, [sp, #44]	; 0x2c
      params.dilation_width_factor, height, width, filter_height, filter_width,
 23f2366:	6913      	ldr	r3, [r2, #16]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f2368:	4649      	mov	r1, r9
 23f236a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23f236c:	930c      	str	r3, [sp, #48]	; 0x30
 23f236e:	9300      	str	r3, [sp, #0]
 23f2370:	4658      	mov	r0, fp
 23f2372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f2374:	f7fe ff91 	bl	23f129a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f2378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f237a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f237c:	9918      	ldr	r1, [sp, #96]	; 0x60
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f237e:	900d      	str	r0, [sp, #52]	; 0x34
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f2380:	9300      	str	r3, [sp, #0]
 23f2382:	4658      	mov	r0, fp
 23f2384:	4653      	mov	r3, sl
 23f2386:	f7fe ff88 	bl	23f129a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f238a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23f238c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f238e:	3b01      	subs	r3, #1
 23f2390:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f2392:	3801      	subs	r0, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f2394:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f2396:	fb0a 3a00 	mla	sl, sl, r0, r3
  int total_padding =
 23f239a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f239c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int total_padding =
 23f239e:	ebaa 0a03 	sub.w	sl, sl, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f23a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  total_padding = total_padding > 0 ? total_padding : 0;
 23f23a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f23a8:	3b01      	subs	r3, #1
 23f23aa:	4353      	muls	r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f23ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 23f23ae:	3301      	adds	r3, #1
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f23b0:	1e50      	subs	r0, r2, #1
 23f23b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f23b4:	4641      	mov	r1, r8
 23f23b6:	fb02 3300 	mla	r3, r2, r0, r3
  int total_padding =
 23f23ba:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 23f23be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 23f23c2:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 23f23c4:	f003 0301 	and.w	r3, r3, #1
      padding, &out_height, &out_width);
 23f23c8:	6032      	str	r2, [r6, #0]
 23f23ca:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
 23f23cc:	ea4f 026a 	mov.w	r2, sl, asr #1
  *offset = total_padding % 2;
 23f23d0:	f00a 0301 	and.w	r3, sl, #1
 23f23d4:	6072      	str	r2, [r6, #4]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f23d6:	4628      	mov	r0, r5
 23f23d8:	2200      	movs	r2, #0
      padding, &out_height, &out_width);
 23f23da:	60f3      	str	r3, [r6, #12]
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 23f23dc:	f000 fc2a 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f23e0:	4682      	mov	sl, r0
 23f23e2:	b940      	cbnz	r0, 23f23f6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xf2>
 23f23e4:	4b31      	ldr	r3, [pc, #196]	; (23f24ac <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>)
 23f23e6:	692e      	ldr	r6, [r5, #16]
 23f23e8:	9300      	str	r3, [sp, #0]
 23f23ea:	2361      	movs	r3, #97	; 0x61
  TF_LITE_ENSURE(context, filter != nullptr);
 23f23ec:	4628      	mov	r0, r5
 23f23ee:	4a2a      	ldr	r2, [pc, #168]	; (23f2498 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>)
 23f23f0:	492a      	ldr	r1, [pc, #168]	; (23f249c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x198>)
 23f23f2:	47b0      	blx	r6
 23f23f4:	e79b      	b.n	23f232e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 23f23f6:	4622      	mov	r2, r4
 23f23f8:	4641      	mov	r1, r8
 23f23fa:	4628      	mov	r0, r5
 23f23fc:	f000 fc1a 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
 23f2400:	4681      	mov	r9, r0
 23f2402:	b920      	cbnz	r0, 23f240e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x10a>
 23f2404:	4b2a      	ldr	r3, [pc, #168]	; (23f24b0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ac>)
 23f2406:	692e      	ldr	r6, [r5, #16]
 23f2408:	9300      	str	r3, [sp, #0]
 23f240a:	2363      	movs	r3, #99	; 0x63
 23f240c:	e7ee      	b.n	23f23ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 23f240e:	4641      	mov	r1, r8
 23f2410:	2202      	movs	r2, #2
 23f2412:	4628      	mov	r0, r5
 23f2414:	f000 fc20 	bl	23f2c58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f2418:	4641      	mov	r1, r8
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 23f241a:	900a      	str	r0, [sp, #40]	; 0x28
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 23f241c:	2200      	movs	r2, #0
 23f241e:	4628      	mov	r0, r5
 23f2420:	f000 fc0b 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f2424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f2426:	4680      	mov	r8, r0
 23f2428:	b920      	cbnz	r0, 23f2434 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x130>
 23f242a:	4b22      	ldr	r3, [pc, #136]	; (23f24b4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b0>)
 23f242c:	692e      	ldr	r6, [r5, #16]
 23f242e:	9300      	str	r3, [sp, #0]
 23f2430:	2367      	movs	r3, #103	; 0x67
 23f2432:	e7db      	b.n	23f23ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe8>
  if (data_type != kTfLiteFloat32) {
 23f2434:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 23f2438:	2a01      	cmp	r2, #1
 23f243a:	d10a      	bne.n	23f2452 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x14e>
  data->input_zero_point = input->params.zero_point;
 23f243c:	f8da 3010 	ldr.w	r3, [sl, #16]
  return kTfLiteOk;
 23f2440:	2400      	movs	r4, #0
  data->input_zero_point = input->params.zero_point;
 23f2442:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
 23f2444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23f2448:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
 23f244a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f244e:	61b3      	str	r3, [r6, #24]
  return kTfLiteOk;
 23f2450:	e76d      	b.n	23f232e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 23f2452:	f8d9 2008 	ldr.w	r2, [r9, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 23f2456:	370c      	adds	r7, #12
 23f2458:	6852      	ldr	r2, [r2, #4]
 23f245a:	4651      	mov	r1, sl
 23f245c:	9208      	str	r2, [sp, #32]
 23f245e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 23f2460:	9207      	str	r2, [sp, #28]
 23f2462:	6a72      	ldr	r2, [r6, #36]	; 0x24
 23f2464:	e9cd 0700 	strd	r0, r7, [sp]
 23f2468:	9206      	str	r2, [sp, #24]
 23f246a:	f106 0230 	add.w	r2, r6, #48	; 0x30
 23f246e:	9205      	str	r2, [sp, #20]
 23f2470:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 23f2474:	9204      	str	r2, [sp, #16]
 23f2476:	f106 0220 	add.w	r2, r6, #32
 23f247a:	9203      	str	r2, [sp, #12]
 23f247c:	f106 021c 	add.w	r2, r6, #28
 23f2480:	9202      	str	r2, [sp, #8]
 23f2482:	4628      	mov	r0, r5
 23f2484:	464a      	mov	r2, r9
 23f2486:	f000 fcd7 	bl	23f2e38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 23f248a:	4604      	mov	r4, r0
 23f248c:	2800      	cmp	r0, #0
 23f248e:	d0d5      	beq.n	23f243c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x138>
 23f2490:	e74d      	b.n	23f232e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
 23f2492:	bf00      	nop
 23f2494:	023ff088 	.word	0x023ff088
 23f2498:	023ff009 	.word	0x023ff009
 23f249c:	023fecb6 	.word	0x023fecb6
 23f24a0:	023ff243 	.word	0x023ff243
 23f24a4:	023ff0ac 	.word	0x023ff0ac
 23f24a8:	023feb67 	.word	0x023feb67
 23f24ac:	023feccd 	.word	0x023feccd
 23f24b0:	023fecde 	.word	0x023fecde
 23f24b4:	023fecf0 	.word	0x023fecf0

023f24b8 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f24b8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f24ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f24bc:	b90b      	cbnz	r3, 23f24c2 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0xa>
 23f24be:	f002 f98d 	bl	23f47dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f24c2:	2124      	movs	r1, #36	; 0x24
}
 23f24c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f24c8:	4718      	bx	r3
	...

023f24cc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
                             OpData* data) {
 23f24cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f24d0:	ed2d 8b02 	vpush	{d8}
 23f24d4:	ee08 3a90 	vmov	s17, r3
      params->stride_height, params->stride_width,
 23f24d8:	e9d1 8901 	ldrd	r8, r9, [r1, #4]
  return t->dims->data[dim];
 23f24dc:	6893      	ldr	r3, [r2, #8]
                             OpData* data) {
 23f24de:	4616      	mov	r6, r2
 23f24e0:	68df      	ldr	r7, [r3, #12]
 23f24e2:	689a      	ldr	r2, [r3, #8]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 23f24e4:	690b      	ldr	r3, [r1, #16]
                             OpData* data) {
 23f24e6:	b087      	sub	sp, #28
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 23f24e8:	9303      	str	r3, [sp, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f24ea:	2301      	movs	r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
 23f24ec:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 23f24f0:	f891 a000 	ldrb.w	sl, [r1]
                             OpData* data) {
 23f24f4:	460d      	mov	r5, r1
 23f24f6:	9204      	str	r2, [sp, #16]
 23f24f8:	4639      	mov	r1, r7
 23f24fa:	465a      	mov	r2, fp
 23f24fc:	9300      	str	r3, [sp, #0]
 23f24fe:	ee08 0a10 	vmov	s16, r0
 23f2502:	4643      	mov	r3, r8
 23f2504:	4650      	mov	r0, sl
 23f2506:	f7fe fec8 	bl	23f129a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f250a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 23f250e:	2301      	movs	r3, #1
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 23f2510:	9005      	str	r0, [sp, #20]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 23f2512:	9300      	str	r3, [sp, #0]
 23f2514:	4650      	mov	r0, sl
 23f2516:	464b      	mov	r3, r9
 23f2518:	f7fe febf 	bl	23f129a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f251c:	9b03      	ldr	r3, [sp, #12]
 23f251e:	3801      	subs	r0, #1
 23f2520:	fb09 3900 	mla	r9, r9, r0, r3
  int total_padding =
 23f2524:	9b04      	ldr	r3, [sp, #16]
 23f2526:	9c12      	ldr	r4, [sp, #72]	; 0x48
 23f2528:	eba9 0903 	sub.w	r9, r9, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f252c:	9b05      	ldr	r3, [sp, #20]
  total_padding = total_padding > 0 ? total_padding : 0;
 23f252e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
      ((out_size - 1) * stride + effective_filter_size - in_size);
 23f2532:	3b01      	subs	r3, #1
 23f2534:	fb08 b303 	mla	r3, r8, r3, fp
  int total_padding =
 23f2538:	1bdb      	subs	r3, r3, r7
  total_padding = total_padding > 0 ? total_padding : 0;
 23f253a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 23f253e:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 23f2540:	f003 0301 	and.w	r3, r3, #1
      params->filter_width, params->padding, &out_height, &out_width);
 23f2544:	6022      	str	r2, [r4, #0]
 23f2546:	60a3      	str	r3, [r4, #8]
  return total_padding / 2;
 23f2548:	ea4f 0269 	mov.w	r2, r9, asr #1
  *offset = total_padding % 2;
 23f254c:	f009 0301 	and.w	r3, r9, #1
 23f2550:	6062      	str	r2, [r4, #4]
 23f2552:	60e3      	str	r3, [r4, #12]
  if (input->type == kTfLiteFloat32) {
 23f2554:	7833      	ldrb	r3, [r6, #0]
 23f2556:	7d29      	ldrb	r1, [r5, #20]
 23f2558:	2b01      	cmp	r3, #1
 23f255a:	d11e      	bne.n	23f259a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xce>
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 23f255c:	2901      	cmp	r1, #1
 23f255e:	d103      	bne.n	23f2568 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x9c>
    *activation_min = 0;
 23f2560:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 23f2562:	61e3      	str	r3, [r4, #28]
    *activation_max = std::numeric_limits<T>::max();
 23f2564:	4b16      	ldr	r3, [pc, #88]	; (23f25c0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xf4>)
 23f2566:	e004      	b.n	23f2572 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
  } else if (activation == kTfLiteActRelu6) {
 23f2568:	2903      	cmp	r1, #3
 23f256a:	d10c      	bne.n	23f2586 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xba>
    *activation_min = 0;
 23f256c:	2300      	movs	r3, #0
 23f256e:	61e3      	str	r3, [r4, #28]
    *activation_max = 6;
 23f2570:	4b14      	ldr	r3, [pc, #80]	; (23f25c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xf8>)
 23f2572:	6223      	str	r3, [r4, #32]
  data->buffer_idx = -1;
 23f2574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  return kTfLiteOk;
 23f2578:	2000      	movs	r0, #0
  data->buffer_idx = -1;
 23f257a:	6123      	str	r3, [r4, #16]
}
 23f257c:	b007      	add	sp, #28
 23f257e:	ecbd 8b02 	vpop	{d8}
 23f2582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (activation == kTfLiteActReluN1To1) {
 23f2586:	2902      	cmp	r1, #2
 23f2588:	d104      	bne.n	23f2594 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc8>
    *activation_min = -1;
 23f258a:	4b0f      	ldr	r3, [pc, #60]	; (23f25c8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xfc>)
 23f258c:	61e3      	str	r3, [r4, #28]
    *activation_max = 1;
 23f258e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 23f2592:	e7ee      	b.n	23f2572 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa6>
    *activation_min = std::numeric_limits<T>::lowest();
 23f2594:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 23f2598:	e7e3      	b.n	23f2562 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x96>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f259a:	f104 0318 	add.w	r3, r4, #24
 23f259e:	9300      	str	r3, [sp, #0]
 23f25a0:	ee18 2a90 	vmov	r2, s17
 23f25a4:	ee18 0a10 	vmov	r0, s16
 23f25a8:	f104 0314 	add.w	r3, r4, #20
 23f25ac:	f000 fbe2 	bl	23f2d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 23f25b0:	2800      	cmp	r0, #0
 23f25b2:	d1e3      	bne.n	23f257c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xb0>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 23f25b4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 23f25b8:	429a      	cmp	r2, r3
 23f25ba:	dddb      	ble.n	23f2574 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xa8>
 23f25bc:	f002 f90e 	bl	23f47dc <abort>
 23f25c0:	7f7fffff 	.word	0x7f7fffff
 23f25c4:	40c00000 	.word	0x40c00000
 23f25c8:	bf800000 	.word	0xbf800000

023f25cc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f25cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f25d0:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f25d4:	4604      	mov	r4, r0
 23f25d6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
 23f25d8:	f1b8 0f00 	cmp.w	r8, #0
 23f25dc:	d101      	bne.n	23f25e2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 23f25de:	f002 f8fd 	bl	23f47dc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f25e2:	694f      	ldr	r7, [r1, #20]
 23f25e4:	2f00      	cmp	r7, #0
 23f25e6:	d0fa      	beq.n	23f25de <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x12>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f25e8:	2200      	movs	r2, #0
 23f25ea:	f000 fb23 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f25ee:	4606      	mov	r6, r0
 23f25f0:	b960      	cbnz	r0, 23f260c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f25f2:	4b11      	ldr	r3, [pc, #68]	; (23f2638 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
 23f25f4:	6925      	ldr	r5, [r4, #16]
 23f25f6:	9300      	str	r3, [sp, #0]
 23f25f8:	f44f 738e 	mov.w	r3, #284	; 0x11c
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 23f25fc:	4620      	mov	r0, r4
 23f25fe:	4a0f      	ldr	r2, [pc, #60]	; (23f263c <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
 23f2600:	490f      	ldr	r1, [pc, #60]	; (23f2640 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
 23f2602:	47a8      	blx	r5
 23f2604:	2001      	movs	r0, #1

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));

  return kTfLiteOk;
}
 23f2606:	b002      	add	sp, #8
 23f2608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f260c:	2200      	movs	r2, #0
 23f260e:	4629      	mov	r1, r5
 23f2610:	4620      	mov	r0, r4
 23f2612:	f000 fb12 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f2616:	4603      	mov	r3, r0
 23f2618:	b928      	cbnz	r0, 23f2626 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x5a>
 23f261a:	4b0a      	ldr	r3, [pc, #40]	; (23f2644 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 23f261c:	6925      	ldr	r5, [r4, #16]
 23f261e:	9300      	str	r3, [sp, #0]
 23f2620:	f44f 738f 	mov.w	r3, #286	; 0x11e
 23f2624:	e7ea      	b.n	23f25fc <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f2626:	4632      	mov	r2, r6
 23f2628:	4639      	mov	r1, r7
 23f262a:	4620      	mov	r0, r4
 23f262c:	f8cd 8000 	str.w	r8, [sp]
 23f2630:	f7ff ff4c 	bl	23f24cc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 23f2634:	e7e7      	b.n	23f2606 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 23f2636:	bf00      	nop
 23f2638:	023feccd 	.word	0x023feccd
 23f263c:	023ff0d4 	.word	0x023ff0d4
 23f2640:	023fecb6 	.word	0x023fecb6
 23f2644:	023fecf0 	.word	0x023fecf0

023f2648 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 23f2648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f264c:	690f      	ldr	r7, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 23f264e:	4604      	mov	r4, r0
 23f2650:	460d      	mov	r5, r1
 23f2652:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
 23f2654:	b90f      	cbnz	r7, 23f265a <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f2656:	f002 f8c1 	bl	23f47dc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f265a:	f8d1 9014 	ldr.w	r9, [r1, #20]
 23f265e:	f1b9 0f00 	cmp.w	r9, #0
 23f2662:	d0f8      	beq.n	23f2656 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f2664:	2200      	movs	r2, #0
 23f2666:	f000 fae5 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f266a:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 23f266c:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f266e:	2200      	movs	r2, #0
 23f2670:	4620      	mov	r0, r4
 23f2672:	f000 fae2 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f2676:	4632      	mov	r2, r6
 23f2678:	4603      	mov	r3, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 23f267a:	4680      	mov	r8, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 23f267c:	4649      	mov	r1, r9
 23f267e:	4620      	mov	r0, r4
 23f2680:	9700      	str	r7, [sp, #0]
 23f2682:	f7ff ff23 	bl	23f24cc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 23f2686:	4605      	mov	r5, r0
 23f2688:	bb70      	cbnz	r0, 23f26e8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

  if (input->type == kTfLiteInt8) {
 23f268a:	7833      	ldrb	r3, [r6, #0]
 23f268c:	2b09      	cmp	r3, #9
 23f268e:	d12b      	bne.n	23f26e8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>
    RuntimeShape input_shape = GetTensorShape(input);
 23f2690:	4631      	mov	r1, r6
 23f2692:	a802      	add	r0, sp, #8
 23f2694:	f7fe fdd1 	bl	23f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 23f2698:	9b02      	ldr	r3, [sp, #8]
 23f269a:	2b04      	cmp	r3, #4
 23f269c:	d1db      	bne.n	23f2656 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

    RuntimeShape output_shape = GetTensorShape(output);
 23f269e:	4641      	mov	r1, r8
 23f26a0:	a808      	add	r0, sp, #32
 23f26a2:	f7fe fdca 	bl	23f123a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 23f26a6:	9b08      	ldr	r3, [sp, #32]
 23f26a8:	2b04      	cmp	r3, #4
 23f26aa:	d1d4      	bne.n	23f2656 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xe>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f26ac:	2303      	movs	r3, #3
 23f26ae:	aa08      	add	r2, sp, #32
 23f26b0:	4619      	mov	r1, r3
 23f26b2:	a802      	add	r0, sp, #8
 23f26b4:	f7fe fdb2 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f26b8:	4606      	mov	r6, r0
    const int output_width = output_shape.Dims(2);
 23f26ba:	2102      	movs	r1, #2
 23f26bc:	a808      	add	r0, sp, #32
 23f26be:	f7fe fd5c 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 23f26c2:	4631      	mov	r1, r6
 23f26c4:	f7f9 fe4e 	bl	23ec364 <arm_avgpool_s8_get_buffer_size>

    if (buffer_size > 0) {
 23f26c8:	1e01      	subs	r1, r0, #0
 23f26ca:	dd11      	ble.n	23f26f0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f26cc:	4620      	mov	r0, r4
 23f26ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f26d0:	f107 0210 	add.w	r2, r7, #16
 23f26d4:	4798      	blx	r3
 23f26d6:	4604      	mov	r4, r0
 23f26d8:	b168      	cbz	r0, 23f26f6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xae>
 23f26da:	a808      	add	r0, sp, #32
 23f26dc:	f7fe fd42 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f26e0:	a802      	add	r0, sp, #8
 23f26e2:	f7fe fd3f 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f26e6:	4625      	mov	r5, r4
    } else {
      data->buffer_idx = -1;
    }
  }
  return kTfLiteOk;
}
 23f26e8:	4628      	mov	r0, r5
 23f26ea:	b00f      	add	sp, #60	; 0x3c
 23f26ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      data->buffer_idx = -1;
 23f26f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f26f4:	613b      	str	r3, [r7, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 23f26f6:	a808      	add	r0, sp, #32
 23f26f8:	f7fe fd34 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = GetTensorShape(input);
 23f26fc:	a802      	add	r0, sp, #8
 23f26fe:	f7fe fd31 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
 23f2702:	e7f1      	b.n	23f26e8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa0>

023f2704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 23f2704:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f2706:	694b      	ldr	r3, [r1, #20]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 23f2708:	4604      	mov	r4, r0
 23f270a:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f270c:	b90b      	cbnz	r3, 23f2712 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xe>
 23f270e:	f002 f865 	bl	23f47dc <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f2712:	690b      	ldr	r3, [r1, #16]
 23f2714:	2b00      	cmp	r3, #0
 23f2716:	d0fa      	beq.n	23f270e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa>
  return GetMutableEvalInput(context, node, index);
 23f2718:	2200      	movs	r2, #0
 23f271a:	f7fe fd71 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f271e:	4605      	mov	r5, r0
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f2720:	4631      	mov	r1, r6
 23f2722:	2200      	movs	r2, #0
 23f2724:	4620      	mov	r0, r4
 23f2726:	f7fe fdaa 	bl	23f127e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 23f272a:	7a28      	ldrb	r0, [r5, #8]
 23f272c:	6926      	ldr	r6, [r4, #16]
 23f272e:	2803      	cmp	r0, #3
 23f2730:	d003      	beq.n	23f273a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x36>
 23f2732:	2809      	cmp	r0, #9
 23f2734:	d001      	beq.n	23f273a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x36>
 23f2736:	2801      	cmp	r0, #1
 23f2738:	d108      	bne.n	23f274c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x48>

      AverageEvalQuantized(context, node, params, data, input, output);
      break;
    case kTfLiteInt8:
      #if EI_TFLITE_DISABLE_AVERAGE_POOL_2D_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f273a:	f7f7 ff17 	bl	23ea56c <TfLiteTypeGetName>
 23f273e:	7a2b      	ldrb	r3, [r5, #8]
 23f2740:	4602      	mov	r2, r0
 23f2742:	4906      	ldr	r1, [pc, #24]	; (23f275c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x58>)
 23f2744:	4620      	mov	r0, r4
 23f2746:	47b0      	blx	r6
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 23f2748:	2001      	movs	r0, #1
 23f274a:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 23f274c:	f7f7 ff0e 	bl	23ea56c <TfLiteTypeGetName>
 23f2750:	4903      	ldr	r1, [pc, #12]	; (23f2760 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 23f2752:	4602      	mov	r2, r0
 23f2754:	4620      	mov	r0, r4
 23f2756:	47b0      	blx	r6
      return kTfLiteError;
 23f2758:	e7f6      	b.n	23f2748 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x44>
 23f275a:	bf00      	nop
 23f275c:	023fed66 	.word	0x023fed66
 23f2760:	023ff14f 	.word	0x023ff14f

023f2764 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f2764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f2768:	f8d1 9014 	ldr.w	r9, [r1, #20]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f276c:	4605      	mov	r5, r0
 23f276e:	460c      	mov	r4, r1
 23f2770:	b0a4      	sub	sp, #144	; 0x90
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f2772:	f1b9 0f00 	cmp.w	r9, #0
 23f2776:	d101      	bne.n	23f277c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x18>
 23f2778:	f002 f830 	bl	23f47dc <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
 23f277c:	f8d1 8010 	ldr.w	r8, [r1, #16]
 23f2780:	f1b8 0f00 	cmp.w	r8, #0
 23f2784:	d0f8      	beq.n	23f2778 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14>
 23f2786:	2200      	movs	r2, #0
 23f2788:	f7fe fd3a 	bl	23f1200 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 23f278c:	4607      	mov	r7, r0
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f278e:	4621      	mov	r1, r4
 23f2790:	2200      	movs	r2, #0
 23f2792:	4628      	mov	r0, r5
 23f2794:	f7fe fd73 	bl	23f127e <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  switch (input->type) {
 23f2798:	7a3c      	ldrb	r4, [r7, #8]
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 23f279a:	4606      	mov	r6, r0
  switch (input->type) {
 23f279c:	2c03      	cmp	r4, #3
 23f279e:	d010      	beq.n	23f27c2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 23f27a0:	2c09      	cmp	r4, #9
 23f27a2:	d019      	beq.n	23f27d8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 23f27a4:	2c01      	cmp	r4, #1
      #endif

      MaxEvalInt8(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 23f27a6:	4620      	mov	r0, r4
 23f27a8:	692e      	ldr	r6, [r5, #16]
  switch (input->type) {
 23f27aa:	d17a      	bne.n	23f28a2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x13e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f27ac:	f7f7 fede 	bl	23ea56c <TfLiteTypeGetName>
 23f27b0:	7a3b      	ldrb	r3, [r7, #8]
 23f27b2:	4602      	mov	r2, r0
 23f27b4:	493e      	ldr	r1, [pc, #248]	; (23f28b0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f27b6:	4628      	mov	r0, r5
 23f27b8:	47b0      	blx	r6
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 23f27ba:	4620      	mov	r0, r4
 23f27bc:	b024      	add	sp, #144	; 0x90
 23f27be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f27c2:	4620      	mov	r0, r4
 23f27c4:	692e      	ldr	r6, [r5, #16]
 23f27c6:	f7f7 fed1 	bl	23ea56c <TfLiteTypeGetName>
 23f27ca:	7a3b      	ldrb	r3, [r7, #8]
 23f27cc:	4602      	mov	r2, r0
 23f27ce:	4938      	ldr	r1, [pc, #224]	; (23f28b0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f27d0:	4628      	mov	r0, r5
 23f27d2:	47b0      	blx	r6
      return kTfLiteError;
 23f27d4:	2401      	movs	r4, #1
 23f27d6:	e7f0      	b.n	23f27ba <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f27d8:	4639      	mov	r1, r7
 23f27da:	a812      	add	r0, sp, #72	; 0x48
 23f27dc:	f000 f87a 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f27e0:	4631      	mov	r1, r6
 23f27e2:	a818      	add	r0, sp, #96	; 0x60
 23f27e4:	f000 f876 	bl	23f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f27e8:	2303      	movs	r3, #3
 23f27ea:	aa18      	add	r2, sp, #96	; 0x60
 23f27ec:	4619      	mov	r1, r3
 23f27ee:	a812      	add	r0, sp, #72	; 0x48
 23f27f0:	f7fe fd14 	bl	23f121c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  input_dims.n = 1;
 23f27f4:	2401      	movs	r4, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 23f27f6:	4682      	mov	sl, r0
  input_dims.h = input_shape.Dims(1);
 23f27f8:	4621      	mov	r1, r4
 23f27fa:	a812      	add	r0, sp, #72	; 0x48
  input_dims.n = 1;
 23f27fc:	9406      	str	r4, [sp, #24]
  input_dims.h = input_shape.Dims(1);
 23f27fe:	f7fe fcbc 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  input_dims.w = input_shape.Dims(2);
 23f2802:	2102      	movs	r1, #2
  input_dims.h = input_shape.Dims(1);
 23f2804:	9007      	str	r0, [sp, #28]
  input_dims.w = input_shape.Dims(2);
 23f2806:	a812      	add	r0, sp, #72	; 0x48
 23f2808:	f7fe fcb7 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.h = output_shape.Dims(1);
 23f280c:	4621      	mov	r1, r4
  input_dims.c = depth;
 23f280e:	e9cd 0a08 	strd	r0, sl, [sp, #32]
  output_dims.h = output_shape.Dims(1);
 23f2812:	a818      	add	r0, sp, #96	; 0x60
  output_dims.n = 1;
 23f2814:	940a      	str	r4, [sp, #40]	; 0x28
  output_dims.h = output_shape.Dims(1);
 23f2816:	f7fe fcb0 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.w = output_shape.Dims(2);
 23f281a:	2102      	movs	r1, #2
  output_dims.h = output_shape.Dims(1);
 23f281c:	900b      	str	r0, [sp, #44]	; 0x2c
  output_dims.w = output_shape.Dims(2);
 23f281e:	a818      	add	r0, sp, #96	; 0x60
 23f2820:	f7fe fcab 	bl	23f117a <_ZNK6tflite12RuntimeShape4DimsEi>
  output_dims.c = depth;
 23f2824:	e9cd 0a0c 	strd	r0, sl, [sp, #48]	; 0x30
  pool_params.stride.h = params->stride_height;
 23f2828:	f8d9 3008 	ldr.w	r3, [r9, #8]
 23f282c:	931f      	str	r3, [sp, #124]	; 0x7c
  pool_params.stride.w = params->stride_width;
 23f282e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 23f2832:	931e      	str	r3, [sp, #120]	; 0x78
  pool_params.padding.h = data.padding.height;
 23f2834:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f2838:	9321      	str	r3, [sp, #132]	; 0x84
  pool_params.padding.w = data.padding.width;
 23f283a:	f8d8 3000 	ldr.w	r3, [r8]
  filter_dims.n = 1;
 23f283e:	940e      	str	r4, [sp, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 23f2840:	9320      	str	r3, [sp, #128]	; 0x80
  pool_params.activation.min = data.activation_min;
 23f2842:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f2846:	9322      	str	r3, [sp, #136]	; 0x88
  pool_params.activation.max = data.activation_max;
 23f2848:	f8d8 3018 	ldr.w	r3, [r8, #24]
 23f284c:	9323      	str	r3, [sp, #140]	; 0x8c
  filter_dims.h = params->filter_height;
 23f284e:	f8d9 3010 	ldr.w	r3, [r9, #16]
  if (data.buffer_idx > -1) {
 23f2852:	f8d8 1010 	ldr.w	r1, [r8, #16]
  filter_dims.h = params->filter_height;
 23f2856:	930f      	str	r3, [sp, #60]	; 0x3c
  filter_dims.w = params->filter_width;
 23f2858:	f8d9 300c 	ldr.w	r3, [r9, #12]
  filter_dims.c = 1;
 23f285c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  ctx.buf = nullptr;
 23f2860:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 23f2862:	4299      	cmp	r1, r3
  ctx.size = 0;
 23f2864:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (data.buffer_idx > -1) {
 23f2868:	db03      	blt.n	23f2872 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f286a:	4628      	mov	r0, r5
 23f286c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 23f286e:	4798      	blx	r3
 23f2870:	9004      	str	r0, [sp, #16]
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f2872:	683b      	ldr	r3, [r7, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 23f2874:	b106      	cbz	r6, 23f2878 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x114>
 23f2876:	6836      	ldr	r6, [r6, #0]
  TFLITE_DCHECK_EQ(
 23f2878:	aa0a      	add	r2, sp, #40	; 0x28
 23f287a:	9201      	str	r2, [sp, #4]
 23f287c:	aa0e      	add	r2, sp, #56	; 0x38
 23f287e:	9200      	str	r2, [sp, #0]
 23f2880:	9602      	str	r6, [sp, #8]
 23f2882:	aa06      	add	r2, sp, #24
 23f2884:	a91e      	add	r1, sp, #120	; 0x78
 23f2886:	a804      	add	r0, sp, #16
 23f2888:	f7f9 fd6e 	bl	23ec368 <arm_max_pool_s8>
 23f288c:	4604      	mov	r4, r0
 23f288e:	2800      	cmp	r0, #0
 23f2890:	f47f af72 	bne.w	23f2778 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x14>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f2894:	a818      	add	r0, sp, #96	; 0x60
 23f2896:	f7fe fc65 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 23f289a:	a812      	add	r0, sp, #72	; 0x48
 23f289c:	f7fe fc62 	bl	23f1164 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 23f28a0:	e78b      	b.n	23f27ba <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 23f28a2:	f7f7 fe63 	bl	23ea56c <TfLiteTypeGetName>
 23f28a6:	4903      	ldr	r1, [pc, #12]	; (23f28b4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x150>)
 23f28a8:	4602      	mov	r2, r0
 23f28aa:	4628      	mov	r0, r5
 23f28ac:	47b0      	blx	r6
 23f28ae:	e791      	b.n	23f27d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
 23f28b0:	023fed66 	.word	0x023fed66
 23f28b4:	023ff178 	.word	0x023ff178

023f28b8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 23f28b8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 23f28ba:	4604      	mov	r4, r0
TfLiteRegistration Register_MAX_POOL_2D() {
 23f28bc:	4606      	mov	r6, r0
          /*version=*/0};
 23f28be:	4d04      	ldr	r5, [pc, #16]	; (23f28d0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x18>)
 23f28c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f28c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f28c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23f28c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 23f28cc:	4630      	mov	r0, r6
 23f28ce:	bd70      	pop	{r4, r5, r6, pc}
 23f28d0:	023fb510 	.word	0x023fb510

023f28d4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 23f28d4:	b570      	push	{r4, r5, r6, lr}
 23f28d6:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 23f28d8:	b109      	cbz	r1, 23f28de <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 23f28da:	684d      	ldr	r5, [r1, #4]
 23f28dc:	b91d      	cbnz	r5, 23f28e6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 23f28de:	2300      	movs	r3, #0
 23f28e0:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f28e2:	4620      	mov	r0, r4
 23f28e4:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
 23f28e6:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
 23f28ea:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
 23f28ec:	6003      	str	r3, [r0, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f28ee:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 23f28f2:	dc05      	bgt.n	23f2900 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f28f4:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f28f6:	4632      	mov	r2, r6
 23f28f8:	4629      	mov	r1, r5
 23f28fa:	f008 fbbc 	bl	23fb076 <memcpy>
  }
 23f28fe:	e7f0      	b.n	23f28e2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>
      dims_pointer_ = new int32_t[dimensions_count];
 23f2900:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 23f2904:	4293      	cmp	r3, r2
 23f2906:	bfb4      	ite	lt
 23f2908:	4630      	movlt	r0, r6
 23f290a:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
 23f290e:	f7f7 fe12 	bl	23ea536 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f2912:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 23f2914:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 23f2916:	2b05      	cmp	r3, #5
 23f2918:	dced      	bgt.n	23f28f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
 23f291a:	e7eb      	b.n	23f28f4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>

023f291c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
 23f291c:	2801      	cmp	r0, #1
 23f291e:	d002      	beq.n	23f2926 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 23f2920:	2802      	cmp	r0, #2
 23f2922:	bf18      	it	ne
 23f2924:	2000      	movne	r0, #0
  }
}
 23f2926:	4770      	bx	lr

023f2928 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
  return kTfLiteOk;
}

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 23f2928:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f292a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f292c:	b90b      	cbnz	r3, 23f2932 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xa>
 23f292e:	f001 ff55 	bl	23f47dc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 23f2932:	2138      	movs	r1, #56	; 0x38
}
 23f2934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 23f2938:	4718      	bx	r3
	...

023f293c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f2940:	ed2d 8b02 	vpush	{d8}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 23f2944:	680b      	ldr	r3, [r1, #0]
 23f2946:	4604      	mov	r4, r0
 23f2948:	681e      	ldr	r6, [r3, #0]
 23f294a:	460f      	mov	r7, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f294c:	2e01      	cmp	r6, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 23f294e:	b088      	sub	sp, #32
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f2950:	d011      	beq.n	23f2976 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 23f2952:	2501      	movs	r5, #1
 23f2954:	4b8c      	ldr	r3, [pc, #560]	; (23f2b88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f2956:	e9cd 6502 	strd	r6, r5, [sp, #8]
 23f295a:	9301      	str	r3, [sp, #4]
 23f295c:	4b8b      	ldr	r3, [pc, #556]	; (23f2b8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 23f295e:	4a8c      	ldr	r2, [pc, #560]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f2960:	9300      	str	r3, [sp, #0]
 23f2962:	6904      	ldr	r4, [r0, #16]
 23f2964:	237b      	movs	r3, #123	; 0x7b
 23f2966:	498b      	ldr	r1, [pc, #556]	; (23f2b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f2968:	47a0      	blx	r4
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
 23f296a:	4628      	mov	r0, r5
 23f296c:	b008      	add	sp, #32
 23f296e:	ecbd 8b02 	vpop	{d8}
 23f2972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 23f2976:	684b      	ldr	r3, [r1, #4]
 23f2978:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f297a:	2d01      	cmp	r5, #1
 23f297c:	d00c      	beq.n	23f2998 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 23f297e:	4b82      	ldr	r3, [pc, #520]	; (23f2b88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f2980:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23f2984:	9301      	str	r3, [sp, #4]
 23f2986:	4b84      	ldr	r3, [pc, #528]	; (23f2b98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 23f2988:	4a81      	ldr	r2, [pc, #516]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f298a:	9300      	str	r3, [sp, #0]
 23f298c:	6904      	ldr	r4, [r0, #16]
 23f298e:	237c      	movs	r3, #124	; 0x7c
 23f2990:	4980      	ldr	r1, [pc, #512]	; (23f2b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f2992:	47a0      	blx	r4
    return kTfLiteError;
 23f2994:	2501      	movs	r5, #1
 23f2996:	e7e8      	b.n	23f296a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
 23f2998:	2200      	movs	r2, #0
 23f299a:	f000 f94b 	bl	23f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 23f299e:	4606      	mov	r6, r0
 23f29a0:	b940      	cbnz	r0, 23f29b4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>
 23f29a2:	4b7e      	ldr	r3, [pc, #504]	; (23f2b9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 23f29a4:	9300      	str	r3, [sp, #0]
 23f29a6:	237e      	movs	r3, #126	; 0x7e
 23f29a8:	6926      	ldr	r6, [r4, #16]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 23f29aa:	4620      	mov	r0, r4
 23f29ac:	4a78      	ldr	r2, [pc, #480]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f29ae:	497c      	ldr	r1, [pc, #496]	; (23f2ba0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 23f29b0:	47b0      	blx	r6
 23f29b2:	e7da      	b.n	23f296a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 23f29b4:	6883      	ldr	r3, [r0, #8]
 23f29b6:	681b      	ldr	r3, [r3, #0]
 23f29b8:	2b00      	cmp	r3, #0
 23f29ba:	dc04      	bgt.n	23f29c6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 23f29bc:	4b79      	ldr	r3, [pc, #484]	; (23f2ba4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 23f29be:	9300      	str	r3, [sp, #0]
 23f29c0:	6926      	ldr	r6, [r4, #16]
 23f29c2:	237f      	movs	r3, #127	; 0x7f
 23f29c4:	e7f1      	b.n	23f29aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TfLiteTensor* output = GetOutput(context, node, 0);
 23f29c6:	2200      	movs	r2, #0
 23f29c8:	4639      	mov	r1, r7
 23f29ca:	4620      	mov	r0, r4
 23f29cc:	f000 f935 	bl	23f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 23f29d0:	4603      	mov	r3, r0
 23f29d2:	b920      	cbnz	r0, 23f29de <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 23f29d4:	4b74      	ldr	r3, [pc, #464]	; (23f2ba8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 23f29d6:	9300      	str	r3, [sp, #0]
 23f29d8:	6926      	ldr	r6, [r4, #16]
 23f29da:	2381      	movs	r3, #129	; 0x81
 23f29dc:	e7e5      	b.n	23f29aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 23f29de:	f8d7 8010 	ldr.w	r8, [r7, #16]
 23f29e2:	f1b8 0f00 	cmp.w	r8, #0
 23f29e6:	d104      	bne.n	23f29f2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
 23f29e8:	4b70      	ldr	r3, [pc, #448]	; (23f2bac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 23f29ea:	9300      	str	r3, [sp, #0]
 23f29ec:	6926      	ldr	r6, [r4, #16]
 23f29ee:	2383      	movs	r3, #131	; 0x83
 23f29f0:	e7db      	b.n	23f29aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  if (input->type == kTfLiteInt16) {
 23f29f2:	7830      	ldrb	r0, [r6, #0]
 23f29f4:	2807      	cmp	r0, #7
 23f29f6:	d108      	bne.n	23f2a0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f29f8:	6927      	ldr	r7, [r4, #16]
 23f29fa:	f7f7 fdb7 	bl	23ea56c <TfLiteTypeGetName>
 23f29fe:	7833      	ldrb	r3, [r6, #0]
 23f2a00:	4602      	mov	r2, r0
 23f2a02:	496b      	ldr	r1, [pc, #428]	; (23f2bb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 23f2a04:	4620      	mov	r0, r4
 23f2a06:	47b8      	blx	r7
    return kTfLiteError;
 23f2a08:	e7af      	b.n	23f296a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  if (output->type == kTfLiteInt16) {
 23f2a0a:	781a      	ldrb	r2, [r3, #0]
 23f2a0c:	2a07      	cmp	r2, #7
 23f2a0e:	d106      	bne.n	23f2a1e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe2>
    TF_LITE_ENSURE(context,
 23f2a10:	2809      	cmp	r0, #9
 23f2a12:	d014      	beq.n	23f2a3e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 23f2a14:	4b67      	ldr	r3, [pc, #412]	; (23f2bb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 23f2a16:	9300      	str	r3, [sp, #0]
 23f2a18:	6926      	ldr	r6, [r4, #16]
 23f2a1a:	2399      	movs	r3, #153	; 0x99
 23f2a1c:	e7c5      	b.n	23f29aa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f2a1e:	4290      	cmp	r0, r2
 23f2a20:	f000 809a 	beq.w	23f2b58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 23f2a24:	4b64      	ldr	r3, [pc, #400]	; (23f2bb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f2a26:	e9cd 0202 	strd	r0, r2, [sp, #8]
 23f2a2a:	9301      	str	r3, [sp, #4]
 23f2a2c:	4b63      	ldr	r3, [pc, #396]	; (23f2bbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 23f2a2e:	4620      	mov	r0, r4
 23f2a30:	9300      	str	r3, [sp, #0]
 23f2a32:	6926      	ldr	r6, [r4, #16]
 23f2a34:	239c      	movs	r3, #156	; 0x9c
 23f2a36:	4a56      	ldr	r2, [pc, #344]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f2a38:	4956      	ldr	r1, [pc, #344]	; (23f2b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f2a3a:	47b0      	blx	r6
 23f2a3c:	e795      	b.n	23f296a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 23f2a3e:	691a      	ldr	r2, [r3, #16]
 23f2a40:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 23f2a44:	d00d      	beq.n	23f2a62 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x126>
 23f2a46:	4b5e      	ldr	r3, [pc, #376]	; (23f2bc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 23f2a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f2a4c:	4b5d      	ldr	r3, [pc, #372]	; (23f2bc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 23f2a4e:	9301      	str	r3, [sp, #4]
 23f2a50:	4b5d      	ldr	r3, [pc, #372]	; (23f2bc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f2a52:	9300      	str	r3, [sp, #0]
 23f2a54:	2337      	movs	r3, #55	; 0x37
 23f2a56:	6925      	ldr	r5, [r4, #16]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f2a58:	4620      	mov	r0, r4
 23f2a5a:	4a4d      	ldr	r2, [pc, #308]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f2a5c:	494d      	ldr	r1, [pc, #308]	; (23f2b94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 23f2a5e:	47a8      	blx	r5
 23f2a60:	e798      	b.n	23f2994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 23f2a62:	eddf 7a5a 	vldr	s15, [pc, #360]	; 23f2bcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>
 23f2a66:	ed93 7a03 	vldr	s14, [r3, #12]
 23f2a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f2a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2a72:	eddf 6a57 	vldr	s13, [pc, #348]	; 23f2bd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>
 23f2a76:	bfcc      	ite	gt
 23f2a78:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 23f2a7c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 23f2a80:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f2a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2a88:	dd35      	ble.n	23f2af6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f2a8a:	2200      	movs	r2, #0
 23f2a8c:	4b51      	ldr	r3, [pc, #324]	; (23f2bd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 23f2a8e:	ee17 0a10 	vmov	r0, s14
 23f2a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f2a96:	f7f6 ff7f 	bl	23e9998 <__aeabi_f2d>
 23f2a9a:	4b4f      	ldr	r3, [pc, #316]	; (23f2bd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 23f2a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f2aa0:	9301      	str	r3, [sp, #4]
 23f2aa2:	4b4e      	ldr	r3, [pc, #312]	; (23f2bdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 23f2aa4:	4620      	mov	r0, r4
 23f2aa6:	9300      	str	r3, [sp, #0]
 23f2aa8:	6925      	ldr	r5, [r4, #16]
 23f2aaa:	2338      	movs	r3, #56	; 0x38
 23f2aac:	4a38      	ldr	r2, [pc, #224]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f2aae:	494c      	ldr	r1, [pc, #304]	; (23f2be0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
 23f2ab0:	47a8      	blx	r5
 23f2ab2:	e76f      	b.n	23f2994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f2ab4:	691a      	ldr	r2, [r3, #16]
 23f2ab6:	f112 0f80 	cmn.w	r2, #128	; 0x80
 23f2aba:	d00a      	beq.n	23f2ad2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x196>
 23f2abc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 23f2ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f2ac4:	4b47      	ldr	r3, [pc, #284]	; (23f2be4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 23f2ac6:	9301      	str	r3, [sp, #4]
 23f2ac8:	4b3f      	ldr	r3, [pc, #252]	; (23f2bc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f2aca:	9300      	str	r3, [sp, #0]
 23f2acc:	6925      	ldr	r5, [r4, #16]
 23f2ace:	233c      	movs	r3, #60	; 0x3c
 23f2ad0:	e7c2      	b.n	23f2a58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x11c>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 23f2ad2:	ed93 7a03 	vldr	s14, [r3, #12]
 23f2ad6:	eddf 7a44 	vldr	s15, [pc, #272]	; 23f2be8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
 23f2ada:	eeb4 7a67 	vcmp.f32	s14, s15
 23f2ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2ae2:	d008      	beq.n	23f2af6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f2ae4:	4b41      	ldr	r3, [pc, #260]	; (23f2bec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 23f2ae6:	4620      	mov	r0, r4
 23f2ae8:	9300      	str	r3, [sp, #0]
 23f2aea:	6925      	ldr	r5, [r4, #16]
 23f2aec:	233d      	movs	r3, #61	; 0x3d
 23f2aee:	4a28      	ldr	r2, [pc, #160]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f2af0:	492b      	ldr	r1, [pc, #172]	; (23f2ba0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 23f2af2:	47a8      	blx	r5
 23f2af4:	e74e      	b.n	23f2994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
      tflite::PreprocessSoftmaxScaling(
 23f2af6:	68f0      	ldr	r0, [r6, #12]
 23f2af8:	f7f6 ff4e 	bl	23e9998 <__aeabi_f2d>
          static_cast<double>(params->beta),
 23f2afc:	697b      	ldr	r3, [r7, #20]
      tflite::PreprocessSoftmaxScaling(
 23f2afe:	ec41 0b18 	vmov	d8, r0, r1
 23f2b02:	6818      	ldr	r0, [r3, #0]
 23f2b04:	f7f6 ff48 	bl	23e9998 <__aeabi_f2d>
 23f2b08:	f108 0408 	add.w	r4, r8, #8
 23f2b0c:	ec41 0b10 	vmov	d0, r0, r1
 23f2b10:	eeb0 1a48 	vmov.f32	s2, s16
 23f2b14:	eef0 1a68 	vmov.f32	s3, s17
 23f2b18:	4621      	mov	r1, r4
 23f2b1a:	2005      	movs	r0, #5
 23f2b1c:	aa07      	add	r2, sp, #28
 23f2b1e:	f000 fb17 	bl	23f3150 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 23f2b22:	9907      	ldr	r1, [sp, #28]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f2b24:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
 23f2b26:	f8c8 100c 	str.w	r1, [r8, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f2b2a:	2005      	movs	r0, #5
 23f2b2c:	f000 fb4c 	bl	23f31c8 <_ZN6tflite20CalculateInputRadiusEiii>
 23f2b30:	f7f6 ff20 	bl	23e9974 <__aeabi_i2d>
 23f2b34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
 23f2b38:	4619      	mov	r1, r3
 23f2b3a:	f7f7 fa35 	bl	23e9fa8 <__aeabi_d2iz>
  return kTfLiteOk;
 23f2b3e:	2500      	movs	r5, #0
      op_data->diff_min =
 23f2b40:	f8c8 0018 	str.w	r0, [r8, #24]
  return kTfLiteOk;
 23f2b44:	e711      	b.n	23f296a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 23f2b46:	6925      	ldr	r5, [r4, #16]
 23f2b48:	f7f7 fd10 	bl	23ea56c <TfLiteTypeGetName>
 23f2b4c:	7833      	ldrb	r3, [r6, #0]
 23f2b4e:	4602      	mov	r2, r0
 23f2b50:	4917      	ldr	r1, [pc, #92]	; (23f2bb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 23f2b52:	4620      	mov	r0, r4
 23f2b54:	47a8      	blx	r5
 23f2b56:	e71d      	b.n	23f2994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 23f2b58:	2809      	cmp	r0, #9
 23f2b5a:	d1f4      	bne.n	23f2b46 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 23f2b5c:	2a09      	cmp	r2, #9
 23f2b5e:	d0a9      	beq.n	23f2ab4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x178>
 23f2b60:	4610      	mov	r0, r2
 23f2b62:	6926      	ldr	r6, [r4, #16]
 23f2b64:	f7f7 fd02 	bl	23ea56c <TfLiteTypeGetName>
 23f2b68:	4605      	mov	r5, r0
 23f2b6a:	2009      	movs	r0, #9
 23f2b6c:	f7f7 fcfe 	bl	23ea56c <TfLiteTypeGetName>
 23f2b70:	4b1f      	ldr	r3, [pc, #124]	; (23f2bf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
 23f2b72:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f2b76:	9301      	str	r3, [sp, #4]
 23f2b78:	4b0f      	ldr	r3, [pc, #60]	; (23f2bb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f2b7a:	4620      	mov	r0, r4
 23f2b7c:	9300      	str	r3, [sp, #0]
 23f2b7e:	4a04      	ldr	r2, [pc, #16]	; (23f2b90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 23f2b80:	233b      	movs	r3, #59	; 0x3b
 23f2b82:	491c      	ldr	r1, [pc, #112]	; (23f2bf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
 23f2b84:	47b0      	blx	r6
 23f2b86:	e705      	b.n	23f2994 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 23f2b88:	023ff243 	.word	0x023ff243
 23f2b8c:	023ff21b 	.word	0x023ff21b
 23f2b90:	023ff199 	.word	0x023ff199
 23f2b94:	023feb67 	.word	0x023feb67
 23f2b98:	023fee72 	.word	0x023fee72
 23f2b9c:	023feccd 	.word	0x023feccd
 23f2ba0:	023fecb6 	.word	0x023fecb6
 23f2ba4:	023ff22b 	.word	0x023ff22b
 23f2ba8:	023fecf0 	.word	0x023fecf0
 23f2bac:	023ff245 	.word	0x023ff245
 23f2bb0:	023fed66 	.word	0x023fed66
 23f2bb4:	023ff260 	.word	0x023ff260
 23f2bb8:	023fed1c 	.word	0x023fed1c
 23f2bbc:	023fed29 	.word	0x023fed29
 23f2bc0:	ffff8000 	.word	0xffff8000
 23f2bc4:	023ff29a 	.word	0x023ff29a
 23f2bc8:	023ff2a1 	.word	0x023ff2a1
 23f2bcc:	37800000 	.word	0x37800000
 23f2bd0:	3283126f 	.word	0x3283126f
 23f2bd4:	3ef00000 	.word	0x3ef00000
 23f2bd8:	023ff2db 	.word	0x023ff2db
 23f2bdc:	023ff2e7 	.word	0x023ff2e7
 23f2be0:	023ff2bb 	.word	0x023ff2bb
 23f2be4:	023ff308 	.word	0x023ff308
 23f2be8:	3b800000 	.word	0x3b800000
 23f2bec:	023ff30d 	.word	0x023ff30d
 23f2bf0:	023ff2fc 	.word	0x023ff2fc
 23f2bf4:	023fed02 	.word	0x023fed02

023f2bf8 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
  return context->GetTensor(context, tensor_index);
 23f2bf8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 23f2bfa:	4718      	bx	r3

023f2bfc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 23f2bfc:	ed90 7a00 	vldr	s14, [r0]
 23f2c00:	eec0 7a07 	vdiv.f32	s15, s0, s14
  { return __builtin_roundf(__x); }
 23f2c04:	fef8 7a67 	vrinta.f32	s15, s15
 23f2c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  };
 23f2c0c:	ee17 3a90 	vmov	r3, s15
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 23f2c10:	6840      	ldr	r0, [r0, #4]
  };
 23f2c12:	4403      	add	r3, r0
 23f2c14:	4618      	mov	r0, r3
 23f2c16:	4770      	bx	lr

023f2c18 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
  if (index >= 0 && index < max_size) {
 23f2c18:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f2c1a:	f851 3b04 	ldr.w	r3, [r1], #4
  if (index >= 0 && index < max_size) {
 23f2c1e:	db07      	blt.n	23f2c30 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
 23f2c20:	4293      	cmp	r3, r2
 23f2c22:	dd05      	ble.n	23f2c30 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
    const int tensor_index = tensor_indices[index];
 23f2c24:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
 23f2c28:	2900      	cmp	r1, #0
 23f2c2a:	db01      	blt.n	23f2c30 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x18>
  return GetTensorAtIndex(context, tensor_index);
 23f2c2c:	f7ff bfe4 	b.w	23f2bf8 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
 23f2c30:	2000      	movs	r0, #0
 23f2c32:	4770      	bx	lr

023f2c34 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
 23f2c34:	6809      	ldr	r1, [r1, #0]
 23f2c36:	f7ff bfef 	b.w	23f2c18 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

023f2c3a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  const int tensor_index = ValidateTensorIndexing(
 23f2c3a:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
 23f2c3c:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f2c3e:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
 23f2c42:	db07      	blt.n	23f2c54 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
 23f2c44:	4291      	cmp	r1, r2
 23f2c46:	dd05      	ble.n	23f2c54 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
    const int tensor_index = tensor_indices[index];
 23f2c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  if (tensor_index < 0) {
 23f2c4c:	2900      	cmp	r1, #0
 23f2c4e:	db01      	blt.n	23f2c54 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x1a>
  return GetTensorAtIndex(context, tensor_index);
 23f2c50:	f7ff bfd2 	b.w	23f2bf8 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
 23f2c54:	2000      	movs	r0, #0
 23f2c56:	4770      	bx	lr

023f2c58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
 23f2c58:	6809      	ldr	r1, [r1, #0]
 23f2c5a:	f7ff bfdd 	b.w	23f2c18 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>
	...

023f2c60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
 23f2c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
 23f2c62:	edd1 7a03 	vldr	s15, [r1, #12]
 23f2c66:	ed92 7a03 	vldr	s14, [r2, #12]
 23f2c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f2c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f2c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
 23f2c76:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f2c78:	da0a      	bge.n	23f2c90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 23f2c7a:	4b0f      	ldr	r3, [pc, #60]	; (23f2cb8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 23f2c7c:	4a0f      	ldr	r2, [pc, #60]	; (23f2cbc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 23f2c7e:	9300      	str	r3, [sp, #0]
 23f2c80:	6904      	ldr	r4, [r0, #16]
 23f2c82:	f240 134d 	movw	r3, #333	; 0x14d
 23f2c86:	490e      	ldr	r1, [pc, #56]	; (23f2cc0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 23f2c88:	47a0      	blx	r4
 23f2c8a:	2001      	movs	r0, #1
}
 23f2c8c:	b002      	add	sp, #8
 23f2c8e:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 23f2c90:	ee17 0a90 	vmov	r0, s15
 23f2c94:	f7f6 fe80 	bl	23e9998 <__aeabi_f2d>
 23f2c98:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f2c9a:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
 23f2c9c:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f2c9e:	f7f6 fe7b 	bl	23e9998 <__aeabi_f2d>
 23f2ca2:	460b      	mov	r3, r1
 23f2ca4:	4602      	mov	r2, r0
 23f2ca6:	4629      	mov	r1, r5
 23f2ca8:	4620      	mov	r0, r4
 23f2caa:	f7f6 fff7 	bl	23e9c9c <__aeabi_ddiv>
 23f2cae:	9b06      	ldr	r3, [sp, #24]
 23f2cb0:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 23f2cb4:	2000      	movs	r0, #0
 23f2cb6:	e7e9      	b.n	23f2c8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 23f2cb8:	023ff3ad 	.word	0x023ff3ad
 23f2cbc:	023ff32f 	.word	0x023ff32f
 23f2cc0:	023fecb6 	.word	0x023fecb6
 23f2cc4:	00000000 	.word	0x00000000

023f2cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 23f2cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2ccc:	4604      	mov	r4, r0
 23f2cce:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f2cd2:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
 23f2cd4:	4615      	mov	r5, r2
 23f2cd6:	461e      	mov	r6, r3
 23f2cd8:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f2cda:	f7f6 fe5d 	bl	23e9998 <__aeabi_f2d>
 23f2cde:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
 23f2ce0:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f2ce2:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
 23f2ce4:	f7f6 fe58 	bl	23e9998 <__aeabi_f2d>
 23f2ce8:	4602      	mov	r2, r0
 23f2cea:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f2cec:	4640      	mov	r0, r8
 23f2cee:	4649      	mov	r1, r9
 23f2cf0:	f7f6 feaa 	bl	23e9a48 <__aeabi_dmul>
 23f2cf4:	4680      	mov	r8, r0
 23f2cf6:	4689      	mov	r9, r1
  if (bias) {
 23f2cf8:	b1d6      	cbz	r6, 23f2d30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
 23f2cfa:	68f0      	ldr	r0, [r6, #12]
 23f2cfc:	f7f6 fe4c 	bl	23e9998 <__aeabi_f2d>
 23f2d00:	4602      	mov	r2, r0
 23f2d02:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 23f2d04:	4640      	mov	r0, r8
 23f2d06:	4649      	mov	r1, r9
 23f2d08:	f7f6 fce6 	bl	23e96d8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23f2d0c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
 23f2d0e:	68f8      	ldr	r0, [r7, #12]
 23f2d10:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 23f2d14:	f7f6 fe40 	bl	23e9998 <__aeabi_f2d>
 23f2d18:	4602      	mov	r2, r0
 23f2d1a:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f2d1c:	4640      	mov	r0, r8
 23f2d1e:	4649      	mov	r1, r9
 23f2d20:	f7f6 ffbc 	bl	23e9c9c <__aeabi_ddiv>
 23f2d24:	a311      	add	r3, pc, #68	; (adr r3, 23f2d6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
 23f2d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2d2a:	f7f7 f909 	bl	23e9f40 <__aeabi_dcmple>
 23f2d2e:	b150      	cbz	r0, 23f2d46 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f2d30:	463b      	mov	r3, r7
 23f2d32:	462a      	mov	r2, r5
 23f2d34:	4651      	mov	r1, sl
 23f2d36:	4620      	mov	r0, r4
 23f2d38:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 23f2d3c:	b003      	add	sp, #12
 23f2d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f2d42:	f7ff bf8d 	b.w	23f2c60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f2d46:	4b06      	ldr	r3, [pc, #24]	; (23f2d60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
 23f2d48:	4620      	mov	r0, r4
 23f2d4a:	9300      	str	r3, [sp, #0]
 23f2d4c:	6925      	ldr	r5, [r4, #16]
 23f2d4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 23f2d52:	4a04      	ldr	r2, [pc, #16]	; (23f2d64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
 23f2d54:	4904      	ldr	r1, [pc, #16]	; (23f2d68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
 23f2d56:	47a8      	blx	r5
}
 23f2d58:	2001      	movs	r0, #1
 23f2d5a:	b003      	add	sp, #12
 23f2d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f2d60:	023ff3c6 	.word	0x023ff3c6
 23f2d64:	023ff32f 	.word	0x023ff32f
 23f2d68:	023fecb6 	.word	0x023fecb6
 23f2d6c:	47ae147b 	.word	0x47ae147b
 23f2d70:	3f947ae1 	.word	0x3f947ae1

023f2d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 23f2d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f2d76:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 23f2d78:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
 23f2d7a:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
 23f2d7c:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 23f2d7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
 23f2d80:	d00e      	beq.n	23f2da0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 23f2d82:	2b09      	cmp	r3, #9
 23f2d84:	d01f      	beq.n	23f2dc6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x52>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 23f2d86:	2b07      	cmp	r3, #7
 23f2d88:	d021      	beq.n	23f2dce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x5a>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 23f2d8a:	4b26      	ldr	r3, [pc, #152]	; (23f2e24 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb0>)
 23f2d8c:	4a26      	ldr	r2, [pc, #152]	; (23f2e28 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>)
 23f2d8e:	9300      	str	r3, [sp, #0]
 23f2d90:	6904      	ldr	r4, [r0, #16]
 23f2d92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 23f2d96:	4925      	ldr	r1, [pc, #148]	; (23f2e2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb8>)
 23f2d98:	47a0      	blx	r4
 23f2d9a:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
 23f2d9c:	b005      	add	sp, #20
 23f2d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 23f2da0:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 23f2da2:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
 23f2da4:	6913      	ldr	r3, [r2, #16]
  };
 23f2da6:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
 23f2da8:	2901      	cmp	r1, #1
  };
 23f2daa:	9202      	str	r2, [sp, #8]
 23f2dac:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
 23f2dae:	d112      	bne.n	23f2dd6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    *act_min = std::max(qmin, quantize(0.0));
 23f2db0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 23f2e30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
 23f2db4:	a802      	add	r0, sp, #8
 23f2db6:	f7ff ff21 	bl	23f2bfc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 23f2dba:	4286      	cmp	r6, r0
 23f2dbc:	bfac      	ite	ge
 23f2dbe:	602e      	strge	r6, [r5, #0]
 23f2dc0:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
 23f2dc2:	603c      	str	r4, [r7, #0]
 23f2dc4:	e01b      	b.n	23f2dfe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8a>
    qmax = std::numeric_limits<int8_t>::max();
 23f2dc6:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 23f2dc8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 23f2dcc:	e7ea      	b.n	23f2da4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
    qmax = std::numeric_limits<int16_t>::max();
 23f2dce:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
 23f2dd2:	4e18      	ldr	r6, [pc, #96]	; (23f2e34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc0>)
 23f2dd4:	e7e6      	b.n	23f2da4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
  } else if (activation == kTfLiteActRelu6) {
 23f2dd6:	2903      	cmp	r1, #3
 23f2dd8:	d113      	bne.n	23f2e02 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x8e>
    *act_min = std::max(qmin, quantize(0.0));
 23f2dda:	ed9f 0a15 	vldr	s0, [pc, #84]	; 23f2e30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
 23f2dde:	a802      	add	r0, sp, #8
 23f2de0:	f7ff ff0c 	bl	23f2bfc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
 23f2de4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
 23f2de8:	4286      	cmp	r6, r0
 23f2dea:	bfac      	ite	ge
 23f2dec:	602e      	strge	r6, [r5, #0]
 23f2dee:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
 23f2df0:	a802      	add	r0, sp, #8
 23f2df2:	f7ff ff03 	bl	23f2bfc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 23f2df6:	4284      	cmp	r4, r0
 23f2df8:	bfd4      	ite	le
 23f2dfa:	603c      	strle	r4, [r7, #0]
 23f2dfc:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
 23f2dfe:	2000      	movs	r0, #0
 23f2e00:	e7cc      	b.n	23f2d9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x28>
  } else if (activation == kTfLiteActReluN1To1) {
 23f2e02:	2902      	cmp	r1, #2
 23f2e04:	d10b      	bne.n	23f2e1e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xaa>
    *act_min = std::max(qmin, quantize(-1.0));
 23f2e06:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f2e0a:	a802      	add	r0, sp, #8
 23f2e0c:	f7ff fef6 	bl	23f2bfc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
 23f2e10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
 23f2e14:	4286      	cmp	r6, r0
 23f2e16:	bfac      	ite	ge
 23f2e18:	602e      	strge	r6, [r5, #0]
 23f2e1a:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
 23f2e1c:	e7e8      	b.n	23f2df0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
    *act_min = qmin;
 23f2e1e:	602e      	str	r6, [r5, #0]
 23f2e20:	e7cf      	b.n	23f2dc2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4e>
 23f2e22:	bf00      	nop
 23f2e24:	023ff7c9 	.word	0x023ff7c9
 23f2e28:	023ff32f 	.word	0x023ff32f
 23f2e2c:	023fecb6 	.word	0x023fecb6
 23f2e30:	00000000 	.word	0x00000000
 23f2e34:	ffff8000 	.word	0xffff8000

023f2e38 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f2e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2e3c:	ed2d 8b06 	vpush	{d8-d10}
 23f2e40:	b093      	sub	sp, #76	; 0x4c
 23f2e42:	ee09 3a10 	vmov	s18, r3
 23f2e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f2e48:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f2e4c:	9306      	str	r3, [sp, #24]
 23f2e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f2e50:	2d01      	cmp	r5, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 23f2e52:	9308      	str	r3, [sp, #32]
 23f2e54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f2e56:	4604      	mov	r4, r0
 23f2e58:	ee09 3a90 	vmov	s19, r3
 23f2e5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23f2e5e:	468b      	mov	fp, r1
 23f2e60:	9309      	str	r3, [sp, #36]	; 0x24
 23f2e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23f2e64:	4692      	mov	sl, r2
 23f2e66:	ee0a 3a10 	vmov	s20, r3
 23f2e6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23f2e6c:	930a      	str	r3, [sp, #40]	; 0x28
 23f2e6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23f2e70:	930b      	str	r3, [sp, #44]	; 0x2c
 23f2e72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 23f2e74:	930c      	str	r3, [sp, #48]	; 0x30
 23f2e76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23f2e78:	9307      	str	r3, [sp, #28]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 23f2e7a:	d011      	beq.n	23f2ea0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x68>
 23f2e7c:	2601      	movs	r6, #1
 23f2e7e:	4b77      	ldr	r3, [pc, #476]	; (23f305c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
 23f2e80:	e9cd 5602 	strd	r5, r6, [sp, #8]
 23f2e84:	9301      	str	r3, [sp, #4]
 23f2e86:	4b76      	ldr	r3, [pc, #472]	; (23f3060 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x228>)
 23f2e88:	4a76      	ldr	r2, [pc, #472]	; (23f3064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f2e8a:	9300      	str	r3, [sp, #0]
 23f2e8c:	6904      	ldr	r4, [r0, #16]
 23f2e8e:	23dc      	movs	r3, #220	; 0xdc
 23f2e90:	4975      	ldr	r1, [pc, #468]	; (23f3068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f2e92:	47a0      	blx	r4
}
 23f2e94:	4630      	mov	r0, r6
 23f2e96:	b013      	add	sp, #76	; 0x4c
 23f2e98:	ecbd 8b06 	vpop	{d8-d10}
 23f2e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 23f2ea0:	f892 6030 	ldrb.w	r6, [r2, #48]	; 0x30
 23f2ea4:	2e01      	cmp	r6, #1
 23f2ea6:	d00c      	beq.n	23f2ec2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x8a>
 23f2ea8:	4b6c      	ldr	r3, [pc, #432]	; (23f305c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x224>)
 23f2eaa:	e9cd 6502 	strd	r6, r5, [sp, #8]
 23f2eae:	9301      	str	r3, [sp, #4]
 23f2eb0:	4b6e      	ldr	r3, [pc, #440]	; (23f306c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x234>)
 23f2eb2:	4a6c      	ldr	r2, [pc, #432]	; (23f3064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f2eb4:	9300      	str	r3, [sp, #0]
 23f2eb6:	6904      	ldr	r4, [r0, #16]
 23f2eb8:	23de      	movs	r3, #222	; 0xde
 23f2eba:	496b      	ldr	r1, [pc, #428]	; (23f3068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f2ebc:	47a0      	blx	r4
 23f2ebe:	462e      	mov	r6, r5
 23f2ec0:	e7e8      	b.n	23f2e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
  const auto* affine_quantization =
 23f2ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 23f2ec4:	b93a      	cbnz	r2, 23f2ed6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x9e>
 23f2ec6:	4b6a      	ldr	r3, [pc, #424]	; (23f3070 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>)
 23f2ec8:	9300      	str	r3, [sp, #0]
 23f2eca:	23e9      	movs	r3, #233	; 0xe9
 23f2ecc:	6904      	ldr	r4, [r0, #16]
  TF_LITE_ENSURE(context, affine_quantization->scale);
 23f2ece:	4a65      	ldr	r2, [pc, #404]	; (23f3064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f2ed0:	4968      	ldr	r1, [pc, #416]	; (23f3074 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x23c>)
 23f2ed2:	47a0      	blx	r4
 23f2ed4:	e7de      	b.n	23f2e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
 23f2ed6:	6817      	ldr	r7, [r2, #0]
 23f2ed8:	b927      	cbnz	r7, 23f2ee4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xac>
 23f2eda:	4b67      	ldr	r3, [pc, #412]	; (23f3078 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x240>)
 23f2edc:	9300      	str	r3, [sp, #0]
 23f2ede:	6904      	ldr	r4, [r0, #16]
 23f2ee0:	23ea      	movs	r3, #234	; 0xea
 23f2ee2:	e7f4      	b.n	23f2ece <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 23f2ee4:	683d      	ldr	r5, [r7, #0]
  if (is_per_channel) {
 23f2ee6:	2d01      	cmp	r5, #1
 23f2ee8:	dd38      	ble.n	23f2f5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
    TF_LITE_ENSURE(context,
 23f2eea:	780b      	ldrb	r3, [r1, #0]
 23f2eec:	2b09      	cmp	r3, #9
 23f2eee:	d006      	beq.n	23f2efe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
 23f2ef0:	2b07      	cmp	r3, #7
 23f2ef2:	d004      	beq.n	23f2efe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xc6>
 23f2ef4:	4b61      	ldr	r3, [pc, #388]	; (23f307c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x244>)
 23f2ef6:	9300      	str	r3, [sp, #0]
 23f2ef8:	6904      	ldr	r4, [r0, #16]
 23f2efa:	23ee      	movs	r3, #238	; 0xee
 23f2efc:	e7e7      	b.n	23f2ece <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x96>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 23f2efe:	f89a 3000 	ldrb.w	r3, [sl]
 23f2f02:	2b09      	cmp	r3, #9
 23f2f04:	d00d      	beq.n	23f2f22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xea>
 23f2f06:	2209      	movs	r2, #9
 23f2f08:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f2f0c:	4b5c      	ldr	r3, [pc, #368]	; (23f3080 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x248>)
 23f2f0e:	9301      	str	r3, [sp, #4]
 23f2f10:	4b5c      	ldr	r3, [pc, #368]	; (23f3084 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24c>)
 23f2f12:	9300      	str	r3, [sp, #0]
 23f2f14:	23f0      	movs	r3, #240	; 0xf0
 23f2f16:	6925      	ldr	r5, [r4, #16]
    TF_LITE_ENSURE_EQ(
 23f2f18:	4620      	mov	r0, r4
 23f2f1a:	4a52      	ldr	r2, [pc, #328]	; (23f3064 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x22c>)
 23f2f1c:	4952      	ldr	r1, [pc, #328]	; (23f3068 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x230>)
 23f2f1e:	47a8      	blx	r5
 23f2f20:	e7b8      	b.n	23f2e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 23f2f22:	9b07      	ldr	r3, [sp, #28]
 23f2f24:	429d      	cmp	r5, r3
 23f2f26:	d008      	beq.n	23f2f3a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x102>
 23f2f28:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f2f2c:	4b56      	ldr	r3, [pc, #344]	; (23f3088 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
 23f2f2e:	9301      	str	r3, [sp, #4]
 23f2f30:	4b56      	ldr	r3, [pc, #344]	; (23f308c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>)
 23f2f32:	9300      	str	r3, [sp, #0]
 23f2f34:	6925      	ldr	r5, [r4, #16]
 23f2f36:	23f1      	movs	r3, #241	; 0xf1
 23f2f38:	e7ee      	b.n	23f2f18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
    TF_LITE_ENSURE_EQ(
 23f2f3a:	f8da 3008 	ldr.w	r3, [sl, #8]
 23f2f3e:	6892      	ldr	r2, [r2, #8]
 23f2f40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f2f44:	685b      	ldr	r3, [r3, #4]
 23f2f46:	42ab      	cmp	r3, r5
 23f2f48:	d008      	beq.n	23f2f5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
 23f2f4a:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f2f4e:	4b50      	ldr	r3, [pc, #320]	; (23f3090 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x258>)
 23f2f50:	9301      	str	r3, [sp, #4]
 23f2f52:	4b4d      	ldr	r3, [pc, #308]	; (23f3088 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x250>)
 23f2f54:	9300      	str	r3, [sp, #0]
 23f2f56:	6925      	ldr	r5, [r4, #16]
 23f2f58:	23f2      	movs	r3, #242	; 0xf2
 23f2f5a:	e7dd      	b.n	23f2f18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
  const float input_scale = input->params.scale;
 23f2f5c:	eddb 7a03 	vldr	s15, [fp, #12]
  const float output_scale = output->params.scale;
 23f2f60:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
 23f2f62:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
 23f2f66:	edd3 7a03 	vldr	s15, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
 23f2f6a:	2600      	movs	r6, #0
  const float output_scale = output->params.scale;
 23f2f6c:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
 23f2f70:	1d3b      	adds	r3, r7, #4
 23f2f72:	9305      	str	r3, [sp, #20]
 23f2f74:	9b07      	ldr	r3, [sp, #28]
 23f2f76:	429e      	cmp	r6, r3
 23f2f78:	da34      	bge.n	23f2fe4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ac>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 23f2f7a:	2d01      	cmp	r5, #1
 23f2f7c:	bfca      	itet	gt
 23f2f7e:	9b05      	ldrgt	r3, [sp, #20]
 23f2f80:	687b      	ldrle	r3, [r7, #4]
 23f2f82:	681b      	ldrgt	r3, [r3, #0]
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f2f84:	ee18 0a10 	vmov	r0, s16
 23f2f88:	930d      	str	r3, [sp, #52]	; 0x34
 23f2f8a:	f7f6 fd05 	bl	23e9998 <__aeabi_f2d>
    const double filter_scale = static_cast<double>(scale);
 23f2f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f2f90:	4680      	mov	r8, r0
    const double filter_scale = static_cast<double>(scale);
 23f2f92:	4618      	mov	r0, r3
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f2f94:	4689      	mov	r9, r1
    const double filter_scale = static_cast<double>(scale);
 23f2f96:	f7f6 fcff 	bl	23e9998 <__aeabi_f2d>
 23f2f9a:	4602      	mov	r2, r0
 23f2f9c:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f2f9e:	4640      	mov	r0, r8
 23f2fa0:	4649      	mov	r1, r9
 23f2fa2:	f7f6 fd51 	bl	23e9a48 <__aeabi_dmul>
 23f2fa6:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
 23f2fa8:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f2fac:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
 23f2fae:	f7f6 fcf3 	bl	23e9998 <__aeabi_f2d>
 23f2fb2:	4602      	mov	r2, r0
 23f2fb4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 23f2fb6:	4640      	mov	r0, r8
 23f2fb8:	4649      	mov	r1, r9
 23f2fba:	f7f6 fe6f 	bl	23e9c9c <__aeabi_ddiv>
 23f2fbe:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 23f2fc2:	a910      	add	r1, sp, #64	; 0x40
 23f2fc4:	a80f      	add	r0, sp, #60	; 0x3c
 23f2fc6:	f000 f865 	bl	23f3094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 23f2fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f2fcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f2fce:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
 23f2fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f2fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23f2fd6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
 23f2fda:	9b05      	ldr	r3, [sp, #20]
 23f2fdc:	3601      	adds	r6, #1
 23f2fde:	3304      	adds	r3, #4
 23f2fe0:	9305      	str	r3, [sp, #20]
 23f2fe2:	e7c7      	b.n	23f2f74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x13c>
  if (input->type == kTfLiteUInt8) {
 23f2fe4:	f89b 3000 	ldrb.w	r3, [fp]
 23f2fe8:	2b03      	cmp	r3, #3
 23f2fea:	d11d      	bne.n	23f3028 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1f0>
    double real_multiplier = 0.0;
 23f2fec:	2200      	movs	r2, #0
 23f2fee:	2300      	movs	r3, #0
 23f2ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f2ff4:	ab10      	add	r3, sp, #64	; 0x40
 23f2ff6:	9301      	str	r3, [sp, #4]
 23f2ff8:	9b06      	ldr	r3, [sp, #24]
 23f2ffa:	4652      	mov	r2, sl
 23f2ffc:	9300      	str	r3, [sp, #0]
 23f2ffe:	4659      	mov	r1, fp
 23f3000:	ee19 3a10 	vmov	r3, s18
 23f3004:	4620      	mov	r0, r4
 23f3006:	f7ff fe5f 	bl	23f2cc8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f300a:	4606      	mov	r6, r0
 23f300c:	2800      	cmp	r0, #0
 23f300e:	f47f af41 	bne.w	23f2e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 23f3012:	ee19 0a90 	vmov	r0, s19
 23f3016:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 23f301a:	a90f      	add	r1, sp, #60	; 0x3c
 23f301c:	f000 f83a 	bl	23f3094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 23f3020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f3022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f3024:	425b      	negs	r3, r3
 23f3026:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 23f3028:	f89b 3000 	ldrb.w	r3, [fp]
 23f302c:	2b09      	cmp	r3, #9
 23f302e:	d003      	beq.n	23f3038 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x200>
 23f3030:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 23f3034:	2b03      	cmp	r3, #3
 23f3036:	d10e      	bne.n	23f3056 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x21e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f3038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f303a:	4620      	mov	r0, r4
 23f303c:	9322      	str	r3, [sp, #136]	; 0x88
 23f303e:	ee1a 3a10 	vmov	r3, s20
 23f3042:	9908      	ldr	r1, [sp, #32]
 23f3044:	9a06      	ldr	r2, [sp, #24]
 23f3046:	7809      	ldrb	r1, [r1, #0]
}
 23f3048:	b013      	add	sp, #76	; 0x4c
 23f304a:	ecbd 8b06 	vpop	{d8-d10}
 23f304e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 23f3052:	f7ff be8f 	b.w	23f2d74 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  return kTfLiteOk;
 23f3056:	2600      	movs	r6, #0
 23f3058:	e71c      	b.n	23f2e94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x5c>
 23f305a:	bf00      	nop
 23f305c:	023ff3e8 	.word	0x023ff3e8
 23f3060:	023ff402 	.word	0x023ff402
 23f3064:	023ff32f 	.word	0x023ff32f
 23f3068:	023feb67 	.word	0x023feb67
 23f306c:	023ff41b 	.word	0x023ff41b
 23f3070:	023ff435 	.word	0x023ff435
 23f3074:	023fecb6 	.word	0x023fecb6
 23f3078:	023ff449 	.word	0x023ff449
 23f307c:	023ff260 	.word	0x023ff260
 23f3080:	023ff2fc 	.word	0x023ff2fc
 23f3084:	023ff464 	.word	0x023ff464
 23f3088:	023ff471 	.word	0x023ff471
 23f308c:	023ff47e 	.word	0x023ff47e
 23f3090:	023ff49f 	.word	0x023ff49f

023f3094 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 23f3094:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (double_multiplier == 0.) {
 23f3096:	2200      	movs	r2, #0
                        int* shift) {
 23f3098:	4606      	mov	r6, r0
 23f309a:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 23f309c:	2300      	movs	r3, #0
 23f309e:	ec51 0b10 	vmov	r0, r1, d0
 23f30a2:	ed8d 0b00 	vstr	d0, [sp]
 23f30a6:	f7f6 ff37 	bl	23e9f18 <__aeabi_dcmpeq>
 23f30aa:	ed9d 0b00 	vldr	d0, [sp]
 23f30ae:	4605      	mov	r5, r0
 23f30b0:	b120      	cbz	r0, 23f30bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 23f30b2:	2300      	movs	r3, #0
 23f30b4:	6033      	str	r3, [r6, #0]
    *shift = 0;
 23f30b6:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 23f30b8:	b002      	add	sp, #8
 23f30ba:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
 23f30bc:	4620      	mov	r0, r4
 23f30be:	f006 fb53 	bl	23f9768 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f30c2:	2200      	movs	r2, #0
 23f30c4:	4b13      	ldr	r3, [pc, #76]	; (23f3114 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
  const double q = std::frexp(double_multiplier, shift);
 23f30c6:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f30ca:	f7f6 fcbd 	bl	23e9a48 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 23f30ce:	ec41 0b10 	vmov	d0, r0, r1
 23f30d2:	f006 fb81 	bl	23f97d8 <round>
 23f30d6:	ec51 0b10 	vmov	r0, r1, d0
 23f30da:	f7f7 f84d 	bl	23ea178 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 23f30de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 23f30e2:	4282      	cmp	r2, r0
 23f30e4:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 23f30e8:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 23f30ea:	da01      	bge.n	23f30f0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
 23f30ec:	f001 fb76 	bl	23f47dc <abort>
  if (q_fixed == (1ll << 31)) {
 23f30f0:	42a9      	cmp	r1, r5
 23f30f2:	bf08      	it	eq
 23f30f4:	4290      	cmpeq	r0, r2
    ++*shift;
 23f30f6:	bf02      	ittt	eq
 23f30f8:	6823      	ldreq	r3, [r4, #0]
 23f30fa:	3301      	addeq	r3, #1
 23f30fc:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 23f30fe:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
 23f3100:	bf08      	it	eq
 23f3102:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
 23f3106:	321f      	adds	r2, #31
    *shift = 0;
 23f3108:	bfbc      	itt	lt
 23f310a:	2300      	movlt	r3, #0
 23f310c:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 23f310e:	6033      	str	r3, [r6, #0]
 23f3110:	e7d2      	b.n	23f30b8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
 23f3112:	bf00      	nop
 23f3114:	41e00000 	.word	0x41e00000

023f3118 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 23f3118:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f311a:	4b0c      	ldr	r3, [pc, #48]	; (23f314c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
 23f311c:	4605      	mov	r5, r0
 23f311e:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f3120:	2200      	movs	r2, #0
 23f3122:	ec51 0b10 	vmov	r0, r1, d0
 23f3126:	ed8d 0b00 	vstr	d0, [sp]
 23f312a:	f7f6 ff1d 	bl	23e9f68 <__aeabi_dcmpgt>
 23f312e:	ed9d 0b00 	vldr	d0, [sp]
 23f3132:	b908      	cbnz	r0, 23f3138 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
 23f3134:	f001 fb52 	bl	23f47dc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 23f3138:	4621      	mov	r1, r4
 23f313a:	4628      	mov	r0, r5
 23f313c:	f7ff ffaa 	bl	23f3094 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 23f3140:	6823      	ldr	r3, [r4, #0]
 23f3142:	2b00      	cmp	r3, #0
 23f3144:	dbf6      	blt.n	23f3134 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
 23f3146:	b003      	add	sp, #12
 23f3148:	bd30      	pop	{r4, r5, pc}
 23f314a:	bf00      	nop
 23f314c:	3ff00000 	.word	0x3ff00000

023f3150 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 23f3150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f3154:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
 23f3158:	ed2d 8b02 	vpush	{d8}
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f315c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 23f3160:	ec57 6b10 	vmov	r6, r7, d0
 23f3164:	ec59 8b11 	vmov	r8, r9, d1
 23f3168:	4693      	mov	fp, r2
 23f316a:	468a      	mov	sl, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 23f316c:	f7f6 fc02 	bl	23e9974 <__aeabi_i2d>
 23f3170:	4642      	mov	r2, r8
 23f3172:	4604      	mov	r4, r0
 23f3174:	460d      	mov	r5, r1
 23f3176:	464b      	mov	r3, r9
 23f3178:	4630      	mov	r0, r6
 23f317a:	4639      	mov	r1, r7
 23f317c:	f7f6 fc64 	bl	23e9a48 <__aeabi_dmul>
 23f3180:	4602      	mov	r2, r0
 23f3182:	460b      	mov	r3, r1
 23f3184:	4620      	mov	r0, r4
 23f3186:	4629      	mov	r1, r5
 23f3188:	f7f6 fc5e 	bl	23e9a48 <__aeabi_dmul>
 23f318c:	4602      	mov	r2, r0
 23f318e:	460b      	mov	r3, r1
 23f3190:	ec43 2b18 	vmov	d8, r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 23f3194:	a30a      	add	r3, pc, #40	; (adr r3, 23f31c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
 23f3196:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f319a:	f7f6 fee5 	bl	23e9f68 <__aeabi_dcmpgt>
 23f319e:	b108      	cbz	r0, 23f31a4 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
 23f31a0:	ed9f 8b07 	vldr	d8, [pc, #28]	; 23f31c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f31a4:	4659      	mov	r1, fp
 23f31a6:	4650      	mov	r0, sl
 23f31a8:	eeb0 0a48 	vmov.f32	s0, s16
 23f31ac:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
 23f31b0:	ecbd 8b02 	vpop	{d8}
 23f31b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f31b8:	f7ff bfae 	b.w	23f3118 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
 23f31bc:	f3af 8000 	nop.w
 23f31c0:	ffc00000 	.word	0xffc00000
 23f31c4:	41dfffff 	.word	0x41dfffff

023f31c8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 23f31c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 23f31cc:	2401      	movs	r4, #1
                         int total_signed_bits) {
 23f31ce:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
 23f31d0:	fa04 f000 	lsl.w	r0, r4, r0
 23f31d4:	3801      	subs	r0, #1
                         int total_signed_bits) {
 23f31d6:	4688      	mov	r8, r1
 23f31d8:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
 23f31da:	f7f6 fbcb 	bl	23e9974 <__aeabi_i2d>
 23f31de:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f31e0:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
 23f31e4:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f31e6:	f1c0 0320 	rsb	r3, r0, #32
 23f31ea:	f1a0 0120 	sub.w	r1, r0, #32
 23f31ee:	fa24 f303 	lsr.w	r3, r4, r3
 23f31f2:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f31f6:	fa04 f000 	lsl.w	r0, r4, r0
 23f31fa:	4319      	orrs	r1, r3
 23f31fc:	f7f6 fbf6 	bl	23e99ec <__aeabi_l2d>
 23f3200:	4602      	mov	r2, r0
 23f3202:	460b      	mov	r3, r1
 23f3204:	4630      	mov	r0, r6
 23f3206:	4639      	mov	r1, r7
 23f3208:	f7f6 fc1e 	bl	23e9a48 <__aeabi_dmul>
      (1ll << input_left_shift);
 23f320c:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 23f3210:	460f      	mov	r7, r1
      (1ll << input_left_shift);
 23f3212:	f1a8 0120 	sub.w	r1, r8, #32
 23f3216:	fa24 f303 	lsr.w	r3, r4, r3
 23f321a:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f321e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 23f3220:	4319      	orrs	r1, r3
 23f3222:	fa04 f008 	lsl.w	r0, r4, r8
 23f3226:	f7f6 fbe1 	bl	23e99ec <__aeabi_l2d>
 23f322a:	4602      	mov	r2, r0
 23f322c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 23f322e:	4630      	mov	r0, r6
 23f3230:	4639      	mov	r1, r7
 23f3232:	f7f6 fd33 	bl	23e9c9c <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 23f3236:	ec41 0b10 	vmov	d0, r0, r1
 23f323a:	f006 fa11 	bl	23f9660 <floor>
 23f323e:	ec51 0b10 	vmov	r0, r1, d0
 23f3242:	f7f6 feb1 	bl	23e9fa8 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 23f3246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

023f324c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 23f324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3250:	ed2d 8b08 	vpush	{d8-d11}
 23f3254:	4616      	mov	r6, r2
 23f3256:	b089      	sub	sp, #36	; 0x24
 23f3258:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
 23f325c:	460f      	mov	r7, r1
    kiss_fft_cpx * Fout_beg=Fout;
    const int p=*factors++; /* the radix  */
    const int m=*factors++; /* stage's fft length/p */
 23f325e:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
 23f3262:	6811      	ldr	r1, [r2, #0]
        }
        return;
    }
#endif

    if (m==1) {
 23f3264:	f1ba 0f01 	cmp.w	sl, #1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23f3268:	fb0a f901 	mul.w	r9, sl, r1
    const int p=*factors++; /* the radix  */
 23f326c:	9103      	str	r1, [sp, #12]
        do{
            *Fout = *f;
            f += fstride*in_stride;
 23f326e:	fb06 f103 	mul.w	r1, r6, r3
{
 23f3272:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23f3274:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
 23f3278:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
 23f327c:	d116      	bne.n	23f32ac <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
 23f327e:	4603      	mov	r3, r0
            *Fout = *f;
 23f3280:	e897 0003 	ldmia.w	r7, {r0, r1}
 23f3284:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
 23f3288:	3308      	adds	r3, #8
 23f328a:	4599      	cmp	r9, r3
            f += fstride*in_stride;
 23f328c:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
 23f328e:	d1f7      	bne.n	23f3280 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
 23f3290:	f505 7384 	add.w	r3, r5, #264	; 0x108
 23f3294:	9305      	str	r3, [sp, #20]
 23f3296:	9b03      	ldr	r3, [sp, #12]
 23f3298:	3b02      	subs	r3, #2
 23f329a:	2b03      	cmp	r3, #3
 23f329c:	f200 828a 	bhi.w	23f37b4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x568>
 23f32a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 23f32a4:	0056001b 	.word	0x0056001b
 23f32a8:	019b00fb 	.word	0x019b00fb
    const int m=*factors++; /* stage's fft length/p */
 23f32ac:	3208      	adds	r2, #8
 23f32ae:	9204      	str	r2, [sp, #16]
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23f32b0:	9a03      	ldr	r2, [sp, #12]
            f += fstride*in_stride;
        }while( (Fout += m) != Fout_end );
 23f32b2:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23f32b6:	4372      	muls	r2, r6
 23f32b8:	9904      	ldr	r1, [sp, #16]
 23f32ba:	9501      	str	r5, [sp, #4]
 23f32bc:	9100      	str	r1, [sp, #0]
 23f32be:	4639      	mov	r1, r7
 23f32c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23f32c4:	9005      	str	r0, [sp, #20]
 23f32c6:	f7ff ffc1 	bl	23f324c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
 23f32ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23f32ce:	9805      	ldr	r0, [sp, #20]
            f += fstride*in_stride;
 23f32d0:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
 23f32d2:	4458      	add	r0, fp
 23f32d4:	4581      	cmp	r9, r0
 23f32d6:	d1ef      	bne.n	23f32b8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
 23f32d8:	e7da      	b.n	23f3290 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
 23f32da:	f10a 0301 	add.w	r3, sl, #1
 23f32de:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
 23f32e2:	00f6      	lsls	r6, r6, #3
 23f32e4:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
 23f32e6:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f32ea:	ed53 5a01 	vldr	s11, [r3, #-4]
 23f32ee:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
 23f32f2:	ed13 6a02 	vldr	s12, [r3, #-8]
 23f32f6:	ee26 7ae5 	vnmul.f32	s14, s13, s11
 23f32fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 23f32fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 23f3302:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
 23f3306:	ed54 6a02 	vldr	s13, [r4, #-8]
 23f330a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 23f330e:	ed43 6a02 	vstr	s13, [r3, #-8]
 23f3312:	ed54 6a01 	vldr	s13, [r4, #-4]
 23f3316:	ee76 6ae7 	vsub.f32	s13, s13, s15
 23f331a:	ed43 6a01 	vstr	s13, [r3, #-4]
        C_ADDTO( *Fout ,  t );
 23f331e:	ed54 6a02 	vldr	s13, [r4, #-8]
 23f3322:	ee36 7a87 	vadd.f32	s14, s13, s14
 23f3326:	ed04 7a02 	vstr	s14, [r4, #-8]
 23f332a:	ed14 7a01 	vldr	s14, [r4, #-4]
 23f332e:	ee77 7a27 	vadd.f32	s15, s14, s15
    }while (--m);
 23f3332:	f1ba 0a01 	subs.w	sl, sl, #1
        C_ADDTO( *Fout ,  t );
 23f3336:	ed44 7a01 	vstr	s15, [r4, #-4]
    }while (--m);
 23f333a:	f103 0308 	add.w	r3, r3, #8
 23f333e:	f104 0408 	add.w	r4, r4, #8
 23f3342:	4435      	add	r5, r6
 23f3344:	d1cf      	bne.n	23f32e6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
        case 4: kf_bfly4(Fout,fstride,st,m); break;
        case 5: kf_bfly5(Fout,fstride,st,m); break;
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    }
}
 23f3346:	b009      	add	sp, #36	; 0x24
 23f3348:	ecbd 8b08 	vpop	{d8-d11}
 23f334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
 23f3350:	fb06 f30a 	mul.w	r3, r6, sl
 23f3354:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 23f3358:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
 23f335c:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
 23f3360:	0133      	lsls	r3, r6, #4
 23f3362:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
 23f3366:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 23f336a:	f104 0608 	add.w	r6, r4, #8
 23f336e:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 23f3370:	4657      	mov	r7, sl
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23f3372:	eef1 9a49 	vneg.f32	s19, s18
         tw2 += fstride*2;
 23f3376:	46aa      	mov	sl, r5
 23f3378:	9303      	str	r3, [sp, #12]
 23f337a:	3404      	adds	r4, #4
         C_MUL(scratch[1],Fout[m] , *tw1);
 23f337c:	edd8 7a01 	vldr	s15, [r8, #4]
 23f3380:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f3384:	ee66 8ae7 	vnmul.f32	s17, s13, s15
 23f3388:	ed14 6a01 	vldr	s12, [r4, #-4]
 23f338c:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
 23f3390:	eeb0 7a68 	vmov.f32	s14, s17
 23f3394:	eea6 7a08 	vfma.f32	s14, s12, s16
 23f3398:	ee28 8a27 	vmul.f32	s16, s16, s15
 23f339c:	eef0 7a48 	vmov.f32	s15, s16
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23f33a0:	edd9 5a01 	vldr	s11, [r9, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
 23f33a4:	eee6 7a26 	vfma.f32	s15, s12, s13
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23f33a8:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
 23f33ac:	ed99 6a00 	vldr	s12, [r9]
 23f33b0:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
 23f33b4:	ee66 8ae5 	vnmul.f32	s17, s13, s11
 23f33b8:	eee6 8a08 	vfma.f32	s17, s12, s16
 23f33bc:	ee28 8a25 	vmul.f32	s16, s16, s11
 23f33c0:	eea6 8a26 	vfma.f32	s16, s12, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23f33c4:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_ADD(scratch[3],scratch[1],scratch[2]);
 23f33c8:	ee37 aa88 	vadd.f32	s20, s15, s16
 23f33cc:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_SUB(scratch[0],scratch[1],scratch[2]);
 23f33d0:	ee37 8ac8 	vsub.f32	s16, s15, s16
 23f33d4:	ee77 8a68 	vsub.f32	s17, s14, s17
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23f33d8:	f7f6 fade 	bl	23e9998 <__aeabi_f2d>
 23f33dc:	ec41 0b1b 	vmov	d11, r0, r1
 23f33e0:	ee1a 0a90 	vmov	r0, s21
 23f33e4:	f7f6 fad8 	bl	23e9998 <__aeabi_f2d>
 23f33e8:	2200      	movs	r2, #0
 23f33ea:	4bf1      	ldr	r3, [pc, #964]	; (23f37b0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23f33ec:	f7f6 fb2c 	bl	23e9a48 <__aeabi_dmul>
 23f33f0:	4602      	mov	r2, r0
 23f33f2:	460b      	mov	r3, r1
 23f33f4:	ec51 0b1b 	vmov	r0, r1, d11
 23f33f8:	f7f6 f96e 	bl	23e96d8 <__aeabi_dsub>
 23f33fc:	f7f6 fe1c 	bl	23ea038 <__aeabi_d2f>
 23f3400:	f844 0c04 	str.w	r0, [r4, #-4]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 23f3404:	f856 0c04 	ldr.w	r0, [r6, #-4]
 23f3408:	f7f6 fac6 	bl	23e9998 <__aeabi_f2d>
 23f340c:	ec41 0b1b 	vmov	d11, r0, r1
 23f3410:	ee1a 0a10 	vmov	r0, s20
 23f3414:	f7f6 fac0 	bl	23e9998 <__aeabi_f2d>
 23f3418:	2200      	movs	r2, #0
 23f341a:	4be5      	ldr	r3, [pc, #916]	; (23f37b0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23f341c:	f7f6 fb14 	bl	23e9a48 <__aeabi_dmul>
 23f3420:	460b      	mov	r3, r1
 23f3422:	4602      	mov	r2, r0
 23f3424:	ec51 0b1b 	vmov	r0, r1, d11
 23f3428:	f7f6 f956 	bl	23e96d8 <__aeabi_dsub>
 23f342c:	f7f6 fe04 	bl	23ea038 <__aeabi_d2f>
 23f3430:	f8c8 0004 	str.w	r0, [r8, #4]
         C_ADDTO(*Fout,scratch[3]);
 23f3434:	ed56 7a02 	vldr	s15, [r6, #-8]
 23f3438:	ee77 7aaa 	vadd.f32	s15, s15, s21
 23f343c:	ed46 7a02 	vstr	s15, [r6, #-8]
 23f3440:	ed56 7a01 	vldr	s15, [r6, #-4]
 23f3444:	ee77 7a8a 	vadd.f32	s15, s15, s20
 23f3448:	ed46 7a01 	vstr	s15, [r6, #-4]
         Fout[m2].r = Fout[m].r + scratch[0].i;
 23f344c:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f3450:	eee9 7a08 	vfma.f32	s15, s18, s16
 23f3454:	edc9 7a00 	vstr	s15, [r9]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23f3458:	edd8 7a01 	vldr	s15, [r8, #4]
 23f345c:	eee9 7aa8 	vfma.f32	s15, s19, s17
 23f3460:	edc9 7a01 	vstr	s15, [r9, #4]
         Fout[m].r -= scratch[0].i;
 23f3464:	ed54 7a01 	vldr	s15, [r4, #-4]
 23f3468:	eee9 7a88 	vfma.f32	s15, s19, s16
 23f346c:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].i += scratch[0].r;
 23f3470:	edd8 7a01 	vldr	s15, [r8, #4]
 23f3474:	eee9 7a28 	vfma.f32	s15, s18, s17
 23f3478:	edc8 7a01 	vstr	s15, [r8, #4]
     }while(--k);
 23f347c:	9b03      	ldr	r3, [sp, #12]
 23f347e:	3f01      	subs	r7, #1
 23f3480:	f106 0608 	add.w	r6, r6, #8
 23f3484:	f108 0808 	add.w	r8, r8, #8
 23f3488:	445d      	add	r5, fp
 23f348a:	f109 0908 	add.w	r9, r9, #8
 23f348e:	449a      	add	sl, r3
 23f3490:	f104 0408 	add.w	r4, r4, #8
 23f3494:	f47f af72 	bne.w	23f337c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
 23f3498:	e755      	b.n	23f3346 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        tw3 += fstride*3;
 23f349a:	2218      	movs	r2, #24
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 23f349c:	4657      	mov	r7, sl
    tw3 = tw2 = tw1 = st->twiddles;
 23f349e:	46a9      	mov	r9, r5
        tw3 += fstride*3;
 23f34a0:	46ae      	mov	lr, r5
 23f34a2:	46a8      	mov	r8, r5
        tw1 += fstride;
 23f34a4:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
        tw2 += fstride*2;
 23f34a8:	ea4f 1a06 	mov.w	sl, r6, lsl #4
        tw3 += fstride*3;
 23f34ac:	4356      	muls	r6, r2
 23f34ae:	eb04 1007 	add.w	r0, r4, r7, lsl #4
 23f34b2:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
 23f34b6:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
 23f34ba:	f104 0c04 	add.w	ip, r4, #4
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f34be:	ed91 7a01 	vldr	s14, [r1, #4]
 23f34c2:	edd9 6a43 	vldr	s13, [r9, #268]	; 0x10c
 23f34c6:	ed91 5a00 	vldr	s10, [r1]
 23f34ca:	edd9 7a42 	vldr	s15, [r9, #264]	; 0x108
 23f34ce:	ee26 6ac7 	vnmul.f32	s12, s13, s14
 23f34d2:	eea5 6a27 	vfma.f32	s12, s10, s15
 23f34d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f34da:	eee5 7a26 	vfma.f32	s15, s10, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f34de:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f34e2:	eeb0 7a67 	vmov.f32	s14, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f34e6:	edd8 7a43 	vldr	s15, [r8, #268]	; 0x10c
 23f34ea:	ed90 5a00 	vldr	s10, [r0]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23f34ee:	eef0 5a46 	vmov.f32	s11, s12
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f34f2:	ee67 6ae4 	vnmul.f32	s13, s15, s9
 23f34f6:	ed98 6a42 	vldr	s12, [r8, #264]	; 0x108
 23f34fa:	eee5 6a06 	vfma.f32	s13, s10, s12
 23f34fe:	ee26 6a24 	vmul.f32	s12, s12, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f3502:	edd3 3a01 	vldr	s7, [r3, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23f3506:	eea5 6a27 	vfma.f32	s12, s10, s15
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f350a:	ed9e 5a43 	vldr	s10, [lr, #268]	; 0x10c
 23f350e:	edd3 4a00 	vldr	s9, [r3]
 23f3512:	edde 7a42 	vldr	s15, [lr, #264]	; 0x108
 23f3516:	ee25 4a63 	vnmul.f32	s8, s10, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f351a:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f351e:	eea4 4aa7 	vfma.f32	s8, s9, s15
 23f3522:	ee67 7aa3 	vmul.f32	s15, s15, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f3526:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23f352a:	eee4 7a85 	vfma.f32	s15, s9, s10
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f352e:	ee73 4a66 	vsub.f32	s9, s6, s13
        C_ADDTO(*Fout, scratch[1]);
 23f3532:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23f3536:	ee35 3a84 	vadd.f32	s6, s11, s8
        C_ADDTO(*Fout, scratch[1]);
 23f353a:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23f353e:	ee33 5ac6 	vsub.f32	s10, s7, s12
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f3542:	ee76 6ac3 	vsub.f32	s13, s13, s6
        C_ADDTO(*Fout, scratch[1]);
 23f3546:	ee36 6a23 	vadd.f32	s12, s12, s7
 23f354a:	ed84 6a01 	vstr	s12, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f354e:	edc0 6a00 	vstr	s13, [r0]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23f3552:	ee77 3a27 	vadd.f32	s7, s14, s15
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23f3556:	ee35 6ac4 	vsub.f32	s12, s11, s8
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23f355a:	edd4 5a01 	vldr	s11, [r4, #4]
 23f355e:	ee75 5ae3 	vsub.f32	s11, s11, s7
 23f3562:	edc0 5a01 	vstr	s11, [r0, #4]
        C_ADDTO( *Fout , scratch[3] );
 23f3566:	ed5c 6a01 	vldr	s13, [ip, #-4]
 23f356a:	ee76 6a83 	vadd.f32	s13, s13, s6
 23f356e:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23f3572:	ee77 7a67 	vsub.f32	s15, s14, s15
        C_ADDTO( *Fout , scratch[3] );
 23f3576:	ed94 7a01 	vldr	s14, [r4, #4]
 23f357a:	ee37 7a23 	vadd.f32	s14, s14, s7
 23f357e:	ed84 7a01 	vstr	s14, [r4, #4]
        if(st->inverse) {
 23f3582:	686a      	ldr	r2, [r5, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23f3584:	ee74 6aa7 	vadd.f32	s13, s9, s15
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23f3588:	ee35 7a46 	vsub.f32	s14, s10, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
 23f358c:	ee74 7ae7 	vsub.f32	s15, s9, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
 23f3590:	ee35 6a06 	vadd.f32	s12, s10, s12
        if(st->inverse) {
 23f3594:	b1c2      	cbz	r2, 23f35c8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x37c>
            Fout[m].r = scratch[5].r - scratch[4].i;
 23f3596:	edc1 7a00 	vstr	s15, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
 23f359a:	ed81 6a01 	vstr	s12, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23f359e:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23f35a2:	ed83 7a01 	vstr	s14, [r3, #4]
    }while(--k);
 23f35a6:	3f01      	subs	r7, #1
        ++Fout;
 23f35a8:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
 23f35ac:	f101 0108 	add.w	r1, r1, #8
 23f35b0:	44d9      	add	r9, fp
 23f35b2:	f100 0008 	add.w	r0, r0, #8
 23f35b6:	44d0      	add	r8, sl
 23f35b8:	f103 0308 	add.w	r3, r3, #8
 23f35bc:	44b6      	add	lr, r6
 23f35be:	f10c 0c08 	add.w	ip, ip, #8
 23f35c2:	f47f af7c 	bne.w	23f34be <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x272>
 23f35c6:	e6be      	b.n	23f3346 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
 23f35c8:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
 23f35cc:	ed81 7a01 	vstr	s14, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 23f35d0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 23f35d4:	ed83 6a01 	vstr	s12, [r3, #4]
 23f35d8:	e7e5      	b.n	23f35a6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x35a>
    ya = twiddles[fstride*m];
 23f35da:	fb0a f306 	mul.w	r3, sl, r6
 23f35de:	9a05      	ldr	r2, [sp, #20]
    Fout4=Fout0+4*m;
 23f35e0:	46ac      	mov	ip, r5
    ya = twiddles[fstride*m];
 23f35e2:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 23f35e6:	ed97 2a01 	vldr	s4, [r7, #4]
 23f35ea:	00f2      	lsls	r2, r6, #3
 23f35ec:	9203      	str	r2, [sp, #12]
 23f35ee:	2218      	movs	r2, #24
    Fout4=Fout0+4*m;
 23f35f0:	46ae      	mov	lr, r5
 23f35f2:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
 23f35f4:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f35f8:	eef1 0a42 	vneg.f32	s1, s4
 23f35fc:	4372      	muls	r2, r6
    ya = twiddles[fstride*m];
 23f35fe:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
 23f3602:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
 23f3606:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
 23f360a:	ed97 1a00 	vldr	s2, [r7]
 23f360e:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
 23f3612:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 23f3616:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
 23f361a:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
 23f361e:	eb03 100a 	add.w	r0, r3, sl, lsl #4
 23f3622:	9204      	str	r2, [sp, #16]
 23f3624:	0176      	lsls	r6, r6, #5
    for ( u=0; u<m; ++u ) {
 23f3626:	45ca      	cmp	sl, r9
 23f3628:	f104 0408 	add.w	r4, r4, #8
 23f362c:	f107 0708 	add.w	r7, r7, #8
 23f3630:	f103 0308 	add.w	r3, r3, #8
 23f3634:	f101 0108 	add.w	r1, r1, #8
 23f3638:	f100 0008 	add.w	r0, r0, #8
 23f363c:	f77f ae83 	ble.w	23f3346 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f3640:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23f3644:	ed57 3a01 	vldr	s7, [r7, #-4]
 23f3648:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
 23f364c:	ed17 6a02 	vldr	s12, [r7, #-8]
 23f3650:	ee26 3ae3 	vnmul.f32	s6, s13, s7
 23f3654:	eea6 3a25 	vfma.f32	s6, s12, s11
 23f3658:	ee65 5aa3 	vmul.f32	s11, s11, s7
 23f365c:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f3660:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
 23f3664:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f3668:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f366c:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
 23f3670:	ed13 5a02 	vldr	s10, [r3, #-8]
 23f3674:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23f3678:	ee64 6aa6 	vmul.f32	s13, s9, s13
 23f367c:	eee5 6a25 	vfma.f32	s13, s10, s11
 23f3680:	eea5 6a24 	vfma.f32	s12, s10, s9
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f3684:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f3688:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f368c:	ed51 6a01 	vldr	s13, [r1, #-4]
 23f3690:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
 23f3694:	ed11 4a02 	vldr	s8, [r1, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23f3698:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f369c:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23f36a0:	eea4 6a05 	vfma.f32	s12, s8, s10
 23f36a4:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f36a8:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f36ac:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f36b0:	ed50 5a01 	vldr	s11, [r0, #-4]
 23f36b4:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23f36b8:	eef0 9a43 	vmov.f32	s19, s6
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23f36bc:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f36c0:	ee26 3ae5 	vnmul.f32	s6, s13, s11
 23f36c4:	ed10 6a02 	vldr	s12, [r0, #-8]
 23f36c8:	eea6 3a04 	vfma.f32	s6, s12, s8
 23f36cc:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23f36d0:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23f36d4:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23f36d8:	ee78 9a80 	vadd.f32	s19, s17, s0
        scratch[0] = *Fout0;
 23f36dc:	ed14 7a02 	vldr	s14, [r4, #-8]
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23f36e0:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23f36e4:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23f36e8:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
 23f36ec:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23f36f0:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
 23f36f4:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[0] = *Fout0;
 23f36f8:	ed54 7a01 	vldr	s15, [r4, #-4]
        Fout0->r += scratch[7].r + scratch[8].r;
 23f36fc:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
 23f3700:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f3704:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->i += scratch[7].i + scratch[8].i;
 23f3708:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23f370c:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
 23f3710:	ed04 5a01 	vstr	s10, [r4, #-4]
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23f3714:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f3718:	eeb0 5a67 	vmov.f32	s10, s15
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23f371c:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f3720:	eee1 4a8a 	vfma.f32	s9, s3, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23f3724:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23f3728:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f372c:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f3730:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23f3734:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23f3738:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f373c:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23f3740:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23f3744:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23f3748:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23f374c:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23f3750:	ee66 6a42 	vnmul.f32	s13, s12, s4
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23f3754:	eee1 7a09 	vfma.f32	s15, s2, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f3758:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f375c:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f3760:	ee35 0a44 	vsub.f32	s0, s10, s8
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23f3764:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23f3768:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23f376c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 23f3770:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23f3774:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f3778:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23f377c:	ed40 4a02 	vstr	s9, [r0, #-8]
 23f3780:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f3784:	ed03 6a02 	vstr	s12, [r3, #-8]
 23f3788:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f378c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 23f3790:	9a03      	ldr	r2, [sp, #12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23f3792:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23f3796:	4415      	add	r5, r2
 23f3798:	9a04      	ldr	r2, [sp, #16]
 23f379a:	ed01 7a02 	vstr	s14, [r1, #-8]
 23f379e:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
 23f37a2:	f109 0901 	add.w	r9, r9, #1
 23f37a6:	44d8      	add	r8, fp
 23f37a8:	4496      	add	lr, r2
 23f37aa:	44b4      	add	ip, r6
 23f37ac:	e73b      	b.n	23f3626 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3da>
 23f37ae:	bf00      	nop
 23f37b0:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
 23f37b4:	682b      	ldr	r3, [r5, #0]
 23f37b6:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 23f37b8:	9b03      	ldr	r3, [sp, #12]
 23f37ba:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 23f37be:	4658      	mov	r0, fp
 23f37c0:	f7fd fca1 	bl	23f1106 <_Z9ei_mallocj>
 23f37c4:	f04f 0c00 	mov.w	ip, #0
 23f37c8:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
 23f37ca:	4665      	mov	r5, ip
 23f37cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23f37d0:	9207      	str	r2, [sp, #28]
 23f37d2:	fb0a f206 	mul.w	r2, sl, r6
 23f37d6:	4483      	add	fp, r0
 23f37d8:	9206      	str	r2, [sp, #24]
 23f37da:	45aa      	cmp	sl, r5
 23f37dc:	dd51      	ble.n	23f3882 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x636>
 23f37de:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f37e0:	2200      	movs	r2, #0
 23f37e2:	9903      	ldr	r1, [sp, #12]
 23f37e4:	4291      	cmp	r1, r2
 23f37e6:	dc38      	bgt.n	23f385a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60e>
 23f37e8:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f37ea:	f04f 0800 	mov.w	r8, #0
 23f37ee:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 23f37f2:	9903      	ldr	r1, [sp, #12]
 23f37f4:	4541      	cmp	r1, r8
 23f37f6:	dd41      	ble.n	23f387c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x630>
            Fout[ k ] = scratch[0];
 23f37f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f37fc:	e882 0003 	stmia.w	r2, {r0, r1}
            int twidx=0;
 23f3800:	2100      	movs	r1, #0
 23f3802:	f103 0008 	add.w	r0, r3, #8
            for (q=1;q<p;++q ) {
 23f3806:	4558      	cmp	r0, fp
 23f3808:	d031      	beq.n	23f386e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x622>
                if (twidx>=Norig) twidx-=Norig;
 23f380a:	9f04      	ldr	r7, [sp, #16]
                twidx += fstride * k;
 23f380c:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
 23f380e:	428f      	cmp	r7, r1
 23f3810:	bfd8      	it	le
 23f3812:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f3814:	9f05      	ldr	r7, [sp, #20]
 23f3816:	ed90 5a01 	vldr	s10, [r0, #4]
 23f381a:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
 23f381e:	ed99 6a01 	vldr	s12, [r9, #4]
 23f3822:	edd0 5a00 	vldr	s11, [r0]
 23f3826:	edd9 7a00 	vldr	s15, [r9]
 23f382a:	ee26 7a45 	vnmul.f32	s14, s12, s10
 23f382e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 23f3832:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
 23f3836:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f383a:	ee67 7a85 	vmul.f32	s15, s15, s10
                C_ADDTO( Fout[ k ] ,t);
 23f383e:	ee37 7a26 	vadd.f32	s14, s14, s13
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23f3842:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
 23f3846:	ed82 7a00 	vstr	s14, [r2]
 23f384a:	ed92 7a01 	vldr	s14, [r2, #4]
 23f384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 23f3852:	3008      	adds	r0, #8
 23f3854:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
 23f3858:	e7d5      	b.n	23f3806 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ba>
            scratch[q1] = Fout[ k  ];
 23f385a:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 23f385e:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
 23f3862:	c903      	ldmia	r1, {r0, r1}
            k += m;
 23f3864:	44d6      	add	lr, sl
            scratch[q1] = Fout[ k  ];
 23f3866:	e888 0003 	stmia.w	r8, {r0, r1}
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f386a:	3201      	adds	r2, #1
 23f386c:	e7b9      	b.n	23f37e2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x596>
        for ( q1=0 ; q1<p ; ++q1 ) {
 23f386e:	9907      	ldr	r1, [sp, #28]
 23f3870:	f108 0801 	add.w	r8, r8, #1
 23f3874:	440a      	add	r2, r1
 23f3876:	9906      	ldr	r1, [sp, #24]
 23f3878:	448e      	add	lr, r1
 23f387a:	e7ba      	b.n	23f37f2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5a6>
    for ( u=0; u<m; ++u ) {
 23f387c:	3501      	adds	r5, #1
 23f387e:	44b4      	add	ip, r6
 23f3880:	e7ab      	b.n	23f37da <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58e>
    KISS_FFT_TMP_FREE(scratch);
 23f3882:	4618      	mov	r0, r3
}
 23f3884:	b009      	add	sp, #36	; 0x24
 23f3886:	ecbd 8b08 	vpop	{d8-d11}
 23f388a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
 23f388e:	f7fd bc3e 	b.w	23f110e <_Z7ei_freePv>
 23f3892:	bf00      	nop
 23f3894:	0000      	movs	r0, r0
	...

023f3898 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 23f3898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 23f389c:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
 23f38a0:	ed2d 8b02 	vpush	{d8}
 23f38a4:	4604      	mov	r4, r0
 23f38a6:	460e      	mov	r6, r1
 23f38a8:	4615      	mov	r5, r2
 23f38aa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    size_t memneeded = sizeof(struct kiss_fft_state)
 23f38ae:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
 23f38b0:	2b00      	cmp	r3, #0
 23f38b2:	d13d      	bne.n	23f3930 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 23f38b4:	4638      	mov	r0, r7
 23f38b6:	f7fd fc26 	bl	23f1106 <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
 23f38ba:	4605      	mov	r5, r0
 23f38bc:	b3d0      	cbz	r0, 23f3934 <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
 23f38be:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
 23f38c2:	f505 7a84 	add.w	sl, r5, #264	; 0x108
 23f38c6:	2e00      	cmp	r6, #0
 23f38c8:	d044      	beq.n	23f3954 <kiss_fft_alloc+0xbc>
 23f38ca:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
 23f38cc:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
 23f38d0:	4620      	mov	r0, r4
 23f38d2:	f7f6 f84f 	bl	23e9974 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23f38d6:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
 23f38d8:	4680      	mov	r8, r0
 23f38da:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23f38dc:	f106 0608 	add.w	r6, r6, #8
 23f38e0:	da67      	bge.n	23f39b2 <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
 23f38e2:	4650      	mov	r0, sl
 23f38e4:	f7f6 f846 	bl	23e9974 <__aeabi_i2d>
 23f38e8:	a34b      	add	r3, pc, #300	; (adr r3, 23f3a18 <kiss_fft_alloc+0x180>)
 23f38ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f38ee:	f7f6 f8ab 	bl	23e9a48 <__aeabi_dmul>
 23f38f2:	4642      	mov	r2, r8
 23f38f4:	464b      	mov	r3, r9
 23f38f6:	f7f6 f9d1 	bl	23e9c9c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23f38fa:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
 23f38fe:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23f3902:	f005 fe4d 	bl	23f95a0 <cos>
 23f3906:	ec51 0b10 	vmov	r0, r1, d0
 23f390a:	f7f6 fb95 	bl	23ea038 <__aeabi_d2f>
 23f390e:	eeb0 0a48 	vmov.f32	s0, s16
 23f3912:	eef0 0a68 	vmov.f32	s1, s17
 23f3916:	f846 0c08 	str.w	r0, [r6, #-8]
 23f391a:	f005 ffb1 	bl	23f9880 <sin>
 23f391e:	ec51 0b10 	vmov	r0, r1, d0
 23f3922:	f7f6 fb89 	bl	23ea038 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23f3926:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
 23f392a:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
 23f392e:	e7cf      	b.n	23f38d0 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
 23f3930:	b952      	cbnz	r2, 23f3948 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
 23f3932:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
 23f3934:	f1bb 0f00 	cmp.w	fp, #0
 23f3938:	d001      	beq.n	23f393e <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
 23f393a:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
 23f393e:	4628      	mov	r0, r5
 23f3940:	ecbd 8b02 	vpop	{d8}
 23f3944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
 23f3948:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
 23f394a:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
 23f394c:	42ba      	cmp	r2, r7
 23f394e:	d2b6      	bcs.n	23f38be <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
 23f3950:	2500      	movs	r5, #0
 23f3952:	e7ef      	b.n	23f3934 <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
 23f3954:	4620      	mov	r0, r4
 23f3956:	f7f6 f80d 	bl	23e9974 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23f395a:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
 23f395c:	4680      	mov	r8, r0
 23f395e:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23f3960:	f10a 0a08 	add.w	sl, sl, #8
 23f3964:	da25      	bge.n	23f39b2 <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
 23f3966:	4630      	mov	r0, r6
 23f3968:	f7f6 f804 	bl	23e9974 <__aeabi_i2d>
 23f396c:	a32c      	add	r3, pc, #176	; (adr r3, 23f3a20 <kiss_fft_alloc+0x188>)
 23f396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3972:	f7f6 f869 	bl	23e9a48 <__aeabi_dmul>
 23f3976:	4642      	mov	r2, r8
 23f3978:	464b      	mov	r3, r9
 23f397a:	f7f6 f98f 	bl	23e9c9c <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23f397e:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
 23f3982:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23f3986:	f005 fe0b 	bl	23f95a0 <cos>
 23f398a:	ec51 0b10 	vmov	r0, r1, d0
 23f398e:	f7f6 fb53 	bl	23ea038 <__aeabi_d2f>
 23f3992:	eeb0 0a48 	vmov.f32	s0, s16
 23f3996:	eef0 0a68 	vmov.f32	s1, s17
 23f399a:	f84a 0c08 	str.w	r0, [sl, #-8]
 23f399e:	f005 ff6f 	bl	23f9880 <sin>
 23f39a2:	ec51 0b10 	vmov	r0, r1, d0
 23f39a6:	f7f6 fb47 	bl	23ea038 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23f39aa:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
 23f39ac:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
 23f39b0:	e7d0      	b.n	23f3954 <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
 23f39b2:	4620      	mov	r0, r4
 23f39b4:	f7f5 ffde 	bl	23e9974 <__aeabi_i2d>
 23f39b8:	ec41 0b10 	vmov	d0, r0, r1
 23f39bc:	f005 ffe2 	bl	23f9984 <sqrt>
 23f39c0:	f005 fe4e 	bl	23f9660 <floor>
    int p=4;
 23f39c4:	2604      	movs	r6, #4
    floor_sqrt = floor( sqrt((double)n) );
 23f39c6:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
 23f39ca:	f105 0a08 	add.w	sl, r5, #8
        while (n % p) {
 23f39ce:	fb94 f3f6 	sdiv	r3, r4, r6
 23f39d2:	fb06 4213 	mls	r2, r6, r3, r4
 23f39d6:	b1aa      	cbz	r2, 23f3a04 <kiss_fft_alloc+0x16c>
            switch (p) {
 23f39d8:	2e02      	cmp	r6, #2
 23f39da:	d00f      	beq.n	23f39fc <kiss_fft_alloc+0x164>
 23f39dc:	2e04      	cmp	r6, #4
 23f39de:	d00f      	beq.n	23f3a00 <kiss_fft_alloc+0x168>
                default: p += 2; break;
 23f39e0:	3602      	adds	r6, #2
            if (p > floor_sqrt)
 23f39e2:	4630      	mov	r0, r6
 23f39e4:	f7f5 ffc6 	bl	23e9974 <__aeabi_i2d>
 23f39e8:	4602      	mov	r2, r0
 23f39ea:	460b      	mov	r3, r1
 23f39ec:	4640      	mov	r0, r8
 23f39ee:	4649      	mov	r1, r9
 23f39f0:	f7f6 fa9c 	bl	23e9f2c <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
 23f39f4:	2800      	cmp	r0, #0
 23f39f6:	bf18      	it	ne
 23f39f8:	4626      	movne	r6, r4
 23f39fa:	e7e8      	b.n	23f39ce <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
 23f39fc:	2603      	movs	r6, #3
 23f39fe:	e7f0      	b.n	23f39e2 <kiss_fft_alloc+0x14a>
            switch (p) {
 23f3a00:	2602      	movs	r6, #2
 23f3a02:	e7ee      	b.n	23f39e2 <kiss_fft_alloc+0x14a>
    } while (n > 1);
 23f3a04:	2b01      	cmp	r3, #1
        n /= p;
 23f3a06:	461c      	mov	r4, r3
        *facbuf++ = n;
 23f3a08:	e9ca 6300 	strd	r6, r3, [sl]
    } while (n > 1);
 23f3a0c:	dd92      	ble.n	23f3934 <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
 23f3a0e:	f10a 0a08 	add.w	sl, sl, #8
 23f3a12:	e7dc      	b.n	23f39ce <kiss_fft_alloc+0x136>
 23f3a14:	f3af 8000 	nop.w
 23f3a18:	54442d18 	.word	0x54442d18
 23f3a1c:	401921fb 	.word	0x401921fb
 23f3a20:	54442d18 	.word	0x54442d18
 23f3a24:	c01921fb 	.word	0xc01921fb

023f3a28 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 23f3a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f3a2c:	4604      	mov	r4, r0
    if (fin == fout) {
 23f3a2e:	4291      	cmp	r1, r2
{
 23f3a30:	460d      	mov	r5, r1
 23f3a32:	4610      	mov	r0, r2
 23f3a34:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23f3a36:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
 23f3a3a:	d117      	bne.n	23f3a6c <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 23f3a3c:	6820      	ldr	r0, [r4, #0]
 23f3a3e:	00c0      	lsls	r0, r0, #3
 23f3a40:	f7fd fb61 	bl	23f1106 <_Z9ei_mallocj>
 23f3a44:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23f3a46:	463b      	mov	r3, r7
 23f3a48:	4629      	mov	r1, r5
 23f3a4a:	2201      	movs	r2, #1
 23f3a4c:	e9cd 8400 	strd	r8, r4, [sp]
 23f3a50:	f7ff fbfc 	bl	23f324c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 23f3a54:	6822      	ldr	r2, [r4, #0]
 23f3a56:	4631      	mov	r1, r6
 23f3a58:	4628      	mov	r0, r5
 23f3a5a:	00d2      	lsls	r2, r2, #3
 23f3a5c:	f007 fb0b 	bl	23fb076 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 23f3a60:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 23f3a62:	b002      	add	sp, #8
 23f3a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
 23f3a68:	f7fd bb51 	b.w	23f110e <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 23f3a6c:	2201      	movs	r2, #1
 23f3a6e:	e9cd 8400 	strd	r8, r4, [sp]
 23f3a72:	f7ff fbeb 	bl	23f324c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 23f3a76:	b002      	add	sp, #8
 23f3a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f3a7c <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
 23f3a7c:	2301      	movs	r3, #1
 23f3a7e:	f7ff bfd3 	b.w	23f3a28 <kiss_fft_stride>
 23f3a82:	0000      	movs	r0, r0
 23f3a84:	0000      	movs	r0, r0
	...

023f3a88 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 23f3a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3a8c:	ed2d 8b02 	vpush	{d8}
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
 23f3a90:	2500      	movs	r5, #0
{
 23f3a92:	b085      	sub	sp, #20

    if (nfft & 1) {
 23f3a94:	f010 0a01 	ands.w	sl, r0, #1
{
 23f3a98:	468b      	mov	fp, r1
 23f3a9a:	4614      	mov	r4, r2
 23f3a9c:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
 23f3a9e:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
 23f3aa0:	d009      	beq.n	23f3ab6 <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
 23f3aa2:	4863      	ldr	r0, [pc, #396]	; (23f3c30 <kiss_fftr_alloc+0x1a8>)
 23f3aa4:	f7fd fb02 	bl	23f10ac <_Z9ei_printfPKcz>
        return NULL;
 23f3aa8:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
 23f3aaa:	4620      	mov	r0, r4
 23f3aac:	b005      	add	sp, #20
 23f3aae:	ecbd 8b02 	vpop	{d8}
 23f3ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
 23f3ab6:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 23f3ab8:	ab03      	add	r3, sp, #12
 23f3aba:	4652      	mov	r2, sl
 23f3abc:	4628      	mov	r0, r5
 23f3abe:	f8cd a000 	str.w	sl, [sp]
 23f3ac2:	f7ff fee9 	bl	23f3898 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 23f3ac6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 23f3aca:	9b03      	ldr	r3, [sp, #12]
 23f3acc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 23f3ad0:	1076      	asrs	r6, r6, #1
 23f3ad2:	330c      	adds	r3, #12
 23f3ad4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
 23f3ad8:	2f00      	cmp	r7, #0
 23f3ada:	d158      	bne.n	23f3b8e <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 23f3adc:	4630      	mov	r0, r6
 23f3ade:	f7fd fb12 	bl	23f1106 <_Z9ei_mallocj>
 23f3ae2:	4604      	mov	r4, r0
    if (!st)
 23f3ae4:	2c00      	cmp	r4, #0
 23f3ae6:	d0e0      	beq.n	23f3aaa <kiss_fftr_alloc+0x22>
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 23f3ae8:	f104 020c 	add.w	r2, r4, #12
 23f3aec:	6022      	str	r2, [r4, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23f3aee:	9b03      	ldr	r3, [sp, #12]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f3af0:	4659      	mov	r1, fp
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23f3af2:	4413      	add	r3, r2
 23f3af4:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 23f3af6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 23f3afa:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f3afc:	2300      	movs	r3, #0
 23f3afe:	4628      	mov	r0, r5
 23f3b00:	9300      	str	r3, [sp, #0]
        for (i = 0; i < nfft/2; ++i) {
 23f3b02:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23f3b06:	ab03      	add	r3, sp, #12
 23f3b08:	f7ff fec6 	bl	23f3898 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
 23f3b0c:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
 23f3b0e:	f1bb 0f00 	cmp.w	fp, #0
 23f3b12:	d042      	beq.n	23f3b9a <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
 23f3b14:	4557      	cmp	r7, sl
 23f3b16:	dd7d      	ble.n	23f3c14 <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23f3b18:	f10a 0a01 	add.w	sl, sl, #1
 23f3b1c:	4650      	mov	r0, sl
 23f3b1e:	f7f5 ff29 	bl	23e9974 <__aeabi_i2d>
 23f3b22:	4680      	mov	r8, r0
 23f3b24:	4628      	mov	r0, r5
 23f3b26:	4689      	mov	r9, r1
 23f3b28:	f7f5 ff24 	bl	23e9974 <__aeabi_i2d>
 23f3b2c:	4602      	mov	r2, r0
 23f3b2e:	460b      	mov	r3, r1
 23f3b30:	4640      	mov	r0, r8
 23f3b32:	4649      	mov	r1, r9
 23f3b34:	f7f6 f8b2 	bl	23e9c9c <__aeabi_ddiv>
 23f3b38:	2200      	movs	r2, #0
 23f3b3a:	4b3e      	ldr	r3, [pc, #248]	; (23f3c34 <kiss_fftr_alloc+0x1ac>)
 23f3b3c:	f7f5 fdce 	bl	23e96dc <__adddf3>
            double phase =
 23f3b40:	a337      	add	r3, pc, #220	; (adr r3, 23f3c20 <kiss_fftr_alloc+0x198>)
 23f3b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3b46:	f7f5 ff7f 	bl	23e9a48 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23f3b4a:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23f3b4e:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23f3b52:	f005 fd25 	bl	23f95a0 <cos>
 23f3b56:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 23f3b5a:	68a3      	ldr	r3, [r4, #8]
 23f3b5c:	ec51 0b10 	vmov	r0, r1, d0
 23f3b60:	f1a8 0808 	sub.w	r8, r8, #8
 23f3b64:	eb03 0908 	add.w	r9, r3, r8
 23f3b68:	f7f6 fa66 	bl	23ea038 <__aeabi_d2f>
 23f3b6c:	eeb0 0a48 	vmov.f32	s0, s16
 23f3b70:	eef0 0a68 	vmov.f32	s1, s17
 23f3b74:	f8c9 0000 	str.w	r0, [r9]
 23f3b78:	f005 fe82 	bl	23f9880 <sin>
 23f3b7c:	68a3      	ldr	r3, [r4, #8]
 23f3b7e:	ec51 0b10 	vmov	r0, r1, d0
 23f3b82:	4498      	add	r8, r3
 23f3b84:	f7f6 fa58 	bl	23ea038 <__aeabi_d2f>
 23f3b88:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23f3b8c:	e7c2      	b.n	23f3b14 <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
 23f3b8e:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
 23f3b90:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
 23f3b92:	42b3      	cmp	r3, r6
 23f3b94:	d2a6      	bcs.n	23f3ae4 <kiss_fftr_alloc+0x5c>
        return NULL;
 23f3b96:	4654      	mov	r4, sl
 23f3b98:	e787      	b.n	23f3aaa <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
 23f3b9a:	455f      	cmp	r7, fp
 23f3b9c:	dd3a      	ble.n	23f3c14 <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23f3b9e:	f10b 0b01 	add.w	fp, fp, #1
 23f3ba2:	4658      	mov	r0, fp
 23f3ba4:	f7f5 fee6 	bl	23e9974 <__aeabi_i2d>
 23f3ba8:	4680      	mov	r8, r0
 23f3baa:	4628      	mov	r0, r5
 23f3bac:	4689      	mov	r9, r1
 23f3bae:	f7f5 fee1 	bl	23e9974 <__aeabi_i2d>
 23f3bb2:	4602      	mov	r2, r0
 23f3bb4:	460b      	mov	r3, r1
 23f3bb6:	4640      	mov	r0, r8
 23f3bb8:	4649      	mov	r1, r9
 23f3bba:	f7f6 f86f 	bl	23e9c9c <__aeabi_ddiv>
 23f3bbe:	2200      	movs	r2, #0
 23f3bc0:	4b1c      	ldr	r3, [pc, #112]	; (23f3c34 <kiss_fftr_alloc+0x1ac>)
 23f3bc2:	f7f5 fd8b 	bl	23e96dc <__adddf3>
            double phase =
 23f3bc6:	a318      	add	r3, pc, #96	; (adr r3, 23f3c28 <kiss_fftr_alloc+0x1a0>)
 23f3bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3bcc:	f7f5 ff3c 	bl	23e9a48 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23f3bd0:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23f3bd4:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23f3bd8:	f005 fce2 	bl	23f95a0 <cos>
 23f3bdc:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 23f3be0:	68a3      	ldr	r3, [r4, #8]
 23f3be2:	ec51 0b10 	vmov	r0, r1, d0
 23f3be6:	f1a8 0808 	sub.w	r8, r8, #8
 23f3bea:	eb03 0908 	add.w	r9, r3, r8
 23f3bee:	f7f6 fa23 	bl	23ea038 <__aeabi_d2f>
 23f3bf2:	eeb0 0a48 	vmov.f32	s0, s16
 23f3bf6:	eef0 0a68 	vmov.f32	s1, s17
 23f3bfa:	f8c9 0000 	str.w	r0, [r9]
 23f3bfe:	f005 fe3f 	bl	23f9880 <sin>
 23f3c02:	68a3      	ldr	r3, [r4, #8]
 23f3c04:	ec51 0b10 	vmov	r0, r1, d0
 23f3c08:	4498      	add	r8, r3
 23f3c0a:	f7f6 fa15 	bl	23ea038 <__aeabi_d2f>
 23f3c0e:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23f3c12:	e7c2      	b.n	23f3b9a <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
 23f3c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f3c16:	2b00      	cmp	r3, #0
 23f3c18:	f43f af47 	beq.w	23f3aaa <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
 23f3c1c:	601e      	str	r6, [r3, #0]
 23f3c1e:	e744      	b.n	23f3aaa <kiss_fftr_alloc+0x22>
 23f3c20:	54442d18 	.word	0x54442d18
 23f3c24:	400921fb 	.word	0x400921fb
 23f3c28:	54442d18 	.word	0x54442d18
 23f3c2c:	c00921fb 	.word	0xc00921fb
 23f3c30:	023ff4dc 	.word	0x023ff4dc
 23f3c34:	3fe00000 	.word	0x3fe00000

023f3c38 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 23f3c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 23f3c3a:	6803      	ldr	r3, [r0, #0]
{
 23f3c3c:	4604      	mov	r4, r0
    if ( st->substate->inverse) {
 23f3c3e:	685b      	ldr	r3, [r3, #4]
{
 23f3c40:	4616      	mov	r6, r2
    if ( st->substate->inverse) {
 23f3c42:	b123      	cbz	r3, 23f3c4e <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
 23f3c44:	4836      	ldr	r0, [pc, #216]	; (23f3d20 <kiss_fftr+0xe8>)
 23f3c46:	9101      	str	r1, [sp, #4]
 23f3c48:	f7fd fa30 	bl	23f10ac <_Z9ei_printfPKcz>
 23f3c4c:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
 23f3c4e:	6820      	ldr	r0, [r4, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23f3c50:	6862      	ldr	r2, [r4, #4]
    ncfft = st->substate->nfft;
 23f3c52:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23f3c54:	f7ff ff12 	bl	23f3a7c <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 23f3c58:	6863      	ldr	r3, [r4, #4]
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 23f3c5a:	2200      	movs	r2, #0
    tdc.r = st->tmpbuf[0].r;
 23f3c5c:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
 23f3c60:	ed93 7a01 	vldr	s14, [r3, #4]
    freqdata[0].r = tdc.r + tdc.i;
 23f3c64:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
 23f3c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23f3c6c:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
 23f3c70:	edc6 6a00 	vstr	s13, [r6]
    freqdata[ncfft].r = tdc.r - tdc.i;
 23f3c74:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].i = freqdata[0].i = 0;
 23f3c78:	6072      	str	r2, [r6, #4]
 23f3c7a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
        fpk    = st->tmpbuf[k];
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f3c7c:	f06f 0207 	mvn.w	r2, #7
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f3c80:	2701      	movs	r7, #1

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f3c82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f3c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23f3c8a:	106d      	asrs	r5, r5, #1
 23f3c8c:	f106 0c08 	add.w	ip, r6, #8
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f3c90:	1b92      	subs	r2, r2, r6
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f3c92:	42bd      	cmp	r5, r7
 23f3c94:	f10c 0c08 	add.w	ip, ip, #8
 23f3c98:	db3f      	blt.n	23f3d1a <kiss_fftr+0xe2>
        fpk    = st->tmpbuf[k];
 23f3c9a:	6861      	ldr	r1, [r4, #4]
 23f3c9c:	00f8      	lsls	r0, r7, #3
 23f3c9e:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 23f3ca2:	edd6 5a01 	vldr	s11, [r6, #4]
 23f3ca6:	edd6 6a00 	vldr	s13, [r6]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23f3caa:	18d6      	adds	r6, r2, r3
 23f3cac:	4431      	add	r1, r6
 23f3cae:	edd1 4a00 	vldr	s9, [r1]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 23f3cb2:	edd1 7a01 	vldr	s15, [r1, #4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23f3cb6:	68a1      	ldr	r1, [r4, #8]
 23f3cb8:	3808      	subs	r0, #8
 23f3cba:	4401      	add	r1, r0
        C_ADD( f1k, fpk , fpnk );
 23f3cbc:	ee34 7aa6 	vadd.f32	s14, s9, s13
 23f3cc0:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
 23f3cc4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 23f3cc8:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23f3ccc:	edd1 4a01 	vldr	s9, [r1, #4]
 23f3cd0:	ed91 4a00 	vldr	s8, [r1]
 23f3cd4:	ee64 5ae7 	vnmul.f32	s11, s9, s15
 23f3cd8:	ee67 7a84 	vmul.f32	s15, s15, s8
 23f3cdc:	eee6 5a84 	vfma.f32	s11, s13, s8
 23f3ce0:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f3ce4:	ee77 6a25 	vadd.f32	s13, s14, s11
 23f3ce8:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f3cec:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23f3cf0:	ed4c 6a02 	vstr	s13, [ip, #-8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f3cf4:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f3cf8:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f3cfc:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f3d00:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f3d04:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f3d08:	ed4c 6a01 	vstr	s13, [ip, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f3d0c:	3701      	adds	r7, #1
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f3d0e:	ed03 7a02 	vstr	s14, [r3, #-8]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f3d12:	ed43 7a01 	vstr	s15, [r3, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f3d16:	3b08      	subs	r3, #8
 23f3d18:	e7bb      	b.n	23f3c92 <kiss_fftr+0x5a>
    }
}
 23f3d1a:	b003      	add	sp, #12
 23f3d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f3d1e:	bf00      	nop
 23f3d20:	023ff4f5 	.word	0x023ff4f5

023f3d24 <_ZNK19Microphone_PDM_Base16copySrcIncrementEv>:
	virtual size_t copySrcIncrement() const { return 1; };
 23f3d24:	2001      	movs	r0, #1
 23f3d26:	4770      	bx	lr

023f3d28 <_ZN22Microphone_PDM_RTL872x6uninitEv>:
	 * You normally will just initialize it once and only start and stop it as necessary, however
	 * you can completely uninitialize it if desired. The clkPin will be reset to INPUT mode.
	 */
	virtual int uninit() {
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
 23f3d28:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f3d2c:	4770      	bx	lr

023f3d2e <_ZN14Microphone_PDM6uninitEv>:
	}
 23f3d2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f3d32:	4770      	bx	lr

023f3d34 <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
 23f3d34:	f000 b8c8 	b.w	23f3ec8 <_ZN22Microphone_PDM_RTL872x4initEv>

023f3d38 <_ZN14Microphone_PDM5startEv>:
		return Microphone_PDM_MCU::start();
 23f3d38:	f000 b8da 	b.w	23f3ef0 <_ZN22Microphone_PDM_RTL872x5startEv>

023f3d3c <_ZN14Microphone_PDM4stopEv>:
		return Microphone_PDM_MCU::stop();
 23f3d3c:	f000 b8b9 	b.w	23f3eb2 <_ZN22Microphone_PDM_RTL872x4stopEv>

023f3d40 <_ZNK14Microphone_PDM16samplesAvailableEv>:
		return Microphone_PDM_MCU::samplesAvailable();
 23f3d40:	f000 b8de 	b.w	23f3f00 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>

023f3d44 <_ZN14Microphone_PDM11copySamplesEPv>:
		return Microphone_PDM_MCU::copySamples(pSamples);
 23f3d44:	f000 b8e5 	b.w	23f3f12 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>

023f3d48 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_RTL872x
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_RTL872x {
 23f3d48:	b510      	push	{r4, lr}
 23f3d4a:	4604      	mov	r4, r0
 23f3d4c:	4b02      	ldr	r3, [pc, #8]	; (23f3d58 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
 23f3d4e:	6003      	str	r3, [r0, #0]
 23f3d50:	f000 f8ae 	bl	23f3eb0 <_ZN22Microphone_PDM_RTL872xD1Ev>
 23f3d54:	4620      	mov	r0, r4
 23f3d56:	bd10      	pop	{r4, pc}
 23f3d58:	023ff524 	.word	0x023ff524

023f3d5c <_ZN18Microphone_PDM_MCUD0Ev>:
 23f3d5c:	b510      	push	{r4, lr}
 23f3d5e:	4604      	mov	r4, r0
 23f3d60:	f7ff fff2 	bl	23f3d48 <_ZN18Microphone_PDM_MCUD1Ev>
 23f3d64:	4620      	mov	r0, r4
 23f3d66:	2120      	movs	r1, #32
 23f3d68:	f7f6 fbe9 	bl	23ea53e <_ZdlPvj>
 23f3d6c:	4620      	mov	r0, r4
 23f3d6e:	bd10      	pop	{r4, pc}

023f3d70 <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM *Microphone_PDM::_instance = NULL;

Microphone_PDM::Microphone_PDM() {
}

Microphone_PDM::~Microphone_PDM() {
 23f3d70:	b510      	push	{r4, lr}
 23f3d72:	4604      	mov	r4, r0
 23f3d74:	4b02      	ldr	r3, [pc, #8]	; (23f3d80 <_ZN14Microphone_PDMD1Ev+0x10>)
 23f3d76:	6003      	str	r3, [r0, #0]
 23f3d78:	f7ff ffe6 	bl	23f3d48 <_ZN18Microphone_PDM_MCUD1Ev>

}
 23f3d7c:	4620      	mov	r0, r4
 23f3d7e:	bd10      	pop	{r4, pc}
 23f3d80:	023ff554 	.word	0x023ff554

023f3d84 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
 23f3d84:	b510      	push	{r4, lr}
 23f3d86:	4604      	mov	r4, r0
}
 23f3d88:	f7ff fff2 	bl	23f3d70 <_ZN14Microphone_PDMD1Ev>
 23f3d8c:	4620      	mov	r0, r4
 23f3d8e:	2124      	movs	r1, #36	; 0x24
 23f3d90:	f7f6 fbd5 	bl	23ea53e <_ZdlPvj>
 23f3d94:	4620      	mov	r0, r4
 23f3d96:	bd10      	pop	{r4, pc}

023f3d98 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
    _Function_base() : _M_manager(nullptr) { }
 23f3d98:	2300      	movs	r3, #0
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f3d9a:	b530      	push	{r4, r5, lr}
 23f3d9c:	b085      	sub	sp, #20
 23f3d9e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23f3da0:	688b      	ldr	r3, [r1, #8]
 23f3da2:	4605      	mov	r5, r0
 23f3da4:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23f3da6:	b133      	cbz	r3, 23f3db6 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f3da8:	2202      	movs	r2, #2
 23f3daa:	4668      	mov	r0, sp
 23f3dac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f3dae:	68e3      	ldr	r3, [r4, #12]
 23f3db0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f3db2:	68a3      	ldr	r3, [r4, #8]
 23f3db4:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
 23f3db6:	4669      	mov	r1, sp
 23f3db8:	4628      	mov	r0, r5
 23f3dba:	f000 f8c1 	bl	23f3f40 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>
 23f3dbe:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f3dc0:	4668      	mov	r0, sp
 23f3dc2:	f7fa f8d5 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
	}
 23f3dc6:	4620      	mov	r0, r4
 23f3dc8:	b005      	add	sp, #20
 23f3dca:	bd30      	pop	{r4, r5, pc}

023f3dcc <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
 23f3dcc:	b510      	push	{r4, lr}
 23f3dce:	4604      	mov	r4, r0
 23f3dd0:	f000 f8dc 	bl	23f3f8c <_ZN22Microphone_PDM_RTL872xC1Ev>
 23f3dd4:	4b02      	ldr	r3, [pc, #8]	; (23f3de0 <_ZN14Microphone_PDMC1Ev+0x14>)
}
 23f3dd6:	4620      	mov	r0, r4
Microphone_PDM::Microphone_PDM() {
 23f3dd8:	6023      	str	r3, [r4, #0]
 23f3dda:	2300      	movs	r3, #0
 23f3ddc:	6223      	str	r3, [r4, #32]
}
 23f3dde:	bd10      	pop	{r4, pc}
 23f3de0:	023ff554 	.word	0x023ff554

023f3de4 <_ZN14Microphone_PDM8instanceEv>:

// [static] 
Microphone_PDM &Microphone_PDM::instance() {
 23f3de4:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
 23f3de6:	4d06      	ldr	r5, [pc, #24]	; (23f3e00 <_ZN14Microphone_PDM8instanceEv+0x1c>)
 23f3de8:	682b      	ldr	r3, [r5, #0]
 23f3dea:	b93b      	cbnz	r3, 23f3dfc <_ZN14Microphone_PDM8instanceEv+0x18>
		_instance = new Microphone_PDM();
 23f3dec:	2024      	movs	r0, #36	; 0x24
 23f3dee:	f7f6 fba0 	bl	23ea532 <_Znwj>
 23f3df2:	4604      	mov	r4, r0
 23f3df4:	b108      	cbz	r0, 23f3dfa <_ZN14Microphone_PDM8instanceEv+0x16>
 23f3df6:	f7ff ffe9 	bl	23f3dcc <_ZN14Microphone_PDMC1Ev>
 23f3dfa:	602c      	str	r4, [r5, #0]
	}
	return *_instance;
}
 23f3dfc:	6828      	ldr	r0, [r5, #0]
 23f3dfe:	bd38      	pop	{r3, r4, r5, pc}
 23f3e00:	1007ae60 	.word	0x1007ae60

023f3e04 <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>:
	}
	sampling = NULL;
}

size_t Microphone_PDM::getSampleSizeInBytes() const {
	switch(outputSize) {
 23f3e04:	6903      	ldr	r3, [r0, #16]
		case OutputSize::UNSIGNED_8:
			return 1;

		default:
			return 2;
 23f3e06:	2b00      	cmp	r3, #0
	}
}
 23f3e08:	bf0c      	ite	eq
 23f3e0a:	2001      	moveq	r0, #1
 23f3e0c:	2002      	movne	r0, #2
 23f3e0e:	4770      	bx	lr

023f3e10 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:


void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f3e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3e12:	4607      	mov	r7, r0
	const int16_t *srcEnd = &src[numSamples];

	size_t increment = copySrcIncrement();
 23f3e14:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
 23f3e16:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
 23f3e18:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
 23f3e1a:	460c      	mov	r4, r1
 23f3e1c:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
 23f3e1e:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
 23f3e22:	4798      	blx	r3

	if (outputSize == OutputSize::UNSIGNED_8) {
 23f3e24:	693b      	ldr	r3, [r7, #16]
 23f3e26:	b9c3      	cbnz	r3, 23f3e5a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>

		// Scale the 16-bit signed values to an appropriate range for unsigned 8-bit values
		int16_t div = (int16_t)(1 << (size_t) range);
 23f3e28:	2201      	movs	r2, #1
			if (val > 127) {
				val = 127;
			}

			// Add 128 to make unsigned 8-bit (offset)
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f3e2a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		int16_t div = (int16_t)(1 << (size_t) range);
 23f3e2e:	697b      	ldr	r3, [r7, #20]
			src += increment;
 23f3e30:	0040      	lsls	r0, r0, #1
		int16_t div = (int16_t)(1 << (size_t) range);
 23f3e32:	409a      	lsls	r2, r3
 23f3e34:	b212      	sxth	r2, r2
		while(src < srcEnd) {
 23f3e36:	42b4      	cmp	r4, r6
 23f3e38:	d236      	bcs.n	23f3ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
 23f3e3a:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f3e3e:	4404      	add	r4, r0
			int16_t val = *src / div;
 23f3e40:	fb93 f3f2 	sdiv	r3, r3, r2
 23f3e44:	b21b      	sxth	r3, r3
			if (val < -128) {
 23f3e46:	2b7f      	cmp	r3, #127	; 0x7f
 23f3e48:	bfa8      	it	ge
 23f3e4a:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
 23f3e4c:	428b      	cmp	r3, r1
 23f3e4e:	bfb8      	it	lt
 23f3e50:	460b      	movlt	r3, r1
 23f3e52:	3b80      	subs	r3, #128	; 0x80
 23f3e54:	f805 3b01 	strb.w	r3, [r5], #1
		while(src < srcEnd) {
 23f3e58:	e7ed      	b.n	23f3e36 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
			dst += sizeof(uint8_t);
		}

	}
	else if (outputSize == OutputSize::SIGNED_16) {		
 23f3e5a:	2b01      	cmp	r3, #1
 23f3e5c:	d117      	bne.n	23f3e8e <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f3e5e:	697a      	ldr	r2, [r7, #20]
			// Clip to signed 16-bit
			if (val < -32767) {
				val = -32767;
			}
			if (val > 32768) {
				val = 32868;
 23f3e60:	f248 0764 	movw	r7, #32868	; 0x8064
			if (val < -32767) {
 23f3e64:	4911      	ldr	r1, [pc, #68]	; (23f3eac <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
 23f3e66:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
 23f3e6a:	0040      	lsls	r0, r0, #1
		while(src < srcEnd) {
 23f3e6c:	42b4      	cmp	r4, r6
 23f3e6e:	d21b      	bcs.n	23f3ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
 23f3e70:	f9b4 3000 	ldrsh.w	r3, [r4]
			src += increment;
 23f3e74:	4404      	add	r4, r0
			int32_t val = (int32_t)*src * mult;
 23f3e76:	4093      	lsls	r3, r2
			if (val < -32767) {
 23f3e78:	428b      	cmp	r3, r1
 23f3e7a:	db06      	blt.n	23f3e8a <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
 23f3e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 23f3e80:	bfc8      	it	gt
 23f3e82:	463b      	movgt	r3, r7
			}

			*((int16_t *)dst) = (int16_t) val;
 23f3e84:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
 23f3e88:	e7f0      	b.n	23f3e6c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
 23f3e8a:	4b08      	ldr	r3, [pc, #32]	; (23f3eac <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
 23f3e8c:	e7fa      	b.n	23f3e84 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
			dst += sizeof(uint16_t);
		}
	}
	else {
		// OutputSize::RAW_SIGNED_16
		if (src != (int16_t *)dst || increment != 1) {
 23f3e8e:	42ac      	cmp	r4, r5
 23f3e90:	d101      	bne.n	23f3e96 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
 23f3e92:	2801      	cmp	r0, #1
 23f3e94:	d008      	beq.n	23f3ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			while(src < srcEnd) {
				*((int16_t *)dst) = *src;
				dst += sizeof(int16_t);
				src += increment;
 23f3e96:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
 23f3e98:	42b4      	cmp	r4, r6
 23f3e9a:	d205      	bcs.n	23f3ea8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
 23f3e9c:	f9b4 3000 	ldrsh.w	r3, [r4]
				src += increment;
 23f3ea0:	4404      	add	r4, r0
				*((int16_t *)dst) = *src;
 23f3ea2:	f825 3b02 	strh.w	r3, [r5], #2
			while(src < srcEnd) {
 23f3ea6:	e7f7      	b.n	23f3e98 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
			}
		}
	}
}
 23f3ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f3eaa:	bf00      	nop
 23f3eac:	ffff8001 	.word	0xffff8001

023f3eb0 <_ZN22Microphone_PDM_RTL872xD1Ev>:

}

Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {

}
 23f3eb0:	4770      	bx	lr

023f3eb2 <_ZN22Microphone_PDM_RTL872x4stopEv>:
    running = true;
    return 0;
}

int Microphone_PDM_RTL872x::stop() {
    running = false;
 23f3eb2:	2300      	movs	r3, #0
 23f3eb4:	7703      	strb	r3, [r0, #28]
    return 0;
}
 23f3eb6:	4618      	mov	r0, r3
 23f3eb8:	4770      	bx	lr

023f3eba <_ZN22Microphone_PDM_RTL872xD0Ev>:
Microphone_PDM_RTL872x::~Microphone_PDM_RTL872x() {
 23f3eba:	b510      	push	{r4, lr}
 23f3ebc:	4604      	mov	r4, r0
}
 23f3ebe:	2120      	movs	r1, #32
 23f3ec0:	f7f6 fb3d 	bl	23ea53e <_ZdlPvj>
 23f3ec4:	4620      	mov	r0, r4
 23f3ec6:	bd10      	pop	{r4, pc}

023f3ec8 <_ZN22Microphone_PDM_RTL872x4initEv>:
int Microphone_PDM_RTL872x::init() {
 23f3ec8:	b508      	push	{r3, lr}
    switch(sampleRate) {
 23f3eca:	68c3      	ldr	r3, [r0, #12]
 23f3ecc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 23f3ed0:	d008      	beq.n	23f3ee4 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f3ed2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 23f3ed6:	d005      	beq.n	23f3ee4 <_ZN22Microphone_PDM_RTL872x4initEv+0x1c>
 23f3ed8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
            sampleRate = 16000;
 23f3edc:	bf1c      	itt	ne
 23f3ede:	f44f 537a 	movne.w	r3, #16000	; 0x3e80
 23f3ee2:	60c3      	strne	r3, [r0, #12]
    dmic_setup(sampleRate, stereoMode);
 23f3ee4:	7a01      	ldrb	r1, [r0, #8]
 23f3ee6:	68c0      	ldr	r0, [r0, #12]
 23f3ee8:	f7f9 fd86 	bl	23ed9f8 <dmic_setup>
}
 23f3eec:	2000      	movs	r0, #0
 23f3eee:	bd08      	pop	{r3, pc}

023f3ef0 <_ZN22Microphone_PDM_RTL872x5startEv>:
int Microphone_PDM_RTL872x::start() {
 23f3ef0:	b510      	push	{r4, lr}
 23f3ef2:	4604      	mov	r4, r0
    dmic_flush();
 23f3ef4:	f7f9 fe1a 	bl	23edb2c <dmic_flush>
    running = true;
 23f3ef8:	2301      	movs	r3, #1
}
 23f3efa:	2000      	movs	r0, #0
    running = true;
 23f3efc:	7723      	strb	r3, [r4, #28]
}
 23f3efe:	bd10      	pop	{r4, pc}

023f3f00 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv>:
 


bool Microphone_PDM_RTL872x::samplesAvailable() const {
 23f3f00:	b508      	push	{r3, lr}
    if (!running) {
 23f3f02:	7f00      	ldrb	r0, [r0, #28]
 23f3f04:	b120      	cbz	r0, 23f3f10 <_ZNK22Microphone_PDM_RTL872x16samplesAvailableEv+0x10>
        return false;
    }

	return (dmic_ready() != NULL);
 23f3f06:	f7f9 fe1b 	bl	23edb40 <dmic_ready>
 23f3f0a:	3800      	subs	r0, #0
 23f3f0c:	bf18      	it	ne
 23f3f0e:	2001      	movne	r0, #1
}
 23f3f10:	bd08      	pop	{r3, pc}

023f3f12 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv>:

bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f3f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!running) {
 23f3f14:	7f05      	ldrb	r5, [r0, #28]
bool Microphone_PDM_RTL872x::copySamples(void*pSamples) {
 23f3f16:	4604      	mov	r4, r0
    if (!running) {
 23f3f18:	b91d      	cbnz	r5, 23f3f22 <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x10>
        return false;
 23f3f1a:	2500      	movs	r5, #0
		return true;
	}
	else {
		return false;
	}
}
 23f3f1c:	4628      	mov	r0, r5
 23f3f1e:	b003      	add	sp, #12
 23f3f20:	bd30      	pop	{r4, r5, pc}
 23f3f22:	9101      	str	r1, [sp, #4]
    int16_t *src = (int16_t *)dmic_ready();
 23f3f24:	f7f9 fe0c 	bl	23edb40 <dmic_ready>
	if (src) {
 23f3f28:	4601      	mov	r1, r0
 23f3f2a:	2800      	cmp	r0, #0
 23f3f2c:	d0f5      	beq.n	23f3f1a <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0x8>
		copySamplesInternal(src, (uint8_t *)pSamples);
 23f3f2e:	4620      	mov	r0, r4
 23f3f30:	9a01      	ldr	r2, [sp, #4]
 23f3f32:	f7ff ff6d 	bl	23f3e10 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
        dmic_read(NULL, 0);
 23f3f36:	2100      	movs	r1, #0
 23f3f38:	4608      	mov	r0, r1
 23f3f3a:	f7f9 fe03 	bl	23edb44 <dmic_read>
		return true;
 23f3f3e:	e7ed      	b.n	23f3f1c <_ZN22Microphone_PDM_RTL872x11copySamplesEPv+0xa>

023f3f40 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE>:

bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f3f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!running) {
 23f3f42:	7f07      	ldrb	r7, [r0, #28]
bool Microphone_PDM_RTL872x::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
 23f3f44:	4606      	mov	r6, r0
 23f3f46:	460d      	mov	r5, r1
    if (!running) {
 23f3f48:	b91f      	cbnz	r7, 23f3f52 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x12>
        return false;
 23f3f4a:	2700      	movs	r7, #0
		return true;
	}
	else {
		return false;
	}
}
 23f3f4c:	4638      	mov	r0, r7
 23f3f4e:	b003      	add	sp, #12
 23f3f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t *src = (int16_t *)dmic_ready();
 23f3f52:	f7f9 fdf5 	bl	23edb40 <dmic_ready>
	if (src) {
 23f3f56:	4604      	mov	r4, r0
 23f3f58:	2800      	cmp	r0, #0
 23f3f5a:	d0f6      	beq.n	23f3f4a <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xa>
		copySamplesInternal(src, (uint8_t *)src);
 23f3f5c:	4602      	mov	r2, r0
 23f3f5e:	4601      	mov	r1, r0
 23f3f60:	4630      	mov	r0, r6
 23f3f62:	f7ff ff55 	bl	23f3e10 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		callback(src, BUFFER_SIZE_SAMPLES);
 23f3f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 23f3f6a:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f3f6c:	68ab      	ldr	r3, [r5, #8]
 23f3f6e:	9400      	str	r4, [sp, #0]
 23f3f70:	b90b      	cbnz	r3, 23f3f76 <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0x36>
	__throw_bad_function_call();
 23f3f72:	f005 f96b 	bl	23f924c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f3f76:	4669      	mov	r1, sp
 23f3f78:	4628      	mov	r0, r5
 23f3f7a:	68eb      	ldr	r3, [r5, #12]
 23f3f7c:	aa01      	add	r2, sp, #4
 23f3f7e:	4798      	blx	r3
        dmic_read(NULL, 0);
 23f3f80:	2100      	movs	r1, #0
 23f3f82:	4608      	mov	r0, r1
 23f3f84:	f7f9 fdde 	bl	23edb44 <dmic_read>
		return true;
 23f3f88:	e7e0      	b.n	23f3f4c <_ZN22Microphone_PDM_RTL872x13noCopySamplesESt8functionIFvPvjEE+0xc>
	...

023f3f8c <_ZN22Microphone_PDM_RTL872xC1Ev>:
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
 23f3f8c:	f04f 0c01 	mov.w	ip, #1
 23f3f90:	2104      	movs	r1, #4
 23f3f92:	4a06      	ldr	r2, [pc, #24]	; (23f3fac <_ZN22Microphone_PDM_RTL872xC1Ev+0x20>)
 23f3f94:	e9c0 c104 	strd	ip, r1, [r0, #16]
 23f3f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 23f3f9c:	6042      	str	r2, [r0, #4]
 23f3f9e:	2200      	movs	r2, #0
 23f3fa0:	6181      	str	r1, [r0, #24]
Microphone_PDM_RTL872x::Microphone_PDM_RTL872x() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
 23f3fa2:	4903      	ldr	r1, [pc, #12]	; (23f3fb0 <_ZN22Microphone_PDM_RTL872xC1Ev+0x24>)
 23f3fa4:	7202      	strb	r2, [r0, #8]
 23f3fa6:	6001      	str	r1, [r0, #0]
 23f3fa8:	7702      	strb	r2, [r0, #28]
}
 23f3faa:	4770      	bx	lr
 23f3fac:	000c000b 	.word	0x000c000b
 23f3fb0:	023ff584 	.word	0x023ff584

023f3fb4 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23f3fb4:	2300      	movs	r3, #0
 23f3fb6:	4802      	ldr	r0, [pc, #8]	; (23f3fc0 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23f3fb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23f3fba:	f000 b91b 	b.w	23f41f4 <os_mutex_create>
 23f3fbe:	bf00      	nop
 23f3fc0:	1007ae64 	.word	0x1007ae64

023f3fc4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f3fc4:	b509      	push	{r0, r3, lr}
 23f3fc6:	4804      	ldr	r0, [pc, #16]	; (23f3fd8 <HAL_USB_USART_Init+0x14>)
 23f3fc8:	6800      	ldr	r0, [r0, #0]
 23f3fca:	4b04      	ldr	r3, [pc, #16]	; (23f3fdc <HAL_USB_USART_Init+0x18>)
 23f3fcc:	4403      	add	r3, r0
 23f3fce:	681b      	ldr	r3, [r3, #0]
 23f3fd0:	681b      	ldr	r3, [r3, #0]
 23f3fd2:	9302      	str	r3, [sp, #8]
 23f3fd4:	bd09      	pop	{r0, r3, pc}
 23f3fd6:	0000      	.short	0x0000
 23f3fd8:	10079974 	.word	0x10079974
 23f3fdc:	00000034 	.word	0x00000034

023f3fe0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f3fe0:	b509      	push	{r0, r3, lr}
 23f3fe2:	4804      	ldr	r0, [pc, #16]	; (23f3ff4 <HAL_USB_USART_Begin+0x14>)
 23f3fe4:	6800      	ldr	r0, [r0, #0]
 23f3fe6:	4b04      	ldr	r3, [pc, #16]	; (23f3ff8 <HAL_USB_USART_Begin+0x18>)
 23f3fe8:	4403      	add	r3, r0
 23f3fea:	681b      	ldr	r3, [r3, #0]
 23f3fec:	685b      	ldr	r3, [r3, #4]
 23f3fee:	9302      	str	r3, [sp, #8]
 23f3ff0:	bd09      	pop	{r0, r3, pc}
 23f3ff2:	0000      	.short	0x0000
 23f3ff4:	10079974 	.word	0x10079974
 23f3ff8:	00000034 	.word	0x00000034

023f3ffc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f3ffc:	b509      	push	{r0, r3, lr}
 23f3ffe:	4804      	ldr	r0, [pc, #16]	; (23f4010 <HAL_USB_USART_End+0x14>)
 23f4000:	6800      	ldr	r0, [r0, #0]
 23f4002:	4b04      	ldr	r3, [pc, #16]	; (23f4014 <HAL_USB_USART_End+0x18>)
 23f4004:	4403      	add	r3, r0
 23f4006:	681b      	ldr	r3, [r3, #0]
 23f4008:	689b      	ldr	r3, [r3, #8]
 23f400a:	9302      	str	r3, [sp, #8]
 23f400c:	bd09      	pop	{r0, r3, pc}
 23f400e:	0000      	.short	0x0000
 23f4010:	10079974 	.word	0x10079974
 23f4014:	00000034 	.word	0x00000034

023f4018 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f4018:	b509      	push	{r0, r3, lr}
 23f401a:	4804      	ldr	r0, [pc, #16]	; (23f402c <HAL_USB_USART_Available_Data+0x14>)
 23f401c:	6800      	ldr	r0, [r0, #0]
 23f401e:	4b04      	ldr	r3, [pc, #16]	; (23f4030 <HAL_USB_USART_Available_Data+0x18>)
 23f4020:	4403      	add	r3, r0
 23f4022:	681b      	ldr	r3, [r3, #0]
 23f4024:	691b      	ldr	r3, [r3, #16]
 23f4026:	9302      	str	r3, [sp, #8]
 23f4028:	bd09      	pop	{r0, r3, pc}
 23f402a:	0000      	.short	0x0000
 23f402c:	10079974 	.word	0x10079974
 23f4030:	00000034 	.word	0x00000034

023f4034 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f4034:	b509      	push	{r0, r3, lr}
 23f4036:	4804      	ldr	r0, [pc, #16]	; (23f4048 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f4038:	6800      	ldr	r0, [r0, #0]
 23f403a:	4b04      	ldr	r3, [pc, #16]	; (23f404c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f403c:	4403      	add	r3, r0
 23f403e:	681b      	ldr	r3, [r3, #0]
 23f4040:	695b      	ldr	r3, [r3, #20]
 23f4042:	9302      	str	r3, [sp, #8]
 23f4044:	bd09      	pop	{r0, r3, pc}
 23f4046:	0000      	.short	0x0000
 23f4048:	10079974 	.word	0x10079974
 23f404c:	00000034 	.word	0x00000034

023f4050 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f4050:	b509      	push	{r0, r3, lr}
 23f4052:	4804      	ldr	r0, [pc, #16]	; (23f4064 <HAL_USB_USART_Receive_Data+0x14>)
 23f4054:	6800      	ldr	r0, [r0, #0]
 23f4056:	4b04      	ldr	r3, [pc, #16]	; (23f4068 <HAL_USB_USART_Receive_Data+0x18>)
 23f4058:	4403      	add	r3, r0
 23f405a:	681b      	ldr	r3, [r3, #0]
 23f405c:	699b      	ldr	r3, [r3, #24]
 23f405e:	9302      	str	r3, [sp, #8]
 23f4060:	bd09      	pop	{r0, r3, pc}
 23f4062:	0000      	.short	0x0000
 23f4064:	10079974 	.word	0x10079974
 23f4068:	00000034 	.word	0x00000034

023f406c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f406c:	b509      	push	{r0, r3, lr}
 23f406e:	4804      	ldr	r0, [pc, #16]	; (23f4080 <HAL_USB_USART_Send_Data+0x14>)
 23f4070:	6800      	ldr	r0, [r0, #0]
 23f4072:	4b04      	ldr	r3, [pc, #16]	; (23f4084 <HAL_USB_USART_Send_Data+0x18>)
 23f4074:	4403      	add	r3, r0
 23f4076:	681b      	ldr	r3, [r3, #0]
 23f4078:	69db      	ldr	r3, [r3, #28]
 23f407a:	9302      	str	r3, [sp, #8]
 23f407c:	bd09      	pop	{r0, r3, pc}
 23f407e:	0000      	.short	0x0000
 23f4080:	10079974 	.word	0x10079974
 23f4084:	00000034 	.word	0x00000034

023f4088 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f4088:	b509      	push	{r0, r3, lr}
 23f408a:	4804      	ldr	r0, [pc, #16]	; (23f409c <HAL_USB_USART_Flush_Data+0x14>)
 23f408c:	6800      	ldr	r0, [r0, #0]
 23f408e:	4b04      	ldr	r3, [pc, #16]	; (23f40a0 <HAL_USB_USART_Flush_Data+0x18>)
 23f4090:	4403      	add	r3, r0
 23f4092:	681b      	ldr	r3, [r3, #0]
 23f4094:	6a1b      	ldr	r3, [r3, #32]
 23f4096:	9302      	str	r3, [sp, #8]
 23f4098:	bd09      	pop	{r0, r3, pc}
 23f409a:	0000      	.short	0x0000
 23f409c:	10079974 	.word	0x10079974
 23f40a0:	00000034 	.word	0x00000034

023f40a4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f40a4:	b509      	push	{r0, r3, lr}
 23f40a6:	4804      	ldr	r0, [pc, #16]	; (23f40b8 <HAL_USB_USART_Is_Connected+0x14>)
 23f40a8:	6800      	ldr	r0, [r0, #0]
 23f40aa:	4b04      	ldr	r3, [pc, #16]	; (23f40bc <HAL_USB_USART_Is_Connected+0x18>)
 23f40ac:	4403      	add	r3, r0
 23f40ae:	681b      	ldr	r3, [r3, #0]
 23f40b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f40b2:	9302      	str	r3, [sp, #8]
 23f40b4:	bd09      	pop	{r0, r3, pc}
 23f40b6:	0000      	.short	0x0000
 23f40b8:	10079974 	.word	0x10079974
 23f40bc:	00000034 	.word	0x00000034

023f40c0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f40c0:	b509      	push	{r0, r3, lr}
 23f40c2:	4804      	ldr	r0, [pc, #16]	; (23f40d4 <hal_usart_end+0x14>)
 23f40c4:	6800      	ldr	r0, [r0, #0]
 23f40c6:	4b04      	ldr	r3, [pc, #16]	; (23f40d8 <hal_usart_end+0x18>)
 23f40c8:	4403      	add	r3, r0
 23f40ca:	681b      	ldr	r3, [r3, #0]
 23f40cc:	689b      	ldr	r3, [r3, #8]
 23f40ce:	9302      	str	r3, [sp, #8]
 23f40d0:	bd09      	pop	{r0, r3, pc}
 23f40d2:	0000      	.short	0x0000
 23f40d4:	10079974 	.word	0x10079974
 23f40d8:	00000024 	.word	0x00000024

023f40dc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f40dc:	b509      	push	{r0, r3, lr}
 23f40de:	4804      	ldr	r0, [pc, #16]	; (23f40f0 <hal_usart_write+0x14>)
 23f40e0:	6800      	ldr	r0, [r0, #0]
 23f40e2:	4b04      	ldr	r3, [pc, #16]	; (23f40f4 <hal_usart_write+0x18>)
 23f40e4:	4403      	add	r3, r0
 23f40e6:	681b      	ldr	r3, [r3, #0]
 23f40e8:	68db      	ldr	r3, [r3, #12]
 23f40ea:	9302      	str	r3, [sp, #8]
 23f40ec:	bd09      	pop	{r0, r3, pc}
 23f40ee:	0000      	.short	0x0000
 23f40f0:	10079974 	.word	0x10079974
 23f40f4:	00000024 	.word	0x00000024

023f40f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f40f8:	b509      	push	{r0, r3, lr}
 23f40fa:	4804      	ldr	r0, [pc, #16]	; (23f410c <hal_usart_available+0x14>)
 23f40fc:	6800      	ldr	r0, [r0, #0]
 23f40fe:	4b04      	ldr	r3, [pc, #16]	; (23f4110 <hal_usart_available+0x18>)
 23f4100:	4403      	add	r3, r0
 23f4102:	681b      	ldr	r3, [r3, #0]
 23f4104:	691b      	ldr	r3, [r3, #16]
 23f4106:	9302      	str	r3, [sp, #8]
 23f4108:	bd09      	pop	{r0, r3, pc}
 23f410a:	0000      	.short	0x0000
 23f410c:	10079974 	.word	0x10079974
 23f4110:	00000024 	.word	0x00000024

023f4114 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f4114:	b509      	push	{r0, r3, lr}
 23f4116:	4804      	ldr	r0, [pc, #16]	; (23f4128 <hal_usart_read+0x14>)
 23f4118:	6800      	ldr	r0, [r0, #0]
 23f411a:	4b04      	ldr	r3, [pc, #16]	; (23f412c <hal_usart_read+0x18>)
 23f411c:	4403      	add	r3, r0
 23f411e:	681b      	ldr	r3, [r3, #0]
 23f4120:	695b      	ldr	r3, [r3, #20]
 23f4122:	9302      	str	r3, [sp, #8]
 23f4124:	bd09      	pop	{r0, r3, pc}
 23f4126:	0000      	.short	0x0000
 23f4128:	10079974 	.word	0x10079974
 23f412c:	00000024 	.word	0x00000024

023f4130 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f4130:	b509      	push	{r0, r3, lr}
 23f4132:	4804      	ldr	r0, [pc, #16]	; (23f4144 <hal_usart_peek+0x14>)
 23f4134:	6800      	ldr	r0, [r0, #0]
 23f4136:	4b04      	ldr	r3, [pc, #16]	; (23f4148 <hal_usart_peek+0x18>)
 23f4138:	4403      	add	r3, r0
 23f413a:	681b      	ldr	r3, [r3, #0]
 23f413c:	699b      	ldr	r3, [r3, #24]
 23f413e:	9302      	str	r3, [sp, #8]
 23f4140:	bd09      	pop	{r0, r3, pc}
 23f4142:	0000      	.short	0x0000
 23f4144:	10079974 	.word	0x10079974
 23f4148:	00000024 	.word	0x00000024

023f414c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f414c:	b509      	push	{r0, r3, lr}
 23f414e:	4804      	ldr	r0, [pc, #16]	; (23f4160 <hal_usart_flush+0x14>)
 23f4150:	6800      	ldr	r0, [r0, #0]
 23f4152:	4b04      	ldr	r3, [pc, #16]	; (23f4164 <hal_usart_flush+0x18>)
 23f4154:	4403      	add	r3, r0
 23f4156:	681b      	ldr	r3, [r3, #0]
 23f4158:	69db      	ldr	r3, [r3, #28]
 23f415a:	9302      	str	r3, [sp, #8]
 23f415c:	bd09      	pop	{r0, r3, pc}
 23f415e:	0000      	.short	0x0000
 23f4160:	10079974 	.word	0x10079974
 23f4164:	00000024 	.word	0x00000024

023f4168 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f4168:	b509      	push	{r0, r3, lr}
 23f416a:	4804      	ldr	r0, [pc, #16]	; (23f417c <hal_usart_is_enabled+0x14>)
 23f416c:	6800      	ldr	r0, [r0, #0]
 23f416e:	4b04      	ldr	r3, [pc, #16]	; (23f4180 <hal_usart_is_enabled+0x18>)
 23f4170:	4403      	add	r3, r0
 23f4172:	681b      	ldr	r3, [r3, #0]
 23f4174:	6a1b      	ldr	r3, [r3, #32]
 23f4176:	9302      	str	r3, [sp, #8]
 23f4178:	bd09      	pop	{r0, r3, pc}
 23f417a:	0000      	.short	0x0000
 23f417c:	10079974 	.word	0x10079974
 23f4180:	00000024 	.word	0x00000024

023f4184 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f4184:	b509      	push	{r0, r3, lr}
 23f4186:	4804      	ldr	r0, [pc, #16]	; (23f4198 <hal_usart_available_data_for_write+0x14>)
 23f4188:	6800      	ldr	r0, [r0, #0]
 23f418a:	4b04      	ldr	r3, [pc, #16]	; (23f419c <hal_usart_available_data_for_write+0x18>)
 23f418c:	4403      	add	r3, r0
 23f418e:	681b      	ldr	r3, [r3, #0]
 23f4190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f4192:	9302      	str	r3, [sp, #8]
 23f4194:	bd09      	pop	{r0, r3, pc}
 23f4196:	0000      	.short	0x0000
 23f4198:	10079974 	.word	0x10079974
 23f419c:	00000024 	.word	0x00000024

023f41a0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f41a0:	b509      	push	{r0, r3, lr}
 23f41a2:	4804      	ldr	r0, [pc, #16]	; (23f41b4 <hal_usart_begin_config+0x14>)
 23f41a4:	6800      	ldr	r0, [r0, #0]
 23f41a6:	4b04      	ldr	r3, [pc, #16]	; (23f41b8 <hal_usart_begin_config+0x18>)
 23f41a8:	4403      	add	r3, r0
 23f41aa:	681b      	ldr	r3, [r3, #0]
 23f41ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f41ae:	9302      	str	r3, [sp, #8]
 23f41b0:	bd09      	pop	{r0, r3, pc}
 23f41b2:	0000      	.short	0x0000
 23f41b4:	10079974 	.word	0x10079974
 23f41b8:	00000024 	.word	0x00000024

023f41bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f41bc:	b509      	push	{r0, r3, lr}
 23f41be:	4804      	ldr	r0, [pc, #16]	; (23f41d0 <hal_usart_init_ex+0x14>)
 23f41c0:	6800      	ldr	r0, [r0, #0]
 23f41c2:	4b04      	ldr	r3, [pc, #16]	; (23f41d4 <hal_usart_init_ex+0x18>)
 23f41c4:	4403      	add	r3, r0
 23f41c6:	681b      	ldr	r3, [r3, #0]
 23f41c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f41ca:	9302      	str	r3, [sp, #8]
 23f41cc:	bd09      	pop	{r0, r3, pc}
 23f41ce:	0000      	.short	0x0000
 23f41d0:	10079974 	.word	0x10079974
 23f41d4:	00000024 	.word	0x00000024

023f41d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f41d8:	b509      	push	{r0, r3, lr}
 23f41da:	4804      	ldr	r0, [pc, #16]	; (23f41ec <inet_inet_ntop+0x14>)
 23f41dc:	6800      	ldr	r0, [r0, #0]
 23f41de:	4b04      	ldr	r3, [pc, #16]	; (23f41f0 <inet_inet_ntop+0x18>)
 23f41e0:	4403      	add	r3, r0
 23f41e2:	681b      	ldr	r3, [r3, #0]
 23f41e4:	695b      	ldr	r3, [r3, #20]
 23f41e6:	9302      	str	r3, [sp, #8]
 23f41e8:	bd09      	pop	{r0, r3, pc}
 23f41ea:	0000      	.short	0x0000
 23f41ec:	10079974 	.word	0x10079974
 23f41f0:	0000004c 	.word	0x0000004c

023f41f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f41f4:	b509      	push	{r0, r3, lr}
 23f41f6:	4804      	ldr	r0, [pc, #16]	; (23f4208 <os_mutex_create+0x14>)
 23f41f8:	6800      	ldr	r0, [r0, #0]
 23f41fa:	4b04      	ldr	r3, [pc, #16]	; (23f420c <os_mutex_create+0x18>)
 23f41fc:	4403      	add	r3, r0
 23f41fe:	681b      	ldr	r3, [r3, #0]
 23f4200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f4202:	9302      	str	r3, [sp, #8]
 23f4204:	bd09      	pop	{r0, r3, pc}
 23f4206:	0000      	.short	0x0000
 23f4208:	10079974 	.word	0x10079974
 23f420c:	00000030 	.word	0x00000030

023f4210 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f4210:	b509      	push	{r0, r3, lr}
 23f4212:	4804      	ldr	r0, [pc, #16]	; (23f4224 <os_mutex_recursive_create+0x14>)
 23f4214:	6800      	ldr	r0, [r0, #0]
 23f4216:	4b04      	ldr	r3, [pc, #16]	; (23f4228 <os_mutex_recursive_create+0x18>)
 23f4218:	4403      	add	r3, r0
 23f421a:	681b      	ldr	r3, [r3, #0]
 23f421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f421e:	9302      	str	r3, [sp, #8]
 23f4220:	bd09      	pop	{r0, r3, pc}
 23f4222:	0000      	.short	0x0000
 23f4224:	10079974 	.word	0x10079974
 23f4228:	00000030 	.word	0x00000030

023f422c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f422c:	b509      	push	{r0, r3, lr}
 23f422e:	4804      	ldr	r0, [pc, #16]	; (23f4240 <os_mutex_recursive_destroy+0x14>)
 23f4230:	6800      	ldr	r0, [r0, #0]
 23f4232:	4b04      	ldr	r3, [pc, #16]	; (23f4244 <os_mutex_recursive_destroy+0x18>)
 23f4234:	4403      	add	r3, r0
 23f4236:	681b      	ldr	r3, [r3, #0]
 23f4238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f423a:	9302      	str	r3, [sp, #8]
 23f423c:	bd09      	pop	{r0, r3, pc}
 23f423e:	0000      	.short	0x0000
 23f4240:	10079974 	.word	0x10079974
 23f4244:	00000030 	.word	0x00000030

023f4248 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f4248:	b509      	push	{r0, r3, lr}
 23f424a:	4804      	ldr	r0, [pc, #16]	; (23f425c <os_mutex_recursive_lock+0x14>)
 23f424c:	6800      	ldr	r0, [r0, #0]
 23f424e:	4b04      	ldr	r3, [pc, #16]	; (23f4260 <os_mutex_recursive_lock+0x18>)
 23f4250:	4403      	add	r3, r0
 23f4252:	681b      	ldr	r3, [r3, #0]
 23f4254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f4256:	9302      	str	r3, [sp, #8]
 23f4258:	bd09      	pop	{r0, r3, pc}
 23f425a:	0000      	.short	0x0000
 23f425c:	10079974 	.word	0x10079974
 23f4260:	00000030 	.word	0x00000030

023f4264 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f4264:	b509      	push	{r0, r3, lr}
 23f4266:	4804      	ldr	r0, [pc, #16]	; (23f4278 <os_mutex_recursive_unlock+0x14>)
 23f4268:	6800      	ldr	r0, [r0, #0]
 23f426a:	4b04      	ldr	r3, [pc, #16]	; (23f427c <os_mutex_recursive_unlock+0x18>)
 23f426c:	4403      	add	r3, r0
 23f426e:	681b      	ldr	r3, [r3, #0]
 23f4270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f4272:	9302      	str	r3, [sp, #8]
 23f4274:	bd09      	pop	{r0, r3, pc}
 23f4276:	0000      	.short	0x0000
 23f4278:	10079974 	.word	0x10079974
 23f427c:	00000030 	.word	0x00000030

023f4280 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23f4280:	b509      	push	{r0, r3, lr}
 23f4282:	4804      	ldr	r0, [pc, #16]	; (23f4294 <hal_ble_stack_init+0x14>)
 23f4284:	6800      	ldr	r0, [r0, #0]
 23f4286:	4b04      	ldr	r3, [pc, #16]	; (23f4298 <hal_ble_stack_init+0x18>)
 23f4288:	4403      	add	r3, r0
 23f428a:	681b      	ldr	r3, [r3, #0]
 23f428c:	689b      	ldr	r3, [r3, #8]
 23f428e:	9302      	str	r3, [sp, #8]
 23f4290:	bd09      	pop	{r0, r3, pc}
 23f4292:	0000      	.short	0x0000
 23f4294:	10079974 	.word	0x10079974
 23f4298:	00000060 	.word	0x00000060

023f429c <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23f429c:	b509      	push	{r0, r3, lr}
 23f429e:	4804      	ldr	r0, [pc, #16]	; (23f42b0 <hal_ble_gap_start_scan+0x14>)
 23f42a0:	6800      	ldr	r0, [r0, #0]
 23f42a2:	4b04      	ldr	r3, [pc, #16]	; (23f42b4 <hal_ble_gap_start_scan+0x18>)
 23f42a4:	4403      	add	r3, r0
 23f42a6:	681b      	ldr	r3, [r3, #0]
 23f42a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23f42aa:	9302      	str	r3, [sp, #8]
 23f42ac:	bd09      	pop	{r0, r3, pc}
 23f42ae:	0000      	.short	0x0000
 23f42b0:	10079974 	.word	0x10079974
 23f42b4:	00000060 	.word	0x00000060

023f42b8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23f42b8:	b509      	push	{r0, r3, lr}
 23f42ba:	4804      	ldr	r0, [pc, #16]	; (23f42cc <hal_ble_gap_stop_scan+0x14>)
 23f42bc:	6800      	ldr	r0, [r0, #0]
 23f42be:	4b04      	ldr	r3, [pc, #16]	; (23f42d0 <hal_ble_gap_stop_scan+0x18>)
 23f42c0:	4403      	add	r3, r0
 23f42c2:	681b      	ldr	r3, [r3, #0]
 23f42c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23f42c8:	9302      	str	r3, [sp, #8]
 23f42ca:	bd09      	pop	{r0, r3, pc}
 23f42cc:	10079974 	.word	0x10079974
 23f42d0:	00000060 	.word	0x00000060

023f42d4 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23f42d4:	b509      	push	{r0, r3, lr}
 23f42d6:	4804      	ldr	r0, [pc, #16]	; (23f42e8 <hal_ble_gap_disconnect+0x14>)
 23f42d8:	6800      	ldr	r0, [r0, #0]
 23f42da:	4b04      	ldr	r3, [pc, #16]	; (23f42ec <hal_ble_gap_disconnect+0x18>)
 23f42dc:	4403      	add	r3, r0
 23f42de:	681b      	ldr	r3, [r3, #0]
 23f42e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f42e4:	9302      	str	r3, [sp, #8]
 23f42e6:	bd09      	pop	{r0, r3, pc}
 23f42e8:	10079974 	.word	0x10079974
 23f42ec:	00000060 	.word	0x00000060

023f42f0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f42f0:	b509      	push	{r0, r3, lr}
 23f42f2:	4804      	ldr	r0, [pc, #16]	; (23f4304 <hal_ble_gatt_server_set_characteristic_value+0x14>)
 23f42f4:	6800      	ldr	r0, [r0, #0]
 23f42f6:	4b04      	ldr	r3, [pc, #16]	; (23f4308 <hal_ble_gatt_server_set_characteristic_value+0x18>)
 23f42f8:	4403      	add	r3, r0
 23f42fa:	681b      	ldr	r3, [r3, #0]
 23f42fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f4300:	9302      	str	r3, [sp, #8]
 23f4302:	bd09      	pop	{r0, r3, pc}
 23f4304:	10079974 	.word	0x10079974
 23f4308:	00000060 	.word	0x00000060

023f430c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
 23f430c:	b509      	push	{r0, r3, lr}
 23f430e:	4804      	ldr	r0, [pc, #16]	; (23f4320 <hal_ble_gatt_client_discover_all_services+0x14>)
 23f4310:	6800      	ldr	r0, [r0, #0]
 23f4312:	4b04      	ldr	r3, [pc, #16]	; (23f4324 <hal_ble_gatt_client_discover_all_services+0x18>)
 23f4314:	4403      	add	r3, r0
 23f4316:	681b      	ldr	r3, [r3, #0]
 23f4318:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 23f431c:	9302      	str	r3, [sp, #8]
 23f431e:	bd09      	pop	{r0, r3, pc}
 23f4320:	10079974 	.word	0x10079974
 23f4324:	00000060 	.word	0x00000060

023f4328 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
 23f4328:	b509      	push	{r0, r3, lr}
 23f432a:	4804      	ldr	r0, [pc, #16]	; (23f433c <hal_ble_gatt_client_discover_characteristics+0x14>)
 23f432c:	6800      	ldr	r0, [r0, #0]
 23f432e:	4b04      	ldr	r3, [pc, #16]	; (23f4340 <hal_ble_gatt_client_discover_characteristics+0x18>)
 23f4330:	4403      	add	r3, r0
 23f4332:	681b      	ldr	r3, [r3, #0]
 23f4334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 23f4338:	9302      	str	r3, [sp, #8]
 23f433a:	bd09      	pop	{r0, r3, pc}
 23f433c:	10079974 	.word	0x10079974
 23f4340:	00000060 	.word	0x00000060

023f4344 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f4344:	b509      	push	{r0, r3, lr}
 23f4346:	4804      	ldr	r0, [pc, #16]	; (23f4358 <hal_ble_gatt_client_write_with_response+0x14>)
 23f4348:	6800      	ldr	r0, [r0, #0]
 23f434a:	4b04      	ldr	r3, [pc, #16]	; (23f435c <hal_ble_gatt_client_write_with_response+0x18>)
 23f434c:	4403      	add	r3, r0
 23f434e:	681b      	ldr	r3, [r3, #0]
 23f4350:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 23f4354:	9302      	str	r3, [sp, #8]
 23f4356:	bd09      	pop	{r0, r3, pc}
 23f4358:	10079974 	.word	0x10079974
 23f435c:	00000060 	.word	0x00000060

023f4360 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f4360:	b509      	push	{r0, r3, lr}
 23f4362:	4804      	ldr	r0, [pc, #16]	; (23f4374 <hal_ble_gatt_client_write_without_response+0x14>)
 23f4364:	6800      	ldr	r0, [r0, #0]
 23f4366:	4b04      	ldr	r3, [pc, #16]	; (23f4378 <hal_ble_gatt_client_write_without_response+0x18>)
 23f4368:	4403      	add	r3, r0
 23f436a:	681b      	ldr	r3, [r3, #0]
 23f436c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23f4370:	9302      	str	r3, [sp, #8]
 23f4372:	bd09      	pop	{r0, r3, pc}
 23f4374:	10079974 	.word	0x10079974
 23f4378:	00000060 	.word	0x00000060

023f437c <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
 23f437c:	b509      	push	{r0, r3, lr}
 23f437e:	4804      	ldr	r0, [pc, #16]	; (23f4390 <hal_ble_gatt_client_read+0x14>)
 23f4380:	6800      	ldr	r0, [r0, #0]
 23f4382:	4b04      	ldr	r3, [pc, #16]	; (23f4394 <hal_ble_gatt_client_read+0x18>)
 23f4384:	4403      	add	r3, r0
 23f4386:	681b      	ldr	r3, [r3, #0]
 23f4388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 23f438c:	9302      	str	r3, [sp, #8]
 23f438e:	bd09      	pop	{r0, r3, pc}
 23f4390:	10079974 	.word	0x10079974
 23f4394:	00000060 	.word	0x00000060

023f4398 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
 23f4398:	b509      	push	{r0, r3, lr}
 23f439a:	4804      	ldr	r0, [pc, #16]	; (23f43ac <hal_ble_gap_connect+0x14>)
 23f439c:	6800      	ldr	r0, [r0, #0]
 23f439e:	4b04      	ldr	r3, [pc, #16]	; (23f43b0 <hal_ble_gap_connect+0x18>)
 23f43a0:	4403      	add	r3, r0
 23f43a2:	681b      	ldr	r3, [r3, #0]
 23f43a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 23f43a8:	9302      	str	r3, [sp, #8]
 23f43aa:	bd09      	pop	{r0, r3, pc}
 23f43ac:	10079974 	.word	0x10079974
 23f43b0:	00000060 	.word	0x00000060

023f43b4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23f43b4:	b509      	push	{r0, r3, lr}
 23f43b6:	4804      	ldr	r0, [pc, #16]	; (23f43c8 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23f43b8:	6800      	ldr	r0, [r0, #0]
 23f43ba:	4b04      	ldr	r3, [pc, #16]	; (23f43cc <hal_ble_set_callback_on_periph_link_events+0x18>)
 23f43bc:	4403      	add	r3, r0
 23f43be:	681b      	ldr	r3, [r3, #0]
 23f43c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23f43c4:	9302      	str	r3, [sp, #8]
 23f43c6:	bd09      	pop	{r0, r3, pc}
 23f43c8:	10079974 	.word	0x10079974
 23f43cc:	00000060 	.word	0x00000060

023f43d0 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
 23f43d0:	b509      	push	{r0, r3, lr}
 23f43d2:	4804      	ldr	r0, [pc, #16]	; (23f43e4 <hal_ble_gatt_client_configure_cccd+0x14>)
 23f43d4:	6800      	ldr	r0, [r0, #0]
 23f43d6:	4b04      	ldr	r3, [pc, #16]	; (23f43e8 <hal_ble_gatt_client_configure_cccd+0x18>)
 23f43d8:	4403      	add	r3, r0
 23f43da:	681b      	ldr	r3, [r3, #0]
 23f43dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 23f43e0:	9302      	str	r3, [sp, #8]
 23f43e2:	bd09      	pop	{r0, r3, pc}
 23f43e4:	10079974 	.word	0x10079974
 23f43e8:	00000060 	.word	0x00000060

023f43ec <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f43ec:	b509      	push	{r0, r3, lr}
 23f43ee:	4804      	ldr	r0, [pc, #16]	; (23f4400 <hal_ble_gatt_server_notify_characteristic_value+0x14>)
 23f43f0:	6800      	ldr	r0, [r0, #0]
 23f43f2:	4b04      	ldr	r3, [pc, #16]	; (23f4404 <hal_ble_gatt_server_notify_characteristic_value+0x18>)
 23f43f4:	4403      	add	r3, r0
 23f43f6:	681b      	ldr	r3, [r3, #0]
 23f43f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 23f43fc:	9302      	str	r3, [sp, #8]
 23f43fe:	bd09      	pop	{r0, r3, pc}
 23f4400:	10079974 	.word	0x10079974
 23f4404:	00000060 	.word	0x00000060

023f4408 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23f4408:	b509      	push	{r0, r3, lr}
 23f440a:	4804      	ldr	r0, [pc, #16]	; (23f441c <hal_ble_gatt_server_indicate_characteristic_value+0x14>)
 23f440c:	6800      	ldr	r0, [r0, #0]
 23f440e:	4b04      	ldr	r3, [pc, #16]	; (23f4420 <hal_ble_gatt_server_indicate_characteristic_value+0x18>)
 23f4410:	4403      	add	r3, r0
 23f4412:	681b      	ldr	r3, [r3, #0]
 23f4414:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 23f4418:	9302      	str	r3, [sp, #8]
 23f441a:	bd09      	pop	{r0, r3, pc}
 23f441c:	10079974 	.word	0x10079974
 23f4420:	00000060 	.word	0x00000060

023f4424 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f4424:	b509      	push	{r0, r3, lr}
 23f4426:	4804      	ldr	r0, [pc, #16]	; (23f4438 <HAL_RNG_GetRandomNumber+0x14>)
 23f4428:	6800      	ldr	r0, [r0, #0]
 23f442a:	4b04      	ldr	r3, [pc, #16]	; (23f443c <HAL_RNG_GetRandomNumber+0x18>)
 23f442c:	4403      	add	r3, r0
 23f442e:	681b      	ldr	r3, [r3, #0]
 23f4430:	685b      	ldr	r3, [r3, #4]
 23f4432:	9302      	str	r3, [sp, #8]
 23f4434:	bd09      	pop	{r0, r3, pc}
 23f4436:	0000      	.short	0x0000
 23f4438:	10079974 	.word	0x10079974
 23f443c:	00000000 	.word	0x00000000

023f4440 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f4440:	b509      	push	{r0, r3, lr}
 23f4442:	4804      	ldr	r0, [pc, #16]	; (23f4454 <HAL_Delay_Microseconds+0x14>)
 23f4444:	6800      	ldr	r0, [r0, #0]
 23f4446:	4b04      	ldr	r3, [pc, #16]	; (23f4458 <HAL_Delay_Microseconds+0x18>)
 23f4448:	4403      	add	r3, r0
 23f444a:	681b      	ldr	r3, [r3, #0]
 23f444c:	68db      	ldr	r3, [r3, #12]
 23f444e:	9302      	str	r3, [sp, #8]
 23f4450:	bd09      	pop	{r0, r3, pc}
 23f4452:	0000      	.short	0x0000
 23f4454:	10079974 	.word	0x10079974
 23f4458:	00000000 	.word	0x00000000

023f445c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23f445c:	b509      	push	{r0, r3, lr}
 23f445e:	4804      	ldr	r0, [pc, #16]	; (23f4470 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23f4460:	6800      	ldr	r0, [r0, #0]
 23f4462:	4b04      	ldr	r3, [pc, #16]	; (23f4474 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23f4464:	4403      	add	r3, r0
 23f4466:	681b      	ldr	r3, [r3, #0]
 23f4468:	691b      	ldr	r3, [r3, #16]
 23f446a:	9302      	str	r3, [sp, #8]
 23f446c:	bd09      	pop	{r0, r3, pc}
 23f446e:	0000      	.short	0x0000
 23f4470:	10079974 	.word	0x10079974
 23f4474:	00000000 	.word	0x00000000

023f4478 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f4478:	b509      	push	{r0, r3, lr}
 23f447a:	4804      	ldr	r0, [pc, #16]	; (23f448c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f447c:	6800      	ldr	r0, [r0, #0]
 23f447e:	4b04      	ldr	r3, [pc, #16]	; (23f4490 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f4480:	4403      	add	r3, r0
 23f4482:	681b      	ldr	r3, [r3, #0]
 23f4484:	695b      	ldr	r3, [r3, #20]
 23f4486:	9302      	str	r3, [sp, #8]
 23f4488:	bd09      	pop	{r0, r3, pc}
 23f448a:	0000      	.short	0x0000
 23f448c:	10079974 	.word	0x10079974
 23f4490:	00000000 	.word	0x00000000

023f4494 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f4494:	b509      	push	{r0, r3, lr}
 23f4496:	4804      	ldr	r0, [pc, #16]	; (23f44a8 <hal_timer_millis+0x14>)
 23f4498:	6800      	ldr	r0, [r0, #0]
 23f449a:	4b04      	ldr	r3, [pc, #16]	; (23f44ac <hal_timer_millis+0x18>)
 23f449c:	4403      	add	r3, r0
 23f449e:	681b      	ldr	r3, [r3, #0]
 23f44a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f44a2:	9302      	str	r3, [sp, #8]
 23f44a4:	bd09      	pop	{r0, r3, pc}
 23f44a6:	0000      	.short	0x0000
 23f44a8:	10079974 	.word	0x10079974
 23f44ac:	00000000 	.word	0x00000000

023f44b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f44b0:	b509      	push	{r0, r3, lr}
 23f44b2:	4804      	ldr	r0, [pc, #16]	; (23f44c4 <netdb_freeaddrinfo+0x14>)
 23f44b4:	6800      	ldr	r0, [r0, #0]
 23f44b6:	4b04      	ldr	r3, [pc, #16]	; (23f44c8 <netdb_freeaddrinfo+0x18>)
 23f44b8:	4403      	add	r3, r0
 23f44ba:	681b      	ldr	r3, [r3, #0]
 23f44bc:	689b      	ldr	r3, [r3, #8]
 23f44be:	9302      	str	r3, [sp, #8]
 23f44c0:	bd09      	pop	{r0, r3, pc}
 23f44c2:	0000      	.short	0x0000
 23f44c4:	10079974 	.word	0x10079974
 23f44c8:	00000050 	.word	0x00000050

023f44cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f44cc:	b509      	push	{r0, r3, lr}
 23f44ce:	4804      	ldr	r0, [pc, #16]	; (23f44e0 <netdb_getaddrinfo+0x14>)
 23f44d0:	6800      	ldr	r0, [r0, #0]
 23f44d2:	4b04      	ldr	r3, [pc, #16]	; (23f44e4 <netdb_getaddrinfo+0x18>)
 23f44d4:	4403      	add	r3, r0
 23f44d6:	681b      	ldr	r3, [r3, #0]
 23f44d8:	68db      	ldr	r3, [r3, #12]
 23f44da:	9302      	str	r3, [sp, #8]
 23f44dc:	bd09      	pop	{r0, r3, pc}
 23f44de:	0000      	.short	0x0000
 23f44e0:	10079974 	.word	0x10079974
 23f44e4:	00000050 	.word	0x00000050

023f44e8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f44e8:	b509      	push	{r0, r3, lr}
 23f44ea:	4804      	ldr	r0, [pc, #16]	; (23f44fc <panic_+0x14>)
 23f44ec:	6800      	ldr	r0, [r0, #0]
 23f44ee:	4b04      	ldr	r3, [pc, #16]	; (23f4500 <panic_+0x18>)
 23f44f0:	4403      	add	r3, r0
 23f44f2:	681b      	ldr	r3, [r3, #0]
 23f44f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f44f6:	9302      	str	r3, [sp, #8]
 23f44f8:	bd09      	pop	{r0, r3, pc}
 23f44fa:	0000      	.short	0x0000
 23f44fc:	10079974 	.word	0x10079974
 23f4500:	00000048 	.word	0x00000048

023f4504 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23f4504:	b509      	push	{r0, r3, lr}
 23f4506:	4804      	ldr	r0, [pc, #16]	; (23f4518 <log_message+0x14>)
 23f4508:	6800      	ldr	r0, [r0, #0]
 23f450a:	4b04      	ldr	r3, [pc, #16]	; (23f451c <log_message+0x18>)
 23f450c:	4403      	add	r3, r0
 23f450e:	681b      	ldr	r3, [r3, #0]
 23f4510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f4512:	9302      	str	r3, [sp, #8]
 23f4514:	bd09      	pop	{r0, r3, pc}
 23f4516:	0000      	.short	0x0000
 23f4518:	10079974 	.word	0x10079974
 23f451c:	00000048 	.word	0x00000048

023f4520 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f4520:	b509      	push	{r0, r3, lr}
 23f4522:	4804      	ldr	r0, [pc, #16]	; (23f4534 <log_level_name+0x14>)
 23f4524:	6800      	ldr	r0, [r0, #0]
 23f4526:	4b04      	ldr	r3, [pc, #16]	; (23f4538 <log_level_name+0x18>)
 23f4528:	4403      	add	r3, r0
 23f452a:	681b      	ldr	r3, [r3, #0]
 23f452c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f452e:	9302      	str	r3, [sp, #8]
 23f4530:	bd09      	pop	{r0, r3, pc}
 23f4532:	0000      	.short	0x0000
 23f4534:	10079974 	.word	0x10079974
 23f4538:	00000048 	.word	0x00000048

023f453c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f453c:	b509      	push	{r0, r3, lr}
 23f453e:	4804      	ldr	r0, [pc, #16]	; (23f4550 <log_set_callbacks+0x14>)
 23f4540:	6800      	ldr	r0, [r0, #0]
 23f4542:	4b04      	ldr	r3, [pc, #16]	; (23f4554 <log_set_callbacks+0x18>)
 23f4544:	4403      	add	r3, r0
 23f4546:	681b      	ldr	r3, [r3, #0]
 23f4548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f454a:	9302      	str	r3, [sp, #8]
 23f454c:	bd09      	pop	{r0, r3, pc}
 23f454e:	0000      	.short	0x0000
 23f4550:	10079974 	.word	0x10079974
 23f4554:	00000048 	.word	0x00000048

023f4558 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f4558:	b509      	push	{r0, r3, lr}
 23f455a:	4804      	ldr	r0, [pc, #16]	; (23f456c <spark_process+0x14>)
 23f455c:	6800      	ldr	r0, [r0, #0]
 23f455e:	4b04      	ldr	r3, [pc, #16]	; (23f4570 <spark_process+0x18>)
 23f4560:	4403      	add	r3, r0
 23f4562:	681b      	ldr	r3, [r3, #0]
 23f4564:	689b      	ldr	r3, [r3, #8]
 23f4566:	9302      	str	r3, [sp, #8]
 23f4568:	bd09      	pop	{r0, r3, pc}
 23f456a:	0000      	.short	0x0000
 23f456c:	10079974 	.word	0x10079974
 23f4570:	0000002c 	.word	0x0000002c

023f4574 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f4574:	b509      	push	{r0, r3, lr}
 23f4576:	4804      	ldr	r0, [pc, #16]	; (23f4588 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f4578:	6800      	ldr	r0, [r0, #0]
 23f457a:	4b04      	ldr	r3, [pc, #16]	; (23f458c <spark_set_random_seed_from_cloud_handler+0x18>)
 23f457c:	4403      	add	r3, r0
 23f457e:	681b      	ldr	r3, [r3, #0]
 23f4580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f4582:	9302      	str	r3, [sp, #8]
 23f4584:	bd09      	pop	{r0, r3, pc}
 23f4586:	0000      	.short	0x0000
 23f4588:	10079974 	.word	0x10079974
 23f458c:	0000002c 	.word	0x0000002c

023f4590 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f4590:	b509      	push	{r0, r3, lr}
 23f4592:	4804      	ldr	r0, [pc, #16]	; (23f45a4 <network_connect+0x14>)
 23f4594:	6800      	ldr	r0, [r0, #0]
 23f4596:	4b04      	ldr	r3, [pc, #16]	; (23f45a8 <network_connect+0x18>)
 23f4598:	4403      	add	r3, r0
 23f459a:	681b      	ldr	r3, [r3, #0]
 23f459c:	685b      	ldr	r3, [r3, #4]
 23f459e:	9302      	str	r3, [sp, #8]
 23f45a0:	bd09      	pop	{r0, r3, pc}
 23f45a2:	0000      	.short	0x0000
 23f45a4:	10079974 	.word	0x10079974
 23f45a8:	00000028 	.word	0x00000028

023f45ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f45ac:	b509      	push	{r0, r3, lr}
 23f45ae:	4804      	ldr	r0, [pc, #16]	; (23f45c0 <network_connecting+0x14>)
 23f45b0:	6800      	ldr	r0, [r0, #0]
 23f45b2:	4b04      	ldr	r3, [pc, #16]	; (23f45c4 <network_connecting+0x18>)
 23f45b4:	4403      	add	r3, r0
 23f45b6:	681b      	ldr	r3, [r3, #0]
 23f45b8:	689b      	ldr	r3, [r3, #8]
 23f45ba:	9302      	str	r3, [sp, #8]
 23f45bc:	bd09      	pop	{r0, r3, pc}
 23f45be:	0000      	.short	0x0000
 23f45c0:	10079974 	.word	0x10079974
 23f45c4:	00000028 	.word	0x00000028

023f45c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f45c8:	b509      	push	{r0, r3, lr}
 23f45ca:	4804      	ldr	r0, [pc, #16]	; (23f45dc <network_disconnect+0x14>)
 23f45cc:	6800      	ldr	r0, [r0, #0]
 23f45ce:	4b04      	ldr	r3, [pc, #16]	; (23f45e0 <network_disconnect+0x18>)
 23f45d0:	4403      	add	r3, r0
 23f45d2:	681b      	ldr	r3, [r3, #0]
 23f45d4:	68db      	ldr	r3, [r3, #12]
 23f45d6:	9302      	str	r3, [sp, #8]
 23f45d8:	bd09      	pop	{r0, r3, pc}
 23f45da:	0000      	.short	0x0000
 23f45dc:	10079974 	.word	0x10079974
 23f45e0:	00000028 	.word	0x00000028

023f45e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f45e4:	b509      	push	{r0, r3, lr}
 23f45e6:	4804      	ldr	r0, [pc, #16]	; (23f45f8 <network_ready+0x14>)
 23f45e8:	6800      	ldr	r0, [r0, #0]
 23f45ea:	4b04      	ldr	r3, [pc, #16]	; (23f45fc <network_ready+0x18>)
 23f45ec:	4403      	add	r3, r0
 23f45ee:	681b      	ldr	r3, [r3, #0]
 23f45f0:	691b      	ldr	r3, [r3, #16]
 23f45f2:	9302      	str	r3, [sp, #8]
 23f45f4:	bd09      	pop	{r0, r3, pc}
 23f45f6:	0000      	.short	0x0000
 23f45f8:	10079974 	.word	0x10079974
 23f45fc:	00000028 	.word	0x00000028

023f4600 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f4600:	b509      	push	{r0, r3, lr}
 23f4602:	4804      	ldr	r0, [pc, #16]	; (23f4614 <network_on+0x14>)
 23f4604:	6800      	ldr	r0, [r0, #0]
 23f4606:	4b04      	ldr	r3, [pc, #16]	; (23f4618 <network_on+0x18>)
 23f4608:	4403      	add	r3, r0
 23f460a:	681b      	ldr	r3, [r3, #0]
 23f460c:	695b      	ldr	r3, [r3, #20]
 23f460e:	9302      	str	r3, [sp, #8]
 23f4610:	bd09      	pop	{r0, r3, pc}
 23f4612:	0000      	.short	0x0000
 23f4614:	10079974 	.word	0x10079974
 23f4618:	00000028 	.word	0x00000028

023f461c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f461c:	b509      	push	{r0, r3, lr}
 23f461e:	4804      	ldr	r0, [pc, #16]	; (23f4630 <network_off+0x14>)
 23f4620:	6800      	ldr	r0, [r0, #0]
 23f4622:	4b04      	ldr	r3, [pc, #16]	; (23f4634 <network_off+0x18>)
 23f4624:	4403      	add	r3, r0
 23f4626:	681b      	ldr	r3, [r3, #0]
 23f4628:	699b      	ldr	r3, [r3, #24]
 23f462a:	9302      	str	r3, [sp, #8]
 23f462c:	bd09      	pop	{r0, r3, pc}
 23f462e:	0000      	.short	0x0000
 23f4630:	10079974 	.word	0x10079974
 23f4634:	00000028 	.word	0x00000028

023f4638 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f4638:	b509      	push	{r0, r3, lr}
 23f463a:	4804      	ldr	r0, [pc, #16]	; (23f464c <network_listen+0x14>)
 23f463c:	6800      	ldr	r0, [r0, #0]
 23f463e:	4b04      	ldr	r3, [pc, #16]	; (23f4650 <network_listen+0x18>)
 23f4640:	4403      	add	r3, r0
 23f4642:	681b      	ldr	r3, [r3, #0]
 23f4644:	69db      	ldr	r3, [r3, #28]
 23f4646:	9302      	str	r3, [sp, #8]
 23f4648:	bd09      	pop	{r0, r3, pc}
 23f464a:	0000      	.short	0x0000
 23f464c:	10079974 	.word	0x10079974
 23f4650:	00000028 	.word	0x00000028

023f4654 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f4654:	b509      	push	{r0, r3, lr}
 23f4656:	4804      	ldr	r0, [pc, #16]	; (23f4668 <network_listening+0x14>)
 23f4658:	6800      	ldr	r0, [r0, #0]
 23f465a:	4b04      	ldr	r3, [pc, #16]	; (23f466c <network_listening+0x18>)
 23f465c:	4403      	add	r3, r0
 23f465e:	681b      	ldr	r3, [r3, #0]
 23f4660:	6a1b      	ldr	r3, [r3, #32]
 23f4662:	9302      	str	r3, [sp, #8]
 23f4664:	bd09      	pop	{r0, r3, pc}
 23f4666:	0000      	.short	0x0000
 23f4668:	10079974 	.word	0x10079974
 23f466c:	00000028 	.word	0x00000028

023f4670 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f4670:	b509      	push	{r0, r3, lr}
 23f4672:	4804      	ldr	r0, [pc, #16]	; (23f4684 <network_set_listen_timeout+0x14>)
 23f4674:	6800      	ldr	r0, [r0, #0]
 23f4676:	4b04      	ldr	r3, [pc, #16]	; (23f4688 <network_set_listen_timeout+0x18>)
 23f4678:	4403      	add	r3, r0
 23f467a:	681b      	ldr	r3, [r3, #0]
 23f467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f467e:	9302      	str	r3, [sp, #8]
 23f4680:	bd09      	pop	{r0, r3, pc}
 23f4682:	0000      	.short	0x0000
 23f4684:	10079974 	.word	0x10079974
 23f4688:	00000028 	.word	0x00000028

023f468c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f468c:	b509      	push	{r0, r3, lr}
 23f468e:	4804      	ldr	r0, [pc, #16]	; (23f46a0 <network_get_listen_timeout+0x14>)
 23f4690:	6800      	ldr	r0, [r0, #0]
 23f4692:	4b04      	ldr	r3, [pc, #16]	; (23f46a4 <network_get_listen_timeout+0x18>)
 23f4694:	4403      	add	r3, r0
 23f4696:	681b      	ldr	r3, [r3, #0]
 23f4698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f469a:	9302      	str	r3, [sp, #8]
 23f469c:	bd09      	pop	{r0, r3, pc}
 23f469e:	0000      	.short	0x0000
 23f46a0:	10079974 	.word	0x10079974
 23f46a4:	00000028 	.word	0x00000028

023f46a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f46a8:	b509      	push	{r0, r3, lr}
 23f46aa:	4804      	ldr	r0, [pc, #16]	; (23f46bc <network_is_on+0x14>)
 23f46ac:	6800      	ldr	r0, [r0, #0]
 23f46ae:	4b04      	ldr	r3, [pc, #16]	; (23f46c0 <network_is_on+0x18>)
 23f46b0:	4403      	add	r3, r0
 23f46b2:	681b      	ldr	r3, [r3, #0]
 23f46b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f46b6:	9302      	str	r3, [sp, #8]
 23f46b8:	bd09      	pop	{r0, r3, pc}
 23f46ba:	0000      	.short	0x0000
 23f46bc:	10079974 	.word	0x10079974
 23f46c0:	00000028 	.word	0x00000028

023f46c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f46c4:	b509      	push	{r0, r3, lr}
 23f46c6:	4804      	ldr	r0, [pc, #16]	; (23f46d8 <network_is_off+0x14>)
 23f46c8:	6800      	ldr	r0, [r0, #0]
 23f46ca:	4b04      	ldr	r3, [pc, #16]	; (23f46dc <network_is_off+0x18>)
 23f46cc:	4403      	add	r3, r0
 23f46ce:	681b      	ldr	r3, [r3, #0]
 23f46d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f46d2:	9302      	str	r3, [sp, #8]
 23f46d4:	bd09      	pop	{r0, r3, pc}
 23f46d6:	0000      	.short	0x0000
 23f46d8:	10079974 	.word	0x10079974
 23f46dc:	00000028 	.word	0x00000028

023f46e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f46e0:	b509      	push	{r0, r3, lr}
 23f46e2:	4804      	ldr	r0, [pc, #16]	; (23f46f4 <set_system_mode+0x14>)
 23f46e4:	6800      	ldr	r0, [r0, #0]
 23f46e6:	4b04      	ldr	r3, [pc, #16]	; (23f46f8 <set_system_mode+0x18>)
 23f46e8:	4403      	add	r3, r0
 23f46ea:	681b      	ldr	r3, [r3, #0]
 23f46ec:	685b      	ldr	r3, [r3, #4]
 23f46ee:	9302      	str	r3, [sp, #8]
 23f46f0:	bd09      	pop	{r0, r3, pc}
 23f46f2:	0000      	.short	0x0000
 23f46f4:	10079974 	.word	0x10079974
 23f46f8:	00000008 	.word	0x00000008

023f46fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f46fc:	b509      	push	{r0, r3, lr}
 23f46fe:	4804      	ldr	r0, [pc, #16]	; (23f4710 <system_delay_ms+0x14>)
 23f4700:	6800      	ldr	r0, [r0, #0]
 23f4702:	4b04      	ldr	r3, [pc, #16]	; (23f4714 <system_delay_ms+0x18>)
 23f4704:	4403      	add	r3, r0
 23f4706:	681b      	ldr	r3, [r3, #0]
 23f4708:	695b      	ldr	r3, [r3, #20]
 23f470a:	9302      	str	r3, [sp, #8]
 23f470c:	bd09      	pop	{r0, r3, pc}
 23f470e:	0000      	.short	0x0000
 23f4710:	10079974 	.word	0x10079974
 23f4714:	00000008 	.word	0x00000008

023f4718 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f4718:	b509      	push	{r0, r3, lr}
 23f471a:	4804      	ldr	r0, [pc, #16]	; (23f472c <system_thread_set_state+0x14>)
 23f471c:	6800      	ldr	r0, [r0, #0]
 23f471e:	4b04      	ldr	r3, [pc, #16]	; (23f4730 <system_thread_set_state+0x18>)
 23f4720:	4403      	add	r3, r0
 23f4722:	681b      	ldr	r3, [r3, #0]
 23f4724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f4726:	9302      	str	r3, [sp, #8]
 23f4728:	bd09      	pop	{r0, r3, pc}
 23f472a:	0000      	.short	0x0000
 23f472c:	10079974 	.word	0x10079974
 23f4730:	00000008 	.word	0x00000008

023f4734 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f4734:	b509      	push	{r0, r3, lr}
 23f4736:	4804      	ldr	r0, [pc, #16]	; (23f4748 <system_ctrl_set_app_request_handler+0x14>)
 23f4738:	6800      	ldr	r0, [r0, #0]
 23f473a:	4b04      	ldr	r3, [pc, #16]	; (23f474c <system_ctrl_set_app_request_handler+0x18>)
 23f473c:	4403      	add	r3, r0
 23f473e:	681b      	ldr	r3, [r3, #0]
 23f4740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f4744:	9302      	str	r3, [sp, #8]
 23f4746:	bd09      	pop	{r0, r3, pc}
 23f4748:	10079974 	.word	0x10079974
 23f474c:	00000008 	.word	0x00000008

023f4750 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f4750:	b509      	push	{r0, r3, lr}
 23f4752:	4804      	ldr	r0, [pc, #16]	; (23f4764 <system_ctrl_set_result+0x14>)
 23f4754:	6800      	ldr	r0, [r0, #0]
 23f4756:	4b04      	ldr	r3, [pc, #16]	; (23f4768 <system_ctrl_set_result+0x18>)
 23f4758:	4403      	add	r3, r0
 23f475a:	681b      	ldr	r3, [r3, #0]
 23f475c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f4760:	9302      	str	r3, [sp, #8]
 23f4762:	bd09      	pop	{r0, r3, pc}
 23f4764:	10079974 	.word	0x10079974
 23f4768:	00000008 	.word	0x00000008

023f476c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f476c:	b509      	push	{r0, r3, lr}
 23f476e:	4804      	ldr	r0, [pc, #16]	; (23f4780 <malloc+0x14>)
 23f4770:	6800      	ldr	r0, [r0, #0]
 23f4772:	4b04      	ldr	r3, [pc, #16]	; (23f4784 <malloc+0x18>)
 23f4774:	4403      	add	r3, r0
 23f4776:	681b      	ldr	r3, [r3, #0]
 23f4778:	681b      	ldr	r3, [r3, #0]
 23f477a:	9302      	str	r3, [sp, #8]
 23f477c:	bd09      	pop	{r0, r3, pc}
 23f477e:	0000      	.short	0x0000
 23f4780:	10079974 	.word	0x10079974
 23f4784:	00000004 	.word	0x00000004

023f4788 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f4788:	b509      	push	{r0, r3, lr}
 23f478a:	4804      	ldr	r0, [pc, #16]	; (23f479c <free+0x14>)
 23f478c:	6800      	ldr	r0, [r0, #0]
 23f478e:	4b04      	ldr	r3, [pc, #16]	; (23f47a0 <free+0x18>)
 23f4790:	4403      	add	r3, r0
 23f4792:	681b      	ldr	r3, [r3, #0]
 23f4794:	685b      	ldr	r3, [r3, #4]
 23f4796:	9302      	str	r3, [sp, #8]
 23f4798:	bd09      	pop	{r0, r3, pc}
 23f479a:	0000      	.short	0x0000
 23f479c:	10079974 	.word	0x10079974
 23f47a0:	00000004 	.word	0x00000004

023f47a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f47a4:	b509      	push	{r0, r3, lr}
 23f47a6:	4804      	ldr	r0, [pc, #16]	; (23f47b8 <realloc+0x14>)
 23f47a8:	6800      	ldr	r0, [r0, #0]
 23f47aa:	4b04      	ldr	r3, [pc, #16]	; (23f47bc <realloc+0x18>)
 23f47ac:	4403      	add	r3, r0
 23f47ae:	681b      	ldr	r3, [r3, #0]
 23f47b0:	689b      	ldr	r3, [r3, #8]
 23f47b2:	9302      	str	r3, [sp, #8]
 23f47b4:	bd09      	pop	{r0, r3, pc}
 23f47b6:	0000      	.short	0x0000
 23f47b8:	10079974 	.word	0x10079974
 23f47bc:	00000004 	.word	0x00000004

023f47c0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f47c0:	b509      	push	{r0, r3, lr}
 23f47c2:	4804      	ldr	r0, [pc, #16]	; (23f47d4 <vsnprintf+0x14>)
 23f47c4:	6800      	ldr	r0, [r0, #0]
 23f47c6:	4b04      	ldr	r3, [pc, #16]	; (23f47d8 <vsnprintf+0x18>)
 23f47c8:	4403      	add	r3, r0
 23f47ca:	681b      	ldr	r3, [r3, #0]
 23f47cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f47ce:	9302      	str	r3, [sp, #8]
 23f47d0:	bd09      	pop	{r0, r3, pc}
 23f47d2:	0000      	.short	0x0000
 23f47d4:	10079974 	.word	0x10079974
 23f47d8:	00000004 	.word	0x00000004

023f47dc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f47dc:	b509      	push	{r0, r3, lr}
 23f47de:	4804      	ldr	r0, [pc, #16]	; (23f47f0 <abort+0x14>)
 23f47e0:	6800      	ldr	r0, [r0, #0]
 23f47e2:	4b04      	ldr	r3, [pc, #16]	; (23f47f4 <abort+0x18>)
 23f47e4:	4403      	add	r3, r0
 23f47e6:	681b      	ldr	r3, [r3, #0]
 23f47e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f47ea:	9302      	str	r3, [sp, #8]
 23f47ec:	bd09      	pop	{r0, r3, pc}
 23f47ee:	0000      	.short	0x0000
 23f47f0:	10079974 	.word	0x10079974
 23f47f4:	00000004 	.word	0x00000004

023f47f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f47f8:	b509      	push	{r0, r3, lr}
 23f47fa:	4804      	ldr	r0, [pc, #16]	; (23f480c <_malloc_r+0x14>)
 23f47fc:	6800      	ldr	r0, [r0, #0]
 23f47fe:	4b04      	ldr	r3, [pc, #16]	; (23f4810 <_malloc_r+0x18>)
 23f4800:	4403      	add	r3, r0
 23f4802:	681b      	ldr	r3, [r3, #0]
 23f4804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f4806:	9302      	str	r3, [sp, #8]
 23f4808:	bd09      	pop	{r0, r3, pc}
 23f480a:	0000      	.short	0x0000
 23f480c:	10079974 	.word	0x10079974
 23f4810:	00000004 	.word	0x00000004

023f4814 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f4814:	b509      	push	{r0, r3, lr}
 23f4816:	4804      	ldr	r0, [pc, #16]	; (23f4828 <__errno+0x14>)
 23f4818:	6800      	ldr	r0, [r0, #0]
 23f481a:	4b04      	ldr	r3, [pc, #16]	; (23f482c <__errno+0x18>)
 23f481c:	4403      	add	r3, r0
 23f481e:	681b      	ldr	r3, [r3, #0]
 23f4820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f4822:	9302      	str	r3, [sp, #8]
 23f4824:	bd09      	pop	{r0, r3, pc}
 23f4826:	0000      	.short	0x0000
 23f4828:	10079974 	.word	0x10079974
 23f482c:	00000004 	.word	0x00000004

023f4830 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f4830:	b509      	push	{r0, r3, lr}
 23f4832:	4804      	ldr	r0, [pc, #16]	; (23f4844 <__assert_func+0x14>)
 23f4834:	6800      	ldr	r0, [r0, #0]
 23f4836:	4b04      	ldr	r3, [pc, #16]	; (23f4848 <__assert_func+0x18>)
 23f4838:	4403      	add	r3, r0
 23f483a:	681b      	ldr	r3, [r3, #0]
 23f483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f483e:	9302      	str	r3, [sp, #8]
 23f4840:	bd09      	pop	{r0, r3, pc}
 23f4842:	0000      	.short	0x0000
 23f4844:	10079974 	.word	0x10079974
 23f4848:	00000004 	.word	0x00000004

023f484c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f484c:	b509      	push	{r0, r3, lr}
 23f484e:	4804      	ldr	r0, [pc, #16]	; (23f4860 <newlib_impure_ptr_callback+0x14>)
 23f4850:	6800      	ldr	r0, [r0, #0]
 23f4852:	4b04      	ldr	r3, [pc, #16]	; (23f4864 <newlib_impure_ptr_callback+0x18>)
 23f4854:	4403      	add	r3, r0
 23f4856:	681b      	ldr	r3, [r3, #0]
 23f4858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f485a:	9302      	str	r3, [sp, #8]
 23f485c:	bd09      	pop	{r0, r3, pc}
 23f485e:	0000      	.short	0x0000
 23f4860:	10079974 	.word	0x10079974
 23f4864:	00000004 	.word	0x00000004

023f4868 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f4868:	2300      	movs	r3, #0
 23f486a:	6840      	ldr	r0, [r0, #4]
 23f486c:	461a      	mov	r2, r3
 23f486e:	f7ff be8f 	b.w	23f4590 <network_connect>

023f4872 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f4872:	2200      	movs	r2, #0
 23f4874:	2102      	movs	r1, #2
 23f4876:	6840      	ldr	r0, [r0, #4]
 23f4878:	f7ff bea6 	b.w	23f45c8 <network_disconnect>

023f487c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f487c:	2200      	movs	r2, #0
 23f487e:	6840      	ldr	r0, [r0, #4]
 23f4880:	4611      	mov	r1, r2
 23f4882:	f7ff be93 	b.w	23f45ac <network_connecting>

023f4886 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f4886:	2200      	movs	r2, #0
 23f4888:	6840      	ldr	r0, [r0, #4]
 23f488a:	4611      	mov	r1, r2
 23f488c:	f7ff beaa 	b.w	23f45e4 <network_ready>

023f4890 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f4890:	2300      	movs	r3, #0
 23f4892:	6840      	ldr	r0, [r0, #4]
 23f4894:	461a      	mov	r2, r3
 23f4896:	4619      	mov	r1, r3
 23f4898:	f7ff beb2 	b.w	23f4600 <network_on>

023f489c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f489c:	2300      	movs	r3, #0
 23f489e:	6840      	ldr	r0, [r0, #4]
 23f48a0:	461a      	mov	r2, r3
 23f48a2:	4619      	mov	r1, r3
 23f48a4:	f7ff beba 	b.w	23f461c <network_off>

023f48a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f48a8:	2100      	movs	r1, #0
 23f48aa:	6840      	ldr	r0, [r0, #4]
 23f48ac:	f7ff befc 	b.w	23f46a8 <network_is_on>

023f48b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f48b0:	2100      	movs	r1, #0
 23f48b2:	6840      	ldr	r0, [r0, #4]
 23f48b4:	f7ff bf06 	b.w	23f46c4 <network_is_off>

023f48b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f48b8:	2200      	movs	r2, #0
 23f48ba:	6840      	ldr	r0, [r0, #4]
 23f48bc:	f081 0101 	eor.w	r1, r1, #1
 23f48c0:	f7ff beba 	b.w	23f4638 <network_listen>

023f48c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f48c4:	2200      	movs	r2, #0
 23f48c6:	6840      	ldr	r0, [r0, #4]
 23f48c8:	f7ff bed2 	b.w	23f4670 <network_set_listen_timeout>

023f48cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f48cc:	2200      	movs	r2, #0
 23f48ce:	6840      	ldr	r0, [r0, #4]
 23f48d0:	4611      	mov	r1, r2
 23f48d2:	f7ff bedb 	b.w	23f468c <network_get_listen_timeout>

023f48d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f48d6:	2200      	movs	r2, #0
 23f48d8:	6840      	ldr	r0, [r0, #4]
 23f48da:	4611      	mov	r1, r2
 23f48dc:	f7ff beba 	b.w	23f4654 <network_listening>

023f48e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23f48e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f48e4:	b095      	sub	sp, #84	; 0x54
 23f48e6:	4614      	mov	r4, r2
 23f48e8:	460d      	mov	r5, r1
 23f48ea:	4607      	mov	r7, r0
    IPAddress addr;
 23f48ec:	f000 fbc2 	bl	23f5074 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f48f0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23f48f2:	221c      	movs	r2, #28
 23f48f4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23f48f6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23f48f8:	f006 fbe4 	bl	23fb0c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23f48fc:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f48fe:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23f4900:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f4902:	2100      	movs	r1, #0
 23f4904:	466b      	mov	r3, sp
 23f4906:	aa0c      	add	r2, sp, #48	; 0x30
 23f4908:	f7ff fde0 	bl	23f44cc <netdb_getaddrinfo>
    if (!r) {
 23f490c:	4604      	mov	r4, r0
 23f490e:	2800      	cmp	r0, #0
 23f4910:	d14b      	bne.n	23f49aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f4912:	4602      	mov	r2, r0
 23f4914:	2101      	movs	r1, #1
 23f4916:	6868      	ldr	r0, [r5, #4]
 23f4918:	f7ff fe64 	bl	23f45e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f491c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f491e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f4920:	4622      	mov	r2, r4
 23f4922:	6868      	ldr	r0, [r5, #4]
 23f4924:	f7ff fe5e 	bl	23f45e4 <network_ready>
        bool ok = false;
 23f4928:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f492a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f492c:	9e00      	ldr	r6, [sp, #0]
 23f492e:	2e00      	cmp	r6, #0
 23f4930:	d03b      	beq.n	23f49aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23f4932:	2900      	cmp	r1, #0
 23f4934:	d139      	bne.n	23f49aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f4936:	6873      	ldr	r3, [r6, #4]
 23f4938:	2b02      	cmp	r3, #2
 23f493a:	d003      	beq.n	23f4944 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23f493c:	2b0a      	cmp	r3, #10
 23f493e:	d011      	beq.n	23f4964 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f4940:	69f6      	ldr	r6, [r6, #28]
 23f4942:	e7f4      	b.n	23f492e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23f4944:	f1b8 0f00 	cmp.w	r8, #0
 23f4948:	d0fa      	beq.n	23f4940 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f494a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23f494c:	a806      	add	r0, sp, #24
 23f494e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f4950:	1d3c      	adds	r4, r7, #4
 23f4952:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23f4954:	f000 fbbc 	bl	23f50d0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f4958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f495a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f495c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f495e:	4641      	mov	r1, r8
 23f4960:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f4962:	e7ed      	b.n	23f4940 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f4964:	f1b9 0f00 	cmp.w	r9, #0
 23f4968:	d0ea      	beq.n	23f4940 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f496a:	2210      	movs	r2, #16
 23f496c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f496e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f4970:	f006 fba8 	bl	23fb0c4 <memset>
                    a.v = 6;
 23f4974:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f4976:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23f4978:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f497c:	f104 0308 	add.w	r3, r4, #8
 23f4980:	3418      	adds	r4, #24
 23f4982:	462a      	mov	r2, r5
 23f4984:	6818      	ldr	r0, [r3, #0]
 23f4986:	6859      	ldr	r1, [r3, #4]
 23f4988:	3308      	adds	r3, #8
 23f498a:	c203      	stmia	r2!, {r0, r1}
 23f498c:	42a3      	cmp	r3, r4
 23f498e:	4615      	mov	r5, r2
 23f4990:	d1f7      	bne.n	23f4982 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23f4992:	a901      	add	r1, sp, #4
 23f4994:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23f4996:	1d3c      	adds	r4, r7, #4
 23f4998:	ad07      	add	r5, sp, #28
 23f499a:	f000 fb79 	bl	23f5090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f499e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f49a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f49a2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f49a4:	4649      	mov	r1, r9
 23f49a6:	7023      	strb	r3, [r4, #0]
                    break;
 23f49a8:	e7ca      	b.n	23f4940 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f49aa:	9800      	ldr	r0, [sp, #0]
 23f49ac:	f7ff fd80 	bl	23f44b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f49b0:	4638      	mov	r0, r7
 23f49b2:	b015      	add	sp, #84	; 0x54
 23f49b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023f49b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f49b8:	4b02      	ldr	r3, [pc, #8]	; (23f49c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f49ba:	4a03      	ldr	r2, [pc, #12]	; (23f49c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f49bc:	601a      	str	r2, [r3, #0]
 23f49be:	2200      	movs	r2, #0
 23f49c0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f49c2:	4770      	bx	lr
 23f49c4:	1007ae68 	.word	0x1007ae68
 23f49c8:	023ff5b4 	.word	0x023ff5b4

023f49cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f49cc:	2200      	movs	r2, #0
 23f49ce:	6840      	ldr	r0, [r0, #4]
 23f49d0:	4611      	mov	r1, r2
 23f49d2:	f7ff be07 	b.w	23f45e4 <network_ready>

023f49d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f49d6:	2200      	movs	r2, #0
 23f49d8:	6840      	ldr	r0, [r0, #4]
 23f49da:	4611      	mov	r1, r2
 23f49dc:	f7ff be3a 	b.w	23f4654 <network_listening>

023f49e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f49e0:	2200      	movs	r2, #0
 23f49e2:	6840      	ldr	r0, [r0, #4]
 23f49e4:	4611      	mov	r1, r2
 23f49e6:	f7ff be51 	b.w	23f468c <network_get_listen_timeout>

023f49ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f49ea:	2200      	movs	r2, #0
 23f49ec:	6840      	ldr	r0, [r0, #4]
 23f49ee:	f7ff be3f 	b.w	23f4670 <network_set_listen_timeout>

023f49f2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f49f2:	2200      	movs	r2, #0
 23f49f4:	6840      	ldr	r0, [r0, #4]
 23f49f6:	f081 0101 	eor.w	r1, r1, #1
 23f49fa:	f7ff be1d 	b.w	23f4638 <network_listen>

023f49fe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f49fe:	2300      	movs	r3, #0
 23f4a00:	6840      	ldr	r0, [r0, #4]
 23f4a02:	461a      	mov	r2, r3
 23f4a04:	4619      	mov	r1, r3
 23f4a06:	f7ff be09 	b.w	23f461c <network_off>

023f4a0a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f4a0a:	2300      	movs	r3, #0
 23f4a0c:	6840      	ldr	r0, [r0, #4]
 23f4a0e:	461a      	mov	r2, r3
 23f4a10:	4619      	mov	r1, r3
 23f4a12:	f7ff bdf5 	b.w	23f4600 <network_on>

023f4a16 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f4a16:	2200      	movs	r2, #0
 23f4a18:	6840      	ldr	r0, [r0, #4]
 23f4a1a:	4611      	mov	r1, r2
 23f4a1c:	f7ff bdc6 	b.w	23f45ac <network_connecting>

023f4a20 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f4a20:	2200      	movs	r2, #0
 23f4a22:	2102      	movs	r1, #2
 23f4a24:	6840      	ldr	r0, [r0, #4]
 23f4a26:	f7ff bdcf 	b.w	23f45c8 <network_disconnect>

023f4a2a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f4a2a:	2300      	movs	r3, #0
 23f4a2c:	6840      	ldr	r0, [r0, #4]
 23f4a2e:	461a      	mov	r2, r3
 23f4a30:	f7ff bdae 	b.w	23f4590 <network_connect>

023f4a34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f4a34:	2204      	movs	r2, #4
 23f4a36:	4b02      	ldr	r3, [pc, #8]	; (23f4a40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f4a38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f4a3a:	4a02      	ldr	r2, [pc, #8]	; (23f4a44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f4a3c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f4a3e:	4770      	bx	lr
 23f4a40:	1007ae70 	.word	0x1007ae70
 23f4a44:	023ff5f0 	.word	0x023ff5f0

023f4a48 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f4a48:	4770      	bx	lr

023f4a4a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f4a4a:	7441      	strb	r1, [r0, #17]
}
 23f4a4c:	4770      	bx	lr

023f4a4e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f4a4e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f4a50:	7c00      	ldrb	r0, [r0, #16]
 23f4a52:	f7ff fb97 	bl	23f4184 <hal_usart_available_data_for_write>
}
 23f4a56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f4a5a:	bd08      	pop	{r3, pc}

023f4a5c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f4a5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f4a5e:	7c00      	ldrb	r0, [r0, #16]
 23f4a60:	f7ff fb4a 	bl	23f40f8 <hal_usart_available>
}
 23f4a64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f4a68:	bd08      	pop	{r3, pc}

023f4a6a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f4a6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f4a6c:	7c00      	ldrb	r0, [r0, #16]
 23f4a6e:	f7ff fb5f 	bl	23f4130 <hal_usart_peek>
}
 23f4a72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f4a76:	bd08      	pop	{r3, pc}

023f4a78 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f4a78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f4a7a:	7c00      	ldrb	r0, [r0, #16]
 23f4a7c:	f7ff fb4a 	bl	23f4114 <hal_usart_read>
}
 23f4a80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f4a84:	bd08      	pop	{r3, pc}

023f4a86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f4a86:	7c00      	ldrb	r0, [r0, #16]
 23f4a88:	f7ff bb60 	b.w	23f414c <hal_usart_flush>

023f4a8c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f4a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f4a8e:	7c45      	ldrb	r5, [r0, #17]
{
 23f4a90:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f4a92:	b12d      	cbz	r5, 23f4aa0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f4a94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f4a96:	b003      	add	sp, #12
 23f4a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f4a9c:	f7ff bb1e 	b.w	23f40dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f4aa0:	7c00      	ldrb	r0, [r0, #16]
 23f4aa2:	9101      	str	r1, [sp, #4]
 23f4aa4:	f7ff fb6e 	bl	23f4184 <hal_usart_available_data_for_write>
 23f4aa8:	2800      	cmp	r0, #0
 23f4aaa:	9901      	ldr	r1, [sp, #4]
 23f4aac:	dcf2      	bgt.n	23f4a94 <_ZN11USARTSerial5writeEh+0x8>
}
 23f4aae:	4628      	mov	r0, r5
 23f4ab0:	b003      	add	sp, #12
 23f4ab2:	bd30      	pop	{r4, r5, pc}

023f4ab4 <_ZN11USARTSerialD0Ev>:
 23f4ab4:	b510      	push	{r4, lr}
 23f4ab6:	4604      	mov	r4, r0
 23f4ab8:	2114      	movs	r1, #20
 23f4aba:	f7f5 fd40 	bl	23ea53e <_ZdlPvj>
 23f4abe:	4620      	mov	r0, r4
 23f4ac0:	bd10      	pop	{r4, pc}
	...

023f4ac4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f4ac4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f4ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f4aca:	4604      	mov	r4, r0
 23f4acc:	4608      	mov	r0, r1
 23f4ace:	4611      	mov	r1, r2
 23f4ad0:	2200      	movs	r2, #0
 23f4ad2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f4ad6:	4b04      	ldr	r3, [pc, #16]	; (23f4ae8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f4ad8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f4ada:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f4adc:	2301      	movs	r3, #1
 23f4ade:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f4ae0:	f7ff fb6c 	bl	23f41bc <hal_usart_init_ex>
}
 23f4ae4:	4620      	mov	r0, r4
 23f4ae6:	bd10      	pop	{r4, pc}
 23f4ae8:	023ff634 	.word	0x023ff634

023f4aec <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23f4aec:	2300      	movs	r3, #0
 23f4aee:	7c00      	ldrb	r0, [r0, #16]
 23f4af0:	f7ff bb56 	b.w	23f41a0 <hal_usart_begin_config>

023f4af4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23f4af4:	2200      	movs	r2, #0
 23f4af6:	f7ff bff9 	b.w	23f4aec <_ZN11USARTSerial5beginEmm>

023f4afa <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23f4afa:	7c00      	ldrb	r0, [r0, #16]
 23f4afc:	f7ff bae0 	b.w	23f40c0 <hal_usart_end>

023f4b00 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f4b00:	7c00      	ldrb	r0, [r0, #16]
 23f4b02:	f7ff bb31 	b.w	23f4168 <hal_usart_is_enabled>

023f4b06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f4b06:	2201      	movs	r2, #1
 23f4b08:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f4b0c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f4b10:	4618      	mov	r0, r3
 23f4b12:	2901      	cmp	r1, #1
 23f4b14:	d108      	bne.n	23f4b28 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f4b16:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f4b1a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f4b1e:	3a01      	subs	r2, #1
 23f4b20:	f103 0310 	add.w	r3, r3, #16
 23f4b24:	d1f2      	bne.n	23f4b0c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f4b26:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f4b28:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f4b2a:	bf04      	itt	eq
 23f4b2c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f4b30:	1852      	addeq	r2, r2, r1
 23f4b32:	e7f4      	b.n	23f4b1e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f4b34 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f4b34:	b40e      	push	{r1, r2, r3}
 23f4b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f4b38:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b3a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f4b3c:	af00      	add	r7, sp, #0
 23f4b3e:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f4b42:	f855 2b04 	ldr.w	r2, [r5], #4
 23f4b46:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b48:	462b      	mov	r3, r5
 23f4b4a:	1878      	adds	r0, r7, r1
 23f4b4c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f4b4e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b50:	f7ff fe36 	bl	23f47c0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f4b54:	280f      	cmp	r0, #15
 23f4b56:	687a      	ldr	r2, [r7, #4]
 23f4b58:	d91a      	bls.n	23f4b90 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f4b5a:	f100 0308 	add.w	r3, r0, #8
 23f4b5e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f4b62:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f4b64:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b68:	1c41      	adds	r1, r0, #1
 23f4b6a:	462b      	mov	r3, r5
 23f4b6c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f4b6e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b70:	f7ff fe26 	bl	23f47c0 <vsnprintf>
        if (n > 0) {
 23f4b74:	1e02      	subs	r2, r0, #0
 23f4b76:	dd04      	ble.n	23f4b82 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f4b78:	6823      	ldr	r3, [r4, #0]
 23f4b7a:	4669      	mov	r1, sp
 23f4b7c:	4620      	mov	r0, r4
 23f4b7e:	689b      	ldr	r3, [r3, #8]
 23f4b80:	4798      	blx	r3
 23f4b82:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f4b84:	3720      	adds	r7, #32
 23f4b86:	46bd      	mov	sp, r7
 23f4b88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f4b8c:	b003      	add	sp, #12
 23f4b8e:	4770      	bx	lr
    } else if (n > 0) {
 23f4b90:	2800      	cmp	r0, #0
 23f4b92:	d0f7      	beq.n	23f4b84 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f4b94:	6823      	ldr	r3, [r4, #0]
 23f4b96:	4602      	mov	r2, r0
 23f4b98:	689b      	ldr	r3, [r3, #8]
 23f4b9a:	4620      	mov	r0, r4
 23f4b9c:	f107 0110 	add.w	r1, r7, #16
 23f4ba0:	4798      	blx	r3
}
 23f4ba2:	e7ef      	b.n	23f4b84 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f4ba4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23f4ba4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f4ba6:	6843      	ldr	r3, [r0, #4]
    {
 23f4ba8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f4baa:	3b01      	subs	r3, #1
 23f4bac:	6043      	str	r3, [r0, #4]
 23f4bae:	b963      	cbnz	r3, 23f4bca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23f4bb0:	6803      	ldr	r3, [r0, #0]
 23f4bb2:	689b      	ldr	r3, [r3, #8]
 23f4bb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f4bb6:	68a3      	ldr	r3, [r4, #8]
 23f4bb8:	3b01      	subs	r3, #1
 23f4bba:	60a3      	str	r3, [r4, #8]
 23f4bbc:	b92b      	cbnz	r3, 23f4bca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f4bbe:	6823      	ldr	r3, [r4, #0]
 23f4bc0:	4620      	mov	r0, r4
    }
 23f4bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f4bc6:	68db      	ldr	r3, [r3, #12]
 23f4bc8:	4718      	bx	r3
    }
 23f4bca:	bd10      	pop	{r4, pc}

023f4bcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f4bcc:	b538      	push	{r3, r4, r5, lr}
 23f4bce:	680b      	ldr	r3, [r1, #0]
 23f4bd0:	4604      	mov	r4, r0
 23f4bd2:	6003      	str	r3, [r0, #0]
 23f4bd4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f4bd6:	6843      	ldr	r3, [r0, #4]
 23f4bd8:	429d      	cmp	r5, r3
 23f4bda:	d008      	beq.n	23f4bee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f4bdc:	b115      	cbz	r5, 23f4be4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f4bde:	686b      	ldr	r3, [r5, #4]
 23f4be0:	3301      	adds	r3, #1
 23f4be2:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f4be4:	6860      	ldr	r0, [r4, #4]
 23f4be6:	b108      	cbz	r0, 23f4bec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f4be8:	f7ff ffdc 	bl	23f4ba4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f4bec:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f4bee:	bd38      	pop	{r3, r4, r5, pc}

023f4bf0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f4bf0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f4bf2:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f4bf4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f4bf8:	2201      	movs	r2, #1
 23f4bfa:	689b      	ldr	r3, [r3, #8]
 23f4bfc:	f10d 0107 	add.w	r1, sp, #7
 23f4c00:	4798      	blx	r3
}
 23f4c02:	b003      	add	sp, #12
 23f4c04:	f85d fb04 	ldr.w	pc, [sp], #4

023f4c08 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f4c08:	460b      	mov	r3, r1
 23f4c0a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f4c0c:	2200      	movs	r2, #0
 23f4c0e:	b510      	push	{r4, lr}
 23f4c10:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f4c12:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f4c16:	6083      	str	r3, [r0, #8]
    if (t) {
 23f4c18:	b90b      	cbnz	r3, 23f4c1e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f4c1a:	4620      	mov	r0, r4
 23f4c1c:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f4c1e:	f7ff ffd5 	bl	23f4bcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f4c22:	e7fa      	b.n	23f4c1a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f4c24 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f4c24:	6883      	ldr	r3, [r0, #8]
 23f4c26:	b1eb      	cbz	r3, 23f4c64 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f4c28:	781a      	ldrb	r2, [r3, #0]
 23f4c2a:	2a03      	cmp	r2, #3
 23f4c2c:	d81a      	bhi.n	23f4c64 <_ZNK5spark9JSONValue4typeEv+0x40>
 23f4c2e:	e8df f002 	tbb	[pc, r2]
 23f4c32:	1704      	.short	0x1704
 23f4c34:	1b02      	.short	0x1b02
 23f4c36:	2005      	movs	r0, #5
 23f4c38:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f4c3a:	6802      	ldr	r2, [r0, #0]
 23f4c3c:	685b      	ldr	r3, [r3, #4]
 23f4c3e:	6852      	ldr	r2, [r2, #4]
 23f4c40:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f4c42:	282d      	cmp	r0, #45	; 0x2d
 23f4c44:	d012      	beq.n	23f4c6c <_ZNK5spark9JSONValue4typeEv+0x48>
 23f4c46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f4c4a:	2b09      	cmp	r3, #9
 23f4c4c:	d90e      	bls.n	23f4c6c <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f4c4e:	2874      	cmp	r0, #116	; 0x74
 23f4c50:	d00e      	beq.n	23f4c70 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f4c52:	2866      	cmp	r0, #102	; 0x66
 23f4c54:	d00c      	beq.n	23f4c70 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f4c56:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f4c5a:	4258      	negs	r0, r3
 23f4c5c:	4158      	adcs	r0, r3
 23f4c5e:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f4c60:	2006      	movs	r0, #6
 23f4c62:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f4c64:	2000      	movs	r0, #0
 23f4c66:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f4c68:	2004      	movs	r0, #4
 23f4c6a:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f4c6c:	2003      	movs	r0, #3
 23f4c6e:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f4c70:	2002      	movs	r0, #2
}
 23f4c72:	4770      	bx	lr

023f4c74 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f4c74:	b510      	push	{r4, lr}
 23f4c76:	4604      	mov	r4, r0
    switch (type()) {
 23f4c78:	f7ff ffd4 	bl	23f4c24 <_ZNK5spark9JSONValue4typeEv>
 23f4c7c:	2802      	cmp	r0, #2
 23f4c7e:	d00e      	beq.n	23f4c9e <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f4c80:	1ec3      	subs	r3, r0, #3
 23f4c82:	b2db      	uxtb	r3, r3
 23f4c84:	2b01      	cmp	r3, #1
 23f4c86:	d814      	bhi.n	23f4cb2 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f4c88:	6822      	ldr	r2, [r4, #0]
 23f4c8a:	68a3      	ldr	r3, [r4, #8]
 23f4c8c:	6850      	ldr	r0, [r2, #4]
 23f4c8e:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f4c90:	220a      	movs	r2, #10
}
 23f4c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f4c96:	2100      	movs	r1, #0
 23f4c98:	4418      	add	r0, r3
 23f4c9a:	f006 bb2f 	b.w	23fb2fc <strtol>
        const char* const s = d_->json + t_->start;
 23f4c9e:	6822      	ldr	r2, [r4, #0]
 23f4ca0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f4ca2:	6852      	ldr	r2, [r2, #4]
 23f4ca4:	685b      	ldr	r3, [r3, #4]
 23f4ca6:	5cd0      	ldrb	r0, [r2, r3]
 23f4ca8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f4cac:	4258      	negs	r0, r3
 23f4cae:	4158      	adcs	r0, r3
}
 23f4cb0:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f4cb2:	2000      	movs	r0, #0
 23f4cb4:	e7fc      	b.n	23f4cb0 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

023f4cb8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f4cb8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f4cba:	2300      	movs	r3, #0
 23f4cbc:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f4cbe:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f4cc2:	480e      	ldr	r0, [pc, #56]	; (23f4cfc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f4cc4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f4cc8:	b1a9      	cbz	r1, 23f4cf6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f4cca:	780b      	ldrb	r3, [r1, #0]
 23f4ccc:	2b03      	cmp	r3, #3
 23f4cce:	d006      	beq.n	23f4cde <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f4cd0:	b98b      	cbnz	r3, 23f4cf6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f4cd2:	6813      	ldr	r3, [r2, #0]
 23f4cd4:	6858      	ldr	r0, [r3, #4]
 23f4cd6:	684b      	ldr	r3, [r1, #4]
 23f4cd8:	5cc3      	ldrb	r3, [r0, r3]
 23f4cda:	2b6e      	cmp	r3, #110	; 0x6e
 23f4cdc:	d007      	beq.n	23f4cee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f4cde:	6813      	ldr	r3, [r2, #0]
 23f4ce0:	684d      	ldr	r5, [r1, #4]
 23f4ce2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f4ce4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f4ce6:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f4ce8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f4cea:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f4cec:	60e3      	str	r3, [r4, #12]
 23f4cee:	4611      	mov	r1, r2
 23f4cf0:	4620      	mov	r0, r4
 23f4cf2:	f7ff ff6b 	bl	23f4bcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f4cf6:	4620      	mov	r0, r4
 23f4cf8:	bd38      	pop	{r3, r4, r5, pc}
 23f4cfa:	bf00      	nop
 23f4cfc:	023fc429 	.word	0x023fc429

023f4d00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f4d00:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f4d02:	2500      	movs	r5, #0
 23f4d04:	460b      	mov	r3, r1
 23f4d06:	4604      	mov	r4, r0
 23f4d08:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f4d0a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f4d0e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f4d12:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f4d16:	b14b      	cbz	r3, 23f4d2c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f4d18:	781a      	ldrb	r2, [r3, #0]
 23f4d1a:	2a01      	cmp	r2, #1
 23f4d1c:	d106      	bne.n	23f4d2c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f4d1e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f4d22:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f4d24:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f4d26:	6143      	str	r3, [r0, #20]
 23f4d28:	f7ff ff50 	bl	23f4bcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f4d2c:	4620      	mov	r0, r4
 23f4d2e:	bd38      	pop	{r3, r4, r5, pc}

023f4d30 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f4d30:	b510      	push	{r4, lr}
    if (!n_) {
 23f4d32:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f4d34:	4604      	mov	r4, r0
    if (!n_) {
 23f4d36:	b163      	cbz	r3, 23f4d52 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f4d38:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f4d3a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f4d3c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f4d3e:	3010      	adds	r0, #16
 23f4d40:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f4d42:	6120      	str	r0, [r4, #16]
    --n_;
 23f4d44:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f4d46:	b113      	cbz	r3, 23f4d4e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f4d48:	f7ff fedd 	bl	23f4b06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f4d4c:	60a0      	str	r0, [r4, #8]
    return true;
 23f4d4e:	2001      	movs	r0, #1
 23f4d50:	e000      	b.n	23f4d54 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f4d52:	4618      	mov	r0, r3
}
 23f4d54:	bd10      	pop	{r4, pc}

023f4d56 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f4d56:	b510      	push	{r4, lr}
    write('}');
 23f4d58:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f4d5a:	4604      	mov	r4, r0
    write('}');
 23f4d5c:	f7ff ff48 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f4d60:	2301      	movs	r3, #1
}
 23f4d62:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4d64:	7123      	strb	r3, [r4, #4]
}
 23f4d66:	bd10      	pop	{r4, pc}

023f4d68 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f4d68:	b508      	push	{r3, lr}
    switch (state_) {
 23f4d6a:	7903      	ldrb	r3, [r0, #4]
 23f4d6c:	2b01      	cmp	r3, #1
 23f4d6e:	d002      	beq.n	23f4d76 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f4d70:	2b02      	cmp	r3, #2
 23f4d72:	d004      	beq.n	23f4d7e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f4d74:	bd08      	pop	{r3, pc}
        write(',');
 23f4d76:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f4d78:	f7ff ff3a 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
}
 23f4d7c:	e7fa      	b.n	23f4d74 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f4d7e:	213a      	movs	r1, #58	; 0x3a
 23f4d80:	e7fa      	b.n	23f4d78 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f4d82 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f4d82:	b510      	push	{r4, lr}
 23f4d84:	4604      	mov	r4, r0
    writeSeparator();
 23f4d86:	f7ff ffef 	bl	23f4d68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f4d8a:	4620      	mov	r0, r4
 23f4d8c:	217b      	movs	r1, #123	; 0x7b
 23f4d8e:	f7ff ff2f 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f4d92:	2300      	movs	r3, #0
}
 23f4d94:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f4d96:	7123      	strb	r3, [r4, #4]
}
 23f4d98:	bd10      	pop	{r4, pc}
	...

023f4d9c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f4d9c:	b513      	push	{r0, r1, r4, lr}
 23f4d9e:	4604      	mov	r4, r0
 23f4da0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f4da2:	f7ff ffe1 	bl	23f4d68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f4da6:	6823      	ldr	r3, [r4, #0]
 23f4da8:	4620      	mov	r0, r4
 23f4daa:	68db      	ldr	r3, [r3, #12]
 23f4dac:	9a01      	ldr	r2, [sp, #4]
 23f4dae:	4903      	ldr	r1, [pc, #12]	; (23f4dbc <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f4db0:	4798      	blx	r3
    state_ = NEXT;
 23f4db2:	2301      	movs	r3, #1
}
 23f4db4:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4db6:	7123      	strb	r3, [r4, #4]
}
 23f4db8:	b002      	add	sp, #8
 23f4dba:	bd10      	pop	{r4, pc}
 23f4dbc:	023fc2ee 	.word	0x023fc2ee

023f4dc0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f4dc0:	b513      	push	{r0, r1, r4, lr}
 23f4dc2:	4604      	mov	r4, r0
 23f4dc4:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f4dc6:	f7ff ffcf 	bl	23f4d68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f4dca:	6823      	ldr	r3, [r4, #0]
 23f4dcc:	4620      	mov	r0, r4
 23f4dce:	68db      	ldr	r3, [r3, #12]
 23f4dd0:	9a01      	ldr	r2, [sp, #4]
 23f4dd2:	4903      	ldr	r1, [pc, #12]	; (23f4de0 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f4dd4:	4798      	blx	r3
    state_ = NEXT;
 23f4dd6:	2301      	movs	r3, #1
}
 23f4dd8:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4dda:	7123      	strb	r3, [r4, #4]
}
 23f4ddc:	b002      	add	sp, #8
 23f4dde:	bd10      	pop	{r4, pc}
 23f4de0:	023ff65c 	.word	0x023ff65c

023f4de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f4de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f4de8:	460d      	mov	r5, r1
 23f4dea:	4690      	mov	r8, r2
    write('"');
 23f4dec:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f4dee:	4604      	mov	r4, r0
 23f4df0:	462f      	mov	r7, r5
    write('"');
 23f4df2:	f7ff fefd 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f4df6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f4e9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f4dfa:	44a8      	add	r8, r5
    while (s != end) {
 23f4dfc:	4547      	cmp	r7, r8
 23f4dfe:	46ba      	mov	sl, r7
 23f4e00:	d03d      	beq.n	23f4e7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f4e02:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f4e06:	2e22      	cmp	r6, #34	; 0x22
 23f4e08:	d006      	beq.n	23f4e18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f4e0a:	2e5c      	cmp	r6, #92	; 0x5c
 23f4e0c:	d004      	beq.n	23f4e18 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f4e0e:	4630      	mov	r0, r6
 23f4e10:	f006 f916 	bl	23fb040 <isprint>
 23f4e14:	2800      	cmp	r0, #0
 23f4e16:	d1f1      	bne.n	23f4dfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f4e18:	6823      	ldr	r3, [r4, #0]
 23f4e1a:	4629      	mov	r1, r5
 23f4e1c:	4620      	mov	r0, r4
 23f4e1e:	689b      	ldr	r3, [r3, #8]
 23f4e20:	ebaa 0205 	sub.w	r2, sl, r5
 23f4e24:	4798      	blx	r3
            write('\\');
 23f4e26:	215c      	movs	r1, #92	; 0x5c
 23f4e28:	4620      	mov	r0, r4
 23f4e2a:	f7ff fee1 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f4e2e:	2e0d      	cmp	r6, #13
 23f4e30:	d80a      	bhi.n	23f4e48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f4e32:	2e07      	cmp	r6, #7
 23f4e34:	d91c      	bls.n	23f4e70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f4e36:	f1a6 0308 	sub.w	r3, r6, #8
 23f4e3a:	2b05      	cmp	r3, #5
 23f4e3c:	d818      	bhi.n	23f4e70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f4e3e:	e8df f003 	tbb	[pc, r3]
 23f4e42:	0f0d      	.short	0x0f0d
 23f4e44:	15131711 	.word	0x15131711
 23f4e48:	2e22      	cmp	r6, #34	; 0x22
 23f4e4a:	d001      	beq.n	23f4e50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f4e4c:	2e5c      	cmp	r6, #92	; 0x5c
 23f4e4e:	d10f      	bne.n	23f4e70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f4e50:	4631      	mov	r1, r6
                write('b');
 23f4e52:	4620      	mov	r0, r4
 23f4e54:	f7ff fecc 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f4e58:	463d      	mov	r5, r7
    while (s != end) {
 23f4e5a:	e7cf      	b.n	23f4dfc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f4e5c:	2162      	movs	r1, #98	; 0x62
 23f4e5e:	e7f8      	b.n	23f4e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f4e60:	2174      	movs	r1, #116	; 0x74
 23f4e62:	e7f6      	b.n	23f4e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f4e64:	216e      	movs	r1, #110	; 0x6e
 23f4e66:	e7f4      	b.n	23f4e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f4e68:	2166      	movs	r1, #102	; 0x66
 23f4e6a:	e7f2      	b.n	23f4e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f4e6c:	2172      	movs	r1, #114	; 0x72
 23f4e6e:	e7f0      	b.n	23f4e52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f4e70:	6823      	ldr	r3, [r4, #0]
 23f4e72:	4632      	mov	r2, r6
 23f4e74:	4649      	mov	r1, r9
 23f4e76:	4620      	mov	r0, r4
 23f4e78:	68db      	ldr	r3, [r3, #12]
 23f4e7a:	4798      	blx	r3
                break;
 23f4e7c:	e7ec      	b.n	23f4e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f4e7e:	42bd      	cmp	r5, r7
 23f4e80:	d005      	beq.n	23f4e8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f4e82:	6823      	ldr	r3, [r4, #0]
 23f4e84:	4629      	mov	r1, r5
 23f4e86:	4620      	mov	r0, r4
 23f4e88:	689b      	ldr	r3, [r3, #8]
 23f4e8a:	1b7a      	subs	r2, r7, r5
 23f4e8c:	4798      	blx	r3
    }
    write('"');
 23f4e8e:	2122      	movs	r1, #34	; 0x22
 23f4e90:	4620      	mov	r0, r4
 23f4e92:	f7ff fead 	bl	23f4bf0 <_ZN5spark10JSONWriter5writeEc>
}
 23f4e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f4e9a:	bf00      	nop
 23f4e9c:	023ff65f 	.word	0x023ff65f

023f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f4ea0:	b513      	push	{r0, r1, r4, lr}
 23f4ea2:	4604      	mov	r4, r0
 23f4ea4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f4ea8:	f7ff ff5e 	bl	23f4d68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f4eac:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f4eb0:	4620      	mov	r0, r4
 23f4eb2:	f7ff ff97 	bl	23f4de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f4eb6:	2302      	movs	r3, #2
}
 23f4eb8:	4620      	mov	r0, r4
    state_ = VALUE;
 23f4eba:	7123      	strb	r3, [r4, #4]
}
 23f4ebc:	b002      	add	sp, #8
 23f4ebe:	bd10      	pop	{r4, pc}

023f4ec0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f4ec0:	b513      	push	{r0, r1, r4, lr}
 23f4ec2:	4604      	mov	r4, r0
 23f4ec4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f4ec8:	f7ff ff4e 	bl	23f4d68 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f4ecc:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f4ed0:	4620      	mov	r0, r4
 23f4ed2:	f7ff ff87 	bl	23f4de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f4ed6:	2301      	movs	r3, #1
}
 23f4ed8:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4eda:	7123      	strb	r3, [r4, #4]
}
 23f4edc:	b002      	add	sp, #8
 23f4ede:	bd10      	pop	{r4, pc}

023f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f4ee0:	b510      	push	{r4, lr}
 23f4ee2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23f4ee4:	6800      	ldr	r0, [r0, #0]
 23f4ee6:	b108      	cbz	r0, 23f4eec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23f4ee8:	f7ff fe5c 	bl	23f4ba4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23f4eec:	4620      	mov	r0, r4
 23f4eee:	bd10      	pop	{r4, pc}

023f4ef0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f4ef0:	7441      	strb	r1, [r0, #17]
}
 23f4ef2:	4770      	bx	lr

023f4ef4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f4ef4:	4770      	bx	lr

023f4ef6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f4ef6:	4770      	bx	lr

023f4ef8 <_ZN9USBSerial4readEv>:
{
 23f4ef8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f4efa:	2100      	movs	r1, #0
 23f4efc:	7c00      	ldrb	r0, [r0, #16]
 23f4efe:	f7ff f8a7 	bl	23f4050 <HAL_USB_USART_Receive_Data>
}
 23f4f02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f4f06:	bd08      	pop	{r3, pc}

023f4f08 <_ZN9USBSerial4peekEv>:
{
 23f4f08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f4f0a:	2101      	movs	r1, #1
 23f4f0c:	7c00      	ldrb	r0, [r0, #16]
 23f4f0e:	f7ff f89f 	bl	23f4050 <HAL_USB_USART_Receive_Data>
}
 23f4f12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f4f16:	bd08      	pop	{r3, pc}

023f4f18 <_ZN9USBSerial17availableForWriteEv>:
{
 23f4f18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f4f1a:	7c00      	ldrb	r0, [r0, #16]
 23f4f1c:	f7ff f88a 	bl	23f4034 <HAL_USB_USART_Available_Data_For_Write>
}
 23f4f20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f4f24:	bd08      	pop	{r3, pc}

023f4f26 <_ZN9USBSerial9availableEv>:
{
 23f4f26:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f4f28:	7c00      	ldrb	r0, [r0, #16]
 23f4f2a:	f7ff f875 	bl	23f4018 <HAL_USB_USART_Available_Data>
}
 23f4f2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f4f32:	bd08      	pop	{r3, pc}

023f4f34 <_ZN9USBSerial5writeEh>:
{
 23f4f34:	b513      	push	{r0, r1, r4, lr}
 23f4f36:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f4f38:	7c00      	ldrb	r0, [r0, #16]
{
 23f4f3a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f4f3c:	f7ff f87a 	bl	23f4034 <HAL_USB_USART_Available_Data_For_Write>
 23f4f40:	2800      	cmp	r0, #0
 23f4f42:	9901      	ldr	r1, [sp, #4]
 23f4f44:	dc01      	bgt.n	23f4f4a <_ZN9USBSerial5writeEh+0x16>
 23f4f46:	7c60      	ldrb	r0, [r4, #17]
 23f4f48:	b120      	cbz	r0, 23f4f54 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f4f4a:	7c20      	ldrb	r0, [r4, #16]
 23f4f4c:	f7ff f88e 	bl	23f406c <HAL_USB_USART_Send_Data>
 23f4f50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f4f54:	b002      	add	sp, #8
 23f4f56:	bd10      	pop	{r4, pc}

023f4f58 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f4f58:	7c00      	ldrb	r0, [r0, #16]
 23f4f5a:	f7ff b895 	b.w	23f4088 <HAL_USB_USART_Flush_Data>

023f4f5e <_ZN9USBSerialD0Ev>:
 23f4f5e:	b510      	push	{r4, lr}
 23f4f60:	4604      	mov	r4, r0
 23f4f62:	2114      	movs	r1, #20
 23f4f64:	f7f5 faeb 	bl	23ea53e <_ZdlPvj>
 23f4f68:	4620      	mov	r0, r4
 23f4f6a:	bd10      	pop	{r4, pc}

023f4f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f4f6c:	b510      	push	{r4, lr}
 23f4f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f4f72:	4604      	mov	r4, r0
 23f4f74:	4608      	mov	r0, r1
 23f4f76:	2100      	movs	r1, #0
 23f4f78:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f4f7c:	4b04      	ldr	r3, [pc, #16]	; (23f4f90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f4f7e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f4f80:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f4f82:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f4f84:	4611      	mov	r1, r2
  _blocking = true;
 23f4f86:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f4f88:	f7ff f81c 	bl	23f3fc4 <HAL_USB_USART_Init>
}
 23f4f8c:	4620      	mov	r0, r4
 23f4f8e:	bd10      	pop	{r4, pc}
 23f4f90:	023ff670 	.word	0x023ff670

023f4f94 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f4f94:	2200      	movs	r2, #0
 23f4f96:	7c00      	ldrb	r0, [r0, #16]
 23f4f98:	f7ff b822 	b.w	23f3fe0 <HAL_USB_USART_Begin>

023f4f9c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23f4f9c:	7c00      	ldrb	r0, [r0, #16]
 23f4f9e:	f7ff b82d 	b.w	23f3ffc <HAL_USB_USART_End>

023f4fa2 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f4fa2:	7c00      	ldrb	r0, [r0, #16]
 23f4fa4:	f7ff b87e 	b.w	23f40a4 <HAL_USB_USART_Is_Connected>

023f4fa8 <_Z19acquireSerialBufferv>:
{
 23f4fa8:	b510      	push	{r4, lr}
 23f4faa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f4fac:	2214      	movs	r2, #20
 23f4fae:	2100      	movs	r1, #0
 23f4fb0:	f006 f888 	bl	23fb0c4 <memset>
}
 23f4fb4:	4620      	mov	r0, r4
 23f4fb6:	bd10      	pop	{r4, pc}

023f4fb8 <_Z16_fetch_usbserialv>:
{
 23f4fb8:	b510      	push	{r4, lr}
 23f4fba:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f4fbc:	a803      	add	r0, sp, #12
 23f4fbe:	f7ff fff3 	bl	23f4fa8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f4fc2:	4c0c      	ldr	r4, [pc, #48]	; (23f4ff4 <_Z16_fetch_usbserialv+0x3c>)
 23f4fc4:	e8d4 1f8f 	ldab	r1, [r4]
 23f4fc8:	f011 0101 	ands.w	r1, r1, #1
 23f4fcc:	d10f      	bne.n	23f4fee <_Z16_fetch_usbserialv+0x36>
 23f4fce:	4620      	mov	r0, r4
 23f4fd0:	9101      	str	r1, [sp, #4]
 23f4fd2:	f7f5 fac3 	bl	23ea55c <__cxa_guard_acquire>
 23f4fd6:	9901      	ldr	r1, [sp, #4]
 23f4fd8:	b148      	cbz	r0, 23f4fee <_Z16_fetch_usbserialv+0x36>
 23f4fda:	aa03      	add	r2, sp, #12
 23f4fdc:	4806      	ldr	r0, [pc, #24]	; (23f4ff8 <_Z16_fetch_usbserialv+0x40>)
 23f4fde:	f7ff ffc5 	bl	23f4f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f4fe2:	4620      	mov	r0, r4
 23f4fe4:	f7f5 fabf 	bl	23ea566 <__cxa_guard_release>
 23f4fe8:	4804      	ldr	r0, [pc, #16]	; (23f4ffc <_Z16_fetch_usbserialv+0x44>)
 23f4fea:	f006 f81b 	bl	23fb024 <atexit>
	return _usbserial;
}
 23f4fee:	4802      	ldr	r0, [pc, #8]	; (23f4ff8 <_Z16_fetch_usbserialv+0x40>)
 23f4ff0:	b008      	add	sp, #32
 23f4ff2:	bd10      	pop	{r4, pc}
 23f4ff4:	1007ae78 	.word	0x1007ae78
 23f4ff8:	1007ae7c 	.word	0x1007ae7c
 23f4ffc:	023f4ef5 	.word	0x023f4ef5

023f5000 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23f5000:	4770      	bx	lr

023f5002 <_ZN9IPAddressD0Ev>:
 23f5002:	b510      	push	{r4, lr}
 23f5004:	4604      	mov	r4, r0
 23f5006:	2118      	movs	r1, #24
 23f5008:	f7f5 fa99 	bl	23ea53e <_ZdlPvj>
 23f500c:	4620      	mov	r0, r4
 23f500e:	bd10      	pop	{r4, pc}

023f5010 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f5010:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f5012:	7d03      	ldrb	r3, [r0, #20]
{
 23f5014:	460e      	mov	r6, r1
	if (address.v==6) {
 23f5016:	2b06      	cmp	r3, #6
 23f5018:	f04f 0400 	mov.w	r4, #0
{
 23f501c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f501e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f5022:	d012      	beq.n	23f504a <_ZNK9IPAddress7printToER5Print+0x3a>
 23f5024:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f5028:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f502c:	220a      	movs	r2, #10
 23f502e:	4630      	mov	r0, r6
 23f5030:	f001 f925 	bl	23f627e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f5034:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f5036:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f5038:	d019      	beq.n	23f506e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f503a:	2c00      	cmp	r4, #0
 23f503c:	d0f4      	beq.n	23f5028 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f503e:	212e      	movs	r1, #46	; 0x2e
 23f5040:	4630      	mov	r0, r6
 23f5042:	f001 f919 	bl	23f6278 <_ZN5Print5printEc>
 23f5046:	4404      	add	r4, r0
 23f5048:	e7ee      	b.n	23f5028 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f504a:	232f      	movs	r3, #47	; 0x2f
 23f504c:	466a      	mov	r2, sp
 23f504e:	4639      	mov	r1, r7
 23f5050:	200a      	movs	r0, #10
		buf[0] = 0;
 23f5052:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f5056:	f7ff f8bf 	bl	23f41d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f505a:	4668      	mov	r0, sp
 23f505c:	f7f5 fa44 	bl	23ea4e8 <strlen>
 23f5060:	6833      	ldr	r3, [r6, #0]
 23f5062:	4602      	mov	r2, r0
 23f5064:	4669      	mov	r1, sp
 23f5066:	4630      	mov	r0, r6
 23f5068:	68db      	ldr	r3, [r3, #12]
 23f506a:	4798      	blx	r3
 23f506c:	4604      	mov	r4, r0
    }
    return n;
}
 23f506e:	4620      	mov	r0, r4
 23f5070:	b00d      	add	sp, #52	; 0x34
 23f5072:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f5074 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f5074:	b510      	push	{r4, lr}
 23f5076:	4604      	mov	r4, r0
 23f5078:	4b04      	ldr	r3, [pc, #16]	; (23f508c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f507a:	2211      	movs	r2, #17
 23f507c:	2100      	movs	r1, #0
 23f507e:	f840 3b04 	str.w	r3, [r0], #4
 23f5082:	f006 f81f 	bl	23fb0c4 <memset>
}
 23f5086:	4620      	mov	r0, r4
 23f5088:	bd10      	pop	{r4, pc}
 23f508a:	bf00      	nop
 23f508c:	023ff6a0 	.word	0x023ff6a0

023f5090 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f5090:	4603      	mov	r3, r0
 23f5092:	4a07      	ldr	r2, [pc, #28]	; (23f50b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f5094:	b510      	push	{r4, lr}
 23f5096:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f509a:	f101 0210 	add.w	r2, r1, #16
 23f509e:	f851 4b04 	ldr.w	r4, [r1], #4
 23f50a2:	4291      	cmp	r1, r2
 23f50a4:	f843 4b04 	str.w	r4, [r3], #4
 23f50a8:	d1f9      	bne.n	23f509e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f50aa:	780a      	ldrb	r2, [r1, #0]
 23f50ac:	701a      	strb	r2, [r3, #0]
}
 23f50ae:	bd10      	pop	{r4, pc}
 23f50b0:	023ff6a0 	.word	0x023ff6a0

023f50b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f50b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f50b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f50ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f50be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f50c2:	2304      	movs	r3, #4
 23f50c4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f50c8:	6041      	str	r1, [r0, #4]
 23f50ca:	7503      	strb	r3, [r0, #20]
}
 23f50cc:	bd10      	pop	{r4, pc}
	...

023f50d0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f50d0:	b507      	push	{r0, r1, r2, lr}
 23f50d2:	4b06      	ldr	r3, [pc, #24]	; (23f50ec <_ZN9IPAddressC1EPKh+0x1c>)
 23f50d4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f50d6:	78cb      	ldrb	r3, [r1, #3]
 23f50d8:	9300      	str	r3, [sp, #0]
 23f50da:	788b      	ldrb	r3, [r1, #2]
 23f50dc:	784a      	ldrb	r2, [r1, #1]
 23f50de:	7809      	ldrb	r1, [r1, #0]
 23f50e0:	f7ff ffe8 	bl	23f50b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f50e4:	b003      	add	sp, #12
 23f50e6:	f85d fb04 	ldr.w	pc, [sp], #4
 23f50ea:	bf00      	nop
 23f50ec:	023ff6a0 	.word	0x023ff6a0

023f50f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23f50f0:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f50f2:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f50f4:	460b      	mov	r3, r1
 23f50f6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f50f8:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f50fc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f5100:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f5104:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f5108:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f510c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f5110:	b002      	add	sp, #8
 23f5112:	bd10      	pop	{r4, pc}

023f5114 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f5114:	4b01      	ldr	r3, [pc, #4]	; (23f511c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f5116:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f5118:	4770      	bx	lr
 23f511a:	bf00      	nop
 23f511c:	10079c14 	.word	0x10079c14

023f5120 <serialEventRun>:
{
 23f5120:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f5122:	4b0f      	ldr	r3, [pc, #60]	; (23f5160 <serialEventRun+0x40>)
 23f5124:	b143      	cbz	r3, 23f5138 <serialEventRun+0x18>
 23f5126:	f7ff ff47 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f512a:	6803      	ldr	r3, [r0, #0]
 23f512c:	691b      	ldr	r3, [r3, #16]
 23f512e:	4798      	blx	r3
 23f5130:	2800      	cmp	r0, #0
 23f5132:	dd01      	ble.n	23f5138 <serialEventRun+0x18>
        serialEvent();
 23f5134:	e000      	b.n	23f5138 <serialEventRun+0x18>
 23f5136:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f5138:	4b0a      	ldr	r3, [pc, #40]	; (23f5164 <serialEventRun+0x44>)
 23f513a:	b143      	cbz	r3, 23f514e <serialEventRun+0x2e>
 23f513c:	f003 fe32 	bl	23f8da4 <_Z22__fetch_global_Serial1v>
 23f5140:	6803      	ldr	r3, [r0, #0]
 23f5142:	691b      	ldr	r3, [r3, #16]
 23f5144:	4798      	blx	r3
 23f5146:	2800      	cmp	r0, #0
 23f5148:	dd01      	ble.n	23f514e <serialEventRun+0x2e>
        serialEvent1();
 23f514a:	e000      	b.n	23f514e <serialEventRun+0x2e>
 23f514c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f514e:	4b06      	ldr	r3, [pc, #24]	; (23f5168 <serialEventRun+0x48>)
 23f5150:	b10b      	cbz	r3, 23f5156 <serialEventRun+0x36>
 23f5152:	f003 fe6d 	bl	23f8e30 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23f5156:	4b05      	ldr	r3, [pc, #20]	; (23f516c <serialEventRun+0x4c>)
 23f5158:	b10b      	cbz	r3, 23f515e <serialEventRun+0x3e>
 23f515a:	f003 fe9f 	bl	23f8e9c <_Z15serialEventRun3v>
}
 23f515e:	bd08      	pop	{r3, pc}
	...

023f5170 <_post_loop>:
{
 23f5170:	b508      	push	{r3, lr}
	serialEventRun();
 23f5172:	f7ff ffd5 	bl	23f5120 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f5176:	f7ff f97f 	bl	23f4478 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f517a:	4b01      	ldr	r3, [pc, #4]	; (23f5180 <_post_loop+0x10>)
 23f517c:	6018      	str	r0, [r3, #0]
}
 23f517e:	bd08      	pop	{r3, pc}
 23f5180:	1007af08 	.word	0x1007af08

023f5184 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f5184:	4805      	ldr	r0, [pc, #20]	; (23f519c <_Z33system_initialize_user_backup_ramv+0x18>)
 23f5186:	4a06      	ldr	r2, [pc, #24]	; (23f51a0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f5188:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f518a:	1a12      	subs	r2, r2, r0
 23f518c:	4905      	ldr	r1, [pc, #20]	; (23f51a4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23f518e:	f005 ff72 	bl	23fb076 <memcpy>
    __backup_sram_signature = signature;
 23f5192:	4b05      	ldr	r3, [pc, #20]	; (23f51a8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f5194:	4a05      	ldr	r2, [pc, #20]	; (23f51ac <_Z33system_initialize_user_backup_ramv+0x28>)
 23f5196:	601a      	str	r2, [r3, #0]
}
 23f5198:	bd08      	pop	{r3, pc}
 23f519a:	bf00      	nop
 23f519c:	1007b400 	.word	0x1007b400
 23f51a0:	1007b404 	.word	0x1007b404
 23f51a4:	085ff4c4 	.word	0x085ff4c4
 23f51a8:	1007b400 	.word	0x1007b400
 23f51ac:	9a271c1e 	.word	0x9a271c1e

023f51b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f51b0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f51b2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f51b4:	461a      	mov	r2, r3
 23f51b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f51ba:	9300      	str	r3, [sp, #0]
 23f51bc:	f7ff fac8 	bl	23f4750 <system_ctrl_set_result>
}
 23f51c0:	b003      	add	sp, #12
 23f51c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f51c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f51c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f51ca:	8843      	ldrh	r3, [r0, #2]
 23f51cc:	2b0a      	cmp	r3, #10
 23f51ce:	d008      	beq.n	23f51e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f51d0:	2b50      	cmp	r3, #80	; 0x50
 23f51d2:	d10b      	bne.n	23f51ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f51d4:	4b09      	ldr	r3, [pc, #36]	; (23f51fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f51d6:	681b      	ldr	r3, [r3, #0]
 23f51d8:	b14b      	cbz	r3, 23f51ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f51da:	b003      	add	sp, #12
 23f51dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f51e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f51e2:	f7ff ffe5 	bl	23f51b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f51e6:	b003      	add	sp, #12
 23f51e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f51ec:	2300      	movs	r3, #0
 23f51ee:	461a      	mov	r2, r3
 23f51f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f51f4:	9300      	str	r3, [sp, #0]
 23f51f6:	f7ff faab 	bl	23f4750 <system_ctrl_set_result>
}
 23f51fa:	e7f4      	b.n	23f51e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f51fc:	1007ae94 	.word	0x1007ae94

023f5200 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f5200:	2100      	movs	r1, #0
{
 23f5202:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f5204:	4811      	ldr	r0, [pc, #68]	; (23f524c <module_user_init_hook+0x4c>)
 23f5206:	f7ff fb21 	bl	23f484c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f520a:	4b11      	ldr	r3, [pc, #68]	; (23f5250 <module_user_init_hook+0x50>)
 23f520c:	681a      	ldr	r2, [r3, #0]
 23f520e:	4b11      	ldr	r3, [pc, #68]	; (23f5254 <module_user_init_hook+0x54>)
 23f5210:	429a      	cmp	r2, r3
 23f5212:	bf0c      	ite	eq
 23f5214:	2201      	moveq	r2, #1
 23f5216:	2200      	movne	r2, #0
 23f5218:	4b0f      	ldr	r3, [pc, #60]	; (23f5258 <module_user_init_hook+0x58>)
 23f521a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f521c:	d001      	beq.n	23f5222 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f521e:	f7ff ffb1 	bl	23f5184 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f5222:	f7ff f8ff 	bl	23f4424 <HAL_RNG_GetRandomNumber>
 23f5226:	4604      	mov	r4, r0
    srand(seed);
 23f5228:	f005 ff64 	bl	23fb0f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f522c:	4b0b      	ldr	r3, [pc, #44]	; (23f525c <module_user_init_hook+0x5c>)
 23f522e:	b113      	cbz	r3, 23f5236 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f5230:	4620      	mov	r0, r4
 23f5232:	e000      	b.n	23f5236 <module_user_init_hook+0x36>
 23f5234:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f5236:	2100      	movs	r1, #0
 23f5238:	4808      	ldr	r0, [pc, #32]	; (23f525c <module_user_init_hook+0x5c>)
 23f523a:	f7ff f99b 	bl	23f4574 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f523e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f5242:	2100      	movs	r1, #0
 23f5244:	4806      	ldr	r0, [pc, #24]	; (23f5260 <module_user_init_hook+0x60>)
 23f5246:	f7ff ba75 	b.w	23f4734 <system_ctrl_set_app_request_handler>
 23f524a:	bf00      	nop
 23f524c:	023f5115 	.word	0x023f5115
 23f5250:	1007b400 	.word	0x1007b400
 23f5254:	9a271c1e 	.word	0x9a271c1e
 23f5258:	1007ae90 	.word	0x1007ae90
 23f525c:	00000000 	.word	0x00000000
 23f5260:	023f51c9 	.word	0x023f51c9

023f5264 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f5264:	2200      	movs	r2, #0
 23f5266:	4b01      	ldr	r3, [pc, #4]	; (23f526c <_GLOBAL__sub_I_RGB+0x8>)
 23f5268:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f526a:	4770      	bx	lr
 23f526c:	1007ae98 	.word	0x1007ae98

023f5270 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f5270:	2100      	movs	r1, #0
 23f5272:	f7ff ba43 	b.w	23f46fc <system_delay_ms>
	...

023f5278 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f5278:	4b02      	ldr	r3, [pc, #8]	; (23f5284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f527a:	681a      	ldr	r2, [r3, #0]
 23f527c:	4b02      	ldr	r3, [pc, #8]	; (23f5288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f527e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f5280:	4770      	bx	lr
 23f5282:	bf00      	nop
 23f5284:	10079c04 	.word	0x10079c04
 23f5288:	1007aea8 	.word	0x1007aea8

023f528c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23f528c:	6880      	ldr	r0, [r0, #8]
 23f528e:	6803      	ldr	r3, [r0, #0]
 23f5290:	68db      	ldr	r3, [r3, #12]
 23f5292:	4718      	bx	r3

023f5294 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f5294:	4770      	bx	lr

023f5296 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f5296:	4608      	mov	r0, r1
 23f5298:	b111      	cbz	r1, 23f52a0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f529a:	680b      	ldr	r3, [r1, #0]
 23f529c:	685b      	ldr	r3, [r3, #4]
 23f529e:	4718      	bx	r3
}
 23f52a0:	4770      	bx	lr

023f52a2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f52a2:	4770      	bx	lr

023f52a4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f52a4:	4770      	bx	lr

023f52a6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f52a6:	4770      	bx	lr

023f52a8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f52a8:	4770      	bx	lr

023f52aa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f52aa:	b538      	push	{r3, r4, r5, lr}
 23f52ac:	4604      	mov	r4, r0
 23f52ae:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f52b0:	6800      	ldr	r0, [r0, #0]
 23f52b2:	212e      	movs	r1, #46	; 0x2e
 23f52b4:	f005 ff59 	bl	23fb16a <strchrnul>
    size = s - category;
 23f52b8:	6823      	ldr	r3, [r4, #0]
 23f52ba:	1ac3      	subs	r3, r0, r3
 23f52bc:	602b      	str	r3, [r5, #0]
    if (size) {
 23f52be:	b123      	cbz	r3, 23f52ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f52c0:	7803      	ldrb	r3, [r0, #0]
 23f52c2:	b103      	cbz	r3, 23f52c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f52c4:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23f52c6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f52c8:	6020      	str	r0, [r4, #0]
}
 23f52ca:	4618      	mov	r0, r3
 23f52cc:	bd38      	pop	{r3, r4, r5, pc}

023f52ce <_ZN5spark16JSONStreamWriterD0Ev>:
 23f52ce:	b510      	push	{r4, lr}
 23f52d0:	4604      	mov	r4, r0
 23f52d2:	210c      	movs	r1, #12
 23f52d4:	f7f5 f933 	bl	23ea53e <_ZdlPvj>
 23f52d8:	4620      	mov	r0, r4
 23f52da:	bd10      	pop	{r4, pc}

023f52dc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f52dc:	b510      	push	{r4, lr}
 23f52de:	4604      	mov	r4, r0
 23f52e0:	2104      	movs	r1, #4
 23f52e2:	f7f5 f92c 	bl	23ea53e <_ZdlPvj>
 23f52e6:	4620      	mov	r0, r4
 23f52e8:	bd10      	pop	{r4, pc}

023f52ea <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f52ea:	b510      	push	{r4, lr}
 23f52ec:	4604      	mov	r4, r0
 23f52ee:	2104      	movs	r1, #4
 23f52f0:	f7f5 f925 	bl	23ea53e <_ZdlPvj>
 23f52f4:	4620      	mov	r0, r4
 23f52f6:	bd10      	pop	{r4, pc}

023f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f52f8:	f7fe bfa6 	b.w	23f4248 <os_mutex_recursive_lock>

023f52fc <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f52fc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f52fe:	f7f5 f8e9 	bl	23ea4d4 <strcmp>
}
 23f5302:	fab0 f080 	clz	r0, r0
 23f5306:	0940      	lsrs	r0, r0, #5
 23f5308:	bd08      	pop	{r3, pc}

023f530a <__tcf_1>:
 23f530a:	4770      	bx	lr

023f530c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f530c:	b510      	push	{r4, lr}
 23f530e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f5310:	f7ff fe52 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f5314:	4284      	cmp	r4, r0
 23f5316:	d105      	bne.n	23f5324 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f5318:	f7ff fe4e 	bl	23f4fb8 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f5320:	f7ff be3c 	b.w	23f4f9c <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f5324:	f003 fd3e 	bl	23f8da4 <_Z22__fetch_global_Serial1v>
 23f5328:	4284      	cmp	r4, r0
 23f532a:	d105      	bne.n	23f5338 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f532c:	f003 fd3a 	bl	23f8da4 <_Z22__fetch_global_Serial1v>
}
 23f5330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f5334:	f7ff bbe1 	b.w	23f4afa <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f5338:	b12c      	cbz	r4, 23f5346 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f533a:	6823      	ldr	r3, [r4, #0]
 23f533c:	4620      	mov	r0, r4
}
 23f533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f5342:	685b      	ldr	r3, [r3, #4]
 23f5344:	4718      	bx	r3
 23f5346:	bd10      	pop	{r4, pc}

023f5348 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f5348:	680b      	ldr	r3, [r1, #0]
 23f534a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f534c:	684b      	ldr	r3, [r1, #4]
 23f534e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f5350:	b113      	cbz	r3, 23f5358 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f5352:	685a      	ldr	r2, [r3, #4]
 23f5354:	3201      	adds	r2, #1
 23f5356:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f5358:	4770      	bx	lr

023f535a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f535a:	b513      	push	{r0, r1, r4, lr}
 23f535c:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f535e:	4608      	mov	r0, r1
 23f5360:	9101      	str	r1, [sp, #4]
 23f5362:	f7f5 f8c1 	bl	23ea4e8 <strlen>
 23f5366:	4602      	mov	r2, r0
 23f5368:	4620      	mov	r0, r4
 23f536a:	9901      	ldr	r1, [sp, #4]
}
 23f536c:	b002      	add	sp, #8
 23f536e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f5372:	f7ff bda5 	b.w	23f4ec0 <_ZN5spark10JSONWriter5valueEPKcj>

023f5376 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f5376:	b513      	push	{r0, r1, r4, lr}
 23f5378:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f537a:	4608      	mov	r0, r1
 23f537c:	9101      	str	r1, [sp, #4]
 23f537e:	f7f5 f8b3 	bl	23ea4e8 <strlen>
 23f5382:	4602      	mov	r2, r0
 23f5384:	4620      	mov	r0, r4
 23f5386:	6823      	ldr	r3, [r4, #0]
 23f5388:	9901      	ldr	r1, [sp, #4]
 23f538a:	68db      	ldr	r3, [r3, #12]
}
 23f538c:	b002      	add	sp, #8
 23f538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f5392:	4718      	bx	r3

023f5394 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f5394:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f5396:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f5398:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f539c:	2201      	movs	r2, #1
 23f539e:	68db      	ldr	r3, [r3, #12]
 23f53a0:	f10d 0107 	add.w	r1, sp, #7
 23f53a4:	4798      	blx	r3
}
 23f53a6:	b003      	add	sp, #12
 23f53a8:	f85d fb04 	ldr.w	pc, [sp], #4

023f53ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23f53ac:	680a      	ldr	r2, [r1, #0]
 23f53ae:	b510      	push	{r4, lr}
 23f53b0:	6002      	str	r2, [r0, #0]
 23f53b2:	684a      	ldr	r2, [r1, #4]
 23f53b4:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f53b6:	2200      	movs	r2, #0
 23f53b8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f53bc:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f53be:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f53c0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f53c2:	6084      	str	r4, [r0, #8]
 23f53c4:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f53c6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f53c8:	60c4      	str	r4, [r0, #12]
 23f53ca:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23f53cc:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f53ce:	6104      	str	r4, [r0, #16]
 23f53d0:	bd10      	pop	{r4, pc}
	...

023f53d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f53d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f53d8:	f04f 0a14 	mov.w	sl, #20
 23f53dc:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f53e0:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23f53e2:	4645      	mov	r5, r8
 23f53e4:	fb0a f404 	mul.w	r4, sl, r4
 23f53e8:	9300      	str	r3, [sp, #0]
 23f53ea:	4b17      	ldr	r3, [pc, #92]	; (23f5448 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f53ec:	10a4      	asrs	r4, r4, #2
 23f53ee:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23f53f0:	2c00      	cmp	r4, #0
 23f53f2:	dd21      	ble.n	23f5438 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23f53f4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f53f6:	fb0a f006 	mul.w	r0, sl, r6
 23f53fa:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f53fe:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f5402:	463a      	mov	r2, r7
 23f5404:	455f      	cmp	r7, fp
 23f5406:	bf28      	it	cs
 23f5408:	465a      	movcs	r2, fp
 23f540a:	5828      	ldr	r0, [r5, r0]
 23f540c:	9101      	str	r1, [sp, #4]
 23f540e:	f005 febe 	bl	23fb18e <strncmp>
                if (cmp == 0) {
 23f5412:	2800      	cmp	r0, #0
 23f5414:	f04f 0301 	mov.w	r3, #1
 23f5418:	9901      	ldr	r1, [sp, #4]
 23f541a:	d10b      	bne.n	23f5434 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f541c:	455f      	cmp	r7, fp
 23f541e:	d103      	bne.n	23f5428 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f5420:	9a00      	ldr	r2, [sp, #0]
 23f5422:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f5424:	4634      	mov	r4, r6
 23f5426:	e7e3      	b.n	23f53f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23f5428:	d9fc      	bls.n	23f5424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23f542a:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f542c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f5430:	3e01      	subs	r6, #1
 23f5432:	e7f7      	b.n	23f5424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f5434:	dbf9      	blt.n	23f542a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f5436:	e7f5      	b.n	23f5424 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f5438:	eba5 0508 	sub.w	r5, r5, r8
}
 23f543c:	4802      	ldr	r0, [pc, #8]	; (23f5448 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f543e:	10ad      	asrs	r5, r5, #2
 23f5440:	4368      	muls	r0, r5
 23f5442:	b003      	add	sp, #12
 23f5444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f5448:	cccccccd 	.word	0xcccccccd

023f544c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f544c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f544e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f5450:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f5452:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f5454:	b303      	cbz	r3, 23f5498 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f5456:	b1f9      	cbz	r1, 23f5498 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f5458:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f545a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f545e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f5460:	a903      	add	r1, sp, #12
 23f5462:	a801      	add	r0, sp, #4
 23f5464:	f7ff ff21 	bl	23f52aa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f5468:	4601      	mov	r1, r0
 23f546a:	b1a8      	cbz	r0, 23f5498 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f546c:	f10d 030b 	add.w	r3, sp, #11
 23f5470:	4620      	mov	r0, r4
 23f5472:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f5474:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f5478:	f7ff ffac 	bl	23f53d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23f547c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f5480:	b153      	cbz	r3, 23f5498 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23f5482:	6823      	ldr	r3, [r4, #0]
 23f5484:	2414      	movs	r4, #20
 23f5486:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23f548a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23f548e:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23f5490:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23f5492:	bfa8      	it	ge
 23f5494:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23f5496:	e7e3      	b.n	23f5460 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23f5498:	4628      	mov	r0, r5
 23f549a:	b004      	add	sp, #16
 23f549c:	bd70      	pop	{r4, r5, r6, pc}

023f549e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23f549e:	b40e      	push	{r1, r2, r3}
 23f54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f54a2:	b08c      	sub	sp, #48	; 0x30
 23f54a4:	af00      	add	r7, sp, #0
 23f54a6:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23f54aa:	f855 2b04 	ldr.w	r2, [r5], #4
 23f54ae:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f54b0:	462b      	mov	r3, r5
 23f54b2:	2120      	movs	r1, #32
 23f54b4:	f107 0010 	add.w	r0, r7, #16
 23f54b8:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f54ba:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f54bc:	f7ff f980 	bl	23f47c0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23f54c0:	281f      	cmp	r0, #31
 23f54c2:	687a      	ldr	r2, [r7, #4]
 23f54c4:	d91a      	bls.n	23f54fc <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23f54c6:	f100 0308 	add.w	r3, r0, #8
 23f54ca:	f023 0307 	bic.w	r3, r3, #7
        }
 23f54ce:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23f54d0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f54d4:	1c41      	adds	r1, r0, #1
 23f54d6:	462b      	mov	r3, r5
 23f54d8:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f54da:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f54dc:	f7ff f970 	bl	23f47c0 <vsnprintf>
        if (n > 0) {
 23f54e0:	1e02      	subs	r2, r0, #0
 23f54e2:	dd04      	ble.n	23f54ee <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23f54e4:	6823      	ldr	r3, [r4, #0]
 23f54e6:	4669      	mov	r1, sp
 23f54e8:	4620      	mov	r0, r4
 23f54ea:	68db      	ldr	r3, [r3, #12]
 23f54ec:	4798      	blx	r3
 23f54ee:	46b5      	mov	sp, r6
}
 23f54f0:	3730      	adds	r7, #48	; 0x30
 23f54f2:	46bd      	mov	sp, r7
 23f54f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f54f8:	b003      	add	sp, #12
 23f54fa:	4770      	bx	lr
    } else if (n > 0) {
 23f54fc:	2800      	cmp	r0, #0
 23f54fe:	d0f7      	beq.n	23f54f0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23f5500:	6823      	ldr	r3, [r4, #0]
 23f5502:	4602      	mov	r2, r0
 23f5504:	68db      	ldr	r3, [r3, #12]
 23f5506:	4620      	mov	r0, r4
 23f5508:	f107 0110 	add.w	r1, r7, #16
 23f550c:	4798      	blx	r3
}
 23f550e:	e7ef      	b.n	23f54f0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023f5510 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23f5510:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23f5512:	4c08      	ldr	r4, [pc, #32]	; (23f5534 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23f5514:	e8d4 3f8f 	ldab	r3, [r4]
 23f5518:	07db      	lsls	r3, r3, #31
 23f551a:	d409      	bmi.n	23f5530 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f551c:	4620      	mov	r0, r4
 23f551e:	f7f5 f81d 	bl	23ea55c <__cxa_guard_acquire>
 23f5522:	b128      	cbz	r0, 23f5530 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f5524:	4620      	mov	r0, r4
 23f5526:	f7f5 f81e 	bl	23ea566 <__cxa_guard_release>
 23f552a:	4803      	ldr	r0, [pc, #12]	; (23f5538 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23f552c:	f005 fd7a 	bl	23fb024 <atexit>
}
 23f5530:	4802      	ldr	r0, [pc, #8]	; (23f553c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23f5532:	bd10      	pop	{r4, pc}
 23f5534:	1007aeb0 	.word	0x1007aeb0
 23f5538:	023f52a3 	.word	0x023f52a3
 23f553c:	10079c08 	.word	0x10079c08

023f5540 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23f5540:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23f5542:	4c08      	ldr	r4, [pc, #32]	; (23f5564 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23f5544:	e8d4 3f8f 	ldab	r3, [r4]
 23f5548:	07db      	lsls	r3, r3, #31
 23f554a:	d409      	bmi.n	23f5560 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f554c:	4620      	mov	r0, r4
 23f554e:	f7f5 f805 	bl	23ea55c <__cxa_guard_acquire>
 23f5552:	b128      	cbz	r0, 23f5560 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f5554:	4620      	mov	r0, r4
 23f5556:	f7f5 f806 	bl	23ea566 <__cxa_guard_release>
 23f555a:	4803      	ldr	r0, [pc, #12]	; (23f5568 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23f555c:	f005 fd62 	bl	23fb024 <atexit>
    return &factory;
}
 23f5560:	4802      	ldr	r0, [pc, #8]	; (23f556c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23f5562:	bd10      	pop	{r4, pc}
 23f5564:	1007aeb4 	.word	0x1007aeb4
 23f5568:	023f530b 	.word	0x023f530b
 23f556c:	10079c0c 	.word	0x10079c0c

023f5570 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23f5570:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f5572:	2500      	movs	r5, #0
 23f5574:	4604      	mov	r4, r0
 23f5576:	e9c0 5500 	strd	r5, r5, [r0]
 23f557a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f557e:	6085      	str	r5, [r0, #8]
 23f5580:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23f5582:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23f5586:	f7fe fe43 	bl	23f4210 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23f558a:	f7ff ffc1 	bl	23f5510 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23f558e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f5590:	f7ff ffd6 	bl	23f5540 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23f5594:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f5596:	6220      	str	r0, [r4, #32]
}
 23f5598:	4620      	mov	r0, r4
 23f559a:	bd38      	pop	{r3, r4, r5, pc}

023f559c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23f559c:	b510      	push	{r4, lr}
    static LogManager mgr;
 23f559e:	4c0a      	ldr	r4, [pc, #40]	; (23f55c8 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23f55a0:	e8d4 3f8f 	ldab	r3, [r4]
 23f55a4:	07db      	lsls	r3, r3, #31
 23f55a6:	d40c      	bmi.n	23f55c2 <_ZN5spark10LogManager8instanceEv+0x26>
 23f55a8:	4620      	mov	r0, r4
 23f55aa:	f7f4 ffd7 	bl	23ea55c <__cxa_guard_acquire>
 23f55ae:	b140      	cbz	r0, 23f55c2 <_ZN5spark10LogManager8instanceEv+0x26>
 23f55b0:	4806      	ldr	r0, [pc, #24]	; (23f55cc <_ZN5spark10LogManager8instanceEv+0x30>)
 23f55b2:	f7ff ffdd 	bl	23f5570 <_ZN5spark10LogManagerC1Ev>
 23f55b6:	4620      	mov	r0, r4
 23f55b8:	f7f4 ffd5 	bl	23ea566 <__cxa_guard_release>
 23f55bc:	4804      	ldr	r0, [pc, #16]	; (23f55d0 <_ZN5spark10LogManager8instanceEv+0x34>)
 23f55be:	f005 fd31 	bl	23fb024 <atexit>
    return &mgr;
}
 23f55c2:	4802      	ldr	r0, [pc, #8]	; (23f55cc <_ZN5spark10LogManager8instanceEv+0x30>)
 23f55c4:	bd10      	pop	{r4, pc}
 23f55c6:	bf00      	nop
 23f55c8:	1007aeac 	.word	0x1007aeac
 23f55cc:	1007aebc 	.word	0x1007aebc
 23f55d0:	023f5b11 	.word	0x023f5b11

023f55d4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23f55d4:	2300      	movs	r3, #0
 23f55d6:	4a02      	ldr	r2, [pc, #8]	; (23f55e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23f55d8:	4902      	ldr	r1, [pc, #8]	; (23f55e4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23f55da:	4803      	ldr	r0, [pc, #12]	; (23f55e8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23f55dc:	f7fe bfae 	b.w	23f453c <log_set_callbacks>
 23f55e0:	023f58f9 	.word	0x023f58f9
 23f55e4:	023f5885 	.word	0x023f5885
 23f55e8:	023f5805 	.word	0x023f5805

023f55ec <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23f55ec:	2300      	movs	r3, #0
 23f55ee:	461a      	mov	r2, r3
 23f55f0:	4619      	mov	r1, r3
 23f55f2:	4618      	mov	r0, r3
 23f55f4:	f7fe bfa2 	b.w	23f453c <log_set_callbacks>

023f55f8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23f55f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f55fa:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23f55fc:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f55fe:	4668      	mov	r0, sp
 23f5600:	f7ff fea2 	bl	23f5348 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f5604:	466a      	mov	r2, sp
 23f5606:	4629      	mov	r1, r5
 23f5608:	4620      	mov	r0, r4
 23f560a:	f7ff fb79 	bl	23f4d00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23f560e:	a801      	add	r0, sp, #4
 23f5610:	f7ff fc66 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f5614:	4620      	mov	r0, r4
 23f5616:	b003      	add	sp, #12
 23f5618:	bd30      	pop	{r4, r5, pc}

023f561a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23f561a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f561c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23f561e:	68cd      	ldr	r5, [r1, #12]
 23f5620:	4668      	mov	r0, sp
 23f5622:	f7ff fe91 	bl	23f5348 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f5626:	466a      	mov	r2, sp
 23f5628:	4629      	mov	r1, r5
 23f562a:	4620      	mov	r0, r4
 23f562c:	f7ff fb44 	bl	23f4cb8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f5630:	a801      	add	r0, sp, #4
 23f5632:	f7ff fc55 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f5636:	4620      	mov	r0, r4
 23f5638:	b003      	add	sp, #12
 23f563a:	bd30      	pop	{r4, r5, pc}

023f563c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23f563c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f563e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23f5640:	690d      	ldr	r5, [r1, #16]
 23f5642:	4668      	mov	r0, sp
 23f5644:	f7ff fe80 	bl	23f5348 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f5648:	466a      	mov	r2, sp
 23f564a:	4629      	mov	r1, r5
 23f564c:	4620      	mov	r0, r4
 23f564e:	f7ff fadb 	bl	23f4c08 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f5652:	a801      	add	r0, sp, #4
 23f5654:	f7ff fc44 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f5658:	4620      	mov	r0, r4
 23f565a:	b003      	add	sp, #12
 23f565c:	bd30      	pop	{r4, r5, pc}
	...

023f5660 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23f5660:	b570      	push	{r4, r5, r6, lr}
 23f5662:	b08a      	sub	sp, #40	; 0x28
 23f5664:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23f5666:	4601      	mov	r1, r0
 23f5668:	a804      	add	r0, sp, #16
 23f566a:	f7ff ffc5 	bl	23f55f8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23f566e:	4e14      	ldr	r6, [pc, #80]	; (23f56c0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23f5670:	a804      	add	r0, sp, #16
 23f5672:	f7ff fb5d 	bl	23f4d30 <_ZN5spark18JSONObjectIterator4nextEv>
 23f5676:	b1e8      	cbz	r0, 23f56b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23f5678:	4668      	mov	r0, sp
 23f567a:	a904      	add	r1, sp, #16
 23f567c:	f7ff ffcd 	bl	23f561a <_ZNK5spark18JSONObjectIterator4nameEv>
 23f5680:	4631      	mov	r1, r6
 23f5682:	9802      	ldr	r0, [sp, #8]
 23f5684:	f7ff fe3a 	bl	23f52fc <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23f5688:	4604      	mov	r4, r0
 23f568a:	b110      	cbz	r0, 23f5692 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23f568c:	1e2c      	subs	r4, r5, #0
 23f568e:	bf18      	it	ne
 23f5690:	2401      	movne	r4, #1
 23f5692:	a801      	add	r0, sp, #4
 23f5694:	f7ff fc24 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f5698:	2c00      	cmp	r4, #0
 23f569a:	d0e9      	beq.n	23f5670 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23f569c:	4668      	mov	r0, sp
 23f569e:	a904      	add	r1, sp, #16
 23f56a0:	f7ff ffcc 	bl	23f563c <_ZNK5spark18JSONObjectIterator5valueEv>
 23f56a4:	4668      	mov	r0, sp
 23f56a6:	f7ff fae5 	bl	23f4c74 <_ZNK5spark9JSONValue5toIntEv>
 23f56aa:	6028      	str	r0, [r5, #0]
 23f56ac:	a801      	add	r0, sp, #4
 23f56ae:	f7ff fc17 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f56b2:	e7dd      	b.n	23f5670 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23f56b4:	a805      	add	r0, sp, #20
 23f56b6:	f7ff fc13 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f56ba:	b00a      	add	sp, #40	; 0x28
 23f56bc:	bd70      	pop	{r4, r5, r6, pc}
 23f56be:	bf00      	nop
 23f56c0:	023ff6c8 	.word	0x023ff6c8

023f56c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f56c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f56c6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23f56c8:	4913      	ldr	r1, [pc, #76]	; (23f5718 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23f56ca:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f56cc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23f56ce:	f7f4 ff01 	bl	23ea4d4 <strcmp>
 23f56d2:	b950      	cbnz	r0, 23f56ea <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23f56d4:	f7ff fc70 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f56d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f56dc:	f7ff fc5a 	bl	23f4f94 <_ZN9USBSerial5beginEl>
}
 23f56e0:	b003      	add	sp, #12
 23f56e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23f56e6:	f7ff bc67 	b.w	23f4fb8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23f56ea:	4620      	mov	r0, r4
 23f56ec:	490b      	ldr	r1, [pc, #44]	; (23f571c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23f56ee:	f7f4 fef1 	bl	23ea4d4 <strcmp>
 23f56f2:	b978      	cbnz	r0, 23f5714 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23f56f4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23f56f8:	a901      	add	r1, sp, #4
 23f56fa:	4628      	mov	r0, r5
        int baud = 9600;
 23f56fc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23f56fe:	f7ff ffaf 	bl	23f5660 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23f5702:	f003 fb4f 	bl	23f8da4 <_Z22__fetch_global_Serial1v>
 23f5706:	9901      	ldr	r1, [sp, #4]
 23f5708:	f7ff f9f4 	bl	23f4af4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23f570c:	f003 fb4a 	bl	23f8da4 <_Z22__fetch_global_Serial1v>
}
 23f5710:	b003      	add	sp, #12
 23f5712:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23f5714:	2000      	movs	r0, #0
 23f5716:	e7fb      	b.n	23f5710 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23f5718:	023ff6cd 	.word	0x023ff6cd
 23f571c:	023ff6d4 	.word	0x023ff6d4

023f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f5720:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f5722:	2614      	movs	r6, #20
 23f5724:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f5728:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f572a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f572e:	42ae      	cmp	r6, r5
 23f5730:	d005      	beq.n	23f573e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23f5732:	f105 0008 	add.w	r0, r5, #8
 23f5736:	f7ff fff3 	bl	23f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f573a:	3514      	adds	r5, #20
 23f573c:	e7f7      	b.n	23f572e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f573e:	6820      	ldr	r0, [r4, #0]
 23f5740:	f7ff f822 	bl	23f4788 <free>
}
 23f5744:	4620      	mov	r0, r4
 23f5746:	bd70      	pop	{r4, r5, r6, pc}

023f5748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f5748:	b570      	push	{r4, r5, r6, lr}
 23f574a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f574c:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f5750:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f5754:	42ae      	cmp	r6, r5
 23f5756:	d004      	beq.n	23f5762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f5758:	4628      	mov	r0, r5
 23f575a:	f003 f9a9 	bl	23f8ab0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f575e:	3510      	adds	r5, #16
 23f5760:	e7f8      	b.n	23f5754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f5762:	6820      	ldr	r0, [r4, #0]
 23f5764:	f7ff f810 	bl	23f4788 <free>
}
 23f5768:	4620      	mov	r0, r4
 23f576a:	bd70      	pop	{r4, r5, r6, pc}

023f576c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23f576c:	b510      	push	{r4, lr}
 23f576e:	4604      	mov	r4, r0
 23f5770:	300c      	adds	r0, #12
 23f5772:	f7ff ffd5 	bl	23f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f5776:	4620      	mov	r0, r4
 23f5778:	f7ff ffe6 	bl	23f5748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f577c:	4620      	mov	r0, r4
 23f577e:	bd10      	pop	{r4, pc}

023f5780 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23f5780:	b510      	push	{r4, lr}
 23f5782:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23f5784:	4b03      	ldr	r3, [pc, #12]	; (23f5794 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23f5786:	f840 3b04 	str.w	r3, [r0], #4
 23f578a:	f7ff ffef 	bl	23f576c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23f578e:	4620      	mov	r0, r4
 23f5790:	bd10      	pop	{r4, pc}
 23f5792:	bf00      	nop
 23f5794:	023fc904 	.word	0x023fc904

023f5798 <_ZN5spark16StreamLogHandlerD0Ev>:
 23f5798:	b510      	push	{r4, lr}
 23f579a:	4604      	mov	r4, r0
 23f579c:	f7ff fff0 	bl	23f5780 <_ZN5spark16StreamLogHandlerD1Ev>
 23f57a0:	4620      	mov	r0, r4
 23f57a2:	2124      	movs	r1, #36	; 0x24
 23f57a4:	f7f4 fecb 	bl	23ea53e <_ZdlPvj>
 23f57a8:	4620      	mov	r0, r4
 23f57aa:	bd10      	pop	{r4, pc}

023f57ac <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23f57ac:	b510      	push	{r4, lr}
 23f57ae:	4604      	mov	r4, r0
 23f57b0:	4b02      	ldr	r3, [pc, #8]	; (23f57bc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23f57b2:	6003      	str	r3, [r0, #0]
 23f57b4:	f7ff ffe4 	bl	23f5780 <_ZN5spark16StreamLogHandlerD1Ev>
 23f57b8:	4620      	mov	r0, r4
 23f57ba:	bd10      	pop	{r4, pc}
 23f57bc:	023ff76c 	.word	0x023ff76c

023f57c0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23f57c0:	b510      	push	{r4, lr}
 23f57c2:	4604      	mov	r4, r0
 23f57c4:	f7ff fff2 	bl	23f57ac <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23f57c8:	4620      	mov	r0, r4
 23f57ca:	2124      	movs	r1, #36	; 0x24
 23f57cc:	f7f4 feb7 	bl	23ea53e <_ZdlPvj>
 23f57d0:	4620      	mov	r0, r4
 23f57d2:	bd10      	pop	{r4, pc}

023f57d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23f57d4:	2200      	movs	r2, #0
 23f57d6:	e9c0 2200 	strd	r2, r2, [r0]
 23f57da:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f57dc:	b510      	push	{r4, lr}
 23f57de:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f57e0:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f57e2:	6004      	str	r4, [r0, #0]
 23f57e4:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f57e6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f57e8:	6044      	str	r4, [r0, #4]
 23f57ea:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f57ec:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f57ee:	6084      	str	r4, [r0, #8]
}
 23f57f0:	bd10      	pop	{r4, pc}

023f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f57f2:	b510      	push	{r4, lr}
 23f57f4:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23f57f6:	6803      	ldr	r3, [r0, #0]
 23f57f8:	6818      	ldr	r0, [r3, #0]
 23f57fa:	f7fe fd33 	bl	23f4264 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23f57fe:	4620      	mov	r0, r4
 23f5800:	bd10      	pop	{r4, pc}
	...

023f5804 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23f5804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5808:	b087      	sub	sp, #28
 23f580a:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23f580c:	4b1c      	ldr	r3, [pc, #112]	; (23f5880 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23f580e:	4680      	mov	r8, r0
 23f5810:	685b      	ldr	r3, [r3, #4]
 23f5812:	4689      	mov	r9, r1
 23f5814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f5818:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23f581a:	b96b      	cbnz	r3, 23f5838 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23f581c:	f7ff febe 	bl	23f559c <_ZN5spark10LogManager8instanceEv>
 23f5820:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f5822:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23f5826:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f5828:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23f582a:	f7ff fd65 	bl	23f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23f582e:	7b23      	ldrb	r3, [r4, #12]
 23f5830:	b12b      	cbz	r3, 23f583e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23f5832:	a805      	add	r0, sp, #20
 23f5834:	f7ff ffdd 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23f5838:	b007      	add	sp, #28
 23f583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23f583e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23f5840:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23f5844:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23f5846:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f584a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f584e:	45aa      	cmp	sl, r5
 23f5850:	d012      	beq.n	23f5878 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23f5852:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23f5856:	4631      	mov	r1, r6
 23f5858:	1d38      	adds	r0, r7, #4
 23f585a:	f7ff fdf7 	bl	23f544c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f585e:	4581      	cmp	r9, r0
 23f5860:	d3f5      	bcc.n	23f584e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23f5862:	9a03      	ldr	r2, [sp, #12]
 23f5864:	683b      	ldr	r3, [r7, #0]
 23f5866:	9200      	str	r2, [sp, #0]
 23f5868:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23f586c:	464a      	mov	r2, r9
 23f586e:	4633      	mov	r3, r6
 23f5870:	4641      	mov	r1, r8
 23f5872:	4638      	mov	r0, r7
 23f5874:	47d8      	blx	fp
 23f5876:	e7ea      	b.n	23f584e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23f5878:	2300      	movs	r3, #0
 23f587a:	7323      	strb	r3, [r4, #12]
 23f587c:	e7d9      	b.n	23f5832 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23f587e:	bf00      	nop
 23f5880:	e000ed00 	.word	0xe000ed00

023f5884 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23f5884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5888:	469b      	mov	fp, r3
 23f588a:	4b1a      	ldr	r3, [pc, #104]	; (23f58f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23f588c:	4680      	mov	r8, r0
 23f588e:	685b      	ldr	r3, [r3, #4]
 23f5890:	4689      	mov	r9, r1
 23f5892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f5896:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23f5898:	b96b      	cbnz	r3, 23f58b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23f589a:	f7ff fe7f 	bl	23f559c <_ZN5spark10LogManager8instanceEv>
 23f589e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f58a0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f58a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f58a6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f58a8:	f7ff fd26 	bl	23f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23f58ac:	7b23      	ldrb	r3, [r4, #12]
 23f58ae:	b12b      	cbz	r3, 23f58bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23f58b0:	a801      	add	r0, sp, #4
 23f58b2:	f7ff ff9e 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f58b6:	b003      	add	sp, #12
 23f58b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23f58bc:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23f58be:	b2f6      	uxtb	r6, r6
 23f58c0:	7323      	strb	r3, [r4, #12]
 23f58c2:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f58c6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f58ca:	4555      	cmp	r5, sl
 23f58cc:	d00e      	beq.n	23f58ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23f58ce:	f855 7b04 	ldr.w	r7, [r5], #4
 23f58d2:	4659      	mov	r1, fp
 23f58d4:	1d38      	adds	r0, r7, #4
 23f58d6:	f7ff fdb9 	bl	23f544c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f58da:	4286      	cmp	r6, r0
 23f58dc:	d3f5      	bcc.n	23f58ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23f58de:	683b      	ldr	r3, [r7, #0]
 23f58e0:	464a      	mov	r2, r9
 23f58e2:	4641      	mov	r1, r8
 23f58e4:	4638      	mov	r0, r7
 23f58e6:	68db      	ldr	r3, [r3, #12]
 23f58e8:	4798      	blx	r3
 23f58ea:	e7ee      	b.n	23f58ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23f58ec:	2300      	movs	r3, #0
 23f58ee:	7323      	strb	r3, [r4, #12]
 23f58f0:	e7de      	b.n	23f58b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23f58f2:	bf00      	nop
 23f58f4:	e000ed00 	.word	0xe000ed00

023f58f8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23f58f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f58fc:	4b16      	ldr	r3, [pc, #88]	; (23f5958 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23f58fe:	4605      	mov	r5, r0
 23f5900:	685b      	ldr	r3, [r3, #4]
 23f5902:	460f      	mov	r7, r1
 23f5904:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23f5908:	bb1b      	cbnz	r3, 23f5952 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23f590a:	f7ff fe47 	bl	23f559c <_ZN5spark10LogManager8instanceEv>
 23f590e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f5910:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f5914:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f5916:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f5918:	f7ff fcee 	bl	23f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>
 23f591c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23f5920:	2446      	movs	r4, #70	; 0x46
 23f5922:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f5926:	45b0      	cmp	r8, r6
 23f5928:	d109      	bne.n	23f593e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23f592a:	a801      	add	r0, sp, #4
 23f592c:	f7ff ff61 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23f5930:	42a5      	cmp	r5, r4
 23f5932:	bfb4      	ite	lt
 23f5934:	2000      	movlt	r0, #0
 23f5936:	2001      	movge	r0, #1
}
 23f5938:	b002      	add	sp, #8
 23f593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23f593e:	f856 0b04 	ldr.w	r0, [r6], #4
 23f5942:	4639      	mov	r1, r7
 23f5944:	3004      	adds	r0, #4
 23f5946:	f7ff fd81 	bl	23f544c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23f594a:	4284      	cmp	r4, r0
 23f594c:	bfa8      	it	ge
 23f594e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23f5950:	e7e9      	b.n	23f5926 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23f5952:	2000      	movs	r0, #0
 23f5954:	e7f0      	b.n	23f5938 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23f5956:	bf00      	nop
 23f5958:	e000ed00 	.word	0xe000ed00

023f595c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f595e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23f5962:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f5964:	4604      	mov	r4, r0
 23f5966:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f5968:	db0d      	blt.n	23f5986 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23f596a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23f596c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f596e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f5970:	dd04      	ble.n	23f597c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23f5972:	00b9      	lsls	r1, r7, #2
 23f5974:	f7fe ff16 	bl	23f47a4 <realloc>
            if (!d) {
 23f5978:	b918      	cbnz	r0, 23f5982 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23f597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23f597c:	f7fe ff04 	bl	23f4788 <free>
        T* d = nullptr;
 23f5980:	2000      	movs	r0, #0
        data_ = d;
 23f5982:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f5984:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23f5986:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f5988:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f598a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23f598e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f5990:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23f5994:	1d08      	adds	r0, r1, #4
 23f5996:	f005 fb7b 	bl	23fb090 <memmove>
    new(p) T(std::move(value));
 23f599a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23f599e:	6863      	ldr	r3, [r4, #4]
    return true;
 23f59a0:	2001      	movs	r0, #1
    ++size_;
 23f59a2:	3301      	adds	r3, #1
 23f59a4:	6063      	str	r3, [r4, #4]
    return true;
 23f59a6:	e7e8      	b.n	23f597a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023f59a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f59a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f59aa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f59ac:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f59b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f59b2:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f59b4:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23f59b6:	f7ff fc9f 	bl	23f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23f59ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f59be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23f59c2:	4293      	cmp	r3, r2
 23f59c4:	4619      	mov	r1, r3
 23f59c6:	d00a      	beq.n	23f59de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23f59c8:	6809      	ldr	r1, [r1, #0]
 23f59ca:	3304      	adds	r3, #4
 23f59cc:	42a9      	cmp	r1, r5
 23f59ce:	d1f8      	bne.n	23f59c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23f59d0:	a801      	add	r0, sp, #4
 23f59d2:	f7ff ff0e 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f59d6:	2500      	movs	r5, #0
}
 23f59d8:	4628      	mov	r0, r5
 23f59da:	b003      	add	sp, #12
 23f59dc:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23f59de:	4629      	mov	r1, r5
 23f59e0:	4620      	mov	r0, r4
 23f59e2:	f7ff ffbb 	bl	23f595c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23f59e6:	4605      	mov	r5, r0
 23f59e8:	2800      	cmp	r0, #0
 23f59ea:	d0f1      	beq.n	23f59d0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23f59ec:	6863      	ldr	r3, [r4, #4]
 23f59ee:	2b01      	cmp	r3, #1
 23f59f0:	d101      	bne.n	23f59f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23f59f2:	f7ff fdef 	bl	23f55d4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f59f6:	a801      	add	r0, sp, #4
 23f59f8:	f7ff fefb 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f59fc:	e7ec      	b.n	23f59d8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023f59fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f59fe:	460b      	mov	r3, r1
 23f5a00:	b570      	push	{r4, r5, r6, lr}
 23f5a02:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23f5a04:	e9d0 0200 	ldrd	r0, r2, [r0]
 23f5a08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23f5a0c:	4282      	cmp	r2, r0
 23f5a0e:	d00f      	beq.n	23f5a30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23f5a10:	4601      	mov	r1, r0
            if (*p == value) {
 23f5a12:	681d      	ldr	r5, [r3, #0]
 23f5a14:	f851 6b04 	ldr.w	r6, [r1], #4
 23f5a18:	42ae      	cmp	r6, r5
 23f5a1a:	d107      	bne.n	23f5a2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f5a1c:	1a52      	subs	r2, r2, r1
 23f5a1e:	f005 fb37 	bl	23fb090 <memmove>
    return true;
 23f5a22:	2001      	movs	r0, #1
    --size_;
 23f5a24:	6863      	ldr	r3, [r4, #4]
 23f5a26:	3b01      	subs	r3, #1
 23f5a28:	6063      	str	r3, [r4, #4]
}
 23f5a2a:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23f5a2c:	4608      	mov	r0, r1
 23f5a2e:	e7ed      	b.n	23f5a0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23f5a30:	2000      	movs	r0, #0
 23f5a32:	e7fa      	b.n	23f5a2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023f5a34 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f5a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f5a36:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f5a38:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f5a3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f5a3e:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f5a40:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23f5a42:	f7ff fc59 	bl	23f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23f5a46:	4620      	mov	r0, r4
 23f5a48:	a901      	add	r1, sp, #4
 23f5a4a:	f7ff ffd8 	bl	23f59fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23f5a4e:	b118      	cbz	r0, 23f5a58 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23f5a50:	6863      	ldr	r3, [r4, #4]
 23f5a52:	b90b      	cbnz	r3, 23f5a58 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23f5a54:	f7ff fdca 	bl	23f55ec <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f5a58:	a803      	add	r0, sp, #12
 23f5a5a:	f7ff feca 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f5a5e:	b004      	add	sp, #16
 23f5a60:	bd10      	pop	{r4, pc}

023f5a62 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23f5a62:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23f5a64:	b570      	push	{r4, r5, r6, lr}
 23f5a66:	4604      	mov	r4, r0
 23f5a68:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f5a6c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23f5a70:	42ae      	cmp	r6, r5
 23f5a72:	d015      	beq.n	23f5aa0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23f5a74:	4620      	mov	r0, r4
 23f5a76:	f105 0110 	add.w	r1, r5, #16
 23f5a7a:	f7ff ffc0 	bl	23f59fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23f5a7e:	6863      	ldr	r3, [r4, #4]
 23f5a80:	b90b      	cbnz	r3, 23f5a86 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23f5a82:	f7ff fdb3 	bl	23f55ec <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23f5a86:	69e0      	ldr	r0, [r4, #28]
 23f5a88:	6929      	ldr	r1, [r5, #16]
 23f5a8a:	6803      	ldr	r3, [r0, #0]
 23f5a8c:	68db      	ldr	r3, [r3, #12]
 23f5a8e:	4798      	blx	r3
        if (h.stream) {
 23f5a90:	6969      	ldr	r1, [r5, #20]
 23f5a92:	b119      	cbz	r1, 23f5a9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23f5a94:	6a20      	ldr	r0, [r4, #32]
 23f5a96:	6803      	ldr	r3, [r0, #0]
 23f5a98:	68db      	ldr	r3, [r3, #12]
 23f5a9a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23f5a9c:	3518      	adds	r5, #24
 23f5a9e:	e7e7      	b.n	23f5a70 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23f5aa0:	2618      	movs	r6, #24
 23f5aa2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f5aa6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f5aaa:	42ae      	cmp	r6, r5
 23f5aac:	d004      	beq.n	23f5ab8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23f5aae:	4628      	mov	r0, r5
 23f5ab0:	f002 fffe 	bl	23f8ab0 <_ZN6StringD1Ev>
 23f5ab4:	3518      	adds	r5, #24
 23f5ab6:	e7f8      	b.n	23f5aaa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23f5ab8:	2300      	movs	r3, #0
 23f5aba:	6163      	str	r3, [r4, #20]
}
 23f5abc:	bd70      	pop	{r4, r5, r6, pc}

023f5abe <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23f5abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f5ac0:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23f5ac2:	f7ff fd93 	bl	23f55ec <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f5ac6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23f5aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f5acc:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f5ace:	f7ff fc13 	bl	23f52f8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23f5ad2:	4620      	mov	r0, r4
 23f5ad4:	f7ff ffc5 	bl	23f5a62 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23f5ad8:	a801      	add	r0, sp, #4
 23f5ada:	f7ff fe8a 	bl	23f57f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23f5ade:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f5ae0:	b108      	cbz	r0, 23f5ae6 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23f5ae2:	f7fe fba3 	bl	23f422c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23f5ae6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f5aea:	2618      	movs	r6, #24
 23f5aec:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f5af0:	42ae      	cmp	r6, r5
 23f5af2:	d004      	beq.n	23f5afe <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23f5af4:	4628      	mov	r0, r5
 23f5af6:	f002 ffdb 	bl	23f8ab0 <_ZN6StringD1Ev>
 23f5afa:	3518      	adds	r5, #24
 23f5afc:	e7f8      	b.n	23f5af0 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23f5afe:	6920      	ldr	r0, [r4, #16]
 23f5b00:	f7fe fe42 	bl	23f4788 <free>
 23f5b04:	6820      	ldr	r0, [r4, #0]
 23f5b06:	f7fe fe3f 	bl	23f4788 <free>
}
 23f5b0a:	4620      	mov	r0, r4
 23f5b0c:	b002      	add	sp, #8
 23f5b0e:	bd70      	pop	{r4, r5, r6, pc}

023f5b10 <__tcf_2>:
    static LogManager mgr;
 23f5b10:	4801      	ldr	r0, [pc, #4]	; (23f5b18 <__tcf_2+0x8>)
 23f5b12:	f7ff bfd4 	b.w	23f5abe <_ZN5spark10LogManagerD1Ev>
 23f5b16:	bf00      	nop
 23f5b18:	1007aebc 	.word	0x1007aebc

023f5b1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23f5b1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f5b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5b20:	4604      	mov	r4, r0
 23f5b22:	460d      	mov	r5, r1
 23f5b24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f5b26:	d915      	bls.n	23f5b54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23f5b28:	4290      	cmp	r0, r2
 23f5b2a:	d214      	bcs.n	23f5b56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23f5b2c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f5b30:	1a75      	subs	r5, r6, r1
 23f5b32:	f1a1 0714 	sub.w	r7, r1, #20
 23f5b36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f5b38:	42b7      	cmp	r7, r6
 23f5b3a:	d01a      	beq.n	23f5b72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23f5b3c:	b11c      	cbz	r4, 23f5b46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23f5b3e:	4631      	mov	r1, r6
 23f5b40:	4620      	mov	r0, r4
 23f5b42:	f7ff fc33 	bl	23f53ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23f5b46:	f106 0008 	add.w	r0, r6, #8
 23f5b4a:	f7ff fde9 	bl	23f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23f5b4e:	3e14      	subs	r6, #20
 23f5b50:	3c14      	subs	r4, #20
 23f5b52:	e7f1      	b.n	23f5b38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23f5b54:	d00d      	beq.n	23f5b72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23f5b56:	42b5      	cmp	r5, r6
 23f5b58:	d00b      	beq.n	23f5b72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23f5b5a:	b11c      	cbz	r4, 23f5b64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23f5b5c:	4629      	mov	r1, r5
 23f5b5e:	4620      	mov	r0, r4
 23f5b60:	f7ff fc24 	bl	23f53ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23f5b64:	f105 0008 	add.w	r0, r5, #8
 23f5b68:	f7ff fdda 	bl	23f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23f5b6c:	3514      	adds	r5, #20
 23f5b6e:	3414      	adds	r4, #20
 23f5b70:	e7f1      	b.n	23f5b56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23f5b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f5b74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f5b74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f5b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5b78:	4604      	mov	r4, r0
 23f5b7a:	460d      	mov	r5, r1
 23f5b7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f5b7e:	d914      	bls.n	23f5baa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23f5b80:	4290      	cmp	r0, r2
 23f5b82:	d213      	bcs.n	23f5bac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23f5b84:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23f5b88:	1a75      	subs	r5, r6, r1
 23f5b8a:	f1a1 0710 	sub.w	r7, r1, #16
 23f5b8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f5b90:	42b7      	cmp	r7, r6
 23f5b92:	d018      	beq.n	23f5bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23f5b94:	b11c      	cbz	r4, 23f5b9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23f5b96:	4631      	mov	r1, r6
 23f5b98:	4620      	mov	r0, r4
 23f5b9a:	f003 f805 	bl	23f8ba8 <_ZN6StringC1EOS_>
                end->~T();
 23f5b9e:	4630      	mov	r0, r6
 23f5ba0:	f002 ff86 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f5ba4:	3e10      	subs	r6, #16
 23f5ba6:	3c10      	subs	r4, #16
 23f5ba8:	e7f2      	b.n	23f5b90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f5baa:	d00c      	beq.n	23f5bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23f5bac:	42b5      	cmp	r5, r6
 23f5bae:	d00a      	beq.n	23f5bc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23f5bb0:	b11c      	cbz	r4, 23f5bba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23f5bb2:	4629      	mov	r1, r5
 23f5bb4:	4620      	mov	r0, r4
 23f5bb6:	f002 fff7 	bl	23f8ba8 <_ZN6StringC1EOS_>
                p->~T();
 23f5bba:	4628      	mov	r0, r5
 23f5bbc:	f002 ff78 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f5bc0:	3510      	adds	r5, #16
 23f5bc2:	3410      	adds	r4, #16
 23f5bc4:	e7f2      	b.n	23f5bac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23f5bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f5bc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f5bc8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f5bca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f5bcc:	4605      	mov	r5, r0
        if (n > 0) {
 23f5bce:	dd11      	ble.n	23f5bf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f5bd0:	0130      	lsls	r0, r6, #4
 23f5bd2:	f7fe fdcb 	bl	23f476c <malloc>
            if (!d) {
 23f5bd6:	4604      	mov	r4, r0
 23f5bd8:	b158      	cbz	r0, 23f5bf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f5bda:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f5bde:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23f5be2:	f7ff ffc7 	bl	23f5b74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f5be6:	6828      	ldr	r0, [r5, #0]
 23f5be8:	f7fe fdce 	bl	23f4788 <free>
        return true;
 23f5bec:	2001      	movs	r0, #1
        data_ = d;
 23f5bee:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f5bf0:	60ae      	str	r6, [r5, #8]
    }
 23f5bf2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f5bf4:	2400      	movs	r4, #0
 23f5bf6:	e7f6      	b.n	23f5be6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023f5bf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f5bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5bfc:	4690      	mov	r8, r2
        capacity_(0) {
 23f5bfe:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f5c00:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f5c02:	b095      	sub	sp, #84	; 0x54
 23f5c04:	9103      	str	r1, [sp, #12]
    return size_;
 23f5c06:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23f5c0a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23f5c0c:	4299      	cmp	r1, r3
        capacity_(0) {
 23f5c0e:	e9c0 3300 	strd	r3, r3, [r0]
 23f5c12:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23f5c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f5c1a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f5c1e:	7602      	strb	r2, [r0, #24]
 23f5c20:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23f5c22:	dc23      	bgt.n	23f5c6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23f5c24:	e9d8 5700 	ldrd	r5, r7, [r8]
 23f5c28:	2314      	movs	r3, #20
 23f5c2a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23f5c2e:	42af      	cmp	r7, r5
 23f5c30:	d03b      	beq.n	23f5caa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23f5c32:	4629      	mov	r1, r5
 23f5c34:	a80b      	add	r0, sp, #44	; 0x2c
 23f5c36:	f002 ffb7 	bl	23f8ba8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23f5c3a:	a90b      	add	r1, sp, #44	; 0x2c
 23f5c3c:	a80f      	add	r0, sp, #60	; 0x3c
 23f5c3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23f5c40:	f002 ffb2 	bl	23f8ba8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f5c44:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23f5c48:	4299      	cmp	r1, r3
 23f5c4a:	da1b      	bge.n	23f5c84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23f5c4c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23f5c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23f5c50:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23f5c54:	4631      	mov	r1, r6
 23f5c56:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23f5c5a:	f106 0010 	add.w	r0, r6, #16
 23f5c5e:	f7ff ff89 	bl	23f5b74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23f5c62:	b9ee      	cbnz	r6, 23f5ca0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23f5c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f5c66:	3301      	adds	r3, #1
 23f5c68:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23f5c6a:	e011      	b.n	23f5c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23f5c6c:	a808      	add	r0, sp, #32
 23f5c6e:	f7ff ffab 	bl	23f5bc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f5c72:	2800      	cmp	r0, #0
 23f5c74:	d1d6      	bne.n	23f5c24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23f5c76:	a808      	add	r0, sp, #32
 23f5c78:	f7ff fd66 	bl	23f5748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f5c7c:	4620      	mov	r0, r4
 23f5c7e:	b015      	add	sp, #84	; 0x54
 23f5c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f5c84:	3101      	adds	r1, #1
 23f5c86:	a808      	add	r0, sp, #32
 23f5c88:	f7ff ff9e 	bl	23f5bc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f5c8c:	2800      	cmp	r0, #0
 23f5c8e:	d1dd      	bne.n	23f5c4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23f5c90:	a80f      	add	r0, sp, #60	; 0x3c
 23f5c92:	f002 ff0d 	bl	23f8ab0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23f5c96:	a80b      	add	r0, sp, #44	; 0x2c
 23f5c98:	f002 ff0a 	bl	23f8ab0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23f5c9c:	3514      	adds	r5, #20
 23f5c9e:	e7c6      	b.n	23f5c2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23f5ca0:	4630      	mov	r0, r6
 23f5ca2:	a90f      	add	r1, sp, #60	; 0x3c
 23f5ca4:	f002 ff80 	bl	23f8ba8 <_ZN6StringC1EOS_>
 23f5ca8:	e7dc      	b.n	23f5c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23f5caa:	2600      	movs	r6, #0
 23f5cac:	f04f 0914 	mov.w	r9, #20
 23f5cb0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23f5cb4:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23f5cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23f5cba:	429e      	cmp	r6, r3
 23f5cbc:	da7c      	bge.n	23f5db8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f5cbe:	0133      	lsls	r3, r6, #4
 23f5cc0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23f5cc2:	9306      	str	r3, [sp, #24]
        if (!category) {
 23f5cc4:	b90b      	cbnz	r3, 23f5cca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23f5cc6:	3601      	adds	r6, #1
 23f5cc8:	e7f5      	b.n	23f5cb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23f5cca:	2300      	movs	r3, #0
 23f5ccc:	9307      	str	r3, [sp, #28]
 23f5cce:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23f5cd2:	ad0b      	add	r5, sp, #44	; 0x2c
 23f5cd4:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23f5cd6:	a907      	add	r1, sp, #28
 23f5cd8:	a806      	add	r0, sp, #24
 23f5cda:	f7ff fae6 	bl	23f52aa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f5cde:	4682      	mov	sl, r0
 23f5ce0:	2800      	cmp	r0, #0
 23f5ce2:	d0f0      	beq.n	23f5cc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23f5ce4:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23f5ce8:	4601      	mov	r1, r0
            bool found = false;
 23f5cea:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f5cee:	4628      	mov	r0, r5
 23f5cf0:	9a07      	ldr	r2, [sp, #28]
 23f5cf2:	f10d 0317 	add.w	r3, sp, #23
 23f5cf6:	f7ff fb6d 	bl	23f53d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f5cfa:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f5cfe:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f5d00:	2f00      	cmp	r7, #0
 23f5d02:	d14a      	bne.n	23f5d9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23f5d04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23f5d08:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23f5d0c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23f5d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f5d14:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23f5d18:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23f5d1c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f5d1e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23f5d22:	4293      	cmp	r3, r2
 23f5d24:	db17      	blt.n	23f5d56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23f5d26:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23f5d2a:	f1ba 0f00 	cmp.w	sl, #0
 23f5d2e:	dd30      	ble.n	23f5d92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23f5d30:	fb09 f00a 	mul.w	r0, r9, sl
 23f5d34:	f7fe fd1a 	bl	23f476c <malloc>
            if (!d) {
 23f5d38:	4683      	mov	fp, r0
 23f5d3a:	b360      	cbz	r0, 23f5d96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23f5d3c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f5d40:	fb09 1202 	mla	r2, r9, r2, r1
 23f5d44:	f7ff feea 	bl	23f5b1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23f5d48:	6828      	ldr	r0, [r5, #0]
 23f5d4a:	f7fe fd1d 	bl	23f4788 <free>
        data_ = d;
 23f5d4e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23f5d52:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23f5d56:	682b      	ldr	r3, [r5, #0]
 23f5d58:	9a01      	ldr	r2, [sp, #4]
 23f5d5a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23f5d5e:	686a      	ldr	r2, [r5, #4]
 23f5d60:	4651      	mov	r1, sl
 23f5d62:	fb09 3202 	mla	r2, r9, r2, r3
 23f5d66:	f10a 0014 	add.w	r0, sl, #20
 23f5d6a:	f7ff fed7 	bl	23f5b1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23f5d6e:	f1ba 0f00 	cmp.w	sl, #0
 23f5d72:	d003      	beq.n	23f5d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23f5d74:	4650      	mov	r0, sl
 23f5d76:	a90f      	add	r1, sp, #60	; 0x3c
 23f5d78:	f7ff fb18 	bl	23f53ac <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23f5d7c:	686b      	ldr	r3, [r5, #4]
 23f5d7e:	3301      	adds	r3, #1
 23f5d80:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23f5d82:	a811      	add	r0, sp, #68	; 0x44
 23f5d84:	f7ff fccc 	bl	23f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f5d88:	b13f      	cbz	r7, 23f5d9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23f5d8a:	a80b      	add	r0, sp, #44	; 0x2c
 23f5d8c:	f7ff fcc8 	bl	23f5720 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f5d90:	e771      	b.n	23f5c76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23f5d92:	46bb      	mov	fp, r7
 23f5d94:	e7d8      	b.n	23f5d48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f5d96:	2701      	movs	r7, #1
 23f5d98:	e7f3      	b.n	23f5d82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23f5d9a:	9b01      	ldr	r3, [sp, #4]
 23f5d9c:	682d      	ldr	r5, [r5, #0]
 23f5d9e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23f5da2:	9b06      	ldr	r3, [sp, #24]
 23f5da4:	781b      	ldrb	r3, [r3, #0]
 23f5da6:	b92b      	cbnz	r3, 23f5db4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23f5da8:	f8d8 3000 	ldr.w	r3, [r8]
 23f5dac:	9a02      	ldr	r2, [sp, #8]
 23f5dae:	4413      	add	r3, r2
 23f5db0:	7c1b      	ldrb	r3, [r3, #16]
 23f5db2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23f5db4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23f5db6:	e78e      	b.n	23f5cd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5db8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f5dba:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5dbc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f5dbe:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5dc0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f5dc2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23f5dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23f5dc6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5dc8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f5dca:	60a2      	str	r2, [r4, #8]
 23f5dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23f5dce:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5dd0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f5dd2:	60e2      	str	r2, [r4, #12]
 23f5dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23f5dd6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5dd8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f5dda:	6122      	str	r2, [r4, #16]
 23f5ddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23f5dde:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23f5de0:	9b03      	ldr	r3, [sp, #12]
 23f5de2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23f5de4:	6162      	str	r2, [r4, #20]
 23f5de6:	7623      	strb	r3, [r4, #24]
 23f5de8:	e7cf      	b.n	23f5d8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023f5dec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5dee:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f5df0:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f5df2:	4617      	mov	r7, r2
 23f5df4:	b087      	sub	sp, #28
 23f5df6:	460d      	mov	r5, r1
        stream_(&stream) {
 23f5df8:	4668      	mov	r0, sp
 23f5dfa:	4619      	mov	r1, r3
 23f5dfc:	f7fa f9a0 	bl	23f0140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f5e00:	4b0b      	ldr	r3, [pc, #44]	; (23f5e30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23f5e02:	4669      	mov	r1, sp
 23f5e04:	f846 3b04 	str.w	r3, [r6], #4
 23f5e08:	a803      	add	r0, sp, #12
 23f5e0a:	f7fa f999 	bl	23f0140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f5e0e:	4639      	mov	r1, r7
 23f5e10:	aa03      	add	r2, sp, #12
 23f5e12:	4630      	mov	r0, r6
 23f5e14:	f7ff fef0 	bl	23f5bf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f5e18:	a803      	add	r0, sp, #12
 23f5e1a:	f7f9 f9fb 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f5e1e:	4668      	mov	r0, sp
 23f5e20:	f7f9 f9f8 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f5e24:	4620      	mov	r0, r4
        stream_(&stream) {
 23f5e26:	4b03      	ldr	r3, [pc, #12]	; (23f5e34 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23f5e28:	6225      	str	r5, [r4, #32]
 23f5e2a:	6023      	str	r3, [r4, #0]
}
 23f5e2c:	b007      	add	sp, #28
 23f5e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f5e30:	023fc904 	.word	0x023fc904
 23f5e34:	023ff754 	.word	0x023ff754

023f5e38 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23f5e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5e3a:	460f      	mov	r7, r1
 23f5e3c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f5e3e:	4638      	mov	r0, r7
 23f5e40:	491c      	ldr	r1, [pc, #112]	; (23f5eb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23f5e42:	4616      	mov	r6, r2
 23f5e44:	461d      	mov	r5, r3
 23f5e46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f5e48:	f7f4 fb44 	bl	23ea4d4 <strcmp>
 23f5e4c:	b9c0      	cbnz	r0, 23f5e80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23f5e4e:	b1a4      	cbz	r4, 23f5e7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23f5e50:	4629      	mov	r1, r5
 23f5e52:	a801      	add	r0, sp, #4
 23f5e54:	f7ff fcbe 	bl	23f57d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f5e58:	2024      	movs	r0, #36	; 0x24
 23f5e5a:	4917      	ldr	r1, [pc, #92]	; (23f5eb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f5e5c:	f003 f9d0 	bl	23f9200 <_ZnwjRKSt9nothrow_t>
 23f5e60:	4605      	mov	r5, r0
 23f5e62:	b130      	cbz	r0, 23f5e72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23f5e64:	ab01      	add	r3, sp, #4
 23f5e66:	4632      	mov	r2, r6
 23f5e68:	4621      	mov	r1, r4
 23f5e6a:	f7ff ffbf 	bl	23f5dec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f5e6e:	4b13      	ldr	r3, [pc, #76]	; (23f5ebc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23f5e70:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f5e72:	a801      	add	r0, sp, #4
 23f5e74:	f7f9 f9ce 	bl	23ef214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f5e78:	462c      	mov	r4, r5
}
 23f5e7a:	4620      	mov	r0, r4
 23f5e7c:	b005      	add	sp, #20
 23f5e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23f5e80:	4638      	mov	r0, r7
 23f5e82:	490f      	ldr	r1, [pc, #60]	; (23f5ec0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23f5e84:	f7f4 fb26 	bl	23ea4d4 <strcmp>
 23f5e88:	b990      	cbnz	r0, 23f5eb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23f5e8a:	2c00      	cmp	r4, #0
 23f5e8c:	d0f5      	beq.n	23f5e7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f5e8e:	4629      	mov	r1, r5
 23f5e90:	a801      	add	r0, sp, #4
 23f5e92:	f7ff fc9f 	bl	23f57d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f5e96:	2024      	movs	r0, #36	; 0x24
 23f5e98:	4907      	ldr	r1, [pc, #28]	; (23f5eb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f5e9a:	f003 f9b1 	bl	23f9200 <_ZnwjRKSt9nothrow_t>
 23f5e9e:	4605      	mov	r5, r0
 23f5ea0:	2800      	cmp	r0, #0
 23f5ea2:	d0e6      	beq.n	23f5e72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23f5ea4:	4632      	mov	r2, r6
 23f5ea6:	4621      	mov	r1, r4
 23f5ea8:	ab01      	add	r3, sp, #4
 23f5eaa:	f7ff ff9f 	bl	23f5dec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f5eae:	e7e0      	b.n	23f5e72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23f5eb0:	2400      	movs	r4, #0
 23f5eb2:	e7e2      	b.n	23f5e7a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23f5eb4:	023ff6dc 	.word	0x023ff6dc
 23f5eb8:	023ffa77 	.word	0x023ffa77
 23f5ebc:	023ff76c 	.word	0x023ff76c
 23f5ec0:	023ff6e0 	.word	0x023ff6e0

023f5ec4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23f5ec4:	4b01      	ldr	r3, [pc, #4]	; (23f5ecc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f5ec6:	4a02      	ldr	r2, [pc, #8]	; (23f5ed0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f5ec8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f5eca:	4770      	bx	lr
 23f5ecc:	1007aeb8 	.word	0x1007aeb8
 23f5ed0:	023ff6f1 	.word	0x023ff6f1

023f5ed4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f5ed8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23f5eda:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5ede:	4604      	mov	r4, r0
 23f5ee0:	460e      	mov	r6, r1
 23f5ee2:	4617      	mov	r7, r2
 23f5ee4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23f5ee6:	f7ff f867 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f5eea:	4581      	cmp	r9, r0
 23f5eec:	d04d      	beq.n	23f5f8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23f5eee:	792b      	ldrb	r3, [r5, #4]
 23f5ef0:	0719      	lsls	r1, r3, #28
 23f5ef2:	d504      	bpl.n	23f5efe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23f5ef4:	4620      	mov	r0, r4
 23f5ef6:	696a      	ldr	r2, [r5, #20]
 23f5ef8:	4954      	ldr	r1, [pc, #336]	; (23f604c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23f5efa:	f7ff fad0 	bl	23f549e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23f5efe:	f1b8 0f00 	cmp.w	r8, #0
 23f5f02:	d00d      	beq.n	23f5f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23f5f04:	215b      	movs	r1, #91	; 0x5b
 23f5f06:	4620      	mov	r0, r4
 23f5f08:	f7ff fa44 	bl	23f5394 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23f5f0c:	4641      	mov	r1, r8
 23f5f0e:	4620      	mov	r0, r4
 23f5f10:	f7ff fa31 	bl	23f5376 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23f5f14:	6823      	ldr	r3, [r4, #0]
 23f5f16:	2202      	movs	r2, #2
 23f5f18:	4620      	mov	r0, r4
 23f5f1a:	68db      	ldr	r3, [r3, #12]
 23f5f1c:	494c      	ldr	r1, [pc, #304]	; (23f6050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23f5f1e:	4798      	blx	r3
    if (attr.has_file) {
 23f5f20:	792b      	ldrb	r3, [r5, #4]
 23f5f22:	07da      	lsls	r2, r3, #31
 23f5f24:	d524      	bpl.n	23f5f70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23f5f26:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23f5f2a:	212f      	movs	r1, #47	; 0x2f
 23f5f2c:	4640      	mov	r0, r8
 23f5f2e:	f005 f94e 	bl	23fb1ce <strrchr>
    if (s1) {
 23f5f32:	b108      	cbz	r0, 23f5f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23f5f34:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23f5f38:	4641      	mov	r1, r8
 23f5f3a:	4620      	mov	r0, r4
 23f5f3c:	f7ff fa1b 	bl	23f5376 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23f5f40:	792b      	ldrb	r3, [r5, #4]
 23f5f42:	079b      	lsls	r3, r3, #30
 23f5f44:	d508      	bpl.n	23f5f58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23f5f46:	213a      	movs	r1, #58	; 0x3a
 23f5f48:	4620      	mov	r0, r4
 23f5f4a:	f7ff fa23 	bl	23f5394 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23f5f4e:	4620      	mov	r0, r4
 23f5f50:	68ea      	ldr	r2, [r5, #12]
 23f5f52:	4940      	ldr	r1, [pc, #256]	; (23f6054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23f5f54:	f7ff faa3 	bl	23f549e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23f5f58:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23f5f5a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23f5f5c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23f5f60:	4620      	mov	r0, r4
            write(", ", 2);
 23f5f62:	f04f 0202 	mov.w	r2, #2
 23f5f66:	68db      	ldr	r3, [r3, #12]
 23f5f68:	bf14      	ite	ne
 23f5f6a:	493b      	ldrne	r1, [pc, #236]	; (23f6058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23f5f6c:	493b      	ldreq	r1, [pc, #236]	; (23f605c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f5f6e:	4798      	blx	r3
    if (attr.has_function) {
 23f5f70:	792b      	ldrb	r3, [r5, #4]
 23f5f72:	0758      	lsls	r0, r3, #29
 23f5f74:	d51d      	bpl.n	23f5fb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f5f76:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f5f78:	460b      	mov	r3, r1
 23f5f7a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23f5f7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f5f80:	b160      	cbz	r0, 23f5f9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23f5f82:	2820      	cmp	r0, #32
 23f5f84:	d108      	bne.n	23f5f98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23f5f86:	4619      	mov	r1, r3
 23f5f88:	e7f7      	b.n	23f5f7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23f5f8a:	4835      	ldr	r0, [pc, #212]	; (23f6060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23f5f8c:	f7fe fca3 	bl	23f48d6 <_ZN5spark12NetworkClass9listeningEv>
 23f5f90:	2800      	cmp	r0, #0
 23f5f92:	d0ac      	beq.n	23f5eee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23f5f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23f5f98:	2828      	cmp	r0, #40	; 0x28
 23f5f9a:	d1ee      	bne.n	23f5f7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23f5f9c:	6823      	ldr	r3, [r4, #0]
 23f5f9e:	1a52      	subs	r2, r2, r1
 23f5fa0:	4620      	mov	r0, r4
 23f5fa2:	68db      	ldr	r3, [r3, #12]
 23f5fa4:	4798      	blx	r3
        write("(): ", 4);
 23f5fa6:	6823      	ldr	r3, [r4, #0]
 23f5fa8:	2204      	movs	r2, #4
 23f5faa:	4620      	mov	r0, r4
 23f5fac:	68db      	ldr	r3, [r3, #12]
 23f5fae:	492d      	ldr	r1, [pc, #180]	; (23f6064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23f5fb0:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23f5fb2:	2100      	movs	r1, #0
 23f5fb4:	4638      	mov	r0, r7
 23f5fb6:	f7fe fab3 	bl	23f4520 <log_level_name>
 23f5fba:	4601      	mov	r1, r0
    write(s);
 23f5fbc:	4620      	mov	r0, r4
 23f5fbe:	f7ff f9da 	bl	23f5376 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23f5fc2:	6823      	ldr	r3, [r4, #0]
 23f5fc4:	2202      	movs	r2, #2
 23f5fc6:	4620      	mov	r0, r4
 23f5fc8:	68db      	ldr	r3, [r3, #12]
 23f5fca:	4924      	ldr	r1, [pc, #144]	; (23f605c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f5fcc:	4798      	blx	r3
    if (msg) {
 23f5fce:	b11e      	cbz	r6, 23f5fd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23f5fd0:	4631      	mov	r1, r6
 23f5fd2:	4620      	mov	r0, r4
 23f5fd4:	f7ff f9cf 	bl	23f5376 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23f5fd8:	792b      	ldrb	r3, [r5, #4]
 23f5fda:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f5fde:	d02c      	beq.n	23f603a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23f5fe0:	6823      	ldr	r3, [r4, #0]
 23f5fe2:	4921      	ldr	r1, [pc, #132]	; (23f6068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23f5fe4:	68db      	ldr	r3, [r3, #12]
 23f5fe6:	2202      	movs	r2, #2
 23f5fe8:	4620      	mov	r0, r4
 23f5fea:	4798      	blx	r3
        if (attr.has_code) {
 23f5fec:	792b      	ldrb	r3, [r5, #4]
 23f5fee:	06d9      	lsls	r1, r3, #27
 23f5ff0:	d50a      	bpl.n	23f6008 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23f5ff2:	6823      	ldr	r3, [r4, #0]
 23f5ff4:	2207      	movs	r2, #7
 23f5ff6:	4620      	mov	r0, r4
 23f5ff8:	491c      	ldr	r1, [pc, #112]	; (23f606c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23f5ffa:	68db      	ldr	r3, [r3, #12]
 23f5ffc:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23f5ffe:	4620      	mov	r0, r4
 23f6000:	69aa      	ldr	r2, [r5, #24]
 23f6002:	491b      	ldr	r1, [pc, #108]	; (23f6070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23f6004:	f7ff fa4b 	bl	23f549e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23f6008:	792b      	ldrb	r3, [r5, #4]
 23f600a:	069a      	lsls	r2, r3, #26
 23f600c:	d511      	bpl.n	23f6032 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23f600e:	06db      	lsls	r3, r3, #27
 23f6010:	d505      	bpl.n	23f601e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23f6012:	6823      	ldr	r3, [r4, #0]
 23f6014:	2202      	movs	r2, #2
 23f6016:	4620      	mov	r0, r4
 23f6018:	68db      	ldr	r3, [r3, #12]
 23f601a:	490f      	ldr	r1, [pc, #60]	; (23f6058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23f601c:	4798      	blx	r3
            write("details = ", 10);
 23f601e:	6823      	ldr	r3, [r4, #0]
 23f6020:	4620      	mov	r0, r4
 23f6022:	4914      	ldr	r1, [pc, #80]	; (23f6074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23f6024:	220a      	movs	r2, #10
 23f6026:	68db      	ldr	r3, [r3, #12]
 23f6028:	4798      	blx	r3
            write(attr.details);
 23f602a:	4620      	mov	r0, r4
 23f602c:	69e9      	ldr	r1, [r5, #28]
 23f602e:	f7ff f9a2 	bl	23f5376 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23f6032:	215d      	movs	r1, #93	; 0x5d
 23f6034:	4620      	mov	r0, r4
 23f6036:	f7ff f9ad 	bl	23f5394 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23f603a:	6823      	ldr	r3, [r4, #0]
 23f603c:	4620      	mov	r0, r4
}
 23f603e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23f6042:	2202      	movs	r2, #2
 23f6044:	68db      	ldr	r3, [r3, #12]
 23f6046:	490c      	ldr	r1, [pc, #48]	; (23f6078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23f6048:	4718      	bx	r3
 23f604a:	bf00      	nop
 23f604c:	023ff6f5 	.word	0x023ff6f5
 23f6050:	023ff6fc 	.word	0x023ff6fc
 23f6054:	023fc2ee 	.word	0x023fc2ee
 23f6058:	023ff6ff 	.word	0x023ff6ff
 23f605c:	023ff704 	.word	0x023ff704
 23f6060:	1007ae68 	.word	0x1007ae68
 23f6064:	023ff702 	.word	0x023ff702
 23f6068:	023ff707 	.word	0x023ff707
 23f606c:	023ff70a 	.word	0x023ff70a
 23f6070:	023ff712 	.word	0x023ff712
 23f6074:	023ff715 	.word	0x023ff715
 23f6078:	023fc417 	.word	0x023fc417

023f607c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f6080:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23f6082:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f6084:	460d      	mov	r5, r1
 23f6086:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23f6088:	f7fe ff96 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f608c:	4287      	cmp	r7, r0
 23f608e:	d007      	beq.n	23f60a0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23f6090:	6a20      	ldr	r0, [r4, #32]
 23f6092:	4632      	mov	r2, r6
 23f6094:	6803      	ldr	r3, [r0, #0]
 23f6096:	4629      	mov	r1, r5
}
 23f6098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23f609c:	68db      	ldr	r3, [r3, #12]
 23f609e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23f60a0:	4803      	ldr	r0, [pc, #12]	; (23f60b0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23f60a2:	f7fe fc18 	bl	23f48d6 <_ZN5spark12NetworkClass9listeningEv>
 23f60a6:	2800      	cmp	r0, #0
 23f60a8:	d0f2      	beq.n	23f6090 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23f60aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f60ae:	bf00      	nop
 23f60b0:	1007ae68 	.word	0x1007ae68

023f60b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f60b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f60b8:	b085      	sub	sp, #20
    return stream_;
 23f60ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23f60be:	4605      	mov	r5, r0
 23f60c0:	460f      	mov	r7, r1
 23f60c2:	4690      	mov	r8, r2
 23f60c4:	461e      	mov	r6, r3
 23f60c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23f60c8:	f7fe ff76 	bl	23f4fb8 <_Z16_fetch_usbserialv>
 23f60cc:	4581      	cmp	r9, r0
 23f60ce:	d105      	bne.n	23f60dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23f60d0:	4849      	ldr	r0, [pc, #292]	; (23f61f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23f60d2:	f7fe fc00 	bl	23f48d6 <_ZN5spark12NetworkClass9listeningEv>
 23f60d6:	2800      	cmp	r0, #0
 23f60d8:	f040 808a 	bne.w	23f61f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23f60dc:	f04f 0900 	mov.w	r9, #0
 23f60e0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23f60e2:	4a46      	ldr	r2, [pc, #280]	; (23f61fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23f60e4:	a801      	add	r0, sp, #4
 23f60e6:	9201      	str	r2, [sp, #4]
 23f60e8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23f60ea:	f88d 9008 	strb.w	r9, [sp, #8]
 23f60ee:	f7fe fe48 	bl	23f4d82 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23f60f2:	4649      	mov	r1, r9
 23f60f4:	4640      	mov	r0, r8
 23f60f6:	f7fe fa13 	bl	23f4520 <log_level_name>
 23f60fa:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23f60fc:	4940      	ldr	r1, [pc, #256]	; (23f6200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23f60fe:	2201      	movs	r2, #1
 23f6100:	a801      	add	r0, sp, #4
 23f6102:	f7fe fecd 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f6106:	4641      	mov	r1, r8
 23f6108:	f7ff f927 	bl	23f535a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23f610c:	b13f      	cbz	r7, 23f611e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23f610e:	493d      	ldr	r1, [pc, #244]	; (23f6204 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23f6110:	2201      	movs	r2, #1
 23f6112:	a801      	add	r0, sp, #4
 23f6114:	f7fe fec4 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f6118:	4639      	mov	r1, r7
 23f611a:	f7ff f91e 	bl	23f535a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23f611e:	b13e      	cbz	r6, 23f6130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23f6120:	4939      	ldr	r1, [pc, #228]	; (23f6208 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23f6122:	2201      	movs	r2, #1
 23f6124:	a801      	add	r0, sp, #4
 23f6126:	f7fe febb 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f612a:	4631      	mov	r1, r6
 23f612c:	f7ff f915 	bl	23f535a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23f6130:	7923      	ldrb	r3, [r4, #4]
 23f6132:	07df      	lsls	r7, r3, #31
 23f6134:	d50e      	bpl.n	23f6154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23f6136:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23f6138:	212f      	movs	r1, #47	; 0x2f
 23f613a:	4630      	mov	r0, r6
 23f613c:	f005 f847 	bl	23fb1ce <strrchr>
    if (s1) {
 23f6140:	b100      	cbz	r0, 23f6144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23f6142:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23f6144:	4931      	ldr	r1, [pc, #196]	; (23f620c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23f6146:	2201      	movs	r2, #1
 23f6148:	a801      	add	r0, sp, #4
 23f614a:	f7fe fea9 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f614e:	4631      	mov	r1, r6
 23f6150:	f7ff f903 	bl	23f535a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23f6154:	7923      	ldrb	r3, [r4, #4]
 23f6156:	079e      	lsls	r6, r3, #30
 23f6158:	d507      	bpl.n	23f616a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23f615a:	492d      	ldr	r1, [pc, #180]	; (23f6210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23f615c:	2202      	movs	r2, #2
 23f615e:	a801      	add	r0, sp, #4
 23f6160:	f7fe fe9e 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f6164:	68e1      	ldr	r1, [r4, #12]
 23f6166:	f7fe fe19 	bl	23f4d9c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23f616a:	7923      	ldrb	r3, [r4, #4]
 23f616c:	0758      	lsls	r0, r3, #29
 23f616e:	d514      	bpl.n	23f619a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f6170:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f6172:	4633      	mov	r3, r6
 23f6174:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23f6176:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f617a:	b12a      	cbz	r2, 23f6188 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23f617c:	2a20      	cmp	r2, #32
 23f617e:	d101      	bne.n	23f6184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23f6180:	461e      	mov	r6, r3
 23f6182:	e7f7      	b.n	23f6174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23f6184:	2a28      	cmp	r2, #40	; 0x28
 23f6186:	d1f5      	bne.n	23f6174 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23f6188:	2202      	movs	r2, #2
 23f618a:	4922      	ldr	r1, [pc, #136]	; (23f6214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23f618c:	a801      	add	r0, sp, #4
 23f618e:	f7fe fe87 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f6192:	4631      	mov	r1, r6
 23f6194:	1bba      	subs	r2, r7, r6
 23f6196:	f7fe fe93 	bl	23f4ec0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23f619a:	7923      	ldrb	r3, [r4, #4]
 23f619c:	0719      	lsls	r1, r3, #28
 23f619e:	d507      	bpl.n	23f61b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23f61a0:	491d      	ldr	r1, [pc, #116]	; (23f6218 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23f61a2:	2201      	movs	r2, #1
 23f61a4:	a801      	add	r0, sp, #4
 23f61a6:	f7fe fe7b 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f61aa:	6961      	ldr	r1, [r4, #20]
 23f61ac:	f7fe fe08 	bl	23f4dc0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23f61b0:	7923      	ldrb	r3, [r4, #4]
 23f61b2:	06da      	lsls	r2, r3, #27
 23f61b4:	d508      	bpl.n	23f61c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23f61b6:	2204      	movs	r2, #4
 23f61b8:	4918      	ldr	r1, [pc, #96]	; (23f621c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23f61ba:	eb0d 0002 	add.w	r0, sp, r2
 23f61be:	f7fe fe6f 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f61c2:	69a1      	ldr	r1, [r4, #24]
 23f61c4:	f7fe fdea 	bl	23f4d9c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23f61c8:	7923      	ldrb	r3, [r4, #4]
 23f61ca:	069b      	lsls	r3, r3, #26
 23f61cc:	d507      	bpl.n	23f61de <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23f61ce:	4914      	ldr	r1, [pc, #80]	; (23f6220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23f61d0:	2206      	movs	r2, #6
 23f61d2:	a801      	add	r0, sp, #4
 23f61d4:	f7fe fe64 	bl	23f4ea0 <_ZN5spark10JSONWriter4nameEPKcj>
 23f61d8:	69e1      	ldr	r1, [r4, #28]
 23f61da:	f7ff f8be 	bl	23f535a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23f61de:	a801      	add	r0, sp, #4
 23f61e0:	f7fe fdb9 	bl	23f4d56 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23f61e4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23f61e6:	2202      	movs	r2, #2
 23f61e8:	6803      	ldr	r3, [r0, #0]
 23f61ea:	490e      	ldr	r1, [pc, #56]	; (23f6224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23f61ec:	68db      	ldr	r3, [r3, #12]
 23f61ee:	4798      	blx	r3
}
 23f61f0:	b005      	add	sp, #20
 23f61f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f61f6:	bf00      	nop
 23f61f8:	1007ae68 	.word	0x1007ae68
 23f61fc:	023ff73c 	.word	0x023ff73c
 23f6200:	023ff6d2 	.word	0x023ff6d2
 23f6204:	023fc60a 	.word	0x023fc60a
 23f6208:	023ffe62 	.word	0x023ffe62
 23f620c:	023ff7b2 	.word	0x023ff7b2
 23f6210:	023ff720 	.word	0x023ff720
 23f6214:	023ff723 	.word	0x023ff723
 23f6218:	023ff2b9 	.word	0x023ff2b9
 23f621c:	023ff726 	.word	0x023ff726
 23f6220:	023ff72b 	.word	0x023ff72b
 23f6224:	023fc417 	.word	0x023fc417

023f6228 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f6228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f622a:	4606      	mov	r6, r0
 23f622c:	460d      	mov	r5, r1
  size_t n = 0;
 23f622e:	2400      	movs	r4, #0
 23f6230:	188f      	adds	r7, r1, r2
  while (size--) {
 23f6232:	42bd      	cmp	r5, r7
 23f6234:	d00c      	beq.n	23f6250 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f6236:	6833      	ldr	r3, [r6, #0]
 23f6238:	4630      	mov	r0, r6
 23f623a:	689b      	ldr	r3, [r3, #8]
 23f623c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f6240:	4798      	blx	r3
     if (chunk>=0)
 23f6242:	1e03      	subs	r3, r0, #0
 23f6244:	db01      	blt.n	23f624a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f6246:	441c      	add	r4, r3
  while (size--) {
 23f6248:	e7f3      	b.n	23f6232 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f624a:	2c00      	cmp	r4, #0
 23f624c:	bf08      	it	eq
 23f624e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f6250:	4620      	mov	r0, r4
 23f6252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f6254 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f6254:	b513      	push	{r0, r1, r4, lr}
 23f6256:	4604      	mov	r4, r0
    }
 23f6258:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f625a:	b159      	cbz	r1, 23f6274 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f625c:	9101      	str	r1, [sp, #4]
 23f625e:	f7f4 f943 	bl	23ea4e8 <strlen>
 23f6262:	4602      	mov	r2, r0
 23f6264:	4620      	mov	r0, r4
 23f6266:	6823      	ldr	r3, [r4, #0]
 23f6268:	9901      	ldr	r1, [sp, #4]
 23f626a:	68db      	ldr	r3, [r3, #12]
    }
 23f626c:	b002      	add	sp, #8
 23f626e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f6272:	4718      	bx	r3
    }
 23f6274:	b002      	add	sp, #8
 23f6276:	bd10      	pop	{r4, pc}

023f6278 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23f6278:	6803      	ldr	r3, [r0, #0]
 23f627a:	689b      	ldr	r3, [r3, #8]
 23f627c:	4718      	bx	r3

023f627e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f627e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f6280:	2a01      	cmp	r2, #1
 23f6282:	bf98      	it	ls
 23f6284:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f6286:	b530      	push	{r4, r5, lr}
 23f6288:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f628a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f628e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f6290:	460d      	mov	r5, r1
 23f6292:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f6296:	fb01 5312 	mls	r3, r1, r2, r5
 23f629a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f629e:	2b09      	cmp	r3, #9
 23f62a0:	bf94      	ite	ls
 23f62a2:	3330      	addls	r3, #48	; 0x30
 23f62a4:	3337      	addhi	r3, #55	; 0x37
 23f62a6:	b2db      	uxtb	r3, r3
  } while(n);
 23f62a8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f62aa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f62ae:	d9ef      	bls.n	23f6290 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f62b0:	4621      	mov	r1, r4
 23f62b2:	f7ff ffcf 	bl	23f6254 <_ZN5Print5writeEPKc>
}
 23f62b6:	b00b      	add	sp, #44	; 0x2c
 23f62b8:	bd30      	pop	{r4, r5, pc}
	...

023f62bc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23f62bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f62c0:	ec55 4b10 	vmov	r4, r5, d0
 23f62c4:	4606      	mov	r6, r0
 23f62c6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23f62c8:	ee10 2a10 	vmov	r2, s0
 23f62cc:	462b      	mov	r3, r5
 23f62ce:	ee10 0a10 	vmov	r0, s0
 23f62d2:	4629      	mov	r1, r5
 23f62d4:	f7f3 fe52 	bl	23e9f7c <__aeabi_dcmpun>
 23f62d8:	b140      	cbz	r0, 23f62ec <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23f62da:	4953      	ldr	r1, [pc, #332]	; (23f6428 <_ZN5Print10printFloatEdh+0x16c>)
 23f62dc:	4630      	mov	r0, r6
 23f62de:	f7ff ffb9 	bl	23f6254 <_ZN5Print5writeEPKc>
 23f62e2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23f62e4:	4650      	mov	r0, sl
 23f62e6:	b003      	add	sp, #12
 23f62e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  { return __builtin_isinf(__x); }
 23f62ec:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23f62f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f62f4:	4620      	mov	r0, r4
 23f62f6:	4649      	mov	r1, r9
 23f62f8:	4b4c      	ldr	r3, [pc, #304]	; (23f642c <_ZN5Print10printFloatEdh+0x170>)
 23f62fa:	f7f3 fe3f 	bl	23e9f7c <__aeabi_dcmpun>
 23f62fe:	b948      	cbnz	r0, 23f6314 <_ZN5Print10printFloatEdh+0x58>
 23f6300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f6304:	4620      	mov	r0, r4
 23f6306:	4649      	mov	r1, r9
 23f6308:	4b48      	ldr	r3, [pc, #288]	; (23f642c <_ZN5Print10printFloatEdh+0x170>)
 23f630a:	f7f3 fe19 	bl	23e9f40 <__aeabi_dcmple>
 23f630e:	b908      	cbnz	r0, 23f6314 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23f6310:	4947      	ldr	r1, [pc, #284]	; (23f6430 <_ZN5Print10printFloatEdh+0x174>)
 23f6312:	e7e3      	b.n	23f62dc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23f6314:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f6318:	4620      	mov	r0, r4
 23f631a:	4629      	mov	r1, r5
 23f631c:	4b45      	ldr	r3, [pc, #276]	; (23f6434 <_ZN5Print10printFloatEdh+0x178>)
 23f631e:	f7f3 fe23 	bl	23e9f68 <__aeabi_dcmpgt>
 23f6322:	b108      	cbz	r0, 23f6328 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23f6324:	4944      	ldr	r1, [pc, #272]	; (23f6438 <_ZN5Print10printFloatEdh+0x17c>)
 23f6326:	e7d9      	b.n	23f62dc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23f6328:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f632c:	4620      	mov	r0, r4
 23f632e:	4629      	mov	r1, r5
 23f6330:	4b42      	ldr	r3, [pc, #264]	; (23f643c <_ZN5Print10printFloatEdh+0x180>)
 23f6332:	f7f3 fdfb 	bl	23e9f2c <__aeabi_dcmplt>
 23f6336:	2800      	cmp	r0, #0
 23f6338:	d1f4      	bne.n	23f6324 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23f633a:	2200      	movs	r2, #0
 23f633c:	2300      	movs	r3, #0
 23f633e:	4620      	mov	r0, r4
 23f6340:	4629      	mov	r1, r5
 23f6342:	f7f3 fdf3 	bl	23e9f2c <__aeabi_dcmplt>
 23f6346:	b1d0      	cbz	r0, 23f637e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23f6348:	212d      	movs	r1, #45	; 0x2d
 23f634a:	4630      	mov	r0, r6
 23f634c:	f7ff ff94 	bl	23f6278 <_ZN5Print5printEc>
     number = -number;
 23f6350:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23f6354:	4682      	mov	sl, r0
     number = -number;
 23f6356:	461d      	mov	r5, r3
  size_t n = 0;
 23f6358:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23f635c:	2000      	movs	r0, #0
    rounding /= 10.0;
 23f635e:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23f6362:	4937      	ldr	r1, [pc, #220]	; (23f6440 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23f6364:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23f6448 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23f6368:	fa5f f38b 	uxtb.w	r3, fp
 23f636c:	429f      	cmp	r7, r3
 23f636e:	d908      	bls.n	23f6382 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23f6370:	4642      	mov	r2, r8
 23f6372:	464b      	mov	r3, r9
 23f6374:	f7f3 fc92 	bl	23e9c9c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23f6378:	f10b 0b01 	add.w	fp, fp, #1
 23f637c:	e7f4      	b.n	23f6368 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23f637e:	4682      	mov	sl, r0
 23f6380:	e7ea      	b.n	23f6358 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23f6382:	4622      	mov	r2, r4
 23f6384:	462b      	mov	r3, r5
 23f6386:	f7f3 f9a9 	bl	23e96dc <__adddf3>
 23f638a:	460d      	mov	r5, r1
 23f638c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23f638e:	f7f3 fe33 	bl	23e9ff8 <__aeabi_d2uiz>
 23f6392:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23f6394:	f7f3 fade 	bl	23e9954 <__aeabi_ui2d>
 23f6398:	4602      	mov	r2, r0
 23f639a:	460b      	mov	r3, r1
 23f639c:	4620      	mov	r0, r4
 23f639e:	4629      	mov	r1, r5
 23f63a0:	f7f3 f99a 	bl	23e96d8 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f63a4:	220a      	movs	r2, #10
 23f63a6:	4604      	mov	r4, r0
 23f63a8:	460d      	mov	r5, r1
 23f63aa:	4630      	mov	r0, r6
 23f63ac:	4641      	mov	r1, r8
 23f63ae:	f7ff ff66 	bl	23f627e <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23f63b2:	4482      	add	sl, r0
  if (digits > 0) {
 23f63b4:	2f00      	cmp	r7, #0
 23f63b6:	d095      	beq.n	23f62e4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23f63b8:	4630      	mov	r0, r6
 23f63ba:	4922      	ldr	r1, [pc, #136]	; (23f6444 <_ZN5Print10printFloatEdh+0x188>)
 23f63bc:	f7ff ff4a 	bl	23f6254 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23f63c0:	f04f 0800 	mov.w	r8, #0
 23f63c4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23f6448 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23f63c8:	4482      	add	sl, r0
  while (digits-- > 0)
 23f63ca:	2f00      	cmp	r7, #0
 23f63cc:	d08a      	beq.n	23f62e4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23f63ce:	4642      	mov	r2, r8
 23f63d0:	464b      	mov	r3, r9
 23f63d2:	4620      	mov	r0, r4
 23f63d4:	4629      	mov	r1, r5
 23f63d6:	f7f3 fb37 	bl	23e9a48 <__aeabi_dmul>
 23f63da:	4604      	mov	r4, r0
 23f63dc:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23f63de:	f7f3 fde3 	bl	23e9fa8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23f63e2:	f1b0 0b00 	subs.w	fp, r0, #0
 23f63e6:	da1c      	bge.n	23f6422 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23f63e8:	212d      	movs	r1, #45	; 0x2d
 23f63ea:	4630      	mov	r0, r6
 23f63ec:	f7ff ff44 	bl	23f6278 <_ZN5Print5printEc>
 23f63f0:	4603      	mov	r3, r0
            val = -n;
 23f63f2:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23f63f6:	220a      	movs	r2, #10
 23f63f8:	4630      	mov	r0, r6
 23f63fa:	9301      	str	r3, [sp, #4]
 23f63fc:	f7ff ff3f 	bl	23f627e <_ZN5Print11printNumberEmh>
 23f6400:	9b01      	ldr	r3, [sp, #4]
 23f6402:	3f01      	subs	r7, #1
 23f6404:	4418      	add	r0, r3
    n += print(toPrint);
 23f6406:	4482      	add	sl, r0
    remainder -= toPrint;
 23f6408:	4658      	mov	r0, fp
 23f640a:	f7f3 fab3 	bl	23e9974 <__aeabi_i2d>
 23f640e:	4602      	mov	r2, r0
 23f6410:	460b      	mov	r3, r1
 23f6412:	4620      	mov	r0, r4
 23f6414:	4629      	mov	r1, r5
 23f6416:	f7f3 f95f 	bl	23e96d8 <__aeabi_dsub>
 23f641a:	b2ff      	uxtb	r7, r7
 23f641c:	4604      	mov	r4, r0
 23f641e:	460d      	mov	r5, r1
  while (digits-- > 0)
 23f6420:	e7d3      	b.n	23f63ca <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23f6422:	4659      	mov	r1, fp
        size_t t = 0;
 23f6424:	2300      	movs	r3, #0
 23f6426:	e7e6      	b.n	23f63f6 <_ZN5Print10printFloatEdh+0x13a>
 23f6428:	023ff7ac 	.word	0x023ff7ac
 23f642c:	7fefffff 	.word	0x7fefffff
 23f6430:	023ff7b0 	.word	0x023ff7b0
 23f6434:	41efffff 	.word	0x41efffff
 23f6438:	023ff7b4 	.word	0x023ff7b4
 23f643c:	c1efffff 	.word	0xc1efffff
 23f6440:	3fe00000 	.word	0x3fe00000
 23f6444:	023ff9b3 	.word	0x023ff9b3
 23f6448:	40240000 	.word	0x40240000

023f644c <_ZN5Print5printEfi>:
{
 23f644c:	b538      	push	{r3, r4, r5, lr}
 23f644e:	4604      	mov	r4, r0
 23f6450:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23f6454:	b2cd      	uxtb	r5, r1
 23f6456:	f7f3 fa9f 	bl	23e9998 <__aeabi_f2d>
 23f645a:	ec41 0b10 	vmov	d0, r0, r1
 23f645e:	4629      	mov	r1, r5
 23f6460:	4620      	mov	r0, r4
}
 23f6462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23f6466:	f7ff bf29 	b.w	23f62bc <_ZN5Print10printFloatEdh>

023f646a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23f646a:	4770      	bx	lr

023f646c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23f646c:	4770      	bx	lr

023f646e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23f646e:	4770      	bx	lr

023f6470 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23f6470:	4770      	bx	lr
	...

023f6474 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23f6474:	4b06      	ldr	r3, [pc, #24]	; (23f6490 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23f6476:	b510      	push	{r4, lr}
	    ||
 23f6478:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23f647a:	f100 040c 	add.w	r4, r0, #12
 23f647e:	d005      	beq.n	23f648c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23f6480:	4608      	mov	r0, r1
 23f6482:	f002 fee7 	bl	23f9254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23f6486:	2800      	cmp	r0, #0
 23f6488:	bf08      	it	eq
 23f648a:	2400      	moveq	r4, #0
      }
 23f648c:	4620      	mov	r0, r4
 23f648e:	bd10      	pop	{r4, pc}
 23f6490:	023ff624 	.word	0x023ff624

023f6494 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23f6494:	4b06      	ldr	r3, [pc, #24]	; (23f64b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23f6496:	b510      	push	{r4, lr}
	    ||
 23f6498:	4299      	cmp	r1, r3
 23f649a:	f100 040c 	add.w	r4, r0, #12
 23f649e:	d005      	beq.n	23f64ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23f64a0:	4608      	mov	r0, r1
 23f64a2:	f002 fed7 	bl	23f9254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23f64a6:	2800      	cmp	r0, #0
 23f64a8:	bf08      	it	eq
 23f64aa:	2400      	moveq	r4, #0
      }
 23f64ac:	4620      	mov	r0, r4
 23f64ae:	bd10      	pop	{r4, pc}
 23f64b0:	023ff624 	.word	0x023ff624

023f64b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23f64b4:	4b06      	ldr	r3, [pc, #24]	; (23f64d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23f64b6:	b510      	push	{r4, lr}
	    ||
 23f64b8:	4299      	cmp	r1, r3
 23f64ba:	f100 040c 	add.w	r4, r0, #12
 23f64be:	d005      	beq.n	23f64cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23f64c0:	4608      	mov	r0, r1
 23f64c2:	f002 fec7 	bl	23f9254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23f64c6:	2800      	cmp	r0, #0
 23f64c8:	bf08      	it	eq
 23f64ca:	2400      	moveq	r4, #0
      }
 23f64cc:	4620      	mov	r0, r4
 23f64ce:	bd10      	pop	{r4, pc}
 23f64d0:	023ff624 	.word	0x023ff624

023f64d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23f64d4:	b510      	push	{r4, lr}
 23f64d6:	4604      	mov	r4, r0
 23f64d8:	2168      	movs	r1, #104	; 0x68
 23f64da:	f7f4 f830 	bl	23ea53e <_ZdlPvj>
 23f64de:	4620      	mov	r0, r4
 23f64e0:	bd10      	pop	{r4, pc}

023f64e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23f64e2:	b510      	push	{r4, lr}
 23f64e4:	4604      	mov	r4, r0
 23f64e6:	2128      	movs	r1, #40	; 0x28
 23f64e8:	f7f4 f829 	bl	23ea53e <_ZdlPvj>
 23f64ec:	4620      	mov	r0, r4
 23f64ee:	bd10      	pop	{r4, pc}

023f64f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23f64f0:	b510      	push	{r4, lr}
 23f64f2:	4604      	mov	r4, r0
 23f64f4:	2130      	movs	r1, #48	; 0x30
 23f64f6:	f7f4 f822 	bl	23ea53e <_ZdlPvj>
 23f64fa:	4620      	mov	r0, r4
 23f64fc:	bd10      	pop	{r4, pc}

023f64fe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23f64fe:	2168      	movs	r1, #104	; 0x68
 23f6500:	f7f4 b81d 	b.w	23ea53e <_ZdlPvj>

023f6504 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23f6504:	2128      	movs	r1, #40	; 0x28
 23f6506:	f7f4 b81a 	b.w	23ea53e <_ZdlPvj>

023f650a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23f650a:	2130      	movs	r1, #48	; 0x30
 23f650c:	f7f4 b817 	b.w	23ea53e <_ZdlPvj>

023f6510 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23f6510:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23f6512:	2500      	movs	r5, #0
 23f6514:	1cec      	adds	r4, r5, #3
 23f6516:	428c      	cmp	r4, r1
 23f6518:	d80d      	bhi.n	23f6536 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23f651a:	1c6e      	adds	r6, r5, #1
 23f651c:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23f651e:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23f6520:	4297      	cmp	r7, r2
 23f6522:	d105      	bne.n	23f6530 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23f6524:	4426      	add	r6, r4
 23f6526:	42b1      	cmp	r1, r6
 23f6528:	d305      	bcc.n	23f6536 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23f652a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23f652c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23f652e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23f6530:	3401      	adds	r4, #1
 23f6532:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23f6534:	e7ee      	b.n	23f6514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23f6536:	2000      	movs	r0, #0
 23f6538:	e7f9      	b.n	23f652e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023f653c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23f653c:	200a      	movs	r0, #10
 23f653e:	4a02      	ldr	r2, [pc, #8]	; (23f6548 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23f6540:	4902      	ldr	r1, [pc, #8]	; (23f654c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23f6542:	f7fd bfd1 	b.w	23f44e8 <panic_>
 23f6546:	bf00      	nop
 23f6548:	023f4441 	.word	0x023f4441
 23f654c:	023ff7b8 	.word	0x023ff7b8

023f6550 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23f6550:	b510      	push	{r4, lr}
	if (_M_manager)
 23f6552:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23f6554:	4604      	mov	r4, r0
	if (_M_manager)
 23f6556:	b12b      	cbz	r3, 23f6564 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23f6558:	2203      	movs	r2, #3
 23f655a:	4601      	mov	r1, r0
 23f655c:	4798      	blx	r3
	    _M_manager = nullptr;
 23f655e:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23f6560:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23f6564:	bd10      	pop	{r4, pc}

023f6566 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23f6566:	b510      	push	{r4, lr}
	if (_M_manager)
 23f6568:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23f656a:	4604      	mov	r4, r0
	if (_M_manager)
 23f656c:	b12b      	cbz	r3, 23f657a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23f656e:	2203      	movs	r2, #3
 23f6570:	4601      	mov	r1, r0
 23f6572:	4798      	blx	r3
	    _M_manager = nullptr;
 23f6574:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23f6576:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23f657a:	bd10      	pop	{r4, pc}

023f657c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
 23f657c:	2300      	movs	r3, #0
 23f657e:	2220      	movs	r2, #32
    int discoverAllServices(BlePeerDevice& peer) {
 23f6580:	b510      	push	{r4, lr}
 23f6582:	4604      	mov	r4, r0
 23f6584:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
 23f6586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f658a:	4a08      	ldr	r2, [pc, #32]	; (23f65ac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
 23f658c:	2001      	movs	r0, #1
 23f658e:	9200      	str	r2, [sp, #0]
 23f6590:	4907      	ldr	r1, [pc, #28]	; (23f65b0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
 23f6592:	aa02      	add	r2, sp, #8
 23f6594:	f7fd ffb6 	bl	23f4504 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23f6598:	2300      	movs	r3, #0
 23f659a:	4622      	mov	r2, r4
 23f659c:	6820      	ldr	r0, [r4, #0]
 23f659e:	4905      	ldr	r1, [pc, #20]	; (23f65b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
 23f65a0:	8800      	ldrh	r0, [r0, #0]
    }
 23f65a2:	b00a      	add	sp, #40	; 0x28
 23f65a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23f65a8:	f7fd beb0 	b.w	23f430c <hal_ble_gatt_client_discover_all_services>
 23f65ac:	023ff7da 	.word	0x023ff7da
 23f65b0:	023ff7cf 	.word	0x023ff7cf
 23f65b4:	023f806d 	.word	0x023f806d

023f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
 23f65b8:	b510      	push	{r4, lr}
 23f65ba:	3801      	subs	r0, #1
 23f65bc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
 23f65c0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 23f65c4:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
 23f65c6:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23f65ca:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23f65cc:	bf88      	it	hi
 23f65ce:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
 23f65d2:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
 23f65d6:	7803      	ldrb	r3, [r0, #0]
 23f65d8:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
 23f65dc:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23f65e0:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23f65e2:	bf88      	it	hi
 23f65e4:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
 23f65e8:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
 23f65ea:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
 23f65ee:	d1e7      	bne.n	23f65c0 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
 23f65f0:	bd10      	pop	{r4, pc}

023f65f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f65f2:	b510      	push	{r4, lr}
 23f65f4:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f65f6:	3058      	adds	r0, #88	; 0x58
 23f65f8:	f7f7 fcba 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23f65fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23f6600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f6604:	f002 ba54 	b.w	23f8ab0 <_ZN6StringD1Ev>

023f6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23f6608:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23f660a:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23f660c:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23f660e:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23f6610:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23f6612:	d008      	beq.n	23f6626 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23f6614:	b111      	cbz	r1, 23f661c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23f6616:	684b      	ldr	r3, [r1, #4]
 23f6618:	3301      	adds	r3, #1
 23f661a:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23f661c:	6828      	ldr	r0, [r5, #0]
 23f661e:	b108      	cbz	r0, 23f6624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23f6620:	f7fe fac0 	bl	23f4ba4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f6624:	602c      	str	r4, [r5, #0]
      }
 23f6626:	bd38      	pop	{r3, r4, r5, pc}

023f6628 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23f6628:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f662c:	b2da      	uxtb	r2, r3
 23f662e:	2a09      	cmp	r2, #9
 23f6630:	d801      	bhi.n	23f6636 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23f6632:	4618      	mov	r0, r3
 23f6634:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23f6636:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23f663a:	2b05      	cmp	r3, #5
 23f663c:	d801      	bhi.n	23f6642 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23f663e:	3857      	subs	r0, #87	; 0x57
 23f6640:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23f6642:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23f6646:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23f6648:	bf94      	ite	ls
 23f664a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23f664c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23f6650:	4770      	bx	lr
	...

023f6654 <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23f6654:	2300      	movs	r3, #0
    WiringBleLock() :
 23f6656:	b510      	push	{r4, lr}
            locked_(false) {
 23f6658:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23f665a:	4b04      	ldr	r3, [pc, #16]	; (23f666c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23f665c:	4604      	mov	r4, r0
 23f665e:	6818      	ldr	r0, [r3, #0]
 23f6660:	f7fd fdf2 	bl	23f4248 <os_mutex_recursive_lock>
        locked_ = true;
 23f6664:	2301      	movs	r3, #1
    }
 23f6666:	4620      	mov	r0, r4
        locked_ = true;
 23f6668:	7023      	strb	r3, [r4, #0]
    }
 23f666a:	bd10      	pop	{r4, pc}
 23f666c:	1007aee8 	.word	0x1007aee8

023f6670 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23f6670:	b510      	push	{r4, lr}
        if (locked_) {
 23f6672:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23f6674:	4604      	mov	r4, r0
        if (locked_) {
 23f6676:	b11b      	cbz	r3, 23f6680 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23f6678:	4b02      	ldr	r3, [pc, #8]	; (23f6684 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23f667a:	6818      	ldr	r0, [r3, #0]
 23f667c:	f7fd fdf2 	bl	23f4264 <os_mutex_recursive_unlock>
    }
 23f6680:	4620      	mov	r0, r4
 23f6682:	bd10      	pop	{r4, pc}
 23f6684:	1007aee8 	.word	0x1007aee8

023f6688 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
 23f6688:	2905      	cmp	r1, #5
    return address_.addr[i];
 23f668a:	bf94      	ite	ls
 23f668c:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
 23f668e:	2000      	movhi	r0, #0
}
 23f6690:	4770      	bx	lr

023f6692 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23f6692:	b082      	sub	sp, #8
    address_ = addr;
 23f6694:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23f6696:	4603      	mov	r3, r0
    address_ = addr;
 23f6698:	6808      	ldr	r0, [r1, #0]
 23f669a:	6849      	ldr	r1, [r1, #4]
 23f669c:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23f669e:	466a      	mov	r2, sp
 23f66a0:	ca03      	ldmia	r2!, {r0, r1}
 23f66a2:	6018      	str	r0, [r3, #0]
}
 23f66a4:	4618      	mov	r0, r3
    address_ = addr.address_;
 23f66a6:	6059      	str	r1, [r3, #4]
}
 23f66a8:	b002      	add	sp, #8
 23f66aa:	4770      	bx	lr

023f66ac <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23f66ac:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23f66ae:	7982      	ldrb	r2, [r0, #6]
 23f66b0:	798b      	ldrb	r3, [r1, #6]
 23f66b2:	429a      	cmp	r2, r3
 23f66b4:	d106      	bne.n	23f66c4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23f66b6:	2206      	movs	r2, #6
 23f66b8:	f004 fccd 	bl	23fb056 <memcmp>
 23f66bc:	fab0 f080 	clz	r0, r0
 23f66c0:	0940      	lsrs	r0, r0, #5
}
 23f66c2:	bd08      	pop	{r3, pc}
    return false;
 23f66c4:	2000      	movs	r0, #0
 23f66c6:	e7fc      	b.n	23f66c2 <_ZNK8particle10BleAddresseqERKS0_+0x16>

023f66c8 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23f66c8:	b570      	push	{r4, r5, r6, lr}
 23f66ca:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23f66cc:	4b38      	ldr	r3, [pc, #224]	; (23f67b0 <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23f66ce:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23f66d0:	6818      	ldr	r0, [r3, #0]
 23f66d2:	889b      	ldrh	r3, [r3, #4]
 23f66d4:	9000      	str	r0, [sp, #0]
 23f66d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23f66da:	4b36      	ldr	r3, [pc, #216]	; (23f67b4 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23f66dc:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23f66de:	6818      	ldr	r0, [r3, #0]
 23f66e0:	889b      	ldrh	r3, [r3, #4]
 23f66e2:	9002      	str	r0, [sp, #8]
 23f66e4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23f66e8:	b97e      	cbnz	r6, 23f670a <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23f66ea:	2206      	movs	r2, #6
 23f66ec:	4669      	mov	r1, sp
 23f66ee:	4620      	mov	r0, r4
 23f66f0:	f004 fcb1 	bl	23fb056 <memcmp>
 23f66f4:	b138      	cbz	r0, 23f6706 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23f66f6:	2206      	movs	r2, #6
 23f66f8:	4620      	mov	r0, r4
 23f66fa:	a902      	add	r1, sp, #8
 23f66fc:	f004 fcab 	bl	23fb056 <memcmp>
 23f6700:	3800      	subs	r0, #0
 23f6702:	bf18      	it	ne
 23f6704:	2001      	movne	r0, #1
}
 23f6706:	b006      	add	sp, #24
 23f6708:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23f670a:	88a3      	ldrh	r3, [r4, #4]
 23f670c:	6820      	ldr	r0, [r4, #0]
 23f670e:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23f6712:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23f6716:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23f6718:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23f671a:	d124      	bne.n	23f6766 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23f671c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23f6720:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23f6722:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23f6726:	4669      	mov	r1, sp
 23f6728:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23f672a:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23f672e:	f004 fc92 	bl	23fb056 <memcmp>
 23f6732:	2800      	cmp	r0, #0
 23f6734:	d03a      	beq.n	23f67ac <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23f6736:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23f673a:	2206      	movs	r2, #6
 23f673c:	a902      	add	r1, sp, #8
 23f673e:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23f6740:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23f6744:	f004 fc87 	bl	23fb056 <memcmp>
 23f6748:	b380      	cbz	r0, 23f67ac <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23f674a:	7960      	ldrb	r0, [r4, #5]
 23f674c:	2e01      	cmp	r6, #1
 23f674e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23f6752:	d104      	bne.n	23f675e <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23f6754:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23f6756:	bf14      	ite	ne
 23f6758:	2000      	movne	r0, #0
 23f675a:	2001      	moveq	r0, #1
 23f675c:	e7d3      	b.n	23f6706 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23f675e:	fab0 f080 	clz	r0, r0
 23f6762:	0940      	lsrs	r0, r0, #5
 23f6764:	e7cf      	b.n	23f6706 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23f6766:	2e02      	cmp	r6, #2
 23f6768:	d11e      	bne.n	23f67a8 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23f676a:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23f676c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23f6770:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23f6774:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23f6778:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23f677c:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23f6780:	f004 fc69 	bl	23fb056 <memcmp>
 23f6784:	b190      	cbz	r0, 23f67ac <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23f6786:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23f678a:	2203      	movs	r2, #3
 23f678c:	f10d 010b 	add.w	r1, sp, #11
 23f6790:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23f6794:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23f6798:	f004 fc5d 	bl	23fb056 <memcmp>
 23f679c:	b130      	cbz	r0, 23f67ac <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23f679e:	7960      	ldrb	r0, [r4, #5]
 23f67a0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23f67a4:	2840      	cmp	r0, #64	; 0x40
 23f67a6:	e7d6      	b.n	23f6756 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23f67a8:	2001      	movs	r0, #1
 23f67aa:	e7ac      	b.n	23f6706 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23f67ac:	2000      	movs	r0, #0
 23f67ae:	e7aa      	b.n	23f6706 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23f67b0:	023fb530 	.word	0x023fb530
 23f67b4:	023ff7f6 	.word	0x023ff7f6

023f67b8 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23f67b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f67bc:	6003      	str	r3, [r0, #0]
 23f67be:	8083      	strh	r3, [r0, #4]
}
 23f67c0:	2000      	movs	r0, #0
 23f67c2:	4770      	bx	lr

023f67c4 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23f67c4:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23f67c6:	4602      	mov	r2, r0
 23f67c8:	b508      	push	{r3, lr}
        : address_{} {
 23f67ca:	6001      	str	r1, [r0, #0]
 23f67cc:	6041      	str	r1, [r0, #4]
    clear();
 23f67ce:	f7ff fff3 	bl	23f67b8 <_ZN8particle10BleAddress5clearEv>
}
 23f67d2:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23f67d4:	7191      	strb	r1, [r2, #6]
}
 23f67d6:	bd08      	pop	{r3, pc}

023f67d8 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23f67d8:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f67da:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23f67dc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23f67de:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f67e0:	4b04      	ldr	r3, [pc, #16]	; (23f67f4 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23f67e2:	f103 0110 	add.w	r1, r3, #16
 23f67e6:	f853 4b04 	ldr.w	r4, [r3], #4
 23f67ea:	428b      	cmp	r3, r1
 23f67ec:	f842 4b04 	str.w	r4, [r2], #4
 23f67f0:	d1f9      	bne.n	23f67e6 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23f67f2:	bd10      	pop	{r4, pc}
 23f67f4:	023fb536 	.word	0x023fb536

023f67f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23f67f8:	7c0b      	ldrb	r3, [r1, #16]
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
 23f67fa:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23f67fc:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 23f6800:	d10d      	bne.n	23f681e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f6802:	4602      	mov	r2, r0
        type_ = BleUuidType::SHORT;
 23f6804:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f6806:	4b0c      	ldr	r3, [pc, #48]	; (23f6838 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
 23f6808:	f103 0410 	add.w	r4, r3, #16
 23f680c:	f853 5b04 	ldr.w	r5, [r3], #4
 23f6810:	42a3      	cmp	r3, r4
 23f6812:	f842 5b04 	str.w	r5, [r2], #4
 23f6816:	d1f9      	bne.n	23f680c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
 23f6818:	880b      	ldrh	r3, [r1, #0]
 23f681a:	8183      	strh	r3, [r0, #12]
}
 23f681c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
 23f681e:	2301      	movs	r3, #1
 23f6820:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
 23f6822:	4603      	mov	r3, r0
 23f6824:	f101 0210 	add.w	r2, r1, #16
 23f6828:	f851 4b04 	ldr.w	r4, [r1], #4
 23f682c:	4291      	cmp	r1, r2
 23f682e:	f843 4b04 	str.w	r4, [r3], #4
 23f6832:	d1f9      	bne.n	23f6828 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
 23f6834:	e7f2      	b.n	23f681c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
 23f6836:	bf00      	nop
 23f6838:	023fb536 	.word	0x023fb536

023f683c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23f683c:	b510      	push	{r4, lr}
    if (uuid128) {
 23f683e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23f6840:	4604      	mov	r4, r0
    if (uuid128) {
 23f6842:	b1b1      	cbz	r1, 23f6872 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23f6844:	2a01      	cmp	r2, #1
 23f6846:	f101 0210 	add.w	r2, r1, #16
 23f684a:	d10a      	bne.n	23f6862 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23f684c:	4601      	mov	r1, r0
 23f684e:	f853 0b04 	ldr.w	r0, [r3], #4
 23f6852:	4293      	cmp	r3, r2
 23f6854:	f841 0b04 	str.w	r0, [r1], #4
 23f6858:	d1f9      	bne.n	23f684e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23f685a:	2301      	movs	r3, #1
 23f685c:	6123      	str	r3, [r4, #16]
}
 23f685e:	4620      	mov	r0, r4
 23f6860:	bd10      	pop	{r4, pc}
 23f6862:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23f6864:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23f6868:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23f686a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23f686e:	d1f9      	bne.n	23f6864 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23f6870:	e7f3      	b.n	23f685a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23f6872:	2210      	movs	r2, #16
 23f6874:	f004 fc26 	bl	23fb0c4 <memset>
 23f6878:	e7f1      	b.n	23f685e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023f687a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23f687a:	b538      	push	{r3, r4, r5, lr}
 23f687c:	4604      	mov	r4, r0
 23f687e:	460d      	mov	r5, r1
        : BleUuid() {
 23f6880:	f7ff ffaa 	bl	23f67d8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23f6884:	2300      	movs	r3, #0
}
 23f6886:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23f6888:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23f688a:	81a5      	strh	r5, [r4, #12]
}
 23f688c:	bd38      	pop	{r3, r4, r5, pc}

023f688e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23f688e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23f6890:	6902      	ldr	r2, [r0, #16]
 23f6892:	690b      	ldr	r3, [r1, #16]
 23f6894:	429a      	cmp	r2, r3
 23f6896:	d106      	bne.n	23f68a6 <_ZNK8particle7BleUuideqERKS0_+0x18>
 23f6898:	2210      	movs	r2, #16
 23f689a:	f004 fbdc 	bl	23fb056 <memcmp>
 23f689e:	fab0 f080 	clz	r0, r0
 23f68a2:	0940      	lsrs	r0, r0, #5
}
 23f68a4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23f68a6:	2000      	movs	r0, #0
 23f68a8:	e7fc      	b.n	23f68a4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

023f68ac <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
 23f68ac:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
 23f68ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f68b2:	4602      	mov	r2, r0
void BleUuid::construct(const char* uuid) {
 23f68b4:	4606      	mov	r6, r0
    type_ = BleUuidType::LONG;
 23f68b6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f68b8:	4b33      	ldr	r3, [pc, #204]	; (23f6988 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
 23f68ba:	460c      	mov	r4, r1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23f68bc:	f103 0110 	add.w	r1, r3, #16
 23f68c0:	f853 0b04 	ldr.w	r0, [r3], #4
 23f68c4:	428b      	cmp	r3, r1
 23f68c6:	f842 0b04 	str.w	r0, [r2], #4
 23f68ca:	d1f9      	bne.n	23f68c0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
 23f68cc:	b344      	cbz	r4, 23f6920 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
 23f68ce:	2124      	movs	r1, #36	; 0x24
 23f68d0:	4620      	mov	r0, r4
 23f68d2:	f004 fc70 	bl	23fb1b6 <strnlen>
 23f68d6:	2804      	cmp	r0, #4
 23f68d8:	f04f 0500 	mov.w	r5, #0
 23f68dc:	d123      	bne.n	23f6926 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
 23f68de:	f8ad 5004 	strh.w	r5, [sp, #4]
 23f68e2:	af01      	add	r7, sp, #4
 23f68e4:	1ca5      	adds	r5, r4, #2
 23f68e6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
 23f68e8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 23f68ec:	f7ff fe9c 	bl	23f6628 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
 23f68f0:	f1b0 0800 	subs.w	r8, r0, #0
 23f68f4:	db12      	blt.n	23f691c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
 23f68f6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 23f68fa:	f7ff fe95 	bl	23f6628 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
 23f68fe:	2800      	cmp	r0, #0
 23f6900:	db0c      	blt.n	23f691c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
 23f6902:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23f6904:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
 23f6908:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23f690a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
 23f690e:	d1eb      	bne.n	23f68e8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
 23f6910:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23f6914:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
 23f6916:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23f691a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
 23f691c:	2300      	movs	r3, #0
 23f691e:	6133      	str	r3, [r6, #16]
}
 23f6920:	b002      	add	sp, #8
 23f6922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
 23f6926:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23f692a:	2124      	movs	r1, #36	; 0x24
 23f692c:	4620      	mov	r0, r4
 23f692e:	f004 fc42 	bl	23fb1b6 <strnlen>
 23f6932:	42a8      	cmp	r0, r5
 23f6934:	d807      	bhi.n	23f6946 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
 23f6936:	4642      	mov	r2, r8
 23f6938:	2100      	movs	r1, #0
 23f693a:	4630      	mov	r0, r6
}
 23f693c:	b002      	add	sp, #8
 23f693e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
 23f6942:	f004 bbbf 	b.w	23fb0c4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23f6946:	f1b8 0f00 	cmp.w	r8, #0
 23f694a:	d0e9      	beq.n	23f6920 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
 23f694c:	5d60      	ldrb	r0, [r4, r5]
 23f694e:	f7ff fe6b 	bl	23f6628 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23f6952:	0603      	lsls	r3, r0, #24
 23f6954:	d415      	bmi.n	23f6982 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
 23f6956:	0100      	lsls	r0, r0, #4
 23f6958:	b2c7      	uxtb	r7, r0
 23f695a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23f695e:	2124      	movs	r1, #36	; 0x24
 23f6960:	4620      	mov	r0, r4
            uuid128_[len - 1] = hi << 4;
 23f6962:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23f6966:	f004 fc26 	bl	23fb1b6 <strnlen>
 23f696a:	3501      	adds	r5, #1
 23f696c:	42a8      	cmp	r0, r5
 23f696e:	d908      	bls.n	23f6982 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
 23f6970:	5d60      	ldrb	r0, [r4, r5]
 23f6972:	f7ff fe59 	bl	23f6628 <_ZN8particle11hexToNibbleEc>
 23f6976:	b240      	sxtb	r0, r0
                if (lo >= 0) {
 23f6978:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
 23f697a:	bfa4      	itt	ge
 23f697c:	4338      	orrge	r0, r7
 23f697e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23f6982:	3501      	adds	r5, #1
 23f6984:	e7d1      	b.n	23f692a <_ZN8particle7BleUuid9constructEPKc+0x7e>
 23f6986:	bf00      	nop
 23f6988:	023fb536 	.word	0x023fb536

023f698c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
 23f698c:	b513      	push	{r0, r1, r4, lr}
 23f698e:	4604      	mov	r4, r0
 23f6990:	9101      	str	r1, [sp, #4]
        : BleUuid() {
 23f6992:	f7ff ff21 	bl	23f67d8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
 23f6996:	4620      	mov	r0, r4
 23f6998:	9901      	ldr	r1, [sp, #4]
 23f699a:	f7ff ff87 	bl	23f68ac <_ZN8particle7BleUuid9constructEPKc>
}
 23f699e:	4620      	mov	r0, r4
 23f69a0:	b002      	add	sp, #8
 23f69a2:	bd10      	pop	{r4, pc}

023f69a4 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
 23f69a4:	b510      	push	{r4, lr}
 23f69a6:	f100 030f 	add.w	r3, r0, #15
 23f69aa:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
 23f69ac:	781c      	ldrb	r4, [r3, #0]
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23f69ae:	4283      	cmp	r3, r0
        buf[i] = uuid128_[j];
 23f69b0:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23f69b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 23f69b8:	d1f8      	bne.n	23f69ac <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
 23f69ba:	bd10      	pop	{r4, pc}

023f69bc <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23f69bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f69c0:	461f      	mov	r7, r3
    if (!buf || len == 0) {
 23f69c2:	460d      	mov	r5, r1
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23f69c4:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
 23f69c6:	2900      	cmp	r1, #0
 23f69c8:	d05b      	beq.n	23f6a82 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
 23f69ca:	b1da      	cbz	r2, 23f6a04 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
 23f69cc:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
 23f69d0:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
 23f69d2:	f1b8 0f00 	cmp.w	r8, #0
 23f69d6:	d119      	bne.n	23f6a0c <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23f69d8:	8983      	ldrh	r3, [r0, #12]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23f69da:	2102      	movs	r1, #2
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23f69dc:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23f69de:	aa05      	add	r2, sp, #20
 23f69e0:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23f69e2:	f8ad 3004 	strh.w	r3, [sp, #4]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
 23f69e6:	f8cd 8014 	str.w	r8, [sp, #20]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23f69ea:	f7ff fde5 	bl	23f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
 23f69ee:	2c04      	cmp	r4, #4
 23f69f0:	bf28      	it	cs
 23f69f2:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
 23f69f4:	4628      	mov	r0, r5
 23f69f6:	4622      	mov	r2, r4
 23f69f8:	a905      	add	r1, sp, #20
 23f69fa:	f004 fb3c 	bl	23fb076 <memcpy>
        buf[len++] = '\0';
 23f69fe:	1c62      	adds	r2, r4, #1
 23f6a00:	f805 8004 	strb.w	r8, [r5, r4]
}
 23f6a04:	4610      	mov	r0, r2
 23f6a06:	b00e      	add	sp, #56	; 0x38
 23f6a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
 23f6a0c:	a901      	add	r1, sp, #4
 23f6a0e:	f7ff ffc9 	bl	23f69a4 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23f6a12:	aa05      	add	r2, sp, #20
    if (stripped) {
 23f6a14:	b17f      	cbz	r7, 23f6a36 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23f6a16:	2110      	movs	r1, #16
 23f6a18:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23f6a1a:	f7ff fdcd 	bl	23f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
 23f6a1e:	2c24      	cmp	r4, #36	; 0x24
 23f6a20:	bf28      	it	cs
 23f6a22:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
 23f6a24:	4628      	mov	r0, r5
 23f6a26:	4622      	mov	r2, r4
 23f6a28:	a905      	add	r1, sp, #20
 23f6a2a:	f004 fb24 	bl	23fb076 <memcpy>
    buf[len++] = '\0';
 23f6a2e:	2300      	movs	r3, #0
 23f6a30:	1c62      	adds	r2, r4, #1
 23f6a32:	552b      	strb	r3, [r5, r4]
    return len;
 23f6a34:	e7e6      	b.n	23f6a04 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23f6a36:	2104      	movs	r1, #4
        cStr[idx * 2] = '-';
 23f6a38:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23f6a3a:	eb0d 0001 	add.w	r0, sp, r1
 23f6a3e:	f7ff fdbb 	bl	23f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23f6a42:	2102      	movs	r1, #2
 23f6a44:	f10d 021d 	add.w	r2, sp, #29
 23f6a48:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
 23f6a4a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23f6a4e:	f7ff fdb3 	bl	23f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23f6a52:	2102      	movs	r1, #2
 23f6a54:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 23f6a58:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
 23f6a5c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23f6a60:	f7ff fdaa 	bl	23f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23f6a64:	2102      	movs	r1, #2
 23f6a66:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 23f6a6a:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
 23f6a6c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23f6a70:	f7ff fda2 	bl	23f65b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23f6a74:	2106      	movs	r1, #6
        cStr[idx * 2 + 3] = '-';
 23f6a76:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23f6a7a:	aa0b      	add	r2, sp, #44	; 0x2c
 23f6a7c:	f10d 000e 	add.w	r0, sp, #14
 23f6a80:	e7cb      	b.n	23f6a1a <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
 23f6a82:	460a      	mov	r2, r1
 23f6a84:	e7be      	b.n	23f6a04 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

023f6a86 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
 23f6a86:	b510      	push	{r4, lr}
 23f6a88:	4604      	mov	r4, r0
 23f6a8a:	b08a      	sub	sp, #40	; 0x28
    toString(cStr, sizeof(cStr));
 23f6a8c:	2300      	movs	r3, #0
 23f6a8e:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
 23f6a90:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
 23f6a92:	4669      	mov	r1, sp
 23f6a94:	f7ff ff92 	bl	23f69bc <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
 23f6a98:	4669      	mov	r1, sp
 23f6a9a:	4620      	mov	r0, r4
 23f6a9c:	f002 f853 	bl	23f8b46 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f6aa0:	4620      	mov	r0, r4
 23f6aa2:	b00a      	add	sp, #40	; 0x28
 23f6aa4:	bd10      	pop	{r4, pc}

023f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23f6aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f6aa8:	4605      	mov	r5, r0
 23f6aaa:	4616      	mov	r6, r2
 23f6aac:	461f      	mov	r7, r3
 23f6aae:	460a      	mov	r2, r1
 23f6ab0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f6ab4:	ab01      	add	r3, sp, #4
 23f6ab6:	f7ff fd2b 	bl	23f6510 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23f6aba:	f030 0402 	bics.w	r4, r0, #2
 23f6abe:	d00c      	beq.n	23f6ada <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23f6ac0:	1e84      	subs	r4, r0, #2
 23f6ac2:	42bc      	cmp	r4, r7
 23f6ac4:	bf28      	it	cs
 23f6ac6:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23f6ac8:	b13e      	cbz	r6, 23f6ada <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23f6aca:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23f6acc:	682b      	ldr	r3, [r5, #0]
 23f6ace:	3102      	adds	r1, #2
 23f6ad0:	4622      	mov	r2, r4
 23f6ad2:	4630      	mov	r0, r6
 23f6ad4:	4419      	add	r1, r3
 23f6ad6:	f004 face 	bl	23fb076 <memcpy>
}
 23f6ada:	4620      	mov	r0, r4
 23f6adc:	b003      	add	sp, #12
 23f6ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f6ae0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23f6ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6ae2:	4613      	mov	r3, r2
 23f6ae4:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23f6ae6:	9201      	str	r2, [sp, #4]
 23f6ae8:	460a      	mov	r2, r1
 23f6aea:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23f6aec:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23f6aee:	f7ff ffda 	bl	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23f6af2:	b940      	cbnz	r0, 23f6b06 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23f6af4:	4622      	mov	r2, r4
 23f6af6:	2109      	movs	r1, #9
 23f6af8:	4628      	mov	r0, r5
 23f6afa:	9b01      	ldr	r3, [sp, #4]
}
 23f6afc:	b003      	add	sp, #12
 23f6afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23f6b02:	f7ff bfd0 	b.w	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23f6b06:	b003      	add	sp, #12
 23f6b08:	bd30      	pop	{r4, r5, pc}
	...

023f6b0c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23f6b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6b0e:	460c      	mov	r4, r1
 23f6b10:	b089      	sub	sp, #36	; 0x24
    String name;
 23f6b12:	490c      	ldr	r1, [pc, #48]	; (23f6b44 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23f6b14:	4605      	mov	r5, r0
    String name;
 23f6b16:	f002 f816 	bl	23f8b46 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23f6b1a:	221f      	movs	r2, #31
 23f6b1c:	4669      	mov	r1, sp
 23f6b1e:	4620      	mov	r0, r4
 23f6b20:	f7ff ffde 	bl	23f6ae0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23f6b24:	4606      	mov	r6, r0
 23f6b26:	b150      	cbz	r0, 23f6b3e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23f6b28:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23f6b2a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23f6b2c:	4628      	mov	r0, r5
 23f6b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f6b32:	f002 f887 	bl	23f8c44 <_ZN6String6concatEc>
 23f6b36:	b110      	cbz	r0, 23f6b3e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23f6b38:	3701      	adds	r7, #1
 23f6b3a:	42be      	cmp	r6, r7
 23f6b3c:	d1f6      	bne.n	23f6b2c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23f6b3e:	4628      	mov	r0, r5
 23f6b40:	b009      	add	sp, #36	; 0x24
 23f6b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f6b44:	023fc429 	.word	0x023fc429

023f6b48 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23f6b48:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23f6b4a:	2302      	movs	r3, #2
 23f6b4c:	2119      	movs	r1, #25
 23f6b4e:	aa01      	add	r2, sp, #4
 23f6b50:	f7ff ffa9 	bl	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23f6b54:	b108      	cbz	r0, 23f6b5a <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23f6b56:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23f6b5a:	b003      	add	sp, #12
 23f6b5c:	f85d fb04 	ldr.w	pc, [sp], #4

023f6b60 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23f6b60:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23f6b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f6b66:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23f6b68:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23f6b6a:	8043      	strh	r3, [r0, #2]
 23f6b6c:	220e      	movs	r2, #14
 23f6b6e:	4629      	mov	r1, r5
 23f6b70:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23f6b72:	7105      	strb	r5, [r0, #4]
 23f6b74:	3006      	adds	r0, #6
 23f6b76:	f004 faa5 	bl	23fb0c4 <memset>
 23f6b7a:	f104 0014 	add.w	r0, r4, #20
 23f6b7e:	f7ff fe2b 	bl	23f67d8 <_ZN8particle7BleUuidC1Ev>
 23f6b82:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23f6b86:	f7ff fe27 	bl	23f67d8 <_ZN8particle7BleUuidC1Ev>
 23f6b8a:	4904      	ldr	r1, [pc, #16]	; (23f6b9c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23f6b8c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23f6b90:	f001 ffd9 	bl	23f8b46 <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23f6b94:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23f6b96:	6565      	str	r5, [r4, #84]	; 0x54
 23f6b98:	bd38      	pop	{r3, r4, r5, pc}
 23f6b9a:	bf00      	nop
 23f6b9c:	023fc429 	.word	0x023fc429

023f6ba0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
 23f6ba0:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f6ba2:	680d      	ldr	r5, [r1, #0]
 23f6ba4:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23f6ba6:	4601      	mov	r1, r0
 23f6ba8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23f6bac:	f7ff fe6f 	bl	23f688e <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23f6bb0:	b140      	cbz	r0, 23f6bc4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
 23f6bb2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23f6bb4:	8aa2      	ldrh	r2, [r4, #20]
 23f6bb6:	429a      	cmp	r2, r3
 23f6bb8:	d805      	bhi.n	23f6bc6 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23f6bba:	8ae0      	ldrh	r0, [r4, #22]
 23f6bbc:	4298      	cmp	r0, r3
 23f6bbe:	bf34      	ite	cc
 23f6bc0:	2000      	movcc	r0, #0
 23f6bc2:	2001      	movcs	r0, #1
    }
 23f6bc4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 23f6bc6:	2000      	movs	r0, #0
 23f6bc8:	e7fc      	b.n	23f6bc4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

023f6bca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23f6bca:	b510      	push	{r4, lr}
    return data_ + size_;
 23f6bcc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23f6bd0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23f6bd4:	4293      	cmp	r3, r2
 23f6bd6:	4618      	mov	r0, r3
 23f6bd8:	d005      	beq.n	23f6be6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23f6bda:	6804      	ldr	r4, [r0, #0]
 23f6bdc:	3308      	adds	r3, #8
 23f6bde:	8824      	ldrh	r4, [r4, #0]
 23f6be0:	428c      	cmp	r4, r1
 23f6be2:	d1f7      	bne.n	23f6bd4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23f6be4:	bd10      	pop	{r4, pc}
        return nullptr;
 23f6be6:	2000      	movs	r0, #0
 23f6be8:	e7fc      	b.n	23f6be4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>
	...

023f6bec <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23f6bec:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
 23f6bee:	b570      	push	{r4, r5, r6, lr}
 23f6bf0:	6003      	str	r3, [r0, #0]
 23f6bf2:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23f6bf4:	2068      	movs	r0, #104	; 0x68
 23f6bf6:	f7f3 fc9c 	bl	23ea532 <_Znwj>
	  auto __pi = ::new (__mem)
 23f6bfa:	1e04      	subs	r4, r0, #0
 23f6bfc:	f104 060c 	add.w	r6, r4, #12
 23f6c00:	d007      	beq.n	23f6c12 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
 23f6c02:	2301      	movs	r3, #1
 23f6c04:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23f6c08:	4b04      	ldr	r3, [pc, #16]	; (23f6c1c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f6c0a:	4630      	mov	r0, r6
 23f6c0c:	6023      	str	r3, [r4, #0]
 23f6c0e:	f7ff ffa7 	bl	23f6b60 <_ZN8particle21BleCharacteristicImplC1Ev>
}
 23f6c12:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23f6c14:	e9c5 6400 	strd	r6, r4, [r5]
 23f6c18:	bd70      	pop	{r4, r5, r6, pc}
 23f6c1a:	bf00      	nop
 23f6c1c:	023ff9c0 	.word	0x023ff9c0

023f6c20 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
 23f6c20:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
 23f6c22:	4605      	mov	r5, r0
BleUuid BleCharacteristic::UUID() const {
 23f6c24:	4606      	mov	r6, r0
    return impl()->charUUID();
 23f6c26:	680c      	ldr	r4, [r1, #0]
 23f6c28:	3414      	adds	r4, #20
 23f6c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f6c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f6c2e:	6823      	ldr	r3, [r4, #0]
}
 23f6c30:	4630      	mov	r0, r6
    return impl()->charUUID();
 23f6c32:	602b      	str	r3, [r5, #0]
}
 23f6c34:	bd70      	pop	{r4, r5, r6, pc}
	...

023f6c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23f6c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6c3a:	4606      	mov	r6, r0
 23f6c3c:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
 23f6c3e:	460d      	mov	r5, r1
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23f6c40:	b085      	sub	sp, #20
    if (buf == nullptr || len == 0) {
 23f6c42:	2900      	cmp	r1, #0
 23f6c44:	d050      	beq.n	23f6ce8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
 23f6c46:	2a00      	cmp	r2, #0
 23f6c48:	d04e      	beq.n	23f6ce8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
 23f6c4a:	6804      	ldr	r4, [r0, #0]
 23f6c4c:	2af4      	cmp	r2, #244	; 0xf4
    if (impl()->isLocal()) {
 23f6c4e:	7823      	ldrb	r3, [r4, #0]
 23f6c50:	bf28      	it	cs
 23f6c52:	22f4      	movcs	r2, #244	; 0xf4
 23f6c54:	b343      	cbz	r3, 23f6ca8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23f6c56:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
 23f6c58:	0798      	lsls	r0, r3, #30
 23f6c5a:	d509      	bpl.n	23f6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
 23f6c5c:	2300      	movs	r3, #0
 23f6c5e:	89a0      	ldrh	r0, [r4, #12]
 23f6c60:	9203      	str	r2, [sp, #12]
 23f6c62:	f7fd fb45 	bl	23f42f0 <hal_ble_gatt_server_set_characteristic_value>
 23f6c66:	2800      	cmp	r0, #0
 23f6c68:	9a03      	ldr	r2, [sp, #12]
 23f6c6a:	da03      	bge.n	23f6c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
 23f6c6c:	b005      	add	sp, #20
 23f6c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
 23f6c70:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f6c74:	6834      	ldr	r4, [r6, #0]
 23f6c76:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
 23f6c78:	06d9      	lsls	r1, r3, #27
 23f6c7a:	d509      	bpl.n	23f6c90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
 23f6c7c:	2f01      	cmp	r7, #1
 23f6c7e:	d007      	beq.n	23f6c90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23f6c80:	2300      	movs	r3, #0
 23f6c82:	4629      	mov	r1, r5
 23f6c84:	89a0      	ldrh	r0, [r4, #12]
}
 23f6c86:	b005      	add	sp, #20
 23f6c88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23f6c8c:	f7fd bbae 	b.w	23f43ec <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
 23f6c90:	069b      	lsls	r3, r3, #26
 23f6c92:	d5eb      	bpl.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23f6c94:	2f02      	cmp	r7, #2
 23f6c96:	d0e9      	beq.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23f6c98:	2300      	movs	r3, #0
 23f6c9a:	4629      	mov	r1, r5
 23f6c9c:	89a0      	ldrh	r0, [r4, #12]
}
 23f6c9e:	b005      	add	sp, #20
 23f6ca0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23f6ca4:	f7fd bbb0 	b.w	23f4408 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
 23f6ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23f6cac:	8860      	ldrh	r0, [r4, #2]
 23f6cae:	4288      	cmp	r0, r1
 23f6cb0:	d01c      	beq.n	23f6cec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
 23f6cb2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
 23f6cb4:	074e      	lsls	r6, r1, #29
 23f6cb6:	d501      	bpl.n	23f6cbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
 23f6cb8:	2f01      	cmp	r7, #1
 23f6cba:	d104      	bne.n	23f6cc6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23f6cbc:	070b      	lsls	r3, r1, #28
 23f6cbe:	d409      	bmi.n	23f6cd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
 23f6cc0:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f6cc4:	e7d2      	b.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23f6cc6:	89a1      	ldrh	r1, [r4, #12]
 23f6cc8:	9300      	str	r3, [sp, #0]
 23f6cca:	4613      	mov	r3, r2
 23f6ccc:	462a      	mov	r2, r5
 23f6cce:	f7fd fb47 	bl	23f4360 <hal_ble_gatt_client_write_without_response>
 23f6cd2:	e7cb      	b.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23f6cd4:	2f02      	cmp	r7, #2
 23f6cd6:	d0f3      	beq.n	23f6cc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23f6cd8:	2300      	movs	r3, #0
 23f6cda:	89a1      	ldrh	r1, [r4, #12]
 23f6cdc:	9300      	str	r3, [sp, #0]
 23f6cde:	4613      	mov	r3, r2
 23f6ce0:	462a      	mov	r2, r5
 23f6ce2:	f7fd fb2f 	bl	23f4344 <hal_ble_gatt_client_write_with_response>
 23f6ce6:	e7c1      	b.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23f6ce8:	4802      	ldr	r0, [pc, #8]	; (23f6cf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
 23f6cea:	e7bf      	b.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
 23f6cec:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23f6cf0:	e7bc      	b.n	23f6c6c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23f6cf2:	bf00      	nop
 23f6cf4:	fffffef2 	.word	0xfffffef2

023f6cf8 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
 23f6cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6cfa:	460c      	mov	r4, r1
 23f6cfc:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
 23f6cfe:	21f4      	movs	r1, #244	; 0xf4
 23f6d00:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
 23f6d02:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
 23f6d04:	f004 fa57 	bl	23fb1b6 <strnlen>
 23f6d08:	4621      	mov	r1, r4
 23f6d0a:	4602      	mov	r2, r0
 23f6d0c:	4628      	mov	r0, r5
 23f6d0e:	9b01      	ldr	r3, [sp, #4]
}
 23f6d10:	b003      	add	sp, #12
 23f6d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
 23f6d16:	f7ff bf8f 	b.w	23f6c38 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

023f6d1c <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
 23f6d1c:	b510      	push	{r4, lr}
 23f6d1e:	6803      	ldr	r3, [r0, #0]
 23f6d20:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23f6d22:	781a      	ldrb	r2, [r3, #0]
 23f6d24:	bb52      	cbnz	r2, 23f6d7c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
 23f6d26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23f6d2a:	885c      	ldrh	r4, [r3, #2]
 23f6d2c:	4284      	cmp	r4, r0
 23f6d2e:	d025      	beq.n	23f6d7c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23f6d30:	8a18      	ldrh	r0, [r3, #16]
 23f6d32:	b330      	cbz	r0, 23f6d82 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
 23f6d34:	e9cd 2203 	strd	r2, r2, [sp, #12]
 23f6d38:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
 23f6d3a:	4a13      	ldr	r2, [pc, #76]	; (23f6d88 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
 23f6d3c:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
 23f6d3e:	4a13      	ldr	r2, [pc, #76]	; (23f6d8c <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
 23f6d40:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
 23f6d44:	885a      	ldrh	r2, [r3, #2]
 23f6d46:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
 23f6d4a:	8a1a      	ldrh	r2, [r3, #16]
 23f6d4c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
 23f6d50:	899a      	ldrh	r2, [r3, #12]
 23f6d52:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
 23f6d56:	b159      	cbz	r1, 23f6d70 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
 23f6d58:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
 23f6d5a:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
 23f6d5c:	bf44      	itt	mi
 23f6d5e:	2202      	movmi	r2, #2
 23f6d60:	9205      	strmi	r2, [sp, #20]
 23f6d62:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
 23f6d64:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
 23f6d66:	bf42      	ittt	mi
 23f6d68:	9b05      	ldrmi	r3, [sp, #20]
 23f6d6a:	f043 0301 	orrmi.w	r3, r3, #1
 23f6d6e:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
 23f6d70:	2100      	movs	r1, #0
 23f6d72:	4668      	mov	r0, sp
 23f6d74:	f7fd fb2c 	bl	23f43d0 <hal_ble_gatt_client_configure_cccd>
}
 23f6d78:	b006      	add	sp, #24
 23f6d7a:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23f6d7c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23f6d80:	e7fa      	b.n	23f6d78 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23f6d82:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23f6d86:	e7f7      	b.n	23f6d78 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
 23f6d88:	00180003 	.word	0x00180003
 23f6d8c:	023f6f75 	.word	0x023f6f75

023f6d90 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
 23f6d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23f6d92:	2600      	movs	r6, #0
 23f6d94:	4605      	mov	r5, r0
 23f6d96:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23f6d98:	2028      	movs	r0, #40	; 0x28
 23f6d9a:	f7f3 fbca 	bl	23ea532 <_Znwj>
	  auto __pi = ::new (__mem)
 23f6d9e:	1e04      	subs	r4, r0, #0
 23f6da0:	f104 070c 	add.w	r7, r4, #12
 23f6da4:	d00a      	beq.n	23f6dbc <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
 23f6da6:	2301      	movs	r3, #1
 23f6da8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23f6dac:	4b05      	ldr	r3, [pc, #20]	; (23f6dc4 <_ZN8particle10BleServiceC1Ev+0x34>)
              characteristicsDiscovered_(false) {
 23f6dae:	4638      	mov	r0, r7
 23f6db0:	6023      	str	r3, [r4, #0]
 23f6db2:	f7ff fd11 	bl	23f67d8 <_ZN8particle7BleUuidC1Ev>
 23f6db6:	6226      	str	r6, [r4, #32]
 23f6db8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
}
 23f6dbc:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23f6dbe:	e9c5 7400 	strd	r7, r4, [r5]
 23f6dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6dc4:	023ff9dc 	.word	0x023ff9dc

023f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23f6dc8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23f6dca:	2500      	movs	r5, #0
 23f6dcc:	4606      	mov	r6, r0
 23f6dce:	6005      	str	r5, [r0, #0]
 23f6dd0:	2030      	movs	r0, #48	; 0x30
 23f6dd2:	f7f3 fbae 	bl	23ea532 <_Znwj>
	  auto __pi = ::new (__mem)
 23f6dd6:	4604      	mov	r4, r0
 23f6dd8:	b198      	cbz	r0, 23f6e02 <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23f6dda:	2301      	movs	r3, #1
 23f6ddc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23f6de0:	4b0a      	ldr	r3, [pc, #40]	; (23f6e0c <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23f6de2:	300e      	adds	r0, #14
 23f6de4:	f840 3c0e 	str.w	r3, [r0, #-14]
 23f6de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f6dec:	f820 3c02 	strh.w	r3, [r0, #-2]
 23f6df0:	f7ff fce8 	bl	23f67c4 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23f6df4:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23f6df8:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23f6dfc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23f6e00:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23f6e02:	6074      	str	r4, [r6, #4]
 23f6e04:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23f6e06:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23f6e08:	6034      	str	r4, [r6, #0]
 23f6e0a:	bd70      	pop	{r4, r5, r6, pc}
 23f6e0c:	023ff9f8 	.word	0x023ff9f8

023f6e10 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
 23f6e10:	b513      	push	{r0, r1, r4, lr}
 23f6e12:	4604      	mov	r4, r0
    WiringBleLock lk;
 23f6e14:	a801      	add	r0, sp, #4
 23f6e16:	f7ff fc1d 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23f6e1a:	6823      	ldr	r3, [r4, #0]
    WiringBleLock lk;
 23f6e1c:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23f6e1e:	881c      	ldrh	r4, [r3, #0]
 23f6e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f6e24:	1ae4      	subs	r4, r4, r3
 23f6e26:	bf18      	it	ne
 23f6e28:	2401      	movne	r4, #1
    WiringBleLock lk;
 23f6e2a:	f7ff fc21 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23f6e2e:	4620      	mov	r0, r4
 23f6e30:	b002      	add	sp, #8
 23f6e32:	bd10      	pop	{r4, pc}

023f6e34 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
 23f6e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6e36:	460c      	mov	r4, r1
 23f6e38:	4605      	mov	r5, r0
    WiringBleLock lk;
 23f6e3a:	a801      	add	r0, sp, #4
 23f6e3c:	f7ff fc0a 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
 23f6e40:	6823      	ldr	r3, [r4, #0]
      { return _M_ptr; }
 23f6e42:	682a      	ldr	r2, [r5, #0]
    WiringBleLock lk;
 23f6e44:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23f6e46:	f8c2 3002 	str.w	r3, [r2, #2]
 23f6e4a:	6863      	ldr	r3, [r4, #4]
 23f6e4c:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
 23f6e50:	f7ff fc0e 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
 23f6e54:	b003      	add	sp, #12
 23f6e56:	bd30      	pop	{r4, r5, pc}

023f6e58 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
 23f6e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6e5a:	460d      	mov	r5, r1
 23f6e5c:	4604      	mov	r4, r0
    WiringBleLock lk;
 23f6e5e:	a801      	add	r0, sp, #4
 23f6e60:	f7ff fbf8 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
 23f6e64:	682a      	ldr	r2, [r5, #0]
 23f6e66:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23f6e68:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23f6e6c:	6023      	str	r3, [r4, #0]
 23f6e6e:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23f6e72:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23f6e74:	f7ff fbfc 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23f6e78:	4620      	mov	r0, r4
 23f6e7a:	b003      	add	sp, #12
 23f6e7c:	bd30      	pop	{r4, r5, pc}

023f6e7e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23f6e7e:	b530      	push	{r4, r5, lr}
 23f6e80:	4605      	mov	r5, r0
 23f6e82:	460c      	mov	r4, r1
 23f6e84:	b087      	sub	sp, #28
    WiringBleLock lk;
 23f6e86:	a801      	add	r0, sp, #4
 23f6e88:	f7ff fbe4 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23f6e8c:	682a      	ldr	r2, [r5, #0]
 23f6e8e:	6823      	ldr	r3, [r4, #0]
 23f6e90:	8812      	ldrh	r2, [r2, #0]
 23f6e92:	881b      	ldrh	r3, [r3, #0]
 23f6e94:	429a      	cmp	r2, r3
 23f6e96:	d10d      	bne.n	23f6eb4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23f6e98:	4629      	mov	r1, r5
 23f6e9a:	a802      	add	r0, sp, #8
 23f6e9c:	f7ff ffdc 	bl	23f6e58 <_ZNK8particle13BlePeerDevice7addressEv>
 23f6ea0:	4621      	mov	r1, r4
 23f6ea2:	a804      	add	r0, sp, #16
 23f6ea4:	f7ff ffd8 	bl	23f6e58 <_ZNK8particle13BlePeerDevice7addressEv>
 23f6ea8:	a904      	add	r1, sp, #16
 23f6eaa:	a802      	add	r0, sp, #8
 23f6eac:	f7ff fbfe 	bl	23f66ac <_ZNK8particle10BleAddresseqERKS0_>
 23f6eb0:	4604      	mov	r4, r0
 23f6eb2:	b900      	cbnz	r0, 23f6eb6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23f6eb4:	2400      	movs	r4, #0
    WiringBleLock lk;
 23f6eb6:	a801      	add	r0, sp, #4
 23f6eb8:	f7ff fbda 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23f6ebc:	4620      	mov	r0, r4
 23f6ebe:	b007      	add	sp, #28
 23f6ec0:	bd30      	pop	{r4, r5, pc}
	...

023f6ec4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23f6ec4:	b570      	push	{r4, r5, r6, lr}
 23f6ec6:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23f6ec8:	2074      	movs	r0, #116	; 0x74
 23f6eca:	f7f3 fb32 	bl	23ea532 <_Znwj>
 23f6ece:	4604      	mov	r4, r0
 23f6ed0:	b1a0      	cbz	r0, 23f6efc <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23f6ed2:	2500      	movs	r5, #0
 23f6ed4:	e9c0 5500 	strd	r5, r5, [r0]
 23f6ed8:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f6edc:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f6ee0:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23f6ee4:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23f6ee6:	3024      	adds	r0, #36	; 0x24
 23f6ee8:	f7ff ff6e 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
 23f6eec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23f6ef0:	f7ff ff6a 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
 23f6ef4:	63e5      	str	r5, [r4, #60]	; 0x3c
 23f6ef6:	64e5      	str	r5, [r4, #76]	; 0x4c
 23f6ef8:	65e5      	str	r5, [r4, #92]	; 0x5c
 23f6efa:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23f6efc:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23f6efe:	b924      	cbnz	r4, 23f6f0a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23f6f00:	200a      	movs	r0, #10
 23f6f02:	4a0a      	ldr	r2, [pc, #40]	; (23f6f2c <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23f6f04:	490a      	ldr	r1, [pc, #40]	; (23f6f30 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23f6f06:	f7fd faef 	bl	23f44e8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23f6f0a:	2000      	movs	r0, #0
 23f6f0c:	f7fd f9b8 	bl	23f4280 <hal_ble_stack_init>
 23f6f10:	b120      	cbz	r0, 23f6f1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23f6f12:	200a      	movs	r0, #10
 23f6f14:	4a05      	ldr	r2, [pc, #20]	; (23f6f2c <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23f6f16:	4907      	ldr	r1, [pc, #28]	; (23f6f34 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23f6f18:	f7fd fae6 	bl	23f44e8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23f6f1c:	2200      	movs	r2, #0
 23f6f1e:	6831      	ldr	r1, [r6, #0]
 23f6f20:	4805      	ldr	r0, [pc, #20]	; (23f6f38 <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23f6f22:	f7fd fa47 	bl	23f43b4 <hal_ble_set_callback_on_periph_link_events>
}
 23f6f26:	4630      	mov	r0, r6
 23f6f28:	bd70      	pop	{r4, r5, r6, pc}
 23f6f2a:	bf00      	nop
 23f6f2c:	023f4441 	.word	0x023f4441
 23f6f30:	023ff7b8 	.word	0x023ff7b8
 23f6f34:	023ff7fd 	.word	0x023ff7fd
 23f6f38:	023f7805 	.word	0x023f7805

023f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23f6f3c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23f6f3e:	4c0a      	ldr	r4, [pc, #40]	; (23f6f68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23f6f40:	e8d4 3f8f 	ldab	r3, [r4]
 23f6f44:	07db      	lsls	r3, r3, #31
 23f6f46:	d40c      	bmi.n	23f6f62 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23f6f48:	4620      	mov	r0, r4
 23f6f4a:	f7f3 fb07 	bl	23ea55c <__cxa_guard_acquire>
 23f6f4e:	b140      	cbz	r0, 23f6f62 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23f6f50:	4806      	ldr	r0, [pc, #24]	; (23f6f6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23f6f52:	f7ff ffb7 	bl	23f6ec4 <_ZN8particle14BleLocalDeviceC1Ev>
 23f6f56:	4620      	mov	r0, r4
 23f6f58:	f7f3 fb05 	bl	23ea566 <__cxa_guard_release>
 23f6f5c:	4804      	ldr	r0, [pc, #16]	; (23f6f70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23f6f5e:	f004 f861 	bl	23fb024 <atexit>
    return instance;
}
 23f6f62:	4802      	ldr	r0, [pc, #8]	; (23f6f6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23f6f64:	bd10      	pop	{r4, pc}
 23f6f66:	bf00      	nop
 23f6f68:	1007aee4 	.word	0x1007aee4
 23f6f6c:	1007aeec 	.word	0x1007aeec
 23f6f70:	023f7ab5 	.word	0x023f7ab5

023f6f74 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23f6f74:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23f6f76:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23f6f78:	4604      	mov	r4, r0
    switch (event->type) {
 23f6f7a:	3b09      	subs	r3, #9
 23f6f7c:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23f6f7e:	460d      	mov	r5, r1
 23f6f80:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23f6f82:	d811      	bhi.n	23f6fa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23f6f84:	f7ff ffda 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f6f88:	88a1      	ldrh	r1, [r4, #4]
 23f6f8a:	6800      	ldr	r0, [r0, #0]
 23f6f8c:	f7ff fe1d 	bl	23f6bca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23f6f90:	4603      	mov	r3, r0
 23f6f92:	b958      	cbnz	r0, 23f6fac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23f6f94:	2220      	movs	r2, #32
 23f6f96:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23f6f9a:	4a0b      	ldr	r2, [pc, #44]	; (23f6fc8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23f6f9c:	2032      	movs	r0, #50	; 0x32
 23f6f9e:	9200      	str	r2, [sp, #0]
 23f6fa0:	490a      	ldr	r1, [pc, #40]	; (23f6fcc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23f6fa2:	aa04      	add	r2, sp, #16
 23f6fa4:	f7fd faae 	bl	23f4504 <log_message>
}
 23f6fa8:	b00d      	add	sp, #52	; 0x34
 23f6faa:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23f6fac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23f6fae:	2a00      	cmp	r2, #0
 23f6fb0:	d0fa      	beq.n	23f6fa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23f6fb2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f6fb6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23f6fba:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23f6fbe:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23f6fc0:	aa04      	add	r2, sp, #16
 23f6fc2:	a903      	add	r1, sp, #12
 23f6fc4:	47a0      	blx	r4
}
 23f6fc6:	e7ef      	b.n	23f6fa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23f6fc8:	023ff83f 	.word	0x023ff83f
 23f6fcc:	023ff7cf 	.word	0x023ff7cf

023f6fd0 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23f6fd0:	b510      	push	{r4, lr}
 23f6fd2:	4604      	mov	r4, r0
    ::free(ptr);
 23f6fd4:	6940      	ldr	r0, [r0, #20]
 23f6fd6:	f7fd fbd7 	bl	23f4788 <free>
 23f6fda:	68a0      	ldr	r0, [r4, #8]
 23f6fdc:	f7fd fbd4 	bl	23f4788 <free>
 23f6fe0:	4620      	mov	r0, r4
 23f6fe2:	bd10      	pop	{r4, pc}

023f6fe4 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23f6fe4:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
 23f6fe6:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23f6fea:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
 23f6fee:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f6ff2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23f6ff6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23f6ffa:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23f6ffe:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23f7002:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23f7006:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23f700a:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23f700e:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
 23f7012:	6202      	str	r2, [r0, #32]
 23f7014:	6302      	str	r2, [r0, #48]	; 0x30
 23f7016:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
 23f701a:	4770      	bx	lr

023f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f701c:	b510      	push	{r4, lr}
 23f701e:	4604      	mov	r4, r0
    ::free(ptr);
 23f7020:	6800      	ldr	r0, [r0, #0]
 23f7022:	f7fd fbb1 	bl	23f4788 <free>
}
 23f7026:	4620      	mov	r0, r4
 23f7028:	bd10      	pop	{r4, pc}

023f702a <_ZN8particle16BleScanDelegatorD1Ev>:

    ~BleScanDelegator() = default;
 23f702a:	b570      	push	{r4, r5, r6, lr}
 23f702c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f702e:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23f7030:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 23f7032:	f7fd fba9 	bl	23f4788 <free>
 23f7036:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f7038:	f7fd fba6 	bl	23f4788 <free>
    }
    ~BleScanFilter() = default;
 23f703c:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23f7040:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23f7044:	f7ff ffea 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23f7048:	4628      	mov	r0, r5
 23f704a:	f7fe fb7d 	bl	23f5748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23f704e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23f7052:	f7f6 ff8d 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23f7056:	f104 0018 	add.w	r0, r4, #24
 23f705a:	f7f6 ff89 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23f705e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f7062:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f7066:	42ae      	cmp	r6, r5
 23f7068:	d004      	beq.n	23f7074 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
 23f706a:	4628      	mov	r0, r5
 23f706c:	f7ff ffb0 	bl	23f6fd0 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23f7070:	3524      	adds	r5, #36	; 0x24
 23f7072:	e7f8      	b.n	23f7066 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
 23f7074:	6820      	ldr	r0, [r4, #0]
 23f7076:	f7fd fb87 	bl	23f4788 <free>
 23f707a:	4620      	mov	r0, r4
 23f707c:	bd70      	pop	{r4, r5, r6, pc}

023f707e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23f707e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23f7080:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23f7082:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23f7084:	6843      	ldr	r3, [r0, #4]
 23f7086:	db02      	blt.n	23f708e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23f7088:	1862      	adds	r2, r4, r1
 23f708a:	429a      	cmp	r2, r3
 23f708c:	dd00      	ble.n	23f7090 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23f708e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23f7090:	682a      	ldr	r2, [r5, #0]
 23f7092:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23f7094:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23f7096:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7098:	1a52      	subs	r2, r2, r1
 23f709a:	f003 fff9 	bl	23fb090 <memmove>
    size_ -= n;
 23f709e:	686a      	ldr	r2, [r5, #4]
 23f70a0:	1b12      	subs	r2, r2, r4
 23f70a2:	606a      	str	r2, [r5, #4]
}
 23f70a4:	bd38      	pop	{r3, r4, r5, pc}

023f70a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23f70a6:	680b      	ldr	r3, [r1, #0]
 23f70a8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23f70aa:	b113      	cbz	r3, 23f70b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23f70ac:	685a      	ldr	r2, [r3, #4]
 23f70ae:	3201      	adds	r2, #1
 23f70b0:	605a      	str	r2, [r3, #4]
      }
 23f70b2:	4770      	bx	lr

023f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23f70b4:	b510      	push	{r4, lr}
 23f70b6:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f70b8:	f851 3b04 	ldr.w	r3, [r1], #4
 23f70bc:	f840 3b04 	str.w	r3, [r0], #4
 23f70c0:	f7ff fff1 	bl	23f70a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23f70c4:	6823      	ldr	r3, [r4, #0]
 23f70c6:	b90b      	cbnz	r3, 23f70cc <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23f70c8:	f7ff fa38 	bl	23f653c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23f70cc:	4620      	mov	r0, r4
 23f70ce:	bd10      	pop	{r4, pc}

023f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23f70d0:	b510      	push	{r4, lr}
 23f70d2:	4604      	mov	r4, r0
 23f70d4:	f851 3b04 	ldr.w	r3, [r1], #4
 23f70d8:	f840 3b04 	str.w	r3, [r0], #4
 23f70dc:	f7ff ffe3 	bl	23f70a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23f70e0:	4620      	mov	r0, r4
 23f70e2:	bd10      	pop	{r4, pc}

023f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23f70e4:	b510      	push	{r4, lr}
 23f70e6:	4604      	mov	r4, r0
 23f70e8:	f851 3b04 	ldr.w	r3, [r1], #4
 23f70ec:	f840 3b04 	str.w	r3, [r0], #4
 23f70f0:	f7ff ffd9 	bl	23f70a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23f70f4:	4620      	mov	r0, r4
 23f70f6:	bd10      	pop	{r4, pc}

023f70f8 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
 23f70f8:	b510      	push	{r4, lr}
 23f70fa:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23f70fc:	3004      	adds	r0, #4
 23f70fe:	f7fd feef 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f7102:	4620      	mov	r0, r4
 23f7104:	bd10      	pop	{r4, pc}

023f7106 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f7106:	b570      	push	{r4, r5, r6, lr}
 23f7108:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f710a:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f710e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23f7112:	42ae      	cmp	r6, r5
 23f7114:	d004      	beq.n	23f7120 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23f7116:	1d28      	adds	r0, r5, #4
 23f7118:	f7fd fee2 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f711c:	3508      	adds	r5, #8
 23f711e:	e7f8      	b.n	23f7112 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f7120:	6820      	ldr	r0, [r4, #0]
 23f7122:	f7fd fb31 	bl	23f4788 <free>
}
 23f7126:	4620      	mov	r0, r4
 23f7128:	bd70      	pop	{r4, r5, r6, pc}

023f712a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f712a:	b570      	push	{r4, r5, r6, lr}
 23f712c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f712e:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f7132:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23f7136:	42ae      	cmp	r6, r5
 23f7138:	d004      	beq.n	23f7144 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23f713a:	1d28      	adds	r0, r5, #4
 23f713c:	f7fd fed0 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7140:	3508      	adds	r5, #8
 23f7142:	e7f8      	b.n	23f7136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f7144:	6820      	ldr	r0, [r4, #0]
 23f7146:	f7fd fb1f 	bl	23f4788 <free>
}
 23f714a:	4620      	mov	r0, r4
 23f714c:	bd70      	pop	{r4, r5, r6, pc}

023f714e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f714e:	b510      	push	{r4, lr}
 23f7150:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23f7152:	3024      	adds	r0, #36	; 0x24
 23f7154:	f7ff ffe9 	bl	23f712a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23f7158:	f104 0018 	add.w	r0, r4, #24
 23f715c:	f7ff ffd3 	bl	23f7106 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23f7160:	bd10      	pop	{r4, pc}

023f7162 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23f7162:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f7164:	b510      	push	{r4, lr}
      if (_M_empty())
 23f7166:	b90a      	cbnz	r2, 23f716c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23f7168:	f002 f870 	bl	23f924c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f716c:	68c3      	ldr	r3, [r0, #12]
    }
 23f716e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7172:	4718      	bx	r3

023f7174 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f7174:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23f717a:	e9c0 3300 	strd	r3, r3, [r0]
 23f717e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7180:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7184:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7186:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7188:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f718a:	dd4a      	ble.n	23f7222 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23f718c:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23f7190:	f7fd faec 	bl	23f476c <malloc>
            if (!d) {
 23f7194:	4606      	mov	r6, r0
 23f7196:	2800      	cmp	r0, #0
 23f7198:	d043      	beq.n	23f7222 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23f719a:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23f719e:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23f71a0:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23f71a4:	d916      	bls.n	23f71d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23f71a6:	4550      	cmp	r0, sl
 23f71a8:	d215      	bcs.n	23f71d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23f71aa:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23f71ae:	f1a4 0910 	sub.w	r9, r4, #16
 23f71b2:	ebaa 0404 	sub.w	r4, sl, r4
 23f71b6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23f71b8:	45d1      	cmp	r9, sl
 23f71ba:	d01d      	beq.n	23f71f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23f71bc:	b11c      	cbz	r4, 23f71c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23f71be:	4651      	mov	r1, sl
 23f71c0:	4620      	mov	r0, r4
 23f71c2:	f001 fcf1 	bl	23f8ba8 <_ZN6StringC1EOS_>
                end->~T();
 23f71c6:	4650      	mov	r0, sl
 23f71c8:	f001 fc72 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f71cc:	f1aa 0a10 	sub.w	sl, sl, #16
 23f71d0:	3c10      	subs	r4, #16
 23f71d2:	e7f1      	b.n	23f71b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23f71d4:	d010      	beq.n	23f71f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23f71d6:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23f71d8:	45a2      	cmp	sl, r4
 23f71da:	d00d      	beq.n	23f71f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23f71dc:	f1b9 0f00 	cmp.w	r9, #0
 23f71e0:	d003      	beq.n	23f71ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23f71e2:	4621      	mov	r1, r4
 23f71e4:	4648      	mov	r0, r9
 23f71e6:	f001 fcdf 	bl	23f8ba8 <_ZN6StringC1EOS_>
                p->~T();
 23f71ea:	4620      	mov	r0, r4
 23f71ec:	f001 fc60 	bl	23f8ab0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f71f0:	3410      	adds	r4, #16
 23f71f2:	f109 0910 	add.w	r9, r9, #16
 23f71f6:	e7ef      	b.n	23f71d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23f71f8:	6828      	ldr	r0, [r5, #0]
 23f71fa:	f7fd fac5 	bl	23f4788 <free>
        capacity_ = n;
 23f71fe:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23f7202:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f7204:	e9d7 4300 	ldrd	r4, r3, [r7]
 23f7208:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23f720c:	45a0      	cmp	r8, r4
 23f720e:	d006      	beq.n	23f721e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23f7210:	4621      	mov	r1, r4
 23f7212:	4630      	mov	r0, r6
 23f7214:	f001 fce2 	bl	23f8bdc <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23f7218:	3410      	adds	r4, #16
 23f721a:	3610      	adds	r6, #16
 23f721c:	e7f6      	b.n	23f720c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23f721e:	687b      	ldr	r3, [r7, #4]
 23f7220:	606b      	str	r3, [r5, #4]
}
 23f7222:	4628      	mov	r0, r5
 23f7224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f7228 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
            return false;
        }
        return true;
    }

    bool filterByDeviceName(const BleScanResult& result) {
 23f7228:	b530      	push	{r4, r5, lr}
 23f722a:	b08d      	sub	sp, #52	; 0x34
 23f722c:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23f722e:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23f7232:	a801      	add	r0, sp, #4
 23f7234:	f7ff ff9e 	bl	23f7174 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23f7238:	9b02      	ldr	r3, [sp, #8]
 23f723a:	2b00      	cmp	r3, #0
 23f723c:	dd2f      	ble.n	23f729e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23f723e:	f104 0114 	add.w	r1, r4, #20
 23f7242:	a804      	add	r0, sp, #16
 23f7244:	f7ff fc62 	bl	23f6b0c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23f7248:	f104 0108 	add.w	r1, r4, #8
 23f724c:	a808      	add	r0, sp, #32
 23f724e:	f7ff fc5d 	bl	23f6b0c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23f7252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f7254:	9b06      	ldr	r3, [sp, #24]
 23f7256:	4313      	orrs	r3, r2
 23f7258:	d01f      	beq.n	23f729a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23f725a:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23f725e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
                LOG_DEBUG(TRACE, "Device name mismatched.");
                return false;
            }
            for (const auto& name : filterDeviceNames) {
 23f7262:	42ac      	cmp	r4, r5
 23f7264:	d019      	beq.n	23f729a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23f7266:	4620      	mov	r0, r4
 23f7268:	a904      	add	r1, sp, #16
 23f726a:	f001 fd0d 	bl	23f8c88 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23f726e:	b160      	cbz	r0, 23f728a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23f7270:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23f7272:	a808      	add	r0, sp, #32
 23f7274:	f001 fc1c 	bl	23f8ab0 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23f7278:	a804      	add	r0, sp, #16
 23f727a:	f001 fc19 	bl	23f8ab0 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23f727e:	a801      	add	r0, sp, #4
 23f7280:	f7fe fa62 	bl	23f5748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
            }
            LOG_DEBUG(TRACE, "Device name mismatched.");
            return false;
        }
        return true;
    }
 23f7284:	4620      	mov	r0, r4
 23f7286:	b00d      	add	sp, #52	; 0x34
 23f7288:	bd30      	pop	{r4, r5, pc}
 23f728a:	4620      	mov	r0, r4
 23f728c:	a908      	add	r1, sp, #32
 23f728e:	f001 fcfb 	bl	23f8c88 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23f7292:	3410      	adds	r4, #16
 23f7294:	2800      	cmp	r0, #0
 23f7296:	d0e4      	beq.n	23f7262 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23f7298:	e7ea      	b.n	23f7270 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23f729a:	2400      	movs	r4, #0
 23f729c:	e7e9      	b.n	23f7272 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23f729e:	2401      	movs	r4, #1
 23f72a0:	e7ed      	b.n	23f727e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023f72a2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f72a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
 23f72a4:	2300      	movs	r3, #0
 23f72a6:	e9c0 3300 	strd	r3, r3, [r0]
 23f72aa:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f72ac:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f72ae:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f72b0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f72b2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f72b4:	dd40      	ble.n	23f7338 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
    return ::malloc(size);
 23f72b6:	00f8      	lsls	r0, r7, #3
 23f72b8:	f7fd fa58 	bl	23f476c <malloc>
            if (!d) {
 23f72bc:	4604      	mov	r4, r0
 23f72be:	b3d8      	cbz	r0, 23f7338 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
            move(d, data_, data_ + size_);
 23f72c0:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
 23f72c4:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23f72c6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
 23f72ca:	d910      	bls.n	23f72ee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
 23f72cc:	429c      	cmp	r4, r3
 23f72ce:	d20f      	bcs.n	23f72f0 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
 23f72d0:	3b08      	subs	r3, #8
            dest += end - p - 1;
 23f72d2:	1a1a      	subs	r2, r3, r0
 23f72d4:	f1a0 0c08 	sub.w	ip, r0, #8
 23f72d8:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
 23f72da:	459c      	cmp	ip, r3
 23f72dc:	d018      	beq.n	23f7310 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
 23f72de:	b11a      	cbz	r2, 23f72e8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
 23f72e0:	6819      	ldr	r1, [r3, #0]
 23f72e2:	6011      	str	r1, [r2, #0]
 23f72e4:	6859      	ldr	r1, [r3, #4]
 23f72e6:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
 23f72e8:	3b08      	subs	r3, #8
 23f72ea:	3a08      	subs	r2, #8
 23f72ec:	e7f5      	b.n	23f72da <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
 23f72ee:	d00f      	beq.n	23f7310 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
 23f72f0:	4601      	mov	r1, r0
 23f72f2:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
 23f72f4:	428b      	cmp	r3, r1
 23f72f6:	d00b      	beq.n	23f7310 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
 23f72f8:	b13a      	cbz	r2, 23f730a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
 23f72fa:	f8d1 c000 	ldr.w	ip, [r1]
 23f72fe:	f8c2 c000 	str.w	ip, [r2]
 23f7302:	f8d1 c004 	ldr.w	ip, [r1, #4]
 23f7306:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
 23f730a:	3108      	adds	r1, #8
 23f730c:	3208      	adds	r2, #8
 23f730e:	e7f1      	b.n	23f72f4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
 23f7310:	f7fd fa3a 	bl	23f4788 <free>
        data_ = d;
 23f7314:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f7316:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f7318:	e9d6 3100 	ldrd	r3, r1, [r6]
 23f731c:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23f7320:	4298      	cmp	r0, r3
 23f7322:	d008      	beq.n	23f7336 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x94>
 23f7324:	681a      	ldr	r2, [r3, #0]
 23f7326:	3408      	adds	r4, #8
 23f7328:	f844 2c08 	str.w	r2, [r4, #-8]
 23f732c:	685a      	ldr	r2, [r3, #4]
 23f732e:	3308      	adds	r3, #8
 23f7330:	f844 2c04 	str.w	r2, [r4, #-4]
 23f7334:	e7f4      	b.n	23f7320 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
 23f7336:	6069      	str	r1, [r5, #4]
}
 23f7338:	4628      	mov	r0, r5
 23f733a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f733c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f733c:	b570      	push	{r4, r5, r6, lr}
 23f733e:	4604      	mov	r4, r0
        capacity_(0) {
 23f7340:	2000      	movs	r0, #0
 23f7342:	e9c4 0000 	strd	r0, r0, [r4]
 23f7346:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7348:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f734a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f734c:	4286      	cmp	r6, r0
 23f734e:	dd12      	ble.n	23f7376 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23f7350:	0071      	lsls	r1, r6, #1
 23f7352:	f7fd fa27 	bl	23f47a4 <realloc>
            if (!d) {
 23f7356:	b170      	cbz	r0, 23f7376 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23f7358:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f735a:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f735c:	e9d5 3200 	ldrd	r3, r2, [r5]
 23f7360:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23f7364:	429a      	cmp	r2, r3
 23f7366:	d004      	beq.n	23f7372 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23f7368:	f833 1b02 	ldrh.w	r1, [r3], #2
 23f736c:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23f7370:	e7f8      	b.n	23f7364 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23f7372:	686b      	ldr	r3, [r5, #4]
 23f7374:	6063      	str	r3, [r4, #4]
}
 23f7376:	4620      	mov	r0, r4
 23f7378:	bd70      	pop	{r4, r5, r6, pc}

023f737a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23f737a:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23f737c:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23f737e:	4604      	mov	r4, r0
        if (!dismissed_) {
 23f7380:	b923      	cbnz	r3, 23f738c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                LOG_DEBUG(TRACE, "Custom data mismatched.");
                return false;
            }
            if (srLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(srLen);
                SCOPE_GUARD({
 23f7382:	6803      	ldr	r3, [r0, #0]
 23f7384:	6818      	ldr	r0, [r3, #0]
 23f7386:	b108      	cbz	r0, 23f738c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23f7388:	f7fd f9fe 	bl	23f4788 <free>
            func_();
        }
    }
 23f738c:	4620      	mov	r0, r4
 23f738e:	bd10      	pop	{r4, pc}

023f7390 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23f7390:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23f7392:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23f7394:	4604      	mov	r4, r0
        if (!dismissed_) {
 23f7396:	b923      	cbnz	r3, 23f73a2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                    return true;
                }
            }
            if (advLen == filterCustomDatalen) {
                uint8_t* buf = (uint8_t*)malloc(advLen);
                SCOPE_GUARD({
 23f7398:	6803      	ldr	r3, [r0, #0]
 23f739a:	6818      	ldr	r0, [r3, #0]
 23f739c:	b108      	cbz	r0, 23f73a2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23f739e:	f7fd f9f3 	bl	23f4788 <free>
    }
 23f73a2:	4620      	mov	r0, r4
 23f73a4:	bd10      	pop	{r4, pc}
	...

023f73a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23f73a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23f73ac:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23f73b0:	460f      	mov	r7, r1
 23f73b2:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23f73b4:	f1b8 0f00 	cmp.w	r8, #0
 23f73b8:	d072      	beq.n	23f74a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23f73ba:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23f73bc:	2d00      	cmp	r5, #0
 23f73be:	d06f      	beq.n	23f74a0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23f73c0:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23f73c4:	231f      	movs	r3, #31
 23f73c6:	2200      	movs	r2, #0
 23f73c8:	21ff      	movs	r1, #255	; 0xff
 23f73ca:	4648      	mov	r0, r9
 23f73cc:	f7ff fb6b 	bl	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23f73d0:	23ff      	movs	r3, #255	; 0xff
        return advertisingData_;
 23f73d2:	3708      	adds	r7, #8
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23f73d4:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23f73d6:	2200      	movs	r2, #0
 23f73d8:	4619      	mov	r1, r3
 23f73da:	4638      	mov	r0, r7
 23f73dc:	f7ff fb63 	bl	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23f73e0:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23f73e2:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23f73e4:	d006      	beq.n	23f73f4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23f73e6:	42ae      	cmp	r6, r5
 23f73e8:	d030      	beq.n	23f744c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23f73ea:	2400      	movs	r4, #0
            }
            LOG_DEBUG(TRACE, "Custom data mismatched.");
            return false;
        }
        return true;
    }
 23f73ec:	4620      	mov	r0, r4
 23f73ee:	b00f      	add	sp, #60	; 0x3c
 23f73f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23f73f4:	4620      	mov	r0, r4
 23f73f6:	f7fd f9b9 	bl	23f476c <malloc>
            dismissed_(false) {
 23f73fa:	ab03      	add	r3, sp, #12
 23f73fc:	9304      	str	r3, [sp, #16]
 23f73fe:	2300      	movs	r3, #0
 23f7400:	4604      	mov	r4, r0
 23f7402:	9003      	str	r0, [sp, #12]
 23f7404:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23f7408:	b970      	cbnz	r0, 23f7428 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23f740a:	2320      	movs	r3, #32
 23f740c:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23f7410:	4b24      	ldr	r3, [pc, #144]	; (23f74a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23f7412:	4925      	ldr	r1, [pc, #148]	; (23f74a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23f7414:	9300      	str	r3, [sp, #0]
 23f7416:	aa06      	add	r2, sp, #24
 23f7418:	4603      	mov	r3, r0
 23f741a:	2032      	movs	r0, #50	; 0x32
 23f741c:	f7fd f872 	bl	23f4504 <log_message>
                    return false;
 23f7420:	a804      	add	r0, sp, #16
 23f7422:	f7ff ffaa 	bl	23f737a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23f7426:	e7e1      	b.n	23f73ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23f7428:	4602      	mov	r2, r0
 23f742a:	21ff      	movs	r1, #255	; 0xff
 23f742c:	462b      	mov	r3, r5
 23f742e:	4648      	mov	r0, r9
 23f7430:	f7ff fb39 	bl	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23f7434:	462a      	mov	r2, r5
 23f7436:	4641      	mov	r1, r8
 23f7438:	9803      	ldr	r0, [sp, #12]
 23f743a:	f003 fe0c 	bl	23fb056 <memcmp>
 23f743e:	b118      	cbz	r0, 23f7448 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23f7440:	a804      	add	r0, sp, #16
 23f7442:	f7ff ff9a 	bl	23f737a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23f7446:	e7ce      	b.n	23f73e6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23f7448:	2401      	movs	r4, #1
 23f744a:	e7e9      	b.n	23f7420 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23f744c:	4628      	mov	r0, r5
 23f744e:	f7fd f98d 	bl	23f476c <malloc>
 23f7452:	2400      	movs	r4, #0
 23f7454:	ab03      	add	r3, sp, #12
 23f7456:	4606      	mov	r6, r0
 23f7458:	9003      	str	r0, [sp, #12]
 23f745a:	9304      	str	r3, [sp, #16]
 23f745c:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23f7460:	b978      	cbnz	r0, 23f7482 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23f7462:	2320      	movs	r3, #32
 23f7464:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23f7468:	4b0e      	ldr	r3, [pc, #56]	; (23f74a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23f746a:	490f      	ldr	r1, [pc, #60]	; (23f74a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23f746c:	9300      	str	r3, [sp, #0]
 23f746e:	aa06      	add	r2, sp, #24
 23f7470:	4603      	mov	r3, r0
 23f7472:	2032      	movs	r0, #50	; 0x32
 23f7474:	f7fd f846 	bl	23f4504 <log_message>
                    return false;
 23f7478:	4634      	mov	r4, r6
 23f747a:	a804      	add	r0, sp, #16
 23f747c:	f7ff ff88 	bl	23f7390 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23f7480:	e7b4      	b.n	23f73ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23f7482:	4602      	mov	r2, r0
 23f7484:	21ff      	movs	r1, #255	; 0xff
 23f7486:	462b      	mov	r3, r5
 23f7488:	4638      	mov	r0, r7
 23f748a:	f7ff fb0c 	bl	23f6aa6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23f748e:	462a      	mov	r2, r5
 23f7490:	4641      	mov	r1, r8
 23f7492:	9803      	ldr	r0, [sp, #12]
 23f7494:	f003 fddf 	bl	23fb056 <memcmp>
 23f7498:	2800      	cmp	r0, #0
 23f749a:	d1ee      	bne.n	23f747a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23f749c:	2401      	movs	r4, #1
 23f749e:	e7ec      	b.n	23f747a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23f74a0:	2401      	movs	r4, #1
 23f74a2:	e7a3      	b.n	23f73ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23f74a4:	023ff857 	.word	0x023ff857
 23f74a8:	023ff7cf 	.word	0x023ff7cf

023f74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23f74ac:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23f74ae:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23f74b0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f74b2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f74b4:	dd03      	ble.n	23f74be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23f74b6:	f7fd f975 	bl	23f47a4 <realloc>
            if (!d) {
 23f74ba:	b918      	cbnz	r0, 23f74c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23f74bc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23f74be:	f7fd f963 	bl	23f4788 <free>
        T* d = nullptr;
 23f74c2:	2000      	movs	r0, #0
        data_ = d;
 23f74c4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f74c6:	60a5      	str	r5, [r4, #8]
        return true;
 23f74c8:	2001      	movs	r0, #1
 23f74ca:	e7f7      	b.n	23f74bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023f74cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23f74cc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23f74ce:	6883      	ldr	r3, [r0, #8]
 23f74d0:	428b      	cmp	r3, r1
 23f74d2:	da02      	bge.n	23f74da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23f74d4:	f7ff ffea 	bl	23f74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23f74d8:	bd08      	pop	{r3, pc}
    return true;
 23f74da:	2001      	movs	r0, #1
 23f74dc:	e7fc      	b.n	23f74d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f74de:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f74e0:	2300      	movs	r3, #0
 23f74e2:	e9c0 3300 	strd	r3, r3, [r0]
 23f74e6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f74e8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f74ea:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f74ec:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f74ee:	4299      	cmp	r1, r3
 23f74f0:	dd10      	ble.n	23f7514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23f74f2:	f7ff ffdb 	bl	23f74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23f74f6:	b168      	cbz	r0, 23f7514 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f74f8:	e9d5 3100 	ldrd	r3, r1, [r5]
 23f74fc:	6822      	ldr	r2, [r4, #0]
 23f74fe:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23f7500:	4299      	cmp	r1, r3
 23f7502:	d005      	beq.n	23f7510 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23f7504:	b10a      	cbz	r2, 23f750a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23f7506:	7818      	ldrb	r0, [r3, #0]
 23f7508:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23f750a:	3301      	adds	r3, #1
 23f750c:	3201      	adds	r2, #1
 23f750e:	e7f7      	b.n	23f7500 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23f7510:	686b      	ldr	r3, [r5, #4]
 23f7512:	6063      	str	r3, [r4, #4]
}
 23f7514:	4620      	mov	r0, r4
 23f7516:	bd38      	pop	{r3, r4, r5, pc}

023f7518 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23f7518:	b538      	push	{r3, r4, r5, lr}
 23f751a:	4604      	mov	r4, r0
 23f751c:	460d      	mov	r5, r1
    address_ = addr.address_;
 23f751e:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23f7520:	3008      	adds	r0, #8
 23f7522:	f840 3c08 	str.w	r3, [r0, #-8]
 23f7526:	684b      	ldr	r3, [r1, #4]
 23f7528:	3108      	adds	r1, #8
 23f752a:	f840 3c04 	str.w	r3, [r0, #-4]
 23f752e:	f7ff ffd6 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23f7532:	f105 0114 	add.w	r1, r5, #20
 23f7536:	f104 0014 	add.w	r0, r4, #20
 23f753a:	f7ff ffd0 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23f753e:	f895 3020 	ldrb.w	r3, [r5, #32]
 23f7542:	4620      	mov	r0, r4
 23f7544:	f884 3020 	strb.w	r3, [r4, #32]
 23f7548:	bd38      	pop	{r3, r4, r5, pc}

023f754a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23f754a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f754c:	4604      	mov	r4, r0
 23f754e:	a801      	add	r0, sp, #4
 23f7550:	f7ff ffc5 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23f7554:	9b01      	ldr	r3, [sp, #4]
 23f7556:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7558:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f755a:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f755c:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f755e:	6062      	str	r2, [r4, #4]
 23f7560:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7562:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7564:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f7566:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7568:	9001      	str	r0, [sp, #4]
 23f756a:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23f756c:	f7fd f90c 	bl	23f4788 <free>
 23f7570:	b004      	add	sp, #16
 23f7572:	bd10      	pop	{r4, pc}

023f7574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23f7574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7578:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f757a:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23f757c:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f757e:	4419      	add	r1, r3
 23f7580:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23f7582:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f7584:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23f7586:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f7588:	dc12      	bgt.n	23f75b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23f758a:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f758c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f758e:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7590:	4631      	mov	r1, r6
 23f7592:	1bd2      	subs	r2, r2, r7
 23f7594:	1970      	adds	r0, r6, r5
 23f7596:	f003 fd7b 	bl	23fb090 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23f759a:	462a      	mov	r2, r5
 23f759c:	4641      	mov	r1, r8
 23f759e:	4630      	mov	r0, r6
 23f75a0:	f003 fd69 	bl	23fb076 <memcpy>
    return true;
 23f75a4:	2001      	movs	r0, #1
    size_ += n;
 23f75a6:	6863      	ldr	r3, [r4, #4]
 23f75a8:	442b      	add	r3, r5
 23f75aa:	6063      	str	r3, [r4, #4]
}
 23f75ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f75b0:	f7ff ff7c 	bl	23f74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23f75b4:	2800      	cmp	r0, #0
 23f75b6:	d1e8      	bne.n	23f758a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23f75b8:	e7f8      	b.n	23f75ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023f75ba <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23f75ba:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23f75bc:	460a      	mov	r2, r1
 23f75be:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23f75c0:	b510      	push	{r4, lr}
 23f75c2:	4604      	mov	r4, r0
    size_ = 0;
 23f75c4:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23f75c6:	b102      	cbz	r2, 23f75ca <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23f75c8:	b90b      	cbnz	r3, 23f75ce <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23f75ca:	2000      	movs	r0, #0
}
 23f75cc:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23f75ce:	2bff      	cmp	r3, #255	; 0xff
 23f75d0:	bf28      	it	cs
 23f75d2:	23ff      	movcs	r3, #255	; 0xff
 23f75d4:	f7ff ffce 	bl	23f7574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23f75d8:	2800      	cmp	r0, #0
 23f75da:	d0f7      	beq.n	23f75cc <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23f75dc:	6860      	ldr	r0, [r4, #4]
 23f75de:	e7f5      	b.n	23f75cc <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023f75e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23f75e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f75e2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f75e4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23f75e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23f75ea:	4604      	mov	r4, r0
 23f75ec:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f75ee:	da0b      	bge.n	23f7608 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23f75f0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f75f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f75f4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f75f6:	1b52      	subs	r2, r2, r5
 23f75f8:	1c48      	adds	r0, r1, #1
 23f75fa:	f003 fd49 	bl	23fb090 <memmove>
    new(p) T(std::move(value));
 23f75fe:	557e      	strb	r6, [r7, r5]
    ++size_;
 23f7600:	6863      	ldr	r3, [r4, #4]
 23f7602:	3301      	adds	r3, #1
 23f7604:	6063      	str	r3, [r4, #4]
}
 23f7606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7608:	3101      	adds	r1, #1
 23f760a:	f7ff ff4f 	bl	23f74ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23f760e:	2800      	cmp	r0, #0
 23f7610:	d1ee      	bne.n	23f75f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23f7612:	e7f8      	b.n	23f7606 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023f7614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f7614:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23f7616:	6841      	ldr	r1, [r0, #4]
 23f7618:	f7ff bfe2 	b.w	23f75e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023f761c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23f761c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f7620:	4604      	mov	r4, r0
 23f7622:	461d      	mov	r5, r3
 23f7624:	460f      	mov	r7, r1
 23f7626:	ab01      	add	r3, sp, #4
 23f7628:	4690      	mov	r8, r2
 23f762a:	460a      	mov	r2, r1
 23f762c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f7630:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23f7634:	f7fe ff6c 	bl	23f6510 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23f7638:	1cae      	adds	r6, r5, #2
 23f763a:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23f763c:	6863      	ldr	r3, [r4, #4]
 23f763e:	f1b9 0f00 	cmp.w	r9, #0
 23f7642:	d126      	bne.n	23f7692 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23f7644:	b328      	cbz	r0, 23f7692 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23f7646:	4433      	add	r3, r6
 23f7648:	1a1b      	subs	r3, r3, r0
 23f764a:	2bff      	cmp	r3, #255	; 0xff
 23f764c:	d809      	bhi.n	23f7662 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23f764e:	4620      	mov	r0, r4
 23f7650:	9901      	ldr	r1, [sp, #4]
 23f7652:	f7ff fd14 	bl	23f707e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23f7656:	6861      	ldr	r1, [r4, #4]
 23f7658:	4620      	mov	r0, r4
 23f765a:	4431      	add	r1, r6
 23f765c:	f7ff ff36 	bl	23f74cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23f7660:	b918      	cbnz	r0, 23f766a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23f7662:	6860      	ldr	r0, [r4, #4]
}
 23f7664:	b003      	add	sp, #12
 23f7666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23f766a:	1c6a      	adds	r2, r5, #1
 23f766c:	4620      	mov	r0, r4
 23f766e:	9901      	ldr	r1, [sp, #4]
 23f7670:	b2d2      	uxtb	r2, r2
 23f7672:	f7ff ffb5 	bl	23f75e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23f7676:	9901      	ldr	r1, [sp, #4]
 23f7678:	463a      	mov	r2, r7
 23f767a:	3101      	adds	r1, #1
 23f767c:	4620      	mov	r0, r4
 23f767e:	f7ff ffaf 	bl	23f75e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23f7682:	462b      	mov	r3, r5
 23f7684:	4642      	mov	r2, r8
 23f7686:	9901      	ldr	r1, [sp, #4]
 23f7688:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23f768a:	4620      	mov	r0, r4
 23f768c:	f7ff ff72 	bl	23f7574 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23f7690:	e7e7      	b.n	23f7662 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23f7692:	18f1      	adds	r1, r6, r3
 23f7694:	29ff      	cmp	r1, #255	; 0xff
 23f7696:	d8e4      	bhi.n	23f7662 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23f7698:	4620      	mov	r0, r4
 23f769a:	f7ff ff17 	bl	23f74cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23f769e:	2800      	cmp	r0, #0
 23f76a0:	d0df      	beq.n	23f7662 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23f76a2:	1c69      	adds	r1, r5, #1
 23f76a4:	4620      	mov	r0, r4
 23f76a6:	b2c9      	uxtb	r1, r1
 23f76a8:	f7ff ffb4 	bl	23f7614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23f76ac:	4639      	mov	r1, r7
 23f76ae:	4620      	mov	r0, r4
 23f76b0:	f7ff ffb0 	bl	23f7614 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23f76b4:	462b      	mov	r3, r5
 23f76b6:	4642      	mov	r2, r8
 23f76b8:	6861      	ldr	r1, [r4, #4]
 23f76ba:	e7e6      	b.n	23f768a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023f76bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23f76bc:	b430      	push	{r4, r5}
 23f76be:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23f76c2:	b11a      	cbz	r2, 23f76cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23f76c4:	9502      	str	r5, [sp, #8]
}
 23f76c6:	bc30      	pop	{r4, r5}
 23f76c8:	f7ff bfa8 	b.w	23f761c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23f76cc:	6840      	ldr	r0, [r0, #4]
}
 23f76ce:	bc30      	pop	{r4, r5}
 23f76d0:	4770      	bx	lr

023f76d2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23f76d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23f76d4:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23f76d6:	2206      	movs	r2, #6
 23f76d8:	e9c0 3300 	strd	r3, r3, [r0]
 23f76dc:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23f76de:	9300      	str	r3, [sp, #0]
 23f76e0:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23f76e2:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23f76e4:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23f76e8:	4619      	mov	r1, r3
 23f76ea:	f10d 020f 	add.w	r2, sp, #15
 23f76ee:	f7ff ffe5 	bl	23f76bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23f76f2:	4620      	mov	r0, r4
 23f76f4:	b004      	add	sp, #16
 23f76f6:	bd10      	pop	{r4, pc}

023f76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23f76f8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f76fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f76fc:	4604      	mov	r4, r0
 23f76fe:	460d      	mov	r5, r1
 23f7700:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f7702:	d914      	bls.n	23f772e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23f7704:	4290      	cmp	r0, r2
 23f7706:	d213      	bcs.n	23f7730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23f7708:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23f770c:	1a75      	subs	r5, r6, r1
 23f770e:	f1a1 0708 	sub.w	r7, r1, #8
 23f7712:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f7714:	42b7      	cmp	r7, r6
 23f7716:	d018      	beq.n	23f774a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23f7718:	b11c      	cbz	r4, 23f7722 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23f771a:	4631      	mov	r1, r6
 23f771c:	4620      	mov	r0, r4
 23f771e:	f7ff fce1 	bl	23f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23f7722:	1d30      	adds	r0, r6, #4
 23f7724:	f7fd fbdc 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23f7728:	3e08      	subs	r6, #8
 23f772a:	3c08      	subs	r4, #8
 23f772c:	e7f2      	b.n	23f7714 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23f772e:	d00c      	beq.n	23f774a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23f7730:	42b5      	cmp	r5, r6
 23f7732:	d00a      	beq.n	23f774a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23f7734:	b11c      	cbz	r4, 23f773e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23f7736:	4629      	mov	r1, r5
 23f7738:	4620      	mov	r0, r4
 23f773a:	f7ff fcd3 	bl	23f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23f773e:	1d28      	adds	r0, r5, #4
 23f7740:	f7fd fbce 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23f7744:	3508      	adds	r5, #8
 23f7746:	3408      	adds	r4, #8
 23f7748:	e7f2      	b.n	23f7730 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23f774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f774c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f774c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f774e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23f7750:	6846      	ldr	r6, [r0, #4]
 23f7752:	4668      	mov	r0, sp
 23f7754:	f7ff fcc6 	bl	23f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7758:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23f775c:	429f      	cmp	r7, r3
 23f775e:	db12      	blt.n	23f7786 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23f7760:	3701      	adds	r7, #1
        if (n > 0) {
 23f7762:	2f00      	cmp	r7, #0
 23f7764:	dd29      	ble.n	23f77ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23f7766:	00f8      	lsls	r0, r7, #3
 23f7768:	f7fd f800 	bl	23f476c <malloc>
            if (!d) {
 23f776c:	4605      	mov	r5, r0
 23f776e:	b1f0      	cbz	r0, 23f77ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23f7770:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f7774:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23f7778:	f7ff ffbe 	bl	23f76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23f777c:	6820      	ldr	r0, [r4, #0]
 23f777e:	f7fd f803 	bl	23f4788 <free>
        data_ = d;
 23f7782:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f7784:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23f7786:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f7788:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f778a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23f778e:	4631      	mov	r1, r6
 23f7790:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23f7794:	f106 0008 	add.w	r0, r6, #8
 23f7798:	f7ff ffae 	bl	23f76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23f779c:	b11e      	cbz	r6, 23f77a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23f779e:	4669      	mov	r1, sp
 23f77a0:	4630      	mov	r0, r6
 23f77a2:	f7ff fc9f 	bl	23f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23f77a6:	2501      	movs	r5, #1
    ++size_;
 23f77a8:	6863      	ldr	r3, [r4, #4]
 23f77aa:	3301      	adds	r3, #1
 23f77ac:	6063      	str	r3, [r4, #4]
 23f77ae:	a801      	add	r0, sp, #4
 23f77b0:	f7fd fb96 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f77b4:	4628      	mov	r0, r5
 23f77b6:	b003      	add	sp, #12
 23f77b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23f77ba:	2500      	movs	r5, #0
 23f77bc:	e7de      	b.n	23f777c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023f77be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f77be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f77c0:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23f77c2:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f77c6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23f77c8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23f77cc:	42a6      	cmp	r6, r4
 23f77ce:	d005      	beq.n	23f77dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23f77d0:	4639      	mov	r1, r7
 23f77d2:	4620      	mov	r0, r4
 23f77d4:	f7ff fb53 	bl	23f6e7e <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23f77d8:	b108      	cbz	r0, 23f77de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23f77da:	b914      	cbnz	r4, 23f77e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23f77dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23f77de:	3408      	adds	r4, #8
 23f77e0:	e7f4      	b.n	23f77cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23f77e2:	1d20      	adds	r0, r4, #4
 23f77e4:	f7fd fb7c 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23f77e8:	e9d5 3200 	ldrd	r3, r2, [r5]
 23f77ec:	4620      	mov	r0, r4
 23f77ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23f77f2:	f104 0108 	add.w	r1, r4, #8
 23f77f6:	f7ff ff7f 	bl	23f76f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23f77fa:	686b      	ldr	r3, [r5, #4]
 23f77fc:	3b01      	subs	r3, #1
 23f77fe:	606b      	str	r3, [r5, #4]
    return true;
 23f7800:	e7ec      	b.n	23f77dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023f7804 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23f7804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7808:	4605      	mov	r5, r0
 23f780a:	b090      	sub	sp, #64	; 0x40
        WiringBleLock lk;
 23f780c:	a805      	add	r0, sp, #20
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23f780e:	460c      	mov	r4, r1
        WiringBleLock lk;
 23f7810:	f7fe ff20 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23f7814:	682e      	ldr	r6, [r5, #0]
 23f7816:	1ef3      	subs	r3, r6, #3
 23f7818:	2b0d      	cmp	r3, #13
 23f781a:	d86a      	bhi.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23f781c:	e8df f013 	tbh	[pc, r3, lsl #1]
 23f7820:	0078000e 	.word	0x0078000e
 23f7824:	00fe0069 	.word	0x00fe0069
 23f7828:	00690069 	.word	0x00690069
 23f782c:	00690069 	.word	0x00690069
 23f7830:	00c80069 	.word	0x00c80069
 23f7834:	00c800c8 	.word	0x00c800c8
 23f7838:	00c800c8 	.word	0x00c800c8
        return address_;
 23f783c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23f783e:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23f7842:	3002      	adds	r0, #2
 23f7844:	f7fe ff40 	bl	23f66c8 <_ZNK8particle10BleAddress7isValidEv>
 23f7848:	b338      	cbz	r0, 23f789a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23f784a:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23f784c:	89aa      	ldrh	r2, [r5, #12]
 23f784e:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23f7852:	a808      	add	r0, sp, #32
 23f7854:	801a      	strh	r2, [r3, #0]
 23f7856:	f7ff fc45 	bl	23f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23f785a:	a908      	add	r1, sp, #32
 23f785c:	4630      	mov	r0, r6
 23f785e:	f7ff ff75 	bl	23f774c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23f7862:	a809      	add	r0, sp, #36	; 0x24
 23f7864:	f7fd fb3c 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23f7868:	a808      	add	r0, sp, #32
 23f786a:	f7ff faad 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f786e:	9b08      	ldr	r3, [sp, #32]
 23f7870:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23f7874:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f7876:	6263      	str	r3, [r4, #36]	; 0x24
 23f7878:	f7fe fec6 	bl	23f6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23f787c:	a809      	add	r0, sp, #36	; 0x24
 23f787e:	f7fd fb2f 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23f7882:	2120      	movs	r1, #32
 23f7884:	2300      	movs	r3, #0
 23f7886:	e9cd 1308 	strd	r1, r3, [sp, #32]
 23f788a:	4a6e      	ldr	r2, [pc, #440]	; (23f7a44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
                    LOG(TRACE, "Disconnected");
 23f788c:	9200      	str	r2, [sp, #0]
 23f788e:	2001      	movs	r0, #1
 23f7890:	496d      	ldr	r1, [pc, #436]	; (23f7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23f7892:	aa08      	add	r2, sp, #32
 23f7894:	f7fc fe36 	bl	23f4504 <log_message>
 23f7898:	e02b      	b.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23f789a:	a806      	add	r0, sp, #24
 23f789c:	f7ff fa94 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23f78a0:	89aa      	ldrh	r2, [r5, #12]
 23f78a2:	9b06      	ldr	r3, [sp, #24]
 23f78a4:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23f78a6:	6869      	ldr	r1, [r5, #4]
 23f78a8:	9806      	ldr	r0, [sp, #24]
 23f78aa:	3108      	adds	r1, #8
 23f78ac:	3002      	adds	r0, #2
 23f78ae:	f7fe fef0 	bl	23f6692 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23f78b2:	a906      	add	r1, sp, #24
 23f78b4:	a808      	add	r0, sp, #32
 23f78b6:	f7ff fc15 	bl	23f70e4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23f78ba:	4630      	mov	r0, r6
 23f78bc:	a908      	add	r1, sp, #32
 23f78be:	f7ff ff45 	bl	23f774c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23f78c2:	4605      	mov	r5, r0
 23f78c4:	a809      	add	r0, sp, #36	; 0x24
 23f78c6:	f7fd fb0b 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f78ca:	b9c5      	cbnz	r5, 23f78fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23f78cc:	2320      	movs	r3, #32
 23f78ce:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23f78d2:	4b5e      	ldr	r3, [pc, #376]	; (23f7a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23f78d4:	2001      	movs	r0, #1
 23f78d6:	495c      	ldr	r1, [pc, #368]	; (23f7a48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23f78d8:	9300      	str	r3, [sp, #0]
 23f78da:	aa08      	add	r2, sp, #32
 23f78dc:	462b      	mov	r3, r5
 23f78de:	f7fc fe11 	bl	23f4504 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23f78e2:	9b06      	ldr	r3, [sp, #24]
 23f78e4:	4629      	mov	r1, r5
 23f78e6:	8818      	ldrh	r0, [r3, #0]
 23f78e8:	f7fc fcf4 	bl	23f42d4 <hal_ble_gap_disconnect>
 23f78ec:	a807      	add	r0, sp, #28
 23f78ee:	f7fd faf7 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23f78f2:	a805      	add	r0, sp, #20
 23f78f4:	f7fe febc 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23f78f8:	b010      	add	sp, #64	; 0x40
 23f78fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
 23f78fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f7900:	b123      	cbz	r3, 23f790c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23f7902:	a906      	add	r1, sp, #24
 23f7904:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23f7908:	f7ff fc2b 	bl	23f7162 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23f790c:	a807      	add	r0, sp, #28
 23f790e:	e7b6      	b.n	23f787e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23f7910:	89a9      	ldrh	r1, [r5, #12]
 23f7912:	4620      	mov	r0, r4
 23f7914:	f7ff f959 	bl	23f6bca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23f7918:	4601      	mov	r1, r0
 23f791a:	2800      	cmp	r0, #0
 23f791c:	d0e9      	beq.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23f791e:	9003      	str	r0, [sp, #12]
 23f7920:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23f7924:	f7ff faab 	bl	23f6e7e <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23f7928:	f104 0718 	add.w	r7, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23f792c:	9903      	ldr	r1, [sp, #12]
 23f792e:	b140      	cbz	r0, 23f7942 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23f7930:	4638      	mov	r0, r7
 23f7932:	f7ff ff44 	bl	23f77be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23f7936:	2220      	movs	r2, #32
 23f7938:	2300      	movs	r3, #0
 23f793a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23f793e:	4a44      	ldr	r2, [pc, #272]	; (23f7a50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x24c>)
 23f7940:	e7a4      	b.n	23f788c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23f7942:	f64f 70ff 	movw	r0, #65535	; 0xffff
      { return _M_ptr; }
 23f7946:	680d      	ldr	r5, [r1, #0]
    return data_ + size_;
 23f7948:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23f794c:	8028      	strh	r0, [r5, #0]
 23f794e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23f7952:	429a      	cmp	r2, r3
 23f7954:	d003      	beq.n	23f795e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23f7956:	f853 6b08 	ldr.w	r6, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23f795a:	8070      	strh	r0, [r6, #2]
        for (auto& characteristic : characteristics()) {
 23f795c:	e7f9      	b.n	23f7952 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23f795e:	e9d5 6303 	ldrd	r6, r3, [r5, #12]
 23f7962:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; p != end; ++p) {
 23f7966:	45b0      	cmp	r8, r6
 23f7968:	d006      	beq.n	23f7978 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x174>
      ~__shared_ptr() = default;
 23f796a:	1d30      	adds	r0, r6, #4
 23f796c:	9103      	str	r1, [sp, #12]
 23f796e:	3608      	adds	r6, #8
 23f7970:	f7fd fab6 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7974:	9903      	ldr	r1, [sp, #12]
 23f7976:	e7f6      	b.n	23f7966 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23f7978:	2300      	movs	r3, #0
 23f797a:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23f797c:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
 23f7980:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; p != end; ++p) {
 23f7984:	45b0      	cmp	r8, r6
 23f7986:	d006      	beq.n	23f7996 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
 23f7988:	1d30      	adds	r0, r6, #4
 23f798a:	9103      	str	r1, [sp, #12]
 23f798c:	3608      	adds	r6, #8
 23f798e:	f7fd faa7 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7992:	9903      	ldr	r1, [sp, #12]
 23f7994:	e7f6      	b.n	23f7984 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x180>
    size_ = 0;
 23f7996:	2300      	movs	r3, #0
 23f7998:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23f799a:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23f799c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23f799e:	2b00      	cmp	r3, #0
 23f79a0:	d0c6      	beq.n	23f7930 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                            impl->disconnectedCallback_(*peer);
 23f79a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23f79a6:	9103      	str	r1, [sp, #12]
 23f79a8:	f7ff fbdb 	bl	23f7162 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23f79ac:	9903      	ldr	r1, [sp, #12]
 23f79ae:	e7bf      	b.n	23f7930 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23f79b0:	4620      	mov	r0, r4
 23f79b2:	89a9      	ldrh	r1, [r5, #12]
 23f79b4:	f7ff f909 	bl	23f6bca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23f79b8:	2800      	cmp	r0, #0
 23f79ba:	d09a      	beq.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23f79bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23f79be:	2b00      	cmp	r3, #0
 23f79c0:	d097      	beq.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23f79c2:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23f79c4:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23f79c6:	f8ad 301e 	strh.w	r3, [sp, #30]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23f79ca:	d001      	beq.n	23f79d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1cc>
 23f79cc:	2e10      	cmp	r6, #16
 23f79ce:	d117      	bne.n	23f7a00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1fc>
                        BlePairingEventPayload payload = {};
 23f79d0:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23f79d2:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23f79d4:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23f79d6:	2506      	movs	r5, #6
                        };
 23f79d8:	f88d 301d 	strb.w	r3, [sp, #29]
 23f79dc:	9106      	str	r1, [sp, #24]
 23f79de:	ab0b      	add	r3, sp, #44	; 0x2c
 23f79e0:	f88d 201c 	strb.w	r2, [sp, #28]
 23f79e4:	9008      	str	r0, [sp, #32]
                            .type = static_cast<BlePairingEventType>(event->type),
 23f79e6:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
                        };
 23f79ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 23f79ee:	950a      	str	r5, [sp, #40]	; 0x28
 23f79f0:	e883 0003 	stmia.w	r3, {r0, r1}
 23f79f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23f79f6:	a908      	add	r1, sp, #32
 23f79f8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23f79fc:	4798      	blx	r3
 23f79fe:	e778      	b.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23f7a00:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23f7a02:	bf01      	itttt	eq
 23f7a04:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23f7a06:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23f7a08:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23f7a0c:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23f7a0e:	bf1d      	ittte	ne
 23f7a10:	461a      	movne	r2, r3
 23f7a12:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23f7a14:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23f7a16:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23f7a1a:	e7dd      	b.n	23f79d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d4>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23f7a1c:	89a9      	ldrh	r1, [r5, #12]
 23f7a1e:	4620      	mov	r0, r4
 23f7a20:	f7ff f8d3 	bl	23f6bca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23f7a24:	4601      	mov	r1, r0
 23f7a26:	2800      	cmp	r0, #0
 23f7a28:	f43f af63 	beq.w	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23f7a2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23f7a2e:	2b00      	cmp	r3, #0
 23f7a30:	f43f af5f 	beq.w	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23f7a34:	686b      	ldr	r3, [r5, #4]
 23f7a36:	aa08      	add	r2, sp, #32
 23f7a38:	9308      	str	r3, [sp, #32]
 23f7a3a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23f7a3e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23f7a40:	4798      	blx	r3
 23f7a42:	e756      	b.n	23f78f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23f7a44:	023ff898 	.word	0x023ff898
 23f7a48:	023ff7cf 	.word	0x023ff7cf
 23f7a4c:	023ff872 	.word	0x023ff872
 23f7a50:	023ff8a2 	.word	0x023ff8a2

023f7a54 <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23f7a54:	b570      	push	{r4, r5, r6, lr}
 23f7a56:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23f7a58:	3064      	adds	r0, #100	; 0x64
 23f7a5a:	f7f6 fa89 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23f7a5e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23f7a62:	f7f6 fa85 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23f7a66:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23f7a6a:	f7f6 fa81 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23f7a6e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23f7a72:	f7f6 fa7d 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
 23f7a76:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23f7a7a:	f7fd fa31 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7a7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23f7a82:	f7fd fa2d 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23f7a86:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23f7a8a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23f7a8e:	42ae      	cmp	r6, r5
 23f7a90:	d004      	beq.n	23f7a9c <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23f7a92:	1d28      	adds	r0, r5, #4
 23f7a94:	f7fd fa24 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7a98:	3508      	adds	r5, #8
 23f7a9a:	e7f8      	b.n	23f7a8e <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23f7a9c:	69a0      	ldr	r0, [r4, #24]
 23f7a9e:	f7fc fe73 	bl	23f4788 <free>
 23f7aa2:	f104 000c 	add.w	r0, r4, #12
 23f7aa6:	f7ff fb40 	bl	23f712a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23f7aaa:	4620      	mov	r0, r4
 23f7aac:	f7ff fb2b 	bl	23f7106 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23f7ab0:	4620      	mov	r0, r4
 23f7ab2:	bd70      	pop	{r4, r5, r6, pc}

023f7ab4 <__tcf_0>:
    static BleLocalDevice instance;
 23f7ab4:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23f7ab6:	4b06      	ldr	r3, [pc, #24]	; (23f7ad0 <__tcf_0+0x1c>)
 23f7ab8:	681c      	ldr	r4, [r3, #0]
 23f7aba:	b144      	cbz	r4, 23f7ace <__tcf_0+0x1a>
	delete __ptr;
 23f7abc:	4620      	mov	r0, r4
 23f7abe:	f7ff ffc9 	bl	23f7a54 <_ZN8particle18BleLocalDeviceImplD1Ev>
 23f7ac2:	4620      	mov	r0, r4
 23f7ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f7ac8:	2174      	movs	r1, #116	; 0x74
 23f7aca:	f7f2 bd38 	b.w	23ea53e <_ZdlPvj>
 23f7ace:	bd10      	pop	{r4, pc}
 23f7ad0:	1007aeec 	.word	0x1007aeec

023f7ad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23f7ad4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23f7ad6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23f7ad8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f7ada:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f7adc:	dd05      	ble.n	23f7aea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23f7ade:	2114      	movs	r1, #20
 23f7ae0:	4369      	muls	r1, r5
 23f7ae2:	f7fc fe5f 	bl	23f47a4 <realloc>
            if (!d) {
 23f7ae6:	b918      	cbnz	r0, 23f7af0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23f7ae8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23f7aea:	f7fc fe4d 	bl	23f4788 <free>
        T* d = nullptr;
 23f7aee:	2000      	movs	r0, #0
        data_ = d;
 23f7af0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f7af2:	60a5      	str	r5, [r4, #8]
        return true;
 23f7af4:	2001      	movs	r0, #1
 23f7af6:	e7f7      	b.n	23f7ae8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023f7af8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23f7afc:	2400      	movs	r4, #0
 23f7afe:	e9c0 4400 	strd	r4, r4, [r0]
 23f7b02:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7b04:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7b06:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7b08:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7b0a:	42a1      	cmp	r1, r4
 23f7b0c:	dd1c      	ble.n	23f7b48 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23f7b0e:	f7ff ffe1 	bl	23f7ad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f7b12:	b1c8      	cbz	r0, 23f7b48 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f7b14:	e9d8 9300 	ldrd	r9, r3, [r8]
 23f7b18:	f04f 0c14 	mov.w	ip, #20
 23f7b1c:	fb0c 9c03 	mla	ip, ip, r3, r9
 23f7b20:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23f7b24:	eb09 0504 	add.w	r5, r9, r4
 23f7b28:	45ac      	cmp	ip, r5
 23f7b2a:	d00a      	beq.n	23f7b42 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23f7b2c:	eb1e 0604 	adds.w	r6, lr, r4
 23f7b30:	bf1e      	ittt	ne
 23f7b32:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23f7b34:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23f7b36:	682b      	ldrne	r3, [r5, #0]
 23f7b38:	f104 0414 	add.w	r4, r4, #20
 23f7b3c:	bf18      	it	ne
 23f7b3e:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23f7b40:	e7f0      	b.n	23f7b24 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23f7b42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23f7b46:	607b      	str	r3, [r7, #4]
}
 23f7b48:	4638      	mov	r0, r7
 23f7b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023f7b4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23f7b4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23f7b52:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f7b54:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23f7b56:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f7b5a:	19e9      	adds	r1, r5, r7
 23f7b5c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23f7b5e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f7b60:	dc17      	bgt.n	23f7b92 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23f7b62:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23f7b64:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f7b66:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23f7b68:	fb03 f907 	mul.w	r9, r3, r7
 23f7b6c:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23f7b6e:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7b70:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23f7b72:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7b74:	4631      	mov	r1, r6
 23f7b76:	eb06 0009 	add.w	r0, r6, r9
 23f7b7a:	f003 fa89 	bl	23fb090 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23f7b7e:	464a      	mov	r2, r9
 23f7b80:	4641      	mov	r1, r8
 23f7b82:	4630      	mov	r0, r6
 23f7b84:	f003 fa77 	bl	23fb076 <memcpy>
    size_ += n;
 23f7b88:	6863      	ldr	r3, [r4, #4]
 23f7b8a:	443b      	add	r3, r7
 23f7b8c:	6063      	str	r3, [r4, #4]
}
 23f7b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23f7b92:	f7ff ff9f 	bl	23f7ad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f7b96:	2800      	cmp	r0, #0
 23f7b98:	d1e3      	bne.n	23f7b62 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23f7b9a:	e7f8      	b.n	23f7b8e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023f7b9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23f7b9c:	b082      	sub	sp, #8
 23f7b9e:	b570      	push	{r4, r5, r6, lr}
 23f7ba0:	460c      	mov	r4, r1
 23f7ba2:	a904      	add	r1, sp, #16
 23f7ba4:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7ba8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23f7bac:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23f7bae:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7bb0:	da17      	bge.n	23f7be2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23f7bb2:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23f7bb4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23f7bb6:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23f7bba:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23f7bbc:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7bbe:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23f7bc0:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7bc2:	4621      	mov	r1, r4
 23f7bc4:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23f7bc6:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f7bc8:	f003 fa62 	bl	23fb090 <memmove>
    new(p) T(std::move(value));
 23f7bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f7bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f7bd0:	6833      	ldr	r3, [r6, #0]
 23f7bd2:	6023      	str	r3, [r4, #0]
    ++size_;
 23f7bd4:	686b      	ldr	r3, [r5, #4]
 23f7bd6:	3301      	adds	r3, #1
 23f7bd8:	606b      	str	r3, [r5, #4]
}
 23f7bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f7bde:	b002      	add	sp, #8
 23f7be0:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f7be2:	3101      	adds	r1, #1
 23f7be4:	f7ff ff76 	bl	23f7ad4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f7be8:	2800      	cmp	r0, #0
 23f7bea:	d1e2      	bne.n	23f7bb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23f7bec:	e7f5      	b.n	23f7bda <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023f7bee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23f7bee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23f7bf2:	2400      	movs	r4, #0
 23f7bf4:	4605      	mov	r5, r0
 23f7bf6:	460f      	mov	r7, r1
 23f7bf8:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23f7bfa:	1e93      	subs	r3, r2, #2
 23f7bfc:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23f7c00:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23f7c02:	b2db      	uxtb	r3, r3
 23f7c04:	6084      	str	r4, [r0, #8]
 23f7c06:	9305      	str	r3, [sp, #20]
    return size_;
 23f7c08:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23f7c0a:	428c      	cmp	r4, r1
 23f7c0c:	da72      	bge.n	23f7cf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23f7c0e:	6838      	ldr	r0, [r7, #0]
 23f7c10:	4642      	mov	r2, r8
 23f7c12:	ab07      	add	r3, sp, #28
 23f7c14:	1b09      	subs	r1, r1, r4
 23f7c16:	4420      	add	r0, r4
 23f7c18:	f7fe fc7a 	bl	23f6510 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23f7c1c:	4606      	mov	r6, r0
 23f7c1e:	2800      	cmp	r0, #0
 23f7c20:	d068      	beq.n	23f7cf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23f7c22:	9b05      	ldr	r3, [sp, #20]
 23f7c24:	2b01      	cmp	r3, #1
 23f7c26:	d82f      	bhi.n	23f7c88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23f7c28:	f04f 0900 	mov.w	r9, #0
 23f7c2c:	f1a0 0b02 	sub.w	fp, r0, #2
 23f7c30:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23f7c34:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23f7c38:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23f7c3a:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23f7c3c:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23f7c3e:	d055      	beq.n	23f7cec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23f7c40:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23f7c42:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23f7c46:	4413      	add	r3, r2
 23f7c48:	78d9      	ldrb	r1, [r3, #3]
 23f7c4a:	789b      	ldrb	r3, [r3, #2]
 23f7c4c:	a808      	add	r0, sp, #32
 23f7c4e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23f7c52:	f7fe fe12 	bl	23f687a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23f7c56:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23f7c5a:	f10d 0e20 	add.w	lr, sp, #32
 23f7c5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23f7c62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23f7c66:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23f7c6a:	f109 0901 	add.w	r9, r9, #1
 23f7c6e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23f7c72:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23f7c76:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23f7c7a:	ab0d      	add	r3, sp, #52	; 0x34
 23f7c7c:	4628      	mov	r0, r5
 23f7c7e:	cb0c      	ldmia	r3, {r2, r3}
 23f7c80:	6869      	ldr	r1, [r5, #4]
 23f7c82:	f7ff ff8b 	bl	23f7b9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23f7c86:	e7d7      	b.n	23f7c38 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23f7c88:	f1a8 0306 	sub.w	r3, r8, #6
 23f7c8c:	2b01      	cmp	r3, #1
 23f7c8e:	d82d      	bhi.n	23f7cec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23f7c90:	f04f 0900 	mov.w	r9, #0
 23f7c94:	f1a0 0b02 	sub.w	fp, r0, #2
 23f7c98:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23f7c9c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23f7ca0:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23f7ca2:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23f7ca4:	d022      	beq.n	23f7cec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23f7ca6:	3302      	adds	r3, #2
    return data_[i];
 23f7ca8:	6839      	ldr	r1, [r7, #0]
 23f7caa:	4423      	add	r3, r4
 23f7cac:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23f7cb0:	2201      	movs	r2, #1
 23f7cb2:	4419      	add	r1, r3
 23f7cb4:	a808      	add	r0, sp, #32
 23f7cb6:	f7fe fdc1 	bl	23f683c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23f7cba:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23f7cbe:	f10d 0e20 	add.w	lr, sp, #32
 23f7cc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23f7cc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23f7cca:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23f7cce:	f109 0901 	add.w	r9, r9, #1
 23f7cd2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23f7cd6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23f7cda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23f7cde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23f7ce2:	4628      	mov	r0, r5
 23f7ce4:	6869      	ldr	r1, [r5, #4]
 23f7ce6:	f7ff ff59 	bl	23f7b9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23f7cea:	e7d9      	b.n	23f7ca0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23f7cec:	9b07      	ldr	r3, [sp, #28]
 23f7cee:	441c      	add	r4, r3
 23f7cf0:	4434      	add	r4, r6
 23f7cf2:	e789      	b.n	23f7c08 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23f7cf4:	4628      	mov	r0, r5
 23f7cf6:	b013      	add	sp, #76	; 0x4c
 23f7cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f7cfc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23f7cfc:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23f7cfe:	b530      	push	{r4, r5, lr}
 23f7d00:	4604      	mov	r4, r0
 23f7d02:	460d      	mov	r5, r1
 23f7d04:	b085      	sub	sp, #20
 23f7d06:	e9c0 3300 	strd	r3, r3, [r0]
 23f7d0a:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23f7d0c:	2202      	movs	r2, #2
 23f7d0e:	a801      	add	r0, sp, #4
 23f7d10:	f7ff ff6d 	bl	23f7bee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23f7d14:	a901      	add	r1, sp, #4
 23f7d16:	4620      	mov	r0, r4
 23f7d18:	f7ff ff19 	bl	23f7b4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23f7d1c:	a801      	add	r0, sp, #4
 23f7d1e:	f7ff f97d 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23f7d22:	2202      	movs	r2, #2
 23f7d24:	4629      	mov	r1, r5
 23f7d26:	a801      	add	r0, sp, #4
 23f7d28:	f7ff ff61 	bl	23f7bee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23f7d2c:	a901      	add	r1, sp, #4
 23f7d2e:	4620      	mov	r0, r4
 23f7d30:	f7ff ff0d 	bl	23f7b4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23f7d34:	a801      	add	r0, sp, #4
 23f7d36:	f7ff f971 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23f7d3a:	2203      	movs	r2, #3
 23f7d3c:	4629      	mov	r1, r5
 23f7d3e:	a801      	add	r0, sp, #4
 23f7d40:	f7ff ff55 	bl	23f7bee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23f7d44:	a901      	add	r1, sp, #4
 23f7d46:	4620      	mov	r0, r4
 23f7d48:	f7ff ff01 	bl	23f7b4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23f7d4c:	a801      	add	r0, sp, #4
 23f7d4e:	f7ff f965 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23f7d52:	2206      	movs	r2, #6
 23f7d54:	4629      	mov	r1, r5
 23f7d56:	a801      	add	r0, sp, #4
 23f7d58:	f7ff ff49 	bl	23f7bee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23f7d5c:	a901      	add	r1, sp, #4
 23f7d5e:	4620      	mov	r0, r4
 23f7d60:	f7ff fef5 	bl	23f7b4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23f7d64:	a801      	add	r0, sp, #4
 23f7d66:	f7ff f959 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23f7d6a:	2207      	movs	r2, #7
 23f7d6c:	4629      	mov	r1, r5
 23f7d6e:	a801      	add	r0, sp, #4
 23f7d70:	f7ff ff3d 	bl	23f7bee <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23f7d74:	4620      	mov	r0, r4
 23f7d76:	a901      	add	r1, sp, #4
 23f7d78:	f7ff fee9 	bl	23f7b4e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23f7d7c:	a801      	add	r0, sp, #4
 23f7d7e:	f7ff f94d 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23f7d82:	4620      	mov	r0, r4
 23f7d84:	b005      	add	sp, #20
 23f7d86:	bd30      	pop	{r4, r5, pc}

023f7d88 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23f7d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7d8c:	b08b      	sub	sp, #44	; 0x2c
 23f7d8e:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23f7d90:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23f7d94:	a801      	add	r0, sp, #4
 23f7d96:	f7ff feaf 	bl	23f7af8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23f7d9a:	9b02      	ldr	r3, [sp, #8]
 23f7d9c:	2b00      	cmp	r3, #0
 23f7d9e:	dd4a      	ble.n	23f7e36 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23f7da0:	f104 0114 	add.w	r1, r4, #20
 23f7da4:	a804      	add	r0, sp, #16
 23f7da6:	f7ff ffa9 	bl	23f7cfc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23f7daa:	f104 0108 	add.w	r1, r4, #8
 23f7dae:	a807      	add	r0, sp, #28
 23f7db0:	f7ff ffa4 	bl	23f7cfc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23f7db4:	9d05      	ldr	r5, [sp, #20]
 23f7db6:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23f7db8:	2d00      	cmp	r5, #0
 23f7dba:	dc01      	bgt.n	23f7dc0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23f7dbc:	2e00      	cmp	r6, #0
 23f7dbe:	dd38      	ble.n	23f7e32 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23f7dc0:	2314      	movs	r3, #20
    return data_;
 23f7dc2:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23f7dc4:	9f02      	ldr	r7, [sp, #8]
 23f7dc6:	4692      	mov	sl, r2
    return data_;
 23f7dc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23f7dcc:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23f7dd0:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23f7dd4:	fb03 8505 	mla	r5, r3, r5, r8
 23f7dd8:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23f7ddc:	45ba      	cmp	sl, r7
 23f7dde:	d028      	beq.n	23f7e32 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
 23f7de0:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23f7de2:	45ab      	cmp	fp, r5
 23f7de4:	d015      	beq.n	23f7e12 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23f7de6:	4659      	mov	r1, fp
 23f7de8:	4650      	mov	r0, sl
 23f7dea:	f7fe fd50 	bl	23f688e <_ZNK8particle7BleUuideqERKS0_>
 23f7dee:	f10b 0b14 	add.w	fp, fp, #20
 23f7df2:	4604      	mov	r4, r0
 23f7df4:	2800      	cmp	r0, #0
 23f7df6:	d0f4      	beq.n	23f7de2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23f7df8:	a807      	add	r0, sp, #28
 23f7dfa:	f7ff f90f 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23f7dfe:	a804      	add	r0, sp, #16
 23f7e00:	f7ff f90c 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23f7e04:	a801      	add	r0, sp, #4
 23f7e06:	f7ff f909 	bl	23f701c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23f7e0a:	4620      	mov	r0, r4
 23f7e0c:	b00b      	add	sp, #44	; 0x2c
 23f7e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f7e12:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23f7e14:	45b3      	cmp	fp, r6
 23f7e16:	d009      	beq.n	23f7e2c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23f7e18:	4659      	mov	r1, fp
 23f7e1a:	4650      	mov	r0, sl
 23f7e1c:	f7fe fd37 	bl	23f688e <_ZNK8particle7BleUuideqERKS0_>
 23f7e20:	f10b 0b14 	add.w	fp, fp, #20
 23f7e24:	4604      	mov	r4, r0
 23f7e26:	2800      	cmp	r0, #0
 23f7e28:	d0f4      	beq.n	23f7e14 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23f7e2a:	e7e5      	b.n	23f7df8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23f7e2c:	f10a 0a14 	add.w	sl, sl, #20
 23f7e30:	e7d4      	b.n	23f7ddc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23f7e32:	2400      	movs	r4, #0
 23f7e34:	e7e0      	b.n	23f7df8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23f7e36:	2401      	movs	r4, #1
 23f7e38:	e7e4      	b.n	23f7e04 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023f7e3a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
 23f7e3a:	b538      	push	{r3, r4, r5, lr}
 23f7e3c:	4605      	mov	r5, r0
 23f7e3e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23f7e40:	f7fd f956 	bl	23f50f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7e44:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f7e46:	68a2      	ldr	r2, [r4, #8]
 23f7e48:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7e4a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7e4c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f7e4e:	68e2      	ldr	r2, [r4, #12]
 23f7e50:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7e52:	60e3      	str	r3, [r4, #12]
      }
 23f7e54:	bd38      	pop	{r3, r4, r5, pc}

023f7e56 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23f7e56:	2300      	movs	r3, #0
      operator=(const function& __x)
 23f7e58:	b530      	push	{r4, r5, lr}
 23f7e5a:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23f7e5c:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23f7e5e:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23f7e60:	4605      	mov	r5, r0
 23f7e62:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23f7e64:	b133      	cbz	r3, 23f7e74 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f7e66:	2202      	movs	r2, #2
 23f7e68:	4668      	mov	r0, sp
 23f7e6a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f7e6c:	68e3      	ldr	r3, [r4, #12]
 23f7e6e:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23f7e70:	68a3      	ldr	r3, [r4, #8]
 23f7e72:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23f7e74:	4629      	mov	r1, r5
 23f7e76:	4668      	mov	r0, sp
 23f7e78:	f7ff ffdf 	bl	23f7e3a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23f7e7c:	4668      	mov	r0, sp
 23f7e7e:	f7f6 f877 	bl	23edf70 <_ZNSt14_Function_baseD1Ev>
      }
 23f7e82:	b005      	add	sp, #20
 23f7e84:	bd30      	pop	{r4, r5, pc}

023f7e86 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
 23f7e86:	b538      	push	{r3, r4, r5, lr}
 23f7e88:	460d      	mov	r5, r1
      { return _M_ptr; }
 23f7e8a:	6801      	ldr	r1, [r0, #0]
 23f7e8c:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
 23f7e8e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 23f7e90:	b123      	cbz	r3, 23f7e9c <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
 23f7e92:	6828      	ldr	r0, [r5, #0]
 23f7e94:	314c      	adds	r1, #76	; 0x4c
 23f7e96:	304c      	adds	r0, #76	; 0x4c
 23f7e98:	f7ff ffdd 	bl	23f7e56 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f7e9c:	4620      	mov	r0, r4
 23f7e9e:	682b      	ldr	r3, [r5, #0]
 23f7ea0:	f840 3b04 	str.w	r3, [r0], #4
 23f7ea4:	6869      	ldr	r1, [r5, #4]
 23f7ea6:	f7fe fbaf 	bl	23f6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
 23f7eaa:	4620      	mov	r0, r4
 23f7eac:	bd38      	pop	{r3, r4, r5, pc}

023f7eae <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23f7eae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f7eb2:	4604      	mov	r4, r0
 23f7eb4:	b087      	sub	sp, #28
    WiringBleLock lk;
 23f7eb6:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23f7eb8:	460e      	mov	r6, r1
 23f7eba:	4617      	mov	r7, r2
    WiringBleLock lk;
 23f7ebc:	f7fe fbca 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23f7ec0:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23f7ec2:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23f7ec6:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
 23f7eca:	4544      	cmp	r4, r8
 23f7ecc:	46a1      	mov	r9, r4
 23f7ece:	d016      	beq.n	23f7efe <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
 23f7ed0:	4621      	mov	r1, r4
 23f7ed2:	a801      	add	r0, sp, #4
 23f7ed4:	f7fe fea4 	bl	23f6c20 <_ZNK8particle17BleCharacteristic4UUIDEv>
 23f7ed8:	4639      	mov	r1, r7
 23f7eda:	a801      	add	r0, sp, #4
 23f7edc:	f7fe fcd7 	bl	23f688e <_ZNK8particle7BleUuideqERKS0_>
 23f7ee0:	3408      	adds	r4, #8
 23f7ee2:	4605      	mov	r5, r0
 23f7ee4:	2800      	cmp	r0, #0
 23f7ee6:	d0f0      	beq.n	23f7eca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
 23f7ee8:	4649      	mov	r1, r9
 23f7eea:	4630      	mov	r0, r6
 23f7eec:	f7ff ffcb 	bl	23f7e86 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
 23f7ef0:	4668      	mov	r0, sp
 23f7ef2:	f7fe fbbd 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23f7ef6:	4628      	mov	r0, r5
 23f7ef8:	b007      	add	sp, #28
 23f7efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
 23f7efe:	2500      	movs	r5, #0
 23f7f00:	e7f6      	b.n	23f7ef0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

023f7f02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23f7f02:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f7f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7f06:	4604      	mov	r4, r0
 23f7f08:	460d      	mov	r5, r1
 23f7f0a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f7f0c:	d914      	bls.n	23f7f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23f7f0e:	4290      	cmp	r0, r2
 23f7f10:	d213      	bcs.n	23f7f3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23f7f12:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23f7f16:	1a75      	subs	r5, r6, r1
 23f7f18:	f1a1 0708 	sub.w	r7, r1, #8
 23f7f1c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f7f1e:	42b7      	cmp	r7, r6
 23f7f20:	d018      	beq.n	23f7f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23f7f22:	b11c      	cbz	r4, 23f7f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23f7f24:	4631      	mov	r1, r6
 23f7f26:	4620      	mov	r0, r4
 23f7f28:	f7ff f8d2 	bl	23f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23f7f2c:	1d30      	adds	r0, r6, #4
 23f7f2e:	f7fc ffd7 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23f7f32:	3e08      	subs	r6, #8
 23f7f34:	3c08      	subs	r4, #8
 23f7f36:	e7f2      	b.n	23f7f1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23f7f38:	d00c      	beq.n	23f7f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23f7f3a:	42b5      	cmp	r5, r6
 23f7f3c:	d00a      	beq.n	23f7f54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23f7f3e:	b11c      	cbz	r4, 23f7f48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23f7f40:	4629      	mov	r1, r5
 23f7f42:	4620      	mov	r0, r4
 23f7f44:	f7ff f8c4 	bl	23f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23f7f48:	1d28      	adds	r0, r5, #4
 23f7f4a:	f7fc ffc9 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23f7f4e:	3508      	adds	r5, #8
 23f7f50:	3408      	adds	r4, #8
 23f7f52:	e7f2      	b.n	23f7f3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23f7f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f7f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23f7f56:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f7f58:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f7f5a:	4605      	mov	r5, r0
        if (n > 0) {
 23f7f5c:	dd11      	ble.n	23f7f82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f7f5e:	00f0      	lsls	r0, r6, #3
 23f7f60:	f7fc fc04 	bl	23f476c <malloc>
            if (!d) {
 23f7f64:	4604      	mov	r4, r0
 23f7f66:	b158      	cbz	r0, 23f7f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f7f68:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f7f6c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23f7f70:	f7ff ffc7 	bl	23f7f02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23f7f74:	6828      	ldr	r0, [r5, #0]
 23f7f76:	f7fc fc07 	bl	23f4788 <free>
        return true;
 23f7f7a:	2001      	movs	r0, #1
        data_ = d;
 23f7f7c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f7f7e:	60ae      	str	r6, [r5, #8]
    }
 23f7f80:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f7f82:	2400      	movs	r4, #0
 23f7f84:	e7f6      	b.n	23f7f74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023f7f86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23f7f86:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f7f8c:	e9c0 3300 	strd	r3, r3, [r0]
 23f7f90:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7f92:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7f94:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7f96:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7f98:	4299      	cmp	r1, r3
 23f7f9a:	dd13      	ble.n	23f7fc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23f7f9c:	f7ff ffdb 	bl	23f7f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f7fa0:	b180      	cbz	r0, 23f7fc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f7fa2:	e9d5 6300 	ldrd	r6, r3, [r5]
 23f7fa6:	6827      	ldr	r7, [r4, #0]
 23f7fa8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23f7fac:	45b0      	cmp	r8, r6
 23f7fae:	d007      	beq.n	23f7fc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23f7fb0:	b11f      	cbz	r7, 23f7fba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23f7fb2:	4631      	mov	r1, r6
 23f7fb4:	4638      	mov	r0, r7
 23f7fb6:	f7ff f88b 	bl	23f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
 23f7fba:	3608      	adds	r6, #8
 23f7fbc:	3708      	adds	r7, #8
 23f7fbe:	e7f5      	b.n	23f7fac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23f7fc0:	686b      	ldr	r3, [r5, #4]
 23f7fc2:	6063      	str	r3, [r4, #4]
}
 23f7fc4:	4620      	mov	r0, r4
 23f7fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f7fca <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
 23f7fca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f7fcc:	460d      	mov	r5, r1
 23f7fce:	4604      	mov	r4, r0
    WiringBleLock lk;
 23f7fd0:	a801      	add	r0, sp, #4
 23f7fd2:	f7fe fb3f 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
 23f7fd6:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
 23f7fd8:	4620      	mov	r0, r4
 23f7fda:	310c      	adds	r1, #12
 23f7fdc:	f7ff ffd3 	bl	23f7f86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23f7fe0:	a801      	add	r0, sp, #4
 23f7fe2:	f7fe fb45 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23f7fe6:	4620      	mov	r0, r4
 23f7fe8:	b003      	add	sp, #12
 23f7fea:	bd30      	pop	{r4, r5, pc}

023f7fec <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23f7fec:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
 23f7fee:	680b      	ldr	r3, [r1, #0]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23f7ff0:	4605      	mov	r5, r0
    if (!impl()->servicesDiscovered()) {
 23f7ff2:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23f7ff4:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
 23f7ff6:	b933      	cbnz	r3, 23f8006 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
 23f7ff8:	4608      	mov	r0, r1
 23f7ffa:	f7fe fabf 	bl	23f657c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
 23f7ffe:	b910      	cbnz	r0, 23f8006 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        servicesDiscovered_ = discovered;
 23f8000:	2201      	movs	r2, #1
      { return _M_ptr; }
 23f8002:	6823      	ldr	r3, [r4, #0]
 23f8004:	729a      	strb	r2, [r3, #10]
    return services();
 23f8006:	4628      	mov	r0, r5
 23f8008:	4621      	mov	r1, r4
 23f800a:	f7ff ffde 	bl	23f7fca <_ZNK8particle13BlePeerDevice8servicesEv>
}
 23f800e:	4628      	mov	r0, r5
 23f8010:	bd38      	pop	{r3, r4, r5, pc}

023f8012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f8012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f8014:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23f8016:	6845      	ldr	r5, [r0, #4]
 23f8018:	4668      	mov	r0, sp
 23f801a:	f7ff f859 	bl	23f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f801e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23f8022:	4299      	cmp	r1, r3
 23f8024:	da10      	bge.n	23f8048 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23f8026:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f8028:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f802a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23f802e:	4629      	mov	r1, r5
 23f8030:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23f8034:	f105 0008 	add.w	r0, r5, #8
 23f8038:	f7ff ff63 	bl	23f7f02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23f803c:	b98d      	cbnz	r5, 23f8062 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23f803e:	6863      	ldr	r3, [r4, #4]
    return true;
 23f8040:	2601      	movs	r6, #1
    ++size_;
 23f8042:	3301      	adds	r3, #1
 23f8044:	6063      	str	r3, [r4, #4]
    return true;
 23f8046:	e006      	b.n	23f8056 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8048:	4620      	mov	r0, r4
 23f804a:	3101      	adds	r1, #1
 23f804c:	f7ff ff83 	bl	23f7f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f8050:	4606      	mov	r6, r0
 23f8052:	2800      	cmp	r0, #0
 23f8054:	d1e7      	bne.n	23f8026 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
 23f8056:	a801      	add	r0, sp, #4
 23f8058:	f7fc ff42 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f805c:	4630      	mov	r0, r6
 23f805e:	b002      	add	sp, #8
 23f8060:	bd70      	pop	{r4, r5, r6, pc}
 23f8062:	4669      	mov	r1, sp
 23f8064:	4628      	mov	r0, r5
 23f8066:	f7ff f833 	bl	23f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23f806a:	e7e8      	b.n	23f803e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023f806c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23f806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8070:	4605      	mov	r5, r0
 23f8072:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
 23f8074:	2700      	movs	r7, #0
                LOG(ERROR, "Failed to append discovered service.");
 23f8076:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23f812c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
 23f807a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 23f8130 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23f807e:	b093      	sub	sp, #76	; 0x4c
        for (size_t i = 0; i < event->count; i++) {
 23f8080:	682b      	ldr	r3, [r5, #0]
 23f8082:	42bb      	cmp	r3, r7
 23f8084:	d94e      	bls.n	23f8124 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
 23f8086:	261c      	movs	r6, #28
 23f8088:	a803      	add	r0, sp, #12
 23f808a:	f7fe fe81 	bl	23f6d90 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
 23f808e:	f10d 0c14 	add.w	ip, sp, #20
 23f8092:	46e3      	mov	fp, ip
 23f8094:	437e      	muls	r6, r7
 23f8096:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
 23f8098:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
 23f809a:	4432      	add	r2, r6
 23f809c:	1d13      	adds	r3, r2, #4
 23f809e:	3214      	adds	r2, #20
 23f80a0:	46e6      	mov	lr, ip
 23f80a2:	6818      	ldr	r0, [r3, #0]
 23f80a4:	6859      	ldr	r1, [r3, #4]
 23f80a6:	3308      	adds	r3, #8
 23f80a8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 23f80ac:	4293      	cmp	r3, r2
 23f80ae:	46f4      	mov	ip, lr
 23f80b0:	d1f6      	bne.n	23f80a0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
 23f80b2:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23f80b4:	4659      	mov	r1, fp
 23f80b6:	f8ce 0000 	str.w	r0, [lr]
 23f80ba:	a80a      	add	r0, sp, #40	; 0x28
 23f80bc:	f7fe fb9c 	bl	23f67f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23f80c0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 23f80c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23f80c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f80ca:	f8dc 3000 	ldr.w	r3, [ip]
 23f80ce:	9a03      	ldr	r2, [sp, #12]
 23f80d0:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
 23f80d2:	686b      	ldr	r3, [r5, #4]
 23f80d4:	a903      	add	r1, sp, #12
 23f80d6:	4433      	add	r3, r6
 23f80d8:	8b1b      	ldrh	r3, [r3, #24]
 23f80da:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
 23f80dc:	686b      	ldr	r3, [r5, #4]
 23f80de:	4433      	add	r3, r6
 23f80e0:	8b5b      	ldrh	r3, [r3, #26]
 23f80e2:	82d3      	strh	r3, [r2, #22]
        return services_;
 23f80e4:	f8d8 0000 	ldr.w	r0, [r8]
 23f80e8:	f100 040c 	add.w	r4, r0, #12
 23f80ec:	a80a      	add	r0, sp, #40	; 0x28
 23f80ee:	f7fe ffef 	bl	23f70d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
 23f80f2:	4620      	mov	r0, r4
 23f80f4:	a90a      	add	r1, sp, #40	; 0x28
 23f80f6:	f7ff ff8c 	bl	23f8012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23f80fa:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23f80fc:	a80b      	add	r0, sp, #44	; 0x2c
 23f80fe:	f7fc feef 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8102:	b954      	cbnz	r4, 23f811a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
 23f8104:	2320      	movs	r3, #32
 23f8106:	4651      	mov	r1, sl
 23f8108:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 23f810c:	2032      	movs	r0, #50	; 0x32
 23f810e:	4623      	mov	r3, r4
 23f8110:	f8cd 9000 	str.w	r9, [sp]
 23f8114:	aa0a      	add	r2, sp, #40	; 0x28
 23f8116:	f7fc f9f5 	bl	23f4504 <log_message>
 23f811a:	a804      	add	r0, sp, #16
 23f811c:	f7fc fee0 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23f8120:	3701      	adds	r7, #1
 23f8122:	e7ad      	b.n	23f8080 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
 23f8124:	b013      	add	sp, #76	; 0x4c
 23f8126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f812a:	bf00      	nop
 23f812c:	023ff8af 	.word	0x023ff8af
 23f8130:	023ff7cf 	.word	0x023ff7cf

023f8134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23f8134:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f8136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8138:	4604      	mov	r4, r0
 23f813a:	460d      	mov	r5, r1
 23f813c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f813e:	d914      	bls.n	23f816a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23f8140:	4290      	cmp	r0, r2
 23f8142:	d213      	bcs.n	23f816c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23f8144:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23f8148:	1a75      	subs	r5, r6, r1
 23f814a:	f1a1 0708 	sub.w	r7, r1, #8
 23f814e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f8150:	42b7      	cmp	r7, r6
 23f8152:	d018      	beq.n	23f8186 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23f8154:	b11c      	cbz	r4, 23f815e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23f8156:	4631      	mov	r1, r6
 23f8158:	4620      	mov	r0, r4
 23f815a:	f7fe ffab 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23f815e:	1d30      	adds	r0, r6, #4
 23f8160:	f7fc febe 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23f8164:	3e08      	subs	r6, #8
 23f8166:	3c08      	subs	r4, #8
 23f8168:	e7f2      	b.n	23f8150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23f816a:	d00c      	beq.n	23f8186 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23f816c:	42b5      	cmp	r5, r6
 23f816e:	d00a      	beq.n	23f8186 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23f8170:	b11c      	cbz	r4, 23f817a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23f8172:	4629      	mov	r1, r5
 23f8174:	4620      	mov	r0, r4
 23f8176:	f7fe ff9d 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23f817a:	1d28      	adds	r0, r5, #4
 23f817c:	f7fc feb0 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23f8180:	3508      	adds	r5, #8
 23f8182:	3408      	adds	r4, #8
 23f8184:	e7f2      	b.n	23f816c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23f8186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23f8188:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f818a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f818c:	4605      	mov	r5, r0
        if (n > 0) {
 23f818e:	dd11      	ble.n	23f81b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f8190:	00f0      	lsls	r0, r6, #3
 23f8192:	f7fc faeb 	bl	23f476c <malloc>
            if (!d) {
 23f8196:	4604      	mov	r4, r0
 23f8198:	b158      	cbz	r0, 23f81b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f819a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f819e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23f81a2:	f7ff ffc7 	bl	23f8134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23f81a6:	6828      	ldr	r0, [r5, #0]
 23f81a8:	f7fc faee 	bl	23f4788 <free>
        return true;
 23f81ac:	2001      	movs	r0, #1
        data_ = d;
 23f81ae:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f81b0:	60ae      	str	r6, [r5, #8]
    }
 23f81b2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f81b4:	2400      	movs	r4, #0
 23f81b6:	e7f6      	b.n	23f81a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023f81b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23f81b8:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f81ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f81be:	e9c0 3300 	strd	r3, r3, [r0]
 23f81c2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f81c4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f81c6:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f81c8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f81ca:	4299      	cmp	r1, r3
 23f81cc:	dd13      	ble.n	23f81f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23f81ce:	f7ff ffdb 	bl	23f8188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f81d2:	b180      	cbz	r0, 23f81f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f81d4:	e9d5 6300 	ldrd	r6, r3, [r5]
 23f81d8:	6827      	ldr	r7, [r4, #0]
 23f81da:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23f81de:	45b0      	cmp	r8, r6
 23f81e0:	d007      	beq.n	23f81f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23f81e2:	b11f      	cbz	r7, 23f81ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23f81e4:	4631      	mov	r1, r6
 23f81e6:	4638      	mov	r0, r7
 23f81e8:	f7fe ff64 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
 23f81ec:	3608      	adds	r6, #8
 23f81ee:	3708      	adds	r7, #8
 23f81f0:	e7f5      	b.n	23f81de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23f81f2:	686b      	ldr	r3, [r5, #4]
 23f81f4:	6063      	str	r3, [r4, #4]
}
 23f81f6:	4620      	mov	r0, r4
 23f81f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f81fc <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
 23f81fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f81fe:	460d      	mov	r5, r1
 23f8200:	4604      	mov	r4, r0
    WiringBleLock lk;
 23f8202:	a801      	add	r0, sp, #4
 23f8204:	f7fe fa26 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
 23f8208:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
 23f820a:	4620      	mov	r0, r4
 23f820c:	3118      	adds	r1, #24
 23f820e:	f7ff ffd3 	bl	23f81b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23f8212:	a801      	add	r0, sp, #4
 23f8214:	f7fe fa2c 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23f8218:	4620      	mov	r0, r4
 23f821a:	b003      	add	sp, #12
 23f821c:	bd30      	pop	{r4, r5, pc}

023f821e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f821e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f8220:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23f8222:	6845      	ldr	r5, [r0, #4]
 23f8224:	4668      	mov	r0, sp
 23f8226:	f7fe ff45 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f822a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23f822e:	4299      	cmp	r1, r3
 23f8230:	da10      	bge.n	23f8254 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23f8232:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f8234:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f8236:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23f823a:	4629      	mov	r1, r5
 23f823c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23f8240:	f105 0008 	add.w	r0, r5, #8
 23f8244:	f7ff ff76 	bl	23f8134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23f8248:	b98d      	cbnz	r5, 23f826e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23f824a:	6863      	ldr	r3, [r4, #4]
    return true;
 23f824c:	2601      	movs	r6, #1
    ++size_;
 23f824e:	3301      	adds	r3, #1
 23f8250:	6063      	str	r3, [r4, #4]
    return true;
 23f8252:	e006      	b.n	23f8262 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8254:	4620      	mov	r0, r4
 23f8256:	3101      	adds	r1, #1
 23f8258:	f7ff ff96 	bl	23f8188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f825c:	4606      	mov	r6, r0
 23f825e:	2800      	cmp	r0, #0
 23f8260:	d1e7      	bne.n	23f8232 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23f8262:	a801      	add	r0, sp, #4
 23f8264:	f7fc fe3c 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8268:	4630      	mov	r0, r6
 23f826a:	b002      	add	sp, #8
 23f826c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23f826e:	4669      	mov	r1, sp
 23f8270:	4628      	mov	r0, r5
 23f8272:	f7fe ff1f 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23f8276:	e7e8      	b.n	23f824a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023f8278 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23f8278:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f827a:	b085      	sub	sp, #20
 23f827c:	4605      	mov	r5, r0
    WiringBleLock lk;
 23f827e:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23f8280:	460c      	mov	r4, r1
 23f8282:	4617      	mov	r7, r2
    WiringBleLock lk;
 23f8284:	f7fe f9e6 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
 23f8288:	2300      	movs	r3, #0
 23f828a:	e9c5 3300 	strd	r3, r3, [r5]
 23f828e:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
 23f8290:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23f8292:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
 23f8296:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
 23f829a:	42b4      	cmp	r4, r6
 23f829c:	d011      	beq.n	23f82c2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
 23f829e:	4621      	mov	r1, r4
 23f82a0:	6838      	ldr	r0, [r7, #0]
 23f82a2:	f7fe fc7d 	bl	23f6ba0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
 23f82a6:	b150      	cbz	r0, 23f82be <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
 23f82a8:	4621      	mov	r1, r4
 23f82aa:	a802      	add	r0, sp, #8
 23f82ac:	f7fe ff02 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23f82b0:	4628      	mov	r0, r5
 23f82b2:	a902      	add	r1, sp, #8
 23f82b4:	f7ff ffb3 	bl	23f821e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23f82b8:	a803      	add	r0, sp, #12
 23f82ba:	f7fc fe11 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
 23f82be:	3408      	adds	r4, #8
 23f82c0:	e7eb      	b.n	23f829a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
 23f82c2:	a801      	add	r0, sp, #4
 23f82c4:	f7fe f9d4 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23f82c8:	4628      	mov	r0, r5
 23f82ca:	b005      	add	sp, #20
 23f82cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023f82d0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23f82d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
 23f82d4:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23f82d6:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23f82d8:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23f82da:	460f      	mov	r7, r1
 23f82dc:	4690      	mov	r8, r2
 23f82de:	b091      	sub	sp, #68	; 0x44
    if (!impl()->servicesDiscovered()) {
 23f82e0:	b933      	cbnz	r3, 23f82f0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
 23f82e2:	e9c0 3300 	strd	r3, r3, [r0]
 23f82e6:	6083      	str	r3, [r0, #8]
}
 23f82e8:	4630      	mov	r0, r6
 23f82ea:	b011      	add	sp, #68	; 0x44
 23f82ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
 23f82f0:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
 23f82f2:	7e0d      	ldrb	r5, [r1, #24]
 23f82f4:	2d00      	cmp	r5, #0
 23f82f6:	d158      	bne.n	23f83aa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
 23f82f8:	2320      	movs	r3, #32
 23f82fa:	462a      	mov	r2, r5
 23f82fc:	a803      	add	r0, sp, #12
 23f82fe:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23f8302:	f7fe fbc0 	bl	23f6a86 <_ZNK8particle7BleUuid8toStringEb>
 23f8306:	9b03      	ldr	r3, [sp, #12]
 23f8308:	492b      	ldr	r1, [pc, #172]	; (23f83b8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
 23f830a:	9301      	str	r3, [sp, #4]
 23f830c:	4b2b      	ldr	r3, [pc, #172]	; (23f83bc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
 23f830e:	aa08      	add	r2, sp, #32
 23f8310:	2001      	movs	r0, #1
 23f8312:	9300      	str	r3, [sp, #0]
 23f8314:	462b      	mov	r3, r5
 23f8316:	f7fc f8f5 	bl	23f4504 <log_message>
 23f831a:	a803      	add	r0, sp, #12
 23f831c:	f000 fbc8 	bl	23f8ab0 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
 23f8320:	231c      	movs	r3, #28
 23f8322:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 23f8326:	f8d8 3000 	ldr.w	r3, [r8]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23f832a:	a908      	add	r1, sp, #32
        halService.start_handle = service.impl()->startHandle();
 23f832c:	8a9a      	ldrh	r2, [r3, #20]
 23f832e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
 23f8332:	8adb      	ldrh	r3, [r3, #22]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23f8334:	4a22      	ldr	r2, [pc, #136]	; (23f83c0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
        halService.end_handle = service.impl()->endHandle();
 23f8336:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 23f833a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23f833c:	8818      	ldrh	r0, [r3, #0]
 23f833e:	9500      	str	r5, [sp, #0]
 23f8340:	f7fb fff2 	bl	23f4328 <hal_ble_gatt_client_discover_characteristics>
 23f8344:	2800      	cmp	r0, #0
 23f8346:	db30      	blt.n	23f83aa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
 23f8348:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
 23f834a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23f834e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 23f8352:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
 23f8354:	f1a4 0308 	sub.w	r3, r4, #8
 23f8358:	4599      	cmp	r9, r3
 23f835a:	d022      	beq.n	23f83a2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
 23f835c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23f8360:	89db      	ldrh	r3, [r3, #14]
 23f8362:	2b00      	cmp	r3, #0
 23f8364:	d0f5      	beq.n	23f8352 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
 23f8366:	2210      	movs	r2, #16
 23f8368:	2100      	movs	r1, #0
 23f836a:	eb0d 0002 	add.w	r0, sp, r2
 23f836e:	9503      	str	r5, [sp, #12]
 23f8370:	f002 fea8 	bl	23fb0c4 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
 23f8374:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23f8378:	aa03      	add	r2, sp, #12
 23f837a:	89d9      	ldrh	r1, [r3, #14]
 23f837c:	683b      	ldr	r3, [r7, #0]
 23f837e:	8818      	ldrh	r0, [r3, #0]
 23f8380:	2313      	movs	r3, #19
 23f8382:	9500      	str	r5, [sp, #0]
 23f8384:	f7fb fffa 	bl	23f437c <hal_ble_gatt_client_read>
                if (len > 0) {
 23f8388:	2800      	cmp	r0, #0
 23f838a:	d0e2      	beq.n	23f8352 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
 23f838c:	ab10      	add	r3, sp, #64	; 0x40
 23f838e:	4418      	add	r0, r3
 23f8390:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
 23f8394:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
 23f8398:	a903      	add	r1, sp, #12
 23f839a:	303c      	adds	r0, #60	; 0x3c
 23f839c:	f000 fc29 	bl	23f8bf2 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
 23f83a0:	e7d7      	b.n	23f8352 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
        characteristicsDiscovered_ = discovered;
 23f83a2:	2201      	movs	r2, #1
 23f83a4:	f8d8 3000 	ldr.w	r3, [r8]
 23f83a8:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
 23f83aa:	4642      	mov	r2, r8
 23f83ac:	4639      	mov	r1, r7
 23f83ae:	4630      	mov	r0, r6
 23f83b0:	f7ff ff62 	bl	23f8278 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
 23f83b4:	e798      	b.n	23f82e8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
 23f83b6:	bf00      	nop
 23f83b8:	023ff7cf 	.word	0x023ff7cf
 23f83bc:	023ff8d4 	.word	0x023ff8d4
 23f83c0:	023f8589 	.word	0x023f8589

023f83c4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23f83c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
 23f83c6:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23f83c8:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23f83ca:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23f83cc:	460d      	mov	r5, r1
 23f83ce:	b085      	sub	sp, #20
    if (!impl()->servicesDiscovered()) {
 23f83d0:	b92b      	cbnz	r3, 23f83de <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
 23f83d2:	a801      	add	r0, sp, #4
 23f83d4:	f7ff fe0a 	bl	23f7fec <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
 23f83d8:	a801      	add	r0, sp, #4
 23f83da:	f7fe fe94 	bl	23f7106 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23f83de:	682b      	ldr	r3, [r5, #0]
 23f83e0:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
 23f83e4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
 23f83e8:	42bc      	cmp	r4, r7
 23f83ea:	d009      	beq.n	23f8400 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
 23f83ec:	4622      	mov	r2, r4
 23f83ee:	4629      	mov	r1, r5
 23f83f0:	a801      	add	r0, sp, #4
 23f83f2:	f7ff ff6d 	bl	23f82d0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
 23f83f6:	a801      	add	r0, sp, #4
 23f83f8:	f7fe fe97 	bl	23f712a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
 23f83fc:	3408      	adds	r4, #8
 23f83fe:	e7f3      	b.n	23f83e8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
 23f8400:	4630      	mov	r0, r6
 23f8402:	4629      	mov	r1, r5
 23f8404:	f7ff fefa 	bl	23f81fc <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
 23f8408:	4630      	mov	r0, r6
 23f840a:	b005      	add	sp, #20
 23f840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023f8410 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23f8410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    hal_ble_conn_cfg_t connCfg = {};
 23f8414:	f04f 0800 	mov.w	r8, #0
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23f8418:	461f      	mov	r7, r3
    connCfg.version = BLE_API_VERSION;
 23f841a:	4b4c      	ldr	r3, [pc, #304]	; (23f854c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x13c>)
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23f841c:	b092      	sub	sp, #72	; 0x48
 23f841e:	4605      	mov	r5, r0
 23f8420:	460c      	mov	r4, r1
    return address_;
 23f8422:	6808      	ldr	r0, [r1, #0]
 23f8424:	6849      	ldr	r1, [r1, #4]
    connCfg.version = BLE_API_VERSION;
 23f8426:	9304      	str	r3, [sp, #16]
    return address_;
 23f8428:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.address = addr.halAddress();
 23f842a:	ab05      	add	r3, sp, #20
    connCfg.conn_params = params;
 23f842c:	9207      	str	r2, [sp, #28]
    return address_;
 23f842e:	c603      	stmia	r6!, {r0, r1}
    connCfg.address = addr.halAddress();
 23f8430:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
 23f8434:	e9cd 8808 	strd	r8, r8, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23f8438:	f7fe fd80 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f843c:	4b44      	ldr	r3, [pc, #272]	; (23f8550 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x140>)
    connCfg.address = addr.halAddress();
 23f843e:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23f8440:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
 23f8442:	f7fe fd7b 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23f8446:	6803      	ldr	r3, [r0, #0]
    bind(addr);
 23f8448:	4621      	mov	r1, r4
 23f844a:	4628      	mov	r0, r5
    connCfg.context = BleLocalDevice::getInstance().impl();
 23f844c:	9309      	str	r3, [sp, #36]	; 0x24
    bind(addr);
 23f844e:	f7fe fcf1 	bl	23f6e34 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    BleLocalDevice::getInstance().impl()->connectingPeer() = *this;
 23f8452:	f7fe fd73 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f8456:	682b      	ldr	r3, [r5, #0]
 23f8458:	6800      	ldr	r0, [r0, #0]
 23f845a:	6243      	str	r3, [r0, #36]	; 0x24
 23f845c:	6869      	ldr	r1, [r5, #4]
 23f845e:	3028      	adds	r0, #40	; 0x28
 23f8460:	f7fe f8d2 	bl	23f6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
 23f8464:	4642      	mov	r2, r8
 23f8466:	6829      	ldr	r1, [r5, #0]
 23f8468:	a804      	add	r0, sp, #16
 23f846a:	f7fb ff95 	bl	23f4398 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
 23f846e:	4604      	mov	r4, r0
 23f8470:	b1b8      	cbz	r0, 23f84a2 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x92>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23f8472:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23f8476:	682b      	ldr	r3, [r5, #0]
 23f8478:	801a      	strh	r2, [r3, #0]
    SCOPE_GUARD ({
 23f847a:	f7fe fd5f 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f847e:	6805      	ldr	r5, [r0, #0]
 23f8480:	4630      	mov	r0, r6
 23f8482:	f7fe fca1 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f8486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f8488:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23f848c:	626b      	str	r3, [r5, #36]	; 0x24
 23f848e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23f8490:	f7fe f8ba 	bl	23f6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23f8494:	a80b      	add	r0, sp, #44	; 0x2c
 23f8496:	f7fc fd23 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f849a:	4620      	mov	r0, r4
 23f849c:	b012      	add	sp, #72	; 0x48
 23f849e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WiringBleLock lk;
 23f84a2:	a803      	add	r0, sp, #12
 23f84a4:	f7fe f8d6 	bl	23f6654 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->findPeerDevice(impl()->connHandle())) {
 23f84a8:	f7fe fd48 	bl	23f6f3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23f84ac:	682b      	ldr	r3, [r5, #0]
 23f84ae:	6800      	ldr	r0, [r0, #0]
 23f84b0:	8819      	ldrh	r1, [r3, #0]
 23f84b2:	f7fe fb8a 	bl	23f6bca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
 23f84b6:	f04f 0820 	mov.w	r8, #32
 23f84ba:	bb18      	cbnz	r0, 23f8504 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf4>
            LOG(ERROR, "Cannot add new peer device.");
 23f84bc:	4b25      	ldr	r3, [pc, #148]	; (23f8554 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x144>)
 23f84be:	4f26      	ldr	r7, [pc, #152]	; (23f8558 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x148>)
 23f84c0:	4632      	mov	r2, r6
 23f84c2:	4926      	ldr	r1, [pc, #152]	; (23f855c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23f84c4:	2032      	movs	r0, #50	; 0x32
 23f84c6:	9300      	str	r3, [sp, #0]
 23f84c8:	4623      	mov	r3, r4
 23f84ca:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23f84ce:	f7fc f819 	bl	23f4504 <log_message>
 23f84d2:	6838      	ldr	r0, [r7, #0]
 23f84d4:	f7fb fec6 	bl	23f4264 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23f84d8:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
 23f84da:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23f84de:	4621      	mov	r1, r4
 23f84e0:	8818      	ldrh	r0, [r3, #0]
 23f84e2:	f7fb fef7 	bl	23f42d4 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
 23f84e6:	6838      	ldr	r0, [r7, #0]
 23f84e8:	f7fb feae 	bl	23f4248 <os_mutex_recursive_lock>
        locked_ = true;
 23f84ec:	2301      	movs	r3, #1
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23f84ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
        locked_ = true;
 23f84f2:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
 23f84f6:	682b      	ldr	r3, [r5, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23f84f8:	a803      	add	r0, sp, #12
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23f84fa:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23f84fc:	f7fe f8b8 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
 23f8500:	4c17      	ldr	r4, [pc, #92]	; (23f8560 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x150>)
 23f8502:	e7ba      	b.n	23f847a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        WiringBleLock lk;
 23f8504:	a803      	add	r0, sp, #12
 23f8506:	f7fe f8b3 	bl	23f6670 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
 23f850a:	4b16      	ldr	r3, [pc, #88]	; (23f8564 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x154>)
 23f850c:	4632      	mov	r2, r6
 23f850e:	9300      	str	r3, [sp, #0]
 23f8510:	2001      	movs	r0, #1
 23f8512:	4623      	mov	r3, r4
 23f8514:	4911      	ldr	r1, [pc, #68]	; (23f855c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23f8516:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23f851a:	f7fb fff3 	bl	23f4504 <log_message>
    if (automatic) {
 23f851e:	2f00      	cmp	r7, #0
 23f8520:	d0ab      	beq.n	23f847a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23f8522:	4629      	mov	r1, r5
 23f8524:	4630      	mov	r0, r6
 23f8526:	f7ff ff4d 	bl	23f83c4 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
 23f852a:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
 23f852e:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
 23f8532:	42bd      	cmp	r5, r7
 23f8534:	d005      	beq.n	23f8542 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x132>
            characteristic.subscribe(true);
 23f8536:	4628      	mov	r0, r5
 23f8538:	2101      	movs	r1, #1
 23f853a:	f7fe fbef 	bl	23f6d1c <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
 23f853e:	3508      	adds	r5, #8
 23f8540:	e7f7      	b.n	23f8532 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x122>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23f8542:	4630      	mov	r0, r6
 23f8544:	f7fe fdf1 	bl	23f712a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23f8548:	e797      	b.n	23f847a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
 23f854a:	bf00      	nop
 23f854c:	00180003 	.word	0x00180003
 23f8550:	023f7805 	.word	0x023f7805
 23f8554:	023ff906 	.word	0x023ff906
 23f8558:	1007aee8 	.word	0x1007aee8
 23f855c:	023ff7cf 	.word	0x023ff7cf
 23f8560:	fffffefc 	.word	0xfffffefc
 23f8564:	023ff922 	.word	0x023ff922

023f8568 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
 23f8568:	b513      	push	{r0, r1, r4, lr}
 23f856a:	4604      	mov	r4, r0
 23f856c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
 23f8570:	f7fe fc2a 	bl	23f6dc8 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
 23f8574:	2200      	movs	r2, #0
 23f8576:	4620      	mov	r0, r4
 23f8578:	9b00      	ldr	r3, [sp, #0]
 23f857a:	9901      	ldr	r1, [sp, #4]
 23f857c:	f7ff ff48 	bl	23f8410 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
 23f8580:	4620      	mov	r0, r4
 23f8582:	b002      	add	sp, #8
 23f8584:	bd10      	pop	{r4, pc}
	...

023f8588 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23f8588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
 23f858c:	2320      	movs	r3, #32
 23f858e:	2600      	movs	r6, #0
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23f8590:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
 23f8592:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
 23f8596:	4b66      	ldr	r3, [pc, #408]	; (23f8730 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23f8598:	4605      	mov	r5, r0
        LOG(TRACE, "Characteristic discovered.");
 23f859a:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23f859c:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
 23f859e:	4633      	mov	r3, r6
 23f85a0:	2001      	movs	r0, #1
 23f85a2:	4964      	ldr	r1, [pc, #400]	; (23f8734 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
 23f85a4:	aa0c      	add	r2, sp, #48	; 0x30
 23f85a6:	f7fb ffad 	bl	23f4504 <log_message>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23f85aa:	f8df 918c 	ldr.w	r9, [pc, #396]	; 23f8738 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
 23f85ae:	f8df 8184 	ldr.w	r8, [pc, #388]	; 23f8734 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23f85b2:	f8df a188 	ldr.w	sl, [pc, #392]	; 23f873c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        for (size_t i = 0; i < event->count; i++) {
 23f85b6:	682b      	ldr	r3, [r5, #0]
 23f85b8:	42b3      	cmp	r3, r6
 23f85ba:	f240 80b5 	bls.w	23f8728 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
 23f85be:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 23f85c2:	a803      	add	r0, sp, #12
 23f85c4:	fb0b fb06 	mul.w	fp, fp, r6
 23f85c8:	f7fe fb10 	bl	23f6bec <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
 23f85cc:	a805      	add	r0, sp, #20
 23f85ce:	f7fe fbdf 	bl	23f6d90 <_ZN8particle10BleServiceC1Ev>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
 23f85d2:	686b      	ldr	r3, [r5, #4]
 23f85d4:	9a03      	ldr	r2, [sp, #12]
 23f85d6:	445b      	add	r3, fp
        this->size = halHandles.size;
 23f85d8:	8bd9      	ldrh	r1, [r3, #30]
 23f85da:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
 23f85dc:	8c19      	ldrh	r1, [r3, #32]
 23f85de:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
 23f85e0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 23f85e2:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
 23f85e4:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 23f85e6:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
 23f85e8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 23f85ea:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
 23f85ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 23f85ee:	8253      	strh	r3, [r2, #18]
 23f85f0:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
 23f85f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
 23f85f8:	429a      	cmp	r2, r3
 23f85fa:	d07d      	beq.n	23f86f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
 23f85fc:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
 23f85fe:	8ac4      	ldrh	r4, [r0, #22]
 23f8600:	428c      	cmp	r4, r1
 23f8602:	d377      	bcc.n	23f86f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
 23f8604:	8a84      	ldrh	r4, [r0, #20]
 23f8606:	428c      	cmp	r4, r1
 23f8608:	d874      	bhi.n	23f86f4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f860a:	6859      	ldr	r1, [r3, #4]
 23f860c:	9005      	str	r0, [sp, #20]
 23f860e:	a806      	add	r0, sp, #24
 23f8610:	f7fd fffa 	bl	23f6608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      { return _M_ptr; }
 23f8614:	f8dd e00c 	ldr.w	lr, [sp, #12]
                characteristic.impl()->svcUUID() = service.impl()->UUID();
 23f8618:	f8dd c014 	ldr.w	ip, [sp, #20]
 23f861c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
 23f8620:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23f8624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f8626:	f8dc 3000 	ldr.w	r3, [ip]
 23f862a:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
 23f862c:	892b      	ldrh	r3, [r5, #8]
 23f862e:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
 23f8632:	686b      	ldr	r3, [r5, #4]
 23f8634:	9c03      	ldr	r4, [sp, #12]
 23f8636:	445b      	add	r3, fp
 23f8638:	7e5b      	ldrb	r3, [r3, #25]
 23f863a:	f013 0f02 	tst.w	r3, #2
 23f863e:	d16e      	bne.n	23f871e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
 23f8640:	686b      	ldr	r3, [r5, #4]
 23f8642:	445b      	add	r3, fp
 23f8644:	7e5b      	ldrb	r3, [r3, #25]
 23f8646:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
 23f8648:	bf42      	ittt	mi
 23f864a:	7923      	ldrbmi	r3, [r4, #4]
 23f864c:	f043 0304 	orrmi.w	r3, r3, #4
 23f8650:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
 23f8652:	686b      	ldr	r3, [r5, #4]
 23f8654:	445b      	add	r3, fp
 23f8656:	7e5b      	ldrb	r3, [r3, #25]
 23f8658:	0719      	lsls	r1, r3, #28
 23f865a:	bf42      	ittt	mi
 23f865c:	7923      	ldrbmi	r3, [r4, #4]
 23f865e:	f043 0308 	orrmi.w	r3, r3, #8
 23f8662:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
 23f8664:	686b      	ldr	r3, [r5, #4]
 23f8666:	445b      	add	r3, fp
 23f8668:	7e5b      	ldrb	r3, [r3, #25]
 23f866a:	06da      	lsls	r2, r3, #27
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
 23f866c:	aa07      	add	r2, sp, #28
 23f866e:	4696      	mov	lr, r2
    value_ |= flags.value_;
 23f8670:	bf42      	ittt	mi
 23f8672:	7923      	ldrbmi	r3, [r4, #4]
 23f8674:	f043 0310 	orrmi.w	r3, r3, #16
 23f8678:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
 23f867a:	686b      	ldr	r3, [r5, #4]
 23f867c:	445b      	add	r3, fp
 23f867e:	7e5b      	ldrb	r3, [r3, #25]
 23f8680:	069b      	lsls	r3, r3, #26
 23f8682:	bf42      	ittt	mi
 23f8684:	7923      	ldrbmi	r3, [r4, #4]
 23f8686:	f043 0320 	orrmi.w	r3, r3, #32
 23f868a:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
 23f868c:	686b      	ldr	r3, [r5, #4]
 23f868e:	449b      	add	fp, r3
 23f8690:	f10b 0304 	add.w	r3, fp, #4
 23f8694:	f10b 0b14 	add.w	fp, fp, #20
 23f8698:	4694      	mov	ip, r2
 23f869a:	6818      	ldr	r0, [r3, #0]
 23f869c:	6859      	ldr	r1, [r3, #4]
 23f869e:	3308      	adds	r3, #8
 23f86a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f86a4:	455b      	cmp	r3, fp
 23f86a6:	4662      	mov	r2, ip
 23f86a8:	d1f6      	bne.n	23f8698 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
 23f86aa:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23f86ac:	4671      	mov	r1, lr
 23f86ae:	f8cc 0000 	str.w	r0, [ip]
 23f86b2:	a80c      	add	r0, sp, #48	; 0x30
 23f86b4:	f7fe f8a0 	bl	23f67f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23f86b8:	3414      	adds	r4, #20
 23f86ba:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 23f86be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23f86c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f86c4:	f8dc 3000 	ldr.w	r3, [ip]
                if (!peerImpl->characteristics().append(characteristic)) {
 23f86c8:	a903      	add	r1, sp, #12
 23f86ca:	6023      	str	r3, [r4, #0]
 23f86cc:	a80c      	add	r0, sp, #48	; 0x30
 23f86ce:	f7fe fcf1 	bl	23f70b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23f86d2:	a90c      	add	r1, sp, #48	; 0x30
 23f86d4:	f107 0018 	add.w	r0, r7, #24
 23f86d8:	f7ff fda1 	bl	23f821e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23f86dc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23f86de:	a80d      	add	r0, sp, #52	; 0x34
 23f86e0:	f7fc fbfe 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f86e4:	b99c      	cbnz	r4, 23f870e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23f86e6:	2320      	movs	r3, #32
 23f86e8:	f8cd a000 	str.w	sl, [sp]
 23f86ec:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 23f86f0:	4623      	mov	r3, r4
 23f86f2:	e007      	b.n	23f8704 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
 23f86f4:	3308      	adds	r3, #8
 23f86f6:	e77f      	b.n	23f85f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23f86f8:	2420      	movs	r4, #32
 23f86fa:	2300      	movs	r3, #0
 23f86fc:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
 23f8700:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23f8704:	4641      	mov	r1, r8
 23f8706:	2032      	movs	r0, #50	; 0x32
 23f8708:	aa0c      	add	r2, sp, #48	; 0x30
 23f870a:	f7fb fefb 	bl	23f4504 <log_message>
 23f870e:	a806      	add	r0, sp, #24
 23f8710:	f7fc fbe6 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8714:	a804      	add	r0, sp, #16
 23f8716:	f7fc fbe3 	bl	23f4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23f871a:	3601      	adds	r6, #1
 23f871c:	e74b      	b.n	23f85b6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
 23f871e:	7923      	ldrb	r3, [r4, #4]
 23f8720:	f043 0302 	orr.w	r3, r3, #2
 23f8724:	7123      	strb	r3, [r4, #4]
 23f8726:	e78b      	b.n	23f8640 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
 23f8728:	b015      	add	sp, #84	; 0x54
 23f872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f872e:	bf00      	nop
 23f8730:	023ff93f 	.word	0x023ff93f
 23f8734:	023ff7cf 	.word	0x023ff7cf
 23f8738:	023ff95a 	.word	0x023ff95a
 23f873c:	023ff989 	.word	0x023ff989

023f8740 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23f8740:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f8742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8744:	4604      	mov	r4, r0
 23f8746:	460d      	mov	r5, r1
 23f8748:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f874a:	d914      	bls.n	23f8776 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23f874c:	4290      	cmp	r0, r2
 23f874e:	d213      	bcs.n	23f8778 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23f8750:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23f8754:	1a75      	subs	r5, r6, r1
 23f8756:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23f875a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f875c:	42b7      	cmp	r7, r6
 23f875e:	d018      	beq.n	23f8792 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23f8760:	b11c      	cbz	r4, 23f876a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23f8762:	4631      	mov	r1, r6
 23f8764:	4620      	mov	r0, r4
 23f8766:	f7fe fed7 	bl	23f7518 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23f876a:	4630      	mov	r0, r6
 23f876c:	f7fe fc30 	bl	23f6fd0 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23f8770:	3e24      	subs	r6, #36	; 0x24
 23f8772:	3c24      	subs	r4, #36	; 0x24
 23f8774:	e7f2      	b.n	23f875c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23f8776:	d00c      	beq.n	23f8792 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23f8778:	42b5      	cmp	r5, r6
 23f877a:	d00a      	beq.n	23f8792 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23f877c:	b11c      	cbz	r4, 23f8786 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23f877e:	4629      	mov	r1, r5
 23f8780:	4620      	mov	r0, r4
 23f8782:	f7fe fec9 	bl	23f7518 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23f8786:	4628      	mov	r0, r5
 23f8788:	f7fe fc22 	bl	23f6fd0 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23f878c:	3524      	adds	r5, #36	; 0x24
 23f878e:	3424      	adds	r4, #36	; 0x24
 23f8790:	e7f2      	b.n	23f8778 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23f8792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8794 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23f8794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23f8796:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f8798:	4605      	mov	r5, r0
        if (n > 0) {
 23f879a:	dd13      	ble.n	23f87c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f879c:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23f879e:	fb07 f006 	mul.w	r0, r7, r6
 23f87a2:	f7fb ffe3 	bl	23f476c <malloc>
            if (!d) {
 23f87a6:	4604      	mov	r4, r0
 23f87a8:	b158      	cbz	r0, 23f87c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23f87aa:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f87ae:	fb07 1202 	mla	r2, r7, r2, r1
 23f87b2:	f7ff ffc5 	bl	23f8740 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23f87b6:	6828      	ldr	r0, [r5, #0]
 23f87b8:	f7fb ffe6 	bl	23f4788 <free>
        return true;
 23f87bc:	2001      	movs	r0, #1
        data_ = d;
 23f87be:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f87c0:	60ae      	str	r6, [r5, #8]
    }
 23f87c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23f87c4:	2400      	movs	r4, #0
 23f87c6:	e7f6      	b.n	23f87b6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023f87c8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23f87c8:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f87ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f87ce:	e9c0 3300 	strd	r3, r3, [r0]
 23f87d2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f87d4:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f87d6:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f87d8:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f87da:	4299      	cmp	r1, r3
 23f87dc:	dd29      	ble.n	23f8832 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
 23f87de:	f7ff ffd9 	bl	23f8794 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f87e2:	b330      	cbz	r0, 23f8832 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x6a>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f87e4:	e9d7 4300 	ldrd	r4, r3, [r7]
 23f87e8:	f04f 0824 	mov.w	r8, #36	; 0x24
 23f87ec:	682e      	ldr	r6, [r5, #0]
 23f87ee:	fb08 4803 	mla	r8, r8, r3, r4
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
 23f87f2:	3408      	adds	r4, #8
        for (; it != end; ++it, ++dest) {
 23f87f4:	f1a4 0208 	sub.w	r2, r4, #8
 23f87f8:	4590      	cmp	r8, r2
 23f87fa:	d018      	beq.n	23f882e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            new(dest) T(*it);
 23f87fc:	b1a6      	cbz	r6, 23f8828 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x60>
    address_ = addr.address_;
 23f87fe:	f854 3c08 	ldr.w	r3, [r4, #-8]
class BleAdvertisingData {
 23f8802:	4621      	mov	r1, r4
 23f8804:	6033      	str	r3, [r6, #0]
 23f8806:	f854 3c04 	ldr.w	r3, [r4, #-4]
 23f880a:	f106 0008 	add.w	r0, r6, #8
 23f880e:	6073      	str	r3, [r6, #4]
 23f8810:	f7fe fe65 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23f8814:	f104 010c 	add.w	r1, r4, #12
 23f8818:	f106 0014 	add.w	r0, r6, #20
 23f881c:	f7fe fe5f 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23f8820:	f994 3018 	ldrsb.w	r3, [r4, #24]
 23f8824:	f886 3020 	strb.w	r3, [r6, #32]
        for (; it != end; ++it, ++dest) {
 23f8828:	3624      	adds	r6, #36	; 0x24
 23f882a:	3424      	adds	r4, #36	; 0x24
 23f882c:	e7e2      	b.n	23f87f4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23f882e:	687b      	ldr	r3, [r7, #4]
 23f8830:	606b      	str	r3, [r5, #4]
}
 23f8832:	4628      	mov	r0, r5
 23f8834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8838 <_ZN8particle16BleScanDelegator5startEv>:
    Vector<BleScanResult> start() {
 23f8838:	b538      	push	{r3, r4, r5, lr}
 23f883a:	460c      	mov	r4, r1
 23f883c:	4605      	mov	r5, r0
        scanResultCallback_ = nullptr;
 23f883e:	f101 0018 	add.w	r0, r1, #24
 23f8842:	f7fd fe85 	bl	23f6550 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23f8846:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23f884a:	f7fd fe8c 	bl	23f6566 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        hal_ble_gap_start_scan(onScanResultCallback, this, nullptr);
 23f884e:	2200      	movs	r2, #0
 23f8850:	4621      	mov	r1, r4
 23f8852:	4804      	ldr	r0, [pc, #16]	; (23f8864 <_ZN8particle16BleScanDelegator5startEv+0x2c>)
 23f8854:	f7fb fd22 	bl	23f429c <hal_ble_gap_start_scan>
        return resultsVector_;
 23f8858:	4621      	mov	r1, r4
 23f885a:	4628      	mov	r0, r5
 23f885c:	f7ff ffb4 	bl	23f87c8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEEC1ERKS4_>
    }
 23f8860:	4628      	mov	r0, r5
 23f8862:	bd38      	pop	{r3, r4, r5, pc}
 23f8864:	023f8889 	.word	0x023f8889

023f8868 <_ZNK8particle14BleLocalDevice4scanEv>:
Vector<BleScanResult> BleLocalDevice::scan() const {
 23f8868:	b510      	push	{r4, lr}
 23f886a:	4604      	mov	r4, r0
 23f886c:	b09e      	sub	sp, #120	; 0x78
    BleScanDelegator scanner;
 23f886e:	a801      	add	r0, sp, #4
 23f8870:	f7fe fbb8 	bl	23f6fe4 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start();
 23f8874:	4620      	mov	r0, r4
 23f8876:	a901      	add	r1, sp, #4
 23f8878:	f7ff ffde 	bl	23f8838 <_ZN8particle16BleScanDelegator5startEv>
    BleScanDelegator scanner;
 23f887c:	a801      	add	r0, sp, #4
 23f887e:	f7fe fbd4 	bl	23f702a <_ZN8particle16BleScanDelegatorD1Ev>
}
 23f8882:	4620      	mov	r0, r4
 23f8884:	b01e      	add	sp, #120	; 0x78
 23f8886:	bd10      	pop	{r4, pc}

023f8888 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23f8888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f888c:	4606      	mov	r6, r0
 23f888e:	460c      	mov	r4, r1
 23f8890:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
 23f8892:	ad01      	add	r5, sp, #4
 23f8894:	4628      	mov	r0, r5
 23f8896:	f7fd ff95 	bl	23f67c4 <_ZN8particle10BleAddressC1Ev>
 23f889a:	a803      	add	r0, sp, #12
 23f889c:	f7fe ff19 	bl	23f76d2 <_ZN8particle18BleAdvertisingDataC1Ev>
 23f88a0:	a806      	add	r0, sp, #24
 23f88a2:	f7fe ff16 	bl	23f76d2 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23f88a6:	6930      	ldr	r0, [r6, #16]
 23f88a8:	6971      	ldr	r1, [r6, #20]
 23f88aa:	ab13      	add	r3, sp, #76	; 0x4c
 23f88ac:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23f88ae:	7833      	ldrb	r3, [r6, #0]
    address_ = addr.address_;
 23f88b0:	e885 0003 	stmia.w	r5, {r0, r1}
        scanResponse_.set(buf, len);
 23f88b4:	89f2      	ldrh	r2, [r6, #14]
 23f88b6:	68b1      	ldr	r1, [r6, #8]
 23f88b8:	a806      	add	r0, sp, #24
        rssi_ = value;
 23f88ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23f88be:	f7fe fe7c 	bl	23f75ba <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23f88c2:	89b2      	ldrh	r2, [r6, #12]
 23f88c4:	6871      	ldr	r1, [r6, #4]
 23f88c6:	a803      	add	r0, sp, #12
 23f88c8:	f7fe fe77 	bl	23f75ba <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23f88cc:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
 23f88d0:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23f88d2:	2b7f      	cmp	r3, #127	; 0x7f
 23f88d4:	d003      	beq.n	23f88de <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
 23f88d6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23f88da:	429a      	cmp	r2, r3
 23f88dc:	db5c      	blt.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
 23f88de:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23f88e2:	2b7f      	cmp	r3, #127	; 0x7f
 23f88e4:	d003      	beq.n	23f88ee <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
 23f88e6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23f88ea:	429a      	cmp	r2, r3
 23f88ec:	dc54      	bgt.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
 23f88ee:	4638      	mov	r0, r7
 23f88f0:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23f88f4:	f7fe fcd5 	bl	23f72a2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23f88f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23f88fa:	2b00      	cmp	r3, #0
 23f88fc:	dd52      	ble.n	23f89a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
 23f88fe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
 23f8900:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23f8904:	45b1      	cmp	r9, r6
 23f8906:	d050      	beq.n	23f89aa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
 23f8908:	4630      	mov	r0, r6
 23f890a:	4629      	mov	r1, r5
 23f890c:	f7fd fece 	bl	23f66ac <_ZNK8particle10BleAddresseqERKS0_>
 23f8910:	3608      	adds	r6, #8
 23f8912:	4680      	mov	r8, r0
 23f8914:	2800      	cmp	r0, #0
 23f8916:	d0f5      	beq.n	23f8904 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
 23f8918:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23f891a:	f7fb ff35 	bl	23f4788 <free>
        if (!delegator->filterByRssi(result) ||
 23f891e:	f1b8 0f00 	cmp.w	r8, #0
 23f8922:	d039      	beq.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
 23f8924:	4629      	mov	r1, r5
 23f8926:	4620      	mov	r0, r4
 23f8928:	f7fe fc7e 	bl	23f7228 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23f892c:	b3a0      	cbz	r0, 23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
 23f892e:	4629      	mov	r1, r5
 23f8930:	4620      	mov	r0, r4
 23f8932:	f7ff fa29 	bl	23f7d88 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23f8936:	4606      	mov	r6, r0
 23f8938:	b370      	cbz	r0, 23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
 23f893a:	4638      	mov	r0, r7
 23f893c:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23f8940:	f7fe fcfc 	bl	23f733c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23f8944:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f8946:	2b00      	cmp	r3, #0
 23f8948:	dd12      	ble.n	23f8970 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23f894a:	a806      	add	r0, sp, #24
 23f894c:	f7fe f8fc 	bl	23f6b48 <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23f8950:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23f8952:	a803      	add	r0, sp, #12
 23f8954:	f7fe f8f8 	bl	23f6b48 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23f8958:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23f895c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23f8960:	429a      	cmp	r2, r3
 23f8962:	d025      	beq.n	23f89b0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
 23f8964:	f833 1b02 	ldrh.w	r1, [r3], #2
 23f8968:	4588      	cmp	r8, r1
 23f896a:	d001      	beq.n	23f8970 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
 23f896c:	4288      	cmp	r0, r1
 23f896e:	d1f7      	bne.n	23f8960 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
 23f8970:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23f8972:	f7fb ff09 	bl	23f4788 <free>
              !delegator->filterByServiceUUID(result) ||
 23f8976:	b17e      	cbz	r6, 23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
 23f8978:	4629      	mov	r1, r5
 23f897a:	4620      	mov	r0, r4
 23f897c:	f7fe fd14 	bl	23f73a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23f8980:	b150      	cbz	r0, 23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
 23f8982:	6a23      	ldr	r3, [r4, #32]
 23f8984:	b1b3      	cbz	r3, 23f89b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8986:	4639      	mov	r1, r7
            delegator->foundCount_++;
 23f8988:	6963      	ldr	r3, [r4, #20]
 23f898a:	9513      	str	r5, [sp, #76]	; 0x4c
 23f898c:	3301      	adds	r3, #1
 23f898e:	6163      	str	r3, [r4, #20]
 23f8990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23f8992:	f104 0018 	add.w	r0, r4, #24
 23f8996:	4798      	blx	r3
            return;
 23f8998:	4628      	mov	r0, r5
 23f899a:	f7fe fb19 	bl	23f6fd0 <_ZN8particle13BleScanResultD1Ev>
    }
 23f899e:	b01d      	add	sp, #116	; 0x74
 23f89a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 23f89a4:	f04f 0801 	mov.w	r8, #1
 23f89a8:	e7b6      	b.n	23f8918 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23f89aa:	f04f 0800 	mov.w	r8, #0
 23f89ae:	e7b3      	b.n	23f8918 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23f89b0:	2600      	movs	r6, #0
 23f89b2:	e7dd      	b.n	23f8970 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
 23f89b4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 23f89b8:	f1b8 0f00 	cmp.w	r8, #0
 23f89bc:	d007      	beq.n	23f89ce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
 23f89be:	6963      	ldr	r3, [r4, #20]
 23f89c0:	4629      	mov	r1, r5
 23f89c2:	3301      	adds	r3, #1
 23f89c4:	6163      	str	r3, [r4, #20]
 23f89c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23f89ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f89cc:	e7e3      	b.n	23f8996 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
 23f89ce:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23f89d2:	f1bc 0f00 	cmp.w	ip, #0
 23f89d6:	d024      	beq.n	23f8a22 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19a>
            if (delegator->foundCount_ < delegator->targetCount_) {
 23f89d8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23f89dc:	4293      	cmp	r3, r2
 23f89de:	d2db      	bcs.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_] = result;
 23f89e0:	2224      	movs	r2, #36	; 0x24
 23f89e2:	4353      	muls	r3, r2
    address_ = addr.address_;
 23f89e4:	462a      	mov	r2, r5
                delegator->resultsPtr_[delegator->foundCount_] = result;
 23f89e6:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
 23f89ea:	ca03      	ldmia	r2!, {r0, r1}
 23f89ec:	f84c 0003 	str.w	r0, [ip, r3]
 23f89f0:	6071      	str	r1, [r6, #4]
class BleScanResult {
 23f89f2:	f106 0008 	add.w	r0, r6, #8
 23f89f6:	a903      	add	r1, sp, #12
 23f89f8:	f7fe fda7 	bl	23f754a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23f89fc:	a906      	add	r1, sp, #24
 23f89fe:	f106 0014 	add.w	r0, r6, #20
 23f8a02:	f7fe fda2 	bl	23f754a <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23f8a06:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23f8a0a:	f886 3020 	strb.w	r3, [r6, #32]
                delegator->foundCount_++;
 23f8a0e:	6963      	ldr	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23f8a10:	6922      	ldr	r2, [r4, #16]
                delegator->foundCount_++;
 23f8a12:	3301      	adds	r3, #1
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23f8a14:	4293      	cmp	r3, r2
                delegator->foundCount_++;
 23f8a16:	6163      	str	r3, [r4, #20]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23f8a18:	d3be      	bcc.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
 23f8a1a:	4640      	mov	r0, r8
 23f8a1c:	f7fb fc4c 	bl	23f42b8 <hal_ble_gap_stop_scan>
 23f8a20:	e7ba      	b.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
 23f8a22:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23f8a26:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f8a2a:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23f8a2e:	a903      	add	r1, sp, #12
 23f8a30:	a80c      	add	r0, sp, #48	; 0x30
 23f8a32:	f7fe fd54 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23f8a36:	a906      	add	r1, sp, #24
 23f8a38:	a80f      	add	r0, sp, #60	; 0x3c
 23f8a3a:	f7fe fd50 	bl	23f74de <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23f8a3e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23f8a42:	4641      	mov	r1, r8
 23f8a44:	4638      	mov	r0, r7
 23f8a46:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23f8a4a:	6866      	ldr	r6, [r4, #4]
 23f8a4c:	f7fe fd64 	bl	23f7518 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8a50:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23f8a54:	4299      	cmp	r1, r3
 23f8a56:	da10      	bge.n	23f8a7a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f2>
    T* const p = data_ + i;
 23f8a58:	2224      	movs	r2, #36	; 0x24
 23f8a5a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f8a5c:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23f8a5e:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23f8a62:	fb02 3201 	mla	r2, r2, r1, r3
 23f8a66:	f106 0024 	add.w	r0, r6, #36	; 0x24
 23f8a6a:	4631      	mov	r1, r6
 23f8a6c:	f7ff fe68 	bl	23f8740 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23f8a70:	b986      	cbnz	r6, 23f8a94 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20c>
    ++size_;
 23f8a72:	6863      	ldr	r3, [r4, #4]
 23f8a74:	3301      	adds	r3, #1
 23f8a76:	6063      	str	r3, [r4, #4]
    return true;
 23f8a78:	e005      	b.n	23f8a86 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1fe>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f8a7a:	4620      	mov	r0, r4
 23f8a7c:	3101      	adds	r1, #1
 23f8a7e:	f7ff fe89 	bl	23f8794 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23f8a82:	2800      	cmp	r0, #0
 23f8a84:	d1e8      	bne.n	23f8a58 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d0>
    return insert(size_, std::move(value));
 23f8a86:	4638      	mov	r0, r7
 23f8a88:	f7fe faa2 	bl	23f6fd0 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23f8a8c:	4640      	mov	r0, r8
 23f8a8e:	f7fe fa9f 	bl	23f6fd0 <_ZN8particle13BleScanResultD1Ev>
 23f8a92:	e781      	b.n	23f8998 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
 23f8a94:	4639      	mov	r1, r7
 23f8a96:	4630      	mov	r0, r6
 23f8a98:	f7fe fd3e 	bl	23f7518 <_ZN8particle13BleScanResultC1EOS0_>
 23f8a9c:	e7e9      	b.n	23f8a72 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ea>
	...

023f8aa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23f8aa0:	2300      	movs	r3, #0
 23f8aa2:	4802      	ldr	r0, [pc, #8]	; (23f8aac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f8aa4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23f8aa6:	f7fb bbb3 	b.w	23f4210 <os_mutex_recursive_create>
 23f8aaa:	bf00      	nop
 23f8aac:	1007aee8 	.word	0x1007aee8

023f8ab0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23f8ab0:	b510      	push	{r4, lr}
 23f8ab2:	4604      	mov	r4, r0
{
	free(buffer);
 23f8ab4:	6800      	ldr	r0, [r0, #0]
 23f8ab6:	f7fb fe67 	bl	23f4788 <free>
}
 23f8aba:	4620      	mov	r0, r4
 23f8abc:	bd10      	pop	{r4, pc}

023f8abe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23f8abe:	b510      	push	{r4, lr}
 23f8ac0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23f8ac2:	6800      	ldr	r0, [r0, #0]
 23f8ac4:	b108      	cbz	r0, 23f8aca <_ZN6String10invalidateEv+0xc>
 23f8ac6:	f7fb fe5f 	bl	23f4788 <free>
	buffer = NULL;
 23f8aca:	2300      	movs	r3, #0
	capacity = len = 0;
 23f8acc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23f8ad0:	6023      	str	r3, [r4, #0]
}
 23f8ad2:	bd10      	pop	{r4, pc}

023f8ad4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f8ad4:	b538      	push	{r3, r4, r5, lr}
 23f8ad6:	4604      	mov	r4, r0
 23f8ad8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f8ada:	6800      	ldr	r0, [r0, #0]
 23f8adc:	3101      	adds	r1, #1
 23f8ade:	f7fb fe61 	bl	23f47a4 <realloc>
	if (newbuffer) {
 23f8ae2:	b110      	cbz	r0, 23f8aea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23f8ae4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23f8ae8:	2001      	movs	r0, #1
	}
	return 0;
}
 23f8aea:	bd38      	pop	{r3, r4, r5, pc}

023f8aec <_ZN6String7reserveEj>:
{
 23f8aec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23f8aee:	6803      	ldr	r3, [r0, #0]
{
 23f8af0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23f8af2:	b123      	cbz	r3, 23f8afe <_ZN6String7reserveEj+0x12>
 23f8af4:	6843      	ldr	r3, [r0, #4]
 23f8af6:	428b      	cmp	r3, r1
 23f8af8:	d301      	bcc.n	23f8afe <_ZN6String7reserveEj+0x12>
 23f8afa:	2001      	movs	r0, #1
}
 23f8afc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23f8afe:	4620      	mov	r0, r4
 23f8b00:	f7ff ffe8 	bl	23f8ad4 <_ZN6String12changeBufferEj>
 23f8b04:	2800      	cmp	r0, #0
 23f8b06:	d0f9      	beq.n	23f8afc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23f8b08:	68a3      	ldr	r3, [r4, #8]
 23f8b0a:	2b00      	cmp	r3, #0
 23f8b0c:	d1f5      	bne.n	23f8afa <_ZN6String7reserveEj+0xe>
 23f8b0e:	6822      	ldr	r2, [r4, #0]
 23f8b10:	7013      	strb	r3, [r2, #0]
 23f8b12:	e7f2      	b.n	23f8afa <_ZN6String7reserveEj+0xe>

023f8b14 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f8b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8b16:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23f8b18:	4611      	mov	r1, r2
 23f8b1a:	9201      	str	r2, [sp, #4]
{
 23f8b1c:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23f8b1e:	f7ff ffe5 	bl	23f8aec <_ZN6String7reserveEj>
 23f8b22:	9a01      	ldr	r2, [sp, #4]
 23f8b24:	b928      	cbnz	r0, 23f8b32 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23f8b26:	4620      	mov	r0, r4
 23f8b28:	f7ff ffc9 	bl	23f8abe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23f8b2c:	4620      	mov	r0, r4
 23f8b2e:	b003      	add	sp, #12
 23f8b30:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23f8b32:	4629      	mov	r1, r5
	len = length;
 23f8b34:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23f8b36:	6820      	ldr	r0, [r4, #0]
 23f8b38:	f002 fa9d 	bl	23fb076 <memcpy>
	buffer[len] = 0;
 23f8b3c:	2100      	movs	r1, #0
 23f8b3e:	6822      	ldr	r2, [r4, #0]
 23f8b40:	68a3      	ldr	r3, [r4, #8]
 23f8b42:	54d1      	strb	r1, [r2, r3]
	return *this;
 23f8b44:	e7f2      	b.n	23f8b2c <_ZN6String4copyEPKcj+0x18>

023f8b46 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23f8b46:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23f8b48:	b513      	push	{r0, r1, r4, lr}
 23f8b4a:	4604      	mov	r4, r0
	capacity = 0;
 23f8b4c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f8b50:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f8b52:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23f8b54:	b141      	cbz	r1, 23f8b68 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23f8b56:	4608      	mov	r0, r1
 23f8b58:	9101      	str	r1, [sp, #4]
 23f8b5a:	f7f1 fcc5 	bl	23ea4e8 <strlen>
 23f8b5e:	9901      	ldr	r1, [sp, #4]
 23f8b60:	4602      	mov	r2, r0
 23f8b62:	4620      	mov	r0, r4
 23f8b64:	f7ff ffd6 	bl	23f8b14 <_ZN6String4copyEPKcj>
}
 23f8b68:	4620      	mov	r0, r4
 23f8b6a:	b002      	add	sp, #8
 23f8b6c:	bd10      	pop	{r4, pc}

023f8b6e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23f8b6e:	b538      	push	{r3, r4, r5, lr}
 23f8b70:	4605      	mov	r5, r0
	if (buffer) {
 23f8b72:	6800      	ldr	r0, [r0, #0]
{
 23f8b74:	460c      	mov	r4, r1
	if (buffer) {
 23f8b76:	b168      	cbz	r0, 23f8b94 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23f8b78:	686a      	ldr	r2, [r5, #4]
 23f8b7a:	688b      	ldr	r3, [r1, #8]
 23f8b7c:	429a      	cmp	r2, r3
 23f8b7e:	d307      	bcc.n	23f8b90 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23f8b80:	6809      	ldr	r1, [r1, #0]
 23f8b82:	f002 fafc 	bl	23fb17e <strcpy>
			len = rhs.len;
 23f8b86:	68a3      	ldr	r3, [r4, #8]
 23f8b88:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23f8b8a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23f8b8c:	60a3      	str	r3, [r4, #8]
}
 23f8b8e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23f8b90:	f7fb fdfa 	bl	23f4788 <free>
	buffer = rhs.buffer;
 23f8b94:	6823      	ldr	r3, [r4, #0]
 23f8b96:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23f8b98:	6863      	ldr	r3, [r4, #4]
 23f8b9a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23f8b9c:	68a3      	ldr	r3, [r4, #8]
 23f8b9e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23f8ba0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23f8ba2:	e9c4 3300 	strd	r3, r3, [r4]
 23f8ba6:	e7f1      	b.n	23f8b8c <_ZN6String4moveERS_+0x1e>

023f8ba8 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23f8ba8:	2300      	movs	r3, #0
String::String(String &&rval)
 23f8baa:	b510      	push	{r4, lr}
 23f8bac:	4604      	mov	r4, r0
	capacity = 0;
 23f8bae:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f8bb2:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f8bb4:	7303      	strb	r3, [r0, #12]
	move(rval);
 23f8bb6:	f7ff ffda 	bl	23f8b6e <_ZN6String4moveERS_>
}
 23f8bba:	4620      	mov	r0, r4
 23f8bbc:	bd10      	pop	{r4, pc}

023f8bbe <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23f8bbe:	4288      	cmp	r0, r1
{
 23f8bc0:	b510      	push	{r4, lr}
 23f8bc2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23f8bc4:	d005      	beq.n	23f8bd2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23f8bc6:	680b      	ldr	r3, [r1, #0]
 23f8bc8:	b12b      	cbz	r3, 23f8bd6 <_ZN6StringaSERKS_+0x18>
 23f8bca:	688a      	ldr	r2, [r1, #8]
 23f8bcc:	4619      	mov	r1, r3
 23f8bce:	f7ff ffa1 	bl	23f8b14 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23f8bd2:	4620      	mov	r0, r4
 23f8bd4:	bd10      	pop	{r4, pc}
	else invalidate();
 23f8bd6:	f7ff ff72 	bl	23f8abe <_ZN6String10invalidateEv>
 23f8bda:	e7fa      	b.n	23f8bd2 <_ZN6StringaSERKS_+0x14>

023f8bdc <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23f8bdc:	2300      	movs	r3, #0
String::String(const String &value)
 23f8bde:	b510      	push	{r4, lr}
 23f8be0:	4604      	mov	r4, r0
	capacity = 0;
 23f8be2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f8be6:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f8be8:	7303      	strb	r3, [r0, #12]
	*this = value;
 23f8bea:	f7ff ffe8 	bl	23f8bbe <_ZN6StringaSERKS_>
}
 23f8bee:	4620      	mov	r0, r4
 23f8bf0:	bd10      	pop	{r4, pc}

023f8bf2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23f8bf2:	b513      	push	{r0, r1, r4, lr}
 23f8bf4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23f8bf6:	b159      	cbz	r1, 23f8c10 <_ZN6StringaSEPKc+0x1e>
 23f8bf8:	4608      	mov	r0, r1
 23f8bfa:	9101      	str	r1, [sp, #4]
 23f8bfc:	f7f1 fc74 	bl	23ea4e8 <strlen>
 23f8c00:	9901      	ldr	r1, [sp, #4]
 23f8c02:	4602      	mov	r2, r0
 23f8c04:	4620      	mov	r0, r4
 23f8c06:	f7ff ff85 	bl	23f8b14 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23f8c0a:	4620      	mov	r0, r4
 23f8c0c:	b002      	add	sp, #8
 23f8c0e:	bd10      	pop	{r4, pc}
	else invalidate();
 23f8c10:	f7ff ff55 	bl	23f8abe <_ZN6String10invalidateEv>
 23f8c14:	e7f9      	b.n	23f8c0a <_ZN6StringaSEPKc+0x18>

023f8c16 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23f8c16:	b570      	push	{r4, r5, r6, lr}
 23f8c18:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23f8c1a:	460e      	mov	r6, r1
 23f8c1c:	b909      	cbnz	r1, 23f8c22 <_ZN6String6concatEPKcj+0xc>
 23f8c1e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23f8c20:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23f8c22:	b16a      	cbz	r2, 23f8c40 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23f8c24:	6884      	ldr	r4, [r0, #8]
 23f8c26:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23f8c28:	4621      	mov	r1, r4
 23f8c2a:	f7ff ff5f 	bl	23f8aec <_ZN6String7reserveEj>
 23f8c2e:	2800      	cmp	r0, #0
 23f8c30:	d0f5      	beq.n	23f8c1e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23f8c32:	6828      	ldr	r0, [r5, #0]
 23f8c34:	68ab      	ldr	r3, [r5, #8]
 23f8c36:	4631      	mov	r1, r6
 23f8c38:	4418      	add	r0, r3
 23f8c3a:	f002 faa0 	bl	23fb17e <strcpy>
	len = newlen;
 23f8c3e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23f8c40:	2001      	movs	r0, #1
 23f8c42:	e7ed      	b.n	23f8c20 <_ZN6String6concatEPKcj+0xa>

023f8c44 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 23f8c44:	2300      	movs	r3, #0
{
 23f8c46:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 23f8c48:	2201      	movs	r2, #1
	buf[0] = c;
 23f8c4a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 23f8c4e:	a901      	add	r1, sp, #4
	buf[1] = 0;
 23f8c50:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 23f8c54:	f7ff ffdf 	bl	23f8c16 <_ZN6String6concatEPKcj>
}
 23f8c58:	b003      	add	sp, #12
 23f8c5a:	f85d fb04 	ldr.w	pc, [sp], #4

023f8c5e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
 23f8c5e:	6802      	ldr	r2, [r0, #0]
{
 23f8c60:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 23f8c62:	6809      	ldr	r1, [r1, #0]
 23f8c64:	b162      	cbz	r2, 23f8c80 <_ZNK6String9compareToERKS_+0x22>
 23f8c66:	b941      	cbnz	r1, 23f8c7a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 23f8c68:	6880      	ldr	r0, [r0, #8]
 23f8c6a:	b160      	cbz	r0, 23f8c86 <_ZNK6String9compareToERKS_+0x28>
 23f8c6c:	7810      	ldrb	r0, [r2, #0]
 23f8c6e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23f8c70:	6898      	ldr	r0, [r3, #8]
 23f8c72:	b140      	cbz	r0, 23f8c86 <_ZNK6String9compareToERKS_+0x28>
 23f8c74:	7809      	ldrb	r1, [r1, #0]
 23f8c76:	4248      	negs	r0, r1
 23f8c78:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 23f8c7a:	4610      	mov	r0, r2
 23f8c7c:	f7f1 bc2a 	b.w	23ea4d4 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23f8c80:	2900      	cmp	r1, #0
 23f8c82:	d1f5      	bne.n	23f8c70 <_ZNK6String9compareToERKS_+0x12>
		return 0;
 23f8c84:	4608      	mov	r0, r1
}
 23f8c86:	4770      	bx	lr

023f8c88 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23f8c88:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 23f8c8a:	6882      	ldr	r2, [r0, #8]
 23f8c8c:	688b      	ldr	r3, [r1, #8]
 23f8c8e:	429a      	cmp	r2, r3
 23f8c90:	d105      	bne.n	23f8c9e <_ZNK6String6equalsERKS_+0x16>
 23f8c92:	f7ff ffe4 	bl	23f8c5e <_ZNK6String9compareToERKS_>
 23f8c96:	fab0 f080 	clz	r0, r0
 23f8c9a:	0940      	lsrs	r0, r0, #5
}
 23f8c9c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 23f8c9e:	2000      	movs	r0, #0
 23f8ca0:	e7fc      	b.n	23f8c9c <_ZNK6String6equalsERKS_+0x14>
	...

023f8ca4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f8ca4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f8ca6:	2000      	movs	r0, #0
 23f8ca8:	4b04      	ldr	r3, [pc, #16]	; (23f8cbc <_GLOBAL__sub_I_System+0x18>)
 23f8caa:	601a      	str	r2, [r3, #0]
 23f8cac:	4b04      	ldr	r3, [pc, #16]	; (23f8cc0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f8cae:	4a05      	ldr	r2, [pc, #20]	; (23f8cc4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f8cb0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f8cb4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f8cb6:	f7fb bd13 	b.w	23f46e0 <set_system_mode>
 23f8cba:	bf00      	nop
 23f8cbc:	1007aefc 	.word	0x1007aefc
 23f8cc0:	1007aef0 	.word	0x1007aef0
 23f8cc4:	ffff0000 	.word	0xffff0000

023f8cc8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f8cc8:	2200      	movs	r2, #0
 23f8cca:	6840      	ldr	r0, [r0, #4]
 23f8ccc:	4611      	mov	r1, r2
 23f8cce:	f7fb bcc1 	b.w	23f4654 <network_listening>

023f8cd2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8cd2:	2200      	movs	r2, #0
 23f8cd4:	6840      	ldr	r0, [r0, #4]
 23f8cd6:	4611      	mov	r1, r2
 23f8cd8:	f7fb bcd8 	b.w	23f468c <network_get_listen_timeout>

023f8cdc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f8cdc:	2200      	movs	r2, #0
 23f8cde:	6840      	ldr	r0, [r0, #4]
 23f8ce0:	f7fb bcc6 	b.w	23f4670 <network_set_listen_timeout>

023f8ce4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8ce4:	2200      	movs	r2, #0
 23f8ce6:	6840      	ldr	r0, [r0, #4]
 23f8ce8:	f081 0101 	eor.w	r1, r1, #1
 23f8cec:	f7fb bca4 	b.w	23f4638 <network_listen>

023f8cf0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8cf0:	2300      	movs	r3, #0
 23f8cf2:	6840      	ldr	r0, [r0, #4]
 23f8cf4:	461a      	mov	r2, r3
 23f8cf6:	4619      	mov	r1, r3
 23f8cf8:	f7fb bc90 	b.w	23f461c <network_off>

023f8cfc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8cfc:	2300      	movs	r3, #0
 23f8cfe:	6840      	ldr	r0, [r0, #4]
 23f8d00:	461a      	mov	r2, r3
 23f8d02:	4619      	mov	r1, r3
 23f8d04:	f7fb bc7c 	b.w	23f4600 <network_on>

023f8d08 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f8d08:	2200      	movs	r2, #0
 23f8d0a:	6840      	ldr	r0, [r0, #4]
 23f8d0c:	4611      	mov	r1, r2
 23f8d0e:	f7fb bc69 	b.w	23f45e4 <network_ready>

023f8d12 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f8d12:	2200      	movs	r2, #0
 23f8d14:	6840      	ldr	r0, [r0, #4]
 23f8d16:	4611      	mov	r1, r2
 23f8d18:	f7fb bc48 	b.w	23f45ac <network_connecting>

023f8d1c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f8d1c:	2200      	movs	r2, #0
 23f8d1e:	2102      	movs	r1, #2
 23f8d20:	6840      	ldr	r0, [r0, #4]
 23f8d22:	f7fb bc51 	b.w	23f45c8 <network_disconnect>

023f8d26 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8d26:	2300      	movs	r3, #0
 23f8d28:	6840      	ldr	r0, [r0, #4]
 23f8d2a:	461a      	mov	r2, r3
 23f8d2c:	f7fb bc30 	b.w	23f4590 <network_connect>

023f8d30 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f8d30:	2203      	movs	r2, #3
 23f8d32:	4b02      	ldr	r3, [pc, #8]	; (23f8d3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f8d34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f8d36:	4a02      	ldr	r2, [pc, #8]	; (23f8d40 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f8d38:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f8d3a:	4770      	bx	lr
 23f8d3c:	1007af00 	.word	0x1007af00
 23f8d40:	023ffa14 	.word	0x023ffa14

023f8d44 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f8d44:	4770      	bx	lr
	...

023f8d48 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23f8d48:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f8d4a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23f8d4c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f8d4e:	462a      	mov	r2, r5
 23f8d50:	2100      	movs	r1, #0
 23f8d52:	f002 f9b7 	bl	23fb0c4 <memset>
 23f8d56:	8025      	strh	r5, [r4, #0]
 23f8d58:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f8d5a:	4907      	ldr	r1, [pc, #28]	; (23f8d78 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23f8d5c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f8d5e:	8125      	strh	r5, [r4, #8]
 23f8d60:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f8d62:	f000 fa4f 	bl	23f9204 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f8d66:	4904      	ldr	r1, [pc, #16]	; (23f8d78 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23f8d68:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f8d6a:	4628      	mov	r0, r5
 23f8d6c:	f000 fa4a 	bl	23f9204 <_ZnajRKSt9nothrow_t>
    };
 23f8d70:	60e0      	str	r0, [r4, #12]
}
 23f8d72:	4620      	mov	r0, r4
 23f8d74:	bd38      	pop	{r3, r4, r5, pc}
 23f8d76:	bf00      	nop
 23f8d78:	023ffa77 	.word	0x023ffa77

023f8d7c <__tcf_2>:
 23f8d7c:	4770      	bx	lr

023f8d7e <__tcf_1>:
 23f8d7e:	4770      	bx	lr

023f8d80 <_Z20acquireSerial1Bufferv>:
{
 23f8d80:	b510      	push	{r4, lr}
 23f8d82:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23f8d84:	f7ff ffe0 	bl	23f8d48 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23f8d88:	4620      	mov	r0, r4
 23f8d8a:	bd10      	pop	{r4, pc}

023f8d8c <_Z20acquireSerial2Bufferv>:
 23f8d8c:	b510      	push	{r4, lr}
 23f8d8e:	4604      	mov	r4, r0
 23f8d90:	f7ff ffda 	bl	23f8d48 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f8d94:	4620      	mov	r0, r4
 23f8d96:	bd10      	pop	{r4, pc}

023f8d98 <_Z20acquireSerial3Bufferv>:
 23f8d98:	b510      	push	{r4, lr}
 23f8d9a:	4604      	mov	r4, r0
 23f8d9c:	f7ff ffd4 	bl	23f8d48 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f8da0:	4620      	mov	r0, r4
 23f8da2:	bd10      	pop	{r4, pc}

023f8da4 <_Z22__fetch_global_Serial1v>:
{
 23f8da4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f8da6:	4d0e      	ldr	r5, [pc, #56]	; (23f8de0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f8da8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f8daa:	e8d5 1f8f 	ldab	r1, [r5]
 23f8dae:	f011 0401 	ands.w	r4, r1, #1
 23f8db2:	d111      	bne.n	23f8dd8 <_Z22__fetch_global_Serial1v+0x34>
 23f8db4:	4628      	mov	r0, r5
 23f8db6:	f7f1 fbd1 	bl	23ea55c <__cxa_guard_acquire>
 23f8dba:	b168      	cbz	r0, 23f8dd8 <_Z22__fetch_global_Serial1v+0x34>
 23f8dbc:	a801      	add	r0, sp, #4
 23f8dbe:	f7ff ffdf 	bl	23f8d80 <_Z20acquireSerial1Bufferv>
 23f8dc2:	4621      	mov	r1, r4
 23f8dc4:	aa01      	add	r2, sp, #4
 23f8dc6:	4807      	ldr	r0, [pc, #28]	; (23f8de4 <_Z22__fetch_global_Serial1v+0x40>)
 23f8dc8:	f7fb fe7c 	bl	23f4ac4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f8dcc:	4628      	mov	r0, r5
 23f8dce:	f7f1 fbca 	bl	23ea566 <__cxa_guard_release>
 23f8dd2:	4805      	ldr	r0, [pc, #20]	; (23f8de8 <_Z22__fetch_global_Serial1v+0x44>)
 23f8dd4:	f002 f926 	bl	23fb024 <atexit>
    return serial1;
}
 23f8dd8:	4802      	ldr	r0, [pc, #8]	; (23f8de4 <_Z22__fetch_global_Serial1v+0x40>)
 23f8dda:	b007      	add	sp, #28
 23f8ddc:	bd30      	pop	{r4, r5, pc}
 23f8dde:	bf00      	nop
 23f8de0:	1007af0c 	.word	0x1007af0c
 23f8de4:	1007af18 	.word	0x1007af18
 23f8de8:	023f8d45 	.word	0x023f8d45

023f8dec <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f8dec:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f8dee:	4c0d      	ldr	r4, [pc, #52]	; (23f8e24 <_Z22__fetch_global_Serial2v+0x38>)
{
 23f8df0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f8df2:	e8d4 3f8f 	ldab	r3, [r4]
 23f8df6:	07db      	lsls	r3, r3, #31
 23f8df8:	d411      	bmi.n	23f8e1e <_Z22__fetch_global_Serial2v+0x32>
 23f8dfa:	4620      	mov	r0, r4
 23f8dfc:	f7f1 fbae 	bl	23ea55c <__cxa_guard_acquire>
 23f8e00:	b168      	cbz	r0, 23f8e1e <_Z22__fetch_global_Serial2v+0x32>
 23f8e02:	a801      	add	r0, sp, #4
 23f8e04:	f7ff ffc2 	bl	23f8d8c <_Z20acquireSerial2Bufferv>
 23f8e08:	2101      	movs	r1, #1
 23f8e0a:	aa01      	add	r2, sp, #4
 23f8e0c:	4806      	ldr	r0, [pc, #24]	; (23f8e28 <_Z22__fetch_global_Serial2v+0x3c>)
 23f8e0e:	f7fb fe59 	bl	23f4ac4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f8e12:	4620      	mov	r0, r4
 23f8e14:	f7f1 fba7 	bl	23ea566 <__cxa_guard_release>
 23f8e18:	4804      	ldr	r0, [pc, #16]	; (23f8e2c <_Z22__fetch_global_Serial2v+0x40>)
 23f8e1a:	f002 f903 	bl	23fb024 <atexit>
	return serial2;
}
 23f8e1e:	4802      	ldr	r0, [pc, #8]	; (23f8e28 <_Z22__fetch_global_Serial2v+0x3c>)
 23f8e20:	b006      	add	sp, #24
 23f8e22:	bd10      	pop	{r4, pc}
 23f8e24:	1007af10 	.word	0x1007af10
 23f8e28:	1007af2c 	.word	0x1007af2c
 23f8e2c:	023f8d7f 	.word	0x023f8d7f

023f8e30 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23f8e30:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23f8e32:	f7ff ffdb 	bl	23f8dec <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23f8e36:	4b07      	ldr	r3, [pc, #28]	; (23f8e54 <_Z15serialEventRun2v+0x24>)
 23f8e38:	4604      	mov	r4, r0
 23f8e3a:	b153      	cbz	r3, 23f8e52 <_Z15serialEventRun2v+0x22>
 23f8e3c:	f7fb fe60 	bl	23f4b00 <_ZN11USARTSerial9isEnabledEv>
 23f8e40:	b138      	cbz	r0, 23f8e52 <_Z15serialEventRun2v+0x22>
 23f8e42:	6823      	ldr	r3, [r4, #0]
 23f8e44:	4620      	mov	r0, r4
 23f8e46:	691b      	ldr	r3, [r3, #16]
 23f8e48:	4798      	blx	r3
 23f8e4a:	2800      	cmp	r0, #0
 23f8e4c:	dd01      	ble.n	23f8e52 <_Z15serialEventRun2v+0x22>
        handler();
 23f8e4e:	e000      	b.n	23f8e52 <_Z15serialEventRun2v+0x22>
 23f8e50:	bf00      	nop
}
 23f8e52:	bd10      	pop	{r4, pc}
 23f8e54:	00000000 	.word	0x00000000

023f8e58 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23f8e58:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f8e5a:	4c0d      	ldr	r4, [pc, #52]	; (23f8e90 <_Z22__fetch_global_Serial3v+0x38>)
{
 23f8e5c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f8e5e:	e8d4 3f8f 	ldab	r3, [r4]
 23f8e62:	07db      	lsls	r3, r3, #31
 23f8e64:	d411      	bmi.n	23f8e8a <_Z22__fetch_global_Serial3v+0x32>
 23f8e66:	4620      	mov	r0, r4
 23f8e68:	f7f1 fb78 	bl	23ea55c <__cxa_guard_acquire>
 23f8e6c:	b168      	cbz	r0, 23f8e8a <_Z22__fetch_global_Serial3v+0x32>
 23f8e6e:	a801      	add	r0, sp, #4
 23f8e70:	f7ff ff92 	bl	23f8d98 <_Z20acquireSerial3Bufferv>
 23f8e74:	2102      	movs	r1, #2
 23f8e76:	aa01      	add	r2, sp, #4
 23f8e78:	4806      	ldr	r0, [pc, #24]	; (23f8e94 <_Z22__fetch_global_Serial3v+0x3c>)
 23f8e7a:	f7fb fe23 	bl	23f4ac4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f8e7e:	4620      	mov	r0, r4
 23f8e80:	f7f1 fb71 	bl	23ea566 <__cxa_guard_release>
 23f8e84:	4804      	ldr	r0, [pc, #16]	; (23f8e98 <_Z22__fetch_global_Serial3v+0x40>)
 23f8e86:	f002 f8cd 	bl	23fb024 <atexit>
	return serial3;
}
 23f8e8a:	4802      	ldr	r0, [pc, #8]	; (23f8e94 <_Z22__fetch_global_Serial3v+0x3c>)
 23f8e8c:	b006      	add	sp, #24
 23f8e8e:	bd10      	pop	{r4, pc}
 23f8e90:	1007af14 	.word	0x1007af14
 23f8e94:	1007af40 	.word	0x1007af40
 23f8e98:	023f8d7d 	.word	0x023f8d7d

023f8e9c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23f8e9c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23f8e9e:	f7ff ffdb 	bl	23f8e58 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23f8ea2:	4b07      	ldr	r3, [pc, #28]	; (23f8ec0 <_Z15serialEventRun3v+0x24>)
 23f8ea4:	4604      	mov	r4, r0
 23f8ea6:	b153      	cbz	r3, 23f8ebe <_Z15serialEventRun3v+0x22>
 23f8ea8:	f7fb fe2a 	bl	23f4b00 <_ZN11USARTSerial9isEnabledEv>
 23f8eac:	b138      	cbz	r0, 23f8ebe <_Z15serialEventRun3v+0x22>
 23f8eae:	6823      	ldr	r3, [r4, #0]
 23f8eb0:	4620      	mov	r0, r4
 23f8eb2:	691b      	ldr	r3, [r3, #16]
 23f8eb4:	4798      	blx	r3
 23f8eb6:	2800      	cmp	r0, #0
 23f8eb8:	dd01      	ble.n	23f8ebe <_Z15serialEventRun3v+0x22>
        handler();
 23f8eba:	e000      	b.n	23f8ebe <_Z15serialEventRun3v+0x22>
 23f8ebc:	bf00      	nop
}
 23f8ebe:	bd10      	pop	{r4, pc}
 23f8ec0:	00000000 	.word	0x00000000

023f8ec4 <PLL_Div>:
  */
void PLL_Div(u32 div)
{
	u32 Tmp;

	Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3);
 23f8ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f8ec8:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
	Tmp &= ~(BIT_MASK_HSYS_I2S_CLKDIV << BIT_SHIFT_HSYS_I2S_CLKDIV);
 23f8ecc:	f023 63fe 	bic.w	r3, r3, #133169152	; 0x7f00000
	Tmp |= ((u32)div) << BIT_SHIFT_HSYS_I2S_CLKDIV;
 23f8ed0:	ea43 5000 	orr.w	r0, r3, r0, lsl #20
	HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PERI_CLK_CTRL3, Tmp);
 23f8ed4:	f8c2 0218 	str.w	r0, [r2, #536]	; 0x218
}
 23f8ed8:	4770      	bx	lr
	...

023f8edc <PLL_I2S_Set>:
void PLL_I2S_Set(u32 new_state)
{
	u32 Tmp;


	if (ENABLE == new_state){
 23f8edc:	2801      	cmp	r0, #1
{
 23f8ede:	b570      	push	{r4, r5, r6, lr}
 23f8ee0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (ENABLE == new_state){
 23f8ee4:	d14a      	bne.n	23f8f7c <PLL_I2S_Set+0xa0>
		//avoid repeated pll enable operation
		if((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY)){
 23f8ee6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23f8eea:	009a      	lsls	r2, r3, #2
 23f8eec:	d445      	bmi.n	23f8f7a <PLL_I2S_Set+0x9e>
			return ;
		}
		//enable 98.304M PLL
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0);
 23f8eee:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 23f8ef2:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);

		DelayUs(2);
 23f8ef6:	2002      	movs	r0, #2
		Tmp |= BIT_SYS_AMACRO_EN;
 23f8ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_FUNC_EN0, Tmp);
 23f8efc:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23f8f00:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23f8f04:	4e21      	ldr	r6, [pc, #132]	; (23f8f8c <PLL_I2S_Set+0xb0>)
		Tmp |= (BIT_LP_PLL_BG_I_EN |BIT_LP_PLL_BG_EN);
 23f8f06:	f043 0303 	orr.w	r3, r3, #3
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23f8f0a:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		DelayUs(2);
 23f8f0e:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0);
 23f8f10:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);

		DelayUs(400);
 23f8f14:	f44f 70c8 	mov.w	r0, #400	; 0x190
		Tmp |= BIT_LP_PLL_MBIAS_EN;
 23f8f18:	f043 0304 	orr.w	r3, r3, #4
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_SYSPLL_CTRL0, Tmp);
 23f8f1c:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f8f20:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_POWCUT_EN;
 23f8f24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f8f28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		DelayUs(400);
 23f8f2c:	47b0      	blx	r6

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1);
 23f8f2e:	f8d5 3264 	ldr.w	r3, [r5, #612]	; 0x264
		Tmp &= ~BIT_XTAL_AAC_GM_EN;
 23f8f32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_LP, REG_LP_XTAL_CTRL1, Tmp);
 23f8f36:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f8f3a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= (BIT_PLL_I2S_DIV_EN | BIT_PLL_I2S_EN);
 23f8f3e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f8f42:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL);
 23f8f46:	6823      	ldr	r3, [r4, #0]
		Tmp &= ~BIT_HSYS_ISO_AUXPLL_I2S;
 23f8f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PWR_ISO_CTRL, Tmp);
 23f8f4c:	6023      	str	r3, [r4, #0]

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1);
 23f8f4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
		Tmp |= BIT_PLL_I2S_POW_SDM_FCODE;
 23f8f52:	f043 0301 	orr.w	r3, r3, #1
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL1, Tmp);
 23f8f56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

		while ((HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_TEST) & BIT_PLL_I2S_RDY) != BIT_PLL_I2S_RDY) ;
 23f8f5a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 23f8f5e:	009b      	lsls	r3, r3, #2
 23f8f60:	d5fb      	bpl.n	23f8f5a <PLL_I2S_Set+0x7e>

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f8f62:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_CLK_EN;
 23f8f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f8f6a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f8f6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp |= BIT_PLL_I2S_DIV2_EN;
 23f8f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
	}
	else{
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
		HAL_WRITE32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0, Tmp);
 23f8f76:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	}
}
 23f8f7a:	bd70      	pop	{r4, r5, r6, pc}
		Tmp = HAL_READ32(SYSTEM_CTRL_BASE_HP, REG_HS_PLL_I2S_CTRL0);
 23f8f7c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
		Tmp &= ~(BIT_PLL_I2S_CLK_EN|BIT_PLL_I2S_DIV2_EN|BIT_PLL_I2S_EN|BIT_PLL_I2S_DIV_EN|BIT_PLL_I2S_DIV_EN);
 23f8f80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 23f8f84:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 23f8f88:	e7f5      	b.n	23f8f76 <PLL_I2S_Set+0x9a>
 23f8f8a:	bf00      	nop
 23f8f8c:	1010a949 	.word	0x1010a949

023f8f90 <AUDIO_SP_StructInit>:
  *         initialized.
  * @retval None
  */
void AUDIO_SP_StructInit(SP_InitTypeDef* SP_InitStruct)
{
	SP_InitStruct->SP_WordLen = SP_WL_16;
 23f8f90:	2300      	movs	r3, #0
	SP_InitStruct->SP_DataFormat = SP_DF_I2S;
 23f8f92:	e9c0 3300 	strd	r3, r3, [r0]
	SP_InitStruct->SP_MonoStereo = SP_CH_STEREO;
	SP_InitStruct->SP_SelRxCh = SP_RX_CH_LR;
 23f8f96:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
 23f8f9a:	4770      	bx	lr

023f8f9c <AUDIO_SP_TxStart>:
  * @retval None
  */
void AUDIO_SP_TxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f8f9c:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23f8f9e:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f8fa0:	bf0b      	itete	eq
 23f8fa2:	f423 3380 	biceq.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23f8fa6:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_TX_DISABLE;
 23f8faa:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_TX_DISABLE;
 23f8fac:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23f8fae:	bf0b      	itete	eq
 23f8fb0:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23f8fb2:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_TX;
 23f8fb4:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_TX;
 23f8fb8:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 23f8fbc:	6043      	str	r3, [r0, #4]
	}
}
 23f8fbe:	4770      	bx	lr

023f8fc0 <AUDIO_SP_RxStart>:
  * @retval None
  */
void AUDIO_SP_RxStart(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f8fc0:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE) {
 23f8fc2:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f8fc4:	bf0b      	itete	eq
 23f8fc6:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
	} else {
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23f8fca:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RX_DISABLE;
 23f8fce:	6043      	streq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_RX_DISABLE;
 23f8fd0:	6043      	strne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23f8fd2:	bf0b      	itete	eq
 23f8fd4:	6843      	ldreq	r3, [r0, #4]
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23f8fd6:	6843      	ldrne	r3, [r0, #4]
		SPORTx->SP_CTRLR0 |= SP_CTRLR0_START_RX;
 23f8fd8:	f043 7300 	orreq.w	r3, r3, #33554432	; 0x2000000
		SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_START_RX;
 23f8fdc:	f023 7300 	bicne.w	r3, r3, #33554432	; 0x2000000
 23f8fe0:	6043      	str	r3, [r0, #4]
	}
}
 23f8fe2:	4770      	bx	lr

023f8fe4 <AUDIO_SP_Init>:
{
 23f8fe4:	b538      	push	{r3, r4, r5, lr}
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23f8fe6:	680b      	ldr	r3, [r1, #0]
{
 23f8fe8:	4605      	mov	r5, r0
 23f8fea:	460c      	mov	r4, r1
	assert_param(IS_SP_WORD_LEN(SP_InitStruct->SP_WordLen));
 23f8fec:	b133      	cbz	r3, 23f8ffc <AUDIO_SP_Init+0x18>
 23f8fee:	3b02      	subs	r3, #2
 23f8ff0:	2b01      	cmp	r3, #1
 23f8ff2:	d903      	bls.n	23f8ffc <AUDIO_SP_Init+0x18>
 23f8ff4:	213a      	movs	r1, #58	; 0x3a
 23f8ff6:	481f      	ldr	r0, [pc, #124]	; (23f9074 <AUDIO_SP_Init+0x90>)
 23f8ff8:	f002 f9f6 	bl	23fb3e8 <__io_assert_failed_veneer>
	assert_param(IS_SP_DATA_FMT(SP_InitStruct->SP_DataFormat));
 23f8ffc:	6863      	ldr	r3, [r4, #4]
 23f8ffe:	2b03      	cmp	r3, #3
 23f9000:	d906      	bls.n	23f9010 <AUDIO_SP_Init+0x2c>
 23f9002:	3b06      	subs	r3, #6
 23f9004:	2b01      	cmp	r3, #1
 23f9006:	d903      	bls.n	23f9010 <AUDIO_SP_Init+0x2c>
 23f9008:	213b      	movs	r1, #59	; 0x3b
 23f900a:	481a      	ldr	r0, [pc, #104]	; (23f9074 <AUDIO_SP_Init+0x90>)
 23f900c:	f002 f9ec 	bl	23fb3e8 <__io_assert_failed_veneer>
	assert_param(IS_SP_CHN_NUM(SP_InitStruct->SP_MonoStereo));
 23f9010:	68a3      	ldr	r3, [r4, #8]
 23f9012:	2b01      	cmp	r3, #1
 23f9014:	d903      	bls.n	23f901e <AUDIO_SP_Init+0x3a>
 23f9016:	213c      	movs	r1, #60	; 0x3c
 23f9018:	4816      	ldr	r0, [pc, #88]	; (23f9074 <AUDIO_SP_Init+0x90>)
 23f901a:	f002 f9e5 	bl	23fb3e8 <__io_assert_failed_veneer>
	assert_param(IS_SP_SEL_RX_CH(SP_InitStruct->SP_SelRxCh));
 23f901e:	68e3      	ldr	r3, [r4, #12]
 23f9020:	2b03      	cmp	r3, #3
 23f9022:	d903      	bls.n	23f902c <AUDIO_SP_Init+0x48>
 23f9024:	213d      	movs	r1, #61	; 0x3d
 23f9026:	4813      	ldr	r0, [pc, #76]	; (23f9074 <AUDIO_SP_Init+0x90>)
 23f9028:	f002 f9de 	bl	23fb3e8 <__io_assert_failed_veneer>
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23f902c:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f902e:	2100      	movs	r1, #0
	SPORTx->SP_CTRLR0 |= SP_CTRLR0_RST;
 23f9030:	f043 0301 	orr.w	r3, r3, #1
 23f9034:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23f9036:	686b      	ldr	r3, [r5, #4]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f9038:	4628      	mov	r0, r5
	SPORTx->SP_CTRLR0 &= ~ SP_CTRLR0_RST;
 23f903a:	f023 0301 	bic.w	r3, r3, #1
 23f903e:	606b      	str	r3, [r5, #4]
	SPORTx->SP_CLK_DIV = 0x271 | (0x10 << 16) | SP_CLK_MI_NI_UPDATE;
 23f9040:	4b0d      	ldr	r3, [pc, #52]	; (23f9078 <AUDIO_SP_Init+0x94>)
 23f9042:	61eb      	str	r3, [r5, #28]
	AUDIO_SP_TxStart(SPORTx, DISABLE);
 23f9044:	4b0d      	ldr	r3, [pc, #52]	; (23f907c <AUDIO_SP_Init+0x98>)
 23f9046:	4798      	blx	r3
	AUDIO_SP_RxStart(SPORTx, DISABLE);
 23f9048:	4b0d      	ldr	r3, [pc, #52]	; (23f9080 <AUDIO_SP_Init+0x9c>)
 23f904a:	4798      	blx	r3
		(SP_InitStruct->SP_DataFormat << 8) |
 23f904c:	e9d4 1300 	ldrd	r1, r3, [r4]
	Tmp = SPORTx->SP_CTRLR0;
 23f9050:	686a      	ldr	r2, [r5, #4]
		(SP_InitStruct->SP_DataFormat << 8) |
 23f9052:	021b      	lsls	r3, r3, #8
	Tmp &= ~(SP_CTRLR0_DATA_LEN_SEL |SP_CTRLR0_DATA_FORMAT_SEL | SP_CTRLR0_EN_I2S_MONO | SP_CTRLR0_SEL_I2S_RX_CH);
 23f9054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 23f9058:	f422 526c 	bic.w	r2, r2, #15104	; 0x3b00
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23f905c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 23f9060:	4313      	orrs	r3, r2
		(SP_InitStruct->SP_MonoStereo << 11) |
 23f9062:	68a2      	ldr	r2, [r4, #8]
 23f9064:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
		(SP_InitStruct->SP_SelRxCh << 28));
 23f9068:	68e2      	ldr	r2, [r4, #12]
	Tmp |= ((SP_InitStruct->SP_WordLen << 12) |
 23f906a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
	SPORTx->SP_CTRLR0 = Tmp;
 23f906e:	606b      	str	r3, [r5, #4]
}
 23f9070:	bd38      	pop	{r3, r4, r5, pc}
 23f9072:	bf00      	nop
 23f9074:	023ffa69 	.word	0x023ffa69
 23f9078:	80100271 	.word	0x80100271
 23f907c:	023f8f9d 	.word	0x023f8f9d
 23f9080:	023f8fc1 	.word	0x023f8fc1

023f9084 <AUDIO_SP_RdmaCmd>:
  * @retval None
  */
void AUDIO_SP_RdmaCmd(AUDIO_SPORT_TypeDef* SPORTx, u32 NewState)
{
	if (NewState == ENABLE) {
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f9084:	6883      	ldr	r3, [r0, #8]
	if (NewState == ENABLE) {
 23f9086:	2901      	cmp	r1, #1
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f9088:	bf0b      	itete	eq
 23f908a:	f443 2300 	orreq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
	} else {
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23f908e:	f423 2300 	bicne.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_CTRLR1 |= SP_CTRLR1_RDMA_REQ;
 23f9092:	6083      	streq	r3, [r0, #8]
		SPORTx->SP_CTRLR1 &= ~ SP_CTRLR1_RDMA_REQ;
 23f9094:	6083      	strne	r3, [r0, #8]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23f9096:	bf0b      	itete	eq
 23f9098:	68c3      	ldreq	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23f909a:	68c3      	ldrne	r3, [r0, #12]
		SPORTx->SP_DSP_INT_CR &= ~ SP_RX_DMA_SINGLE_NO_REQ;
 23f909c:	f423 2300 	biceq.w	r3, r3, #524288	; 0x80000
		SPORTx->SP_DSP_INT_CR |= SP_RX_DMA_SINGLE_NO_REQ;
 23f90a0:	f443 2300 	orrne.w	r3, r3, #524288	; 0x80000
 23f90a4:	60c3      	str	r3, [r0, #12]
	}
}
 23f90a6:	4770      	bx	lr

023f90a8 <AUDIO_SP_RXGDMA_Init>:
	void *CallbackData,
	IRQ_FUN CallbackFunc,
	u8 *pRxData,
	u32 Length
	)
{
 23f90a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f90ac:	461f      	mov	r7, r3
 23f90ae:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
	u8 GdmaChnl;
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23f90b2:	230c      	movs	r3, #12
 23f90b4:	4358      	muls	r0, r3
 23f90b6:	4b4b      	ldr	r3, [pc, #300]	; (23f91e4 <AUDIO_SP_RXGDMA_Init+0x13c>)
	u32 WordLen = AUDIO_SP_GetWordLen(SPORTx);

	assert_param(GDMA_InitStruct != NULL);
 23f90b8:	460c      	mov	r4, r1
	AUDIO_SPORT_TypeDef *SPORTx = AUDIO_DEV_TABLE[Index].SPORTx;
 23f90ba:	f853 8000 	ldr.w	r8, [r3, r0]
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23f90be:	f8d8 9004 	ldr.w	r9, [r8, #4]
	assert_param(GDMA_InitStruct != NULL);
 23f90c2:	b931      	cbnz	r1, 23f90d2 <AUDIO_SP_RXGDMA_Init+0x2a>
 23f90c4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 23f90c8:	4847      	ldr	r0, [pc, #284]	; (23f91e8 <AUDIO_SP_RXGDMA_Init+0x140>)
 23f90ca:	9201      	str	r2, [sp, #4]
 23f90cc:	f002 f98c 	bl	23fb3e8 <__io_assert_failed_veneer>
 23f90d0:	9a01      	ldr	r2, [sp, #4]
	/*obtain a DMA channel and register DMA interrupt handler*/
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23f90d2:	4639      	mov	r1, r7
 23f90d4:	230c      	movs	r3, #12
 23f90d6:	4f45      	ldr	r7, [pc, #276]	; (23f91ec <AUDIO_SP_RXGDMA_Init+0x144>)
 23f90d8:	2000      	movs	r0, #0
 23f90da:	47b8      	blx	r7
	if (GdmaChnl == 0xFF) {
 23f90dc:	28ff      	cmp	r0, #255	; 0xff
	GdmaChnl = GDMA_ChnlAlloc(0, CallbackFunc, (u32)CallbackData, 12);
 23f90de:	4607      	mov	r7, r0
	if (GdmaChnl == 0xFF) {
 23f90e0:	d07e      	beq.n	23f91e0 <AUDIO_SP_RXGDMA_Init+0x138>
		// No Available DMA channel
		return _FALSE;
	}

	_memset((void *)GDMA_InitStruct, 0, sizeof(GDMA_InitTypeDef));
 23f90e2:	2254      	movs	r2, #84	; 0x54
 23f90e4:	2100      	movs	r1, #0
 23f90e6:	4b42      	ldr	r3, [pc, #264]	; (23f91f0 <AUDIO_SP_RXGDMA_Init+0x148>)
 23f90e8:	4620      	mov	r0, r4
 23f90ea:	4798      	blx	r3
	/*set GDMA initial structure member value*/
	GDMA_InitStruct->MuliBlockCunt = 0;
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
	GDMA_InitStruct->MaxMuliBlock = 1;
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
	GDMA_InitStruct->GDMA_SrcHandshakeInterface = AUDIO_DEV_TABLE[Index].Rx_HandshakeInterface;
 23f90ec:	210b      	movs	r1, #11
 23f90ee:	6421      	str	r1, [r4, #64]	; 0x40
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23f90f0:	f108 0110 	add.w	r1, r8, #16
	GDMA_InitStruct->MuliBlockCunt = 0;
 23f90f4:	2200      	movs	r2, #0
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23f90f6:	2302      	movs	r3, #2
	GDMA_InitStruct->MaxMuliBlock = 1;
 23f90f8:	2001      	movs	r0, #1
	GDMA_InitStruct->GDMA_SrcAddr = (u32)&AUDIO_DEV_TABLE[Index].SPORTx->SP_RX_DR;
 23f90fa:	6221      	str	r1, [r4, #32]
	GDMA_InitStruct->GDMA_Index = 0;
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23f90fc:	2113      	movs	r1, #19
	u32 len = ((SPORTx->SP_CTRLR0) & SP_CTRLR0_DATA_LEN_SEL) >> 12;
 23f90fe:	f3c9 3901 	ubfx	r9, r9, #12, #2
	GDMA_InitStruct->GDMA_DstInc = IncType;
	GDMA_InitStruct->GDMA_SrcInc = NoChange;

	/*  Cofigure GDMA transfer */
	if (WordLen == SP_WL_8)  {
 23f9102:	f1b9 0f03 	cmp.w	r9, #3
	GDMA_InitStruct->GDMA_SrcInc = NoChange;
 23f9106:	e9c4 2304 	strd	r2, r3, [r4, #16]
	GDMA_InitStruct->MuliBlockCunt = 0;
 23f910a:	64a2      	str	r2, [r4, #72]	; 0x48
	GDMA_InitStruct->GDMA_ReloadSrc = 0;
 23f910c:	6322      	str	r2, [r4, #48]	; 0x30
	GDMA_InitStruct->MaxMuliBlock = 1;
 23f910e:	64e0      	str	r0, [r4, #76]	; 0x4c
	GDMA_InitStruct->GDMA_DIR = TTFCPeriToMem;
 23f9110:	6063      	str	r3, [r4, #4]
	GDMA_InitStruct->GDMA_Index = 0;
 23f9112:	7022      	strb	r2, [r4, #0]
	GDMA_InitStruct->GDMA_ChNum = GdmaChnl;
 23f9114:	7067      	strb	r7, [r4, #1]
	GDMA_InitStruct->GDMA_IsrType = (BlockType|TransferType|ErrType);	
 23f9116:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (WordLen == SP_WL_8)  {
 23f9118:	d144      	bne.n	23f91a4 <AUDIO_SP_RXGDMA_Init+0xfc>
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
		GDMA_InitStruct->GDMA_SrcMsize = MsizeFour;
		
		GDMA_InitStruct->GDMA_DstMsize = MsizeOne;
 23f911a:	e9c4 2006 	strd	r2, r0, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthOneByte;
 23f911e:	60e2      	str	r2, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23f9120:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length;
 23f9122:	8526      	strh	r6, [r4, #40]	; 0x28
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
	}
	
	/*check GDMA block size*/
	assert_param(GDMA_InitStruct->GDMA_BlockSize <= 4096);
 23f9124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 23f9126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 23f912a:	d904      	bls.n	23f9136 <AUDIO_SP_RXGDMA_Init+0x8e>
 23f912c:	f240 1177 	movw	r1, #375	; 0x177
 23f9130:	482d      	ldr	r0, [pc, #180]	; (23f91e8 <AUDIO_SP_RXGDMA_Init+0x140>)
 23f9132:	f002 f959 	bl	23fb3e8 <__io_assert_failed_veneer>

	/*configure GDMA destination address */
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
	
	/*  Enable GDMA for RX */
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23f9136:	4622      	mov	r2, r4
 23f9138:	4b2e      	ldr	r3, [pc, #184]	; (23f91f4 <AUDIO_SP_RXGDMA_Init+0x14c>)
 23f913a:	7861      	ldrb	r1, [r4, #1]
 23f913c:	7820      	ldrb	r0, [r4, #0]
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23f913e:	6265      	str	r5, [r4, #36]	; 0x24
	GDMA_Init(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, GDMA_InitStruct);
 23f9140:	4798      	blx	r3
  * @brief  Check DCache Enabled or not.
  */
__STATIC_INLINE
u32 DCache_IsEnabled(void)
{
	return ((SCB->CCR & (u32)SCB_CCR_DC_Msk)?1:0);
 23f9142:	4a2d      	ldr	r2, [pc, #180]	; (23f91f8 <AUDIO_SP_RXGDMA_Init+0x150>)
	GDMA_InitStruct->GDMA_DstAddr = (u32)pRxData;
 23f9144:	462f      	mov	r7, r5
 23f9146:	6953      	ldr	r3, [r2, #20]
__STATIC_INLINE
void DCache_CleanInvalidate(u32 Address, u32 Bytes)
{
	u32 addr = Address, len = Bytes;

	if (DCache_IsEnabled() == 0)
 23f9148:	03db      	lsls	r3, r3, #15
 23f914a:	d522      	bpl.n	23f9192 <AUDIO_SP_RXGDMA_Init+0xea>
		return;

	if ((Address == 0xFFFFFFFF) && (Bytes == 0xFFFFFFFF)) {
 23f914c:	1c68      	adds	r0, r5, #1
 23f914e:	d130      	bne.n	23f91b2 <AUDIO_SP_RXGDMA_Init+0x10a>
 23f9150:	1c71      	adds	r1, r6, #1
 23f9152:	d130      	bne.n	23f91b6 <AUDIO_SP_RXGDMA_Init+0x10e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 23f9154:	2300      	movs	r3, #0
 23f9156:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 23f915a:	f3bf 8f4f 	dsb	sy
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f915e:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    ccsidr = SCB->CCSIDR;
 23f9162:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23f9166:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 23f916a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 23f916e:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 23f9170:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f9172:	ea03 0705 	and.w	r7, r3, r5
 23f9176:	ea47 76c1 	orr.w	r6, r7, r1, lsl #31
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 23f917a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 23f917c:	f8c2 6274 	str.w	r6, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 23f9180:	d2f9      	bcs.n	23f9176 <AUDIO_SP_RXGDMA_Init+0xce>
    } while(sets-- != 0U);
 23f9182:	3b20      	subs	r3, #32
 23f9184:	f113 0f20 	cmn.w	r3, #32
 23f9188:	d1f2      	bne.n	23f9170 <AUDIO_SP_RXGDMA_Init+0xc8>
 23f918a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 23f918e:	f3bf 8f6f 	isb	sy
	DCache_CleanInvalidate((u32)pRxData, Length);
	GDMA_Cmd(GDMA_InitStruct->GDMA_Index, GDMA_InitStruct->GDMA_ChNum, ENABLE);
 23f9192:	7820      	ldrb	r0, [r4, #0]
 23f9194:	2201      	movs	r2, #1
 23f9196:	7861      	ldrb	r1, [r4, #1]
 23f9198:	4b18      	ldr	r3, [pc, #96]	; (23f91fc <AUDIO_SP_RXGDMA_Init+0x154>)
 23f919a:	4798      	blx	r3

	return _TRUE;
 23f919c:	2001      	movs	r0, #1
}
 23f919e:	b003      	add	sp, #12
 23f91a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		GDMA_InitStruct->GDMA_DstMsize = MsizeEight;
 23f91a4:	e9c4 3306 	strd	r3, r3, [r4, #24]
		GDMA_InitStruct->GDMA_SrcDataWidth = TrWidthFourBytes;
 23f91a8:	60e3      	str	r3, [r4, #12]
		GDMA_InitStruct->GDMA_DstDataWidth = TrWidthFourBytes;
 23f91aa:	60a3      	str	r3, [r4, #8]
		GDMA_InitStruct->GDMA_BlockSize = Length >> 2;
 23f91ac:	08b3      	lsrs	r3, r6, #2
 23f91ae:	8523      	strh	r3, [r4, #40]	; 0x28
 23f91b0:	e7b8      	b.n	23f9124 <AUDIO_SP_RXGDMA_Init+0x7c>
		SCB_CleanInvalidateDCache();
	} else {
		if ((addr & 0x1F) != 0) {
 23f91b2:	06eb      	lsls	r3, r5, #27
 23f91b4:	d007      	beq.n	23f91c6 <AUDIO_SP_RXGDMA_Init+0x11e>
			addr = (Address >> 5) << 5;   //32-byte aligned
 23f91b6:	f025 071f 	bic.w	r7, r5, #31
			len = ((((Address + Bytes -1) >> 5) + 1) << 5) - addr; //next 32-byte aligned
 23f91ba:	4435      	add	r5, r6
 23f91bc:	3d01      	subs	r5, #1
 23f91be:	f025 051f 	bic.w	r5, r5, #31
 23f91c2:	3520      	adds	r5, #32
 23f91c4:	1bee      	subs	r6, r5, r7
		}

		SCB_CleanInvalidateDCache_by_Addr((u32*)addr, len);
 23f91c6:	4635      	mov	r5, r6
  __ASM volatile ("dsb 0xF":::"memory");
 23f91c8:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCIMVAC = op_addr;
 23f91cc:	4a0a      	ldr	r2, [pc, #40]	; (23f91f8 <AUDIO_SP_RXGDMA_Init+0x150>)
 23f91ce:	4437      	add	r7, r6
    while (op_size > 0) {
 23f91d0:	2d00      	cmp	r5, #0
 23f91d2:	eba7 0305 	sub.w	r3, r7, r5
 23f91d6:	ddd8      	ble.n	23f918a <AUDIO_SP_RXGDMA_Init+0xe2>
      SCB->DCCIMVAC = op_addr;
 23f91d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
      op_addr += (uint32_t)linesize;
      op_size -=           linesize;
 23f91dc:	3d20      	subs	r5, #32
 23f91de:	e7f7      	b.n	23f91d0 <AUDIO_SP_RXGDMA_Init+0x128>
		return _FALSE;
 23f91e0:	2000      	movs	r0, #0
 23f91e2:	e7dc      	b.n	23f919e <AUDIO_SP_RXGDMA_Init+0xf6>
 23f91e4:	023ffa48 	.word	0x023ffa48
 23f91e8:	023ffa54 	.word	0x023ffa54
 23f91ec:	1010c43d 	.word	0x1010c43d
 23f91f0:	10110ea1 	.word	0x10110ea1
 23f91f4:	1010bff9 	.word	0x1010bff9
 23f91f8:	e000ed00 	.word	0xe000ed00
 23f91fc:	1010bf91 	.word	0x1010bf91

023f9200 <_ZnwjRKSt9nothrow_t>:
 23f9200:	f7f1 b997 	b.w	23ea532 <_Znwj>

023f9204 <_ZnajRKSt9nothrow_t>:
 23f9204:	f7f1 b997 	b.w	23ea536 <_Znaj>

023f9208 <_ZSt19__throw_logic_errorPKc>:
 23f9208:	b508      	push	{r3, lr}
 23f920a:	f7fb fae7 	bl	23f47dc <abort>

023f920e <_ZSt20__throw_length_errorPKc>:
 23f920e:	b508      	push	{r3, lr}
 23f9210:	f7fb fae4 	bl	23f47dc <abort>

023f9214 <_ZSt24__throw_out_of_range_fmtPKcz>:
 23f9214:	b40f      	push	{r0, r1, r2, r3}
 23f9216:	b580      	push	{r7, lr}
 23f9218:	b084      	sub	sp, #16
 23f921a:	af00      	add	r7, sp, #0
 23f921c:	f107 0418 	add.w	r4, r7, #24
 23f9220:	f854 2b04 	ldr.w	r2, [r4], #4
 23f9224:	4610      	mov	r0, r2
 23f9226:	607a      	str	r2, [r7, #4]
 23f9228:	f7f1 f95e 	bl	23ea4e8 <strlen>
 23f922c:	f200 2307 	addw	r3, r0, #519	; 0x207
 23f9230:	f500 7100 	add.w	r1, r0, #512	; 0x200
 23f9234:	687a      	ldr	r2, [r7, #4]
 23f9236:	f023 0307 	bic.w	r3, r3, #7
 23f923a:	60fc      	str	r4, [r7, #12]
 23f923c:	ebad 0d03 	sub.w	sp, sp, r3
 23f9240:	4623      	mov	r3, r4
 23f9242:	4668      	mov	r0, sp
 23f9244:	f000 f85e 	bl	23f9304 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 23f9248:	f7fb fac8 	bl	23f47dc <abort>

023f924c <_ZSt25__throw_bad_function_callv>:
 23f924c:	b508      	push	{r3, lr}
 23f924e:	f7fb fac5 	bl	23f47dc <abort>
	...

023f9254 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23f9254:	4901      	ldr	r1, [pc, #4]	; (23f925c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23f9256:	f000 b98b 	b.w	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f925a:	bf00      	nop
 23f925c:	023ffa90 	.word	0x023ffa90

023f9260 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 23f9260:	b580      	push	{r7, lr}
 23f9262:	b09c      	sub	sp, #112	; 0x70
 23f9264:	4606      	mov	r6, r0
 23f9266:	460c      	mov	r4, r1
 23f9268:	2269      	movs	r2, #105	; 0x69
 23f926a:	af00      	add	r7, sp, #0
 23f926c:	1ba4      	subs	r4, r4, r6
 23f926e:	490e      	ldr	r1, [pc, #56]	; (23f92a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 23f9270:	1d38      	adds	r0, r7, #4
 23f9272:	f001 ff00 	bl	23fb076 <memcpy>
 23f9276:	f104 0370 	add.w	r3, r4, #112	; 0x70
 23f927a:	2268      	movs	r2, #104	; 0x68
 23f927c:	1d39      	adds	r1, r7, #4
 23f927e:	f023 0307 	bic.w	r3, r3, #7
 23f9282:	ebad 0d03 	sub.w	sp, sp, r3
 23f9286:	466d      	mov	r5, sp
 23f9288:	4628      	mov	r0, r5
 23f928a:	f001 fef4 	bl	23fb076 <memcpy>
 23f928e:	4622      	mov	r2, r4
 23f9290:	4631      	mov	r1, r6
 23f9292:	f105 0068 	add.w	r0, r5, #104	; 0x68
 23f9296:	f001 feee 	bl	23fb076 <memcpy>
 23f929a:	442c      	add	r4, r5
 23f929c:	2300      	movs	r3, #0
 23f929e:	4628      	mov	r0, r5
 23f92a0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f92a4:	f7ff ffb0 	bl	23f9208 <_ZSt19__throw_logic_errorPKc>
 23f92a8:	023ffa98 	.word	0x023ffa98

023f92ac <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 23f92ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f92b0:	af00      	add	r7, sp, #0
 23f92b2:	b084      	sub	sp, #16
 23f92b4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 23f9300 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 23f92b8:	f04f 0c0a 	mov.w	ip, #10
 23f92bc:	466d      	mov	r5, sp
 23f92be:	f105 040c 	add.w	r4, r5, #12
 23f92c2:	4623      	mov	r3, r4
 23f92c4:	fbb2 f6fc 	udiv	r6, r2, ip
 23f92c8:	fb0c 2e16 	mls	lr, ip, r6, r2
 23f92cc:	f818 e00e 	ldrb.w	lr, [r8, lr]
 23f92d0:	f803 ed01 	strb.w	lr, [r3, #-1]!
 23f92d4:	4696      	mov	lr, r2
 23f92d6:	4632      	mov	r2, r6
 23f92d8:	f1be 0f09 	cmp.w	lr, #9
 23f92dc:	d8f2      	bhi.n	23f92c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 23f92de:	1ae4      	subs	r4, r4, r3
 23f92e0:	428c      	cmp	r4, r1
 23f92e2:	d809      	bhi.n	23f92f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 23f92e4:	f1c4 030c 	rsb	r3, r4, #12
 23f92e8:	4622      	mov	r2, r4
 23f92ea:	18e9      	adds	r1, r5, r3
 23f92ec:	f001 fec3 	bl	23fb076 <memcpy>
 23f92f0:	4620      	mov	r0, r4
 23f92f2:	46bd      	mov	sp, r7
 23f92f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f92f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f92fc:	e7f8      	b.n	23f92f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 23f92fe:	bf00      	nop
 23f9300:	023ffb01 	.word	0x023ffb01

023f9304 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 23f9304:	3901      	subs	r1, #1
 23f9306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f930a:	4607      	mov	r7, r0
 23f930c:	4615      	mov	r5, r2
 23f930e:	eb00 0801 	add.w	r8, r0, r1
 23f9312:	4604      	mov	r4, r0
 23f9314:	782a      	ldrb	r2, [r5, #0]
 23f9316:	b392      	cbz	r2, 23f937e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 23f9318:	4544      	cmp	r4, r8
 23f931a:	d22a      	bcs.n	23f9372 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f931c:	2a25      	cmp	r2, #37	; 0x25
 23f931e:	d107      	bne.n	23f9330 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9320:	786a      	ldrb	r2, [r5, #1]
 23f9322:	2a73      	cmp	r2, #115	; 0x73
 23f9324:	d009      	beq.n	23f933a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 23f9326:	2a7a      	cmp	r2, #122	; 0x7a
 23f9328:	d012      	beq.n	23f9350 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 23f932a:	2a25      	cmp	r2, #37	; 0x25
 23f932c:	d100      	bne.n	23f9330 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f932e:	3501      	adds	r5, #1
 23f9330:	f815 2b01 	ldrb.w	r2, [r5], #1
 23f9334:	f804 2b01 	strb.w	r2, [r4], #1
 23f9338:	e7ec      	b.n	23f9314 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f933a:	f853 2b04 	ldr.w	r2, [r3], #4
 23f933e:	3a01      	subs	r2, #1
 23f9340:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 23f9344:	b1c9      	cbz	r1, 23f937a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 23f9346:	4544      	cmp	r4, r8
 23f9348:	d013      	beq.n	23f9372 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f934a:	f804 1b01 	strb.w	r1, [r4], #1
 23f934e:	e7f7      	b.n	23f9340 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 23f9350:	78aa      	ldrb	r2, [r5, #2]
 23f9352:	2a75      	cmp	r2, #117	; 0x75
 23f9354:	d1ec      	bne.n	23f9330 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 23f9356:	461e      	mov	r6, r3
 23f9358:	eba8 0104 	sub.w	r1, r8, r4
 23f935c:	4620      	mov	r0, r4
 23f935e:	f856 2b04 	ldr.w	r2, [r6], #4
 23f9362:	f7ff ffa3 	bl	23f92ac <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 23f9366:	2800      	cmp	r0, #0
 23f9368:	dd03      	ble.n	23f9372 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 23f936a:	4404      	add	r4, r0
 23f936c:	3503      	adds	r5, #3
 23f936e:	4633      	mov	r3, r6
 23f9370:	e7d0      	b.n	23f9314 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f9372:	4621      	mov	r1, r4
 23f9374:	4638      	mov	r0, r7
 23f9376:	f7ff ff73 	bl	23f9260 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 23f937a:	3502      	adds	r5, #2
 23f937c:	e7ca      	b.n	23f9314 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 23f937e:	1be0      	subs	r0, r4, r7
 23f9380:	7022      	strb	r2, [r4, #0]
 23f9382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f9386 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23f9386:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f9388:	2400      	movs	r4, #0
 23f938a:	2310      	movs	r3, #16
 23f938c:	4615      	mov	r5, r2
 23f938e:	6812      	ldr	r2, [r2, #0]
 23f9390:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23f9394:	6803      	ldr	r3, [r0, #0]
 23f9396:	e9cd 4400 	strd	r4, r4, [sp]
 23f939a:	699e      	ldr	r6, [r3, #24]
 23f939c:	466b      	mov	r3, sp
 23f939e:	47b0      	blx	r6
 23f93a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23f93a4:	f003 0306 	and.w	r3, r3, #6
 23f93a8:	2b06      	cmp	r3, #6
 23f93aa:	bf05      	ittet	eq
 23f93ac:	9b00      	ldreq	r3, [sp, #0]
 23f93ae:	2001      	moveq	r0, #1
 23f93b0:	4620      	movne	r0, r4
 23f93b2:	602b      	streq	r3, [r5, #0]
 23f93b4:	b004      	add	sp, #16
 23f93b6:	bd70      	pop	{r4, r5, r6, pc}

023f93b8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23f93b8:	9800      	ldr	r0, [sp, #0]
 23f93ba:	4290      	cmp	r0, r2
 23f93bc:	bf14      	ite	ne
 23f93be:	2001      	movne	r0, #1
 23f93c0:	2006      	moveq	r0, #6
 23f93c2:	4770      	bx	lr

023f93c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23f93c4:	4b03      	ldr	r3, [pc, #12]	; (23f93d4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23f93c6:	b510      	push	{r4, lr}
 23f93c8:	4604      	mov	r4, r0
 23f93ca:	6003      	str	r3, [r0, #0]
 23f93cc:	f000 f8cd 	bl	23f956a <_ZNSt9type_infoD1Ev>
 23f93d0:	4620      	mov	r0, r4
 23f93d2:	bd10      	pop	{r4, pc}
 23f93d4:	023ffb44 	.word	0x023ffb44

023f93d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23f93d8:	b510      	push	{r4, lr}
 23f93da:	4604      	mov	r4, r0
 23f93dc:	f7ff fff2 	bl	23f93c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23f93e0:	2108      	movs	r1, #8
 23f93e2:	4620      	mov	r0, r4
 23f93e4:	f7f1 f8ab 	bl	23ea53e <_ZdlPvj>
 23f93e8:	4620      	mov	r0, r4
 23f93ea:	bd10      	pop	{r4, pc}

023f93ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23f93ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f93f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23f93f4:	461f      	mov	r7, r3
 23f93f6:	4606      	mov	r6, r0
 23f93f8:	4615      	mov	r5, r2
 23f93fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23f93fe:	4598      	cmp	r8, r3
 23f9400:	d107      	bne.n	23f9412 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23f9402:	9907      	ldr	r1, [sp, #28]
 23f9404:	f000 f8b4 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f9408:	b118      	cbz	r0, 23f9412 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23f940a:	7165      	strb	r5, [r4, #5]
 23f940c:	2000      	movs	r0, #0
 23f940e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9412:	4639      	mov	r1, r7
 23f9414:	4630      	mov	r0, r6
 23f9416:	f000 f8ab 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f941a:	2800      	cmp	r0, #0
 23f941c:	d0f6      	beq.n	23f940c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23f941e:	2301      	movs	r3, #1
 23f9420:	f8c4 8000 	str.w	r8, [r4]
 23f9424:	7125      	strb	r5, [r4, #4]
 23f9426:	71a3      	strb	r3, [r4, #6]
 23f9428:	e7f0      	b.n	23f940c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023f942a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23f942a:	b538      	push	{r3, r4, r5, lr}
 23f942c:	4615      	mov	r5, r2
 23f942e:	461c      	mov	r4, r3
 23f9430:	f000 f89e 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f9434:	b120      	cbz	r0, 23f9440 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23f9436:	2308      	movs	r3, #8
 23f9438:	6025      	str	r5, [r4, #0]
 23f943a:	60e3      	str	r3, [r4, #12]
 23f943c:	2306      	movs	r3, #6
 23f943e:	7123      	strb	r3, [r4, #4]
 23f9440:	bd38      	pop	{r3, r4, r5, pc}

023f9442 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23f9442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f9444:	4605      	mov	r5, r0
 23f9446:	460c      	mov	r4, r1
 23f9448:	461e      	mov	r6, r3
 23f944a:	9201      	str	r2, [sp, #4]
 23f944c:	f000 f890 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f9450:	b950      	cbnz	r0, 23f9468 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23f9452:	2e03      	cmp	r6, #3
 23f9454:	d808      	bhi.n	23f9468 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23f9456:	6823      	ldr	r3, [r4, #0]
 23f9458:	4629      	mov	r1, r5
 23f945a:	9a01      	ldr	r2, [sp, #4]
 23f945c:	4620      	mov	r0, r4
 23f945e:	695b      	ldr	r3, [r3, #20]
 23f9460:	b002      	add	sp, #8
 23f9462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f9466:	4718      	bx	r3
 23f9468:	b002      	add	sp, #8
 23f946a:	bd70      	pop	{r4, r5, r6, pc}

023f946c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23f946c:	4b03      	ldr	r3, [pc, #12]	; (23f947c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23f946e:	b510      	push	{r4, lr}
 23f9470:	4604      	mov	r4, r0
 23f9472:	6003      	str	r3, [r0, #0]
 23f9474:	f7ff ffa6 	bl	23f93c4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23f9478:	4620      	mov	r0, r4
 23f947a:	bd10      	pop	{r4, pc}
 23f947c:	023ffba4 	.word	0x023ffba4

023f9480 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23f9480:	b510      	push	{r4, lr}
 23f9482:	4604      	mov	r4, r0
 23f9484:	f7ff fff2 	bl	23f946c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23f9488:	210c      	movs	r1, #12
 23f948a:	4620      	mov	r0, r4
 23f948c:	f7f1 f857 	bl	23ea53e <_ZdlPvj>
 23f9490:	4620      	mov	r0, r4
 23f9492:	bd10      	pop	{r4, pc}

023f9494 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23f9494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f9496:	9f08      	ldr	r7, [sp, #32]
 23f9498:	4605      	mov	r5, r0
 23f949a:	460e      	mov	r6, r1
 23f949c:	4614      	mov	r4, r2
 23f949e:	4297      	cmp	r7, r2
 23f94a0:	d00a      	beq.n	23f94b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23f94a2:	68a8      	ldr	r0, [r5, #8]
 23f94a4:	4631      	mov	r1, r6
 23f94a6:	6802      	ldr	r2, [r0, #0]
 23f94a8:	9708      	str	r7, [sp, #32]
 23f94aa:	6a15      	ldr	r5, [r2, #32]
 23f94ac:	4622      	mov	r2, r4
 23f94ae:	46ac      	mov	ip, r5
 23f94b0:	b003      	add	sp, #12
 23f94b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f94b6:	4760      	bx	ip
 23f94b8:	4619      	mov	r1, r3
 23f94ba:	9301      	str	r3, [sp, #4]
 23f94bc:	f000 f858 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f94c0:	9b01      	ldr	r3, [sp, #4]
 23f94c2:	2800      	cmp	r0, #0
 23f94c4:	d0ed      	beq.n	23f94a2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23f94c6:	2006      	movs	r0, #6
 23f94c8:	b003      	add	sp, #12
 23f94ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f94cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23f94cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f94d0:	460d      	mov	r5, r1
 23f94d2:	4619      	mov	r1, r3
 23f94d4:	4681      	mov	r9, r0
 23f94d6:	4617      	mov	r7, r2
 23f94d8:	4698      	mov	r8, r3
 23f94da:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23f94de:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23f94e2:	f000 f845 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f94e6:	b190      	cbz	r0, 23f950e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23f94e8:	2d00      	cmp	r5, #0
 23f94ea:	6034      	str	r4, [r6, #0]
 23f94ec:	7137      	strb	r7, [r6, #4]
 23f94ee:	db09      	blt.n	23f9504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23f94f0:	1961      	adds	r1, r4, r5
 23f94f2:	458a      	cmp	sl, r1
 23f94f4:	bf0c      	ite	eq
 23f94f6:	2106      	moveq	r1, #6
 23f94f8:	2101      	movne	r1, #1
 23f94fa:	71b1      	strb	r1, [r6, #6]
 23f94fc:	2000      	movs	r0, #0
 23f94fe:	b001      	add	sp, #4
 23f9500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9504:	3502      	adds	r5, #2
 23f9506:	d1f9      	bne.n	23f94fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23f9508:	2301      	movs	r3, #1
 23f950a:	71b3      	strb	r3, [r6, #6]
 23f950c:	e7f6      	b.n	23f94fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23f950e:	4554      	cmp	r4, sl
 23f9510:	d106      	bne.n	23f9520 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23f9512:	4659      	mov	r1, fp
 23f9514:	4648      	mov	r0, r9
 23f9516:	f000 f82b 	bl	23f9570 <_ZNKSt9type_infoeqERKS_>
 23f951a:	b108      	cbz	r0, 23f9520 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23f951c:	7177      	strb	r7, [r6, #5]
 23f951e:	e7ed      	b.n	23f94fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23f9520:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23f9524:	463a      	mov	r2, r7
 23f9526:	4629      	mov	r1, r5
 23f9528:	6803      	ldr	r3, [r0, #0]
 23f952a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23f952e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23f9532:	69dc      	ldr	r4, [r3, #28]
 23f9534:	4643      	mov	r3, r8
 23f9536:	46a4      	mov	ip, r4
 23f9538:	b001      	add	sp, #4
 23f953a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f953e:	4760      	bx	ip

023f9540 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23f9540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9544:	4607      	mov	r7, r0
 23f9546:	460c      	mov	r4, r1
 23f9548:	4615      	mov	r5, r2
 23f954a:	461e      	mov	r6, r3
 23f954c:	f7ff ff6d 	bl	23f942a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23f9550:	b948      	cbnz	r0, 23f9566 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23f9552:	68b8      	ldr	r0, [r7, #8]
 23f9554:	462a      	mov	r2, r5
 23f9556:	4621      	mov	r1, r4
 23f9558:	6803      	ldr	r3, [r0, #0]
 23f955a:	699f      	ldr	r7, [r3, #24]
 23f955c:	4633      	mov	r3, r6
 23f955e:	46bc      	mov	ip, r7
 23f9560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23f9564:	4760      	bx	ip
 23f9566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f956a <_ZNSt9type_infoD1Ev>:
 23f956a:	4770      	bx	lr

023f956c <_ZNKSt9type_info14__is_pointer_pEv>:
 23f956c:	2000      	movs	r0, #0
 23f956e:	4770      	bx	lr

023f9570 <_ZNKSt9type_infoeqERKS_>:
 23f9570:	4281      	cmp	r1, r0
 23f9572:	b508      	push	{r3, lr}
 23f9574:	d00e      	beq.n	23f9594 <_ZNKSt9type_infoeqERKS_+0x24>
 23f9576:	6840      	ldr	r0, [r0, #4]
 23f9578:	7803      	ldrb	r3, [r0, #0]
 23f957a:	2b2a      	cmp	r3, #42	; 0x2a
 23f957c:	d00c      	beq.n	23f9598 <_ZNKSt9type_infoeqERKS_+0x28>
 23f957e:	6849      	ldr	r1, [r1, #4]
 23f9580:	780b      	ldrb	r3, [r1, #0]
 23f9582:	2b2a      	cmp	r3, #42	; 0x2a
 23f9584:	bf08      	it	eq
 23f9586:	3101      	addeq	r1, #1
 23f9588:	f7f0 ffa4 	bl	23ea4d4 <strcmp>
 23f958c:	fab0 f080 	clz	r0, r0
 23f9590:	0940      	lsrs	r0, r0, #5
 23f9592:	bd08      	pop	{r3, pc}
 23f9594:	2001      	movs	r0, #1
 23f9596:	e7fc      	b.n	23f9592 <_ZNKSt9type_infoeqERKS_+0x22>
 23f9598:	2000      	movs	r0, #0
 23f959a:	e7fa      	b.n	23f9592 <_ZNKSt9type_infoeqERKS_+0x22>
 23f959c:	0000      	movs	r0, r0
	...

023f95a0 <cos>:
 23f95a0:	ec51 0b10 	vmov	r0, r1, d0
 23f95a4:	4a26      	ldr	r2, [pc, #152]	; (23f9640 <cos+0xa0>)
 23f95a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f95aa:	4293      	cmp	r3, r2
 23f95ac:	dd20      	ble.n	23f95f0 <cos+0x50>
 23f95ae:	4a25      	ldr	r2, [pc, #148]	; (23f9644 <cos+0xa4>)
 23f95b0:	4293      	cmp	r3, r2
 23f95b2:	b500      	push	{lr}
 23f95b4:	b085      	sub	sp, #20
 23f95b6:	dd09      	ble.n	23f95cc <cos+0x2c>
 23f95b8:	ee10 2a10 	vmov	r2, s0
 23f95bc:	460b      	mov	r3, r1
 23f95be:	f7f0 f88b 	bl	23e96d8 <__aeabi_dsub>
 23f95c2:	ec41 0b10 	vmov	d0, r0, r1
 23f95c6:	b005      	add	sp, #20
 23f95c8:	f85d fb04 	ldr.w	pc, [sp], #4
 23f95cc:	4668      	mov	r0, sp
 23f95ce:	f000 fa7b 	bl	23f9ac8 <__ieee754_rem_pio2>
 23f95d2:	f000 0003 	and.w	r0, r0, #3
 23f95d6:	2801      	cmp	r0, #1
 23f95d8:	d00e      	beq.n	23f95f8 <cos+0x58>
 23f95da:	2802      	cmp	r0, #2
 23f95dc:	d022      	beq.n	23f9624 <cos+0x84>
 23f95de:	b1d0      	cbz	r0, 23f9616 <cos+0x76>
 23f95e0:	2001      	movs	r0, #1
 23f95e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f95e6:	ed9d 0b00 	vldr	d0, [sp]
 23f95ea:	f001 fbb1 	bl	23fad50 <__kernel_sin>
 23f95ee:	e7ea      	b.n	23f95c6 <cos+0x26>
 23f95f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23f9638 <cos+0x98>
 23f95f4:	f000 be48 	b.w	23fa288 <__kernel_cos>
 23f95f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f95fc:	ed9d 0b00 	vldr	d0, [sp]
 23f9600:	f001 fba6 	bl	23fad50 <__kernel_sin>
 23f9604:	ec53 2b10 	vmov	r2, r3, d0
 23f9608:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f960c:	ee00 3a90 	vmov	s1, r3
 23f9610:	b005      	add	sp, #20
 23f9612:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9616:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f961a:	ed9d 0b00 	vldr	d0, [sp]
 23f961e:	f000 fe33 	bl	23fa288 <__kernel_cos>
 23f9622:	e7d0      	b.n	23f95c6 <cos+0x26>
 23f9624:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9628:	ed9d 0b00 	vldr	d0, [sp]
 23f962c:	f000 fe2c 	bl	23fa288 <__kernel_cos>
 23f9630:	e7e8      	b.n	23f9604 <cos+0x64>
 23f9632:	bf00      	nop
 23f9634:	f3af 8000 	nop.w
	...
 23f9640:	3fe921fb 	.word	0x3fe921fb
 23f9644:	7fefffff 	.word	0x7fefffff

023f9648 <fabs>:
 23f9648:	ec51 0b10 	vmov	r0, r1, d0
 23f964c:	ee10 2a10 	vmov	r2, s0
 23f9650:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9654:	ec43 2b10 	vmov	d0, r2, r3
 23f9658:	4770      	bx	lr
 23f965a:	bf00      	nop
 23f965c:	0000      	movs	r0, r0
	...

023f9660 <floor>:
 23f9660:	ec51 0b10 	vmov	r0, r1, d0
 23f9664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f966a:	460c      	mov	r4, r1
 23f966c:	ee10 6a10 	vmov	r6, s0
 23f9670:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23f9674:	2d13      	cmp	r5, #19
 23f9676:	dc30      	bgt.n	23f96da <floor+0x7a>
 23f9678:	2d00      	cmp	r5, #0
 23f967a:	db1e      	blt.n	23f96ba <floor+0x5a>
 23f967c:	4f38      	ldr	r7, [pc, #224]	; (23f9760 <floor+0x100>)
 23f967e:	412f      	asrs	r7, r5
 23f9680:	ea01 0307 	and.w	r3, r1, r7
 23f9684:	4303      	orrs	r3, r0
 23f9686:	d02d      	beq.n	23f96e4 <floor+0x84>
 23f9688:	a333      	add	r3, pc, #204	; (adr r3, 23f9758 <floor+0xf8>)
 23f968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f968e:	f7f0 f825 	bl	23e96dc <__adddf3>
 23f9692:	2200      	movs	r2, #0
 23f9694:	2300      	movs	r3, #0
 23f9696:	f7f0 fc67 	bl	23e9f68 <__aeabi_dcmpgt>
 23f969a:	b148      	cbz	r0, 23f96b0 <floor+0x50>
 23f969c:	2c00      	cmp	r4, #0
 23f969e:	da04      	bge.n	23f96aa <floor+0x4a>
 23f96a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23f96a4:	fa43 f505 	asr.w	r5, r3, r5
 23f96a8:	442c      	add	r4, r5
 23f96aa:	ea24 0407 	bic.w	r4, r4, r7
 23f96ae:	2600      	movs	r6, #0
 23f96b0:	4623      	mov	r3, r4
 23f96b2:	4632      	mov	r2, r6
 23f96b4:	ec43 2b10 	vmov	d0, r2, r3
 23f96b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f96ba:	a327      	add	r3, pc, #156	; (adr r3, 23f9758 <floor+0xf8>)
 23f96bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f96c0:	f7f0 f80c 	bl	23e96dc <__adddf3>
 23f96c4:	2200      	movs	r2, #0
 23f96c6:	2300      	movs	r3, #0
 23f96c8:	f7f0 fc4e 	bl	23e9f68 <__aeabi_dcmpgt>
 23f96cc:	2800      	cmp	r0, #0
 23f96ce:	d0ef      	beq.n	23f96b0 <floor+0x50>
 23f96d0:	2c00      	cmp	r4, #0
 23f96d2:	db29      	blt.n	23f9728 <floor+0xc8>
 23f96d4:	2600      	movs	r6, #0
 23f96d6:	4634      	mov	r4, r6
 23f96d8:	e7ea      	b.n	23f96b0 <floor+0x50>
 23f96da:	2d33      	cmp	r5, #51	; 0x33
 23f96dc:	dd05      	ble.n	23f96ea <floor+0x8a>
 23f96de:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23f96e2:	d019      	beq.n	23f9718 <floor+0xb8>
 23f96e4:	ec41 0b10 	vmov	d0, r0, r1
 23f96e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f96ea:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23f96ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23f96f2:	40df      	lsrs	r7, r3
 23f96f4:	4207      	tst	r7, r0
 23f96f6:	d0f5      	beq.n	23f96e4 <floor+0x84>
 23f96f8:	a317      	add	r3, pc, #92	; (adr r3, 23f9758 <floor+0xf8>)
 23f96fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f96fe:	f7ef ffed 	bl	23e96dc <__adddf3>
 23f9702:	2200      	movs	r2, #0
 23f9704:	2300      	movs	r3, #0
 23f9706:	f7f0 fc2f 	bl	23e9f68 <__aeabi_dcmpgt>
 23f970a:	2800      	cmp	r0, #0
 23f970c:	d0d0      	beq.n	23f96b0 <floor+0x50>
 23f970e:	2c00      	cmp	r4, #0
 23f9710:	db13      	blt.n	23f973a <floor+0xda>
 23f9712:	ea26 0607 	bic.w	r6, r6, r7
 23f9716:	e7cb      	b.n	23f96b0 <floor+0x50>
 23f9718:	ee10 2a10 	vmov	r2, s0
 23f971c:	460b      	mov	r3, r1
 23f971e:	f7ef ffdd 	bl	23e96dc <__adddf3>
 23f9722:	ec41 0b10 	vmov	d0, r0, r1
 23f9726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9728:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23f972c:	4a0d      	ldr	r2, [pc, #52]	; (23f9764 <floor+0x104>)
 23f972e:	4333      	orrs	r3, r6
 23f9730:	2600      	movs	r6, #0
 23f9732:	42b3      	cmp	r3, r6
 23f9734:	bf18      	it	ne
 23f9736:	4614      	movne	r4, r2
 23f9738:	e7ba      	b.n	23f96b0 <floor+0x50>
 23f973a:	2d14      	cmp	r5, #20
 23f973c:	d008      	beq.n	23f9750 <floor+0xf0>
 23f973e:	2301      	movs	r3, #1
 23f9740:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23f9744:	fa03 f505 	lsl.w	r5, r3, r5
 23f9748:	19ae      	adds	r6, r5, r6
 23f974a:	bf28      	it	cs
 23f974c:	18e4      	addcs	r4, r4, r3
 23f974e:	e7e0      	b.n	23f9712 <floor+0xb2>
 23f9750:	3401      	adds	r4, #1
 23f9752:	e7de      	b.n	23f9712 <floor+0xb2>
 23f9754:	f3af 8000 	nop.w
 23f9758:	8800759c 	.word	0x8800759c
 23f975c:	7e37e43c 	.word	0x7e37e43c
 23f9760:	000fffff 	.word	0x000fffff
 23f9764:	bff00000 	.word	0xbff00000

023f9768 <frexp>:
 23f9768:	b538      	push	{r3, r4, r5, lr}
 23f976a:	ec53 2b10 	vmov	r2, r3, d0
 23f976e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23f9772:	4d15      	ldr	r5, [pc, #84]	; (23f97c8 <frexp+0x60>)
 23f9774:	4604      	mov	r4, r0
 23f9776:	2000      	movs	r0, #0
 23f9778:	42a9      	cmp	r1, r5
 23f977a:	6020      	str	r0, [r4, #0]
 23f977c:	dc20      	bgt.n	23f97c0 <frexp+0x58>
 23f977e:	ee10 5a10 	vmov	r5, s0
 23f9782:	430d      	orrs	r5, r1
 23f9784:	d01c      	beq.n	23f97c0 <frexp+0x58>
 23f9786:	4d11      	ldr	r5, [pc, #68]	; (23f97cc <frexp+0x64>)
 23f9788:	469c      	mov	ip, r3
 23f978a:	401d      	ands	r5, r3
 23f978c:	b965      	cbnz	r5, 23f97a8 <frexp+0x40>
 23f978e:	4619      	mov	r1, r3
 23f9790:	2200      	movs	r2, #0
 23f9792:	ee10 0a10 	vmov	r0, s0
 23f9796:	4b0e      	ldr	r3, [pc, #56]	; (23f97d0 <frexp+0x68>)
 23f9798:	f7f0 f956 	bl	23e9a48 <__aeabi_dmul>
 23f979c:	4602      	mov	r2, r0
 23f979e:	468c      	mov	ip, r1
 23f97a0:	f06f 0035 	mvn.w	r0, #53	; 0x35
 23f97a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f97a8:	1509      	asrs	r1, r1, #20
 23f97aa:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 23f97ae:	4401      	add	r1, r0
 23f97b0:	6021      	str	r1, [r4, #0]
 23f97b2:	4908      	ldr	r1, [pc, #32]	; (23f97d4 <frexp+0x6c>)
 23f97b4:	ea0c 0101 	and.w	r1, ip, r1
 23f97b8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 23f97bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23f97c0:	ec43 2b10 	vmov	d0, r2, r3
 23f97c4:	bd38      	pop	{r3, r4, r5, pc}
 23f97c6:	bf00      	nop
 23f97c8:	7fefffff 	.word	0x7fefffff
 23f97cc:	7ff00000 	.word	0x7ff00000
 23f97d0:	43500000 	.word	0x43500000
 23f97d4:	800fffff 	.word	0x800fffff

023f97d8 <round>:
 23f97d8:	b538      	push	{r3, r4, r5, lr}
 23f97da:	ec53 2b10 	vmov	r2, r3, d0
 23f97de:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23f97e2:	461c      	mov	r4, r3
 23f97e4:	ee10 0a10 	vmov	r0, s0
 23f97e8:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23f97ec:	2913      	cmp	r1, #19
 23f97ee:	dc1c      	bgt.n	23f982a <round+0x52>
 23f97f0:	2900      	cmp	r1, #0
 23f97f2:	db13      	blt.n	23f981c <round+0x44>
 23f97f4:	4d20      	ldr	r5, [pc, #128]	; (23f9878 <round+0xa0>)
 23f97f6:	fa45 fc01 	asr.w	ip, r5, r1
 23f97fa:	ea03 050c 	and.w	r5, r3, ip
 23f97fe:	4328      	orrs	r0, r5
 23f9800:	d018      	beq.n	23f9834 <round+0x5c>
 23f9802:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 23f9806:	2000      	movs	r0, #0
 23f9808:	fa43 f101 	asr.w	r1, r3, r1
 23f980c:	440c      	add	r4, r1
 23f980e:	ea24 040c 	bic.w	r4, r4, ip
 23f9812:	4623      	mov	r3, r4
 23f9814:	4602      	mov	r2, r0
 23f9816:	ec43 2b10 	vmov	d0, r2, r3
 23f981a:	bd38      	pop	{r3, r4, r5, pc}
 23f981c:	3101      	adds	r1, #1
 23f981e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 23f9822:	d024      	beq.n	23f986e <round+0x96>
 23f9824:	461c      	mov	r4, r3
 23f9826:	2000      	movs	r0, #0
 23f9828:	e7f3      	b.n	23f9812 <round+0x3a>
 23f982a:	2933      	cmp	r1, #51	; 0x33
 23f982c:	dd05      	ble.n	23f983a <round+0x62>
 23f982e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23f9832:	d016      	beq.n	23f9862 <round+0x8a>
 23f9834:	ec43 2b10 	vmov	d0, r2, r3
 23f9838:	bd38      	pop	{r3, r4, r5, pc}
 23f983a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23f983e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23f9842:	fa25 fc0c 	lsr.w	ip, r5, ip
 23f9846:	ea12 0f0c 	tst.w	r2, ip
 23f984a:	d0f3      	beq.n	23f9834 <round+0x5c>
 23f984c:	2301      	movs	r3, #1
 23f984e:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 23f9852:	fa03 f101 	lsl.w	r1, r3, r1
 23f9856:	1840      	adds	r0, r0, r1
 23f9858:	bf28      	it	cs
 23f985a:	18e4      	addcs	r4, r4, r3
 23f985c:	ea20 000c 	bic.w	r0, r0, ip
 23f9860:	e7d7      	b.n	23f9812 <round+0x3a>
 23f9862:	4619      	mov	r1, r3
 23f9864:	f7ef ff3a 	bl	23e96dc <__adddf3>
 23f9868:	ec41 0b10 	vmov	d0, r0, r1
 23f986c:	bd38      	pop	{r3, r4, r5, pc}
 23f986e:	4c03      	ldr	r4, [pc, #12]	; (23f987c <round+0xa4>)
 23f9870:	2000      	movs	r0, #0
 23f9872:	431c      	orrs	r4, r3
 23f9874:	e7cd      	b.n	23f9812 <round+0x3a>
 23f9876:	bf00      	nop
 23f9878:	000fffff 	.word	0x000fffff
 23f987c:	3ff00000 	.word	0x3ff00000

023f9880 <sin>:
 23f9880:	ec51 0b10 	vmov	r0, r1, d0
 23f9884:	4a26      	ldr	r2, [pc, #152]	; (23f9920 <sin+0xa0>)
 23f9886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f988a:	4293      	cmp	r3, r2
 23f988c:	dd27      	ble.n	23f98de <sin+0x5e>
 23f988e:	4a25      	ldr	r2, [pc, #148]	; (23f9924 <sin+0xa4>)
 23f9890:	4293      	cmp	r3, r2
 23f9892:	b500      	push	{lr}
 23f9894:	b085      	sub	sp, #20
 23f9896:	dd09      	ble.n	23f98ac <sin+0x2c>
 23f9898:	ee10 2a10 	vmov	r2, s0
 23f989c:	460b      	mov	r3, r1
 23f989e:	f7ef ff1b 	bl	23e96d8 <__aeabi_dsub>
 23f98a2:	ec41 0b10 	vmov	d0, r0, r1
 23f98a6:	b005      	add	sp, #20
 23f98a8:	f85d fb04 	ldr.w	pc, [sp], #4
 23f98ac:	4668      	mov	r0, sp
 23f98ae:	f000 f90b 	bl	23f9ac8 <__ieee754_rem_pio2>
 23f98b2:	f000 0003 	and.w	r0, r0, #3
 23f98b6:	2801      	cmp	r0, #1
 23f98b8:	d016      	beq.n	23f98e8 <sin+0x68>
 23f98ba:	2802      	cmp	r0, #2
 23f98bc:	d023      	beq.n	23f9906 <sin+0x86>
 23f98be:	b1d0      	cbz	r0, 23f98f6 <sin+0x76>
 23f98c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f98c4:	ed9d 0b00 	vldr	d0, [sp]
 23f98c8:	f000 fcde 	bl	23fa288 <__kernel_cos>
 23f98cc:	ec53 2b10 	vmov	r2, r3, d0
 23f98d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f98d4:	ee00 3a90 	vmov	s1, r3
 23f98d8:	b005      	add	sp, #20
 23f98da:	f85d fb04 	ldr.w	pc, [sp], #4
 23f98de:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23f9918 <sin+0x98>
 23f98e2:	2000      	movs	r0, #0
 23f98e4:	f001 ba34 	b.w	23fad50 <__kernel_sin>
 23f98e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f98ec:	ed9d 0b00 	vldr	d0, [sp]
 23f98f0:	f000 fcca 	bl	23fa288 <__kernel_cos>
 23f98f4:	e7d7      	b.n	23f98a6 <sin+0x26>
 23f98f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f98fa:	ed9d 0b00 	vldr	d0, [sp]
 23f98fe:	2001      	movs	r0, #1
 23f9900:	f001 fa26 	bl	23fad50 <__kernel_sin>
 23f9904:	e7cf      	b.n	23f98a6 <sin+0x26>
 23f9906:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f990a:	ed9d 0b00 	vldr	d0, [sp]
 23f990e:	2001      	movs	r0, #1
 23f9910:	f001 fa1e 	bl	23fad50 <__kernel_sin>
 23f9914:	e7da      	b.n	23f98cc <sin+0x4c>
 23f9916:	bf00      	nop
	...
 23f9920:	3fe921fb 	.word	0x3fe921fb
 23f9924:	7fefffff 	.word	0x7fefffff

023f9928 <frexpf>:
 23f9928:	2300      	movs	r3, #0
 23f992a:	ee10 2a10 	vmov	r2, s0
 23f992e:	ee10 1a10 	vmov	r1, s0
 23f9932:	6003      	str	r3, [r0, #0]
 23f9934:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 23f9938:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 23f993c:	da1c      	bge.n	23f9978 <frexpf+0x50>
 23f993e:	fab3 fc83 	clz	ip, r3
 23f9942:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 23f9946:	b1bb      	cbz	r3, 23f9978 <frexpf+0x50>
 23f9948:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 23f994c:	d109      	bne.n	23f9962 <frexpf+0x3a>
 23f994e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 23f9980 <frexpf+0x58>
 23f9952:	f06f 0c18 	mvn.w	ip, #24
 23f9956:	ee60 7a27 	vmul.f32	s15, s0, s15
 23f995a:	ee17 1a90 	vmov	r1, s15
 23f995e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9962:	15db      	asrs	r3, r3, #23
 23f9964:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 23f9968:	3b7e      	subs	r3, #126	; 0x7e
 23f996a:	f041 527c 	orr.w	r2, r1, #1056964608	; 0x3f000000
 23f996e:	4463      	add	r3, ip
 23f9970:	ee00 2a10 	vmov	s0, r2
 23f9974:	6003      	str	r3, [r0, #0]
 23f9976:	4770      	bx	lr
 23f9978:	ee00 2a10 	vmov	s0, r2
 23f997c:	4770      	bx	lr
 23f997e:	bf00      	nop
 23f9980:	4c000000 	.word	0x4c000000

023f9984 <sqrt>:
 23f9984:	b538      	push	{r3, r4, r5, lr}
 23f9986:	ed2d 8b02 	vpush	{d8}
 23f998a:	ec55 4b10 	vmov	r4, r5, d0
 23f998e:	f000 fac1 	bl	23f9f14 <__ieee754_sqrt>
 23f9992:	4b18      	ldr	r3, [pc, #96]	; (23f99f4 <sqrt+0x70>)
 23f9994:	eeb0 8a40 	vmov.f32	s16, s0
 23f9998:	eef0 8a60 	vmov.f32	s17, s1
 23f999c:	f993 3000 	ldrsb.w	r3, [r3]
 23f99a0:	3301      	adds	r3, #1
 23f99a2:	d00d      	beq.n	23f99c0 <sqrt+0x3c>
 23f99a4:	4622      	mov	r2, r4
 23f99a6:	462b      	mov	r3, r5
 23f99a8:	4620      	mov	r0, r4
 23f99aa:	4629      	mov	r1, r5
 23f99ac:	f7f0 fae6 	bl	23e9f7c <__aeabi_dcmpun>
 23f99b0:	b930      	cbnz	r0, 23f99c0 <sqrt+0x3c>
 23f99b2:	2200      	movs	r2, #0
 23f99b4:	2300      	movs	r3, #0
 23f99b6:	4620      	mov	r0, r4
 23f99b8:	4629      	mov	r1, r5
 23f99ba:	f7f0 fab7 	bl	23e9f2c <__aeabi_dcmplt>
 23f99be:	b930      	cbnz	r0, 23f99ce <sqrt+0x4a>
 23f99c0:	eeb0 0a48 	vmov.f32	s0, s16
 23f99c4:	eef0 0a68 	vmov.f32	s1, s17
 23f99c8:	ecbd 8b02 	vpop	{d8}
 23f99cc:	bd38      	pop	{r3, r4, r5, pc}
 23f99ce:	f7fa ff21 	bl	23f4814 <__errno>
 23f99d2:	2200      	movs	r2, #0
 23f99d4:	2300      	movs	r3, #0
 23f99d6:	2121      	movs	r1, #33	; 0x21
 23f99d8:	6001      	str	r1, [r0, #0]
 23f99da:	4610      	mov	r0, r2
 23f99dc:	4619      	mov	r1, r3
 23f99de:	f7f0 f95d 	bl	23e9c9c <__aeabi_ddiv>
 23f99e2:	ec41 0b18 	vmov	d8, r0, r1
 23f99e6:	eeb0 0a48 	vmov.f32	s0, s16
 23f99ea:	eef0 0a68 	vmov.f32	s1, s17
 23f99ee:	ecbd 8b02 	vpop	{d8}
 23f99f2:	bd38      	pop	{r3, r4, r5, pc}
 23f99f4:	10079c10 	.word	0x10079c10

023f99f8 <expf>:
 23f99f8:	b508      	push	{r3, lr}
 23f99fa:	ed2d 8b02 	vpush	{d8}
 23f99fe:	eeb0 8a40 	vmov.f32	s16, s0
 23f9a02:	f000 fb49 	bl	23fa098 <__ieee754_expf>
 23f9a06:	4b16      	ldr	r3, [pc, #88]	; (23f9a60 <expf+0x68>)
 23f9a08:	eef0 8a40 	vmov.f32	s17, s0
 23f9a0c:	f993 3000 	ldrsb.w	r3, [r3]
 23f9a10:	3301      	adds	r3, #1
 23f9a12:	d012      	beq.n	23f9a3a <expf+0x42>
 23f9a14:	eeb0 0a48 	vmov.f32	s0, s16
 23f9a18:	f001 faf6 	bl	23fb008 <finitef>
 23f9a1c:	b168      	cbz	r0, 23f9a3a <expf+0x42>
 23f9a1e:	eddf 7a11 	vldr	s15, [pc, #68]	; 23f9a64 <expf+0x6c>
 23f9a22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f9a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9a2a:	dc12      	bgt.n	23f9a52 <expf+0x5a>
 23f9a2c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23f9a68 <expf+0x70>
 23f9a30:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f9a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9a38:	d404      	bmi.n	23f9a44 <expf+0x4c>
 23f9a3a:	eeb0 0a68 	vmov.f32	s0, s17
 23f9a3e:	ecbd 8b02 	vpop	{d8}
 23f9a42:	bd08      	pop	{r3, pc}
 23f9a44:	f7fa fee6 	bl	23f4814 <__errno>
 23f9a48:	2322      	movs	r3, #34	; 0x22
 23f9a4a:	eddf 8a08 	vldr	s17, [pc, #32]	; 23f9a6c <expf+0x74>
 23f9a4e:	6003      	str	r3, [r0, #0]
 23f9a50:	e7f3      	b.n	23f9a3a <expf+0x42>
 23f9a52:	f7fa fedf 	bl	23f4814 <__errno>
 23f9a56:	2322      	movs	r3, #34	; 0x22
 23f9a58:	eddf 8a05 	vldr	s17, [pc, #20]	; 23f9a70 <expf+0x78>
 23f9a5c:	6003      	str	r3, [r0, #0]
 23f9a5e:	e7ec      	b.n	23f9a3a <expf+0x42>
 23f9a60:	10079c10 	.word	0x10079c10
 23f9a64:	42b17180 	.word	0x42b17180
 23f9a68:	c2cff1b5 	.word	0xc2cff1b5
 23f9a6c:	00000000 	.word	0x00000000
 23f9a70:	7f800000 	.word	0x7f800000

023f9a74 <sqrtf>:
 23f9a74:	b508      	push	{r3, lr}
 23f9a76:	ed2d 8b02 	vpush	{d8}
 23f9a7a:	eeb0 8a40 	vmov.f32	s16, s0
 23f9a7e:	f000 fbfd 	bl	23fa27c <__ieee754_sqrtf>
 23f9a82:	4b0e      	ldr	r3, [pc, #56]	; (23f9abc <sqrtf+0x48>)
 23f9a84:	f993 3000 	ldrsb.w	r3, [r3]
 23f9a88:	3301      	adds	r3, #1
 23f9a8a:	d00b      	beq.n	23f9aa4 <sqrtf+0x30>
 23f9a8c:	eeb4 8a48 	vcmp.f32	s16, s16
 23f9a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9a94:	d606      	bvs.n	23f9aa4 <sqrtf+0x30>
 23f9a96:	eddf 8a0a 	vldr	s17, [pc, #40]	; 23f9ac0 <sqrtf+0x4c>
 23f9a9a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23f9a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9aa2:	d402      	bmi.n	23f9aaa <sqrtf+0x36>
 23f9aa4:	ecbd 8b02 	vpop	{d8}
 23f9aa8:	bd08      	pop	{r3, pc}
 23f9aaa:	f7fa feb3 	bl	23f4814 <__errno>
 23f9aae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 23f9ab2:	2321      	movs	r3, #33	; 0x21
 23f9ab4:	6003      	str	r3, [r0, #0]
 23f9ab6:	ecbd 8b02 	vpop	{d8}
 23f9aba:	bd08      	pop	{r3, pc}
 23f9abc:	10079c10 	.word	0x10079c10
	...

023f9ac8 <__ieee754_rem_pio2>:
 23f9ac8:	ec53 2b10 	vmov	r2, r3, d0
 23f9acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9ad0:	4991      	ldr	r1, [pc, #580]	; (23f9d18 <__ieee754_rem_pio2+0x250>)
 23f9ad2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23f9ad6:	4604      	mov	r4, r0
 23f9ad8:	428d      	cmp	r5, r1
 23f9ada:	ed2d 8b06 	vpush	{d8-d10}
 23f9ade:	b08b      	sub	sp, #44	; 0x2c
 23f9ae0:	f340 808c 	ble.w	23f9bfc <__ieee754_rem_pio2+0x134>
 23f9ae4:	498d      	ldr	r1, [pc, #564]	; (23f9d1c <__ieee754_rem_pio2+0x254>)
 23f9ae6:	461f      	mov	r7, r3
 23f9ae8:	428d      	cmp	r5, r1
 23f9aea:	dc2b      	bgt.n	23f9b44 <__ieee754_rem_pio2+0x7c>
 23f9aec:	2f00      	cmp	r7, #0
 23f9aee:	4619      	mov	r1, r3
 23f9af0:	ee10 0a10 	vmov	r0, s0
 23f9af4:	a37e      	add	r3, pc, #504	; (adr r3, 23f9cf0 <__ieee754_rem_pio2+0x228>)
 23f9af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9afa:	f340 81b8 	ble.w	23f9e6e <__ieee754_rem_pio2+0x3a6>
 23f9afe:	f7ef fdeb 	bl	23e96d8 <__aeabi_dsub>
 23f9b02:	4b87      	ldr	r3, [pc, #540]	; (23f9d20 <__ieee754_rem_pio2+0x258>)
 23f9b04:	4680      	mov	r8, r0
 23f9b06:	4689      	mov	r9, r1
 23f9b08:	429d      	cmp	r5, r3
 23f9b0a:	f000 808f 	beq.w	23f9c2c <__ieee754_rem_pio2+0x164>
 23f9b0e:	2601      	movs	r6, #1
 23f9b10:	a379      	add	r3, pc, #484	; (adr r3, 23f9cf8 <__ieee754_rem_pio2+0x230>)
 23f9b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b16:	f7ef fddf 	bl	23e96d8 <__aeabi_dsub>
 23f9b1a:	4602      	mov	r2, r0
 23f9b1c:	460b      	mov	r3, r1
 23f9b1e:	4640      	mov	r0, r8
 23f9b20:	4649      	mov	r1, r9
 23f9b22:	e9c4 2300 	strd	r2, r3, [r4]
 23f9b26:	f7ef fdd7 	bl	23e96d8 <__aeabi_dsub>
 23f9b2a:	a373      	add	r3, pc, #460	; (adr r3, 23f9cf8 <__ieee754_rem_pio2+0x230>)
 23f9b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b30:	f7ef fdd2 	bl	23e96d8 <__aeabi_dsub>
 23f9b34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9b38:	4630      	mov	r0, r6
 23f9b3a:	b00b      	add	sp, #44	; 0x2c
 23f9b3c:	ecbd 8b06 	vpop	{d8-d10}
 23f9b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9b44:	4977      	ldr	r1, [pc, #476]	; (23f9d24 <__ieee754_rem_pio2+0x25c>)
 23f9b46:	428d      	cmp	r5, r1
 23f9b48:	f340 8092 	ble.w	23f9c70 <__ieee754_rem_pio2+0x1a8>
 23f9b4c:	4976      	ldr	r1, [pc, #472]	; (23f9d28 <__ieee754_rem_pio2+0x260>)
 23f9b4e:	428d      	cmp	r5, r1
 23f9b50:	dc61      	bgt.n	23f9c16 <__ieee754_rem_pio2+0x14e>
 23f9b52:	152e      	asrs	r6, r5, #20
 23f9b54:	ee10 0a10 	vmov	r0, s0
 23f9b58:	4690      	mov	r8, r2
 23f9b5a:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23f9b5e:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23f9b62:	4689      	mov	r9, r1
 23f9b64:	f7f0 fa20 	bl	23e9fa8 <__aeabi_d2iz>
 23f9b68:	f7ef ff04 	bl	23e9974 <__aeabi_i2d>
 23f9b6c:	4602      	mov	r2, r0
 23f9b6e:	460b      	mov	r3, r1
 23f9b70:	4640      	mov	r0, r8
 23f9b72:	4649      	mov	r1, r9
 23f9b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f9b78:	f7ef fdae 	bl	23e96d8 <__aeabi_dsub>
 23f9b7c:	2200      	movs	r2, #0
 23f9b7e:	4b6b      	ldr	r3, [pc, #428]	; (23f9d2c <__ieee754_rem_pio2+0x264>)
 23f9b80:	f7ef ff62 	bl	23e9a48 <__aeabi_dmul>
 23f9b84:	4689      	mov	r9, r1
 23f9b86:	4680      	mov	r8, r0
 23f9b88:	f7f0 fa0e 	bl	23e9fa8 <__aeabi_d2iz>
 23f9b8c:	4605      	mov	r5, r0
 23f9b8e:	f7ef fef1 	bl	23e9974 <__aeabi_i2d>
 23f9b92:	4602      	mov	r2, r0
 23f9b94:	460b      	mov	r3, r1
 23f9b96:	4640      	mov	r0, r8
 23f9b98:	4649      	mov	r1, r9
 23f9b9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23f9b9e:	f7ef fd9b 	bl	23e96d8 <__aeabi_dsub>
 23f9ba2:	2200      	movs	r2, #0
 23f9ba4:	4b61      	ldr	r3, [pc, #388]	; (23f9d2c <__ieee754_rem_pio2+0x264>)
 23f9ba6:	f7ef ff4f 	bl	23e9a48 <__aeabi_dmul>
 23f9baa:	4602      	mov	r2, r0
 23f9bac:	460b      	mov	r3, r1
 23f9bae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23f9bb2:	2200      	movs	r2, #0
 23f9bb4:	2300      	movs	r3, #0
 23f9bb6:	f7f0 f9af 	bl	23e9f18 <__aeabi_dcmpeq>
 23f9bba:	2800      	cmp	r0, #0
 23f9bbc:	f000 8155 	beq.w	23f9e6a <__ieee754_rem_pio2+0x3a2>
 23f9bc0:	2d00      	cmp	r5, #0
 23f9bc2:	bf0c      	ite	eq
 23f9bc4:	2301      	moveq	r3, #1
 23f9bc6:	2302      	movne	r3, #2
 23f9bc8:	4959      	ldr	r1, [pc, #356]	; (23f9d30 <__ieee754_rem_pio2+0x268>)
 23f9bca:	4632      	mov	r2, r6
 23f9bcc:	a804      	add	r0, sp, #16
 23f9bce:	9101      	str	r1, [sp, #4]
 23f9bd0:	2102      	movs	r1, #2
 23f9bd2:	9100      	str	r1, [sp, #0]
 23f9bd4:	4621      	mov	r1, r4
 23f9bd6:	f000 fc97 	bl	23fa508 <__kernel_rem_pio2>
 23f9bda:	2f00      	cmp	r7, #0
 23f9bdc:	4606      	mov	r6, r0
 23f9bde:	daab      	bge.n	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9be0:	6861      	ldr	r1, [r4, #4]
 23f9be2:	4246      	negs	r6, r0
 23f9be4:	6822      	ldr	r2, [r4, #0]
 23f9be6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f9bea:	68e1      	ldr	r1, [r4, #12]
 23f9bec:	e9c4 2300 	strd	r2, r3, [r4]
 23f9bf0:	68a2      	ldr	r2, [r4, #8]
 23f9bf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f9bf6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23f9bfa:	e79d      	b.n	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9bfc:	2000      	movs	r0, #0
 23f9bfe:	2100      	movs	r1, #0
 23f9c00:	2600      	movs	r6, #0
 23f9c02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9c06:	4630      	mov	r0, r6
 23f9c08:	ed84 0b00 	vstr	d0, [r4]
 23f9c0c:	b00b      	add	sp, #44	; 0x2c
 23f9c0e:	ecbd 8b06 	vpop	{d8-d10}
 23f9c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9c16:	ee10 0a10 	vmov	r0, s0
 23f9c1a:	4619      	mov	r1, r3
 23f9c1c:	f7ef fd5c 	bl	23e96d8 <__aeabi_dsub>
 23f9c20:	2600      	movs	r6, #0
 23f9c22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9c26:	e9c4 0100 	strd	r0, r1, [r4]
 23f9c2a:	e785      	b.n	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9c2c:	a334      	add	r3, pc, #208	; (adr r3, 23f9d00 <__ieee754_rem_pio2+0x238>)
 23f9c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9c32:	f7ef fd51 	bl	23e96d8 <__aeabi_dsub>
 23f9c36:	4680      	mov	r8, r0
 23f9c38:	4689      	mov	r9, r1
 23f9c3a:	2601      	movs	r6, #1
 23f9c3c:	a332      	add	r3, pc, #200	; (adr r3, 23f9d08 <__ieee754_rem_pio2+0x240>)
 23f9c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9c42:	f7ef fd49 	bl	23e96d8 <__aeabi_dsub>
 23f9c46:	4602      	mov	r2, r0
 23f9c48:	460b      	mov	r3, r1
 23f9c4a:	4640      	mov	r0, r8
 23f9c4c:	4649      	mov	r1, r9
 23f9c4e:	e9c4 2300 	strd	r2, r3, [r4]
 23f9c52:	f7ef fd41 	bl	23e96d8 <__aeabi_dsub>
 23f9c56:	a32c      	add	r3, pc, #176	; (adr r3, 23f9d08 <__ieee754_rem_pio2+0x240>)
 23f9c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9c5c:	f7ef fd3c 	bl	23e96d8 <__aeabi_dsub>
 23f9c60:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9c64:	4630      	mov	r0, r6
 23f9c66:	b00b      	add	sp, #44	; 0x2c
 23f9c68:	ecbd 8b06 	vpop	{d8-d10}
 23f9c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9c70:	f7ff fcea 	bl	23f9648 <fabs>
 23f9c74:	ee10 0a10 	vmov	r0, s0
 23f9c78:	ec59 8b10 	vmov	r8, r9, d0
 23f9c7c:	a324      	add	r3, pc, #144	; (adr r3, 23f9d10 <__ieee754_rem_pio2+0x248>)
 23f9c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9c82:	4649      	mov	r1, r9
 23f9c84:	f7ef fee0 	bl	23e9a48 <__aeabi_dmul>
 23f9c88:	2200      	movs	r2, #0
 23f9c8a:	4b2a      	ldr	r3, [pc, #168]	; (23f9d34 <__ieee754_rem_pio2+0x26c>)
 23f9c8c:	f7ef fd26 	bl	23e96dc <__adddf3>
 23f9c90:	f7f0 f98a 	bl	23e9fa8 <__aeabi_d2iz>
 23f9c94:	4606      	mov	r6, r0
 23f9c96:	f7ef fe6d 	bl	23e9974 <__aeabi_i2d>
 23f9c9a:	4602      	mov	r2, r0
 23f9c9c:	460b      	mov	r3, r1
 23f9c9e:	ec43 2b18 	vmov	d8, r2, r3
 23f9ca2:	a313      	add	r3, pc, #76	; (adr r3, 23f9cf0 <__ieee754_rem_pio2+0x228>)
 23f9ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9ca8:	f7ef fece 	bl	23e9a48 <__aeabi_dmul>
 23f9cac:	4602      	mov	r2, r0
 23f9cae:	460b      	mov	r3, r1
 23f9cb0:	4640      	mov	r0, r8
 23f9cb2:	4649      	mov	r1, r9
 23f9cb4:	eeb0 9a48 	vmov.f32	s18, s16
 23f9cb8:	eef0 9a68 	vmov.f32	s19, s17
 23f9cbc:	f7ef fd0c 	bl	23e96d8 <__aeabi_dsub>
 23f9cc0:	4682      	mov	sl, r0
 23f9cc2:	468b      	mov	fp, r1
 23f9cc4:	a30c      	add	r3, pc, #48	; (adr r3, 23f9cf8 <__ieee754_rem_pio2+0x230>)
 23f9cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9cca:	ec51 0b18 	vmov	r0, r1, d8
 23f9cce:	f7ef febb 	bl	23e9a48 <__aeabi_dmul>
 23f9cd2:	2e1f      	cmp	r6, #31
 23f9cd4:	ec41 0b18 	vmov	d8, r0, r1
 23f9cd8:	dc30      	bgt.n	23f9d3c <__ieee754_rem_pio2+0x274>
 23f9cda:	4b17      	ldr	r3, [pc, #92]	; (23f9d38 <__ieee754_rem_pio2+0x270>)
 23f9cdc:	1e72      	subs	r2, r6, #1
 23f9cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23f9ce2:	42ab      	cmp	r3, r5
 23f9ce4:	d02a      	beq.n	23f9d3c <__ieee754_rem_pio2+0x274>
 23f9ce6:	4602      	mov	r2, r0
 23f9ce8:	460b      	mov	r3, r1
 23f9cea:	e09d      	b.n	23f9e28 <__ieee754_rem_pio2+0x360>
 23f9cec:	f3af 8000 	nop.w
 23f9cf0:	54400000 	.word	0x54400000
 23f9cf4:	3ff921fb 	.word	0x3ff921fb
 23f9cf8:	1a626331 	.word	0x1a626331
 23f9cfc:	3dd0b461 	.word	0x3dd0b461
 23f9d00:	1a600000 	.word	0x1a600000
 23f9d04:	3dd0b461 	.word	0x3dd0b461
 23f9d08:	2e037073 	.word	0x2e037073
 23f9d0c:	3ba3198a 	.word	0x3ba3198a
 23f9d10:	6dc9c883 	.word	0x6dc9c883
 23f9d14:	3fe45f30 	.word	0x3fe45f30
 23f9d18:	3fe921fb 	.word	0x3fe921fb
 23f9d1c:	4002d97b 	.word	0x4002d97b
 23f9d20:	3ff921fb 	.word	0x3ff921fb
 23f9d24:	413921fb 	.word	0x413921fb
 23f9d28:	7fefffff 	.word	0x7fefffff
 23f9d2c:	41700000 	.word	0x41700000
 23f9d30:	023ffc60 	.word	0x023ffc60
 23f9d34:	3fe00000 	.word	0x3fe00000
 23f9d38:	023ffbe0 	.word	0x023ffbe0
 23f9d3c:	152b      	asrs	r3, r5, #20
 23f9d3e:	4650      	mov	r0, sl
 23f9d40:	4659      	mov	r1, fp
 23f9d42:	9303      	str	r3, [sp, #12]
 23f9d44:	ec53 2b18 	vmov	r2, r3, d8
 23f9d48:	f7ef fcc6 	bl	23e96d8 <__aeabi_dsub>
 23f9d4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f9d50:	4680      	mov	r8, r0
 23f9d52:	4689      	mov	r9, r1
 23f9d54:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23f9d58:	2d10      	cmp	r5, #16
 23f9d5a:	dd6b      	ble.n	23f9e34 <__ieee754_rem_pio2+0x36c>
 23f9d5c:	a364      	add	r3, pc, #400	; (adr r3, 23f9ef0 <__ieee754_rem_pio2+0x428>)
 23f9d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d62:	ec51 0b19 	vmov	r0, r1, d9
 23f9d66:	f7ef fe6f 	bl	23e9a48 <__aeabi_dmul>
 23f9d6a:	4680      	mov	r8, r0
 23f9d6c:	4689      	mov	r9, r1
 23f9d6e:	4650      	mov	r0, sl
 23f9d70:	4642      	mov	r2, r8
 23f9d72:	4659      	mov	r1, fp
 23f9d74:	464b      	mov	r3, r9
 23f9d76:	f7ef fcaf 	bl	23e96d8 <__aeabi_dsub>
 23f9d7a:	4602      	mov	r2, r0
 23f9d7c:	460b      	mov	r3, r1
 23f9d7e:	4650      	mov	r0, sl
 23f9d80:	4659      	mov	r1, fp
 23f9d82:	4692      	mov	sl, r2
 23f9d84:	469b      	mov	fp, r3
 23f9d86:	ec43 2b1a 	vmov	d10, r2, r3
 23f9d8a:	f7ef fca5 	bl	23e96d8 <__aeabi_dsub>
 23f9d8e:	4642      	mov	r2, r8
 23f9d90:	464b      	mov	r3, r9
 23f9d92:	f7ef fca1 	bl	23e96d8 <__aeabi_dsub>
 23f9d96:	4680      	mov	r8, r0
 23f9d98:	4689      	mov	r9, r1
 23f9d9a:	a357      	add	r3, pc, #348	; (adr r3, 23f9ef8 <__ieee754_rem_pio2+0x430>)
 23f9d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9da0:	ec51 0b19 	vmov	r0, r1, d9
 23f9da4:	f7ef fe50 	bl	23e9a48 <__aeabi_dmul>
 23f9da8:	4642      	mov	r2, r8
 23f9daa:	464b      	mov	r3, r9
 23f9dac:	f7ef fc94 	bl	23e96d8 <__aeabi_dsub>
 23f9db0:	4602      	mov	r2, r0
 23f9db2:	460b      	mov	r3, r1
 23f9db4:	4650      	mov	r0, sl
 23f9db6:	4659      	mov	r1, fp
 23f9db8:	ec43 2b18 	vmov	d8, r2, r3
 23f9dbc:	f7ef fc8c 	bl	23e96d8 <__aeabi_dsub>
 23f9dc0:	9a03      	ldr	r2, [sp, #12]
 23f9dc2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f9dc6:	4680      	mov	r8, r0
 23f9dc8:	4689      	mov	r9, r1
 23f9dca:	1ad3      	subs	r3, r2, r3
 23f9dcc:	2b31      	cmp	r3, #49	; 0x31
 23f9dce:	dd31      	ble.n	23f9e34 <__ieee754_rem_pio2+0x36c>
 23f9dd0:	a34c      	add	r3, pc, #304	; (adr r3, 23f9f04 <__ieee754_rem_pio2+0x43c>)
 23f9dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9dd6:	ec51 0b19 	vmov	r0, r1, d9
 23f9dda:	f7ef fe35 	bl	23e9a48 <__aeabi_dmul>
 23f9dde:	4680      	mov	r8, r0
 23f9de0:	4689      	mov	r9, r1
 23f9de2:	4642      	mov	r2, r8
 23f9de4:	464b      	mov	r3, r9
 23f9de6:	ec51 0b1a 	vmov	r0, r1, d10
 23f9dea:	f7ef fc75 	bl	23e96d8 <__aeabi_dsub>
 23f9dee:	4682      	mov	sl, r0
 23f9df0:	468b      	mov	fp, r1
 23f9df2:	4652      	mov	r2, sl
 23f9df4:	465b      	mov	r3, fp
 23f9df6:	ec51 0b1a 	vmov	r0, r1, d10
 23f9dfa:	f7ef fc6d 	bl	23e96d8 <__aeabi_dsub>
 23f9dfe:	4642      	mov	r2, r8
 23f9e00:	464b      	mov	r3, r9
 23f9e02:	f7ef fc69 	bl	23e96d8 <__aeabi_dsub>
 23f9e06:	4680      	mov	r8, r0
 23f9e08:	4689      	mov	r9, r1
 23f9e0a:	a340      	add	r3, pc, #256	; (adr r3, 23f9f0c <__ieee754_rem_pio2+0x444>)
 23f9e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9e10:	ec51 0b19 	vmov	r0, r1, d9
 23f9e14:	f7ef fe18 	bl	23e9a48 <__aeabi_dmul>
 23f9e18:	4642      	mov	r2, r8
 23f9e1a:	464b      	mov	r3, r9
 23f9e1c:	f7ef fc5c 	bl	23e96d8 <__aeabi_dsub>
 23f9e20:	4602      	mov	r2, r0
 23f9e22:	460b      	mov	r3, r1
 23f9e24:	ec43 2b18 	vmov	d8, r2, r3
 23f9e28:	4650      	mov	r0, sl
 23f9e2a:	4659      	mov	r1, fp
 23f9e2c:	f7ef fc54 	bl	23e96d8 <__aeabi_dsub>
 23f9e30:	4680      	mov	r8, r0
 23f9e32:	4689      	mov	r9, r1
 23f9e34:	4642      	mov	r2, r8
 23f9e36:	464b      	mov	r3, r9
 23f9e38:	4650      	mov	r0, sl
 23f9e3a:	4659      	mov	r1, fp
 23f9e3c:	e9c4 8900 	strd	r8, r9, [r4]
 23f9e40:	f7ef fc4a 	bl	23e96d8 <__aeabi_dsub>
 23f9e44:	ec53 2b18 	vmov	r2, r3, d8
 23f9e48:	f7ef fc46 	bl	23e96d8 <__aeabi_dsub>
 23f9e4c:	2f00      	cmp	r7, #0
 23f9e4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9e52:	f6bf ae71 	bge.w	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9e56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23f9e5a:	4276      	negs	r6, r6
 23f9e5c:	e9c4 8300 	strd	r8, r3, [r4]
 23f9e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f9e64:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23f9e68:	e666      	b.n	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9e6a:	2303      	movs	r3, #3
 23f9e6c:	e6ac      	b.n	23f9bc8 <__ieee754_rem_pio2+0x100>
 23f9e6e:	f7ef fc35 	bl	23e96dc <__adddf3>
 23f9e72:	4b23      	ldr	r3, [pc, #140]	; (23f9f00 <__ieee754_rem_pio2+0x438>)
 23f9e74:	4680      	mov	r8, r0
 23f9e76:	4689      	mov	r9, r1
 23f9e78:	429d      	cmp	r5, r3
 23f9e7a:	d016      	beq.n	23f9eaa <__ieee754_rem_pio2+0x3e2>
 23f9e7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23f9e80:	a319      	add	r3, pc, #100	; (adr r3, 23f9ee8 <__ieee754_rem_pio2+0x420>)
 23f9e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9e86:	f7ef fc29 	bl	23e96dc <__adddf3>
 23f9e8a:	4602      	mov	r2, r0
 23f9e8c:	460b      	mov	r3, r1
 23f9e8e:	4640      	mov	r0, r8
 23f9e90:	4649      	mov	r1, r9
 23f9e92:	e9c4 2300 	strd	r2, r3, [r4]
 23f9e96:	f7ef fc1f 	bl	23e96d8 <__aeabi_dsub>
 23f9e9a:	a313      	add	r3, pc, #76	; (adr r3, 23f9ee8 <__ieee754_rem_pio2+0x420>)
 23f9e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9ea0:	f7ef fc1c 	bl	23e96dc <__adddf3>
 23f9ea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9ea8:	e646      	b.n	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9eaa:	a311      	add	r3, pc, #68	; (adr r3, 23f9ef0 <__ieee754_rem_pio2+0x428>)
 23f9eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9eb0:	f7ef fc14 	bl	23e96dc <__adddf3>
 23f9eb4:	4680      	mov	r8, r0
 23f9eb6:	4689      	mov	r9, r1
 23f9eb8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23f9ebc:	a30e      	add	r3, pc, #56	; (adr r3, 23f9ef8 <__ieee754_rem_pio2+0x430>)
 23f9ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9ec2:	f7ef fc0b 	bl	23e96dc <__adddf3>
 23f9ec6:	4602      	mov	r2, r0
 23f9ec8:	460b      	mov	r3, r1
 23f9eca:	4640      	mov	r0, r8
 23f9ecc:	4649      	mov	r1, r9
 23f9ece:	e9c4 2300 	strd	r2, r3, [r4]
 23f9ed2:	f7ef fc01 	bl	23e96d8 <__aeabi_dsub>
 23f9ed6:	a308      	add	r3, pc, #32	; (adr r3, 23f9ef8 <__ieee754_rem_pio2+0x430>)
 23f9ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9edc:	f7ef fbfe 	bl	23e96dc <__adddf3>
 23f9ee0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f9ee4:	e628      	b.n	23f9b38 <__ieee754_rem_pio2+0x70>
 23f9ee6:	bf00      	nop
 23f9ee8:	1a626331 	.word	0x1a626331
 23f9eec:	3dd0b461 	.word	0x3dd0b461
 23f9ef0:	1a600000 	.word	0x1a600000
 23f9ef4:	3dd0b461 	.word	0x3dd0b461
 23f9ef8:	2e037073 	.word	0x2e037073
 23f9efc:	3ba3198a 	.word	0x3ba3198a
 23f9f00:	3ff921fb 	.word	0x3ff921fb
 23f9f04:	2e000000 	.word	0x2e000000
 23f9f08:	3ba3198a 	.word	0x3ba3198a
 23f9f0c:	252049c1 	.word	0x252049c1
 23f9f10:	397b839a 	.word	0x397b839a

023f9f14 <__ieee754_sqrt>:
 23f9f14:	495e      	ldr	r1, [pc, #376]	; (23fa090 <__ieee754_sqrt+0x17c>)
 23f9f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9f1a:	ec55 4b10 	vmov	r4, r5, d0
 23f9f1e:	43a9      	bics	r1, r5
 23f9f20:	f000 8094 	beq.w	23fa04c <__ieee754_sqrt+0x138>
 23f9f24:	2d00      	cmp	r5, #0
 23f9f26:	462b      	mov	r3, r5
 23f9f28:	ee10 2a10 	vmov	r2, s0
 23f9f2c:	dd5a      	ble.n	23f9fe4 <__ieee754_sqrt+0xd0>
 23f9f2e:	1528      	asrs	r0, r5, #20
 23f9f30:	d067      	beq.n	23fa002 <__ieee754_sqrt+0xee>
 23f9f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23f9f36:	07c1      	lsls	r1, r0, #31
 23f9f38:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23f9f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f9f40:	d403      	bmi.n	23f9f4a <__ieee754_sqrt+0x36>
 23f9f42:	005b      	lsls	r3, r3, #1
 23f9f44:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23f9f48:	0052      	lsls	r2, r2, #1
 23f9f4a:	0fd1      	lsrs	r1, r2, #31
 23f9f4c:	2600      	movs	r6, #0
 23f9f4e:	107f      	asrs	r7, r7, #1
 23f9f50:	f04f 0c16 	mov.w	ip, #22
 23f9f54:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23f9f58:	46b6      	mov	lr, r6
 23f9f5a:	0052      	lsls	r2, r2, #1
 23f9f5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23f9f60:	eb0e 0001 	add.w	r0, lr, r1
 23f9f64:	4298      	cmp	r0, r3
 23f9f66:	dc03      	bgt.n	23f9f70 <__ieee754_sqrt+0x5c>
 23f9f68:	1a1b      	subs	r3, r3, r0
 23f9f6a:	eb00 0e01 	add.w	lr, r0, r1
 23f9f6e:	440e      	add	r6, r1
 23f9f70:	005b      	lsls	r3, r3, #1
 23f9f72:	f1bc 0c01 	subs.w	ip, ip, #1
 23f9f76:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23f9f7a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23f9f7e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23f9f82:	d1ed      	bne.n	23f9f60 <__ieee754_sqrt+0x4c>
 23f9f84:	4665      	mov	r5, ip
 23f9f86:	2420      	movs	r4, #32
 23f9f88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23f9f8c:	e014      	b.n	23f9fb8 <__ieee754_sqrt+0xa4>
 23f9f8e:	d10a      	bne.n	23f9fa6 <__ieee754_sqrt+0x92>
 23f9f90:	4290      	cmp	r0, r2
 23f9f92:	d808      	bhi.n	23f9fa6 <__ieee754_sqrt+0x92>
 23f9f94:	2800      	cmp	r0, #0
 23f9f96:	eb00 0c01 	add.w	ip, r0, r1
 23f9f9a:	db1d      	blt.n	23f9fd8 <__ieee754_sqrt+0xc4>
 23f9f9c:	46f0      	mov	r8, lr
 23f9f9e:	2300      	movs	r3, #0
 23f9fa0:	1a12      	subs	r2, r2, r0
 23f9fa2:	440d      	add	r5, r1
 23f9fa4:	46c6      	mov	lr, r8
 23f9fa6:	0fd0      	lsrs	r0, r2, #31
 23f9fa8:	3c01      	subs	r4, #1
 23f9faa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23f9fae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23f9fb2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23f9fb6:	d033      	beq.n	23fa020 <__ieee754_sqrt+0x10c>
 23f9fb8:	4573      	cmp	r3, lr
 23f9fba:	eb01 000c 	add.w	r0, r1, ip
 23f9fbe:	dde6      	ble.n	23f9f8e <__ieee754_sqrt+0x7a>
 23f9fc0:	2800      	cmp	r0, #0
 23f9fc2:	eb00 0c01 	add.w	ip, r0, r1
 23f9fc6:	db07      	blt.n	23f9fd8 <__ieee754_sqrt+0xc4>
 23f9fc8:	46f0      	mov	r8, lr
 23f9fca:	eba3 030e 	sub.w	r3, r3, lr
 23f9fce:	4290      	cmp	r0, r2
 23f9fd0:	bf88      	it	hi
 23f9fd2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23f9fd6:	e7e3      	b.n	23f9fa0 <__ieee754_sqrt+0x8c>
 23f9fd8:	f1bc 0f00 	cmp.w	ip, #0
 23f9fdc:	dbf4      	blt.n	23f9fc8 <__ieee754_sqrt+0xb4>
 23f9fde:	f10e 0801 	add.w	r8, lr, #1
 23f9fe2:	e7f2      	b.n	23f9fca <__ieee754_sqrt+0xb6>
 23f9fe4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23f9fe8:	4321      	orrs	r1, r4
 23f9fea:	d028      	beq.n	23fa03e <__ieee754_sqrt+0x12a>
 23f9fec:	2d00      	cmp	r5, #0
 23f9fee:	d13d      	bne.n	23fa06c <__ieee754_sqrt+0x158>
 23f9ff0:	4628      	mov	r0, r5
 23f9ff2:	0ad1      	lsrs	r1, r2, #11
 23f9ff4:	3815      	subs	r0, #21
 23f9ff6:	0552      	lsls	r2, r2, #21
 23f9ff8:	460b      	mov	r3, r1
 23f9ffa:	2900      	cmp	r1, #0
 23f9ffc:	d0f9      	beq.n	23f9ff2 <__ieee754_sqrt+0xde>
 23f9ffe:	02cf      	lsls	r7, r1, #11
 23fa000:	d441      	bmi.n	23fa086 <__ieee754_sqrt+0x172>
 23fa002:	2400      	movs	r4, #0
 23fa004:	005b      	lsls	r3, r3, #1
 23fa006:	4625      	mov	r5, r4
 23fa008:	3401      	adds	r4, #1
 23fa00a:	02de      	lsls	r6, r3, #11
 23fa00c:	d5fa      	bpl.n	23fa004 <__ieee754_sqrt+0xf0>
 23fa00e:	4619      	mov	r1, r3
 23fa010:	4613      	mov	r3, r2
 23fa012:	40a2      	lsls	r2, r4
 23fa014:	f1c4 0420 	rsb	r4, r4, #32
 23fa018:	40e3      	lsrs	r3, r4
 23fa01a:	1b40      	subs	r0, r0, r5
 23fa01c:	430b      	orrs	r3, r1
 23fa01e:	e788      	b.n	23f9f32 <__ieee754_sqrt+0x1e>
 23fa020:	4313      	orrs	r3, r2
 23fa022:	d10e      	bne.n	23fa042 <__ieee754_sqrt+0x12e>
 23fa024:	086c      	lsrs	r4, r5, #1
 23fa026:	07f3      	lsls	r3, r6, #31
 23fa028:	491a      	ldr	r1, [pc, #104]	; (23fa094 <__ieee754_sqrt+0x180>)
 23fa02a:	bf48      	it	mi
 23fa02c:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fa030:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fa034:	4622      	mov	r2, r4
 23fa036:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fa03a:	ec43 2b10 	vmov	d0, r2, r3
 23fa03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa042:	1c6a      	adds	r2, r5, #1
 23fa044:	d01d      	beq.n	23fa082 <__ieee754_sqrt+0x16e>
 23fa046:	1c6c      	adds	r4, r5, #1
 23fa048:	0864      	lsrs	r4, r4, #1
 23fa04a:	e7ec      	b.n	23fa026 <__ieee754_sqrt+0x112>
 23fa04c:	ee10 2a10 	vmov	r2, s0
 23fa050:	462b      	mov	r3, r5
 23fa052:	ee10 0a10 	vmov	r0, s0
 23fa056:	4629      	mov	r1, r5
 23fa058:	f7ef fcf6 	bl	23e9a48 <__aeabi_dmul>
 23fa05c:	4622      	mov	r2, r4
 23fa05e:	462b      	mov	r3, r5
 23fa060:	f7ef fb3c 	bl	23e96dc <__adddf3>
 23fa064:	ec41 0b10 	vmov	d0, r0, r1
 23fa068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa06c:	4620      	mov	r0, r4
 23fa06e:	4629      	mov	r1, r5
 23fa070:	f7ef fb32 	bl	23e96d8 <__aeabi_dsub>
 23fa074:	4602      	mov	r2, r0
 23fa076:	460b      	mov	r3, r1
 23fa078:	f7ef fe10 	bl	23e9c9c <__aeabi_ddiv>
 23fa07c:	ec41 0b10 	vmov	d0, r0, r1
 23fa080:	e7dd      	b.n	23fa03e <__ieee754_sqrt+0x12a>
 23fa082:	3601      	adds	r6, #1
 23fa084:	e7cf      	b.n	23fa026 <__ieee754_sqrt+0x112>
 23fa086:	4613      	mov	r3, r2
 23fa088:	2420      	movs	r4, #32
 23fa08a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fa08e:	e7c3      	b.n	23fa018 <__ieee754_sqrt+0x104>
 23fa090:	7ff00000 	.word	0x7ff00000
 23fa094:	3fe00000 	.word	0x3fe00000

023fa098 <__ieee754_expf>:
 23fa098:	ee10 3a10 	vmov	r3, s0
 23fa09c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 23fa0a0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 23fa0a4:	d859      	bhi.n	23fa15a <__ieee754_expf+0xc2>
 23fa0a6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 23fa0aa:	f000 8093 	beq.w	23fa1d4 <__ieee754_expf+0x13c>
 23fa0ae:	4861      	ldr	r0, [pc, #388]	; (23fa234 <__ieee754_expf+0x19c>)
 23fa0b0:	4283      	cmp	r3, r0
 23fa0b2:	dc55      	bgt.n	23fa160 <__ieee754_expf+0xc8>
 23fa0b4:	b129      	cbz	r1, 23fa0c2 <__ieee754_expf+0x2a>
 23fa0b6:	4b60      	ldr	r3, [pc, #384]	; (23fa238 <__ieee754_expf+0x1a0>)
 23fa0b8:	429a      	cmp	r2, r3
 23fa0ba:	d902      	bls.n	23fa0c2 <__ieee754_expf+0x2a>
 23fa0bc:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 23fa23c <__ieee754_expf+0x1a4>
 23fa0c0:	4770      	bx	lr
 23fa0c2:	4b5f      	ldr	r3, [pc, #380]	; (23fa240 <__ieee754_expf+0x1a8>)
 23fa0c4:	429a      	cmp	r2, r3
 23fa0c6:	d950      	bls.n	23fa16a <__ieee754_expf+0xd2>
 23fa0c8:	4b5e      	ldr	r3, [pc, #376]	; (23fa244 <__ieee754_expf+0x1ac>)
 23fa0ca:	429a      	cmp	r2, r3
 23fa0cc:	f200 8094 	bhi.w	23fa1f8 <__ieee754_expf+0x160>
 23fa0d0:	485d      	ldr	r0, [pc, #372]	; (23fa248 <__ieee754_expf+0x1b0>)
 23fa0d2:	f1c1 0301 	rsb	r3, r1, #1
 23fa0d6:	4a5d      	ldr	r2, [pc, #372]	; (23fa24c <__ieee754_expf+0x1b4>)
 23fa0d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fa0dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23fa0e0:	1a59      	subs	r1, r3, r1
 23fa0e2:	ed90 4a00 	vldr	s8, [r0]
 23fa0e6:	ed92 7a00 	vldr	s14, [r2]
 23fa0ea:	ee30 4a44 	vsub.f32	s8, s0, s8
 23fa0ee:	ee34 0a47 	vsub.f32	s0, s8, s14
 23fa0f2:	eddf 7a57 	vldr	s15, [pc, #348]	; 23fa250 <__ieee754_expf+0x1b8>
 23fa0f6:	eddf 4a57 	vldr	s9, [pc, #348]	; 23fa254 <__ieee754_expf+0x1bc>
 23fa0fa:	ed9f 5a57 	vldr	s10, [pc, #348]	; 23fa258 <__ieee754_expf+0x1c0>
 23fa0fe:	ee60 6a00 	vmul.f32	s13, s0, s0
 23fa102:	ed9f 6a56 	vldr	s12, [pc, #344]	; 23fa25c <__ieee754_expf+0x1c4>
 23fa106:	eddf 5a56 	vldr	s11, [pc, #344]	; 23fa260 <__ieee754_expf+0x1c8>
 23fa10a:	eee6 4aa7 	vfma.f32	s9, s13, s15
 23fa10e:	eea4 5aa6 	vfma.f32	s10, s9, s13
 23fa112:	eea5 6a26 	vfma.f32	s12, s10, s13
 23fa116:	eee6 5a26 	vfma.f32	s11, s12, s13
 23fa11a:	eeb0 6a40 	vmov.f32	s12, s0
 23fa11e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 23fa122:	2900      	cmp	r1, #0
 23fa124:	d047      	beq.n	23fa1b6 <__ieee754_expf+0x11e>
 23fa126:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 23fa12a:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
 23fa12e:	ee60 5a06 	vmul.f32	s11, s0, s12
 23fa132:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23fa136:	ee36 6ac6 	vsub.f32	s12, s13, s12
 23fa13a:	ee85 0a86 	vdiv.f32	s0, s11, s12
 23fa13e:	ee37 0a40 	vsub.f32	s0, s14, s0
 23fa142:	ee30 0a44 	vsub.f32	s0, s0, s8
 23fa146:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23fa14a:	db49      	blt.n	23fa1e0 <__ieee754_expf+0x148>
 23fa14c:	ee10 3a10 	vmov	r3, s0
 23fa150:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23fa154:	ee00 3a10 	vmov	s0, r3
 23fa158:	4770      	bx	lr
 23fa15a:	ee30 0a00 	vadd.f32	s0, s0, s0
 23fa15e:	4770      	bx	lr
 23fa160:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23fa264 <__ieee754_expf+0x1cc>
 23fa164:	ee20 0a00 	vmul.f32	s0, s0, s0
 23fa168:	4770      	bx	lr
 23fa16a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 23fa16e:	d20a      	bcs.n	23fa186 <__ieee754_expf+0xee>
 23fa170:	eddf 7a3c 	vldr	s15, [pc, #240]	; 23fa264 <__ieee754_expf+0x1cc>
 23fa174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23fa178:	ee70 7a27 	vadd.f32	s15, s0, s15
 23fa17c:	eef4 7ac7 	vcmpe.f32	s15, s14
 23fa180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fa184:	dc52      	bgt.n	23fa22c <__ieee754_expf+0x194>
 23fa186:	ee60 7a00 	vmul.f32	s15, s0, s0
 23fa18a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 23fa250 <__ieee754_expf+0x1b8>
 23fa18e:	eddf 5a31 	vldr	s11, [pc, #196]	; 23fa254 <__ieee754_expf+0x1bc>
 23fa192:	ed9f 6a31 	vldr	s12, [pc, #196]	; 23fa258 <__ieee754_expf+0x1c0>
 23fa196:	eee7 5a85 	vfma.f32	s11, s15, s10
 23fa19a:	eddf 6a30 	vldr	s13, [pc, #192]	; 23fa25c <__ieee754_expf+0x1c4>
 23fa19e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 23fa260 <__ieee754_expf+0x1c8>
 23fa1a2:	eea7 6aa5 	vfma.f32	s12, s15, s11
 23fa1a6:	eee7 6a86 	vfma.f32	s13, s15, s12
 23fa1aa:	eeb0 6a40 	vmov.f32	s12, s0
 23fa1ae:	eea7 7aa6 	vfma.f32	s14, s15, s13
 23fa1b2:	eea7 6ac7 	vfms.f32	s12, s15, s14
 23fa1b6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 23fa1ba:	ee60 6a06 	vmul.f32	s13, s0, s12
 23fa1be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23fa1c2:	ee36 6a67 	vsub.f32	s12, s12, s15
 23fa1c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 23fa1ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23fa1ce:	ee37 0a40 	vsub.f32	s0, s14, s0
 23fa1d2:	4770      	bx	lr
 23fa1d4:	eddf 7a19 	vldr	s15, [pc, #100]	; 23fa23c <__ieee754_expf+0x1a4>
 23fa1d8:	2900      	cmp	r1, #0
 23fa1da:	fe00 0a27 	vseleq.f32	s0, s0, s15
 23fa1de:	4770      	bx	lr
 23fa1e0:	3164      	adds	r1, #100	; 0x64
 23fa1e2:	ee10 3a10 	vmov	r3, s0
 23fa1e6:	eddf 7a20 	vldr	s15, [pc, #128]	; 23fa268 <__ieee754_expf+0x1d0>
 23fa1ea:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23fa1ee:	ee00 3a10 	vmov	s0, r3
 23fa1f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 23fa1f6:	4770      	bx	lr
 23fa1f8:	4b1c      	ldr	r3, [pc, #112]	; (23fa26c <__ieee754_expf+0x1d4>)
 23fa1fa:	eeb0 4a40 	vmov.f32	s8, s0
 23fa1fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 23fa270 <__ieee754_expf+0x1d8>
 23fa202:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 23fa206:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 23fa274 <__ieee754_expf+0x1dc>
 23fa20a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23fa278 <__ieee754_expf+0x1e0>
 23fa20e:	edd1 7a00 	vldr	s15, [r1]
 23fa212:	eee0 7a07 	vfma.f32	s15, s0, s14
 23fa216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23fa21a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23fa21e:	ee17 1a90 	vmov	r1, s15
 23fa222:	eea7 4a46 	vfms.f32	s8, s14, s12
 23fa226:	ee27 7a26 	vmul.f32	s14, s14, s13
 23fa22a:	e760      	b.n	23fa0ee <__ieee754_expf+0x56>
 23fa22c:	ee30 0a07 	vadd.f32	s0, s0, s14
 23fa230:	4770      	bx	lr
 23fa232:	bf00      	nop
 23fa234:	42b17217 	.word	0x42b17217
 23fa238:	42cff1b5 	.word	0x42cff1b5
 23fa23c:	00000000 	.word	0x00000000
 23fa240:	3eb17218 	.word	0x3eb17218
 23fa244:	3f851591 	.word	0x3f851591
 23fa248:	023ffd70 	.word	0x023ffd70
 23fa24c:	023ffd78 	.word	0x023ffd78
 23fa250:	3331bb4c 	.word	0x3331bb4c
 23fa254:	b5ddea0e 	.word	0xb5ddea0e
 23fa258:	388ab355 	.word	0x388ab355
 23fa25c:	bb360b61 	.word	0xbb360b61
 23fa260:	3e2aaaab 	.word	0x3e2aaaab
 23fa264:	7149f2ca 	.word	0x7149f2ca
 23fa268:	0d800000 	.word	0x0d800000
 23fa26c:	023ffd68 	.word	0x023ffd68
 23fa270:	3fb8aa3b 	.word	0x3fb8aa3b
 23fa274:	3f317180 	.word	0x3f317180
 23fa278:	3717f7d1 	.word	0x3717f7d1

023fa27c <__ieee754_sqrtf>:
 23fa27c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 23fa280:	4770      	bx	lr
 23fa282:	bf00      	nop
 23fa284:	0000      	movs	r0, r0
	...

023fa288 <__kernel_cos>:
 23fa288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa28c:	ec57 6b10 	vmov	r6, r7, d0
 23fa290:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fa294:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fa298:	ec5b ab11 	vmov	sl, fp, d1
 23fa29c:	ed2d 8b04 	vpush	{d8-d9}
 23fa2a0:	da71      	bge.n	23fa386 <__kernel_cos+0xfe>
 23fa2a2:	ee10 0a10 	vmov	r0, s0
 23fa2a6:	4639      	mov	r1, r7
 23fa2a8:	f7ef fe7e 	bl	23e9fa8 <__aeabi_d2iz>
 23fa2ac:	2800      	cmp	r0, #0
 23fa2ae:	f000 80f6 	beq.w	23fa49e <__kernel_cos+0x216>
 23fa2b2:	4632      	mov	r2, r6
 23fa2b4:	463b      	mov	r3, r7
 23fa2b6:	4630      	mov	r0, r6
 23fa2b8:	4639      	mov	r1, r7
 23fa2ba:	f7ef fbc5 	bl	23e9a48 <__aeabi_dmul>
 23fa2be:	4604      	mov	r4, r0
 23fa2c0:	460d      	mov	r5, r1
 23fa2c2:	a37b      	add	r3, pc, #492	; (adr r3, 23fa4b0 <__kernel_cos+0x228>)
 23fa2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa2c8:	f7ef fbbe 	bl	23e9a48 <__aeabi_dmul>
 23fa2cc:	a37a      	add	r3, pc, #488	; (adr r3, 23fa4b8 <__kernel_cos+0x230>)
 23fa2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa2d2:	f7ef fa03 	bl	23e96dc <__adddf3>
 23fa2d6:	4622      	mov	r2, r4
 23fa2d8:	462b      	mov	r3, r5
 23fa2da:	f7ef fbb5 	bl	23e9a48 <__aeabi_dmul>
 23fa2de:	a378      	add	r3, pc, #480	; (adr r3, 23fa4c0 <__kernel_cos+0x238>)
 23fa2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa2e4:	f7ef f9f8 	bl	23e96d8 <__aeabi_dsub>
 23fa2e8:	4622      	mov	r2, r4
 23fa2ea:	462b      	mov	r3, r5
 23fa2ec:	f7ef fbac 	bl	23e9a48 <__aeabi_dmul>
 23fa2f0:	a375      	add	r3, pc, #468	; (adr r3, 23fa4c8 <__kernel_cos+0x240>)
 23fa2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa2f6:	f7ef f9f1 	bl	23e96dc <__adddf3>
 23fa2fa:	4622      	mov	r2, r4
 23fa2fc:	462b      	mov	r3, r5
 23fa2fe:	f7ef fba3 	bl	23e9a48 <__aeabi_dmul>
 23fa302:	a373      	add	r3, pc, #460	; (adr r3, 23fa4d0 <__kernel_cos+0x248>)
 23fa304:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa308:	f7ef f9e6 	bl	23e96d8 <__aeabi_dsub>
 23fa30c:	4622      	mov	r2, r4
 23fa30e:	462b      	mov	r3, r5
 23fa310:	f7ef fb9a 	bl	23e9a48 <__aeabi_dmul>
 23fa314:	a370      	add	r3, pc, #448	; (adr r3, 23fa4d8 <__kernel_cos+0x250>)
 23fa316:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa31a:	f7ef f9df 	bl	23e96dc <__adddf3>
 23fa31e:	4622      	mov	r2, r4
 23fa320:	462b      	mov	r3, r5
 23fa322:	f7ef fb91 	bl	23e9a48 <__aeabi_dmul>
 23fa326:	ec41 0b18 	vmov	d8, r0, r1
 23fa32a:	2200      	movs	r2, #0
 23fa32c:	4b70      	ldr	r3, [pc, #448]	; (23fa4f0 <__kernel_cos+0x268>)
 23fa32e:	4620      	mov	r0, r4
 23fa330:	4629      	mov	r1, r5
 23fa332:	f7ef fb89 	bl	23e9a48 <__aeabi_dmul>
 23fa336:	4680      	mov	r8, r0
 23fa338:	4689      	mov	r9, r1
 23fa33a:	4620      	mov	r0, r4
 23fa33c:	4629      	mov	r1, r5
 23fa33e:	ec53 2b18 	vmov	r2, r3, d8
 23fa342:	f7ef fb81 	bl	23e9a48 <__aeabi_dmul>
 23fa346:	4604      	mov	r4, r0
 23fa348:	460d      	mov	r5, r1
 23fa34a:	4652      	mov	r2, sl
 23fa34c:	465b      	mov	r3, fp
 23fa34e:	4630      	mov	r0, r6
 23fa350:	4639      	mov	r1, r7
 23fa352:	f7ef fb79 	bl	23e9a48 <__aeabi_dmul>
 23fa356:	4602      	mov	r2, r0
 23fa358:	460b      	mov	r3, r1
 23fa35a:	4620      	mov	r0, r4
 23fa35c:	4629      	mov	r1, r5
 23fa35e:	f7ef f9bb 	bl	23e96d8 <__aeabi_dsub>
 23fa362:	4602      	mov	r2, r0
 23fa364:	460b      	mov	r3, r1
 23fa366:	4640      	mov	r0, r8
 23fa368:	4649      	mov	r1, r9
 23fa36a:	f7ef f9b5 	bl	23e96d8 <__aeabi_dsub>
 23fa36e:	4602      	mov	r2, r0
 23fa370:	460b      	mov	r3, r1
 23fa372:	2000      	movs	r0, #0
 23fa374:	495f      	ldr	r1, [pc, #380]	; (23fa4f4 <__kernel_cos+0x26c>)
 23fa376:	f7ef f9af 	bl	23e96d8 <__aeabi_dsub>
 23fa37a:	ecbd 8b04 	vpop	{d8-d9}
 23fa37e:	ec41 0b10 	vmov	d0, r0, r1
 23fa382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa386:	ee10 2a10 	vmov	r2, s0
 23fa38a:	ee10 0a10 	vmov	r0, s0
 23fa38e:	463b      	mov	r3, r7
 23fa390:	4639      	mov	r1, r7
 23fa392:	f7ef fb59 	bl	23e9a48 <__aeabi_dmul>
 23fa396:	4604      	mov	r4, r0
 23fa398:	460d      	mov	r5, r1
 23fa39a:	a345      	add	r3, pc, #276	; (adr r3, 23fa4b0 <__kernel_cos+0x228>)
 23fa39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3a0:	f7ef fb52 	bl	23e9a48 <__aeabi_dmul>
 23fa3a4:	a344      	add	r3, pc, #272	; (adr r3, 23fa4b8 <__kernel_cos+0x230>)
 23fa3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3aa:	f7ef f997 	bl	23e96dc <__adddf3>
 23fa3ae:	4622      	mov	r2, r4
 23fa3b0:	462b      	mov	r3, r5
 23fa3b2:	f7ef fb49 	bl	23e9a48 <__aeabi_dmul>
 23fa3b6:	a342      	add	r3, pc, #264	; (adr r3, 23fa4c0 <__kernel_cos+0x238>)
 23fa3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3bc:	f7ef f98c 	bl	23e96d8 <__aeabi_dsub>
 23fa3c0:	4622      	mov	r2, r4
 23fa3c2:	462b      	mov	r3, r5
 23fa3c4:	f7ef fb40 	bl	23e9a48 <__aeabi_dmul>
 23fa3c8:	a33f      	add	r3, pc, #252	; (adr r3, 23fa4c8 <__kernel_cos+0x240>)
 23fa3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3ce:	f7ef f985 	bl	23e96dc <__adddf3>
 23fa3d2:	4622      	mov	r2, r4
 23fa3d4:	462b      	mov	r3, r5
 23fa3d6:	f7ef fb37 	bl	23e9a48 <__aeabi_dmul>
 23fa3da:	a33d      	add	r3, pc, #244	; (adr r3, 23fa4d0 <__kernel_cos+0x248>)
 23fa3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3e0:	f7ef f97a 	bl	23e96d8 <__aeabi_dsub>
 23fa3e4:	4622      	mov	r2, r4
 23fa3e6:	462b      	mov	r3, r5
 23fa3e8:	f7ef fb2e 	bl	23e9a48 <__aeabi_dmul>
 23fa3ec:	a33a      	add	r3, pc, #232	; (adr r3, 23fa4d8 <__kernel_cos+0x250>)
 23fa3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa3f2:	f7ef f973 	bl	23e96dc <__adddf3>
 23fa3f6:	462b      	mov	r3, r5
 23fa3f8:	4622      	mov	r2, r4
 23fa3fa:	f7ef fb25 	bl	23e9a48 <__aeabi_dmul>
 23fa3fe:	4b3e      	ldr	r3, [pc, #248]	; (23fa4f8 <__kernel_cos+0x270>)
 23fa400:	4599      	cmp	r9, r3
 23fa402:	ec41 0b18 	vmov	d8, r0, r1
 23fa406:	dd90      	ble.n	23fa32a <__kernel_cos+0xa2>
 23fa408:	4b3c      	ldr	r3, [pc, #240]	; (23fa4fc <__kernel_cos+0x274>)
 23fa40a:	4599      	cmp	r9, r3
 23fa40c:	dc3c      	bgt.n	23fa488 <__kernel_cos+0x200>
 23fa40e:	2200      	movs	r2, #0
 23fa410:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fa414:	2000      	movs	r0, #0
 23fa416:	4937      	ldr	r1, [pc, #220]	; (23fa4f4 <__kernel_cos+0x26c>)
 23fa418:	4690      	mov	r8, r2
 23fa41a:	4699      	mov	r9, r3
 23fa41c:	f7ef f95c 	bl	23e96d8 <__aeabi_dsub>
 23fa420:	ec41 0b19 	vmov	d9, r0, r1
 23fa424:	2200      	movs	r2, #0
 23fa426:	4b32      	ldr	r3, [pc, #200]	; (23fa4f0 <__kernel_cos+0x268>)
 23fa428:	4620      	mov	r0, r4
 23fa42a:	4629      	mov	r1, r5
 23fa42c:	f7ef fb0c 	bl	23e9a48 <__aeabi_dmul>
 23fa430:	4642      	mov	r2, r8
 23fa432:	464b      	mov	r3, r9
 23fa434:	f7ef f950 	bl	23e96d8 <__aeabi_dsub>
 23fa438:	4680      	mov	r8, r0
 23fa43a:	4689      	mov	r9, r1
 23fa43c:	4620      	mov	r0, r4
 23fa43e:	4629      	mov	r1, r5
 23fa440:	ec53 2b18 	vmov	r2, r3, d8
 23fa444:	f7ef fb00 	bl	23e9a48 <__aeabi_dmul>
 23fa448:	4604      	mov	r4, r0
 23fa44a:	460d      	mov	r5, r1
 23fa44c:	4652      	mov	r2, sl
 23fa44e:	465b      	mov	r3, fp
 23fa450:	4630      	mov	r0, r6
 23fa452:	4639      	mov	r1, r7
 23fa454:	f7ef faf8 	bl	23e9a48 <__aeabi_dmul>
 23fa458:	4602      	mov	r2, r0
 23fa45a:	460b      	mov	r3, r1
 23fa45c:	4620      	mov	r0, r4
 23fa45e:	4629      	mov	r1, r5
 23fa460:	f7ef f93a 	bl	23e96d8 <__aeabi_dsub>
 23fa464:	4602      	mov	r2, r0
 23fa466:	460b      	mov	r3, r1
 23fa468:	4640      	mov	r0, r8
 23fa46a:	4649      	mov	r1, r9
 23fa46c:	f7ef f934 	bl	23e96d8 <__aeabi_dsub>
 23fa470:	4602      	mov	r2, r0
 23fa472:	460b      	mov	r3, r1
 23fa474:	ec51 0b19 	vmov	r0, r1, d9
 23fa478:	f7ef f92e 	bl	23e96d8 <__aeabi_dsub>
 23fa47c:	ecbd 8b04 	vpop	{d8-d9}
 23fa480:	ec41 0b10 	vmov	d0, r0, r1
 23fa484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa488:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fa4e0 <__kernel_cos+0x258>
 23fa48c:	f04f 0800 	mov.w	r8, #0
 23fa490:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fa500 <__kernel_cos+0x278>
 23fa494:	eeb0 9a47 	vmov.f32	s18, s14
 23fa498:	eef0 9a67 	vmov.f32	s19, s15
 23fa49c:	e7c2      	b.n	23fa424 <__kernel_cos+0x19c>
 23fa49e:	ecbd 8b04 	vpop	{d8-d9}
 23fa4a2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fa4e8 <__kernel_cos+0x260>
 23fa4a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa4aa:	bf00      	nop
 23fa4ac:	f3af 8000 	nop.w
 23fa4b0:	be8838d4 	.word	0xbe8838d4
 23fa4b4:	bda8fae9 	.word	0xbda8fae9
 23fa4b8:	bdb4b1c4 	.word	0xbdb4b1c4
 23fa4bc:	3e21ee9e 	.word	0x3e21ee9e
 23fa4c0:	809c52ad 	.word	0x809c52ad
 23fa4c4:	3e927e4f 	.word	0x3e927e4f
 23fa4c8:	19cb1590 	.word	0x19cb1590
 23fa4cc:	3efa01a0 	.word	0x3efa01a0
 23fa4d0:	16c15177 	.word	0x16c15177
 23fa4d4:	3f56c16c 	.word	0x3f56c16c
 23fa4d8:	5555554c 	.word	0x5555554c
 23fa4dc:	3fa55555 	.word	0x3fa55555
 23fa4e0:	00000000 	.word	0x00000000
 23fa4e4:	3fe70000 	.word	0x3fe70000
 23fa4e8:	00000000 	.word	0x00000000
 23fa4ec:	3ff00000 	.word	0x3ff00000
 23fa4f0:	3fe00000 	.word	0x3fe00000
 23fa4f4:	3ff00000 	.word	0x3ff00000
 23fa4f8:	3fd33332 	.word	0x3fd33332
 23fa4fc:	3fe90000 	.word	0x3fe90000
 23fa500:	3fd20000 	.word	0x3fd20000
 23fa504:	00000000 	.word	0x00000000

023fa508 <__kernel_rem_pio2>:
 23fa508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa50c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fa510:	461c      	mov	r4, r3
 23fa512:	f112 0f14 	cmn.w	r2, #20
 23fa516:	9308      	str	r3, [sp, #32]
 23fa518:	910b      	str	r1, [sp, #44]	; 0x2c
 23fa51a:	4bb6      	ldr	r3, [pc, #728]	; (23fa7f4 <__kernel_rem_pio2+0x2ec>)
 23fa51c:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fa51e:	9004      	str	r0, [sp, #16]
 23fa520:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fa524:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fa528:	9105      	str	r1, [sp, #20]
 23fa52a:	9303      	str	r3, [sp, #12]
 23fa52c:	f2c0 833a 	blt.w	23faba4 <__kernel_rem_pio2+0x69c>
 23fa530:	1ed3      	subs	r3, r2, #3
 23fa532:	49b1      	ldr	r1, [pc, #708]	; (23fa7f8 <__kernel_rem_pio2+0x2f0>)
 23fa534:	fb81 0103 	smull	r0, r1, r1, r3
 23fa538:	17db      	asrs	r3, r3, #31
 23fa53a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23fa53e:	9307      	str	r3, [sp, #28]
 23fa540:	3301      	adds	r3, #1
 23fa542:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23fa546:	00db      	lsls	r3, r3, #3
 23fa548:	18d3      	adds	r3, r2, r3
 23fa54a:	9a07      	ldr	r2, [sp, #28]
 23fa54c:	9306      	str	r3, [sp, #24]
 23fa54e:	9b03      	ldr	r3, [sp, #12]
 23fa550:	1ad4      	subs	r4, r2, r3
 23fa552:	9a05      	ldr	r2, [sp, #20]
 23fa554:	18d6      	adds	r6, r2, r3
 23fa556:	d414      	bmi.n	23fa582 <__kernel_rem_pio2+0x7a>
 23fa558:	3601      	adds	r6, #1
 23fa55a:	ad20      	add	r5, sp, #128	; 0x80
 23fa55c:	f04f 0800 	mov.w	r8, #0
 23fa560:	f04f 0900 	mov.w	r9, #0
 23fa564:	4426      	add	r6, r4
 23fa566:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23fa568:	2c00      	cmp	r4, #0
 23fa56a:	4640      	mov	r0, r8
 23fa56c:	4649      	mov	r1, r9
 23fa56e:	db03      	blt.n	23fa578 <__kernel_rem_pio2+0x70>
 23fa570:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23fa574:	f7ef f9fe 	bl	23e9974 <__aeabi_i2d>
 23fa578:	3401      	adds	r4, #1
 23fa57a:	42b4      	cmp	r4, r6
 23fa57c:	e8e5 0102 	strd	r0, r1, [r5], #8
 23fa580:	d1f2      	bne.n	23fa568 <__kernel_rem_pio2+0x60>
 23fa582:	9b05      	ldr	r3, [sp, #20]
 23fa584:	2b00      	cmp	r3, #0
 23fa586:	f2c0 83c7 	blt.w	23fad18 <__kernel_rem_pio2+0x810>
 23fa58a:	9b08      	ldr	r3, [sp, #32]
 23fa58c:	a920      	add	r1, sp, #128	; 0x80
 23fa58e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23fa592:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23fa596:	00da      	lsls	r2, r3, #3
 23fa598:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23fa59c:	9202      	str	r2, [sp, #8]
 23fa59e:	9a05      	ldr	r2, [sp, #20]
 23fa5a0:	441a      	add	r2, r3
 23fa5a2:	9201      	str	r2, [sp, #4]
 23fa5a4:	9a04      	ldr	r2, [sp, #16]
 23fa5a6:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23fa5aa:	9b03      	ldr	r3, [sp, #12]
 23fa5ac:	2b00      	cmp	r3, #0
 23fa5ae:	f2c0 81a6 	blt.w	23fa8fe <__kernel_rem_pio2+0x3f6>
 23fa5b2:	4657      	mov	r7, sl
 23fa5b4:	9e04      	ldr	r6, [sp, #16]
 23fa5b6:	2400      	movs	r4, #0
 23fa5b8:	2500      	movs	r5, #0
 23fa5ba:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fa5be:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fa5c2:	f7ef fa41 	bl	23e9a48 <__aeabi_dmul>
 23fa5c6:	4602      	mov	r2, r0
 23fa5c8:	460b      	mov	r3, r1
 23fa5ca:	4620      	mov	r0, r4
 23fa5cc:	4629      	mov	r1, r5
 23fa5ce:	f7ef f885 	bl	23e96dc <__adddf3>
 23fa5d2:	4546      	cmp	r6, r8
 23fa5d4:	4604      	mov	r4, r0
 23fa5d6:	460d      	mov	r5, r1
 23fa5d8:	d1ef      	bne.n	23fa5ba <__kernel_rem_pio2+0xb2>
 23fa5da:	f109 0901 	add.w	r9, r9, #1
 23fa5de:	9b01      	ldr	r3, [sp, #4]
 23fa5e0:	f10a 0a08 	add.w	sl, sl, #8
 23fa5e4:	4599      	cmp	r9, r3
 23fa5e6:	e8eb 4502 	strd	r4, r5, [fp], #8
 23fa5ea:	d1de      	bne.n	23fa5aa <__kernel_rem_pio2+0xa2>
 23fa5ec:	9a04      	ldr	r2, [sp, #16]
 23fa5ee:	a90b      	add	r1, sp, #44	; 0x2c
 23fa5f0:	9b02      	ldr	r3, [sp, #8]
 23fa5f2:	4413      	add	r3, r2
 23fa5f4:	469b      	mov	fp, r3
 23fa5f6:	9b05      	ldr	r3, [sp, #20]
 23fa5f8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23fa5fc:	a90c      	add	r1, sp, #48	; 0x30
 23fa5fe:	920a      	str	r2, [sp, #40]	; 0x28
 23fa600:	461a      	mov	r2, r3
 23fa602:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fa606:	9201      	str	r2, [sp, #4]
 23fa608:	3b08      	subs	r3, #8
 23fa60a:	9309      	str	r3, [sp, #36]	; 0x24
 23fa60c:	9a01      	ldr	r2, [sp, #4]
 23fa60e:	a998      	add	r1, sp, #608	; 0x260
 23fa610:	2a00      	cmp	r2, #0
 23fa612:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fa616:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fa61a:	dd29      	ble.n	23fa670 <__kernel_rem_pio2+0x168>
 23fa61c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fa620:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fa624:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fa628:	2200      	movs	r2, #0
 23fa62a:	4b74      	ldr	r3, [pc, #464]	; (23fa7fc <__kernel_rem_pio2+0x2f4>)
 23fa62c:	4620      	mov	r0, r4
 23fa62e:	4629      	mov	r1, r5
 23fa630:	f7ef fa0a 	bl	23e9a48 <__aeabi_dmul>
 23fa634:	f7ef fcb8 	bl	23e9fa8 <__aeabi_d2iz>
 23fa638:	f7ef f99c 	bl	23e9974 <__aeabi_i2d>
 23fa63c:	2200      	movs	r2, #0
 23fa63e:	4b70      	ldr	r3, [pc, #448]	; (23fa800 <__kernel_rem_pio2+0x2f8>)
 23fa640:	4606      	mov	r6, r0
 23fa642:	460f      	mov	r7, r1
 23fa644:	f7ef fa00 	bl	23e9a48 <__aeabi_dmul>
 23fa648:	4602      	mov	r2, r0
 23fa64a:	460b      	mov	r3, r1
 23fa64c:	4620      	mov	r0, r4
 23fa64e:	4629      	mov	r1, r5
 23fa650:	f7ef f842 	bl	23e96d8 <__aeabi_dsub>
 23fa654:	f7ef fca8 	bl	23e9fa8 <__aeabi_d2iz>
 23fa658:	4639      	mov	r1, r7
 23fa65a:	f849 0b04 	str.w	r0, [r9], #4
 23fa65e:	4630      	mov	r0, r6
 23fa660:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fa664:	f7ef f83a 	bl	23e96dc <__adddf3>
 23fa668:	4604      	mov	r4, r0
 23fa66a:	45d0      	cmp	r8, sl
 23fa66c:	460d      	mov	r5, r1
 23fa66e:	d1db      	bne.n	23fa628 <__kernel_rem_pio2+0x120>
 23fa670:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fa674:	ec45 4b10 	vmov	d0, r4, r5
 23fa678:	4648      	mov	r0, r9
 23fa67a:	f000 fc31 	bl	23faee0 <scalbn>
 23fa67e:	2200      	movs	r2, #0
 23fa680:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fa684:	ee10 0a10 	vmov	r0, s0
 23fa688:	ec55 4b10 	vmov	r4, r5, d0
 23fa68c:	4629      	mov	r1, r5
 23fa68e:	f7ef f9db 	bl	23e9a48 <__aeabi_dmul>
 23fa692:	ec41 0b10 	vmov	d0, r0, r1
 23fa696:	f7fe ffe3 	bl	23f9660 <floor>
 23fa69a:	2200      	movs	r2, #0
 23fa69c:	4b59      	ldr	r3, [pc, #356]	; (23fa804 <__kernel_rem_pio2+0x2fc>)
 23fa69e:	ec51 0b10 	vmov	r0, r1, d0
 23fa6a2:	f7ef f9d1 	bl	23e9a48 <__aeabi_dmul>
 23fa6a6:	4602      	mov	r2, r0
 23fa6a8:	460b      	mov	r3, r1
 23fa6aa:	4620      	mov	r0, r4
 23fa6ac:	4629      	mov	r1, r5
 23fa6ae:	f7ef f813 	bl	23e96d8 <__aeabi_dsub>
 23fa6b2:	460d      	mov	r5, r1
 23fa6b4:	4604      	mov	r4, r0
 23fa6b6:	f7ef fc77 	bl	23e9fa8 <__aeabi_d2iz>
 23fa6ba:	4680      	mov	r8, r0
 23fa6bc:	f7ef f95a 	bl	23e9974 <__aeabi_i2d>
 23fa6c0:	460b      	mov	r3, r1
 23fa6c2:	4602      	mov	r2, r0
 23fa6c4:	4629      	mov	r1, r5
 23fa6c6:	4620      	mov	r0, r4
 23fa6c8:	f7ef f806 	bl	23e96d8 <__aeabi_dsub>
 23fa6cc:	464b      	mov	r3, r9
 23fa6ce:	4606      	mov	r6, r0
 23fa6d0:	460f      	mov	r7, r1
 23fa6d2:	2b00      	cmp	r3, #0
 23fa6d4:	f340 8098 	ble.w	23fa808 <__kernel_rem_pio2+0x300>
 23fa6d8:	9a01      	ldr	r2, [sp, #4]
 23fa6da:	a90c      	add	r1, sp, #48	; 0x30
 23fa6dc:	f1c9 0318 	rsb	r3, r9, #24
 23fa6e0:	f1c9 0517 	rsb	r5, r9, #23
 23fa6e4:	3a01      	subs	r2, #1
 23fa6e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fa6ea:	fa41 f003 	asr.w	r0, r1, r3
 23fa6ee:	fa00 f303 	lsl.w	r3, r0, r3
 23fa6f2:	4480      	add	r8, r0
 23fa6f4:	1acb      	subs	r3, r1, r3
 23fa6f6:	a90c      	add	r1, sp, #48	; 0x30
 23fa6f8:	fa43 f505 	asr.w	r5, r3, r5
 23fa6fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fa700:	2d00      	cmp	r5, #0
 23fa702:	f300 808b 	bgt.w	23fa81c <__kernel_rem_pio2+0x314>
 23fa706:	2200      	movs	r2, #0
 23fa708:	2300      	movs	r3, #0
 23fa70a:	4630      	mov	r0, r6
 23fa70c:	4639      	mov	r1, r7
 23fa70e:	f7ef fc03 	bl	23e9f18 <__aeabi_dcmpeq>
 23fa712:	2800      	cmp	r0, #0
 23fa714:	f000 824d 	beq.w	23fabb2 <__kernel_rem_pio2+0x6aa>
 23fa718:	9a01      	ldr	r2, [sp, #4]
 23fa71a:	9b05      	ldr	r3, [sp, #20]
 23fa71c:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fa720:	4553      	cmp	r3, sl
 23fa722:	dc10      	bgt.n	23fa746 <__kernel_rem_pio2+0x23e>
 23fa724:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fa728:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fa72a:	4413      	add	r3, r2
 23fa72c:	aa0c      	add	r2, sp, #48	; 0x30
 23fa72e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fa732:	2200      	movs	r2, #0
 23fa734:	f853 1904 	ldr.w	r1, [r3], #-4
 23fa738:	4283      	cmp	r3, r0
 23fa73a:	ea42 0201 	orr.w	r2, r2, r1
 23fa73e:	d1f9      	bne.n	23fa734 <__kernel_rem_pio2+0x22c>
 23fa740:	2a00      	cmp	r2, #0
 23fa742:	f040 80df 	bne.w	23fa904 <__kernel_rem_pio2+0x3fc>
 23fa746:	9b05      	ldr	r3, [sp, #20]
 23fa748:	aa0c      	add	r2, sp, #48	; 0x30
 23fa74a:	3b01      	subs	r3, #1
 23fa74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fa750:	2b00      	cmp	r3, #0
 23fa752:	f040 80cf 	bne.w	23fa8f4 <__kernel_rem_pio2+0x3ec>
 23fa756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fa758:	2301      	movs	r3, #1
 23fa75a:	f852 1904 	ldr.w	r1, [r2], #-4
 23fa75e:	3301      	adds	r3, #1
 23fa760:	2900      	cmp	r1, #0
 23fa762:	d0fa      	beq.n	23fa75a <__kernel_rem_pio2+0x252>
 23fa764:	9a01      	ldr	r2, [sp, #4]
 23fa766:	18d3      	adds	r3, r2, r3
 23fa768:	9302      	str	r3, [sp, #8]
 23fa76a:	1c53      	adds	r3, r2, #1
 23fa76c:	4699      	mov	r9, r3
 23fa76e:	9a01      	ldr	r2, [sp, #4]
 23fa770:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fa774:	9908      	ldr	r1, [sp, #32]
 23fa776:	440a      	add	r2, r1
 23fa778:	4690      	mov	r8, r2
 23fa77a:	9a07      	ldr	r2, [sp, #28]
 23fa77c:	441a      	add	r2, r3
 23fa77e:	4492      	add	sl, r2
 23fa780:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fa782:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fa786:	aa20      	add	r2, sp, #128	; 0x80
 23fa788:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fa78c:	aa70      	add	r2, sp, #448	; 0x1c0
 23fa78e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fa792:	9301      	str	r3, [sp, #4]
 23fa794:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fa798:	4647      	mov	r7, r8
 23fa79a:	f7ef f8eb 	bl	23e9974 <__aeabi_i2d>
 23fa79e:	460b      	mov	r3, r1
 23fa7a0:	9903      	ldr	r1, [sp, #12]
 23fa7a2:	4602      	mov	r2, r0
 23fa7a4:	f108 0808 	add.w	r8, r8, #8
 23fa7a8:	2900      	cmp	r1, #0
 23fa7aa:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fa7ae:	db1e      	blt.n	23fa7ee <__kernel_rem_pio2+0x2e6>
 23fa7b0:	9e04      	ldr	r6, [sp, #16]
 23fa7b2:	2400      	movs	r4, #0
 23fa7b4:	2500      	movs	r5, #0
 23fa7b6:	e001      	b.n	23fa7bc <__kernel_rem_pio2+0x2b4>
 23fa7b8:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fa7bc:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fa7c0:	f7ef f942 	bl	23e9a48 <__aeabi_dmul>
 23fa7c4:	4602      	mov	r2, r0
 23fa7c6:	460b      	mov	r3, r1
 23fa7c8:	4620      	mov	r0, r4
 23fa7ca:	4629      	mov	r1, r5
 23fa7cc:	f7ee ff86 	bl	23e96dc <__adddf3>
 23fa7d0:	455e      	cmp	r6, fp
 23fa7d2:	4604      	mov	r4, r0
 23fa7d4:	460d      	mov	r5, r1
 23fa7d6:	d1ef      	bne.n	23fa7b8 <__kernel_rem_pio2+0x2b0>
 23fa7d8:	9b01      	ldr	r3, [sp, #4]
 23fa7da:	f109 0901 	add.w	r9, r9, #1
 23fa7de:	e8e3 4502 	strd	r4, r5, [r3], #8
 23fa7e2:	9301      	str	r3, [sp, #4]
 23fa7e4:	9b02      	ldr	r3, [sp, #8]
 23fa7e6:	4599      	cmp	r9, r3
 23fa7e8:	ddd4      	ble.n	23fa794 <__kernel_rem_pio2+0x28c>
 23fa7ea:	9301      	str	r3, [sp, #4]
 23fa7ec:	e70e      	b.n	23fa60c <__kernel_rem_pio2+0x104>
 23fa7ee:	2400      	movs	r4, #0
 23fa7f0:	2500      	movs	r5, #0
 23fa7f2:	e7f1      	b.n	23fa7d8 <__kernel_rem_pio2+0x2d0>
 23fa7f4:	023ffdc0 	.word	0x023ffdc0
 23fa7f8:	2aaaaaab 	.word	0x2aaaaaab
 23fa7fc:	3e700000 	.word	0x3e700000
 23fa800:	41700000 	.word	0x41700000
 23fa804:	40200000 	.word	0x40200000
 23fa808:	d16b      	bne.n	23fa8e2 <__kernel_rem_pio2+0x3da>
 23fa80a:	9b01      	ldr	r3, [sp, #4]
 23fa80c:	aa0c      	add	r2, sp, #48	; 0x30
 23fa80e:	3b01      	subs	r3, #1
 23fa810:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fa814:	15ed      	asrs	r5, r5, #23
 23fa816:	2d00      	cmp	r5, #0
 23fa818:	f77f af75 	ble.w	23fa706 <__kernel_rem_pio2+0x1fe>
 23fa81c:	9b01      	ldr	r3, [sp, #4]
 23fa81e:	f108 0801 	add.w	r8, r8, #1
 23fa822:	2b00      	cmp	r3, #0
 23fa824:	f340 81c3 	ble.w	23fabae <__kernel_rem_pio2+0x6a6>
 23fa828:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fa82a:	2c00      	cmp	r4, #0
 23fa82c:	d151      	bne.n	23fa8d2 <__kernel_rem_pio2+0x3ca>
 23fa82e:	9b01      	ldr	r3, [sp, #4]
 23fa830:	2b01      	cmp	r3, #1
 23fa832:	d020      	beq.n	23fa876 <__kernel_rem_pio2+0x36e>
 23fa834:	ab0c      	add	r3, sp, #48	; 0x30
 23fa836:	2201      	movs	r2, #1
 23fa838:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fa83c:	2c00      	cmp	r4, #0
 23fa83e:	d04b      	beq.n	23fa8d8 <__kernel_rem_pio2+0x3d0>
 23fa840:	1c53      	adds	r3, r2, #1
 23fa842:	a90c      	add	r1, sp, #48	; 0x30
 23fa844:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fa848:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fa84c:	9901      	ldr	r1, [sp, #4]
 23fa84e:	4299      	cmp	r1, r3
 23fa850:	dd10      	ble.n	23fa874 <__kernel_rem_pio2+0x36c>
 23fa852:	a80c      	add	r0, sp, #48	; 0x30
 23fa854:	aa0c      	add	r2, sp, #48	; 0x30
 23fa856:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fa85a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fa85e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fa862:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fa866:	e000      	b.n	23fa86a <__kernel_rem_pio2+0x362>
 23fa868:	681a      	ldr	r2, [r3, #0]
 23fa86a:	1a8a      	subs	r2, r1, r2
 23fa86c:	f843 2b04 	str.w	r2, [r3], #4
 23fa870:	4283      	cmp	r3, r0
 23fa872:	d1f9      	bne.n	23fa868 <__kernel_rem_pio2+0x360>
 23fa874:	2401      	movs	r4, #1
 23fa876:	9b06      	ldr	r3, [sp, #24]
 23fa878:	2b00      	cmp	r3, #0
 23fa87a:	dd0e      	ble.n	23fa89a <__kernel_rem_pio2+0x392>
 23fa87c:	2b01      	cmp	r3, #1
 23fa87e:	f000 816b 	beq.w	23fab58 <__kernel_rem_pio2+0x650>
 23fa882:	2b02      	cmp	r3, #2
 23fa884:	d109      	bne.n	23fa89a <__kernel_rem_pio2+0x392>
 23fa886:	9b01      	ldr	r3, [sp, #4]
 23fa888:	a90c      	add	r1, sp, #48	; 0x30
 23fa88a:	1e5a      	subs	r2, r3, #1
 23fa88c:	ab0c      	add	r3, sp, #48	; 0x30
 23fa88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fa892:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fa896:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fa89a:	2d02      	cmp	r5, #2
 23fa89c:	f47f af33 	bne.w	23fa706 <__kernel_rem_pio2+0x1fe>
 23fa8a0:	4632      	mov	r2, r6
 23fa8a2:	463b      	mov	r3, r7
 23fa8a4:	2000      	movs	r0, #0
 23fa8a6:	49b6      	ldr	r1, [pc, #728]	; (23fab80 <__kernel_rem_pio2+0x678>)
 23fa8a8:	f7ee ff16 	bl	23e96d8 <__aeabi_dsub>
 23fa8ac:	4606      	mov	r6, r0
 23fa8ae:	460f      	mov	r7, r1
 23fa8b0:	2c00      	cmp	r4, #0
 23fa8b2:	f43f af28 	beq.w	23fa706 <__kernel_rem_pio2+0x1fe>
 23fa8b6:	9806      	ldr	r0, [sp, #24]
 23fa8b8:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fab70 <__kernel_rem_pio2+0x668>
 23fa8bc:	f000 fb10 	bl	23faee0 <scalbn>
 23fa8c0:	4630      	mov	r0, r6
 23fa8c2:	4639      	mov	r1, r7
 23fa8c4:	ec53 2b10 	vmov	r2, r3, d0
 23fa8c8:	f7ee ff06 	bl	23e96d8 <__aeabi_dsub>
 23fa8cc:	4606      	mov	r6, r0
 23fa8ce:	460f      	mov	r7, r1
 23fa8d0:	e719      	b.n	23fa706 <__kernel_rem_pio2+0x1fe>
 23fa8d2:	2301      	movs	r3, #1
 23fa8d4:	2200      	movs	r2, #0
 23fa8d6:	e7b4      	b.n	23fa842 <__kernel_rem_pio2+0x33a>
 23fa8d8:	3201      	adds	r2, #1
 23fa8da:	9901      	ldr	r1, [sp, #4]
 23fa8dc:	428a      	cmp	r2, r1
 23fa8de:	d1ab      	bne.n	23fa838 <__kernel_rem_pio2+0x330>
 23fa8e0:	e7c9      	b.n	23fa876 <__kernel_rem_pio2+0x36e>
 23fa8e2:	2200      	movs	r2, #0
 23fa8e4:	4ba7      	ldr	r3, [pc, #668]	; (23fab84 <__kernel_rem_pio2+0x67c>)
 23fa8e6:	f7ef fb35 	bl	23e9f54 <__aeabi_dcmpge>
 23fa8ea:	2800      	cmp	r0, #0
 23fa8ec:	f040 8152 	bne.w	23fab94 <__kernel_rem_pio2+0x68c>
 23fa8f0:	4605      	mov	r5, r0
 23fa8f2:	e708      	b.n	23fa706 <__kernel_rem_pio2+0x1fe>
 23fa8f4:	9b01      	ldr	r3, [sp, #4]
 23fa8f6:	3301      	adds	r3, #1
 23fa8f8:	4699      	mov	r9, r3
 23fa8fa:	9302      	str	r3, [sp, #8]
 23fa8fc:	e737      	b.n	23fa76e <__kernel_rem_pio2+0x266>
 23fa8fe:	2400      	movs	r4, #0
 23fa900:	2500      	movs	r5, #0
 23fa902:	e66a      	b.n	23fa5da <__kernel_rem_pio2+0xd2>
 23fa904:	9b06      	ldr	r3, [sp, #24]
 23fa906:	9503      	str	r5, [sp, #12]
 23fa908:	f1a3 0218 	sub.w	r2, r3, #24
 23fa90c:	ab0c      	add	r3, sp, #48	; 0x30
 23fa90e:	f8cd 801c 	str.w	r8, [sp, #28]
 23fa912:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fa916:	9206      	str	r2, [sp, #24]
 23fa918:	b973      	cbnz	r3, 23fa938 <__kernel_rem_pio2+0x430>
 23fa91a:	4b9b      	ldr	r3, [pc, #620]	; (23fab88 <__kernel_rem_pio2+0x680>)
 23fa91c:	9901      	ldr	r1, [sp, #4]
 23fa91e:	4419      	add	r1, r3
 23fa920:	460b      	mov	r3, r1
 23fa922:	a90c      	add	r1, sp, #48	; 0x30
 23fa924:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fa928:	f853 1904 	ldr.w	r1, [r3], #-4
 23fa92c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fa930:	3a18      	subs	r2, #24
 23fa932:	2900      	cmp	r1, #0
 23fa934:	d0f8      	beq.n	23fa928 <__kernel_rem_pio2+0x420>
 23fa936:	9206      	str	r2, [sp, #24]
 23fa938:	9806      	ldr	r0, [sp, #24]
 23fa93a:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fab70 <__kernel_rem_pio2+0x668>
 23fa93e:	f000 facf 	bl	23faee0 <scalbn>
 23fa942:	f1ba 0f00 	cmp.w	sl, #0
 23fa946:	ec55 4b10 	vmov	r4, r5, d0
 23fa94a:	f2c0 81db 	blt.w	23fad04 <__kernel_rem_pio2+0x7fc>
 23fa94e:	ab70      	add	r3, sp, #448	; 0x1c0
 23fa950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fa954:	f04f 0800 	mov.w	r8, #0
 23fa958:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fab8c <__kernel_rem_pio2+0x684>
 23fa95c:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fa960:	9204      	str	r2, [sp, #16]
 23fa962:	f10a 0301 	add.w	r3, sl, #1
 23fa966:	aa0c      	add	r2, sp, #48	; 0x30
 23fa968:	f10b 0708 	add.w	r7, fp, #8
 23fa96c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fa970:	9306      	str	r3, [sp, #24]
 23fa972:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fa976:	f7ee fffd 	bl	23e9974 <__aeabi_i2d>
 23fa97a:	4622      	mov	r2, r4
 23fa97c:	462b      	mov	r3, r5
 23fa97e:	f7ef f863 	bl	23e9a48 <__aeabi_dmul>
 23fa982:	464b      	mov	r3, r9
 23fa984:	4642      	mov	r2, r8
 23fa986:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fa98a:	4620      	mov	r0, r4
 23fa98c:	4629      	mov	r1, r5
 23fa98e:	f7ef f85b 	bl	23e9a48 <__aeabi_dmul>
 23fa992:	ab0c      	add	r3, sp, #48	; 0x30
 23fa994:	4604      	mov	r4, r0
 23fa996:	460d      	mov	r5, r1
 23fa998:	429e      	cmp	r6, r3
 23fa99a:	d1ea      	bne.n	23fa972 <__kernel_rem_pio2+0x46a>
 23fa99c:	ab48      	add	r3, sp, #288	; 0x120
 23fa99e:	f04f 0900 	mov.w	r9, #0
 23fa9a2:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fa9a6:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fa9aa:	f1ba 0f00 	cmp.w	sl, #0
 23fa9ae:	db2c      	blt.n	23faa0a <__kernel_rem_pio2+0x502>
 23fa9b0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fab90 <__kernel_rem_pio2+0x688>
 23fa9b4:	465f      	mov	r7, fp
 23fa9b6:	2600      	movs	r6, #0
 23fa9b8:	2400      	movs	r4, #0
 23fa9ba:	2500      	movs	r5, #0
 23fa9bc:	a36e      	add	r3, pc, #440	; (adr r3, 23fab78 <__kernel_rem_pio2+0x670>)
 23fa9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa9c2:	e003      	b.n	23fa9cc <__kernel_rem_pio2+0x4c4>
 23fa9c4:	45b1      	cmp	r9, r6
 23fa9c6:	db10      	blt.n	23fa9ea <__kernel_rem_pio2+0x4e2>
 23fa9c8:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fa9cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fa9d0:	3601      	adds	r6, #1
 23fa9d2:	f7ef f839 	bl	23e9a48 <__aeabi_dmul>
 23fa9d6:	4602      	mov	r2, r0
 23fa9d8:	460b      	mov	r3, r1
 23fa9da:	4620      	mov	r0, r4
 23fa9dc:	4629      	mov	r1, r5
 23fa9de:	f7ee fe7d 	bl	23e96dc <__adddf3>
 23fa9e2:	45b2      	cmp	sl, r6
 23fa9e4:	4604      	mov	r4, r0
 23fa9e6:	460d      	mov	r5, r1
 23fa9e8:	daec      	bge.n	23fa9c4 <__kernel_rem_pio2+0x4bc>
 23fa9ea:	9b01      	ldr	r3, [sp, #4]
 23fa9ec:	f1ab 0b08 	sub.w	fp, fp, #8
 23fa9f0:	9a02      	ldr	r2, [sp, #8]
 23fa9f2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23fa9f6:	454a      	cmp	r2, r9
 23fa9f8:	e9c3 4500 	strd	r4, r5, [r3]
 23fa9fc:	f109 0301 	add.w	r3, r9, #1
 23faa00:	d006      	beq.n	23faa10 <__kernel_rem_pio2+0x508>
 23faa02:	f1ba 0f00 	cmp.w	sl, #0
 23faa06:	4699      	mov	r9, r3
 23faa08:	dad2      	bge.n	23fa9b0 <__kernel_rem_pio2+0x4a8>
 23faa0a:	2400      	movs	r4, #0
 23faa0c:	2500      	movs	r5, #0
 23faa0e:	e7ec      	b.n	23fa9ea <__kernel_rem_pio2+0x4e2>
 23faa10:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23faa12:	f8dd a008 	ldr.w	sl, [sp, #8]
 23faa16:	2b02      	cmp	r3, #2
 23faa18:	dc1e      	bgt.n	23faa58 <__kernel_rem_pio2+0x550>
 23faa1a:	2b00      	cmp	r3, #0
 23faa1c:	f300 80ff 	bgt.w	23fac1e <__kernel_rem_pio2+0x716>
 23faa20:	d113      	bne.n	23faa4a <__kernel_rem_pio2+0x542>
 23faa22:	9c04      	ldr	r4, [sp, #16]
 23faa24:	2000      	movs	r0, #0
 23faa26:	9d01      	ldr	r5, [sp, #4]
 23faa28:	2100      	movs	r1, #0
 23faa2a:	3408      	adds	r4, #8
 23faa2c:	442c      	add	r4, r5
 23faa2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23faa32:	f7ee fe53 	bl	23e96dc <__adddf3>
 23faa36:	42a5      	cmp	r5, r4
 23faa38:	d1f9      	bne.n	23faa2e <__kernel_rem_pio2+0x526>
 23faa3a:	9b03      	ldr	r3, [sp, #12]
 23faa3c:	b113      	cbz	r3, 23faa44 <__kernel_rem_pio2+0x53c>
 23faa3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23faa42:	4619      	mov	r1, r3
 23faa44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23faa46:	e9c3 0100 	strd	r0, r1, [r3]
 23faa4a:	9b07      	ldr	r3, [sp, #28]
 23faa4c:	f003 0007 	and.w	r0, r3, #7
 23faa50:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23faa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faa58:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23faa5a:	2b03      	cmp	r3, #3
 23faa5c:	d1f5      	bne.n	23faa4a <__kernel_rem_pio2+0x542>
 23faa5e:	f1ba 0f00 	cmp.w	sl, #0
 23faa62:	f000 816b 	beq.w	23fad3c <__kernel_rem_pio2+0x834>
 23faa66:	9a01      	ldr	r2, [sp, #4]
 23faa68:	9b04      	ldr	r3, [sp, #16]
 23faa6a:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23faa6e:	18d3      	adds	r3, r2, r3
 23faa70:	e9d3 4500 	ldrd	r4, r5, [r3]
 23faa74:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23faa78:	4620      	mov	r0, r4
 23faa7a:	4629      	mov	r1, r5
 23faa7c:	4632      	mov	r2, r6
 23faa7e:	463b      	mov	r3, r7
 23faa80:	f7ee fe2c 	bl	23e96dc <__adddf3>
 23faa84:	46a0      	mov	r8, r4
 23faa86:	46a9      	mov	r9, r5
 23faa88:	4604      	mov	r4, r0
 23faa8a:	460d      	mov	r5, r1
 23faa8c:	4630      	mov	r0, r6
 23faa8e:	4622      	mov	r2, r4
 23faa90:	4639      	mov	r1, r7
 23faa92:	462b      	mov	r3, r5
 23faa94:	f7ee fe20 	bl	23e96d8 <__aeabi_dsub>
 23faa98:	464b      	mov	r3, r9
 23faa9a:	4642      	mov	r2, r8
 23faa9c:	f7ee fe1e 	bl	23e96dc <__adddf3>
 23faaa0:	9b01      	ldr	r3, [sp, #4]
 23faaa2:	455b      	cmp	r3, fp
 23faaa4:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23faaa8:	e9cb 4500 	strd	r4, r5, [fp]
 23faaac:	d1e2      	bne.n	23faa74 <__kernel_rem_pio2+0x56c>
 23faaae:	f1ba 0f01 	cmp.w	sl, #1
 23faab2:	f340 8143 	ble.w	23fad3c <__kernel_rem_pio2+0x834>
 23faab6:	9b04      	ldr	r3, [sp, #16]
 23faab8:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23faabc:	9901      	ldr	r1, [sp, #4]
 23faabe:	461a      	mov	r2, r3
 23faac0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23faac4:	4453      	add	r3, sl
 23faac6:	440a      	add	r2, r1
 23faac8:	00db      	lsls	r3, r3, #3
 23faaca:	f103 0a08 	add.w	sl, r3, #8
 23faace:	9302      	str	r3, [sp, #8]
 23faad0:	e9d2 4500 	ldrd	r4, r5, [r2]
 23faad4:	448a      	add	sl, r1
 23faad6:	4620      	mov	r0, r4
 23faad8:	4629      	mov	r1, r5
 23faada:	46a0      	mov	r8, r4
 23faadc:	46a9      	mov	r9, r5
 23faade:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23faae2:	4632      	mov	r2, r6
 23faae4:	463b      	mov	r3, r7
 23faae6:	f7ee fdf9 	bl	23e96dc <__adddf3>
 23faaea:	4604      	mov	r4, r0
 23faaec:	460d      	mov	r5, r1
 23faaee:	4630      	mov	r0, r6
 23faaf0:	4622      	mov	r2, r4
 23faaf2:	4639      	mov	r1, r7
 23faaf4:	462b      	mov	r3, r5
 23faaf6:	f7ee fdef 	bl	23e96d8 <__aeabi_dsub>
 23faafa:	4642      	mov	r2, r8
 23faafc:	464b      	mov	r3, r9
 23faafe:	f7ee fded 	bl	23e96dc <__adddf3>
 23fab02:	45d3      	cmp	fp, sl
 23fab04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fab08:	e9ca 4500 	strd	r4, r5, [sl]
 23fab0c:	d1e3      	bne.n	23faad6 <__kernel_rem_pio2+0x5ce>
 23fab0e:	9c02      	ldr	r4, [sp, #8]
 23fab10:	2000      	movs	r0, #0
 23fab12:	9b01      	ldr	r3, [sp, #4]
 23fab14:	2100      	movs	r1, #0
 23fab16:	3410      	adds	r4, #16
 23fab18:	f103 0510 	add.w	r5, r3, #16
 23fab1c:	441c      	add	r4, r3
 23fab1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fab22:	f7ee fddb 	bl	23e96dc <__adddf3>
 23fab26:	42a5      	cmp	r5, r4
 23fab28:	d1f9      	bne.n	23fab1e <__kernel_rem_pio2+0x616>
 23fab2a:	9b03      	ldr	r3, [sp, #12]
 23fab2c:	2b00      	cmp	r3, #0
 23fab2e:	f040 80b4 	bne.w	23fac9a <__kernel_rem_pio2+0x792>
 23fab32:	9d01      	ldr	r5, [sp, #4]
 23fab34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fab36:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fab3a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fab3e:	e9c4 2300 	strd	r2, r3, [r4]
 23fab42:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fab46:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fab4a:	9b07      	ldr	r3, [sp, #28]
 23fab4c:	f003 0007 	and.w	r0, r3, #7
 23fab50:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fab58:	9b01      	ldr	r3, [sp, #4]
 23fab5a:	a90c      	add	r1, sp, #48	; 0x30
 23fab5c:	1e5a      	subs	r2, r3, #1
 23fab5e:	ab0c      	add	r3, sp, #48	; 0x30
 23fab60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fab64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fab68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fab6c:	e695      	b.n	23fa89a <__kernel_rem_pio2+0x392>
 23fab6e:	bf00      	nop
 23fab70:	00000000 	.word	0x00000000
 23fab74:	3ff00000 	.word	0x3ff00000
 23fab78:	40000000 	.word	0x40000000
 23fab7c:	3ff921fb 	.word	0x3ff921fb
 23fab80:	3ff00000 	.word	0x3ff00000
 23fab84:	3fe00000 	.word	0x3fe00000
 23fab88:	3ffffffe 	.word	0x3ffffffe
 23fab8c:	3e700000 	.word	0x3e700000
 23fab90:	023ffd88 	.word	0x023ffd88
 23fab94:	9b01      	ldr	r3, [sp, #4]
 23fab96:	f108 0801 	add.w	r8, r8, #1
 23fab9a:	2b00      	cmp	r3, #0
 23fab9c:	f340 80a8 	ble.w	23facf0 <__kernel_rem_pio2+0x7e8>
 23faba0:	2502      	movs	r5, #2
 23faba2:	e641      	b.n	23fa828 <__kernel_rem_pio2+0x320>
 23faba4:	2100      	movs	r1, #0
 23faba6:	f06f 0317 	mvn.w	r3, #23
 23fabaa:	9107      	str	r1, [sp, #28]
 23fabac:	e4cc      	b.n	23fa548 <__kernel_rem_pio2+0x40>
 23fabae:	2400      	movs	r4, #0
 23fabb0:	e661      	b.n	23fa876 <__kernel_rem_pio2+0x36e>
 23fabb2:	ec47 6b10 	vmov	d0, r6, r7
 23fabb6:	9e06      	ldr	r6, [sp, #24]
 23fabb8:	9503      	str	r5, [sp, #12]
 23fabba:	4270      	negs	r0, r6
 23fabbc:	f8cd 801c 	str.w	r8, [sp, #28]
 23fabc0:	f000 f98e 	bl	23faee0 <scalbn>
 23fabc4:	2200      	movs	r2, #0
 23fabc6:	4b5f      	ldr	r3, [pc, #380]	; (23fad44 <__kernel_rem_pio2+0x83c>)
 23fabc8:	ee10 0a10 	vmov	r0, s0
 23fabcc:	ec55 4b10 	vmov	r4, r5, d0
 23fabd0:	4629      	mov	r1, r5
 23fabd2:	f7ef f9bf 	bl	23e9f54 <__aeabi_dcmpge>
 23fabd6:	2800      	cmp	r0, #0
 23fabd8:	d055      	beq.n	23fac86 <__kernel_rem_pio2+0x77e>
 23fabda:	3618      	adds	r6, #24
 23fabdc:	2200      	movs	r2, #0
 23fabde:	4b5a      	ldr	r3, [pc, #360]	; (23fad48 <__kernel_rem_pio2+0x840>)
 23fabe0:	4620      	mov	r0, r4
 23fabe2:	4629      	mov	r1, r5
 23fabe4:	9606      	str	r6, [sp, #24]
 23fabe6:	f7ee ff2f 	bl	23e9a48 <__aeabi_dmul>
 23fabea:	9f01      	ldr	r7, [sp, #4]
 23fabec:	f7ef f9dc 	bl	23e9fa8 <__aeabi_d2iz>
 23fabf0:	4606      	mov	r6, r0
 23fabf2:	f7ee febf 	bl	23e9974 <__aeabi_i2d>
 23fabf6:	2200      	movs	r2, #0
 23fabf8:	4b52      	ldr	r3, [pc, #328]	; (23fad44 <__kernel_rem_pio2+0x83c>)
 23fabfa:	f107 0a01 	add.w	sl, r7, #1
 23fabfe:	f7ee ff23 	bl	23e9a48 <__aeabi_dmul>
 23fac02:	460b      	mov	r3, r1
 23fac04:	4602      	mov	r2, r0
 23fac06:	4629      	mov	r1, r5
 23fac08:	4620      	mov	r0, r4
 23fac0a:	f7ee fd65 	bl	23e96d8 <__aeabi_dsub>
 23fac0e:	f7ef f9cb 	bl	23e9fa8 <__aeabi_d2iz>
 23fac12:	ab0c      	add	r3, sp, #48	; 0x30
 23fac14:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fac18:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fac1c:	e68c      	b.n	23fa938 <__kernel_rem_pio2+0x430>
 23fac1e:	9d01      	ldr	r5, [sp, #4]
 23fac20:	2000      	movs	r0, #0
 23fac22:	9a06      	ldr	r2, [sp, #24]
 23fac24:	2100      	movs	r1, #0
 23fac26:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fac2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fac2e:	f7ee fd55 	bl	23e96dc <__adddf3>
 23fac32:	42a5      	cmp	r5, r4
 23fac34:	d1f9      	bne.n	23fac2a <__kernel_rem_pio2+0x722>
 23fac36:	9b03      	ldr	r3, [sp, #12]
 23fac38:	2b00      	cmp	r3, #0
 23fac3a:	d149      	bne.n	23facd0 <__kernel_rem_pio2+0x7c8>
 23fac3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fac3e:	4602      	mov	r2, r0
 23fac40:	e9c3 0100 	strd	r0, r1, [r3]
 23fac44:	460b      	mov	r3, r1
 23fac46:	9901      	ldr	r1, [sp, #4]
 23fac48:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fac4c:	f7ee fd44 	bl	23e96d8 <__aeabi_dsub>
 23fac50:	f1ba 0f00 	cmp.w	sl, #0
 23fac54:	dd0d      	ble.n	23fac72 <__kernel_rem_pio2+0x76a>
 23fac56:	ad4a      	add	r5, sp, #296	; 0x128
 23fac58:	2401      	movs	r4, #1
 23fac5a:	3401      	adds	r4, #1
 23fac5c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fac60:	f7ee fd3c 	bl	23e96dc <__adddf3>
 23fac64:	45a2      	cmp	sl, r4
 23fac66:	daf8      	bge.n	23fac5a <__kernel_rem_pio2+0x752>
 23fac68:	9b03      	ldr	r3, [sp, #12]
 23fac6a:	b113      	cbz	r3, 23fac72 <__kernel_rem_pio2+0x76a>
 23fac6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fac70:	4619      	mov	r1, r3
 23fac72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fac74:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fac78:	9b07      	ldr	r3, [sp, #28]
 23fac7a:	f003 0007 	and.w	r0, r3, #7
 23fac7e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fac82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fac86:	4620      	mov	r0, r4
 23fac88:	4629      	mov	r1, r5
 23fac8a:	f7ef f98d 	bl	23e9fa8 <__aeabi_d2iz>
 23fac8e:	9b01      	ldr	r3, [sp, #4]
 23fac90:	aa0c      	add	r2, sp, #48	; 0x30
 23fac92:	469a      	mov	sl, r3
 23fac94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fac98:	e64e      	b.n	23fa938 <__kernel_rem_pio2+0x430>
 23fac9a:	9b01      	ldr	r3, [sp, #4]
 23fac9c:	4602      	mov	r2, r0
 23fac9e:	461e      	mov	r6, r3
 23faca0:	685c      	ldr	r4, [r3, #4]
 23faca2:	68dd      	ldr	r5, [r3, #12]
 23faca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23faca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23facaa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23facae:	6832      	ldr	r2, [r6, #0]
 23facb0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23facb4:	e9c1 2300 	strd	r2, r3, [r1]
 23facb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23facbc:	68b2      	ldr	r2, [r6, #8]
 23facbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23facc2:	9b07      	ldr	r3, [sp, #28]
 23facc4:	f003 0007 	and.w	r0, r3, #7
 23facc8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23faccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23facd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23facd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23facd6:	6053      	str	r3, [r2, #4]
 23facd8:	460b      	mov	r3, r1
 23facda:	9901      	ldr	r1, [sp, #4]
 23facdc:	6010      	str	r0, [r2, #0]
 23facde:	4602      	mov	r2, r0
 23face0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23face4:	f7ee fcf8 	bl	23e96d8 <__aeabi_dsub>
 23face8:	f1ba 0f00 	cmp.w	sl, #0
 23facec:	dcb3      	bgt.n	23fac56 <__kernel_rem_pio2+0x74e>
 23facee:	e7bd      	b.n	23fac6c <__kernel_rem_pio2+0x764>
 23facf0:	4632      	mov	r2, r6
 23facf2:	463b      	mov	r3, r7
 23facf4:	2000      	movs	r0, #0
 23facf6:	4915      	ldr	r1, [pc, #84]	; (23fad4c <__kernel_rem_pio2+0x844>)
 23facf8:	f7ee fcee 	bl	23e96d8 <__aeabi_dsub>
 23facfc:	2502      	movs	r5, #2
 23facfe:	4606      	mov	r6, r0
 23fad00:	460f      	mov	r7, r1
 23fad02:	e500      	b.n	23fa706 <__kernel_rem_pio2+0x1fe>
 23fad04:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fad06:	2b02      	cmp	r3, #2
 23fad08:	dc0a      	bgt.n	23fad20 <__kernel_rem_pio2+0x818>
 23fad0a:	2b00      	cmp	r3, #0
 23fad0c:	dc11      	bgt.n	23fad32 <__kernel_rem_pio2+0x82a>
 23fad0e:	f47f ae9c 	bne.w	23faa4a <__kernel_rem_pio2+0x542>
 23fad12:	2000      	movs	r0, #0
 23fad14:	2100      	movs	r1, #0
 23fad16:	e690      	b.n	23faa3a <__kernel_rem_pio2+0x532>
 23fad18:	9b08      	ldr	r3, [sp, #32]
 23fad1a:	00db      	lsls	r3, r3, #3
 23fad1c:	9302      	str	r3, [sp, #8]
 23fad1e:	e465      	b.n	23fa5ec <__kernel_rem_pio2+0xe4>
 23fad20:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fad22:	2b03      	cmp	r3, #3
 23fad24:	f47f ae91 	bne.w	23faa4a <__kernel_rem_pio2+0x542>
 23fad28:	ab48      	add	r3, sp, #288	; 0x120
 23fad2a:	2000      	movs	r0, #0
 23fad2c:	2100      	movs	r1, #0
 23fad2e:	9301      	str	r3, [sp, #4]
 23fad30:	e6fb      	b.n	23fab2a <__kernel_rem_pio2+0x622>
 23fad32:	ab48      	add	r3, sp, #288	; 0x120
 23fad34:	2000      	movs	r0, #0
 23fad36:	2100      	movs	r1, #0
 23fad38:	9301      	str	r3, [sp, #4]
 23fad3a:	e77c      	b.n	23fac36 <__kernel_rem_pio2+0x72e>
 23fad3c:	2000      	movs	r0, #0
 23fad3e:	2100      	movs	r1, #0
 23fad40:	e6f3      	b.n	23fab2a <__kernel_rem_pio2+0x622>
 23fad42:	bf00      	nop
 23fad44:	41700000 	.word	0x41700000
 23fad48:	3e700000 	.word	0x3e700000
 23fad4c:	3ff00000 	.word	0x3ff00000

023fad50 <__kernel_sin>:
 23fad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fad54:	ec5b ab10 	vmov	sl, fp, d0
 23fad58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fad5c:	4680      	mov	r8, r0
 23fad5e:	ed2d 8b02 	vpush	{d8}
 23fad62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fad66:	b083      	sub	sp, #12
 23fad68:	ed8d 1b00 	vstr	d1, [sp]
 23fad6c:	da07      	bge.n	23fad7e <__kernel_sin+0x2e>
 23fad6e:	ee10 0a10 	vmov	r0, s0
 23fad72:	4659      	mov	r1, fp
 23fad74:	f7ef f918 	bl	23e9fa8 <__aeabi_d2iz>
 23fad78:	2800      	cmp	r0, #0
 23fad7a:	f000 808e 	beq.w	23fae9a <__kernel_sin+0x14a>
 23fad7e:	4652      	mov	r2, sl
 23fad80:	465b      	mov	r3, fp
 23fad82:	4650      	mov	r0, sl
 23fad84:	4659      	mov	r1, fp
 23fad86:	f7ee fe5f 	bl	23e9a48 <__aeabi_dmul>
 23fad8a:	4604      	mov	r4, r0
 23fad8c:	460d      	mov	r5, r1
 23fad8e:	4650      	mov	r0, sl
 23fad90:	4622      	mov	r2, r4
 23fad92:	4659      	mov	r1, fp
 23fad94:	462b      	mov	r3, r5
 23fad96:	f7ee fe57 	bl	23e9a48 <__aeabi_dmul>
 23fad9a:	4606      	mov	r6, r0
 23fad9c:	460f      	mov	r7, r1
 23fad9e:	4620      	mov	r0, r4
 23fada0:	4629      	mov	r1, r5
 23fada2:	a344      	add	r3, pc, #272	; (adr r3, 23faeb4 <__kernel_sin+0x164>)
 23fada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fada8:	f7ee fe4e 	bl	23e9a48 <__aeabi_dmul>
 23fadac:	a343      	add	r3, pc, #268	; (adr r3, 23faebc <__kernel_sin+0x16c>)
 23fadae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fadb2:	f7ee fc91 	bl	23e96d8 <__aeabi_dsub>
 23fadb6:	4622      	mov	r2, r4
 23fadb8:	462b      	mov	r3, r5
 23fadba:	f7ee fe45 	bl	23e9a48 <__aeabi_dmul>
 23fadbe:	a341      	add	r3, pc, #260	; (adr r3, 23faec4 <__kernel_sin+0x174>)
 23fadc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fadc4:	f7ee fc8a 	bl	23e96dc <__adddf3>
 23fadc8:	4622      	mov	r2, r4
 23fadca:	462b      	mov	r3, r5
 23fadcc:	f7ee fe3c 	bl	23e9a48 <__aeabi_dmul>
 23fadd0:	a33e      	add	r3, pc, #248	; (adr r3, 23faecc <__kernel_sin+0x17c>)
 23fadd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fadd6:	f7ee fc7f 	bl	23e96d8 <__aeabi_dsub>
 23fadda:	4622      	mov	r2, r4
 23faddc:	462b      	mov	r3, r5
 23fadde:	f7ee fe33 	bl	23e9a48 <__aeabi_dmul>
 23fade2:	a33c      	add	r3, pc, #240	; (adr r3, 23faed4 <__kernel_sin+0x184>)
 23fade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fade8:	f7ee fc78 	bl	23e96dc <__adddf3>
 23fadec:	ec41 0b18 	vmov	d8, r0, r1
 23fadf0:	f1b8 0f00 	cmp.w	r8, #0
 23fadf4:	d037      	beq.n	23fae66 <__kernel_sin+0x116>
 23fadf6:	2200      	movs	r2, #0
 23fadf8:	4b2d      	ldr	r3, [pc, #180]	; (23faeb0 <__kernel_sin+0x160>)
 23fadfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fadfe:	f7ee fe23 	bl	23e9a48 <__aeabi_dmul>
 23fae02:	4680      	mov	r8, r0
 23fae04:	4689      	mov	r9, r1
 23fae06:	4630      	mov	r0, r6
 23fae08:	4639      	mov	r1, r7
 23fae0a:	ec53 2b18 	vmov	r2, r3, d8
 23fae0e:	f7ee fe1b 	bl	23e9a48 <__aeabi_dmul>
 23fae12:	4602      	mov	r2, r0
 23fae14:	460b      	mov	r3, r1
 23fae16:	4640      	mov	r0, r8
 23fae18:	4649      	mov	r1, r9
 23fae1a:	f7ee fc5d 	bl	23e96d8 <__aeabi_dsub>
 23fae1e:	4622      	mov	r2, r4
 23fae20:	462b      	mov	r3, r5
 23fae22:	f7ee fe11 	bl	23e9a48 <__aeabi_dmul>
 23fae26:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fae2a:	f7ee fc55 	bl	23e96d8 <__aeabi_dsub>
 23fae2e:	4604      	mov	r4, r0
 23fae30:	460d      	mov	r5, r1
 23fae32:	4630      	mov	r0, r6
 23fae34:	4639      	mov	r1, r7
 23fae36:	a31c      	add	r3, pc, #112	; (adr r3, 23faea8 <__kernel_sin+0x158>)
 23fae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fae3c:	f7ee fe04 	bl	23e9a48 <__aeabi_dmul>
 23fae40:	4602      	mov	r2, r0
 23fae42:	460b      	mov	r3, r1
 23fae44:	4620      	mov	r0, r4
 23fae46:	4629      	mov	r1, r5
 23fae48:	f7ee fc48 	bl	23e96dc <__adddf3>
 23fae4c:	4602      	mov	r2, r0
 23fae4e:	460b      	mov	r3, r1
 23fae50:	4650      	mov	r0, sl
 23fae52:	4659      	mov	r1, fp
 23fae54:	f7ee fc40 	bl	23e96d8 <__aeabi_dsub>
 23fae58:	ec41 0b10 	vmov	d0, r0, r1
 23fae5c:	b003      	add	sp, #12
 23fae5e:	ecbd 8b02 	vpop	{d8}
 23fae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fae66:	4602      	mov	r2, r0
 23fae68:	460b      	mov	r3, r1
 23fae6a:	4620      	mov	r0, r4
 23fae6c:	4629      	mov	r1, r5
 23fae6e:	f7ee fdeb 	bl	23e9a48 <__aeabi_dmul>
 23fae72:	a30d      	add	r3, pc, #52	; (adr r3, 23faea8 <__kernel_sin+0x158>)
 23fae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fae78:	f7ee fc2e 	bl	23e96d8 <__aeabi_dsub>
 23fae7c:	4632      	mov	r2, r6
 23fae7e:	463b      	mov	r3, r7
 23fae80:	f7ee fde2 	bl	23e9a48 <__aeabi_dmul>
 23fae84:	4652      	mov	r2, sl
 23fae86:	465b      	mov	r3, fp
 23fae88:	f7ee fc28 	bl	23e96dc <__adddf3>
 23fae8c:	ec41 0b10 	vmov	d0, r0, r1
 23fae90:	b003      	add	sp, #12
 23fae92:	ecbd 8b02 	vpop	{d8}
 23fae96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fae9a:	ec4b ab10 	vmov	d0, sl, fp
 23fae9e:	b003      	add	sp, #12
 23faea0:	ecbd 8b02 	vpop	{d8}
 23faea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faea8:	55555549 	.word	0x55555549
 23faeac:	3fc55555 	.word	0x3fc55555
 23faeb0:	3fe00000 	.word	0x3fe00000
 23faeb4:	5acfd57c 	.word	0x5acfd57c
 23faeb8:	3de5d93a 	.word	0x3de5d93a
 23faebc:	8a2b9ceb 	.word	0x8a2b9ceb
 23faec0:	3e5ae5e6 	.word	0x3e5ae5e6
 23faec4:	57b1fe7d 	.word	0x57b1fe7d
 23faec8:	3ec71de3 	.word	0x3ec71de3
 23faecc:	19c161d5 	.word	0x19c161d5
 23faed0:	3f2a01a0 	.word	0x3f2a01a0
 23faed4:	1110f8a6 	.word	0x1110f8a6
 23faed8:	3f811111 	.word	0x3f811111
 23faedc:	00000000 	.word	0x00000000

023faee0 <scalbn>:
 23faee0:	b538      	push	{r3, r4, r5, lr}
 23faee2:	ec53 2b10 	vmov	r2, r3, d0
 23faee6:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23faeea:	469c      	mov	ip, r3
 23faeec:	4604      	mov	r4, r0
 23faeee:	bb89      	cbnz	r1, 23faf54 <scalbn+0x74>
 23faef0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23faef4:	ee10 1a10 	vmov	r1, s0
 23faef8:	ea5c 0101 	orrs.w	r1, ip, r1
 23faefc:	d029      	beq.n	23faf52 <scalbn+0x72>
 23faefe:	4d3e      	ldr	r5, [pc, #248]	; (23faff8 <scalbn+0x118>)
 23faf00:	4619      	mov	r1, r3
 23faf02:	2200      	movs	r2, #0
 23faf04:	4b3d      	ldr	r3, [pc, #244]	; (23faffc <scalbn+0x11c>)
 23faf06:	ee10 0a10 	vmov	r0, s0
 23faf0a:	f7ee fd9d 	bl	23e9a48 <__aeabi_dmul>
 23faf0e:	42ac      	cmp	r4, r5
 23faf10:	4602      	mov	r2, r0
 23faf12:	460b      	mov	r3, r1
 23faf14:	db16      	blt.n	23faf44 <scalbn+0x64>
 23faf16:	468c      	mov	ip, r1
 23faf18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23faf1c:	3936      	subs	r1, #54	; 0x36
 23faf1e:	4421      	add	r1, r4
 23faf20:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23faf24:	4281      	cmp	r1, r0
 23faf26:	dc21      	bgt.n	23faf6c <scalbn+0x8c>
 23faf28:	2900      	cmp	r1, #0
 23faf2a:	dc47      	bgt.n	23fafbc <scalbn+0xdc>
 23faf2c:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23faf30:	da34      	bge.n	23faf9c <scalbn+0xbc>
 23faf32:	f24c 3150 	movw	r1, #50000	; 0xc350
 23faf36:	428c      	cmp	r4, r1
 23faf38:	dc18      	bgt.n	23faf6c <scalbn+0x8c>
 23faf3a:	2b00      	cmp	r3, #0
 23faf3c:	a126      	add	r1, pc, #152	; (adr r1, 23fafd8 <scalbn+0xf8>)
 23faf3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23faf42:	db43      	blt.n	23fafcc <scalbn+0xec>
 23faf44:	a324      	add	r3, pc, #144	; (adr r3, 23fafd8 <scalbn+0xf8>)
 23faf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faf4a:	f7ee fd7d 	bl	23e9a48 <__aeabi_dmul>
 23faf4e:	ec41 0b10 	vmov	d0, r0, r1
 23faf52:	bd38      	pop	{r3, r4, r5, pc}
 23faf54:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23faf58:	4571      	cmp	r1, lr
 23faf5a:	d1e0      	bne.n	23faf1e <scalbn+0x3e>
 23faf5c:	ee10 0a10 	vmov	r0, s0
 23faf60:	4619      	mov	r1, r3
 23faf62:	f7ee fbbb 	bl	23e96dc <__adddf3>
 23faf66:	ec41 0b10 	vmov	d0, r0, r1
 23faf6a:	bd38      	pop	{r3, r4, r5, pc}
 23faf6c:	2b00      	cmp	r3, #0
 23faf6e:	a11c      	add	r1, pc, #112	; (adr r1, 23fafe0 <scalbn+0x100>)
 23faf70:	e9d1 0100 	ldrd	r0, r1, [r1]
 23faf74:	db07      	blt.n	23faf86 <scalbn+0xa6>
 23faf76:	a31a      	add	r3, pc, #104	; (adr r3, 23fafe0 <scalbn+0x100>)
 23faf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faf7c:	f7ee fd64 	bl	23e9a48 <__aeabi_dmul>
 23faf80:	ec41 0b10 	vmov	d0, r0, r1
 23faf84:	bd38      	pop	{r3, r4, r5, pc}
 23faf86:	a118      	add	r1, pc, #96	; (adr r1, 23fafe8 <scalbn+0x108>)
 23faf88:	e9d1 0100 	ldrd	r0, r1, [r1]
 23faf8c:	a314      	add	r3, pc, #80	; (adr r3, 23fafe0 <scalbn+0x100>)
 23faf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faf92:	f7ee fd59 	bl	23e9a48 <__aeabi_dmul>
 23faf96:	ec41 0b10 	vmov	d0, r0, r1
 23faf9a:	e7f3      	b.n	23faf84 <scalbn+0xa4>
 23faf9c:	4818      	ldr	r0, [pc, #96]	; (23fb000 <scalbn+0x120>)
 23faf9e:	3136      	adds	r1, #54	; 0x36
 23fafa0:	4614      	mov	r4, r2
 23fafa2:	4b18      	ldr	r3, [pc, #96]	; (23fb004 <scalbn+0x124>)
 23fafa4:	ea0c 0000 	and.w	r0, ip, r0
 23fafa8:	2200      	movs	r2, #0
 23fafaa:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fafae:	4620      	mov	r0, r4
 23fafb0:	4629      	mov	r1, r5
 23fafb2:	f7ee fd49 	bl	23e9a48 <__aeabi_dmul>
 23fafb6:	ec41 0b10 	vmov	d0, r0, r1
 23fafba:	bd38      	pop	{r3, r4, r5, pc}
 23fafbc:	4810      	ldr	r0, [pc, #64]	; (23fb000 <scalbn+0x120>)
 23fafbe:	ea0c 0000 	and.w	r0, ip, r0
 23fafc2:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fafc6:	ec43 2b10 	vmov	d0, r2, r3
 23fafca:	bd38      	pop	{r3, r4, r5, pc}
 23fafcc:	a108      	add	r1, pc, #32	; (adr r1, 23faff0 <scalbn+0x110>)
 23fafce:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fafd2:	e7b7      	b.n	23faf44 <scalbn+0x64>
 23fafd4:	f3af 8000 	nop.w
 23fafd8:	c2f8f359 	.word	0xc2f8f359
 23fafdc:	01a56e1f 	.word	0x01a56e1f
 23fafe0:	8800759c 	.word	0x8800759c
 23fafe4:	7e37e43c 	.word	0x7e37e43c
 23fafe8:	8800759c 	.word	0x8800759c
 23fafec:	fe37e43c 	.word	0xfe37e43c
 23faff0:	c2f8f359 	.word	0xc2f8f359
 23faff4:	81a56e1f 	.word	0x81a56e1f
 23faff8:	ffff3cb0 	.word	0xffff3cb0
 23faffc:	43500000 	.word	0x43500000
 23fb000:	800fffff 	.word	0x800fffff
 23fb004:	3c900000 	.word	0x3c900000

023fb008 <finitef>:
 23fb008:	b082      	sub	sp, #8
 23fb00a:	ed8d 0a01 	vstr	s0, [sp, #4]
 23fb00e:	9801      	ldr	r0, [sp, #4]
 23fb010:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fb014:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 23fb018:	bfac      	ite	ge
 23fb01a:	2000      	movge	r0, #0
 23fb01c:	2001      	movlt	r0, #1
 23fb01e:	b002      	add	sp, #8
 23fb020:	4770      	bx	lr
 23fb022:	bf00      	nop

023fb024 <atexit>:
 23fb024:	2300      	movs	r3, #0
 23fb026:	4601      	mov	r1, r0
 23fb028:	461a      	mov	r2, r3
 23fb02a:	4618      	mov	r0, r3
 23fb02c:	f000 b970 	b.w	23fb310 <__register_exitproc>

023fb030 <calloc>:
 23fb030:	4b02      	ldr	r3, [pc, #8]	; (23fb03c <calloc+0xc>)
 23fb032:	460a      	mov	r2, r1
 23fb034:	4601      	mov	r1, r0
 23fb036:	6818      	ldr	r0, [r3, #0]
 23fb038:	f000 b84c 	b.w	23fb0d4 <_calloc_r>
 23fb03c:	10079c14 	.word	0x10079c14

023fb040 <isprint>:
 23fb040:	4b02      	ldr	r3, [pc, #8]	; (23fb04c <isprint+0xc>)
 23fb042:	4418      	add	r0, r3
 23fb044:	7840      	ldrb	r0, [r0, #1]
 23fb046:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fb04a:	4770      	bx	lr
 23fb04c:	023ffe64 	.word	0x023ffe64

023fb050 <__retarget_lock_acquire_recursive>:
 23fb050:	4770      	bx	lr

023fb052 <__retarget_lock_release>:
 23fb052:	4770      	bx	lr

023fb054 <__retarget_lock_release_recursive>:
 23fb054:	4770      	bx	lr

023fb056 <memcmp>:
 23fb056:	3901      	subs	r1, #1
 23fb058:	4402      	add	r2, r0
 23fb05a:	b510      	push	{r4, lr}
 23fb05c:	4290      	cmp	r0, r2
 23fb05e:	d101      	bne.n	23fb064 <memcmp+0xe>
 23fb060:	2000      	movs	r0, #0
 23fb062:	e005      	b.n	23fb070 <memcmp+0x1a>
 23fb064:	7803      	ldrb	r3, [r0, #0]
 23fb066:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fb06a:	42a3      	cmp	r3, r4
 23fb06c:	d001      	beq.n	23fb072 <memcmp+0x1c>
 23fb06e:	1b18      	subs	r0, r3, r4
 23fb070:	bd10      	pop	{r4, pc}
 23fb072:	3001      	adds	r0, #1
 23fb074:	e7f2      	b.n	23fb05c <memcmp+0x6>

023fb076 <memcpy>:
 23fb076:	440a      	add	r2, r1
 23fb078:	1e43      	subs	r3, r0, #1
 23fb07a:	4291      	cmp	r1, r2
 23fb07c:	d100      	bne.n	23fb080 <memcpy+0xa>
 23fb07e:	4770      	bx	lr
 23fb080:	b510      	push	{r4, lr}
 23fb082:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fb086:	4291      	cmp	r1, r2
 23fb088:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fb08c:	d1f9      	bne.n	23fb082 <memcpy+0xc>
 23fb08e:	bd10      	pop	{r4, pc}

023fb090 <memmove>:
 23fb090:	4288      	cmp	r0, r1
 23fb092:	b510      	push	{r4, lr}
 23fb094:	eb01 0402 	add.w	r4, r1, r2
 23fb098:	d902      	bls.n	23fb0a0 <memmove+0x10>
 23fb09a:	4284      	cmp	r4, r0
 23fb09c:	4623      	mov	r3, r4
 23fb09e:	d807      	bhi.n	23fb0b0 <memmove+0x20>
 23fb0a0:	1e43      	subs	r3, r0, #1
 23fb0a2:	42a1      	cmp	r1, r4
 23fb0a4:	d008      	beq.n	23fb0b8 <memmove+0x28>
 23fb0a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fb0aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fb0ae:	e7f8      	b.n	23fb0a2 <memmove+0x12>
 23fb0b0:	4402      	add	r2, r0
 23fb0b2:	4601      	mov	r1, r0
 23fb0b4:	428a      	cmp	r2, r1
 23fb0b6:	d100      	bne.n	23fb0ba <memmove+0x2a>
 23fb0b8:	bd10      	pop	{r4, pc}
 23fb0ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fb0be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fb0c2:	e7f7      	b.n	23fb0b4 <memmove+0x24>

023fb0c4 <memset>:
 23fb0c4:	4402      	add	r2, r0
 23fb0c6:	4603      	mov	r3, r0
 23fb0c8:	4293      	cmp	r3, r2
 23fb0ca:	d100      	bne.n	23fb0ce <memset+0xa>
 23fb0cc:	4770      	bx	lr
 23fb0ce:	f803 1b01 	strb.w	r1, [r3], #1
 23fb0d2:	e7f9      	b.n	23fb0c8 <memset+0x4>

023fb0d4 <_calloc_r>:
 23fb0d4:	434a      	muls	r2, r1
 23fb0d6:	b513      	push	{r0, r1, r4, lr}
 23fb0d8:	4611      	mov	r1, r2
 23fb0da:	9201      	str	r2, [sp, #4]
 23fb0dc:	f7f9 fb8c 	bl	23f47f8 <_malloc_r>
 23fb0e0:	4604      	mov	r4, r0
 23fb0e2:	b118      	cbz	r0, 23fb0ec <_calloc_r+0x18>
 23fb0e4:	9a01      	ldr	r2, [sp, #4]
 23fb0e6:	2100      	movs	r1, #0
 23fb0e8:	f7ff ffec 	bl	23fb0c4 <memset>
 23fb0ec:	4620      	mov	r0, r4
 23fb0ee:	b002      	add	sp, #8
 23fb0f0:	bd10      	pop	{r4, pc}
	...

023fb0f4 <srand>:
 23fb0f4:	b538      	push	{r3, r4, r5, lr}
 23fb0f6:	4b10      	ldr	r3, [pc, #64]	; (23fb138 <srand+0x44>)
 23fb0f8:	4604      	mov	r4, r0
 23fb0fa:	681d      	ldr	r5, [r3, #0]
 23fb0fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb0fe:	b9b3      	cbnz	r3, 23fb12e <srand+0x3a>
 23fb100:	2018      	movs	r0, #24
 23fb102:	f7f9 fb33 	bl	23f476c <malloc>
 23fb106:	4602      	mov	r2, r0
 23fb108:	63a8      	str	r0, [r5, #56]	; 0x38
 23fb10a:	b920      	cbnz	r0, 23fb116 <srand+0x22>
 23fb10c:	4b0b      	ldr	r3, [pc, #44]	; (23fb13c <srand+0x48>)
 23fb10e:	2142      	movs	r1, #66	; 0x42
 23fb110:	480b      	ldr	r0, [pc, #44]	; (23fb140 <srand+0x4c>)
 23fb112:	f7f9 fb8d 	bl	23f4830 <__assert_func>
 23fb116:	490b      	ldr	r1, [pc, #44]	; (23fb144 <srand+0x50>)
 23fb118:	4b0b      	ldr	r3, [pc, #44]	; (23fb148 <srand+0x54>)
 23fb11a:	e9c0 1300 	strd	r1, r3, [r0]
 23fb11e:	4b0b      	ldr	r3, [pc, #44]	; (23fb14c <srand+0x58>)
 23fb120:	2100      	movs	r1, #0
 23fb122:	6083      	str	r3, [r0, #8]
 23fb124:	230b      	movs	r3, #11
 23fb126:	8183      	strh	r3, [r0, #12]
 23fb128:	2001      	movs	r0, #1
 23fb12a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fb12e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb130:	2200      	movs	r2, #0
 23fb132:	611c      	str	r4, [r3, #16]
 23fb134:	615a      	str	r2, [r3, #20]
 23fb136:	bd38      	pop	{r3, r4, r5, pc}
 23fb138:	10079c14 	.word	0x10079c14
 23fb13c:	023ffdd0 	.word	0x023ffdd0
 23fb140:	023ffde7 	.word	0x023ffde7
 23fb144:	abcd330e 	.word	0xabcd330e
 23fb148:	e66d1234 	.word	0xe66d1234
 23fb14c:	0005deec 	.word	0x0005deec

023fb150 <strchr>:
 23fb150:	b2c9      	uxtb	r1, r1
 23fb152:	4603      	mov	r3, r0
 23fb154:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb158:	b11a      	cbz	r2, 23fb162 <strchr+0x12>
 23fb15a:	428a      	cmp	r2, r1
 23fb15c:	d1f9      	bne.n	23fb152 <strchr+0x2>
 23fb15e:	4618      	mov	r0, r3
 23fb160:	4770      	bx	lr
 23fb162:	2900      	cmp	r1, #0
 23fb164:	bf18      	it	ne
 23fb166:	2300      	movne	r3, #0
 23fb168:	e7f9      	b.n	23fb15e <strchr+0xe>

023fb16a <strchrnul>:
 23fb16a:	b510      	push	{r4, lr}
 23fb16c:	4604      	mov	r4, r0
 23fb16e:	f7ff ffef 	bl	23fb150 <strchr>
 23fb172:	b918      	cbnz	r0, 23fb17c <strchrnul+0x12>
 23fb174:	4620      	mov	r0, r4
 23fb176:	f7ef f9b7 	bl	23ea4e8 <strlen>
 23fb17a:	4420      	add	r0, r4
 23fb17c:	bd10      	pop	{r4, pc}

023fb17e <strcpy>:
 23fb17e:	4603      	mov	r3, r0
 23fb180:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fb184:	f803 2b01 	strb.w	r2, [r3], #1
 23fb188:	2a00      	cmp	r2, #0
 23fb18a:	d1f9      	bne.n	23fb180 <strcpy+0x2>
 23fb18c:	4770      	bx	lr

023fb18e <strncmp>:
 23fb18e:	b510      	push	{r4, lr}
 23fb190:	b17a      	cbz	r2, 23fb1b2 <strncmp+0x24>
 23fb192:	4603      	mov	r3, r0
 23fb194:	3901      	subs	r1, #1
 23fb196:	1884      	adds	r4, r0, r2
 23fb198:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb19c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fb1a0:	4290      	cmp	r0, r2
 23fb1a2:	d101      	bne.n	23fb1a8 <strncmp+0x1a>
 23fb1a4:	42a3      	cmp	r3, r4
 23fb1a6:	d101      	bne.n	23fb1ac <strncmp+0x1e>
 23fb1a8:	1a80      	subs	r0, r0, r2
 23fb1aa:	bd10      	pop	{r4, pc}
 23fb1ac:	2800      	cmp	r0, #0
 23fb1ae:	d1f3      	bne.n	23fb198 <strncmp+0xa>
 23fb1b0:	e7fa      	b.n	23fb1a8 <strncmp+0x1a>
 23fb1b2:	4610      	mov	r0, r2
 23fb1b4:	e7f9      	b.n	23fb1aa <strncmp+0x1c>

023fb1b6 <strnlen>:
 23fb1b6:	4602      	mov	r2, r0
 23fb1b8:	4401      	add	r1, r0
 23fb1ba:	b510      	push	{r4, lr}
 23fb1bc:	428a      	cmp	r2, r1
 23fb1be:	4613      	mov	r3, r2
 23fb1c0:	d003      	beq.n	23fb1ca <strnlen+0x14>
 23fb1c2:	781c      	ldrb	r4, [r3, #0]
 23fb1c4:	3201      	adds	r2, #1
 23fb1c6:	2c00      	cmp	r4, #0
 23fb1c8:	d1f8      	bne.n	23fb1bc <strnlen+0x6>
 23fb1ca:	1a18      	subs	r0, r3, r0
 23fb1cc:	bd10      	pop	{r4, pc}

023fb1ce <strrchr>:
 23fb1ce:	b538      	push	{r3, r4, r5, lr}
 23fb1d0:	4603      	mov	r3, r0
 23fb1d2:	460c      	mov	r4, r1
 23fb1d4:	b969      	cbnz	r1, 23fb1f2 <strrchr+0x24>
 23fb1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fb1da:	f7ff bfb9 	b.w	23fb150 <strchr>
 23fb1de:	1c43      	adds	r3, r0, #1
 23fb1e0:	4605      	mov	r5, r0
 23fb1e2:	4621      	mov	r1, r4
 23fb1e4:	4618      	mov	r0, r3
 23fb1e6:	f7ff ffb3 	bl	23fb150 <strchr>
 23fb1ea:	2800      	cmp	r0, #0
 23fb1ec:	d1f7      	bne.n	23fb1de <strrchr+0x10>
 23fb1ee:	4628      	mov	r0, r5
 23fb1f0:	bd38      	pop	{r3, r4, r5, pc}
 23fb1f2:	2500      	movs	r5, #0
 23fb1f4:	e7f5      	b.n	23fb1e2 <strrchr+0x14>
	...

023fb1f8 <_strtol_l.constprop.0>:
 23fb1f8:	2b01      	cmp	r3, #1
 23fb1fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb1fe:	d001      	beq.n	23fb204 <_strtol_l.constprop.0+0xc>
 23fb200:	2b24      	cmp	r3, #36	; 0x24
 23fb202:	d906      	bls.n	23fb212 <_strtol_l.constprop.0+0x1a>
 23fb204:	f7f9 fb06 	bl	23f4814 <__errno>
 23fb208:	2316      	movs	r3, #22
 23fb20a:	6003      	str	r3, [r0, #0]
 23fb20c:	2000      	movs	r0, #0
 23fb20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fb212:	460d      	mov	r5, r1
 23fb214:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fb2f8 <_strtol_l.constprop.0+0x100>
 23fb218:	462e      	mov	r6, r5
 23fb21a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fb21e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fb222:	f017 0708 	ands.w	r7, r7, #8
 23fb226:	d1f7      	bne.n	23fb218 <_strtol_l.constprop.0+0x20>
 23fb228:	2c2d      	cmp	r4, #45	; 0x2d
 23fb22a:	d132      	bne.n	23fb292 <_strtol_l.constprop.0+0x9a>
 23fb22c:	782c      	ldrb	r4, [r5, #0]
 23fb22e:	2701      	movs	r7, #1
 23fb230:	1cb5      	adds	r5, r6, #2
 23fb232:	2b00      	cmp	r3, #0
 23fb234:	d05b      	beq.n	23fb2ee <_strtol_l.constprop.0+0xf6>
 23fb236:	2b10      	cmp	r3, #16
 23fb238:	d109      	bne.n	23fb24e <_strtol_l.constprop.0+0x56>
 23fb23a:	2c30      	cmp	r4, #48	; 0x30
 23fb23c:	d107      	bne.n	23fb24e <_strtol_l.constprop.0+0x56>
 23fb23e:	782c      	ldrb	r4, [r5, #0]
 23fb240:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fb244:	2c58      	cmp	r4, #88	; 0x58
 23fb246:	d14d      	bne.n	23fb2e4 <_strtol_l.constprop.0+0xec>
 23fb248:	786c      	ldrb	r4, [r5, #1]
 23fb24a:	2310      	movs	r3, #16
 23fb24c:	3502      	adds	r5, #2
 23fb24e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fb252:	f04f 0c00 	mov.w	ip, #0
 23fb256:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fb25a:	4666      	mov	r6, ip
 23fb25c:	fbb8 f9f3 	udiv	r9, r8, r3
 23fb260:	fb03 8a19 	mls	sl, r3, r9, r8
 23fb264:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fb268:	f1be 0f09 	cmp.w	lr, #9
 23fb26c:	d816      	bhi.n	23fb29c <_strtol_l.constprop.0+0xa4>
 23fb26e:	4674      	mov	r4, lr
 23fb270:	42a3      	cmp	r3, r4
 23fb272:	dd24      	ble.n	23fb2be <_strtol_l.constprop.0+0xc6>
 23fb274:	f1bc 0f00 	cmp.w	ip, #0
 23fb278:	db1e      	blt.n	23fb2b8 <_strtol_l.constprop.0+0xc0>
 23fb27a:	45b1      	cmp	r9, r6
 23fb27c:	d31c      	bcc.n	23fb2b8 <_strtol_l.constprop.0+0xc0>
 23fb27e:	d101      	bne.n	23fb284 <_strtol_l.constprop.0+0x8c>
 23fb280:	45a2      	cmp	sl, r4
 23fb282:	db19      	blt.n	23fb2b8 <_strtol_l.constprop.0+0xc0>
 23fb284:	fb06 4603 	mla	r6, r6, r3, r4
 23fb288:	f04f 0c01 	mov.w	ip, #1
 23fb28c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fb290:	e7e8      	b.n	23fb264 <_strtol_l.constprop.0+0x6c>
 23fb292:	2c2b      	cmp	r4, #43	; 0x2b
 23fb294:	bf04      	itt	eq
 23fb296:	782c      	ldrbeq	r4, [r5, #0]
 23fb298:	1cb5      	addeq	r5, r6, #2
 23fb29a:	e7ca      	b.n	23fb232 <_strtol_l.constprop.0+0x3a>
 23fb29c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fb2a0:	f1be 0f19 	cmp.w	lr, #25
 23fb2a4:	d801      	bhi.n	23fb2aa <_strtol_l.constprop.0+0xb2>
 23fb2a6:	3c37      	subs	r4, #55	; 0x37
 23fb2a8:	e7e2      	b.n	23fb270 <_strtol_l.constprop.0+0x78>
 23fb2aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fb2ae:	f1be 0f19 	cmp.w	lr, #25
 23fb2b2:	d804      	bhi.n	23fb2be <_strtol_l.constprop.0+0xc6>
 23fb2b4:	3c57      	subs	r4, #87	; 0x57
 23fb2b6:	e7db      	b.n	23fb270 <_strtol_l.constprop.0+0x78>
 23fb2b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fb2bc:	e7e6      	b.n	23fb28c <_strtol_l.constprop.0+0x94>
 23fb2be:	f1bc 0f00 	cmp.w	ip, #0
 23fb2c2:	da05      	bge.n	23fb2d0 <_strtol_l.constprop.0+0xd8>
 23fb2c4:	2322      	movs	r3, #34	; 0x22
 23fb2c6:	4646      	mov	r6, r8
 23fb2c8:	6003      	str	r3, [r0, #0]
 23fb2ca:	b942      	cbnz	r2, 23fb2de <_strtol_l.constprop.0+0xe6>
 23fb2cc:	4630      	mov	r0, r6
 23fb2ce:	e79e      	b.n	23fb20e <_strtol_l.constprop.0+0x16>
 23fb2d0:	b107      	cbz	r7, 23fb2d4 <_strtol_l.constprop.0+0xdc>
 23fb2d2:	4276      	negs	r6, r6
 23fb2d4:	2a00      	cmp	r2, #0
 23fb2d6:	d0f9      	beq.n	23fb2cc <_strtol_l.constprop.0+0xd4>
 23fb2d8:	f1bc 0f00 	cmp.w	ip, #0
 23fb2dc:	d000      	beq.n	23fb2e0 <_strtol_l.constprop.0+0xe8>
 23fb2de:	1e69      	subs	r1, r5, #1
 23fb2e0:	6011      	str	r1, [r2, #0]
 23fb2e2:	e7f3      	b.n	23fb2cc <_strtol_l.constprop.0+0xd4>
 23fb2e4:	2430      	movs	r4, #48	; 0x30
 23fb2e6:	2b00      	cmp	r3, #0
 23fb2e8:	d1b1      	bne.n	23fb24e <_strtol_l.constprop.0+0x56>
 23fb2ea:	2308      	movs	r3, #8
 23fb2ec:	e7af      	b.n	23fb24e <_strtol_l.constprop.0+0x56>
 23fb2ee:	2c30      	cmp	r4, #48	; 0x30
 23fb2f0:	d0a5      	beq.n	23fb23e <_strtol_l.constprop.0+0x46>
 23fb2f2:	230a      	movs	r3, #10
 23fb2f4:	e7ab      	b.n	23fb24e <_strtol_l.constprop.0+0x56>
 23fb2f6:	bf00      	nop
 23fb2f8:	023ffe65 	.word	0x023ffe65

023fb2fc <strtol>:
 23fb2fc:	4613      	mov	r3, r2
 23fb2fe:	460a      	mov	r2, r1
 23fb300:	4601      	mov	r1, r0
 23fb302:	4802      	ldr	r0, [pc, #8]	; (23fb30c <strtol+0x10>)
 23fb304:	6800      	ldr	r0, [r0, #0]
 23fb306:	f7ff bf77 	b.w	23fb1f8 <_strtol_l.constprop.0>
 23fb30a:	bf00      	nop
 23fb30c:	10079c14 	.word	0x10079c14

023fb310 <__register_exitproc>:
 23fb310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fb314:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fb3d4 <__register_exitproc+0xc4>
 23fb318:	4606      	mov	r6, r0
 23fb31a:	461f      	mov	r7, r3
 23fb31c:	460d      	mov	r5, r1
 23fb31e:	f8d8 0000 	ldr.w	r0, [r8]
 23fb322:	4691      	mov	r9, r2
 23fb324:	f7ff fe94 	bl	23fb050 <__retarget_lock_acquire_recursive>
 23fb328:	4b26      	ldr	r3, [pc, #152]	; (23fb3c4 <__register_exitproc+0xb4>)
 23fb32a:	681c      	ldr	r4, [r3, #0]
 23fb32c:	b934      	cbnz	r4, 23fb33c <__register_exitproc+0x2c>
 23fb32e:	4c26      	ldr	r4, [pc, #152]	; (23fb3c8 <__register_exitproc+0xb8>)
 23fb330:	601c      	str	r4, [r3, #0]
 23fb332:	4b26      	ldr	r3, [pc, #152]	; (23fb3cc <__register_exitproc+0xbc>)
 23fb334:	b113      	cbz	r3, 23fb33c <__register_exitproc+0x2c>
 23fb336:	681b      	ldr	r3, [r3, #0]
 23fb338:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fb33c:	6863      	ldr	r3, [r4, #4]
 23fb33e:	2b1f      	cmp	r3, #31
 23fb340:	dd07      	ble.n	23fb352 <__register_exitproc+0x42>
 23fb342:	f8d8 0000 	ldr.w	r0, [r8]
 23fb346:	f7ff fe85 	bl	23fb054 <__retarget_lock_release_recursive>
 23fb34a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fb34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fb352:	b35e      	cbz	r6, 23fb3ac <__register_exitproc+0x9c>
 23fb354:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fb358:	b988      	cbnz	r0, 23fb37e <__register_exitproc+0x6e>
 23fb35a:	4b1d      	ldr	r3, [pc, #116]	; (23fb3d0 <__register_exitproc+0xc0>)
 23fb35c:	b923      	cbnz	r3, 23fb368 <__register_exitproc+0x58>
 23fb35e:	f8d8 0000 	ldr.w	r0, [r8]
 23fb362:	f7ff fe76 	bl	23fb052 <__retarget_lock_release>
 23fb366:	e7f0      	b.n	23fb34a <__register_exitproc+0x3a>
 23fb368:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fb36c:	f7f9 f9fe 	bl	23f476c <malloc>
 23fb370:	2800      	cmp	r0, #0
 23fb372:	d0f4      	beq.n	23fb35e <__register_exitproc+0x4e>
 23fb374:	2300      	movs	r3, #0
 23fb376:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fb37a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fb37e:	6863      	ldr	r3, [r4, #4]
 23fb380:	2201      	movs	r2, #1
 23fb382:	2e02      	cmp	r6, #2
 23fb384:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fb388:	fa02 f203 	lsl.w	r2, r2, r3
 23fb38c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fb390:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fb394:	ea43 0302 	orr.w	r3, r3, r2
 23fb398:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fb39c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fb3a0:	bf02      	ittt	eq
 23fb3a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fb3a6:	4313      	orreq	r3, r2
 23fb3a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fb3ac:	6863      	ldr	r3, [r4, #4]
 23fb3ae:	f8d8 0000 	ldr.w	r0, [r8]
 23fb3b2:	1c5a      	adds	r2, r3, #1
 23fb3b4:	3302      	adds	r3, #2
 23fb3b6:	6062      	str	r2, [r4, #4]
 23fb3b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fb3bc:	f7ff fe4a 	bl	23fb054 <__retarget_lock_release_recursive>
 23fb3c0:	2000      	movs	r0, #0
 23fb3c2:	e7c4      	b.n	23fb34e <__register_exitproc+0x3e>
 23fb3c4:	1007afe4 	.word	0x1007afe4
 23fb3c8:	1007af58 	.word	0x1007af58
 23fb3cc:	00000000 	.word	0x00000000
 23fb3d0:	023f476d 	.word	0x023f476d
 23fb3d4:	10079c78 	.word	0x10079c78

023fb3d8 <__DelayUs_veneer>:
 23fb3d8:	b401      	push	{r0}
 23fb3da:	4802      	ldr	r0, [pc, #8]	; (23fb3e4 <__DelayUs_veneer+0xc>)
 23fb3dc:	4684      	mov	ip, r0
 23fb3de:	bc01      	pop	{r0}
 23fb3e0:	4760      	bx	ip
 23fb3e2:	bf00      	nop
 23fb3e4:	1010a949 	.word	0x1010a949

023fb3e8 <__io_assert_failed_veneer>:
 23fb3e8:	b401      	push	{r0}
 23fb3ea:	4802      	ldr	r0, [pc, #8]	; (23fb3f4 <__io_assert_failed_veneer+0xc>)
 23fb3ec:	4684      	mov	ip, r0
 23fb3ee:	bc01      	pop	{r0}
 23fb3f0:	4760      	bx	ip
 23fb3f2:	bf00      	nop
 23fb3f4:	1010a871 	.word	0x1010a871

023fb3f8 <__DelayMs_veneer>:
 23fb3f8:	b401      	push	{r0}
 23fb3fa:	4802      	ldr	r0, [pc, #8]	; (23fb404 <__DelayMs_veneer+0xc>)
 23fb3fc:	4684      	mov	ip, r0
 23fb3fe:	bc01      	pop	{r0}
 23fb400:	4760      	bx	ip
 23fb402:	bf00      	nop
 23fb404:	1010a995 	.word	0x1010a995

023fb408 <link_const_data_start>:
 23fb408:	00042783 	.word	0x00042783
 23fb40c:	023fbfdc 	.word	0x023fbfdc
 23fb410:	023fbfe6 	.word	0x023fbfe6
 23fb414:	00000001 	.word	0x00000001
 23fb418:	00000f78 	.word	0x00000f78
 23fb41c:	00003e80 	.word	0x00003e80
 23fb420:	00000001 	.word	0x00000001
 23fb424:	00003e80 	.word	0x00003e80
	...
 23fb434:	3d800000 	.word	0x3d800000
 23fb438:	467a0000 	.word	0x467a0000
 23fb43c:	00000001 	.word	0x00000001
 23fb440:	1007999c 	.word	0x1007999c
	...
 23fb44c:	000000ff 	.word	0x000000ff
 23fb450:	00000000 	.word	0x00000000
 23fb454:	00000009 	.word	0x00000009
 23fb458:	00000001 	.word	0x00000001
 23fb45c:	023fc92c 	.word	0x023fc92c
 23fb460:	00000002 	.word	0x00000002
 23fb464:	00000001 	.word	0x00000001
 23fb468:	023fbff4 	.word	0x023fbff4
 23fb46c:	00000fa0 	.word	0x00000fa0
 23fb470:	00000004 	.word	0x00000004
 23fb474:	00090000 	.word	0x00090000
 23fb478:	00000001 	.word	0x00000001
 23fb47c:	000003e8 	.word	0x000003e8
 23fb480:	3f4ccccd 	.word	0x3f4ccccd
 23fb484:	000001f4 	.word	0x000001f4
 23fb488:	00000000 	.word	0x00000000
 23fb48c:	10079978 	.word	0x10079978
	...
 23fb498:	023f18dd 	.word	0x023f18dd
 23fb49c:	023f1739 	.word	0x023f1739
	...
 23fb4b0:	023f1991 	.word	0x023f1991
 23fb4b4:	00000000 	.word	0x00000000
 23fb4b8:	023f1e71 	.word	0x023f1e71
 23fb4bc:	023f2031 	.word	0x023f2031
	...
 23fb4d0:	023f2929 	.word	0x023f2929
 23fb4d4:	00000000 	.word	0x00000000
 23fb4d8:	023f293d 	.word	0x023f293d
 23fb4dc:	023f2155 	.word	0x023f2155
	...
 23fb4f0:	023f24b9 	.word	0x023f24b9
 23fb4f4:	00000000 	.word	0x00000000
 23fb4f8:	023f2649 	.word	0x023f2649
 23fb4fc:	023f2705 	.word	0x023f2705
	...
 23fb510:	023f24b9 	.word	0x023f24b9
 23fb514:	00000000 	.word	0x00000000
 23fb518:	023f25cd 	.word	0x023f25cd
 23fb51c:	023f2765 	.word	0x023f2765
	...
 23fb534:	34fb0000 	.word	0x34fb0000
 23fb538:	00805f9b 	.word	0x00805f9b
 23fb53c:	10008000 	.word	0x10008000
	...

023fb548 <dynalib_user>:
 23fb548:	023ea4f9 023ea521 023ea525 00000000     ..>.!.>.%.>.....
 23fb558:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fb568:	6c617574 6b6e5500 6e776f6e 70797420     tual.Unknown typ
 23fb578:	4f4e0065 45505954 4f4c4600 32335441     e.NOTYPE.FLOAT32
 23fb588:	4e495500 53003854 4e495254 4f420047     .UINT8.STRING.BO
 23fb598:	49004c4f 3631544e 4d4f4300 58454c50     OL.INT16.COMPLEX
 23fb5a8:	46003436 54414f4c 46003631 54414f4c     64.FLOAT16.FLOAT
 23fb5b8:	43003436 4c504d4f 32315845 49550038     64.COMPLEX128.UI
 23fb5c8:	3436544e 53455200 4352554f 41560045     NT64.RESOURCE.VA
 23fb5d8:	4e414952 49550054 3233544e 00000000     RIANT.UINT32....

023fb5e8 <CSWTCH.24>:
 23fb5e8:	023fb57a 023fb581 023fb5df 023fb589     z.?...?...?...?.
 23fb5f8:	023fb5c7 023fb58f 023fb596 023fb59b     ..?...?...?...?.
 23fb608:	023fb5a1 023fb58a 023fb5ab 023fb5b3     ..?...?...?...?.
 23fb618:	023fb5bb 023fb5c6 023fb5cd 023fb5d6     ..?...?...?...?.
 23fb628:	023fb5de                                ..?.

023fb62c <arm_cfft_sR_f32_len128>:
 23fb62c:	00000080 023fb7dc 023fb63c 000000d0     ......?.<.?.....

023fb63c <armBitRevIndexTable128>:
 23fb63c:	02000008 00400010 02400018 00800020     ......@...@. ...
 23fb64c:	02800028 00c00030 02c00038 01000040     (...0...8...@...
 23fb65c:	03000048 01400050 03400058 01800060     H...P.@.X.@.`...
 23fb66c:	03800068 01c00070 03c00078 02000080     h...p...x.......
 23fb67c:	02080088 03000090 02480098 020800a0     ..........H.....
 23fb68c:	028800a8 00c800b0 02c800b8 010800c0     ................
 23fb69c:	030800c8 014800d0 034800d8 018800e0     ......H...H.....
 23fb6ac:	038800e8 01c800f0 03c800f8 02100108     ................
 23fb6bc:	01400110 02500118 03000120 02900128     ..@...P. ...(...
 23fb6cc:	01480130 02d00138 03100148 03500158     0.H.8...H...X.P.
 23fb6dc:	01900160 03900168 01d00170 03d00178     `...h...p...x...
 23fb6ec:	02400180 02180188 03400190 02580198     ..@.......@...X.
 23fb6fc:	024801a0 029801a8 034801b0 02d801b8     ..H.......H.....
 23fb70c:	025001c0 031801c8 035001d0 035801d8     ..P.......P...X.
 23fb71c:	025801e0 039801e8 035801f0 03d801f8     ..X.......X.....
 23fb72c:	02200208 02400210 02600218 02a00228     .. ...@...`.(...
 23fb73c:	02600230 02e00238 03000240 03200248     0.`.8...@...H. .
 23fb74c:	03400250 03600258 03200260 03a00268     P.@.X.`.`. .h...
 23fb75c:	03600270 03e00278 02a00288 03800290     p.`.x...........
 23fb76c:	03a00298 038802b0 02e802b8 038002c0     ................
 23fb77c:	032802c8 039002d0 036802d8 03a002e0     ..(.......h.....
 23fb78c:	03a802e8 039802f0 03e802f8 03200308     .............. .
 23fb79c:	03400310 03600318 03880328 03600330     ..@...`.(...0.`.
 23fb7ac:	03980338 03600348 03700358 03b00368     8...H.`.X.p.h...
 23fb7bc:	03f00378 03a00388 03c00390 03e00398     x...............
 23fb7cc:	03c803b0 03e803b8 03e003c8 03f003d8     ................

023fb7dc <twiddleCoef_128>:
 23fb7dc:	3f800000 00000000 3f7fb10f 3d48fb2f     ...?.......?/.H=
 23fb7ec:	3f7ec46d 3dc8bd36 3f7d3aac 3e164083     m.~?6..=.:}?.@.>
 23fb7fc:	3f7b14be 3e47c5c2 3f7853f8 3e78cfcc     ..{?..G>.Sx?..x>
 23fb80c:	3f74fa0b 3e94a031 3f710908 3eac7cd4     ..t?1..>..q?.|.>
 23fb81c:	3f6c835e 3ec3ef15 3f676bd8 3edae880     ^.l?...>.kg?...>
 23fb82c:	3f61c598 3ef15aea 3f5b941a 3f039c3d     ..a?.Z.>..[?=..?
 23fb83c:	3f54db31 3f0e39da 3f4d9f02 3f187fc0     1.T?.9.?..M?...?
 23fb84c:	3f45e403 3f226799 3f3daef9 3f2beb4a     ..E?.g"?..=?J.+?
 23fb85c:	3f3504f3 3f3504f3 3f2beb4a 3f3daef9     ..5?..5?J.+?..=?
 23fb86c:	3f226799 3f45e403 3f187fc0 3f4d9f02     .g"?..E?...?..M?
 23fb87c:	3f0e39da 3f54db31 3f039c3d 3f5b941a     .9.?1.T?=..?..[?
 23fb88c:	3ef15aea 3f61c598 3edae880 3f676bd8     .Z.>..a?...>.kg?
 23fb89c:	3ec3ef15 3f6c835e 3eac7cd4 3f710908     ...>^.l?.|.>..q?
 23fb8ac:	3e94a031 3f74fa0b 3e78cfcc 3f7853f8     1..>..t?..x>.Sx?
 23fb8bc:	3e47c5c2 3f7b14be 3e164083 3f7d3aac     ..G>..{?.@.>.:}?
 23fb8cc:	3dc8bd36 3f7ec46d 3d48fb2f 3f7fb10f     6..=m.~?/.H=...?
 23fb8dc:	00000000 3f800000 bd48fb2f 3f7fb10f     .......?/.H....?
 23fb8ec:	bdc8bd36 3f7ec46d be164083 3f7d3aac     6...m.~?.@...:}?
 23fb8fc:	be47c5c2 3f7b14be be78cfcc 3f7853f8     ..G...{?..x..Sx?
 23fb90c:	be94a031 3f74fa0b beac7cd4 3f710908     1.....t?.|....q?
 23fb91c:	bec3ef15 3f6c835e bedae880 3f676bd8     ....^.l?.....kg?
 23fb92c:	bef15aea 3f61c598 bf039c3d 3f5b941a     .Z....a?=.....[?
 23fb93c:	bf0e39da 3f54db31 bf187fc0 3f4d9f02     .9..1.T?......M?
 23fb94c:	bf226799 3f45e403 bf2beb4a 3f3daef9     .g"...E?J.+...=?
 23fb95c:	bf3504f3 3f3504f3 bf3daef9 3f2beb4a     ..5...5?..=.J.+?
 23fb96c:	bf45e403 3f226799 bf4d9f02 3f187fc0     ..E..g"?..M....?
 23fb97c:	bf54db31 3f0e39da bf5b941a 3f039c3d     1.T..9.?..[.=..?
 23fb98c:	bf61c598 3ef15aea bf676bd8 3edae880     ..a..Z.>.kg....>
 23fb99c:	bf6c835e 3ec3ef15 bf710908 3eac7cd4     ^.l....>..q..|.>
 23fb9ac:	bf74fa0b 3e94a031 bf7853f8 3e78cfcc     ..t.1..>.Sx...x>
 23fb9bc:	bf7b14be 3e47c5c2 bf7d3aac 3e164083     ..{...G>.:}..@.>
 23fb9cc:	bf7ec46d 3dc8bd36 bf7fb10f 3d48fb2f     m.~.6..=..../.H=
 23fb9dc:	bf800000 00000000 bf7fb10f bd48fb2f     ............/.H.
 23fb9ec:	bf7ec46d bdc8bd36 bf7d3aac be164083     m.~.6....:}..@..
 23fb9fc:	bf7b14be be47c5c2 bf7853f8 be78cfcc     ..{...G..Sx...x.
 23fba0c:	bf74fa0b be94a031 bf710908 beac7cd4     ..t.1.....q..|..
 23fba1c:	bf6c835e bec3ef15 bf676bd8 bedae880     ^.l......kg.....
 23fba2c:	bf61c598 bef15aea bf5b941a bf039c3d     ..a..Z....[.=...
 23fba3c:	bf54db31 bf0e39da bf4d9f02 bf187fc0     1.T..9....M.....
 23fba4c:	bf45e403 bf226799 bf3daef9 bf2beb4a     ..E..g"...=.J.+.
 23fba5c:	bf3504f3 bf3504f3 bf2beb4a bf3daef9     ..5...5.J.+...=.
 23fba6c:	bf226799 bf45e403 bf187fc0 bf4d9f02     .g"...E.......M.
 23fba7c:	bf0e39da bf54db31 bf039c3d bf5b941a     .9..1.T.=.....[.
 23fba8c:	bef15aea bf61c598 bedae880 bf676bd8     .Z....a......kg.
 23fba9c:	bec3ef15 bf6c835e beac7cd4 bf710908     ....^.l..|....q.
 23fbaac:	be94a031 bf74fa0b be78cfcc bf7853f8     1.....t...x..Sx.
 23fbabc:	be47c5c2 bf7b14be be164083 bf7d3aac     ..G...{..@...:}.
 23fbacc:	bdc8bd36 bf7ec46d bd48fb2f bf7fb10f     6...m.~./.H.....
 23fbadc:	80000000 bf800000 3d48fb2f bf7fb10f     ......../.H=....
 23fbaec:	3dc8bd36 bf7ec46d 3e164083 bf7d3aac     6..=m.~..@.>.:}.
 23fbafc:	3e47c5c2 bf7b14be 3e78cfcc bf7853f8     ..G>..{...x>.Sx.
 23fbb0c:	3e94a031 bf74fa0b 3eac7cd4 bf710908     1..>..t..|.>..q.
 23fbb1c:	3ec3ef15 bf6c835e 3edae880 bf676bd8     ...>^.l....>.kg.
 23fbb2c:	3ef15aea bf61c598 3f039c3d bf5b941a     .Z.>..a.=..?..[.
 23fbb3c:	3f0e39da bf54db31 3f187fc0 bf4d9f02     .9.?1.T....?..M.
 23fbb4c:	3f226799 bf45e403 3f2beb4a bf3daef9     .g"?..E.J.+?..=.
 23fbb5c:	3f3504f3 bf3504f3 3f3daef9 bf2beb4a     ..5?..5...=?J.+.
 23fbb6c:	3f45e403 bf226799 3f4d9f02 bf187fc0     ..E?.g"...M?....
 23fbb7c:	3f54db31 bf0e39da 3f5b941a bf039c3d     1.T?.9....[?=...
 23fbb8c:	3f61c598 bef15aea 3f676bd8 bedae880     ..a?.Z...kg?....
 23fbb9c:	3f6c835e bec3ef15 3f710908 beac7cd4     ^.l?......q?.|..
 23fbbac:	3f74fa0b be94a031 3f7853f8 be78cfcc     ..t?1....Sx?..x.
 23fbbbc:	3f7b14be be47c5c2 3f7d3aac be164083     ..{?..G..:}?.@..
 23fbbcc:	3f7ec46d bdc8bd36 3f7fb10f bd48fb2f     m.~?6......?/.H.

023fbbdc <twiddleCoef_rfft_256>:
 23fbbdc:	00000000 3f800000 3cc90ab0 3f7fec43     .......?...<C..?
 23fbbec:	3d48fb2f 3f7fb10f 3d96a905 3f7f4e6d     /.H=...?...=mN.?
 23fbbfc:	3dc8bd36 3f7ec46d 3dfab273 3f7e1324     6..=m.~?s..=$.~?
 23fbc0c:	3e164083 3f7d3aac 3e2f10a2 3f7c3b28     .@.>.:}?../>(;|?
 23fbc1c:	3e47c5c2 3f7b14be 3e605c13 3f79c79d     ..G>..{?.\`>..y?
 23fbc2c:	3e78cfcc 3f7853f8 3e888e93 3f76ba07     ..x>.Sx?...>..v?
 23fbc3c:	3e94a031 3f74fa0b 3ea09ae5 3f731447     1..>..t?...>G.s?
 23fbc4c:	3eac7cd4 3f710908 3eb8442a 3f6ed89e     .|.>..q?*D.>..n?
 23fbc5c:	3ec3ef15 3f6c835e 3ecf7bca 3f6a09a7     ...>^.l?.{.>..j?
 23fbc6c:	3edae880 3f676bd8 3ee63375 3f64aa59     ...>.kg?u3.>Y.d?
 23fbc7c:	3ef15aea 3f61c598 3efc5d27 3f5ebe05     .Z.>..a?'].>..^?
 23fbc8c:	3f039c3d 3f5b941a 3f08f59b 3f584853     =..?..[?...?SHX?
 23fbc9c:	3f0e39da 3f54db31 3f13682a 3f514d3d     .9.?1.T?*h.?=MQ?
 23fbcac:	3f187fc0 3f4d9f02 3f1d7fd1 3f49d112     ...?..M?...?..I?
 23fbcbc:	3f226799 3f45e403 3f273656 3f41d870     .g"?..E?V6'?p.A?
 23fbccc:	3f2beb4a 3f3daef9 3f3085bb 3f396842     J.+?..=?..0?Bh9?
 23fbcdc:	3f3504f3 3f3504f3 3f396842 3f3085bb     ..5?..5?Bh9?..0?
 23fbcec:	3f3daef9 3f2beb4a 3f41d870 3f273656     ..=?J.+?p.A?V6'?
 23fbcfc:	3f45e403 3f226799 3f49d112 3f1d7fd1     ..E?.g"?..I?...?
 23fbd0c:	3f4d9f02 3f187fc0 3f514d3d 3f13682a     ..M?...?=MQ?*h.?
 23fbd1c:	3f54db31 3f0e39da 3f584853 3f08f59b     1.T?.9.?SHX?...?
 23fbd2c:	3f5b941a 3f039c3d 3f5ebe05 3efc5d27     ..[?=..?..^?'].>
 23fbd3c:	3f61c598 3ef15aea 3f64aa59 3ee63375     ..a?.Z.>Y.d?u3.>
 23fbd4c:	3f676bd8 3edae880 3f6a09a7 3ecf7bca     .kg?...>..j?.{.>
 23fbd5c:	3f6c835e 3ec3ef15 3f6ed89e 3eb8442a     ^.l?...>..n?*D.>
 23fbd6c:	3f710908 3eac7cd4 3f731447 3ea09ae5     ..q?.|.>G.s?...>
 23fbd7c:	3f74fa0b 3e94a031 3f76ba07 3e888e93     ..t?1..>..v?...>
 23fbd8c:	3f7853f8 3e78cfcc 3f79c79d 3e605c13     .Sx?..x>..y?.\`>
 23fbd9c:	3f7b14be 3e47c5c2 3f7c3b28 3e2f10a2     ..{?..G>(;|?../>
 23fbdac:	3f7d3aac 3e164083 3f7e1324 3dfab273     .:}?.@.>$.~?s..=
 23fbdbc:	3f7ec46d 3dc8bd36 3f7f4e6d 3d96a905     m.~?6..=mN.?...=
 23fbdcc:	3f7fb10f 3d48fb2f 3f7fec43 3cc90ab0     ...?/.H=C..?...<
 23fbddc:	3f800000 00000000 3f7fec43 bcc90ab0     ...?....C..?....
 23fbdec:	3f7fb10f bd48fb2f 3f7f4e6d bd96a905     ...?/.H.mN.?....
 23fbdfc:	3f7ec46d bdc8bd36 3f7e1324 bdfab273     m.~?6...$.~?s...
 23fbe0c:	3f7d3aac be164083 3f7c3b28 be2f10a2     .:}?.@..(;|?../.
 23fbe1c:	3f7b14be be47c5c2 3f79c79d be605c13     ..{?..G...y?.\`.
 23fbe2c:	3f7853f8 be78cfcc 3f76ba07 be888e93     .Sx?..x...v?....
 23fbe3c:	3f74fa0b be94a031 3f731447 bea09ae5     ..t?1...G.s?....
 23fbe4c:	3f710908 beac7cd4 3f6ed89e beb8442a     ..q?.|....n?*D..
 23fbe5c:	3f6c835e bec3ef15 3f6a09a7 becf7bca     ^.l?......j?.{..
 23fbe6c:	3f676bd8 bedae880 3f64aa59 bee63375     .kg?....Y.d?u3..
 23fbe7c:	3f61c598 bef15aea 3f5ebe05 befc5d27     ..a?.Z....^?']..
 23fbe8c:	3f5b941a bf039c3d 3f584853 bf08f59b     ..[?=...SHX?....
 23fbe9c:	3f54db31 bf0e39da 3f514d3d bf13682a     1.T?.9..=MQ?*h..
 23fbeac:	3f4d9f02 bf187fc0 3f49d112 bf1d7fd1     ..M?......I?....
 23fbebc:	3f45e403 bf226799 3f41d870 bf273656     ..E?.g".p.A?V6'.
 23fbecc:	3f3daef9 bf2beb4a 3f396842 bf3085bb     ..=?J.+.Bh9?..0.
 23fbedc:	3f3504f3 bf3504f3 3f3085bb bf396842     ..5?..5...0?Bh9.
 23fbeec:	3f2beb4a bf3daef9 3f273656 bf41d870     J.+?..=.V6'?p.A.
 23fbefc:	3f226799 bf45e403 3f1d7fd1 bf49d112     .g"?..E....?..I.
 23fbf0c:	3f187fc0 bf4d9f02 3f13682a bf514d3d     ...?..M.*h.?=MQ.
 23fbf1c:	3f0e39da bf54db31 3f08f59b bf584853     .9.?1.T....?SHX.
 23fbf2c:	3f039c3d bf5b941a 3efc5d27 bf5ebe05     =..?..[.'].>..^.
 23fbf3c:	3ef15aea bf61c598 3ee63375 bf64aa59     .Z.>..a.u3.>Y.d.
 23fbf4c:	3edae880 bf676bd8 3ecf7bca bf6a09a7     ...>.kg..{.>..j.
 23fbf5c:	3ec3ef15 bf6c835e 3eb8442a bf6ed89e     ...>^.l.*D.>..n.
 23fbf6c:	3eac7cd4 bf710908 3ea09ae5 bf731447     .|.>..q....>G.s.
 23fbf7c:	3e94a031 bf74fa0b 3e888e93 bf76ba07     1..>..t....>..v.
 23fbf8c:	3e78cfcc bf7853f8 3e605c13 bf79c79d     ..x>.Sx..\`>..y.
 23fbf9c:	3e47c5c2 bf7b14be 3e2f10a2 bf7c3b28     ..G>..{.../>(;|.
 23fbfac:	3e164083 bf7d3aac 3dfab273 bf7e1324     .@.>.:}.s..=$.~.
 23fbfbc:	3dc8bd36 bf7ec46d 3d96a905 bf7f4e6d     6..=m.~....=mN..
 23fbfcc:	3d48fb2f bf7fb10f 3cc90ab0 bf7fec43     /.H=.......<C...
 23fbfdc:	6b63694e 6c694220 69760064 6c617573     Nick Bild.visual
 23fbfec:	656c615f 00737472 69647561 6c46006f     _alerts.audio.Fl
 23fbffc:	75427461 72656666 2e312073 302e3231     atBuffers 1.12.0
 23fc00c:	626d6100 6e616c75 62006563 676b6361     .ambulance.backg
 23fc01c:	6e756f72 61640064 7265676e 72696600     round.danger.fir
 23fc02c:	69660065 72746572 006b6375 746f6f66     e.firetruck.foot
 23fc03c:	70657473 61670073 61740073 6e696b6c     steps.gas.talkin
 23fc04c:	72740067 69666661 6f760063 7b206469     g.traffic.void {
 23fc05c:	6e6f6e61 756f6d79 3a3a7d73 615f6965     anonymous}::ei_a
 23fc06c:	6e67696c 665f6465 28656572 64696f76     ligned_free(void
 23fc07c:	2f00292a 656d6f68 63696e2f 6f732f6b     *)./home/nick/so
 23fc08c:	61777466 762f6572 61757369 6c615f6c     ftware/visual_al
 23fc09c:	2f747265 75736976 615f6c61 7472656c     ert/visual_alert
 23fc0ac:	6e695f73 65726566 6e69636e 732f2f67     s_inferencing//s
 23fc0bc:	652f6372 2d656764 75706d69 2d65736c     rc/edge-impulse-
 23fc0cc:	2f6b6473 73616c63 69666973 652f7265     sdk/classifier/e
 23fc0dc:	6c615f69 656e6769 616d5f64 636f6c6c     i_aligned_malloc
 23fc0ec:	2800682e 67696c61 2026206e 696c6128     .h.(align & (ali
 23fc0fc:	2d206e67 29293120 203d3d20 6f760030     gn - 1)) == 0.vo
 23fc10c:	202a6469 6f6e617b 6f6d796e 3a7d7375     id* {anonymous}:
 23fc11c:	5f69653a 67696c61 5f64656e 6c6c6163     :ei_aligned_call
 23fc12c:	7328636f 5f657a69 73202c74 5f657a69     oc(size_t, size_
 23fc13c:	46002974 656c6961 6f742064 6c6c6120     t).Failed to all
 23fc14c:	7461636f 46542065 6574694c 65726120     ocate TFLite are
 23fc15c:	2820616e 6f727265 6f632072 25206564     na (error code %
 23fc16c:	000a2964 3a525245 706e6920 74207475     d)..ERR: input t
 23fc17c:	6f736e65 61682072 69732073 2520657a     ensor has size %
 23fc18c:	62202c64 69207475 7475706e 74616d20     d, but input mat
 23fc19c:	20786972 20736168 20736168 657a6973     rix has has size
 23fc1ac:	0a642520 52524500 6143203a 746f6e6e      %d..ERR: Cannot
 23fc1bc:	6e616820 20656c64 75706e69 79742074      handle input ty
 23fc1cc:	28206570 0a296425 52524500 6f4d203a     pe (%d)..ERR: Mo
 23fc1dc:	656c6962 2074654e 20445353 6e207369     bileNet SSD is n
 23fc1ec:	7320746f 6f707075 64657472 206e6920     ot supported in 
 23fc1fc:	204e4f45 5420726f 6f736e65 6f6c4672     EON or TensorFlo
 23fc20c:	694c2077 4d206574 6f726369 5245000a     w Lite Micro..ER
 23fc21c:	49203a52 6c61766e 6f206469 75707475     R: Invalid outpu
 23fc22c:	79742074 28206570 20296425 20726f66     t type (%d) for 
 23fc23c:	4f4c4f59 6c203576 20747361 6579616c     YOLOv5 last laye
 23fc24c:	45000a72 203a5252 75736e55 726f7070     r..ERR: Unsuppor
 23fc25c:	20646574 656a626f 64207463 63657465     ted object detec
 23fc26c:	6e6f6974 73616c20 616c2074 20726579     tion last layer 
 23fc27c:	29642528 7325000a 5000093a 69646572     (%d)..%s:..Predi
 23fc28c:	6f697463 2820736e 656d6974 6425203a     ctions (time: %d
 23fc29c:	2e736d20 000a3a29 65676445 706d4920      ms.):..Edge Imp
 23fc2ac:	65736c75 666e6920 6e657265 72206563     ulse inference r
 23fc2bc:	656e6e75 6f662072 61502072 63697472     unner for Partic
 23fc2cc:	6420656c 63697665 0a0d7365 4d445000     le devices...PDM
 23fc2dc:	63656420 7265646f 696e6920 72652074      decoder init er
 23fc2ec:	64253d72 666e4900 6e657265 676e6963     r=%d.Inferencing
 23fc2fc:	74657320 676e6974 000a3a73 746e4909      settings:...Int
 23fc30c:	61767265 25203a6c 2066322e 0a2e736d     erval: %.2f ms..
 23fc31c:	72460900 20656d61 657a6973 6425203a     ..Frame size: %d
 23fc32c:	5309000a 6c706d61 656c2065 6874676e     ...Sample length
 23fc33c:	6425203a 2e736d20 4e09000a 6f202e6f     : %d ms....No. o
 23fc34c:	6c632066 65737361 25203a73 46000a64     f classes: %d..F
 23fc35c:	656c6961 6f742064 61747320 50207472     ailed to start P
 23fc36c:	00214d44 3a525245 756f4320 6e20646c     DM!.ERR: Could n
 23fc37c:	6120746f 636f6c6c 20657461 69647561     ot allocate audi
 23fc38c:	7562206f 72656666 69732820 2520657a     o buffer (size %
 23fc39c:	202c2964 73696874 756f6320 6220646c     d), this could b
 23fc3ac:	75642065 6f742065 65687420 6e697720     e due to the win
 23fc3bc:	20776f64 676e656c 6f206874 6f792066     dow length of yo
 23fc3cc:	6d207275 6c65646f 54000a0d 6e696d69     ur model...Timin
 23fc3dc:	44203a67 25205053 736d2064 6e69202c     g: DSP %d ms, in
 23fc3ec:	65726566 2065636e 6d206425 61202c73     ference %d ms, a
 23fc3fc:	616d6f6e 2520796c 736d2064 50000a0d     nomaly %d ms...P
 23fc40c:	69646572 6f697463 0d3a736e 2020000a     redictions:...  
 23fc41c:	203a7325 352e2500 000a0d66 6d690001     %s: .%.5f.....im
 23fc42c:	74726f70 73696420 79616c70 7474000a     port display..tt
 23fc43c:	64203d20 6c707369 542e7961 28747865      = display.Text(
 23fc44c:	2c220022 30353220 3531202c 30202c30     ".", 250, 150, 0
 23fc45c:	66666678 29666666 6964000a 616c7073     xffffff)..displa
 23fc46c:	68732e79 7428776f 000a2974 72470004     y.show(tt)....Gr
 23fc47c:	63737961 00656c61 3a525245 69614620     ayscale.ERR: Fai
 23fc48c:	2064656c 72206f74 44206e75 70205053     led to run DSP p
 23fc49c:	65636f72 28207373 0a296425 63657600     rocess (%d)..vec
 23fc4ac:	3a726f74 5f4d5f3a 676e6172 68635f65     tor::_M_range_ch
 23fc4bc:	3a6b6365 6e5f5f20 68772820 20686369     eck: __n (which 
 23fc4cc:	25207369 2029757a 74203d3e 2d736968     is %zu) >= this-
 23fc4dc:	7a69733e 20292865 69687728 69206863     >size() (which i
 23fc4ec:	7a252073 45002975 203a5252 6c756f57     s %zu).ERR: Woul
 23fc4fc:	72772064 20657469 7374756f 20656469     d write outside 
 23fc50c:	74616566 20657275 66667562 000a7265     feature buffer..
 23fc51c:	6e6e7552 20676e69 75706d69 2e65736c     Running impulse.
 23fc52c:	000a2e2e 3a525245 6b6e5520 6e776f6e     ....ERR: Unknown
 23fc53c:	74786520 74636172 6e756620 6f697463      extract functio
 23fc54c:	6f202c6e 20796c6e 4343464d 464d202c     n, only MFCC, MF
 23fc55c:	6e612045 70732064 72746365 6172676f     E and spectrogra
 23fc56c:	7573206d 726f7070 0a646574 460a0d00     m supported....F
 23fc57c:	75746165 20736572 20642528 292e736d     eatures (%d ms.)
 23fc58c:	4500203a 203a5252 6e766d63 61662077     : .ERR: cmvnw fa
 23fc59c:	64656c69 64252820 45000a29 203a5252     iled (%d)..ERR: 
 23fc5ac:	6d726f6e 7a696c61 6f697461 6166206e     normalization fa
 23fc5bc:	64656c69 64252820 25000a29 4c422064     iled (%d)..%d BL
 23fc5cc:	65642045 65636976 6f662073 00646e75     E devices found.
 23fc5dc:	3a43414d 32302520 30253a58 253a5832     MAC: %02X:%02X:%
 23fc5ec:	3a583230 58323025 3230253a 30253a58     02X:%02X:%02X:%0
 23fc5fc:	7c205832 53535220 25203a49 006d4264     2X | RSSI: %dBm.
 23fc60c:	65766441 73697472 20676e69 656d616e     Advertising name
 23fc61c:	7325203a 6e6f6d00 656c636f 79725400     : %s.monocle.Try
 23fc62c:	20676e69 6e6e6f63 69746365 2e2e6e6f     ing connection..
 23fc63c:	0a73252e 63755300 73736563 6c6c7566     .%s..Successfull
 23fc64c:	6f632079 63656e6e 21646574 6536000a     y connected!..6e
 23fc65c:	30303034 622d3230 2d336135 33393366     400002-b5a3-f393
 23fc66c:	6130652d 35652d39 34326530 61636364     -e0a9-e50e24dcca
 23fc67c:	43006539 61726168 72657463 69747369     9e.Characteristi
 23fc68c:	6f662063 2e646e75 5245000a 3a524f52     c found...ERROR:
 23fc69c:	61686320 74636172 73697265 20636974      characteristic 
 23fc6ac:	20544f4e 6e756f66 4d000a64 636f6e6f     NOT found..Monoc
 23fc6bc:	6320656c 656e6e6f 6f697463 6166206e     le connection fa
 23fc6cc:	64656c69 53000a2e 74726174 20676e69     iled...Starting 
 23fc6dc:	65666e69 636e6572 20676e69 6e6f6f73     inferencing soon
 23fc6ec:	0a2e2e2e 63655200 6964726f 2e2e676e     .....Recording..
 23fc6fc:	53000a2e 6c706d61 69742065 203a656d     ...Sample time: 
 23fc70c:	0a0d6425 63655200 6964726f 6420676e     %d...Recording d
 23fc71c:	0a656e6f 52524500 6146203a 64656c69     one..ERR: Failed
 23fc72c:	206f7420 206e7572 73616c63 69666973      to run classifi
 23fc73c:	28207265 0a296425 6e757200 616c635f     er (%d)..run_cla
 23fc74c:	66697373 20726569 75746572 64656e72     ssifier returned
 23fc75c:	6425203a 76000a0d 6f746365 5f3a3a72     : %d...vector::_
 23fc76c:	65725f4d 6f6c6c61 6e695f63 74726573     M_realloc_insert
 23fc77c:	74756f00 74616d5f 20786972 6425203d     .out_matrix = %d
 23fc78c:	0a642578 6c616300 616c7563 20646574     x%d..calculated 
 23fc79c:	657a6973 25203d20 64257864 754e000a     size = %dx%d..Nu
 23fc7ac:	63206c6c 6b636568 69616620 0a64656c     ll check failed.
 23fc7bc:	67697200 3c207468 776f7020 735f7265     .right < power_s
 23fc7cc:	74636570 5f6d7572 6d617266 69735f65     pectrum_frame_si
 23fc7dc:	7300657a 69746174 6e692063 69652074     ze.static int ei
 23fc7ec:	70733a3a 68636565 3a3a7970 74616566     ::speechpy::feat
 23fc7fc:	3a657275 65666d3a 3a696528 74616d3a     ure::mfe(ei::mat
 23fc80c:	5f786972 202c2a74 3a3a6965 7274616d     rix_t*, ei::matr
 23fc81c:	745f7869 65202c2a 733a3a69 616e6769     ix_t*, ei::signa
 23fc82c:	2a745f6c 6975202c 3233746e 202c745f     l_t*, uint32_t, 
 23fc83c:	616f6c66 66202c74 74616f6c 6975202c     float, float, ui
 23fc84c:	3631746e 202c745f 746e6975 745f3631     nt16_t, uint16_t
 23fc85c:	6975202c 3233746e 202c745f 746e6975     , uint32_t, uint
 23fc86c:	745f3233 6975202c 3631746e 0029745f     32_t, uint16_t).
 23fc87c:	6d6f682f 696e2f65 732f6b63 7774666f     /home/nick/softw
 23fc88c:	2f657261 75736976 615f6c61 7472656c     are/visual_alert
 23fc89c:	7369762f 5f6c6175 72656c61 695f7374     /visual_alerts_i
 23fc8ac:	7265666e 69636e65 2f2f676e 2f637273     nferencing//src/
 23fc8bc:	65676465 706d692d 65736c75 6b64732d     edge-impulse-sdk
 23fc8cc:	7073642f 6570732f 70686365 65662f79     /dsp/speechpy/fe
 23fc8dc:	72757461 70682e65 52450070 4d203a52     ature.hpp.ERR: M
 23fc8ec:	66204546 656c6961 25282064 000a2964     FE failed (%d)..

023fc8fc <_ZTVN5spark10LogHandlerE>:
	...
 23fc90c:	023ea545 023edb49                       E.>.I.>.

023fc914 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fc91c:	023edf29 023edf5d 023f5ed5 023f607d     ).>.].>..^?.}`?.

023fc92c <_ZL18ei_learning_blocks>:
 23fc92c:	023ef24d 023fc950 00000000              M.>.P.?.....

023fc938 <_ZL24ei_config_tflite_graph_5>:
 23fc938:	00000001 023f0e09 023f0fcd 023f1015     ......?...?...?.
 23fc948:	023f0fb5 023f0fc1                       ..?...?.

023fc950 <_ZL26ei_learning_block_config_5>:
 23fc950:	00000001 00000005 0100ff00 00010102     ................
 23fc960:	023fc938                                8.?.

023fc964 <_ZN2eiL25quantized_values_one_zeroE>:
 23fc964:	00000000 3c23d70a 3ca3d70a 3cf5c28f     ......#<...<...<
 23fc974:	3d23d70a 3d3a2e8c 3d430c31 3d4ccccd     ..#=..:=1.C=..L=
 23fc984:	3d579436 3d638e39 3d70f0f1 3d75c28f     6.W=9.c=..p=..u=
 23fc994:	3d800000 3d888889 3d8f5c29 3d924925     ...=...=)\.=%I.=
 23fc9a4:	3d9d89d9 3da3d70a 3daaaaab 3db851ec     ...=...=...=.Q.=
 23fc9b4:	3dba2e8c 3dc30c31 3dcccccd 3dd79436     ...=1..=...=6..=
 23fc9c4:	3de147ae 3de38e39 3df0f0f1 3df5c28f     .G.=9..=...=...=
 23fc9d4:	3e000000 3e051eb8 3e088889 3e0ba2e9     ...>...>...>...>
 23fc9e4:	3e0f5c29 3e124925 3e19999a 3e1d89d9     )\.>%I.>...>...>
 23fc9f4:	3e21af28 3e23d70a 3e2aaaab 3e2e147b     (.!>..#>..*>{..>
 23fca04:	3e34b4b5 3e3851ec 3e3a2e8c 3e400000     ..4>.Q8>..:>..@>
 23fca14:	3e428f5c 3e430c31 3e4ccccd 3e570a3d     \.B>1.C>..L>=.W>
 23fca24:	3e579436 3e5b6db7 3e6147ae 3e638e39     6.W>.m[>.Ga>9.c>
 23fca34:	3e68ba2f 3e6b851f 3e6c4ec5 3e70f0f1     /.h>..k>.Nl>..p>
 23fca44:	3e73cf3d 3e75c28f 3e800000 3e851eb8     =.s>..u>...>...>
 23fca54:	3e86bca2 3e888889 3e8a3d71 3e8ba2e9     ...>...>q=.>...>
 23fca64:	3e8e38e4 3e8f5c29 3e924925 3e947ae1     .8.>)\.>%I.>.z.>
 23fca74:	3e969697 3e99999a 3e9d89d9 3e9eb852     ...>...>...>R..>
 23fca84:	3ea00000 3ea1af28 3ea2e8ba 3ea3d70a     ...>(..>...>...>
 23fca94:	3ea8f5c3 3eaaaaab 3eae147b 3eb33333     ...>...>{..>33.>
 23fcaa4:	3eb4b4b5 3eb6db6e 3eb851ec 3eba2e8c     ...>n..>.Q.>...>
 23fcab4:	3ebca1af 3ebd70a4 3ec00000 3ec28f5c     ...>.p.>...>\..>
 23fcac4:	3ec30c31 3ec4ec4f 3ec71c72 3ec7ae14     1..>O..>r..>...>
 23fcad4:	3ecccccd 3ed1745d 3ed1eb85 3ed2d2d3     ...>]t.>...>...>
 23fcae4:	3ed55555 3ed70a3d 3ed79436 3edb6db7     UU.>=..>6..>.m.>
 23fcaf4:	3edc28f6 3ee00000 3ee147ae 3ee38e39     .(.>...>.G.>9..>
 23fcb04:	3ee66666 3ee8ba2f 3eeb851f 3eec4ec5     ff.>/..>...>.N.>
 23fcb14:	3eeeeeef 3ef0a3d7 3ef0f0f1 3ef286bd     ...>...>...>...>
 23fcb24:	3ef3cf3d 3ef5c28f 3efae148 3f000000     =..>...>H..>...?
 23fcb34:	3f028f5c 3f051eb8 3f061862 3f06bca2     \..?...?b..?...?
 23fcb44:	3f078788 3f07ae14 3f088889 3f09d89e     ...?...?...?...?
 23fcb54:	3f0a3d71 3f0ba2e9 3f0ccccd 3f0e38e4     q=.?...?...?.8.?
 23fcb64:	3f0f5c29 3f100000 3f11eb85 3f124925     )\.?...?...?%I.?
 23fcb74:	3f1435e5 3f147ae1 3f155555 3f169697     .5.?.z.?UU.?...?
 23fcb84:	3f170a3d 3f1745d1 3f19999a 3f1c28f6     =..?.E.?...?.(.?
 23fcb94:	3f1c71c7 3f1d89d9 3f1e79e8 3f1eb852     .q.?...?.y.?R..?
 23fcba4:	3f200000 3f2147ae 3f21af28 3f22e8ba     .. ?.G!?(.!?.."?
 23fcbb4:	3f23d70a 3f249249 3f25a5a6 3f266666     ..#?I.$?..%?ff&?
 23fcbc4:	3f28f5c3 3f2aaaab 3f2b851f 3f2e147b     ..(?..*?..+?{..?
 23fcbd4:	3f2e8ba3 3f2f286c 3f300000 3f30a3d7     ...?l(/?..0?..0?
 23fcbe4:	3f313b14 3f333333 3f34b4b5 3f35c28f     .;1?333?..4?..5?
 23fcbf4:	3f36db6e 3f3851ec 3f38e38e 3f3a2e8c     n.6?.Q8?..8?..:?
 23fcc04:	3f3ae148 3f3bbbbc 3f3ca1af 3f3d70a4     H.:?..;?..<?.p=?
 23fcc14:	3f400000 3f428f5c 3f430c31 3f43c3c4     ..@?\.B?1.C?..C?
 23fcc24:	3f44ec4f 3f451eb8 3f45d174 3f471c72     O.D?..E?t.E?r.G?
 23fcc34:	3f47ae14 3f492492 3f4a1af3 3f4a3d71     ..G?.$I?..J?q=J?
 23fcc44:	3f4ccccd 3f4f3cf4 3f4f5c29 3f500000     ..L?.<O?)\O?..P?
 23fcc54:	3f51745d 3f51eb85 3f52d2d3 3f547ae1     ]tQ?..Q?..R?.zT?
 23fcc64:	3f555555 3f570a3d 3f579436 3f589d8a     UUU?=.W?6.W?..X?
 23fcc74:	3f59999a 3f5b6db7 3f5c28f6 3f5d1746     ..Y?.m[?.(\?F.]?
 23fcc84:	3f5dddde 3f5eb852 3f600000 3f6147ae     ..]?R.^?..`?.Ga?
 23fcc94:	3f61e1e2 3f638e39 3f63d70a 3f650d79     ..a?9.c?..c?y.e?
 23fcca4:	3f666666 3f679e7a 3f68ba2f 3f68f5c3     fff?z.g?/.h?..h?
 23fccb4:	3f6aaaab 3f6b851f 3f6c4ec5 3f6db6db     ..j?..k?.Nl?..m?
 23fccc4:	3f6e147b 3f6eeeef 3f700000 3f70a3d7     {.n?..n?..p?..p?
 23fccd4:	3f70f0f1 3f71c71c 3f7286bd 3f733333     ..p?..q?..r?33s?
 23fcce4:	3f73cf3d 3f745d17 3f75c28f 3f7851ec     =.s?.]t?..u?.Qx?
 23fccf4:	3f7ae148 3f7d70a4 3f800000 3f800000     H.z?.p}?...?...?
 23fcd04:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
 23fcd14:	3f800000 3f800000 3f800000 3a525245     ...?...?...?ERR:
 23fcd24:	74654720 736e6554 6320726f 656c6c61      GetTensor calle
 23fcd34:	65622064 646e6f79 58414d20 4c46545f     d beyond MAX_TFL
 23fcd44:	4156455f 4f435f4c 20544e55 29642528     _EVAL_COUNT (%d)
 23fcd54:	5245000a 47203a52 65547465 726f736e     ..ERR: GetTensor
 23fcd64:	6c616320 2064656c 6f796562 4d20646e      called beyond M
 23fcd74:	545f5841 545f4c46 4f534e45 4f435f52     AX_TFL_TENSOR_CO
 23fcd84:	20544e55 29642528 5245000a 46203a52     UNT (%d)..ERR: F
 23fcd94:	656c6961 6f742064 6c6c6120 7461636f     ailed to allocat
 23fcda4:	65702065 73697372 746e6574 66756220     e persistent buf
 23fcdb4:	20726566 7320666f 20657a69 202c6425     fer of size %d, 
 23fcdc4:	73656f64 746f6e20 74696620 206e6920     does not fit in 
 23fcdd4:	736e6574 6120726f 616e6572 646e6120     tensor arena and
 23fcde4:	61657220 64656863 5f494520 5f58414d      reached EI_MAX_
 23fcdf4:	5245564f 574f4c46 4655425f 5f524546     OVERFLOW_BUFFER_
 23fce04:	4e554f43 45000a54 203a5252 6c696146     COUNT..ERR: Fail
 23fce14:	74206465 6c61206f 61636f6c 70206574     ed to allocate p
 23fce24:	69737265 6e657473 75622074 72656666     ersistent buffer
 23fce34:	20666f20 657a6973 0a642520 52524500      of size %d..ERR
 23fce44:	6146203a 64656c69 206f7420 6f6c6c61     : Failed to allo
 23fce54:	65746163 72637320 68637461 66756220     cate scratch buf
 23fce64:	20726566 7320666f 20657a69 202c6425     fer of size %d, 
 23fce74:	63616572 20646568 4d5f4945 535f5841     reached EI_MAX_S
 23fce84:	54415243 425f4843 45464655 4f435f52     CRATCH_BUFFER_CO
 23fce94:	0a544e55 52524500 6146203a 64656c69     UNT..ERR: Failed
 23fcea4:	206f7420 6f6c6c61 65746163 72637320      to allocate scr
 23fceb4:	68637461 66756220 20726566 7320666f     atch buffer of s
 23fcec4:	20657a69 000a6425 3a525245 69616620     ize %d..ERR: fai
 23fced4:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
 23fcee4:	736e6574 6120726f 616e6572 5245000a     tensor arena..ER
 23fcef4:	74203a52 6f736e65 72612072 20616e65     R: tensor arena 
 23fcf04:	74207369 73206f6f 6c6c616d 6f64202c     is too small, do
 23fcf14:	6e207365 6620746f 6d207469 6c65646f     es not fit model
 23fcf24:	65202d20 206e6576 68746977 2074756f      - even without 
 23fcf34:	61726373 20686374 66667562 0a737265     scratch buffers.
 23fcf44:	00000000                                ....

023fcf48 <_ZN12_GLOBAL__N_1L11quant0_zeroE>:
 23fcf48:	00000001 ffffff80                       ........

023fcf50 <_ZN12_GLOBAL__N_1L11quant6_zeroE>:
 23fcf50:	00000001 00000000                       ........

023fcf58 <_ZN12_GLOBAL__N_1L11quant7_zeroE>:
 23fcf58:	00000001 00000000                       ........

023fcf60 <_ZN12_GLOBAL__N_1L11quant8_zeroE>:
 23fcf60:	00000010 00000000 00000000 00000000     ................
	...

023fcfa4 <_ZN12_GLOBAL__N_1L11quant9_zeroE>:
 23fcfa4:	00000010 00000000 00000000 00000000     ................
	...

023fcfe8 <_ZN12_GLOBAL__N_1L12quant0_scaleE>:
 23fcfe8:	00000001 3b800000                       .......;

023fcff0 <_ZN12_GLOBAL__N_1L12quant10_zeroE>:
 23fcff0:	00000008 00000000 00000000 00000000     ................
	...

023fd014 <_ZN12_GLOBAL__N_1L12quant11_zeroE>:
 23fd014:	00000008 00000000 00000000 00000000     ................
	...

023fd038 <_ZN12_GLOBAL__N_1L12quant12_zeroE>:
 23fd038:	00000001 ffffff80                       ........

023fd040 <_ZN12_GLOBAL__N_1L12quant13_zeroE>:
 23fd040:	00000001 ffffff80                       ........

023fd048 <_ZN12_GLOBAL__N_1L12quant14_zeroE>:
 23fd048:	00000001 ffffff80                       ........

023fd050 <_ZN12_GLOBAL__N_1L12quant15_zeroE>:
 23fd050:	00000001 ffffff80                       ........

023fd058 <_ZN12_GLOBAL__N_1L12quant16_zeroE>:
 23fd058:	00000001 ffffff80                       ........

023fd060 <_ZN12_GLOBAL__N_1L12quant17_zeroE>:
 23fd060:	00000001 ffffff80                       ........

023fd068 <_ZN12_GLOBAL__N_1L12quant18_zeroE>:
 23fd068:	00000001 ffffff80                       ........

023fd070 <_ZN12_GLOBAL__N_1L12quant19_zeroE>:
 23fd070:	00000001 ffffff80                       ........

023fd078 <_ZN12_GLOBAL__N_1L12quant20_zeroE>:
 23fd078:	00000001 ffffff80                       ........

023fd080 <_ZN12_GLOBAL__N_1L12quant21_zeroE>:
 23fd080:	00000001 0000003a                       ....:...

023fd088 <_ZN12_GLOBAL__N_1L12quant22_zeroE>:
 23fd088:	00000001 ffffff80                       ........

023fd090 <_ZN12_GLOBAL__N_1L12quant6_scaleE>:
 23fd090:	00000001 39cc2375                       ....u#.9

023fd098 <_ZN12_GLOBAL__N_1L12quant7_scaleE>:
 23fd098:	00000001 3c348482                       ......4<

023fd0a0 <_ZN12_GLOBAL__N_1L12quant8_scaleE>:
 23fd0a0:	00000010 38efa6de 39193acf 39101135     .......8.:.95..9
 23fd0b0:	38ea3ca0 394285e0 38d7b35e 3924564b     .<.8..B9^..8KV$9
 23fd0c0:	38d9919c 38abaaaa 38b3eb00 391a7a88     ...8...8...8.z.9
 23fd0d0:	3934ae76 3932aab8 38a6eef6 38c999a0     v.49..29...8...8
 23fd0e0:	390bd79d                                ...9

023fd0e4 <_ZN12_GLOBAL__N_1L12quant9_scaleE>:
 23fd0e4:	00000010 3bbb2485 3bef4ff5 3be100a0     .....$.;.O.;...;
 23fd0f4:	3bb6ea03 3c17e6dc 3ba87078 3c005470     ...;...<xp.;pT.<
 23fd104:	3ba9e5ed 3b860daf 3b8c7f32 3bf1434b     ...;...;2..;KC.;
 23fd114:	3c0d17d4 3c0b8517 3b825b79 3b9d6da5     ...<...<y[.;.m.;
 23fd124:	3bda6767 00000000 00000000              gg.;........

023fd130 <_ZN12_GLOBAL__N_1L12tensor_data1E>:
 23fd130:	00000001 00000001 00000063 00000028     ........c...(...

023fd140 <_ZN12_GLOBAL__N_1L12tensor_data2E>:
 23fd140:	00000001 00000063 00000001 00000008     ....c...........

023fd150 <_ZN12_GLOBAL__N_1L12tensor_data3E>:
 23fd150:	00000001 00000001 00000032 00000008     ........2.......

023fd160 <_ZN12_GLOBAL__N_1L12tensor_data4E>:
 23fd160:	00000001 00000032 00000001 00000010     ....2...........

023fd170 <_ZN12_GLOBAL__N_1L12tensor_data5E>:
 23fd170:	ffffffff 00000190 00000000 00000000     ................

023fd180 <_ZN12_GLOBAL__N_1L12tensor_data6E>:
 23fd180:	ffffff09 000002c1 fffffb9f ffffff3b     ............;...
 23fd190:	ffffffca 00000253 fffffec4 fffffc2d     ....S.......-...
 23fd1a0:	000002eb 00000000 00000000 00000000     ................

023fd1b0 <_ZN12_GLOBAL__N_1L12tensor_data7E>:
 23fd1b0:	fcbfe1ec 06f10d0b 0010fff8 d0efb9f4     ................
 23fd1c0:	0df1e80d 10ee070f 1f230505 e4ecec1e     ..........#.....
 23fd1d0:	03e10e10 050c0e07 fe1f0108 f3fdf60a     ................
 23fd1e0:	fbfe19f8 0ced120c 03201509 e8fbdb02     .......... .....
 23fd1f0:	0af9070d fef10b0e 1517ff0d e205f60e     ................
 23fd200:	19fa05ef 0af2021a 21160804 cef0edf0     ...........!....
 23fd210:	0af008dc 03e8030a 1814ff15 c7eef4ee     ................
 23fd220:	eceef4f1 fee90206 fb14120a caeee0f8     ................
 23fd230:	eae805f8 06b20c04 02210602 b406df00     ..........!.....
 23fd240:	f7eae70f f8de0804 0f2208f7 c207f211     ..........".....
 23fd250:	ec01fe1a 11e41009 0f1a06ff c0040513     ................
 23fd260:	f401050d 0eed16fd 0d110903 c50303fb     ................
 23fd270:	e7f409f4 06ee0e09 fd120d0b be06eaff     ................
 23fd280:	14f9fe08 11da0d0b 30fe1111 bbfcf30d     ...........0....
 23fd290:	0bfb0f14 0df3090d 1ff305fa dc00ed08     ................
 23fd2a0:	05e608fd 0afd0cf3 150e0806 f4fceef7     ................
 23fd2b0:	1cec1d0e 07eb0df5 2f120806 d3fad605     .........../....
 23fd2c0:	10e215f5 fae70b03 1f1bf90f f000f5fd     ................
 23fd2d0:	18ea13ee 04f9071a 170bfb06 eef90bff     ................
 23fd2e0:	03e9fbec 00070212 f81c0ffb e3f4f1e6     ................
 23fd2f0:	f3e2f2f1 02ee0f0f fe221afe c3f8dfee     ..........".....
 23fd300:	fedff6f0 00ed110c 03290d0d b1deccf8     ..........).....
 23fd310:	eae9f208 10f3170d fd280401 b1f1fb12     ..........(.....
 23fd320:	f001031b 14e318fa 09230507 bc11e510     ..........#.....
 23fd330:	e2f6fdfc 0de7fc02 0d29fafa d5f8ebf3     ..........).....
 23fd340:	15b0fdd1 fbaceee8 161cfbd1 01bca5f0     ................
 23fd350:	188118d1 f5b0e7f3 150ff5bb 18bc96f8     ................
 23fd360:	16a72ad5 f2b8efd0 1305e2bc 0ec082df     .*..............
 23fd370:	159d1de6 e0c6f3c2 0407f2d1 18d0b6ef     ................
 23fd380:	13ea1fd9 dadfd4c9 0ddfeedf 19e4b6ec     ................
 23fd390:	0ced21f4 e1e0c1db 0af2f6eb 24e5be07     .!.............$
 23fd3a0:	0cdb17f2 dad4f4c8 0bfef8e2 06d4caed     ................
 23fd3b0:	1ae116f5 e2e8d9b4 09e8eee9 10d0b0ea     ................
 23fd3c0:	0ecc1103 dcd0f1c9 11f6f5f0 13d1b9f8     ................
 23fd3d0:	0d091f07 e1c3f4b8 14e0e5cf 1c050615     ................
 23fd3e0:	10fa1f0e edd8e3b2 14f3e8de 1afcfddb     ................
 23fd3f0:	13b72bd1 d0c7e0e5 11fce7e1 1699a5e6     .+..............
 23fd400:	0bb622dd d7ccd9bb 09e3f8cf 08c3b8d4     ."..............
 23fd410:	15ae22c5 d1bfdbdf 16f4e7e6 13b49cf6     ."..............
 23fd420:	12bd1fed dad5cae7 1400f0e0 11ce9ef7     ................
 23fd430:	0d1b2707 dbe1dfb6 08f6f5dc 1909dbe3     .'..............
 23fd440:	0c060df5 cfd2d4af 0afe03e1 0f10e1e3     ................
 23fd450:	15ff09e6 cbbfdba9 1104fecd 1be6c3f1     ................
 23fd460:	13da20f2 d3d9c9c8 0d02f3e4 12eeadf9     . ..............
 23fd470:	1b061ee1 ddddeccd 1016f6ef 14dab7f7     ................
 23fd480:	17e21df0 d4f3d3c7 0afcf8e6 11e5b401     ................
 23fd490:	0e021700 d3e5ce8c 07fbf5dc 10eedbd6     ................
 23fd4a0:	13ef17ef cfbdd5ba 14feffe4 15d3cbe6     ................
 23fd4b0:	07c635fb cebad1b0 1c17eddd 13da9fc1     .5..............
 23fd4c0:	0ce727d1 cdd3eedd 0a03f2e4 12c9c806     .'..............
 23fd4d0:	040ef5fc 1620de07 0c151806 05070cff     ...... .........
 23fd4e0:	f805f504 0e02dee1 f0ca1704 f8e409e6     ................
 23fd4f0:	dad8e60c 14fbe9e5 febf0318 d2fc13f7     ................
 23fd500:	f0f4e813 07f4ebe3 fed30108 eef80d00     ................
 23fd510:	02e5d612 0405e4d3 2313020b e00202f5     ...........#....
 23fd520:	fef6f70e 00fef7e6 1b0bfb04 db130f04     ................
 23fd530:	00e5e413 0a0100ee 150002fd f7081905     ................
 23fd540:	f0e2f51a 090e0b04 0b1211f9 e7111210     ................
 23fd550:	f8fde6fd 0311030b 100b0423 f8132202     ........#...."..
 23fd560:	f1f6fb14 0a18efe5 eed80b1b f30019fd     ................
 23fd570:	02effc06 0105efe0 14e5040b f3fa07fa     ................
 23fd580:	0cebf702 fdfde80d 14fbfd0f e7f6090a     ................
 23fd590:	fee4c410 0b090104 02fdf414 ea061bf5     ................
 23fd5a0:	f6fce405 15fcfbed 10070110 d00d16fb     ................
 23fd5b0:	ddf4df00 010df6e1 15080110 cdff13ff     ................
 23fd5c0:	08f1d407 0502ee10 3314020a e2fe152a     ...........3*...
 23fd5d0:	05e8e011 18140a0f 25021015 e1160b0c     ...........%....
 23fd5e0:	f4f5e802 090a0fe9 1719181f b80801ff     ................
 23fd5f0:	e8e7ed0a 06e800f1 1cff1509 b118f903     ................
 23fd600:	00e9f210 05f6efea 12eefc18 d0040806     ................
 23fd610:	efe5eb0e 05f9f4e2 14010601 d7060911     ................
 23fd620:	f201e510 01e6fdec 0ff5f90d d211031f     ................
 23fd630:	03e0dee6 06fae4f5 1dff09fe e6fc0c08     ................
 23fd640:	f4d2c2f0 0507e5f0 0af50d05 edf0f800     ................
 23fd650:	07070ad7 150de409 00111d0a e40a0df4     ................
 23fd660:	110d09f9 ea08f2e9 faf2dbfb 23f5f9cb     ...............#
 23fd670:	0f1f03d8 de0defe2 d6f0e4f6 20e1ffc6     ............... 
 23fd680:	0c1a10c3 eb05e90f ebe7e2e4 12e80bed     ................
 23fd690:	111009f6 f311e6f0 e3ea0ff5 10ef0fd5     ................
 23fd6a0:	0a0d0d10 020d0fe5 f40405f5 08f810da     ................
 23fd6b0:	fd10fe1a 0dfe10f0 cee1f3f3 f703f5ea     ................
 23fd6c0:	f106f9f9 fd01dbf4 d5d2fef8 0bf3f5f2     ................
 23fd6d0:	0123f5dd e4ffc5d7 bfea00ff 12e106bd     ..#.............
 23fd6e0:	ff0d12c5 ef05e51c d4f1f7fd 14e7eef0     ................
 23fd6f0:	061c03cf 0213ea10 f300fa04 2dd9f9cf     ...............-
 23fd700:	0f0e06d7 0d05f216 dceefbf4 11d103f7     ................
 23fd710:	ec150707 fb0cf611 c8f0fcfe 08ed03de     ................
 23fd720:	f6240aef f1fcf0e0 a7f6e9ec 09df10d9     ..$.............
 23fd730:	f81311d8 ea0fe8df ade6fbf1 0fdc05ba     ................
 23fd740:	1a1c19d9 df18d5ee d4daeaf9 0fee18bf     ................
 23fd750:	fb221222 f50e06bc c2e2e309 16e526fe     "."..........&..
 23fd760:	f111ff15 ff000abf d2e8f3f3 100517eb     ................
 23fd770:	002e09e8 f20ef8cd cce7f8f4 06f50dbf     ................
 23fd780:	ed05f1c1 f20fe6d8 b3effb02 08e401c1     ................
 23fd790:	fffe00d2 f508eee8 c7ee00f9 0cf1ebb3     ................
 23fd7a0:	f804ec0c f20beeee d0cdf4ee 0bf609ba     ................
 23fd7b0:	f517f6ef e90cfaf0 c8fc07f7 15fc18f1     ................
 23fd7c0:	132b16e7 fc19edec c2faebf7 150d16d4     ..+.............
 23fd7d0:	0b120bda eb1ce4e9 ceefe2f3 1bf1f6e5     ................
 23fd7e0:	0208fbfa f40debfa d4fb08ef 10ff09e0     ................
 23fd7f0:	fa0610ff 0a09090d e40e111b e5f7eded     ................
 23fd800:	d2f306e1 0d110a10 bc021315 d8f6f4ed     ................
 23fd810:	ebf0f4db 0e0bfb00 e5070e16 ecffddf9     ................
 23fd820:	f0eee5f8 0c04fd08 e6fb0717 e6e9fc0b     ................
 23fd830:	dbff12d5 fc05fe0a d00e0d1e eefa05eb     ................
 23fd840:	ddf1fbe0 fd030707 c20e0c17 ece4eae2     ................
 23fd850:	e3f8e1f4 11fb0103 c111060e e6d8e001     ................
 23fd860:	ee0603f7 0cfa040c 0c05090f f4fadd05     ................
 23fd870:	fceadff5 0a040002 f301080f ece4ece0     ................
 23fd880:	f3f40ed7 fefeff08 0ffb0e0e e6edcbe9     ................
 23fd890:	e500fadb fef8f200 f315090b e7e6dbf8     ................
 23fd8a0:	def1e80c 0706f70d f00e0d12 d720ed22     ............". .
 23fd8b0:	cc00030d 060b050a fc07fd16 e119de17     ................
 23fd8c0:	ecf000f6 070f0402 bb030714 03f5f010     ................
 23fd8d0:	e7fb11e7 06fa1209 f11e050e f1e1dbff     ................
 23fd8e0:	cdf102e3 fae70e09 f3050115 dce8ded5     ................
 23fd8f0:	d7edf1d7 ffe408ff dc00fe0b e8e2ede3     ................
 23fd900:	e8e8f31b 03fdf806 d6110809 e7fbf4fb     ................
 23fd910:	f905ec12 09041413 f60a0a0e ff01f6f8     ................
 23fd920:	fdf6f1ef 08f0fd00 ff060007 f2f6f30f     ................
 23fd930:	0bfc03ed 1301f816 1f070c14 ebedeef9     ................
 23fd940:	04d8f5d4 0f06050d fd09071a e4e1e8eb     ................
 23fd950:	f3e6ffe6 05e1f510 f6ff0c0c d9f1e6fb     ................
 23fd960:	f1edf5dd 0ee2ef0e e511161d cef8e3f5     ................
 23fd970:	20fc081e 09162920 f40a1921 da0a1724     ...  )..!...$...
 23fd980:	0bca1805 f3f6eafe 06d9e804 04fdd0fc     ................
 23fd990:	0ee01108 f713ec1c 0ecbf70b 14f6e004     ................
 23fd9a0:	03f800ff ff09eb0c 0be3e80e 10fbf809     ................
 23fd9b0:	16d10bfd fd0cf414 1709ddea 1b04e700     ................
 23fd9c0:	0af816f1 f40fef19 0605f8fb 08f5f506     ................
 23fd9d0:	11df23fb ed080210 0bf1ed0f 0df5f0f9     .#..............
 23fd9e0:	0dfcfe04 070ced02 0af3f50f 15e8ebf0     ................
 23fd9f0:	0ae8fdf2 f7030a13 0a08f104 0ccaefff     ................
 23fda00:	14dd05ef ec10d90b 0400e7f5 0ff7d9fc     ................
 23fda10:	09dd0c1a f40df512 061bdef7 13fff215     ................
 23fda20:	10d2fa09 ecf8e4f8 0cfadcea 0ffee805     ................
 23fda30:	0eda03f3 fff6eef9 15fcc9f5 0beff403     ................
 23fda40:	13db1804 edffe002 0fe6e30f 0c04da04     ................
 23fda50:	15f212fc e209c811 0bdfeaf6 11fcecff     ................
 23fda60:	0fe60207 ebf9e700 0ad8dbfa 11f9f510     ................
 23fda70:	0ad10905 fd05e104 13f3d4f9 0d1ce517     ................
 23fda80:	0fea0b07 f005eaef 07efe108 0ee1ebfc     ................
 23fda90:	12d90607 f202ed14 05d9eaf0 11eef1ff     ................
 23fdaa0:	0efa0b17 f404e0ed 0edccbfa 1304ef0a     ................
 23fdab0:	0fe10606 f40bddf8 01d1dc02 16db0200     ................
 23fdac0:	11ef0ff2 ee07e2ff fddbe305 1fe8e00b     ................
 23fdad0:	18da02fe f406d5fb 01dee5fb 02f9d419     ................
 23fdae0:	1ce10617 f20de9e6 14d6dc04 10fbfc07     ................
 23fdaf0:	0dfbfd07 e6fcddef 15e2e0f6 0f13ea05     ................
 23fdb00:	09f3eff1 d4f1e7b5 04e4e5fe 1be3dfed     ................
 23fdb10:	0811d4bc dc0addf4 101407eb f9fa1a12     ................
 23fdb20:	0d0de0dd d00feff6 1e2c0aeb f5140a08     ..........,.....
 23fdb30:	fe1be4d4 f11bf5fe 181211f3 f61403e5     ................
 23fdb40:	010cf1ca e10ef7f7 151a1503 f90b0aed     ................
 23fdb50:	011ee0d1 f314ebf4 18eb09f8 f724130e     ..............$.
 23fdb60:	0d0ce1c9 e00ef1e6 0cf908ff fffafc00     ................
 23fdb70:	ff15d2da da0701f1 1712feea fd0ff7f4     ................
 23fdb80:	100bfce1 ef12ed07 2407f8eb 000a160a     ...........$....
 23fdb90:	fcfaeaed e00cf6e3 fbfd0afe 010305f4     ................
 23fdba0:	f30ff2c5 d810e2d2 ecf80f04 f81709d1     ................
 23fdbb0:	0713ddcf e61fe3d1 09f2170d fe1f0adc     ................
 23fdbc0:	f517dad1 df19d7e6 09f81ff2 00210cf0     ..............!.
 23fdbd0:	081fdfc0 cf0eecf3 262206fd 001a01da     .........."&....
 23fdbe0:	0208d9cf cb16e3f9 1423edf4 0a0a06f8     ..........#.....
 23fdbf0:	fd08e3d4 d502e2e3 07f8ef00 fd030ae7     ................
 23fdc00:	0515e2d4 dd0bea03 fef805fc 01040b03     ................
 23fdc10:	ff0aecde ed0ef0f0 01f2fcf7 05030501     ................
 23fdc20:	010cebd0 dc0dede9 fe03f5f8 fe0d18e7     ................
 23fdc30:	f71cd7d7 cf0bd9f6 05e30bfd 061b1400     ................
 23fdc40:	fa0becdf ec08eddc 04fe04f2 090303ef     ................
 23fdc50:	040de1eb ce07f8ee 180af9ee 06231d23     ............#.#.
 23fdc60:	fb17efee f30ef2fe 0ce5ebe5 fc0203f3     ................
 23fdc70:	f8fefcd7 c808f0df eaea10f4 f81b0ce4     ................
 23fdc80:	fa09fcd4 d312e0d1 01ed1004 090914df     ................
 23fdc90:	fa16fbd5 c602ecd8 fbe10700 0d0219e8     ................
 23fdca0:	061bf506 f80407ea e8fae4eb ff0d2704     .............'..
 23fdcb0:	fd25f904 f20c15e8 fff8eee4 f52020f9     ..%..........  .
 23fdcc0:	e726fd02 f60108f4 e501e9fa fc0cf901     ..&.............
 23fdcd0:	f22f020a f01c07ef f004e2e6 fc021505     ../.............
 23fdce0:	0419f30b f2fb08fb f4f9f4ee f4090508     ................
 23fdcf0:	ff1bd502 ff0800f9 ed09f0db fe0d0a07     ................
 23fdd00:	f31c0d0b ef08fdf2 f607e5e6 fe131912     ................
 23fdd10:	0222080d f216eff2 04dbebea 0f0f1800     ..".............
 23fdd20:	f922f905 fb15f3e7 eef3f6fe f60d1607     ..".............
 23fdd30:	fe26e704 f603f802 f70ae6fc 04091000     ..&.............
 23fdd40:	f818f40b f3110212 06ecefef 07170d02     ................
 23fdd50:	fe1b00ff fb0dedfc ef08f4ff 0b040c00     ................
 23fdd60:	fe0c0b01 f4f1011b 051cf301 fdf40b0b     ................
 23fdd70:	0214f115 f90c01fa eb07fcf5 03100403     ................
 23fdd80:	eb0cd806 fdfa01f8 cffbfbe2 ec0d0f00     ................
 23fdd90:	f628fcfe fa04fa12 d8edf5f3 fd020bf4     ..(.............
 23fdda0:	fc1df9fc fb10f312 dcf5f5f0 01030707     ................
 23fddb0:	f624fb13 f803f7ff e103f60d f41a15f0     ..$.............
 23fddc0:	fd22f602 040509f7 f7fcf5f3 010afe0e     ..".............
 23fddd0:	f526fd15 f8140eff ed07f7fd 071a1010     ..&.............
 23fdde0:	0a25120c f41107f0 e5ee05f6 011b100a     ..%.............
 23fddf0:	ff1d1706 f70af909 fddaf203 ff1d100f     ................
 23fde00:	fc1ef70d f614f303 eee3e2fa 0012180d     ................
 23fde10:	f514100b 0104e216 f000f2f7 fd111a1f     ................
 23fde20:	f506000b f3050209 ec01f0fa 05fcf4f4     ................
 23fde30:	cce8e432 05dd17f3 f2caf3e3 ea13081b     2...............
 23fde40:	c5d9ee0f 03be12e6 dbcafcd0 d90f0909     ................
 23fde50:	cbf3040f 06b40405 f0d0f1fa cf16f71f     ................
 23fde60:	dbf20311 04d30a00 eefef7f4 ef18f412     ................
 23fde70:	d0fc0416 02cf150a d9d203ef d705e404     ................
 23fde80:	e1fefd19 0bef17ed ecc3eecb e8fbfd0f     ................
 23fde90:	c9f2eb0d 07d619f7 f1e2f1db e50a110f     ................
 23fdea0:	e1effe09 04e11603 f5eafbdd ee040807     ................
 23fdeb0:	d6e1f511 feee1005 e0d5f7da db01f80d     ................
 23fdec0:	ddedfc15 03dd0cf5 f0e001da e7fe010f     ................
 23fded0:	d4d6fc12 06d40f19 d5dffffc e4faf9fc     ................
 23fdee0:	bfebf3fe 03d30b05 d9e1fdfa df01f802     ................
 23fdef0:	c0ebfe12 01befc0a e4d909ee d9fd0609     ................
 23fdf00:	bef6ff0a 08df0b07 e5f5feea d10a0705     ................
 23fdf10:	dbdff516 fdef090a e7ed03ed e70b0a0e     ................
 23fdf20:	d8e4ff00 06cd0507 f1dcfeef e505fd0e     ................
 23fdf30:	caef010a 0ace0e18 dde2010f dafbf8f3     ................
 23fdf40:	cbf1f502 fbd0160b d3cc10f1 d8f7e308     ................
 23fdf50:	c5e3f60c 0ced0eeb d1dbfaea ebf4fc02     ................
 23fdf60:	b6dcf80f 04d70e10 cfe209eb d204f305     ................
 23fdf70:	c7e3ed12 0ed51606 cdd301db c903f000     ................
 23fdf80:	bec6000a 0cd816fb c7bd03ca d0ffff0f     ................
 23fdf90:	bddaf80f 12dd0efe dee4f8e1 d405f306     ................
 23fdfa0:	d1e8ee05 16cf0f16 dfdf0de2 c1f6f308     ................
 23fdfb0:	f6d4f315 09c80be7 ffb401d4 f10cff0a     ................

023fdfc0 <_ZN12_GLOBAL__N_1L12tensor_data8E>:
 23fdfc0:	000000c9 00000477 fffff725 000006fc     ....w...%.......
 23fdfd0:	fffffd79 0000012d fffff782 fffff497     y...-...........
 23fdfe0:	ffffec2f fffff0ad fffffd76 00000146     /.......v...F...
 23fdff0:	fffffed7 ffffedfa fffff6e3 00000dde     ................

023fe000 <_ZN12_GLOBAL__N_1L12tensor_data9E>:
 23fe000:	f71c5e03 ee9f00b4 e4b946f6 c1c102c3     .^.......F......
 23fe010:	e2ec7ffa e394fbb5 bad9aaf6 eccde414     ................
 23fe020:	8ff981fd 14f4e319 88f89444 05cfdbfa     ........D.......
 23fe030:	350a1808 dff896d3 49191853 f01a81d9     ...5....S..I....
 23fe040:	00092af3 c8008ae3 a050c717 01c9e761     .*........P.a...
 23fe050:	4735cd09 f6d7f342 c57ffde4 e60be04f     ..5GB.......O...
 23fe060:	ea0ab2f2 102cef0b f12bbdf7 f8280e12     ......,...+...(.
 23fe070:	0d7ffc03 0e132703 3be61693 14c9f3e7     .....'.....;....
 23fe080:	fcbd4381 e59c3b29 3fbc5983 03a117f1     .C..);...Y.?....
 23fe090:	2d73113a 000905e8 e24c030d fcfbfdf0     :.s-......L.....
 23fe0a0:	477ffbf7 d8c401f0 a3fb52f5 0c7e32fb     ...G.....R...2~.
 23fe0b0:	1a364303 20711e36 d5e220fd fb7f113f     .C6.6.q . ..?...
 23fe0c0:	00fece48 5130ff15 0e81c21e 74a8fb1c     H.....0Q.......t
 23fe0d0:	eef6e118 1cd33a0f 6aefc31b e9293885     .....:.....j.8).
 23fe0e0:	ee93d314 f1e4fdc9 7fb3ec07 14cc3efb     .............>..
 23fe0f0:	7faee4ac ff4ffd4d 4ebee29c 1027f928     ....M.O....N(.'.
 23fe100:	5c9ee4ae 1f270a0e 39d9eaf6 ee24ed79     ...\..'....9y.$.
 23fe110:	0b3bd1f2 f529e77f 2ce1ddf1 f115e720     ..;...)...., ...
 23fe120:	17d81df4 ec3ef6fb fcc617f7 e80e06ef     ......>.........
 23fe130:	f97f48fa fe00ed0f 1caf1c2a bcddfe90     .H......*.......
 23fe140:	46c1547f b6c7cd99 517e66f0 d4ecbec2     .T.F.....f~Q....
 23fe150:	1f3050fd bbf506d4 424a7ff6 adfbecc0     .P0.......JB....
 23fe160:	58deee28 afb8d0e4 fc43094c dcbdc4f4     (..X....L.C.....
 23fe170:	db56ee12 d9cbc703 cc7fe5fe e3c6d8e9     ..V.............

023fe180 <_ZN12_GLOBAL__N_1L13quant10_scaleE>:
 23fe180:	00000008 3780c5af 37a12c38 37a4c0f8     .......78,.7...7
 23fe190:	378fc9ae 37ca219f 375cff74 37954a88     ...7.!.7t.\7.J.7
 23fe1a0:	3786a713                                ...7

023fe1a4 <_ZN12_GLOBAL__N_1L13quant11_scaleE>:
 23fe1a4:	00000008 3b80c5af 3ba12c38 3ba4c0f8     .......;8,.;...;
 23fe1b4:	3b8fc9ae 3bca219f 3b5cff74 3b954a88     ...;.!.;t.\;.J.;
 23fe1c4:	3b86a713                                ...;

023fe1c8 <_ZN12_GLOBAL__N_1L13quant12_scaleE>:
 23fe1c8:	00000001 3b800000                       .......;

023fe1d0 <_ZN12_GLOBAL__N_1L13quant13_scaleE>:
 23fe1d0:	00000001 3ca3ea2a                       ....*..<

023fe1d8 <_ZN12_GLOBAL__N_1L13quant14_scaleE>:
 23fe1d8:	00000001 3ca3ea2a                       ....*..<

023fe1e0 <_ZN12_GLOBAL__N_1L13quant15_scaleE>:
 23fe1e0:	00000001 3ca3ea2a                       ....*..<

023fe1e8 <_ZN12_GLOBAL__N_1L13quant16_scaleE>:
 23fe1e8:	00000001 3ca3ea2a                       ....*..<

023fe1f0 <_ZN12_GLOBAL__N_1L13quant17_scaleE>:
 23fe1f0:	00000001 3d10bfb9                       .......=

023fe1f8 <_ZN12_GLOBAL__N_1L13quant18_scaleE>:
 23fe1f8:	00000001 3d10bfb9                       .......=

023fe200 <_ZN12_GLOBAL__N_1L13quant19_scaleE>:
 23fe200:	00000001 3d10bfb9                       .......=

023fe208 <_ZN12_GLOBAL__N_1L13quant20_scaleE>:
 23fe208:	00000001 3d10bfb9                       .......=

023fe210 <_ZN12_GLOBAL__N_1L13quant21_scaleE>:
 23fe210:	00000001 3f071097                       .......?

023fe218 <_ZN12_GLOBAL__N_1L13quant22_scaleE>:
 23fe218:	00000001 3b800000                       .......;

023fe220 <_ZN12_GLOBAL__N_1L13tensor_data10E>:
 23fe220:	0000154a 0000234c 00000c17 ffffe1e9     J...L#..........
 23fe230:	000033f4 ffff8ad8 fffff882 ffffa89f     .3..............

023fe240 <_ZN12_GLOBAL__N_1L13tensor_data11E>:
 23fe240:	5116e3fe 23722912 b7efd6db ccbaa4dd     ...Q.)r#........
 23fe250:	10d7afcb 200ffe4b e5151816 490b1825     ....K.. ....%..I
 23fe260:	11524056 fd17fe1c 61d7b8ec 427b1027     V@R........a'.{B
 23fe270:	1e0fcdf8 e701f581 5ddad401 0413220d     ...........]."..
 23fe280:	073707f1 591a3040 2c2d312a e4e02e35     ..7.@0.Y*1-,5...
 23fe290:	3437b811 ff10e945 b6aff6d3 b0be91c3     ..74E...........
 23fe2a0:	16fa9ea3 02f1e147 0dd2e4f6 effb1cf5     ....G...........
 23fe2b0:	fe182a35 f4152bf3 4b562dad 5c0a7f31     5*...+...-VK1..\
 23fe2c0:	d8eff822 e72ce921 2c37ffc4 1d37e70d     "...!.,...7,..7.
 23fe2d0:	e3e0f605 c1f505e7 0ce7d4a9 ba11d7bd     ................
 23fe2e0:	27133803 5454673f e4e8e52e 05dde20c     .8.'?gTT........
 23fe2f0:	f7f5eff7 0a101f0c de0505d4 e3e519ed     ................
 23fe300:	e7dae6b1 a909eebe 064a0f13 3b57661d     ..........J..fW;
 23fe310:	0cd8fdec e702ee27 f62729e1 260202e2     ....'....)'....&
 23fe320:	19e83215 d108d8eb 10c99dc1 f2f8fbf6     .2..............
 23fe330:	e0bb3167 e9d5c2c2 cd04e28d e5a8e90e     g1..............
 23fe340:	1cfbdb49 ecdcee50 9ea0bdd0 02c0c6cf     I...P...........
 23fe350:	cd0b0bba 0b30cffe dae1f173 ca04ede9     ......0.s.......
 23fe360:	bd1fb4d5 d9ec08bc 2c01c6e4 d9c2072c     ...........,,...
 23fe370:	b696e998 02c2bfb2 aebef0b1 f2e7d2ae     ................
 23fe380:	01b7ce41 3d5d3a48 2e1a0f26 3135582b     A...H:]=&...+X51
 23fe390:	29601b3e 450a407f f8f8df27 4b594820     >.`).@.E'... HYK
 23fe3a0:	094c2a54 6c545043 09472b3b f720f943     T*L.CPTl;+G.C. .
 23fe3b0:	c3f7ec64 1c5408c7 e3486063 10f6fce0     d.....T.c`H.....
 23fe3c0:	0d3b1e13 414c257b 02dac7f3 0dcf2f00     ..;.{%LA...../..
 23fe3d0:	e8ffc6cf aef0e609 b4bff044 eb55c488     ........D.....U.
 23fe3e0:	dd22654f 04c1d3d1 0e27d2f6 4f54f54b     Oe".......'.K.TO
 23fe3f0:	e1b0abe7 e62c0c0d 01570c35 d4f91f2f     ......,.5.W./...
 23fe400:	ad131507 1b08ef81 e8194e37 e2a0d88e     ........7N......
 23fe410:	281fe1d6 f043ce56 d99395bc e5d3f809     ...(V.C.........
 23fe420:	c39add6c f1aee3bc 362cfddd 2d16381e     l.........,6.8.-
 23fe430:	e4d7d9ea 0dd3050d 24e5e818 16fbf029     ...........$)...
 23fe440:	ea0812f3 1af3f803 86d3f544 b7dad1c5     ........D.......
 23fe450:	2e39f8f5 feff3500 eff8fae4 23fd270c     ..9..5.......'.#
 23fe460:	fce90923 24e80c04 0a0df8e2 0ce0dff9     #......$........
 23fe470:	bb83d27f d5c1cea5 392feec6 0ff4421e     ........../9.B..
 23fe480:	fbedd7de f9e1121c 00cace22 e0170af9     ........".......
 23fe490:	13dc1d1b eef5ed26 0cca33eb f3c6caeb     ....&....3......
 23fe4a0:	75053112 2a266b63 0f140ee4 d84709c6     .1.uck&*......G.
 23fe4b0:	070499f4 51af11d4 fc22d62d f2110ffc     .......Q-.".....
 23fe4c0:	29f6f1ab f2d0bbeb 1ef8ee02 332e7f5f     ...)........_..3
 23fe4d0:	2152fc22 3b30f70c 18cfe7cc 11d2eb0f     ".R!..0;........
 23fe4e0:	e9dc01f8 d3d05417 e613f425 e2eadbeb     .....T..%.......
 23fe4f0:	5d433f28 3b1a7652 a919dc3f 2df24600     (?C]Rv.;?....F.-
 23fe500:	1526abec 4df7c60d c7d3a90f 3cfa0804     ..&....M.......<
 23fe510:	e7e72410 cce0e6cf f1d9c2dc 123ffbd5     .$............?.
 23fe520:	05507f2b 09ef05df 0c3e0cfc e003df05     +.P.......>.....
 23fe530:	f2a8ae10 e6e602bb ed20eb05 0f0c25ca     .......... ..%..
 23fe540:	15e30905 125c20c6 2e663523 f2e9c2e1     ..... \.#5f.....
 23fe550:	160e3be2 2825e1e3 faadf2d8 f4e0020f     .;....%(........
 23fe560:	b9bbd7f6 d7d0b5a0 c2c30220 ef16dcd5     ........ .......
 23fe570:	ee45274d ed0abbe3 f8e10212 05f814e6     M'E.............
 23fe580:	03cceff4 09d3bdc9 29f1cc24 0eced705     ........$..)....
 23fe590:	0d4bffe3 32f0dd4f f0ed2622 e0bf12e3     ..K.O..2"&......
 23fe5a0:	12dec809 0c041918 dafd3e58 f6ecf71a     ........X>......
 23fe5b0:	03b0ace7 2901a7b0 134d3902 1bdf0c48     .......).9M.H...
 23fe5c0:	db08f10c 030516f0 08d4cbe8 1ee7de07     ................
 23fe5d0:	0229225a 16cd1810 019a81ce fef0aab7     Z").............
 23fe5e0:	3f1e32e9 4c1b2516 f91e1f36 120925ef     .2.?.%.L6....%..
 23fe5f0:	12f30ac8 4e250eea 0be50617 21f3ede1     ......%N.......!

023fe600 <_ZN12_GLOBAL__N_1L17tensor_dimension0E>:
 23fe600:	00000002 00000001 00000f78              ........x...

023fe60c <_ZN12_GLOBAL__N_1L17tensor_dimension1E>:
 23fe60c:	00000001 00000004                       ........

023fe614 <_ZN12_GLOBAL__N_1L17tensor_dimension2E>:
 23fe614:	00000001 00000004                       ........

023fe61c <_ZN12_GLOBAL__N_1L17tensor_dimension3E>:
 23fe61c:	00000001 00000004                       ........

023fe624 <_ZN12_GLOBAL__N_1L17tensor_dimension4E>:
 23fe624:	00000001 00000004                       ........

023fe62c <_ZN12_GLOBAL__N_1L17tensor_dimension5E>:
 23fe62c:	00000001 00000002                       ........

023fe634 <_ZN12_GLOBAL__N_1L17tensor_dimension6E>:
 23fe634:	00000001 00000009                       ........

023fe63c <_ZN12_GLOBAL__N_1L17tensor_dimension7E>:
 23fe63c:	00000002 00000009 00000190              ............

023fe648 <_ZN12_GLOBAL__N_1L17tensor_dimension8E>:
 23fe648:	00000001 00000010                       ........

023fe650 <_ZN12_GLOBAL__N_1L17tensor_dimension9E>:
 23fe650:	00000004 00000010 00000001 00000003     ................
 23fe660:	00000008                                ....

023fe664 <_ZN12_GLOBAL__N_1L18tensor_dimension10E>:
 23fe664:	00000001 00000008                       ........

023fe66c <_ZN12_GLOBAL__N_1L18tensor_dimension11E>:
 23fe66c:	00000004 00000008 00000001 00000003     ................
 23fe67c:	00000028                                (...

023fe680 <_ZN12_GLOBAL__N_1L18tensor_dimension12E>:
 23fe680:	00000004 00000001 00000001 00000063     ............c...
 23fe690:	00000028                                (...

023fe694 <_ZN12_GLOBAL__N_1L18tensor_dimension13E>:
 23fe694:	00000004 00000001 00000001 00000063     ............c...
 23fe6a4:	00000008                                ....

023fe6a8 <_ZN12_GLOBAL__N_1L18tensor_dimension14E>:
 23fe6a8:	00000004 00000001 00000063 00000001     ........c.......
 23fe6b8:	00000008                                ....

023fe6bc <_ZN12_GLOBAL__N_1L18tensor_dimension15E>:
 23fe6bc:	00000004 00000001 00000032 00000001     ........2.......
 23fe6cc:	00000008                                ....

023fe6d0 <_ZN12_GLOBAL__N_1L18tensor_dimension16E>:
 23fe6d0:	00000004 00000001 00000001 00000032     ............2...
 23fe6e0:	00000008                                ....

023fe6e4 <_ZN12_GLOBAL__N_1L18tensor_dimension17E>:
 23fe6e4:	00000004 00000001 00000001 00000032     ............2...
 23fe6f4:	00000010                                ....

023fe6f8 <_ZN12_GLOBAL__N_1L18tensor_dimension18E>:
 23fe6f8:	00000004 00000001 00000032 00000001     ........2.......
 23fe708:	00000010                                ....

023fe70c <_ZN12_GLOBAL__N_1L18tensor_dimension19E>:
 23fe70c:	00000004 00000001 00000019 00000001     ................
 23fe71c:	00000010                                ....

023fe720 <_ZN12_GLOBAL__N_1L18tensor_dimension20E>:
 23fe720:	00000002 00000001 00000190              ............

023fe72c <_ZN12_GLOBAL__N_1L18tensor_dimension21E>:
 23fe72c:	00000002 00000001 00000009              ............

023fe738 <_ZN12_GLOBAL__N_1L18tensor_dimension22E>:
 23fe738:	00000002 00000001 00000009              ............

023fe744 <_ZN12_GLOBAL__N_1L6quant0E>:
 23fe744:	023fcfe8 023fcf48 00000000              ..?.H.?.....

023fe750 <_ZN12_GLOBAL__N_1L6quant6E>:
 23fe750:	023fd090 023fcf50 00000000              ..?.P.?.....

023fe75c <_ZN12_GLOBAL__N_1L6quant7E>:
 23fe75c:	023fd098 023fcf58 00000000              ..?.X.?.....

023fe768 <_ZN12_GLOBAL__N_1L6quant8E>:
 23fe768:	023fd0a0 023fcf60 00000000              ..?.`.?.....

023fe774 <_ZN12_GLOBAL__N_1L6quant9E>:
 23fe774:	023fd0e4 023fcfa4 00000000              ..?...?.....

023fe780 <_ZN12_GLOBAL__N_1L7inputs0E>:
 23fe780:	00000002 00000000 00000001              ............

023fe78c <_ZN12_GLOBAL__N_1L7inputs1E>:
 23fe78c:	00000003 0000000c 0000000b 0000000a     ................

023fe79c <_ZN12_GLOBAL__N_1L7inputs2E>:
 23fe79c:	00000002 0000000d 00000002              ............

023fe7a8 <_ZN12_GLOBAL__N_1L7inputs3E>:
 23fe7a8:	00000001 0000000e                       ........

023fe7b0 <_ZN12_GLOBAL__N_1L7inputs4E>:
 23fe7b0:	00000002 0000000f 00000003              ............

023fe7bc <_ZN12_GLOBAL__N_1L7inputs5E>:
 23fe7bc:	00000003 00000010 00000009 00000008     ................

023fe7cc <_ZN12_GLOBAL__N_1L7inputs6E>:
 23fe7cc:	00000002 00000011 00000004              ............

023fe7d8 <_ZN12_GLOBAL__N_1L7inputs7E>:
 23fe7d8:	00000001 00000012                       ........

023fe7e0 <_ZN12_GLOBAL__N_1L7inputs8E>:
 23fe7e0:	00000002 00000013 00000005              ............

023fe7ec <_ZN12_GLOBAL__N_1L7inputs9E>:
 23fe7ec:	00000003 00000014 00000007 00000006     ................

023fe7fc <_ZN12_GLOBAL__N_1L7opdata0E>:
	...

023fe820 <_ZN12_GLOBAL__N_1L7opdata1E>:
 23fe820:	00000001 00000001 00000001 00000001     ................
 23fe830:	00000001 00000001                       ........

023fe838 <_ZN12_GLOBAL__N_1L7opdata2E>:
	...

023fe85c <_ZN12_GLOBAL__N_1L7opdata3E>:
 23fe85c:	00000001 00000001 00000002 00000001     ................
 23fe86c:	00000002 00000000 00000000 00000000     ................
	...

023fe884 <_ZN12_GLOBAL__N_1L7opdata4E>:
	...

023fe8a8 <_ZN12_GLOBAL__N_1L7opdata5E>:
 23fe8a8:	00000001 00000001 00000001 00000001     ................
 23fe8b8:	00000001 00000001                       ........

023fe8c0 <_ZN12_GLOBAL__N_1L7opdata6E>:
	...

023fe8e4 <_ZN12_GLOBAL__N_1L7opdata7E>:
 23fe8e4:	00000001 00000001 00000002 00000001     ................
 23fe8f4:	00000002 00000000 00000000 00000000     ................
	...

023fe90c <_ZN12_GLOBAL__N_1L7opdata8E>:
	...

023fe930 <_ZN12_GLOBAL__N_1L7opdata9E>:
 23fe930:	00000000                                ....

023fe934 <_ZN12_GLOBAL__N_1L7quant10E>:
 23fe934:	023fe180 023fcff0 00000000              ..?...?.....

023fe940 <_ZN12_GLOBAL__N_1L7quant11E>:
 23fe940:	023fe1a4 023fd014 00000000              ..?...?.....

023fe94c <_ZN12_GLOBAL__N_1L7quant12E>:
 23fe94c:	023fe1c8 023fd038 00000000              ..?.8.?.....

023fe958 <_ZN12_GLOBAL__N_1L7quant13E>:
 23fe958:	023fe1d0 023fd040 00000000              ..?.@.?.....

023fe964 <_ZN12_GLOBAL__N_1L7quant14E>:
 23fe964:	023fe1d8 023fd048 00000000              ..?.H.?.....

023fe970 <_ZN12_GLOBAL__N_1L7quant15E>:
 23fe970:	023fe1e0 023fd050 00000000              ..?.P.?.....

023fe97c <_ZN12_GLOBAL__N_1L7quant16E>:
 23fe97c:	023fe1e8 023fd058 00000000              ..?.X.?.....

023fe988 <_ZN12_GLOBAL__N_1L7quant17E>:
 23fe988:	023fe1f0 023fd060 00000000              ..?.`.?.....

023fe994 <_ZN12_GLOBAL__N_1L7quant18E>:
 23fe994:	023fe1f8 023fd068 00000000              ..?.h.?.....

023fe9a0 <_ZN12_GLOBAL__N_1L7quant19E>:
 23fe9a0:	023fe200 023fd070 00000000              ..?.p.?.....

023fe9ac <_ZN12_GLOBAL__N_1L7quant20E>:
 23fe9ac:	023fe208 023fd078 00000000              ..?.x.?.....

023fe9b8 <_ZN12_GLOBAL__N_1L7quant21E>:
 23fe9b8:	023fe210 023fd080 00000000              ..?...?.....

023fe9c4 <_ZN12_GLOBAL__N_1L7quant22E>:
 23fe9c4:	023fe218 023fd088 00000000              ..?...?.....

023fe9d0 <_ZN12_GLOBAL__N_1L8inputs10E>:
 23fe9d0:	00000001 00000015                       ........

023fe9d8 <_ZN12_GLOBAL__N_1L8nodeDataE>:
 23fe9d8:	023fe780 023fea8c 023fe7fc 00000000     ..?...?...?.....
 23fe9e8:	023fe78c 023fea94 023fe820 00000001     ..?...?. .?.....
 23fe9f8:	023fe79c 023fea9c 023fe838 00000000     ..?...?.8.?.....
 23fea08:	023fe7a8 023feaa4 023fe85c 00000002     ..?...?.\.?.....
 23fea18:	023fe7b0 023feaac 023fe884 00000000     ..?...?...?.....
 23fea28:	023fe7bc 023feab4 023fe8a8 00000001     ..?...?...?.....
 23fea38:	023fe7cc 023feabc 023fe8c0 00000000     ..?...?...?.....
 23fea48:	023fe7d8 023feac4 023fe8e4 00000002     ..?...?...?.....
 23fea58:	023fe7e0 023feacc 023fe90c 00000000     ..?...?...?.....
 23fea68:	023fe7ec 023fead4 023fe930 00000003     ..?...?.0.?.....
 23fea78:	023fe9d0 023feadc 023fea88 00000004     ..?...?...?.....

023fea88 <_ZN12_GLOBAL__N_1L8opdata10E>:
 23fea88:	3f800000                                ...?

023fea8c <_ZN12_GLOBAL__N_1L8outputs0E>:
 23fea8c:	00000001 0000000c                       ........

023fea94 <_ZN12_GLOBAL__N_1L8outputs1E>:
 23fea94:	00000001 0000000d                       ........

023fea9c <_ZN12_GLOBAL__N_1L8outputs2E>:
 23fea9c:	00000001 0000000e                       ........

023feaa4 <_ZN12_GLOBAL__N_1L8outputs3E>:
 23feaa4:	00000001 0000000f                       ........

023feaac <_ZN12_GLOBAL__N_1L8outputs4E>:
 23feaac:	00000001 00000010                       ........

023feab4 <_ZN12_GLOBAL__N_1L8outputs5E>:
 23feab4:	00000001 00000011                       ........

023feabc <_ZN12_GLOBAL__N_1L8outputs6E>:
 23feabc:	00000001 00000012                       ........

023feac4 <_ZN12_GLOBAL__N_1L8outputs7E>:
 23feac4:	00000001 00000013                       ........

023feacc <_ZN12_GLOBAL__N_1L8outputs8E>:
 23feacc:	00000001 00000014                       ........

023fead4 <_ZN12_GLOBAL__N_1L8outputs9E>:
 23fead4:	00000001 00000015                       ........

023feadc <_ZN12_GLOBAL__N_1L9outputs10E>:
 23feadc:	00000001 00000016 6d6f682f 696e2f65     ......../home/ni
 23feaec:	732f6b63 7774666f 2f657261 75736976     ck/software/visu
 23feafc:	615f6c61 7472656c 7369762f 5f6c6175     al_alert/visual_
 23feb0c:	72656c61 695f7374 7265666e 69636e65     alerts_inferenci
 23feb1c:	2f2f676e 2f637273 65676465 706d692d     ng//src/edge-imp
 23feb2c:	65736c75 6b64732d 6e65742f 66726f73     ulse-sdk/tensorf
 23feb3c:	2f776f6c 6574696c 63696d2f 6b2f6f72     low/lite/micro/k
 23feb4c:	656e7265 662f736c 796c6c75 6e6f635f     ernels/fully_con
 23feb5c:	7463656e 632e6465 25007070 64253a73     nected.cpp.%s:%d
 23feb6c:	20732520 25203d21 25282073 3d212064      %s != %s (%d !=
 23feb7c:	29642520 4d524100 54414d5f 55535f48      %d).ARM_MATH_SU
 23feb8c:	53454343 72610053 75665f6d 5f796c6c     CCESS.arm_fully_
 23feb9c:	6e6e6f63 65746365 38735f64 63262028     connected_s8( &c
 23febac:	202c7874 5f636626 61726170 202c736d     tx, &fc_params, 
 23febbc:	61757126 705f746e 6d617261 26202c73     &quant_params, &
 23febcc:	75706e69 69645f74 202c736d 696c6674     input_dims, tfli
 23febdc:	3a3a6574 7263696d 473a3a6f 65547465     te::micro::GetTe
 23febec:	726f736e 61746144 746e693c 3e745f38     nsorData<int8_t>
 23febfc:	706e6928 2c297475 69662620 7265746c     (input), &filter
 23fec0c:	6d69645f 74202c73 74696c66 6d3a3a65     _dims, tflite::m
 23fec1c:	6f726369 65473a3a 6e655474 44726f73     icro::GetTensorD
 23fec2c:	3c617461 38746e69 283e745f 746c6966     ata<int8_t>(filt
 23fec3c:	2c297265 69622620 645f7361 2c736d69     er), &bias_dims,
 23fec4c:	6c667420 3a657469 63696d3a 3a3a6f72      tflite::micro::
 23fec5c:	54746547 6f736e65 74614472 6e693c61     GetTensorData<in
 23fec6c:	5f323374 62283e74 29736169 6f26202c     t32_t>(bias), &o
 23fec7c:	75707475 69645f74 202c736d 696c6674     utput_dims, tfli
 23fec8c:	3a3a6574 7263696d 473a3a6f 65547465     te::micro::GetTe
 23fec9c:	726f736e 61746144 746e693c 3e745f38     nsorData<int8_t>
 23fecac:	74756f28 29747570 73250029 2064253a     (output)).%s:%d 
 23fecbc:	77207325 6e207361 7420746f 2e657572     %s was not true.
 23feccc:	706e6900 21207475 756e203d 74706c6c     .input != nullpt
 23fecdc:	69660072 7265746c 203d2120 6c6c756e     r.filter != null
 23fecec:	00727470 7074756f 21207475 756e203d     ptr.output != nu
 23fecfc:	74706c6c 73250072 2064253a 21207325     llptr.%s:%d %s !
 23fed0c:	7325203d 73252820 203d2120 00297325     = %s (%s != %s).
 23fed1c:	7074756f 3e2d7475 65707974 706e6900     output->type.inp
 23fed2c:	3e2d7475 65707974 62794800 20646972     ut->type.Hybrid 
 23fed3c:	65646f6d 6120736c 6e206572 7320746f     models are not s
 23fed4c:	6f707075 64657472 206e6f20 694c4654     upported on TFLi
 23fed5c:	4d206574 6f726369 7954002e 25206570     te Micro..Type %
 23fed6c:	25282073 6e202964 7320746f 6f707075     s (%d) not suppo
 23fed7c:	64657472 0000002e                       rted....

023fed84 <_ZN6tflite25kFullyConnectedBiasTensorE>:
 23fed84:	00000002                                ....

023fed88 <_ZN6tflite26kFullyConnectedInputTensorE>:
 23fed88:	00000000                                ....

023fed8c <_ZN6tflite27kFullyConnectedOutputTensorE>:
 23fed8c:	00000000                                ....

023fed90 <_ZN6tflite28kFullyConnectedWeightsTensorE>:
 23fed90:	00000001 6d6f682f 696e2f65 732f6b63     ..../home/nick/s
 23feda0:	7774666f 2f657261 75736976 615f6c61     oftware/visual_a
 23fedb0:	7472656c 7369762f 5f6c6175 72656c61     lert/visual_aler
 23fedc0:	695f7374 7265666e 69636e65 2f2f676e     ts_inferencing//
 23fedd0:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
 23fede0:	6b64732d 6e65742f 66726f73 2f776f6c     -sdk/tensorflow/
 23fedf0:	6574696c 63696d2f 6b2f6f72 656e7265     lite/micro/kerne
 23fee00:	722f736c 61687365 632e6570 2d007070     ls/reshape.cpp.-
 23fee10:	74730031 63746572 69645f68 756e006d     1.stretch_dim.nu
 23fee20:	756f5f6d 74757074 656c655f 746e656d     m_output_element
 23fee30:	756e0073 6e695f6d 5f747570 6d656c65     s.num_input_elem
 23fee40:	73746e65 6d754e00 75706e49 6e287374     ents.NumInputs(n
 23fee50:	2965646f 203d3d20 7c7c2031 6d754e20     ode) == 1 || Num
 23fee60:	75706e49 6e287374 2965646f 203d3d20     Inputs(node) == 
 23fee70:	754e0032 74754f6d 73747570 646f6e28     2.NumOutputs(nod
 23fee80:	6b002965 694c6654 6b4f6574 73655200     e).kTfLiteOk.Res
 23fee90:	65706168 7074754f 63287475 65746e6f     hapeOutput(conte
 23feea0:	202c7478 65646f6e 78650029 656e6f70     xt, node).expone
 23feeb0:	3c20746e 3133203d 746e4900 72656765     nt <= 31.Integer
 23feec0:	65707954 6d656720 776f6c6d 523a3a70     Type gemmlowp::R
 23feed0:	646e756f 44676e69 64697669 50794265     oundingDivideByP
 23feee0:	4928544f 6765746e 79547265 202c6570     OT(IntegerType, 
 23feef0:	29746e69 69775b20 49206874 6765746e     int) [with Integ
 23fef00:	79547265 3d206570 6e6f6c20 6e692067     erType = long in
 23fef10:	2f005d74 656d6f68 63696e2f 6f732f6b     t]./home/nick/so
 23fef20:	61777466 762f6572 61757369 6c615f6c     ftware/visual_al
 23fef30:	2f747265 75736976 615f6c61 7472656c     ert/visual_alert
 23fef40:	6e695f73 65726566 6e69636e 732f2f67     s_inferencing//s
 23fef50:	652f6372 2d656764 75706d69 2d65736c     rc/edge-impulse-
 23fef60:	2f6b6473 72696874 61705f64 2f797472     sdk/third_party/
 23fef70:	6d6d6567 70776f6c 7869662f 6f706465     gemmlowp/fixedpo
 23fef80:	2f746e69 65786966 696f7064 682e746e     int/fixedpoint.h
 23fef90:	6f682f00 6e2f656d 2f6b6369 74666f73     ./home/nick/soft
 23fefa0:	65726177 7369762f 5f6c6175 72656c61     ware/visual_aler
 23fefb0:	69762f74 6c617573 656c615f 5f737472     t/visual_alerts_
 23fefc0:	65666e69 636e6572 2f676e69 6372732f     inferencing//src
 23fefd0:	6764652f 6d692d65 736c7570 64732d65     /edge-impulse-sd
 23fefe0:	65742f6b 726f736e 776f6c66 74696c2f     k/tensorflow/lit
 23feff0:	696d2f65 2f6f7263 6e72656b 2f736c65     e/micro/kernels/
 23ff000:	766e6f63 7070632e 6f682f00 6e2f656d     conv.cpp./home/n
 23ff010:	2f6b6369 74666f73 65726177 7369762f     ick/software/vis
 23ff020:	5f6c6175 72656c61 69762f74 6c617573     ual_alert/visual
 23ff030:	656c615f 5f737472 65666e69 636e6572     _alerts_inferenc
 23ff040:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff050:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff060:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff070:	6e72656b 2f736c65 766e6f63 6d6f635f     kernels/conv_com
 23ff080:	2e6e6f6d 00707063 5f736168 73616962     mon.cpp.has_bias
 23ff090:	207c7c20 65646f6e 6e693e2d 73747570      || node->inputs
 23ff0a0:	69733e2d 3d20657a 0032203d 65646f6e     ->size == 2.node
 23ff0b0:	756f3e2d 74757074 733e2d73 00657a69     ->outputs->size.

023ff0c0 <_ZN6tflite15kConvBiasTensorE>:
 23ff0c0:	00000002                                ....

023ff0c4 <_ZN6tflite16kConvInputTensorE>:
 23ff0c4:	00000000                                ....

023ff0c8 <_ZN6tflite17kConvOutputTensorE>:
 23ff0c8:	00000000                                ....

023ff0cc <_ZN6tflite18kConvWeightsTensorE>:
 23ff0cc:	00000001                                ....

023ff0d0 <_ZN6tflite23kConvQuantizedDimensionE>:
 23ff0d0:	00000000 6d6f682f 696e2f65 732f6b63     ..../home/nick/s
 23ff0e0:	7774666f 2f657261 75736976 615f6c61     oftware/visual_a
 23ff0f0:	7472656c 7369762f 5f6c6175 72656c61     lert/visual_aler
 23ff100:	695f7374 7265666e 69636e65 2f2f676e     ts_inferencing//
 23ff110:	2f637273 65676465 706d692d 65736c75     src/edge-impulse
 23ff120:	6b64732d 6e65742f 66726f73 2f776f6c     -sdk/tensorflow/
 23ff130:	6574696c 63696d2f 6b2f6f72 656e7265     lite/micro/kerne
 23ff140:	702f736c 696c6f6f 632e676e 49007070     ls/pooling.cpp.I
 23ff150:	7475706e 70797420 73252065 20736920     nput type %s is 
 23ff160:	20746f6e 72727563 6c746e65 75732079     not currently su
 23ff170:	726f7070 00646574 65707954 20732520     pported.Type %s 
 23ff180:	20746f6e 72727563 6c746e65 75732079     not currently su
 23ff190:	726f7070 2e646574 6f682f00 6e2f656d     pported../home/n
 23ff1a0:	2f6b6369 74666f73 65726177 7369762f     ick/software/vis
 23ff1b0:	5f6c6175 72656c61 69762f74 6c617573     ual_alert/visual
 23ff1c0:	656c615f 5f737472 65666e69 636e6572     _alerts_inferenc
 23ff1d0:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff1e0:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff1f0:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff200:	6e72656b 2f736c65 74666f73 5f78616d     kernels/softmax_
 23ff210:	6d6d6f63 632e6e6f 4e007070 6e496d75     common.cpp.NumIn
 23ff220:	73747570 646f6e28 4e002965 69446d75     puts(node).NumDi
 23ff230:	736e656d 736e6f69 706e6928 20297475     mensions(input) 
 23ff240:	31203d3e 646f6e00 753e2d65 5f726573     >= 1.node->user_
 23ff250:	61746164 203d2120 6c6c756e 00727470     data != nullptr.
 23ff260:	75706e69 743e2d74 20657079 6b203d3d     input->type == k
 23ff270:	694c6654 6e496574 7c203874 6e69207c     TfLiteInt8 || in
 23ff280:	2d747570 7079743e 3d3d2065 66546b20     put->type == kTf
 23ff290:	6574694c 31746e49 332d0036 38363732     LiteInt16.-32768
 23ff2a0:	74756f00 2d747570 7261703e 2e736d61     .output->params.
 23ff2b0:	6f72657a 696f705f 2500746e 64253a73     zero_point.%s:%d
 23ff2c0:	20732520 20746f6e 7261656e 20732520      %s not near %s 
 23ff2d0:	20662528 25203d21 31002966 2f20662e     (%f != %f).1.f /
 23ff2e0:	35353620 6f003633 75707475 703e2d74      65536.output->p
 23ff2f0:	6d617261 63732e73 00656c61 4c66546b     arams.scale.kTfL
 23ff300:	49657469 0038746e 3832312d 74756f00     iteInt8.-128.out
 23ff310:	2d747570 7261703e 2e736d61 6c616373     put->params.scal
 23ff320:	3d3d2065 662e3120 32202f20 2f003635     e == 1.f / 256./
 23ff330:	656d6f68 63696e2f 6f732f6b 61777466     home/nick/softwa
 23ff340:	762f6572 61757369 6c615f6c 2f747265     re/visual_alert/
 23ff350:	75736976 615f6c61 7472656c 6e695f73     visual_alerts_in
 23ff360:	65726566 6e69636e 732f2f67 652f6372     ferencing//src/e
 23ff370:	2d656764 75706d69 2d65736c 2f6b6473     dge-impulse-sdk/
 23ff380:	736e6574 6c66726f 6c2f776f 2f657469     tensorflow/lite/
 23ff390:	6e72656b 2f736c65 6e72656b 755f6c65     kernels/kernel_u
 23ff3a0:	5f6c6974 6574696c 7070632e 706e6900     til_lite.cpp.inp
 23ff3b0:	705f7475 75646f72 735f7463 656c6163     ut_product_scale
 23ff3c0:	203d3e20 63730030 5f656c61 66666964      >= 0.scale_diff
 23ff3d0:	6f202f20 75707475 63735f74 20656c61      / output_scale 
 23ff3e0:	30203d3c 0032302e 4c66546b 41657469     <= 0.02.kTfLiteA
 23ff3f0:	6e696666 61755165 7a69746e 6f697461     ffineQuantizatio
 23ff400:	6e69006e 2d747570 6175713e 7a69746e     n.input->quantiz
 23ff410:	6f697461 79742e6e 66006570 65746c69     ation.type.filte
 23ff420:	713e2d72 746e6175 74617a69 2e6e6f69     r->quantization.
 23ff430:	65707974 66666100 5f656e69 6e617571     type.affine_quan
 23ff440:	617a6974 6e6f6974 66666100 5f656e69     tization.affine_
 23ff450:	6e617571 617a6974 6e6f6974 63733e2d     quantization->sc
 23ff460:	00656c61 746c6966 3e2d7265 65707974     ale.filter->type
 23ff470:	6d756e00 6168635f 6c656e6e 66610073     .num_channels.af
 23ff480:	656e6966 6175715f 7a69746e 6f697461     fine_quantizatio
 23ff490:	733e2d6e 656c6163 69733e2d 6600657a     n->scale->size.f
 23ff4a0:	65746c69 643e2d72 2d736d69 7461643e     ilter->dims->dat
 23ff4b0:	66615b61 656e6966 6175715f 7a69746e     a[affine_quantiz
 23ff4c0:	6f697461 713e2d6e 746e6175 64657a69     ation->quantized
 23ff4d0:	6d69645f 69736e65 005d6e6f 20544646     _dimension].FFT 
 23ff4e0:	676e656c 6d206874 20747375 65206562     length must be e
 23ff4f0:	0a6e6576 73696b00 66662073 73752074     ven..kiss fft us
 23ff500:	20656761 6f727265 69203a72 6f72706d     age error: impro
 23ff510:	20726570 6f6c6c61 00000a63              per alloc...

023ff51c <_ZTV18Microphone_PDM_MCU>:
	...
 23ff524:	023f3d49 023f3d5d 023f3d25 023f3ec9     I=?.]=?.%=?..>?.
 23ff534:	023f3d29 023f3ef1 023f3eb3 023f3f01     )=?..>?..>?..??.
 23ff544:	023f3f13 023f3f41                       .??.A??.

023ff54c <_ZTV14Microphone_PDM>:
	...
 23ff554:	023f3d71 023f3d85 023f3d25 023f3d35     q=?..=?.%=?.5=?.
 23ff564:	023f3d2f 023f3d39 023f3d3d 023f3d41     /=?.9=?.==?.A=?.
 23ff574:	023f3d45 023f3d99                       E=?..=?.

023ff57c <_ZTV22Microphone_PDM_RTL872x>:
	...
 23ff584:	023f3eb1 023f3ebb 023f3d25 023f3ec9     .>?..>?.%=?..>?.
 23ff594:	023f3d29 023f3ef1 023f3eb3 023f3f01     )=?..>?..>?..??.
 23ff5a4:	023f3f13 023f3f41                       .??.A??.

023ff5ac <_ZTVN5spark12NetworkClassE>:
	...
 23ff5b4:	023f4869 023f4873 023f487d 023f4887     iH?.sH?.}H?..H?.
 23ff5c4:	023f4891 023f489d 023f48a9 023f48b1     .H?..H?..H?..H?.
 23ff5d4:	023f48b9 023f48c5 023f48cd 023f48d7     .H?..H?..H?..H?.
 23ff5e4:	023f48e1                                .H?.

023ff5e8 <_ZTVN5spark9WiFiClassE>:
	...
 23ff5f0:	023f4a2b 023f4a21 023f4a17 023f49cd     +J?.!J?..J?..I?.
 23ff600:	023f4a0b 023f49ff 023f48a9 023f48b1     .J?..I?..H?..H?.
 23ff610:	023f49f3 023f49eb 023f49e1 023f49d7     .I?..I?..I?..I?.
 23ff620:	023f48e1                                .H?.

023ff624 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ff62c <_ZTV11USARTSerial>:
	...
 23ff634:	023f4a49 023f4ab5 023f4a8d 023f6229     IJ?..J?..J?.)b?.
 23ff644:	023f4a5d 023f4a79 023f4a6b 023f4a87     ]J?.yJ?.kJ?..J?.
 23ff654:	023f4a4b 023f4a4f 75007525 78343025     KJ?.OJ?.%u.u%04x
 23ff664:	00000000                                ....

023ff668 <_ZTV9USBSerial>:
	...
 23ff670:	023f4ef7 023f4f5f 023f4f35 023f6229     .N?._O?.5O?.)b?.
 23ff680:	023f4f27 023f4ef9 023f4f09 023f4f59     'O?..N?..O?.YO?.
 23ff690:	023f4f19 023f4ef1                       .O?..N?.

023ff698 <_ZTV9IPAddress>:
	...
 23ff6a0:	023f5011 023f5001 023f5003 252d5925     .P?..P?..P?.%Y-%
 23ff6b0:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ff6c0:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ff6d0:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ff6e0:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ff6f0:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ff700:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ff710:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ff720:	66006e6c 6f63006e 64006564 69617465     ln.fn.code.detai
 23ff730:	0000006c                                l...

023ff734 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ff73c:	023f52a9 023f52cf 023f528d 023f4b35     .R?..R?..R?.5K?.

023ff74c <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ff754:	023f5781 023f5799 023f5ed5 023f607d     .W?..W?..^?.}`?.

023ff764 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ff76c:	023f57ad 023f57c1 023f60b5 023f5295     .W?..W?..`?..R?.

023ff77c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ff784:	023f52a7 023f52dd 023f5e39 023f5297     .R?..R?.9^?..R?.

023ff794 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ff79c:	023f52a5 023f52eb 023f56c5 023f530d     .R?..R?..V?..S?.
 23ff7ac:	006e616e 00666e69 0066766f 65737341     nan.inf.ovf.Asse
 23ff7bc:	6f697472 6961466e 6572756c 6c616620     rtionFailure fal
 23ff7cc:	77006573 6e697269 6c622e67 74530065     se.wiring.ble.St
 23ff7dc:	20747261 63736964 7265766f 20676e69     art discovering 
 23ff7ec:	76726573 73656369 ffff002e ffffffff     services........
 23ff7fc:	73734100 69747265 61466e6f 72756c69     .AssertionFailur
 23ff80c:	61682065 6c625f6c 74735f65 5f6b6361     e hal_ble_stack_
 23ff81c:	74696e69 6c756e28 7274706c 3d3d2029     init(nullptr) ==
 23ff82c:	53595320 5f4d4554 4f525245 4f4e5f52      SYSTEM_ERROR_NO
 23ff83c:	5000454e 20726565 69766564 69206563     NE.Peer device i
 23ff84c:	696d2073 6e697373 46002167 656c6961     s missing!.Faile
 23ff85c:	6f742064 6c6c6120 7461636f 656d2065     d to allocate me
 23ff86c:	79726f6d 61460021 64656c69 206f7420     mory!.Failed to 
 23ff87c:	65707061 7020646e 20726565 746e6543     append peer Cent
 23ff88c:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
 23ff89c:	65746365 69440064 6e6f6373 7463656e     ected.Disconnect
 23ff8ac:	46006465 656c6961 6f742064 70706120     ed.Failed to app
 23ff8bc:	20646e65 63736964 7265766f 73206465     end discovered s
 23ff8cc:	69767265 002e6563 72617453 69642074     ervice..Start di
 23ff8dc:	766f6373 6e697265 68632067 63617261     scovering charac
 23ff8ec:	69726574 63697473 666f2073 72657320     teristics of ser
 23ff8fc:	65636976 7325203a 6143002e 746f6e6e     vice: %s..Cannot
 23ff90c:	64646120 77656e20 65657020 65642072      add new peer de
 23ff91c:	65636976 654e002e 65702077 68706972     vice..New periph
 23ff92c:	6c617265 20736920 6e6e6f63 65746365     eral is connecte
 23ff93c:	43002e64 61726168 72657463 69747369     d..Characteristi
 23ff94c:	69642063 766f6373 64657265 6944002e     c discovered..Di
 23ff95c:	766f6373 64657265 61686320 74636172     scovered charact
 23ff96c:	73697265 27636974 61682073 656c646e     eristic's handle
 23ff97c:	20736920 61766e69 2e64696c 69614600      is invalid..Fai
 23ff98c:	2064656c 61206f74 6e657070 69642064     led to append di
 23ff99c:	766f6373 64657265 61686320 74636172     scovered charact
 23ff9ac:	73697265 2e636974 00000000              eristic.....

023ff9b8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff9c0:	023f6471 023f64d5 023f65f3 023f64ff     qd?..d?..e?..d?.
 23ff9d0:	023f6475                                ud?.

023ff9d4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff9dc:	023f646d 023f64e3 023f646f 023f6505     md?..d?.od?..e?.
 23ff9ec:	023f6495                                .d?.

023ff9f0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff9f8:	023f646b 023f64f1 023f714f 023f650b     kd?..d?.Oq?..e?.
 23ffa08:	023f64b5                                .d?.

023ffa0c <_ZTVN5spark13EthernetClassE>:
	...
 23ffa14:	023f8d27 023f8d1d 023f8d13 023f8d09     '.?...?...?...?.
 23ffa24:	023f8cfd 023f8cf1 023f48a9 023f48b1     ..?...?..H?..H?.
 23ffa34:	023f8ce5 023f8cdd 023f8cd3 023f8cc9     ..?...?...?...?.
 23ffa44:	023f48e1                                .H?.

023ffa48 <AUDIO_DEV_TABLE>:
 23ffa48:	40010800 0000000a 0000000b              ...@........

023ffa54 <__FUNCTION__.0>:
 23ffa54:	49445541 50535f4f 4758525f 5f414d44     AUDIO_SP_RXGDMA_
 23ffa64:	74696e49                                 Init.

023ffa69 <__FUNCTION__.4>:
 23ffa69:	49445541 50535f4f 696e495f               AUDIO_SP_Init.

023ffa77 <_ZSt7nothrow>:
	...

023ffa78 <_ZTSSt19_Sp_make_shared_tag>:
 23ffa78:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffa88:	5f646572 00676174                       red_tag.

023ffa90 <_ZTISt19_Sp_make_shared_tag>:
 23ffa90:	023ffb44 023ffa78 20746f6e 756f6e65     D.?.x.?.not enou
 23ffaa0:	73206867 65636170 726f6620 726f6620     gh space for for
 23ffab0:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
 23ffac0:	7361656c 75732065 74696d62 6c756620     lease submit ful
 23ffad0:	7562206c 65722067 74726f70 20746120     l bug report at 
 23ffae0:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
 23ffaf0:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
 23ffb00:	32313000 36353433 00393837              .0123456789.

023ffb0c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffb0c:	023ffba4 023ffb18 023ffbc8              ..?...?...?.

023ffb18 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffb18:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffb28:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffb38:	00000045                                E...

023ffb3c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffb3c:	00000000 023ffb0c 023f93c5 023f93d9     ......?...?...?.
 23ffb4c:	023f956d 023f956d 023f9443 023f9387     m.?.m.?.C.?...?.
 23ffb5c:	023f942b 023f93ed 023f93b9              +.?...?...?.

023ffb68 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffb68:	023ffba4 023ffb74 023ffb0c              ..?.t.?...?.

023ffb74 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffb74:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffb84:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffb94:	456f666e 00000000                       nfoE....

023ffb9c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffb9c:	00000000 023ffb68 023f946d 023f9481     ....h.?.m.?...?.
 23ffbac:	023f956d 023f956d 023f9443 023f9387     m.?.m.?.C.?...?.
 23ffbbc:	023f9541 023f94cd 023f9495              A.?...?...?.

023ffbc8 <_ZTISt9type_info>:
 23ffbc8:	023ffb44 023ffbd0                       D.?...?.

023ffbd0 <_ZTSSt9type_info>:
 23ffbd0:	74397453 5f657079 6f666e69 00000000     St9type_info....

023ffbe0 <npio2_hw>:
 23ffbe0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffbf0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffc00:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffc10:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffc20:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffc30:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffc40:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffc50:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffc60 <two_over_pi>:
 23ffc60:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffc70:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffc80:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffc90:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffca0:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffcb0:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffcc0:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffcd0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffce0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffcf0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffd00:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffd10:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffd20:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffd30:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffd40:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffd50:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffd60:	0060e27b 00c08c6b                       {.`.k...

023ffd68 <halF>:
 23ffd68:	3f000000 bf000000                       ...?....

023ffd70 <ln2HI>:
 23ffd70:	3f317180 bf317180                       .q1?.q1.

023ffd78 <ln2LO>:
 23ffd78:	3717f7d1 b717f7d1                       ...7....

023ffd80 <PIo2>:
 23ffd80:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffd90:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffda0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffdb0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffdc0 <init_jk>:
 23ffdc0:	00000002 00000003 00000004 00000006     ................
 23ffdd0:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffde0:	64656563 2f006465 2f746e6d 6b726f77     ceeded./mnt/work
 23ffdf0:	63617073 6f772f65 70736b72 2f656361     space/workspace/
 23ffe00:	2d434347 702d3031 6c657069 2f656e69     GCC-10-pipeline/
 23ffe10:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffe20:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffe30:	5f343231 36303631 36303831 732f3134     124_1606180641/s
 23ffe40:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffe50:	62696c2f 74732f63 62696c64 6e61722f     /libc/stdlib/ran
 23ffe60:	00632e64                                d.c.

023ffe64 <_ctype_>:
 23ffe64:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffe74:	20202020 20202020 20202020 20202020                     
 23ffe84:	10108820 10101010 10101010 10101010      ...............
 23ffe94:	04040410 04040404 10040404 10101010     ................
 23ffea4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffeb4:	01010101 01010101 01010101 10101010     ................
 23ffec4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffed4:	02020202 02020202 02020202 10101010     ................
 23ffee4:	00000020 00000000 00000000 00000000      ...............
	...

023fff68 <__sf_fake_stderr>:
	...

023fff88 <__sf_fake_stdin>:
	...

023fffa8 <__sf_fake_stdout>:
	...

023fffc8 <link_const_data_end>:
 23fffc8:	023f0b19 	.word	0x023f0b19
 23fffcc:	023f1051 	.word	0x023f1051
 23fffd0:	023f3fb5 	.word	0x023f3fb5
 23fffd4:	023f49b9 	.word	0x023f49b9
 23fffd8:	023f4a35 	.word	0x023f4a35
 23fffdc:	023f5265 	.word	0x023f5265
 23fffe0:	023f5279 	.word	0x023f5279
 23fffe4:	023f5ec5 	.word	0x023f5ec5
 23fffe8:	023f8aa1 	.word	0x023f8aa1
 23fffec:	023f8ca5 	.word	0x023f8ca5
 23ffff0:	023f8d31 	.word	0x023f8d31
