/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.08.2023 17:50:29

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 10064;
#else
constexpr int kTensorArenaSize = 9040;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[9] = { -247, 705, -1121, -197, -54, 595, -316, -979, 747, };
const TfArray<1, int> tensor_dimension6 = { 1, { 9 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00038936329656280577, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[9*400] = { 
  -20, -31, -65, -4, 11, 13, -15, 6, -8, -1, 16, 0, -12, -71, -17, -48, 13, -24, -15, 13, 15, 7, -18, 16, 5, 5, 35, 31, 30, -20, -20, -28, 16, 14, -31, 3, 7, 14, 12, 5, 8, 1, 31, -2, 10, -10, -3, -13, -8, 25, -2, -5, 12, 18, -19, 12, 9, 21, 32, 3, 2, -37, -5, -24, 13, 7, -7, 10, 14, 11, -15, -2, 13, -1, 23, 21, 14, -10, 5, -30, -17, 5, -6, 25, 26, 2, -14, 10, 4, 8, 22, 33, -16, -19, -16, -50, -36, 8, -16, 10, 10, 3, -24, 3, 21, -1, 20, 24, -18, -12, -18, -57, -15, -12, -18, -20, 6, 2, -23, -2, 10, 18, 20, -5, -8, -32, -18, -54, -8, 5, -24, -22, 4, 12, -78, 6, 2, 6, 33, 2, 0, -33, 6, -76, 15, -25, -22, -9, 4, 8, -34, -8, -9, 8, 34, 15, 17, -14, 7, -62, 26, -2, 1, -20, 9, 16, -28, 17, -1, 6, 26, 15, 19, 5, 4, -64, 13, 5, 1, -12, -3, 22, -19, 14, 3, 9, 17, 13, -5, 3, 3, -59, -12, 9, -12, -25, 9, 14, -18, 6, 11, 13, 18, -3, -1, -22, 6, -66, 8, -2, -7, 20, 11, 13, -38, 17, 17, 17, -2, 48, 13, -13, -4, -69, 20, 15, -5, 11, 13, 9, -13, 13, -6, 5, -13, 31, 8, -19, 0, -36, -3, 8, -26, 5, -13, 12, -3, 10, 6, 8, 14, 21, -9, -18, -4, -12, 14, 29, -20, 28, -11, 13, -21, 7, 6, 8, 18, 47, 5, -42, -6, -45, -11, 21, -30, 16, 3, 11, -25, -6, 15, -7, 27, 31, -3, -11, 0, -16, -18, 19, -22, 24, 26, 7, -7, 4, 6, -5, 11, 23, -1, 11, -7, -18, -20, -5, -23, 3, 18, 2, 7, 0, -5, 15, 28, -8, -26, -15, -12, -29, -15, -14, -30, -13, 15, 15, -18, 2, -2, 26, 34, -2, -18, -33, -8, -61, -16, -10, -33, -2, 12, 17, -19, 0, 13, 13, 41, 3, -8, -52, -34, -79, 8, -14, -23, -22, 13, 23, -13, 16, 1, 4, 40, -3, 18, -5, -15, -79, 27, 3, 1, -16, -6, 24, -29, 20, 7, 5, 35, 9, 16, -27, 17, -68, -4, -3, -10, -30, 2, -4, -25, 13, -6, -6, 41, 13, -13, -21, -8, -43, 
  -47, -3, -80, 21, -24, -18, -84, -5, -47, -5, 28, 22, -16, -91, -68, 1, -47, 24, -127, 24, -13, -25, -80, -11, -69, -11, 15, 21, -8, -106, -68, 24, -43, 42, -89, 22, -48, -17, -72, -14, -68, -30, 5, 19, -33, -126, -64, 14, -26, 29, -99, 21, -62, -13, -58, -32, -47, -14, 7, 4, -17, -74, -48, 24, -39, 31, -22, 19, -55, -44, -33, -38, -33, -18, -33, 13, -20, -74, -28, 25, -12, 33, -19, 12, -37, -63, -32, -31, -21, -10, -14, 10, 7, -66, -27, 36, -14, 23, -37, 12, -56, -12, -44, -38, -30, -8, -2, 11, -19, -54, -44, 6, -11, 22, -31, 26, -76, -39, -24, -30, -23, -18, -24, 9, -22, -80, -48, 16, 3, 17, -52, 14, -55, -15, -48, -36, -16, -11, -10, 17, -8, -71, -47, 19, 7, 31, 9, 13, -72, -12, -61, -31, -49, -27, -32, 20, 21, 6, 5, 28, 14, 31, -6, 16, -78, -29, -40, -19, -34, -24, -13, 20, -37, -3, -4, 26, -47, 43, -73, 19, -27, -32, -57, -48, -31, -25, -4, 17, -26, -91, -103, 22, -35, 34, -74, 11, -69, -39, -52, -41, -49, -8, -29, 9, -44, -72, -61, 8, -59, 34, -82, 21, -33, -37, -65, -47, -26, -25, -12, 22, -10, -100, -76, 19, -19, 31, -67, 18, -25, -54, -43, -38, -32, -16, 0, 20, -9, -98, -50, 17, 7, 39, 27, 13, -74, -33, -31, -37, -36, -11, -10, 8, -29, -37, 9, 25, -11, 13, 6, 12, -81, -44, -46, -49, -31, 3, -2, 10, -29, -31, 16, 15, -26, 9, -1, 21, -87, -37, -65, -53, -51, -2, 4, 17, -15, -61, -26, 27, -14, 32, -38, 19, -56, -55, -39, -45, -28, -13, 2, 13, -7, -83, -18, 18, -31, 30, 6, 27, -51, -20, -35, -35, -17, -10, 22, 16, -9, -73, -38, 20, -16, 29, -30, 23, -57, -45, -13, -44, -26, -8, -4, 10, 1, -76, -27, 17, 0, 23, 2, 14, -116, -50, -27, -45, -36, -11, -5, 7, -42, -37, -18, 16, -17, 23, -17, 19, -70, -43, -67, -49, -28, -1, -2, 20, -26, -53, -45, 21, -5, 53, -58, 7, -80, -47, -70, -50, -35, -19, 23, 28, -63, -97, -38, 19, -47, 39, -25, 12, -35, -18, -45, -51, -28, -14, 3, 10, 6, -56, -55, 18, 
  -4, -11, 14, 4, 7, -34, 32, 22, 6, 24, 21, 12, -1, 12, 7, 5, 4, -11, 5, -8, -31, -34, 2, 14, 4, 23, -54, -16, -26, 9, -28, -8, 12, -26, -40, -38, -27, -23, -5, 20, 24, 3, -65, -2, -9, 19, -4, -46, 19, -24, -12, -16, -29, -21, -12, 7, 8, 1, -45, -2, 0, 13, -8, -18, 18, -42, -27, 2, -45, -28, 5, 4, 11, 2, 19, 35, -11, 2, 2, -32, 14, -9, -10, -2, -26, -9, -2, 0, 4, -5, 11, 27, 4, 15, 19, -37, 19, -28, -27, 0, -18, 0, 1, 10, -3, 2, 0, 21, 5, 25, 8, -9, 26, -11, -30, -16, 4, 11, 14, 9, -7, 17, 18, 11, 16, 18, 17, -25, -3, -26, -3, -8, 11, 3, 17, 3, 35, 4, 11, 16, 2, 34, 19, -8, 20, -5, -10, -15, -27, -17, 24, 10, 27, 11, -40, -18, -3, 25, 0, -13, 6, -4, -17, 2, -32, -17, 5, 1, 11, 4, -27, 20, -6, 7, -6, -13, 2, -9, -21, 12, 13, -24, -3, -3, 15, -3, -5, 20, 10, 9, -10, -25, 16, -60, -28, -2, 4, 1, 9, 11, 20, -12, -3, 2, -11, 27, 6, -22, 5, -28, -4, -10, -19, -5, -4, 21, 16, 1, 7, 16, -5, 22, 13, -48, 0, -33, -12, -35, -31, -10, 13, 1, 16, 1, 8, 21, -1, 19, -1, -51, 7, -44, -15, 8, 16, -18, 2, 5, 10, 2, 20, 51, 42, 21, -2, -30, 17, -32, -24, 5, 15, 10, 20, 24, 21, 16, 2, 37, 12, 11, 22, -31, 2, -24, -11, -12, -23, 15, 10, 9, 31, 24, 25, 23, -1, 1, 8, -72, 10, -19, -25, -24, -15, 0, -24, 6, 9, 21, -1, 28, 3, -7, 24, -79, 16, -14, -23, 0, -22, -17, -10, 5, 24, -4, -18, 18, 6, 8, 4, -48, 14, -21, -27, -17, -30, -12, -7, 5, 1, 6, 1, 20, 17, 9, 6, -41, 16, -27, 1, -14, -20, -3, -26, 1, 13, -7, -11, 15, 31, 3, 17, -46, -26, -34, -32, 3, -11, -28, -6, 6, -2, 9, -1, 29, 8, 12, -4, -26, -16, -62, -46, -12, -16, -27, 7, 5, 5, 13, -11, 10, 0, -8, -16, -19, -41, 10, 7, 7, 9, -28, 13, 21, 10, 29, 17, 0, -12, 13, 10, -28, 
  -7, 9, 13, 17, -23, -14, 8, -22, -5, -37, -14, -6, -53, -7, -11, 35, -40, 3, 31, 15, -30, -17, 13, -34, -10, -28, -16, -42, -58, -1, -31, 32, -61, 16, 26, 12, 15, -23, 5, -21, -28, -30, -25, -21, -19, 11, -24, 18, -10, 9, 16, 17, -16, -26, 17, -13, -11, 15, -22, -29, -43, 15, -17, 16, 16, 13, 13, 10, -27, 15, 13, 2, -11, 5, 4, -12, -38, 16, -8, 8, 26, -2, 16, -3, -16, 16, -2, 13, -13, -13, -31, -50, -22, -11, 3, -9, -7, -7, 6, -15, -12, -37, 1, -3, -8, -2, -46, -43, -14, -11, -13, 11, -35, -11, 35, 1, -41, -59, -1, -28, -1, 0, -22, -65, -67, 6, -31, 18, -59, 18, 13, -1, 28, -27, 5, -17, -3, -9, -15, -44, -16, -18, -25, 20, -49, 3, 28, 6, 16, -22, 19, 2, 4, -6, 0, -13, -49, -7, -39, 45, -41, 6, 14, 15, 22, -14, 5, 13, -12, -5, -18, -36, -9, 3, -47, 17, 7, 7, 21, -20, 17, -10, 12, -5, -2, -4, -16, -56, -34, 3, -19, 8, -17, 10, 36, -10, -32, -16, -4, -15, -20, -23, -10, -89, -39, 16, -33, 9, -40, 17, 19, -8, -33, -24, 15, -22, -15, -5, -26, -83, -70, 5, -36, 15, -39, 25, 28, 26, -18, -43, 24, -33, -7, -22, -38, -44, -65, 24, -18, 15, 34, 18, 34, -5, -68, 6, 14, -11, 9, -29, -30, -62, -2, 38, -27, 22, 21, -1, 17, -15, -65, 10, 0, -1, -13, -13, -24, -46, -21, 23, 5, 16, -24, 9, 46, 0, -51, -8, 14, -14, -12, -8, -25, -52, -65, 13, -11, 6, -63, -15, 5, -19, -40, -26, 15, -14, 2, -5, -17, -77, -63, 1, -28, 8, -46, 0, -2, -1, -24, -18, 8, -11, -7, 0, -18, -57, -77, -21, -15, 12, 12, -20, 4, -8, -18, -18, 11, -14, -18, -12, -51, -48, -70, 9, -10, 11, -17, -10, 23, -11, -16, -6, 12, -23, -9, 7, -4, -56, -15, 24, -4, 21, -25, 22, 43, 19, -20, -19, 25, -4, -9, -21, -6, -62, -44, 22, 13, 21, -38, 11, 18, 11, -23, -28, 28, -21, -13, -30, -17, -50, -27, -10, -15, 27, -6, -5, 8, 2, -6, -21, 13, -12, -17, 8, -5, -44, -32, 9, -1, 16, 
  -1, 16, 6, -6, 13, 9, 9, 10, 27, 17, 14, -28, -19, -19, -9, -27, -31, 6, -13, -46, 16, 10, 17, 13, 21, 19, 2, -68, -19, -12, -10, -40, -37, -12, -16, -21, 0, -5, 11, 14, 22, 14, 7, -27, -7, -35, -1, -20, -8, -27, -18, -16, 8, -3, 4, 12, 23, 7, -5, -26, 11, -4, -23, -26, -43, 18, -1, -37, 10, -2, 5, -4, 30, 13, 14, -48, -21, 5, -6, -18, -32, -5, -15, -35, 7, 7, 3, -3, 23, 12, 14, -62, -30, -22, -28, -20, -12, -31, -8, -29, 3, 1, -5, 17, 14, 6, 17, -63, 1, -32, -40, -26, -9, 3, 6, -18, 12, 4, -6, 12, 15, 9, 5, 12, 5, -35, -6, -12, -11, -33, -22, -4, 2, 0, 4, 10, 15, 8, 1, -13, -32, -20, -28, -20, -41, 14, -12, -13, 8, -1, -2, -2, 14, 14, -5, 15, -23, -53, -19, -26, -37, -6, 0, -27, 0, -14, -8, -2, 11, 9, 21, -13, -8, -37, -26, -25, 12, -24, -15, -34, 13, -9, 6, 7, 18, 13, 14, -16, 34, -19, 32, -41, 13, 3, 0, -52, 10, 5, 11, 6, 22, -3, 7, -4, 23, -34, 25, -31, -10, 0, -16, -20, 2, 4, 15, 7, 20, 7, 3, -69, 16, -16, -11, 3, -25, 17, -5, -25, 9, 18, -6, 6, 14, 5, 30, -15, -1, -37, -31, -15, -29, 2, -15, -51, 9, 14, -25, -6, 21, 1, 5, -13, -43, -34, -24, -36, -41, -15, -19, -41, -1, 8, -28, -1, 11, -2, 0, -36, -29, -19, -30, -24, 27, -13, -24, -24, 6, -8, -3, 3, 9, 8, 17, -42, -5, -12, -5, -25, 18, -20, 5, -7, 19, 20, 4, 9, 14, 10, 10, -10, -8, -10, 1, -1, -17, -15, -10, -3, 0, -3, -16, 8, 7, 0, 6, -1, 15, -13, -10, -14, -19, 3, -4, 11, 22, -8, 1, 19, 20, 12, 7, 31, -7, -18, -19, -21, -44, -11, -40, 4, 13, 5, 6, 15, 26, 7, 9, -3, -21, -24, -31, -28, -26, -1, -26, -13, 16, -11, -31, 5, 12, 12, -1, -10, -5, -26, -15, -39, -35, -11, -19, -15, 14, -17, -30, 14, 29, 22, 17, -27, -11, -29, -8, -50, 30, 8, -4, 32, 32, 41, 22, 9, 33, 25, 10, -12, 36, 23, 10, -38, 
  5, 24, -54, 11, -2, -22, -10, -13, 4, -24, -39, 6, -4, -48, -3, 4, 8, 17, -32, 14, 28, -20, 19, -9, 11, -9, -53, 14, 4, -32, -10, 20, -1, 0, -8, 3, 12, -21, 9, -1, 14, -24, -29, 11, 9, -8, -5, 16, -3, 11, -47, 22, 20, -12, 12, -3, -22, -35, 9, 23, 0, -25, 4, 27, -15, 22, -8, 10, 25, -17, 15, -12, -5, -8, 5, 6, 6, -11, -11, 8, -5, 35, -33, 17, 16, 2, 8, -19, 15, -19, -15, 11, -7, -16, -11, 13, 4, -2, -4, 13, 2, -19, 12, 7, 15, -11, -13, 10, -16, -21, -24, 21, -14, -3, -24, 10, 19, 10, 3, -9, 4, -15, 8, 10, -1, -17, -54, 12, -17, 5, -35, 20, 11, -39, 16, -20, -11, -25, 0, 4, -4, -39, -9, 15, 26, 12, -35, 9, 18, -11, 13, -12, -9, -34, 27, 6, 21, -14, -1, 19, 9, -6, -46, 16, -8, -28, -8, -20, -22, -36, -6, 12, 5, -24, -2, 15, -13, 3, -38, 14, -7, -18, -10, -1, -11, -55, -4, 21, 3, -12, -17, 11, 4, 24, -37, 19, 2, -32, -1, -19, 15, -29, -26, 15, 4, -38, 4, 12, -4, 18, -14, 21, 17, -56, 9, -30, -10, -22, -33, 11, -1, -20, -4, 17, 7, 2, -26, 15, 0, -25, -7, -21, -6, -37, -40, 10, 16, -11, -7, 17, 5, 9, -47, 10, 4, -31, 5, -3, -7, -44, -13, 19, 23, -27, 28, 13, 7, 11, -22, 15, -17, -22, 5, -16, 8, -31, -17, 7, -4, -21, -31, 14, 7, 6, -39, 18, 20, -19, 2, -14, -16, -22, -39, 5, -1, -15, -18, 17, 23, 11, -6, 14, -19, -32, 4, -12, -6, -53, -36, 14, 10, -17, 4, 19, 6, 6, -31, 15, -8, -35, 11, -12, 2, -36, -47, 1, 0, 2, -37, 22, -14, 15, -17, 17, -1, -30, 7, -18, 5, -29, -37, -3, 11, -32, -24, 31, -2, 2, -38, 24, -5, -43, 6, -12, -5, -27, -34, 1, 25, -44, -7, 2, 23, 6, -31, 28, -26, -23, 13, -14, 4, -36, -42, 20, 7, -4, -5, 16, 7, -3, -5, 13, -17, -35, -4, -26, -10, -32, -30, 21, 5, -22, 19, 15, -15, -17, -13, 9, -75, -25, -15, -44, -2, -27, -28, 4, -19, -33, -29, 27, 
  -68, -44, 17, 8, -12, -35, 10, -36, -21, 7, 20, 16, 18, 26, -6, -7, -35, -32, 13, 13, -10, -17, 15, -48, -21, 10, 44, 30, 8, 10, 20, -11, -44, -28, 27, -2, -2, -11, 27, -15, -13, 17, 18, 24, -27, 3, 20, -10, -54, -15, 12, 1, -9, -9, 14, -31, 3, 21, 26, 21, -19, 10, 11, -7, -47, -32, 30, 1, -12, -21, 20, -13, -8, 9, -21, 24, 14, 19, 36, -9, -55, -31, 12, 13, -26, -15, 14, -32, -1, 8, -7, 12, 0, -4, -6, -1, -38, -46, 21, -1, -15, 1, 7, -38, -22, -2, 18, 23, -12, -9, 15, -3, -31, -4, 11, 16, 7, -19, 18, -17, -21, -8, 7, 36, 10, 22, 10, 0, -19, -22, -6, -4, -29, -10, 12, -32, -2, 10, -3, -5, -12, 5, 3, 1, -59, -14, 15, -13, -46, -30, 16, -40, 4, 15, -8, -20, -47, 9, 23, -8, -49, -35, 19, 7, -47, -29, 31, -26, 13, 23, -14, 9, -36, 10, 31, -2, -47, -38, 23, -11, -26, -41, 25, -33, -14, 31, -8, 9, -16, 12, 33, 0, -64, -33, 31, 8, -13, -20, 14, -49, -3, 6, 34, 38, -38, 1, 26, 0, -49, -39, 8, 2, -7, -29, 22, -53, -12, -19, 35, 20, -8, 6, 10, 10, -44, -29, 8, -3, -29, -30, 2, -43, 0, -17, -8, 7, -25, 10, 3, -3, -44, -30, 21, 5, 3, -22, 11, -35, -4, 5, -8, -2, 3, 11, 4, 1, -34, -20, 10, -1, -16, -16, 14, -19, -9, -4, -14, 1, 1, 5, 3, 5, -48, -21, 12, 1, -23, -19, 13, -36, -8, -11, 3, -2, -25, 24, 13, -2, -41, -41, 28, -9, -10, -39, 11, -49, -3, 11, -29, 5, 0, 20, 27, 6, -33, -20, 11, -6, -36, -19, 8, -20, -14, 4, -2, 4, -17, 3, 3, 9, -21, -31, 13, 4, -18, -8, 7, -50, -18, -7, 10, 24, 35, 29, 35, 6, -18, -17, 23, -5, -2, -14, 14, -13, -27, -21, -27, 12, -13, 3, 2, -4, -41, -4, -2, -8, -33, -16, 8, -56, -12, 16, -22, -22, -28, 12, 27, -8, -44, -4, 9, -6, -47, -32, 18, -45, 4, 16, -19, 1, -33, 20, 9, 9, -43, -5, 22, -6, -40, -20, 2, -58, 0, 7, -31, -5, -24, 25, 2, 13, 
  6, -11, 27, 6, -22, 7, 4, -8, -21, -28, -6, -24, 4, 39, 13, -1, 4, -7, 37, -3, -24, 21, 12, -14, -28, -18, -8, -1, -7, 32, 32, -11, 2, -3, 38, -25, -12, 8, 1, -10, -6, -23, 1, -27, 1, -7, 12, -4, 10, 2, 47, -14, -17, 7, 28, -16, -26, -30, 4, -16, 5, 21, 2, -4, 11, -13, 25, 4, -5, 8, -5, -14, -18, -12, -7, -12, 8, 5, 9, -12, 2, -43, 27, -1, -7, 0, 8, -1, -37, -16, 9, -19, 7, 10, 13, -2, 11, 13, 28, -13, -14, -3, 8, -17, -26, -27, 7, -10, 18, 25, 19, -2, 13, 8, 34, 2, -14, -17, 22, -14, -22, -21, -37, 4, 0, 24, 15, 15, 5, -7, 34, -7, -25, -13, 21, -5, -2, -10, -13, -18, 7, 22, 13, -10, 4, -25, 38, -2, 2, -8, 3, -10, -4, -26, 10, -9, 0, 16, 9, 4, 11, -12, 24, -8, 18, 2, 17, -13, -17, -17, -20, 6, 2, 13, 23, 7, -1, 0, 27, -2, -4, -19, 13, -5, -1, -12, 8, -17, 0, 12, 4, 11, 1, 11, 12, -2, 27, 1, -15, -12, 1, -13, 28, 5, 11, 11, -12, -3, 21, -15, 20, 2, -6, 1, 12, -7, -11, -4, 7, -21, 3, 4, 16, 3, 6, -40, 12, -21, -8, 1, -6, -3, -30, -5, -5, -49, 0, 15, 13, -20, -2, -4, 40, -10, 18, -6, 4, -6, -13, -11, -19, -40, -12, 11, 2, -3, -4, -7, 29, -4, 18, -13, 16, -5, -16, -11, -11, -36, 7, 7, 3, 1, 19, -5, 36, -10, -1, -9, 3, -8, 13, -10, 3, -31, -16, 21, 26, -12, 2, -10, 34, -3, -9, 9, 5, 4, -13, -11, -4, -9, 14, -2, 10, 1, 21, -3, 38, -11, -1, 14, 20, -8, -3, -9, 7, -19, 16, 16, 26, 7, 12, 18, 37, 10, -16, 7, 17, -12, -10, 5, -18, -27, 10, 16, 27, 1, 6, 23, 29, -1, 9, -7, 10, -9, 3, -14, -38, -3, 15, 16, 29, -1, 13, -9, 30, -4, 3, -13, 20, -10, -6, -30, -29, -18, 13, 24, 18, 0, 11, 16, 20, -11, 22, -30, 4, 1, -9, -14, 0, -16, 31, 26, 17, -3, 11, 0, 6, -11, 9, 2, 5, -13, -6, -16, 1, -20, -12, -12, -4, 5, 
  50, -28, -24, -52, -13, 23, -35, 5, -29, -13, -54, -14, 27, 8, 19, -22, 15, -18, -39, -59, -26, 18, -66, 3, -48, -4, -54, -37, 9, 9, 15, -39, 15, 4, -13, -53, 5, 4, -76, 6, -6, -15, -48, -16, 31, -9, 22, -49, 17, 3, -14, -37, 0, 10, -45, 4, -12, -9, -2, -18, 18, -12, 24, -17, 22, 4, -4, -48, 10, 21, -49, 2, -17, 3, -46, -39, 4, -28, 5, -41, 25, -3, -2, -31, -19, 23, -17, 11, -53, -18, -61, -20, 15, -3, -5, -24, 13, -21, -14, -55, -9, 25, -42, 7, -37, -15, -30, -15, 15, 17, 10, -27, 9, -2, -17, -31, 3, 22, -31, 4, -35, -5, -22, -11, 7, 8, 4, -18, 17, -11, -31, -42, 5, 16, -18, -2, -38, -9, -43, -32, 13, -8, 1, -37, 21, -4, -19, -35, -11, 12, -35, 3, -38, 1, -32, -16, 15, 1, -2, -25, 18, -4, -42, -44, 25, 15, -44, 6, -4, -1, -33, -43, -4, -7, -6, -28, -2, -13, -21, -65, 5, 11, -45, 3, -6, -3, -31, -39, 2, -8, 1, -33, 18, -2, -21, -64, 10, -4, -66, 1, -18, 9, -39, -28, 9, 6, -3, -39, 10, -1, -10, -66, 7, 11, -33, 8, -22, -2, -11, -27, 5, 7, 10, -47, 22, -11, -33, -37, 10, 9, -17, -3, -19, 3, -19, -25, 14, 10, 11, -25, 0, -1, -28, -40, 7, 5, -51, 6, -17, -2, -36, -15, 14, -3, 5, -27, 10, 1, -17, -54, 24, 14, -50, 10, 15, 1, -30, -35, -13, -8, -5, -38, 2, -11, -15, -53, 11, 22, -48, -5, -15, 16, -52, -45, 8, -29, -9, -40, 12, -10, -29, -59, -21, 14, -19, 12, -22, -6, -37, -47, 2, -4, -12, -21, 15, -8, -36, -74, 16, 14, -41, 4, -21, 9, -30, -49, 5, -13, 4, -46, 18, -19, -29, -57, 6, 22, -43, 14, -37, 1, -45, -51, 0, -16, 3, -55, 10, 0, -58, -66, -5, 22, -40, 12, -54, 3, -67, -57, 15, -1, -1, -48, 15, -8, -38, -67, -2, 14, -35, 18, -31, -8, -28, -34, 6, -13, 5, -44, 5, -18, -24, -47, 22, 15, -49, 22, -30, 13, -33, -33, 8, -13, -10, -63, 21, -13, -44, -10, -25, 11, -56, 9, -44, 1, -76, -1, 10, -1, 12, -15, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 9,400 } };
const TfArray<1, float> quant7_scale = { 1, { 0.011017920449376106, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 201, 1143, -2267, 1788, -647, 301, -2174, -2921, -5073, -3923, -650, 326, -297, -4614, -2333, 3550, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00011427489516790956, 0.00014613124949391931, 0.00013739320274908096, 0.00011169281788170338, 0.00018551154062151909, 0.00010285408643539995, 0.00015672405424993485, 0.00010374488192610443, 8.1857040640898049e-05, 8.579157292842865e-05, 0.00014732230920344591, 0.00017231129459105432, 0.00017039000522345304, 7.9600067692808807e-05, 9.6130417659878731e-05, 0.00013336395204532892, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 3,94,28,-9,-76,0,-97,-18, -10,70,-71,-28,-61,2,-63,-63, -6,127,-20,-30,-75,-5,-108,-29, 
  /* [1][0][][] */ -10,-86,-39,-70,20,-28,-51,-20, -3,-127,-7,-113,25,-29,-12,20, 68,-108,-8,-120,-6,-37,-49,5, 
  /* [2][0][][] */ 8,24,10,53,-45,-106,-8,-33, 83,24,25,73,-39,-127,26,-16, -13,42,9,0,-29,-118,0,-56, 
  /* [3][0][][] */ 23,-57,80,-96,97,-25,-55,1, 9,-51,53,71,66,-13,-41,-10, -28,-3,127,-59,79,-32,11,-26, 
  /* [4][0][][] */ -14,-78,10,-22,11,-17,44,16, -9,-67,43,-15,18,14,40,-8, 3,-4,127,13,3,39,19,14, 
  /* [5][0][][] */ -109,22,-26,59,-25,-13,-55,20, -127,67,-67,-4,41,59,-100,-27, -125,89,-68,63,-15,23,-95,3, 
  /* [6][0][][] */ 58,17,115,45,-24,5,9,0, 13,3,76,-30,-16,-3,-5,-4, -9,-5,127,71,-16,1,-60,-40, 
  /* [7][0][][] */ -11,82,-5,-93,-5,50,126,12, 3,67,54,26,54,30,113,32, -3,32,-30,-43,63,17,127,-5, 
  /* [8][0][][] */ 72,-50,-2,0,21,-1,48,81, 30,-62,-127,14,28,-5,-88,116, 24,-31,-10,-18,15,58,-45,28, 
  /* [9][0][][] */ 27,-61,-17,106,-123,56,41,-23, 20,-45,-109,-18,-55,-3,-28,-15, 7,-20,-77,127,-5,62,-52,20, 
  /* [10][0][][] */ -84,-28,-82,127,77,-3,79,-1, -100,-30,-66,78,40,-7,39,16, -82,-28,-98,92,14,10,39,31, 
  /* [11][0][][] */ -10,-22,-39,57,121,-19,36,-18, -14,-47,59,11,127,-25,41,-11, -15,-35,-31,44,32,-25,21,-15, 
  /* [12][0][][] */ -12,29,-40,23,-5,-10,62,-20, -9,23,-58,-4,-17,6,14,-24, -6,72,127,-7,15,-19,0,-2, 
  /* [13][0][][] */ 42,28,-81,28,-112,-2,-35,-68, 127,84,-63,70,-103,-51,-57,-74, -16,102,126,81,-62,-66,-20,-44, 
  /* [14][0][][] */ -3,80,48,31,-44,6,-11,-69, -10,127,74,66,-64,-20,-5,-83, 40,-18,-34,88,-28,-48,-72,-81, 
  /* [15][0][][] */ 76,9,67,-4,-12,-60,-67,-36, 18,-18,86,-37,3,-57,-53,-39, -2,-27,127,-52,-23,-40,-58,-29, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0057111405767500401, 0.0073032327927649021, 0.0068665295839309692, 0.0055820955894887447, 0.0092713497579097748, 0.0051403604447841644, 0.0078326314687728882, 0.0051848799921572208, 0.004090986680239439, 0.0042876238003373146, 0.0073627582751214504, 0.0086116380989551544, 0.008515617810189724, 0.0039781895466148853, 0.0048043304122984409, 0.0066651585511863232, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { 5450, 9036, 3095, -7703, 13300, -29992, -1918, -22369, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 1.5350842659245245e-05, 1.921328657772392e-05, 1.964018156286329e-05, 1.7140842828666791e-05, 2.4095932531054132e-05, 1.317249916610308e-05, 1.7796890460886061e-05, 1.6051844795583747e-05, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*40] = { 
  /* [0][0][][] */ -2,-29,22,81,18,41,114,35,-37,-42,-17,-73,-35,-92,-70,-52,-53,-81,-41,16,75,-2,15,32,22,24,21,-27,37,24,11,73,86,64,82,17,28,-2,23,-3, -20,-72,-41,97,39,16,123,66,-8,-51,15,30,-127,-11,1,-25,1,-44,-38,93,13,34,19,4,-15,7,55,7,64,48,26,89,42,49,45,44,53,46,-32,-28, 17,-72,55,52,69,-23,16,-1,-45,-10,-81,-74,-61,-111,-66,-80,-93,-98,-6,22,71,-31,-15,2,-10,-28,-46,13,-11,28,-5,-17,53,42,24,-2,-13,43,21,-12, 
  /* [1][0][][] */ -83,45,86,75,49,127,10,92,34,-8,-17,-40,33,-23,44,-25,-60,-1,55,44,13,-25,55,29,5,-10,-32,-29,-25,5,-11,-63,-87,-44,-25,12,-67,-41,17,-70, 3,56,19,39,63,103,84,84,46,-27,-24,-28,12,-30,-35,5,-9,-17,-11,-9,12,31,16,10,-44,5,5,-34,-19,25,-27,-29,-79,-26,-38,-25,-66,-18,9,-87, 19,15,74,6,29,102,87,59,-20,-3,-40,12,39,-18,2,-25,-31,41,39,-10,-30,2,2,38,21,50,-24,25,-21,-40,8,-47,-63,-99,-55,16,-10,-5,-8,-14, 
  /* [2][0][][] */ 103,49,-69,-32,-62,-62,-43,-23,-115,-30,4,-51,14,-23,-88,-27,73,-37,-5,28,80,-18,-36,-20,-48,-67,-96,-98,-49,-58,-64,2,-70,11,11,-51,-2,-49,48,11, 115,-15,-31,-38,-23,-19,4,-54,-43,-76,31,-67,-68,8,-20,-39,-28,-58,1,44,44,7,-62,-39,-104,-23,-106,-74,-78,-65,-62,2,-79,-16,-66,-82,-82,-46,-25,-14, 65,-50,-73,1,72,58,93,61,38,15,26,46,43,88,53,49,62,27,96,41,127,64,10,69,39,-33,-8,-8,32,72,89,75,84,42,76,9,67,80,84,108, 
  /* [3][0][][] */ 59,43,71,9,67,-7,32,-9,100,-20,-9,-61,-57,8,84,28,99,96,72,-29,-32,-4,-10,16,19,30,59,13,123,37,76,65,-13,-57,-38,2,0,47,-49,13, -49,-58,-1,-24,9,-26,-16,-82,68,-16,-65,-76,-120,-60,85,-21,79,101,34,-35,-47,-45,-63,4,-10,-46,39,14,75,-11,84,79,-25,-85,-80,-31,13,12,44,-26, 53,12,87,1,47,31,-7,-44,7,21,19,-83,-127,-17,8,27,55,78,25,-24,-114,-40,-96,-30,-42,-31,31,40,86,-50,67,-16,-68,-107,-109,-39,9,-8,-45,-27, 
  /* [4][0][][] */ 108,-35,-102,-61,-68,-29,-82,-15,-35,-3,44,54,30,56,22,45,-22,-39,-41,-28,13,5,-45,13,24,-24,-27,36,41,-16,-5,22,-13,18,8,-22,3,-8,-13,26, 68,-11,-45,-122,-59,-47,-38,-73,-11,-8,57,46,0,53,-1,-2,-28,-6,-8,-17,12,39,-3,35,35,9,-23,-4,4,12,-24,36,-30,-8,13,10,-7,-33,-32,12, 127,-46,-125,-69,-91,-50,-63,-43,-58,-18,47,57,30,66,-12,15,-34,-41,-19,-5,28,18,-31,-7,34,-50,-54,0,-7,10,23,-32,27,29,-36,19,38,-19,-11,-18, 
  /* [5][0][][] */ -21,51,-54,12,-21,-54,-58,-13,18,49,5,117,99,107,38,42,-28,14,20,15,-58,9,71,-40,-12,-103,4,7,-44,17,-81,81,45,-42,34,-4,-4,15,17,-14, -85,-15,-10,41,-21,-69,-48,-14,2,-18,-8,30,95,127,46,51,34,-4,82,33,12,-9,48,59,-52,-25,-49,24,15,-21,-46,17,-8,1,-36,-23,23,84,-48,-45, 37,-12,19,-26,-21,-37,-22,-30,40,63,67,93,82,118,26,59,63,-36,25,-87,0,70,-14,45,-20,-85,38,21,13,-58,-9,77,15,-87,-45,-57,4,8,-6,60, 
  /* [6][0][][] */ 16,36,-25,-25,-49,-26,-32,-52,-36,-62,-39,-15,-43,-5,63,18,43,127,80,5,-33,5,-17,9,-4,12,62,12,5,-33,3,-32,16,-82,-88,-14,-69,2,-26,-26, 5,-21,32,-19,-54,37,12,15,5,9,-29,21,-58,32,92,18,35,53,102,46,-31,-62,-23,-14,-30,59,14,22,-29,-31,37,40,-40,-14,-83,-6,15,2,-32,-12, -10,-41,-69,-71,-96,-75,-48,-41,32,2,-61,-62,-43,-36,22,-17,77,39,69,-18,-29,-69,10,-19,18,2,-31,-8,-26,20,-8,5,-12,-17,-52,3,-55,-67,-45,9, 
  /* [7][0][][] */ 36,-52,-15,41,5,-41,-50,14,-29,-1,75,13,79,-35,-16,50,34,38,-19,-16,-29,18,-65,-32,9,-56,-34,18,24,25,4,12,88,62,-3,-38,26,-9,-20,-10, -25,-84,-80,3,-80,-89,1,41,2,57,77,19,72,12,-33,27,12,-15,8,-37,-16,22,5,3,-24,-53,-44,8,7,-34,-25,30,90,34,41,2,16,24,-51,22, -50,-127,-102,1,-73,-86,-16,-2,-23,50,30,63,22,37,27,76,54,31,30,-7,-17,37,9,18,-56,10,-13,18,-22,14,37,78,23,6,-27,11,-31,-19,-13,33, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0039298157207667828, 0.0049186013638973236, 0.0050278864800930023, 0.0043880557641386986, 0.0061685587279498577, 0.0033721597865223885, 0.0045560039579868317, 0.0041092722676694393, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.020009119063615799, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.020009119063615799, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.020009119063615799, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.020009119063615799, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.035339090973138809, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.035339090973138809, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.035339090973138809, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.035339090973138809, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,9 } };
const TfArray<1, float> quant21_scale = { 1, { 0.52759689092636108, } };
const TfArray<1, int> quant21_zero = { 1, { 58 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,9 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 36, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 9, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
